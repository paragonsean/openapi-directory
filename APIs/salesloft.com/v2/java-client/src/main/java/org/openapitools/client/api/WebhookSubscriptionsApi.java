/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Subscription;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WebhookSubscriptionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WebhookSubscriptionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WebhookSubscriptionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v2WebhookSubscriptionsGet
     * @param enabled Filters webhook subscriptions by whether is enabled or not. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2WebhookSubscriptionsGetCall(Boolean enabled, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/webhook_subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (enabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enabled", enabled));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2WebhookSubscriptionsGetValidateBeforeCall(Boolean enabled, final ApiCallback _callback) throws ApiException {
        return v2WebhookSubscriptionsGetCall(enabled, _callback);

    }

    /**
     * List webhook subscriptions
     * Fetches all of the customer&#39;s webhook subscriptions for your application.
     * @param enabled Filters webhook subscriptions by whether is enabled or not. (optional)
     * @return List&lt;Subscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<Subscription> v2WebhookSubscriptionsGet(Boolean enabled) throws ApiException {
        ApiResponse<List<Subscription>> localVarResp = v2WebhookSubscriptionsGetWithHttpInfo(enabled);
        return localVarResp.getData();
    }

    /**
     * List webhook subscriptions
     * Fetches all of the customer&#39;s webhook subscriptions for your application.
     * @param enabled Filters webhook subscriptions by whether is enabled or not. (optional)
     * @return ApiResponse&lt;List&lt;Subscription&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Subscription>> v2WebhookSubscriptionsGetWithHttpInfo(Boolean enabled) throws ApiException {
        okhttp3.Call localVarCall = v2WebhookSubscriptionsGetValidateBeforeCall(enabled, null);
        Type localVarReturnType = new TypeToken<List<Subscription>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List webhook subscriptions (asynchronously)
     * Fetches all of the customer&#39;s webhook subscriptions for your application.
     * @param enabled Filters webhook subscriptions by whether is enabled or not. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2WebhookSubscriptionsGetAsync(Boolean enabled, final ApiCallback<List<Subscription>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2WebhookSubscriptionsGetValidateBeforeCall(enabled, _callback);
        Type localVarReturnType = new TypeToken<List<Subscription>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2WebhookSubscriptionsIdDelete
     * @param id The id of the Webhook Subscription to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> This webhook subscription has been deleted successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2WebhookSubscriptionsIdDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/webhook_subscriptions/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2WebhookSubscriptionsIdDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v2WebhookSubscriptionsIdDelete(Async)");
        }

        return v2WebhookSubscriptionsIdDeleteCall(id, _callback);

    }

    /**
     * Delete a webhook subscription
     * Deletes a webhook subscription. This operation is not reversible without contacting support. This operation can be called multiple times successfully.
     * @param id The id of the Webhook Subscription to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> This webhook subscription has been deleted successfully </td><td>  -  </td></tr>
     </table>
     */
    public void v2WebhookSubscriptionsIdDelete(Integer id) throws ApiException {
        v2WebhookSubscriptionsIdDeleteWithHttpInfo(id);
    }

    /**
     * Delete a webhook subscription
     * Deletes a webhook subscription. This operation is not reversible without contacting support. This operation can be called multiple times successfully.
     * @param id The id of the Webhook Subscription to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> This webhook subscription has been deleted successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v2WebhookSubscriptionsIdDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = v2WebhookSubscriptionsIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a webhook subscription (asynchronously)
     * Deletes a webhook subscription. This operation is not reversible without contacting support. This operation can be called multiple times successfully.
     * @param id The id of the Webhook Subscription to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> This webhook subscription has been deleted successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2WebhookSubscriptionsIdDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2WebhookSubscriptionsIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2WebhookSubscriptionsIdGet
     * @param id The id for the Webhook Subscription (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2WebhookSubscriptionsIdGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/webhook_subscriptions/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2WebhookSubscriptionsIdGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v2WebhookSubscriptionsIdGet(Async)");
        }

        return v2WebhookSubscriptionsIdGetCall(id, _callback);

    }

    /**
     * Fetch a webhook subscription
     * Fetches a webhook subscription, by ID only.
     * @param id The id for the Webhook Subscription (required)
     * @return Subscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Subscription v2WebhookSubscriptionsIdGet(Integer id) throws ApiException {
        ApiResponse<Subscription> localVarResp = v2WebhookSubscriptionsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Fetch a webhook subscription
     * Fetches a webhook subscription, by ID only.
     * @param id The id for the Webhook Subscription (required)
     * @return ApiResponse&lt;Subscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Subscription> v2WebhookSubscriptionsIdGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = v2WebhookSubscriptionsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a webhook subscription (asynchronously)
     * Fetches a webhook subscription, by ID only.
     * @param id The id for the Webhook Subscription (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2WebhookSubscriptionsIdGetAsync(Integer id, final ApiCallback<Subscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2WebhookSubscriptionsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2WebhookSubscriptionsIdPut
     * @param id The Webhook Suscription id to update (required)
     * @param enabled Enable or disable the webhook subscription (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2WebhookSubscriptionsIdPutCall(Integer id, Boolean enabled, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/webhook_subscriptions/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (enabled != null) {
            localVarFormParams.put("enabled", enabled);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2WebhookSubscriptionsIdPutValidateBeforeCall(Integer id, Boolean enabled, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v2WebhookSubscriptionsIdPut(Async)");
        }

        return v2WebhookSubscriptionsIdPutCall(id, enabled, _callback);

    }

    /**
     * Update a webhook subscription
     * Updates a webhook subscription. Request must be made with a valid Oauth token or API key.
     * @param id The Webhook Suscription id to update (required)
     * @param enabled Enable or disable the webhook subscription (optional)
     * @return Subscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Subscription v2WebhookSubscriptionsIdPut(Integer id, Boolean enabled) throws ApiException {
        ApiResponse<Subscription> localVarResp = v2WebhookSubscriptionsIdPutWithHttpInfo(id, enabled);
        return localVarResp.getData();
    }

    /**
     * Update a webhook subscription
     * Updates a webhook subscription. Request must be made with a valid Oauth token or API key.
     * @param id The Webhook Suscription id to update (required)
     * @param enabled Enable or disable the webhook subscription (optional)
     * @return ApiResponse&lt;Subscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Subscription> v2WebhookSubscriptionsIdPutWithHttpInfo(Integer id, Boolean enabled) throws ApiException {
        okhttp3.Call localVarCall = v2WebhookSubscriptionsIdPutValidateBeforeCall(id, enabled, null);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a webhook subscription (asynchronously)
     * Updates a webhook subscription. Request must be made with a valid Oauth token or API key.
     * @param id The Webhook Suscription id to update (required)
     * @param enabled Enable or disable the webhook subscription (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2WebhookSubscriptionsIdPutAsync(Integer id, Boolean enabled, final ApiCallback<Subscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2WebhookSubscriptionsIdPutValidateBeforeCall(id, enabled, _callback);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2WebhookSubscriptionsPost
     * @param callbackToken Any string to be used as a shared secret when subscription events are published. SalesLoft will send the value of this callback_token in the payload of each event so the receiver may verify it matches the original value. This ensures webhook events are being delivered by SalesLoft. (required)
     * @param callbackUrl URL for your callback handler (required)
     * @param eventType Type of event the subscription is for. Visit the \\\&quot;Event Types\\\&quot; section of the webhooks page to find a list of supported event types. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2WebhookSubscriptionsPostCall(String callbackToken, String callbackUrl, String eventType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/webhook_subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callbackToken != null) {
            localVarFormParams.put("callback_token", callbackToken);
        }

        if (callbackUrl != null) {
            localVarFormParams.put("callback_url", callbackUrl);
        }

        if (eventType != null) {
            localVarFormParams.put("event_type", eventType);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2WebhookSubscriptionsPostValidateBeforeCall(String callbackToken, String callbackUrl, String eventType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'callbackToken' is set
        if (callbackToken == null) {
            throw new ApiException("Missing the required parameter 'callbackToken' when calling v2WebhookSubscriptionsPost(Async)");
        }

        // verify the required parameter 'callbackUrl' is set
        if (callbackUrl == null) {
            throw new ApiException("Missing the required parameter 'callbackUrl' when calling v2WebhookSubscriptionsPost(Async)");
        }

        // verify the required parameter 'eventType' is set
        if (eventType == null) {
            throw new ApiException("Missing the required parameter 'eventType' when calling v2WebhookSubscriptionsPost(Async)");
        }

        return v2WebhookSubscriptionsPostCall(callbackToken, callbackUrl, eventType, _callback);

    }

    /**
     * Create a webhook subscription
     * Creates a webhook subscription. Visit the &lt;a href&#x3D;\&quot;/webhooks.html\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;webhooks page&lt;/a&gt; for additional details and a list of available webhooks. Request must be made with a valid Oauth token or API key.
     * @param callbackToken Any string to be used as a shared secret when subscription events are published. SalesLoft will send the value of this callback_token in the payload of each event so the receiver may verify it matches the original value. This ensures webhook events are being delivered by SalesLoft. (required)
     * @param callbackUrl URL for your callback handler (required)
     * @param eventType Type of event the subscription is for. Visit the \\\&quot;Event Types\\\&quot; section of the webhooks page to find a list of supported event types. (required)
     * @return Subscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Subscription v2WebhookSubscriptionsPost(String callbackToken, String callbackUrl, String eventType) throws ApiException {
        ApiResponse<Subscription> localVarResp = v2WebhookSubscriptionsPostWithHttpInfo(callbackToken, callbackUrl, eventType);
        return localVarResp.getData();
    }

    /**
     * Create a webhook subscription
     * Creates a webhook subscription. Visit the &lt;a href&#x3D;\&quot;/webhooks.html\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;webhooks page&lt;/a&gt; for additional details and a list of available webhooks. Request must be made with a valid Oauth token or API key.
     * @param callbackToken Any string to be used as a shared secret when subscription events are published. SalesLoft will send the value of this callback_token in the payload of each event so the receiver may verify it matches the original value. This ensures webhook events are being delivered by SalesLoft. (required)
     * @param callbackUrl URL for your callback handler (required)
     * @param eventType Type of event the subscription is for. Visit the \\\&quot;Event Types\\\&quot; section of the webhooks page to find a list of supported event types. (required)
     * @return ApiResponse&lt;Subscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Subscription> v2WebhookSubscriptionsPostWithHttpInfo(String callbackToken, String callbackUrl, String eventType) throws ApiException {
        okhttp3.Call localVarCall = v2WebhookSubscriptionsPostValidateBeforeCall(callbackToken, callbackUrl, eventType, null);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a webhook subscription (asynchronously)
     * Creates a webhook subscription. Visit the &lt;a href&#x3D;\&quot;/webhooks.html\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;webhooks page&lt;/a&gt; for additional details and a list of available webhooks. Request must be made with a valid Oauth token or API key.
     * @param callbackToken Any string to be used as a shared secret when subscription events are published. SalesLoft will send the value of this callback_token in the payload of each event so the receiver may verify it matches the original value. This ensures webhook events are being delivered by SalesLoft. (required)
     * @param callbackUrl URL for your callback handler (required)
     * @param eventType Type of event the subscription is for. Visit the \\\&quot;Event Types\\\&quot; section of the webhooks page to find a list of supported event types. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2WebhookSubscriptionsPostAsync(String callbackToken, String callbackUrl, String eventType, final ApiCallback<Subscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2WebhookSubscriptionsPostValidateBeforeCall(callbackToken, callbackUrl, eventType, _callback);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
