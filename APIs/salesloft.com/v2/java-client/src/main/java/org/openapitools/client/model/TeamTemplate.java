/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EmbeddedResource;
import org.openapitools.client.model.TeamTemplateCounts;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TeamTemplate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:54.467506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TeamTemplate {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Object links;

  public static final String SERIALIZED_NAME_ARCHIVED_AT = "archived_at";
  @SerializedName(SERIALIZED_NAME_ARCHIVED_AT)
  private OffsetDateTime archivedAt;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_BODY_PREVIEW = "body_preview";
  @SerializedName(SERIALIZED_NAME_BODY_PREVIEW)
  private String bodyPreview;

  public static final String SERIALIZED_NAME_CLICK_TRACKING_ENABLED = "click_tracking_enabled";
  @SerializedName(SERIALIZED_NAME_CLICK_TRACKING_ENABLED)
  private Boolean clickTrackingEnabled;

  public static final String SERIALIZED_NAME_COUNTS = "counts";
  @SerializedName(SERIALIZED_NAME_COUNTS)
  private TeamTemplateCounts counts;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_AT = "last_modified_at";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_AT)
  private OffsetDateTime lastModifiedAt;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_USER = "last_modified_user";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_USER)
  private EmbeddedResource lastModifiedUser;

  public static final String SERIALIZED_NAME_LAST_USED_AT = "last_used_at";
  @SerializedName(SERIALIZED_NAME_LAST_USED_AT)
  private OffsetDateTime lastUsedAt;

  public static final String SERIALIZED_NAME_OPEN_TRACKING_ENABLED = "open_tracking_enabled";
  @SerializedName(SERIALIZED_NAME_OPEN_TRACKING_ENABLED)
  private Boolean openTrackingEnabled;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public TeamTemplate() {
  }

  public TeamTemplate links(Object links) {
    this.links = links;
    return this;
  }

  /**
   * Links to attachments resource for this template 
   * @return links
   */
  @javax.annotation.Nullable
  public Object getLinks() {
    return links;
  }

  public void setLinks(Object links) {
    this.links = links;
  }


  public TeamTemplate archivedAt(OffsetDateTime archivedAt) {
    this.archivedAt = archivedAt;
    return this;
  }

  /**
   * Datetime of when the team template was archived, if archived
   * @return archivedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getArchivedAt() {
    return archivedAt;
  }

  public void setArchivedAt(OffsetDateTime archivedAt) {
    this.archivedAt = archivedAt;
  }


  public TeamTemplate body(String body) {
    this.body = body;
    return this;
  }

  /**
   * Body of the team template
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public TeamTemplate bodyPreview(String bodyPreview) {
    this.bodyPreview = bodyPreview;
    return this;
  }

  /**
   * A plain text version of the first 100 characters of the body of the team template
   * @return bodyPreview
   */
  @javax.annotation.Nullable
  public String getBodyPreview() {
    return bodyPreview;
  }

  public void setBodyPreview(String bodyPreview) {
    this.bodyPreview = bodyPreview;
  }


  public TeamTemplate clickTrackingEnabled(Boolean clickTrackingEnabled) {
    this.clickTrackingEnabled = clickTrackingEnabled;
    return this;
  }

  /**
   * Whether click tracking is enabled for this team template
   * @return clickTrackingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getClickTrackingEnabled() {
    return clickTrackingEnabled;
  }

  public void setClickTrackingEnabled(Boolean clickTrackingEnabled) {
    this.clickTrackingEnabled = clickTrackingEnabled;
  }


  public TeamTemplate counts(TeamTemplateCounts counts) {
    this.counts = counts;
    return this;
  }

  /**
   * Get counts
   * @return counts
   */
  @javax.annotation.Nullable
  public TeamTemplateCounts getCounts() {
    return counts;
  }

  public void setCounts(TeamTemplateCounts counts) {
    this.counts = counts;
  }


  public TeamTemplate createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Datetime of when the team template was created
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public TeamTemplate id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID of team template
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TeamTemplate lastModifiedAt(OffsetDateTime lastModifiedAt) {
    this.lastModifiedAt = lastModifiedAt;
    return this;
  }

  /**
   * Datetime of when the team template was last modified
   * @return lastModifiedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedAt() {
    return lastModifiedAt;
  }

  public void setLastModifiedAt(OffsetDateTime lastModifiedAt) {
    this.lastModifiedAt = lastModifiedAt;
  }


  public TeamTemplate lastModifiedUser(EmbeddedResource lastModifiedUser) {
    this.lastModifiedUser = lastModifiedUser;
    return this;
  }

  /**
   * Get lastModifiedUser
   * @return lastModifiedUser
   */
  @javax.annotation.Nullable
  public EmbeddedResource getLastModifiedUser() {
    return lastModifiedUser;
  }

  public void setLastModifiedUser(EmbeddedResource lastModifiedUser) {
    this.lastModifiedUser = lastModifiedUser;
  }


  public TeamTemplate lastUsedAt(OffsetDateTime lastUsedAt) {
    this.lastUsedAt = lastUsedAt;
    return this;
  }

  /**
   * Datetime of when the team template was last used
   * @return lastUsedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUsedAt() {
    return lastUsedAt;
  }

  public void setLastUsedAt(OffsetDateTime lastUsedAt) {
    this.lastUsedAt = lastUsedAt;
  }


  public TeamTemplate openTrackingEnabled(Boolean openTrackingEnabled) {
    this.openTrackingEnabled = openTrackingEnabled;
    return this;
  }

  /**
   * Whether open tracking is enabled for this team template
   * @return openTrackingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getOpenTrackingEnabled() {
    return openTrackingEnabled;
  }

  public void setOpenTrackingEnabled(Boolean openTrackingEnabled) {
    this.openTrackingEnabled = openTrackingEnabled;
  }


  public TeamTemplate subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Subject of the team template
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public TeamTemplate tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public TeamTemplate addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * All tags applied to this team template
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public TeamTemplate title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of the team template
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public TeamTemplate updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Datetime of when the team template was last updated
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TeamTemplate teamTemplate = (TeamTemplate) o;
    return Objects.equals(this.links, teamTemplate.links) &&
        Objects.equals(this.archivedAt, teamTemplate.archivedAt) &&
        Objects.equals(this.body, teamTemplate.body) &&
        Objects.equals(this.bodyPreview, teamTemplate.bodyPreview) &&
        Objects.equals(this.clickTrackingEnabled, teamTemplate.clickTrackingEnabled) &&
        Objects.equals(this.counts, teamTemplate.counts) &&
        Objects.equals(this.createdAt, teamTemplate.createdAt) &&
        Objects.equals(this.id, teamTemplate.id) &&
        Objects.equals(this.lastModifiedAt, teamTemplate.lastModifiedAt) &&
        Objects.equals(this.lastModifiedUser, teamTemplate.lastModifiedUser) &&
        Objects.equals(this.lastUsedAt, teamTemplate.lastUsedAt) &&
        Objects.equals(this.openTrackingEnabled, teamTemplate.openTrackingEnabled) &&
        Objects.equals(this.subject, teamTemplate.subject) &&
        Objects.equals(this.tags, teamTemplate.tags) &&
        Objects.equals(this.title, teamTemplate.title) &&
        Objects.equals(this.updatedAt, teamTemplate.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, archivedAt, body, bodyPreview, clickTrackingEnabled, counts, createdAt, id, lastModifiedAt, lastModifiedUser, lastUsedAt, openTrackingEnabled, subject, tags, title, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TeamTemplate {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    archivedAt: ").append(toIndentedString(archivedAt)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    bodyPreview: ").append(toIndentedString(bodyPreview)).append("\n");
    sb.append("    clickTrackingEnabled: ").append(toIndentedString(clickTrackingEnabled)).append("\n");
    sb.append("    counts: ").append(toIndentedString(counts)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastModifiedAt: ").append(toIndentedString(lastModifiedAt)).append("\n");
    sb.append("    lastModifiedUser: ").append(toIndentedString(lastModifiedUser)).append("\n");
    sb.append("    lastUsedAt: ").append(toIndentedString(lastUsedAt)).append("\n");
    sb.append("    openTrackingEnabled: ").append(toIndentedString(openTrackingEnabled)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("archived_at");
    openapiFields.add("body");
    openapiFields.add("body_preview");
    openapiFields.add("click_tracking_enabled");
    openapiFields.add("counts");
    openapiFields.add("created_at");
    openapiFields.add("id");
    openapiFields.add("last_modified_at");
    openapiFields.add("last_modified_user");
    openapiFields.add("last_used_at");
    openapiFields.add("open_tracking_enabled");
    openapiFields.add("subject");
    openapiFields.add("tags");
    openapiFields.add("title");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TeamTemplate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TeamTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TeamTemplate is not found in the empty JSON string", TeamTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TeamTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TeamTemplate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("body_preview") != null && !jsonObj.get("body_preview").isJsonNull()) && !jsonObj.get("body_preview").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body_preview` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body_preview").toString()));
      }
      // validate the optional field `counts`
      if (jsonObj.get("counts") != null && !jsonObj.get("counts").isJsonNull()) {
        TeamTemplateCounts.validateJsonElement(jsonObj.get("counts"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `last_modified_user`
      if (jsonObj.get("last_modified_user") != null && !jsonObj.get("last_modified_user").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("last_modified_user"));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TeamTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TeamTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TeamTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TeamTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<TeamTemplate>() {
           @Override
           public void write(JsonWriter out, TeamTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TeamTemplate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TeamTemplate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TeamTemplate
   * @throws IOException if the JSON string is invalid with respect to TeamTemplate
   */
  public static TeamTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TeamTemplate.class);
  }

  /**
   * Convert an instance of TeamTemplate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

