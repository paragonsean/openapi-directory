/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Account;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v2AccountsIdJsonDelete
     * @param id Account ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The Account has been deleted successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2AccountsIdJsonDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/accounts/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2AccountsIdJsonDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v2AccountsIdJsonDelete(Async)");
        }

        return v2AccountsIdJsonDeleteCall(id, _callback);

    }

    /**
     * Delete an account
     * Deletes an account. This operation is not reversible without contacting support. This operation can be called multiple times successfully.  Deleting an account will remove all connected people from that account. 
     * @param id Account ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The Account has been deleted successfully </td><td>  -  </td></tr>
     </table>
     */
    public void v2AccountsIdJsonDelete(String id) throws ApiException {
        v2AccountsIdJsonDeleteWithHttpInfo(id);
    }

    /**
     * Delete an account
     * Deletes an account. This operation is not reversible without contacting support. This operation can be called multiple times successfully.  Deleting an account will remove all connected people from that account. 
     * @param id Account ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The Account has been deleted successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v2AccountsIdJsonDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = v2AccountsIdJsonDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an account (asynchronously)
     * Deletes an account. This operation is not reversible without contacting support. This operation can be called multiple times successfully.  Deleting an account will remove all connected people from that account. 
     * @param id Account ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The Account has been deleted successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2AccountsIdJsonDeleteAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2AccountsIdJsonDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2AccountsIdJsonGet
     * @param id Account ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2AccountsIdJsonGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/accounts/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2AccountsIdJsonGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v2AccountsIdJsonGet(Async)");
        }

        return v2AccountsIdJsonGetCall(id, _callback);

    }

    /**
     * Fetch an account
     * Fetches an account, by ID only. 
     * @param id Account ID (required)
     * @return Account
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Account v2AccountsIdJsonGet(String id) throws ApiException {
        ApiResponse<Account> localVarResp = v2AccountsIdJsonGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Fetch an account
     * Fetches an account, by ID only. 
     * @param id Account ID (required)
     * @return ApiResponse&lt;Account&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Account> v2AccountsIdJsonGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = v2AccountsIdJsonGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch an account (asynchronously)
     * Fetches an account, by ID only. 
     * @param id Account ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2AccountsIdJsonGetAsync(String id, final ApiCallback<Account> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2AccountsIdJsonGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2AccountsIdJsonPut
     * @param id Account ID (required)
     * @param domain Website domain, not a fully qualified URI (required)
     * @param name Account Full Name (required)
     * @param accountTierId ID of the Account Tier for this Account (optional)
     * @param archived Whether this Account should be archived or not. Setting this to true sets archived_at to the current time if it&#39;s not already set. Setting this to false will set archived_at to null (optional)
     * @param city City (optional)
     * @param companyStageId ID of the CompanyStage assigned to this Account (optional)
     * @param companyType Type of the Account&#39;s company (optional)
     * @param conversationalName Conversational name of the Account (optional)
     * @param country Country (optional)
     * @param crmId Requires Salesforce.  ID of the person in your external CRM. You must provide a crm_id_type if this is included.  Validations will be applied to the crm_id depending on the crm_id_type. A \\\&quot;salesforce\\\&quot; ID must be exactly 18 characters. A \\\&quot;salesforce\\\&quot; ID must be either an Account (001) object. The type will be validated using the 18 character ID.  This field can only be used if your application or API key has the \\\&quot;account:set_crm_id\\\&quot; scope.   (optional)
     * @param crmIdType The CRM that the provided crm_id is for. Must be one of: salesforce (optional)
     * @param customFields Custom fields are defined by the user&#39;s team. Only fields with values are presented in the API. (optional)
     * @param description Description (optional)
     * @param doNotContact Whether this company can not be contacted. Values are either true or false. Setting this to true will remove all associated people from all active communications (optional)
     * @param founded Date or year of founding (optional)
     * @param industry Industry (optional)
     * @param linkedinUrl Full LinkedIn url (optional)
     * @param locale Time locale (optional)
     * @param ownerId ID of the User that owns this Account (optional)
     * @param phone Phone number without formatting (optional)
     * @param postalCode Postal code (optional)
     * @param revenueRange Estimated revenue range (optional)
     * @param size Estimated number of people in employment (optional)
     * @param state State (optional)
     * @param street Street name and number (optional)
     * @param tags All tags applied to this Account (optional)
     * @param twitterHandle Twitter handle, with @ (optional)
     * @param website Website (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2AccountsIdJsonPutCall(String id, String domain, String name, Integer accountTierId, Boolean archived, String city, Integer companyStageId, String companyType, String conversationalName, String country, String crmId, String crmIdType, List<Object> customFields, String description, Boolean doNotContact, String founded, String industry, String linkedinUrl, String locale, Integer ownerId, String phone, String postalCode, String revenueRange, String size, String state, String street, List<String> tags, String twitterHandle, String website, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/accounts/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountTierId != null) {
            localVarFormParams.put("account_tier_id", accountTierId);
        }

        if (archived != null) {
            localVarFormParams.put("archived", archived);
        }

        if (city != null) {
            localVarFormParams.put("city", city);
        }

        if (companyStageId != null) {
            localVarFormParams.put("company_stage_id", companyStageId);
        }

        if (companyType != null) {
            localVarFormParams.put("company_type", companyType);
        }

        if (conversationalName != null) {
            localVarFormParams.put("conversational_name", conversationalName);
        }

        if (country != null) {
            localVarFormParams.put("country", country);
        }

        if (crmId != null) {
            localVarFormParams.put("crm_id", crmId);
        }

        if (crmIdType != null) {
            localVarFormParams.put("crm_id_type", crmIdType);
        }

        if (customFields != null) {
            localVarFormParams.put("custom_fields", customFields);
        }

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (doNotContact != null) {
            localVarFormParams.put("do_not_contact", doNotContact);
        }

        if (domain != null) {
            localVarFormParams.put("domain", domain);
        }

        if (founded != null) {
            localVarFormParams.put("founded", founded);
        }

        if (industry != null) {
            localVarFormParams.put("industry", industry);
        }

        if (linkedinUrl != null) {
            localVarFormParams.put("linkedin_url", linkedinUrl);
        }

        if (locale != null) {
            localVarFormParams.put("locale", locale);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (ownerId != null) {
            localVarFormParams.put("owner_id", ownerId);
        }

        if (phone != null) {
            localVarFormParams.put("phone", phone);
        }

        if (postalCode != null) {
            localVarFormParams.put("postal_code", postalCode);
        }

        if (revenueRange != null) {
            localVarFormParams.put("revenue_range", revenueRange);
        }

        if (size != null) {
            localVarFormParams.put("size", size);
        }

        if (state != null) {
            localVarFormParams.put("state", state);
        }

        if (street != null) {
            localVarFormParams.put("street", street);
        }

        if (tags != null) {
            localVarFormParams.put("tags", tags);
        }

        if (twitterHandle != null) {
            localVarFormParams.put("twitter_handle", twitterHandle);
        }

        if (website != null) {
            localVarFormParams.put("website", website);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2AccountsIdJsonPutValidateBeforeCall(String id, String domain, String name, Integer accountTierId, Boolean archived, String city, Integer companyStageId, String companyType, String conversationalName, String country, String crmId, String crmIdType, List<Object> customFields, String description, Boolean doNotContact, String founded, String industry, String linkedinUrl, String locale, Integer ownerId, String phone, String postalCode, String revenueRange, String size, String state, String street, List<String> tags, String twitterHandle, String website, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v2AccountsIdJsonPut(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling v2AccountsIdJsonPut(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling v2AccountsIdJsonPut(Async)");
        }

        return v2AccountsIdJsonPutCall(id, domain, name, accountTierId, archived, city, companyStageId, companyType, conversationalName, country, crmId, crmIdType, customFields, description, doNotContact, founded, industry, linkedinUrl, locale, ownerId, phone, postalCode, revenueRange, size, state, street, tags, twitterHandle, website, _callback);

    }

    /**
     * Update an existing Account
     * Updates an account.  \&quot;domain\&quot; must be unique on the current team. 
     * @param id Account ID (required)
     * @param domain Website domain, not a fully qualified URI (required)
     * @param name Account Full Name (required)
     * @param accountTierId ID of the Account Tier for this Account (optional)
     * @param archived Whether this Account should be archived or not. Setting this to true sets archived_at to the current time if it&#39;s not already set. Setting this to false will set archived_at to null (optional)
     * @param city City (optional)
     * @param companyStageId ID of the CompanyStage assigned to this Account (optional)
     * @param companyType Type of the Account&#39;s company (optional)
     * @param conversationalName Conversational name of the Account (optional)
     * @param country Country (optional)
     * @param crmId Requires Salesforce.  ID of the person in your external CRM. You must provide a crm_id_type if this is included.  Validations will be applied to the crm_id depending on the crm_id_type. A \\\&quot;salesforce\\\&quot; ID must be exactly 18 characters. A \\\&quot;salesforce\\\&quot; ID must be either an Account (001) object. The type will be validated using the 18 character ID.  This field can only be used if your application or API key has the \\\&quot;account:set_crm_id\\\&quot; scope.   (optional)
     * @param crmIdType The CRM that the provided crm_id is for. Must be one of: salesforce (optional)
     * @param customFields Custom fields are defined by the user&#39;s team. Only fields with values are presented in the API. (optional)
     * @param description Description (optional)
     * @param doNotContact Whether this company can not be contacted. Values are either true or false. Setting this to true will remove all associated people from all active communications (optional)
     * @param founded Date or year of founding (optional)
     * @param industry Industry (optional)
     * @param linkedinUrl Full LinkedIn url (optional)
     * @param locale Time locale (optional)
     * @param ownerId ID of the User that owns this Account (optional)
     * @param phone Phone number without formatting (optional)
     * @param postalCode Postal code (optional)
     * @param revenueRange Estimated revenue range (optional)
     * @param size Estimated number of people in employment (optional)
     * @param state State (optional)
     * @param street Street name and number (optional)
     * @param tags All tags applied to this Account (optional)
     * @param twitterHandle Twitter handle, with @ (optional)
     * @param website Website (optional)
     * @return Account
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Account v2AccountsIdJsonPut(String id, String domain, String name, Integer accountTierId, Boolean archived, String city, Integer companyStageId, String companyType, String conversationalName, String country, String crmId, String crmIdType, List<Object> customFields, String description, Boolean doNotContact, String founded, String industry, String linkedinUrl, String locale, Integer ownerId, String phone, String postalCode, String revenueRange, String size, String state, String street, List<String> tags, String twitterHandle, String website) throws ApiException {
        ApiResponse<Account> localVarResp = v2AccountsIdJsonPutWithHttpInfo(id, domain, name, accountTierId, archived, city, companyStageId, companyType, conversationalName, country, crmId, crmIdType, customFields, description, doNotContact, founded, industry, linkedinUrl, locale, ownerId, phone, postalCode, revenueRange, size, state, street, tags, twitterHandle, website);
        return localVarResp.getData();
    }

    /**
     * Update an existing Account
     * Updates an account.  \&quot;domain\&quot; must be unique on the current team. 
     * @param id Account ID (required)
     * @param domain Website domain, not a fully qualified URI (required)
     * @param name Account Full Name (required)
     * @param accountTierId ID of the Account Tier for this Account (optional)
     * @param archived Whether this Account should be archived or not. Setting this to true sets archived_at to the current time if it&#39;s not already set. Setting this to false will set archived_at to null (optional)
     * @param city City (optional)
     * @param companyStageId ID of the CompanyStage assigned to this Account (optional)
     * @param companyType Type of the Account&#39;s company (optional)
     * @param conversationalName Conversational name of the Account (optional)
     * @param country Country (optional)
     * @param crmId Requires Salesforce.  ID of the person in your external CRM. You must provide a crm_id_type if this is included.  Validations will be applied to the crm_id depending on the crm_id_type. A \\\&quot;salesforce\\\&quot; ID must be exactly 18 characters. A \\\&quot;salesforce\\\&quot; ID must be either an Account (001) object. The type will be validated using the 18 character ID.  This field can only be used if your application or API key has the \\\&quot;account:set_crm_id\\\&quot; scope.   (optional)
     * @param crmIdType The CRM that the provided crm_id is for. Must be one of: salesforce (optional)
     * @param customFields Custom fields are defined by the user&#39;s team. Only fields with values are presented in the API. (optional)
     * @param description Description (optional)
     * @param doNotContact Whether this company can not be contacted. Values are either true or false. Setting this to true will remove all associated people from all active communications (optional)
     * @param founded Date or year of founding (optional)
     * @param industry Industry (optional)
     * @param linkedinUrl Full LinkedIn url (optional)
     * @param locale Time locale (optional)
     * @param ownerId ID of the User that owns this Account (optional)
     * @param phone Phone number without formatting (optional)
     * @param postalCode Postal code (optional)
     * @param revenueRange Estimated revenue range (optional)
     * @param size Estimated number of people in employment (optional)
     * @param state State (optional)
     * @param street Street name and number (optional)
     * @param tags All tags applied to this Account (optional)
     * @param twitterHandle Twitter handle, with @ (optional)
     * @param website Website (optional)
     * @return ApiResponse&lt;Account&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Account> v2AccountsIdJsonPutWithHttpInfo(String id, String domain, String name, Integer accountTierId, Boolean archived, String city, Integer companyStageId, String companyType, String conversationalName, String country, String crmId, String crmIdType, List<Object> customFields, String description, Boolean doNotContact, String founded, String industry, String linkedinUrl, String locale, Integer ownerId, String phone, String postalCode, String revenueRange, String size, String state, String street, List<String> tags, String twitterHandle, String website) throws ApiException {
        okhttp3.Call localVarCall = v2AccountsIdJsonPutValidateBeforeCall(id, domain, name, accountTierId, archived, city, companyStageId, companyType, conversationalName, country, crmId, crmIdType, customFields, description, doNotContact, founded, industry, linkedinUrl, locale, ownerId, phone, postalCode, revenueRange, size, state, street, tags, twitterHandle, website, null);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an existing Account (asynchronously)
     * Updates an account.  \&quot;domain\&quot; must be unique on the current team. 
     * @param id Account ID (required)
     * @param domain Website domain, not a fully qualified URI (required)
     * @param name Account Full Name (required)
     * @param accountTierId ID of the Account Tier for this Account (optional)
     * @param archived Whether this Account should be archived or not. Setting this to true sets archived_at to the current time if it&#39;s not already set. Setting this to false will set archived_at to null (optional)
     * @param city City (optional)
     * @param companyStageId ID of the CompanyStage assigned to this Account (optional)
     * @param companyType Type of the Account&#39;s company (optional)
     * @param conversationalName Conversational name of the Account (optional)
     * @param country Country (optional)
     * @param crmId Requires Salesforce.  ID of the person in your external CRM. You must provide a crm_id_type if this is included.  Validations will be applied to the crm_id depending on the crm_id_type. A \\\&quot;salesforce\\\&quot; ID must be exactly 18 characters. A \\\&quot;salesforce\\\&quot; ID must be either an Account (001) object. The type will be validated using the 18 character ID.  This field can only be used if your application or API key has the \\\&quot;account:set_crm_id\\\&quot; scope.   (optional)
     * @param crmIdType The CRM that the provided crm_id is for. Must be one of: salesforce (optional)
     * @param customFields Custom fields are defined by the user&#39;s team. Only fields with values are presented in the API. (optional)
     * @param description Description (optional)
     * @param doNotContact Whether this company can not be contacted. Values are either true or false. Setting this to true will remove all associated people from all active communications (optional)
     * @param founded Date or year of founding (optional)
     * @param industry Industry (optional)
     * @param linkedinUrl Full LinkedIn url (optional)
     * @param locale Time locale (optional)
     * @param ownerId ID of the User that owns this Account (optional)
     * @param phone Phone number without formatting (optional)
     * @param postalCode Postal code (optional)
     * @param revenueRange Estimated revenue range (optional)
     * @param size Estimated number of people in employment (optional)
     * @param state State (optional)
     * @param street Street name and number (optional)
     * @param tags All tags applied to this Account (optional)
     * @param twitterHandle Twitter handle, with @ (optional)
     * @param website Website (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2AccountsIdJsonPutAsync(String id, String domain, String name, Integer accountTierId, Boolean archived, String city, Integer companyStageId, String companyType, String conversationalName, String country, String crmId, String crmIdType, List<Object> customFields, String description, Boolean doNotContact, String founded, String industry, String linkedinUrl, String locale, Integer ownerId, String phone, String postalCode, String revenueRange, String size, String state, String street, List<String> tags, String twitterHandle, String website, final ApiCallback<Account> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2AccountsIdJsonPutValidateBeforeCall(id, domain, name, accountTierId, archived, city, companyStageId, companyType, conversationalName, country, crmId, crmIdType, customFields, description, doNotContact, founded, industry, linkedinUrl, locale, ownerId, phone, postalCode, revenueRange, size, state, street, tags, twitterHandle, website, _callback);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2AccountsJsonGet
     * @param ids IDs of accounts to fetch. If a record can&#39;t be found, that record won&#39;t be returned and your request will be successful (optional)
     * @param crmId Filters accounts by crm_id. Multiple crm ids can be applied (optional)
     * @param tag Filters accounts by the tags applied to the account. Multiple tags can be applied (optional)
     * @param tagId Filters accounts by the tag id&#39;s applied to the account. Multiple tag id&#39;s can be applied (optional)
     * @param createdAt Equality filters that are applied to the created_at field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param updatedAt Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param domain Domain of the accounts to fetch. Domains are unique and lowercase (optional)
     * @param website Filters accounts by website. Multiple websites can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter accounts that do not have a website. (optional)
     * @param archived Filters accounts by archived_at status. Returns only accounts where archived_at is not null if this field is true. Returns only accounts where archived_at is null if this field is false. Do not pass this parameter to return both archived and unarchived accounts. This filter is not applied if any value other than \&quot;true\&quot; or \&quot;false\&quot; is passed. (optional)
     * @param name Names of accounts to fetch. Name matches are exact and case sensitive. Multiple names can be fetched. (optional)
     * @param accountStageId Filters accounts by account_stage_id. Multiple account_stage_ids can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter accounts that do not have account_stage_id (optional)
     * @param accountTierId Filters accounts by account_tier_id. Multiple account tier ids can be applied (optional)
     * @param ownerId Filters accounts by owner_id. Multiple owner_ids can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter accounts that are unowned (optional)
     * @param ownerIsActive Filters accounts by whether the owner is active or not. (optional)
     * @param lastContacted Equality filters that are applied to the last_contacted field. A single filter can be used by itself or combined with other filters to create a range. Additional values of \&quot;_is_null\&quot; or \&quot;_is_not_null\&quot; can be passed to filter records that either have no timestamp value or any timestamp value. ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param customFields Filters by accounts matching all given custom fields. The custom field names are case-sensitive, but the provided values are case-insensitive. Example: v2/accounts?custom_fields[custom_field_name]&#x3D;custom_field_value (optional)
     * @param industry Filters accounts by industry by exact match. Supports partial matching (optional)
     * @param country Filters accounts by country by exact match. Supports partial matching (optional)
     * @param state Filters accounts by state by exact match. Supports partial matching (optional)
     * @param city Filters accounts by city by exact match. Supports partial matching (optional)
     * @param ownerCrmId Filters accounts by owner_crm_id. Multiple owner_crm_ids can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter accounts that are unowned. A \&quot;_not_in\&quot; modifier can be used to exclude specific owner_crm_ids. Example: v2/accounts?owner_crm_id[_not_in]&#x3D;id (optional)
     * @param locales Filters accounts by locale. Multiple locales are allowed (optional)
     * @param userRelationships Filters by accounts matching all given user relationship fields, _is_null or _unmapped can be passed to filter accounts with null or unmapped user relationship values. Example: v2/accounts?user_relationships[name]&#x3D;value (optional)
     * @param sortBy Key to sort on, must be one of: created_at, updated_at, last_contacted_at, account_stage, account_stage_name, account_tier, account_tier_name, name, counts_people. Defaults to updated_at (optional)
     * @param sortDirection Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @param page The current page to fetch results from. Defaults to 1 (optional)
     * @param includePagingCounts Whether to include total_pages and total_count in the metadata. Defaults to false (optional)
     * @param limitPagingCounts Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2AccountsJsonGetCall(List<Integer> ids, List<String> crmId, List<String> tag, List<Integer> tagId, List<String> createdAt, List<String> updatedAt, String domain, List<String> website, Boolean archived, List<String> name, List<Integer> accountStageId, List<Integer> accountTierId, List<String> ownerId, Boolean ownerIsActive, Object lastContacted, Object customFields, List<String> industry, List<String> country, List<String> state, List<String> city, List<String> ownerCrmId, List<String> locales, Object userRelationships, String sortBy, String sortDirection, Integer perPage, Integer page, Boolean includePagingCounts, Boolean limitPagingCounts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/accounts.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "ids", ids));
        }

        if (crmId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "crm_id", crmId));
        }

        if (tag != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tag", tag));
        }

        if (tagId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tag_id", tagId));
        }

        if (createdAt != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "created_at", createdAt));
        }

        if (updatedAt != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "updated_at", updatedAt));
        }

        if (domain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain", domain));
        }

        if (website != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "website", website));
        }

        if (archived != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("archived", archived));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "name", name));
        }

        if (accountStageId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "account_stage_id", accountStageId));
        }

        if (accountTierId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "account_tier_id", accountTierId));
        }

        if (ownerId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "owner_id", ownerId));
        }

        if (ownerIsActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner_is_active", ownerIsActive));
        }

        if (lastContacted != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(lastContacted));
        }

        if (customFields != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(customFields));
        }

        if (industry != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "industry", industry));
        }

        if (country != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "country", country));
        }

        if (state != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "state", state));
        }

        if (city != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "city", city));
        }

        if (ownerCrmId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "owner_crm_id", ownerCrmId));
        }

        if (locales != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "locales", locales));
        }

        if (userRelationships != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(userRelationships));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_direction", sortDirection));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (includePagingCounts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_paging_counts", includePagingCounts));
        }

        if (limitPagingCounts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit_paging_counts", limitPagingCounts));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2AccountsJsonGetValidateBeforeCall(List<Integer> ids, List<String> crmId, List<String> tag, List<Integer> tagId, List<String> createdAt, List<String> updatedAt, String domain, List<String> website, Boolean archived, List<String> name, List<Integer> accountStageId, List<Integer> accountTierId, List<String> ownerId, Boolean ownerIsActive, Object lastContacted, Object customFields, List<String> industry, List<String> country, List<String> state, List<String> city, List<String> ownerCrmId, List<String> locales, Object userRelationships, String sortBy, String sortDirection, Integer perPage, Integer page, Boolean includePagingCounts, Boolean limitPagingCounts, final ApiCallback _callback) throws ApiException {
        return v2AccountsJsonGetCall(ids, crmId, tag, tagId, createdAt, updatedAt, domain, website, archived, name, accountStageId, accountTierId, ownerId, ownerIsActive, lastContacted, customFields, industry, country, state, city, ownerCrmId, locales, userRelationships, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts, _callback);

    }

    /**
     * List accounts
     * Fetches multiple account records. The records can be filtered, paged, and sorted according to the respective parameters. 
     * @param ids IDs of accounts to fetch. If a record can&#39;t be found, that record won&#39;t be returned and your request will be successful (optional)
     * @param crmId Filters accounts by crm_id. Multiple crm ids can be applied (optional)
     * @param tag Filters accounts by the tags applied to the account. Multiple tags can be applied (optional)
     * @param tagId Filters accounts by the tag id&#39;s applied to the account. Multiple tag id&#39;s can be applied (optional)
     * @param createdAt Equality filters that are applied to the created_at field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param updatedAt Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param domain Domain of the accounts to fetch. Domains are unique and lowercase (optional)
     * @param website Filters accounts by website. Multiple websites can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter accounts that do not have a website. (optional)
     * @param archived Filters accounts by archived_at status. Returns only accounts where archived_at is not null if this field is true. Returns only accounts where archived_at is null if this field is false. Do not pass this parameter to return both archived and unarchived accounts. This filter is not applied if any value other than \&quot;true\&quot; or \&quot;false\&quot; is passed. (optional)
     * @param name Names of accounts to fetch. Name matches are exact and case sensitive. Multiple names can be fetched. (optional)
     * @param accountStageId Filters accounts by account_stage_id. Multiple account_stage_ids can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter accounts that do not have account_stage_id (optional)
     * @param accountTierId Filters accounts by account_tier_id. Multiple account tier ids can be applied (optional)
     * @param ownerId Filters accounts by owner_id. Multiple owner_ids can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter accounts that are unowned (optional)
     * @param ownerIsActive Filters accounts by whether the owner is active or not. (optional)
     * @param lastContacted Equality filters that are applied to the last_contacted field. A single filter can be used by itself or combined with other filters to create a range. Additional values of \&quot;_is_null\&quot; or \&quot;_is_not_null\&quot; can be passed to filter records that either have no timestamp value or any timestamp value. ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param customFields Filters by accounts matching all given custom fields. The custom field names are case-sensitive, but the provided values are case-insensitive. Example: v2/accounts?custom_fields[custom_field_name]&#x3D;custom_field_value (optional)
     * @param industry Filters accounts by industry by exact match. Supports partial matching (optional)
     * @param country Filters accounts by country by exact match. Supports partial matching (optional)
     * @param state Filters accounts by state by exact match. Supports partial matching (optional)
     * @param city Filters accounts by city by exact match. Supports partial matching (optional)
     * @param ownerCrmId Filters accounts by owner_crm_id. Multiple owner_crm_ids can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter accounts that are unowned. A \&quot;_not_in\&quot; modifier can be used to exclude specific owner_crm_ids. Example: v2/accounts?owner_crm_id[_not_in]&#x3D;id (optional)
     * @param locales Filters accounts by locale. Multiple locales are allowed (optional)
     * @param userRelationships Filters by accounts matching all given user relationship fields, _is_null or _unmapped can be passed to filter accounts with null or unmapped user relationship values. Example: v2/accounts?user_relationships[name]&#x3D;value (optional)
     * @param sortBy Key to sort on, must be one of: created_at, updated_at, last_contacted_at, account_stage, account_stage_name, account_tier, account_tier_name, name, counts_people. Defaults to updated_at (optional)
     * @param sortDirection Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @param page The current page to fetch results from. Defaults to 1 (optional)
     * @param includePagingCounts Whether to include total_pages and total_count in the metadata. Defaults to false (optional)
     * @param limitPagingCounts Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)
     * @return List&lt;Account&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<Account> v2AccountsJsonGet(List<Integer> ids, List<String> crmId, List<String> tag, List<Integer> tagId, List<String> createdAt, List<String> updatedAt, String domain, List<String> website, Boolean archived, List<String> name, List<Integer> accountStageId, List<Integer> accountTierId, List<String> ownerId, Boolean ownerIsActive, Object lastContacted, Object customFields, List<String> industry, List<String> country, List<String> state, List<String> city, List<String> ownerCrmId, List<String> locales, Object userRelationships, String sortBy, String sortDirection, Integer perPage, Integer page, Boolean includePagingCounts, Boolean limitPagingCounts) throws ApiException {
        ApiResponse<List<Account>> localVarResp = v2AccountsJsonGetWithHttpInfo(ids, crmId, tag, tagId, createdAt, updatedAt, domain, website, archived, name, accountStageId, accountTierId, ownerId, ownerIsActive, lastContacted, customFields, industry, country, state, city, ownerCrmId, locales, userRelationships, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts);
        return localVarResp.getData();
    }

    /**
     * List accounts
     * Fetches multiple account records. The records can be filtered, paged, and sorted according to the respective parameters. 
     * @param ids IDs of accounts to fetch. If a record can&#39;t be found, that record won&#39;t be returned and your request will be successful (optional)
     * @param crmId Filters accounts by crm_id. Multiple crm ids can be applied (optional)
     * @param tag Filters accounts by the tags applied to the account. Multiple tags can be applied (optional)
     * @param tagId Filters accounts by the tag id&#39;s applied to the account. Multiple tag id&#39;s can be applied (optional)
     * @param createdAt Equality filters that are applied to the created_at field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param updatedAt Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param domain Domain of the accounts to fetch. Domains are unique and lowercase (optional)
     * @param website Filters accounts by website. Multiple websites can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter accounts that do not have a website. (optional)
     * @param archived Filters accounts by archived_at status. Returns only accounts where archived_at is not null if this field is true. Returns only accounts where archived_at is null if this field is false. Do not pass this parameter to return both archived and unarchived accounts. This filter is not applied if any value other than \&quot;true\&quot; or \&quot;false\&quot; is passed. (optional)
     * @param name Names of accounts to fetch. Name matches are exact and case sensitive. Multiple names can be fetched. (optional)
     * @param accountStageId Filters accounts by account_stage_id. Multiple account_stage_ids can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter accounts that do not have account_stage_id (optional)
     * @param accountTierId Filters accounts by account_tier_id. Multiple account tier ids can be applied (optional)
     * @param ownerId Filters accounts by owner_id. Multiple owner_ids can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter accounts that are unowned (optional)
     * @param ownerIsActive Filters accounts by whether the owner is active or not. (optional)
     * @param lastContacted Equality filters that are applied to the last_contacted field. A single filter can be used by itself or combined with other filters to create a range. Additional values of \&quot;_is_null\&quot; or \&quot;_is_not_null\&quot; can be passed to filter records that either have no timestamp value or any timestamp value. ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param customFields Filters by accounts matching all given custom fields. The custom field names are case-sensitive, but the provided values are case-insensitive. Example: v2/accounts?custom_fields[custom_field_name]&#x3D;custom_field_value (optional)
     * @param industry Filters accounts by industry by exact match. Supports partial matching (optional)
     * @param country Filters accounts by country by exact match. Supports partial matching (optional)
     * @param state Filters accounts by state by exact match. Supports partial matching (optional)
     * @param city Filters accounts by city by exact match. Supports partial matching (optional)
     * @param ownerCrmId Filters accounts by owner_crm_id. Multiple owner_crm_ids can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter accounts that are unowned. A \&quot;_not_in\&quot; modifier can be used to exclude specific owner_crm_ids. Example: v2/accounts?owner_crm_id[_not_in]&#x3D;id (optional)
     * @param locales Filters accounts by locale. Multiple locales are allowed (optional)
     * @param userRelationships Filters by accounts matching all given user relationship fields, _is_null or _unmapped can be passed to filter accounts with null or unmapped user relationship values. Example: v2/accounts?user_relationships[name]&#x3D;value (optional)
     * @param sortBy Key to sort on, must be one of: created_at, updated_at, last_contacted_at, account_stage, account_stage_name, account_tier, account_tier_name, name, counts_people. Defaults to updated_at (optional)
     * @param sortDirection Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @param page The current page to fetch results from. Defaults to 1 (optional)
     * @param includePagingCounts Whether to include total_pages and total_count in the metadata. Defaults to false (optional)
     * @param limitPagingCounts Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)
     * @return ApiResponse&lt;List&lt;Account&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Account>> v2AccountsJsonGetWithHttpInfo(List<Integer> ids, List<String> crmId, List<String> tag, List<Integer> tagId, List<String> createdAt, List<String> updatedAt, String domain, List<String> website, Boolean archived, List<String> name, List<Integer> accountStageId, List<Integer> accountTierId, List<String> ownerId, Boolean ownerIsActive, Object lastContacted, Object customFields, List<String> industry, List<String> country, List<String> state, List<String> city, List<String> ownerCrmId, List<String> locales, Object userRelationships, String sortBy, String sortDirection, Integer perPage, Integer page, Boolean includePagingCounts, Boolean limitPagingCounts) throws ApiException {
        okhttp3.Call localVarCall = v2AccountsJsonGetValidateBeforeCall(ids, crmId, tag, tagId, createdAt, updatedAt, domain, website, archived, name, accountStageId, accountTierId, ownerId, ownerIsActive, lastContacted, customFields, industry, country, state, city, ownerCrmId, locales, userRelationships, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts, null);
        Type localVarReturnType = new TypeToken<List<Account>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List accounts (asynchronously)
     * Fetches multiple account records. The records can be filtered, paged, and sorted according to the respective parameters. 
     * @param ids IDs of accounts to fetch. If a record can&#39;t be found, that record won&#39;t be returned and your request will be successful (optional)
     * @param crmId Filters accounts by crm_id. Multiple crm ids can be applied (optional)
     * @param tag Filters accounts by the tags applied to the account. Multiple tags can be applied (optional)
     * @param tagId Filters accounts by the tag id&#39;s applied to the account. Multiple tag id&#39;s can be applied (optional)
     * @param createdAt Equality filters that are applied to the created_at field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param updatedAt Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param domain Domain of the accounts to fetch. Domains are unique and lowercase (optional)
     * @param website Filters accounts by website. Multiple websites can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter accounts that do not have a website. (optional)
     * @param archived Filters accounts by archived_at status. Returns only accounts where archived_at is not null if this field is true. Returns only accounts where archived_at is null if this field is false. Do not pass this parameter to return both archived and unarchived accounts. This filter is not applied if any value other than \&quot;true\&quot; or \&quot;false\&quot; is passed. (optional)
     * @param name Names of accounts to fetch. Name matches are exact and case sensitive. Multiple names can be fetched. (optional)
     * @param accountStageId Filters accounts by account_stage_id. Multiple account_stage_ids can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter accounts that do not have account_stage_id (optional)
     * @param accountTierId Filters accounts by account_tier_id. Multiple account tier ids can be applied (optional)
     * @param ownerId Filters accounts by owner_id. Multiple owner_ids can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter accounts that are unowned (optional)
     * @param ownerIsActive Filters accounts by whether the owner is active or not. (optional)
     * @param lastContacted Equality filters that are applied to the last_contacted field. A single filter can be used by itself or combined with other filters to create a range. Additional values of \&quot;_is_null\&quot; or \&quot;_is_not_null\&quot; can be passed to filter records that either have no timestamp value or any timestamp value. ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param customFields Filters by accounts matching all given custom fields. The custom field names are case-sensitive, but the provided values are case-insensitive. Example: v2/accounts?custom_fields[custom_field_name]&#x3D;custom_field_value (optional)
     * @param industry Filters accounts by industry by exact match. Supports partial matching (optional)
     * @param country Filters accounts by country by exact match. Supports partial matching (optional)
     * @param state Filters accounts by state by exact match. Supports partial matching (optional)
     * @param city Filters accounts by city by exact match. Supports partial matching (optional)
     * @param ownerCrmId Filters accounts by owner_crm_id. Multiple owner_crm_ids can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter accounts that are unowned. A \&quot;_not_in\&quot; modifier can be used to exclude specific owner_crm_ids. Example: v2/accounts?owner_crm_id[_not_in]&#x3D;id (optional)
     * @param locales Filters accounts by locale. Multiple locales are allowed (optional)
     * @param userRelationships Filters by accounts matching all given user relationship fields, _is_null or _unmapped can be passed to filter accounts with null or unmapped user relationship values. Example: v2/accounts?user_relationships[name]&#x3D;value (optional)
     * @param sortBy Key to sort on, must be one of: created_at, updated_at, last_contacted_at, account_stage, account_stage_name, account_tier, account_tier_name, name, counts_people. Defaults to updated_at (optional)
     * @param sortDirection Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @param page The current page to fetch results from. Defaults to 1 (optional)
     * @param includePagingCounts Whether to include total_pages and total_count in the metadata. Defaults to false (optional)
     * @param limitPagingCounts Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2AccountsJsonGetAsync(List<Integer> ids, List<String> crmId, List<String> tag, List<Integer> tagId, List<String> createdAt, List<String> updatedAt, String domain, List<String> website, Boolean archived, List<String> name, List<Integer> accountStageId, List<Integer> accountTierId, List<String> ownerId, Boolean ownerIsActive, Object lastContacted, Object customFields, List<String> industry, List<String> country, List<String> state, List<String> city, List<String> ownerCrmId, List<String> locales, Object userRelationships, String sortBy, String sortDirection, Integer perPage, Integer page, Boolean includePagingCounts, Boolean limitPagingCounts, final ApiCallback<List<Account>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2AccountsJsonGetValidateBeforeCall(ids, crmId, tag, tagId, createdAt, updatedAt, domain, website, archived, name, accountStageId, accountTierId, ownerId, ownerIsActive, lastContacted, customFields, industry, country, state, city, ownerCrmId, locales, userRelationships, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts, _callback);
        Type localVarReturnType = new TypeToken<List<Account>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2AccountsJsonPost
     * @param domain Website domain, not a fully qualified URI (required)
     * @param name Account Full Name (required)
     * @param accountTierId ID of the Account Tier for this Account (optional)
     * @param city City (optional)
     * @param companyStageId ID of the CompanyStage assigned to this Account (optional)
     * @param companyType Type of the Account&#39;s company (optional)
     * @param conversationalName Conversational name of the Account (optional)
     * @param country Country (optional)
     * @param crmId Requires Salesforce.  ID of the person in your external CRM. You must provide a crm_id_type if this is included.  Validations will be applied to the crm_id depending on the crm_id_type. A \\\&quot;salesforce\\\&quot; ID must be exactly 18 characters. A \\\&quot;salesforce\\\&quot; ID must be either an Account (001) object. The type will be validated using the 18 character ID.  This field can only be used if your application or API key has the \\\&quot;account:set_crm_id\\\&quot; scope.   (optional)
     * @param crmIdType The CRM that the provided crm_id is for. Must be one of: salesforce (optional)
     * @param customFields Custom fields are defined by the user&#39;s team. Only fields with values are presented in the API. (optional)
     * @param description Description (optional)
     * @param doNotContact Whether this company can not be contacted. Values are either true or false. Setting this to true will remove all associated people from all active communications (optional)
     * @param founded Date or year of founding (optional)
     * @param industry Industry (optional)
     * @param linkedinUrl Full LinkedIn url (optional)
     * @param locale Time locale (optional)
     * @param ownerId ID of the User that owns this Account (optional)
     * @param phone Phone number without formatting (optional)
     * @param postalCode Postal code (optional)
     * @param revenueRange Estimated revenue range (optional)
     * @param size Estimated number of people in employment (optional)
     * @param state State (optional)
     * @param street Street name and number (optional)
     * @param tags All tags applied to this Account (optional)
     * @param twitterHandle Twitter handle, with @ (optional)
     * @param website Website (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2AccountsJsonPostCall(String domain, String name, Integer accountTierId, String city, Integer companyStageId, String companyType, String conversationalName, String country, String crmId, String crmIdType, List<Object> customFields, String description, Boolean doNotContact, String founded, String industry, String linkedinUrl, String locale, Integer ownerId, String phone, String postalCode, String revenueRange, String size, String state, String street, List<String> tags, String twitterHandle, String website, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/accounts.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountTierId != null) {
            localVarFormParams.put("account_tier_id", accountTierId);
        }

        if (city != null) {
            localVarFormParams.put("city", city);
        }

        if (companyStageId != null) {
            localVarFormParams.put("company_stage_id", companyStageId);
        }

        if (companyType != null) {
            localVarFormParams.put("company_type", companyType);
        }

        if (conversationalName != null) {
            localVarFormParams.put("conversational_name", conversationalName);
        }

        if (country != null) {
            localVarFormParams.put("country", country);
        }

        if (crmId != null) {
            localVarFormParams.put("crm_id", crmId);
        }

        if (crmIdType != null) {
            localVarFormParams.put("crm_id_type", crmIdType);
        }

        if (customFields != null) {
            localVarFormParams.put("custom_fields", customFields);
        }

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (doNotContact != null) {
            localVarFormParams.put("do_not_contact", doNotContact);
        }

        if (domain != null) {
            localVarFormParams.put("domain", domain);
        }

        if (founded != null) {
            localVarFormParams.put("founded", founded);
        }

        if (industry != null) {
            localVarFormParams.put("industry", industry);
        }

        if (linkedinUrl != null) {
            localVarFormParams.put("linkedin_url", linkedinUrl);
        }

        if (locale != null) {
            localVarFormParams.put("locale", locale);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (ownerId != null) {
            localVarFormParams.put("owner_id", ownerId);
        }

        if (phone != null) {
            localVarFormParams.put("phone", phone);
        }

        if (postalCode != null) {
            localVarFormParams.put("postal_code", postalCode);
        }

        if (revenueRange != null) {
            localVarFormParams.put("revenue_range", revenueRange);
        }

        if (size != null) {
            localVarFormParams.put("size", size);
        }

        if (state != null) {
            localVarFormParams.put("state", state);
        }

        if (street != null) {
            localVarFormParams.put("street", street);
        }

        if (tags != null) {
            localVarFormParams.put("tags", tags);
        }

        if (twitterHandle != null) {
            localVarFormParams.put("twitter_handle", twitterHandle);
        }

        if (website != null) {
            localVarFormParams.put("website", website);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2AccountsJsonPostValidateBeforeCall(String domain, String name, Integer accountTierId, String city, Integer companyStageId, String companyType, String conversationalName, String country, String crmId, String crmIdType, List<Object> customFields, String description, Boolean doNotContact, String founded, String industry, String linkedinUrl, String locale, Integer ownerId, String phone, String postalCode, String revenueRange, String size, String state, String street, List<String> tags, String twitterHandle, String website, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling v2AccountsJsonPost(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling v2AccountsJsonPost(Async)");
        }

        return v2AccountsJsonPostCall(domain, name, accountTierId, city, companyStageId, companyType, conversationalName, country, crmId, crmIdType, customFields, description, doNotContact, founded, industry, linkedinUrl, locale, ownerId, phone, postalCode, revenueRange, size, state, street, tags, twitterHandle, website, _callback);

    }

    /**
     * Create an account
     * Creates an account.  \&quot;domain\&quot; must be unique on the current team. 
     * @param domain Website domain, not a fully qualified URI (required)
     * @param name Account Full Name (required)
     * @param accountTierId ID of the Account Tier for this Account (optional)
     * @param city City (optional)
     * @param companyStageId ID of the CompanyStage assigned to this Account (optional)
     * @param companyType Type of the Account&#39;s company (optional)
     * @param conversationalName Conversational name of the Account (optional)
     * @param country Country (optional)
     * @param crmId Requires Salesforce.  ID of the person in your external CRM. You must provide a crm_id_type if this is included.  Validations will be applied to the crm_id depending on the crm_id_type. A \\\&quot;salesforce\\\&quot; ID must be exactly 18 characters. A \\\&quot;salesforce\\\&quot; ID must be either an Account (001) object. The type will be validated using the 18 character ID.  This field can only be used if your application or API key has the \\\&quot;account:set_crm_id\\\&quot; scope.   (optional)
     * @param crmIdType The CRM that the provided crm_id is for. Must be one of: salesforce (optional)
     * @param customFields Custom fields are defined by the user&#39;s team. Only fields with values are presented in the API. (optional)
     * @param description Description (optional)
     * @param doNotContact Whether this company can not be contacted. Values are either true or false. Setting this to true will remove all associated people from all active communications (optional)
     * @param founded Date or year of founding (optional)
     * @param industry Industry (optional)
     * @param linkedinUrl Full LinkedIn url (optional)
     * @param locale Time locale (optional)
     * @param ownerId ID of the User that owns this Account (optional)
     * @param phone Phone number without formatting (optional)
     * @param postalCode Postal code (optional)
     * @param revenueRange Estimated revenue range (optional)
     * @param size Estimated number of people in employment (optional)
     * @param state State (optional)
     * @param street Street name and number (optional)
     * @param tags All tags applied to this Account (optional)
     * @param twitterHandle Twitter handle, with @ (optional)
     * @param website Website (optional)
     * @return Account
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Account v2AccountsJsonPost(String domain, String name, Integer accountTierId, String city, Integer companyStageId, String companyType, String conversationalName, String country, String crmId, String crmIdType, List<Object> customFields, String description, Boolean doNotContact, String founded, String industry, String linkedinUrl, String locale, Integer ownerId, String phone, String postalCode, String revenueRange, String size, String state, String street, List<String> tags, String twitterHandle, String website) throws ApiException {
        ApiResponse<Account> localVarResp = v2AccountsJsonPostWithHttpInfo(domain, name, accountTierId, city, companyStageId, companyType, conversationalName, country, crmId, crmIdType, customFields, description, doNotContact, founded, industry, linkedinUrl, locale, ownerId, phone, postalCode, revenueRange, size, state, street, tags, twitterHandle, website);
        return localVarResp.getData();
    }

    /**
     * Create an account
     * Creates an account.  \&quot;domain\&quot; must be unique on the current team. 
     * @param domain Website domain, not a fully qualified URI (required)
     * @param name Account Full Name (required)
     * @param accountTierId ID of the Account Tier for this Account (optional)
     * @param city City (optional)
     * @param companyStageId ID of the CompanyStage assigned to this Account (optional)
     * @param companyType Type of the Account&#39;s company (optional)
     * @param conversationalName Conversational name of the Account (optional)
     * @param country Country (optional)
     * @param crmId Requires Salesforce.  ID of the person in your external CRM. You must provide a crm_id_type if this is included.  Validations will be applied to the crm_id depending on the crm_id_type. A \\\&quot;salesforce\\\&quot; ID must be exactly 18 characters. A \\\&quot;salesforce\\\&quot; ID must be either an Account (001) object. The type will be validated using the 18 character ID.  This field can only be used if your application or API key has the \\\&quot;account:set_crm_id\\\&quot; scope.   (optional)
     * @param crmIdType The CRM that the provided crm_id is for. Must be one of: salesforce (optional)
     * @param customFields Custom fields are defined by the user&#39;s team. Only fields with values are presented in the API. (optional)
     * @param description Description (optional)
     * @param doNotContact Whether this company can not be contacted. Values are either true or false. Setting this to true will remove all associated people from all active communications (optional)
     * @param founded Date or year of founding (optional)
     * @param industry Industry (optional)
     * @param linkedinUrl Full LinkedIn url (optional)
     * @param locale Time locale (optional)
     * @param ownerId ID of the User that owns this Account (optional)
     * @param phone Phone number without formatting (optional)
     * @param postalCode Postal code (optional)
     * @param revenueRange Estimated revenue range (optional)
     * @param size Estimated number of people in employment (optional)
     * @param state State (optional)
     * @param street Street name and number (optional)
     * @param tags All tags applied to this Account (optional)
     * @param twitterHandle Twitter handle, with @ (optional)
     * @param website Website (optional)
     * @return ApiResponse&lt;Account&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Account> v2AccountsJsonPostWithHttpInfo(String domain, String name, Integer accountTierId, String city, Integer companyStageId, String companyType, String conversationalName, String country, String crmId, String crmIdType, List<Object> customFields, String description, Boolean doNotContact, String founded, String industry, String linkedinUrl, String locale, Integer ownerId, String phone, String postalCode, String revenueRange, String size, String state, String street, List<String> tags, String twitterHandle, String website) throws ApiException {
        okhttp3.Call localVarCall = v2AccountsJsonPostValidateBeforeCall(domain, name, accountTierId, city, companyStageId, companyType, conversationalName, country, crmId, crmIdType, customFields, description, doNotContact, founded, industry, linkedinUrl, locale, ownerId, phone, postalCode, revenueRange, size, state, street, tags, twitterHandle, website, null);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an account (asynchronously)
     * Creates an account.  \&quot;domain\&quot; must be unique on the current team. 
     * @param domain Website domain, not a fully qualified URI (required)
     * @param name Account Full Name (required)
     * @param accountTierId ID of the Account Tier for this Account (optional)
     * @param city City (optional)
     * @param companyStageId ID of the CompanyStage assigned to this Account (optional)
     * @param companyType Type of the Account&#39;s company (optional)
     * @param conversationalName Conversational name of the Account (optional)
     * @param country Country (optional)
     * @param crmId Requires Salesforce.  ID of the person in your external CRM. You must provide a crm_id_type if this is included.  Validations will be applied to the crm_id depending on the crm_id_type. A \\\&quot;salesforce\\\&quot; ID must be exactly 18 characters. A \\\&quot;salesforce\\\&quot; ID must be either an Account (001) object. The type will be validated using the 18 character ID.  This field can only be used if your application or API key has the \\\&quot;account:set_crm_id\\\&quot; scope.   (optional)
     * @param crmIdType The CRM that the provided crm_id is for. Must be one of: salesforce (optional)
     * @param customFields Custom fields are defined by the user&#39;s team. Only fields with values are presented in the API. (optional)
     * @param description Description (optional)
     * @param doNotContact Whether this company can not be contacted. Values are either true or false. Setting this to true will remove all associated people from all active communications (optional)
     * @param founded Date or year of founding (optional)
     * @param industry Industry (optional)
     * @param linkedinUrl Full LinkedIn url (optional)
     * @param locale Time locale (optional)
     * @param ownerId ID of the User that owns this Account (optional)
     * @param phone Phone number without formatting (optional)
     * @param postalCode Postal code (optional)
     * @param revenueRange Estimated revenue range (optional)
     * @param size Estimated number of people in employment (optional)
     * @param state State (optional)
     * @param street Street name and number (optional)
     * @param tags All tags applied to this Account (optional)
     * @param twitterHandle Twitter handle, with @ (optional)
     * @param website Website (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2AccountsJsonPostAsync(String domain, String name, Integer accountTierId, String city, Integer companyStageId, String companyType, String conversationalName, String country, String crmId, String crmIdType, List<Object> customFields, String description, Boolean doNotContact, String founded, String industry, String linkedinUrl, String locale, Integer ownerId, String phone, String postalCode, String revenueRange, String size, String state, String street, List<String> tags, String twitterHandle, String website, final ApiCallback<Account> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2AccountsJsonPostValidateBeforeCall(domain, name, accountTierId, city, companyStageId, companyType, conversationalName, country, crmId, crmIdType, customFields, description, doNotContact, founded, industry, linkedinUrl, locale, ownerId, phone, postalCode, revenueRange, size, state, street, tags, twitterHandle, website, _callback);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
