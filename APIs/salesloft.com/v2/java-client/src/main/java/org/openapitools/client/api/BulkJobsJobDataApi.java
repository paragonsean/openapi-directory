/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BulkJobResult;
import org.openapitools.client.model.JobDataCreationResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BulkJobsJobDataApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BulkJobsJobDataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BulkJobsJobDataApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v2BulkJobsBulkJobsIdJobDataGet
     * @param bulkJobsId The id for the bulk job to which the job data relates (required)
     * @param status Filter by result status. Accepts multiple statuses. Each status must be one of pending, success, error, retrying (optional)
     * @param id Filter by id using comparison operators. Only supports greater than (gt) comparison (i.e. id[gt]&#x3D;123) (optional)
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BulkJobsBulkJobsIdJobDataGetCall(Integer bulkJobsId, List<String> status, Object id, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/bulk_jobs/{bulk_jobs_id}/job_data"
            .replace("{" + "bulk_jobs_id" + "}", localVarApiClient.escapeString(bulkJobsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "status", status));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(id));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2BulkJobsBulkJobsIdJobDataGetValidateBeforeCall(Integer bulkJobsId, List<String> status, Object id, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bulkJobsId' is set
        if (bulkJobsId == null) {
            throw new ApiException("Missing the required parameter 'bulkJobsId' when calling v2BulkJobsBulkJobsIdJobDataGet(Async)");
        }

        return v2BulkJobsBulkJobsIdJobDataGetCall(bulkJobsId, status, id, perPage, _callback);

    }

    /**
     * List job data for a bulk job
     * Fetches multiple job data records for a given bulk job. Pagination is not supported, but cursor based polling is via use of the &#x60;id[gt]&#x60; filter. Pass the last id seen (i.e. &#x60;id[gt]&#x3D;1234&#x60;) in order to get the next batch of records.
     * @param bulkJobsId The id for the bulk job to which the job data relates (required)
     * @param status Filter by result status. Accepts multiple statuses. Each status must be one of pending, success, error, retrying (optional)
     * @param id Filter by id using comparison operators. Only supports greater than (gt) comparison (i.e. id[gt]&#x3D;123) (optional)
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @return List&lt;BulkJobResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<BulkJobResult> v2BulkJobsBulkJobsIdJobDataGet(Integer bulkJobsId, List<String> status, Object id, Integer perPage) throws ApiException {
        ApiResponse<List<BulkJobResult>> localVarResp = v2BulkJobsBulkJobsIdJobDataGetWithHttpInfo(bulkJobsId, status, id, perPage);
        return localVarResp.getData();
    }

    /**
     * List job data for a bulk job
     * Fetches multiple job data records for a given bulk job. Pagination is not supported, but cursor based polling is via use of the &#x60;id[gt]&#x60; filter. Pass the last id seen (i.e. &#x60;id[gt]&#x3D;1234&#x60;) in order to get the next batch of records.
     * @param bulkJobsId The id for the bulk job to which the job data relates (required)
     * @param status Filter by result status. Accepts multiple statuses. Each status must be one of pending, success, error, retrying (optional)
     * @param id Filter by id using comparison operators. Only supports greater than (gt) comparison (i.e. id[gt]&#x3D;123) (optional)
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @return ApiResponse&lt;List&lt;BulkJobResult&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BulkJobResult>> v2BulkJobsBulkJobsIdJobDataGetWithHttpInfo(Integer bulkJobsId, List<String> status, Object id, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = v2BulkJobsBulkJobsIdJobDataGetValidateBeforeCall(bulkJobsId, status, id, perPage, null);
        Type localVarReturnType = new TypeToken<List<BulkJobResult>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List job data for a bulk job (asynchronously)
     * Fetches multiple job data records for a given bulk job. Pagination is not supported, but cursor based polling is via use of the &#x60;id[gt]&#x60; filter. Pass the last id seen (i.e. &#x60;id[gt]&#x3D;1234&#x60;) in order to get the next batch of records.
     * @param bulkJobsId The id for the bulk job to which the job data relates (required)
     * @param status Filter by result status. Accepts multiple statuses. Each status must be one of pending, success, error, retrying (optional)
     * @param id Filter by id using comparison operators. Only supports greater than (gt) comparison (i.e. id[gt]&#x3D;123) (optional)
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BulkJobsBulkJobsIdJobDataGetAsync(Integer bulkJobsId, List<String> status, Object id, Integer perPage, final ApiCallback<List<BulkJobResult>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2BulkJobsBulkJobsIdJobDataGetValidateBeforeCall(bulkJobsId, status, id, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<BulkJobResult>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2BulkJobsBulkJobsIdJobDataPost
     * @param bulkJobsId The id for the bulk job to which the job data relates (required)
     * @param data Array of objects containing parameters to be used to execute an instance of each. Array must be 5,000 records or less. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BulkJobsBulkJobsIdJobDataPostCall(Integer bulkJobsId, List<String> data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/bulk_jobs/{bulk_jobs_id}/job_data"
            .replace("{" + "bulk_jobs_id" + "}", localVarApiClient.escapeString(bulkJobsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (data != null) {
            localVarFormParams.put("data", data);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2BulkJobsBulkJobsIdJobDataPostValidateBeforeCall(Integer bulkJobsId, List<String> data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bulkJobsId' is set
        if (bulkJobsId == null) {
            throw new ApiException("Missing the required parameter 'bulkJobsId' when calling v2BulkJobsBulkJobsIdJobDataPost(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling v2BulkJobsBulkJobsIdJobDataPost(Async)");
        }

        return v2BulkJobsBulkJobsIdJobDataPostCall(bulkJobsId, data, _callback);

    }

    /**
     * Create job data for a bulk job
     * Upload job data for the specified bulk job. Upload an array of objects, where element contains the parameters necessary to execute the individual calls. Each call to this endpoint can handle up to 5,000 records at a time. There is no limit to how many times you can create job data for a given bulk job.  For additional information on creating bulk jobs, the types of supported bulk jobs, and examples of the bulk job flow, visit the &lt;a href&#x3D;\&quot;/bulk.html\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;bulk job details page&lt;/a&gt;. 
     * @param bulkJobsId The id for the bulk job to which the job data relates (required)
     * @param data Array of objects containing parameters to be used to execute an instance of each. Array must be 5,000 records or less. (required)
     * @return JobDataCreationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JobDataCreationResult v2BulkJobsBulkJobsIdJobDataPost(Integer bulkJobsId, List<String> data) throws ApiException {
        ApiResponse<JobDataCreationResult> localVarResp = v2BulkJobsBulkJobsIdJobDataPostWithHttpInfo(bulkJobsId, data);
        return localVarResp.getData();
    }

    /**
     * Create job data for a bulk job
     * Upload job data for the specified bulk job. Upload an array of objects, where element contains the parameters necessary to execute the individual calls. Each call to this endpoint can handle up to 5,000 records at a time. There is no limit to how many times you can create job data for a given bulk job.  For additional information on creating bulk jobs, the types of supported bulk jobs, and examples of the bulk job flow, visit the &lt;a href&#x3D;\&quot;/bulk.html\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;bulk job details page&lt;/a&gt;. 
     * @param bulkJobsId The id for the bulk job to which the job data relates (required)
     * @param data Array of objects containing parameters to be used to execute an instance of each. Array must be 5,000 records or less. (required)
     * @return ApiResponse&lt;JobDataCreationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobDataCreationResult> v2BulkJobsBulkJobsIdJobDataPostWithHttpInfo(Integer bulkJobsId, List<String> data) throws ApiException {
        okhttp3.Call localVarCall = v2BulkJobsBulkJobsIdJobDataPostValidateBeforeCall(bulkJobsId, data, null);
        Type localVarReturnType = new TypeToken<JobDataCreationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create job data for a bulk job (asynchronously)
     * Upload job data for the specified bulk job. Upload an array of objects, where element contains the parameters necessary to execute the individual calls. Each call to this endpoint can handle up to 5,000 records at a time. There is no limit to how many times you can create job data for a given bulk job.  For additional information on creating bulk jobs, the types of supported bulk jobs, and examples of the bulk job flow, visit the &lt;a href&#x3D;\&quot;/bulk.html\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;bulk job details page&lt;/a&gt;. 
     * @param bulkJobsId The id for the bulk job to which the job data relates (required)
     * @param data Array of objects containing parameters to be used to execute an instance of each. Array must be 5,000 records or less. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BulkJobsBulkJobsIdJobDataPostAsync(Integer bulkJobsId, List<String> data, final ApiCallback<JobDataCreationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2BulkJobsBulkJobsIdJobDataPostValidateBeforeCall(bulkJobsId, data, _callback);
        Type localVarReturnType = new TypeToken<JobDataCreationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
