/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CalendarEvent;
import java.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CalendarEventsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CalendarEventsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CalendarEventsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v2CalendarEventsGet
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @param page The current page to fetch results from. Defaults to 1 (optional)
     * @param includePagingCounts Whether to include total_pages and total_count in the metadata. Defaults to false (optional)
     * @param sortBy Key to sort on, must be one of: start_time. Defaults to start_time (optional)
     * @param sortDirection Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)
     * @param startTime Lower bound (inclusive) for a calendar event&#39;s end time to filter by. Must be in ISO 8601 format.  Example: &#x60;2022-02-14T10:12:59+00:00&#x60;.  (optional)
     * @param endTime Upper bound (exclusive) for a calendar event&#39;s start time to filter by. Must be in ISO 8601 format.  Example: &#x60;2022-02-14T10:12:59+00:00&#x60;.  (optional)
     * @param userGuid user_guid of the user who created or included as a guest to the event.  (optional)
     * @param calendarId calendar_id of the user who created or included as a guest to the event.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2CalendarEventsGetCall(Integer perPage, Integer page, Boolean includePagingCounts, String sortBy, String sortDirection, String startTime, String endTime, String userGuid, String calendarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/calendar/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (includePagingCounts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_paging_counts", includePagingCounts));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_direction", sortDirection));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_time", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_time", endTime));
        }

        if (userGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_guid", userGuid));
        }

        if (calendarId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calendar_id", calendarId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2CalendarEventsGetValidateBeforeCall(Integer perPage, Integer page, Boolean includePagingCounts, String sortBy, String sortDirection, String startTime, String endTime, String userGuid, String calendarId, final ApiCallback _callback) throws ApiException {
        return v2CalendarEventsGetCall(perPage, page, includePagingCounts, sortBy, sortDirection, startTime, endTime, userGuid, calendarId, _callback);

    }

    /**
     * List calendar events
     * Returns all calendar events, paginated and filtered by the date.
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @param page The current page to fetch results from. Defaults to 1 (optional)
     * @param includePagingCounts Whether to include total_pages and total_count in the metadata. Defaults to false (optional)
     * @param sortBy Key to sort on, must be one of: start_time. Defaults to start_time (optional)
     * @param sortDirection Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)
     * @param startTime Lower bound (inclusive) for a calendar event&#39;s end time to filter by. Must be in ISO 8601 format.  Example: &#x60;2022-02-14T10:12:59+00:00&#x60;.  (optional)
     * @param endTime Upper bound (exclusive) for a calendar event&#39;s start time to filter by. Must be in ISO 8601 format.  Example: &#x60;2022-02-14T10:12:59+00:00&#x60;.  (optional)
     * @param userGuid user_guid of the user who created or included as a guest to the event.  (optional)
     * @param calendarId calendar_id of the user who created or included as a guest to the event.  (optional)
     * @return List&lt;CalendarEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<CalendarEvent> v2CalendarEventsGet(Integer perPage, Integer page, Boolean includePagingCounts, String sortBy, String sortDirection, String startTime, String endTime, String userGuid, String calendarId) throws ApiException {
        ApiResponse<List<CalendarEvent>> localVarResp = v2CalendarEventsGetWithHttpInfo(perPage, page, includePagingCounts, sortBy, sortDirection, startTime, endTime, userGuid, calendarId);
        return localVarResp.getData();
    }

    /**
     * List calendar events
     * Returns all calendar events, paginated and filtered by the date.
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @param page The current page to fetch results from. Defaults to 1 (optional)
     * @param includePagingCounts Whether to include total_pages and total_count in the metadata. Defaults to false (optional)
     * @param sortBy Key to sort on, must be one of: start_time. Defaults to start_time (optional)
     * @param sortDirection Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)
     * @param startTime Lower bound (inclusive) for a calendar event&#39;s end time to filter by. Must be in ISO 8601 format.  Example: &#x60;2022-02-14T10:12:59+00:00&#x60;.  (optional)
     * @param endTime Upper bound (exclusive) for a calendar event&#39;s start time to filter by. Must be in ISO 8601 format.  Example: &#x60;2022-02-14T10:12:59+00:00&#x60;.  (optional)
     * @param userGuid user_guid of the user who created or included as a guest to the event.  (optional)
     * @param calendarId calendar_id of the user who created or included as a guest to the event.  (optional)
     * @return ApiResponse&lt;List&lt;CalendarEvent&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CalendarEvent>> v2CalendarEventsGetWithHttpInfo(Integer perPage, Integer page, Boolean includePagingCounts, String sortBy, String sortDirection, String startTime, String endTime, String userGuid, String calendarId) throws ApiException {
        okhttp3.Call localVarCall = v2CalendarEventsGetValidateBeforeCall(perPage, page, includePagingCounts, sortBy, sortDirection, startTime, endTime, userGuid, calendarId, null);
        Type localVarReturnType = new TypeToken<List<CalendarEvent>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List calendar events (asynchronously)
     * Returns all calendar events, paginated and filtered by the date.
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @param page The current page to fetch results from. Defaults to 1 (optional)
     * @param includePagingCounts Whether to include total_pages and total_count in the metadata. Defaults to false (optional)
     * @param sortBy Key to sort on, must be one of: start_time. Defaults to start_time (optional)
     * @param sortDirection Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)
     * @param startTime Lower bound (inclusive) for a calendar event&#39;s end time to filter by. Must be in ISO 8601 format.  Example: &#x60;2022-02-14T10:12:59+00:00&#x60;.  (optional)
     * @param endTime Upper bound (exclusive) for a calendar event&#39;s start time to filter by. Must be in ISO 8601 format.  Example: &#x60;2022-02-14T10:12:59+00:00&#x60;.  (optional)
     * @param userGuid user_guid of the user who created or included as a guest to the event.  (optional)
     * @param calendarId calendar_id of the user who created or included as a guest to the event.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2CalendarEventsGetAsync(Integer perPage, Integer page, Boolean includePagingCounts, String sortBy, String sortDirection, String startTime, String endTime, String userGuid, String calendarId, final ApiCallback<List<CalendarEvent>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2CalendarEventsGetValidateBeforeCall(perPage, page, includePagingCounts, sortBy, sortDirection, startTime, endTime, userGuid, calendarId, _callback);
        Type localVarReturnType = new TypeToken<List<CalendarEvent>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2CalendarEventsUpsertPost
     * @param calendarId   Calendar ID of the calendar event owner.   For the External Calendar connection use &#x60;external_{salesloft_user_guid}&#x60; format.   Example: &#x60;external_00210d1a-df8a-459f-af75-89b953b618b0&#x60;.  (required)
     * @param endTime   End time of the calendar event, as a combined date-time value in the ISO 8601 format with a time zone offset.   Example: &#x60;2022-02-14T10:12:59+00:00&#x60;.  (required)
     * @param iCalUid   icalUID of the calendar event. Unique identifier for a calendar event across calendars.    Used as an upsert key.  (required)
     * @param id   Id of the calendar event, different for each occurrence in a recurring series.    Used as an upsert key.  (required)
     * @param startTime   Start time of the calendar event, as a combined date-time value in the ISO 8601 format with a time zone offset.   Example: &#x60;2022-02-14T10:12:59+00:00&#x60;.  (required)
     * @param allDay Should be set to &#x60;true&#x60; for all day calendar events. (optional)
     * @param attendees   List of attendees of the calendar event.   Example:   &#x60;&#x60;&#x60;     {       ...       \\\&quot;attendees\\\&quot;: [         {           \\\&quot;name\\\&quot;: \\\&quot;Alice\\\&quot;,           \\\&quot;email\\\&quot;: \\\&quot;alice@example.com\\\&quot;,           \\\&quot;status\\\&quot;: \\\&quot;accepted\\\&quot;,           \\\&quot;organizer\\\&quot;: true         },         {           \\\&quot;name\\\&quot;: \\\&quot;Bob\\\&quot;,           \\\&quot;email\\\&quot;: \\\&quot;bob@example.com\\\&quot;,           \\\&quot;status\\\&quot;: \\\&quot;needsAction\\\&quot;,           \\\&quot;organizer\\\&quot;: false         }       ]     }   &#x60;&#x60;&#x60;   &#x60;name&#x60;: full name of the attendee    &#x60;email&#x60;: email address of the attendee    &#x60;status&#x60;: one of the following - needsAction, accepted, tentative, declined    &#x60;organizer&#x60;: whether the attendee is the organizer of the calendar event  (optional)
     * @param canceledAt   Cancellation time of the calendar event, as a combined date-time value in the ISO 8601 format with a time zone offset.   Example: &#x60;2022-02-14T10:12:59+00:00&#x60;.  (optional)
     * @param description Description of the calendar event (optional)
     * @param location Location of the calendar event as free-form text. (optional)
     * @param organizer   Email address of the organizer  (optional)
     * @param recurring Should be set to &#x60;true&#x60; if this is one of recurring series calendar event. (optional)
     * @param status   Status of the calendar event. Depending on the status, the calendar event will or will not impact user&#39;s availability.   Possible values: &#x60;confirmed&#x60;, &#x60;tentative&#x60;, &#x60;cancelled&#x60;.   Example: &#x60;confirmed&#x60;.  (optional)
     * @param title Title of the calendar event (optional)
     * @param updatedAt   Last modification time of the event in the ISO 8601 format with a time zone offset. The event will not be updated if the &#39;updated_at&#39; timestamp from the payload is earlier than the one in the database.   Example: &#x60;2022-02-14T10:12:59+00:00&#x60;.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2CalendarEventsUpsertPostCall(String calendarId, LocalDate endTime, String iCalUid, String id, LocalDate startTime, Boolean allDay, Object attendees, String canceledAt, String description, String location, String organizer, Boolean recurring, String status, String title, String updatedAt, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/calendar/events/upsert";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (allDay != null) {
            localVarFormParams.put("all_day", allDay);
        }

        if (attendees != null) {
            localVarFormParams.put("attendees", attendees);
        }

        if (calendarId != null) {
            localVarFormParams.put("calendar_id", calendarId);
        }

        if (canceledAt != null) {
            localVarFormParams.put("canceled_at", canceledAt);
        }

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (endTime != null) {
            localVarFormParams.put("end_time", endTime);
        }

        if (iCalUid != null) {
            localVarFormParams.put("i_cal_uid", iCalUid);
        }

        if (id != null) {
            localVarFormParams.put("id", id);
        }

        if (location != null) {
            localVarFormParams.put("location", location);
        }

        if (organizer != null) {
            localVarFormParams.put("organizer", organizer);
        }

        if (recurring != null) {
            localVarFormParams.put("recurring", recurring);
        }

        if (startTime != null) {
            localVarFormParams.put("start_time", startTime);
        }

        if (status != null) {
            localVarFormParams.put("status", status);
        }

        if (title != null) {
            localVarFormParams.put("title", title);
        }

        if (updatedAt != null) {
            localVarFormParams.put("updated_at", updatedAt);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2CalendarEventsUpsertPostValidateBeforeCall(String calendarId, LocalDate endTime, String iCalUid, String id, LocalDate startTime, Boolean allDay, Object attendees, String canceledAt, String description, String location, String organizer, Boolean recurring, String status, String title, String updatedAt, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'calendarId' is set
        if (calendarId == null) {
            throw new ApiException("Missing the required parameter 'calendarId' when calling v2CalendarEventsUpsertPost(Async)");
        }

        // verify the required parameter 'endTime' is set
        if (endTime == null) {
            throw new ApiException("Missing the required parameter 'endTime' when calling v2CalendarEventsUpsertPost(Async)");
        }

        // verify the required parameter 'iCalUid' is set
        if (iCalUid == null) {
            throw new ApiException("Missing the required parameter 'iCalUid' when calling v2CalendarEventsUpsertPost(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v2CalendarEventsUpsertPost(Async)");
        }

        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling v2CalendarEventsUpsertPost(Async)");
        }

        return v2CalendarEventsUpsertPostCall(calendarId, endTime, iCalUid, id, startTime, allDay, attendees, canceledAt, description, location, organizer, recurring, status, title, updatedAt, _callback);

    }

    /**
     * Upsert a calendar event
     *   Upserts a calendar event object.   Upsert key is a combination of &#x60;id&#x60; and &#x60;i_cal_uid&#x60; scoped to the given &#x60;calendar_id&#x60;.   Bulk operations:   This endpoint is used for bulk operations, see https://developers.salesloft.com/bulk.html for integration instructions.   Use &#x60;calendar/events/upsert&#x60; as an event type, and this spec as a data spec.   This endpoint should be used directly for the time sensitive calendar event updates. 
     * @param calendarId   Calendar ID of the calendar event owner.   For the External Calendar connection use &#x60;external_{salesloft_user_guid}&#x60; format.   Example: &#x60;external_00210d1a-df8a-459f-af75-89b953b618b0&#x60;.  (required)
     * @param endTime   End time of the calendar event, as a combined date-time value in the ISO 8601 format with a time zone offset.   Example: &#x60;2022-02-14T10:12:59+00:00&#x60;.  (required)
     * @param iCalUid   icalUID of the calendar event. Unique identifier for a calendar event across calendars.    Used as an upsert key.  (required)
     * @param id   Id of the calendar event, different for each occurrence in a recurring series.    Used as an upsert key.  (required)
     * @param startTime   Start time of the calendar event, as a combined date-time value in the ISO 8601 format with a time zone offset.   Example: &#x60;2022-02-14T10:12:59+00:00&#x60;.  (required)
     * @param allDay Should be set to &#x60;true&#x60; for all day calendar events. (optional)
     * @param attendees   List of attendees of the calendar event.   Example:   &#x60;&#x60;&#x60;     {       ...       \\\&quot;attendees\\\&quot;: [         {           \\\&quot;name\\\&quot;: \\\&quot;Alice\\\&quot;,           \\\&quot;email\\\&quot;: \\\&quot;alice@example.com\\\&quot;,           \\\&quot;status\\\&quot;: \\\&quot;accepted\\\&quot;,           \\\&quot;organizer\\\&quot;: true         },         {           \\\&quot;name\\\&quot;: \\\&quot;Bob\\\&quot;,           \\\&quot;email\\\&quot;: \\\&quot;bob@example.com\\\&quot;,           \\\&quot;status\\\&quot;: \\\&quot;needsAction\\\&quot;,           \\\&quot;organizer\\\&quot;: false         }       ]     }   &#x60;&#x60;&#x60;   &#x60;name&#x60;: full name of the attendee    &#x60;email&#x60;: email address of the attendee    &#x60;status&#x60;: one of the following - needsAction, accepted, tentative, declined    &#x60;organizer&#x60;: whether the attendee is the organizer of the calendar event  (optional)
     * @param canceledAt   Cancellation time of the calendar event, as a combined date-time value in the ISO 8601 format with a time zone offset.   Example: &#x60;2022-02-14T10:12:59+00:00&#x60;.  (optional)
     * @param description Description of the calendar event (optional)
     * @param location Location of the calendar event as free-form text. (optional)
     * @param organizer   Email address of the organizer  (optional)
     * @param recurring Should be set to &#x60;true&#x60; if this is one of recurring series calendar event. (optional)
     * @param status   Status of the calendar event. Depending on the status, the calendar event will or will not impact user&#39;s availability.   Possible values: &#x60;confirmed&#x60;, &#x60;tentative&#x60;, &#x60;cancelled&#x60;.   Example: &#x60;confirmed&#x60;.  (optional)
     * @param title Title of the calendar event (optional)
     * @param updatedAt   Last modification time of the event in the ISO 8601 format with a time zone offset. The event will not be updated if the &#39;updated_at&#39; timestamp from the payload is earlier than the one in the database.   Example: &#x60;2022-02-14T10:12:59+00:00&#x60;.  (optional)
     * @return CalendarEvent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CalendarEvent v2CalendarEventsUpsertPost(String calendarId, LocalDate endTime, String iCalUid, String id, LocalDate startTime, Boolean allDay, Object attendees, String canceledAt, String description, String location, String organizer, Boolean recurring, String status, String title, String updatedAt) throws ApiException {
        ApiResponse<CalendarEvent> localVarResp = v2CalendarEventsUpsertPostWithHttpInfo(calendarId, endTime, iCalUid, id, startTime, allDay, attendees, canceledAt, description, location, organizer, recurring, status, title, updatedAt);
        return localVarResp.getData();
    }

    /**
     * Upsert a calendar event
     *   Upserts a calendar event object.   Upsert key is a combination of &#x60;id&#x60; and &#x60;i_cal_uid&#x60; scoped to the given &#x60;calendar_id&#x60;.   Bulk operations:   This endpoint is used for bulk operations, see https://developers.salesloft.com/bulk.html for integration instructions.   Use &#x60;calendar/events/upsert&#x60; as an event type, and this spec as a data spec.   This endpoint should be used directly for the time sensitive calendar event updates. 
     * @param calendarId   Calendar ID of the calendar event owner.   For the External Calendar connection use &#x60;external_{salesloft_user_guid}&#x60; format.   Example: &#x60;external_00210d1a-df8a-459f-af75-89b953b618b0&#x60;.  (required)
     * @param endTime   End time of the calendar event, as a combined date-time value in the ISO 8601 format with a time zone offset.   Example: &#x60;2022-02-14T10:12:59+00:00&#x60;.  (required)
     * @param iCalUid   icalUID of the calendar event. Unique identifier for a calendar event across calendars.    Used as an upsert key.  (required)
     * @param id   Id of the calendar event, different for each occurrence in a recurring series.    Used as an upsert key.  (required)
     * @param startTime   Start time of the calendar event, as a combined date-time value in the ISO 8601 format with a time zone offset.   Example: &#x60;2022-02-14T10:12:59+00:00&#x60;.  (required)
     * @param allDay Should be set to &#x60;true&#x60; for all day calendar events. (optional)
     * @param attendees   List of attendees of the calendar event.   Example:   &#x60;&#x60;&#x60;     {       ...       \\\&quot;attendees\\\&quot;: [         {           \\\&quot;name\\\&quot;: \\\&quot;Alice\\\&quot;,           \\\&quot;email\\\&quot;: \\\&quot;alice@example.com\\\&quot;,           \\\&quot;status\\\&quot;: \\\&quot;accepted\\\&quot;,           \\\&quot;organizer\\\&quot;: true         },         {           \\\&quot;name\\\&quot;: \\\&quot;Bob\\\&quot;,           \\\&quot;email\\\&quot;: \\\&quot;bob@example.com\\\&quot;,           \\\&quot;status\\\&quot;: \\\&quot;needsAction\\\&quot;,           \\\&quot;organizer\\\&quot;: false         }       ]     }   &#x60;&#x60;&#x60;   &#x60;name&#x60;: full name of the attendee    &#x60;email&#x60;: email address of the attendee    &#x60;status&#x60;: one of the following - needsAction, accepted, tentative, declined    &#x60;organizer&#x60;: whether the attendee is the organizer of the calendar event  (optional)
     * @param canceledAt   Cancellation time of the calendar event, as a combined date-time value in the ISO 8601 format with a time zone offset.   Example: &#x60;2022-02-14T10:12:59+00:00&#x60;.  (optional)
     * @param description Description of the calendar event (optional)
     * @param location Location of the calendar event as free-form text. (optional)
     * @param organizer   Email address of the organizer  (optional)
     * @param recurring Should be set to &#x60;true&#x60; if this is one of recurring series calendar event. (optional)
     * @param status   Status of the calendar event. Depending on the status, the calendar event will or will not impact user&#39;s availability.   Possible values: &#x60;confirmed&#x60;, &#x60;tentative&#x60;, &#x60;cancelled&#x60;.   Example: &#x60;confirmed&#x60;.  (optional)
     * @param title Title of the calendar event (optional)
     * @param updatedAt   Last modification time of the event in the ISO 8601 format with a time zone offset. The event will not be updated if the &#39;updated_at&#39; timestamp from the payload is earlier than the one in the database.   Example: &#x60;2022-02-14T10:12:59+00:00&#x60;.  (optional)
     * @return ApiResponse&lt;CalendarEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CalendarEvent> v2CalendarEventsUpsertPostWithHttpInfo(String calendarId, LocalDate endTime, String iCalUid, String id, LocalDate startTime, Boolean allDay, Object attendees, String canceledAt, String description, String location, String organizer, Boolean recurring, String status, String title, String updatedAt) throws ApiException {
        okhttp3.Call localVarCall = v2CalendarEventsUpsertPostValidateBeforeCall(calendarId, endTime, iCalUid, id, startTime, allDay, attendees, canceledAt, description, location, organizer, recurring, status, title, updatedAt, null);
        Type localVarReturnType = new TypeToken<CalendarEvent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upsert a calendar event (asynchronously)
     *   Upserts a calendar event object.   Upsert key is a combination of &#x60;id&#x60; and &#x60;i_cal_uid&#x60; scoped to the given &#x60;calendar_id&#x60;.   Bulk operations:   This endpoint is used for bulk operations, see https://developers.salesloft.com/bulk.html for integration instructions.   Use &#x60;calendar/events/upsert&#x60; as an event type, and this spec as a data spec.   This endpoint should be used directly for the time sensitive calendar event updates. 
     * @param calendarId   Calendar ID of the calendar event owner.   For the External Calendar connection use &#x60;external_{salesloft_user_guid}&#x60; format.   Example: &#x60;external_00210d1a-df8a-459f-af75-89b953b618b0&#x60;.  (required)
     * @param endTime   End time of the calendar event, as a combined date-time value in the ISO 8601 format with a time zone offset.   Example: &#x60;2022-02-14T10:12:59+00:00&#x60;.  (required)
     * @param iCalUid   icalUID of the calendar event. Unique identifier for a calendar event across calendars.    Used as an upsert key.  (required)
     * @param id   Id of the calendar event, different for each occurrence in a recurring series.    Used as an upsert key.  (required)
     * @param startTime   Start time of the calendar event, as a combined date-time value in the ISO 8601 format with a time zone offset.   Example: &#x60;2022-02-14T10:12:59+00:00&#x60;.  (required)
     * @param allDay Should be set to &#x60;true&#x60; for all day calendar events. (optional)
     * @param attendees   List of attendees of the calendar event.   Example:   &#x60;&#x60;&#x60;     {       ...       \\\&quot;attendees\\\&quot;: [         {           \\\&quot;name\\\&quot;: \\\&quot;Alice\\\&quot;,           \\\&quot;email\\\&quot;: \\\&quot;alice@example.com\\\&quot;,           \\\&quot;status\\\&quot;: \\\&quot;accepted\\\&quot;,           \\\&quot;organizer\\\&quot;: true         },         {           \\\&quot;name\\\&quot;: \\\&quot;Bob\\\&quot;,           \\\&quot;email\\\&quot;: \\\&quot;bob@example.com\\\&quot;,           \\\&quot;status\\\&quot;: \\\&quot;needsAction\\\&quot;,           \\\&quot;organizer\\\&quot;: false         }       ]     }   &#x60;&#x60;&#x60;   &#x60;name&#x60;: full name of the attendee    &#x60;email&#x60;: email address of the attendee    &#x60;status&#x60;: one of the following - needsAction, accepted, tentative, declined    &#x60;organizer&#x60;: whether the attendee is the organizer of the calendar event  (optional)
     * @param canceledAt   Cancellation time of the calendar event, as a combined date-time value in the ISO 8601 format with a time zone offset.   Example: &#x60;2022-02-14T10:12:59+00:00&#x60;.  (optional)
     * @param description Description of the calendar event (optional)
     * @param location Location of the calendar event as free-form text. (optional)
     * @param organizer   Email address of the organizer  (optional)
     * @param recurring Should be set to &#x60;true&#x60; if this is one of recurring series calendar event. (optional)
     * @param status   Status of the calendar event. Depending on the status, the calendar event will or will not impact user&#39;s availability.   Possible values: &#x60;confirmed&#x60;, &#x60;tentative&#x60;, &#x60;cancelled&#x60;.   Example: &#x60;confirmed&#x60;.  (optional)
     * @param title Title of the calendar event (optional)
     * @param updatedAt   Last modification time of the event in the ISO 8601 format with a time zone offset. The event will not be updated if the &#39;updated_at&#39; timestamp from the payload is earlier than the one in the database.   Example: &#x60;2022-02-14T10:12:59+00:00&#x60;.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2CalendarEventsUpsertPostAsync(String calendarId, LocalDate endTime, String iCalUid, String id, LocalDate startTime, Boolean allDay, Object attendees, String canceledAt, String description, String location, String organizer, Boolean recurring, String status, String title, String updatedAt, final ApiCallback<CalendarEvent> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2CalendarEventsUpsertPostValidateBeforeCall(calendarId, endTime, iCalUid, id, startTime, allDay, attendees, canceledAt, description, location, organizer, recurring, status, title, updatedAt, _callback);
        Type localVarReturnType = new TypeToken<CalendarEvent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
