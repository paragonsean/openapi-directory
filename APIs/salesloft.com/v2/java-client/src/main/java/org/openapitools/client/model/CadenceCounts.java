/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CadenceCounts
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:54.467506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CadenceCounts {
  public static final String SERIALIZED_NAME_CADENCE_PEOPLE = "cadence_people";
  @SerializedName(SERIALIZED_NAME_CADENCE_PEOPLE)
  private Integer cadencePeople;

  public static final String SERIALIZED_NAME_MEETINGS_BOOKED = "meetings_booked";
  @SerializedName(SERIALIZED_NAME_MEETINGS_BOOKED)
  private Integer meetingsBooked;

  public static final String SERIALIZED_NAME_OPPORTUNITIES_CREATED = "opportunities_created";
  @SerializedName(SERIALIZED_NAME_OPPORTUNITIES_CREATED)
  private Integer opportunitiesCreated;

  public static final String SERIALIZED_NAME_PEOPLE_ACTED_ON_COUNT = "people_acted_on_count";
  @SerializedName(SERIALIZED_NAME_PEOPLE_ACTED_ON_COUNT)
  private Integer peopleActedOnCount;

  public static final String SERIALIZED_NAME_TARGET_DAILY_PEOPLE = "target_daily_people";
  @SerializedName(SERIALIZED_NAME_TARGET_DAILY_PEOPLE)
  private Integer targetDailyPeople;

  public CadenceCounts() {
  }

  public CadenceCounts cadencePeople(Integer cadencePeople) {
    this.cadencePeople = cadencePeople;
    return this;
  }

  /**
   * The number of people that have ever been added to the cadence
   * @return cadencePeople
   */
  @javax.annotation.Nullable
  public Integer getCadencePeople() {
    return cadencePeople;
  }

  public void setCadencePeople(Integer cadencePeople) {
    this.cadencePeople = cadencePeople;
  }


  public CadenceCounts meetingsBooked(Integer meetingsBooked) {
    this.meetingsBooked = meetingsBooked;
    return this;
  }

  /**
   * The number of meetings booked and attributed to the cadence
   * @return meetingsBooked
   */
  @javax.annotation.Nullable
  public Integer getMeetingsBooked() {
    return meetingsBooked;
  }

  public void setMeetingsBooked(Integer meetingsBooked) {
    this.meetingsBooked = meetingsBooked;
  }


  public CadenceCounts opportunitiesCreated(Integer opportunitiesCreated) {
    this.opportunitiesCreated = opportunitiesCreated;
    return this;
  }

  /**
   * The number of opportunities created and attributed to the cadence
   * @return opportunitiesCreated
   */
  @javax.annotation.Nullable
  public Integer getOpportunitiesCreated() {
    return opportunitiesCreated;
  }

  public void setOpportunitiesCreated(Integer opportunitiesCreated) {
    this.opportunitiesCreated = opportunitiesCreated;
  }


  public CadenceCounts peopleActedOnCount(Integer peopleActedOnCount) {
    this.peopleActedOnCount = peopleActedOnCount;
    return this;
  }

  /**
   * The number of people that have been skipped, scheduled, or advanced in a cadence
   * @return peopleActedOnCount
   */
  @javax.annotation.Nullable
  public Integer getPeopleActedOnCount() {
    return peopleActedOnCount;
  }

  public void setPeopleActedOnCount(Integer peopleActedOnCount) {
    this.peopleActedOnCount = peopleActedOnCount;
  }


  public CadenceCounts targetDailyPeople(Integer targetDailyPeople) {
    this.targetDailyPeople = targetDailyPeople;
    return this;
  }

  /**
   * The user defined target for number of people to add to the cadence each day
   * @return targetDailyPeople
   */
  @javax.annotation.Nullable
  public Integer getTargetDailyPeople() {
    return targetDailyPeople;
  }

  public void setTargetDailyPeople(Integer targetDailyPeople) {
    this.targetDailyPeople = targetDailyPeople;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CadenceCounts cadenceCounts = (CadenceCounts) o;
    return Objects.equals(this.cadencePeople, cadenceCounts.cadencePeople) &&
        Objects.equals(this.meetingsBooked, cadenceCounts.meetingsBooked) &&
        Objects.equals(this.opportunitiesCreated, cadenceCounts.opportunitiesCreated) &&
        Objects.equals(this.peopleActedOnCount, cadenceCounts.peopleActedOnCount) &&
        Objects.equals(this.targetDailyPeople, cadenceCounts.targetDailyPeople);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cadencePeople, meetingsBooked, opportunitiesCreated, peopleActedOnCount, targetDailyPeople);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CadenceCounts {\n");
    sb.append("    cadencePeople: ").append(toIndentedString(cadencePeople)).append("\n");
    sb.append("    meetingsBooked: ").append(toIndentedString(meetingsBooked)).append("\n");
    sb.append("    opportunitiesCreated: ").append(toIndentedString(opportunitiesCreated)).append("\n");
    sb.append("    peopleActedOnCount: ").append(toIndentedString(peopleActedOnCount)).append("\n");
    sb.append("    targetDailyPeople: ").append(toIndentedString(targetDailyPeople)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cadence_people");
    openapiFields.add("meetings_booked");
    openapiFields.add("opportunities_created");
    openapiFields.add("people_acted_on_count");
    openapiFields.add("target_daily_people");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CadenceCounts
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CadenceCounts.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CadenceCounts is not found in the empty JSON string", CadenceCounts.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CadenceCounts.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CadenceCounts` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CadenceCounts.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CadenceCounts' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CadenceCounts> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CadenceCounts.class));

       return (TypeAdapter<T>) new TypeAdapter<CadenceCounts>() {
           @Override
           public void write(JsonWriter out, CadenceCounts value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CadenceCounts read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CadenceCounts given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CadenceCounts
   * @throws IOException if the JSON string is invalid with respect to CadenceCounts
   */
  public static CadenceCounts fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CadenceCounts.class);
  }

  /**
   * Convert an instance of CadenceCounts to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

