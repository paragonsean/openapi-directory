/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.EmbeddedRecordingResource;
import org.openapitools.client.model.EmbeddedResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CallDataRecord
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:54.467506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CallDataRecord {
  public static final String SERIALIZED_NAME_CALL = "call";
  @SerializedName(SERIALIZED_NAME_CALL)
  private EmbeddedResource call;

  public static final String SERIALIZED_NAME_CALL_TYPE = "call_type";
  @SerializedName(SERIALIZED_NAME_CALL_TYPE)
  private String callType;

  public static final String SERIALIZED_NAME_CALL_UUID = "call_uuid";
  @SerializedName(SERIALIZED_NAME_CALL_UUID)
  private String callUuid;

  public static final String SERIALIZED_NAME_CALLED_PERSON = "called_person";
  @SerializedName(SERIALIZED_NAME_CALLED_PERSON)
  private EmbeddedResource calledPerson;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private String direction;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_RECORDING = "recording";
  @SerializedName(SERIALIZED_NAME_RECORDING)
  private EmbeddedRecordingResource recording;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private EmbeddedResource user;

  public CallDataRecord() {
  }

  public CallDataRecord call(EmbeddedResource call) {
    this.call = call;
    return this;
  }

  /**
   * Get call
   * @return call
   */
  @javax.annotation.Nullable
  public EmbeddedResource getCall() {
    return call;
  }

  public void setCall(EmbeddedResource call) {
    this.call = call;
  }


  public CallDataRecord callType(String callType) {
    this.callType = callType;
    return this;
  }

  /**
   * Type of the call. Can be one of: call, bridge, collaboration. Though exact values may change over time
   * @return callType
   */
  @javax.annotation.Nullable
  public String getCallType() {
    return callType;
  }

  public void setCallType(String callType) {
    this.callType = callType;
  }


  public CallDataRecord callUuid(String callUuid) {
    this.callUuid = callUuid;
    return this;
  }

  /**
   * UUID of the call. Legs of the same call will have the same call_uuid.
   * @return callUuid
   */
  @javax.annotation.Nullable
  public String getCallUuid() {
    return callUuid;
  }

  public void setCallUuid(String callUuid) {
    this.callUuid = callUuid;
  }


  public CallDataRecord calledPerson(EmbeddedResource calledPerson) {
    this.calledPerson = calledPerson;
    return this;
  }

  /**
   * Get calledPerson
   * @return calledPerson
   */
  @javax.annotation.Nullable
  public EmbeddedResource getCalledPerson() {
    return calledPerson;
  }

  public void setCalledPerson(EmbeddedResource calledPerson) {
    this.calledPerson = calledPerson;
  }


  public CallDataRecord createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Datetime of when the call was created
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public CallDataRecord direction(String direction) {
    this.direction = direction;
    return this;
  }

  /**
   * Direction of the call. Can be one of: inbound, outbound
   * @return direction
   */
  @javax.annotation.Nullable
  public String getDirection() {
    return direction;
  }

  public void setDirection(String direction) {
    this.direction = direction;
  }


  public CallDataRecord duration(Integer duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Length of the call in seconds
   * @return duration
   */
  @javax.annotation.Nullable
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public CallDataRecord from(String from) {
    this.from = from;
    return this;
  }

  /**
   * Phone number that placed the call
   * @return from
   */
  @javax.annotation.Nullable
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }


  public CallDataRecord id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * ID of CallDataRecord
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public CallDataRecord recording(EmbeddedRecordingResource recording) {
    this.recording = recording;
    return this;
  }

  /**
   * Get recording
   * @return recording
   */
  @javax.annotation.Nullable
  public EmbeddedRecordingResource getRecording() {
    return recording;
  }

  public void setRecording(EmbeddedRecordingResource recording) {
    this.recording = recording;
  }


  public CallDataRecord status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The outcome of the call. Can be one of: queued, initiated, ringing, in-progress, completed, busy, no-answer, canceled, failed
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public CallDataRecord to(String to) {
    this.to = to;
    return this;
  }

  /**
   * Phone number that received the call
   * @return to
   */
  @javax.annotation.Nullable
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }


  public CallDataRecord updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Datetime of when the call was last updated
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public CallDataRecord user(EmbeddedResource user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public EmbeddedResource getUser() {
    return user;
  }

  public void setUser(EmbeddedResource user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CallDataRecord callDataRecord = (CallDataRecord) o;
    return Objects.equals(this.call, callDataRecord.call) &&
        Objects.equals(this.callType, callDataRecord.callType) &&
        Objects.equals(this.callUuid, callDataRecord.callUuid) &&
        Objects.equals(this.calledPerson, callDataRecord.calledPerson) &&
        Objects.equals(this.createdAt, callDataRecord.createdAt) &&
        Objects.equals(this.direction, callDataRecord.direction) &&
        Objects.equals(this.duration, callDataRecord.duration) &&
        Objects.equals(this.from, callDataRecord.from) &&
        Objects.equals(this.id, callDataRecord.id) &&
        Objects.equals(this.recording, callDataRecord.recording) &&
        Objects.equals(this.status, callDataRecord.status) &&
        Objects.equals(this.to, callDataRecord.to) &&
        Objects.equals(this.updatedAt, callDataRecord.updatedAt) &&
        Objects.equals(this.user, callDataRecord.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(call, callType, callUuid, calledPerson, createdAt, direction, duration, from, id, recording, status, to, updatedAt, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CallDataRecord {\n");
    sb.append("    call: ").append(toIndentedString(call)).append("\n");
    sb.append("    callType: ").append(toIndentedString(callType)).append("\n");
    sb.append("    callUuid: ").append(toIndentedString(callUuid)).append("\n");
    sb.append("    calledPerson: ").append(toIndentedString(calledPerson)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    recording: ").append(toIndentedString(recording)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("call");
    openapiFields.add("call_type");
    openapiFields.add("call_uuid");
    openapiFields.add("called_person");
    openapiFields.add("created_at");
    openapiFields.add("direction");
    openapiFields.add("duration");
    openapiFields.add("from");
    openapiFields.add("id");
    openapiFields.add("recording");
    openapiFields.add("status");
    openapiFields.add("to");
    openapiFields.add("updated_at");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CallDataRecord
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CallDataRecord.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CallDataRecord is not found in the empty JSON string", CallDataRecord.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CallDataRecord.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CallDataRecord` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `call`
      if (jsonObj.get("call") != null && !jsonObj.get("call").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("call"));
      }
      if ((jsonObj.get("call_type") != null && !jsonObj.get("call_type").isJsonNull()) && !jsonObj.get("call_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `call_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("call_type").toString()));
      }
      if ((jsonObj.get("call_uuid") != null && !jsonObj.get("call_uuid").isJsonNull()) && !jsonObj.get("call_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `call_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("call_uuid").toString()));
      }
      // validate the optional field `called_person`
      if (jsonObj.get("called_person") != null && !jsonObj.get("called_person").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("called_person"));
      }
      if ((jsonObj.get("direction") != null && !jsonObj.get("direction").isJsonNull()) && !jsonObj.get("direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("direction").toString()));
      }
      if ((jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) && !jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      // validate the optional field `recording`
      if (jsonObj.get("recording") != null && !jsonObj.get("recording").isJsonNull()) {
        EmbeddedRecordingResource.validateJsonElement(jsonObj.get("recording"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("to") != null && !jsonObj.get("to").isJsonNull()) && !jsonObj.get("to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CallDataRecord.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CallDataRecord' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CallDataRecord> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CallDataRecord.class));

       return (TypeAdapter<T>) new TypeAdapter<CallDataRecord>() {
           @Override
           public void write(JsonWriter out, CallDataRecord value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CallDataRecord read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CallDataRecord given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CallDataRecord
   * @throws IOException if the JSON string is invalid with respect to CallDataRecord
   */
  public static CallDataRecord fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CallDataRecord.class);
  }

  /**
   * Convert an instance of CallDataRecord to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

