/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CalendarEvent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:54.467506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CalendarEvent {
  public static final String SERIALIZED_NAME_ALL_DAY = "all_day";
  @SerializedName(SERIALIZED_NAME_ALL_DAY)
  private Boolean allDay;

  public static final String SERIALIZED_NAME_ATTENDEES = "attendees";
  @SerializedName(SERIALIZED_NAME_ATTENDEES)
  private List<Object> attendees = new ArrayList<>();

  public static final String SERIALIZED_NAME_BODY_HTML = "body_html";
  @SerializedName(SERIALIZED_NAME_BODY_HTML)
  private String bodyHtml;

  public static final String SERIALIZED_NAME_BUSY = "busy";
  @SerializedName(SERIALIZED_NAME_BUSY)
  private Boolean busy;

  public static final String SERIALIZED_NAME_CALENDAR_ID = "calendar_id";
  @SerializedName(SERIALIZED_NAME_CALENDAR_ID)
  private String calendarId;

  public static final String SERIALIZED_NAME_CANCELED_AT = "canceled_at";
  @SerializedName(SERIALIZED_NAME_CANCELED_AT)
  private OffsetDateTime canceledAt;

  public static final String SERIALIZED_NAME_CONFERENCE_DATA = "conference_data";
  @SerializedName(SERIALIZED_NAME_CONFERENCE_DATA)
  private Object conferenceData;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CREATOR = "creator";
  @SerializedName(SERIALIZED_NAME_CREATOR)
  private String creator;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_END_TIME = "end_time";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_EXTENDED_PROPERTIES = "extended_properties";
  @SerializedName(SERIALIZED_NAME_EXTENDED_PROPERTIES)
  private Object extendedProperties;

  public static final String SERIALIZED_NAME_HTML_LINK = "html_link";
  @SerializedName(SERIALIZED_NAME_HTML_LINK)
  private String htmlLink;

  public static final String SERIALIZED_NAME_I_CAL_UID = "i_cal_uid";
  @SerializedName(SERIALIZED_NAME_I_CAL_UID)
  private String iCalUid;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_ORGANIZER = "organizer";
  @SerializedName(SERIALIZED_NAME_ORGANIZER)
  private String organizer;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private String provider;

  public static final String SERIALIZED_NAME_RECURRING = "recurring";
  @SerializedName(SERIALIZED_NAME_RECURRING)
  private Boolean recurring;

  public static final String SERIALIZED_NAME_START_TIME = "start_time";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenant_id";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private Integer tenantId;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_USER_GUID = "user_guid";
  @SerializedName(SERIALIZED_NAME_USER_GUID)
  private String userGuid;

  public CalendarEvent() {
  }

  public CalendarEvent allDay(Boolean allDay) {
    this.allDay = allDay;
    return this;
  }

  /**
   * Whether the calendar event is an all-day event.
   * @return allDay
   */
  @javax.annotation.Nullable
  public Boolean getAllDay() {
    return allDay;
  }

  public void setAllDay(Boolean allDay) {
    this.allDay = allDay;
  }


  public CalendarEvent attendees(List<Object> attendees) {
    this.attendees = attendees;
    return this;
  }

  public CalendarEvent addAttendeesItem(Object attendeesItem) {
    if (this.attendees == null) {
      this.attendees = new ArrayList<>();
    }
    this.attendees.add(attendeesItem);
    return this;
  }

  /**
   * The attendees of the calendar event.
   * @return attendees
   */
  @javax.annotation.Nullable
  public List<Object> getAttendees() {
    return attendees;
  }

  public void setAttendees(List<Object> attendees) {
    this.attendees = attendees;
  }


  public CalendarEvent bodyHtml(String bodyHtml) {
    this.bodyHtml = bodyHtml;
    return this;
  }

  /**
   * Raw body content from Microsoft calendar events
   * @return bodyHtml
   */
  @javax.annotation.Nullable
  public String getBodyHtml() {
    return bodyHtml;
  }

  public void setBodyHtml(String bodyHtml) {
    this.bodyHtml = bodyHtml;
  }


  public CalendarEvent busy(Boolean busy) {
    this.busy = busy;
    return this;
  }

  /**
   * Busy/free status of the calendar event
   * @return busy
   */
  @javax.annotation.Nullable
  public Boolean getBusy() {
    return busy;
  }

  public void setBusy(Boolean busy) {
    this.busy = busy;
  }


  public CalendarEvent calendarId(String calendarId) {
    this.calendarId = calendarId;
    return this;
  }

  /**
   * Calendar ID of the user calendar.
   * @return calendarId
   */
  @javax.annotation.Nullable
  public String getCalendarId() {
    return calendarId;
  }

  public void setCalendarId(String calendarId) {
    this.calendarId = calendarId;
  }


  public CalendarEvent canceledAt(OffsetDateTime canceledAt) {
    this.canceledAt = canceledAt;
    return this;
  }

  /**
   * The canceled date of the calendar event.
   * @return canceledAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCanceledAt() {
    return canceledAt;
  }

  public void setCanceledAt(OffsetDateTime canceledAt) {
    this.canceledAt = canceledAt;
  }


  public CalendarEvent conferenceData(Object conferenceData) {
    this.conferenceData = conferenceData;
    return this;
  }

  /**
   * The conference-related information, such as details of a Google Meet conference.
   * @return conferenceData
   */
  @javax.annotation.Nullable
  public Object getConferenceData() {
    return conferenceData;
  }

  public void setConferenceData(Object conferenceData) {
    this.conferenceData = conferenceData;
  }


  public CalendarEvent createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Creation time of the calendar event.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public CalendarEvent creator(String creator) {
    this.creator = creator;
    return this;
  }

  /**
   * The creator email of the calendar event.
   * @return creator
   */
  @javax.annotation.Nullable
  public String getCreator() {
    return creator;
  }

  public void setCreator(String creator) {
    this.creator = creator;
  }


  public CalendarEvent description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the calendar event
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CalendarEvent endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The (exclusive) end time of the calendar event.
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public CalendarEvent extendedProperties(Object extendedProperties) {
    this.extendedProperties = extendedProperties;
    return this;
  }

  /**
   * Extended properties of the calendar event.
   * @return extendedProperties
   */
  @javax.annotation.Nullable
  public Object getExtendedProperties() {
    return extendedProperties;
  }

  public void setExtendedProperties(Object extendedProperties) {
    this.extendedProperties = extendedProperties;
  }


  public CalendarEvent htmlLink(String htmlLink) {
    this.htmlLink = htmlLink;
    return this;
  }

  /**
   * An absolute link to this calendar event in the Google Calendar Web UI.
   * @return htmlLink
   */
  @javax.annotation.Nullable
  public String getHtmlLink() {
    return htmlLink;
  }

  public void setHtmlLink(String htmlLink) {
    this.htmlLink = htmlLink;
  }


  public CalendarEvent iCalUid(String iCalUid) {
    this.iCalUid = iCalUid;
    return this;
  }

  /**
   * Calendar event unique identifier (iCalUID)
   * @return iCalUid
   */
  @javax.annotation.Nullable
  public String getiCalUid() {
    return iCalUid;
  }

  public void setiCalUid(String iCalUid) {
    this.iCalUid = iCalUid;
  }


  public CalendarEvent id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The calendar event original ID from calendar provider
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CalendarEvent location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Location of the calendar event
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public CalendarEvent organizer(String organizer) {
    this.organizer = organizer;
    return this;
  }

  /**
   * The organizer email of the calendar event.
   * @return organizer
   */
  @javax.annotation.Nullable
  public String getOrganizer() {
    return organizer;
  }

  public void setOrganizer(String organizer) {
    this.organizer = organizer;
  }


  public CalendarEvent provider(String provider) {
    this.provider = provider;
    return this;
  }

  /**
   * The provider of the calendar event.
   * @return provider
   */
  @javax.annotation.Nullable
  public String getProvider() {
    return provider;
  }

  public void setProvider(String provider) {
    this.provider = provider;
  }


  public CalendarEvent recurring(Boolean recurring) {
    this.recurring = recurring;
    return this;
  }

  /**
   * Whether the calendar event is a recurring event.
   * @return recurring
   */
  @javax.annotation.Nullable
  public Boolean getRecurring() {
    return recurring;
  }

  public void setRecurring(Boolean recurring) {
    this.recurring = recurring;
  }


  public CalendarEvent startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The (inclusive) start time of the calendar event.
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public CalendarEvent status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the calendar event. It can be empty for non-google events.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public CalendarEvent tenantId(Integer tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * Tenant ID of the user calendar
   * @return tenantId
   */
  @javax.annotation.Nullable
  public Integer getTenantId() {
    return tenantId;
  }

  public void setTenantId(Integer tenantId) {
    this.tenantId = tenantId;
  }


  public CalendarEvent title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of the calendar event
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public CalendarEvent updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Last modification time of the calendar event.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public CalendarEvent userGuid(String userGuid) {
    this.userGuid = userGuid;
    return this;
  }

  /**
   * User GUID of the user calendar.
   * @return userGuid
   */
  @javax.annotation.Nullable
  public String getUserGuid() {
    return userGuid;
  }

  public void setUserGuid(String userGuid) {
    this.userGuid = userGuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CalendarEvent calendarEvent = (CalendarEvent) o;
    return Objects.equals(this.allDay, calendarEvent.allDay) &&
        Objects.equals(this.attendees, calendarEvent.attendees) &&
        Objects.equals(this.bodyHtml, calendarEvent.bodyHtml) &&
        Objects.equals(this.busy, calendarEvent.busy) &&
        Objects.equals(this.calendarId, calendarEvent.calendarId) &&
        Objects.equals(this.canceledAt, calendarEvent.canceledAt) &&
        Objects.equals(this.conferenceData, calendarEvent.conferenceData) &&
        Objects.equals(this.createdAt, calendarEvent.createdAt) &&
        Objects.equals(this.creator, calendarEvent.creator) &&
        Objects.equals(this.description, calendarEvent.description) &&
        Objects.equals(this.endTime, calendarEvent.endTime) &&
        Objects.equals(this.extendedProperties, calendarEvent.extendedProperties) &&
        Objects.equals(this.htmlLink, calendarEvent.htmlLink) &&
        Objects.equals(this.iCalUid, calendarEvent.iCalUid) &&
        Objects.equals(this.id, calendarEvent.id) &&
        Objects.equals(this.location, calendarEvent.location) &&
        Objects.equals(this.organizer, calendarEvent.organizer) &&
        Objects.equals(this.provider, calendarEvent.provider) &&
        Objects.equals(this.recurring, calendarEvent.recurring) &&
        Objects.equals(this.startTime, calendarEvent.startTime) &&
        Objects.equals(this.status, calendarEvent.status) &&
        Objects.equals(this.tenantId, calendarEvent.tenantId) &&
        Objects.equals(this.title, calendarEvent.title) &&
        Objects.equals(this.updatedAt, calendarEvent.updatedAt) &&
        Objects.equals(this.userGuid, calendarEvent.userGuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allDay, attendees, bodyHtml, busy, calendarId, canceledAt, conferenceData, createdAt, creator, description, endTime, extendedProperties, htmlLink, iCalUid, id, location, organizer, provider, recurring, startTime, status, tenantId, title, updatedAt, userGuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CalendarEvent {\n");
    sb.append("    allDay: ").append(toIndentedString(allDay)).append("\n");
    sb.append("    attendees: ").append(toIndentedString(attendees)).append("\n");
    sb.append("    bodyHtml: ").append(toIndentedString(bodyHtml)).append("\n");
    sb.append("    busy: ").append(toIndentedString(busy)).append("\n");
    sb.append("    calendarId: ").append(toIndentedString(calendarId)).append("\n");
    sb.append("    canceledAt: ").append(toIndentedString(canceledAt)).append("\n");
    sb.append("    conferenceData: ").append(toIndentedString(conferenceData)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    extendedProperties: ").append(toIndentedString(extendedProperties)).append("\n");
    sb.append("    htmlLink: ").append(toIndentedString(htmlLink)).append("\n");
    sb.append("    iCalUid: ").append(toIndentedString(iCalUid)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    organizer: ").append(toIndentedString(organizer)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    recurring: ").append(toIndentedString(recurring)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    userGuid: ").append(toIndentedString(userGuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("all_day");
    openapiFields.add("attendees");
    openapiFields.add("body_html");
    openapiFields.add("busy");
    openapiFields.add("calendar_id");
    openapiFields.add("canceled_at");
    openapiFields.add("conference_data");
    openapiFields.add("created_at");
    openapiFields.add("creator");
    openapiFields.add("description");
    openapiFields.add("end_time");
    openapiFields.add("extended_properties");
    openapiFields.add("html_link");
    openapiFields.add("i_cal_uid");
    openapiFields.add("id");
    openapiFields.add("location");
    openapiFields.add("organizer");
    openapiFields.add("provider");
    openapiFields.add("recurring");
    openapiFields.add("start_time");
    openapiFields.add("status");
    openapiFields.add("tenant_id");
    openapiFields.add("title");
    openapiFields.add("updated_at");
    openapiFields.add("user_guid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CalendarEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CalendarEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CalendarEvent is not found in the empty JSON string", CalendarEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CalendarEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CalendarEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("attendees") != null && !jsonObj.get("attendees").isJsonNull() && !jsonObj.get("attendees").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attendees` to be an array in the JSON string but got `%s`", jsonObj.get("attendees").toString()));
      }
      if ((jsonObj.get("body_html") != null && !jsonObj.get("body_html").isJsonNull()) && !jsonObj.get("body_html").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body_html` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body_html").toString()));
      }
      if ((jsonObj.get("calendar_id") != null && !jsonObj.get("calendar_id").isJsonNull()) && !jsonObj.get("calendar_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `calendar_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("calendar_id").toString()));
      }
      if ((jsonObj.get("creator") != null && !jsonObj.get("creator").isJsonNull()) && !jsonObj.get("creator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creator").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("html_link") != null && !jsonObj.get("html_link").isJsonNull()) && !jsonObj.get("html_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_link").toString()));
      }
      if ((jsonObj.get("i_cal_uid") != null && !jsonObj.get("i_cal_uid").isJsonNull()) && !jsonObj.get("i_cal_uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `i_cal_uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("i_cal_uid").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("organizer") != null && !jsonObj.get("organizer").isJsonNull()) && !jsonObj.get("organizer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organizer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organizer").toString()));
      }
      if ((jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) && !jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("user_guid") != null && !jsonObj.get("user_guid").isJsonNull()) && !jsonObj.get("user_guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_guid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CalendarEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CalendarEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CalendarEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CalendarEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<CalendarEvent>() {
           @Override
           public void write(JsonWriter out, CalendarEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CalendarEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CalendarEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CalendarEvent
   * @throws IOException if the JSON string is invalid with respect to CalendarEvent
   */
  public static CalendarEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CalendarEvent.class);
  }

  /**
   * Convert an instance of CalendarEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

