/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountUpsert;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountUpsertApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountUpsertApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountUpsertApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v2AccountUpsertsJsonPost
     * @param domain Website domain, not a fully qualified URI (required)
     * @param name Account Full Name (required)
     * @param accountTierId ID of the Account Tier for this Account (optional)
     * @param city City (optional)
     * @param companyStageId ID of the CompanyStage assigned to this Account (optional)
     * @param companyType Type of the Account&#39;s company (optional)
     * @param conversationalName Conversational name of the Account (optional)
     * @param country Country (optional)
     * @param crmId Requires Salesforce.  ID of the person in your external CRM. You must provide a crm_id_type if this is included.  Validations will be applied to the crm_id depending on the crm_id_type. A \\\&quot;salesforce\\\&quot; ID must be exactly 18 characters. A \\\&quot;salesforce\\\&quot; ID must be either an Account (001) object. The type will be validated using the 18 character ID.  This field can only be used if your application or API key has the \\\&quot;account:set_crm_id\\\&quot; scope.   (optional)
     * @param crmIdType The CRM that the provided crm_id is for. Must be one of: salesforce (optional)
     * @param customFields Custom fields are defined by the user&#39;s team. Only fields with values are presented in the API. (optional)
     * @param description Description (optional)
     * @param doNotContact Whether this company can not be contacted. Values are either true or false. Setting this to true will remove all associated people from all active communications (optional)
     * @param founded Date or year of founding (optional)
     * @param id ID of the account to update. Used if the upsert_key&#x3D;id. When id and another upsert_key are provided, the request will fail if the upsert record id and id parameter don&#39;t match.  (optional)
     * @param industry Industry (optional)
     * @param linkedinUrl Full LinkedIn url (optional)
     * @param locale Time locale (optional)
     * @param ownerId ID of the User that owns this Account (optional)
     * @param phone Phone number without formatting (optional)
     * @param postalCode Postal code (optional)
     * @param revenueRange Estimated revenue range (optional)
     * @param size Estimated number of people in employment (optional)
     * @param state State (optional)
     * @param street Street name and number (optional)
     * @param tags All tags applied to this Account (optional)
     * @param twitterHandle Twitter handle, with @ (optional)
     * @param upsertKey Name of the parameter to upsert on. The field must be provided in the input parameters, or the request will fail. The request will also fail if there are multiple records matched by the upsert field.  If upsert_key is not provided, this endpoint will not update an existing record.  Valid options are: id, crm_id, domain. If crm_id is provided, then a valid crm_id_type must be provided, as documented for the account create and update endpoints.  (optional)
     * @param website Website (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2AccountUpsertsJsonPostCall(String domain, String name, Integer accountTierId, String city, Integer companyStageId, String companyType, String conversationalName, String country, String crmId, String crmIdType, List<Object> customFields, String description, Boolean doNotContact, String founded, Integer id, String industry, String linkedinUrl, String locale, Integer ownerId, String phone, String postalCode, String revenueRange, String size, String state, String street, List<String> tags, String twitterHandle, String upsertKey, String website, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/account_upserts.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountTierId != null) {
            localVarFormParams.put("account_tier_id", accountTierId);
        }

        if (city != null) {
            localVarFormParams.put("city", city);
        }

        if (companyStageId != null) {
            localVarFormParams.put("company_stage_id", companyStageId);
        }

        if (companyType != null) {
            localVarFormParams.put("company_type", companyType);
        }

        if (conversationalName != null) {
            localVarFormParams.put("conversational_name", conversationalName);
        }

        if (country != null) {
            localVarFormParams.put("country", country);
        }

        if (crmId != null) {
            localVarFormParams.put("crm_id", crmId);
        }

        if (crmIdType != null) {
            localVarFormParams.put("crm_id_type", crmIdType);
        }

        if (customFields != null) {
            localVarFormParams.put("custom_fields", customFields);
        }

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (doNotContact != null) {
            localVarFormParams.put("do_not_contact", doNotContact);
        }

        if (domain != null) {
            localVarFormParams.put("domain", domain);
        }

        if (founded != null) {
            localVarFormParams.put("founded", founded);
        }

        if (id != null) {
            localVarFormParams.put("id", id);
        }

        if (industry != null) {
            localVarFormParams.put("industry", industry);
        }

        if (linkedinUrl != null) {
            localVarFormParams.put("linkedin_url", linkedinUrl);
        }

        if (locale != null) {
            localVarFormParams.put("locale", locale);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (ownerId != null) {
            localVarFormParams.put("owner_id", ownerId);
        }

        if (phone != null) {
            localVarFormParams.put("phone", phone);
        }

        if (postalCode != null) {
            localVarFormParams.put("postal_code", postalCode);
        }

        if (revenueRange != null) {
            localVarFormParams.put("revenue_range", revenueRange);
        }

        if (size != null) {
            localVarFormParams.put("size", size);
        }

        if (state != null) {
            localVarFormParams.put("state", state);
        }

        if (street != null) {
            localVarFormParams.put("street", street);
        }

        if (tags != null) {
            localVarFormParams.put("tags", tags);
        }

        if (twitterHandle != null) {
            localVarFormParams.put("twitter_handle", twitterHandle);
        }

        if (upsertKey != null) {
            localVarFormParams.put("upsert_key", upsertKey);
        }

        if (website != null) {
            localVarFormParams.put("website", website);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2AccountUpsertsJsonPostValidateBeforeCall(String domain, String name, Integer accountTierId, String city, Integer companyStageId, String companyType, String conversationalName, String country, String crmId, String crmIdType, List<Object> customFields, String description, Boolean doNotContact, String founded, Integer id, String industry, String linkedinUrl, String locale, Integer ownerId, String phone, String postalCode, String revenueRange, String size, String state, String street, List<String> tags, String twitterHandle, String upsertKey, String website, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling v2AccountUpsertsJsonPost(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling v2AccountUpsertsJsonPost(Async)");
        }

        return v2AccountUpsertsJsonPostCall(domain, name, accountTierId, city, companyStageId, companyType, conversationalName, country, crmId, crmIdType, customFields, description, doNotContact, founded, id, industry, linkedinUrl, locale, ownerId, phone, postalCode, revenueRange, size, state, street, tags, twitterHandle, upsertKey, website, _callback);

    }

    /**
     * Upsert an account
     * Upserts an account record. The upsert_key dictates how the upsert will be performed. The create and update behavior is exactly the same as the individual create and update endpoints. 
     * @param domain Website domain, not a fully qualified URI (required)
     * @param name Account Full Name (required)
     * @param accountTierId ID of the Account Tier for this Account (optional)
     * @param city City (optional)
     * @param companyStageId ID of the CompanyStage assigned to this Account (optional)
     * @param companyType Type of the Account&#39;s company (optional)
     * @param conversationalName Conversational name of the Account (optional)
     * @param country Country (optional)
     * @param crmId Requires Salesforce.  ID of the person in your external CRM. You must provide a crm_id_type if this is included.  Validations will be applied to the crm_id depending on the crm_id_type. A \\\&quot;salesforce\\\&quot; ID must be exactly 18 characters. A \\\&quot;salesforce\\\&quot; ID must be either an Account (001) object. The type will be validated using the 18 character ID.  This field can only be used if your application or API key has the \\\&quot;account:set_crm_id\\\&quot; scope.   (optional)
     * @param crmIdType The CRM that the provided crm_id is for. Must be one of: salesforce (optional)
     * @param customFields Custom fields are defined by the user&#39;s team. Only fields with values are presented in the API. (optional)
     * @param description Description (optional)
     * @param doNotContact Whether this company can not be contacted. Values are either true or false. Setting this to true will remove all associated people from all active communications (optional)
     * @param founded Date or year of founding (optional)
     * @param id ID of the account to update. Used if the upsert_key&#x3D;id. When id and another upsert_key are provided, the request will fail if the upsert record id and id parameter don&#39;t match.  (optional)
     * @param industry Industry (optional)
     * @param linkedinUrl Full LinkedIn url (optional)
     * @param locale Time locale (optional)
     * @param ownerId ID of the User that owns this Account (optional)
     * @param phone Phone number without formatting (optional)
     * @param postalCode Postal code (optional)
     * @param revenueRange Estimated revenue range (optional)
     * @param size Estimated number of people in employment (optional)
     * @param state State (optional)
     * @param street Street name and number (optional)
     * @param tags All tags applied to this Account (optional)
     * @param twitterHandle Twitter handle, with @ (optional)
     * @param upsertKey Name of the parameter to upsert on. The field must be provided in the input parameters, or the request will fail. The request will also fail if there are multiple records matched by the upsert field.  If upsert_key is not provided, this endpoint will not update an existing record.  Valid options are: id, crm_id, domain. If crm_id is provided, then a valid crm_id_type must be provided, as documented for the account create and update endpoints.  (optional)
     * @param website Website (optional)
     * @return AccountUpsert
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AccountUpsert v2AccountUpsertsJsonPost(String domain, String name, Integer accountTierId, String city, Integer companyStageId, String companyType, String conversationalName, String country, String crmId, String crmIdType, List<Object> customFields, String description, Boolean doNotContact, String founded, Integer id, String industry, String linkedinUrl, String locale, Integer ownerId, String phone, String postalCode, String revenueRange, String size, String state, String street, List<String> tags, String twitterHandle, String upsertKey, String website) throws ApiException {
        ApiResponse<AccountUpsert> localVarResp = v2AccountUpsertsJsonPostWithHttpInfo(domain, name, accountTierId, city, companyStageId, companyType, conversationalName, country, crmId, crmIdType, customFields, description, doNotContact, founded, id, industry, linkedinUrl, locale, ownerId, phone, postalCode, revenueRange, size, state, street, tags, twitterHandle, upsertKey, website);
        return localVarResp.getData();
    }

    /**
     * Upsert an account
     * Upserts an account record. The upsert_key dictates how the upsert will be performed. The create and update behavior is exactly the same as the individual create and update endpoints. 
     * @param domain Website domain, not a fully qualified URI (required)
     * @param name Account Full Name (required)
     * @param accountTierId ID of the Account Tier for this Account (optional)
     * @param city City (optional)
     * @param companyStageId ID of the CompanyStage assigned to this Account (optional)
     * @param companyType Type of the Account&#39;s company (optional)
     * @param conversationalName Conversational name of the Account (optional)
     * @param country Country (optional)
     * @param crmId Requires Salesforce.  ID of the person in your external CRM. You must provide a crm_id_type if this is included.  Validations will be applied to the crm_id depending on the crm_id_type. A \\\&quot;salesforce\\\&quot; ID must be exactly 18 characters. A \\\&quot;salesforce\\\&quot; ID must be either an Account (001) object. The type will be validated using the 18 character ID.  This field can only be used if your application or API key has the \\\&quot;account:set_crm_id\\\&quot; scope.   (optional)
     * @param crmIdType The CRM that the provided crm_id is for. Must be one of: salesforce (optional)
     * @param customFields Custom fields are defined by the user&#39;s team. Only fields with values are presented in the API. (optional)
     * @param description Description (optional)
     * @param doNotContact Whether this company can not be contacted. Values are either true or false. Setting this to true will remove all associated people from all active communications (optional)
     * @param founded Date or year of founding (optional)
     * @param id ID of the account to update. Used if the upsert_key&#x3D;id. When id and another upsert_key are provided, the request will fail if the upsert record id and id parameter don&#39;t match.  (optional)
     * @param industry Industry (optional)
     * @param linkedinUrl Full LinkedIn url (optional)
     * @param locale Time locale (optional)
     * @param ownerId ID of the User that owns this Account (optional)
     * @param phone Phone number without formatting (optional)
     * @param postalCode Postal code (optional)
     * @param revenueRange Estimated revenue range (optional)
     * @param size Estimated number of people in employment (optional)
     * @param state State (optional)
     * @param street Street name and number (optional)
     * @param tags All tags applied to this Account (optional)
     * @param twitterHandle Twitter handle, with @ (optional)
     * @param upsertKey Name of the parameter to upsert on. The field must be provided in the input parameters, or the request will fail. The request will also fail if there are multiple records matched by the upsert field.  If upsert_key is not provided, this endpoint will not update an existing record.  Valid options are: id, crm_id, domain. If crm_id is provided, then a valid crm_id_type must be provided, as documented for the account create and update endpoints.  (optional)
     * @param website Website (optional)
     * @return ApiResponse&lt;AccountUpsert&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountUpsert> v2AccountUpsertsJsonPostWithHttpInfo(String domain, String name, Integer accountTierId, String city, Integer companyStageId, String companyType, String conversationalName, String country, String crmId, String crmIdType, List<Object> customFields, String description, Boolean doNotContact, String founded, Integer id, String industry, String linkedinUrl, String locale, Integer ownerId, String phone, String postalCode, String revenueRange, String size, String state, String street, List<String> tags, String twitterHandle, String upsertKey, String website) throws ApiException {
        okhttp3.Call localVarCall = v2AccountUpsertsJsonPostValidateBeforeCall(domain, name, accountTierId, city, companyStageId, companyType, conversationalName, country, crmId, crmIdType, customFields, description, doNotContact, founded, id, industry, linkedinUrl, locale, ownerId, phone, postalCode, revenueRange, size, state, street, tags, twitterHandle, upsertKey, website, null);
        Type localVarReturnType = new TypeToken<AccountUpsert>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upsert an account (asynchronously)
     * Upserts an account record. The upsert_key dictates how the upsert will be performed. The create and update behavior is exactly the same as the individual create and update endpoints. 
     * @param domain Website domain, not a fully qualified URI (required)
     * @param name Account Full Name (required)
     * @param accountTierId ID of the Account Tier for this Account (optional)
     * @param city City (optional)
     * @param companyStageId ID of the CompanyStage assigned to this Account (optional)
     * @param companyType Type of the Account&#39;s company (optional)
     * @param conversationalName Conversational name of the Account (optional)
     * @param country Country (optional)
     * @param crmId Requires Salesforce.  ID of the person in your external CRM. You must provide a crm_id_type if this is included.  Validations will be applied to the crm_id depending on the crm_id_type. A \\\&quot;salesforce\\\&quot; ID must be exactly 18 characters. A \\\&quot;salesforce\\\&quot; ID must be either an Account (001) object. The type will be validated using the 18 character ID.  This field can only be used if your application or API key has the \\\&quot;account:set_crm_id\\\&quot; scope.   (optional)
     * @param crmIdType The CRM that the provided crm_id is for. Must be one of: salesforce (optional)
     * @param customFields Custom fields are defined by the user&#39;s team. Only fields with values are presented in the API. (optional)
     * @param description Description (optional)
     * @param doNotContact Whether this company can not be contacted. Values are either true or false. Setting this to true will remove all associated people from all active communications (optional)
     * @param founded Date or year of founding (optional)
     * @param id ID of the account to update. Used if the upsert_key&#x3D;id. When id and another upsert_key are provided, the request will fail if the upsert record id and id parameter don&#39;t match.  (optional)
     * @param industry Industry (optional)
     * @param linkedinUrl Full LinkedIn url (optional)
     * @param locale Time locale (optional)
     * @param ownerId ID of the User that owns this Account (optional)
     * @param phone Phone number without formatting (optional)
     * @param postalCode Postal code (optional)
     * @param revenueRange Estimated revenue range (optional)
     * @param size Estimated number of people in employment (optional)
     * @param state State (optional)
     * @param street Street name and number (optional)
     * @param tags All tags applied to this Account (optional)
     * @param twitterHandle Twitter handle, with @ (optional)
     * @param upsertKey Name of the parameter to upsert on. The field must be provided in the input parameters, or the request will fail. The request will also fail if there are multiple records matched by the upsert field.  If upsert_key is not provided, this endpoint will not update an existing record.  Valid options are: id, crm_id, domain. If crm_id is provided, then a valid crm_id_type must be provided, as documented for the account create and update endpoints.  (optional)
     * @param website Website (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2AccountUpsertsJsonPostAsync(String domain, String name, Integer accountTierId, String city, Integer companyStageId, String companyType, String conversationalName, String country, String crmId, String crmIdType, List<Object> customFields, String description, Boolean doNotContact, String founded, Integer id, String industry, String linkedinUrl, String locale, Integer ownerId, String phone, String postalCode, String revenueRange, String size, String state, String street, List<String> tags, String twitterHandle, String upsertKey, String website, final ApiCallback<AccountUpsert> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2AccountUpsertsJsonPostValidateBeforeCall(domain, name, accountTierId, city, companyStageId, companyType, conversationalName, country, crmId, crmIdType, customFields, description, doNotContact, founded, id, industry, linkedinUrl, locale, ownerId, phone, postalCode, revenueRange, size, state, street, tags, twitterHandle, upsertKey, website, _callback);
        Type localVarReturnType = new TypeToken<AccountUpsert>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
