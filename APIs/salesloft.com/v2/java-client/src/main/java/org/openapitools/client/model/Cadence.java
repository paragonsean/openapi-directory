/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CadenceCounts;
import org.openapitools.client.model.EmbeddedResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Cadence
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:54.467506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Cadence {
  public static final String SERIALIZED_NAME_ADDED_STAGE = "added_stage";
  @SerializedName(SERIALIZED_NAME_ADDED_STAGE)
  private EmbeddedResource addedStage;

  public static final String SERIALIZED_NAME_ARCHIVED_AT = "archived_at";
  @SerializedName(SERIALIZED_NAME_ARCHIVED_AT)
  private OffsetDateTime archivedAt;

  public static final String SERIALIZED_NAME_BOUNCED_STAGE = "bounced_stage";
  @SerializedName(SERIALIZED_NAME_BOUNCED_STAGE)
  private EmbeddedResource bouncedStage;

  public static final String SERIALIZED_NAME_CADENCE_FRAMEWORK_ID = "cadence_framework_id";
  @SerializedName(SERIALIZED_NAME_CADENCE_FRAMEWORK_ID)
  private Integer cadenceFrameworkId;

  public static final String SERIALIZED_NAME_CADENCE_FUNCTION = "cadence_function";
  @SerializedName(SERIALIZED_NAME_CADENCE_FUNCTION)
  private String cadenceFunction;

  public static final String SERIALIZED_NAME_CADENCE_PRIORITY = "cadence_priority";
  @SerializedName(SERIALIZED_NAME_CADENCE_PRIORITY)
  private EmbeddedResource cadencePriority;

  public static final String SERIALIZED_NAME_COUNTS = "counts";
  @SerializedName(SERIALIZED_NAME_COUNTS)
  private CadenceCounts counts;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CREATOR = "creator";
  @SerializedName(SERIALIZED_NAME_CREATOR)
  private EmbeddedResource creator;

  public static final String SERIALIZED_NAME_DRAFT = "draft";
  @SerializedName(SERIALIZED_NAME_DRAFT)
  private Boolean draft;

  public static final String SERIALIZED_NAME_EXTERNAL_IDENTIFIER = "external_identifier";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_IDENTIFIER)
  private String externalIdentifier;

  public static final String SERIALIZED_NAME_FINISHED_STAGE = "finished_stage";
  @SerializedName(SERIALIZED_NAME_FINISHED_STAGE)
  private EmbeddedResource finishedStage;

  public static final String SERIALIZED_NAME_GROUPS = "groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  private List<EmbeddedResource> groups = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPT_OUT_LINK_INCLUDED = "opt_out_link_included";
  @SerializedName(SERIALIZED_NAME_OPT_OUT_LINK_INCLUDED)
  private Boolean optOutLinkIncluded;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private EmbeddedResource owner;

  public static final String SERIALIZED_NAME_REMOVE_BOUNCES_ENABLED = "remove_bounces_enabled";
  @SerializedName(SERIALIZED_NAME_REMOVE_BOUNCES_ENABLED)
  private Boolean removeBouncesEnabled;

  public static final String SERIALIZED_NAME_REMOVE_REPLIES_ENABLED = "remove_replies_enabled";
  @SerializedName(SERIALIZED_NAME_REMOVE_REPLIES_ENABLED)
  private Boolean removeRepliesEnabled;

  public static final String SERIALIZED_NAME_REPLIED_STAGE = "replied_stage";
  @SerializedName(SERIALIZED_NAME_REPLIED_STAGE)
  private EmbeddedResource repliedStage;

  public static final String SERIALIZED_NAME_SHARED = "shared";
  @SerializedName(SERIALIZED_NAME_SHARED)
  private Boolean shared;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEAM_CADENCE = "team_cadence";
  @SerializedName(SERIALIZED_NAME_TEAM_CADENCE)
  private Boolean teamCadence;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public Cadence() {
  }

  public Cadence addedStage(EmbeddedResource addedStage) {
    this.addedStage = addedStage;
    return this;
  }

  /**
   * Get addedStage
   * @return addedStage
   */
  @javax.annotation.Nullable
  public EmbeddedResource getAddedStage() {
    return addedStage;
  }

  public void setAddedStage(EmbeddedResource addedStage) {
    this.addedStage = addedStage;
  }


  public Cadence archivedAt(OffsetDateTime archivedAt) {
    this.archivedAt = archivedAt;
    return this;
  }

  /**
   * Datetime of when the cadence was archived, if archived
   * @return archivedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getArchivedAt() {
    return archivedAt;
  }

  public void setArchivedAt(OffsetDateTime archivedAt) {
    this.archivedAt = archivedAt;
  }


  public Cadence bouncedStage(EmbeddedResource bouncedStage) {
    this.bouncedStage = bouncedStage;
    return this;
  }

  /**
   * Get bouncedStage
   * @return bouncedStage
   */
  @javax.annotation.Nullable
  public EmbeddedResource getBouncedStage() {
    return bouncedStage;
  }

  public void setBouncedStage(EmbeddedResource bouncedStage) {
    this.bouncedStage = bouncedStage;
  }


  public Cadence cadenceFrameworkId(Integer cadenceFrameworkId) {
    this.cadenceFrameworkId = cadenceFrameworkId;
    return this;
  }

  /**
   * ID of the cadence framework used to create steps for the cadence
   * @return cadenceFrameworkId
   */
  @javax.annotation.Nullable
  public Integer getCadenceFrameworkId() {
    return cadenceFrameworkId;
  }

  public void setCadenceFrameworkId(Integer cadenceFrameworkId) {
    this.cadenceFrameworkId = cadenceFrameworkId;
  }


  public Cadence cadenceFunction(String cadenceFunction) {
    this.cadenceFunction = cadenceFunction;
    return this;
  }

  /**
   * The use case of the cadence. Possible values are:  outbound: Denotes an outbound cadence, typically for sales purposes  inbound: Denotes an inbound sales cadence  event: Denotes a cadence used for an upcoming event  other: Denotes a cadence outside of the standard process 
   * @return cadenceFunction
   */
  @javax.annotation.Nullable
  public String getCadenceFunction() {
    return cadenceFunction;
  }

  public void setCadenceFunction(String cadenceFunction) {
    this.cadenceFunction = cadenceFunction;
  }


  public Cadence cadencePriority(EmbeddedResource cadencePriority) {
    this.cadencePriority = cadencePriority;
    return this;
  }

  /**
   * Get cadencePriority
   * @return cadencePriority
   */
  @javax.annotation.Nullable
  public EmbeddedResource getCadencePriority() {
    return cadencePriority;
  }

  public void setCadencePriority(EmbeddedResource cadencePriority) {
    this.cadencePriority = cadencePriority;
  }


  public Cadence counts(CadenceCounts counts) {
    this.counts = counts;
    return this;
  }

  /**
   * Get counts
   * @return counts
   */
  @javax.annotation.Nullable
  public CadenceCounts getCounts() {
    return counts;
  }

  public void setCounts(CadenceCounts counts) {
    this.counts = counts;
  }


  public Cadence createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Datetime of when the cadence was created
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Cadence creator(EmbeddedResource creator) {
    this.creator = creator;
    return this;
  }

  /**
   * Get creator
   * @return creator
   */
  @javax.annotation.Nullable
  public EmbeddedResource getCreator() {
    return creator;
  }

  public void setCreator(EmbeddedResource creator) {
    this.creator = creator;
  }


  public Cadence draft(Boolean draft) {
    this.draft = draft;
    return this;
  }

  /**
   * Whether this cadence is in draft mode
   * @return draft
   */
  @javax.annotation.Nullable
  public Boolean getDraft() {
    return draft;
  }

  public void setDraft(Boolean draft) {
    this.draft = draft;
  }


  public Cadence externalIdentifier(String externalIdentifier) {
    this.externalIdentifier = externalIdentifier;
    return this;
  }

  /**
   * Cadence External ID
   * @return externalIdentifier
   */
  @javax.annotation.Nullable
  public String getExternalIdentifier() {
    return externalIdentifier;
  }

  public void setExternalIdentifier(String externalIdentifier) {
    this.externalIdentifier = externalIdentifier;
  }


  public Cadence finishedStage(EmbeddedResource finishedStage) {
    this.finishedStage = finishedStage;
    return this;
  }

  /**
   * Get finishedStage
   * @return finishedStage
   */
  @javax.annotation.Nullable
  public EmbeddedResource getFinishedStage() {
    return finishedStage;
  }

  public void setFinishedStage(EmbeddedResource finishedStage) {
    this.finishedStage = finishedStage;
  }


  public Cadence groups(List<EmbeddedResource> groups) {
    this.groups = groups;
    return this;
  }

  public Cadence addGroupsItem(EmbeddedResource groupsItem) {
    if (this.groups == null) {
      this.groups = new ArrayList<>();
    }
    this.groups.add(groupsItem);
    return this;
  }

  /**
   * Groups to which this cadence is assigned, if any
   * @return groups
   */
  @javax.annotation.Nullable
  public List<EmbeddedResource> getGroups() {
    return groups;
  }

  public void setGroups(List<EmbeddedResource> groups) {
    this.groups = groups;
  }


  public Cadence id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * ID of cadence
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Cadence name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Cadence name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Cadence optOutLinkIncluded(Boolean optOutLinkIncluded) {
    this.optOutLinkIncluded = optOutLinkIncluded;
    return this;
  }

  /**
   * Whether this cadence is configured to include an opt-out link by default
   * @return optOutLinkIncluded
   */
  @javax.annotation.Nullable
  public Boolean getOptOutLinkIncluded() {
    return optOutLinkIncluded;
  }

  public void setOptOutLinkIncluded(Boolean optOutLinkIncluded) {
    this.optOutLinkIncluded = optOutLinkIncluded;
  }


  public Cadence owner(EmbeddedResource owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public EmbeddedResource getOwner() {
    return owner;
  }

  public void setOwner(EmbeddedResource owner) {
    this.owner = owner;
  }


  public Cadence removeBouncesEnabled(Boolean removeBouncesEnabled) {
    this.removeBouncesEnabled = removeBouncesEnabled;
    return this;
  }

  /**
   * Whether this cadence is configured to automatically remove people who have bounced
   * @return removeBouncesEnabled
   */
  @javax.annotation.Nullable
  public Boolean getRemoveBouncesEnabled() {
    return removeBouncesEnabled;
  }

  public void setRemoveBouncesEnabled(Boolean removeBouncesEnabled) {
    this.removeBouncesEnabled = removeBouncesEnabled;
  }


  public Cadence removeRepliesEnabled(Boolean removeRepliesEnabled) {
    this.removeRepliesEnabled = removeRepliesEnabled;
    return this;
  }

  /**
   * Whether this cadence is configured to automatically remove people who have replied
   * @return removeRepliesEnabled
   */
  @javax.annotation.Nullable
  public Boolean getRemoveRepliesEnabled() {
    return removeRepliesEnabled;
  }

  public void setRemoveRepliesEnabled(Boolean removeRepliesEnabled) {
    this.removeRepliesEnabled = removeRepliesEnabled;
  }


  public Cadence repliedStage(EmbeddedResource repliedStage) {
    this.repliedStage = repliedStage;
    return this;
  }

  /**
   * Get repliedStage
   * @return repliedStage
   */
  @javax.annotation.Nullable
  public EmbeddedResource getRepliedStage() {
    return repliedStage;
  }

  public void setRepliedStage(EmbeddedResource repliedStage) {
    this.repliedStage = repliedStage;
  }


  public Cadence shared(Boolean shared) {
    this.shared = shared;
    return this;
  }

  /**
   * Whether this cadence is visible to team members (shared)
   * @return shared
   */
  @javax.annotation.Nullable
  public Boolean getShared() {
    return shared;
  }

  public void setShared(Boolean shared) {
    this.shared = shared;
  }


  public Cadence tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public Cadence addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * All tags applied to this cadence
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public Cadence teamCadence(Boolean teamCadence) {
    this.teamCadence = teamCadence;
    return this;
  }

  /**
   * Whether this cadence is a team cadence.  A team cadence is created by an admin and can be run by all users
   * @return teamCadence
   */
  @javax.annotation.Nullable
  public Boolean getTeamCadence() {
    return teamCadence;
  }

  public void setTeamCadence(Boolean teamCadence) {
    this.teamCadence = teamCadence;
  }


  public Cadence updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Datetime of when the cadence was last updated
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Cadence cadence = (Cadence) o;
    return Objects.equals(this.addedStage, cadence.addedStage) &&
        Objects.equals(this.archivedAt, cadence.archivedAt) &&
        Objects.equals(this.bouncedStage, cadence.bouncedStage) &&
        Objects.equals(this.cadenceFrameworkId, cadence.cadenceFrameworkId) &&
        Objects.equals(this.cadenceFunction, cadence.cadenceFunction) &&
        Objects.equals(this.cadencePriority, cadence.cadencePriority) &&
        Objects.equals(this.counts, cadence.counts) &&
        Objects.equals(this.createdAt, cadence.createdAt) &&
        Objects.equals(this.creator, cadence.creator) &&
        Objects.equals(this.draft, cadence.draft) &&
        Objects.equals(this.externalIdentifier, cadence.externalIdentifier) &&
        Objects.equals(this.finishedStage, cadence.finishedStage) &&
        Objects.equals(this.groups, cadence.groups) &&
        Objects.equals(this.id, cadence.id) &&
        Objects.equals(this.name, cadence.name) &&
        Objects.equals(this.optOutLinkIncluded, cadence.optOutLinkIncluded) &&
        Objects.equals(this.owner, cadence.owner) &&
        Objects.equals(this.removeBouncesEnabled, cadence.removeBouncesEnabled) &&
        Objects.equals(this.removeRepliesEnabled, cadence.removeRepliesEnabled) &&
        Objects.equals(this.repliedStage, cadence.repliedStage) &&
        Objects.equals(this.shared, cadence.shared) &&
        Objects.equals(this.tags, cadence.tags) &&
        Objects.equals(this.teamCadence, cadence.teamCadence) &&
        Objects.equals(this.updatedAt, cadence.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addedStage, archivedAt, bouncedStage, cadenceFrameworkId, cadenceFunction, cadencePriority, counts, createdAt, creator, draft, externalIdentifier, finishedStage, groups, id, name, optOutLinkIncluded, owner, removeBouncesEnabled, removeRepliesEnabled, repliedStage, shared, tags, teamCadence, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Cadence {\n");
    sb.append("    addedStage: ").append(toIndentedString(addedStage)).append("\n");
    sb.append("    archivedAt: ").append(toIndentedString(archivedAt)).append("\n");
    sb.append("    bouncedStage: ").append(toIndentedString(bouncedStage)).append("\n");
    sb.append("    cadenceFrameworkId: ").append(toIndentedString(cadenceFrameworkId)).append("\n");
    sb.append("    cadenceFunction: ").append(toIndentedString(cadenceFunction)).append("\n");
    sb.append("    cadencePriority: ").append(toIndentedString(cadencePriority)).append("\n");
    sb.append("    counts: ").append(toIndentedString(counts)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
    sb.append("    draft: ").append(toIndentedString(draft)).append("\n");
    sb.append("    externalIdentifier: ").append(toIndentedString(externalIdentifier)).append("\n");
    sb.append("    finishedStage: ").append(toIndentedString(finishedStage)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    optOutLinkIncluded: ").append(toIndentedString(optOutLinkIncluded)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    removeBouncesEnabled: ").append(toIndentedString(removeBouncesEnabled)).append("\n");
    sb.append("    removeRepliesEnabled: ").append(toIndentedString(removeRepliesEnabled)).append("\n");
    sb.append("    repliedStage: ").append(toIndentedString(repliedStage)).append("\n");
    sb.append("    shared: ").append(toIndentedString(shared)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    teamCadence: ").append(toIndentedString(teamCadence)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("added_stage");
    openapiFields.add("archived_at");
    openapiFields.add("bounced_stage");
    openapiFields.add("cadence_framework_id");
    openapiFields.add("cadence_function");
    openapiFields.add("cadence_priority");
    openapiFields.add("counts");
    openapiFields.add("created_at");
    openapiFields.add("creator");
    openapiFields.add("draft");
    openapiFields.add("external_identifier");
    openapiFields.add("finished_stage");
    openapiFields.add("groups");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("opt_out_link_included");
    openapiFields.add("owner");
    openapiFields.add("remove_bounces_enabled");
    openapiFields.add("remove_replies_enabled");
    openapiFields.add("replied_stage");
    openapiFields.add("shared");
    openapiFields.add("tags");
    openapiFields.add("team_cadence");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Cadence
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Cadence.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Cadence is not found in the empty JSON string", Cadence.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Cadence.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Cadence` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `added_stage`
      if (jsonObj.get("added_stage") != null && !jsonObj.get("added_stage").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("added_stage"));
      }
      // validate the optional field `bounced_stage`
      if (jsonObj.get("bounced_stage") != null && !jsonObj.get("bounced_stage").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("bounced_stage"));
      }
      if ((jsonObj.get("cadence_function") != null && !jsonObj.get("cadence_function").isJsonNull()) && !jsonObj.get("cadence_function").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cadence_function` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cadence_function").toString()));
      }
      // validate the optional field `cadence_priority`
      if (jsonObj.get("cadence_priority") != null && !jsonObj.get("cadence_priority").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("cadence_priority"));
      }
      // validate the optional field `counts`
      if (jsonObj.get("counts") != null && !jsonObj.get("counts").isJsonNull()) {
        CadenceCounts.validateJsonElement(jsonObj.get("counts"));
      }
      // validate the optional field `creator`
      if (jsonObj.get("creator") != null && !jsonObj.get("creator").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("creator"));
      }
      if ((jsonObj.get("external_identifier") != null && !jsonObj.get("external_identifier").isJsonNull()) && !jsonObj.get("external_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_identifier").toString()));
      }
      // validate the optional field `finished_stage`
      if (jsonObj.get("finished_stage") != null && !jsonObj.get("finished_stage").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("finished_stage"));
      }
      if (jsonObj.get("groups") != null && !jsonObj.get("groups").isJsonNull()) {
        JsonArray jsonArraygroups = jsonObj.getAsJsonArray("groups");
        if (jsonArraygroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("groups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `groups` to be an array in the JSON string but got `%s`", jsonObj.get("groups").toString()));
          }

          // validate the optional field `groups` (array)
          for (int i = 0; i < jsonArraygroups.size(); i++) {
            EmbeddedResource.validateJsonElement(jsonArraygroups.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `owner`
      if (jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("owner"));
      }
      // validate the optional field `replied_stage`
      if (jsonObj.get("replied_stage") != null && !jsonObj.get("replied_stage").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("replied_stage"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Cadence.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Cadence' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Cadence> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Cadence.class));

       return (TypeAdapter<T>) new TypeAdapter<Cadence>() {
           @Override
           public void write(JsonWriter out, Cadence value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Cadence read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Cadence given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Cadence
   * @throws IOException if the JSON string is invalid with respect to Cadence
   */
  public static Cadence fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Cadence.class);
  }

  /**
   * Convert an instance of Cadence to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

