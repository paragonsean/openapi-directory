/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.EmbeddedResource;
import org.openapitools.client.model.SuccessCounts;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Success
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:54.467506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Success {
  public static final String SERIALIZED_NAME_COUNTS = "counts";
  @SerializedName(SERIALIZED_NAME_COUNTS)
  private SuccessCounts counts;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LATEST_ACTION = "latest_action";
  @SerializedName(SERIALIZED_NAME_LATEST_ACTION)
  private EmbeddedResource latestAction;

  public static final String SERIALIZED_NAME_LATEST_CADENCE = "latest_cadence";
  @SerializedName(SERIALIZED_NAME_LATEST_CADENCE)
  private EmbeddedResource latestCadence;

  public static final String SERIALIZED_NAME_LATEST_CALL = "latest_call";
  @SerializedName(SERIALIZED_NAME_LATEST_CALL)
  private EmbeddedResource latestCall;

  public static final String SERIALIZED_NAME_LATEST_EMAIL = "latest_email";
  @SerializedName(SERIALIZED_NAME_LATEST_EMAIL)
  private EmbeddedResource latestEmail;

  public static final String SERIALIZED_NAME_LATEST_STEP = "latest_step";
  @SerializedName(SERIALIZED_NAME_LATEST_STEP)
  private EmbeddedResource latestStep;

  public static final String SERIALIZED_NAME_PERSON = "person";
  @SerializedName(SERIALIZED_NAME_PERSON)
  private EmbeddedResource person;

  public static final String SERIALIZED_NAME_SUCCEEDED_AT = "succeeded_at";
  @SerializedName(SERIALIZED_NAME_SUCCEEDED_AT)
  private OffsetDateTime succeededAt;

  public static final String SERIALIZED_NAME_SUCCESS_WINDOW_STARTED_AT = "success_window_started_at";
  @SerializedName(SERIALIZED_NAME_SUCCESS_WINDOW_STARTED_AT)
  private OffsetDateTime successWindowStartedAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private EmbeddedResource user;

  public Success() {
  }

  public Success counts(SuccessCounts counts) {
    this.counts = counts;
    return this;
  }

  /**
   * Get counts
   * @return counts
   */
  @javax.annotation.Nullable
  public SuccessCounts getCounts() {
    return counts;
  }

  public void setCounts(SuccessCounts counts) {
    this.counts = counts;
  }


  public Success createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Datetime of when the success was created
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Success id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * ID of success
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Success latestAction(EmbeddedResource latestAction) {
    this.latestAction = latestAction;
    return this;
  }

  /**
   * Get latestAction
   * @return latestAction
   */
  @javax.annotation.Nullable
  public EmbeddedResource getLatestAction() {
    return latestAction;
  }

  public void setLatestAction(EmbeddedResource latestAction) {
    this.latestAction = latestAction;
  }


  public Success latestCadence(EmbeddedResource latestCadence) {
    this.latestCadence = latestCadence;
    return this;
  }

  /**
   * Get latestCadence
   * @return latestCadence
   */
  @javax.annotation.Nullable
  public EmbeddedResource getLatestCadence() {
    return latestCadence;
  }

  public void setLatestCadence(EmbeddedResource latestCadence) {
    this.latestCadence = latestCadence;
  }


  public Success latestCall(EmbeddedResource latestCall) {
    this.latestCall = latestCall;
    return this;
  }

  /**
   * Get latestCall
   * @return latestCall
   */
  @javax.annotation.Nullable
  public EmbeddedResource getLatestCall() {
    return latestCall;
  }

  public void setLatestCall(EmbeddedResource latestCall) {
    this.latestCall = latestCall;
  }


  public Success latestEmail(EmbeddedResource latestEmail) {
    this.latestEmail = latestEmail;
    return this;
  }

  /**
   * Get latestEmail
   * @return latestEmail
   */
  @javax.annotation.Nullable
  public EmbeddedResource getLatestEmail() {
    return latestEmail;
  }

  public void setLatestEmail(EmbeddedResource latestEmail) {
    this.latestEmail = latestEmail;
  }


  public Success latestStep(EmbeddedResource latestStep) {
    this.latestStep = latestStep;
    return this;
  }

  /**
   * Get latestStep
   * @return latestStep
   */
  @javax.annotation.Nullable
  public EmbeddedResource getLatestStep() {
    return latestStep;
  }

  public void setLatestStep(EmbeddedResource latestStep) {
    this.latestStep = latestStep;
  }


  public Success person(EmbeddedResource person) {
    this.person = person;
    return this;
  }

  /**
   * Get person
   * @return person
   */
  @javax.annotation.Nullable
  public EmbeddedResource getPerson() {
    return person;
  }

  public void setPerson(EmbeddedResource person) {
    this.person = person;
  }


  public Success succeededAt(OffsetDateTime succeededAt) {
    this.succeededAt = succeededAt;
    return this;
  }

  /**
   * Datetime of when the success was recorded
   * @return succeededAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSucceededAt() {
    return succeededAt;
  }

  public void setSucceededAt(OffsetDateTime succeededAt) {
    this.succeededAt = succeededAt;
  }


  public Success successWindowStartedAt(OffsetDateTime successWindowStartedAt) {
    this.successWindowStartedAt = successWindowStartedAt;
    return this;
  }

  /**
   * Datetime of when this person was first worked, leading up to the success
   * @return successWindowStartedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSuccessWindowStartedAt() {
    return successWindowStartedAt;
  }

  public void setSuccessWindowStartedAt(OffsetDateTime successWindowStartedAt) {
    this.successWindowStartedAt = successWindowStartedAt;
  }


  public Success updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Datetime of when the success was last updated
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Success user(EmbeddedResource user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public EmbeddedResource getUser() {
    return user;
  }

  public void setUser(EmbeddedResource user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Success success = (Success) o;
    return Objects.equals(this.counts, success.counts) &&
        Objects.equals(this.createdAt, success.createdAt) &&
        Objects.equals(this.id, success.id) &&
        Objects.equals(this.latestAction, success.latestAction) &&
        Objects.equals(this.latestCadence, success.latestCadence) &&
        Objects.equals(this.latestCall, success.latestCall) &&
        Objects.equals(this.latestEmail, success.latestEmail) &&
        Objects.equals(this.latestStep, success.latestStep) &&
        Objects.equals(this.person, success.person) &&
        Objects.equals(this.succeededAt, success.succeededAt) &&
        Objects.equals(this.successWindowStartedAt, success.successWindowStartedAt) &&
        Objects.equals(this.updatedAt, success.updatedAt) &&
        Objects.equals(this.user, success.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(counts, createdAt, id, latestAction, latestCadence, latestCall, latestEmail, latestStep, person, succeededAt, successWindowStartedAt, updatedAt, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Success {\n");
    sb.append("    counts: ").append(toIndentedString(counts)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    latestAction: ").append(toIndentedString(latestAction)).append("\n");
    sb.append("    latestCadence: ").append(toIndentedString(latestCadence)).append("\n");
    sb.append("    latestCall: ").append(toIndentedString(latestCall)).append("\n");
    sb.append("    latestEmail: ").append(toIndentedString(latestEmail)).append("\n");
    sb.append("    latestStep: ").append(toIndentedString(latestStep)).append("\n");
    sb.append("    person: ").append(toIndentedString(person)).append("\n");
    sb.append("    succeededAt: ").append(toIndentedString(succeededAt)).append("\n");
    sb.append("    successWindowStartedAt: ").append(toIndentedString(successWindowStartedAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("counts");
    openapiFields.add("created_at");
    openapiFields.add("id");
    openapiFields.add("latest_action");
    openapiFields.add("latest_cadence");
    openapiFields.add("latest_call");
    openapiFields.add("latest_email");
    openapiFields.add("latest_step");
    openapiFields.add("person");
    openapiFields.add("succeeded_at");
    openapiFields.add("success_window_started_at");
    openapiFields.add("updated_at");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Success
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Success.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Success is not found in the empty JSON string", Success.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Success.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Success` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `counts`
      if (jsonObj.get("counts") != null && !jsonObj.get("counts").isJsonNull()) {
        SuccessCounts.validateJsonElement(jsonObj.get("counts"));
      }
      // validate the optional field `latest_action`
      if (jsonObj.get("latest_action") != null && !jsonObj.get("latest_action").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("latest_action"));
      }
      // validate the optional field `latest_cadence`
      if (jsonObj.get("latest_cadence") != null && !jsonObj.get("latest_cadence").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("latest_cadence"));
      }
      // validate the optional field `latest_call`
      if (jsonObj.get("latest_call") != null && !jsonObj.get("latest_call").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("latest_call"));
      }
      // validate the optional field `latest_email`
      if (jsonObj.get("latest_email") != null && !jsonObj.get("latest_email").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("latest_email"));
      }
      // validate the optional field `latest_step`
      if (jsonObj.get("latest_step") != null && !jsonObj.get("latest_step").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("latest_step"));
      }
      // validate the optional field `person`
      if (jsonObj.get("person") != null && !jsonObj.get("person").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("person"));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Success.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Success' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Success> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Success.class));

       return (TypeAdapter<T>) new TypeAdapter<Success>() {
           @Override
           public void write(JsonWriter out, Success value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Success read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Success given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Success
   * @throws IOException if the JSON string is invalid with respect to Success
   */
  public static Success fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Success.class);
  }

  /**
   * Convert an instance of Success to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

