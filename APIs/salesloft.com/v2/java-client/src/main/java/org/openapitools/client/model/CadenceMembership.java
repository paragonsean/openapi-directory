/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CadenceMembershipCounts;
import org.openapitools.client.model.EmbeddedResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CadenceMembership
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:54.467506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CadenceMembership {
  public static final String SERIALIZED_NAME_ADDED_AT = "added_at";
  @SerializedName(SERIALIZED_NAME_ADDED_AT)
  private OffsetDateTime addedAt;

  public static final String SERIALIZED_NAME_CADENCE = "cadence";
  @SerializedName(SERIALIZED_NAME_CADENCE)
  private EmbeddedResource cadence;

  public static final String SERIALIZED_NAME_COUNTS = "counts";
  @SerializedName(SERIALIZED_NAME_COUNTS)
  private CadenceMembershipCounts counts;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CURRENT_STATE = "current_state";
  @SerializedName(SERIALIZED_NAME_CURRENT_STATE)
  private String currentState;

  public static final String SERIALIZED_NAME_CURRENTLY_ON_CADENCE = "currently_on_cadence";
  @SerializedName(SERIALIZED_NAME_CURRENTLY_ON_CADENCE)
  private Boolean currentlyOnCadence;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LATEST_ACTION = "latest_action";
  @SerializedName(SERIALIZED_NAME_LATEST_ACTION)
  private EmbeddedResource latestAction;

  public static final String SERIALIZED_NAME_PERSON = "person";
  @SerializedName(SERIALIZED_NAME_PERSON)
  private EmbeddedResource person;

  public static final String SERIALIZED_NAME_PERSON_DELETED = "person_deleted";
  @SerializedName(SERIALIZED_NAME_PERSON_DELETED)
  private Boolean personDeleted;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private EmbeddedResource user;

  public CadenceMembership() {
  }

  public CadenceMembership addedAt(OffsetDateTime addedAt) {
    this.addedAt = addedAt;
    return this;
  }

  /**
   * Datetime of when the person was last added to this cadence
   * @return addedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAddedAt() {
    return addedAt;
  }

  public void setAddedAt(OffsetDateTime addedAt) {
    this.addedAt = addedAt;
  }


  public CadenceMembership cadence(EmbeddedResource cadence) {
    this.cadence = cadence;
    return this;
  }

  /**
   * Get cadence
   * @return cadence
   */
  @javax.annotation.Nullable
  public EmbeddedResource getCadence() {
    return cadence;
  }

  public void setCadence(EmbeddedResource cadence) {
    this.cadence = cadence;
  }


  public CadenceMembership counts(CadenceMembershipCounts counts) {
    this.counts = counts;
    return this;
  }

  /**
   * Get counts
   * @return counts
   */
  @javax.annotation.Nullable
  public CadenceMembershipCounts getCounts() {
    return counts;
  }

  public void setCounts(CadenceMembershipCounts counts) {
    this.counts = counts;
  }


  public CadenceMembership createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Datetime of when the person was first added to this cadence
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public CadenceMembership currentState(String currentState) {
    this.currentState = currentState;
    return this;
  }

  /**
   * The current state of the person on the cadence. Possible values are:  processing: The person is being processed on a cadence. Cadence-related changes cannot be made at this time  staged: The person is waiting for the first step in the cadence to occur  active: The cadence has begun processing this person and is still in the process, but idle  scheduled: The cadence has begun processing this person and is still in the process, with an activity scheduled to occur  completed: The cadence has been completed for this person  removed: The person was manually or automatically removed from the cadence  removed_no_action: The person was removed from the cadence before any action occurred  reassigned: The person&#39;s cadence execution was transferred to a different user, ending this user&#39;s interaction 
   * @return currentState
   */
  @javax.annotation.Nullable
  public String getCurrentState() {
    return currentState;
  }

  public void setCurrentState(String currentState) {
    this.currentState = currentState;
  }


  public CadenceMembership currentlyOnCadence(Boolean currentlyOnCadence) {
    this.currentlyOnCadence = currentlyOnCadence;
    return this;
  }

  /**
   * Whether the person is currently on the cadence
   * @return currentlyOnCadence
   */
  @javax.annotation.Nullable
  public Boolean getCurrentlyOnCadence() {
    return currentlyOnCadence;
  }

  public void setCurrentlyOnCadence(Boolean currentlyOnCadence) {
    this.currentlyOnCadence = currentlyOnCadence;
  }


  public CadenceMembership id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Cadence membership ID
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public CadenceMembership latestAction(EmbeddedResource latestAction) {
    this.latestAction = latestAction;
    return this;
  }

  /**
   * Get latestAction
   * @return latestAction
   */
  @javax.annotation.Nullable
  public EmbeddedResource getLatestAction() {
    return latestAction;
  }

  public void setLatestAction(EmbeddedResource latestAction) {
    this.latestAction = latestAction;
  }


  public CadenceMembership person(EmbeddedResource person) {
    this.person = person;
    return this;
  }

  /**
   * Get person
   * @return person
   */
  @javax.annotation.Nullable
  public EmbeddedResource getPerson() {
    return person;
  }

  public void setPerson(EmbeddedResource person) {
    this.person = person;
  }


  public CadenceMembership personDeleted(Boolean personDeleted) {
    this.personDeleted = personDeleted;
    return this;
  }

  /**
   * Whether the associated person has since been deleted
   * @return personDeleted
   */
  @javax.annotation.Nullable
  public Boolean getPersonDeleted() {
    return personDeleted;
  }

  public void setPersonDeleted(Boolean personDeleted) {
    this.personDeleted = personDeleted;
  }


  public CadenceMembership updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Datetime of when the record was last updated
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public CadenceMembership user(EmbeddedResource user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public EmbeddedResource getUser() {
    return user;
  }

  public void setUser(EmbeddedResource user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CadenceMembership cadenceMembership = (CadenceMembership) o;
    return Objects.equals(this.addedAt, cadenceMembership.addedAt) &&
        Objects.equals(this.cadence, cadenceMembership.cadence) &&
        Objects.equals(this.counts, cadenceMembership.counts) &&
        Objects.equals(this.createdAt, cadenceMembership.createdAt) &&
        Objects.equals(this.currentState, cadenceMembership.currentState) &&
        Objects.equals(this.currentlyOnCadence, cadenceMembership.currentlyOnCadence) &&
        Objects.equals(this.id, cadenceMembership.id) &&
        Objects.equals(this.latestAction, cadenceMembership.latestAction) &&
        Objects.equals(this.person, cadenceMembership.person) &&
        Objects.equals(this.personDeleted, cadenceMembership.personDeleted) &&
        Objects.equals(this.updatedAt, cadenceMembership.updatedAt) &&
        Objects.equals(this.user, cadenceMembership.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addedAt, cadence, counts, createdAt, currentState, currentlyOnCadence, id, latestAction, person, personDeleted, updatedAt, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CadenceMembership {\n");
    sb.append("    addedAt: ").append(toIndentedString(addedAt)).append("\n");
    sb.append("    cadence: ").append(toIndentedString(cadence)).append("\n");
    sb.append("    counts: ").append(toIndentedString(counts)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    currentState: ").append(toIndentedString(currentState)).append("\n");
    sb.append("    currentlyOnCadence: ").append(toIndentedString(currentlyOnCadence)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    latestAction: ").append(toIndentedString(latestAction)).append("\n");
    sb.append("    person: ").append(toIndentedString(person)).append("\n");
    sb.append("    personDeleted: ").append(toIndentedString(personDeleted)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("added_at");
    openapiFields.add("cadence");
    openapiFields.add("counts");
    openapiFields.add("created_at");
    openapiFields.add("current_state");
    openapiFields.add("currently_on_cadence");
    openapiFields.add("id");
    openapiFields.add("latest_action");
    openapiFields.add("person");
    openapiFields.add("person_deleted");
    openapiFields.add("updated_at");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CadenceMembership
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CadenceMembership.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CadenceMembership is not found in the empty JSON string", CadenceMembership.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CadenceMembership.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CadenceMembership` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cadence`
      if (jsonObj.get("cadence") != null && !jsonObj.get("cadence").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("cadence"));
      }
      // validate the optional field `counts`
      if (jsonObj.get("counts") != null && !jsonObj.get("counts").isJsonNull()) {
        CadenceMembershipCounts.validateJsonElement(jsonObj.get("counts"));
      }
      if ((jsonObj.get("current_state") != null && !jsonObj.get("current_state").isJsonNull()) && !jsonObj.get("current_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `current_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("current_state").toString()));
      }
      // validate the optional field `latest_action`
      if (jsonObj.get("latest_action") != null && !jsonObj.get("latest_action").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("latest_action"));
      }
      // validate the optional field `person`
      if (jsonObj.get("person") != null && !jsonObj.get("person").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("person"));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CadenceMembership.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CadenceMembership' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CadenceMembership> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CadenceMembership.class));

       return (TypeAdapter<T>) new TypeAdapter<CadenceMembership>() {
           @Override
           public void write(JsonWriter out, CadenceMembership value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CadenceMembership read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CadenceMembership given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CadenceMembership
   * @throws IOException if the JSON string is invalid with respect to CadenceMembership
   */
  public static CadenceMembership fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CadenceMembership.class);
  }

  /**
   * Convert an instance of CadenceMembership to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

