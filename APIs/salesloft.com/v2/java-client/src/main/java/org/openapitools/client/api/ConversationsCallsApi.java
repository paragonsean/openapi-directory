/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.ConversationsCall;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConversationsCallsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConversationsCallsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConversationsCallsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v2ConversationsCallsPost
     * @param duration Duration of call in seconds (required)
     * @param from Phone number that call was made from (required)
     * @param recording Object containing recording info including the audio file (.mp3, .wav, .ogg, .m4a) (required)
     * @param to  Phone number that was called (required)
     * @param callCreatedAt Timestamp for when the call started. If not provided, will default to the time the request was received (optional)
     * @param direction Call direction (optional)
     * @param userGuid Guid of the Salesloft User to assign the call to. If not provided, will default to the user within the authentication token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2ConversationsCallsPostCall(BigDecimal duration, String from, Object recording, String to, String callCreatedAt, String direction, String userGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/conversations/calls";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callCreatedAt != null) {
            localVarFormParams.put("call_created_at", callCreatedAt);
        }

        if (direction != null) {
            localVarFormParams.put("direction", direction);
        }

        if (duration != null) {
            localVarFormParams.put("duration", duration);
        }

        if (from != null) {
            localVarFormParams.put("from", from);
        }

        if (recording != null) {
            localVarFormParams.put("recording", recording);
        }

        if (to != null) {
            localVarFormParams.put("to", to);
        }

        if (userGuid != null) {
            localVarFormParams.put("user_guid", userGuid);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2ConversationsCallsPostValidateBeforeCall(BigDecimal duration, String from, Object recording, String to, String callCreatedAt, String direction, String userGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'duration' is set
        if (duration == null) {
            throw new ApiException("Missing the required parameter 'duration' when calling v2ConversationsCallsPost(Async)");
        }

        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling v2ConversationsCallsPost(Async)");
        }

        // verify the required parameter 'recording' is set
        if (recording == null) {
            throw new ApiException("Missing the required parameter 'recording' when calling v2ConversationsCallsPost(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling v2ConversationsCallsPost(Async)");
        }

        return v2ConversationsCallsPostCall(duration, from, recording, to, callCreatedAt, direction, userGuid, _callback);

    }

    /**
     * Create Conversations Call
     * Enqueue a Conversations Call for processing
     * @param duration Duration of call in seconds (required)
     * @param from Phone number that call was made from (required)
     * @param recording Object containing recording info including the audio file (.mp3, .wav, .ogg, .m4a) (required)
     * @param to  Phone number that was called (required)
     * @param callCreatedAt Timestamp for when the call started. If not provided, will default to the time the request was received (optional)
     * @param direction Call direction (optional)
     * @param userGuid Guid of the Salesloft User to assign the call to. If not provided, will default to the user within the authentication token (optional)
     * @return ConversationsCall
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ConversationsCall v2ConversationsCallsPost(BigDecimal duration, String from, Object recording, String to, String callCreatedAt, String direction, String userGuid) throws ApiException {
        ApiResponse<ConversationsCall> localVarResp = v2ConversationsCallsPostWithHttpInfo(duration, from, recording, to, callCreatedAt, direction, userGuid);
        return localVarResp.getData();
    }

    /**
     * Create Conversations Call
     * Enqueue a Conversations Call for processing
     * @param duration Duration of call in seconds (required)
     * @param from Phone number that call was made from (required)
     * @param recording Object containing recording info including the audio file (.mp3, .wav, .ogg, .m4a) (required)
     * @param to  Phone number that was called (required)
     * @param callCreatedAt Timestamp for when the call started. If not provided, will default to the time the request was received (optional)
     * @param direction Call direction (optional)
     * @param userGuid Guid of the Salesloft User to assign the call to. If not provided, will default to the user within the authentication token (optional)
     * @return ApiResponse&lt;ConversationsCall&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationsCall> v2ConversationsCallsPostWithHttpInfo(BigDecimal duration, String from, Object recording, String to, String callCreatedAt, String direction, String userGuid) throws ApiException {
        okhttp3.Call localVarCall = v2ConversationsCallsPostValidateBeforeCall(duration, from, recording, to, callCreatedAt, direction, userGuid, null);
        Type localVarReturnType = new TypeToken<ConversationsCall>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Conversations Call (asynchronously)
     * Enqueue a Conversations Call for processing
     * @param duration Duration of call in seconds (required)
     * @param from Phone number that call was made from (required)
     * @param recording Object containing recording info including the audio file (.mp3, .wav, .ogg, .m4a) (required)
     * @param to  Phone number that was called (required)
     * @param callCreatedAt Timestamp for when the call started. If not provided, will default to the time the request was received (optional)
     * @param direction Call direction (optional)
     * @param userGuid Guid of the Salesloft User to assign the call to. If not provided, will default to the user within the authentication token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2ConversationsCallsPostAsync(BigDecimal duration, String from, Object recording, String to, String callCreatedAt, String direction, String userGuid, final ApiCallback<ConversationsCall> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2ConversationsCallsPostValidateBeforeCall(duration, from, recording, to, callCreatedAt, direction, userGuid, _callback);
        Type localVarReturnType = new TypeToken<ConversationsCall>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
