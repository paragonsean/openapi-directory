/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Person;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PeopleApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PeopleApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PeopleApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v2PeopleIdJsonDelete
     * @param id Person id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The person has been deleted successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2PeopleIdJsonDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/people/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2PeopleIdJsonDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v2PeopleIdJsonDelete(Async)");
        }

        return v2PeopleIdJsonDeleteCall(id, _callback);

    }

    /**
     * Delete a person
     * Deletes a person. This operation is not reversible without contacting support. This operation can be called multiple times successfully. 
     * @param id Person id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The person has been deleted successfully </td><td>  -  </td></tr>
     </table>
     */
    public void v2PeopleIdJsonDelete(String id) throws ApiException {
        v2PeopleIdJsonDeleteWithHttpInfo(id);
    }

    /**
     * Delete a person
     * Deletes a person. This operation is not reversible without contacting support. This operation can be called multiple times successfully. 
     * @param id Person id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The person has been deleted successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v2PeopleIdJsonDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = v2PeopleIdJsonDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a person (asynchronously)
     * Deletes a person. This operation is not reversible without contacting support. This operation can be called multiple times successfully. 
     * @param id Person id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The person has been deleted successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2PeopleIdJsonDeleteAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2PeopleIdJsonDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2PeopleIdJsonGet
     * @param id Person ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2PeopleIdJsonGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/people/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2PeopleIdJsonGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v2PeopleIdJsonGet(Async)");
        }

        return v2PeopleIdJsonGetCall(id, _callback);

    }

    /**
     * Fetch a person
     * Fetches a person, by ID only. 
     * @param id Person ID (required)
     * @return Person
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Person v2PeopleIdJsonGet(String id) throws ApiException {
        ApiResponse<Person> localVarResp = v2PeopleIdJsonGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Fetch a person
     * Fetches a person, by ID only. 
     * @param id Person ID (required)
     * @return ApiResponse&lt;Person&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Person> v2PeopleIdJsonGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = v2PeopleIdJsonGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a person (asynchronously)
     * Fetches a person, by ID only. 
     * @param id Person ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2PeopleIdJsonGetAsync(String id, final ApiCallback<Person> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2PeopleIdJsonGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2PeopleIdJsonPut
     * @param id Person id (required)
     * @param accountId ID of the Account to link this person to (optional)
     * @param city City (optional)
     * @param contactRestrictions Specific methods of communication to prevent for this person. This will prevent individual execution of these communication types as well as automatically skip cadence steps of this communication type for this person in SalesLoft. Values currently accepted: call, email, message (optional)
     * @param country Country (optional)
     * @param crmId Requires Salesforce.  ID of the person in your external CRM. You must provide a crm_id_type if this is included.  Validations will be applied to the crm_id depending on the crm_id_type. A \\\&quot;salesforce\\\&quot; ID must be exactly 18 characters. A \\\&quot;salesforce\\\&quot; ID must be either a Lead (00Q) or Contact (003) object. The type will be validated using the 18 character ID.  This field can only be used if your application or API key has the \\\&quot;person:set_crm_id\\\&quot; scope.   (optional)
     * @param crmIdType The CRM that the provided crm_id is for. Must be one of: salesforce (optional)
     * @param customFields Custom fields are defined by the user&#39;s team. Only fields with values are presented in the API. (optional)
     * @param doNotContact Whether or not this person has opted out of all communication. Setting this value to true prevents this person from being called, emailed, or added to a cadence in SalesLoft. If this person is currently in a cadence, they will be removed. (optional)
     * @param emailAddress Email address (optional)
     * @param firstName First name (optional)
     * @param homePhone Home phone without formatting (optional)
     * @param importId ID of the Import this person is a part of. A person can be part of multiple imports, but this ID will always be the most recent Import (optional)
     * @param jobSeniority The Job Seniority of a Person, must be one of director, executive, individual_contributor, manager, vice_president, unknown (optional)
     * @param lastName Last name (optional)
     * @param linkedinUrl Linkedin URL (optional)
     * @param locale Time locale of the person (optional)
     * @param mobilePhone Mobile phone without formatting (optional)
     * @param ownerId ID of the User that owns this person (optional)
     * @param personCompanyIndustry Company industry. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended (optional)
     * @param personCompanyName Company name. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended (optional)
     * @param personCompanyWebsite Company website. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended (optional)
     * @param personStageId ID of the PersonStage of this person (optional)
     * @param personalEmailAddress Personal email address (optional)
     * @param personalWebsite The website of this person (optional)
     * @param phone Phone without formatting (optional)
     * @param phoneExtension Phone extension without formatting (optional)
     * @param secondaryEmailAddress Alternate email address (optional)
     * @param state State (optional)
     * @param tags All tags applied to this person (optional)
     * @param title Job title (optional)
     * @param twitterHandle The twitter handle of this person (optional)
     * @param workCity Work location - city (optional)
     * @param workCountry Work location - country (optional)
     * @param workState Work location - state (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2PeopleIdJsonPutCall(String id, Integer accountId, String city, List<String> contactRestrictions, String country, String crmId, String crmIdType, Object customFields, Boolean doNotContact, String emailAddress, String firstName, String homePhone, Integer importId, String jobSeniority, String lastName, String linkedinUrl, String locale, String mobilePhone, Integer ownerId, String personCompanyIndustry, String personCompanyName, String personCompanyWebsite, Integer personStageId, String personalEmailAddress, String personalWebsite, String phone, String phoneExtension, String secondaryEmailAddress, String state, List<String> tags, String title, String twitterHandle, String workCity, String workCountry, String workState, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/people/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountId != null) {
            localVarFormParams.put("account_id", accountId);
        }

        if (city != null) {
            localVarFormParams.put("city", city);
        }

        if (contactRestrictions != null) {
            localVarFormParams.put("contact_restrictions", contactRestrictions);
        }

        if (country != null) {
            localVarFormParams.put("country", country);
        }

        if (crmId != null) {
            localVarFormParams.put("crm_id", crmId);
        }

        if (crmIdType != null) {
            localVarFormParams.put("crm_id_type", crmIdType);
        }

        if (customFields != null) {
            localVarFormParams.put("custom_fields", customFields);
        }

        if (doNotContact != null) {
            localVarFormParams.put("do_not_contact", doNotContact);
        }

        if (emailAddress != null) {
            localVarFormParams.put("email_address", emailAddress);
        }

        if (firstName != null) {
            localVarFormParams.put("first_name", firstName);
        }

        if (homePhone != null) {
            localVarFormParams.put("home_phone", homePhone);
        }

        if (importId != null) {
            localVarFormParams.put("import_id", importId);
        }

        if (jobSeniority != null) {
            localVarFormParams.put("job_seniority", jobSeniority);
        }

        if (lastName != null) {
            localVarFormParams.put("last_name", lastName);
        }

        if (linkedinUrl != null) {
            localVarFormParams.put("linkedin_url", linkedinUrl);
        }

        if (locale != null) {
            localVarFormParams.put("locale", locale);
        }

        if (mobilePhone != null) {
            localVarFormParams.put("mobile_phone", mobilePhone);
        }

        if (ownerId != null) {
            localVarFormParams.put("owner_id", ownerId);
        }

        if (personCompanyIndustry != null) {
            localVarFormParams.put("person_company_industry", personCompanyIndustry);
        }

        if (personCompanyName != null) {
            localVarFormParams.put("person_company_name", personCompanyName);
        }

        if (personCompanyWebsite != null) {
            localVarFormParams.put("person_company_website", personCompanyWebsite);
        }

        if (personStageId != null) {
            localVarFormParams.put("person_stage_id", personStageId);
        }

        if (personalEmailAddress != null) {
            localVarFormParams.put("personal_email_address", personalEmailAddress);
        }

        if (personalWebsite != null) {
            localVarFormParams.put("personal_website", personalWebsite);
        }

        if (phone != null) {
            localVarFormParams.put("phone", phone);
        }

        if (phoneExtension != null) {
            localVarFormParams.put("phone_extension", phoneExtension);
        }

        if (secondaryEmailAddress != null) {
            localVarFormParams.put("secondary_email_address", secondaryEmailAddress);
        }

        if (state != null) {
            localVarFormParams.put("state", state);
        }

        if (tags != null) {
            localVarFormParams.put("tags", tags);
        }

        if (title != null) {
            localVarFormParams.put("title", title);
        }

        if (twitterHandle != null) {
            localVarFormParams.put("twitter_handle", twitterHandle);
        }

        if (workCity != null) {
            localVarFormParams.put("work_city", workCity);
        }

        if (workCountry != null) {
            localVarFormParams.put("work_country", workCountry);
        }

        if (workState != null) {
            localVarFormParams.put("work_state", workState);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2PeopleIdJsonPutValidateBeforeCall(String id, Integer accountId, String city, List<String> contactRestrictions, String country, String crmId, String crmIdType, Object customFields, Boolean doNotContact, String emailAddress, String firstName, String homePhone, Integer importId, String jobSeniority, String lastName, String linkedinUrl, String locale, String mobilePhone, Integer ownerId, String personCompanyIndustry, String personCompanyName, String personCompanyWebsite, Integer personStageId, String personalEmailAddress, String personalWebsite, String phone, String phoneExtension, String secondaryEmailAddress, String state, List<String> tags, String title, String twitterHandle, String workCity, String workCountry, String workState, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v2PeopleIdJsonPut(Async)");
        }

        return v2PeopleIdJsonPutCall(id, accountId, city, contactRestrictions, country, crmId, crmIdType, customFields, doNotContact, emailAddress, firstName, homePhone, importId, jobSeniority, lastName, linkedinUrl, locale, mobilePhone, ownerId, personCompanyIndustry, personCompanyName, personCompanyWebsite, personStageId, personalEmailAddress, personalWebsite, phone, phoneExtension, secondaryEmailAddress, state, tags, title, twitterHandle, workCity, workCountry, workState, _callback);

    }

    /**
     * Update a person
     * Updates a person. 
     * @param id Person id (required)
     * @param accountId ID of the Account to link this person to (optional)
     * @param city City (optional)
     * @param contactRestrictions Specific methods of communication to prevent for this person. This will prevent individual execution of these communication types as well as automatically skip cadence steps of this communication type for this person in SalesLoft. Values currently accepted: call, email, message (optional)
     * @param country Country (optional)
     * @param crmId Requires Salesforce.  ID of the person in your external CRM. You must provide a crm_id_type if this is included.  Validations will be applied to the crm_id depending on the crm_id_type. A \\\&quot;salesforce\\\&quot; ID must be exactly 18 characters. A \\\&quot;salesforce\\\&quot; ID must be either a Lead (00Q) or Contact (003) object. The type will be validated using the 18 character ID.  This field can only be used if your application or API key has the \\\&quot;person:set_crm_id\\\&quot; scope.   (optional)
     * @param crmIdType The CRM that the provided crm_id is for. Must be one of: salesforce (optional)
     * @param customFields Custom fields are defined by the user&#39;s team. Only fields with values are presented in the API. (optional)
     * @param doNotContact Whether or not this person has opted out of all communication. Setting this value to true prevents this person from being called, emailed, or added to a cadence in SalesLoft. If this person is currently in a cadence, they will be removed. (optional)
     * @param emailAddress Email address (optional)
     * @param firstName First name (optional)
     * @param homePhone Home phone without formatting (optional)
     * @param importId ID of the Import this person is a part of. A person can be part of multiple imports, but this ID will always be the most recent Import (optional)
     * @param jobSeniority The Job Seniority of a Person, must be one of director, executive, individual_contributor, manager, vice_president, unknown (optional)
     * @param lastName Last name (optional)
     * @param linkedinUrl Linkedin URL (optional)
     * @param locale Time locale of the person (optional)
     * @param mobilePhone Mobile phone without formatting (optional)
     * @param ownerId ID of the User that owns this person (optional)
     * @param personCompanyIndustry Company industry. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended (optional)
     * @param personCompanyName Company name. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended (optional)
     * @param personCompanyWebsite Company website. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended (optional)
     * @param personStageId ID of the PersonStage of this person (optional)
     * @param personalEmailAddress Personal email address (optional)
     * @param personalWebsite The website of this person (optional)
     * @param phone Phone without formatting (optional)
     * @param phoneExtension Phone extension without formatting (optional)
     * @param secondaryEmailAddress Alternate email address (optional)
     * @param state State (optional)
     * @param tags All tags applied to this person (optional)
     * @param title Job title (optional)
     * @param twitterHandle The twitter handle of this person (optional)
     * @param workCity Work location - city (optional)
     * @param workCountry Work location - country (optional)
     * @param workState Work location - state (optional)
     * @return Person
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Person v2PeopleIdJsonPut(String id, Integer accountId, String city, List<String> contactRestrictions, String country, String crmId, String crmIdType, Object customFields, Boolean doNotContact, String emailAddress, String firstName, String homePhone, Integer importId, String jobSeniority, String lastName, String linkedinUrl, String locale, String mobilePhone, Integer ownerId, String personCompanyIndustry, String personCompanyName, String personCompanyWebsite, Integer personStageId, String personalEmailAddress, String personalWebsite, String phone, String phoneExtension, String secondaryEmailAddress, String state, List<String> tags, String title, String twitterHandle, String workCity, String workCountry, String workState) throws ApiException {
        ApiResponse<Person> localVarResp = v2PeopleIdJsonPutWithHttpInfo(id, accountId, city, contactRestrictions, country, crmId, crmIdType, customFields, doNotContact, emailAddress, firstName, homePhone, importId, jobSeniority, lastName, linkedinUrl, locale, mobilePhone, ownerId, personCompanyIndustry, personCompanyName, personCompanyWebsite, personStageId, personalEmailAddress, personalWebsite, phone, phoneExtension, secondaryEmailAddress, state, tags, title, twitterHandle, workCity, workCountry, workState);
        return localVarResp.getData();
    }

    /**
     * Update a person
     * Updates a person. 
     * @param id Person id (required)
     * @param accountId ID of the Account to link this person to (optional)
     * @param city City (optional)
     * @param contactRestrictions Specific methods of communication to prevent for this person. This will prevent individual execution of these communication types as well as automatically skip cadence steps of this communication type for this person in SalesLoft. Values currently accepted: call, email, message (optional)
     * @param country Country (optional)
     * @param crmId Requires Salesforce.  ID of the person in your external CRM. You must provide a crm_id_type if this is included.  Validations will be applied to the crm_id depending on the crm_id_type. A \\\&quot;salesforce\\\&quot; ID must be exactly 18 characters. A \\\&quot;salesforce\\\&quot; ID must be either a Lead (00Q) or Contact (003) object. The type will be validated using the 18 character ID.  This field can only be used if your application or API key has the \\\&quot;person:set_crm_id\\\&quot; scope.   (optional)
     * @param crmIdType The CRM that the provided crm_id is for. Must be one of: salesforce (optional)
     * @param customFields Custom fields are defined by the user&#39;s team. Only fields with values are presented in the API. (optional)
     * @param doNotContact Whether or not this person has opted out of all communication. Setting this value to true prevents this person from being called, emailed, or added to a cadence in SalesLoft. If this person is currently in a cadence, they will be removed. (optional)
     * @param emailAddress Email address (optional)
     * @param firstName First name (optional)
     * @param homePhone Home phone without formatting (optional)
     * @param importId ID of the Import this person is a part of. A person can be part of multiple imports, but this ID will always be the most recent Import (optional)
     * @param jobSeniority The Job Seniority of a Person, must be one of director, executive, individual_contributor, manager, vice_president, unknown (optional)
     * @param lastName Last name (optional)
     * @param linkedinUrl Linkedin URL (optional)
     * @param locale Time locale of the person (optional)
     * @param mobilePhone Mobile phone without formatting (optional)
     * @param ownerId ID of the User that owns this person (optional)
     * @param personCompanyIndustry Company industry. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended (optional)
     * @param personCompanyName Company name. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended (optional)
     * @param personCompanyWebsite Company website. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended (optional)
     * @param personStageId ID of the PersonStage of this person (optional)
     * @param personalEmailAddress Personal email address (optional)
     * @param personalWebsite The website of this person (optional)
     * @param phone Phone without formatting (optional)
     * @param phoneExtension Phone extension without formatting (optional)
     * @param secondaryEmailAddress Alternate email address (optional)
     * @param state State (optional)
     * @param tags All tags applied to this person (optional)
     * @param title Job title (optional)
     * @param twitterHandle The twitter handle of this person (optional)
     * @param workCity Work location - city (optional)
     * @param workCountry Work location - country (optional)
     * @param workState Work location - state (optional)
     * @return ApiResponse&lt;Person&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Person> v2PeopleIdJsonPutWithHttpInfo(String id, Integer accountId, String city, List<String> contactRestrictions, String country, String crmId, String crmIdType, Object customFields, Boolean doNotContact, String emailAddress, String firstName, String homePhone, Integer importId, String jobSeniority, String lastName, String linkedinUrl, String locale, String mobilePhone, Integer ownerId, String personCompanyIndustry, String personCompanyName, String personCompanyWebsite, Integer personStageId, String personalEmailAddress, String personalWebsite, String phone, String phoneExtension, String secondaryEmailAddress, String state, List<String> tags, String title, String twitterHandle, String workCity, String workCountry, String workState) throws ApiException {
        okhttp3.Call localVarCall = v2PeopleIdJsonPutValidateBeforeCall(id, accountId, city, contactRestrictions, country, crmId, crmIdType, customFields, doNotContact, emailAddress, firstName, homePhone, importId, jobSeniority, lastName, linkedinUrl, locale, mobilePhone, ownerId, personCompanyIndustry, personCompanyName, personCompanyWebsite, personStageId, personalEmailAddress, personalWebsite, phone, phoneExtension, secondaryEmailAddress, state, tags, title, twitterHandle, workCity, workCountry, workState, null);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a person (asynchronously)
     * Updates a person. 
     * @param id Person id (required)
     * @param accountId ID of the Account to link this person to (optional)
     * @param city City (optional)
     * @param contactRestrictions Specific methods of communication to prevent for this person. This will prevent individual execution of these communication types as well as automatically skip cadence steps of this communication type for this person in SalesLoft. Values currently accepted: call, email, message (optional)
     * @param country Country (optional)
     * @param crmId Requires Salesforce.  ID of the person in your external CRM. You must provide a crm_id_type if this is included.  Validations will be applied to the crm_id depending on the crm_id_type. A \\\&quot;salesforce\\\&quot; ID must be exactly 18 characters. A \\\&quot;salesforce\\\&quot; ID must be either a Lead (00Q) or Contact (003) object. The type will be validated using the 18 character ID.  This field can only be used if your application or API key has the \\\&quot;person:set_crm_id\\\&quot; scope.   (optional)
     * @param crmIdType The CRM that the provided crm_id is for. Must be one of: salesforce (optional)
     * @param customFields Custom fields are defined by the user&#39;s team. Only fields with values are presented in the API. (optional)
     * @param doNotContact Whether or not this person has opted out of all communication. Setting this value to true prevents this person from being called, emailed, or added to a cadence in SalesLoft. If this person is currently in a cadence, they will be removed. (optional)
     * @param emailAddress Email address (optional)
     * @param firstName First name (optional)
     * @param homePhone Home phone without formatting (optional)
     * @param importId ID of the Import this person is a part of. A person can be part of multiple imports, but this ID will always be the most recent Import (optional)
     * @param jobSeniority The Job Seniority of a Person, must be one of director, executive, individual_contributor, manager, vice_president, unknown (optional)
     * @param lastName Last name (optional)
     * @param linkedinUrl Linkedin URL (optional)
     * @param locale Time locale of the person (optional)
     * @param mobilePhone Mobile phone without formatting (optional)
     * @param ownerId ID of the User that owns this person (optional)
     * @param personCompanyIndustry Company industry. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended (optional)
     * @param personCompanyName Company name. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended (optional)
     * @param personCompanyWebsite Company website. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended (optional)
     * @param personStageId ID of the PersonStage of this person (optional)
     * @param personalEmailAddress Personal email address (optional)
     * @param personalWebsite The website of this person (optional)
     * @param phone Phone without formatting (optional)
     * @param phoneExtension Phone extension without formatting (optional)
     * @param secondaryEmailAddress Alternate email address (optional)
     * @param state State (optional)
     * @param tags All tags applied to this person (optional)
     * @param title Job title (optional)
     * @param twitterHandle The twitter handle of this person (optional)
     * @param workCity Work location - city (optional)
     * @param workCountry Work location - country (optional)
     * @param workState Work location - state (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2PeopleIdJsonPutAsync(String id, Integer accountId, String city, List<String> contactRestrictions, String country, String crmId, String crmIdType, Object customFields, Boolean doNotContact, String emailAddress, String firstName, String homePhone, Integer importId, String jobSeniority, String lastName, String linkedinUrl, String locale, String mobilePhone, Integer ownerId, String personCompanyIndustry, String personCompanyName, String personCompanyWebsite, Integer personStageId, String personalEmailAddress, String personalWebsite, String phone, String phoneExtension, String secondaryEmailAddress, String state, List<String> tags, String title, String twitterHandle, String workCity, String workCountry, String workState, final ApiCallback<Person> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2PeopleIdJsonPutValidateBeforeCall(id, accountId, city, contactRestrictions, country, crmId, crmIdType, customFields, doNotContact, emailAddress, firstName, homePhone, importId, jobSeniority, lastName, linkedinUrl, locale, mobilePhone, ownerId, personCompanyIndustry, personCompanyName, personCompanyWebsite, personStageId, personalEmailAddress, personalWebsite, phone, phoneExtension, secondaryEmailAddress, state, tags, title, twitterHandle, workCity, workCountry, workState, _callback);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2PeopleJsonGet
     * @param ids IDs of people to fetch. If a record can&#39;t be found, that record won&#39;t be returned and your request will be successful (optional)
     * @param updatedAt Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param emailAddresses Filters people by email address. Multiple emails can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter people that do not have an email address. (optional)
     * @param ownedByGuid Filters people by the owner&#39;s guid. Multiple owner guids can be applied (optional)
     * @param personStageId Includes people that have a given person_stage. Multiple person stage ids can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter people that do not have a stage set. (optional)
     * @param crmId Filters people by crm_id. Multiple crm ids can be applied (optional)
     * @param ownerCrmId Filters people by owner_crm_id. Multiple owner_crm_ids can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter people that are unowned. A \&quot;_not_in\&quot; modifier can be used to exclude specific owner_crm_ids. Example: v2/people?owner_crm_id[_not_in]&#x3D;id (optional)
     * @param doNotContact Includes people that have a given do_not_contact property (optional)
     * @param canEmail Includes people that can be emailed given do_not_contact and contact_restrictions property (optional)
     * @param canCall Includes people that can be called given do_not_contact and contact_restrictions property (optional)
     * @param canText Includes people that can be sent a text message given do_not_contact and contact_restrictions property (optional)
     * @param accountId Filters people by the account they are linked to. Multiple account ids can be applied (optional)
     * @param customFields Filters by people matching all given custom fields. The custom field names are case-sensitive, but the provided values are case-insensitive. Example: v2/people?custom_fields[custom_field_name]&#x3D;custom_field_value (optional)
     * @param importId Filters people that were imported by the given import ids. Multiple import ids can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter people that were not imported. (optional)
     * @param jobSeniority Filters people by job seniorty. Multiple job seniorities can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter people do not have a job_seniority. (optional)
     * @param tagId Filters people by the tag ids applied to the person. Multiple tag ids can be applied. (optional)
     * @param ownerIsActive Filters people by whether the owner is active or not. (optional)
     * @param cadenceId Filters people by the cadence that they are currently on. Multiple cadence_ids can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter people that are not on a cadence. (optional)
     * @param starredByGuid Filters people who have been starred by the user guids given. (optional)
     * @param replied Filters people by whether or not they have replied to an email or not. (optional)
     * @param bounced Filters people by whether an email that was sent to them bounced or not. (optional)
     * @param success Filters people by whether or not they have been marked as a success or not. (optional)
     * @param euResident Filters people by whether or not they are marked as an European Union Resident or not. (optional)
     * @param title Filters people by their title by exact match. Supports partial matching (optional)
     * @param country Filters people by their country by exact match. Supports partial matching (optional)
     * @param state Filters people by their state by exact match. Supports partial matching (optional)
     * @param city Filters people by their city by exact match. Supports partial matching (optional)
     * @param lastContacted Equality filters that are applied to the last_contacted field. A single filter can be used by itself or combined with other filters to create a range. Additional values of \&quot;_is_null\&quot; or \&quot;_is_not_null\&quot; can be passed to filter records that either have no timestamp value or any timestamp value. ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param createdAt Equality filters that are applied to the last_contacted field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param _new Filters people by whether or not that person is on a cadence or if they have been contacted in any way. (optional)
     * @param phoneNumber Filter people by whether or not they have a phone number or not (optional)
     * @param locales Filters people by locales. Multiple locales can be applied. An additional value of \&quot;Null\&quot; can be passed to filter people that do not have a locale. (optional)
     * @param ownerId Filters people by owner_id. Multiple owner_ids can be applied. (optional)
     * @param query For internal use only. This field does not comply with our backwards compatibility policies. This filter is for authenticated users of Salesloft only and will not work for OAuth Applications. Filters people by the string provided. Can search and filter by name, title, industry, email_address and linked account name. (optional)
     * @param sortBy Key to sort on, must be one of: created_at, updated_at, last_contacted_at, name, title, job_seniority, call_count, sent_emails, clicked_emails, replied_emails, viewed_emails, account, cadence_stage_name. Defaults to updated_at (optional)
     * @param sortDirection Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @param page The current page to fetch results from. Defaults to 1 (optional)
     * @param includePagingCounts Whether to include total_pages and total_count in the metadata. Defaults to false (optional)
     * @param limitPagingCounts Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2PeopleJsonGetCall(List<Integer> ids, List<String> updatedAt, List<String> emailAddresses, List<String> ownedByGuid, List<Integer> personStageId, List<String> crmId, List<String> ownerCrmId, Boolean doNotContact, Boolean canEmail, Boolean canCall, Boolean canText, List<Integer> accountId, Object customFields, List<Integer> importId, List<String> jobSeniority, List<Integer> tagId, Boolean ownerIsActive, List<Integer> cadenceId, List<String> starredByGuid, Boolean replied, Boolean bounced, Boolean success, Boolean euResident, List<String> title, List<String> country, List<String> state, List<String> city, Object lastContacted, Object createdAt, Boolean _new, Boolean phoneNumber, List<String> locales, List<Integer> ownerId, String query, String sortBy, String sortDirection, Integer perPage, Integer page, Boolean includePagingCounts, Boolean limitPagingCounts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/people.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "ids", ids));
        }

        if (updatedAt != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "updated_at", updatedAt));
        }

        if (emailAddresses != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "email_addresses", emailAddresses));
        }

        if (ownedByGuid != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "owned_by_guid", ownedByGuid));
        }

        if (personStageId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "person_stage_id", personStageId));
        }

        if (crmId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "crm_id", crmId));
        }

        if (ownerCrmId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "owner_crm_id", ownerCrmId));
        }

        if (doNotContact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("do_not_contact", doNotContact));
        }

        if (canEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("can_email", canEmail));
        }

        if (canCall != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("can_call", canCall));
        }

        if (canText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("can_text", canText));
        }

        if (accountId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "account_id", accountId));
        }

        if (customFields != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(customFields));
        }

        if (importId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "import_id", importId));
        }

        if (jobSeniority != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "job_seniority", jobSeniority));
        }

        if (tagId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tag_id", tagId));
        }

        if (ownerIsActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner_is_active", ownerIsActive));
        }

        if (cadenceId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "cadence_id", cadenceId));
        }

        if (starredByGuid != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "starred_by_guid", starredByGuid));
        }

        if (replied != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("replied", replied));
        }

        if (bounced != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bounced", bounced));
        }

        if (success != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("success", success));
        }

        if (euResident != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eu_resident", euResident));
        }

        if (title != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "title", title));
        }

        if (country != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "country", country));
        }

        if (state != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "state", state));
        }

        if (city != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "city", city));
        }

        if (lastContacted != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(lastContacted));
        }

        if (createdAt != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(createdAt));
        }

        if (_new != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("new", _new));
        }

        if (phoneNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phone_number", phoneNumber));
        }

        if (locales != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "locales", locales));
        }

        if (ownerId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "owner_id", ownerId));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_query", query));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_direction", sortDirection));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (includePagingCounts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_paging_counts", includePagingCounts));
        }

        if (limitPagingCounts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit_paging_counts", limitPagingCounts));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2PeopleJsonGetValidateBeforeCall(List<Integer> ids, List<String> updatedAt, List<String> emailAddresses, List<String> ownedByGuid, List<Integer> personStageId, List<String> crmId, List<String> ownerCrmId, Boolean doNotContact, Boolean canEmail, Boolean canCall, Boolean canText, List<Integer> accountId, Object customFields, List<Integer> importId, List<String> jobSeniority, List<Integer> tagId, Boolean ownerIsActive, List<Integer> cadenceId, List<String> starredByGuid, Boolean replied, Boolean bounced, Boolean success, Boolean euResident, List<String> title, List<String> country, List<String> state, List<String> city, Object lastContacted, Object createdAt, Boolean _new, Boolean phoneNumber, List<String> locales, List<Integer> ownerId, String query, String sortBy, String sortDirection, Integer perPage, Integer page, Boolean includePagingCounts, Boolean limitPagingCounts, final ApiCallback _callback) throws ApiException {
        return v2PeopleJsonGetCall(ids, updatedAt, emailAddresses, ownedByGuid, personStageId, crmId, ownerCrmId, doNotContact, canEmail, canCall, canText, accountId, customFields, importId, jobSeniority, tagId, ownerIsActive, cadenceId, starredByGuid, replied, bounced, success, euResident, title, country, state, city, lastContacted, createdAt, _new, phoneNumber, locales, ownerId, query, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts, _callback);

    }

    /**
     * List people
     * Fetches multiple person records. The records can be filtered, paged, and sorted according to the respective parameters. 
     * @param ids IDs of people to fetch. If a record can&#39;t be found, that record won&#39;t be returned and your request will be successful (optional)
     * @param updatedAt Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param emailAddresses Filters people by email address. Multiple emails can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter people that do not have an email address. (optional)
     * @param ownedByGuid Filters people by the owner&#39;s guid. Multiple owner guids can be applied (optional)
     * @param personStageId Includes people that have a given person_stage. Multiple person stage ids can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter people that do not have a stage set. (optional)
     * @param crmId Filters people by crm_id. Multiple crm ids can be applied (optional)
     * @param ownerCrmId Filters people by owner_crm_id. Multiple owner_crm_ids can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter people that are unowned. A \&quot;_not_in\&quot; modifier can be used to exclude specific owner_crm_ids. Example: v2/people?owner_crm_id[_not_in]&#x3D;id (optional)
     * @param doNotContact Includes people that have a given do_not_contact property (optional)
     * @param canEmail Includes people that can be emailed given do_not_contact and contact_restrictions property (optional)
     * @param canCall Includes people that can be called given do_not_contact and contact_restrictions property (optional)
     * @param canText Includes people that can be sent a text message given do_not_contact and contact_restrictions property (optional)
     * @param accountId Filters people by the account they are linked to. Multiple account ids can be applied (optional)
     * @param customFields Filters by people matching all given custom fields. The custom field names are case-sensitive, but the provided values are case-insensitive. Example: v2/people?custom_fields[custom_field_name]&#x3D;custom_field_value (optional)
     * @param importId Filters people that were imported by the given import ids. Multiple import ids can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter people that were not imported. (optional)
     * @param jobSeniority Filters people by job seniorty. Multiple job seniorities can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter people do not have a job_seniority. (optional)
     * @param tagId Filters people by the tag ids applied to the person. Multiple tag ids can be applied. (optional)
     * @param ownerIsActive Filters people by whether the owner is active or not. (optional)
     * @param cadenceId Filters people by the cadence that they are currently on. Multiple cadence_ids can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter people that are not on a cadence. (optional)
     * @param starredByGuid Filters people who have been starred by the user guids given. (optional)
     * @param replied Filters people by whether or not they have replied to an email or not. (optional)
     * @param bounced Filters people by whether an email that was sent to them bounced or not. (optional)
     * @param success Filters people by whether or not they have been marked as a success or not. (optional)
     * @param euResident Filters people by whether or not they are marked as an European Union Resident or not. (optional)
     * @param title Filters people by their title by exact match. Supports partial matching (optional)
     * @param country Filters people by their country by exact match. Supports partial matching (optional)
     * @param state Filters people by their state by exact match. Supports partial matching (optional)
     * @param city Filters people by their city by exact match. Supports partial matching (optional)
     * @param lastContacted Equality filters that are applied to the last_contacted field. A single filter can be used by itself or combined with other filters to create a range. Additional values of \&quot;_is_null\&quot; or \&quot;_is_not_null\&quot; can be passed to filter records that either have no timestamp value or any timestamp value. ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param createdAt Equality filters that are applied to the last_contacted field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param _new Filters people by whether or not that person is on a cadence or if they have been contacted in any way. (optional)
     * @param phoneNumber Filter people by whether or not they have a phone number or not (optional)
     * @param locales Filters people by locales. Multiple locales can be applied. An additional value of \&quot;Null\&quot; can be passed to filter people that do not have a locale. (optional)
     * @param ownerId Filters people by owner_id. Multiple owner_ids can be applied. (optional)
     * @param query For internal use only. This field does not comply with our backwards compatibility policies. This filter is for authenticated users of Salesloft only and will not work for OAuth Applications. Filters people by the string provided. Can search and filter by name, title, industry, email_address and linked account name. (optional)
     * @param sortBy Key to sort on, must be one of: created_at, updated_at, last_contacted_at, name, title, job_seniority, call_count, sent_emails, clicked_emails, replied_emails, viewed_emails, account, cadence_stage_name. Defaults to updated_at (optional)
     * @param sortDirection Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @param page The current page to fetch results from. Defaults to 1 (optional)
     * @param includePagingCounts Whether to include total_pages and total_count in the metadata. Defaults to false (optional)
     * @param limitPagingCounts Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)
     * @return List&lt;Person&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<Person> v2PeopleJsonGet(List<Integer> ids, List<String> updatedAt, List<String> emailAddresses, List<String> ownedByGuid, List<Integer> personStageId, List<String> crmId, List<String> ownerCrmId, Boolean doNotContact, Boolean canEmail, Boolean canCall, Boolean canText, List<Integer> accountId, Object customFields, List<Integer> importId, List<String> jobSeniority, List<Integer> tagId, Boolean ownerIsActive, List<Integer> cadenceId, List<String> starredByGuid, Boolean replied, Boolean bounced, Boolean success, Boolean euResident, List<String> title, List<String> country, List<String> state, List<String> city, Object lastContacted, Object createdAt, Boolean _new, Boolean phoneNumber, List<String> locales, List<Integer> ownerId, String query, String sortBy, String sortDirection, Integer perPage, Integer page, Boolean includePagingCounts, Boolean limitPagingCounts) throws ApiException {
        ApiResponse<List<Person>> localVarResp = v2PeopleJsonGetWithHttpInfo(ids, updatedAt, emailAddresses, ownedByGuid, personStageId, crmId, ownerCrmId, doNotContact, canEmail, canCall, canText, accountId, customFields, importId, jobSeniority, tagId, ownerIsActive, cadenceId, starredByGuid, replied, bounced, success, euResident, title, country, state, city, lastContacted, createdAt, _new, phoneNumber, locales, ownerId, query, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts);
        return localVarResp.getData();
    }

    /**
     * List people
     * Fetches multiple person records. The records can be filtered, paged, and sorted according to the respective parameters. 
     * @param ids IDs of people to fetch. If a record can&#39;t be found, that record won&#39;t be returned and your request will be successful (optional)
     * @param updatedAt Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param emailAddresses Filters people by email address. Multiple emails can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter people that do not have an email address. (optional)
     * @param ownedByGuid Filters people by the owner&#39;s guid. Multiple owner guids can be applied (optional)
     * @param personStageId Includes people that have a given person_stage. Multiple person stage ids can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter people that do not have a stage set. (optional)
     * @param crmId Filters people by crm_id. Multiple crm ids can be applied (optional)
     * @param ownerCrmId Filters people by owner_crm_id. Multiple owner_crm_ids can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter people that are unowned. A \&quot;_not_in\&quot; modifier can be used to exclude specific owner_crm_ids. Example: v2/people?owner_crm_id[_not_in]&#x3D;id (optional)
     * @param doNotContact Includes people that have a given do_not_contact property (optional)
     * @param canEmail Includes people that can be emailed given do_not_contact and contact_restrictions property (optional)
     * @param canCall Includes people that can be called given do_not_contact and contact_restrictions property (optional)
     * @param canText Includes people that can be sent a text message given do_not_contact and contact_restrictions property (optional)
     * @param accountId Filters people by the account they are linked to. Multiple account ids can be applied (optional)
     * @param customFields Filters by people matching all given custom fields. The custom field names are case-sensitive, but the provided values are case-insensitive. Example: v2/people?custom_fields[custom_field_name]&#x3D;custom_field_value (optional)
     * @param importId Filters people that were imported by the given import ids. Multiple import ids can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter people that were not imported. (optional)
     * @param jobSeniority Filters people by job seniorty. Multiple job seniorities can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter people do not have a job_seniority. (optional)
     * @param tagId Filters people by the tag ids applied to the person. Multiple tag ids can be applied. (optional)
     * @param ownerIsActive Filters people by whether the owner is active or not. (optional)
     * @param cadenceId Filters people by the cadence that they are currently on. Multiple cadence_ids can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter people that are not on a cadence. (optional)
     * @param starredByGuid Filters people who have been starred by the user guids given. (optional)
     * @param replied Filters people by whether or not they have replied to an email or not. (optional)
     * @param bounced Filters people by whether an email that was sent to them bounced or not. (optional)
     * @param success Filters people by whether or not they have been marked as a success or not. (optional)
     * @param euResident Filters people by whether or not they are marked as an European Union Resident or not. (optional)
     * @param title Filters people by their title by exact match. Supports partial matching (optional)
     * @param country Filters people by their country by exact match. Supports partial matching (optional)
     * @param state Filters people by their state by exact match. Supports partial matching (optional)
     * @param city Filters people by their city by exact match. Supports partial matching (optional)
     * @param lastContacted Equality filters that are applied to the last_contacted field. A single filter can be used by itself or combined with other filters to create a range. Additional values of \&quot;_is_null\&quot; or \&quot;_is_not_null\&quot; can be passed to filter records that either have no timestamp value or any timestamp value. ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param createdAt Equality filters that are applied to the last_contacted field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param _new Filters people by whether or not that person is on a cadence or if they have been contacted in any way. (optional)
     * @param phoneNumber Filter people by whether or not they have a phone number or not (optional)
     * @param locales Filters people by locales. Multiple locales can be applied. An additional value of \&quot;Null\&quot; can be passed to filter people that do not have a locale. (optional)
     * @param ownerId Filters people by owner_id. Multiple owner_ids can be applied. (optional)
     * @param query For internal use only. This field does not comply with our backwards compatibility policies. This filter is for authenticated users of Salesloft only and will not work for OAuth Applications. Filters people by the string provided. Can search and filter by name, title, industry, email_address and linked account name. (optional)
     * @param sortBy Key to sort on, must be one of: created_at, updated_at, last_contacted_at, name, title, job_seniority, call_count, sent_emails, clicked_emails, replied_emails, viewed_emails, account, cadence_stage_name. Defaults to updated_at (optional)
     * @param sortDirection Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @param page The current page to fetch results from. Defaults to 1 (optional)
     * @param includePagingCounts Whether to include total_pages and total_count in the metadata. Defaults to false (optional)
     * @param limitPagingCounts Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)
     * @return ApiResponse&lt;List&lt;Person&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Person>> v2PeopleJsonGetWithHttpInfo(List<Integer> ids, List<String> updatedAt, List<String> emailAddresses, List<String> ownedByGuid, List<Integer> personStageId, List<String> crmId, List<String> ownerCrmId, Boolean doNotContact, Boolean canEmail, Boolean canCall, Boolean canText, List<Integer> accountId, Object customFields, List<Integer> importId, List<String> jobSeniority, List<Integer> tagId, Boolean ownerIsActive, List<Integer> cadenceId, List<String> starredByGuid, Boolean replied, Boolean bounced, Boolean success, Boolean euResident, List<String> title, List<String> country, List<String> state, List<String> city, Object lastContacted, Object createdAt, Boolean _new, Boolean phoneNumber, List<String> locales, List<Integer> ownerId, String query, String sortBy, String sortDirection, Integer perPage, Integer page, Boolean includePagingCounts, Boolean limitPagingCounts) throws ApiException {
        okhttp3.Call localVarCall = v2PeopleJsonGetValidateBeforeCall(ids, updatedAt, emailAddresses, ownedByGuid, personStageId, crmId, ownerCrmId, doNotContact, canEmail, canCall, canText, accountId, customFields, importId, jobSeniority, tagId, ownerIsActive, cadenceId, starredByGuid, replied, bounced, success, euResident, title, country, state, city, lastContacted, createdAt, _new, phoneNumber, locales, ownerId, query, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts, null);
        Type localVarReturnType = new TypeToken<List<Person>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List people (asynchronously)
     * Fetches multiple person records. The records can be filtered, paged, and sorted according to the respective parameters. 
     * @param ids IDs of people to fetch. If a record can&#39;t be found, that record won&#39;t be returned and your request will be successful (optional)
     * @param updatedAt Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param emailAddresses Filters people by email address. Multiple emails can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter people that do not have an email address. (optional)
     * @param ownedByGuid Filters people by the owner&#39;s guid. Multiple owner guids can be applied (optional)
     * @param personStageId Includes people that have a given person_stage. Multiple person stage ids can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter people that do not have a stage set. (optional)
     * @param crmId Filters people by crm_id. Multiple crm ids can be applied (optional)
     * @param ownerCrmId Filters people by owner_crm_id. Multiple owner_crm_ids can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter people that are unowned. A \&quot;_not_in\&quot; modifier can be used to exclude specific owner_crm_ids. Example: v2/people?owner_crm_id[_not_in]&#x3D;id (optional)
     * @param doNotContact Includes people that have a given do_not_contact property (optional)
     * @param canEmail Includes people that can be emailed given do_not_contact and contact_restrictions property (optional)
     * @param canCall Includes people that can be called given do_not_contact and contact_restrictions property (optional)
     * @param canText Includes people that can be sent a text message given do_not_contact and contact_restrictions property (optional)
     * @param accountId Filters people by the account they are linked to. Multiple account ids can be applied (optional)
     * @param customFields Filters by people matching all given custom fields. The custom field names are case-sensitive, but the provided values are case-insensitive. Example: v2/people?custom_fields[custom_field_name]&#x3D;custom_field_value (optional)
     * @param importId Filters people that were imported by the given import ids. Multiple import ids can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter people that were not imported. (optional)
     * @param jobSeniority Filters people by job seniorty. Multiple job seniorities can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter people do not have a job_seniority. (optional)
     * @param tagId Filters people by the tag ids applied to the person. Multiple tag ids can be applied. (optional)
     * @param ownerIsActive Filters people by whether the owner is active or not. (optional)
     * @param cadenceId Filters people by the cadence that they are currently on. Multiple cadence_ids can be applied. An additional value of \&quot;_is_null\&quot; can be passed to filter people that are not on a cadence. (optional)
     * @param starredByGuid Filters people who have been starred by the user guids given. (optional)
     * @param replied Filters people by whether or not they have replied to an email or not. (optional)
     * @param bounced Filters people by whether an email that was sent to them bounced or not. (optional)
     * @param success Filters people by whether or not they have been marked as a success or not. (optional)
     * @param euResident Filters people by whether or not they are marked as an European Union Resident or not. (optional)
     * @param title Filters people by their title by exact match. Supports partial matching (optional)
     * @param country Filters people by their country by exact match. Supports partial matching (optional)
     * @param state Filters people by their state by exact match. Supports partial matching (optional)
     * @param city Filters people by their city by exact match. Supports partial matching (optional)
     * @param lastContacted Equality filters that are applied to the last_contacted field. A single filter can be used by itself or combined with other filters to create a range. Additional values of \&quot;_is_null\&quot; or \&quot;_is_not_null\&quot; can be passed to filter records that either have no timestamp value or any timestamp value. ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param createdAt Equality filters that are applied to the last_contacted field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param _new Filters people by whether or not that person is on a cadence or if they have been contacted in any way. (optional)
     * @param phoneNumber Filter people by whether or not they have a phone number or not (optional)
     * @param locales Filters people by locales. Multiple locales can be applied. An additional value of \&quot;Null\&quot; can be passed to filter people that do not have a locale. (optional)
     * @param ownerId Filters people by owner_id. Multiple owner_ids can be applied. (optional)
     * @param query For internal use only. This field does not comply with our backwards compatibility policies. This filter is for authenticated users of Salesloft only and will not work for OAuth Applications. Filters people by the string provided. Can search and filter by name, title, industry, email_address and linked account name. (optional)
     * @param sortBy Key to sort on, must be one of: created_at, updated_at, last_contacted_at, name, title, job_seniority, call_count, sent_emails, clicked_emails, replied_emails, viewed_emails, account, cadence_stage_name. Defaults to updated_at (optional)
     * @param sortDirection Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @param page The current page to fetch results from. Defaults to 1 (optional)
     * @param includePagingCounts Whether to include total_pages and total_count in the metadata. Defaults to false (optional)
     * @param limitPagingCounts Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2PeopleJsonGetAsync(List<Integer> ids, List<String> updatedAt, List<String> emailAddresses, List<String> ownedByGuid, List<Integer> personStageId, List<String> crmId, List<String> ownerCrmId, Boolean doNotContact, Boolean canEmail, Boolean canCall, Boolean canText, List<Integer> accountId, Object customFields, List<Integer> importId, List<String> jobSeniority, List<Integer> tagId, Boolean ownerIsActive, List<Integer> cadenceId, List<String> starredByGuid, Boolean replied, Boolean bounced, Boolean success, Boolean euResident, List<String> title, List<String> country, List<String> state, List<String> city, Object lastContacted, Object createdAt, Boolean _new, Boolean phoneNumber, List<String> locales, List<Integer> ownerId, String query, String sortBy, String sortDirection, Integer perPage, Integer page, Boolean includePagingCounts, Boolean limitPagingCounts, final ApiCallback<List<Person>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2PeopleJsonGetValidateBeforeCall(ids, updatedAt, emailAddresses, ownedByGuid, personStageId, crmId, ownerCrmId, doNotContact, canEmail, canCall, canText, accountId, customFields, importId, jobSeniority, tagId, ownerIsActive, cadenceId, starredByGuid, replied, bounced, success, euResident, title, country, state, city, lastContacted, createdAt, _new, phoneNumber, locales, ownerId, query, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts, _callback);
        Type localVarReturnType = new TypeToken<List<Person>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2PeopleJsonPost
     * @param accountId ID of the Account to link this person to (optional)
     * @param autotagDate Whether the date should be added to this person as a tag. Default is false. The tag will be Y-m-d format. (optional)
     * @param city City (optional)
     * @param contactRestrictions Specific methods of communication to prevent for this person. This will prevent individual execution of these communication types as well as automatically skip cadence steps of this communication type for this person in SalesLoft. Values currently accepted: call, email, message (optional)
     * @param country Country (optional)
     * @param crmId Requires Salesforce.  ID of the person in your external CRM. You must provide a crm_id_type if this is included.  Validations will be applied to the crm_id depending on the crm_id_type. A \\\&quot;salesforce\\\&quot; ID must be exactly 18 characters. A \\\&quot;salesforce\\\&quot; ID must be either a Lead (00Q) or Contact (003) object. The type will be validated using the 18 character ID.  This field can only be used if your application or API key has the \\\&quot;person:set_crm_id\\\&quot; scope.   (optional)
     * @param crmIdType The CRM that the provided crm_id is for. Must be one of: salesforce (optional)
     * @param customFields Custom fields are defined by the user&#39;s team. Only fields with values are presented in the API. (optional)
     * @param doNotContact Whether or not this person has opted out of all communication. Setting this value to true prevents this person from being called, emailed, or added to a cadence in SalesLoft. If this person is currently in a cadence, they will be removed. (optional)
     * @param emailAddress Email address (optional)
     * @param firstName First name (optional)
     * @param homePhone Home phone without formatting (optional)
     * @param importId ID of the Import this person is a part of. A person can be part of multiple imports, but this ID will always be the most recent Import (optional)
     * @param jobSeniority The Job Seniority of a Person, must be one of director, executive, individual_contributor, manager, vice_president, unknown (optional)
     * @param lastName Last name (optional)
     * @param linkedinUrl Linkedin URL (optional)
     * @param locale Time locale of the person (optional)
     * @param mobilePhone Mobile phone without formatting (optional)
     * @param ownerId ID of the User that owns this person (optional)
     * @param personCompanyIndustry Company industry. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended (optional)
     * @param personCompanyName Company name. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended (optional)
     * @param personCompanyWebsite Company website. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended (optional)
     * @param personStageId ID of the PersonStage of this person (optional)
     * @param personalEmailAddress Personal email address (optional)
     * @param personalWebsite The website of this person (optional)
     * @param phone Phone without formatting (optional)
     * @param phoneExtension Phone extension without formatting (optional)
     * @param secondaryEmailAddress Alternate email address (optional)
     * @param state State (optional)
     * @param tags All tags applied to this person (optional)
     * @param title Job title (optional)
     * @param twitterHandle The twitter handle of this person (optional)
     * @param workCity Work location - city (optional)
     * @param workCountry Work location - country (optional)
     * @param workState Work location - state (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2PeopleJsonPostCall(Integer accountId, Boolean autotagDate, String city, List<String> contactRestrictions, String country, String crmId, String crmIdType, Object customFields, Boolean doNotContact, String emailAddress, String firstName, String homePhone, Integer importId, String jobSeniority, String lastName, String linkedinUrl, String locale, String mobilePhone, Integer ownerId, String personCompanyIndustry, String personCompanyName, String personCompanyWebsite, Integer personStageId, String personalEmailAddress, String personalWebsite, String phone, String phoneExtension, String secondaryEmailAddress, String state, List<String> tags, String title, String twitterHandle, String workCity, String workCountry, String workState, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/people.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountId != null) {
            localVarFormParams.put("account_id", accountId);
        }

        if (autotagDate != null) {
            localVarFormParams.put("autotag_date", autotagDate);
        }

        if (city != null) {
            localVarFormParams.put("city", city);
        }

        if (contactRestrictions != null) {
            localVarFormParams.put("contact_restrictions", contactRestrictions);
        }

        if (country != null) {
            localVarFormParams.put("country", country);
        }

        if (crmId != null) {
            localVarFormParams.put("crm_id", crmId);
        }

        if (crmIdType != null) {
            localVarFormParams.put("crm_id_type", crmIdType);
        }

        if (customFields != null) {
            localVarFormParams.put("custom_fields", customFields);
        }

        if (doNotContact != null) {
            localVarFormParams.put("do_not_contact", doNotContact);
        }

        if (emailAddress != null) {
            localVarFormParams.put("email_address", emailAddress);
        }

        if (firstName != null) {
            localVarFormParams.put("first_name", firstName);
        }

        if (homePhone != null) {
            localVarFormParams.put("home_phone", homePhone);
        }

        if (importId != null) {
            localVarFormParams.put("import_id", importId);
        }

        if (jobSeniority != null) {
            localVarFormParams.put("job_seniority", jobSeniority);
        }

        if (lastName != null) {
            localVarFormParams.put("last_name", lastName);
        }

        if (linkedinUrl != null) {
            localVarFormParams.put("linkedin_url", linkedinUrl);
        }

        if (locale != null) {
            localVarFormParams.put("locale", locale);
        }

        if (mobilePhone != null) {
            localVarFormParams.put("mobile_phone", mobilePhone);
        }

        if (ownerId != null) {
            localVarFormParams.put("owner_id", ownerId);
        }

        if (personCompanyIndustry != null) {
            localVarFormParams.put("person_company_industry", personCompanyIndustry);
        }

        if (personCompanyName != null) {
            localVarFormParams.put("person_company_name", personCompanyName);
        }

        if (personCompanyWebsite != null) {
            localVarFormParams.put("person_company_website", personCompanyWebsite);
        }

        if (personStageId != null) {
            localVarFormParams.put("person_stage_id", personStageId);
        }

        if (personalEmailAddress != null) {
            localVarFormParams.put("personal_email_address", personalEmailAddress);
        }

        if (personalWebsite != null) {
            localVarFormParams.put("personal_website", personalWebsite);
        }

        if (phone != null) {
            localVarFormParams.put("phone", phone);
        }

        if (phoneExtension != null) {
            localVarFormParams.put("phone_extension", phoneExtension);
        }

        if (secondaryEmailAddress != null) {
            localVarFormParams.put("secondary_email_address", secondaryEmailAddress);
        }

        if (state != null) {
            localVarFormParams.put("state", state);
        }

        if (tags != null) {
            localVarFormParams.put("tags", tags);
        }

        if (title != null) {
            localVarFormParams.put("title", title);
        }

        if (twitterHandle != null) {
            localVarFormParams.put("twitter_handle", twitterHandle);
        }

        if (workCity != null) {
            localVarFormParams.put("work_city", workCity);
        }

        if (workCountry != null) {
            localVarFormParams.put("work_country", workCountry);
        }

        if (workState != null) {
            localVarFormParams.put("work_state", workState);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2PeopleJsonPostValidateBeforeCall(Integer accountId, Boolean autotagDate, String city, List<String> contactRestrictions, String country, String crmId, String crmIdType, Object customFields, Boolean doNotContact, String emailAddress, String firstName, String homePhone, Integer importId, String jobSeniority, String lastName, String linkedinUrl, String locale, String mobilePhone, Integer ownerId, String personCompanyIndustry, String personCompanyName, String personCompanyWebsite, Integer personStageId, String personalEmailAddress, String personalWebsite, String phone, String phoneExtension, String secondaryEmailAddress, String state, List<String> tags, String title, String twitterHandle, String workCity, String workCountry, String workState, final ApiCallback _callback) throws ApiException {
        return v2PeopleJsonPostCall(accountId, autotagDate, city, contactRestrictions, country, crmId, crmIdType, customFields, doNotContact, emailAddress, firstName, homePhone, importId, jobSeniority, lastName, linkedinUrl, locale, mobilePhone, ownerId, personCompanyIndustry, personCompanyName, personCompanyWebsite, personStageId, personalEmailAddress, personalWebsite, phone, phoneExtension, secondaryEmailAddress, state, tags, title, twitterHandle, workCity, workCountry, workState, _callback);

    }

    /**
     * Create a person
     * Creates a person. Either email_address or phone/last_name must be provided as a unique lookup on the team. 
     * @param accountId ID of the Account to link this person to (optional)
     * @param autotagDate Whether the date should be added to this person as a tag. Default is false. The tag will be Y-m-d format. (optional)
     * @param city City (optional)
     * @param contactRestrictions Specific methods of communication to prevent for this person. This will prevent individual execution of these communication types as well as automatically skip cadence steps of this communication type for this person in SalesLoft. Values currently accepted: call, email, message (optional)
     * @param country Country (optional)
     * @param crmId Requires Salesforce.  ID of the person in your external CRM. You must provide a crm_id_type if this is included.  Validations will be applied to the crm_id depending on the crm_id_type. A \\\&quot;salesforce\\\&quot; ID must be exactly 18 characters. A \\\&quot;salesforce\\\&quot; ID must be either a Lead (00Q) or Contact (003) object. The type will be validated using the 18 character ID.  This field can only be used if your application or API key has the \\\&quot;person:set_crm_id\\\&quot; scope.   (optional)
     * @param crmIdType The CRM that the provided crm_id is for. Must be one of: salesforce (optional)
     * @param customFields Custom fields are defined by the user&#39;s team. Only fields with values are presented in the API. (optional)
     * @param doNotContact Whether or not this person has opted out of all communication. Setting this value to true prevents this person from being called, emailed, or added to a cadence in SalesLoft. If this person is currently in a cadence, they will be removed. (optional)
     * @param emailAddress Email address (optional)
     * @param firstName First name (optional)
     * @param homePhone Home phone without formatting (optional)
     * @param importId ID of the Import this person is a part of. A person can be part of multiple imports, but this ID will always be the most recent Import (optional)
     * @param jobSeniority The Job Seniority of a Person, must be one of director, executive, individual_contributor, manager, vice_president, unknown (optional)
     * @param lastName Last name (optional)
     * @param linkedinUrl Linkedin URL (optional)
     * @param locale Time locale of the person (optional)
     * @param mobilePhone Mobile phone without formatting (optional)
     * @param ownerId ID of the User that owns this person (optional)
     * @param personCompanyIndustry Company industry. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended (optional)
     * @param personCompanyName Company name. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended (optional)
     * @param personCompanyWebsite Company website. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended (optional)
     * @param personStageId ID of the PersonStage of this person (optional)
     * @param personalEmailAddress Personal email address (optional)
     * @param personalWebsite The website of this person (optional)
     * @param phone Phone without formatting (optional)
     * @param phoneExtension Phone extension without formatting (optional)
     * @param secondaryEmailAddress Alternate email address (optional)
     * @param state State (optional)
     * @param tags All tags applied to this person (optional)
     * @param title Job title (optional)
     * @param twitterHandle The twitter handle of this person (optional)
     * @param workCity Work location - city (optional)
     * @param workCountry Work location - country (optional)
     * @param workState Work location - state (optional)
     * @return Person
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Person v2PeopleJsonPost(Integer accountId, Boolean autotagDate, String city, List<String> contactRestrictions, String country, String crmId, String crmIdType, Object customFields, Boolean doNotContact, String emailAddress, String firstName, String homePhone, Integer importId, String jobSeniority, String lastName, String linkedinUrl, String locale, String mobilePhone, Integer ownerId, String personCompanyIndustry, String personCompanyName, String personCompanyWebsite, Integer personStageId, String personalEmailAddress, String personalWebsite, String phone, String phoneExtension, String secondaryEmailAddress, String state, List<String> tags, String title, String twitterHandle, String workCity, String workCountry, String workState) throws ApiException {
        ApiResponse<Person> localVarResp = v2PeopleJsonPostWithHttpInfo(accountId, autotagDate, city, contactRestrictions, country, crmId, crmIdType, customFields, doNotContact, emailAddress, firstName, homePhone, importId, jobSeniority, lastName, linkedinUrl, locale, mobilePhone, ownerId, personCompanyIndustry, personCompanyName, personCompanyWebsite, personStageId, personalEmailAddress, personalWebsite, phone, phoneExtension, secondaryEmailAddress, state, tags, title, twitterHandle, workCity, workCountry, workState);
        return localVarResp.getData();
    }

    /**
     * Create a person
     * Creates a person. Either email_address or phone/last_name must be provided as a unique lookup on the team. 
     * @param accountId ID of the Account to link this person to (optional)
     * @param autotagDate Whether the date should be added to this person as a tag. Default is false. The tag will be Y-m-d format. (optional)
     * @param city City (optional)
     * @param contactRestrictions Specific methods of communication to prevent for this person. This will prevent individual execution of these communication types as well as automatically skip cadence steps of this communication type for this person in SalesLoft. Values currently accepted: call, email, message (optional)
     * @param country Country (optional)
     * @param crmId Requires Salesforce.  ID of the person in your external CRM. You must provide a crm_id_type if this is included.  Validations will be applied to the crm_id depending on the crm_id_type. A \\\&quot;salesforce\\\&quot; ID must be exactly 18 characters. A \\\&quot;salesforce\\\&quot; ID must be either a Lead (00Q) or Contact (003) object. The type will be validated using the 18 character ID.  This field can only be used if your application or API key has the \\\&quot;person:set_crm_id\\\&quot; scope.   (optional)
     * @param crmIdType The CRM that the provided crm_id is for. Must be one of: salesforce (optional)
     * @param customFields Custom fields are defined by the user&#39;s team. Only fields with values are presented in the API. (optional)
     * @param doNotContact Whether or not this person has opted out of all communication. Setting this value to true prevents this person from being called, emailed, or added to a cadence in SalesLoft. If this person is currently in a cadence, they will be removed. (optional)
     * @param emailAddress Email address (optional)
     * @param firstName First name (optional)
     * @param homePhone Home phone without formatting (optional)
     * @param importId ID of the Import this person is a part of. A person can be part of multiple imports, but this ID will always be the most recent Import (optional)
     * @param jobSeniority The Job Seniority of a Person, must be one of director, executive, individual_contributor, manager, vice_president, unknown (optional)
     * @param lastName Last name (optional)
     * @param linkedinUrl Linkedin URL (optional)
     * @param locale Time locale of the person (optional)
     * @param mobilePhone Mobile phone without formatting (optional)
     * @param ownerId ID of the User that owns this person (optional)
     * @param personCompanyIndustry Company industry. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended (optional)
     * @param personCompanyName Company name. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended (optional)
     * @param personCompanyWebsite Company website. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended (optional)
     * @param personStageId ID of the PersonStage of this person (optional)
     * @param personalEmailAddress Personal email address (optional)
     * @param personalWebsite The website of this person (optional)
     * @param phone Phone without formatting (optional)
     * @param phoneExtension Phone extension without formatting (optional)
     * @param secondaryEmailAddress Alternate email address (optional)
     * @param state State (optional)
     * @param tags All tags applied to this person (optional)
     * @param title Job title (optional)
     * @param twitterHandle The twitter handle of this person (optional)
     * @param workCity Work location - city (optional)
     * @param workCountry Work location - country (optional)
     * @param workState Work location - state (optional)
     * @return ApiResponse&lt;Person&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Person> v2PeopleJsonPostWithHttpInfo(Integer accountId, Boolean autotagDate, String city, List<String> contactRestrictions, String country, String crmId, String crmIdType, Object customFields, Boolean doNotContact, String emailAddress, String firstName, String homePhone, Integer importId, String jobSeniority, String lastName, String linkedinUrl, String locale, String mobilePhone, Integer ownerId, String personCompanyIndustry, String personCompanyName, String personCompanyWebsite, Integer personStageId, String personalEmailAddress, String personalWebsite, String phone, String phoneExtension, String secondaryEmailAddress, String state, List<String> tags, String title, String twitterHandle, String workCity, String workCountry, String workState) throws ApiException {
        okhttp3.Call localVarCall = v2PeopleJsonPostValidateBeforeCall(accountId, autotagDate, city, contactRestrictions, country, crmId, crmIdType, customFields, doNotContact, emailAddress, firstName, homePhone, importId, jobSeniority, lastName, linkedinUrl, locale, mobilePhone, ownerId, personCompanyIndustry, personCompanyName, personCompanyWebsite, personStageId, personalEmailAddress, personalWebsite, phone, phoneExtension, secondaryEmailAddress, state, tags, title, twitterHandle, workCity, workCountry, workState, null);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a person (asynchronously)
     * Creates a person. Either email_address or phone/last_name must be provided as a unique lookup on the team. 
     * @param accountId ID of the Account to link this person to (optional)
     * @param autotagDate Whether the date should be added to this person as a tag. Default is false. The tag will be Y-m-d format. (optional)
     * @param city City (optional)
     * @param contactRestrictions Specific methods of communication to prevent for this person. This will prevent individual execution of these communication types as well as automatically skip cadence steps of this communication type for this person in SalesLoft. Values currently accepted: call, email, message (optional)
     * @param country Country (optional)
     * @param crmId Requires Salesforce.  ID of the person in your external CRM. You must provide a crm_id_type if this is included.  Validations will be applied to the crm_id depending on the crm_id_type. A \\\&quot;salesforce\\\&quot; ID must be exactly 18 characters. A \\\&quot;salesforce\\\&quot; ID must be either a Lead (00Q) or Contact (003) object. The type will be validated using the 18 character ID.  This field can only be used if your application or API key has the \\\&quot;person:set_crm_id\\\&quot; scope.   (optional)
     * @param crmIdType The CRM that the provided crm_id is for. Must be one of: salesforce (optional)
     * @param customFields Custom fields are defined by the user&#39;s team. Only fields with values are presented in the API. (optional)
     * @param doNotContact Whether or not this person has opted out of all communication. Setting this value to true prevents this person from being called, emailed, or added to a cadence in SalesLoft. If this person is currently in a cadence, they will be removed. (optional)
     * @param emailAddress Email address (optional)
     * @param firstName First name (optional)
     * @param homePhone Home phone without formatting (optional)
     * @param importId ID of the Import this person is a part of. A person can be part of multiple imports, but this ID will always be the most recent Import (optional)
     * @param jobSeniority The Job Seniority of a Person, must be one of director, executive, individual_contributor, manager, vice_president, unknown (optional)
     * @param lastName Last name (optional)
     * @param linkedinUrl Linkedin URL (optional)
     * @param locale Time locale of the person (optional)
     * @param mobilePhone Mobile phone without formatting (optional)
     * @param ownerId ID of the User that owns this person (optional)
     * @param personCompanyIndustry Company industry. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended (optional)
     * @param personCompanyName Company name. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended (optional)
     * @param personCompanyWebsite Company website. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended (optional)
     * @param personStageId ID of the PersonStage of this person (optional)
     * @param personalEmailAddress Personal email address (optional)
     * @param personalWebsite The website of this person (optional)
     * @param phone Phone without formatting (optional)
     * @param phoneExtension Phone extension without formatting (optional)
     * @param secondaryEmailAddress Alternate email address (optional)
     * @param state State (optional)
     * @param tags All tags applied to this person (optional)
     * @param title Job title (optional)
     * @param twitterHandle The twitter handle of this person (optional)
     * @param workCity Work location - city (optional)
     * @param workCountry Work location - country (optional)
     * @param workState Work location - state (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2PeopleJsonPostAsync(Integer accountId, Boolean autotagDate, String city, List<String> contactRestrictions, String country, String crmId, String crmIdType, Object customFields, Boolean doNotContact, String emailAddress, String firstName, String homePhone, Integer importId, String jobSeniority, String lastName, String linkedinUrl, String locale, String mobilePhone, Integer ownerId, String personCompanyIndustry, String personCompanyName, String personCompanyWebsite, Integer personStageId, String personalEmailAddress, String personalWebsite, String phone, String phoneExtension, String secondaryEmailAddress, String state, List<String> tags, String title, String twitterHandle, String workCity, String workCountry, String workState, final ApiCallback<Person> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2PeopleJsonPostValidateBeforeCall(accountId, autotagDate, city, contactRestrictions, country, crmId, crmIdType, customFields, doNotContact, emailAddress, firstName, homePhone, importId, jobSeniority, lastName, linkedinUrl, locale, mobilePhone, ownerId, personCompanyIndustry, personCompanyName, personCompanyWebsite, personStageId, personalEmailAddress, personalWebsite, phone, phoneExtension, secondaryEmailAddress, state, tags, title, twitterHandle, workCity, workCountry, workState, _callback);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
