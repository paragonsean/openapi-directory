/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EmbeddedAttendeeResource;
import org.openapitools.client.model.EmbeddedResource;
import org.openapitools.client.model.EventMeetingSetting;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Meeting
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:54.467506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Meeting {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ALL_DAY = "all_day";
  @SerializedName(SERIALIZED_NAME_ALL_DAY)
  private Boolean allDay;

  public static final String SERIALIZED_NAME_ATTENDEES = "attendees";
  @SerializedName(SERIALIZED_NAME_ATTENDEES)
  private List<EmbeddedAttendeeResource> attendees = new ArrayList<>();

  public static final String SERIALIZED_NAME_BOOKED_BY_MEETINGS_SETTINGS = "booked_by_meetings_settings";
  @SerializedName(SERIALIZED_NAME_BOOKED_BY_MEETINGS_SETTINGS)
  private EventMeetingSetting bookedByMeetingsSettings;

  public static final String SERIALIZED_NAME_BOOKED_BY_USER = "booked_by_user";
  @SerializedName(SERIALIZED_NAME_BOOKED_BY_USER)
  private EmbeddedResource bookedByUser;

  public static final String SERIALIZED_NAME_CADENCE = "cadence";
  @SerializedName(SERIALIZED_NAME_CADENCE)
  private EmbeddedResource cadence;

  public static final String SERIALIZED_NAME_CALENDAR_ID = "calendar_id";
  @SerializedName(SERIALIZED_NAME_CALENDAR_ID)
  private String calendarId;

  public static final String SERIALIZED_NAME_CALENDAR_TYPE = "calendar_type";
  @SerializedName(SERIALIZED_NAME_CALENDAR_TYPE)
  private String calendarType;

  public static final String SERIALIZED_NAME_CANCELED_AT = "canceled_at";
  @SerializedName(SERIALIZED_NAME_CANCELED_AT)
  private LocalDate canceledAt;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private LocalDate createdAt;

  public static final String SERIALIZED_NAME_CRM_CUSTOM_FIELDS = "crm_custom_fields";
  @SerializedName(SERIALIZED_NAME_CRM_CUSTOM_FIELDS)
  private Object crmCustomFields;

  public static final String SERIALIZED_NAME_CRM_REFERENCES = "crm_references";
  @SerializedName(SERIALIZED_NAME_CRM_REFERENCES)
  private Object crmReferences;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_END_TIME = "end_time";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private LocalDate endTime;

  public static final String SERIALIZED_NAME_EVENT_ID = "event_id";
  @SerializedName(SERIALIZED_NAME_EVENT_ID)
  private String eventId;

  public static final String SERIALIZED_NAME_EVENT_SOURCE = "event_source";
  @SerializedName(SERIALIZED_NAME_EVENT_SOURCE)
  private String eventSource;

  public static final String SERIALIZED_NAME_GUESTS = "guests";
  @SerializedName(SERIALIZED_NAME_GUESTS)
  private List<String> guests = new ArrayList<>();

  public static final String SERIALIZED_NAME_I_CAL_UID = "i_cal_uid";
  @SerializedName(SERIALIZED_NAME_I_CAL_UID)
  private String iCalUid;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_MEETING_TYPE = "meeting_type";
  @SerializedName(SERIALIZED_NAME_MEETING_TYPE)
  private String meetingType;

  public static final String SERIALIZED_NAME_NO_SHOW = "no_show";
  @SerializedName(SERIALIZED_NAME_NO_SHOW)
  private Boolean noShow;

  public static final String SERIALIZED_NAME_OWNED_BY_MEETINGS_SETTINGS = "owned_by_meetings_settings";
  @SerializedName(SERIALIZED_NAME_OWNED_BY_MEETINGS_SETTINGS)
  private EventMeetingSetting ownedByMeetingsSettings;

  public static final String SERIALIZED_NAME_PERSON = "person";
  @SerializedName(SERIALIZED_NAME_PERSON)
  private EmbeddedResource person;

  public static final String SERIALIZED_NAME_RECIPIENT_EMAIL = "recipient_email";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_EMAIL)
  private String recipientEmail;

  public static final String SERIALIZED_NAME_RECIPIENT_NAME = "recipient_name";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_NAME)
  private String recipientName;

  public static final String SERIALIZED_NAME_RESCHEDULE_STATUS = "reschedule_status";
  @SerializedName(SERIALIZED_NAME_RESCHEDULE_STATUS)
  private String rescheduleStatus;

  public static final String SERIALIZED_NAME_START_TIME = "start_time";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private LocalDate startTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_STEP = "step";
  @SerializedName(SERIALIZED_NAME_STEP)
  private EmbeddedResource step;

  public static final String SERIALIZED_NAME_STRICT_ATTRIBUTION = "strict_attribution";
  @SerializedName(SERIALIZED_NAME_STRICT_ATTRIBUTION)
  private Boolean strictAttribution;

  public static final String SERIALIZED_NAME_TASK_ID = "task_id";
  @SerializedName(SERIALIZED_NAME_TASK_ID)
  private String taskId;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private LocalDate updatedAt;

  public Meeting() {
  }

  public Meeting accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * ID of the account the recipient associated to
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public Meeting allDay(Boolean allDay) {
    this.allDay = allDay;
    return this;
  }

  /**
   * Whether the meeting is an all-day meeting
   * @return allDay
   */
  @javax.annotation.Nullable
  public Boolean getAllDay() {
    return allDay;
  }

  public void setAllDay(Boolean allDay) {
    this.allDay = allDay;
  }


  public Meeting attendees(List<EmbeddedAttendeeResource> attendees) {
    this.attendees = attendees;
    return this;
  }

  public Meeting addAttendeesItem(EmbeddedAttendeeResource attendeesItem) {
    if (this.attendees == null) {
      this.attendees = new ArrayList<>();
    }
    this.attendees.add(attendeesItem);
    return this;
  }

  /**
   * The attendees of the meeting. Each attendee includes the following fields: status, email, name, organizer
   * @return attendees
   */
  @javax.annotation.Nullable
  public List<EmbeddedAttendeeResource> getAttendees() {
    return attendees;
  }

  public void setAttendees(List<EmbeddedAttendeeResource> attendees) {
    this.attendees = attendees;
  }


  public Meeting bookedByMeetingsSettings(EventMeetingSetting bookedByMeetingsSettings) {
    this.bookedByMeetingsSettings = bookedByMeetingsSettings;
    return this;
  }

  /**
   * Get bookedByMeetingsSettings
   * @return bookedByMeetingsSettings
   */
  @javax.annotation.Nullable
  public EventMeetingSetting getBookedByMeetingsSettings() {
    return bookedByMeetingsSettings;
  }

  public void setBookedByMeetingsSettings(EventMeetingSetting bookedByMeetingsSettings) {
    this.bookedByMeetingsSettings = bookedByMeetingsSettings;
  }


  public Meeting bookedByUser(EmbeddedResource bookedByUser) {
    this.bookedByUser = bookedByUser;
    return this;
  }

  /**
   * Get bookedByUser
   * @return bookedByUser
   */
  @javax.annotation.Nullable
  public EmbeddedResource getBookedByUser() {
    return bookedByUser;
  }

  public void setBookedByUser(EmbeddedResource bookedByUser) {
    this.bookedByUser = bookedByUser;
  }


  public Meeting cadence(EmbeddedResource cadence) {
    this.cadence = cadence;
    return this;
  }

  /**
   * Get cadence
   * @return cadence
   */
  @javax.annotation.Nullable
  public EmbeddedResource getCadence() {
    return cadence;
  }

  public void setCadence(EmbeddedResource cadence) {
    this.cadence = cadence;
  }


  public Meeting calendarId(String calendarId) {
    this.calendarId = calendarId;
    return this;
  }

  /**
   * Calendar ID of the meeting owner
   * @return calendarId
   */
  @javax.annotation.Nullable
  public String getCalendarId() {
    return calendarId;
  }

  public void setCalendarId(String calendarId) {
    this.calendarId = calendarId;
  }


  public Meeting calendarType(String calendarType) {
    this.calendarType = calendarType;
    return this;
  }

  /**
   * Calendar type of the meeting owner. Possible values are: gmail, azure, nylas, linkedin_azure, cerebro, external
   * @return calendarType
   */
  @javax.annotation.Nullable
  public String getCalendarType() {
    return calendarType;
  }

  public void setCalendarType(String calendarType) {
    this.calendarType = calendarType;
  }


  public Meeting canceledAt(LocalDate canceledAt) {
    this.canceledAt = canceledAt;
    return this;
  }

  /**
   * Datetime of when the meeting was canceled
   * @return canceledAt
   */
  @javax.annotation.Nullable
  public LocalDate getCanceledAt() {
    return canceledAt;
  }

  public void setCanceledAt(LocalDate canceledAt) {
    this.canceledAt = canceledAt;
  }


  public Meeting createdAt(LocalDate createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Datetime of when the meeting was created
   * @return createdAt
   */
  @javax.annotation.Nullable
  public LocalDate getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(LocalDate createdAt) {
    this.createdAt = createdAt;
  }


  public Meeting crmCustomFields(Object crmCustomFields) {
    this.crmCustomFields = crmCustomFields;
    return this;
  }

  /**
   * List of crm custom fields which will be logged to SFDC
   * @return crmCustomFields
   */
  @javax.annotation.Nullable
  public Object getCrmCustomFields() {
    return crmCustomFields;
  }

  public void setCrmCustomFields(Object crmCustomFields) {
    this.crmCustomFields = crmCustomFields;
  }


  public Meeting crmReferences(Object crmReferences) {
    this.crmReferences = crmReferences;
    return this;
  }

  /**
   * List of crm references associated with the meeting
   * @return crmReferences
   */
  @javax.annotation.Nullable
  public Object getCrmReferences() {
    return crmReferences;
  }

  public void setCrmReferences(Object crmReferences) {
    this.crmReferences = crmReferences;
  }


  public Meeting description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the meeting
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Meeting endTime(LocalDate endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * End time of the meeting
   * @return endTime
   */
  @javax.annotation.Nullable
  public LocalDate getEndTime() {
    return endTime;
  }

  public void setEndTime(LocalDate endTime) {
    this.endTime = endTime;
  }


  public Meeting eventId(String eventId) {
    this.eventId = eventId;
    return this;
  }

  /**
   * ID of the meeting created by target calendar
   * @return eventId
   */
  @javax.annotation.Nullable
  public String getEventId() {
    return eventId;
  }

  public void setEventId(String eventId) {
    this.eventId = eventId;
  }


  public Meeting eventSource(String eventSource) {
    this.eventSource = eventSource;
    return this;
  }

  /**
   * Source of the meeting. Possible values are: &#39;external&#39; - The event was synced to Salesloft platform via Calendar Sync, &#39;internal&#39; - The event was created via Salesloft platform
   * @return eventSource
   */
  @javax.annotation.Nullable
  public String getEventSource() {
    return eventSource;
  }

  public void setEventSource(String eventSource) {
    this.eventSource = eventSource;
  }


  public Meeting guests(List<String> guests) {
    this.guests = guests;
    return this;
  }

  public Meeting addGuestsItem(String guestsItem) {
    if (this.guests == null) {
      this.guests = new ArrayList<>();
    }
    this.guests.add(guestsItem);
    return this;
  }

  /**
   * The list of attendees emails of the meeting
   * @return guests
   */
  @javax.annotation.Nullable
  public List<String> getGuests() {
    return guests;
  }

  public void setGuests(List<String> guests) {
    this.guests = guests;
  }


  public Meeting iCalUid(String iCalUid) {
    this.iCalUid = iCalUid;
    return this;
  }

  /**
   * UID of the meeting provided by target calendar provider
   * @return iCalUid
   */
  @javax.annotation.Nullable
  public String getiCalUid() {
    return iCalUid;
  }

  public void setiCalUid(String iCalUid) {
    this.iCalUid = iCalUid;
  }


  public Meeting id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * ID of the meeting
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Meeting location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Location of the meeting
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public Meeting meetingType(String meetingType) {
    this.meetingType = meetingType;
    return this;
  }

  /**
   * Meeting type
   * @return meetingType
   */
  @javax.annotation.Nullable
  public String getMeetingType() {
    return meetingType;
  }

  public void setMeetingType(String meetingType) {
    this.meetingType = meetingType;
  }


  public Meeting noShow(Boolean noShow) {
    this.noShow = noShow;
    return this;
  }

  /**
   * Whether the meeting is a No Show meeting
   * @return noShow
   */
  @javax.annotation.Nullable
  public Boolean getNoShow() {
    return noShow;
  }

  public void setNoShow(Boolean noShow) {
    this.noShow = noShow;
  }


  public Meeting ownedByMeetingsSettings(EventMeetingSetting ownedByMeetingsSettings) {
    this.ownedByMeetingsSettings = ownedByMeetingsSettings;
    return this;
  }

  /**
   * Get ownedByMeetingsSettings
   * @return ownedByMeetingsSettings
   */
  @javax.annotation.Nullable
  public EventMeetingSetting getOwnedByMeetingsSettings() {
    return ownedByMeetingsSettings;
  }

  public void setOwnedByMeetingsSettings(EventMeetingSetting ownedByMeetingsSettings) {
    this.ownedByMeetingsSettings = ownedByMeetingsSettings;
  }


  public Meeting person(EmbeddedResource person) {
    this.person = person;
    return this;
  }

  /**
   * Get person
   * @return person
   */
  @javax.annotation.Nullable
  public EmbeddedResource getPerson() {
    return person;
  }

  public void setPerson(EmbeddedResource person) {
    this.person = person;
  }


  public Meeting recipientEmail(String recipientEmail) {
    this.recipientEmail = recipientEmail;
    return this;
  }

  /**
   * Email of the meeting invite recipient
   * @return recipientEmail
   */
  @javax.annotation.Nullable
  public String getRecipientEmail() {
    return recipientEmail;
  }

  public void setRecipientEmail(String recipientEmail) {
    this.recipientEmail = recipientEmail;
  }


  public Meeting recipientName(String recipientName) {
    this.recipientName = recipientName;
    return this;
  }

  /**
   * Name of the meeting invite recipient
   * @return recipientName
   */
  @javax.annotation.Nullable
  public String getRecipientName() {
    return recipientName;
  }

  public void setRecipientName(String recipientName) {
    this.recipientName = recipientName;
  }


  public Meeting rescheduleStatus(String rescheduleStatus) {
    this.rescheduleStatus = rescheduleStatus;
    return this;
  }

  /**
   * Status of the meeting rescheduling progress. Possible values are: pending, booked, failed, retry
   * @return rescheduleStatus
   */
  @javax.annotation.Nullable
  public String getRescheduleStatus() {
    return rescheduleStatus;
  }

  public void setRescheduleStatus(String rescheduleStatus) {
    this.rescheduleStatus = rescheduleStatus;
  }


  public Meeting startTime(LocalDate startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Start time of the meeting
   * @return startTime
   */
  @javax.annotation.Nullable
  public LocalDate getStartTime() {
    return startTime;
  }

  public void setStartTime(LocalDate startTime) {
    this.startTime = startTime;
  }


  public Meeting status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Status of the meeting. Possible values are: pending, booked, failed, retry
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Meeting step(EmbeddedResource step) {
    this.step = step;
    return this;
  }

  /**
   * Get step
   * @return step
   */
  @javax.annotation.Nullable
  public EmbeddedResource getStep() {
    return step;
  }

  public void setStep(EmbeddedResource step) {
    this.step = step;
  }


  public Meeting strictAttribution(Boolean strictAttribution) {
    this.strictAttribution = strictAttribution;
    return this;
  }

  /**
   * Strict attribution means that we 100% sure which cadence generate the meeting
   * @return strictAttribution
   */
  @javax.annotation.Nullable
  public Boolean getStrictAttribution() {
    return strictAttribution;
  }

  public void setStrictAttribution(Boolean strictAttribution) {
    this.strictAttribution = strictAttribution;
  }


  public Meeting taskId(String taskId) {
    this.taskId = taskId;
    return this;
  }

  /**
   * ID of the created task
   * @return taskId
   */
  @javax.annotation.Nullable
  public String getTaskId() {
    return taskId;
  }

  public void setTaskId(String taskId) {
    this.taskId = taskId;
  }


  public Meeting title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of the meeting
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Meeting updatedAt(LocalDate updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Datetime of when the meeting was last updated
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public LocalDate getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(LocalDate updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Meeting meeting = (Meeting) o;
    return Objects.equals(this.accountId, meeting.accountId) &&
        Objects.equals(this.allDay, meeting.allDay) &&
        Objects.equals(this.attendees, meeting.attendees) &&
        Objects.equals(this.bookedByMeetingsSettings, meeting.bookedByMeetingsSettings) &&
        Objects.equals(this.bookedByUser, meeting.bookedByUser) &&
        Objects.equals(this.cadence, meeting.cadence) &&
        Objects.equals(this.calendarId, meeting.calendarId) &&
        Objects.equals(this.calendarType, meeting.calendarType) &&
        Objects.equals(this.canceledAt, meeting.canceledAt) &&
        Objects.equals(this.createdAt, meeting.createdAt) &&
        Objects.equals(this.crmCustomFields, meeting.crmCustomFields) &&
        Objects.equals(this.crmReferences, meeting.crmReferences) &&
        Objects.equals(this.description, meeting.description) &&
        Objects.equals(this.endTime, meeting.endTime) &&
        Objects.equals(this.eventId, meeting.eventId) &&
        Objects.equals(this.eventSource, meeting.eventSource) &&
        Objects.equals(this.guests, meeting.guests) &&
        Objects.equals(this.iCalUid, meeting.iCalUid) &&
        Objects.equals(this.id, meeting.id) &&
        Objects.equals(this.location, meeting.location) &&
        Objects.equals(this.meetingType, meeting.meetingType) &&
        Objects.equals(this.noShow, meeting.noShow) &&
        Objects.equals(this.ownedByMeetingsSettings, meeting.ownedByMeetingsSettings) &&
        Objects.equals(this.person, meeting.person) &&
        Objects.equals(this.recipientEmail, meeting.recipientEmail) &&
        Objects.equals(this.recipientName, meeting.recipientName) &&
        Objects.equals(this.rescheduleStatus, meeting.rescheduleStatus) &&
        Objects.equals(this.startTime, meeting.startTime) &&
        Objects.equals(this.status, meeting.status) &&
        Objects.equals(this.step, meeting.step) &&
        Objects.equals(this.strictAttribution, meeting.strictAttribution) &&
        Objects.equals(this.taskId, meeting.taskId) &&
        Objects.equals(this.title, meeting.title) &&
        Objects.equals(this.updatedAt, meeting.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, allDay, attendees, bookedByMeetingsSettings, bookedByUser, cadence, calendarId, calendarType, canceledAt, createdAt, crmCustomFields, crmReferences, description, endTime, eventId, eventSource, guests, iCalUid, id, location, meetingType, noShow, ownedByMeetingsSettings, person, recipientEmail, recipientName, rescheduleStatus, startTime, status, step, strictAttribution, taskId, title, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Meeting {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    allDay: ").append(toIndentedString(allDay)).append("\n");
    sb.append("    attendees: ").append(toIndentedString(attendees)).append("\n");
    sb.append("    bookedByMeetingsSettings: ").append(toIndentedString(bookedByMeetingsSettings)).append("\n");
    sb.append("    bookedByUser: ").append(toIndentedString(bookedByUser)).append("\n");
    sb.append("    cadence: ").append(toIndentedString(cadence)).append("\n");
    sb.append("    calendarId: ").append(toIndentedString(calendarId)).append("\n");
    sb.append("    calendarType: ").append(toIndentedString(calendarType)).append("\n");
    sb.append("    canceledAt: ").append(toIndentedString(canceledAt)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    crmCustomFields: ").append(toIndentedString(crmCustomFields)).append("\n");
    sb.append("    crmReferences: ").append(toIndentedString(crmReferences)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    eventSource: ").append(toIndentedString(eventSource)).append("\n");
    sb.append("    guests: ").append(toIndentedString(guests)).append("\n");
    sb.append("    iCalUid: ").append(toIndentedString(iCalUid)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    meetingType: ").append(toIndentedString(meetingType)).append("\n");
    sb.append("    noShow: ").append(toIndentedString(noShow)).append("\n");
    sb.append("    ownedByMeetingsSettings: ").append(toIndentedString(ownedByMeetingsSettings)).append("\n");
    sb.append("    person: ").append(toIndentedString(person)).append("\n");
    sb.append("    recipientEmail: ").append(toIndentedString(recipientEmail)).append("\n");
    sb.append("    recipientName: ").append(toIndentedString(recipientName)).append("\n");
    sb.append("    rescheduleStatus: ").append(toIndentedString(rescheduleStatus)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    step: ").append(toIndentedString(step)).append("\n");
    sb.append("    strictAttribution: ").append(toIndentedString(strictAttribution)).append("\n");
    sb.append("    taskId: ").append(toIndentedString(taskId)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_id");
    openapiFields.add("all_day");
    openapiFields.add("attendees");
    openapiFields.add("booked_by_meetings_settings");
    openapiFields.add("booked_by_user");
    openapiFields.add("cadence");
    openapiFields.add("calendar_id");
    openapiFields.add("calendar_type");
    openapiFields.add("canceled_at");
    openapiFields.add("created_at");
    openapiFields.add("crm_custom_fields");
    openapiFields.add("crm_references");
    openapiFields.add("description");
    openapiFields.add("end_time");
    openapiFields.add("event_id");
    openapiFields.add("event_source");
    openapiFields.add("guests");
    openapiFields.add("i_cal_uid");
    openapiFields.add("id");
    openapiFields.add("location");
    openapiFields.add("meeting_type");
    openapiFields.add("no_show");
    openapiFields.add("owned_by_meetings_settings");
    openapiFields.add("person");
    openapiFields.add("recipient_email");
    openapiFields.add("recipient_name");
    openapiFields.add("reschedule_status");
    openapiFields.add("start_time");
    openapiFields.add("status");
    openapiFields.add("step");
    openapiFields.add("strict_attribution");
    openapiFields.add("task_id");
    openapiFields.add("title");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Meeting
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Meeting.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Meeting is not found in the empty JSON string", Meeting.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Meeting.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Meeting` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_id") != null && !jsonObj.get("account_id").isJsonNull()) && !jsonObj.get("account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_id").toString()));
      }
      if (jsonObj.get("attendees") != null && !jsonObj.get("attendees").isJsonNull()) {
        JsonArray jsonArrayattendees = jsonObj.getAsJsonArray("attendees");
        if (jsonArrayattendees != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attendees").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attendees` to be an array in the JSON string but got `%s`", jsonObj.get("attendees").toString()));
          }

          // validate the optional field `attendees` (array)
          for (int i = 0; i < jsonArrayattendees.size(); i++) {
            EmbeddedAttendeeResource.validateJsonElement(jsonArrayattendees.get(i));
          };
        }
      }
      // validate the optional field `booked_by_meetings_settings`
      if (jsonObj.get("booked_by_meetings_settings") != null && !jsonObj.get("booked_by_meetings_settings").isJsonNull()) {
        EventMeetingSetting.validateJsonElement(jsonObj.get("booked_by_meetings_settings"));
      }
      // validate the optional field `booked_by_user`
      if (jsonObj.get("booked_by_user") != null && !jsonObj.get("booked_by_user").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("booked_by_user"));
      }
      // validate the optional field `cadence`
      if (jsonObj.get("cadence") != null && !jsonObj.get("cadence").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("cadence"));
      }
      if ((jsonObj.get("calendar_id") != null && !jsonObj.get("calendar_id").isJsonNull()) && !jsonObj.get("calendar_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `calendar_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("calendar_id").toString()));
      }
      if ((jsonObj.get("calendar_type") != null && !jsonObj.get("calendar_type").isJsonNull()) && !jsonObj.get("calendar_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `calendar_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("calendar_type").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("event_id") != null && !jsonObj.get("event_id").isJsonNull()) && !jsonObj.get("event_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_id").toString()));
      }
      if ((jsonObj.get("event_source") != null && !jsonObj.get("event_source").isJsonNull()) && !jsonObj.get("event_source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_source").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("guests") != null && !jsonObj.get("guests").isJsonNull() && !jsonObj.get("guests").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `guests` to be an array in the JSON string but got `%s`", jsonObj.get("guests").toString()));
      }
      if ((jsonObj.get("i_cal_uid") != null && !jsonObj.get("i_cal_uid").isJsonNull()) && !jsonObj.get("i_cal_uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `i_cal_uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("i_cal_uid").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("meeting_type") != null && !jsonObj.get("meeting_type").isJsonNull()) && !jsonObj.get("meeting_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meeting_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meeting_type").toString()));
      }
      // validate the optional field `owned_by_meetings_settings`
      if (jsonObj.get("owned_by_meetings_settings") != null && !jsonObj.get("owned_by_meetings_settings").isJsonNull()) {
        EventMeetingSetting.validateJsonElement(jsonObj.get("owned_by_meetings_settings"));
      }
      // validate the optional field `person`
      if (jsonObj.get("person") != null && !jsonObj.get("person").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("person"));
      }
      if ((jsonObj.get("recipient_email") != null && !jsonObj.get("recipient_email").isJsonNull()) && !jsonObj.get("recipient_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_email").toString()));
      }
      if ((jsonObj.get("recipient_name") != null && !jsonObj.get("recipient_name").isJsonNull()) && !jsonObj.get("recipient_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_name").toString()));
      }
      if ((jsonObj.get("reschedule_status") != null && !jsonObj.get("reschedule_status").isJsonNull()) && !jsonObj.get("reschedule_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reschedule_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reschedule_status").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `step`
      if (jsonObj.get("step") != null && !jsonObj.get("step").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("step"));
      }
      if ((jsonObj.get("task_id") != null && !jsonObj.get("task_id").isJsonNull()) && !jsonObj.get("task_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `task_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("task_id").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Meeting.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Meeting' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Meeting> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Meeting.class));

       return (TypeAdapter<T>) new TypeAdapter<Meeting>() {
           @Override
           public void write(JsonWriter out, Meeting value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Meeting read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Meeting given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Meeting
   * @throws IOException if the JSON string is invalid with respect to Meeting
   */
  public static Meeting fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Meeting.class);
  }

  /**
   * Convert an instance of Meeting to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

