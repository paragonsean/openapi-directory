/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.client.model.EmbeddedResource;
import org.openapitools.client.model.MeetingUrl;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MeetingSetting
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:54.467506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MeetingSetting {
  public static final String SERIALIZED_NAME_ACTIVE_MEETING_URL = "active_meeting_url";
  @SerializedName(SERIALIZED_NAME_ACTIVE_MEETING_URL)
  private MeetingUrl activeMeetingUrl;

  public static final String SERIALIZED_NAME_ALLOW_BOOKING_ON_BEHALF = "allow_booking_on_behalf";
  @SerializedName(SERIALIZED_NAME_ALLOW_BOOKING_ON_BEHALF)
  private Boolean allowBookingOnBehalf;

  public static final String SERIALIZED_NAME_ALLOW_BOOKING_OVERTIME = "allow_booking_overtime";
  @SerializedName(SERIALIZED_NAME_ALLOW_BOOKING_OVERTIME)
  private Boolean allowBookingOvertime;

  public static final String SERIALIZED_NAME_ALLOW_EVENT_OVERLAP = "allow_event_overlap";
  @SerializedName(SERIALIZED_NAME_ALLOW_EVENT_OVERLAP)
  private Boolean allowEventOverlap;

  public static final String SERIALIZED_NAME_AVAILABILITY_LIMIT = "availability_limit";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_LIMIT)
  private Integer availabilityLimit;

  public static final String SERIALIZED_NAME_AVAILABILITY_LIMIT_ENABLED = "availability_limit_enabled";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_LIMIT_ENABLED)
  private Boolean availabilityLimitEnabled;

  public static final String SERIALIZED_NAME_BUFFER_TIME_DURATION = "buffer_time_duration";
  @SerializedName(SERIALIZED_NAME_BUFFER_TIME_DURATION)
  private Integer bufferTimeDuration;

  public static final String SERIALIZED_NAME_CALENDAR_TYPE = "calendar_type";
  @SerializedName(SERIALIZED_NAME_CALENDAR_TYPE)
  private String calendarType;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private LocalDate createdAt;

  public static final String SERIALIZED_NAME_DEFAULT_MEETING_LENGTH = "default_meeting_length";
  @SerializedName(SERIALIZED_NAME_DEFAULT_MEETING_LENGTH)
  private Integer defaultMeetingLength;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EMAIL_ADDRESS = "email_address";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS)
  private String emailAddress;

  public static final String SERIALIZED_NAME_ENABLE_CALENDAR_SYNC = "enable_calendar_sync";
  @SerializedName(SERIALIZED_NAME_ENABLE_CALENDAR_SYNC)
  private Boolean enableCalendarSync;

  public static final String SERIALIZED_NAME_ENABLE_DYNAMIC_LOCATION = "enable_dynamic_location";
  @SerializedName(SERIALIZED_NAME_ENABLE_DYNAMIC_LOCATION)
  private Boolean enableDynamicLocation;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_PRIMARY_CALENDAR_CONNECTION_FAILED = "primary_calendar_connection_failed";
  @SerializedName(SERIALIZED_NAME_PRIMARY_CALENDAR_CONNECTION_FAILED)
  private Boolean primaryCalendarConnectionFailed;

  public static final String SERIALIZED_NAME_PRIMARY_CALENDAR_ID = "primary_calendar_id";
  @SerializedName(SERIALIZED_NAME_PRIMARY_CALENDAR_ID)
  private String primaryCalendarId;

  public static final String SERIALIZED_NAME_PRIMARY_CALENDAR_NAME = "primary_calendar_name";
  @SerializedName(SERIALIZED_NAME_PRIMARY_CALENDAR_NAME)
  private String primaryCalendarName;

  public static final String SERIALIZED_NAME_RESCHEDULE_MEETINGS_ENABLED = "reschedule_meetings_enabled";
  @SerializedName(SERIALIZED_NAME_RESCHEDULE_MEETINGS_ENABLED)
  private Boolean rescheduleMeetingsEnabled;

  public static final String SERIALIZED_NAME_SCHEDULE_BUFFER_ENABLED = "schedule_buffer_enabled";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_BUFFER_ENABLED)
  private Boolean scheduleBufferEnabled;

  public static final String SERIALIZED_NAME_SCHEDULE_DELAY = "schedule_delay";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_DELAY)
  private Integer scheduleDelay;

  public static final String SERIALIZED_NAME_SHARE_EVENT_DETAIL = "share_event_detail";
  @SerializedName(SERIALIZED_NAME_SHARE_EVENT_DETAIL)
  private Boolean shareEventDetail;

  public static final String SERIALIZED_NAME_TIME_ZONE = "time_zone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public static final String SERIALIZED_NAME_TIMES_AVAILABLE = "times_available";
  @SerializedName(SERIALIZED_NAME_TIMES_AVAILABLE)
  private Object timesAvailable;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private LocalDate updatedAt;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private EmbeddedResource user;

  public static final String SERIALIZED_NAME_USER_DETAILS = "user_details";
  @SerializedName(SERIALIZED_NAME_USER_DETAILS)
  private Object userDetails;

  public static final String SERIALIZED_NAME_USER_SLUG = "user_slug";
  @SerializedName(SERIALIZED_NAME_USER_SLUG)
  private String userSlug;

  public MeetingSetting() {
  }

  public MeetingSetting activeMeetingUrl(MeetingUrl activeMeetingUrl) {
    this.activeMeetingUrl = activeMeetingUrl;
    return this;
  }

  /**
   * Get activeMeetingUrl
   * @return activeMeetingUrl
   */
  @javax.annotation.Nullable
  public MeetingUrl getActiveMeetingUrl() {
    return activeMeetingUrl;
  }

  public void setActiveMeetingUrl(MeetingUrl activeMeetingUrl) {
    this.activeMeetingUrl = activeMeetingUrl;
  }


  public MeetingSetting allowBookingOnBehalf(Boolean allowBookingOnBehalf) {
    this.allowBookingOnBehalf = allowBookingOnBehalf;
    return this;
  }

  /**
   * Allow other team members to schedule on you behalf.
   * @return allowBookingOnBehalf
   */
  @javax.annotation.Nullable
  public Boolean getAllowBookingOnBehalf() {
    return allowBookingOnBehalf;
  }

  public void setAllowBookingOnBehalf(Boolean allowBookingOnBehalf) {
    this.allowBookingOnBehalf = allowBookingOnBehalf;
  }


  public MeetingSetting allowBookingOvertime(Boolean allowBookingOvertime) {
    this.allowBookingOvertime = allowBookingOvertime;
    return this;
  }

  /**
   * Allow team members to insert available time outside your working hours.
   * @return allowBookingOvertime
   */
  @javax.annotation.Nullable
  public Boolean getAllowBookingOvertime() {
    return allowBookingOvertime;
  }

  public void setAllowBookingOvertime(Boolean allowBookingOvertime) {
    this.allowBookingOvertime = allowBookingOvertime;
  }


  public MeetingSetting allowEventOverlap(Boolean allowEventOverlap) {
    this.allowEventOverlap = allowEventOverlap;
    return this;
  }

  /**
   * Allow team members to double book events on your calendar.
   * @return allowEventOverlap
   */
  @javax.annotation.Nullable
  public Boolean getAllowEventOverlap() {
    return allowEventOverlap;
  }

  public void setAllowEventOverlap(Boolean allowEventOverlap) {
    this.allowEventOverlap = allowEventOverlap;
  }


  public MeetingSetting availabilityLimit(Integer availabilityLimit) {
    this.availabilityLimit = availabilityLimit;
    return this;
  }

  /**
   * The number of days out the user allows a prospect to schedule a meeting
   * @return availabilityLimit
   */
  @javax.annotation.Nullable
  public Integer getAvailabilityLimit() {
    return availabilityLimit;
  }

  public void setAvailabilityLimit(Integer availabilityLimit) {
    this.availabilityLimit = availabilityLimit;
  }


  public MeetingSetting availabilityLimitEnabled(Boolean availabilityLimitEnabled) {
    this.availabilityLimitEnabled = availabilityLimitEnabled;
    return this;
  }

  /**
   * If Availability Limits have been turned on
   * @return availabilityLimitEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAvailabilityLimitEnabled() {
    return availabilityLimitEnabled;
  }

  public void setAvailabilityLimitEnabled(Boolean availabilityLimitEnabled) {
    this.availabilityLimitEnabled = availabilityLimitEnabled;
  }


  public MeetingSetting bufferTimeDuration(Integer bufferTimeDuration) {
    this.bufferTimeDuration = bufferTimeDuration;
    return this;
  }

  /**
   * Default buffer duration in minutes set by a user
   * @return bufferTimeDuration
   */
  @javax.annotation.Nullable
  public Integer getBufferTimeDuration() {
    return bufferTimeDuration;
  }

  public void setBufferTimeDuration(Integer bufferTimeDuration) {
    this.bufferTimeDuration = bufferTimeDuration;
  }


  public MeetingSetting calendarType(String calendarType) {
    this.calendarType = calendarType;
    return this;
  }

  /**
   * Calendar type
   * @return calendarType
   */
  @javax.annotation.Nullable
  public String getCalendarType() {
    return calendarType;
  }

  public void setCalendarType(String calendarType) {
    this.calendarType = calendarType;
  }


  public MeetingSetting createdAt(LocalDate createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Datetime of when the MeetingSetting was created
   * @return createdAt
   */
  @javax.annotation.Nullable
  public LocalDate getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(LocalDate createdAt) {
    this.createdAt = createdAt;
  }


  public MeetingSetting defaultMeetingLength(Integer defaultMeetingLength) {
    this.defaultMeetingLength = defaultMeetingLength;
    return this;
  }

  /**
   * Default meeting length in minutes set by the user
   * @return defaultMeetingLength
   */
  @javax.annotation.Nullable
  public Integer getDefaultMeetingLength() {
    return defaultMeetingLength;
  }

  public void setDefaultMeetingLength(Integer defaultMeetingLength) {
    this.defaultMeetingLength = defaultMeetingLength;
  }


  public MeetingSetting description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Default description of the meeting
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public MeetingSetting emailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
    return this;
  }

  /**
   * Calendar owner&#39;s email address
   * @return emailAddress
   */
  @javax.annotation.Nullable
  public String getEmailAddress() {
    return emailAddress;
  }

  public void setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
  }


  public MeetingSetting enableCalendarSync(Boolean enableCalendarSync) {
    this.enableCalendarSync = enableCalendarSync;
    return this;
  }

  /**
   * Determines if a user enabled Calendar Sync feature
   * @return enableCalendarSync
   */
  @javax.annotation.Nullable
  public Boolean getEnableCalendarSync() {
    return enableCalendarSync;
  }

  public void setEnableCalendarSync(Boolean enableCalendarSync) {
    this.enableCalendarSync = enableCalendarSync;
  }


  public MeetingSetting enableDynamicLocation(Boolean enableDynamicLocation) {
    this.enableDynamicLocation = enableDynamicLocation;
    return this;
  }

  /**
   * Determines if location will be filled via third-party service (Zoom, GoToMeeting, etc.)
   * @return enableDynamicLocation
   */
  @javax.annotation.Nullable
  public Boolean getEnableDynamicLocation() {
    return enableDynamicLocation;
  }

  public void setEnableDynamicLocation(Boolean enableDynamicLocation) {
    this.enableDynamicLocation = enableDynamicLocation;
  }


  public MeetingSetting id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * ID of the MeetingSetting
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public MeetingSetting location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Default location of the meeting
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public MeetingSetting primaryCalendarConnectionFailed(Boolean primaryCalendarConnectionFailed) {
    this.primaryCalendarConnectionFailed = primaryCalendarConnectionFailed;
    return this;
  }

  /**
   * Gets true when any issue with fetching calendar occurs
   * @return primaryCalendarConnectionFailed
   */
  @javax.annotation.Nullable
  public Boolean getPrimaryCalendarConnectionFailed() {
    return primaryCalendarConnectionFailed;
  }

  public void setPrimaryCalendarConnectionFailed(Boolean primaryCalendarConnectionFailed) {
    this.primaryCalendarConnectionFailed = primaryCalendarConnectionFailed;
  }


  public MeetingSetting primaryCalendarId(String primaryCalendarId) {
    this.primaryCalendarId = primaryCalendarId;
    return this;
  }

  /**
   * ID of the primary calendar
   * @return primaryCalendarId
   */
  @javax.annotation.Nullable
  public String getPrimaryCalendarId() {
    return primaryCalendarId;
  }

  public void setPrimaryCalendarId(String primaryCalendarId) {
    this.primaryCalendarId = primaryCalendarId;
  }


  public MeetingSetting primaryCalendarName(String primaryCalendarName) {
    this.primaryCalendarName = primaryCalendarName;
    return this;
  }

  /**
   * Display name of the primary calendar
   * @return primaryCalendarName
   */
  @javax.annotation.Nullable
  public String getPrimaryCalendarName() {
    return primaryCalendarName;
  }

  public void setPrimaryCalendarName(String primaryCalendarName) {
    this.primaryCalendarName = primaryCalendarName;
  }


  public MeetingSetting rescheduleMeetingsEnabled(Boolean rescheduleMeetingsEnabled) {
    this.rescheduleMeetingsEnabled = rescheduleMeetingsEnabled;
    return this;
  }

  /**
   * Determines if a user enabled reschedule meetings feature
   * @return rescheduleMeetingsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getRescheduleMeetingsEnabled() {
    return rescheduleMeetingsEnabled;
  }

  public void setRescheduleMeetingsEnabled(Boolean rescheduleMeetingsEnabled) {
    this.rescheduleMeetingsEnabled = rescheduleMeetingsEnabled;
  }


  public MeetingSetting scheduleBufferEnabled(Boolean scheduleBufferEnabled) {
    this.scheduleBufferEnabled = scheduleBufferEnabled;
    return this;
  }

  /**
   * Determines if meetings are scheduled with a 15 minute buffer between them
   * @return scheduleBufferEnabled
   */
  @javax.annotation.Nullable
  public Boolean getScheduleBufferEnabled() {
    return scheduleBufferEnabled;
  }

  public void setScheduleBufferEnabled(Boolean scheduleBufferEnabled) {
    this.scheduleBufferEnabled = scheduleBufferEnabled;
  }


  public MeetingSetting scheduleDelay(Integer scheduleDelay) {
    this.scheduleDelay = scheduleDelay;
    return this;
  }

  /**
   * The number of hours in advance a user requires someone to a book a meeting with them
   * @return scheduleDelay
   */
  @javax.annotation.Nullable
  public Integer getScheduleDelay() {
    return scheduleDelay;
  }

  public void setScheduleDelay(Integer scheduleDelay) {
    this.scheduleDelay = scheduleDelay;
  }


  public MeetingSetting shareEventDetail(Boolean shareEventDetail) {
    this.shareEventDetail = shareEventDetail;
    return this;
  }

  /**
   * Allow team members to see the details of events on your calendar.
   * @return shareEventDetail
   */
  @javax.annotation.Nullable
  public Boolean getShareEventDetail() {
    return shareEventDetail;
  }

  public void setShareEventDetail(Boolean shareEventDetail) {
    this.shareEventDetail = shareEventDetail;
  }


  public MeetingSetting timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * Time zone for current calendar
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  public MeetingSetting timesAvailable(Object timesAvailable) {
    this.timesAvailable = timesAvailable;
    return this;
  }

  /**
   * Times available set by a user that can be used to book meetings
   * @return timesAvailable
   */
  @javax.annotation.Nullable
  public Object getTimesAvailable() {
    return timesAvailable;
  }

  public void setTimesAvailable(Object timesAvailable) {
    this.timesAvailable = timesAvailable;
  }


  public MeetingSetting title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Default title of the meeting
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public MeetingSetting updatedAt(LocalDate updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Datetime of when the MeetingSetting was last updated
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public LocalDate getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(LocalDate updatedAt) {
    this.updatedAt = updatedAt;
  }


  public MeetingSetting user(EmbeddedResource user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public EmbeddedResource getUser() {
    return user;
  }

  public void setUser(EmbeddedResource user) {
    this.user = user;
  }


  public MeetingSetting userDetails(Object userDetails) {
    this.userDetails = userDetails;
    return this;
  }

  /**
   * User details
   * @return userDetails
   */
  @javax.annotation.Nullable
  public Object getUserDetails() {
    return userDetails;
  }

  public void setUserDetails(Object userDetails) {
    this.userDetails = userDetails;
  }


  public MeetingSetting userSlug(String userSlug) {
    this.userSlug = userSlug;
    return this;
  }

  /**
   * User slug generated with a full name of the user
   * @return userSlug
   */
  @javax.annotation.Nullable
  public String getUserSlug() {
    return userSlug;
  }

  public void setUserSlug(String userSlug) {
    this.userSlug = userSlug;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MeetingSetting meetingSetting = (MeetingSetting) o;
    return Objects.equals(this.activeMeetingUrl, meetingSetting.activeMeetingUrl) &&
        Objects.equals(this.allowBookingOnBehalf, meetingSetting.allowBookingOnBehalf) &&
        Objects.equals(this.allowBookingOvertime, meetingSetting.allowBookingOvertime) &&
        Objects.equals(this.allowEventOverlap, meetingSetting.allowEventOverlap) &&
        Objects.equals(this.availabilityLimit, meetingSetting.availabilityLimit) &&
        Objects.equals(this.availabilityLimitEnabled, meetingSetting.availabilityLimitEnabled) &&
        Objects.equals(this.bufferTimeDuration, meetingSetting.bufferTimeDuration) &&
        Objects.equals(this.calendarType, meetingSetting.calendarType) &&
        Objects.equals(this.createdAt, meetingSetting.createdAt) &&
        Objects.equals(this.defaultMeetingLength, meetingSetting.defaultMeetingLength) &&
        Objects.equals(this.description, meetingSetting.description) &&
        Objects.equals(this.emailAddress, meetingSetting.emailAddress) &&
        Objects.equals(this.enableCalendarSync, meetingSetting.enableCalendarSync) &&
        Objects.equals(this.enableDynamicLocation, meetingSetting.enableDynamicLocation) &&
        Objects.equals(this.id, meetingSetting.id) &&
        Objects.equals(this.location, meetingSetting.location) &&
        Objects.equals(this.primaryCalendarConnectionFailed, meetingSetting.primaryCalendarConnectionFailed) &&
        Objects.equals(this.primaryCalendarId, meetingSetting.primaryCalendarId) &&
        Objects.equals(this.primaryCalendarName, meetingSetting.primaryCalendarName) &&
        Objects.equals(this.rescheduleMeetingsEnabled, meetingSetting.rescheduleMeetingsEnabled) &&
        Objects.equals(this.scheduleBufferEnabled, meetingSetting.scheduleBufferEnabled) &&
        Objects.equals(this.scheduleDelay, meetingSetting.scheduleDelay) &&
        Objects.equals(this.shareEventDetail, meetingSetting.shareEventDetail) &&
        Objects.equals(this.timeZone, meetingSetting.timeZone) &&
        Objects.equals(this.timesAvailable, meetingSetting.timesAvailable) &&
        Objects.equals(this.title, meetingSetting.title) &&
        Objects.equals(this.updatedAt, meetingSetting.updatedAt) &&
        Objects.equals(this.user, meetingSetting.user) &&
        Objects.equals(this.userDetails, meetingSetting.userDetails) &&
        Objects.equals(this.userSlug, meetingSetting.userSlug);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeMeetingUrl, allowBookingOnBehalf, allowBookingOvertime, allowEventOverlap, availabilityLimit, availabilityLimitEnabled, bufferTimeDuration, calendarType, createdAt, defaultMeetingLength, description, emailAddress, enableCalendarSync, enableDynamicLocation, id, location, primaryCalendarConnectionFailed, primaryCalendarId, primaryCalendarName, rescheduleMeetingsEnabled, scheduleBufferEnabled, scheduleDelay, shareEventDetail, timeZone, timesAvailable, title, updatedAt, user, userDetails, userSlug);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MeetingSetting {\n");
    sb.append("    activeMeetingUrl: ").append(toIndentedString(activeMeetingUrl)).append("\n");
    sb.append("    allowBookingOnBehalf: ").append(toIndentedString(allowBookingOnBehalf)).append("\n");
    sb.append("    allowBookingOvertime: ").append(toIndentedString(allowBookingOvertime)).append("\n");
    sb.append("    allowEventOverlap: ").append(toIndentedString(allowEventOverlap)).append("\n");
    sb.append("    availabilityLimit: ").append(toIndentedString(availabilityLimit)).append("\n");
    sb.append("    availabilityLimitEnabled: ").append(toIndentedString(availabilityLimitEnabled)).append("\n");
    sb.append("    bufferTimeDuration: ").append(toIndentedString(bufferTimeDuration)).append("\n");
    sb.append("    calendarType: ").append(toIndentedString(calendarType)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    defaultMeetingLength: ").append(toIndentedString(defaultMeetingLength)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    enableCalendarSync: ").append(toIndentedString(enableCalendarSync)).append("\n");
    sb.append("    enableDynamicLocation: ").append(toIndentedString(enableDynamicLocation)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    primaryCalendarConnectionFailed: ").append(toIndentedString(primaryCalendarConnectionFailed)).append("\n");
    sb.append("    primaryCalendarId: ").append(toIndentedString(primaryCalendarId)).append("\n");
    sb.append("    primaryCalendarName: ").append(toIndentedString(primaryCalendarName)).append("\n");
    sb.append("    rescheduleMeetingsEnabled: ").append(toIndentedString(rescheduleMeetingsEnabled)).append("\n");
    sb.append("    scheduleBufferEnabled: ").append(toIndentedString(scheduleBufferEnabled)).append("\n");
    sb.append("    scheduleDelay: ").append(toIndentedString(scheduleDelay)).append("\n");
    sb.append("    shareEventDetail: ").append(toIndentedString(shareEventDetail)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    timesAvailable: ").append(toIndentedString(timesAvailable)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    userDetails: ").append(toIndentedString(userDetails)).append("\n");
    sb.append("    userSlug: ").append(toIndentedString(userSlug)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active_meeting_url");
    openapiFields.add("allow_booking_on_behalf");
    openapiFields.add("allow_booking_overtime");
    openapiFields.add("allow_event_overlap");
    openapiFields.add("availability_limit");
    openapiFields.add("availability_limit_enabled");
    openapiFields.add("buffer_time_duration");
    openapiFields.add("calendar_type");
    openapiFields.add("created_at");
    openapiFields.add("default_meeting_length");
    openapiFields.add("description");
    openapiFields.add("email_address");
    openapiFields.add("enable_calendar_sync");
    openapiFields.add("enable_dynamic_location");
    openapiFields.add("id");
    openapiFields.add("location");
    openapiFields.add("primary_calendar_connection_failed");
    openapiFields.add("primary_calendar_id");
    openapiFields.add("primary_calendar_name");
    openapiFields.add("reschedule_meetings_enabled");
    openapiFields.add("schedule_buffer_enabled");
    openapiFields.add("schedule_delay");
    openapiFields.add("share_event_detail");
    openapiFields.add("time_zone");
    openapiFields.add("times_available");
    openapiFields.add("title");
    openapiFields.add("updated_at");
    openapiFields.add("user");
    openapiFields.add("user_details");
    openapiFields.add("user_slug");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MeetingSetting
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MeetingSetting.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MeetingSetting is not found in the empty JSON string", MeetingSetting.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MeetingSetting.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MeetingSetting` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `active_meeting_url`
      if (jsonObj.get("active_meeting_url") != null && !jsonObj.get("active_meeting_url").isJsonNull()) {
        MeetingUrl.validateJsonElement(jsonObj.get("active_meeting_url"));
      }
      if ((jsonObj.get("calendar_type") != null && !jsonObj.get("calendar_type").isJsonNull()) && !jsonObj.get("calendar_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `calendar_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("calendar_type").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("email_address") != null && !jsonObj.get("email_address").isJsonNull()) && !jsonObj.get("email_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email_address").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("primary_calendar_id") != null && !jsonObj.get("primary_calendar_id").isJsonNull()) && !jsonObj.get("primary_calendar_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primary_calendar_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primary_calendar_id").toString()));
      }
      if ((jsonObj.get("primary_calendar_name") != null && !jsonObj.get("primary_calendar_name").isJsonNull()) && !jsonObj.get("primary_calendar_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primary_calendar_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primary_calendar_name").toString()));
      }
      if ((jsonObj.get("time_zone") != null && !jsonObj.get("time_zone").isJsonNull()) && !jsonObj.get("time_zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_zone").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("user"));
      }
      if ((jsonObj.get("user_slug") != null && !jsonObj.get("user_slug").isJsonNull()) && !jsonObj.get("user_slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_slug").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MeetingSetting.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MeetingSetting' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MeetingSetting> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MeetingSetting.class));

       return (TypeAdapter<T>) new TypeAdapter<MeetingSetting>() {
           @Override
           public void write(JsonWriter out, MeetingSetting value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MeetingSetting read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MeetingSetting given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MeetingSetting
   * @throws IOException if the JSON string is invalid with respect to MeetingSetting
   */
  public static MeetingSetting fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MeetingSetting.class);
  }

  /**
   * Convert an instance of MeetingSetting to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

