/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Team
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:54.467506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Team {
  public static final String SERIALIZED_NAME_PRIVATE_FIELDS = "_private_fields";
  @SerializedName(SERIALIZED_NAME_PRIVATE_FIELDS)
  private Object privateFields;

  public static final String SERIALIZED_NAME_ALLOW_AUTOMATED_EMAIL_STEPS = "allow_automated_email_steps";
  @SerializedName(SERIALIZED_NAME_ALLOW_AUTOMATED_EMAIL_STEPS)
  private Boolean allowAutomatedEmailSteps;

  public static final String SERIALIZED_NAME_CALL_RECORDING_DISABLED = "call_recording_disabled";
  @SerializedName(SERIALIZED_NAME_CALL_RECORDING_DISABLED)
  private Boolean callRecordingDisabled;

  public static final String SERIALIZED_NAME_CLICK_TRACKING_DEFAULT = "click_tracking_default";
  @SerializedName(SERIALIZED_NAME_CLICK_TRACKING_DEFAULT)
  private Boolean clickTrackingDefault;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CUSTOM_TRACKING_DOMAIN = "custom_tracking_domain";
  @SerializedName(SERIALIZED_NAME_CUSTOM_TRACKING_DOMAIN)
  private String customTrackingDomain;

  public static final String SERIALIZED_NAME_DEACTIVATED = "deactivated";
  @SerializedName(SERIALIZED_NAME_DEACTIVATED)
  private Boolean deactivated;

  public static final String SERIALIZED_NAME_DISPOSITIONS_REQUIRED = "dispositions_required";
  @SerializedName(SERIALIZED_NAME_DISPOSITIONS_REQUIRED)
  private Boolean dispositionsRequired;

  public static final String SERIALIZED_NAME_EMAIL_DAILY_LIMIT = "email_daily_limit";
  @SerializedName(SERIALIZED_NAME_EMAIL_DAILY_LIMIT)
  private Integer emailDailyLimit;

  public static final String SERIALIZED_NAME_GROUP_PRIVACY_SETTING = "group_privacy_setting";
  @SerializedName(SERIALIZED_NAME_GROUP_PRIVACY_SETTING)
  private String groupPrivacySetting;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LICENSE_LIMIT = "license_limit";
  @SerializedName(SERIALIZED_NAME_LICENSE_LIMIT)
  private Integer licenseLimit;

  public static final String SERIALIZED_NAME_LOCAL_DIAL_ENABLED = "local_dial_enabled";
  @SerializedName(SERIALIZED_NAME_LOCAL_DIAL_ENABLED)
  private Boolean localDialEnabled;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PLAN = "plan";
  @SerializedName(SERIALIZED_NAME_PLAN)
  private String plan;

  public static final String SERIALIZED_NAME_PLAN_FEATURES = "plan_features";
  @SerializedName(SERIALIZED_NAME_PLAN_FEATURES)
  private Object planFeatures;

  public static final String SERIALIZED_NAME_RECORD_BY_DEFAULT = "record_by_default";
  @SerializedName(SERIALIZED_NAME_RECORD_BY_DEFAULT)
  private Boolean recordByDefault;

  public static final String SERIALIZED_NAME_SENTIMENTS_REQUIRED = "sentiments_required";
  @SerializedName(SERIALIZED_NAME_SENTIMENTS_REQUIRED)
  private Boolean sentimentsRequired;

  public static final String SERIALIZED_NAME_TEAM_VISIBILITY_DEFAULT = "team_visibility_default";
  @SerializedName(SERIALIZED_NAME_TEAM_VISIBILITY_DEFAULT)
  private String teamVisibilityDefault;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public Team() {
  }

  public Team privateFields(Object privateFields) {
    this.privateFields = privateFields;
    return this;
  }

  /**
   * For internal use only. This field does not comply with our backwards compatability policies.
   * @return privateFields
   */
  @javax.annotation.Nullable
  public Object getPrivateFields() {
    return privateFields;
  }

  public void setPrivateFields(Object privateFields) {
    this.privateFields = privateFields;
  }


  public Team allowAutomatedEmailSteps(Boolean allowAutomatedEmailSteps) {
    this.allowAutomatedEmailSteps = allowAutomatedEmailSteps;
    return this;
  }

  /**
   * Whether team members are allowed to have automated email steps
   * @return allowAutomatedEmailSteps
   */
  @javax.annotation.Nullable
  public Boolean getAllowAutomatedEmailSteps() {
    return allowAutomatedEmailSteps;
  }

  public void setAllowAutomatedEmailSteps(Boolean allowAutomatedEmailSteps) {
    this.allowAutomatedEmailSteps = allowAutomatedEmailSteps;
  }


  public Team callRecordingDisabled(Boolean callRecordingDisabled) {
    this.callRecordingDisabled = callRecordingDisabled;
    return this;
  }

  /**
   * Whether all call recording is disabled
   * @return callRecordingDisabled
   */
  @javax.annotation.Nullable
  public Boolean getCallRecordingDisabled() {
    return callRecordingDisabled;
  }

  public void setCallRecordingDisabled(Boolean callRecordingDisabled) {
    this.callRecordingDisabled = callRecordingDisabled;
  }


  public Team clickTrackingDefault(Boolean clickTrackingDefault) {
    this.clickTrackingDefault = clickTrackingDefault;
    return this;
  }

  /**
   * The team default for click tracking when composing emails
   * @return clickTrackingDefault
   */
  @javax.annotation.Nullable
  public Boolean getClickTrackingDefault() {
    return clickTrackingDefault;
  }

  public void setClickTrackingDefault(Boolean clickTrackingDefault) {
    this.clickTrackingDefault = clickTrackingDefault;
  }


  public Team createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Datetime of when the team was created
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Team customTrackingDomain(String customTrackingDomain) {
    this.customTrackingDomain = customTrackingDomain;
    return this;
  }

  /**
   * The domain click and open tracking will be proxied through
   * @return customTrackingDomain
   */
  @javax.annotation.Nullable
  public String getCustomTrackingDomain() {
    return customTrackingDomain;
  }

  public void setCustomTrackingDomain(String customTrackingDomain) {
    this.customTrackingDomain = customTrackingDomain;
  }


  public Team deactivated(Boolean deactivated) {
    this.deactivated = deactivated;
    return this;
  }

  /**
   * Indicates if the team has been deactivated
   * @return deactivated
   */
  @javax.annotation.Nullable
  public Boolean getDeactivated() {
    return deactivated;
  }

  public void setDeactivated(Boolean deactivated) {
    this.deactivated = deactivated;
  }


  public Team dispositionsRequired(Boolean dispositionsRequired) {
    this.dispositionsRequired = dispositionsRequired;
    return this;
  }

  /**
   * Whether team members are required to mark disposition at the end of calls
   * @return dispositionsRequired
   */
  @javax.annotation.Nullable
  public Boolean getDispositionsRequired() {
    return dispositionsRequired;
  }

  public void setDispositionsRequired(Boolean dispositionsRequired) {
    this.dispositionsRequired = dispositionsRequired;
  }


  public Team emailDailyLimit(Integer emailDailyLimit) {
    this.emailDailyLimit = emailDailyLimit;
    return this;
  }

  /**
   * Daily email limit for each member on the team
   * @return emailDailyLimit
   */
  @javax.annotation.Nullable
  public Integer getEmailDailyLimit() {
    return emailDailyLimit;
  }

  public void setEmailDailyLimit(Integer emailDailyLimit) {
    this.emailDailyLimit = emailDailyLimit;
  }


  public Team groupPrivacySetting(String groupPrivacySetting) {
    this.groupPrivacySetting = groupPrivacySetting;
    return this;
  }

  /**
   * Visibility setting for resources across the team. Possible values are: group_public, all_public. When the value is group_public, certain resources will only be visible to members of the same group. When the value is all_public, all resources are visible to all users on this team. 
   * @return groupPrivacySetting
   */
  @javax.annotation.Nullable
  public String getGroupPrivacySetting() {
    return groupPrivacySetting;
  }

  public void setGroupPrivacySetting(String groupPrivacySetting) {
    this.groupPrivacySetting = groupPrivacySetting;
  }


  public Team id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Team ID
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Team licenseLimit(Integer licenseLimit) {
    this.licenseLimit = licenseLimit;
    return this;
  }

  /**
   * Count of seats that this team has licensed
   * @return licenseLimit
   */
  @javax.annotation.Nullable
  public Integer getLicenseLimit() {
    return licenseLimit;
  }

  public void setLicenseLimit(Integer licenseLimit) {
    this.licenseLimit = licenseLimit;
  }


  public Team localDialEnabled(Boolean localDialEnabled) {
    this.localDialEnabled = localDialEnabled;
    return this;
  }

  /**
   * Whether this team has local dial enabled
   * @return localDialEnabled
   */
  @javax.annotation.Nullable
  public Boolean getLocalDialEnabled() {
    return localDialEnabled;
  }

  public void setLocalDialEnabled(Boolean localDialEnabled) {
    this.localDialEnabled = localDialEnabled;
  }


  public Team name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Team name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Team plan(String plan) {
    this.plan = plan;
    return this;
  }

  /**
   * Plan type of the team, Possible values are: group, professional, enterprise
   * @return plan
   */
  @javax.annotation.Nullable
  public String getPlan() {
    return plan;
  }

  public void setPlan(String plan) {
    this.plan = plan;
  }


  public Team planFeatures(Object planFeatures) {
    this.planFeatures = planFeatures;
    return this;
  }

  /**
   * Add on features for this team
   * @return planFeatures
   */
  @javax.annotation.Nullable
  public Object getPlanFeatures() {
    return planFeatures;
  }

  public void setPlanFeatures(Object planFeatures) {
    this.planFeatures = planFeatures;
  }


  public Team recordByDefault(Boolean recordByDefault) {
    this.recordByDefault = recordByDefault;
    return this;
  }

  /**
   * Whether calls will record by default
   * @return recordByDefault
   */
  @javax.annotation.Nullable
  public Boolean getRecordByDefault() {
    return recordByDefault;
  }

  public void setRecordByDefault(Boolean recordByDefault) {
    this.recordByDefault = recordByDefault;
  }


  public Team sentimentsRequired(Boolean sentimentsRequired) {
    this.sentimentsRequired = sentimentsRequired;
    return this;
  }

  /**
   * Whether team members are required to log sentiments
   * @return sentimentsRequired
   */
  @javax.annotation.Nullable
  public Boolean getSentimentsRequired() {
    return sentimentsRequired;
  }

  public void setSentimentsRequired(Boolean sentimentsRequired) {
    this.sentimentsRequired = sentimentsRequired;
  }


  public Team teamVisibilityDefault(String teamVisibilityDefault) {
    this.teamVisibilityDefault = teamVisibilityDefault;
    return this;
  }

  /**
   * The default visibility of resources on the team, in the UI only. The API does not utilize this default. Possible values are: public, private. 
   * @return teamVisibilityDefault
   */
  @javax.annotation.Nullable
  public String getTeamVisibilityDefault() {
    return teamVisibilityDefault;
  }

  public void setTeamVisibilityDefault(String teamVisibilityDefault) {
    this.teamVisibilityDefault = teamVisibilityDefault;
  }


  public Team updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Datetime of when the team was last updated
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Team team = (Team) o;
    return Objects.equals(this.privateFields, team.privateFields) &&
        Objects.equals(this.allowAutomatedEmailSteps, team.allowAutomatedEmailSteps) &&
        Objects.equals(this.callRecordingDisabled, team.callRecordingDisabled) &&
        Objects.equals(this.clickTrackingDefault, team.clickTrackingDefault) &&
        Objects.equals(this.createdAt, team.createdAt) &&
        Objects.equals(this.customTrackingDomain, team.customTrackingDomain) &&
        Objects.equals(this.deactivated, team.deactivated) &&
        Objects.equals(this.dispositionsRequired, team.dispositionsRequired) &&
        Objects.equals(this.emailDailyLimit, team.emailDailyLimit) &&
        Objects.equals(this.groupPrivacySetting, team.groupPrivacySetting) &&
        Objects.equals(this.id, team.id) &&
        Objects.equals(this.licenseLimit, team.licenseLimit) &&
        Objects.equals(this.localDialEnabled, team.localDialEnabled) &&
        Objects.equals(this.name, team.name) &&
        Objects.equals(this.plan, team.plan) &&
        Objects.equals(this.planFeatures, team.planFeatures) &&
        Objects.equals(this.recordByDefault, team.recordByDefault) &&
        Objects.equals(this.sentimentsRequired, team.sentimentsRequired) &&
        Objects.equals(this.teamVisibilityDefault, team.teamVisibilityDefault) &&
        Objects.equals(this.updatedAt, team.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(privateFields, allowAutomatedEmailSteps, callRecordingDisabled, clickTrackingDefault, createdAt, customTrackingDomain, deactivated, dispositionsRequired, emailDailyLimit, groupPrivacySetting, id, licenseLimit, localDialEnabled, name, plan, planFeatures, recordByDefault, sentimentsRequired, teamVisibilityDefault, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Team {\n");
    sb.append("    privateFields: ").append(toIndentedString(privateFields)).append("\n");
    sb.append("    allowAutomatedEmailSteps: ").append(toIndentedString(allowAutomatedEmailSteps)).append("\n");
    sb.append("    callRecordingDisabled: ").append(toIndentedString(callRecordingDisabled)).append("\n");
    sb.append("    clickTrackingDefault: ").append(toIndentedString(clickTrackingDefault)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    customTrackingDomain: ").append(toIndentedString(customTrackingDomain)).append("\n");
    sb.append("    deactivated: ").append(toIndentedString(deactivated)).append("\n");
    sb.append("    dispositionsRequired: ").append(toIndentedString(dispositionsRequired)).append("\n");
    sb.append("    emailDailyLimit: ").append(toIndentedString(emailDailyLimit)).append("\n");
    sb.append("    groupPrivacySetting: ").append(toIndentedString(groupPrivacySetting)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    licenseLimit: ").append(toIndentedString(licenseLimit)).append("\n");
    sb.append("    localDialEnabled: ").append(toIndentedString(localDialEnabled)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("    planFeatures: ").append(toIndentedString(planFeatures)).append("\n");
    sb.append("    recordByDefault: ").append(toIndentedString(recordByDefault)).append("\n");
    sb.append("    sentimentsRequired: ").append(toIndentedString(sentimentsRequired)).append("\n");
    sb.append("    teamVisibilityDefault: ").append(toIndentedString(teamVisibilityDefault)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_private_fields");
    openapiFields.add("allow_automated_email_steps");
    openapiFields.add("call_recording_disabled");
    openapiFields.add("click_tracking_default");
    openapiFields.add("created_at");
    openapiFields.add("custom_tracking_domain");
    openapiFields.add("deactivated");
    openapiFields.add("dispositions_required");
    openapiFields.add("email_daily_limit");
    openapiFields.add("group_privacy_setting");
    openapiFields.add("id");
    openapiFields.add("license_limit");
    openapiFields.add("local_dial_enabled");
    openapiFields.add("name");
    openapiFields.add("plan");
    openapiFields.add("plan_features");
    openapiFields.add("record_by_default");
    openapiFields.add("sentiments_required");
    openapiFields.add("team_visibility_default");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Team
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Team.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Team is not found in the empty JSON string", Team.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Team.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Team` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("custom_tracking_domain") != null && !jsonObj.get("custom_tracking_domain").isJsonNull()) && !jsonObj.get("custom_tracking_domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_tracking_domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_tracking_domain").toString()));
      }
      if ((jsonObj.get("group_privacy_setting") != null && !jsonObj.get("group_privacy_setting").isJsonNull()) && !jsonObj.get("group_privacy_setting").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_privacy_setting` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group_privacy_setting").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("plan") != null && !jsonObj.get("plan").isJsonNull()) && !jsonObj.get("plan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plan").toString()));
      }
      if ((jsonObj.get("team_visibility_default") != null && !jsonObj.get("team_visibility_default").isJsonNull()) && !jsonObj.get("team_visibility_default").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team_visibility_default` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team_visibility_default").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Team.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Team' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Team> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Team.class));

       return (TypeAdapter<T>) new TypeAdapter<Team>() {
           @Override
           public void write(JsonWriter out, Team value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Team read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Team given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Team
   * @throws IOException if the JSON string is invalid with respect to Team
   */
  public static Team fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Team.class);
  }

  /**
   * Convert an instance of Team to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

