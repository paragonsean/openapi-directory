/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.EmbeddedResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * User
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:54.467506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class User {
  public static final String SERIALIZED_NAME_PRIVATE_FIELDS = "_private_fields";
  @SerializedName(SERIALIZED_NAME_PRIVATE_FIELDS)
  private Object privateFields;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_BCC_EMAIL_ADDRESS = "bcc_email_address";
  @SerializedName(SERIALIZED_NAME_BCC_EMAIL_ADDRESS)
  private String bccEmailAddress;

  public static final String SERIALIZED_NAME_CLICK_TO_CALL_ENABLED = "click_to_call_enabled";
  @SerializedName(SERIALIZED_NAME_CLICK_TO_CALL_ENABLED)
  private Boolean clickToCallEnabled;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CRM_CONNECTED = "crm_connected";
  @SerializedName(SERIALIZED_NAME_CRM_CONNECTED)
  private Boolean crmConnected;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EMAIL_CLIENT_CONFIGURED = "email_client_configured";
  @SerializedName(SERIALIZED_NAME_EMAIL_CLIENT_CONFIGURED)
  private Boolean emailClientConfigured;

  public static final String SERIALIZED_NAME_EMAIL_CLIENT_EMAIL_ADDRESS = "email_client_email_address";
  @SerializedName(SERIALIZED_NAME_EMAIL_CLIENT_EMAIL_ADDRESS)
  private String emailClientEmailAddress;

  public static final String SERIALIZED_NAME_EMAIL_SIGNATURE = "email_signature";
  @SerializedName(SERIALIZED_NAME_EMAIL_SIGNATURE)
  private String emailSignature;

  public static final String SERIALIZED_NAME_EMAIL_SIGNATURE_CLICK_TRACKING_DISABLED = "email_signature_click_tracking_disabled";
  @SerializedName(SERIALIZED_NAME_EMAIL_SIGNATURE_CLICK_TRACKING_DISABLED)
  private Boolean emailSignatureClickTrackingDisabled;

  public static final String SERIALIZED_NAME_EMAIL_SIGNATURE_TYPE = "email_signature_type";
  @SerializedName(SERIALIZED_NAME_EMAIL_SIGNATURE_TYPE)
  private String emailSignatureType;

  public static final String SERIALIZED_NAME_EXTERNAL_FEATURE_FLAGS = "external_feature_flags";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_FEATURE_FLAGS)
  private Object externalFeatureFlags;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_FROM_ADDRESS = "from_address";
  @SerializedName(SERIALIZED_NAME_FROM_ADDRESS)
  private String fromAddress;

  public static final String SERIALIZED_NAME_FULL_EMAIL_ADDRESS = "full_email_address";
  @SerializedName(SERIALIZED_NAME_FULL_EMAIL_ADDRESS)
  private String fullEmailAddress;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private EmbeddedResource group;

  public static final String SERIALIZED_NAME_GUID = "guid";
  @SerializedName(SERIALIZED_NAME_GUID)
  private String guid;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_JOB_ROLE = "job_role";
  @SerializedName(SERIALIZED_NAME_JOB_ROLE)
  private String jobRole;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_LOCAL_DIAL_ENABLED = "local_dial_enabled";
  @SerializedName(SERIALIZED_NAME_LOCAL_DIAL_ENABLED)
  private Boolean localDialEnabled;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PHONE_CLIENT = "phone_client";
  @SerializedName(SERIALIZED_NAME_PHONE_CLIENT)
  private EmbeddedResource phoneClient;

  public static final String SERIALIZED_NAME_PHONE_NUMBER_ASSIGNMENT = "phone_number_assignment";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER_ASSIGNMENT)
  private EmbeddedResource phoneNumberAssignment;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private EmbeddedResource role;

  public static final String SERIALIZED_NAME_SENDING_EMAIL_ADDRESS = "sending_email_address";
  @SerializedName(SERIALIZED_NAME_SENDING_EMAIL_ADDRESS)
  private String sendingEmailAddress;

  public static final String SERIALIZED_NAME_SLACK_USERNAME = "slack_username";
  @SerializedName(SERIALIZED_NAME_SLACK_USERNAME)
  private String slackUsername;

  public static final String SERIALIZED_NAME_TEAM = "team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private EmbeddedResource team;

  public static final String SERIALIZED_NAME_TEAM_ADMIN = "team_admin";
  @SerializedName(SERIALIZED_NAME_TEAM_ADMIN)
  private Boolean teamAdmin;

  public static final String SERIALIZED_NAME_TIME_ZONE = "time_zone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public static final String SERIALIZED_NAME_TWITTER_HANDLE = "twitter_handle";
  @SerializedName(SERIALIZED_NAME_TWITTER_HANDLE)
  private String twitterHandle;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_WORK_COUNTRY = "work_country";
  @SerializedName(SERIALIZED_NAME_WORK_COUNTRY)
  private String workCountry;

  public User() {
  }

  public User privateFields(Object privateFields) {
    this.privateFields = privateFields;
    return this;
  }

  /**
   * For internal use only. This field does not comply with our backwards compatability policies.
   * @return privateFields
   */
  @javax.annotation.Nullable
  public Object getPrivateFields() {
    return privateFields;
  }

  public void setPrivateFields(Object privateFields) {
    this.privateFields = privateFields;
  }


  public User active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Whether an user is currently active in SalesLoft
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public User bccEmailAddress(String bccEmailAddress) {
    this.bccEmailAddress = bccEmailAddress;
    return this;
  }

  /**
   * Address that will be BBC&#39;d on all emails from this user
   * @return bccEmailAddress
   */
  @javax.annotation.Nullable
  public String getBccEmailAddress() {
    return bccEmailAddress;
  }

  public void setBccEmailAddress(String bccEmailAddress) {
    this.bccEmailAddress = bccEmailAddress;
  }


  public User clickToCallEnabled(Boolean clickToCallEnabled) {
    this.clickToCallEnabled = clickToCallEnabled;
    return this;
  }

  /**
   * Whether this user has click to call enabled
   * @return clickToCallEnabled
   */
  @javax.annotation.Nullable
  public Boolean getClickToCallEnabled() {
    return clickToCallEnabled;
  }

  public void setClickToCallEnabled(Boolean clickToCallEnabled) {
    this.clickToCallEnabled = clickToCallEnabled;
  }


  public User createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Datetime of when the user was created
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public User crmConnected(Boolean crmConnected) {
    this.crmConnected = crmConnected;
    return this;
  }

  /**
   * Whether the user has a crm connected
   * @return crmConnected
   */
  @javax.annotation.Nullable
  public Boolean getCrmConnected() {
    return crmConnected;
  }

  public void setCrmConnected(Boolean crmConnected) {
    this.crmConnected = crmConnected;
  }


  public User email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Email address provided to accounts.salesloft.com
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public User emailClientConfigured(Boolean emailClientConfigured) {
    this.emailClientConfigured = emailClientConfigured;
    return this;
  }

  /**
   * Whether this user has a email client configured
   * @return emailClientConfigured
   */
  @javax.annotation.Nullable
  public Boolean getEmailClientConfigured() {
    return emailClientConfigured;
  }

  public void setEmailClientConfigured(Boolean emailClientConfigured) {
    this.emailClientConfigured = emailClientConfigured;
  }


  public User emailClientEmailAddress(String emailClientEmailAddress) {
    this.emailClientEmailAddress = emailClientEmailAddress;
    return this;
  }

  /**
   * Email address associated with the email client of the user
   * @return emailClientEmailAddress
   */
  @javax.annotation.Nullable
  public String getEmailClientEmailAddress() {
    return emailClientEmailAddress;
  }

  public void setEmailClientEmailAddress(String emailClientEmailAddress) {
    this.emailClientEmailAddress = emailClientEmailAddress;
  }


  public User emailSignature(String emailSignature) {
    this.emailSignature = emailSignature;
    return this;
  }

  /**
   * Email signature
   * @return emailSignature
   */
  @javax.annotation.Nullable
  public String getEmailSignature() {
    return emailSignature;
  }

  public void setEmailSignature(String emailSignature) {
    this.emailSignature = emailSignature;
  }


  public User emailSignatureClickTrackingDisabled(Boolean emailSignatureClickTrackingDisabled) {
    this.emailSignatureClickTrackingDisabled = emailSignatureClickTrackingDisabled;
    return this;
  }

  /**
   * Whether this user has click tracking disabled in email signature
   * @return emailSignatureClickTrackingDisabled
   */
  @javax.annotation.Nullable
  public Boolean getEmailSignatureClickTrackingDisabled() {
    return emailSignatureClickTrackingDisabled;
  }

  public void setEmailSignatureClickTrackingDisabled(Boolean emailSignatureClickTrackingDisabled) {
    this.emailSignatureClickTrackingDisabled = emailSignatureClickTrackingDisabled;
  }


  public User emailSignatureType(String emailSignatureType) {
    this.emailSignatureType = emailSignatureType;
    return this;
  }

  /**
   * Email signature type
   * @return emailSignatureType
   */
  @javax.annotation.Nullable
  public String getEmailSignatureType() {
    return emailSignatureType;
  }

  public void setEmailSignatureType(String emailSignatureType) {
    this.emailSignatureType = emailSignatureType;
  }


  public User externalFeatureFlags(Object externalFeatureFlags) {
    this.externalFeatureFlags = externalFeatureFlags;
    return this;
  }

  /**
   * Feature flags that are for this user. New flags may appear or disappear at any time
   * @return externalFeatureFlags
   */
  @javax.annotation.Nullable
  public Object getExternalFeatureFlags() {
    return externalFeatureFlags;
  }

  public void setExternalFeatureFlags(Object externalFeatureFlags) {
    this.externalFeatureFlags = externalFeatureFlags;
  }


  public User firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * First name of user
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public User fromAddress(String fromAddress) {
    this.fromAddress = fromAddress;
    return this;
  }

  /**
   * The from address of this user
   * @return fromAddress
   */
  @javax.annotation.Nullable
  public String getFromAddress() {
    return fromAddress;
  }

  public void setFromAddress(String fromAddress) {
    this.fromAddress = fromAddress;
  }


  public User fullEmailAddress(String fullEmailAddress) {
    this.fullEmailAddress = fullEmailAddress;
    return this;
  }

  /**
   * RFC 5322 compliant email address
   * @return fullEmailAddress
   */
  @javax.annotation.Nullable
  public String getFullEmailAddress() {
    return fullEmailAddress;
  }

  public void setFullEmailAddress(String fullEmailAddress) {
    this.fullEmailAddress = fullEmailAddress;
  }


  public User group(EmbeddedResource group) {
    this.group = group;
    return this;
  }

  /**
   * Get group
   * @return group
   */
  @javax.annotation.Nullable
  public EmbeddedResource getGroup() {
    return group;
  }

  public void setGroup(EmbeddedResource group) {
    this.group = group;
  }


  public User guid(String guid) {
    this.guid = guid;
    return this;
  }

  /**
   * Globally unique user ID. New endpoints will explicitly accept this over id
   * @return guid
   */
  @javax.annotation.Nullable
  public String getGuid() {
    return guid;
  }

  public void setGuid(String guid) {
    this.guid = guid;
  }


  public User id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * User ID
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public User jobRole(String jobRole) {
    this.jobRole = jobRole;
    return this;
  }

  /**
   * Job role of user
   * @return jobRole
   */
  @javax.annotation.Nullable
  public String getJobRole() {
    return jobRole;
  }

  public void setJobRole(String jobRole) {
    this.jobRole = jobRole;
  }


  public User lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Last name of user
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public User localDialEnabled(Boolean localDialEnabled) {
    this.localDialEnabled = localDialEnabled;
    return this;
  }

  /**
   * Whether this user has Local Dial enabled
   * @return localDialEnabled
   */
  @javax.annotation.Nullable
  public Boolean getLocalDialEnabled() {
    return localDialEnabled;
  }

  public void setLocalDialEnabled(Boolean localDialEnabled) {
    this.localDialEnabled = localDialEnabled;
  }


  public User name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Display name of user
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public User phoneClient(EmbeddedResource phoneClient) {
    this.phoneClient = phoneClient;
    return this;
  }

  /**
   * Get phoneClient
   * @return phoneClient
   */
  @javax.annotation.Nullable
  public EmbeddedResource getPhoneClient() {
    return phoneClient;
  }

  public void setPhoneClient(EmbeddedResource phoneClient) {
    this.phoneClient = phoneClient;
  }


  public User phoneNumberAssignment(EmbeddedResource phoneNumberAssignment) {
    this.phoneNumberAssignment = phoneNumberAssignment;
    return this;
  }

  /**
   * Get phoneNumberAssignment
   * @return phoneNumberAssignment
   */
  @javax.annotation.Nullable
  public EmbeddedResource getPhoneNumberAssignment() {
    return phoneNumberAssignment;
  }

  public void setPhoneNumberAssignment(EmbeddedResource phoneNumberAssignment) {
    this.phoneNumberAssignment = phoneNumberAssignment;
  }


  public User role(EmbeddedResource role) {
    this.role = role;
    return this;
  }

  /**
   * Get role
   * @return role
   */
  @javax.annotation.Nullable
  public EmbeddedResource getRole() {
    return role;
  }

  public void setRole(EmbeddedResource role) {
    this.role = role;
  }


  public User sendingEmailAddress(String sendingEmailAddress) {
    this.sendingEmailAddress = sendingEmailAddress;
    return this;
  }

  /**
   * The email address that email of the user will be sent from, resolved in the following resolution order: from_user, email_client_email_address, email
   * @return sendingEmailAddress
   */
  @javax.annotation.Nullable
  public String getSendingEmailAddress() {
    return sendingEmailAddress;
  }

  public void setSendingEmailAddress(String sendingEmailAddress) {
    this.sendingEmailAddress = sendingEmailAddress;
  }


  public User slackUsername(String slackUsername) {
    this.slackUsername = slackUsername;
    return this;
  }

  /**
   * Slack username
   * @return slackUsername
   */
  @javax.annotation.Nullable
  public String getSlackUsername() {
    return slackUsername;
  }

  public void setSlackUsername(String slackUsername) {
    this.slackUsername = slackUsername;
  }


  public User team(EmbeddedResource team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nullable
  public EmbeddedResource getTeam() {
    return team;
  }

  public void setTeam(EmbeddedResource team) {
    this.team = team;
  }


  public User teamAdmin(Boolean teamAdmin) {
    this.teamAdmin = teamAdmin;
    return this;
  }

  /**
   * Team Admin
   * @return teamAdmin
   */
  @javax.annotation.Nullable
  public Boolean getTeamAdmin() {
    return teamAdmin;
  }

  public void setTeamAdmin(Boolean teamAdmin) {
    this.teamAdmin = teamAdmin;
  }


  public User timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * User Time Zone
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  public User twitterHandle(String twitterHandle) {
    this.twitterHandle = twitterHandle;
    return this;
  }

  /**
   * Twitter handle
   * @return twitterHandle
   */
  @javax.annotation.Nullable
  public String getTwitterHandle() {
    return twitterHandle;
  }

  public void setTwitterHandle(String twitterHandle) {
    this.twitterHandle = twitterHandle;
  }


  public User updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Datetime of when the user was last updated
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public User workCountry(String workCountry) {
    this.workCountry = workCountry;
    return this;
  }

  /**
   * Work Country
   * @return workCountry
   */
  @javax.annotation.Nullable
  public String getWorkCountry() {
    return workCountry;
  }

  public void setWorkCountry(String workCountry) {
    this.workCountry = workCountry;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    User user = (User) o;
    return Objects.equals(this.privateFields, user.privateFields) &&
        Objects.equals(this.active, user.active) &&
        Objects.equals(this.bccEmailAddress, user.bccEmailAddress) &&
        Objects.equals(this.clickToCallEnabled, user.clickToCallEnabled) &&
        Objects.equals(this.createdAt, user.createdAt) &&
        Objects.equals(this.crmConnected, user.crmConnected) &&
        Objects.equals(this.email, user.email) &&
        Objects.equals(this.emailClientConfigured, user.emailClientConfigured) &&
        Objects.equals(this.emailClientEmailAddress, user.emailClientEmailAddress) &&
        Objects.equals(this.emailSignature, user.emailSignature) &&
        Objects.equals(this.emailSignatureClickTrackingDisabled, user.emailSignatureClickTrackingDisabled) &&
        Objects.equals(this.emailSignatureType, user.emailSignatureType) &&
        Objects.equals(this.externalFeatureFlags, user.externalFeatureFlags) &&
        Objects.equals(this.firstName, user.firstName) &&
        Objects.equals(this.fromAddress, user.fromAddress) &&
        Objects.equals(this.fullEmailAddress, user.fullEmailAddress) &&
        Objects.equals(this.group, user.group) &&
        Objects.equals(this.guid, user.guid) &&
        Objects.equals(this.id, user.id) &&
        Objects.equals(this.jobRole, user.jobRole) &&
        Objects.equals(this.lastName, user.lastName) &&
        Objects.equals(this.localDialEnabled, user.localDialEnabled) &&
        Objects.equals(this.name, user.name) &&
        Objects.equals(this.phoneClient, user.phoneClient) &&
        Objects.equals(this.phoneNumberAssignment, user.phoneNumberAssignment) &&
        Objects.equals(this.role, user.role) &&
        Objects.equals(this.sendingEmailAddress, user.sendingEmailAddress) &&
        Objects.equals(this.slackUsername, user.slackUsername) &&
        Objects.equals(this.team, user.team) &&
        Objects.equals(this.teamAdmin, user.teamAdmin) &&
        Objects.equals(this.timeZone, user.timeZone) &&
        Objects.equals(this.twitterHandle, user.twitterHandle) &&
        Objects.equals(this.updatedAt, user.updatedAt) &&
        Objects.equals(this.workCountry, user.workCountry);
  }

  @Override
  public int hashCode() {
    return Objects.hash(privateFields, active, bccEmailAddress, clickToCallEnabled, createdAt, crmConnected, email, emailClientConfigured, emailClientEmailAddress, emailSignature, emailSignatureClickTrackingDisabled, emailSignatureType, externalFeatureFlags, firstName, fromAddress, fullEmailAddress, group, guid, id, jobRole, lastName, localDialEnabled, name, phoneClient, phoneNumberAssignment, role, sendingEmailAddress, slackUsername, team, teamAdmin, timeZone, twitterHandle, updatedAt, workCountry);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class User {\n");
    sb.append("    privateFields: ").append(toIndentedString(privateFields)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    bccEmailAddress: ").append(toIndentedString(bccEmailAddress)).append("\n");
    sb.append("    clickToCallEnabled: ").append(toIndentedString(clickToCallEnabled)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    crmConnected: ").append(toIndentedString(crmConnected)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    emailClientConfigured: ").append(toIndentedString(emailClientConfigured)).append("\n");
    sb.append("    emailClientEmailAddress: ").append(toIndentedString(emailClientEmailAddress)).append("\n");
    sb.append("    emailSignature: ").append(toIndentedString(emailSignature)).append("\n");
    sb.append("    emailSignatureClickTrackingDisabled: ").append(toIndentedString(emailSignatureClickTrackingDisabled)).append("\n");
    sb.append("    emailSignatureType: ").append(toIndentedString(emailSignatureType)).append("\n");
    sb.append("    externalFeatureFlags: ").append(toIndentedString(externalFeatureFlags)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    fromAddress: ").append(toIndentedString(fromAddress)).append("\n");
    sb.append("    fullEmailAddress: ").append(toIndentedString(fullEmailAddress)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    jobRole: ").append(toIndentedString(jobRole)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    localDialEnabled: ").append(toIndentedString(localDialEnabled)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    phoneClient: ").append(toIndentedString(phoneClient)).append("\n");
    sb.append("    phoneNumberAssignment: ").append(toIndentedString(phoneNumberAssignment)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    sendingEmailAddress: ").append(toIndentedString(sendingEmailAddress)).append("\n");
    sb.append("    slackUsername: ").append(toIndentedString(slackUsername)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    teamAdmin: ").append(toIndentedString(teamAdmin)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    twitterHandle: ").append(toIndentedString(twitterHandle)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    workCountry: ").append(toIndentedString(workCountry)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_private_fields");
    openapiFields.add("active");
    openapiFields.add("bcc_email_address");
    openapiFields.add("click_to_call_enabled");
    openapiFields.add("created_at");
    openapiFields.add("crm_connected");
    openapiFields.add("email");
    openapiFields.add("email_client_configured");
    openapiFields.add("email_client_email_address");
    openapiFields.add("email_signature");
    openapiFields.add("email_signature_click_tracking_disabled");
    openapiFields.add("email_signature_type");
    openapiFields.add("external_feature_flags");
    openapiFields.add("first_name");
    openapiFields.add("from_address");
    openapiFields.add("full_email_address");
    openapiFields.add("group");
    openapiFields.add("guid");
    openapiFields.add("id");
    openapiFields.add("job_role");
    openapiFields.add("last_name");
    openapiFields.add("local_dial_enabled");
    openapiFields.add("name");
    openapiFields.add("phone_client");
    openapiFields.add("phone_number_assignment");
    openapiFields.add("role");
    openapiFields.add("sending_email_address");
    openapiFields.add("slack_username");
    openapiFields.add("team");
    openapiFields.add("team_admin");
    openapiFields.add("time_zone");
    openapiFields.add("twitter_handle");
    openapiFields.add("updated_at");
    openapiFields.add("work_country");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to User
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!User.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in User is not found in the empty JSON string", User.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!User.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `User` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bcc_email_address") != null && !jsonObj.get("bcc_email_address").isJsonNull()) && !jsonObj.get("bcc_email_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bcc_email_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bcc_email_address").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("email_client_email_address") != null && !jsonObj.get("email_client_email_address").isJsonNull()) && !jsonObj.get("email_client_email_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email_client_email_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email_client_email_address").toString()));
      }
      if ((jsonObj.get("email_signature") != null && !jsonObj.get("email_signature").isJsonNull()) && !jsonObj.get("email_signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email_signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email_signature").toString()));
      }
      if ((jsonObj.get("email_signature_type") != null && !jsonObj.get("email_signature_type").isJsonNull()) && !jsonObj.get("email_signature_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email_signature_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email_signature_type").toString()));
      }
      if ((jsonObj.get("first_name") != null && !jsonObj.get("first_name").isJsonNull()) && !jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      if ((jsonObj.get("from_address") != null && !jsonObj.get("from_address").isJsonNull()) && !jsonObj.get("from_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from_address").toString()));
      }
      if ((jsonObj.get("full_email_address") != null && !jsonObj.get("full_email_address").isJsonNull()) && !jsonObj.get("full_email_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `full_email_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("full_email_address").toString()));
      }
      // validate the optional field `group`
      if (jsonObj.get("group") != null && !jsonObj.get("group").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("group"));
      }
      if ((jsonObj.get("guid") != null && !jsonObj.get("guid").isJsonNull()) && !jsonObj.get("guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guid").toString()));
      }
      if ((jsonObj.get("job_role") != null && !jsonObj.get("job_role").isJsonNull()) && !jsonObj.get("job_role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `job_role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("job_role").toString()));
      }
      if ((jsonObj.get("last_name") != null && !jsonObj.get("last_name").isJsonNull()) && !jsonObj.get("last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_name").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `phone_client`
      if (jsonObj.get("phone_client") != null && !jsonObj.get("phone_client").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("phone_client"));
      }
      // validate the optional field `phone_number_assignment`
      if (jsonObj.get("phone_number_assignment") != null && !jsonObj.get("phone_number_assignment").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("phone_number_assignment"));
      }
      // validate the optional field `role`
      if (jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("role"));
      }
      if ((jsonObj.get("sending_email_address") != null && !jsonObj.get("sending_email_address").isJsonNull()) && !jsonObj.get("sending_email_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sending_email_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sending_email_address").toString()));
      }
      if ((jsonObj.get("slack_username") != null && !jsonObj.get("slack_username").isJsonNull()) && !jsonObj.get("slack_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slack_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slack_username").toString()));
      }
      // validate the optional field `team`
      if (jsonObj.get("team") != null && !jsonObj.get("team").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("team"));
      }
      if ((jsonObj.get("time_zone") != null && !jsonObj.get("time_zone").isJsonNull()) && !jsonObj.get("time_zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_zone").toString()));
      }
      if ((jsonObj.get("twitter_handle") != null && !jsonObj.get("twitter_handle").isJsonNull()) && !jsonObj.get("twitter_handle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `twitter_handle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("twitter_handle").toString()));
      }
      if ((jsonObj.get("work_country") != null && !jsonObj.get("work_country").isJsonNull()) && !jsonObj.get("work_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `work_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("work_country").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!User.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'User' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<User> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(User.class));

       return (TypeAdapter<T>) new TypeAdapter<User>() {
           @Override
           public void write(JsonWriter out, User value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public User read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of User given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of User
   * @throws IOException if the JSON string is invalid with respect to User
   */
  public static User fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, User.class);
  }

  /**
   * Convert an instance of User to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

