/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Call;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CallsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CallsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CallsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v2ActivitiesCallsIdJsonGet
     * @param id Call ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2ActivitiesCallsIdJsonGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/activities/calls/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2ActivitiesCallsIdJsonGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v2ActivitiesCallsIdJsonGet(Async)");
        }

        return v2ActivitiesCallsIdJsonGetCall(id, _callback);

    }

    /**
     * Fetch a call
     * Fetches a call, by ID only. 
     * @param id Call ID (required)
     * @return Call
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Call v2ActivitiesCallsIdJsonGet(String id) throws ApiException {
        ApiResponse<Call> localVarResp = v2ActivitiesCallsIdJsonGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Fetch a call
     * Fetches a call, by ID only. 
     * @param id Call ID (required)
     * @return ApiResponse&lt;Call&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Call> v2ActivitiesCallsIdJsonGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = v2ActivitiesCallsIdJsonGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Call>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a call (asynchronously)
     * Fetches a call, by ID only. 
     * @param id Call ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2ActivitiesCallsIdJsonGetAsync(String id, final ApiCallback<Call> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2ActivitiesCallsIdJsonGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Call>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2ActivitiesCallsJsonGet
     * @param ids IDs of calls to fetch. If a record can&#39;t be found, that record won&#39;t be returned and your request will be successful (optional)
     * @param createdAt Equality filters that are applied to the created_at field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param updatedAt Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param userGuid Filters list to only include guids (optional)
     * @param personId Filters calls by person_id. Multiple person ids can be applied (optional)
     * @param sentiment Filters calls by sentiment. Sentiment matches are exact and case sensitive. Multiple sentiments are allowed. (optional)
     * @param disposition Filters calls by disposition. Disposition matches are exact and case sensitive. Multiple dispositions are allowed. (optional)
     * @param sortBy Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at (optional)
     * @param sortDirection Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @param page The current page to fetch results from. Defaults to 1 (optional)
     * @param includePagingCounts Whether to include total_pages and total_count in the metadata. Defaults to false (optional)
     * @param limitPagingCounts Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2ActivitiesCallsJsonGetCall(List<Integer> ids, List<String> createdAt, List<String> updatedAt, List<String> userGuid, List<Integer> personId, List<String> sentiment, List<String> disposition, String sortBy, String sortDirection, Integer perPage, Integer page, Boolean includePagingCounts, Boolean limitPagingCounts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/activities/calls.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "ids", ids));
        }

        if (createdAt != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "created_at", createdAt));
        }

        if (updatedAt != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "updated_at", updatedAt));
        }

        if (userGuid != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user_guid", userGuid));
        }

        if (personId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "person_id", personId));
        }

        if (sentiment != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "sentiment", sentiment));
        }

        if (disposition != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "disposition", disposition));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_direction", sortDirection));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (includePagingCounts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_paging_counts", includePagingCounts));
        }

        if (limitPagingCounts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit_paging_counts", limitPagingCounts));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2ActivitiesCallsJsonGetValidateBeforeCall(List<Integer> ids, List<String> createdAt, List<String> updatedAt, List<String> userGuid, List<Integer> personId, List<String> sentiment, List<String> disposition, String sortBy, String sortDirection, Integer perPage, Integer page, Boolean includePagingCounts, Boolean limitPagingCounts, final ApiCallback _callback) throws ApiException {
        return v2ActivitiesCallsJsonGetCall(ids, createdAt, updatedAt, userGuid, personId, sentiment, disposition, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts, _callback);

    }

    /**
     * List calls
     * Fetches multiple call records. The records can be filtered, paged, and sorted according to the respective parameters. 
     * @param ids IDs of calls to fetch. If a record can&#39;t be found, that record won&#39;t be returned and your request will be successful (optional)
     * @param createdAt Equality filters that are applied to the created_at field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param updatedAt Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param userGuid Filters list to only include guids (optional)
     * @param personId Filters calls by person_id. Multiple person ids can be applied (optional)
     * @param sentiment Filters calls by sentiment. Sentiment matches are exact and case sensitive. Multiple sentiments are allowed. (optional)
     * @param disposition Filters calls by disposition. Disposition matches are exact and case sensitive. Multiple dispositions are allowed. (optional)
     * @param sortBy Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at (optional)
     * @param sortDirection Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @param page The current page to fetch results from. Defaults to 1 (optional)
     * @param includePagingCounts Whether to include total_pages and total_count in the metadata. Defaults to false (optional)
     * @param limitPagingCounts Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)
     * @return List&lt;Call&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<Call> v2ActivitiesCallsJsonGet(List<Integer> ids, List<String> createdAt, List<String> updatedAt, List<String> userGuid, List<Integer> personId, List<String> sentiment, List<String> disposition, String sortBy, String sortDirection, Integer perPage, Integer page, Boolean includePagingCounts, Boolean limitPagingCounts) throws ApiException {
        ApiResponse<List<Call>> localVarResp = v2ActivitiesCallsJsonGetWithHttpInfo(ids, createdAt, updatedAt, userGuid, personId, sentiment, disposition, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts);
        return localVarResp.getData();
    }

    /**
     * List calls
     * Fetches multiple call records. The records can be filtered, paged, and sorted according to the respective parameters. 
     * @param ids IDs of calls to fetch. If a record can&#39;t be found, that record won&#39;t be returned and your request will be successful (optional)
     * @param createdAt Equality filters that are applied to the created_at field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param updatedAt Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param userGuid Filters list to only include guids (optional)
     * @param personId Filters calls by person_id. Multiple person ids can be applied (optional)
     * @param sentiment Filters calls by sentiment. Sentiment matches are exact and case sensitive. Multiple sentiments are allowed. (optional)
     * @param disposition Filters calls by disposition. Disposition matches are exact and case sensitive. Multiple dispositions are allowed. (optional)
     * @param sortBy Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at (optional)
     * @param sortDirection Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @param page The current page to fetch results from. Defaults to 1 (optional)
     * @param includePagingCounts Whether to include total_pages and total_count in the metadata. Defaults to false (optional)
     * @param limitPagingCounts Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)
     * @return ApiResponse&lt;List&lt;Call&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Call>> v2ActivitiesCallsJsonGetWithHttpInfo(List<Integer> ids, List<String> createdAt, List<String> updatedAt, List<String> userGuid, List<Integer> personId, List<String> sentiment, List<String> disposition, String sortBy, String sortDirection, Integer perPage, Integer page, Boolean includePagingCounts, Boolean limitPagingCounts) throws ApiException {
        okhttp3.Call localVarCall = v2ActivitiesCallsJsonGetValidateBeforeCall(ids, createdAt, updatedAt, userGuid, personId, sentiment, disposition, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts, null);
        Type localVarReturnType = new TypeToken<List<Call>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List calls (asynchronously)
     * Fetches multiple call records. The records can be filtered, paged, and sorted according to the respective parameters. 
     * @param ids IDs of calls to fetch. If a record can&#39;t be found, that record won&#39;t be returned and your request will be successful (optional)
     * @param createdAt Equality filters that are applied to the created_at field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param updatedAt Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param userGuid Filters list to only include guids (optional)
     * @param personId Filters calls by person_id. Multiple person ids can be applied (optional)
     * @param sentiment Filters calls by sentiment. Sentiment matches are exact and case sensitive. Multiple sentiments are allowed. (optional)
     * @param disposition Filters calls by disposition. Disposition matches are exact and case sensitive. Multiple dispositions are allowed. (optional)
     * @param sortBy Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at (optional)
     * @param sortDirection Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @param page The current page to fetch results from. Defaults to 1 (optional)
     * @param includePagingCounts Whether to include total_pages and total_count in the metadata. Defaults to false (optional)
     * @param limitPagingCounts Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2ActivitiesCallsJsonGetAsync(List<Integer> ids, List<String> createdAt, List<String> updatedAt, List<String> userGuid, List<Integer> personId, List<String> sentiment, List<String> disposition, String sortBy, String sortDirection, Integer perPage, Integer page, Boolean includePagingCounts, Boolean limitPagingCounts, final ApiCallback<List<Call>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2ActivitiesCallsJsonGetValidateBeforeCall(ids, createdAt, updatedAt, userGuid, personId, sentiment, disposition, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts, _callback);
        Type localVarReturnType = new TypeToken<List<Call>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2ActivitiesCallsJsonPost
     * @param personId The ID of the person whom this call will be logged for (required)
     * @param actionId Action that this call is being logged for. This will validate that the action is still valid before completing it. The same action can never be successfully passed twice to this endpoint. The action must have a type of &#39;phone&#39;.  (optional)
     * @param crmParams CRM specific parameters. Some parameters are required on a per-team basis. Consume the CrmActivityFields endpoint to receive a list of valid parameters. The \\\&quot;field\\\&quot; property is passed as the key of this object, and the value of this object is the value that you would like to set.  If CrmActivityField has a non-null value, then that value must be submitted, or excluded from API calls, as these values are automatically applied.  (optional)
     * @param disposition The disposition of the call. Can be required on a per-team basis. Must be present in the disposition list. (optional)
     * @param duration The length of the call, in seconds (optional)
     * @param linkedCallDataRecordIds CallDataRecord associations that will become linked to the created call. It is possible to pass multiple CallDataRecord ids in this field; this can be used to represent multiple phone calls that made up a single call.  Any call data record that is used must not already be linked to a call. It is not possible to link a call data record to multiple calls, and it is not possible to re-assign a call data record to a different call.  (optional)
     * @param notes Notes to log for the call. This is similar to the notes endpoint, but ensures that the notes get synced to the user&#39;s CRM (optional)
     * @param sentiment The sentiment of the call. Can be required on a per-team basis. Must be present in the sentiment list. (optional)
     * @param to The phone number that was called (optional)
     * @param userGuid Guid of the user whom this call should be logged for. Defaults to the authenticated user. Only team admins can pass another user&#39;s guid (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2ActivitiesCallsJsonPostCall(Integer personId, Integer actionId, Object crmParams, String disposition, Integer duration, List<Integer> linkedCallDataRecordIds, String notes, String sentiment, String to, String userGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/activities/calls.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (actionId != null) {
            localVarFormParams.put("action_id", actionId);
        }

        if (crmParams != null) {
            localVarFormParams.put("crm_params", crmParams);
        }

        if (disposition != null) {
            localVarFormParams.put("disposition", disposition);
        }

        if (duration != null) {
            localVarFormParams.put("duration", duration);
        }

        if (linkedCallDataRecordIds != null) {
            localVarFormParams.put("linked_call_data_record_ids", linkedCallDataRecordIds);
        }

        if (notes != null) {
            localVarFormParams.put("notes", notes);
        }

        if (personId != null) {
            localVarFormParams.put("person_id", personId);
        }

        if (sentiment != null) {
            localVarFormParams.put("sentiment", sentiment);
        }

        if (to != null) {
            localVarFormParams.put("to", to);
        }

        if (userGuid != null) {
            localVarFormParams.put("user_guid", userGuid);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2ActivitiesCallsJsonPostValidateBeforeCall(Integer personId, Integer actionId, Object crmParams, String disposition, Integer duration, List<Integer> linkedCallDataRecordIds, String notes, String sentiment, String to, String userGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling v2ActivitiesCallsJsonPost(Async)");
        }

        return v2ActivitiesCallsJsonPostCall(personId, actionId, crmParams, disposition, duration, linkedCallDataRecordIds, notes, sentiment, to, userGuid, _callback);

    }

    /**
     * Create a call
     * Creates a call. The parameters of this endpoint can be used to create an action and ensure that the CRM Task is mapped correctly. 
     * @param personId The ID of the person whom this call will be logged for (required)
     * @param actionId Action that this call is being logged for. This will validate that the action is still valid before completing it. The same action can never be successfully passed twice to this endpoint. The action must have a type of &#39;phone&#39;.  (optional)
     * @param crmParams CRM specific parameters. Some parameters are required on a per-team basis. Consume the CrmActivityFields endpoint to receive a list of valid parameters. The \\\&quot;field\\\&quot; property is passed as the key of this object, and the value of this object is the value that you would like to set.  If CrmActivityField has a non-null value, then that value must be submitted, or excluded from API calls, as these values are automatically applied.  (optional)
     * @param disposition The disposition of the call. Can be required on a per-team basis. Must be present in the disposition list. (optional)
     * @param duration The length of the call, in seconds (optional)
     * @param linkedCallDataRecordIds CallDataRecord associations that will become linked to the created call. It is possible to pass multiple CallDataRecord ids in this field; this can be used to represent multiple phone calls that made up a single call.  Any call data record that is used must not already be linked to a call. It is not possible to link a call data record to multiple calls, and it is not possible to re-assign a call data record to a different call.  (optional)
     * @param notes Notes to log for the call. This is similar to the notes endpoint, but ensures that the notes get synced to the user&#39;s CRM (optional)
     * @param sentiment The sentiment of the call. Can be required on a per-team basis. Must be present in the sentiment list. (optional)
     * @param to The phone number that was called (optional)
     * @param userGuid Guid of the user whom this call should be logged for. Defaults to the authenticated user. Only team admins can pass another user&#39;s guid (optional)
     * @return Call
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Call v2ActivitiesCallsJsonPost(Integer personId, Integer actionId, Object crmParams, String disposition, Integer duration, List<Integer> linkedCallDataRecordIds, String notes, String sentiment, String to, String userGuid) throws ApiException {
        ApiResponse<Call> localVarResp = v2ActivitiesCallsJsonPostWithHttpInfo(personId, actionId, crmParams, disposition, duration, linkedCallDataRecordIds, notes, sentiment, to, userGuid);
        return localVarResp.getData();
    }

    /**
     * Create a call
     * Creates a call. The parameters of this endpoint can be used to create an action and ensure that the CRM Task is mapped correctly. 
     * @param personId The ID of the person whom this call will be logged for (required)
     * @param actionId Action that this call is being logged for. This will validate that the action is still valid before completing it. The same action can never be successfully passed twice to this endpoint. The action must have a type of &#39;phone&#39;.  (optional)
     * @param crmParams CRM specific parameters. Some parameters are required on a per-team basis. Consume the CrmActivityFields endpoint to receive a list of valid parameters. The \\\&quot;field\\\&quot; property is passed as the key of this object, and the value of this object is the value that you would like to set.  If CrmActivityField has a non-null value, then that value must be submitted, or excluded from API calls, as these values are automatically applied.  (optional)
     * @param disposition The disposition of the call. Can be required on a per-team basis. Must be present in the disposition list. (optional)
     * @param duration The length of the call, in seconds (optional)
     * @param linkedCallDataRecordIds CallDataRecord associations that will become linked to the created call. It is possible to pass multiple CallDataRecord ids in this field; this can be used to represent multiple phone calls that made up a single call.  Any call data record that is used must not already be linked to a call. It is not possible to link a call data record to multiple calls, and it is not possible to re-assign a call data record to a different call.  (optional)
     * @param notes Notes to log for the call. This is similar to the notes endpoint, but ensures that the notes get synced to the user&#39;s CRM (optional)
     * @param sentiment The sentiment of the call. Can be required on a per-team basis. Must be present in the sentiment list. (optional)
     * @param to The phone number that was called (optional)
     * @param userGuid Guid of the user whom this call should be logged for. Defaults to the authenticated user. Only team admins can pass another user&#39;s guid (optional)
     * @return ApiResponse&lt;Call&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Call> v2ActivitiesCallsJsonPostWithHttpInfo(Integer personId, Integer actionId, Object crmParams, String disposition, Integer duration, List<Integer> linkedCallDataRecordIds, String notes, String sentiment, String to, String userGuid) throws ApiException {
        okhttp3.Call localVarCall = v2ActivitiesCallsJsonPostValidateBeforeCall(personId, actionId, crmParams, disposition, duration, linkedCallDataRecordIds, notes, sentiment, to, userGuid, null);
        Type localVarReturnType = new TypeToken<Call>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a call (asynchronously)
     * Creates a call. The parameters of this endpoint can be used to create an action and ensure that the CRM Task is mapped correctly. 
     * @param personId The ID of the person whom this call will be logged for (required)
     * @param actionId Action that this call is being logged for. This will validate that the action is still valid before completing it. The same action can never be successfully passed twice to this endpoint. The action must have a type of &#39;phone&#39;.  (optional)
     * @param crmParams CRM specific parameters. Some parameters are required on a per-team basis. Consume the CrmActivityFields endpoint to receive a list of valid parameters. The \\\&quot;field\\\&quot; property is passed as the key of this object, and the value of this object is the value that you would like to set.  If CrmActivityField has a non-null value, then that value must be submitted, or excluded from API calls, as these values are automatically applied.  (optional)
     * @param disposition The disposition of the call. Can be required on a per-team basis. Must be present in the disposition list. (optional)
     * @param duration The length of the call, in seconds (optional)
     * @param linkedCallDataRecordIds CallDataRecord associations that will become linked to the created call. It is possible to pass multiple CallDataRecord ids in this field; this can be used to represent multiple phone calls that made up a single call.  Any call data record that is used must not already be linked to a call. It is not possible to link a call data record to multiple calls, and it is not possible to re-assign a call data record to a different call.  (optional)
     * @param notes Notes to log for the call. This is similar to the notes endpoint, but ensures that the notes get synced to the user&#39;s CRM (optional)
     * @param sentiment The sentiment of the call. Can be required on a per-team basis. Must be present in the sentiment list. (optional)
     * @param to The phone number that was called (optional)
     * @param userGuid Guid of the user whom this call should be logged for. Defaults to the authenticated user. Only team admins can pass another user&#39;s guid (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2ActivitiesCallsJsonPostAsync(Integer personId, Integer actionId, Object crmParams, String disposition, Integer duration, List<Integer> linkedCallDataRecordIds, String notes, String sentiment, String to, String userGuid, final ApiCallback<Call> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2ActivitiesCallsJsonPostValidateBeforeCall(personId, actionId, crmParams, disposition, duration, linkedCallDataRecordIds, notes, sentiment, to, userGuid, _callback);
        Type localVarReturnType = new TypeToken<Call>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
