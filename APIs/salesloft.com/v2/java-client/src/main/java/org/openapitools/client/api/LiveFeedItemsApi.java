/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.LiveFeedItem;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LiveFeedItemsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LiveFeedItemsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LiveFeedItemsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v2ThirdPartyLiveFeedItemsPost
     * @param eventOccurredAt Equality filters that are applied to the event_occurred_at field. A single filter can be used by itself or combined with other filters to create a range. ---CUSTOM--- {\\\&quot;keys\\\&quot;:[{\\\&quot;description\\\&quot;:\\\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;gt\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;iso8601 string\\\&quot;},{\\\&quot;description\\\&quot;:\\\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;gte\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;iso8601 string\\\&quot;},{\\\&quot;description\\\&quot;:\\\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;lt\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;iso8601 string\\\&quot;},{\\\&quot;description\\\&quot;:\\\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;lte\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;iso8601 string\\\&quot;}],\\\&quot;type\\\&quot;:\\\&quot;object\\\&quot;}  (required)
     * @param idempotencyKey Uniquely provided string specific to this event. This should be a value which can&#39;t be duplicated between external systems, meaning that an id is not sufficient. (required)
     * @param message The message that relates to the subject. This message should start with a lower-case past-tense verb and end with a period (e.g. \\\&quot;received a package.\\\&quot;). When live feed items are displayed to users, the subject&#39;s name is concatenated with the message and a joining space. Only &lt;a&gt; HTML tags with an \\\&quot;href\\\&quot; attribute are allowed. Other attributes and tags will be stripped. (required)
     * @param subjectId The ID of the subject of the live feed item (i.e. the \\\&quot;person\\\&quot; id). (required)
     * @param subjectType The type of the subject of the live feed item. Currently only \\\&quot;person\\\&quot; is supported. (required)
     * @param userGuid The guid for the user that this live feed item should be shown to. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2ThirdPartyLiveFeedItemsPostCall(String eventOccurredAt, String idempotencyKey, String message, Integer subjectId, String subjectType, String userGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/third_party_live_feed_items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eventOccurredAt != null) {
            localVarFormParams.put("event_occurred_at", eventOccurredAt);
        }

        if (idempotencyKey != null) {
            localVarFormParams.put("idempotency_key", idempotencyKey);
        }

        if (message != null) {
            localVarFormParams.put("message", message);
        }

        if (subjectId != null) {
            localVarFormParams.put("subject_id", subjectId);
        }

        if (subjectType != null) {
            localVarFormParams.put("subject_type", subjectType);
        }

        if (userGuid != null) {
            localVarFormParams.put("user_guid", userGuid);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2ThirdPartyLiveFeedItemsPostValidateBeforeCall(String eventOccurredAt, String idempotencyKey, String message, Integer subjectId, String subjectType, String userGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventOccurredAt' is set
        if (eventOccurredAt == null) {
            throw new ApiException("Missing the required parameter 'eventOccurredAt' when calling v2ThirdPartyLiveFeedItemsPost(Async)");
        }

        // verify the required parameter 'idempotencyKey' is set
        if (idempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'idempotencyKey' when calling v2ThirdPartyLiveFeedItemsPost(Async)");
        }

        // verify the required parameter 'message' is set
        if (message == null) {
            throw new ApiException("Missing the required parameter 'message' when calling v2ThirdPartyLiveFeedItemsPost(Async)");
        }

        // verify the required parameter 'subjectId' is set
        if (subjectId == null) {
            throw new ApiException("Missing the required parameter 'subjectId' when calling v2ThirdPartyLiveFeedItemsPost(Async)");
        }

        // verify the required parameter 'subjectType' is set
        if (subjectType == null) {
            throw new ApiException("Missing the required parameter 'subjectType' when calling v2ThirdPartyLiveFeedItemsPost(Async)");
        }

        // verify the required parameter 'userGuid' is set
        if (userGuid == null) {
            throw new ApiException("Missing the required parameter 'userGuid' when calling v2ThirdPartyLiveFeedItemsPost(Async)");
        }

        return v2ThirdPartyLiveFeedItemsPostCall(eventOccurredAt, idempotencyKey, message, subjectId, subjectType, userGuid, _callback);

    }

    /**
     * Create a live feed item
     * Creates a live feed item that can be sent to users. May only be used by whitelisted Frontend Integrations. Reference the Salesloft App Directory and Frontend Integrations sections for additional details.
     * @param eventOccurredAt Equality filters that are applied to the event_occurred_at field. A single filter can be used by itself or combined with other filters to create a range. ---CUSTOM--- {\\\&quot;keys\\\&quot;:[{\\\&quot;description\\\&quot;:\\\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;gt\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;iso8601 string\\\&quot;},{\\\&quot;description\\\&quot;:\\\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;gte\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;iso8601 string\\\&quot;},{\\\&quot;description\\\&quot;:\\\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;lt\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;iso8601 string\\\&quot;},{\\\&quot;description\\\&quot;:\\\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;lte\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;iso8601 string\\\&quot;}],\\\&quot;type\\\&quot;:\\\&quot;object\\\&quot;}  (required)
     * @param idempotencyKey Uniquely provided string specific to this event. This should be a value which can&#39;t be duplicated between external systems, meaning that an id is not sufficient. (required)
     * @param message The message that relates to the subject. This message should start with a lower-case past-tense verb and end with a period (e.g. \\\&quot;received a package.\\\&quot;). When live feed items are displayed to users, the subject&#39;s name is concatenated with the message and a joining space. Only &lt;a&gt; HTML tags with an \\\&quot;href\\\&quot; attribute are allowed. Other attributes and tags will be stripped. (required)
     * @param subjectId The ID of the subject of the live feed item (i.e. the \\\&quot;person\\\&quot; id). (required)
     * @param subjectType The type of the subject of the live feed item. Currently only \\\&quot;person\\\&quot; is supported. (required)
     * @param userGuid The guid for the user that this live feed item should be shown to. (required)
     * @return List&lt;LiveFeedItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<LiveFeedItem> v2ThirdPartyLiveFeedItemsPost(String eventOccurredAt, String idempotencyKey, String message, Integer subjectId, String subjectType, String userGuid) throws ApiException {
        ApiResponse<List<LiveFeedItem>> localVarResp = v2ThirdPartyLiveFeedItemsPostWithHttpInfo(eventOccurredAt, idempotencyKey, message, subjectId, subjectType, userGuid);
        return localVarResp.getData();
    }

    /**
     * Create a live feed item
     * Creates a live feed item that can be sent to users. May only be used by whitelisted Frontend Integrations. Reference the Salesloft App Directory and Frontend Integrations sections for additional details.
     * @param eventOccurredAt Equality filters that are applied to the event_occurred_at field. A single filter can be used by itself or combined with other filters to create a range. ---CUSTOM--- {\\\&quot;keys\\\&quot;:[{\\\&quot;description\\\&quot;:\\\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;gt\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;iso8601 string\\\&quot;},{\\\&quot;description\\\&quot;:\\\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;gte\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;iso8601 string\\\&quot;},{\\\&quot;description\\\&quot;:\\\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;lt\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;iso8601 string\\\&quot;},{\\\&quot;description\\\&quot;:\\\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;lte\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;iso8601 string\\\&quot;}],\\\&quot;type\\\&quot;:\\\&quot;object\\\&quot;}  (required)
     * @param idempotencyKey Uniquely provided string specific to this event. This should be a value which can&#39;t be duplicated between external systems, meaning that an id is not sufficient. (required)
     * @param message The message that relates to the subject. This message should start with a lower-case past-tense verb and end with a period (e.g. \\\&quot;received a package.\\\&quot;). When live feed items are displayed to users, the subject&#39;s name is concatenated with the message and a joining space. Only &lt;a&gt; HTML tags with an \\\&quot;href\\\&quot; attribute are allowed. Other attributes and tags will be stripped. (required)
     * @param subjectId The ID of the subject of the live feed item (i.e. the \\\&quot;person\\\&quot; id). (required)
     * @param subjectType The type of the subject of the live feed item. Currently only \\\&quot;person\\\&quot; is supported. (required)
     * @param userGuid The guid for the user that this live feed item should be shown to. (required)
     * @return ApiResponse&lt;List&lt;LiveFeedItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LiveFeedItem>> v2ThirdPartyLiveFeedItemsPostWithHttpInfo(String eventOccurredAt, String idempotencyKey, String message, Integer subjectId, String subjectType, String userGuid) throws ApiException {
        okhttp3.Call localVarCall = v2ThirdPartyLiveFeedItemsPostValidateBeforeCall(eventOccurredAt, idempotencyKey, message, subjectId, subjectType, userGuid, null);
        Type localVarReturnType = new TypeToken<List<LiveFeedItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a live feed item (asynchronously)
     * Creates a live feed item that can be sent to users. May only be used by whitelisted Frontend Integrations. Reference the Salesloft App Directory and Frontend Integrations sections for additional details.
     * @param eventOccurredAt Equality filters that are applied to the event_occurred_at field. A single filter can be used by itself or combined with other filters to create a range. ---CUSTOM--- {\\\&quot;keys\\\&quot;:[{\\\&quot;description\\\&quot;:\\\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;gt\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;iso8601 string\\\&quot;},{\\\&quot;description\\\&quot;:\\\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;gte\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;iso8601 string\\\&quot;},{\\\&quot;description\\\&quot;:\\\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;lt\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;iso8601 string\\\&quot;},{\\\&quot;description\\\&quot;:\\\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\\\&quot;,\\\&quot;name\\\&quot;:\\\&quot;lte\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;iso8601 string\\\&quot;}],\\\&quot;type\\\&quot;:\\\&quot;object\\\&quot;}  (required)
     * @param idempotencyKey Uniquely provided string specific to this event. This should be a value which can&#39;t be duplicated between external systems, meaning that an id is not sufficient. (required)
     * @param message The message that relates to the subject. This message should start with a lower-case past-tense verb and end with a period (e.g. \\\&quot;received a package.\\\&quot;). When live feed items are displayed to users, the subject&#39;s name is concatenated with the message and a joining space. Only &lt;a&gt; HTML tags with an \\\&quot;href\\\&quot; attribute are allowed. Other attributes and tags will be stripped. (required)
     * @param subjectId The ID of the subject of the live feed item (i.e. the \\\&quot;person\\\&quot; id). (required)
     * @param subjectType The type of the subject of the live feed item. Currently only \\\&quot;person\\\&quot; is supported. (required)
     * @param userGuid The guid for the user that this live feed item should be shown to. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2ThirdPartyLiveFeedItemsPostAsync(String eventOccurredAt, String idempotencyKey, String message, Integer subjectId, String subjectType, String userGuid, final ApiCallback<List<LiveFeedItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2ThirdPartyLiveFeedItemsPostValidateBeforeCall(eventOccurredAt, idempotencyKey, message, subjectId, subjectType, userGuid, _callback);
        Type localVarReturnType = new TypeToken<List<LiveFeedItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
