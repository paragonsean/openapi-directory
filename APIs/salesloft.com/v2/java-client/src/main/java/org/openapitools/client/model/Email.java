/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.EmailCounts;
import org.openapitools.client.model.EmbeddedResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Email
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:54.467506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Email {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private EmbeddedResource action;

  public static final String SERIALIZED_NAME_BOUNCED = "bounced";
  @SerializedName(SERIALIZED_NAME_BOUNCED)
  private Boolean bounced;

  public static final String SERIALIZED_NAME_CADENCE = "cadence";
  @SerializedName(SERIALIZED_NAME_CADENCE)
  private EmbeddedResource cadence;

  public static final String SERIALIZED_NAME_CLICK_TRACKING = "click_tracking";
  @SerializedName(SERIALIZED_NAME_CLICK_TRACKING)
  private Boolean clickTracking;

  public static final String SERIALIZED_NAME_COUNTS = "counts";
  @SerializedName(SERIALIZED_NAME_COUNTS)
  private EmailCounts counts;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CRM_ACTIVITY = "crm_activity";
  @SerializedName(SERIALIZED_NAME_CRM_ACTIVITY)
  private EmbeddedResource crmActivity;

  public static final String SERIALIZED_NAME_EMAIL_TEMPLATE = "email_template";
  @SerializedName(SERIALIZED_NAME_EMAIL_TEMPLATE)
  private EmbeddedResource emailTemplate;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "error_message";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private Object headers;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_MAILING = "mailing";
  @SerializedName(SERIALIZED_NAME_MAILING)
  private EmbeddedResource mailing;

  public static final String SERIALIZED_NAME_PERSONALIZATION = "personalization";
  @SerializedName(SERIALIZED_NAME_PERSONALIZATION)
  private String personalization;

  public static final String SERIALIZED_NAME_RECIPIENT = "recipient";
  @SerializedName(SERIALIZED_NAME_RECIPIENT)
  private EmbeddedResource recipient;

  public static final String SERIALIZED_NAME_RECIPIENT_EMAIL_ADDRESS = "recipient_email_address";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_EMAIL_ADDRESS)
  private String recipientEmailAddress;

  public static final String SERIALIZED_NAME_SEND_AFTER = "send_after";
  @SerializedName(SERIALIZED_NAME_SEND_AFTER)
  private OffsetDateTime sendAfter;

  public static final String SERIALIZED_NAME_SENT_AT = "sent_at";
  @SerializedName(SERIALIZED_NAME_SENT_AT)
  private OffsetDateTime sentAt;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_STEP = "step";
  @SerializedName(SERIALIZED_NAME_STEP)
  private EmbeddedResource step;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_TASK = "task";
  @SerializedName(SERIALIZED_NAME_TASK)
  private EmbeddedResource task;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private EmbeddedResource user;

  public static final String SERIALIZED_NAME_VIEW_TRACKING = "view_tracking";
  @SerializedName(SERIALIZED_NAME_VIEW_TRACKING)
  private Boolean viewTracking;

  public Email() {
  }

  public Email action(EmbeddedResource action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nullable
  public EmbeddedResource getAction() {
    return action;
  }

  public void setAction(EmbeddedResource action) {
    this.action = action;
  }


  public Email bounced(Boolean bounced) {
    this.bounced = bounced;
    return this;
  }

  /**
   * Whether this email bounced
   * @return bounced
   */
  @javax.annotation.Nullable
  public Boolean getBounced() {
    return bounced;
  }

  public void setBounced(Boolean bounced) {
    this.bounced = bounced;
  }


  public Email cadence(EmbeddedResource cadence) {
    this.cadence = cadence;
    return this;
  }

  /**
   * Get cadence
   * @return cadence
   */
  @javax.annotation.Nullable
  public EmbeddedResource getCadence() {
    return cadence;
  }

  public void setCadence(EmbeddedResource cadence) {
    this.cadence = cadence;
  }


  public Email clickTracking(Boolean clickTracking) {
    this.clickTracking = clickTracking;
    return this;
  }

  /**
   * Whether this email had click tracking enabled
   * @return clickTracking
   */
  @javax.annotation.Nullable
  public Boolean getClickTracking() {
    return clickTracking;
  }

  public void setClickTracking(Boolean clickTracking) {
    this.clickTracking = clickTracking;
  }


  public Email counts(EmailCounts counts) {
    this.counts = counts;
    return this;
  }

  /**
   * Get counts
   * @return counts
   */
  @javax.annotation.Nullable
  public EmailCounts getCounts() {
    return counts;
  }

  public void setCounts(EmailCounts counts) {
    this.counts = counts;
  }


  public Email createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Datetime of when the email was created
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Email crmActivity(EmbeddedResource crmActivity) {
    this.crmActivity = crmActivity;
    return this;
  }

  /**
   * Get crmActivity
   * @return crmActivity
   */
  @javax.annotation.Nullable
  public EmbeddedResource getCrmActivity() {
    return crmActivity;
  }

  public void setCrmActivity(EmbeddedResource crmActivity) {
    this.crmActivity = crmActivity;
  }


  public Email emailTemplate(EmbeddedResource emailTemplate) {
    this.emailTemplate = emailTemplate;
    return this;
  }

  /**
   * Get emailTemplate
   * @return emailTemplate
   */
  @javax.annotation.Nullable
  public EmbeddedResource getEmailTemplate() {
    return emailTemplate;
  }

  public void setEmailTemplate(EmbeddedResource emailTemplate) {
    this.emailTemplate = emailTemplate;
  }


  public Email errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * Error message of the email. This field has been determined sensitive and requires a specific scope to access it.
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public Email headers(Object headers) {
    this.headers = headers;
    return this;
  }

  /**
   * Selected headers that are included if this email used them. Available keys are: cc, bcc
   * @return headers
   */
  @javax.annotation.Nullable
  public Object getHeaders() {
    return headers;
  }

  public void setHeaders(Object headers) {
    this.headers = headers;
  }


  public Email id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * ID of Email
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Email mailing(EmbeddedResource mailing) {
    this.mailing = mailing;
    return this;
  }

  /**
   * Get mailing
   * @return mailing
   */
  @javax.annotation.Nullable
  public EmbeddedResource getMailing() {
    return mailing;
  }

  public void setMailing(EmbeddedResource mailing) {
    this.mailing = mailing;
  }


  public Email personalization(String personalization) {
    this.personalization = personalization;
    return this;
  }

  /**
   * Percentage of this email that has been personalized
   * @return personalization
   */
  @javax.annotation.Nullable
  public String getPersonalization() {
    return personalization;
  }

  public void setPersonalization(String personalization) {
    this.personalization = personalization;
  }


  public Email recipient(EmbeddedResource recipient) {
    this.recipient = recipient;
    return this;
  }

  /**
   * Get recipient
   * @return recipient
   */
  @javax.annotation.Nullable
  public EmbeddedResource getRecipient() {
    return recipient;
  }

  public void setRecipient(EmbeddedResource recipient) {
    this.recipient = recipient;
  }


  public Email recipientEmailAddress(String recipientEmailAddress) {
    this.recipientEmailAddress = recipientEmailAddress;
    return this;
  }

  /**
   * Email address of the recipient
   * @return recipientEmailAddress
   */
  @javax.annotation.Nullable
  public String getRecipientEmailAddress() {
    return recipientEmailAddress;
  }

  public void setRecipientEmailAddress(String recipientEmailAddress) {
    this.recipientEmailAddress = recipientEmailAddress;
  }


  public Email sendAfter(OffsetDateTime sendAfter) {
    this.sendAfter = sendAfter;
    return this;
  }

  /**
   * When this email will be sent, or null if already sent
   * @return sendAfter
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSendAfter() {
    return sendAfter;
  }

  public void setSendAfter(OffsetDateTime sendAfter) {
    this.sendAfter = sendAfter;
  }


  public Email sentAt(OffsetDateTime sentAt) {
    this.sentAt = sentAt;
    return this;
  }

  /**
   * When this email was sent, or null if it was not sent
   * @return sentAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSentAt() {
    return sentAt;
  }

  public void setSentAt(OffsetDateTime sentAt) {
    this.sentAt = sentAt;
  }


  public Email status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Status of this email through the sending process. Possible values are: sent, sent_from_gmail, sent_from_external, pending, pending_reply_check, scheduled, sending, delivering, failed, cancelled, pending_through_gmail, pending_through_external
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Email step(EmbeddedResource step) {
    this.step = step;
    return this;
  }

  /**
   * Get step
   * @return step
   */
  @javax.annotation.Nullable
  public EmbeddedResource getStep() {
    return step;
  }

  public void setStep(EmbeddedResource step) {
    this.step = step;
  }


  public Email subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Subject of the email. This field has been determined sensitive and requires a specific scope to access it.
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public Email task(EmbeddedResource task) {
    this.task = task;
    return this;
  }

  /**
   * Get task
   * @return task
   */
  @javax.annotation.Nullable
  public EmbeddedResource getTask() {
    return task;
  }

  public void setTask(EmbeddedResource task) {
    this.task = task;
  }


  public Email updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Datetime of when the email was last updated
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Email user(EmbeddedResource user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public EmbeddedResource getUser() {
    return user;
  }

  public void setUser(EmbeddedResource user) {
    this.user = user;
  }


  public Email viewTracking(Boolean viewTracking) {
    this.viewTracking = viewTracking;
    return this;
  }

  /**
   * Whether this email had view tracking enabled
   * @return viewTracking
   */
  @javax.annotation.Nullable
  public Boolean getViewTracking() {
    return viewTracking;
  }

  public void setViewTracking(Boolean viewTracking) {
    this.viewTracking = viewTracking;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Email email = (Email) o;
    return Objects.equals(this.action, email.action) &&
        Objects.equals(this.bounced, email.bounced) &&
        Objects.equals(this.cadence, email.cadence) &&
        Objects.equals(this.clickTracking, email.clickTracking) &&
        Objects.equals(this.counts, email.counts) &&
        Objects.equals(this.createdAt, email.createdAt) &&
        Objects.equals(this.crmActivity, email.crmActivity) &&
        Objects.equals(this.emailTemplate, email.emailTemplate) &&
        Objects.equals(this.errorMessage, email.errorMessage) &&
        Objects.equals(this.headers, email.headers) &&
        Objects.equals(this.id, email.id) &&
        Objects.equals(this.mailing, email.mailing) &&
        Objects.equals(this.personalization, email.personalization) &&
        Objects.equals(this.recipient, email.recipient) &&
        Objects.equals(this.recipientEmailAddress, email.recipientEmailAddress) &&
        Objects.equals(this.sendAfter, email.sendAfter) &&
        Objects.equals(this.sentAt, email.sentAt) &&
        Objects.equals(this.status, email.status) &&
        Objects.equals(this.step, email.step) &&
        Objects.equals(this.subject, email.subject) &&
        Objects.equals(this.task, email.task) &&
        Objects.equals(this.updatedAt, email.updatedAt) &&
        Objects.equals(this.user, email.user) &&
        Objects.equals(this.viewTracking, email.viewTracking);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, bounced, cadence, clickTracking, counts, createdAt, crmActivity, emailTemplate, errorMessage, headers, id, mailing, personalization, recipient, recipientEmailAddress, sendAfter, sentAt, status, step, subject, task, updatedAt, user, viewTracking);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Email {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    bounced: ").append(toIndentedString(bounced)).append("\n");
    sb.append("    cadence: ").append(toIndentedString(cadence)).append("\n");
    sb.append("    clickTracking: ").append(toIndentedString(clickTracking)).append("\n");
    sb.append("    counts: ").append(toIndentedString(counts)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    crmActivity: ").append(toIndentedString(crmActivity)).append("\n");
    sb.append("    emailTemplate: ").append(toIndentedString(emailTemplate)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    mailing: ").append(toIndentedString(mailing)).append("\n");
    sb.append("    personalization: ").append(toIndentedString(personalization)).append("\n");
    sb.append("    recipient: ").append(toIndentedString(recipient)).append("\n");
    sb.append("    recipientEmailAddress: ").append(toIndentedString(recipientEmailAddress)).append("\n");
    sb.append("    sendAfter: ").append(toIndentedString(sendAfter)).append("\n");
    sb.append("    sentAt: ").append(toIndentedString(sentAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    step: ").append(toIndentedString(step)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    task: ").append(toIndentedString(task)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    viewTracking: ").append(toIndentedString(viewTracking)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("bounced");
    openapiFields.add("cadence");
    openapiFields.add("click_tracking");
    openapiFields.add("counts");
    openapiFields.add("created_at");
    openapiFields.add("crm_activity");
    openapiFields.add("email_template");
    openapiFields.add("error_message");
    openapiFields.add("headers");
    openapiFields.add("id");
    openapiFields.add("mailing");
    openapiFields.add("personalization");
    openapiFields.add("recipient");
    openapiFields.add("recipient_email_address");
    openapiFields.add("send_after");
    openapiFields.add("sent_at");
    openapiFields.add("status");
    openapiFields.add("step");
    openapiFields.add("subject");
    openapiFields.add("task");
    openapiFields.add("updated_at");
    openapiFields.add("user");
    openapiFields.add("view_tracking");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Email
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Email.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Email is not found in the empty JSON string", Email.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Email.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Email` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `action`
      if (jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("action"));
      }
      // validate the optional field `cadence`
      if (jsonObj.get("cadence") != null && !jsonObj.get("cadence").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("cadence"));
      }
      // validate the optional field `counts`
      if (jsonObj.get("counts") != null && !jsonObj.get("counts").isJsonNull()) {
        EmailCounts.validateJsonElement(jsonObj.get("counts"));
      }
      // validate the optional field `crm_activity`
      if (jsonObj.get("crm_activity") != null && !jsonObj.get("crm_activity").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("crm_activity"));
      }
      // validate the optional field `email_template`
      if (jsonObj.get("email_template") != null && !jsonObj.get("email_template").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("email_template"));
      }
      if ((jsonObj.get("error_message") != null && !jsonObj.get("error_message").isJsonNull()) && !jsonObj.get("error_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error_message").toString()));
      }
      // validate the optional field `mailing`
      if (jsonObj.get("mailing") != null && !jsonObj.get("mailing").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("mailing"));
      }
      if ((jsonObj.get("personalization") != null && !jsonObj.get("personalization").isJsonNull()) && !jsonObj.get("personalization").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personalization` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personalization").toString()));
      }
      // validate the optional field `recipient`
      if (jsonObj.get("recipient") != null && !jsonObj.get("recipient").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("recipient"));
      }
      if ((jsonObj.get("recipient_email_address") != null && !jsonObj.get("recipient_email_address").isJsonNull()) && !jsonObj.get("recipient_email_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_email_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_email_address").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `step`
      if (jsonObj.get("step") != null && !jsonObj.get("step").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("step"));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      // validate the optional field `task`
      if (jsonObj.get("task") != null && !jsonObj.get("task").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("task"));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Email.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Email' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Email> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Email.class));

       return (TypeAdapter<T>) new TypeAdapter<Email>() {
           @Override
           public void write(JsonWriter out, Email value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Email read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Email given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Email
   * @throws IOException if the JSON string is invalid with respect to Email
   */
  public static Email fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Email.class);
  }

  /**
   * Convert an instance of Email to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

