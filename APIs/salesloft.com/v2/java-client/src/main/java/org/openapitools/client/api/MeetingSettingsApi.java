/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.MeetingSetting;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MeetingSettingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MeetingSettingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MeetingSettingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v2MeetingsSettingsIdJsonPut
     * @param id MeetingSetting ID (required)
     * @param allowBookingOnBehalf Allow other team members to schedule on you behalf. (optional)
     * @param allowBookingOvertime Allow team members to insert available time outside your working hours. (optional)
     * @param allowEventOverlap Allow team members to double book events on your calendar. (optional)
     * @param availabilityLimit The number of days out the user allows a prospect to schedule a meeting (optional)
     * @param availabilityLimitEnabled If Availability Limits have been turned on (optional)
     * @param bufferTimeDuration Default buffer duration in minutes set by a user (optional)
     * @param calendarType Calendar type (optional)
     * @param defaultMeetingLength Default meeting length in minutes set by the user (optional)
     * @param description Default description of the meeting (optional)
     * @param enableCalendarSync Determines if a user enabled Calendar Sync feature (optional)
     * @param enableDynamicLocation Determines if location will be filled via third-party service (Zoom, GoToMeeting, etc.) (optional)
     * @param location Default location of the meeting (optional)
     * @param primaryCalendarConnectionFailed Determines if the user lost calendar connection (optional)
     * @param primaryCalendarId ID of the primary calendar (optional)
     * @param primaryCalendarName Display name of the primary calendar (optional)
     * @param rescheduleMeetingsEnabled Determines if a user enabled reschedule meetings feature (optional)
     * @param scheduleBufferEnabled Determines if meetings are scheduled with a 15 minute buffer between them (optional)
     * @param scheduleDelay The number of hours in advance a user requires someone to a book a meeting with them (optional)
     * @param shareEventDetail Allow team members to see the details of events on your calendar. (optional)
     * @param timeZone Time zone for current calendar (optional)
     * @param timesAvailable Times available set by a user that can be used to book meetings (optional)
     * @param title Default title of the meeting (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2MeetingsSettingsIdJsonPutCall(String id, Boolean allowBookingOnBehalf, Boolean allowBookingOvertime, Boolean allowEventOverlap, Integer availabilityLimit, Boolean availabilityLimitEnabled, Integer bufferTimeDuration, String calendarType, Integer defaultMeetingLength, String description, Boolean enableCalendarSync, Boolean enableDynamicLocation, String location, Boolean primaryCalendarConnectionFailed, String primaryCalendarId, String primaryCalendarName, Boolean rescheduleMeetingsEnabled, Boolean scheduleBufferEnabled, Integer scheduleDelay, Boolean shareEventDetail, String timeZone, Object timesAvailable, String title, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/meetings/settings/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (allowBookingOnBehalf != null) {
            localVarFormParams.put("allow_booking_on_behalf", allowBookingOnBehalf);
        }

        if (allowBookingOvertime != null) {
            localVarFormParams.put("allow_booking_overtime", allowBookingOvertime);
        }

        if (allowEventOverlap != null) {
            localVarFormParams.put("allow_event_overlap", allowEventOverlap);
        }

        if (availabilityLimit != null) {
            localVarFormParams.put("availability_limit", availabilityLimit);
        }

        if (availabilityLimitEnabled != null) {
            localVarFormParams.put("availability_limit_enabled", availabilityLimitEnabled);
        }

        if (bufferTimeDuration != null) {
            localVarFormParams.put("buffer_time_duration", bufferTimeDuration);
        }

        if (calendarType != null) {
            localVarFormParams.put("calendar_type", calendarType);
        }

        if (defaultMeetingLength != null) {
            localVarFormParams.put("default_meeting_length", defaultMeetingLength);
        }

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (enableCalendarSync != null) {
            localVarFormParams.put("enable_calendar_sync", enableCalendarSync);
        }

        if (enableDynamicLocation != null) {
            localVarFormParams.put("enable_dynamic_location", enableDynamicLocation);
        }

        if (location != null) {
            localVarFormParams.put("location", location);
        }

        if (primaryCalendarConnectionFailed != null) {
            localVarFormParams.put("primary_calendar_connection_failed", primaryCalendarConnectionFailed);
        }

        if (primaryCalendarId != null) {
            localVarFormParams.put("primary_calendar_id", primaryCalendarId);
        }

        if (primaryCalendarName != null) {
            localVarFormParams.put("primary_calendar_name", primaryCalendarName);
        }

        if (rescheduleMeetingsEnabled != null) {
            localVarFormParams.put("reschedule_meetings_enabled", rescheduleMeetingsEnabled);
        }

        if (scheduleBufferEnabled != null) {
            localVarFormParams.put("schedule_buffer_enabled", scheduleBufferEnabled);
        }

        if (scheduleDelay != null) {
            localVarFormParams.put("schedule_delay", scheduleDelay);
        }

        if (shareEventDetail != null) {
            localVarFormParams.put("share_event_detail", shareEventDetail);
        }

        if (timeZone != null) {
            localVarFormParams.put("time_zone", timeZone);
        }

        if (timesAvailable != null) {
            localVarFormParams.put("times_available", timesAvailable);
        }

        if (title != null) {
            localVarFormParams.put("title", title);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2MeetingsSettingsIdJsonPutValidateBeforeCall(String id, Boolean allowBookingOnBehalf, Boolean allowBookingOvertime, Boolean allowEventOverlap, Integer availabilityLimit, Boolean availabilityLimitEnabled, Integer bufferTimeDuration, String calendarType, Integer defaultMeetingLength, String description, Boolean enableCalendarSync, Boolean enableDynamicLocation, String location, Boolean primaryCalendarConnectionFailed, String primaryCalendarId, String primaryCalendarName, Boolean rescheduleMeetingsEnabled, Boolean scheduleBufferEnabled, Integer scheduleDelay, Boolean shareEventDetail, String timeZone, Object timesAvailable, String title, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v2MeetingsSettingsIdJsonPut(Async)");
        }

        return v2MeetingsSettingsIdJsonPutCall(id, allowBookingOnBehalf, allowBookingOvertime, allowEventOverlap, availabilityLimit, availabilityLimitEnabled, bufferTimeDuration, calendarType, defaultMeetingLength, description, enableCalendarSync, enableDynamicLocation, location, primaryCalendarConnectionFailed, primaryCalendarId, primaryCalendarName, rescheduleMeetingsEnabled, scheduleBufferEnabled, scheduleDelay, shareEventDetail, timeZone, timesAvailable, title, _callback);

    }

    /**
     * Update a meeting setting
     * Updates a meeting setting, by ID only. 
     * @param id MeetingSetting ID (required)
     * @param allowBookingOnBehalf Allow other team members to schedule on you behalf. (optional)
     * @param allowBookingOvertime Allow team members to insert available time outside your working hours. (optional)
     * @param allowEventOverlap Allow team members to double book events on your calendar. (optional)
     * @param availabilityLimit The number of days out the user allows a prospect to schedule a meeting (optional)
     * @param availabilityLimitEnabled If Availability Limits have been turned on (optional)
     * @param bufferTimeDuration Default buffer duration in minutes set by a user (optional)
     * @param calendarType Calendar type (optional)
     * @param defaultMeetingLength Default meeting length in minutes set by the user (optional)
     * @param description Default description of the meeting (optional)
     * @param enableCalendarSync Determines if a user enabled Calendar Sync feature (optional)
     * @param enableDynamicLocation Determines if location will be filled via third-party service (Zoom, GoToMeeting, etc.) (optional)
     * @param location Default location of the meeting (optional)
     * @param primaryCalendarConnectionFailed Determines if the user lost calendar connection (optional)
     * @param primaryCalendarId ID of the primary calendar (optional)
     * @param primaryCalendarName Display name of the primary calendar (optional)
     * @param rescheduleMeetingsEnabled Determines if a user enabled reschedule meetings feature (optional)
     * @param scheduleBufferEnabled Determines if meetings are scheduled with a 15 minute buffer between them (optional)
     * @param scheduleDelay The number of hours in advance a user requires someone to a book a meeting with them (optional)
     * @param shareEventDetail Allow team members to see the details of events on your calendar. (optional)
     * @param timeZone Time zone for current calendar (optional)
     * @param timesAvailable Times available set by a user that can be used to book meetings (optional)
     * @param title Default title of the meeting (optional)
     * @return MeetingSetting
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public MeetingSetting v2MeetingsSettingsIdJsonPut(String id, Boolean allowBookingOnBehalf, Boolean allowBookingOvertime, Boolean allowEventOverlap, Integer availabilityLimit, Boolean availabilityLimitEnabled, Integer bufferTimeDuration, String calendarType, Integer defaultMeetingLength, String description, Boolean enableCalendarSync, Boolean enableDynamicLocation, String location, Boolean primaryCalendarConnectionFailed, String primaryCalendarId, String primaryCalendarName, Boolean rescheduleMeetingsEnabled, Boolean scheduleBufferEnabled, Integer scheduleDelay, Boolean shareEventDetail, String timeZone, Object timesAvailable, String title) throws ApiException {
        ApiResponse<MeetingSetting> localVarResp = v2MeetingsSettingsIdJsonPutWithHttpInfo(id, allowBookingOnBehalf, allowBookingOvertime, allowEventOverlap, availabilityLimit, availabilityLimitEnabled, bufferTimeDuration, calendarType, defaultMeetingLength, description, enableCalendarSync, enableDynamicLocation, location, primaryCalendarConnectionFailed, primaryCalendarId, primaryCalendarName, rescheduleMeetingsEnabled, scheduleBufferEnabled, scheduleDelay, shareEventDetail, timeZone, timesAvailable, title);
        return localVarResp.getData();
    }

    /**
     * Update a meeting setting
     * Updates a meeting setting, by ID only. 
     * @param id MeetingSetting ID (required)
     * @param allowBookingOnBehalf Allow other team members to schedule on you behalf. (optional)
     * @param allowBookingOvertime Allow team members to insert available time outside your working hours. (optional)
     * @param allowEventOverlap Allow team members to double book events on your calendar. (optional)
     * @param availabilityLimit The number of days out the user allows a prospect to schedule a meeting (optional)
     * @param availabilityLimitEnabled If Availability Limits have been turned on (optional)
     * @param bufferTimeDuration Default buffer duration in minutes set by a user (optional)
     * @param calendarType Calendar type (optional)
     * @param defaultMeetingLength Default meeting length in minutes set by the user (optional)
     * @param description Default description of the meeting (optional)
     * @param enableCalendarSync Determines if a user enabled Calendar Sync feature (optional)
     * @param enableDynamicLocation Determines if location will be filled via third-party service (Zoom, GoToMeeting, etc.) (optional)
     * @param location Default location of the meeting (optional)
     * @param primaryCalendarConnectionFailed Determines if the user lost calendar connection (optional)
     * @param primaryCalendarId ID of the primary calendar (optional)
     * @param primaryCalendarName Display name of the primary calendar (optional)
     * @param rescheduleMeetingsEnabled Determines if a user enabled reschedule meetings feature (optional)
     * @param scheduleBufferEnabled Determines if meetings are scheduled with a 15 minute buffer between them (optional)
     * @param scheduleDelay The number of hours in advance a user requires someone to a book a meeting with them (optional)
     * @param shareEventDetail Allow team members to see the details of events on your calendar. (optional)
     * @param timeZone Time zone for current calendar (optional)
     * @param timesAvailable Times available set by a user that can be used to book meetings (optional)
     * @param title Default title of the meeting (optional)
     * @return ApiResponse&lt;MeetingSetting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MeetingSetting> v2MeetingsSettingsIdJsonPutWithHttpInfo(String id, Boolean allowBookingOnBehalf, Boolean allowBookingOvertime, Boolean allowEventOverlap, Integer availabilityLimit, Boolean availabilityLimitEnabled, Integer bufferTimeDuration, String calendarType, Integer defaultMeetingLength, String description, Boolean enableCalendarSync, Boolean enableDynamicLocation, String location, Boolean primaryCalendarConnectionFailed, String primaryCalendarId, String primaryCalendarName, Boolean rescheduleMeetingsEnabled, Boolean scheduleBufferEnabled, Integer scheduleDelay, Boolean shareEventDetail, String timeZone, Object timesAvailable, String title) throws ApiException {
        okhttp3.Call localVarCall = v2MeetingsSettingsIdJsonPutValidateBeforeCall(id, allowBookingOnBehalf, allowBookingOvertime, allowEventOverlap, availabilityLimit, availabilityLimitEnabled, bufferTimeDuration, calendarType, defaultMeetingLength, description, enableCalendarSync, enableDynamicLocation, location, primaryCalendarConnectionFailed, primaryCalendarId, primaryCalendarName, rescheduleMeetingsEnabled, scheduleBufferEnabled, scheduleDelay, shareEventDetail, timeZone, timesAvailable, title, null);
        Type localVarReturnType = new TypeToken<MeetingSetting>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a meeting setting (asynchronously)
     * Updates a meeting setting, by ID only. 
     * @param id MeetingSetting ID (required)
     * @param allowBookingOnBehalf Allow other team members to schedule on you behalf. (optional)
     * @param allowBookingOvertime Allow team members to insert available time outside your working hours. (optional)
     * @param allowEventOverlap Allow team members to double book events on your calendar. (optional)
     * @param availabilityLimit The number of days out the user allows a prospect to schedule a meeting (optional)
     * @param availabilityLimitEnabled If Availability Limits have been turned on (optional)
     * @param bufferTimeDuration Default buffer duration in minutes set by a user (optional)
     * @param calendarType Calendar type (optional)
     * @param defaultMeetingLength Default meeting length in minutes set by the user (optional)
     * @param description Default description of the meeting (optional)
     * @param enableCalendarSync Determines if a user enabled Calendar Sync feature (optional)
     * @param enableDynamicLocation Determines if location will be filled via third-party service (Zoom, GoToMeeting, etc.) (optional)
     * @param location Default location of the meeting (optional)
     * @param primaryCalendarConnectionFailed Determines if the user lost calendar connection (optional)
     * @param primaryCalendarId ID of the primary calendar (optional)
     * @param primaryCalendarName Display name of the primary calendar (optional)
     * @param rescheduleMeetingsEnabled Determines if a user enabled reschedule meetings feature (optional)
     * @param scheduleBufferEnabled Determines if meetings are scheduled with a 15 minute buffer between them (optional)
     * @param scheduleDelay The number of hours in advance a user requires someone to a book a meeting with them (optional)
     * @param shareEventDetail Allow team members to see the details of events on your calendar. (optional)
     * @param timeZone Time zone for current calendar (optional)
     * @param timesAvailable Times available set by a user that can be used to book meetings (optional)
     * @param title Default title of the meeting (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2MeetingsSettingsIdJsonPutAsync(String id, Boolean allowBookingOnBehalf, Boolean allowBookingOvertime, Boolean allowEventOverlap, Integer availabilityLimit, Boolean availabilityLimitEnabled, Integer bufferTimeDuration, String calendarType, Integer defaultMeetingLength, String description, Boolean enableCalendarSync, Boolean enableDynamicLocation, String location, Boolean primaryCalendarConnectionFailed, String primaryCalendarId, String primaryCalendarName, Boolean rescheduleMeetingsEnabled, Boolean scheduleBufferEnabled, Integer scheduleDelay, Boolean shareEventDetail, String timeZone, Object timesAvailable, String title, final ApiCallback<MeetingSetting> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2MeetingsSettingsIdJsonPutValidateBeforeCall(id, allowBookingOnBehalf, allowBookingOvertime, allowEventOverlap, availabilityLimit, availabilityLimitEnabled, bufferTimeDuration, calendarType, defaultMeetingLength, description, enableCalendarSync, enableDynamicLocation, location, primaryCalendarConnectionFailed, primaryCalendarId, primaryCalendarName, rescheduleMeetingsEnabled, scheduleBufferEnabled, scheduleDelay, shareEventDetail, timeZone, timesAvailable, title, _callback);
        Type localVarReturnType = new TypeToken<MeetingSetting>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
