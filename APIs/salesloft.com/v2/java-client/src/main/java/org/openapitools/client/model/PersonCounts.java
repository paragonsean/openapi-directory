/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PersonCounts
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:54.467506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PersonCounts {
  public static final String SERIALIZED_NAME_CALLS = "calls";
  @SerializedName(SERIALIZED_NAME_CALLS)
  private Integer calls;

  public static final String SERIALIZED_NAME_EMAILS_BOUNCED = "emails_bounced";
  @SerializedName(SERIALIZED_NAME_EMAILS_BOUNCED)
  private Integer emailsBounced;

  public static final String SERIALIZED_NAME_EMAILS_CLICKED = "emails_clicked";
  @SerializedName(SERIALIZED_NAME_EMAILS_CLICKED)
  private Integer emailsClicked;

  public static final String SERIALIZED_NAME_EMAILS_REPLIED_TO = "emails_replied_to";
  @SerializedName(SERIALIZED_NAME_EMAILS_REPLIED_TO)
  private Integer emailsRepliedTo;

  public static final String SERIALIZED_NAME_EMAILS_SENT = "emails_sent";
  @SerializedName(SERIALIZED_NAME_EMAILS_SENT)
  private Integer emailsSent;

  public static final String SERIALIZED_NAME_EMAILS_VIEWED = "emails_viewed";
  @SerializedName(SERIALIZED_NAME_EMAILS_VIEWED)
  private Integer emailsViewed;

  public PersonCounts() {
  }

  public PersonCounts calls(Integer calls) {
    this.calls = calls;
    return this;
  }

  /**
   * The number of calls logged to this person
   * @return calls
   */
  @javax.annotation.Nullable
  public Integer getCalls() {
    return calls;
  }

  public void setCalls(Integer calls) {
    this.calls = calls;
  }


  public PersonCounts emailsBounced(Integer emailsBounced) {
    this.emailsBounced = emailsBounced;
    return this;
  }

  /**
   * The number of unique emails sent to this person that bounced
   * @return emailsBounced
   */
  @javax.annotation.Nullable
  public Integer getEmailsBounced() {
    return emailsBounced;
  }

  public void setEmailsBounced(Integer emailsBounced) {
    this.emailsBounced = emailsBounced;
  }


  public PersonCounts emailsClicked(Integer emailsClicked) {
    this.emailsClicked = emailsClicked;
    return this;
  }

  /**
   * The number of unique emails clicked by this person
   * @return emailsClicked
   */
  @javax.annotation.Nullable
  public Integer getEmailsClicked() {
    return emailsClicked;
  }

  public void setEmailsClicked(Integer emailsClicked) {
    this.emailsClicked = emailsClicked;
  }


  public PersonCounts emailsRepliedTo(Integer emailsRepliedTo) {
    this.emailsRepliedTo = emailsRepliedTo;
    return this;
  }

  /**
   * The number of unique emails replied to by this person
   * @return emailsRepliedTo
   */
  @javax.annotation.Nullable
  public Integer getEmailsRepliedTo() {
    return emailsRepliedTo;
  }

  public void setEmailsRepliedTo(Integer emailsRepliedTo) {
    this.emailsRepliedTo = emailsRepliedTo;
  }


  public PersonCounts emailsSent(Integer emailsSent) {
    this.emailsSent = emailsSent;
    return this;
  }

  /**
   * The number of emails sent to this person
   * @return emailsSent
   */
  @javax.annotation.Nullable
  public Integer getEmailsSent() {
    return emailsSent;
  }

  public void setEmailsSent(Integer emailsSent) {
    this.emailsSent = emailsSent;
  }


  public PersonCounts emailsViewed(Integer emailsViewed) {
    this.emailsViewed = emailsViewed;
    return this;
  }

  /**
   * The number of unique emails viewed by this person
   * @return emailsViewed
   */
  @javax.annotation.Nullable
  public Integer getEmailsViewed() {
    return emailsViewed;
  }

  public void setEmailsViewed(Integer emailsViewed) {
    this.emailsViewed = emailsViewed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PersonCounts personCounts = (PersonCounts) o;
    return Objects.equals(this.calls, personCounts.calls) &&
        Objects.equals(this.emailsBounced, personCounts.emailsBounced) &&
        Objects.equals(this.emailsClicked, personCounts.emailsClicked) &&
        Objects.equals(this.emailsRepliedTo, personCounts.emailsRepliedTo) &&
        Objects.equals(this.emailsSent, personCounts.emailsSent) &&
        Objects.equals(this.emailsViewed, personCounts.emailsViewed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(calls, emailsBounced, emailsClicked, emailsRepliedTo, emailsSent, emailsViewed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PersonCounts {\n");
    sb.append("    calls: ").append(toIndentedString(calls)).append("\n");
    sb.append("    emailsBounced: ").append(toIndentedString(emailsBounced)).append("\n");
    sb.append("    emailsClicked: ").append(toIndentedString(emailsClicked)).append("\n");
    sb.append("    emailsRepliedTo: ").append(toIndentedString(emailsRepliedTo)).append("\n");
    sb.append("    emailsSent: ").append(toIndentedString(emailsSent)).append("\n");
    sb.append("    emailsViewed: ").append(toIndentedString(emailsViewed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("calls");
    openapiFields.add("emails_bounced");
    openapiFields.add("emails_clicked");
    openapiFields.add("emails_replied_to");
    openapiFields.add("emails_sent");
    openapiFields.add("emails_viewed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PersonCounts
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PersonCounts.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PersonCounts is not found in the empty JSON string", PersonCounts.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PersonCounts.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PersonCounts` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PersonCounts.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PersonCounts' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PersonCounts> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PersonCounts.class));

       return (TypeAdapter<T>) new TypeAdapter<PersonCounts>() {
           @Override
           public void write(JsonWriter out, PersonCounts value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PersonCounts read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PersonCounts given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PersonCounts
   * @throws IOException if the JSON string is invalid with respect to PersonCounts
   */
  public static PersonCounts fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PersonCounts.class);
  }

  /**
   * Convert an instance of PersonCounts to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

