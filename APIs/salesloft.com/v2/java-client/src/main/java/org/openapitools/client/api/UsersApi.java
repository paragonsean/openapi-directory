/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.User;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v2UsersIdJsonGet
     * @param id User ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2UsersIdJsonGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/users/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2UsersIdJsonGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v2UsersIdJsonGet(Async)");
        }

        return v2UsersIdJsonGetCall(id, _callback);

    }

    /**
     * Fetch a user
     * Fetches a user, by ID only. 
     * @param id User ID (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public User v2UsersIdJsonGet(String id) throws ApiException {
        ApiResponse<User> localVarResp = v2UsersIdJsonGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Fetch a user
     * Fetches a user, by ID only. 
     * @param id User ID (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> v2UsersIdJsonGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = v2UsersIdJsonGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a user (asynchronously)
     * Fetches a user, by ID only. 
     * @param id User ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2UsersIdJsonGetAsync(String id, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2UsersIdJsonGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2UsersIdJsonPut
     * @param id User ID (required)
     * @param active Active status of the user&#39;s account (optional)
     * @param groupId Group assigned to the user (optional)
     * @param roleId Role assigned to the user. Must be one of: Admin, User, or a custom role ID (optional)
     * @param workCountry The user&#39;s work country (alpha-2 code) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2UsersIdJsonPutCall(String id, Boolean active, Integer groupId, String roleId, String workCountry, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/users/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (active != null) {
            localVarFormParams.put("active", active);
        }

        if (groupId != null) {
            localVarFormParams.put("group_id", groupId);
        }

        if (roleId != null) {
            localVarFormParams.put("role_id", roleId);
        }

        if (workCountry != null) {
            localVarFormParams.put("work_country", workCountry);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2UsersIdJsonPutValidateBeforeCall(String id, Boolean active, Integer groupId, String roleId, String workCountry, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v2UsersIdJsonPut(Async)");
        }

        return v2UsersIdJsonPutCall(id, active, groupId, roleId, workCountry, _callback);

    }

    /**
     * Update a user
     * Updates a user. 
     * @param id User ID (required)
     * @param active Active status of the user&#39;s account (optional)
     * @param groupId Group assigned to the user (optional)
     * @param roleId Role assigned to the user. Must be one of: Admin, User, or a custom role ID (optional)
     * @param workCountry The user&#39;s work country (alpha-2 code) (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public User v2UsersIdJsonPut(String id, Boolean active, Integer groupId, String roleId, String workCountry) throws ApiException {
        ApiResponse<User> localVarResp = v2UsersIdJsonPutWithHttpInfo(id, active, groupId, roleId, workCountry);
        return localVarResp.getData();
    }

    /**
     * Update a user
     * Updates a user. 
     * @param id User ID (required)
     * @param active Active status of the user&#39;s account (optional)
     * @param groupId Group assigned to the user (optional)
     * @param roleId Role assigned to the user. Must be one of: Admin, User, or a custom role ID (optional)
     * @param workCountry The user&#39;s work country (alpha-2 code) (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> v2UsersIdJsonPutWithHttpInfo(String id, Boolean active, Integer groupId, String roleId, String workCountry) throws ApiException {
        okhttp3.Call localVarCall = v2UsersIdJsonPutValidateBeforeCall(id, active, groupId, roleId, workCountry, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a user (asynchronously)
     * Updates a user. 
     * @param id User ID (required)
     * @param active Active status of the user&#39;s account (optional)
     * @param groupId Group assigned to the user (optional)
     * @param roleId Role assigned to the user. Must be one of: Admin, User, or a custom role ID (optional)
     * @param workCountry The user&#39;s work country (alpha-2 code) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2UsersIdJsonPutAsync(String id, Boolean active, Integer groupId, String roleId, String workCountry, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2UsersIdJsonPutValidateBeforeCall(id, active, groupId, roleId, workCountry, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2UsersJsonGet
     * @param ids IDs of users to fetch. If a record can&#39;t be found, that record won&#39;t be returned and your request will be successful (optional)
     * @param guid Filters list to only include guids (optional)
     * @param groupId Filters users by group_id.  An additional value of \&quot;_is_null\&quot; can be passed to filter users that are not in a group (optional)
     * @param roleId Filters users by role_id (optional)
     * @param search Space-separated list of keywords used to find case-insensitive substring matches against First Name, Last Name, or Email (optional)
     * @param active Filters users based on active attribute. Defaults to not applied (optional)
     * @param visibleOnly Defaults to true.  When true, only shows users that are actionable based on the team&#39;s privacy settings. When false, shows all users on the team, even if you can&#39;t take action on that user. Deactivated users are also included when false.  (optional)
     * @param perPage How many users to show per page in the range [1, 100]. Defaults to 25.  Results are only paginated if the page parameter is defined (optional)
     * @param page The current page to fetch users from. Defaults to returning all users (optional)
     * @param includePagingCounts Whether to include total_pages and total_count in the metadata. Defaults to false (optional)
     * @param hasCrmUser Filters users based on if they have a crm user mapped or not. (optional)
     * @param workCountry Filters users based on assigned work_country. (optional)
     * @param sortBy Key to sort on, must be one of: id, email, name, group, role. Defaults to id (optional)
     * @param sortDirection Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2UsersJsonGetCall(List<Integer> ids, List<String> guid, List<String> groupId, List<String> roleId, String search, Boolean active, Boolean visibleOnly, Integer perPage, Integer page, Boolean includePagingCounts, Boolean hasCrmUser, List<String> workCountry, String sortBy, String sortDirection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/users.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "ids", ids));
        }

        if (guid != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "guid", guid));
        }

        if (groupId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "group_id", groupId));
        }

        if (roleId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "role_id", roleId));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (visibleOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("visible_only", visibleOnly));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (includePagingCounts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_paging_counts", includePagingCounts));
        }

        if (hasCrmUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_crm_user", hasCrmUser));
        }

        if (workCountry != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "work_country", workCountry));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_direction", sortDirection));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2UsersJsonGetValidateBeforeCall(List<Integer> ids, List<String> guid, List<String> groupId, List<String> roleId, String search, Boolean active, Boolean visibleOnly, Integer perPage, Integer page, Boolean includePagingCounts, Boolean hasCrmUser, List<String> workCountry, String sortBy, String sortDirection, final ApiCallback _callback) throws ApiException {
        return v2UsersJsonGetCall(ids, guid, groupId, roleId, search, active, visibleOnly, perPage, page, includePagingCounts, hasCrmUser, workCountry, sortBy, sortDirection, _callback);

    }

    /**
     * List users
     * Non Admin: Lists only your user, or all on team depending on group visibility policy Team Admin: Lists users associated with your team 
     * @param ids IDs of users to fetch. If a record can&#39;t be found, that record won&#39;t be returned and your request will be successful (optional)
     * @param guid Filters list to only include guids (optional)
     * @param groupId Filters users by group_id.  An additional value of \&quot;_is_null\&quot; can be passed to filter users that are not in a group (optional)
     * @param roleId Filters users by role_id (optional)
     * @param search Space-separated list of keywords used to find case-insensitive substring matches against First Name, Last Name, or Email (optional)
     * @param active Filters users based on active attribute. Defaults to not applied (optional)
     * @param visibleOnly Defaults to true.  When true, only shows users that are actionable based on the team&#39;s privacy settings. When false, shows all users on the team, even if you can&#39;t take action on that user. Deactivated users are also included when false.  (optional)
     * @param perPage How many users to show per page in the range [1, 100]. Defaults to 25.  Results are only paginated if the page parameter is defined (optional)
     * @param page The current page to fetch users from. Defaults to returning all users (optional)
     * @param includePagingCounts Whether to include total_pages and total_count in the metadata. Defaults to false (optional)
     * @param hasCrmUser Filters users based on if they have a crm user mapped or not. (optional)
     * @param workCountry Filters users based on assigned work_country. (optional)
     * @param sortBy Key to sort on, must be one of: id, email, name, group, role. Defaults to id (optional)
     * @param sortDirection Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<User> v2UsersJsonGet(List<Integer> ids, List<String> guid, List<String> groupId, List<String> roleId, String search, Boolean active, Boolean visibleOnly, Integer perPage, Integer page, Boolean includePagingCounts, Boolean hasCrmUser, List<String> workCountry, String sortBy, String sortDirection) throws ApiException {
        ApiResponse<List<User>> localVarResp = v2UsersJsonGetWithHttpInfo(ids, guid, groupId, roleId, search, active, visibleOnly, perPage, page, includePagingCounts, hasCrmUser, workCountry, sortBy, sortDirection);
        return localVarResp.getData();
    }

    /**
     * List users
     * Non Admin: Lists only your user, or all on team depending on group visibility policy Team Admin: Lists users associated with your team 
     * @param ids IDs of users to fetch. If a record can&#39;t be found, that record won&#39;t be returned and your request will be successful (optional)
     * @param guid Filters list to only include guids (optional)
     * @param groupId Filters users by group_id.  An additional value of \&quot;_is_null\&quot; can be passed to filter users that are not in a group (optional)
     * @param roleId Filters users by role_id (optional)
     * @param search Space-separated list of keywords used to find case-insensitive substring matches against First Name, Last Name, or Email (optional)
     * @param active Filters users based on active attribute. Defaults to not applied (optional)
     * @param visibleOnly Defaults to true.  When true, only shows users that are actionable based on the team&#39;s privacy settings. When false, shows all users on the team, even if you can&#39;t take action on that user. Deactivated users are also included when false.  (optional)
     * @param perPage How many users to show per page in the range [1, 100]. Defaults to 25.  Results are only paginated if the page parameter is defined (optional)
     * @param page The current page to fetch users from. Defaults to returning all users (optional)
     * @param includePagingCounts Whether to include total_pages and total_count in the metadata. Defaults to false (optional)
     * @param hasCrmUser Filters users based on if they have a crm user mapped or not. (optional)
     * @param workCountry Filters users based on assigned work_country. (optional)
     * @param sortBy Key to sort on, must be one of: id, email, name, group, role. Defaults to id (optional)
     * @param sortDirection Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> v2UsersJsonGetWithHttpInfo(List<Integer> ids, List<String> guid, List<String> groupId, List<String> roleId, String search, Boolean active, Boolean visibleOnly, Integer perPage, Integer page, Boolean includePagingCounts, Boolean hasCrmUser, List<String> workCountry, String sortBy, String sortDirection) throws ApiException {
        okhttp3.Call localVarCall = v2UsersJsonGetValidateBeforeCall(ids, guid, groupId, roleId, search, active, visibleOnly, perPage, page, includePagingCounts, hasCrmUser, workCountry, sortBy, sortDirection, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List users (asynchronously)
     * Non Admin: Lists only your user, or all on team depending on group visibility policy Team Admin: Lists users associated with your team 
     * @param ids IDs of users to fetch. If a record can&#39;t be found, that record won&#39;t be returned and your request will be successful (optional)
     * @param guid Filters list to only include guids (optional)
     * @param groupId Filters users by group_id.  An additional value of \&quot;_is_null\&quot; can be passed to filter users that are not in a group (optional)
     * @param roleId Filters users by role_id (optional)
     * @param search Space-separated list of keywords used to find case-insensitive substring matches against First Name, Last Name, or Email (optional)
     * @param active Filters users based on active attribute. Defaults to not applied (optional)
     * @param visibleOnly Defaults to true.  When true, only shows users that are actionable based on the team&#39;s privacy settings. When false, shows all users on the team, even if you can&#39;t take action on that user. Deactivated users are also included when false.  (optional)
     * @param perPage How many users to show per page in the range [1, 100]. Defaults to 25.  Results are only paginated if the page parameter is defined (optional)
     * @param page The current page to fetch users from. Defaults to returning all users (optional)
     * @param includePagingCounts Whether to include total_pages and total_count in the metadata. Defaults to false (optional)
     * @param hasCrmUser Filters users based on if they have a crm user mapped or not. (optional)
     * @param workCountry Filters users based on assigned work_country. (optional)
     * @param sortBy Key to sort on, must be one of: id, email, name, group, role. Defaults to id (optional)
     * @param sortDirection Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2UsersJsonGetAsync(List<Integer> ids, List<String> guid, List<String> groupId, List<String> roleId, String search, Boolean active, Boolean visibleOnly, Integer perPage, Integer page, Boolean includePagingCounts, Boolean hasCrmUser, List<String> workCountry, String sortBy, String sortDirection, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2UsersJsonGetValidateBeforeCall(ids, guid, groupId, roleId, search, active, visibleOnly, perPage, page, includePagingCounts, hasCrmUser, workCountry, sortBy, sortDirection, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
