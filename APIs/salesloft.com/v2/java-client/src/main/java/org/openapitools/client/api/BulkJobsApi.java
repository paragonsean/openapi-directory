/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BulkJob;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BulkJobsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BulkJobsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BulkJobsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v2BulkJobsGet
     * @param state The state of the bulk job. Accepts multiple states. Each state must be one of: open, executing, done (optional)
     * @param id Filter by id using comparison operators. Only supports greater than (gt) comparison (i.e. id[gt]&#x3D;123) (optional)
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BulkJobsGetCall(List<String> state, Object id, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/bulk_jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (state != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "state", state));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(id));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2BulkJobsGetValidateBeforeCall(List<String> state, Object id, Integer perPage, final ApiCallback _callback) throws ApiException {
        return v2BulkJobsGetCall(state, id, perPage, _callback);

    }

    /**
     * List bulk jobs
     * Fetches multiple bulk job records. The records can be filtered, paged, and sorted according to the respective parameters.
     * @param state The state of the bulk job. Accepts multiple states. Each state must be one of: open, executing, done (optional)
     * @param id Filter by id using comparison operators. Only supports greater than (gt) comparison (i.e. id[gt]&#x3D;123) (optional)
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @return List&lt;BulkJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<BulkJob> v2BulkJobsGet(List<String> state, Object id, Integer perPage) throws ApiException {
        ApiResponse<List<BulkJob>> localVarResp = v2BulkJobsGetWithHttpInfo(state, id, perPage);
        return localVarResp.getData();
    }

    /**
     * List bulk jobs
     * Fetches multiple bulk job records. The records can be filtered, paged, and sorted according to the respective parameters.
     * @param state The state of the bulk job. Accepts multiple states. Each state must be one of: open, executing, done (optional)
     * @param id Filter by id using comparison operators. Only supports greater than (gt) comparison (i.e. id[gt]&#x3D;123) (optional)
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @return ApiResponse&lt;List&lt;BulkJob&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BulkJob>> v2BulkJobsGetWithHttpInfo(List<String> state, Object id, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = v2BulkJobsGetValidateBeforeCall(state, id, perPage, null);
        Type localVarReturnType = new TypeToken<List<BulkJob>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List bulk jobs (asynchronously)
     * Fetches multiple bulk job records. The records can be filtered, paged, and sorted according to the respective parameters.
     * @param state The state of the bulk job. Accepts multiple states. Each state must be one of: open, executing, done (optional)
     * @param id Filter by id using comparison operators. Only supports greater than (gt) comparison (i.e. id[gt]&#x3D;123) (optional)
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BulkJobsGetAsync(List<String> state, Object id, Integer perPage, final ApiCallback<List<BulkJob>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2BulkJobsGetValidateBeforeCall(state, id, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<BulkJob>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2BulkJobsIdGet
     * @param id The id for the Bulk Job (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BulkJobsIdGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/bulk_jobs/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2BulkJobsIdGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v2BulkJobsIdGet(Async)");
        }

        return v2BulkJobsIdGetCall(id, _callback);

    }

    /**
     * Fetch a bulk job
     * Fetches a bulk job, by ID only.
     * @param id The id for the Bulk Job (required)
     * @return BulkJob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BulkJob v2BulkJobsIdGet(Integer id) throws ApiException {
        ApiResponse<BulkJob> localVarResp = v2BulkJobsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Fetch a bulk job
     * Fetches a bulk job, by ID only.
     * @param id The id for the Bulk Job (required)
     * @return ApiResponse&lt;BulkJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BulkJob> v2BulkJobsIdGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = v2BulkJobsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<BulkJob>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a bulk job (asynchronously)
     * Fetches a bulk job, by ID only.
     * @param id The id for the Bulk Job (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BulkJobsIdGetAsync(Integer id, final ApiCallback<BulkJob> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2BulkJobsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<BulkJob>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2BulkJobsIdPut
     * @param id The id for the bulk job to which the job data relates (required)
     * @param name Name for your bulk job (optional)
     * @param readyToExecute Whether the job is ready to be executed. Must be true or false. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BulkJobsIdPutCall(Integer id, String name, Boolean readyToExecute, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/bulk_jobs/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (readyToExecute != null) {
            localVarFormParams.put("ready_to_execute", readyToExecute);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2BulkJobsIdPutValidateBeforeCall(Integer id, String name, Boolean readyToExecute, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v2BulkJobsIdPut(Async)");
        }

        return v2BulkJobsIdPutCall(id, name, readyToExecute, _callback);

    }

    /**
     * Update a bulk job
     * Updates a bulk job&#39;s name and / or marks a bulk job as &#39;ready_to_execute&#39;.  May only be updated if the bulk job is still in an \&quot;open\&quot; state.  For additional information on creating bulk jobs, the types of supported bulk jobs, and examples of the bulk job flow, visit the &lt;a href&#x3D;\&quot;/bulk.html\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;bulk job details page&lt;/a&gt;. 
     * @param id The id for the bulk job to which the job data relates (required)
     * @param name Name for your bulk job (optional)
     * @param readyToExecute Whether the job is ready to be executed. Must be true or false. (optional)
     * @return BulkJob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BulkJob v2BulkJobsIdPut(Integer id, String name, Boolean readyToExecute) throws ApiException {
        ApiResponse<BulkJob> localVarResp = v2BulkJobsIdPutWithHttpInfo(id, name, readyToExecute);
        return localVarResp.getData();
    }

    /**
     * Update a bulk job
     * Updates a bulk job&#39;s name and / or marks a bulk job as &#39;ready_to_execute&#39;.  May only be updated if the bulk job is still in an \&quot;open\&quot; state.  For additional information on creating bulk jobs, the types of supported bulk jobs, and examples of the bulk job flow, visit the &lt;a href&#x3D;\&quot;/bulk.html\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;bulk job details page&lt;/a&gt;. 
     * @param id The id for the bulk job to which the job data relates (required)
     * @param name Name for your bulk job (optional)
     * @param readyToExecute Whether the job is ready to be executed. Must be true or false. (optional)
     * @return ApiResponse&lt;BulkJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BulkJob> v2BulkJobsIdPutWithHttpInfo(Integer id, String name, Boolean readyToExecute) throws ApiException {
        okhttp3.Call localVarCall = v2BulkJobsIdPutValidateBeforeCall(id, name, readyToExecute, null);
        Type localVarReturnType = new TypeToken<BulkJob>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a bulk job (asynchronously)
     * Updates a bulk job&#39;s name and / or marks a bulk job as &#39;ready_to_execute&#39;.  May only be updated if the bulk job is still in an \&quot;open\&quot; state.  For additional information on creating bulk jobs, the types of supported bulk jobs, and examples of the bulk job flow, visit the &lt;a href&#x3D;\&quot;/bulk.html\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;bulk job details page&lt;/a&gt;. 
     * @param id The id for the bulk job to which the job data relates (required)
     * @param name Name for your bulk job (optional)
     * @param readyToExecute Whether the job is ready to be executed. Must be true or false. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BulkJobsIdPutAsync(Integer id, String name, Boolean readyToExecute, final ApiCallback<BulkJob> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2BulkJobsIdPutValidateBeforeCall(id, name, readyToExecute, _callback);
        Type localVarReturnType = new TypeToken<BulkJob>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2BulkJobsPost
     * @param type Type of bulk job. Must be a valid type. Follow link to the bulk job details page above to view supported types. (required)
     * @param name Name for your bulk job (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BulkJobsPostCall(String type, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/bulk_jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (type != null) {
            localVarFormParams.put("type", type);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2BulkJobsPostValidateBeforeCall(String type, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling v2BulkJobsPost(Async)");
        }

        return v2BulkJobsPostCall(type, name, _callback);

    }

    /**
     * Create a bulk job
     * Creates a bulk job. The type of the bulk job must be included when created.  For additional information on creating bulk jobs, the types of supported bulk jobs, and examples of the bulk job flow, visit the &lt;a href&#x3D;\&quot;/bulk.html\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;bulk job details page&lt;/a&gt;. 
     * @param type Type of bulk job. Must be a valid type. Follow link to the bulk job details page above to view supported types. (required)
     * @param name Name for your bulk job (optional)
     * @return BulkJob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BulkJob v2BulkJobsPost(String type, String name) throws ApiException {
        ApiResponse<BulkJob> localVarResp = v2BulkJobsPostWithHttpInfo(type, name);
        return localVarResp.getData();
    }

    /**
     * Create a bulk job
     * Creates a bulk job. The type of the bulk job must be included when created.  For additional information on creating bulk jobs, the types of supported bulk jobs, and examples of the bulk job flow, visit the &lt;a href&#x3D;\&quot;/bulk.html\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;bulk job details page&lt;/a&gt;. 
     * @param type Type of bulk job. Must be a valid type. Follow link to the bulk job details page above to view supported types. (required)
     * @param name Name for your bulk job (optional)
     * @return ApiResponse&lt;BulkJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BulkJob> v2BulkJobsPostWithHttpInfo(String type, String name) throws ApiException {
        okhttp3.Call localVarCall = v2BulkJobsPostValidateBeforeCall(type, name, null);
        Type localVarReturnType = new TypeToken<BulkJob>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a bulk job (asynchronously)
     * Creates a bulk job. The type of the bulk job must be included when created.  For additional information on creating bulk jobs, the types of supported bulk jobs, and examples of the bulk job flow, visit the &lt;a href&#x3D;\&quot;/bulk.html\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;bulk job details page&lt;/a&gt;. 
     * @param type Type of bulk job. Must be a valid type. Follow link to the bulk job details page above to view supported types. (required)
     * @param name Name for your bulk job (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BulkJobsPostAsync(String type, String name, final ApiCallback<BulkJob> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2BulkJobsPostValidateBeforeCall(type, name, _callback);
        Type localVarReturnType = new TypeToken<BulkJob>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
