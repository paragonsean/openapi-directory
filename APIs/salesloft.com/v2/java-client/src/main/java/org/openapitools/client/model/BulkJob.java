/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BulkJob
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:54.467506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BulkJob {
  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private Integer errors;

  public static final String SERIALIZED_NAME_FINISHED_AT = "finished_at";
  @SerializedName(SERIALIZED_NAME_FINISHED_AT)
  private OffsetDateTime finishedAt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_MARKED_READY_AT = "marked_ready_at";
  @SerializedName(SERIALIZED_NAME_MARKED_READY_AT)
  private OffsetDateTime markedReadyAt;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROCESSED = "processed";
  @SerializedName(SERIALIZED_NAME_PROCESSED)
  private Integer processed;

  public static final String SERIALIZED_NAME_READY_TO_EXECUTE = "ready_to_execute";
  @SerializedName(SERIALIZED_NAME_READY_TO_EXECUTE)
  private Boolean readyToExecute;

  public static final String SERIALIZED_NAME_SCOPES = "scopes";
  @SerializedName(SERIALIZED_NAME_SCOPES)
  private List<Object> scopes = new ArrayList<>();

  public static final String SERIALIZED_NAME_STARTED_AT = "started_at";
  @SerializedName(SERIALIZED_NAME_STARTED_AT)
  private OffsetDateTime startedAt;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public BulkJob() {
  }

  public BulkJob createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * When this bulk job was created
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public BulkJob errors(Integer errors) {
    this.errors = errors;
    return this;
  }

  /**
   * Number of errored records at the time of request for this Bulk Job
   * @return errors
   */
  @javax.annotation.Nullable
  public Integer getErrors() {
    return errors;
  }

  public void setErrors(Integer errors) {
    this.errors = errors;
  }


  public BulkJob finishedAt(OffsetDateTime finishedAt) {
    this.finishedAt = finishedAt;
    return this;
  }

  /**
   * When this bulk job finished processing
   * @return finishedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFinishedAt() {
    return finishedAt;
  }

  public void setFinishedAt(OffsetDateTime finishedAt) {
    this.finishedAt = finishedAt;
  }


  public BulkJob id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * ID of this Bulk Job
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public BulkJob markedReadyAt(OffsetDateTime markedReadyAt) {
    this.markedReadyAt = markedReadyAt;
    return this;
  }

  /**
   * When this bulk job was marked as ready to execute
   * @return markedReadyAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getMarkedReadyAt() {
    return markedReadyAt;
  }

  public void setMarkedReadyAt(OffsetDateTime markedReadyAt) {
    this.markedReadyAt = markedReadyAt;
  }


  public BulkJob name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of this Bulk Job
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public BulkJob processed(Integer processed) {
    this.processed = processed;
    return this;
  }

  /**
   * Number of processed records at the time of request for this Bulk Job
   * @return processed
   */
  @javax.annotation.Nullable
  public Integer getProcessed() {
    return processed;
  }

  public void setProcessed(Integer processed) {
    this.processed = processed;
  }


  public BulkJob readyToExecute(Boolean readyToExecute) {
    this.readyToExecute = readyToExecute;
    return this;
  }

  /**
   * Whether the Bulk Job is ready to be executed
   * @return readyToExecute
   */
  @javax.annotation.Nullable
  public Boolean getReadyToExecute() {
    return readyToExecute;
  }

  public void setReadyToExecute(Boolean readyToExecute) {
    this.readyToExecute = readyToExecute;
  }


  public BulkJob scopes(List<Object> scopes) {
    this.scopes = scopes;
    return this;
  }

  public BulkJob addScopesItem(Object scopesItem) {
    if (this.scopes == null) {
      this.scopes = new ArrayList<>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

  /**
   * Scopes
   * @return scopes
   */
  @javax.annotation.Nullable
  public List<Object> getScopes() {
    return scopes;
  }

  public void setScopes(List<Object> scopes) {
    this.scopes = scopes;
  }


  public BulkJob startedAt(OffsetDateTime startedAt) {
    this.startedAt = startedAt;
    return this;
  }

  /**
   * When this bulk job started processing. null until bulk job is done
   * @return startedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartedAt() {
    return startedAt;
  }

  public void setStartedAt(OffsetDateTime startedAt) {
    this.startedAt = startedAt;
  }


  public BulkJob state(String state) {
    this.state = state;
    return this;
  }

  /**
   * State of the Bulk Job.  Must be one of: open, executing, done.
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public BulkJob total(Integer total) {
    this.total = total;
    return this;
  }

  /**
   * Number of total records for this Bulk Job
   * @return total
   */
  @javax.annotation.Nullable
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }


  public BulkJob type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type of the Bulk Job.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public BulkJob updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * When this bulk job was updated
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BulkJob bulkJob = (BulkJob) o;
    return Objects.equals(this.createdAt, bulkJob.createdAt) &&
        Objects.equals(this.errors, bulkJob.errors) &&
        Objects.equals(this.finishedAt, bulkJob.finishedAt) &&
        Objects.equals(this.id, bulkJob.id) &&
        Objects.equals(this.markedReadyAt, bulkJob.markedReadyAt) &&
        Objects.equals(this.name, bulkJob.name) &&
        Objects.equals(this.processed, bulkJob.processed) &&
        Objects.equals(this.readyToExecute, bulkJob.readyToExecute) &&
        Objects.equals(this.scopes, bulkJob.scopes) &&
        Objects.equals(this.startedAt, bulkJob.startedAt) &&
        Objects.equals(this.state, bulkJob.state) &&
        Objects.equals(this.total, bulkJob.total) &&
        Objects.equals(this.type, bulkJob.type) &&
        Objects.equals(this.updatedAt, bulkJob.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, errors, finishedAt, id, markedReadyAt, name, processed, readyToExecute, scopes, startedAt, state, total, type, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BulkJob {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    finishedAt: ").append(toIndentedString(finishedAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    markedReadyAt: ").append(toIndentedString(markedReadyAt)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    processed: ").append(toIndentedString(processed)).append("\n");
    sb.append("    readyToExecute: ").append(toIndentedString(readyToExecute)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created_at");
    openapiFields.add("errors");
    openapiFields.add("finished_at");
    openapiFields.add("id");
    openapiFields.add("marked_ready_at");
    openapiFields.add("name");
    openapiFields.add("processed");
    openapiFields.add("ready_to_execute");
    openapiFields.add("scopes");
    openapiFields.add("started_at");
    openapiFields.add("state");
    openapiFields.add("total");
    openapiFields.add("type");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BulkJob
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BulkJob.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BulkJob is not found in the empty JSON string", BulkJob.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BulkJob.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BulkJob` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("scopes") != null && !jsonObj.get("scopes").isJsonNull() && !jsonObj.get("scopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scopes` to be an array in the JSON string but got `%s`", jsonObj.get("scopes").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BulkJob.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BulkJob' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BulkJob> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BulkJob.class));

       return (TypeAdapter<T>) new TypeAdapter<BulkJob>() {
           @Override
           public void write(JsonWriter out, BulkJob value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BulkJob read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BulkJob given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BulkJob
   * @throws IOException if the JSON string is invalid with respect to BulkJob
   */
  public static BulkJob fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BulkJob.class);
  }

  /**
   * Convert an instance of BulkJob to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

