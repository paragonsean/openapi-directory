/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Step;
import org.openapitools.client.model.Task;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TasksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TasksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TasksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v2TasksIdJsonGet
     * @param id Task ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2TasksIdJsonGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/tasks/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2TasksIdJsonGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v2TasksIdJsonGet(Async)");
        }

        return v2TasksIdJsonGetCall(id, _callback);

    }

    /**
     * Fetch a task
     * Fetches a task, by ID only. 
     * @param id Task ID (required)
     * @return Step
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Step v2TasksIdJsonGet(String id) throws ApiException {
        ApiResponse<Step> localVarResp = v2TasksIdJsonGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Fetch a task
     * Fetches a task, by ID only. 
     * @param id Task ID (required)
     * @return ApiResponse&lt;Step&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Step> v2TasksIdJsonGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = v2TasksIdJsonGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Step>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a task (asynchronously)
     * Fetches a task, by ID only. 
     * @param id Task ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2TasksIdJsonGetAsync(String id, final ApiCallback<Step> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2TasksIdJsonGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Step>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2TasksIdJsonPut
     * @param id Task ID (required)
     * @param currentState Current state of the task, valid options are: completed (optional)
     * @param description A description of the task recorded for person at completion time (optional)
     * @param dueDate Date of when the Task is due, ISO-8601 date format required (optional)
     * @param isLogged A flag to indicate that the task should only be logged (optional)
     * @param remindAt Datetime of when the user will be reminded of the task, ISO-8601 datetime format required (optional)
     * @param subject Subject line of the task (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2TasksIdJsonPutCall(String id, String currentState, String description, String dueDate, Boolean isLogged, String remindAt, String subject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/tasks/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currentState != null) {
            localVarFormParams.put("current_state", currentState);
        }

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (dueDate != null) {
            localVarFormParams.put("due_date", dueDate);
        }

        if (isLogged != null) {
            localVarFormParams.put("is_logged", isLogged);
        }

        if (remindAt != null) {
            localVarFormParams.put("remind_at", remindAt);
        }

        if (subject != null) {
            localVarFormParams.put("subject", subject);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2TasksIdJsonPutValidateBeforeCall(String id, String currentState, String description, String dueDate, Boolean isLogged, String remindAt, String subject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v2TasksIdJsonPut(Async)");
        }

        return v2TasksIdJsonPutCall(id, currentState, description, dueDate, isLogged, remindAt, subject, _callback);

    }

    /**
     * Update a Task
     * Updates a task. 
     * @param id Task ID (required)
     * @param currentState Current state of the task, valid options are: completed (optional)
     * @param description A description of the task recorded for person at completion time (optional)
     * @param dueDate Date of when the Task is due, ISO-8601 date format required (optional)
     * @param isLogged A flag to indicate that the task should only be logged (optional)
     * @param remindAt Datetime of when the user will be reminded of the task, ISO-8601 datetime format required (optional)
     * @param subject Subject line of the task (optional)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Task v2TasksIdJsonPut(String id, String currentState, String description, String dueDate, Boolean isLogged, String remindAt, String subject) throws ApiException {
        ApiResponse<Task> localVarResp = v2TasksIdJsonPutWithHttpInfo(id, currentState, description, dueDate, isLogged, remindAt, subject);
        return localVarResp.getData();
    }

    /**
     * Update a Task
     * Updates a task. 
     * @param id Task ID (required)
     * @param currentState Current state of the task, valid options are: completed (optional)
     * @param description A description of the task recorded for person at completion time (optional)
     * @param dueDate Date of when the Task is due, ISO-8601 date format required (optional)
     * @param isLogged A flag to indicate that the task should only be logged (optional)
     * @param remindAt Datetime of when the user will be reminded of the task, ISO-8601 datetime format required (optional)
     * @param subject Subject line of the task (optional)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Task> v2TasksIdJsonPutWithHttpInfo(String id, String currentState, String description, String dueDate, Boolean isLogged, String remindAt, String subject) throws ApiException {
        okhttp3.Call localVarCall = v2TasksIdJsonPutValidateBeforeCall(id, currentState, description, dueDate, isLogged, remindAt, subject, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Task (asynchronously)
     * Updates a task. 
     * @param id Task ID (required)
     * @param currentState Current state of the task, valid options are: completed (optional)
     * @param description A description of the task recorded for person at completion time (optional)
     * @param dueDate Date of when the Task is due, ISO-8601 date format required (optional)
     * @param isLogged A flag to indicate that the task should only be logged (optional)
     * @param remindAt Datetime of when the user will be reminded of the task, ISO-8601 datetime format required (optional)
     * @param subject Subject line of the task (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2TasksIdJsonPutAsync(String id, String currentState, String description, String dueDate, Boolean isLogged, String remindAt, String subject, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2TasksIdJsonPutValidateBeforeCall(id, currentState, description, dueDate, isLogged, remindAt, subject, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2TasksJsonGet
     * @param ids IDs of tasks to fetch. (optional)
     * @param userId Filters tasks by the user to which they are assigned. (optional)
     * @param personId Filters tasks by the person to which they are associated. (optional)
     * @param accountId Filters tasks by the account to which they are associated. (optional)
     * @param currentState Filters tasks by their current state. Valid current_states include: [&#39;scheduled&#39;, &#39;completed&#39;]. (optional)
     * @param taskType Filters tasks by their task type. Valid task_types include: [&#39;call&#39;, &#39;email&#39;, &#39;general&#39;]. (optional)
     * @param timeIntervalFilter Filters tasks by time interval. Valid time_intervals include: [&#39;overdue&#39;, &#39;today&#39;, &#39;tomorrow&#39;, &#39;this_week&#39;, &#39;next_week&#39;]. (optional)
     * @param idempotencyKey Filters tasks by idempotency key. (optional)
     * @param locale Filters tasks by locale of the person to which they are associated. (optional)
     * @param sortBy Key to sort on, must be one of: due_date, due_at. Defaults to due_date (optional)
     * @param sortDirection Direction to sort in, must be one of: ASC, DESC. Defaults to ASC (optional)
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @param page The current page to fetch results from. Defaults to 1 (optional)
     * @param includePagingCounts Whether to include total_pages and total_count in the metadata. Defaults to false (optional)
     * @param limitPagingCounts Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2TasksJsonGetCall(List<Integer> ids, List<Integer> userId, List<Integer> personId, List<Integer> accountId, List<String> currentState, List<String> taskType, String timeIntervalFilter, String idempotencyKey, List<String> locale, String sortBy, String sortDirection, Integer perPage, Integer page, Boolean includePagingCounts, Boolean limitPagingCounts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/tasks.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "ids", ids));
        }

        if (userId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user_id", userId));
        }

        if (personId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "person_id", personId));
        }

        if (accountId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "account_id", accountId));
        }

        if (currentState != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "current_state", currentState));
        }

        if (taskType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "task_type", taskType));
        }

        if (timeIntervalFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time_interval_filter", timeIntervalFilter));
        }

        if (idempotencyKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idempotency_key", idempotencyKey));
        }

        if (locale != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "locale", locale));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_direction", sortDirection));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (includePagingCounts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_paging_counts", includePagingCounts));
        }

        if (limitPagingCounts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit_paging_counts", limitPagingCounts));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2TasksJsonGetValidateBeforeCall(List<Integer> ids, List<Integer> userId, List<Integer> personId, List<Integer> accountId, List<String> currentState, List<String> taskType, String timeIntervalFilter, String idempotencyKey, List<String> locale, String sortBy, String sortDirection, Integer perPage, Integer page, Boolean includePagingCounts, Boolean limitPagingCounts, final ApiCallback _callback) throws ApiException {
        return v2TasksJsonGetCall(ids, userId, personId, accountId, currentState, taskType, timeIntervalFilter, idempotencyKey, locale, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts, _callback);

    }

    /**
     * List tasks
     * Fetches multiple task records. The records can be filtered, paged, and sorted according to the respective parameters. 
     * @param ids IDs of tasks to fetch. (optional)
     * @param userId Filters tasks by the user to which they are assigned. (optional)
     * @param personId Filters tasks by the person to which they are associated. (optional)
     * @param accountId Filters tasks by the account to which they are associated. (optional)
     * @param currentState Filters tasks by their current state. Valid current_states include: [&#39;scheduled&#39;, &#39;completed&#39;]. (optional)
     * @param taskType Filters tasks by their task type. Valid task_types include: [&#39;call&#39;, &#39;email&#39;, &#39;general&#39;]. (optional)
     * @param timeIntervalFilter Filters tasks by time interval. Valid time_intervals include: [&#39;overdue&#39;, &#39;today&#39;, &#39;tomorrow&#39;, &#39;this_week&#39;, &#39;next_week&#39;]. (optional)
     * @param idempotencyKey Filters tasks by idempotency key. (optional)
     * @param locale Filters tasks by locale of the person to which they are associated. (optional)
     * @param sortBy Key to sort on, must be one of: due_date, due_at. Defaults to due_date (optional)
     * @param sortDirection Direction to sort in, must be one of: ASC, DESC. Defaults to ASC (optional)
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @param page The current page to fetch results from. Defaults to 1 (optional)
     * @param includePagingCounts Whether to include total_pages and total_count in the metadata. Defaults to false (optional)
     * @param limitPagingCounts Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)
     * @return List&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<Task> v2TasksJsonGet(List<Integer> ids, List<Integer> userId, List<Integer> personId, List<Integer> accountId, List<String> currentState, List<String> taskType, String timeIntervalFilter, String idempotencyKey, List<String> locale, String sortBy, String sortDirection, Integer perPage, Integer page, Boolean includePagingCounts, Boolean limitPagingCounts) throws ApiException {
        ApiResponse<List<Task>> localVarResp = v2TasksJsonGetWithHttpInfo(ids, userId, personId, accountId, currentState, taskType, timeIntervalFilter, idempotencyKey, locale, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts);
        return localVarResp.getData();
    }

    /**
     * List tasks
     * Fetches multiple task records. The records can be filtered, paged, and sorted according to the respective parameters. 
     * @param ids IDs of tasks to fetch. (optional)
     * @param userId Filters tasks by the user to which they are assigned. (optional)
     * @param personId Filters tasks by the person to which they are associated. (optional)
     * @param accountId Filters tasks by the account to which they are associated. (optional)
     * @param currentState Filters tasks by their current state. Valid current_states include: [&#39;scheduled&#39;, &#39;completed&#39;]. (optional)
     * @param taskType Filters tasks by their task type. Valid task_types include: [&#39;call&#39;, &#39;email&#39;, &#39;general&#39;]. (optional)
     * @param timeIntervalFilter Filters tasks by time interval. Valid time_intervals include: [&#39;overdue&#39;, &#39;today&#39;, &#39;tomorrow&#39;, &#39;this_week&#39;, &#39;next_week&#39;]. (optional)
     * @param idempotencyKey Filters tasks by idempotency key. (optional)
     * @param locale Filters tasks by locale of the person to which they are associated. (optional)
     * @param sortBy Key to sort on, must be one of: due_date, due_at. Defaults to due_date (optional)
     * @param sortDirection Direction to sort in, must be one of: ASC, DESC. Defaults to ASC (optional)
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @param page The current page to fetch results from. Defaults to 1 (optional)
     * @param includePagingCounts Whether to include total_pages and total_count in the metadata. Defaults to false (optional)
     * @param limitPagingCounts Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)
     * @return ApiResponse&lt;List&lt;Task&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Task>> v2TasksJsonGetWithHttpInfo(List<Integer> ids, List<Integer> userId, List<Integer> personId, List<Integer> accountId, List<String> currentState, List<String> taskType, String timeIntervalFilter, String idempotencyKey, List<String> locale, String sortBy, String sortDirection, Integer perPage, Integer page, Boolean includePagingCounts, Boolean limitPagingCounts) throws ApiException {
        okhttp3.Call localVarCall = v2TasksJsonGetValidateBeforeCall(ids, userId, personId, accountId, currentState, taskType, timeIntervalFilter, idempotencyKey, locale, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts, null);
        Type localVarReturnType = new TypeToken<List<Task>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List tasks (asynchronously)
     * Fetches multiple task records. The records can be filtered, paged, and sorted according to the respective parameters. 
     * @param ids IDs of tasks to fetch. (optional)
     * @param userId Filters tasks by the user to which they are assigned. (optional)
     * @param personId Filters tasks by the person to which they are associated. (optional)
     * @param accountId Filters tasks by the account to which they are associated. (optional)
     * @param currentState Filters tasks by their current state. Valid current_states include: [&#39;scheduled&#39;, &#39;completed&#39;]. (optional)
     * @param taskType Filters tasks by their task type. Valid task_types include: [&#39;call&#39;, &#39;email&#39;, &#39;general&#39;]. (optional)
     * @param timeIntervalFilter Filters tasks by time interval. Valid time_intervals include: [&#39;overdue&#39;, &#39;today&#39;, &#39;tomorrow&#39;, &#39;this_week&#39;, &#39;next_week&#39;]. (optional)
     * @param idempotencyKey Filters tasks by idempotency key. (optional)
     * @param locale Filters tasks by locale of the person to which they are associated. (optional)
     * @param sortBy Key to sort on, must be one of: due_date, due_at. Defaults to due_date (optional)
     * @param sortDirection Direction to sort in, must be one of: ASC, DESC. Defaults to ASC (optional)
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @param page The current page to fetch results from. Defaults to 1 (optional)
     * @param includePagingCounts Whether to include total_pages and total_count in the metadata. Defaults to false (optional)
     * @param limitPagingCounts Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2TasksJsonGetAsync(List<Integer> ids, List<Integer> userId, List<Integer> personId, List<Integer> accountId, List<String> currentState, List<String> taskType, String timeIntervalFilter, String idempotencyKey, List<String> locale, String sortBy, String sortDirection, Integer perPage, Integer page, Boolean includePagingCounts, Boolean limitPagingCounts, final ApiCallback<List<Task>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2TasksJsonGetValidateBeforeCall(ids, userId, personId, accountId, currentState, taskType, timeIntervalFilter, idempotencyKey, locale, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts, _callback);
        Type localVarReturnType = new TypeToken<List<Task>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2TasksJsonPost
     * @param currentState Current state of the task, valid options are: scheduled (required)
     * @param dueDate Date of when the Task is due, ISO-8601 date format required (required)
     * @param personId ID of the person to be contacted (required)
     * @param subject Subject line of the task. (required)
     * @param taskType Task type, valid options are: call, email, general (required)
     * @param userId ID of the user linked to the task (required)
     * @param description A description of the task recorded for person at completion time (optional)
     * @param idempotencyKey Establishes a unique identifier to prevent duplicates from being created (optional)
     * @param remindAt Datetime of when the user will be reminded of the task, ISO-8601 datetime format required (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2TasksJsonPostCall(String currentState, String dueDate, String personId, String subject, String taskType, Integer userId, String description, String idempotencyKey, String remindAt, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/tasks.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currentState != null) {
            localVarFormParams.put("current_state", currentState);
        }

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (dueDate != null) {
            localVarFormParams.put("due_date", dueDate);
        }

        if (idempotencyKey != null) {
            localVarFormParams.put("idempotency_key", idempotencyKey);
        }

        if (personId != null) {
            localVarFormParams.put("person_id", personId);
        }

        if (remindAt != null) {
            localVarFormParams.put("remind_at", remindAt);
        }

        if (subject != null) {
            localVarFormParams.put("subject", subject);
        }

        if (taskType != null) {
            localVarFormParams.put("task_type", taskType);
        }

        if (userId != null) {
            localVarFormParams.put("user_id", userId);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2TasksJsonPostValidateBeforeCall(String currentState, String dueDate, String personId, String subject, String taskType, Integer userId, String description, String idempotencyKey, String remindAt, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'currentState' is set
        if (currentState == null) {
            throw new ApiException("Missing the required parameter 'currentState' when calling v2TasksJsonPost(Async)");
        }

        // verify the required parameter 'dueDate' is set
        if (dueDate == null) {
            throw new ApiException("Missing the required parameter 'dueDate' when calling v2TasksJsonPost(Async)");
        }

        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling v2TasksJsonPost(Async)");
        }

        // verify the required parameter 'subject' is set
        if (subject == null) {
            throw new ApiException("Missing the required parameter 'subject' when calling v2TasksJsonPost(Async)");
        }

        // verify the required parameter 'taskType' is set
        if (taskType == null) {
            throw new ApiException("Missing the required parameter 'taskType' when calling v2TasksJsonPost(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling v2TasksJsonPost(Async)");
        }

        return v2TasksJsonPostCall(currentState, dueDate, personId, subject, taskType, userId, description, idempotencyKey, remindAt, _callback);

    }

    /**
     * Create a Task
     * Creates a task. 
     * @param currentState Current state of the task, valid options are: scheduled (required)
     * @param dueDate Date of when the Task is due, ISO-8601 date format required (required)
     * @param personId ID of the person to be contacted (required)
     * @param subject Subject line of the task. (required)
     * @param taskType Task type, valid options are: call, email, general (required)
     * @param userId ID of the user linked to the task (required)
     * @param description A description of the task recorded for person at completion time (optional)
     * @param idempotencyKey Establishes a unique identifier to prevent duplicates from being created (optional)
     * @param remindAt Datetime of when the user will be reminded of the task, ISO-8601 datetime format required (optional)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Task v2TasksJsonPost(String currentState, String dueDate, String personId, String subject, String taskType, Integer userId, String description, String idempotencyKey, String remindAt) throws ApiException {
        ApiResponse<Task> localVarResp = v2TasksJsonPostWithHttpInfo(currentState, dueDate, personId, subject, taskType, userId, description, idempotencyKey, remindAt);
        return localVarResp.getData();
    }

    /**
     * Create a Task
     * Creates a task. 
     * @param currentState Current state of the task, valid options are: scheduled (required)
     * @param dueDate Date of when the Task is due, ISO-8601 date format required (required)
     * @param personId ID of the person to be contacted (required)
     * @param subject Subject line of the task. (required)
     * @param taskType Task type, valid options are: call, email, general (required)
     * @param userId ID of the user linked to the task (required)
     * @param description A description of the task recorded for person at completion time (optional)
     * @param idempotencyKey Establishes a unique identifier to prevent duplicates from being created (optional)
     * @param remindAt Datetime of when the user will be reminded of the task, ISO-8601 datetime format required (optional)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Task> v2TasksJsonPostWithHttpInfo(String currentState, String dueDate, String personId, String subject, String taskType, Integer userId, String description, String idempotencyKey, String remindAt) throws ApiException {
        okhttp3.Call localVarCall = v2TasksJsonPostValidateBeforeCall(currentState, dueDate, personId, subject, taskType, userId, description, idempotencyKey, remindAt, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Task (asynchronously)
     * Creates a task. 
     * @param currentState Current state of the task, valid options are: scheduled (required)
     * @param dueDate Date of when the Task is due, ISO-8601 date format required (required)
     * @param personId ID of the person to be contacted (required)
     * @param subject Subject line of the task. (required)
     * @param taskType Task type, valid options are: call, email, general (required)
     * @param userId ID of the user linked to the task (required)
     * @param description A description of the task recorded for person at completion time (optional)
     * @param idempotencyKey Establishes a unique identifier to prevent duplicates from being created (optional)
     * @param remindAt Datetime of when the user will be reminded of the task, ISO-8601 datetime format required (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2TasksJsonPostAsync(String currentState, String dueDate, String personId, String subject, String taskType, Integer userId, String description, String idempotencyKey, String remindAt, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2TasksJsonPostValidateBeforeCall(currentState, dueDate, personId, subject, taskType, userId, description, idempotencyKey, remindAt, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
