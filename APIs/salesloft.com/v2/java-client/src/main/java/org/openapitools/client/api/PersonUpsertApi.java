/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.PersonUpsert;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PersonUpsertApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PersonUpsertApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PersonUpsertApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v2PersonUpsertsJsonPost
     * @param accountId ID of the Account to link this person to (optional)
     * @param city City (optional)
     * @param contactRestrictions Specific methods of communication to prevent for this person. This will prevent individual execution of these communication types as well as automatically skip cadence steps of this communication type for this person in SalesLoft. Values currently accepted: call, email, message (optional)
     * @param country Country (optional)
     * @param crmId Requires Salesforce.  ID of the person in your external CRM. You must provide a crm_id_type if this is included.  Validations will be applied to the crm_id depending on the crm_id_type. A \\\&quot;salesforce\\\&quot; ID must be exactly 18 characters. A \\\&quot;salesforce\\\&quot; ID must be either a Lead (00Q) or Contact (003) object. The type will be validated using the 18 character ID.  This field can only be used if your application or API key has the \\\&quot;person:set_crm_id\\\&quot; scope.   (optional)
     * @param crmIdType The CRM that the provided crm_id is for. Must be one of: salesforce (optional)
     * @param customFields Custom fields are defined by the user&#39;s team. Only fields with values are presented in the API. (optional)
     * @param doNotContact Whether or not this person has opted out of all communication. Setting this value to true prevents this person from being called, emailed, or added to a cadence in SalesLoft. If this person is currently in a cadence, they will be removed. (optional)
     * @param emailAddress Email address (optional)
     * @param firstName First name (optional)
     * @param homePhone Home phone without formatting (optional)
     * @param id ID of the person to update. Used if the upsert_key&#x3D;id. When id and another upsert_key are provided, the request will fail if the upsert record id and id parameter don&#39;t match.  (optional)
     * @param importId ID of the Import this person is a part of. A person can be part of multiple imports, but this ID will always be the most recent Import (optional)
     * @param jobSeniority The Job Seniority of a Person, must be one of director, executive, individual_contributor, manager, vice_president, unknown (optional)
     * @param lastName Last name (optional)
     * @param linkedinUrl Linkedin URL (optional)
     * @param locale Time locale of the person (optional)
     * @param mobilePhone Mobile phone without formatting (optional)
     * @param ownerId ID of the User that owns this person (optional)
     * @param personCompanyIndustry Company industry. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended (optional)
     * @param personCompanyName Company name. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended (optional)
     * @param personCompanyWebsite Company website. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended (optional)
     * @param personStageId ID of the PersonStage of this person (optional)
     * @param personalEmailAddress Personal email address (optional)
     * @param personalWebsite The website of this person (optional)
     * @param phone Phone without formatting (optional)
     * @param phoneExtension Phone extension without formatting (optional)
     * @param secondaryEmailAddress Alternate email address (optional)
     * @param state State (optional)
     * @param tags All tags applied to this person (optional)
     * @param title Job title (optional)
     * @param twitterHandle The twitter handle of this person (optional)
     * @param upsertKey Name of the parameter to upsert on. The field must be provided in the input parameters, or the request will fail. The request will also fail if there are multiple records matched by the upsert field. This can occur if intentional duplicates by email address is enabled.  If upsert_key is not provided, this endpoint will not update an existing record.  Valid options are: id, crm_id, email_address. If crm_id is provided, then a valid crm_id_type must be provided, as documented for the person create and update endpoints.  (optional)
     * @param workCity Work location - city (optional)
     * @param workCountry Work location - country (optional)
     * @param workState Work location - state (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2PersonUpsertsJsonPostCall(Integer accountId, String city, List<String> contactRestrictions, String country, String crmId, String crmIdType, Object customFields, Boolean doNotContact, String emailAddress, String firstName, String homePhone, Integer id, Integer importId, String jobSeniority, String lastName, String linkedinUrl, String locale, String mobilePhone, Integer ownerId, String personCompanyIndustry, String personCompanyName, String personCompanyWebsite, Integer personStageId, String personalEmailAddress, String personalWebsite, String phone, String phoneExtension, String secondaryEmailAddress, String state, List<String> tags, String title, String twitterHandle, String upsertKey, String workCity, String workCountry, String workState, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/person_upserts.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountId != null) {
            localVarFormParams.put("account_id", accountId);
        }

        if (city != null) {
            localVarFormParams.put("city", city);
        }

        if (contactRestrictions != null) {
            localVarFormParams.put("contact_restrictions", contactRestrictions);
        }

        if (country != null) {
            localVarFormParams.put("country", country);
        }

        if (crmId != null) {
            localVarFormParams.put("crm_id", crmId);
        }

        if (crmIdType != null) {
            localVarFormParams.put("crm_id_type", crmIdType);
        }

        if (customFields != null) {
            localVarFormParams.put("custom_fields", customFields);
        }

        if (doNotContact != null) {
            localVarFormParams.put("do_not_contact", doNotContact);
        }

        if (emailAddress != null) {
            localVarFormParams.put("email_address", emailAddress);
        }

        if (firstName != null) {
            localVarFormParams.put("first_name", firstName);
        }

        if (homePhone != null) {
            localVarFormParams.put("home_phone", homePhone);
        }

        if (id != null) {
            localVarFormParams.put("id", id);
        }

        if (importId != null) {
            localVarFormParams.put("import_id", importId);
        }

        if (jobSeniority != null) {
            localVarFormParams.put("job_seniority", jobSeniority);
        }

        if (lastName != null) {
            localVarFormParams.put("last_name", lastName);
        }

        if (linkedinUrl != null) {
            localVarFormParams.put("linkedin_url", linkedinUrl);
        }

        if (locale != null) {
            localVarFormParams.put("locale", locale);
        }

        if (mobilePhone != null) {
            localVarFormParams.put("mobile_phone", mobilePhone);
        }

        if (ownerId != null) {
            localVarFormParams.put("owner_id", ownerId);
        }

        if (personCompanyIndustry != null) {
            localVarFormParams.put("person_company_industry", personCompanyIndustry);
        }

        if (personCompanyName != null) {
            localVarFormParams.put("person_company_name", personCompanyName);
        }

        if (personCompanyWebsite != null) {
            localVarFormParams.put("person_company_website", personCompanyWebsite);
        }

        if (personStageId != null) {
            localVarFormParams.put("person_stage_id", personStageId);
        }

        if (personalEmailAddress != null) {
            localVarFormParams.put("personal_email_address", personalEmailAddress);
        }

        if (personalWebsite != null) {
            localVarFormParams.put("personal_website", personalWebsite);
        }

        if (phone != null) {
            localVarFormParams.put("phone", phone);
        }

        if (phoneExtension != null) {
            localVarFormParams.put("phone_extension", phoneExtension);
        }

        if (secondaryEmailAddress != null) {
            localVarFormParams.put("secondary_email_address", secondaryEmailAddress);
        }

        if (state != null) {
            localVarFormParams.put("state", state);
        }

        if (tags != null) {
            localVarFormParams.put("tags", tags);
        }

        if (title != null) {
            localVarFormParams.put("title", title);
        }

        if (twitterHandle != null) {
            localVarFormParams.put("twitter_handle", twitterHandle);
        }

        if (upsertKey != null) {
            localVarFormParams.put("upsert_key", upsertKey);
        }

        if (workCity != null) {
            localVarFormParams.put("work_city", workCity);
        }

        if (workCountry != null) {
            localVarFormParams.put("work_country", workCountry);
        }

        if (workState != null) {
            localVarFormParams.put("work_state", workState);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2PersonUpsertsJsonPostValidateBeforeCall(Integer accountId, String city, List<String> contactRestrictions, String country, String crmId, String crmIdType, Object customFields, Boolean doNotContact, String emailAddress, String firstName, String homePhone, Integer id, Integer importId, String jobSeniority, String lastName, String linkedinUrl, String locale, String mobilePhone, Integer ownerId, String personCompanyIndustry, String personCompanyName, String personCompanyWebsite, Integer personStageId, String personalEmailAddress, String personalWebsite, String phone, String phoneExtension, String secondaryEmailAddress, String state, List<String> tags, String title, String twitterHandle, String upsertKey, String workCity, String workCountry, String workState, final ApiCallback _callback) throws ApiException {
        return v2PersonUpsertsJsonPostCall(accountId, city, contactRestrictions, country, crmId, crmIdType, customFields, doNotContact, emailAddress, firstName, homePhone, id, importId, jobSeniority, lastName, linkedinUrl, locale, mobilePhone, ownerId, personCompanyIndustry, personCompanyName, personCompanyWebsite, personStageId, personalEmailAddress, personalWebsite, phone, phoneExtension, secondaryEmailAddress, state, tags, title, twitterHandle, upsertKey, workCity, workCountry, workState, _callback);

    }

    /**
     * Upsert a person
     * Upserts a person record. The upsert_key dictates how the upsert will be performed. The create and update behavior is exactly the same as the individual create and update endpoints. 
     * @param accountId ID of the Account to link this person to (optional)
     * @param city City (optional)
     * @param contactRestrictions Specific methods of communication to prevent for this person. This will prevent individual execution of these communication types as well as automatically skip cadence steps of this communication type for this person in SalesLoft. Values currently accepted: call, email, message (optional)
     * @param country Country (optional)
     * @param crmId Requires Salesforce.  ID of the person in your external CRM. You must provide a crm_id_type if this is included.  Validations will be applied to the crm_id depending on the crm_id_type. A \\\&quot;salesforce\\\&quot; ID must be exactly 18 characters. A \\\&quot;salesforce\\\&quot; ID must be either a Lead (00Q) or Contact (003) object. The type will be validated using the 18 character ID.  This field can only be used if your application or API key has the \\\&quot;person:set_crm_id\\\&quot; scope.   (optional)
     * @param crmIdType The CRM that the provided crm_id is for. Must be one of: salesforce (optional)
     * @param customFields Custom fields are defined by the user&#39;s team. Only fields with values are presented in the API. (optional)
     * @param doNotContact Whether or not this person has opted out of all communication. Setting this value to true prevents this person from being called, emailed, or added to a cadence in SalesLoft. If this person is currently in a cadence, they will be removed. (optional)
     * @param emailAddress Email address (optional)
     * @param firstName First name (optional)
     * @param homePhone Home phone without formatting (optional)
     * @param id ID of the person to update. Used if the upsert_key&#x3D;id. When id and another upsert_key are provided, the request will fail if the upsert record id and id parameter don&#39;t match.  (optional)
     * @param importId ID of the Import this person is a part of. A person can be part of multiple imports, but this ID will always be the most recent Import (optional)
     * @param jobSeniority The Job Seniority of a Person, must be one of director, executive, individual_contributor, manager, vice_president, unknown (optional)
     * @param lastName Last name (optional)
     * @param linkedinUrl Linkedin URL (optional)
     * @param locale Time locale of the person (optional)
     * @param mobilePhone Mobile phone without formatting (optional)
     * @param ownerId ID of the User that owns this person (optional)
     * @param personCompanyIndustry Company industry. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended (optional)
     * @param personCompanyName Company name. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended (optional)
     * @param personCompanyWebsite Company website. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended (optional)
     * @param personStageId ID of the PersonStage of this person (optional)
     * @param personalEmailAddress Personal email address (optional)
     * @param personalWebsite The website of this person (optional)
     * @param phone Phone without formatting (optional)
     * @param phoneExtension Phone extension without formatting (optional)
     * @param secondaryEmailAddress Alternate email address (optional)
     * @param state State (optional)
     * @param tags All tags applied to this person (optional)
     * @param title Job title (optional)
     * @param twitterHandle The twitter handle of this person (optional)
     * @param upsertKey Name of the parameter to upsert on. The field must be provided in the input parameters, or the request will fail. The request will also fail if there are multiple records matched by the upsert field. This can occur if intentional duplicates by email address is enabled.  If upsert_key is not provided, this endpoint will not update an existing record.  Valid options are: id, crm_id, email_address. If crm_id is provided, then a valid crm_id_type must be provided, as documented for the person create and update endpoints.  (optional)
     * @param workCity Work location - city (optional)
     * @param workCountry Work location - country (optional)
     * @param workState Work location - state (optional)
     * @return PersonUpsert
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PersonUpsert v2PersonUpsertsJsonPost(Integer accountId, String city, List<String> contactRestrictions, String country, String crmId, String crmIdType, Object customFields, Boolean doNotContact, String emailAddress, String firstName, String homePhone, Integer id, Integer importId, String jobSeniority, String lastName, String linkedinUrl, String locale, String mobilePhone, Integer ownerId, String personCompanyIndustry, String personCompanyName, String personCompanyWebsite, Integer personStageId, String personalEmailAddress, String personalWebsite, String phone, String phoneExtension, String secondaryEmailAddress, String state, List<String> tags, String title, String twitterHandle, String upsertKey, String workCity, String workCountry, String workState) throws ApiException {
        ApiResponse<PersonUpsert> localVarResp = v2PersonUpsertsJsonPostWithHttpInfo(accountId, city, contactRestrictions, country, crmId, crmIdType, customFields, doNotContact, emailAddress, firstName, homePhone, id, importId, jobSeniority, lastName, linkedinUrl, locale, mobilePhone, ownerId, personCompanyIndustry, personCompanyName, personCompanyWebsite, personStageId, personalEmailAddress, personalWebsite, phone, phoneExtension, secondaryEmailAddress, state, tags, title, twitterHandle, upsertKey, workCity, workCountry, workState);
        return localVarResp.getData();
    }

    /**
     * Upsert a person
     * Upserts a person record. The upsert_key dictates how the upsert will be performed. The create and update behavior is exactly the same as the individual create and update endpoints. 
     * @param accountId ID of the Account to link this person to (optional)
     * @param city City (optional)
     * @param contactRestrictions Specific methods of communication to prevent for this person. This will prevent individual execution of these communication types as well as automatically skip cadence steps of this communication type for this person in SalesLoft. Values currently accepted: call, email, message (optional)
     * @param country Country (optional)
     * @param crmId Requires Salesforce.  ID of the person in your external CRM. You must provide a crm_id_type if this is included.  Validations will be applied to the crm_id depending on the crm_id_type. A \\\&quot;salesforce\\\&quot; ID must be exactly 18 characters. A \\\&quot;salesforce\\\&quot; ID must be either a Lead (00Q) or Contact (003) object. The type will be validated using the 18 character ID.  This field can only be used if your application or API key has the \\\&quot;person:set_crm_id\\\&quot; scope.   (optional)
     * @param crmIdType The CRM that the provided crm_id is for. Must be one of: salesforce (optional)
     * @param customFields Custom fields are defined by the user&#39;s team. Only fields with values are presented in the API. (optional)
     * @param doNotContact Whether or not this person has opted out of all communication. Setting this value to true prevents this person from being called, emailed, or added to a cadence in SalesLoft. If this person is currently in a cadence, they will be removed. (optional)
     * @param emailAddress Email address (optional)
     * @param firstName First name (optional)
     * @param homePhone Home phone without formatting (optional)
     * @param id ID of the person to update. Used if the upsert_key&#x3D;id. When id and another upsert_key are provided, the request will fail if the upsert record id and id parameter don&#39;t match.  (optional)
     * @param importId ID of the Import this person is a part of. A person can be part of multiple imports, but this ID will always be the most recent Import (optional)
     * @param jobSeniority The Job Seniority of a Person, must be one of director, executive, individual_contributor, manager, vice_president, unknown (optional)
     * @param lastName Last name (optional)
     * @param linkedinUrl Linkedin URL (optional)
     * @param locale Time locale of the person (optional)
     * @param mobilePhone Mobile phone without formatting (optional)
     * @param ownerId ID of the User that owns this person (optional)
     * @param personCompanyIndustry Company industry. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended (optional)
     * @param personCompanyName Company name. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended (optional)
     * @param personCompanyWebsite Company website. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended (optional)
     * @param personStageId ID of the PersonStage of this person (optional)
     * @param personalEmailAddress Personal email address (optional)
     * @param personalWebsite The website of this person (optional)
     * @param phone Phone without formatting (optional)
     * @param phoneExtension Phone extension without formatting (optional)
     * @param secondaryEmailAddress Alternate email address (optional)
     * @param state State (optional)
     * @param tags All tags applied to this person (optional)
     * @param title Job title (optional)
     * @param twitterHandle The twitter handle of this person (optional)
     * @param upsertKey Name of the parameter to upsert on. The field must be provided in the input parameters, or the request will fail. The request will also fail if there are multiple records matched by the upsert field. This can occur if intentional duplicates by email address is enabled.  If upsert_key is not provided, this endpoint will not update an existing record.  Valid options are: id, crm_id, email_address. If crm_id is provided, then a valid crm_id_type must be provided, as documented for the person create and update endpoints.  (optional)
     * @param workCity Work location - city (optional)
     * @param workCountry Work location - country (optional)
     * @param workState Work location - state (optional)
     * @return ApiResponse&lt;PersonUpsert&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonUpsert> v2PersonUpsertsJsonPostWithHttpInfo(Integer accountId, String city, List<String> contactRestrictions, String country, String crmId, String crmIdType, Object customFields, Boolean doNotContact, String emailAddress, String firstName, String homePhone, Integer id, Integer importId, String jobSeniority, String lastName, String linkedinUrl, String locale, String mobilePhone, Integer ownerId, String personCompanyIndustry, String personCompanyName, String personCompanyWebsite, Integer personStageId, String personalEmailAddress, String personalWebsite, String phone, String phoneExtension, String secondaryEmailAddress, String state, List<String> tags, String title, String twitterHandle, String upsertKey, String workCity, String workCountry, String workState) throws ApiException {
        okhttp3.Call localVarCall = v2PersonUpsertsJsonPostValidateBeforeCall(accountId, city, contactRestrictions, country, crmId, crmIdType, customFields, doNotContact, emailAddress, firstName, homePhone, id, importId, jobSeniority, lastName, linkedinUrl, locale, mobilePhone, ownerId, personCompanyIndustry, personCompanyName, personCompanyWebsite, personStageId, personalEmailAddress, personalWebsite, phone, phoneExtension, secondaryEmailAddress, state, tags, title, twitterHandle, upsertKey, workCity, workCountry, workState, null);
        Type localVarReturnType = new TypeToken<PersonUpsert>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upsert a person (asynchronously)
     * Upserts a person record. The upsert_key dictates how the upsert will be performed. The create and update behavior is exactly the same as the individual create and update endpoints. 
     * @param accountId ID of the Account to link this person to (optional)
     * @param city City (optional)
     * @param contactRestrictions Specific methods of communication to prevent for this person. This will prevent individual execution of these communication types as well as automatically skip cadence steps of this communication type for this person in SalesLoft. Values currently accepted: call, email, message (optional)
     * @param country Country (optional)
     * @param crmId Requires Salesforce.  ID of the person in your external CRM. You must provide a crm_id_type if this is included.  Validations will be applied to the crm_id depending on the crm_id_type. A \\\&quot;salesforce\\\&quot; ID must be exactly 18 characters. A \\\&quot;salesforce\\\&quot; ID must be either a Lead (00Q) or Contact (003) object. The type will be validated using the 18 character ID.  This field can only be used if your application or API key has the \\\&quot;person:set_crm_id\\\&quot; scope.   (optional)
     * @param crmIdType The CRM that the provided crm_id is for. Must be one of: salesforce (optional)
     * @param customFields Custom fields are defined by the user&#39;s team. Only fields with values are presented in the API. (optional)
     * @param doNotContact Whether or not this person has opted out of all communication. Setting this value to true prevents this person from being called, emailed, or added to a cadence in SalesLoft. If this person is currently in a cadence, they will be removed. (optional)
     * @param emailAddress Email address (optional)
     * @param firstName First name (optional)
     * @param homePhone Home phone without formatting (optional)
     * @param id ID of the person to update. Used if the upsert_key&#x3D;id. When id and another upsert_key are provided, the request will fail if the upsert record id and id parameter don&#39;t match.  (optional)
     * @param importId ID of the Import this person is a part of. A person can be part of multiple imports, but this ID will always be the most recent Import (optional)
     * @param jobSeniority The Job Seniority of a Person, must be one of director, executive, individual_contributor, manager, vice_president, unknown (optional)
     * @param lastName Last name (optional)
     * @param linkedinUrl Linkedin URL (optional)
     * @param locale Time locale of the person (optional)
     * @param mobilePhone Mobile phone without formatting (optional)
     * @param ownerId ID of the User that owns this person (optional)
     * @param personCompanyIndustry Company industry. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended (optional)
     * @param personCompanyName Company name. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended (optional)
     * @param personCompanyWebsite Company website. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended (optional)
     * @param personStageId ID of the PersonStage of this person (optional)
     * @param personalEmailAddress Personal email address (optional)
     * @param personalWebsite The website of this person (optional)
     * @param phone Phone without formatting (optional)
     * @param phoneExtension Phone extension without formatting (optional)
     * @param secondaryEmailAddress Alternate email address (optional)
     * @param state State (optional)
     * @param tags All tags applied to this person (optional)
     * @param title Job title (optional)
     * @param twitterHandle The twitter handle of this person (optional)
     * @param upsertKey Name of the parameter to upsert on. The field must be provided in the input parameters, or the request will fail. The request will also fail if there are multiple records matched by the upsert field. This can occur if intentional duplicates by email address is enabled.  If upsert_key is not provided, this endpoint will not update an existing record.  Valid options are: id, crm_id, email_address. If crm_id is provided, then a valid crm_id_type must be provided, as documented for the person create and update endpoints.  (optional)
     * @param workCity Work location - city (optional)
     * @param workCountry Work location - country (optional)
     * @param workState Work location - state (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2PersonUpsertsJsonPostAsync(Integer accountId, String city, List<String> contactRestrictions, String country, String crmId, String crmIdType, Object customFields, Boolean doNotContact, String emailAddress, String firstName, String homePhone, Integer id, Integer importId, String jobSeniority, String lastName, String linkedinUrl, String locale, String mobilePhone, Integer ownerId, String personCompanyIndustry, String personCompanyName, String personCompanyWebsite, Integer personStageId, String personalEmailAddress, String personalWebsite, String phone, String phoneExtension, String secondaryEmailAddress, String state, List<String> tags, String title, String twitterHandle, String upsertKey, String workCity, String workCountry, String workState, final ApiCallback<PersonUpsert> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2PersonUpsertsJsonPostValidateBeforeCall(accountId, city, contactRestrictions, country, crmId, crmIdType, customFields, doNotContact, emailAddress, firstName, homePhone, id, importId, jobSeniority, lastName, linkedinUrl, locale, mobilePhone, ownerId, personCompanyIndustry, personCompanyName, personCompanyWebsite, personStageId, personalEmailAddress, personalWebsite, phone, phoneExtension, secondaryEmailAddress, state, tags, title, twitterHandle, upsertKey, workCity, workCountry, workState, _callback);
        Type localVarReturnType = new TypeToken<PersonUpsert>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
