/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BulkJobResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BulkJobsResultsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BulkJobsResultsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BulkJobsResultsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v2BulkJobsBulkJobsIdResultsGet
     * @param bulkJobsId The id for the Bulk Job (required)
     * @param status Filter by result status. Accepts multiple statuses. Each status must be one of pending, success, error, retrying (optional)
     * @param id Filter by id using comparison operators. Only supports greater than (gt) comparison (i.e. id[gt]&#x3D;123) (optional)
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BulkJobsBulkJobsIdResultsGetCall(Integer bulkJobsId, List<String> status, Object id, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/bulk_jobs/{bulk_jobs_id}/results"
            .replace("{" + "bulk_jobs_id" + "}", localVarApiClient.escapeString(bulkJobsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "status", status));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(id));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2BulkJobsBulkJobsIdResultsGetValidateBeforeCall(Integer bulkJobsId, List<String> status, Object id, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bulkJobsId' is set
        if (bulkJobsId == null) {
            throw new ApiException("Missing the required parameter 'bulkJobsId' when calling v2BulkJobsBulkJobsIdResultsGet(Async)");
        }

        return v2BulkJobsBulkJobsIdResultsGetCall(bulkJobsId, status, id, perPage, _callback);

    }

    /**
     * List job data for a completed bulk job.
     * Fetches multiple job data records for a completed bulk job. Note that until a bulk job&#39;s state is set to &#x60;done&#x60; the returned &#x60;data&#x60; will be an empty array. Pagination is not supported, but cursor based polling is via use of the &#x60;id[gt]&#x60; filter. Pass the last id seen (i.e. &#x60;id[gt]&#x3D;1234&#x60;) in order to get the next batch of records.
     * @param bulkJobsId The id for the Bulk Job (required)
     * @param status Filter by result status. Accepts multiple statuses. Each status must be one of pending, success, error, retrying (optional)
     * @param id Filter by id using comparison operators. Only supports greater than (gt) comparison (i.e. id[gt]&#x3D;123) (optional)
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @return List&lt;BulkJobResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<BulkJobResult> v2BulkJobsBulkJobsIdResultsGet(Integer bulkJobsId, List<String> status, Object id, Integer perPage) throws ApiException {
        ApiResponse<List<BulkJobResult>> localVarResp = v2BulkJobsBulkJobsIdResultsGetWithHttpInfo(bulkJobsId, status, id, perPage);
        return localVarResp.getData();
    }

    /**
     * List job data for a completed bulk job.
     * Fetches multiple job data records for a completed bulk job. Note that until a bulk job&#39;s state is set to &#x60;done&#x60; the returned &#x60;data&#x60; will be an empty array. Pagination is not supported, but cursor based polling is via use of the &#x60;id[gt]&#x60; filter. Pass the last id seen (i.e. &#x60;id[gt]&#x3D;1234&#x60;) in order to get the next batch of records.
     * @param bulkJobsId The id for the Bulk Job (required)
     * @param status Filter by result status. Accepts multiple statuses. Each status must be one of pending, success, error, retrying (optional)
     * @param id Filter by id using comparison operators. Only supports greater than (gt) comparison (i.e. id[gt]&#x3D;123) (optional)
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @return ApiResponse&lt;List&lt;BulkJobResult&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BulkJobResult>> v2BulkJobsBulkJobsIdResultsGetWithHttpInfo(Integer bulkJobsId, List<String> status, Object id, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = v2BulkJobsBulkJobsIdResultsGetValidateBeforeCall(bulkJobsId, status, id, perPage, null);
        Type localVarReturnType = new TypeToken<List<BulkJobResult>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List job data for a completed bulk job. (asynchronously)
     * Fetches multiple job data records for a completed bulk job. Note that until a bulk job&#39;s state is set to &#x60;done&#x60; the returned &#x60;data&#x60; will be an empty array. Pagination is not supported, but cursor based polling is via use of the &#x60;id[gt]&#x60; filter. Pass the last id seen (i.e. &#x60;id[gt]&#x3D;1234&#x60;) in order to get the next batch of records.
     * @param bulkJobsId The id for the Bulk Job (required)
     * @param status Filter by result status. Accepts multiple statuses. Each status must be one of pending, success, error, retrying (optional)
     * @param id Filter by id using comparison operators. Only supports greater than (gt) comparison (i.e. id[gt]&#x3D;123) (optional)
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BulkJobsBulkJobsIdResultsGetAsync(Integer bulkJobsId, List<String> status, Object id, Integer perPage, final ApiCallback<List<BulkJobResult>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2BulkJobsBulkJobsIdResultsGetValidateBeforeCall(bulkJobsId, status, id, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<BulkJobResult>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
