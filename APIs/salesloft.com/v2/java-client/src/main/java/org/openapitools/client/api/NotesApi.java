/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Note;
import org.openapitools.client.model.Person;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NotesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NotesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NotesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v2NotesIdJsonDelete
     * @param id Note ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The Note has been deleted successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2NotesIdJsonDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/notes/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2NotesIdJsonDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v2NotesIdJsonDelete(Async)");
        }

        return v2NotesIdJsonDeleteCall(id, _callback);

    }

    /**
     * Delete a note
     * Deletes a note owned by authorized account. This operation is not reversible without contacting support. This operation can be called multiple times successfully. 
     * @param id Note ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The Note has been deleted successfully </td><td>  -  </td></tr>
     </table>
     */
    public void v2NotesIdJsonDelete(String id) throws ApiException {
        v2NotesIdJsonDeleteWithHttpInfo(id);
    }

    /**
     * Delete a note
     * Deletes a note owned by authorized account. This operation is not reversible without contacting support. This operation can be called multiple times successfully. 
     * @param id Note ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The Note has been deleted successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v2NotesIdJsonDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = v2NotesIdJsonDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a note (asynchronously)
     * Deletes a note owned by authorized account. This operation is not reversible without contacting support. This operation can be called multiple times successfully. 
     * @param id Note ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The Note has been deleted successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2NotesIdJsonDeleteAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2NotesIdJsonDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2NotesIdJsonGet
     * @param id Note ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2NotesIdJsonGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/notes/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2NotesIdJsonGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v2NotesIdJsonGet(Async)");
        }

        return v2NotesIdJsonGetCall(id, _callback);

    }

    /**
     * Fetch a note
     * Fetches a note, by ID only. 
     * @param id Note ID (required)
     * @return Note
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Note v2NotesIdJsonGet(String id) throws ApiException {
        ApiResponse<Note> localVarResp = v2NotesIdJsonGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Fetch a note
     * Fetches a note, by ID only. 
     * @param id Note ID (required)
     * @return ApiResponse&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Note> v2NotesIdJsonGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = v2NotesIdJsonGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a note (asynchronously)
     * Fetches a note, by ID only. 
     * @param id Note ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2NotesIdJsonGetAsync(String id, final ApiCallback<Note> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2NotesIdJsonGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2NotesIdJsonPut
     * @param id Note ID (required)
     * @param content The content of the note (required)
     * @param callId ID of the call with which the note is associated. The call cannot already have a note. If the note is associated to a call already, it will become associated to the requested call (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2NotesIdJsonPutCall(String id, String content, Integer callId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/notes/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callId != null) {
            localVarFormParams.put("call_id", callId);
        }

        if (content != null) {
            localVarFormParams.put("content", content);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2NotesIdJsonPutValidateBeforeCall(String id, String content, Integer callId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v2NotesIdJsonPut(Async)");
        }

        // verify the required parameter 'content' is set
        if (content == null) {
            throw new ApiException("Missing the required parameter 'content' when calling v2NotesIdJsonPut(Async)");
        }

        return v2NotesIdJsonPutCall(id, content, callId, _callback);

    }

    /**
     * Update a note
     * Updates a note. Any changes to the note or associated records will not reflect in your CRM. 
     * @param id Note ID (required)
     * @param content The content of the note (required)
     * @param callId ID of the call with which the note is associated. The call cannot already have a note. If the note is associated to a call already, it will become associated to the requested call (optional)
     * @return Person
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Person v2NotesIdJsonPut(String id, String content, Integer callId) throws ApiException {
        ApiResponse<Person> localVarResp = v2NotesIdJsonPutWithHttpInfo(id, content, callId);
        return localVarResp.getData();
    }

    /**
     * Update a note
     * Updates a note. Any changes to the note or associated records will not reflect in your CRM. 
     * @param id Note ID (required)
     * @param content The content of the note (required)
     * @param callId ID of the call with which the note is associated. The call cannot already have a note. If the note is associated to a call already, it will become associated to the requested call (optional)
     * @return ApiResponse&lt;Person&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Person> v2NotesIdJsonPutWithHttpInfo(String id, String content, Integer callId) throws ApiException {
        okhttp3.Call localVarCall = v2NotesIdJsonPutValidateBeforeCall(id, content, callId, null);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a note (asynchronously)
     * Updates a note. Any changes to the note or associated records will not reflect in your CRM. 
     * @param id Note ID (required)
     * @param content The content of the note (required)
     * @param callId ID of the call with which the note is associated. The call cannot already have a note. If the note is associated to a call already, it will become associated to the requested call (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2NotesIdJsonPutAsync(String id, String content, Integer callId, final ApiCallback<Person> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2NotesIdJsonPutValidateBeforeCall(id, content, callId, _callback);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2NotesJsonGet
     * @param associatedWithType Case insensitive type of item with which the note is associated.  Value must be one of: person, account (optional)
     * @param associatedWithId ID of the item with which the note is associated.  The associated_with_type must also be present if this parameter is used (optional)
     * @param updatedAt Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param ids IDs of notes to fetch. If a record can&#39;t be found, that record won&#39;t be returned and your request will be successful (optional)
     * @param sortBy Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at (optional)
     * @param sortDirection Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @param page The current page to fetch results from. Defaults to 1 (optional)
     * @param includePagingCounts Whether to include total_pages and total_count in the metadata. Defaults to false (optional)
     * @param limitPagingCounts Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2NotesJsonGetCall(String associatedWithType, Integer associatedWithId, List<String> updatedAt, List<Integer> ids, String sortBy, String sortDirection, Integer perPage, Integer page, Boolean includePagingCounts, Boolean limitPagingCounts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/notes.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (associatedWithType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("associated_with_type", associatedWithType));
        }

        if (associatedWithId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("associated_with_id", associatedWithId));
        }

        if (updatedAt != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "updated_at", updatedAt));
        }

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "ids", ids));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_direction", sortDirection));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (includePagingCounts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_paging_counts", includePagingCounts));
        }

        if (limitPagingCounts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit_paging_counts", limitPagingCounts));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2NotesJsonGetValidateBeforeCall(String associatedWithType, Integer associatedWithId, List<String> updatedAt, List<Integer> ids, String sortBy, String sortDirection, Integer perPage, Integer page, Boolean includePagingCounts, Boolean limitPagingCounts, final ApiCallback _callback) throws ApiException {
        return v2NotesJsonGetCall(associatedWithType, associatedWithId, updatedAt, ids, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts, _callback);

    }

    /**
     * List notes
     * Fetches multiple note records. The records can be filtered, paged, and sorted according to the respective parameters. 
     * @param associatedWithType Case insensitive type of item with which the note is associated.  Value must be one of: person, account (optional)
     * @param associatedWithId ID of the item with which the note is associated.  The associated_with_type must also be present if this parameter is used (optional)
     * @param updatedAt Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param ids IDs of notes to fetch. If a record can&#39;t be found, that record won&#39;t be returned and your request will be successful (optional)
     * @param sortBy Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at (optional)
     * @param sortDirection Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @param page The current page to fetch results from. Defaults to 1 (optional)
     * @param includePagingCounts Whether to include total_pages and total_count in the metadata. Defaults to false (optional)
     * @param limitPagingCounts Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)
     * @return List&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<Note> v2NotesJsonGet(String associatedWithType, Integer associatedWithId, List<String> updatedAt, List<Integer> ids, String sortBy, String sortDirection, Integer perPage, Integer page, Boolean includePagingCounts, Boolean limitPagingCounts) throws ApiException {
        ApiResponse<List<Note>> localVarResp = v2NotesJsonGetWithHttpInfo(associatedWithType, associatedWithId, updatedAt, ids, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts);
        return localVarResp.getData();
    }

    /**
     * List notes
     * Fetches multiple note records. The records can be filtered, paged, and sorted according to the respective parameters. 
     * @param associatedWithType Case insensitive type of item with which the note is associated.  Value must be one of: person, account (optional)
     * @param associatedWithId ID of the item with which the note is associated.  The associated_with_type must also be present if this parameter is used (optional)
     * @param updatedAt Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param ids IDs of notes to fetch. If a record can&#39;t be found, that record won&#39;t be returned and your request will be successful (optional)
     * @param sortBy Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at (optional)
     * @param sortDirection Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @param page The current page to fetch results from. Defaults to 1 (optional)
     * @param includePagingCounts Whether to include total_pages and total_count in the metadata. Defaults to false (optional)
     * @param limitPagingCounts Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)
     * @return ApiResponse&lt;List&lt;Note&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Note>> v2NotesJsonGetWithHttpInfo(String associatedWithType, Integer associatedWithId, List<String> updatedAt, List<Integer> ids, String sortBy, String sortDirection, Integer perPage, Integer page, Boolean includePagingCounts, Boolean limitPagingCounts) throws ApiException {
        okhttp3.Call localVarCall = v2NotesJsonGetValidateBeforeCall(associatedWithType, associatedWithId, updatedAt, ids, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts, null);
        Type localVarReturnType = new TypeToken<List<Note>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List notes (asynchronously)
     * Fetches multiple note records. The records can be filtered, paged, and sorted according to the respective parameters. 
     * @param associatedWithType Case insensitive type of item with which the note is associated.  Value must be one of: person, account (optional)
     * @param associatedWithId ID of the item with which the note is associated.  The associated_with_type must also be present if this parameter is used (optional)
     * @param updatedAt Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param ids IDs of notes to fetch. If a record can&#39;t be found, that record won&#39;t be returned and your request will be successful (optional)
     * @param sortBy Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at (optional)
     * @param sortDirection Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @param page The current page to fetch results from. Defaults to 1 (optional)
     * @param includePagingCounts Whether to include total_pages and total_count in the metadata. Defaults to false (optional)
     * @param limitPagingCounts Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2NotesJsonGetAsync(String associatedWithType, Integer associatedWithId, List<String> updatedAt, List<Integer> ids, String sortBy, String sortDirection, Integer perPage, Integer page, Boolean includePagingCounts, Boolean limitPagingCounts, final ApiCallback<List<Note>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2NotesJsonGetValidateBeforeCall(associatedWithType, associatedWithId, updatedAt, ids, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts, _callback);
        Type localVarReturnType = new TypeToken<List<Note>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2NotesJsonPost
     * @param associatedWithId ID of the item with which the note is associated (required)
     * @param associatedWithType Case insensitive type of item with which the note is associated.  Value must be one of: person, account (required)
     * @param content The content of the note (required)
     * @param callId ID of the call with which the note is associated. The call cannot already have a note (optional)
     * @param skipCrmSync Boolean indicating if the CRM sync should be skipped.  No syncing will occur if true (optional)
     * @param subject The subject of the note&#39;s crm activity, defaults to &#39;Note&#39; (optional)
     * @param userGuid The user to create the note for. Only team admins may create notes on behalf of other users. Defaults to the requesting user (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2NotesJsonPostCall(Integer associatedWithId, String associatedWithType, String content, Integer callId, Boolean skipCrmSync, String subject, String userGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/notes.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (associatedWithId != null) {
            localVarFormParams.put("associated_with_id", associatedWithId);
        }

        if (associatedWithType != null) {
            localVarFormParams.put("associated_with_type", associatedWithType);
        }

        if (callId != null) {
            localVarFormParams.put("call_id", callId);
        }

        if (content != null) {
            localVarFormParams.put("content", content);
        }

        if (skipCrmSync != null) {
            localVarFormParams.put("skip_crm_sync", skipCrmSync);
        }

        if (subject != null) {
            localVarFormParams.put("subject", subject);
        }

        if (userGuid != null) {
            localVarFormParams.put("user_guid", userGuid);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2NotesJsonPostValidateBeforeCall(Integer associatedWithId, String associatedWithType, String content, Integer callId, Boolean skipCrmSync, String subject, String userGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'associatedWithId' is set
        if (associatedWithId == null) {
            throw new ApiException("Missing the required parameter 'associatedWithId' when calling v2NotesJsonPost(Async)");
        }

        // verify the required parameter 'associatedWithType' is set
        if (associatedWithType == null) {
            throw new ApiException("Missing the required parameter 'associatedWithType' when calling v2NotesJsonPost(Async)");
        }

        // verify the required parameter 'content' is set
        if (content == null) {
            throw new ApiException("Missing the required parameter 'content' when calling v2NotesJsonPost(Async)");
        }

        return v2NotesJsonPostCall(associatedWithId, associatedWithType, content, callId, skipCrmSync, subject, userGuid, _callback);

    }

    /**
     * Create a note
     * Creates a note. 
     * @param associatedWithId ID of the item with which the note is associated (required)
     * @param associatedWithType Case insensitive type of item with which the note is associated.  Value must be one of: person, account (required)
     * @param content The content of the note (required)
     * @param callId ID of the call with which the note is associated. The call cannot already have a note (optional)
     * @param skipCrmSync Boolean indicating if the CRM sync should be skipped.  No syncing will occur if true (optional)
     * @param subject The subject of the note&#39;s crm activity, defaults to &#39;Note&#39; (optional)
     * @param userGuid The user to create the note for. Only team admins may create notes on behalf of other users. Defaults to the requesting user (optional)
     * @return Note
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Note v2NotesJsonPost(Integer associatedWithId, String associatedWithType, String content, Integer callId, Boolean skipCrmSync, String subject, String userGuid) throws ApiException {
        ApiResponse<Note> localVarResp = v2NotesJsonPostWithHttpInfo(associatedWithId, associatedWithType, content, callId, skipCrmSync, subject, userGuid);
        return localVarResp.getData();
    }

    /**
     * Create a note
     * Creates a note. 
     * @param associatedWithId ID of the item with which the note is associated (required)
     * @param associatedWithType Case insensitive type of item with which the note is associated.  Value must be one of: person, account (required)
     * @param content The content of the note (required)
     * @param callId ID of the call with which the note is associated. The call cannot already have a note (optional)
     * @param skipCrmSync Boolean indicating if the CRM sync should be skipped.  No syncing will occur if true (optional)
     * @param subject The subject of the note&#39;s crm activity, defaults to &#39;Note&#39; (optional)
     * @param userGuid The user to create the note for. Only team admins may create notes on behalf of other users. Defaults to the requesting user (optional)
     * @return ApiResponse&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Note> v2NotesJsonPostWithHttpInfo(Integer associatedWithId, String associatedWithType, String content, Integer callId, Boolean skipCrmSync, String subject, String userGuid) throws ApiException {
        okhttp3.Call localVarCall = v2NotesJsonPostValidateBeforeCall(associatedWithId, associatedWithType, content, callId, skipCrmSync, subject, userGuid, null);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a note (asynchronously)
     * Creates a note. 
     * @param associatedWithId ID of the item with which the note is associated (required)
     * @param associatedWithType Case insensitive type of item with which the note is associated.  Value must be one of: person, account (required)
     * @param content The content of the note (required)
     * @param callId ID of the call with which the note is associated. The call cannot already have a note (optional)
     * @param skipCrmSync Boolean indicating if the CRM sync should be skipped.  No syncing will occur if true (optional)
     * @param subject The subject of the note&#39;s crm activity, defaults to &#39;Note&#39; (optional)
     * @param userGuid The user to create the note for. Only team admins may create notes on behalf of other users. Defaults to the requesting user (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2NotesJsonPostAsync(Integer associatedWithId, String associatedWithType, String content, Integer callId, Boolean skipCrmSync, String subject, String userGuid, final ApiCallback<Note> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2NotesJsonPostValidateBeforeCall(associatedWithId, associatedWithType, content, callId, skipCrmSync, subject, userGuid, _callback);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
