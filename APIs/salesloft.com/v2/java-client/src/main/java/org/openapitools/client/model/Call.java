/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EmbeddedRecordingResource;
import org.openapitools.client.model.EmbeddedResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Call
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:54.467506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Call {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private EmbeddedResource action;

  public static final String SERIALIZED_NAME_CADENCE = "cadence";
  @SerializedName(SERIALIZED_NAME_CADENCE)
  private EmbeddedResource cadence;

  public static final String SERIALIZED_NAME_CALLED_PERSON = "called_person";
  @SerializedName(SERIALIZED_NAME_CALLED_PERSON)
  private EmbeddedResource calledPerson;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CRM_ACTIVITY = "crm_activity";
  @SerializedName(SERIALIZED_NAME_CRM_ACTIVITY)
  private EmbeddedResource crmActivity;

  public static final String SERIALIZED_NAME_DISPOSITION = "disposition";
  @SerializedName(SERIALIZED_NAME_DISPOSITION)
  private String disposition;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private EmbeddedResource note;

  public static final String SERIALIZED_NAME_RECORDINGS = "recordings";
  @SerializedName(SERIALIZED_NAME_RECORDINGS)
  private List<EmbeddedRecordingResource> recordings = new ArrayList<>();

  public static final String SERIALIZED_NAME_SENTIMENT = "sentiment";
  @SerializedName(SERIALIZED_NAME_SENTIMENT)
  private String sentiment;

  public static final String SERIALIZED_NAME_STEP = "step";
  @SerializedName(SERIALIZED_NAME_STEP)
  private EmbeddedResource step;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private EmbeddedResource user;

  public Call() {
  }

  public Call action(EmbeddedResource action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nullable
  public EmbeddedResource getAction() {
    return action;
  }

  public void setAction(EmbeddedResource action) {
    this.action = action;
  }


  public Call cadence(EmbeddedResource cadence) {
    this.cadence = cadence;
    return this;
  }

  /**
   * Get cadence
   * @return cadence
   */
  @javax.annotation.Nullable
  public EmbeddedResource getCadence() {
    return cadence;
  }

  public void setCadence(EmbeddedResource cadence) {
    this.cadence = cadence;
  }


  public Call calledPerson(EmbeddedResource calledPerson) {
    this.calledPerson = calledPerson;
    return this;
  }

  /**
   * Get calledPerson
   * @return calledPerson
   */
  @javax.annotation.Nullable
  public EmbeddedResource getCalledPerson() {
    return calledPerson;
  }

  public void setCalledPerson(EmbeddedResource calledPerson) {
    this.calledPerson = calledPerson;
  }


  public Call createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Datetime of when the call was created
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Call crmActivity(EmbeddedResource crmActivity) {
    this.crmActivity = crmActivity;
    return this;
  }

  /**
   * Get crmActivity
   * @return crmActivity
   */
  @javax.annotation.Nullable
  public EmbeddedResource getCrmActivity() {
    return crmActivity;
  }

  public void setCrmActivity(EmbeddedResource crmActivity) {
    this.crmActivity = crmActivity;
  }


  public Call disposition(String disposition) {
    this.disposition = disposition;
    return this;
  }

  /**
   * Result of the call
   * @return disposition
   */
  @javax.annotation.Nullable
  public String getDisposition() {
    return disposition;
  }

  public void setDisposition(String disposition) {
    this.disposition = disposition;
  }


  public Call duration(Integer duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Length of the call in seconds
   * @return duration
   */
  @javax.annotation.Nullable
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public Call id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * ID of Call
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Call note(EmbeddedResource note) {
    this.note = note;
    return this;
  }

  /**
   * Get note
   * @return note
   */
  @javax.annotation.Nullable
  public EmbeddedResource getNote() {
    return note;
  }

  public void setNote(EmbeddedResource note) {
    this.note = note;
  }


  public Call recordings(List<EmbeddedRecordingResource> recordings) {
    this.recordings = recordings;
    return this;
  }

  public Call addRecordingsItem(EmbeddedRecordingResource recordingsItem) {
    if (this.recordings == null) {
      this.recordings = new ArrayList<>();
    }
    this.recordings.add(recordingsItem);
    return this;
  }

  /**
   * The recordings for this this call and their status
   * @return recordings
   */
  @javax.annotation.Nullable
  public List<EmbeddedRecordingResource> getRecordings() {
    return recordings;
  }

  public void setRecordings(List<EmbeddedRecordingResource> recordings) {
    this.recordings = recordings;
  }


  public Call sentiment(String sentiment) {
    this.sentiment = sentiment;
    return this;
  }

  /**
   * Outcome of the conversation
   * @return sentiment
   */
  @javax.annotation.Nullable
  public String getSentiment() {
    return sentiment;
  }

  public void setSentiment(String sentiment) {
    this.sentiment = sentiment;
  }


  public Call step(EmbeddedResource step) {
    this.step = step;
    return this;
  }

  /**
   * Get step
   * @return step
   */
  @javax.annotation.Nullable
  public EmbeddedResource getStep() {
    return step;
  }

  public void setStep(EmbeddedResource step) {
    this.step = step;
  }


  public Call to(String to) {
    this.to = to;
    return this;
  }

  /**
   * Phone number that received the call
   * @return to
   */
  @javax.annotation.Nullable
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }


  public Call updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Datetime of when the call was last updated
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Call user(EmbeddedResource user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public EmbeddedResource getUser() {
    return user;
  }

  public void setUser(EmbeddedResource user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Call call = (Call) o;
    return Objects.equals(this.action, call.action) &&
        Objects.equals(this.cadence, call.cadence) &&
        Objects.equals(this.calledPerson, call.calledPerson) &&
        Objects.equals(this.createdAt, call.createdAt) &&
        Objects.equals(this.crmActivity, call.crmActivity) &&
        Objects.equals(this.disposition, call.disposition) &&
        Objects.equals(this.duration, call.duration) &&
        Objects.equals(this.id, call.id) &&
        Objects.equals(this.note, call.note) &&
        Objects.equals(this.recordings, call.recordings) &&
        Objects.equals(this.sentiment, call.sentiment) &&
        Objects.equals(this.step, call.step) &&
        Objects.equals(this.to, call.to) &&
        Objects.equals(this.updatedAt, call.updatedAt) &&
        Objects.equals(this.user, call.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, cadence, calledPerson, createdAt, crmActivity, disposition, duration, id, note, recordings, sentiment, step, to, updatedAt, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Call {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    cadence: ").append(toIndentedString(cadence)).append("\n");
    sb.append("    calledPerson: ").append(toIndentedString(calledPerson)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    crmActivity: ").append(toIndentedString(crmActivity)).append("\n");
    sb.append("    disposition: ").append(toIndentedString(disposition)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    recordings: ").append(toIndentedString(recordings)).append("\n");
    sb.append("    sentiment: ").append(toIndentedString(sentiment)).append("\n");
    sb.append("    step: ").append(toIndentedString(step)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("cadence");
    openapiFields.add("called_person");
    openapiFields.add("created_at");
    openapiFields.add("crm_activity");
    openapiFields.add("disposition");
    openapiFields.add("duration");
    openapiFields.add("id");
    openapiFields.add("note");
    openapiFields.add("recordings");
    openapiFields.add("sentiment");
    openapiFields.add("step");
    openapiFields.add("to");
    openapiFields.add("updated_at");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Call
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Call.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Call is not found in the empty JSON string", Call.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Call.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Call` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `action`
      if (jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("action"));
      }
      // validate the optional field `cadence`
      if (jsonObj.get("cadence") != null && !jsonObj.get("cadence").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("cadence"));
      }
      // validate the optional field `called_person`
      if (jsonObj.get("called_person") != null && !jsonObj.get("called_person").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("called_person"));
      }
      // validate the optional field `crm_activity`
      if (jsonObj.get("crm_activity") != null && !jsonObj.get("crm_activity").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("crm_activity"));
      }
      if ((jsonObj.get("disposition") != null && !jsonObj.get("disposition").isJsonNull()) && !jsonObj.get("disposition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disposition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disposition").toString()));
      }
      // validate the optional field `note`
      if (jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("note"));
      }
      if (jsonObj.get("recordings") != null && !jsonObj.get("recordings").isJsonNull()) {
        JsonArray jsonArrayrecordings = jsonObj.getAsJsonArray("recordings");
        if (jsonArrayrecordings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recordings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recordings` to be an array in the JSON string but got `%s`", jsonObj.get("recordings").toString()));
          }

          // validate the optional field `recordings` (array)
          for (int i = 0; i < jsonArrayrecordings.size(); i++) {
            EmbeddedRecordingResource.validateJsonElement(jsonArrayrecordings.get(i));
          };
        }
      }
      if ((jsonObj.get("sentiment") != null && !jsonObj.get("sentiment").isJsonNull()) && !jsonObj.get("sentiment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sentiment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sentiment").toString()));
      }
      // validate the optional field `step`
      if (jsonObj.get("step") != null && !jsonObj.get("step").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("step"));
      }
      if ((jsonObj.get("to") != null && !jsonObj.get("to").isJsonNull()) && !jsonObj.get("to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Call.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Call' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Call> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Call.class));

       return (TypeAdapter<T>) new TypeAdapter<Call>() {
           @Override
           public void write(JsonWriter out, Call value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Call read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Call given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Call
   * @throws IOException if the JSON string is invalid with respect to Call
   */
  public static Call fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Call.class);
  }

  /**
   * Convert an instance of Call to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

