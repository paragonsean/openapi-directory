/**
 * Solar VPS
 * This is the Solar VPS Public API. You can find more at http://www.solarvps.com
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@solarvps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Dns service.
* @module api/DnsApi
* @version 1.0.0
*/
export default class DnsApi {

    /**
    * Constructs a new DnsApi. 
    * @alias module:api/DnsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dnsDomainAddPost operation.
     * @callback module:api/DnsApi~dnsDomainAddPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add dns record for given domain
     * You can try example.com below. Types allowed are: A CNAME NS TXT MX SRV SPF
     * @param {String} domain Domain you want to add records for
     * @param {String} name Fully qualified DNS name
     * @param {String} type Type of DNS record
     * @param {String} content Content for DNS record
     * @param {String} ttl Time To Live for DNS record
     * @param {String} prio Priority of DNS record
     * @param {module:api/DnsApi~dnsDomainAddPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dnsDomainAddPost(domain, name, type, content, ttl, prio, callback) {
      let postBody = null;
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling dnsDomainAddPost");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling dnsDomainAddPost");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling dnsDomainAddPost");
      }
      // verify the required parameter 'content' is set
      if (content === undefined || content === null) {
        throw new Error("Missing the required parameter 'content' when calling dnsDomainAddPost");
      }
      // verify the required parameter 'ttl' is set
      if (ttl === undefined || ttl === null) {
        throw new Error("Missing the required parameter 'ttl' when calling dnsDomainAddPost");
      }
      // verify the required parameter 'prio' is set
      if (prio === undefined || prio === null) {
        throw new Error("Missing the required parameter 'prio' when calling dnsDomainAddPost");
      }

      let pathParams = {
        'domain': domain
      };
      let queryParams = {
        'name': name,
        'type': type,
        'content': content,
        'ttl': ttl,
        'prio': prio
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dns/{domain}/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dnsDomainDeletePost operation.
     * @callback module:api/DnsApi~dnsDomainDeletePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete dns record for a given domain
     * Shows all your records for a specific domain. You can try example.com below.
     * @param {String} domain Domain name you want to get records for
     * @param {String} id Id of the DNS Record
     * @param {module:api/DnsApi~dnsDomainDeletePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dnsDomainDeletePost(domain, id, callback) {
      let postBody = null;
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling dnsDomainDeletePost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dnsDomainDeletePost");
      }

      let pathParams = {
        'domain': domain
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dns/{domain}/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dnsDomainGet operation.
     * @callback module:api/DnsApi~dnsDomainGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View all your records for a given domain
     * Shows all your records for a specific domain. You can try example.com below.
     * @param {String} domain Domain name you want to get records for
     * @param {module:api/DnsApi~dnsDomainGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dnsDomainGet(domain, callback) {
      let postBody = null;
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling dnsDomainGet");
      }

      let pathParams = {
        'domain': domain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dns/{domain}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dnsDomainUpdatePost operation.
     * @callback module:api/DnsApi~dnsDomainUpdatePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update dns record for a given domain
     * You can try example.com below.
     * @param {String} domain Domain name to add record under
     * @param {String} id Id of DNS record
     * @param {Object} opts Optional parameters
     * @param {String} [name] Fully qualified name for the DNS record
     * @param {String} [type] Type for DNS record
     * @param {String} [content] Content for the DNS Record
     * @param {String} [ttl] Time To Live for DNS record
     * @param {String} [prio] Priority of the DNS record
     * @param {module:api/DnsApi~dnsDomainUpdatePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dnsDomainUpdatePost(domain, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling dnsDomainUpdatePost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dnsDomainUpdatePost");
      }

      let pathParams = {
        'domain': domain
      };
      let queryParams = {
        'id': id,
        'name': opts['name'],
        'type': opts['type'],
        'content': opts['content'],
        'ttl': opts['ttl'],
        'prio': opts['prio']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dns/{domain}/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
