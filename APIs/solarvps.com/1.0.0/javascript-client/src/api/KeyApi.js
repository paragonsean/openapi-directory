/**
 * Solar VPS
 * This is the Solar VPS Public API. You can find more at http://www.solarvps.com
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@solarvps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Key service.
* @module api/KeyApi
* @version 1.0.0
*/
export default class KeyApi {

    /**
    * Constructs a new KeyApi. 
    * @alias module:api/KeyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the keyGenerateGet operation.
     * @callback module:api/KeyApi~keyGenerateGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate API Key
     * API Key is regenerated if it already exists
     * @param {String} username Email address used to login to SolarSystem
     * @param {String} password Password used to login to SolarSystem
     * @param {module:api/KeyApi~keyGenerateGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    keyGenerateGet(username, password, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling keyGenerateGet");
      }
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling keyGenerateGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'username': username,
        'password': password
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/key/generate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the keyGetGet operation.
     * @callback module:api/KeyApi~keyGetGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get API Key
     * Gets the API Key for user
     * @param {String} username Email address used to login to SolarSystem
     * @param {String} password Password used to login to SolarSystem
     * @param {module:api/KeyApi~keyGetGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    keyGetGet(username, password, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling keyGetGet");
      }
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling keyGetGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'username': username,
        'password': password
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/key/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
