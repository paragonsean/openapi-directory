/**
 * Solar VPS
 * This is the Solar VPS Public API. You can find more at http://www.solarvps.com
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@solarvps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Tickets service.
* @module api/TicketsApi
* @version 1.0.0
*/
export default class TicketsApi {

    /**
    * Constructs a new TicketsApi. 
    * @alias module:api/TicketsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the ticketsDepartmentAddPost operation.
     * @callback module:api/TicketsApi~ticketsDepartmentAddPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Open ticket with desired department
     * Available departments are support, billing, sales
     * @param {String} department Department you want to open a ticket with
     * @param {String} subject Subject of the ticket you are opening
     * @param {String} contents Message reply being sent
     * @param {module:api/TicketsApi~ticketsDepartmentAddPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ticketsDepartmentAddPost(department, subject, contents, callback) {
      let postBody = null;
      // verify the required parameter 'department' is set
      if (department === undefined || department === null) {
        throw new Error("Missing the required parameter 'department' when calling ticketsDepartmentAddPost");
      }
      // verify the required parameter 'subject' is set
      if (subject === undefined || subject === null) {
        throw new Error("Missing the required parameter 'subject' when calling ticketsDepartmentAddPost");
      }
      // verify the required parameter 'contents' is set
      if (contents === undefined || contents === null) {
        throw new Error("Missing the required parameter 'contents' when calling ticketsDepartmentAddPost");
      }

      let pathParams = {
        'department': department
      };
      let queryParams = {
        'subject': subject,
        'contents': contents
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tickets/{department}/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ticketsGet operation.
     * @callback module:api/TicketsApi~ticketsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View all your tickets
     * Shows all your tickets
     * @param {module:api/TicketsApi~ticketsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ticketsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tickets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ticketsTicketIdGet operation.
     * @callback module:api/TicketsApi~ticketsTicketIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View details on a specific ticket
     * Shows all information of a specific ticketId
     * @param {Number} ticketId TicketId you want to see
     * @param {module:api/TicketsApi~ticketsTicketIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ticketsTicketIdGet(ticketId, callback) {
      let postBody = null;
      // verify the required parameter 'ticketId' is set
      if (ticketId === undefined || ticketId === null) {
        throw new Error("Missing the required parameter 'ticketId' when calling ticketsTicketIdGet");
      }

      let pathParams = {
        'ticketId': ticketId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tickets/{ticketId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ticketsTicketidUpdatePost operation.
     * @callback module:api/TicketsApi~ticketsTicketidUpdatePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post a reply to a ticket
     * @param {Number} ticketid TicketId of the ticket you want to post an update to
     * @param {String} contents Message reply being sent
     * @param {module:api/TicketsApi~ticketsTicketidUpdatePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ticketsTicketidUpdatePost(ticketid, contents, callback) {
      let postBody = null;
      // verify the required parameter 'ticketid' is set
      if (ticketid === undefined || ticketid === null) {
        throw new Error("Missing the required parameter 'ticketid' when calling ticketsTicketidUpdatePost");
      }
      // verify the required parameter 'contents' is set
      if (contents === undefined || contents === null) {
        throw new Error("Missing the required parameter 'contents' when calling ticketsTicketidUpdatePost");
      }

      let pathParams = {
        'ticketid': ticketid
      };
      let queryParams = {
        'contents': contents
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tickets/{ticketid}/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
