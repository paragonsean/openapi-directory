/**
 * Solar VPS
 * This is the Solar VPS Public API. You can find more at http://www.solarvps.com
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@solarvps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITicketsApi_H
#define OAI_OAITicketsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITicketsApi : public QObject {
    Q_OBJECT

public:
    OAITicketsApi(const int timeOut = 0);
    ~OAITicketsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  department QString [required]
    * @param[in]  subject QString [required]
    * @param[in]  contents QString [required]
    */
    virtual void ticketsDepartmentAddPost(const QString &department, const QString &subject, const QString &contents);


    virtual void ticketsGet();

    /**
    * @param[in]  ticket_id double [required]
    */
    virtual void ticketsTicketIdGet(const double &ticket_id);

    /**
    * @param[in]  ticketid double [required]
    * @param[in]  contents QString [required]
    */
    virtual void ticketsTicketidUpdatePost(const double &ticketid, const QString &contents);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void ticketsDepartmentAddPostCallback(OAIHttpRequestWorker *worker);
    void ticketsGetCallback(OAIHttpRequestWorker *worker);
    void ticketsTicketIdGetCallback(OAIHttpRequestWorker *worker);
    void ticketsTicketidUpdatePostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void ticketsDepartmentAddPostSignal();
    void ticketsGetSignal();
    void ticketsTicketIdGetSignal();
    void ticketsTicketidUpdatePostSignal();


    void ticketsDepartmentAddPostSignalFull(OAIHttpRequestWorker *worker);
    void ticketsGetSignalFull(OAIHttpRequestWorker *worker);
    void ticketsTicketIdGetSignalFull(OAIHttpRequestWorker *worker);
    void ticketsTicketidUpdatePostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use ticketsDepartmentAddPostSignalError() instead")
    void ticketsDepartmentAddPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ticketsDepartmentAddPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ticketsGetSignalError() instead")
    void ticketsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ticketsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ticketsTicketIdGetSignalError() instead")
    void ticketsTicketIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ticketsTicketIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ticketsTicketidUpdatePostSignalError() instead")
    void ticketsTicketidUpdatePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ticketsTicketidUpdatePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use ticketsDepartmentAddPostSignalErrorFull() instead")
    void ticketsDepartmentAddPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ticketsDepartmentAddPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ticketsGetSignalErrorFull() instead")
    void ticketsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ticketsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ticketsTicketIdGetSignalErrorFull() instead")
    void ticketsTicketIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ticketsTicketIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ticketsTicketidUpdatePostSignalErrorFull() instead")
    void ticketsTicketidUpdatePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ticketsTicketidUpdatePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
