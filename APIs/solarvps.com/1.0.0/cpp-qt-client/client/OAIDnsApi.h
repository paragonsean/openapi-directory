/**
 * Solar VPS
 * This is the Solar VPS Public API. You can find more at http://www.solarvps.com
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@solarvps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDnsApi_H
#define OAI_OAIDnsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDnsApi : public QObject {
    Q_OBJECT

public:
    OAIDnsApi(const int timeOut = 0);
    ~OAIDnsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  domain QString [required]
    * @param[in]  name QString [required]
    * @param[in]  type QString [required]
    * @param[in]  content QString [required]
    * @param[in]  ttl QString [required]
    * @param[in]  prio QString [required]
    */
    virtual void dnsDomainAddPost(const QString &domain, const QString &name, const QString &type, const QString &content, const QString &ttl, const QString &prio);

    /**
    * @param[in]  domain QString [required]
    * @param[in]  id QString [required]
    */
    virtual void dnsDomainDeletePost(const QString &domain, const QString &id);

    /**
    * @param[in]  domain QString [required]
    */
    virtual void dnsDomainGet(const QString &domain);

    /**
    * @param[in]  domain QString [required]
    * @param[in]  id QString [required]
    * @param[in]  name QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  content QString [optional]
    * @param[in]  ttl QString [optional]
    * @param[in]  prio QString [optional]
    */
    virtual void dnsDomainUpdatePost(const QString &domain, const QString &id, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ttl = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &prio = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dnsDomainAddPostCallback(OAIHttpRequestWorker *worker);
    void dnsDomainDeletePostCallback(OAIHttpRequestWorker *worker);
    void dnsDomainGetCallback(OAIHttpRequestWorker *worker);
    void dnsDomainUpdatePostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void dnsDomainAddPostSignal();
    void dnsDomainDeletePostSignal();
    void dnsDomainGetSignal();
    void dnsDomainUpdatePostSignal();


    void dnsDomainAddPostSignalFull(OAIHttpRequestWorker *worker);
    void dnsDomainDeletePostSignalFull(OAIHttpRequestWorker *worker);
    void dnsDomainGetSignalFull(OAIHttpRequestWorker *worker);
    void dnsDomainUpdatePostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use dnsDomainAddPostSignalError() instead")
    void dnsDomainAddPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dnsDomainAddPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dnsDomainDeletePostSignalError() instead")
    void dnsDomainDeletePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dnsDomainDeletePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dnsDomainGetSignalError() instead")
    void dnsDomainGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dnsDomainGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dnsDomainUpdatePostSignalError() instead")
    void dnsDomainUpdatePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dnsDomainUpdatePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use dnsDomainAddPostSignalErrorFull() instead")
    void dnsDomainAddPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dnsDomainAddPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dnsDomainDeletePostSignalErrorFull() instead")
    void dnsDomainDeletePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dnsDomainDeletePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dnsDomainGetSignalErrorFull() instead")
    void dnsDomainGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dnsDomainGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dnsDomainUpdatePostSignalErrorFull() instead")
    void dnsDomainUpdatePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dnsDomainUpdatePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
