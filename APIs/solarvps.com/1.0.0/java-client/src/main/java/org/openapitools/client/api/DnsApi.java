/*
 * Solar VPS
 * This is the Solar VPS Public API. You can find more at http://www.solarvps.com
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@solarvps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DnsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DnsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DnsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for dnsDomainAddPost
     * @param domain Domain you want to add records for (required)
     * @param name Fully qualified DNS name (required)
     * @param type Type of DNS record (required)
     * @param content Content for DNS record (required)
     * @param ttl Time To Live for DNS record (required)
     * @param prio Priority of DNS record (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsDomainAddPostCall(String domain, String name, String type, String content, String ttl, String prio, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dns/{domain}/add"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (content != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content", content));
        }

        if (ttl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ttl", ttl));
        }

        if (prio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prio", prio));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dnsDomainAddPostValidateBeforeCall(String domain, String name, String type, String content, String ttl, String prio, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling dnsDomainAddPost(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling dnsDomainAddPost(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling dnsDomainAddPost(Async)");
        }

        // verify the required parameter 'content' is set
        if (content == null) {
            throw new ApiException("Missing the required parameter 'content' when calling dnsDomainAddPost(Async)");
        }

        // verify the required parameter 'ttl' is set
        if (ttl == null) {
            throw new ApiException("Missing the required parameter 'ttl' when calling dnsDomainAddPost(Async)");
        }

        // verify the required parameter 'prio' is set
        if (prio == null) {
            throw new ApiException("Missing the required parameter 'prio' when calling dnsDomainAddPost(Async)");
        }

        return dnsDomainAddPostCall(domain, name, type, content, ttl, prio, _callback);

    }

    /**
     * Add dns record for given domain
     * You can try example.com below. Types allowed are: A CNAME NS TXT MX SRV SPF
     * @param domain Domain you want to add records for (required)
     * @param name Fully qualified DNS name (required)
     * @param type Type of DNS record (required)
     * @param content Content for DNS record (required)
     * @param ttl Time To Live for DNS record (required)
     * @param prio Priority of DNS record (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void dnsDomainAddPost(String domain, String name, String type, String content, String ttl, String prio) throws ApiException {
        dnsDomainAddPostWithHttpInfo(domain, name, type, content, ttl, prio);
    }

    /**
     * Add dns record for given domain
     * You can try example.com below. Types allowed are: A CNAME NS TXT MX SRV SPF
     * @param domain Domain you want to add records for (required)
     * @param name Fully qualified DNS name (required)
     * @param type Type of DNS record (required)
     * @param content Content for DNS record (required)
     * @param ttl Time To Live for DNS record (required)
     * @param prio Priority of DNS record (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dnsDomainAddPostWithHttpInfo(String domain, String name, String type, String content, String ttl, String prio) throws ApiException {
        okhttp3.Call localVarCall = dnsDomainAddPostValidateBeforeCall(domain, name, type, content, ttl, prio, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add dns record for given domain (asynchronously)
     * You can try example.com below. Types allowed are: A CNAME NS TXT MX SRV SPF
     * @param domain Domain you want to add records for (required)
     * @param name Fully qualified DNS name (required)
     * @param type Type of DNS record (required)
     * @param content Content for DNS record (required)
     * @param ttl Time To Live for DNS record (required)
     * @param prio Priority of DNS record (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsDomainAddPostAsync(String domain, String name, String type, String content, String ttl, String prio, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dnsDomainAddPostValidateBeforeCall(domain, name, type, content, ttl, prio, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dnsDomainDeletePost
     * @param domain Domain name you want to get records for (required)
     * @param id Id of the DNS Record (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsDomainDeletePostCall(String domain, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dns/{domain}/delete"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dnsDomainDeletePostValidateBeforeCall(String domain, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling dnsDomainDeletePost(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dnsDomainDeletePost(Async)");
        }

        return dnsDomainDeletePostCall(domain, id, _callback);

    }

    /**
     * Delete dns record for a given domain
     * Shows all your records for a specific domain. You can try example.com below.
     * @param domain Domain name you want to get records for (required)
     * @param id Id of the DNS Record (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void dnsDomainDeletePost(String domain, String id) throws ApiException {
        dnsDomainDeletePostWithHttpInfo(domain, id);
    }

    /**
     * Delete dns record for a given domain
     * Shows all your records for a specific domain. You can try example.com below.
     * @param domain Domain name you want to get records for (required)
     * @param id Id of the DNS Record (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dnsDomainDeletePostWithHttpInfo(String domain, String id) throws ApiException {
        okhttp3.Call localVarCall = dnsDomainDeletePostValidateBeforeCall(domain, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete dns record for a given domain (asynchronously)
     * Shows all your records for a specific domain. You can try example.com below.
     * @param domain Domain name you want to get records for (required)
     * @param id Id of the DNS Record (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsDomainDeletePostAsync(String domain, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dnsDomainDeletePostValidateBeforeCall(domain, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dnsDomainGet
     * @param domain Domain name you want to get records for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsDomainGetCall(String domain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dns/{domain}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dnsDomainGetValidateBeforeCall(String domain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling dnsDomainGet(Async)");
        }

        return dnsDomainGetCall(domain, _callback);

    }

    /**
     * View all your records for a given domain
     * Shows all your records for a specific domain. You can try example.com below.
     * @param domain Domain name you want to get records for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void dnsDomainGet(String domain) throws ApiException {
        dnsDomainGetWithHttpInfo(domain);
    }

    /**
     * View all your records for a given domain
     * Shows all your records for a specific domain. You can try example.com below.
     * @param domain Domain name you want to get records for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dnsDomainGetWithHttpInfo(String domain) throws ApiException {
        okhttp3.Call localVarCall = dnsDomainGetValidateBeforeCall(domain, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View all your records for a given domain (asynchronously)
     * Shows all your records for a specific domain. You can try example.com below.
     * @param domain Domain name you want to get records for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsDomainGetAsync(String domain, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dnsDomainGetValidateBeforeCall(domain, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dnsDomainUpdatePost
     * @param domain Domain name to add record under (required)
     * @param id Id of DNS record (required)
     * @param name Fully qualified name for the DNS record (optional)
     * @param type Type for DNS record (optional)
     * @param content Content for the DNS Record (optional)
     * @param ttl Time To Live for DNS record (optional)
     * @param prio Priority of the DNS record (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsDomainUpdatePostCall(String domain, String id, String name, String type, String content, String ttl, String prio, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dns/{domain}/update"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (content != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content", content));
        }

        if (ttl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ttl", ttl));
        }

        if (prio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prio", prio));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dnsDomainUpdatePostValidateBeforeCall(String domain, String id, String name, String type, String content, String ttl, String prio, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling dnsDomainUpdatePost(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dnsDomainUpdatePost(Async)");
        }

        return dnsDomainUpdatePostCall(domain, id, name, type, content, ttl, prio, _callback);

    }

    /**
     * Update dns record for a given domain
     * You can try example.com below.
     * @param domain Domain name to add record under (required)
     * @param id Id of DNS record (required)
     * @param name Fully qualified name for the DNS record (optional)
     * @param type Type for DNS record (optional)
     * @param content Content for the DNS Record (optional)
     * @param ttl Time To Live for DNS record (optional)
     * @param prio Priority of the DNS record (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void dnsDomainUpdatePost(String domain, String id, String name, String type, String content, String ttl, String prio) throws ApiException {
        dnsDomainUpdatePostWithHttpInfo(domain, id, name, type, content, ttl, prio);
    }

    /**
     * Update dns record for a given domain
     * You can try example.com below.
     * @param domain Domain name to add record under (required)
     * @param id Id of DNS record (required)
     * @param name Fully qualified name for the DNS record (optional)
     * @param type Type for DNS record (optional)
     * @param content Content for the DNS Record (optional)
     * @param ttl Time To Live for DNS record (optional)
     * @param prio Priority of the DNS record (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dnsDomainUpdatePostWithHttpInfo(String domain, String id, String name, String type, String content, String ttl, String prio) throws ApiException {
        okhttp3.Call localVarCall = dnsDomainUpdatePostValidateBeforeCall(domain, id, name, type, content, ttl, prio, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update dns record for a given domain (asynchronously)
     * You can try example.com below.
     * @param domain Domain name to add record under (required)
     * @param id Id of DNS record (required)
     * @param name Fully qualified name for the DNS record (optional)
     * @param type Type for DNS record (optional)
     * @param content Content for the DNS Record (optional)
     * @param ttl Time To Live for DNS record (optional)
     * @param prio Priority of the DNS record (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dnsDomainUpdatePostAsync(String domain, String id, String name, String type, String content, String ttl, String prio, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dnsDomainUpdatePostValidateBeforeCall(domain, id, name, type, content, ttl, prio, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
