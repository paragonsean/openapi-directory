openapi: 3.0.1
info:
  contact:
    email: support@solarvps.com
  description: This is the Solar VPS Public API. You can find more at http://www.solarvps.com
  title: Solar VPS
  version: 1.0.0
  x-logo:
    url: https://solarvps.com/wp-content/themes/solarvps/images/logo-footer@2x.png
  x-origin:
  - format: swagger
    url: http://api.ss.solarvps.com/api-docs
    version: "1.2"
  x-providerName: solarvps.com
servers:
- url: http://api.ss.solarvps.com/
tags:
- description: Operations about DNS Records
  name: contacts
- description: Operations about DNS Records
  name: dns
- description: Operations about DNS Domains
  name: domains
- description: Operations about API Keys
  name: key
- description: Operations about pods
  name: pods
- description: Operations about SolarRay Monitoring
  name: solarray
- description: Operations about Support / Billing / Sales Tickets
  name: tickets
paths:
  /contacts:
    get:
      description: Shows all contacts under the client account.
      operationId: contacts_get
      responses:
        "200":
          content: {}
          description: No response was specified
      security:
      - apiKey: []
      summary: View all contacts under your account
      tags:
      - contacts
      x-openapi-router-controller: openapi_server.controllers.contacts_controller
  /dns/{domain}:
    get:
      description: Shows all your records for a specific domain. You can try example.com
        below.
      operationId: dns_domain_get
      parameters:
      - description: Domain name you want to get records for
        in: path
        name: domain
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: No response was specified
      security:
      - apiKey: []
      summary: View all your records for a given domain
      tags:
      - dns
      x-openapi-router-controller: openapi_server.controllers.dns_controller
  /dns/{domain}/add:
    post:
      description: "You can try example.com below. Types allowed are: A CNAME NS TXT\
        \ MX SRV SPF"
      operationId: dns_domain_add_post
      parameters:
      - description: Domain you want to add records for
        in: path
        name: domain
        required: true
        schema:
          type: string
      - description: Fully qualified DNS name
        in: query
        name: name
        required: true
        schema:
          type: string
      - description: Type of DNS record
        in: query
        name: type
        required: true
        schema:
          type: string
      - description: Content for DNS record
        in: query
        name: content
        required: true
        schema:
          type: string
      - description: Time To Live for DNS record
        in: query
        name: ttl
        required: true
        schema:
          type: string
      - description: Priority of DNS record
        in: query
        name: prio
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: No response was specified
      security:
      - apiKey: []
      summary: Add dns record for given domain
      tags:
      - dns
      x-openapi-router-controller: openapi_server.controllers.dns_controller
  /dns/{domain}/delete:
    post:
      description: Shows all your records for a specific domain. You can try example.com
        below.
      operationId: dns_domain_delete_post
      parameters:
      - description: Domain name you want to get records for
        in: path
        name: domain
        required: true
        schema:
          type: string
      - description: Id of the DNS Record
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: No response was specified
      security:
      - apiKey: []
      summary: Delete dns record for a given domain
      tags:
      - dns
      x-openapi-router-controller: openapi_server.controllers.dns_controller
  /dns/{domain}/update:
    post:
      description: You can try example.com below.
      operationId: dns_domain_update_post
      parameters:
      - description: Domain name to add record under
        in: path
        name: domain
        required: true
        schema:
          type: string
      - description: Id of DNS record
        in: query
        name: id
        required: true
        schema:
          type: string
      - description: Fully qualified name for the DNS record
        in: query
        name: name
        schema:
          type: string
      - description: Type for DNS record
        in: query
        name: type
        schema:
          type: string
      - description: Content for the DNS Record
        in: query
        name: content
        schema:
          type: string
      - description: Time To Live for DNS record
        in: query
        name: ttl
        schema:
          type: string
      - description: Priority of the DNS record
        in: query
        name: prio
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: No response was specified
      security:
      - apiKey: []
      summary: Update dns record for a given domain
      tags:
      - dns
      x-openapi-router-controller: openapi_server.controllers.dns_controller
  /domains:
    get:
      description: Shows all your domains
      operationId: domains_get
      responses:
        "200":
          content: {}
          description: No response was specified
      security:
      - apiKey: []
      summary: View all your domains managed by SolarVPS Distributed DNS
      tags:
      - domains
      x-openapi-router-controller: openapi_server.controllers.domains_controller
  /domains/add:
    post:
      description: Adds domain to SolarVPS Distributed DNS
      operationId: domains_add_post
      parameters:
      - description: Domain to add to SolarVPS Distributed DNS
        in: query
        name: domain
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: No response was specified
      security:
      - apiKey: []
      summary: Add domain to be managed by SolarVPS Distributed DNS
      tags:
      - domains
      x-openapi-router-controller: openapi_server.controllers.domains_controller
  /domains/delete:
    post:
      description: Deletes domain from SolarVPS Distributed DNS
      operationId: domains_delete_post
      parameters:
      - description: Domain to delete from SolarVPS Distributed DNS
        in: query
        name: domain
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: No response was specified
      security:
      - apiKey: []
      summary: Delete domain from SolarVPS Distributed DNS
      tags:
      - domains
      x-openapi-router-controller: openapi_server.controllers.domains_controller
  /key/generate:
    get:
      description: API Key is regenerated if it already exists
      operationId: key_generate_get
      parameters:
      - description: Email address used to login to SolarSystem
        in: query
        name: username
        required: true
        schema:
          type: string
      - description: Password used to login to SolarSystem
        in: query
        name: password
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: No response was specified
      security:
      - apiKey: []
      summary: Generate API Key
      tags:
      - key
      x-openapi-router-controller: openapi_server.controllers.key_controller
  /key/get:
    get:
      description: Gets the API Key for user
      operationId: key_get_get
      parameters:
      - description: Email address used to login to SolarSystem
        in: query
        name: username
        required: true
        schema:
          type: string
      - description: Password used to login to SolarSystem
        in: query
        name: password
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: No response was specified
      security:
      - apiKey: []
      summary: Get API Key
      tags:
      - key
      x-openapi-router-controller: openapi_server.controllers.key_controller
  /pods:
    get:
      description: Shows all your pods
      operationId: pods_get
      responses:
        "200":
          content: {}
          description: No response was specified
      security:
      - apiKey: []
      summary: View all your pods
      tags:
      - pods
      x-openapi-router-controller: openapi_server.controllers.pods_controller
  /pods/{podId}:
    get:
      description: Shows details of a specific pod. Enter 1 below to see an example
      operationId: pods_pod_id_get
      parameters:
      - description: Id of the pod you want to perform actions on
        in: path
        name: podId
        required: true
        schema:
          type: number
      responses:
        "200":
          content: {}
          description: No response was specified
      security:
      - apiKey: []
      summary: View information on a specific pod
      tags:
      - pods
      x-openapi-router-controller: openapi_server.controllers.pods_controller
  /pods/{podId}/ping:
    get:
      description: Returns the ping response from your server.
      operationId: pods_pod_id_ping_get
      parameters:
      - description: Id of the pod you want to ping check
        in: path
        name: podId
        required: true
        schema:
          type: number
      responses:
        "200":
          content: {}
          description: No response was specified
      security:
      - apiKey: []
      summary: Ping your specified pod
      tags:
      - pods
      x-openapi-router-controller: openapi_server.controllers.pods_controller
  /pods/{podId}/{action}:
    get:
      description: "Allowed actions are reboot, shutdown, boot"
      operationId: pods_pod_id_action_get
      parameters:
      - description: Id of the pod you want to perform actions on
        in: path
        name: podId
        required: true
        schema:
          type: number
      - description: Action to perform on selected pod
        in: path
        name: action
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: No response was specified
      security:
      - apiKey: []
      summary: Perform action on a specific pod
      tags:
      - pods
      x-openapi-router-controller: openapi_server.controllers.pods_controller
  /solarray:
    get:
      description: Shows all your monitors
      operationId: solarray_get
      responses:
        "200":
          content: {}
          description: No response was specified
      security:
      - apiKey: []
      summary: View all your monitors
      tags:
      - solarray
      x-openapi-router-controller: openapi_server.controllers.solarray_controller
  /solarray/critical:
    get:
      description: Shows all your critical notifications
      operationId: solarray_critical_get
      responses:
        "200":
          content: {}
          description: No response was specified
      security:
      - apiKey: []
      summary: View all your critical notifications
      tags:
      - solarray
      x-openapi-router-controller: openapi_server.controllers.solarray_controller
  /tickets:
    get:
      description: Shows all your tickets
      operationId: tickets_get
      responses:
        "200":
          content: {}
          description: No response was specified
      security:
      - apiKey: []
      summary: View all your tickets
      tags:
      - tickets
      x-openapi-router-controller: openapi_server.controllers.tickets_controller
  /tickets/{department}/add:
    post:
      description: "Available departments are support, billing, sales"
      operationId: tickets_department_add_post
      parameters:
      - description: Department you want to open a ticket with
        in: path
        name: department
        required: true
        schema:
          type: string
      - description: Subject of the ticket you are opening
        in: query
        name: subject
        required: true
        schema:
          type: string
      - description: Message reply being sent
        in: query
        name: contents
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: No response was specified
      security:
      - apiKey: []
      summary: Open ticket with desired department
      tags:
      - tickets
      x-openapi-router-controller: openapi_server.controllers.tickets_controller
  /tickets/{ticketId}:
    get:
      description: Shows all information of a specific ticketId
      operationId: tickets_ticket_id_get
      parameters:
      - description: TicketId you want to see
        in: path
        name: ticketId
        required: true
        schema:
          type: number
      responses:
        "200":
          content: {}
          description: No response was specified
      security:
      - apiKey: []
      summary: View details on a specific ticket
      tags:
      - tickets
      x-openapi-router-controller: openapi_server.controllers.tickets_controller
  /tickets/{ticketid}/update:
    post:
      operationId: tickets_ticketid_update_post
      parameters:
      - description: TicketId of the ticket you want to post an update to
        in: path
        name: ticketid
        required: true
        schema:
          type: number
      - description: Message reply being sent
        in: query
        name: contents
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: No response was specified
      security:
      - apiKey: []
      summary: Post a reply to a ticket
      tags:
      - tickets
      x-openapi-router-controller: openapi_server.controllers.tickets_controller
components:
  schemas: {}
  securitySchemes:
    apiKey:
      in: query
      name: api_key
      type: apiKey
      x-apikeyInfoFunc: openapi_server.controllers.security_controller.info_from_apiKey
x-original-swagger-version: "2.0"
