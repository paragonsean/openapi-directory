/**
 * bridgedb webservices
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* IdentifiersGenesProteinsMetabolitesInteractions service.
* @module api/IdentifiersGenesProteinsMetabolitesInteractionsApi
* @version 0.9.0
*/
export default class IdentifiersGenesProteinsMetabolitesInteractionsApi {

    /**
    * Constructs a new IdentifiersGenesProteinsMetabolitesInteractionsApi. 
    * @alias module:api/IdentifiersGenesProteinsMetabolitesInteractionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the organismAttributeSearchQueryGet operation.
     * @callback module:api/IdentifiersGenesProteinsMetabolitesInteractionsApi~organismAttributeSearchQueryGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of xrefs and associated attributes that contain the query string for a given organism. Results are not restricted to exact matches. Optionally limit results to a specified number per data source, or by the type of attribute. See possible attribute types via /{organism}/attributeSet. 
     * @param {module:model/String} organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName).
     * @param {String} query Text to find in attributes
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Number of results
     * @param {String} [attrName] Restrict search by attribute name (case sensitive). Use GET /{organism}/attributeSet to find out which attributes are supported.
     * @param {module:api/IdentifiersGenesProteinsMetabolitesInteractionsApi~organismAttributeSearchQueryGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organismAttributeSearchQueryGet(organism, query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organism' is set
      if (organism === undefined || organism === null) {
        throw new Error("Missing the required parameter 'organism' when calling organismAttributeSearchQueryGet");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling organismAttributeSearchQueryGet");
      }

      let pathParams = {
        'organism': organism,
        'query': query
      };
      let queryParams = {
        'limit': opts['limit'],
        'attrName': opts['attrName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{organism}/attributeSearch/{query}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organismAttributeSetGet operation.
     * @callback module:api/IdentifiersGenesProteinsMetabolitesInteractionsApi~organismAttributeSetGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the supported attributes to the given Organism.
     * @param {module:model/String} organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName).
     * @param {module:api/IdentifiersGenesProteinsMetabolitesInteractionsApi~organismAttributeSetGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organismAttributeSetGet(organism, callback) {
      let postBody = null;
      // verify the required parameter 'organism' is set
      if (organism === undefined || organism === null) {
        throw new Error("Missing the required parameter 'organism' when calling organismAttributeSetGet");
      }

      let pathParams = {
        'organism': organism
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{organism}/attributeSet', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organismAttributesSystemCodeIdentifierGet operation.
     * @callback module:api/IdentifiersGenesProteinsMetabolitesInteractionsApi~organismAttributesSystemCodeIdentifierGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the attributes for a given identifier, data source, organism. Optionally display only a specified attribute
     * @param {module:model/String} organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName).
     * @param {module:model/String} systemCode System
     * @param {String} identifier Identifier
     * @param {Object} opts Optional parameters
     * @param {String} [attrName] Type of attribute
     * @param {module:api/IdentifiersGenesProteinsMetabolitesInteractionsApi~organismAttributesSystemCodeIdentifierGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organismAttributesSystemCodeIdentifierGet(organism, systemCode, identifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organism' is set
      if (organism === undefined || organism === null) {
        throw new Error("Missing the required parameter 'organism' when calling organismAttributesSystemCodeIdentifierGet");
      }
      // verify the required parameter 'systemCode' is set
      if (systemCode === undefined || systemCode === null) {
        throw new Error("Missing the required parameter 'systemCode' when calling organismAttributesSystemCodeIdentifierGet");
      }
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling organismAttributesSystemCodeIdentifierGet");
      }

      let pathParams = {
        'organism': organism,
        'systemCode': systemCode,
        'identifier': identifier
      };
      let queryParams = {
        'attrName': opts['attrName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{organism}/attributes/{systemCode}/{identifier}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organismIsFreeSearchSupportedGet operation.
     * @callback module:api/IdentifiersGenesProteinsMetabolitesInteractionsApi~organismIsFreeSearchSupportedGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns `true` or `false` based on whether or not /{organism}/search/{query} is supported for a given organism.
     * @param {module:model/String} organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName).
     * @param {module:api/IdentifiersGenesProteinsMetabolitesInteractionsApi~organismIsFreeSearchSupportedGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organismIsFreeSearchSupportedGet(organism, callback) {
      let postBody = null;
      // verify the required parameter 'organism' is set
      if (organism === undefined || organism === null) {
        throw new Error("Missing the required parameter 'organism' when calling organismIsFreeSearchSupportedGet");
      }

      let pathParams = {
        'organism': organism
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{organism}/isFreeSearchSupported', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGet operation.
     * @callback module:api/IdentifiersGenesProteinsMetabolitesInteractionsApi~organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns `true` or `false` based on whether or not /{organism}/xrefs/{systemCode}/{identifier} would possibly return a {targetSystemCode} result given a {sourceSystemCode} query. This function basically combines the results of /{organism}/sourceDataSources and /{organism}/targetDataSources into a single boolean result.
     * @param {module:model/String} organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName).
     * @param {module:model/String} sourceSystemCode [System code](http://vocabularies.bridgedb.org/#systemCode) for source (input/query) data source
     * @param {module:model/String} targetSystemCode [System code](http://vocabularies.bridgedb.org/#systemCode) for target (output/result) data source
     * @param {module:api/IdentifiersGenesProteinsMetabolitesInteractionsApi~organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGet(organism, sourceSystemCode, targetSystemCode, callback) {
      let postBody = null;
      // verify the required parameter 'organism' is set
      if (organism === undefined || organism === null) {
        throw new Error("Missing the required parameter 'organism' when calling organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGet");
      }
      // verify the required parameter 'sourceSystemCode' is set
      if (sourceSystemCode === undefined || sourceSystemCode === null) {
        throw new Error("Missing the required parameter 'sourceSystemCode' when calling organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGet");
      }
      // verify the required parameter 'targetSystemCode' is set
      if (targetSystemCode === undefined || targetSystemCode === null) {
        throw new Error("Missing the required parameter 'targetSystemCode' when calling organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGet");
      }

      let pathParams = {
        'organism': organism,
        'sourceSystemCode': sourceSystemCode,
        'targetSystemCode': targetSystemCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{organism}/isMappingSupported/{sourceSystemCode}/{targetSystemCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organismPropertiesGet operation.
     * @callback module:api/IdentifiersGenesProteinsMetabolitesInteractionsApi~organismPropertiesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of properties available for a given organism 
     * @param {module:model/String} organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName).
     * @param {module:api/IdentifiersGenesProteinsMetabolitesInteractionsApi~organismPropertiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organismPropertiesGet(organism, callback) {
      let postBody = null;
      // verify the required parameter 'organism' is set
      if (organism === undefined || organism === null) {
        throw new Error("Missing the required parameter 'organism' when calling organismPropertiesGet");
      }

      let pathParams = {
        'organism': organism
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{organism}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organismSearchQueryGet operation.
     * @callback module:api/IdentifiersGenesProteinsMetabolitesInteractionsApi~organismSearchQueryGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of xrefs with identifiers that contain the query string for a given organism. Results are not restricted to exact matches. Optionally limit results to a specified number per data source.
     * @param {module:model/String} organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName).
     * @param {String} query Identifier query
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Number of results per data source
     * @param {module:api/IdentifiersGenesProteinsMetabolitesInteractionsApi~organismSearchQueryGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organismSearchQueryGet(organism, query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organism' is set
      if (organism === undefined || organism === null) {
        throw new Error("Missing the required parameter 'organism' when calling organismSearchQueryGet");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling organismSearchQueryGet");
      }

      let pathParams = {
        'organism': organism,
        'query': query
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{organism}/search/{query}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organismSourceDataSourcesGet operation.
     * @callback module:api/IdentifiersGenesProteinsMetabolitesInteractionsApi~organismSourceDataSourcesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of data sources available as xref sources for a given organism.
     * @param {module:model/String} organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName).
     * @param {module:api/IdentifiersGenesProteinsMetabolitesInteractionsApi~organismSourceDataSourcesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organismSourceDataSourcesGet(organism, callback) {
      let postBody = null;
      // verify the required parameter 'organism' is set
      if (organism === undefined || organism === null) {
        throw new Error("Missing the required parameter 'organism' when calling organismSourceDataSourcesGet");
      }

      let pathParams = {
        'organism': organism
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{organism}/sourceDataSources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organismTargetDataSourcesGet operation.
     * @callback module:api/IdentifiersGenesProteinsMetabolitesInteractionsApi~organismTargetDataSourcesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of data sources available as xref targets for a given organism.
     * @param {module:model/String} organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName).
     * @param {module:api/IdentifiersGenesProteinsMetabolitesInteractionsApi~organismTargetDataSourcesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organismTargetDataSourcesGet(organism, callback) {
      let postBody = null;
      // verify the required parameter 'organism' is set
      if (organism === undefined || organism === null) {
        throw new Error("Missing the required parameter 'organism' when calling organismTargetDataSourcesGet");
      }

      let pathParams = {
        'organism': organism
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{organism}/targetDataSources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organismXrefExistsSystemCodeIdentifierGet operation.
     * @callback module:api/IdentifiersGenesProteinsMetabolitesInteractionsApi~organismXrefExistsSystemCodeIdentifierGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns `true` or `false` based on whether or not an xref exists in the database given an identifier, data source, and organism.
     * @param {module:model/String} organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName).
     * @param {module:model/String} systemCode Source (input) data source [system code](https://bridgedb.github.io/pages/system-codes.html)
     * @param {String} identifier Identifier
     * @param {module:api/IdentifiersGenesProteinsMetabolitesInteractionsApi~organismXrefExistsSystemCodeIdentifierGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organismXrefExistsSystemCodeIdentifierGet(organism, systemCode, identifier, callback) {
      let postBody = null;
      // verify the required parameter 'organism' is set
      if (organism === undefined || organism === null) {
        throw new Error("Missing the required parameter 'organism' when calling organismXrefExistsSystemCodeIdentifierGet");
      }
      // verify the required parameter 'systemCode' is set
      if (systemCode === undefined || systemCode === null) {
        throw new Error("Missing the required parameter 'systemCode' when calling organismXrefExistsSystemCodeIdentifierGet");
      }
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling organismXrefExistsSystemCodeIdentifierGet");
      }

      let pathParams = {
        'organism': organism,
        'systemCode': systemCode,
        'identifier': identifier
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{organism}/xrefExists/{systemCode}/{identifier}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organismXrefsBatchPost operation.
     * @callback module:api/IdentifiersGenesProteinsMetabolitesInteractionsApi~organismXrefsBatchPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of xrefs, per identifier, that maps to a given list of identifiers an data source given an organism.
     * @param {module:model/String} organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName).
     * @param {String} body List of tab separated values: id<tab>systemcode\\n
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [dataSource] (Optional) Restrict results by data source [system code](https://bridgedb.github.io/pages/system-codes.html)
     * @param {module:api/IdentifiersGenesProteinsMetabolitesInteractionsApi~organismXrefsBatchPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organismXrefsBatchPost(organism, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'organism' is set
      if (organism === undefined || organism === null) {
        throw new Error("Missing the required parameter 'organism' when calling organismXrefsBatchPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling organismXrefsBatchPost");
      }

      let pathParams = {
        'organism': organism
      };
      let queryParams = {
        'dataSource': opts['dataSource']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['text/html'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{organism}/xrefsBatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organismXrefsBatchSystemCodePost operation.
     * @callback module:api/IdentifiersGenesProteinsMetabolitesInteractionsApi~organismXrefsBatchSystemCodePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of xrefs, that maps to a given list of identifiers to a given data source and organism.
     * @param {module:model/String} organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName).
     * @param {module:model/String} systemCode Source (input) data source [system code](http://vocabularies.bridgedb.org/#systemCode)
     * @param {String} body List of identifiers. The separator is a new line (\\n)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [dataSource] (Optional) Restrict results by data source [system code](https://bridgedb.github.io/pages/system-codes.html)
     * @param {module:api/IdentifiersGenesProteinsMetabolitesInteractionsApi~organismXrefsBatchSystemCodePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organismXrefsBatchSystemCodePost(organism, systemCode, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'organism' is set
      if (organism === undefined || organism === null) {
        throw new Error("Missing the required parameter 'organism' when calling organismXrefsBatchSystemCodePost");
      }
      // verify the required parameter 'systemCode' is set
      if (systemCode === undefined || systemCode === null) {
        throw new Error("Missing the required parameter 'systemCode' when calling organismXrefsBatchSystemCodePost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling organismXrefsBatchSystemCodePost");
      }

      let pathParams = {
        'organism': organism,
        'systemCode': systemCode
      };
      let queryParams = {
        'dataSource': opts['dataSource']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['text/html'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{organism}/xrefsBatch/{systemCode}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organismXrefsSystemCodeIdentifierGet operation.
     * @callback module:api/IdentifiersGenesProteinsMetabolitesInteractionsApi~organismXrefsSystemCodeIdentifierGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of xrefs that map to a given identifier, data source, and organism.
     * @param {module:model/String} organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName).
     * @param {module:model/String} systemCode Source (input) data source [system code](https://bridgedb.github.io/pages/system-codes.html)
     * @param {String} identifier Identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [dataSource] (Optional) Restrict results by data source [system code](https://bridgedb.github.io/pages/system-codes.html)
     * @param {module:api/IdentifiersGenesProteinsMetabolitesInteractionsApi~organismXrefsSystemCodeIdentifierGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    organismXrefsSystemCodeIdentifierGet(organism, systemCode, identifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organism' is set
      if (organism === undefined || organism === null) {
        throw new Error("Missing the required parameter 'organism' when calling organismXrefsSystemCodeIdentifierGet");
      }
      // verify the required parameter 'systemCode' is set
      if (systemCode === undefined || systemCode === null) {
        throw new Error("Missing the required parameter 'systemCode' when calling organismXrefsSystemCodeIdentifierGet");
      }
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling organismXrefsSystemCodeIdentifierGet");
      }

      let pathParams = {
        'organism': organism,
        'systemCode': systemCode,
        'identifier': identifier
      };
      let queryParams = {
        'dataSource': opts['dataSource']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{organism}/xrefs/{systemCode}/{identifier}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
