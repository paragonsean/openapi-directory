/**
 * bridgedb webservices
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIdentifiersGenesProteinsMetabolitesInteractionsApi_H
#define OAI_OAIIdentifiersGenesProteinsMetabolitesInteractionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIdentifiersGenesProteinsMetabolitesInteractionsApi : public QObject {
    Q_OBJECT

public:
    OAIIdentifiersGenesProteinsMetabolitesInteractionsApi(const int timeOut = 0);
    ~OAIIdentifiersGenesProteinsMetabolitesInteractionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  organism QString [required]
    * @param[in]  query QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  attr_name QString [optional]
    */
    virtual void organismAttributeSearchQueryGet(const QString &organism, const QString &query, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &attr_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organism QString [required]
    */
    virtual void organismAttributeSetGet(const QString &organism);

    /**
    * @param[in]  organism QString [required]
    * @param[in]  system_code QString [required]
    * @param[in]  identifier QString [required]
    * @param[in]  attr_name QString [optional]
    */
    virtual void organismAttributesSystemCodeIdentifierGet(const QString &organism, const QString &system_code, const QString &identifier, const ::OpenAPI::OptionalParam<QString> &attr_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organism QString [required]
    */
    virtual void organismIsFreeSearchSupportedGet(const QString &organism);

    /**
    * @param[in]  organism QString [required]
    * @param[in]  source_system_code QString [required]
    * @param[in]  target_system_code QString [required]
    */
    virtual void organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGet(const QString &organism, const QString &source_system_code, const QString &target_system_code);

    /**
    * @param[in]  organism QString [required]
    */
    virtual void organismPropertiesGet(const QString &organism);

    /**
    * @param[in]  organism QString [required]
    * @param[in]  query QString [required]
    * @param[in]  limit qint32 [optional]
    */
    virtual void organismSearchQueryGet(const QString &organism, const QString &query, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  organism QString [required]
    */
    virtual void organismSourceDataSourcesGet(const QString &organism);

    /**
    * @param[in]  organism QString [required]
    */
    virtual void organismTargetDataSourcesGet(const QString &organism);

    /**
    * @param[in]  organism QString [required]
    * @param[in]  system_code QString [required]
    * @param[in]  identifier QString [required]
    */
    virtual void organismXrefExistsSystemCodeIdentifierGet(const QString &organism, const QString &system_code, const QString &identifier);

    /**
    * @param[in]  organism QString [required]
    * @param[in]  body QString [required]
    * @param[in]  data_source QString [optional]
    */
    virtual void organismXrefsBatchPost(const QString &organism, const QString &body, const ::OpenAPI::OptionalParam<QString> &data_source = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organism QString [required]
    * @param[in]  system_code QString [required]
    * @param[in]  body QString [required]
    * @param[in]  data_source QString [optional]
    */
    virtual void organismXrefsBatchSystemCodePost(const QString &organism, const QString &system_code, const QString &body, const ::OpenAPI::OptionalParam<QString> &data_source = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organism QString [required]
    * @param[in]  system_code QString [required]
    * @param[in]  identifier QString [required]
    * @param[in]  data_source QString [optional]
    */
    virtual void organismXrefsSystemCodeIdentifierGet(const QString &organism, const QString &system_code, const QString &identifier, const ::OpenAPI::OptionalParam<QString> &data_source = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void organismAttributeSearchQueryGetCallback(OAIHttpRequestWorker *worker);
    void organismAttributeSetGetCallback(OAIHttpRequestWorker *worker);
    void organismAttributesSystemCodeIdentifierGetCallback(OAIHttpRequestWorker *worker);
    void organismIsFreeSearchSupportedGetCallback(OAIHttpRequestWorker *worker);
    void organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGetCallback(OAIHttpRequestWorker *worker);
    void organismPropertiesGetCallback(OAIHttpRequestWorker *worker);
    void organismSearchQueryGetCallback(OAIHttpRequestWorker *worker);
    void organismSourceDataSourcesGetCallback(OAIHttpRequestWorker *worker);
    void organismTargetDataSourcesGetCallback(OAIHttpRequestWorker *worker);
    void organismXrefExistsSystemCodeIdentifierGetCallback(OAIHttpRequestWorker *worker);
    void organismXrefsBatchPostCallback(OAIHttpRequestWorker *worker);
    void organismXrefsBatchSystemCodePostCallback(OAIHttpRequestWorker *worker);
    void organismXrefsSystemCodeIdentifierGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void organismAttributeSearchQueryGetSignal();
    void organismAttributeSetGetSignal();
    void organismAttributesSystemCodeIdentifierGetSignal();
    void organismIsFreeSearchSupportedGetSignal();
    void organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGetSignal();
    void organismPropertiesGetSignal();
    void organismSearchQueryGetSignal();
    void organismSourceDataSourcesGetSignal();
    void organismTargetDataSourcesGetSignal();
    void organismXrefExistsSystemCodeIdentifierGetSignal();
    void organismXrefsBatchPostSignal();
    void organismXrefsBatchSystemCodePostSignal();
    void organismXrefsSystemCodeIdentifierGetSignal();


    void organismAttributeSearchQueryGetSignalFull(OAIHttpRequestWorker *worker);
    void organismAttributeSetGetSignalFull(OAIHttpRequestWorker *worker);
    void organismAttributesSystemCodeIdentifierGetSignalFull(OAIHttpRequestWorker *worker);
    void organismIsFreeSearchSupportedGetSignalFull(OAIHttpRequestWorker *worker);
    void organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGetSignalFull(OAIHttpRequestWorker *worker);
    void organismPropertiesGetSignalFull(OAIHttpRequestWorker *worker);
    void organismSearchQueryGetSignalFull(OAIHttpRequestWorker *worker);
    void organismSourceDataSourcesGetSignalFull(OAIHttpRequestWorker *worker);
    void organismTargetDataSourcesGetSignalFull(OAIHttpRequestWorker *worker);
    void organismXrefExistsSystemCodeIdentifierGetSignalFull(OAIHttpRequestWorker *worker);
    void organismXrefsBatchPostSignalFull(OAIHttpRequestWorker *worker);
    void organismXrefsBatchSystemCodePostSignalFull(OAIHttpRequestWorker *worker);
    void organismXrefsSystemCodeIdentifierGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use organismAttributeSearchQueryGetSignalError() instead")
    void organismAttributeSearchQueryGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organismAttributeSearchQueryGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organismAttributeSetGetSignalError() instead")
    void organismAttributeSetGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organismAttributeSetGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organismAttributesSystemCodeIdentifierGetSignalError() instead")
    void organismAttributesSystemCodeIdentifierGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organismAttributesSystemCodeIdentifierGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organismIsFreeSearchSupportedGetSignalError() instead")
    void organismIsFreeSearchSupportedGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organismIsFreeSearchSupportedGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGetSignalError() instead")
    void organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organismPropertiesGetSignalError() instead")
    void organismPropertiesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organismPropertiesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organismSearchQueryGetSignalError() instead")
    void organismSearchQueryGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organismSearchQueryGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organismSourceDataSourcesGetSignalError() instead")
    void organismSourceDataSourcesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organismSourceDataSourcesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organismTargetDataSourcesGetSignalError() instead")
    void organismTargetDataSourcesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organismTargetDataSourcesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organismXrefExistsSystemCodeIdentifierGetSignalError() instead")
    void organismXrefExistsSystemCodeIdentifierGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organismXrefExistsSystemCodeIdentifierGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organismXrefsBatchPostSignalError() instead")
    void organismXrefsBatchPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organismXrefsBatchPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organismXrefsBatchSystemCodePostSignalError() instead")
    void organismXrefsBatchSystemCodePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organismXrefsBatchSystemCodePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organismXrefsSystemCodeIdentifierGetSignalError() instead")
    void organismXrefsSystemCodeIdentifierGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organismXrefsSystemCodeIdentifierGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use organismAttributeSearchQueryGetSignalErrorFull() instead")
    void organismAttributeSearchQueryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organismAttributeSearchQueryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organismAttributeSetGetSignalErrorFull() instead")
    void organismAttributeSetGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organismAttributeSetGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organismAttributesSystemCodeIdentifierGetSignalErrorFull() instead")
    void organismAttributesSystemCodeIdentifierGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organismAttributesSystemCodeIdentifierGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organismIsFreeSearchSupportedGetSignalErrorFull() instead")
    void organismIsFreeSearchSupportedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organismIsFreeSearchSupportedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGetSignalErrorFull() instead")
    void organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organismPropertiesGetSignalErrorFull() instead")
    void organismPropertiesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organismPropertiesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organismSearchQueryGetSignalErrorFull() instead")
    void organismSearchQueryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organismSearchQueryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organismSourceDataSourcesGetSignalErrorFull() instead")
    void organismSourceDataSourcesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organismSourceDataSourcesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organismTargetDataSourcesGetSignalErrorFull() instead")
    void organismTargetDataSourcesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organismTargetDataSourcesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organismXrefExistsSystemCodeIdentifierGetSignalErrorFull() instead")
    void organismXrefExistsSystemCodeIdentifierGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organismXrefExistsSystemCodeIdentifierGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organismXrefsBatchPostSignalErrorFull() instead")
    void organismXrefsBatchPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organismXrefsBatchPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organismXrefsBatchSystemCodePostSignalErrorFull() instead")
    void organismXrefsBatchSystemCodePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organismXrefsBatchSystemCodePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organismXrefsSystemCodeIdentifierGetSignalErrorFull() instead")
    void organismXrefsSystemCodeIdentifierGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organismXrefsSystemCodeIdentifierGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
