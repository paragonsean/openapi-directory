/**
 * bridgedb webservices
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentifiersGenesProteinsMetabolitesInteractionsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::OAIIdentifiersGenesProteinsMetabolitesInteractionsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::~OAIIdentifiersGenesProteinsMetabolitesInteractionsApi() {
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://webservice.bridgedb.org/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    defaultConf.append(OAIServerConfiguration(
    QUrl("http://webservice.bridgedb.org/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("organismAttributeSearchQueryGet", defaultConf);
    _serverIndices.insert("organismAttributeSearchQueryGet", 0);
    _serverConfigs.insert("organismAttributeSetGet", defaultConf);
    _serverIndices.insert("organismAttributeSetGet", 0);
    _serverConfigs.insert("organismAttributesSystemCodeIdentifierGet", defaultConf);
    _serverIndices.insert("organismAttributesSystemCodeIdentifierGet", 0);
    _serverConfigs.insert("organismIsFreeSearchSupportedGet", defaultConf);
    _serverIndices.insert("organismIsFreeSearchSupportedGet", 0);
    _serverConfigs.insert("organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGet", defaultConf);
    _serverIndices.insert("organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGet", 0);
    _serverConfigs.insert("organismPropertiesGet", defaultConf);
    _serverIndices.insert("organismPropertiesGet", 0);
    _serverConfigs.insert("organismSearchQueryGet", defaultConf);
    _serverIndices.insert("organismSearchQueryGet", 0);
    _serverConfigs.insert("organismSourceDataSourcesGet", defaultConf);
    _serverIndices.insert("organismSourceDataSourcesGet", 0);
    _serverConfigs.insert("organismTargetDataSourcesGet", defaultConf);
    _serverIndices.insert("organismTargetDataSourcesGet", 0);
    _serverConfigs.insert("organismXrefExistsSystemCodeIdentifierGet", defaultConf);
    _serverIndices.insert("organismXrefExistsSystemCodeIdentifierGet", 0);
    _serverConfigs.insert("organismXrefsBatchPost", defaultConf);
    _serverIndices.insert("organismXrefsBatchPost", 0);
    _serverConfigs.insert("organismXrefsBatchSystemCodePost", defaultConf);
    _serverIndices.insert("organismXrefsBatchSystemCodePost", 0);
    _serverConfigs.insert("organismXrefsSystemCodeIdentifierGet", defaultConf);
    _serverIndices.insert("organismXrefsSystemCodeIdentifierGet", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismAttributeSearchQueryGet(const QString &organism, const QString &query, const ::OpenAPI::OptionalParam<qint32> &limit, const ::OpenAPI::OptionalParam<QString> &attr_name) {
    QString fullPath = QString(_serverConfigs["organismAttributeSearchQueryGet"][_serverIndices.value("organismAttributeSearchQueryGet")].URL()+"/{organism}/attributeSearch/{query}");
    
    
    {
        QString organismPathParam("{");
        organismPathParam.append("organism").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organism", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organism"+pathSuffix : pathPrefix;
        fullPath.replace(organismPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organism)));
    }
    
    {
        QString queryPathParam("{");
        queryPathParam.append("query").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "query", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"query"+pathSuffix : pathPrefix;
        fullPath.replace(queryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(query)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (limit.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    if (attr_name.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "attrName", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("attrName")).append(querySuffix).append(QUrl::toPercentEncoding(attr_name.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismAttributeSearchQueryGetCallback);
    connect(this, &OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismAttributeSearchQueryGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT organismAttributeSearchQueryGetSignal();
        Q_EMIT organismAttributeSearchQueryGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT organismAttributeSearchQueryGetSignalE(error_type, error_str);
        Q_EMIT organismAttributeSearchQueryGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT organismAttributeSearchQueryGetSignalError(error_type, error_str);
        Q_EMIT organismAttributeSearchQueryGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismAttributeSetGet(const QString &organism) {
    QString fullPath = QString(_serverConfigs["organismAttributeSetGet"][_serverIndices.value("organismAttributeSetGet")].URL()+"/{organism}/attributeSet");
    
    
    {
        QString organismPathParam("{");
        organismPathParam.append("organism").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organism", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organism"+pathSuffix : pathPrefix;
        fullPath.replace(organismPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organism)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismAttributeSetGetCallback);
    connect(this, &OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismAttributeSetGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT organismAttributeSetGetSignal();
        Q_EMIT organismAttributeSetGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT organismAttributeSetGetSignalE(error_type, error_str);
        Q_EMIT organismAttributeSetGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT organismAttributeSetGetSignalError(error_type, error_str);
        Q_EMIT organismAttributeSetGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismAttributesSystemCodeIdentifierGet(const QString &organism, const QString &system_code, const QString &identifier, const ::OpenAPI::OptionalParam<QString> &attr_name) {
    QString fullPath = QString(_serverConfigs["organismAttributesSystemCodeIdentifierGet"][_serverIndices.value("organismAttributesSystemCodeIdentifierGet")].URL()+"/{organism}/attributes/{systemCode}/{identifier}");
    
    
    {
        QString organismPathParam("{");
        organismPathParam.append("organism").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organism", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organism"+pathSuffix : pathPrefix;
        fullPath.replace(organismPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organism)));
    }
    
    {
        QString system_codePathParam("{");
        system_codePathParam.append("systemCode").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "systemCode", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"systemCode"+pathSuffix : pathPrefix;
        fullPath.replace(system_codePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(system_code)));
    }
    
    {
        QString identifierPathParam("{");
        identifierPathParam.append("identifier").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "identifier", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"identifier"+pathSuffix : pathPrefix;
        fullPath.replace(identifierPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(identifier)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (attr_name.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "attrName", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("attrName")).append(querySuffix).append(QUrl::toPercentEncoding(attr_name.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismAttributesSystemCodeIdentifierGetCallback);
    connect(this, &OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismAttributesSystemCodeIdentifierGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT organismAttributesSystemCodeIdentifierGetSignal();
        Q_EMIT organismAttributesSystemCodeIdentifierGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT organismAttributesSystemCodeIdentifierGetSignalE(error_type, error_str);
        Q_EMIT organismAttributesSystemCodeIdentifierGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT organismAttributesSystemCodeIdentifierGetSignalError(error_type, error_str);
        Q_EMIT organismAttributesSystemCodeIdentifierGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismIsFreeSearchSupportedGet(const QString &organism) {
    QString fullPath = QString(_serverConfigs["organismIsFreeSearchSupportedGet"][_serverIndices.value("organismIsFreeSearchSupportedGet")].URL()+"/{organism}/isFreeSearchSupported");
    
    
    {
        QString organismPathParam("{");
        organismPathParam.append("organism").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organism", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organism"+pathSuffix : pathPrefix;
        fullPath.replace(organismPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organism)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismIsFreeSearchSupportedGetCallback);
    connect(this, &OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismIsFreeSearchSupportedGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT organismIsFreeSearchSupportedGetSignal();
        Q_EMIT organismIsFreeSearchSupportedGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT organismIsFreeSearchSupportedGetSignalE(error_type, error_str);
        Q_EMIT organismIsFreeSearchSupportedGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT organismIsFreeSearchSupportedGetSignalError(error_type, error_str);
        Q_EMIT organismIsFreeSearchSupportedGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGet(const QString &organism, const QString &source_system_code, const QString &target_system_code) {
    QString fullPath = QString(_serverConfigs["organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGet"][_serverIndices.value("organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGet")].URL()+"/{organism}/isMappingSupported/{sourceSystemCode}/{targetSystemCode}");
    
    
    {
        QString organismPathParam("{");
        organismPathParam.append("organism").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organism", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organism"+pathSuffix : pathPrefix;
        fullPath.replace(organismPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organism)));
    }
    
    {
        QString source_system_codePathParam("{");
        source_system_codePathParam.append("sourceSystemCode").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "sourceSystemCode", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"sourceSystemCode"+pathSuffix : pathPrefix;
        fullPath.replace(source_system_codePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(source_system_code)));
    }
    
    {
        QString target_system_codePathParam("{");
        target_system_codePathParam.append("targetSystemCode").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "targetSystemCode", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"targetSystemCode"+pathSuffix : pathPrefix;
        fullPath.replace(target_system_codePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(target_system_code)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGetCallback);
    connect(this, &OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGetSignal();
        Q_EMIT organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGetSignalE(error_type, error_str);
        Q_EMIT organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGetSignalError(error_type, error_str);
        Q_EMIT organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismPropertiesGet(const QString &organism) {
    QString fullPath = QString(_serverConfigs["organismPropertiesGet"][_serverIndices.value("organismPropertiesGet")].URL()+"/{organism}/properties");
    
    
    {
        QString organismPathParam("{");
        organismPathParam.append("organism").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organism", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organism"+pathSuffix : pathPrefix;
        fullPath.replace(organismPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organism)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismPropertiesGetCallback);
    connect(this, &OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismPropertiesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT organismPropertiesGetSignal();
        Q_EMIT organismPropertiesGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT organismPropertiesGetSignalE(error_type, error_str);
        Q_EMIT organismPropertiesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT organismPropertiesGetSignalError(error_type, error_str);
        Q_EMIT organismPropertiesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismSearchQueryGet(const QString &organism, const QString &query, const ::OpenAPI::OptionalParam<qint32> &limit) {
    QString fullPath = QString(_serverConfigs["organismSearchQueryGet"][_serverIndices.value("organismSearchQueryGet")].URL()+"/{organism}/search/{query}");
    
    
    {
        QString organismPathParam("{");
        organismPathParam.append("organism").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organism", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organism"+pathSuffix : pathPrefix;
        fullPath.replace(organismPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organism)));
    }
    
    {
        QString queryPathParam("{");
        queryPathParam.append("query").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "query", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"query"+pathSuffix : pathPrefix;
        fullPath.replace(queryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(query)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (limit.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismSearchQueryGetCallback);
    connect(this, &OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismSearchQueryGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT organismSearchQueryGetSignal();
        Q_EMIT organismSearchQueryGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT organismSearchQueryGetSignalE(error_type, error_str);
        Q_EMIT organismSearchQueryGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT organismSearchQueryGetSignalError(error_type, error_str);
        Q_EMIT organismSearchQueryGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismSourceDataSourcesGet(const QString &organism) {
    QString fullPath = QString(_serverConfigs["organismSourceDataSourcesGet"][_serverIndices.value("organismSourceDataSourcesGet")].URL()+"/{organism}/sourceDataSources");
    
    
    {
        QString organismPathParam("{");
        organismPathParam.append("organism").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organism", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organism"+pathSuffix : pathPrefix;
        fullPath.replace(organismPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organism)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismSourceDataSourcesGetCallback);
    connect(this, &OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismSourceDataSourcesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT organismSourceDataSourcesGetSignal();
        Q_EMIT organismSourceDataSourcesGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT organismSourceDataSourcesGetSignalE(error_type, error_str);
        Q_EMIT organismSourceDataSourcesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT organismSourceDataSourcesGetSignalError(error_type, error_str);
        Q_EMIT organismSourceDataSourcesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismTargetDataSourcesGet(const QString &organism) {
    QString fullPath = QString(_serverConfigs["organismTargetDataSourcesGet"][_serverIndices.value("organismTargetDataSourcesGet")].URL()+"/{organism}/targetDataSources");
    
    
    {
        QString organismPathParam("{");
        organismPathParam.append("organism").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organism", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organism"+pathSuffix : pathPrefix;
        fullPath.replace(organismPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organism)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismTargetDataSourcesGetCallback);
    connect(this, &OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismTargetDataSourcesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT organismTargetDataSourcesGetSignal();
        Q_EMIT organismTargetDataSourcesGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT organismTargetDataSourcesGetSignalE(error_type, error_str);
        Q_EMIT organismTargetDataSourcesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT organismTargetDataSourcesGetSignalError(error_type, error_str);
        Q_EMIT organismTargetDataSourcesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismXrefExistsSystemCodeIdentifierGet(const QString &organism, const QString &system_code, const QString &identifier) {
    QString fullPath = QString(_serverConfigs["organismXrefExistsSystemCodeIdentifierGet"][_serverIndices.value("organismXrefExistsSystemCodeIdentifierGet")].URL()+"/{organism}/xrefExists/{systemCode}/{identifier}");
    
    
    {
        QString organismPathParam("{");
        organismPathParam.append("organism").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organism", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organism"+pathSuffix : pathPrefix;
        fullPath.replace(organismPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organism)));
    }
    
    {
        QString system_codePathParam("{");
        system_codePathParam.append("systemCode").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "systemCode", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"systemCode"+pathSuffix : pathPrefix;
        fullPath.replace(system_codePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(system_code)));
    }
    
    {
        QString identifierPathParam("{");
        identifierPathParam.append("identifier").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "identifier", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"identifier"+pathSuffix : pathPrefix;
        fullPath.replace(identifierPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(identifier)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismXrefExistsSystemCodeIdentifierGetCallback);
    connect(this, &OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismXrefExistsSystemCodeIdentifierGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT organismXrefExistsSystemCodeIdentifierGetSignal();
        Q_EMIT organismXrefExistsSystemCodeIdentifierGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT organismXrefExistsSystemCodeIdentifierGetSignalE(error_type, error_str);
        Q_EMIT organismXrefExistsSystemCodeIdentifierGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT organismXrefExistsSystemCodeIdentifierGetSignalError(error_type, error_str);
        Q_EMIT organismXrefExistsSystemCodeIdentifierGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismXrefsBatchPost(const QString &organism, const QString &body, const ::OpenAPI::OptionalParam<QString> &data_source) {
    QString fullPath = QString(_serverConfigs["organismXrefsBatchPost"][_serverIndices.value("organismXrefsBatchPost")].URL()+"/{organism}/xrefsBatch");
    
    
    {
        QString organismPathParam("{");
        organismPathParam.append("organism").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organism", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organism"+pathSuffix : pathPrefix;
        fullPath.replace(organismPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organism)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (data_source.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "dataSource", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("dataSource")).append(querySuffix).append(QUrl::toPercentEncoding(data_source.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        QByteArray output = body.toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismXrefsBatchPostCallback);
    connect(this, &OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismXrefsBatchPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT organismXrefsBatchPostSignal();
        Q_EMIT organismXrefsBatchPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT organismXrefsBatchPostSignalE(error_type, error_str);
        Q_EMIT organismXrefsBatchPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT organismXrefsBatchPostSignalError(error_type, error_str);
        Q_EMIT organismXrefsBatchPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismXrefsBatchSystemCodePost(const QString &organism, const QString &system_code, const QString &body, const ::OpenAPI::OptionalParam<QString> &data_source) {
    QString fullPath = QString(_serverConfigs["organismXrefsBatchSystemCodePost"][_serverIndices.value("organismXrefsBatchSystemCodePost")].URL()+"/{organism}/xrefsBatch/{systemCode}");
    
    
    {
        QString organismPathParam("{");
        organismPathParam.append("organism").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organism", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organism"+pathSuffix : pathPrefix;
        fullPath.replace(organismPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organism)));
    }
    
    {
        QString system_codePathParam("{");
        system_codePathParam.append("systemCode").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "systemCode", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"systemCode"+pathSuffix : pathPrefix;
        fullPath.replace(system_codePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(system_code)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (data_source.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "dataSource", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("dataSource")).append(querySuffix).append(QUrl::toPercentEncoding(data_source.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        QByteArray output = body.toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismXrefsBatchSystemCodePostCallback);
    connect(this, &OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismXrefsBatchSystemCodePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT organismXrefsBatchSystemCodePostSignal();
        Q_EMIT organismXrefsBatchSystemCodePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT organismXrefsBatchSystemCodePostSignalE(error_type, error_str);
        Q_EMIT organismXrefsBatchSystemCodePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT organismXrefsBatchSystemCodePostSignalError(error_type, error_str);
        Q_EMIT organismXrefsBatchSystemCodePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismXrefsSystemCodeIdentifierGet(const QString &organism, const QString &system_code, const QString &identifier, const ::OpenAPI::OptionalParam<QString> &data_source) {
    QString fullPath = QString(_serverConfigs["organismXrefsSystemCodeIdentifierGet"][_serverIndices.value("organismXrefsSystemCodeIdentifierGet")].URL()+"/{organism}/xrefs/{systemCode}/{identifier}");
    
    
    {
        QString organismPathParam("{");
        organismPathParam.append("organism").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organism", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organism"+pathSuffix : pathPrefix;
        fullPath.replace(organismPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organism)));
    }
    
    {
        QString system_codePathParam("{");
        system_codePathParam.append("systemCode").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "systemCode", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"systemCode"+pathSuffix : pathPrefix;
        fullPath.replace(system_codePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(system_code)));
    }
    
    {
        QString identifierPathParam("{");
        identifierPathParam.append("identifier").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "identifier", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"identifier"+pathSuffix : pathPrefix;
        fullPath.replace(identifierPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(identifier)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (data_source.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "dataSource", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("dataSource")).append(querySuffix).append(QUrl::toPercentEncoding(data_source.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismXrefsSystemCodeIdentifierGetCallback);
    connect(this, &OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::organismXrefsSystemCodeIdentifierGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT organismXrefsSystemCodeIdentifierGetSignal();
        Q_EMIT organismXrefsSystemCodeIdentifierGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT organismXrefsSystemCodeIdentifierGetSignalE(error_type, error_str);
        Q_EMIT organismXrefsSystemCodeIdentifierGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT organismXrefsSystemCodeIdentifierGetSignalError(error_type, error_str);
        Q_EMIT organismXrefsSystemCodeIdentifierGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIdentifiersGenesProteinsMetabolitesInteractionsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
