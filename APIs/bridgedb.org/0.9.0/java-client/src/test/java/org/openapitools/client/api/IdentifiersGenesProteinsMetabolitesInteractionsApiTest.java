/*
 * bridgedb webservices
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IdentifiersGenesProteinsMetabolitesInteractionsApi
 */
@Disabled
public class IdentifiersGenesProteinsMetabolitesInteractionsApiTest {

    private final IdentifiersGenesProteinsMetabolitesInteractionsApi api = new IdentifiersGenesProteinsMetabolitesInteractionsApi();

    /**
     * Returns a list of xrefs and associated attributes that contain the query string for a given organism. Results are not restricted to exact matches. Optionally limit results to a specified number per data source, or by the type of attribute. See possible attribute types via /{organism}/attributeSet. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organismAttributeSearchQueryGetTest() throws ApiException {
        String organism = null;
        String query = null;
        Integer limit = null;
        String attrName = null;
        api.organismAttributeSearchQueryGet(organism, query, limit, attrName);
        // TODO: test validations
    }

    /**
     * Returns the supported attributes to the given Organism.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organismAttributeSetGetTest() throws ApiException {
        String organism = null;
        api.organismAttributeSetGet(organism);
        // TODO: test validations
    }

    /**
     * Returns the attributes for a given identifier, data source, organism. Optionally display only a specified attribute
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organismAttributesSystemCodeIdentifierGetTest() throws ApiException {
        String organism = null;
        String systemCode = null;
        String identifier = null;
        String attrName = null;
        api.organismAttributesSystemCodeIdentifierGet(organism, systemCode, identifier, attrName);
        // TODO: test validations
    }

    /**
     * Returns &#x60;true&#x60; or &#x60;false&#x60; based on whether or not /{organism}/search/{query} is supported for a given organism.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organismIsFreeSearchSupportedGetTest() throws ApiException {
        String organism = null;
        api.organismIsFreeSearchSupportedGet(organism);
        // TODO: test validations
    }

    /**
     * Returns &#x60;true&#x60; or &#x60;false&#x60; based on whether or not /{organism}/xrefs/{systemCode}/{identifier} would possibly return a {targetSystemCode} result given a {sourceSystemCode} query. This function basically combines the results of /{organism}/sourceDataSources and /{organism}/targetDataSources into a single boolean result.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGetTest() throws ApiException {
        String organism = null;
        String sourceSystemCode = null;
        String targetSystemCode = null;
        api.organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGet(organism, sourceSystemCode, targetSystemCode);
        // TODO: test validations
    }

    /**
     * Returns the list of properties available for a given organism 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organismPropertiesGetTest() throws ApiException {
        String organism = null;
        api.organismPropertiesGet(organism);
        // TODO: test validations
    }

    /**
     * Returns a list of xrefs with identifiers that contain the query string for a given organism. Results are not restricted to exact matches. Optionally limit results to a specified number per data source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organismSearchQueryGetTest() throws ApiException {
        String organism = null;
        String query = null;
        Integer limit = null;
        api.organismSearchQueryGet(organism, query, limit);
        // TODO: test validations
    }

    /**
     * Returns a list of data sources available as xref sources for a given organism.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organismSourceDataSourcesGetTest() throws ApiException {
        String organism = null;
        api.organismSourceDataSourcesGet(organism);
        // TODO: test validations
    }

    /**
     * Returns a list of data sources available as xref targets for a given organism.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organismTargetDataSourcesGetTest() throws ApiException {
        String organism = null;
        api.organismTargetDataSourcesGet(organism);
        // TODO: test validations
    }

    /**
     * Returns &#x60;true&#x60; or &#x60;false&#x60; based on whether or not an xref exists in the database given an identifier, data source, and organism.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organismXrefExistsSystemCodeIdentifierGetTest() throws ApiException {
        String organism = null;
        String systemCode = null;
        String identifier = null;
        api.organismXrefExistsSystemCodeIdentifierGet(organism, systemCode, identifier);
        // TODO: test validations
    }

    /**
     * Returns a list of xrefs, per identifier, that maps to a given list of identifiers an data source given an organism.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organismXrefsBatchPostTest() throws ApiException {
        String organism = null;
        String body = null;
        String dataSource = null;
        api.organismXrefsBatchPost(organism, body, dataSource);
        // TODO: test validations
    }

    /**
     * Returns a list of xrefs, that maps to a given list of identifiers to a given data source and organism.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organismXrefsBatchSystemCodePostTest() throws ApiException {
        String organism = null;
        String systemCode = null;
        String body = null;
        String dataSource = null;
        api.organismXrefsBatchSystemCodePost(organism, systemCode, body, dataSource);
        // TODO: test validations
    }

    /**
     * Returns a list of xrefs that map to a given identifier, data source, and organism.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organismXrefsSystemCodeIdentifierGetTest() throws ApiException {
        String organism = null;
        String systemCode = null;
        String identifier = null;
        String dataSource = null;
        api.organismXrefsSystemCodeIdentifierGet(organism, systemCode, identifier, dataSource);
        // TODO: test validations
    }

}
