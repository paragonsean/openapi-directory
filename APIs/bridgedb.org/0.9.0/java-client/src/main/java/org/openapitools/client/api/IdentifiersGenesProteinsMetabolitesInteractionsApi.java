/*
 * bridgedb webservices
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IdentifiersGenesProteinsMetabolitesInteractionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IdentifiersGenesProteinsMetabolitesInteractionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IdentifiersGenesProteinsMetabolitesInteractionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for organismAttributeSearchQueryGet
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param query Text to find in attributes (required)
     * @param limit Number of results (optional)
     * @param attrName Restrict search by attribute name (case sensitive). Use GET /{organism}/attributeSet to find out which attributes are supported. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> returns a tab-delimited list with the identifier, data source and descriptions found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organismAttributeSearchQueryGetCall(String organism, String query, Integer limit, String attrName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{organism}/attributeSearch/{query}"
            .replace("{" + "organism" + "}", localVarApiClient.escapeString(organism.toString()))
            .replace("{" + "query" + "}", localVarApiClient.escapeString(query.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (attrName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attrName", attrName));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organismAttributeSearchQueryGetValidateBeforeCall(String organism, String query, Integer limit, String attrName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organism' is set
        if (organism == null) {
            throw new ApiException("Missing the required parameter 'organism' when calling organismAttributeSearchQueryGet(Async)");
        }

        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling organismAttributeSearchQueryGet(Async)");
        }

        return organismAttributeSearchQueryGetCall(organism, query, limit, attrName, _callback);

    }

    /**
     * 
     * Returns a list of xrefs and associated attributes that contain the query string for a given organism. Results are not restricted to exact matches. Optionally limit results to a specified number per data source, or by the type of attribute. See possible attribute types via /{organism}/attributeSet. 
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param query Text to find in attributes (required)
     * @param limit Number of results (optional)
     * @param attrName Restrict search by attribute name (case sensitive). Use GET /{organism}/attributeSet to find out which attributes are supported. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> returns a tab-delimited list with the identifier, data source and descriptions found. </td><td>  -  </td></tr>
     </table>
     */
    public void organismAttributeSearchQueryGet(String organism, String query, Integer limit, String attrName) throws ApiException {
        organismAttributeSearchQueryGetWithHttpInfo(organism, query, limit, attrName);
    }

    /**
     * 
     * Returns a list of xrefs and associated attributes that contain the query string for a given organism. Results are not restricted to exact matches. Optionally limit results to a specified number per data source, or by the type of attribute. See possible attribute types via /{organism}/attributeSet. 
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param query Text to find in attributes (required)
     * @param limit Number of results (optional)
     * @param attrName Restrict search by attribute name (case sensitive). Use GET /{organism}/attributeSet to find out which attributes are supported. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> returns a tab-delimited list with the identifier, data source and descriptions found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organismAttributeSearchQueryGetWithHttpInfo(String organism, String query, Integer limit, String attrName) throws ApiException {
        okhttp3.Call localVarCall = organismAttributeSearchQueryGetValidateBeforeCall(organism, query, limit, attrName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns a list of xrefs and associated attributes that contain the query string for a given organism. Results are not restricted to exact matches. Optionally limit results to a specified number per data source, or by the type of attribute. See possible attribute types via /{organism}/attributeSet. 
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param query Text to find in attributes (required)
     * @param limit Number of results (optional)
     * @param attrName Restrict search by attribute name (case sensitive). Use GET /{organism}/attributeSet to find out which attributes are supported. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> returns a tab-delimited list with the identifier, data source and descriptions found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organismAttributeSearchQueryGetAsync(String organism, String query, Integer limit, String attrName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organismAttributeSearchQueryGetValidateBeforeCall(organism, query, limit, attrName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organismAttributeSetGet
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the supported attributes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organismAttributeSetGetCall(String organism, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{organism}/attributeSet"
            .replace("{" + "organism" + "}", localVarApiClient.escapeString(organism.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organismAttributeSetGetValidateBeforeCall(String organism, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organism' is set
        if (organism == null) {
            throw new ApiException("Missing the required parameter 'organism' when calling organismAttributeSetGet(Async)");
        }

        return organismAttributeSetGetCall(organism, _callback);

    }

    /**
     * 
     * Returns the supported attributes to the given Organism.
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the supported attributes </td><td>  -  </td></tr>
     </table>
     */
    public void organismAttributeSetGet(String organism) throws ApiException {
        organismAttributeSetGetWithHttpInfo(organism);
    }

    /**
     * 
     * Returns the supported attributes to the given Organism.
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the supported attributes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organismAttributeSetGetWithHttpInfo(String organism) throws ApiException {
        okhttp3.Call localVarCall = organismAttributeSetGetValidateBeforeCall(organism, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns the supported attributes to the given Organism.
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the supported attributes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organismAttributeSetGetAsync(String organism, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organismAttributeSetGetValidateBeforeCall(organism, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organismAttributesSystemCodeIdentifierGet
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param systemCode System (required)
     * @param identifier Identifier (required)
     * @param attrName Type of attribute (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a tab-delimited list with the attributes and their content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organismAttributesSystemCodeIdentifierGetCall(String organism, String systemCode, String identifier, String attrName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{organism}/attributes/{systemCode}/{identifier}"
            .replace("{" + "organism" + "}", localVarApiClient.escapeString(organism.toString()))
            .replace("{" + "systemCode" + "}", localVarApiClient.escapeString(systemCode.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attrName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attrName", attrName));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organismAttributesSystemCodeIdentifierGetValidateBeforeCall(String organism, String systemCode, String identifier, String attrName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organism' is set
        if (organism == null) {
            throw new ApiException("Missing the required parameter 'organism' when calling organismAttributesSystemCodeIdentifierGet(Async)");
        }

        // verify the required parameter 'systemCode' is set
        if (systemCode == null) {
            throw new ApiException("Missing the required parameter 'systemCode' when calling organismAttributesSystemCodeIdentifierGet(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling organismAttributesSystemCodeIdentifierGet(Async)");
        }

        return organismAttributesSystemCodeIdentifierGetCall(organism, systemCode, identifier, attrName, _callback);

    }

    /**
     * 
     * Returns the attributes for a given identifier, data source, organism. Optionally display only a specified attribute
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param systemCode System (required)
     * @param identifier Identifier (required)
     * @param attrName Type of attribute (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a tab-delimited list with the attributes and their content </td><td>  -  </td></tr>
     </table>
     */
    public void organismAttributesSystemCodeIdentifierGet(String organism, String systemCode, String identifier, String attrName) throws ApiException {
        organismAttributesSystemCodeIdentifierGetWithHttpInfo(organism, systemCode, identifier, attrName);
    }

    /**
     * 
     * Returns the attributes for a given identifier, data source, organism. Optionally display only a specified attribute
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param systemCode System (required)
     * @param identifier Identifier (required)
     * @param attrName Type of attribute (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a tab-delimited list with the attributes and their content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organismAttributesSystemCodeIdentifierGetWithHttpInfo(String organism, String systemCode, String identifier, String attrName) throws ApiException {
        okhttp3.Call localVarCall = organismAttributesSystemCodeIdentifierGetValidateBeforeCall(organism, systemCode, identifier, attrName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns the attributes for a given identifier, data source, organism. Optionally display only a specified attribute
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param systemCode System (required)
     * @param identifier Identifier (required)
     * @param attrName Type of attribute (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a tab-delimited list with the attributes and their content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organismAttributesSystemCodeIdentifierGetAsync(String organism, String systemCode, String identifier, String attrName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organismAttributesSystemCodeIdentifierGetValidateBeforeCall(organism, systemCode, identifier, attrName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organismIsFreeSearchSupportedGet
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns &#x60;true&#x60; or &#x60;false&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organismIsFreeSearchSupportedGetCall(String organism, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{organism}/isFreeSearchSupported"
            .replace("{" + "organism" + "}", localVarApiClient.escapeString(organism.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organismIsFreeSearchSupportedGetValidateBeforeCall(String organism, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organism' is set
        if (organism == null) {
            throw new ApiException("Missing the required parameter 'organism' when calling organismIsFreeSearchSupportedGet(Async)");
        }

        return organismIsFreeSearchSupportedGetCall(organism, _callback);

    }

    /**
     * 
     * Returns &#x60;true&#x60; or &#x60;false&#x60; based on whether or not /{organism}/search/{query} is supported for a given organism.
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns &#x60;true&#x60; or &#x60;false&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public void organismIsFreeSearchSupportedGet(String organism) throws ApiException {
        organismIsFreeSearchSupportedGetWithHttpInfo(organism);
    }

    /**
     * 
     * Returns &#x60;true&#x60; or &#x60;false&#x60; based on whether or not /{organism}/search/{query} is supported for a given organism.
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns &#x60;true&#x60; or &#x60;false&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organismIsFreeSearchSupportedGetWithHttpInfo(String organism) throws ApiException {
        okhttp3.Call localVarCall = organismIsFreeSearchSupportedGetValidateBeforeCall(organism, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns &#x60;true&#x60; or &#x60;false&#x60; based on whether or not /{organism}/search/{query} is supported for a given organism.
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns &#x60;true&#x60; or &#x60;false&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organismIsFreeSearchSupportedGetAsync(String organism, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organismIsFreeSearchSupportedGetValidateBeforeCall(organism, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGet
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param sourceSystemCode [System code](http://vocabularies.bridgedb.org/#systemCode) for source (input/query) data source (required)
     * @param targetSystemCode [System code](http://vocabularies.bridgedb.org/#systemCode) for target (output/result) data source (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns &#x60;true&#x60; or &#x60;false&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGetCall(String organism, String sourceSystemCode, String targetSystemCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{organism}/isMappingSupported/{sourceSystemCode}/{targetSystemCode}"
            .replace("{" + "organism" + "}", localVarApiClient.escapeString(organism.toString()))
            .replace("{" + "sourceSystemCode" + "}", localVarApiClient.escapeString(sourceSystemCode.toString()))
            .replace("{" + "targetSystemCode" + "}", localVarApiClient.escapeString(targetSystemCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGetValidateBeforeCall(String organism, String sourceSystemCode, String targetSystemCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organism' is set
        if (organism == null) {
            throw new ApiException("Missing the required parameter 'organism' when calling organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGet(Async)");
        }

        // verify the required parameter 'sourceSystemCode' is set
        if (sourceSystemCode == null) {
            throw new ApiException("Missing the required parameter 'sourceSystemCode' when calling organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGet(Async)");
        }

        // verify the required parameter 'targetSystemCode' is set
        if (targetSystemCode == null) {
            throw new ApiException("Missing the required parameter 'targetSystemCode' when calling organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGet(Async)");
        }

        return organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGetCall(organism, sourceSystemCode, targetSystemCode, _callback);

    }

    /**
     * 
     * Returns &#x60;true&#x60; or &#x60;false&#x60; based on whether or not /{organism}/xrefs/{systemCode}/{identifier} would possibly return a {targetSystemCode} result given a {sourceSystemCode} query. This function basically combines the results of /{organism}/sourceDataSources and /{organism}/targetDataSources into a single boolean result.
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param sourceSystemCode [System code](http://vocabularies.bridgedb.org/#systemCode) for source (input/query) data source (required)
     * @param targetSystemCode [System code](http://vocabularies.bridgedb.org/#systemCode) for target (output/result) data source (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns &#x60;true&#x60; or &#x60;false&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public void organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGet(String organism, String sourceSystemCode, String targetSystemCode) throws ApiException {
        organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGetWithHttpInfo(organism, sourceSystemCode, targetSystemCode);
    }

    /**
     * 
     * Returns &#x60;true&#x60; or &#x60;false&#x60; based on whether or not /{organism}/xrefs/{systemCode}/{identifier} would possibly return a {targetSystemCode} result given a {sourceSystemCode} query. This function basically combines the results of /{organism}/sourceDataSources and /{organism}/targetDataSources into a single boolean result.
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param sourceSystemCode [System code](http://vocabularies.bridgedb.org/#systemCode) for source (input/query) data source (required)
     * @param targetSystemCode [System code](http://vocabularies.bridgedb.org/#systemCode) for target (output/result) data source (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns &#x60;true&#x60; or &#x60;false&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGetWithHttpInfo(String organism, String sourceSystemCode, String targetSystemCode) throws ApiException {
        okhttp3.Call localVarCall = organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGetValidateBeforeCall(organism, sourceSystemCode, targetSystemCode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns &#x60;true&#x60; or &#x60;false&#x60; based on whether or not /{organism}/xrefs/{systemCode}/{identifier} would possibly return a {targetSystemCode} result given a {sourceSystemCode} query. This function basically combines the results of /{organism}/sourceDataSources and /{organism}/targetDataSources into a single boolean result.
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param sourceSystemCode [System code](http://vocabularies.bridgedb.org/#systemCode) for source (input/query) data source (required)
     * @param targetSystemCode [System code](http://vocabularies.bridgedb.org/#systemCode) for target (output/result) data source (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns &#x60;true&#x60; or &#x60;false&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGetAsync(String organism, String sourceSystemCode, String targetSystemCode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organismIsMappingSupportedSourceSystemCodeTargetSystemCodeGetValidateBeforeCall(organism, sourceSystemCode, targetSystemCode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organismPropertiesGet
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of properties available for a given organism </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organismPropertiesGetCall(String organism, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{organism}/properties"
            .replace("{" + "organism" + "}", localVarApiClient.escapeString(organism.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organismPropertiesGetValidateBeforeCall(String organism, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organism' is set
        if (organism == null) {
            throw new ApiException("Missing the required parameter 'organism' when calling organismPropertiesGet(Async)");
        }

        return organismPropertiesGetCall(organism, _callback);

    }

    /**
     * 
     * Returns the list of properties available for a given organism 
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of properties available for a given organism </td><td>  -  </td></tr>
     </table>
     */
    public void organismPropertiesGet(String organism) throws ApiException {
        organismPropertiesGetWithHttpInfo(organism);
    }

    /**
     * 
     * Returns the list of properties available for a given organism 
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of properties available for a given organism </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organismPropertiesGetWithHttpInfo(String organism) throws ApiException {
        okhttp3.Call localVarCall = organismPropertiesGetValidateBeforeCall(organism, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns the list of properties available for a given organism 
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of properties available for a given organism </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organismPropertiesGetAsync(String organism, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organismPropertiesGetValidateBeforeCall(organism, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organismSearchQueryGet
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param query Identifier query (required)
     * @param limit Number of results per data source (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a tab-delimited list of xrefs with identifiers that contain the query string for a given organism </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organismSearchQueryGetCall(String organism, String query, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{organism}/search/{query}"
            .replace("{" + "organism" + "}", localVarApiClient.escapeString(organism.toString()))
            .replace("{" + "query" + "}", localVarApiClient.escapeString(query.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organismSearchQueryGetValidateBeforeCall(String organism, String query, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organism' is set
        if (organism == null) {
            throw new ApiException("Missing the required parameter 'organism' when calling organismSearchQueryGet(Async)");
        }

        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling organismSearchQueryGet(Async)");
        }

        return organismSearchQueryGetCall(organism, query, limit, _callback);

    }

    /**
     * 
     * Returns a list of xrefs with identifiers that contain the query string for a given organism. Results are not restricted to exact matches. Optionally limit results to a specified number per data source.
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param query Identifier query (required)
     * @param limit Number of results per data source (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a tab-delimited list of xrefs with identifiers that contain the query string for a given organism </td><td>  -  </td></tr>
     </table>
     */
    public void organismSearchQueryGet(String organism, String query, Integer limit) throws ApiException {
        organismSearchQueryGetWithHttpInfo(organism, query, limit);
    }

    /**
     * 
     * Returns a list of xrefs with identifiers that contain the query string for a given organism. Results are not restricted to exact matches. Optionally limit results to a specified number per data source.
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param query Identifier query (required)
     * @param limit Number of results per data source (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a tab-delimited list of xrefs with identifiers that contain the query string for a given organism </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organismSearchQueryGetWithHttpInfo(String organism, String query, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = organismSearchQueryGetValidateBeforeCall(organism, query, limit, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns a list of xrefs with identifiers that contain the query string for a given organism. Results are not restricted to exact matches. Optionally limit results to a specified number per data source.
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param query Identifier query (required)
     * @param limit Number of results per data source (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a tab-delimited list of xrefs with identifiers that contain the query string for a given organism </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organismSearchQueryGetAsync(String organism, String query, Integer limit, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organismSearchQueryGetValidateBeforeCall(organism, query, limit, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organismSourceDataSourcesGet
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of data sources available as xref sources. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organismSourceDataSourcesGetCall(String organism, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{organism}/sourceDataSources"
            .replace("{" + "organism" + "}", localVarApiClient.escapeString(organism.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organismSourceDataSourcesGetValidateBeforeCall(String organism, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organism' is set
        if (organism == null) {
            throw new ApiException("Missing the required parameter 'organism' when calling organismSourceDataSourcesGet(Async)");
        }

        return organismSourceDataSourcesGetCall(organism, _callback);

    }

    /**
     * 
     * Returns a list of data sources available as xref sources for a given organism.
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of data sources available as xref sources. </td><td>  -  </td></tr>
     </table>
     */
    public void organismSourceDataSourcesGet(String organism) throws ApiException {
        organismSourceDataSourcesGetWithHttpInfo(organism);
    }

    /**
     * 
     * Returns a list of data sources available as xref sources for a given organism.
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of data sources available as xref sources. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organismSourceDataSourcesGetWithHttpInfo(String organism) throws ApiException {
        okhttp3.Call localVarCall = organismSourceDataSourcesGetValidateBeforeCall(organism, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns a list of data sources available as xref sources for a given organism.
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of data sources available as xref sources. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organismSourceDataSourcesGetAsync(String organism, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organismSourceDataSourcesGetValidateBeforeCall(organism, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organismTargetDataSourcesGet
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of data sources available as xref targets. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organismTargetDataSourcesGetCall(String organism, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{organism}/targetDataSources"
            .replace("{" + "organism" + "}", localVarApiClient.escapeString(organism.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organismTargetDataSourcesGetValidateBeforeCall(String organism, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organism' is set
        if (organism == null) {
            throw new ApiException("Missing the required parameter 'organism' when calling organismTargetDataSourcesGet(Async)");
        }

        return organismTargetDataSourcesGetCall(organism, _callback);

    }

    /**
     * 
     * Returns a list of data sources available as xref targets for a given organism.
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of data sources available as xref targets. </td><td>  -  </td></tr>
     </table>
     */
    public void organismTargetDataSourcesGet(String organism) throws ApiException {
        organismTargetDataSourcesGetWithHttpInfo(organism);
    }

    /**
     * 
     * Returns a list of data sources available as xref targets for a given organism.
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of data sources available as xref targets. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organismTargetDataSourcesGetWithHttpInfo(String organism) throws ApiException {
        okhttp3.Call localVarCall = organismTargetDataSourcesGetValidateBeforeCall(organism, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns a list of data sources available as xref targets for a given organism.
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of data sources available as xref targets. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organismTargetDataSourcesGetAsync(String organism, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organismTargetDataSourcesGetValidateBeforeCall(organism, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organismXrefExistsSystemCodeIdentifierGet
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param systemCode Source (input) data source [system code](https://bridgedb.github.io/pages/system-codes.html) (required)
     * @param identifier Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns &#x60;true&#x60; or &#x60;false&#x60; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organismXrefExistsSystemCodeIdentifierGetCall(String organism, String systemCode, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{organism}/xrefExists/{systemCode}/{identifier}"
            .replace("{" + "organism" + "}", localVarApiClient.escapeString(organism.toString()))
            .replace("{" + "systemCode" + "}", localVarApiClient.escapeString(systemCode.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organismXrefExistsSystemCodeIdentifierGetValidateBeforeCall(String organism, String systemCode, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organism' is set
        if (organism == null) {
            throw new ApiException("Missing the required parameter 'organism' when calling organismXrefExistsSystemCodeIdentifierGet(Async)");
        }

        // verify the required parameter 'systemCode' is set
        if (systemCode == null) {
            throw new ApiException("Missing the required parameter 'systemCode' when calling organismXrefExistsSystemCodeIdentifierGet(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling organismXrefExistsSystemCodeIdentifierGet(Async)");
        }

        return organismXrefExistsSystemCodeIdentifierGetCall(organism, systemCode, identifier, _callback);

    }

    /**
     * 
     * Returns &#x60;true&#x60; or &#x60;false&#x60; based on whether or not an xref exists in the database given an identifier, data source, and organism.
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param systemCode Source (input) data source [system code](https://bridgedb.github.io/pages/system-codes.html) (required)
     * @param identifier Identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns &#x60;true&#x60; or &#x60;false&#x60; </td><td>  -  </td></tr>
     </table>
     */
    public void organismXrefExistsSystemCodeIdentifierGet(String organism, String systemCode, String identifier) throws ApiException {
        organismXrefExistsSystemCodeIdentifierGetWithHttpInfo(organism, systemCode, identifier);
    }

    /**
     * 
     * Returns &#x60;true&#x60; or &#x60;false&#x60; based on whether or not an xref exists in the database given an identifier, data source, and organism.
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param systemCode Source (input) data source [system code](https://bridgedb.github.io/pages/system-codes.html) (required)
     * @param identifier Identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns &#x60;true&#x60; or &#x60;false&#x60; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organismXrefExistsSystemCodeIdentifierGetWithHttpInfo(String organism, String systemCode, String identifier) throws ApiException {
        okhttp3.Call localVarCall = organismXrefExistsSystemCodeIdentifierGetValidateBeforeCall(organism, systemCode, identifier, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns &#x60;true&#x60; or &#x60;false&#x60; based on whether or not an xref exists in the database given an identifier, data source, and organism.
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param systemCode Source (input) data source [system code](https://bridgedb.github.io/pages/system-codes.html) (required)
     * @param identifier Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns &#x60;true&#x60; or &#x60;false&#x60; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organismXrefExistsSystemCodeIdentifierGetAsync(String organism, String systemCode, String identifier, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organismXrefExistsSystemCodeIdentifierGetValidateBeforeCall(organism, systemCode, identifier, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organismXrefsBatchPost
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param body List of tab separated values: id&lt;tab&gt;systemcode\\n (required)
     * @param dataSource (Optional) Restrict results by data source [system code](https://bridgedb.github.io/pages/system-codes.html) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a tab-delimited list of xrefs that map to a given identifier </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organismXrefsBatchPostCall(String organism, String body, String dataSource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/{organism}/xrefsBatch"
            .replace("{" + "organism" + "}", localVarApiClient.escapeString(organism.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dataSource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dataSource", dataSource));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/html"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organismXrefsBatchPostValidateBeforeCall(String organism, String body, String dataSource, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organism' is set
        if (organism == null) {
            throw new ApiException("Missing the required parameter 'organism' when calling organismXrefsBatchPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling organismXrefsBatchPost(Async)");
        }

        return organismXrefsBatchPostCall(organism, body, dataSource, _callback);

    }

    /**
     * 
     * Returns a list of xrefs, per identifier, that maps to a given list of identifiers an data source given an organism.
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param body List of tab separated values: id&lt;tab&gt;systemcode\\n (required)
     * @param dataSource (Optional) Restrict results by data source [system code](https://bridgedb.github.io/pages/system-codes.html) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a tab-delimited list of xrefs that map to a given identifier </td><td>  -  </td></tr>
     </table>
     */
    public void organismXrefsBatchPost(String organism, String body, String dataSource) throws ApiException {
        organismXrefsBatchPostWithHttpInfo(organism, body, dataSource);
    }

    /**
     * 
     * Returns a list of xrefs, per identifier, that maps to a given list of identifiers an data source given an organism.
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param body List of tab separated values: id&lt;tab&gt;systemcode\\n (required)
     * @param dataSource (Optional) Restrict results by data source [system code](https://bridgedb.github.io/pages/system-codes.html) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a tab-delimited list of xrefs that map to a given identifier </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organismXrefsBatchPostWithHttpInfo(String organism, String body, String dataSource) throws ApiException {
        okhttp3.Call localVarCall = organismXrefsBatchPostValidateBeforeCall(organism, body, dataSource, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns a list of xrefs, per identifier, that maps to a given list of identifiers an data source given an organism.
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param body List of tab separated values: id&lt;tab&gt;systemcode\\n (required)
     * @param dataSource (Optional) Restrict results by data source [system code](https://bridgedb.github.io/pages/system-codes.html) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a tab-delimited list of xrefs that map to a given identifier </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organismXrefsBatchPostAsync(String organism, String body, String dataSource, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organismXrefsBatchPostValidateBeforeCall(organism, body, dataSource, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organismXrefsBatchSystemCodePost
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param systemCode Source (input) data source [system code](http://vocabularies.bridgedb.org/#systemCode) (required)
     * @param body List of identifiers. The separator is a new line (\\n) (required)
     * @param dataSource (Optional) Restrict results by data source [system code](https://bridgedb.github.io/pages/system-codes.html) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a tab-delimited list of xrefs that map to a given identifier </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organismXrefsBatchSystemCodePostCall(String organism, String systemCode, String body, String dataSource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/{organism}/xrefsBatch/{systemCode}"
            .replace("{" + "organism" + "}", localVarApiClient.escapeString(organism.toString()))
            .replace("{" + "systemCode" + "}", localVarApiClient.escapeString(systemCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dataSource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dataSource", dataSource));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/html"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organismXrefsBatchSystemCodePostValidateBeforeCall(String organism, String systemCode, String body, String dataSource, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organism' is set
        if (organism == null) {
            throw new ApiException("Missing the required parameter 'organism' when calling organismXrefsBatchSystemCodePost(Async)");
        }

        // verify the required parameter 'systemCode' is set
        if (systemCode == null) {
            throw new ApiException("Missing the required parameter 'systemCode' when calling organismXrefsBatchSystemCodePost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling organismXrefsBatchSystemCodePost(Async)");
        }

        return organismXrefsBatchSystemCodePostCall(organism, systemCode, body, dataSource, _callback);

    }

    /**
     * 
     * Returns a list of xrefs, that maps to a given list of identifiers to a given data source and organism.
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param systemCode Source (input) data source [system code](http://vocabularies.bridgedb.org/#systemCode) (required)
     * @param body List of identifiers. The separator is a new line (\\n) (required)
     * @param dataSource (Optional) Restrict results by data source [system code](https://bridgedb.github.io/pages/system-codes.html) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a tab-delimited list of xrefs that map to a given identifier </td><td>  -  </td></tr>
     </table>
     */
    public void organismXrefsBatchSystemCodePost(String organism, String systemCode, String body, String dataSource) throws ApiException {
        organismXrefsBatchSystemCodePostWithHttpInfo(organism, systemCode, body, dataSource);
    }

    /**
     * 
     * Returns a list of xrefs, that maps to a given list of identifiers to a given data source and organism.
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param systemCode Source (input) data source [system code](http://vocabularies.bridgedb.org/#systemCode) (required)
     * @param body List of identifiers. The separator is a new line (\\n) (required)
     * @param dataSource (Optional) Restrict results by data source [system code](https://bridgedb.github.io/pages/system-codes.html) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a tab-delimited list of xrefs that map to a given identifier </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organismXrefsBatchSystemCodePostWithHttpInfo(String organism, String systemCode, String body, String dataSource) throws ApiException {
        okhttp3.Call localVarCall = organismXrefsBatchSystemCodePostValidateBeforeCall(organism, systemCode, body, dataSource, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns a list of xrefs, that maps to a given list of identifiers to a given data source and organism.
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param systemCode Source (input) data source [system code](http://vocabularies.bridgedb.org/#systemCode) (required)
     * @param body List of identifiers. The separator is a new line (\\n) (required)
     * @param dataSource (Optional) Restrict results by data source [system code](https://bridgedb.github.io/pages/system-codes.html) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a tab-delimited list of xrefs that map to a given identifier </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organismXrefsBatchSystemCodePostAsync(String organism, String systemCode, String body, String dataSource, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organismXrefsBatchSystemCodePostValidateBeforeCall(organism, systemCode, body, dataSource, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organismXrefsSystemCodeIdentifierGet
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param systemCode Source (input) data source [system code](https://bridgedb.github.io/pages/system-codes.html) (required)
     * @param identifier Identifier (required)
     * @param dataSource (Optional) Restrict results by data source [system code](https://bridgedb.github.io/pages/system-codes.html) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a tab-delimited list of xrefs that map to a given identifier </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organismXrefsSystemCodeIdentifierGetCall(String organism, String systemCode, String identifier, String dataSource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{organism}/xrefs/{systemCode}/{identifier}"
            .replace("{" + "organism" + "}", localVarApiClient.escapeString(organism.toString()))
            .replace("{" + "systemCode" + "}", localVarApiClient.escapeString(systemCode.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dataSource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dataSource", dataSource));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organismXrefsSystemCodeIdentifierGetValidateBeforeCall(String organism, String systemCode, String identifier, String dataSource, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organism' is set
        if (organism == null) {
            throw new ApiException("Missing the required parameter 'organism' when calling organismXrefsSystemCodeIdentifierGet(Async)");
        }

        // verify the required parameter 'systemCode' is set
        if (systemCode == null) {
            throw new ApiException("Missing the required parameter 'systemCode' when calling organismXrefsSystemCodeIdentifierGet(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling organismXrefsSystemCodeIdentifierGet(Async)");
        }

        return organismXrefsSystemCodeIdentifierGetCall(organism, systemCode, identifier, dataSource, _callback);

    }

    /**
     * 
     * Returns a list of xrefs that map to a given identifier, data source, and organism.
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param systemCode Source (input) data source [system code](https://bridgedb.github.io/pages/system-codes.html) (required)
     * @param identifier Identifier (required)
     * @param dataSource (Optional) Restrict results by data source [system code](https://bridgedb.github.io/pages/system-codes.html) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a tab-delimited list of xrefs that map to a given identifier </td><td>  -  </td></tr>
     </table>
     */
    public void organismXrefsSystemCodeIdentifierGet(String organism, String systemCode, String identifier, String dataSource) throws ApiException {
        organismXrefsSystemCodeIdentifierGetWithHttpInfo(organism, systemCode, identifier, dataSource);
    }

    /**
     * 
     * Returns a list of xrefs that map to a given identifier, data source, and organism.
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param systemCode Source (input) data source [system code](https://bridgedb.github.io/pages/system-codes.html) (required)
     * @param identifier Identifier (required)
     * @param dataSource (Optional) Restrict results by data source [system code](https://bridgedb.github.io/pages/system-codes.html) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a tab-delimited list of xrefs that map to a given identifier </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organismXrefsSystemCodeIdentifierGetWithHttpInfo(String organism, String systemCode, String identifier, String dataSource) throws ApiException {
        okhttp3.Call localVarCall = organismXrefsSystemCodeIdentifierGetValidateBeforeCall(organism, systemCode, identifier, dataSource, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns a list of xrefs that map to a given identifier, data source, and organism.
     * @param organism Organism [Latin name](http://vocabularies.bridgedb.org/#latinName) or [short name](http://vocabularies.bridgedb.org/#shortName). (required)
     * @param systemCode Source (input) data source [system code](https://bridgedb.github.io/pages/system-codes.html) (required)
     * @param identifier Identifier (required)
     * @param dataSource (Optional) Restrict results by data source [system code](https://bridgedb.github.io/pages/system-codes.html) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a tab-delimited list of xrefs that map to a given identifier </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organismXrefsSystemCodeIdentifierGetAsync(String organism, String systemCode, String identifier, String dataSource, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organismXrefsSystemCodeIdentifierGetValidateBeforeCall(organism, systemCode, identifier, dataSource, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
