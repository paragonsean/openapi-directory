# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubscriptionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, itv_data_purchased: object=None):
        """SubscriptionDetails - a model defined in OpenAPI

        :param itv_data_purchased: The itv_data_purchased of this SubscriptionDetails.
        """
        self.openapi_types = {
            'itv_data_purchased': object
        }

        self.attribute_map = {
            'itv_data_purchased': 'itvData_purchased'
        }

        self._itv_data_purchased = itv_data_purchased

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionDetails of this SubscriptionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def itv_data_purchased(self):
        """Gets the itv_data_purchased of this SubscriptionDetails.

        The ITV purchased subscription data.

        :return: The itv_data_purchased of this SubscriptionDetails.
        :rtype: object
        """
        return self._itv_data_purchased

    @itv_data_purchased.setter
    def itv_data_purchased(self, itv_data_purchased):
        """Sets the itv_data_purchased of this SubscriptionDetails.

        The ITV purchased subscription data.

        :param itv_data_purchased: The itv_data_purchased of this SubscriptionDetails.
        :type itv_data_purchased: object
        """
        if itv_data_purchased is None:
            raise ValueError("Invalid value for `itv_data_purchased`, must not be `None`")

        self._itv_data_purchased = itv_data_purchased
