# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Watched(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, first_watched_date: datetime=None, is_fully_watched: bool=False, item_id: str=None, last_watched_date: datetime=None, position: int=None):
        """Watched - a model defined in OpenAPI

        :param first_watched_date: The first_watched_date of this Watched.
        :param is_fully_watched: The is_fully_watched of this Watched.
        :param item_id: The item_id of this Watched.
        :param last_watched_date: The last_watched_date of this Watched.
        :param position: The position of this Watched.
        """
        self.openapi_types = {
            'first_watched_date': datetime,
            'is_fully_watched': bool,
            'item_id': str,
            'last_watched_date': datetime,
            'position': int
        }

        self.attribute_map = {
            'first_watched_date': 'firstWatchedDate',
            'is_fully_watched': 'isFullyWatched',
            'item_id': 'itemId',
            'last_watched_date': 'lastWatchedDate',
            'position': 'position'
        }

        self._first_watched_date = first_watched_date
        self._is_fully_watched = is_fully_watched
        self._item_id = item_id
        self._last_watched_date = last_watched_date
        self._position = position

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Watched':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Watched of this Watched.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first_watched_date(self):
        """Gets the first_watched_date of this Watched.


        :return: The first_watched_date of this Watched.
        :rtype: datetime
        """
        return self._first_watched_date

    @first_watched_date.setter
    def first_watched_date(self, first_watched_date):
        """Sets the first_watched_date of this Watched.


        :param first_watched_date: The first_watched_date of this Watched.
        :type first_watched_date: datetime
        """
        if first_watched_date is None:
            raise ValueError("Invalid value for `first_watched_date`, must not be `None`")

        self._first_watched_date = first_watched_date

    @property
    def is_fully_watched(self):
        """Gets the is_fully_watched of this Watched.

        True - if the item is fully watched, False - otherwise.

        :return: The is_fully_watched of this Watched.
        :rtype: bool
        """
        return self._is_fully_watched

    @is_fully_watched.setter
    def is_fully_watched(self, is_fully_watched):
        """Sets the is_fully_watched of this Watched.

        True - if the item is fully watched, False - otherwise.

        :param is_fully_watched: The is_fully_watched of this Watched.
        :type is_fully_watched: bool
        """

        self._is_fully_watched = is_fully_watched

    @property
    def item_id(self):
        """Gets the item_id of this Watched.

        The id of the item watched.

        :return: The item_id of this Watched.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this Watched.

        The id of the item watched.

        :param item_id: The item_id of this Watched.
        :type item_id: str
        """

        self._item_id = item_id

    @property
    def last_watched_date(self):
        """Gets the last_watched_date of this Watched.


        :return: The last_watched_date of this Watched.
        :rtype: datetime
        """
        return self._last_watched_date

    @last_watched_date.setter
    def last_watched_date(self, last_watched_date):
        """Sets the last_watched_date of this Watched.


        :param last_watched_date: The last_watched_date of this Watched.
        :type last_watched_date: datetime
        """
        if last_watched_date is None:
            raise ValueError("Invalid value for `last_watched_date`, must not be `None`")

        self._last_watched_date = last_watched_date

    @property
    def position(self):
        """Gets the position of this Watched.

        The last playhead position watched for the item.

        :return: The position of this Watched.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Watched.

        The last playhead position watched for the item.

        :param position: The position of this Watched.
        :type position: int
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")

        self._position = position
