# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ItemPurchase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, ownership: str=None, resolution: str=None, title: str=None, type: str=None):
        """ItemPurchase - a model defined in OpenAPI

        :param id: The id of this ItemPurchase.
        :param ownership: The ownership of this ItemPurchase.
        :param resolution: The resolution of this ItemPurchase.
        :param title: The title of this ItemPurchase.
        :param type: The type of this ItemPurchase.
        """
        self.openapi_types = {
            'id': str,
            'ownership': str,
            'resolution': str,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            'ownership': 'ownership',
            'resolution': 'resolution',
            'title': 'title',
            'type': 'type'
        }

        self._id = id
        self._ownership = ownership
        self._resolution = resolution
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItemPurchase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItemPurchase of this ItemPurchase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ItemPurchase.

        The identifier of the purchased item.

        :return: The id of this ItemPurchase.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ItemPurchase.

        The identifier of the purchased item.

        :param id: The id of this ItemPurchase.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def ownership(self):
        """Gets the ownership of this ItemPurchase.

        The ownership of the purchased item.

        :return: The ownership of this ItemPurchase.
        :rtype: str
        """
        return self._ownership

    @ownership.setter
    def ownership(self, ownership):
        """Sets the ownership of this ItemPurchase.

        The ownership of the purchased item.

        :param ownership: The ownership of this ItemPurchase.
        :type ownership: str
        """
        allowed_values = ["Subscription", "Free", "Rent", "Own", "None"]  # noqa: E501
        if ownership not in allowed_values:
            raise ValueError(
                "Invalid value for `ownership` ({0}), must be one of {1}"
                .format(ownership, allowed_values)
            )

        self._ownership = ownership

    @property
    def resolution(self):
        """Gets the resolution of this ItemPurchase.

        The resolution of the purchased item.

        :return: The resolution of this ItemPurchase.
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this ItemPurchase.

        The resolution of the purchased item.

        :param resolution: The resolution of this ItemPurchase.
        :type resolution: str
        """
        allowed_values = ["SD", "HD-720", "HD-1080", "HD-4K", "External", "Unknown"]  # noqa: E501
        if resolution not in allowed_values:
            raise ValueError(
                "Invalid value for `resolution` ({0}), must be one of {1}"
                .format(resolution, allowed_values)
            )

        self._resolution = resolution

    @property
    def title(self):
        """Gets the title of this ItemPurchase.

        The title of the purchased item.

        :return: The title of this ItemPurchase.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ItemPurchase.

        The title of the purchased item.

        :param title: The title of this ItemPurchase.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this ItemPurchase.

        The type of item purchased.

        :return: The type of this ItemPurchase.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ItemPurchase.

        The type of item purchased.

        :param type: The type of this ItemPurchase.
        :type type: str
        """
        allowed_values = ["movie", "show", "season", "episode", "program", "link", "trailer", "channel", "customAsset"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
