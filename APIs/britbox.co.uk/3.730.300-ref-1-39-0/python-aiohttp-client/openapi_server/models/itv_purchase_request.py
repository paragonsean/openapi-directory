# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ItvPurchaseRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_token: str=None, plan_id: str=None, profile_token: str=None, voucher: str=None):
        """ItvPurchaseRequest - a model defined in OpenAPI

        :param card_token: The card_token of this ItvPurchaseRequest.
        :param plan_id: The plan_id of this ItvPurchaseRequest.
        :param profile_token: The profile_token of this ItvPurchaseRequest.
        :param voucher: The voucher of this ItvPurchaseRequest.
        """
        self.openapi_types = {
            'card_token': str,
            'plan_id': str,
            'profile_token': str,
            'voucher': str
        }

        self.attribute_map = {
            'card_token': 'cardToken',
            'plan_id': 'planId',
            'profile_token': 'profileToken',
            'voucher': 'voucher'
        }

        self._card_token = card_token
        self._plan_id = plan_id
        self._profile_token = profile_token
        self._voucher = voucher

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItvPurchaseRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItvPurchaseRequest of this ItvPurchaseRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_token(self):
        """Gets the card_token of this ItvPurchaseRequest.

        The credit card token.

        :return: The card_token of this ItvPurchaseRequest.
        :rtype: str
        """
        return self._card_token

    @card_token.setter
    def card_token(self, card_token):
        """Sets the card_token of this ItvPurchaseRequest.

        The credit card token.

        :param card_token: The card_token of this ItvPurchaseRequest.
        :type card_token: str
        """
        if card_token is None:
            raise ValueError("Invalid value for `card_token`, must not be `None`")

        self._card_token = card_token

    @property
    def plan_id(self):
        """Gets the plan_id of this ItvPurchaseRequest.

        The identifier of the plan to purchase.

        :return: The plan_id of this ItvPurchaseRequest.
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this ItvPurchaseRequest.

        The identifier of the plan to purchase.

        :param plan_id: The plan_id of this ItvPurchaseRequest.
        :type plan_id: str
        """
        if plan_id is None:
            raise ValueError("Invalid value for `plan_id`, must not be `None`")

        self._plan_id = plan_id

    @property
    def profile_token(self):
        """Gets the profile_token of this ItvPurchaseRequest.

        The ITV profile token.

        :return: The profile_token of this ItvPurchaseRequest.
        :rtype: str
        """
        return self._profile_token

    @profile_token.setter
    def profile_token(self, profile_token):
        """Sets the profile_token of this ItvPurchaseRequest.

        The ITV profile token.

        :param profile_token: The profile_token of this ItvPurchaseRequest.
        :type profile_token: str
        """
        if profile_token is None:
            raise ValueError("Invalid value for `profile_token`, must not be `None`")

        self._profile_token = profile_token

    @property
    def voucher(self):
        """Gets the voucher of this ItvPurchaseRequest.

        A coupon/voucher for a discount.

        :return: The voucher of this ItvPurchaseRequest.
        :rtype: str
        """
        return self._voucher

    @voucher.setter
    def voucher(self, voucher):
        """Sets the voucher of this ItvPurchaseRequest.

        A coupon/voucher for a discount.

        :param voucher: The voucher of this ItvPurchaseRequest.
        :type voucher: str
        """

        self._voucher = voucher
