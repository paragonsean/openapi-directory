# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PaginationAuth(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, scope: str=None, type: str=None):
        """PaginationAuth - a model defined in OpenAPI

        :param scope: The scope of this PaginationAuth.
        :param type: The type of this PaginationAuth.
        """
        self.openapi_types = {
            'scope': str,
            'type': str
        }

        self.attribute_map = {
            'scope': 'scope',
            'type': 'type'
        }

        self._scope = scope
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaginationAuth':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaginationAuth of this PaginationAuth.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def scope(self):
        """Gets the scope of this PaginationAuth.

        The token scope required.

        :return: The scope of this PaginationAuth.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this PaginationAuth.

        The token scope required.

        :param scope: The scope of this PaginationAuth.
        :type scope: str
        """
        allowed_values = ["Catalog", "Commerce", "Settings"]  # noqa: E501
        if scope not in allowed_values:
            raise ValueError(
                "Invalid value for `scope` ({0}), must be one of {1}"
                .format(scope, allowed_values)
            )

        self._scope = scope

    @property
    def type(self):
        """Gets the type of this PaginationAuth.

        The token type required to load the list.

        :return: The type of this PaginationAuth.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PaginationAuth.

        The token type required to load the list.

        :param type: The type of this PaginationAuth.
        :type type: str
        """
        allowed_values = ["UserAccount", "UserProfile"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
