# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.item_list import ItemList
from openapi_server.models.item_summary import ItemSummary
from openapi_server.models.person import Person
from openapi_server import util


class PageEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_fields: Dict[str, object]=None, id: str=None, images: Dict[str, str]=None, item: ItemSummary=None, list: ItemList=None, people: List[Person]=None, template: str=None, text: str=None, title: str=None, type: str=None):
        """PageEntry - a model defined in OpenAPI

        :param custom_fields: The custom_fields of this PageEntry.
        :param id: The id of this PageEntry.
        :param images: The images of this PageEntry.
        :param item: The item of this PageEntry.
        :param list: The list of this PageEntry.
        :param people: The people of this PageEntry.
        :param template: The template of this PageEntry.
        :param text: The text of this PageEntry.
        :param title: The title of this PageEntry.
        :param type: The type of this PageEntry.
        """
        self.openapi_types = {
            'custom_fields': Dict[str, object],
            'id': str,
            'images': Dict[str, str],
            'item': ItemSummary,
            'list': ItemList,
            'people': List[Person],
            'template': str,
            'text': str,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'custom_fields': 'customFields',
            'id': 'id',
            'images': 'images',
            'item': 'item',
            'list': 'list',
            'people': 'people',
            'template': 'template',
            'text': 'text',
            'title': 'title',
            'type': 'type'
        }

        self._custom_fields = custom_fields
        self._id = id
        self._images = images
        self._item = item
        self._list = list
        self._people = people
        self._template = template
        self._text = text
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PageEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PageEntry of this PageEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_fields(self):
        """Gets the custom_fields of this PageEntry.

        A map of custom fields defined by a curator for a page entry.

        :return: The custom_fields of this PageEntry.
        :rtype: Dict[str, object]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this PageEntry.

        A map of custom fields defined by a curator for a page entry.

        :param custom_fields: The custom_fields of this PageEntry.
        :type custom_fields: Dict[str, object]
        """

        self._custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this PageEntry.

        The unique identifier for a page entry.

        :return: The id of this PageEntry.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PageEntry.

        The unique identifier for a page entry.

        :param id: The id of this PageEntry.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def images(self):
        """Gets the images of this PageEntry.

        The images for the page entry if any.  For example the images of an `ImageEntry`. 

        :return: The images of this PageEntry.
        :rtype: Dict[str, str]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this PageEntry.

        The images for the page entry if any.  For example the images of an `ImageEntry`. 

        :param images: The images of this PageEntry.
        :type images: Dict[str, str]
        """

        self._images = images

    @property
    def item(self):
        """Gets the item of this PageEntry.


        :return: The item of this PageEntry.
        :rtype: ItemSummary
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this PageEntry.


        :param item: The item of this PageEntry.
        :type item: ItemSummary
        """

        self._item = item

    @property
    def list(self):
        """Gets the list of this PageEntry.


        :return: The list of this PageEntry.
        :rtype: ItemList
        """
        return self._list

    @list.setter
    def list(self, list):
        """Sets the list of this PageEntry.


        :param list: The list of this PageEntry.
        :type list: ItemList
        """

        self._list = list

    @property
    def people(self):
        """Gets the people of this PageEntry.

        If 'type' is 'PeopleEntry' then this is the array of people to present.

        :return: The people of this PageEntry.
        :rtype: List[Person]
        """
        return self._people

    @people.setter
    def people(self, people):
        """Sets the people of this PageEntry.

        If 'type' is 'PeopleEntry' then this is the array of people to present.

        :param people: The people of this PageEntry.
        :type people: List[Person]
        """

        self._people = people

    @property
    def template(self):
        """Gets the template of this PageEntry.

        Template type used to present the content of the PageEntry.

        :return: The template of this PageEntry.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this PageEntry.

        Template type used to present the content of the PageEntry.

        :param template: The template of this PageEntry.
        :type template: str
        """
        if template is None:
            raise ValueError("Invalid value for `template`, must not be `None`")

        self._template = template

    @property
    def text(self):
        """Gets the text of this PageEntry.

        If 'type' is 'TextEntry' then this is the text to be represented.

        :return: The text of this PageEntry.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this PageEntry.

        If 'type' is 'TextEntry' then this is the text to be represented.

        :param text: The text of this PageEntry.
        :type text: str
        """

        self._text = text

    @property
    def title(self):
        """Gets the title of this PageEntry.

        The name of the Page Entry.

        :return: The title of this PageEntry.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PageEntry.

        The name of the Page Entry.

        :param title: The title of this PageEntry.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this PageEntry.

        The type of PageEntry. Used to help identify what type of content will be presented.

        :return: The type of this PageEntry.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PageEntry.

        The type of PageEntry. Used to help identify what type of content will be presented.

        :param type: The type of this PageEntry.
        :type type: str
        """
        allowed_values = ["ItemEntry", "ItemDetailEntry", "ListEntry", "ListDetailEntry", "UserEntry", "TextEntry", "ImageEntry", "CustomEntry", "PeopleEntry"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
