# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BtPlanListItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, cta_text: str=None, currency: str=None, description: str=None, ees07_plan_description: str=None, ees07_plan_title: str=None, ees07_title: str=None, header_text: str=None, hero_text: str=None, id: str=None, interval: str=None, interval_count: int=None, long_text: str=None, nickname: str=None, no_thanks_text: str=None, product: str=None, switching_text: str=None, terms_and_conditions_itunes: str=None, terms_and_conditions_stripe: str=None, trial_period_days: int=None):
        """BtPlanListItem - a model defined in OpenAPI

        :param amount: The amount of this BtPlanListItem.
        :param cta_text: The cta_text of this BtPlanListItem.
        :param currency: The currency of this BtPlanListItem.
        :param description: The description of this BtPlanListItem.
        :param ees07_plan_description: The ees07_plan_description of this BtPlanListItem.
        :param ees07_plan_title: The ees07_plan_title of this BtPlanListItem.
        :param ees07_title: The ees07_title of this BtPlanListItem.
        :param header_text: The header_text of this BtPlanListItem.
        :param hero_text: The hero_text of this BtPlanListItem.
        :param id: The id of this BtPlanListItem.
        :param interval: The interval of this BtPlanListItem.
        :param interval_count: The interval_count of this BtPlanListItem.
        :param long_text: The long_text of this BtPlanListItem.
        :param nickname: The nickname of this BtPlanListItem.
        :param no_thanks_text: The no_thanks_text of this BtPlanListItem.
        :param product: The product of this BtPlanListItem.
        :param switching_text: The switching_text of this BtPlanListItem.
        :param terms_and_conditions_itunes: The terms_and_conditions_itunes of this BtPlanListItem.
        :param terms_and_conditions_stripe: The terms_and_conditions_stripe of this BtPlanListItem.
        :param trial_period_days: The trial_period_days of this BtPlanListItem.
        """
        self.openapi_types = {
            'amount': float,
            'cta_text': str,
            'currency': str,
            'description': str,
            'ees07_plan_description': str,
            'ees07_plan_title': str,
            'ees07_title': str,
            'header_text': str,
            'hero_text': str,
            'id': str,
            'interval': str,
            'interval_count': int,
            'long_text': str,
            'nickname': str,
            'no_thanks_text': str,
            'product': str,
            'switching_text': str,
            'terms_and_conditions_itunes': str,
            'terms_and_conditions_stripe': str,
            'trial_period_days': int
        }

        self.attribute_map = {
            'amount': 'amount',
            'cta_text': 'ctaText',
            'currency': 'currency',
            'description': 'description',
            'ees07_plan_description': 'ees07PlanDescription',
            'ees07_plan_title': 'ees07PlanTitle',
            'ees07_title': 'ees07Title',
            'header_text': 'headerText',
            'hero_text': 'heroText',
            'id': 'id',
            'interval': 'interval',
            'interval_count': 'intervalCount',
            'long_text': 'longText',
            'nickname': 'nickname',
            'no_thanks_text': 'noThanksText',
            'product': 'product',
            'switching_text': 'switchingText',
            'terms_and_conditions_itunes': 'termsAndConditionsItunes',
            'terms_and_conditions_stripe': 'termsAndConditionsStripe',
            'trial_period_days': 'trialPeriodDays'
        }

        self._amount = amount
        self._cta_text = cta_text
        self._currency = currency
        self._description = description
        self._ees07_plan_description = ees07_plan_description
        self._ees07_plan_title = ees07_plan_title
        self._ees07_title = ees07_title
        self._header_text = header_text
        self._hero_text = hero_text
        self._id = id
        self._interval = interval
        self._interval_count = interval_count
        self._long_text = long_text
        self._nickname = nickname
        self._no_thanks_text = no_thanks_text
        self._product = product
        self._switching_text = switching_text
        self._terms_and_conditions_itunes = terms_and_conditions_itunes
        self._terms_and_conditions_stripe = terms_and_conditions_stripe
        self._trial_period_days = trial_period_days

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BtPlanListItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BtPlanListItem of this BtPlanListItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this BtPlanListItem.

        The price of a plan. If a free plan then undefined.

        :return: The amount of this BtPlanListItem.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this BtPlanListItem.

        The price of a plan. If a free plan then undefined.

        :param amount: The amount of this BtPlanListItem.
        :type amount: float
        """

        self._amount = amount

    @property
    def cta_text(self):
        """Gets the cta_text of this BtPlanListItem.

        The textual description.

        :return: The cta_text of this BtPlanListItem.
        :rtype: str
        """
        return self._cta_text

    @cta_text.setter
    def cta_text(self, cta_text):
        """Sets the cta_text of this BtPlanListItem.

        The textual description.

        :param cta_text: The cta_text of this BtPlanListItem.
        :type cta_text: str
        """
        if cta_text is None:
            raise ValueError("Invalid value for `cta_text`, must not be `None`")

        self._cta_text = cta_text

    @property
    def currency(self):
        """Gets the currency of this BtPlanListItem.

        The currency a plan is offered in.

        :return: The currency of this BtPlanListItem.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this BtPlanListItem.

        The currency a plan is offered in.

        :param currency: The currency of this BtPlanListItem.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def description(self):
        """Gets the description of this BtPlanListItem.

        The textual description.

        :return: The description of this BtPlanListItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BtPlanListItem.

        The textual description.

        :param description: The description of this BtPlanListItem.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def ees07_plan_description(self):
        """Gets the ees07_plan_description of this BtPlanListItem.


        :return: The ees07_plan_description of this BtPlanListItem.
        :rtype: str
        """
        return self._ees07_plan_description

    @ees07_plan_description.setter
    def ees07_plan_description(self, ees07_plan_description):
        """Sets the ees07_plan_description of this BtPlanListItem.


        :param ees07_plan_description: The ees07_plan_description of this BtPlanListItem.
        :type ees07_plan_description: str
        """

        self._ees07_plan_description = ees07_plan_description

    @property
    def ees07_plan_title(self):
        """Gets the ees07_plan_title of this BtPlanListItem.


        :return: The ees07_plan_title of this BtPlanListItem.
        :rtype: str
        """
        return self._ees07_plan_title

    @ees07_plan_title.setter
    def ees07_plan_title(self, ees07_plan_title):
        """Sets the ees07_plan_title of this BtPlanListItem.


        :param ees07_plan_title: The ees07_plan_title of this BtPlanListItem.
        :type ees07_plan_title: str
        """

        self._ees07_plan_title = ees07_plan_title

    @property
    def ees07_title(self):
        """Gets the ees07_title of this BtPlanListItem.


        :return: The ees07_title of this BtPlanListItem.
        :rtype: str
        """
        return self._ees07_title

    @ees07_title.setter
    def ees07_title(self, ees07_title):
        """Sets the ees07_title of this BtPlanListItem.


        :param ees07_title: The ees07_title of this BtPlanListItem.
        :type ees07_title: str
        """

        self._ees07_title = ees07_title

    @property
    def header_text(self):
        """Gets the header_text of this BtPlanListItem.

        The textual description.

        :return: The header_text of this BtPlanListItem.
        :rtype: str
        """
        return self._header_text

    @header_text.setter
    def header_text(self, header_text):
        """Sets the header_text of this BtPlanListItem.

        The textual description.

        :param header_text: The header_text of this BtPlanListItem.
        :type header_text: str
        """
        if header_text is None:
            raise ValueError("Invalid value for `header_text`, must not be `None`")

        self._header_text = header_text

    @property
    def hero_text(self):
        """Gets the hero_text of this BtPlanListItem.

        The textual description.

        :return: The hero_text of this BtPlanListItem.
        :rtype: str
        """
        return self._hero_text

    @hero_text.setter
    def hero_text(self, hero_text):
        """Sets the hero_text of this BtPlanListItem.

        The textual description.

        :param hero_text: The hero_text of this BtPlanListItem.
        :type hero_text: str
        """
        if hero_text is None:
            raise ValueError("Invalid value for `hero_text`, must not be `None`")

        self._hero_text = hero_text

    @property
    def id(self):
        """Gets the id of this BtPlanListItem.

        The identifier of a plan.

        :return: The id of this BtPlanListItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BtPlanListItem.

        The identifier of a plan.

        :param id: The id of this BtPlanListItem.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def interval(self):
        """Gets the interval of this BtPlanListItem.

        The type of billing period used.

        :return: The interval of this BtPlanListItem.
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this BtPlanListItem.

        The type of billing period used.

        :param interval: The interval of this BtPlanListItem.
        :type interval: str
        """
        allowed_values = ["day", "week", "month", "year", "none"]  # noqa: E501
        if interval not in allowed_values:
            raise ValueError(
                "Invalid value for `interval` ({0}), must be one of {1}"
                .format(interval, allowed_values)
            )

        self._interval = interval

    @property
    def interval_count(self):
        """Gets the interval_count of this BtPlanListItem.

        Given the `interval` this is how frequently it will run. e.g. every 2 weeks.

        :return: The interval_count of this BtPlanListItem.
        :rtype: int
        """
        return self._interval_count

    @interval_count.setter
    def interval_count(self, interval_count):
        """Sets the interval_count of this BtPlanListItem.

        Given the `interval` this is how frequently it will run. e.g. every 2 weeks.

        :param interval_count: The interval_count of this BtPlanListItem.
        :type interval_count: int
        """

        self._interval_count = interval_count

    @property
    def long_text(self):
        """Gets the long_text of this BtPlanListItem.

        The textual description.

        :return: The long_text of this BtPlanListItem.
        :rtype: str
        """
        return self._long_text

    @long_text.setter
    def long_text(self, long_text):
        """Sets the long_text of this BtPlanListItem.

        The textual description.

        :param long_text: The long_text of this BtPlanListItem.
        :type long_text: str
        """
        if long_text is None:
            raise ValueError("Invalid value for `long_text`, must not be `None`")

        self._long_text = long_text

    @property
    def nickname(self):
        """Gets the nickname of this BtPlanListItem.

        The title of a plan.

        :return: The nickname of this BtPlanListItem.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this BtPlanListItem.

        The title of a plan.

        :param nickname: The nickname of this BtPlanListItem.
        :type nickname: str
        """
        if nickname is None:
            raise ValueError("Invalid value for `nickname`, must not be `None`")

        self._nickname = nickname

    @property
    def no_thanks_text(self):
        """Gets the no_thanks_text of this BtPlanListItem.


        :return: The no_thanks_text of this BtPlanListItem.
        :rtype: str
        """
        return self._no_thanks_text

    @no_thanks_text.setter
    def no_thanks_text(self, no_thanks_text):
        """Sets the no_thanks_text of this BtPlanListItem.


        :param no_thanks_text: The no_thanks_text of this BtPlanListItem.
        :type no_thanks_text: str
        """

        self._no_thanks_text = no_thanks_text

    @property
    def product(self):
        """Gets the product of this BtPlanListItem.

        The product of a plan.

        :return: The product of this BtPlanListItem.
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this BtPlanListItem.

        The product of a plan.

        :param product: The product of this BtPlanListItem.
        :type product: str
        """
        if product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")

        self._product = product

    @property
    def switching_text(self):
        """Gets the switching_text of this BtPlanListItem.


        :return: The switching_text of this BtPlanListItem.
        :rtype: str
        """
        return self._switching_text

    @switching_text.setter
    def switching_text(self, switching_text):
        """Sets the switching_text of this BtPlanListItem.


        :param switching_text: The switching_text of this BtPlanListItem.
        :type switching_text: str
        """

        self._switching_text = switching_text

    @property
    def terms_and_conditions_itunes(self):
        """Gets the terms_and_conditions_itunes of this BtPlanListItem.


        :return: The terms_and_conditions_itunes of this BtPlanListItem.
        :rtype: str
        """
        return self._terms_and_conditions_itunes

    @terms_and_conditions_itunes.setter
    def terms_and_conditions_itunes(self, terms_and_conditions_itunes):
        """Sets the terms_and_conditions_itunes of this BtPlanListItem.


        :param terms_and_conditions_itunes: The terms_and_conditions_itunes of this BtPlanListItem.
        :type terms_and_conditions_itunes: str
        """

        self._terms_and_conditions_itunes = terms_and_conditions_itunes

    @property
    def terms_and_conditions_stripe(self):
        """Gets the terms_and_conditions_stripe of this BtPlanListItem.


        :return: The terms_and_conditions_stripe of this BtPlanListItem.
        :rtype: str
        """
        return self._terms_and_conditions_stripe

    @terms_and_conditions_stripe.setter
    def terms_and_conditions_stripe(self, terms_and_conditions_stripe):
        """Sets the terms_and_conditions_stripe of this BtPlanListItem.


        :param terms_and_conditions_stripe: The terms_and_conditions_stripe of this BtPlanListItem.
        :type terms_and_conditions_stripe: str
        """

        self._terms_and_conditions_stripe = terms_and_conditions_stripe

    @property
    def trial_period_days(self):
        """Gets the trial_period_days of this BtPlanListItem.

        How many days a trial period runs for a plan. Only valid if `hasTrialPeriod` is true.

        :return: The trial_period_days of this BtPlanListItem.
        :rtype: int
        """
        return self._trial_period_days

    @trial_period_days.setter
    def trial_period_days(self, trial_period_days):
        """Sets the trial_period_days of this BtPlanListItem.

        How many days a trial period runs for a plan. Only valid if `hasTrialPeriod` is true.

        :param trial_period_days: The trial_period_days of this BtPlanListItem.
        :type trial_period_days: int
        """
        if trial_period_days is None:
            raise ValueError("Invalid value for `trial_period_days`, must not be `None`")

        self._trial_period_days = trial_period_days
