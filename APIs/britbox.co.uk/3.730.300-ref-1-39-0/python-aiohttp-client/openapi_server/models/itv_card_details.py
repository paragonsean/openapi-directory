# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ItvCardDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_type: str=None, exp_month: int=None, exp_year: int=None, last4: str=None):
        """ItvCardDetails - a model defined in OpenAPI

        :param card_type: The card_type of this ItvCardDetails.
        :param exp_month: The exp_month of this ItvCardDetails.
        :param exp_year: The exp_year of this ItvCardDetails.
        :param last4: The last4 of this ItvCardDetails.
        """
        self.openapi_types = {
            'card_type': str,
            'exp_month': int,
            'exp_year': int,
            'last4': str
        }

        self.attribute_map = {
            'card_type': 'card_type',
            'exp_month': 'exp_month',
            'exp_year': 'exp_year',
            'last4': 'last4'
        }

        self._card_type = card_type
        self._exp_month = exp_month
        self._exp_year = exp_year
        self._last4 = last4

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItvCardDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItvCardDetails of this ItvCardDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_type(self):
        """Gets the card_type of this ItvCardDetails.

        The payment card type (Visa/Mastercard/etc).

        :return: The card_type of this ItvCardDetails.
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this ItvCardDetails.

        The payment card type (Visa/Mastercard/etc).

        :param card_type: The card_type of this ItvCardDetails.
        :type card_type: str
        """
        if card_type is None:
            raise ValueError("Invalid value for `card_type`, must not be `None`")

        self._card_type = card_type

    @property
    def exp_month(self):
        """Gets the exp_month of this ItvCardDetails.

        Expiry date month.

        :return: The exp_month of this ItvCardDetails.
        :rtype: int
        """
        return self._exp_month

    @exp_month.setter
    def exp_month(self, exp_month):
        """Sets the exp_month of this ItvCardDetails.

        Expiry date month.

        :param exp_month: The exp_month of this ItvCardDetails.
        :type exp_month: int
        """
        if exp_month is None:
            raise ValueError("Invalid value for `exp_month`, must not be `None`")

        self._exp_month = exp_month

    @property
    def exp_year(self):
        """Gets the exp_year of this ItvCardDetails.

        Expiry date year.

        :return: The exp_year of this ItvCardDetails.
        :rtype: int
        """
        return self._exp_year

    @exp_year.setter
    def exp_year(self, exp_year):
        """Sets the exp_year of this ItvCardDetails.

        Expiry date year.

        :param exp_year: The exp_year of this ItvCardDetails.
        :type exp_year: int
        """
        if exp_year is None:
            raise ValueError("Invalid value for `exp_year`, must not be `None`")

        self._exp_year = exp_year

    @property
    def last4(self):
        """Gets the last4 of this ItvCardDetails.

        The last 4 digit of card number.

        :return: The last4 of this ItvCardDetails.
        :rtype: str
        """
        return self._last4

    @last4.setter
    def last4(self, last4):
        """Sets the last4 of this ItvCardDetails.

        The last 4 digit of card number.

        :param last4: The last4 of this ItvCardDetails.
        :type last4: str
        """
        if last4 is None:
            raise ValueError("Invalid value for `last4`, must not be `None`")

        self._last4 = last4
