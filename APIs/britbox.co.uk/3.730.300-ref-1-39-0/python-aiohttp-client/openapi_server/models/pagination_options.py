# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PaginationOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, completed: bool=None, item_type: str=None, max_rating: str=None, order: str=None, order_by: str=None, page_size: int=None):
        """PaginationOptions - a model defined in OpenAPI

        :param completed: The completed of this PaginationOptions.
        :param item_type: The item_type of this PaginationOptions.
        :param max_rating: The max_rating of this PaginationOptions.
        :param order: The order of this PaginationOptions.
        :param order_by: The order_by of this PaginationOptions.
        :param page_size: The page_size of this PaginationOptions.
        """
        self.openapi_types = {
            'completed': bool,
            'item_type': str,
            'max_rating': str,
            'order': str,
            'order_by': str,
            'page_size': int
        }

        self.attribute_map = {
            'completed': 'completed',
            'item_type': 'itemType',
            'max_rating': 'maxRating',
            'order': 'order',
            'order_by': 'orderBy',
            'page_size': 'pageSize'
        }

        self._completed = completed
        self._item_type = item_type
        self._max_rating = max_rating
        self._order = order
        self._order_by = order_by
        self._page_size = page_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaginationOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaginationOptions of this PaginationOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def completed(self):
        """Gets the completed of this PaginationOptions.

        Items filtered by whether they've been fully watched or not.  Only available on the `/account/profile/watched/list` endpoint currently. 

        :return: The completed of this PaginationOptions.
        :rtype: bool
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this PaginationOptions.

        Items filtered by whether they've been fully watched or not.  Only available on the `/account/profile/watched/list` endpoint currently. 

        :param completed: The completed of this PaginationOptions.
        :type completed: bool
        """

        self._completed = completed

    @property
    def item_type(self):
        """Gets the item_type of this PaginationOptions.

        Specific item type filter.

        :return: The item_type of this PaginationOptions.
        :rtype: str
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """Sets the item_type of this PaginationOptions.

        Specific item type filter.

        :param item_type: The item_type of this PaginationOptions.
        :type item_type: str
        """
        allowed_values = ["movie", "show", "season", "episode", "program", "link", "trailer", "channel", "customAsset"]  # noqa: E501
        if item_type not in allowed_values:
            raise ValueError(
                "Invalid value for `item_type` ({0}), must be one of {1}"
                .format(item_type, allowed_values)
            )

        self._item_type = item_type

    @property
    def max_rating(self):
        """Gets the max_rating of this PaginationOptions.

        The maximum rating (inclusive) of items returned, e.g. 'AUOFLC-PG'.

        :return: The max_rating of this PaginationOptions.
        :rtype: str
        """
        return self._max_rating

    @max_rating.setter
    def max_rating(self, max_rating):
        """Sets the max_rating of this PaginationOptions.

        The maximum rating (inclusive) of items returned, e.g. 'AUOFLC-PG'.

        :param max_rating: The max_rating of this PaginationOptions.
        :type max_rating: str
        """

        self._max_rating = max_rating

    @property
    def order(self):
        """Gets the order of this PaginationOptions.

        The applied sort order if any.

        :return: The order of this PaginationOptions.
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this PaginationOptions.

        The applied sort order if any.

        :param order: The order of this PaginationOptions.
        :type order: str
        """
        allowed_values = ["asc", "desc"]  # noqa: E501
        if order not in allowed_values:
            raise ValueError(
                "Invalid value for `order` ({0}), must be one of {1}"
                .format(order, allowed_values)
            )

        self._order = order

    @property
    def order_by(self):
        """Gets the order_by of this PaginationOptions.

        The applied sort ordering property if any.

        :return: The order_by of this PaginationOptions.
        :rtype: str
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this PaginationOptions.

        The applied sort ordering property if any.

        :param order_by: The order_by of this PaginationOptions.
        :type order_by: str
        """
        allowed_values = ["a-z", "release-year", "date-added"]  # noqa: E501
        if order_by not in allowed_values:
            raise ValueError(
                "Invalid value for `order_by` ({0}), must be one of {1}"
                .format(order_by, allowed_values)
            )

        self._order_by = order_by

    @property
    def page_size(self):
        """Gets the page_size of this PaginationOptions.

        The number of items to return in a list page.

        :return: The page_size of this PaginationOptions.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this PaginationOptions.

        The number of items to return in a list page.

        :param page_size: The page_size of this PaginationOptions.
        :type page_size: int
        """

        self._page_size = page_size
