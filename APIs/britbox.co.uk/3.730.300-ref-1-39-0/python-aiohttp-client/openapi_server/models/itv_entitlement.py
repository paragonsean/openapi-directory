# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ItvEntitlement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_type: datetime=None, expiry: datetime=None, plan: object=None, source: str=None, subscription_id: str=None):
        """ItvEntitlement - a model defined in OpenAPI

        :param card_type: The card_type of this ItvEntitlement.
        :param expiry: The expiry of this ItvEntitlement.
        :param plan: The plan of this ItvEntitlement.
        :param source: The source of this ItvEntitlement.
        :param subscription_id: The subscription_id of this ItvEntitlement.
        """
        self.openapi_types = {
            'card_type': datetime,
            'expiry': datetime,
            'plan': object,
            'source': str,
            'subscription_id': str
        }

        self.attribute_map = {
            'card_type': 'card_type',
            'expiry': 'expiry',
            'plan': 'plan',
            'source': 'source',
            'subscription_id': 'subscriptionId'
        }

        self._card_type = card_type
        self._expiry = expiry
        self._plan = plan
        self._source = source
        self._subscription_id = subscription_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItvEntitlement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItvEntitlement of this ItvEntitlement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_type(self):
        """Gets the card_type of this ItvEntitlement.

        Start of subscription.

        :return: The card_type of this ItvEntitlement.
        :rtype: datetime
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this ItvEntitlement.

        Start of subscription.

        :param card_type: The card_type of this ItvEntitlement.
        :type card_type: datetime
        """

        self._card_type = card_type

    @property
    def expiry(self):
        """Gets the expiry of this ItvEntitlement.

        Expiry of subscription.

        :return: The expiry of this ItvEntitlement.
        :rtype: datetime
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this ItvEntitlement.

        Expiry of subscription.

        :param expiry: The expiry of this ItvEntitlement.
        :type expiry: datetime
        """
        if expiry is None:
            raise ValueError("Invalid value for `expiry`, must not be `None`")

        self._expiry = expiry

    @property
    def plan(self):
        """Gets the plan of this ItvEntitlement.

        Purchased plan data.

        :return: The plan of this ItvEntitlement.
        :rtype: object
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this ItvEntitlement.

        Purchased plan data.

        :param plan: The plan of this ItvEntitlement.
        :type plan: object
        """
        if plan is None:
            raise ValueError("Invalid value for `plan`, must not be `None`")

        self._plan = plan

    @property
    def source(self):
        """Gets the source of this ItvEntitlement.

        Source platform of purchase.

        :return: The source of this ItvEntitlement.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ItvEntitlement.

        Source platform of purchase.

        :param source: The source of this ItvEntitlement.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def subscription_id(self):
        """Gets the subscription_id of this ItvEntitlement.

        Id of subscription.

        :return: The subscription_id of this ItvEntitlement.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this ItvEntitlement.

        Id of subscription.

        :param subscription_id: The subscription_id of this ItvEntitlement.
        :type subscription_id: str
        """
        if subscription_id is None:
            raise ValueError("Invalid value for `subscription_id`, must not be `None`")

        self._subscription_id = subscription_id
