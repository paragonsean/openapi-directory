# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EeBtEligibility(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, eligible: bool=None, plan: str=None, source: str=None):
        """EeBtEligibility - a model defined in OpenAPI

        :param eligible: The eligible of this EeBtEligibility.
        :param plan: The plan of this EeBtEligibility.
        :param source: The source of this EeBtEligibility.
        """
        self.openapi_types = {
            'eligible': bool,
            'plan': str,
            'source': str
        }

        self.attribute_map = {
            'eligible': 'eligible',
            'plan': 'plan',
            'source': 'source'
        }

        self._eligible = eligible
        self._plan = plan
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EeBtEligibility':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EeBtEligibility of this EeBtEligibility.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def eligible(self):
        """Gets the eligible of this EeBtEligibility.

        Whether or not user is eligible

        :return: The eligible of this EeBtEligibility.
        :rtype: bool
        """
        return self._eligible

    @eligible.setter
    def eligible(self, eligible):
        """Sets the eligible of this EeBtEligibility.

        Whether or not user is eligible

        :param eligible: The eligible of this EeBtEligibility.
        :type eligible: bool
        """
        if eligible is None:
            raise ValueError("Invalid value for `eligible`, must not be `None`")

        self._eligible = eligible

    @property
    def plan(self):
        """Gets the plan of this EeBtEligibility.

        The identifier of a plan.

        :return: The plan of this EeBtEligibility.
        :rtype: str
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this EeBtEligibility.

        The identifier of a plan.

        :param plan: The plan of this EeBtEligibility.
        :type plan: str
        """

        self._plan = plan

    @property
    def source(self):
        """Gets the source of this EeBtEligibility.

        Stripe etc.

        :return: The source of this EeBtEligibility.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this EeBtEligibility.

        Stripe etc.

        :param source: The source of this EeBtEligibility.
        :type source: str
        """

        self._source = source
