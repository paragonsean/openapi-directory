# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pagination_auth import PaginationAuth
from openapi_server.models.pagination_options import PaginationOptions
from openapi_server import util


class Pagination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorization: PaginationAuth=None, next: str=None, options: PaginationOptions=None, page: int=None, previous: str=None, size: int=None, total: int=None):
        """Pagination - a model defined in OpenAPI

        :param authorization: The authorization of this Pagination.
        :param next: The next of this Pagination.
        :param options: The options of this Pagination.
        :param page: The page of this Pagination.
        :param previous: The previous of this Pagination.
        :param size: The size of this Pagination.
        :param total: The total of this Pagination.
        """
        self.openapi_types = {
            'authorization': PaginationAuth,
            'next': str,
            'options': PaginationOptions,
            'page': int,
            'previous': str,
            'size': int,
            'total': int
        }

        self.attribute_map = {
            'authorization': 'authorization',
            'next': 'next',
            'options': 'options',
            'page': 'page',
            'previous': 'previous',
            'size': 'size',
            'total': 'total'
        }

        self._authorization = authorization
        self._next = next
        self._options = options
        self._page = page
        self._previous = previous
        self._size = size
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Pagination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Pagination of this Pagination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorization(self):
        """Gets the authorization of this Pagination.


        :return: The authorization of this Pagination.
        :rtype: PaginationAuth
        """
        return self._authorization

    @authorization.setter
    def authorization(self, authorization):
        """Sets the authorization of this Pagination.


        :param authorization: The authorization of this Pagination.
        :type authorization: PaginationAuth
        """

        self._authorization = authorization

    @property
    def next(self):
        """Gets the next of this Pagination.

        Path to load next page of data, or null if not available

        :return: The next of this Pagination.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this Pagination.

        Path to load next page of data, or null if not available

        :param next: The next of this Pagination.
        :type next: str
        """

        self._next = next

    @property
    def options(self):
        """Gets the options of this Pagination.


        :return: The options of this Pagination.
        :rtype: PaginationOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this Pagination.


        :param options: The options of this Pagination.
        :type options: PaginationOptions
        """

        self._options = options

    @property
    def page(self):
        """Gets the page of this Pagination.

        The current page number.  A value of 0 indicates that the fist page has not yet been loaded. This is useful when wanting to return the paging metadata to indicate how to load in the first page. 

        :return: The page of this Pagination.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this Pagination.

        The current page number.  A value of 0 indicates that the fist page has not yet been loaded. This is useful when wanting to return the paging metadata to indicate how to load in the first page. 

        :param page: The page of this Pagination.
        :type page: int
        """
        if page is None:
            raise ValueError("Invalid value for `page`, must not be `None`")
        if page is not None and page < 0:
            raise ValueError("Invalid value for `page`, must be a value greater than or equal to `0`")

        self._page = page

    @property
    def previous(self):
        """Gets the previous of this Pagination.

        Path to load previous page of data, or null if not available.

        :return: The previous of this Pagination.
        :rtype: str
        """
        return self._previous

    @previous.setter
    def previous(self, previous):
        """Sets the previous of this Pagination.

        Path to load previous page of data, or null if not available.

        :param previous: The previous of this Pagination.
        :type previous: str
        """

        self._previous = previous

    @property
    def size(self):
        """Gets the size of this Pagination.

        The current page size.  A value of -1 indicates that the size has not yet been determined. This may arise when embedding secure list pagination info in a page which must be cached by a CDN. For example a Bookmarks list. 

        :return: The size of this Pagination.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Pagination.

        The current page size.  A value of -1 indicates that the size has not yet been determined. This may arise when embedding secure list pagination info in a page which must be cached by a CDN. For example a Bookmarks list. 

        :param size: The size of this Pagination.
        :type size: int
        """
        if size is not None and size < -1:
            raise ValueError("Invalid value for `size`, must be a value greater than or equal to `-1`")

        self._size = size

    @property
    def total(self):
        """Gets the total of this Pagination.

        The total number of pages available given the current page size.  A value of -1 indicates that the total has not yet been determined. This may arise when embedding secure list pagination info in a page which must be cached by a CDN. For example a Bookmarks list. 

        :return: The total of this Pagination.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Pagination.

        The total number of pages available given the current page size.  A value of -1 indicates that the total has not yet been determined. This may arise when embedding secure list pagination info in a page which must be cached by a CDN. For example a Bookmarks list. 

        :param total: The total of this Pagination.
        :type total: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")
        if total is not None and total < -1:
            raise ValueError("Invalid value for `total`, must be a value greater than or equal to `-1`")

        self._total = total
