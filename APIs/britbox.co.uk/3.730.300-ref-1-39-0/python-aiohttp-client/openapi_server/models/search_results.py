# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.item_list import ItemList
from openapi_server.models.person import Person
from openapi_server import util


class SearchResults(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, items: ItemList=None, movies: ItemList=None, other: ItemList=None, people: List[Person]=None, term: str=None, total: int=None, tv: ItemList=None):
        """SearchResults - a model defined in OpenAPI

        :param items: The items of this SearchResults.
        :param movies: The movies of this SearchResults.
        :param other: The other of this SearchResults.
        :param people: The people of this SearchResults.
        :param term: The term of this SearchResults.
        :param total: The total of this SearchResults.
        :param tv: The tv of this SearchResults.
        """
        self.openapi_types = {
            'items': ItemList,
            'movies': ItemList,
            'other': ItemList,
            'people': List[Person],
            'term': str,
            'total': int,
            'tv': ItemList
        }

        self.attribute_map = {
            'items': 'items',
            'movies': 'movies',
            'other': 'other',
            'people': 'people',
            'term': 'term',
            'total': 'total',
            'tv': 'tv'
        }

        self._items = items
        self._movies = movies
        self._other = other
        self._people = people
        self._term = term
        self._total = total
        self._tv = tv

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchResults of this SearchResults.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def items(self):
        """Gets the items of this SearchResults.


        :return: The items of this SearchResults.
        :rtype: ItemList
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this SearchResults.


        :param items: The items of this SearchResults.
        :type items: ItemList
        """

        self._items = items

    @property
    def movies(self):
        """Gets the movies of this SearchResults.


        :return: The movies of this SearchResults.
        :rtype: ItemList
        """
        return self._movies

    @movies.setter
    def movies(self, movies):
        """Sets the movies of this SearchResults.


        :param movies: The movies of this SearchResults.
        :type movies: ItemList
        """

        self._movies = movies

    @property
    def other(self):
        """Gets the other of this SearchResults.


        :return: The other of this SearchResults.
        :rtype: ItemList
        """
        return self._other

    @other.setter
    def other(self, other):
        """Sets the other of this SearchResults.


        :param other: The other of this SearchResults.
        :type other: ItemList
        """

        self._other = other

    @property
    def people(self):
        """Gets the people of this SearchResults.

        The list of people relevant to the search term.

        :return: The people of this SearchResults.
        :rtype: List[Person]
        """
        return self._people

    @people.setter
    def people(self, people):
        """Sets the people of this SearchResults.

        The list of people relevant to the search term.

        :param people: The people of this SearchResults.
        :type people: List[Person]
        """

        self._people = people

    @property
    def term(self):
        """Gets the term of this SearchResults.

        The search term.

        :return: The term of this SearchResults.
        :rtype: str
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this SearchResults.

        The search term.

        :param term: The term of this SearchResults.
        :type term: str
        """
        if term is None:
            raise ValueError("Invalid value for `term`, must not be `None`")

        self._term = term

    @property
    def total(self):
        """Gets the total of this SearchResults.

        The total number of results.

        :return: The total of this SearchResults.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this SearchResults.

        The total number of results.

        :param total: The total of this SearchResults.
        :type total: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")
        if total is not None and total < 0:
            raise ValueError("Invalid value for `total`, must be a value greater than or equal to `0`")

        self._total = total

    @property
    def tv(self):
        """Gets the tv of this SearchResults.


        :return: The tv of this SearchResults.
        :rtype: ItemList
        """
        return self._tv

    @tv.setter
    def tv(self, tv):
        """Sets the tv of this SearchResults.


        :param tv: The tv of this SearchResults.
        :type tv: ItemList
        """

        self._tv = tv
