# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nav_content import NavContent
from openapi_server import util


class NavEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, children: List[NavEntry]=None, content: NavContent=None, custom_fields: Dict[str, object]=None, depth: int=None, featured: bool=None, icon: str=None, label: str=None, path: str=None):
        """NavEntry - a model defined in OpenAPI

        :param children: The children of this NavEntry.
        :param content: The content of this NavEntry.
        :param custom_fields: The custom_fields of this NavEntry.
        :param depth: The depth of this NavEntry.
        :param featured: The featured of this NavEntry.
        :param icon: The icon of this NavEntry.
        :param label: The label of this NavEntry.
        :param path: The path of this NavEntry.
        """
        self.openapi_types = {
            'children': List[NavEntry],
            'content': NavContent,
            'custom_fields': Dict[str, object],
            'depth': int,
            'featured': bool,
            'icon': str,
            'label': str,
            'path': str
        }

        self.attribute_map = {
            'children': 'children',
            'content': 'content',
            'custom_fields': 'customFields',
            'depth': 'depth',
            'featured': 'featured',
            'icon': 'icon',
            'label': 'label',
            'path': 'path'
        }

        self._children = children
        self._content = content
        self._custom_fields = custom_fields
        self._depth = depth
        self._featured = featured
        self._icon = icon
        self._label = label
        self._path = path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NavEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NavEntry of this NavEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def children(self):
        """Gets the children of this NavEntry.

        Child nav entries.

        :return: The children of this NavEntry.
        :rtype: List[NavEntry]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this NavEntry.

        Child nav entries.

        :param children: The children of this NavEntry.
        :type children: List[NavEntry]
        """

        self._children = children

    @property
    def content(self):
        """Gets the content of this NavEntry.


        :return: The content of this NavEntry.
        :rtype: NavContent
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this NavEntry.


        :param content: The content of this NavEntry.
        :type content: NavContent
        """

        self._content = content

    @property
    def custom_fields(self):
        """Gets the custom_fields of this NavEntry.

        A map of custom fields defined by a curator for a nav entry.

        :return: The custom_fields of this NavEntry.
        :rtype: Dict[str, object]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this NavEntry.

        A map of custom fields defined by a curator for a nav entry.

        :param custom_fields: The custom_fields of this NavEntry.
        :type custom_fields: Dict[str, object]
        """

        self._custom_fields = custom_fields

    @property
    def depth(self):
        """Gets the depth of this NavEntry.

        The depth of the NavEntry (top level is 0)

        :return: The depth of this NavEntry.
        :rtype: int
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this NavEntry.

        The depth of the NavEntry (top level is 0)

        :param depth: The depth of this NavEntry.
        :type depth: int
        """
        if depth is None:
            raise ValueError("Invalid value for `depth`, must not be `None`")
        if depth is not None and depth < 0:
            raise ValueError("Invalid value for `depth`, must be a value greater than or equal to `0`")

        self._depth = depth

    @property
    def featured(self):
        """Gets the featured of this NavEntry.

        True if this is a featured menu item.  Featured menu items may have a more prominent presentation than others in the navigation. 

        :return: The featured of this NavEntry.
        :rtype: bool
        """
        return self._featured

    @featured.setter
    def featured(self, featured):
        """Sets the featured of this NavEntry.

        True if this is a featured menu item.  Featured menu items may have a more prominent presentation than others in the navigation. 

        :param featured: The featured of this NavEntry.
        :type featured: bool
        """

        self._featured = featured

    @property
    def icon(self):
        """Gets the icon of this NavEntry.

        The icon for this nav entry.

        :return: The icon of this NavEntry.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this NavEntry.

        The icon for this nav entry.

        :param icon: The icon of this NavEntry.
        :type icon: str
        """

        self._icon = icon

    @property
    def label(self):
        """Gets the label of this NavEntry.

        The text label for this nav entry.

        :return: The label of this NavEntry.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this NavEntry.

        The text label for this nav entry.

        :param label: The label of this NavEntry.
        :type label: str
        """

        self._label = label

    @property
    def path(self):
        """Gets the path of this NavEntry.

        The path this nav entry links to. May be undefined if the nav entry is not clickable e.g. a nav heading. If the value begins with `http` then it's an external url. 

        :return: The path of this NavEntry.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this NavEntry.

        The path this nav entry links to. May be undefined if the nav entry is not clickable e.g. a nav heading. If the value begins with `http` then it's an external url. 

        :param path: The path of this NavEntry.
        :type path: str
        """

        self._path = path
