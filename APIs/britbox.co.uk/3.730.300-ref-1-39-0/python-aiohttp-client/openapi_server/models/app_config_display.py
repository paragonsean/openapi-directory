# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.theme import Theme
from openapi_server import util


class AppConfigDisplay(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, themes: List[Theme]=None):
        """AppConfigDisplay - a model defined in OpenAPI

        :param themes: The themes of this AppConfigDisplay.
        """
        self.openapi_types = {
            'themes': List[Theme]
        }

        self.attribute_map = {
            'themes': 'themes'
        }

        self._themes = themes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppConfigDisplay':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppConfigDisplay of this AppConfigDisplay.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def themes(self):
        """Gets the themes of this AppConfigDisplay.

        An array of globally configured themes.

        :return: The themes of this AppConfigDisplay.
        :rtype: List[Theme]
        """
        return self._themes

    @themes.setter
    def themes(self, themes):
        """Sets the themes of this AppConfigDisplay.

        An array of globally configured themes.

        :param themes: The themes of this AppConfigDisplay.
        :type themes: List[Theme]
        """
        if themes is None:
            raise ValueError("Invalid value for `themes`, must not be `None`")

        self._themes = themes
