# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.theme_color import ThemeColor
from openapi_server import util


class Theme(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, colors: List[ThemeColor]=None, type: str=None):
        """Theme - a model defined in OpenAPI

        :param colors: The colors of this Theme.
        :param type: The type of this Theme.
        """
        self.openapi_types = {
            'colors': List[ThemeColor],
            'type': str
        }

        self.attribute_map = {
            'colors': 'colors',
            'type': 'type'
        }

        self._colors = colors
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Theme':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Theme of this Theme.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def colors(self):
        """Gets the colors of this Theme.

        The list of colors defined for the theme.

        :return: The colors of this Theme.
        :rtype: List[ThemeColor]
        """
        return self._colors

    @colors.setter
    def colors(self, colors):
        """Sets the colors of this Theme.

        The list of colors defined for the theme.

        :param colors: The colors of this Theme.
        :type colors: List[ThemeColor]
        """
        if colors is None:
            raise ValueError("Invalid value for `colors`, must not be `None`")

        self._colors = colors

    @property
    def type(self):
        """Gets the type of this Theme.

        The type of theme.

        :return: The type of this Theme.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Theme.

        The type of theme.

        :param type: The type of this Theme.
        :type type: str
        """
        allowed_values = ["Background", "Text", "Custom"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
