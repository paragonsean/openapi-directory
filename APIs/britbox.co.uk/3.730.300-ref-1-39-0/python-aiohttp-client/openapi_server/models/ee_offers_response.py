# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ee_offer_item import EeOfferItem
from openapi_server import util


class EeOffersResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, eligible_offers: List[EeOfferItem]=None):
        """EeOffersResponse - a model defined in OpenAPI

        :param eligible_offers: The eligible_offers of this EeOffersResponse.
        """
        self.openapi_types = {
            'eligible_offers': List[EeOfferItem]
        }

        self.attribute_map = {
            'eligible_offers': 'eligibleOffers'
        }

        self._eligible_offers = eligible_offers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EeOffersResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EeOffersResponse of this EeOffersResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def eligible_offers(self):
        """Gets the eligible_offers of this EeOffersResponse.

        The list of eligible offers.

        :return: The eligible_offers of this EeOffersResponse.
        :rtype: List[EeOfferItem]
        """
        return self._eligible_offers

    @eligible_offers.setter
    def eligible_offers(self, eligible_offers):
        """Sets the eligible_offers of this EeOffersResponse.

        The list of eligible offers.

        :param eligible_offers: The eligible_offers of this EeOffersResponse.
        :type eligible_offers: List[EeOfferItem]
        """
        if eligible_offers is None:
            raise ValueError("Invalid value for `eligible_offers`, must not be `None`")

        self._eligible_offers = eligible_offers
