# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceRegistrationWindow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_date: datetime=None, limit: int=None, period_days: int=None, remaining: int=None, start_date: datetime=None):
        """DeviceRegistrationWindow - a model defined in OpenAPI

        :param end_date: The end_date of this DeviceRegistrationWindow.
        :param limit: The limit of this DeviceRegistrationWindow.
        :param period_days: The period_days of this DeviceRegistrationWindow.
        :param remaining: The remaining of this DeviceRegistrationWindow.
        :param start_date: The start_date of this DeviceRegistrationWindow.
        """
        self.openapi_types = {
            'end_date': datetime,
            'limit': int,
            'period_days': int,
            'remaining': int,
            'start_date': datetime
        }

        self.attribute_map = {
            'end_date': 'endDate',
            'limit': 'limit',
            'period_days': 'periodDays',
            'remaining': 'remaining',
            'start_date': 'startDate'
        }

        self._end_date = end_date
        self._limit = limit
        self._period_days = period_days
        self._remaining = remaining
        self._start_date = start_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceRegistrationWindow':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceRegistrationWindow of this DeviceRegistrationWindow.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_date(self):
        """Gets the end_date of this DeviceRegistrationWindow.

        The end date of the current period.  This is based on the value of `startDate` plus the number of days defined by  `periodDays`. 

        :return: The end_date of this DeviceRegistrationWindow.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this DeviceRegistrationWindow.

        The end date of the current period.  This is based on the value of `startDate` plus the number of days defined by  `periodDays`. 

        :param end_date: The end_date of this DeviceRegistrationWindow.
        :type end_date: datetime
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")

        self._end_date = end_date

    @property
    def limit(self):
        """Gets the limit of this DeviceRegistrationWindow.

        The maximum de/registrations that can be made in a period.

        :return: The limit of this DeviceRegistrationWindow.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this DeviceRegistrationWindow.

        The maximum de/registrations that can be made in a period.

        :param limit: The limit of this DeviceRegistrationWindow.
        :type limit: int
        """
        if limit is None:
            raise ValueError("Invalid value for `limit`, must not be `None`")

        self._limit = limit

    @property
    def period_days(self):
        """Gets the period_days of this DeviceRegistrationWindow.

        The number of days a de/registration period runs for.

        :return: The period_days of this DeviceRegistrationWindow.
        :rtype: int
        """
        return self._period_days

    @period_days.setter
    def period_days(self, period_days):
        """Sets the period_days of this DeviceRegistrationWindow.

        The number of days a de/registration period runs for.

        :param period_days: The period_days of this DeviceRegistrationWindow.
        :type period_days: int
        """
        if period_days is None:
            raise ValueError("Invalid value for `period_days`, must not be `None`")

        self._period_days = period_days

    @property
    def remaining(self):
        """Gets the remaining of this DeviceRegistrationWindow.

        The remaining de/registrations that can be made in the current period.

        :return: The remaining of this DeviceRegistrationWindow.
        :rtype: int
        """
        return self._remaining

    @remaining.setter
    def remaining(self, remaining):
        """Sets the remaining of this DeviceRegistrationWindow.

        The remaining de/registrations that can be made in the current period.

        :param remaining: The remaining of this DeviceRegistrationWindow.
        :type remaining: int
        """
        if remaining is None:
            raise ValueError("Invalid value for `remaining`, must not be `None`")

        self._remaining = remaining

    @property
    def start_date(self):
        """Gets the start_date of this DeviceRegistrationWindow.

        The start date of the current period.  This is based on the earliest device de/registrations in the past N days, where N is defined by `periodDays`.  If no device has been de/registered then start date will be from the current date. 

        :return: The start_date of this DeviceRegistrationWindow.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this DeviceRegistrationWindow.

        The start date of the current period.  This is based on the earliest device de/registrations in the past N days, where N is defined by `periodDays`.  If no device has been de/registered then start date will be from the current date. 

        :param start_date: The start_date of this DeviceRegistrationWindow.
        :type start_date: datetime
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")

        self._start_date = start_date
