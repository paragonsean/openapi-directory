# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProfileUpdateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hero_autoplay: bool=None, hero_with_audio: bool=None, language_code: str=None, name: str=None, pin_enabled: bool=None, purchase_enabled: bool=None, segments: List[str]=None):
        """ProfileUpdateRequest - a model defined in OpenAPI

        :param hero_autoplay: The hero_autoplay of this ProfileUpdateRequest.
        :param hero_with_audio: The hero_with_audio of this ProfileUpdateRequest.
        :param language_code: The language_code of this ProfileUpdateRequest.
        :param name: The name of this ProfileUpdateRequest.
        :param pin_enabled: The pin_enabled of this ProfileUpdateRequest.
        :param purchase_enabled: The purchase_enabled of this ProfileUpdateRequest.
        :param segments: The segments of this ProfileUpdateRequest.
        """
        self.openapi_types = {
            'hero_autoplay': bool,
            'hero_with_audio': bool,
            'language_code': str,
            'name': str,
            'pin_enabled': bool,
            'purchase_enabled': bool,
            'segments': List[str]
        }

        self.attribute_map = {
            'hero_autoplay': 'heroAutoplay',
            'hero_with_audio': 'heroWithAudio',
            'language_code': 'languageCode',
            'name': 'name',
            'pin_enabled': 'pinEnabled',
            'purchase_enabled': 'purchaseEnabled',
            'segments': 'segments'
        }

        self._hero_autoplay = hero_autoplay
        self._hero_with_audio = hero_with_audio
        self._language_code = language_code
        self._name = name
        self._pin_enabled = pin_enabled
        self._purchase_enabled = purchase_enabled
        self._segments = segments

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProfileUpdateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProfileUpdateRequest of this ProfileUpdateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hero_autoplay(self):
        """Gets the hero_autoplay of this ProfileUpdateRequest.

        Sets the Hero row clip auto playback enabled

        :return: The hero_autoplay of this ProfileUpdateRequest.
        :rtype: bool
        """
        return self._hero_autoplay

    @hero_autoplay.setter
    def hero_autoplay(self, hero_autoplay):
        """Sets the hero_autoplay of this ProfileUpdateRequest.

        Sets the Hero row clip auto playback enabled

        :param hero_autoplay: The hero_autoplay of this ProfileUpdateRequest.
        :type hero_autoplay: bool
        """

        self._hero_autoplay = hero_autoplay

    @property
    def hero_with_audio(self):
        """Gets the hero_with_audio of this ProfileUpdateRequest.

        Sets the Hero row clip auto playback audio enabled

        :return: The hero_with_audio of this ProfileUpdateRequest.
        :rtype: bool
        """
        return self._hero_with_audio

    @hero_with_audio.setter
    def hero_with_audio(self, hero_with_audio):
        """Sets the hero_with_audio of this ProfileUpdateRequest.

        Sets the Hero row clip auto playback audio enabled

        :param hero_with_audio: The hero_with_audio of this ProfileUpdateRequest.
        :type hero_with_audio: bool
        """

        self._hero_with_audio = hero_with_audio

    @property
    def language_code(self):
        """Gets the language_code of this ProfileUpdateRequest.

        The code of the preferred language for the profile. Must be a valid ISO language code e.g. \"en-US\" and must match the code of one of the languages specified in the app config. See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 

        :return: The language_code of this ProfileUpdateRequest.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this ProfileUpdateRequest.

        The code of the preferred language for the profile. Must be a valid ISO language code e.g. \"en-US\" and must match the code of one of the languages specified in the app config. See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 

        :param language_code: The language_code of this ProfileUpdateRequest.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def name(self):
        """Gets the name of this ProfileUpdateRequest.

        The unique name of the profile.

        :return: The name of this ProfileUpdateRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProfileUpdateRequest.

        The unique name of the profile.

        :param name: The name of this ProfileUpdateRequest.
        :type name: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def pin_enabled(self):
        """Gets the pin_enabled of this ProfileUpdateRequest.

        Whether an account pin is required to enter the profile.  If no account pin is defined this has no impact. 

        :return: The pin_enabled of this ProfileUpdateRequest.
        :rtype: bool
        """
        return self._pin_enabled

    @pin_enabled.setter
    def pin_enabled(self, pin_enabled):
        """Sets the pin_enabled of this ProfileUpdateRequest.

        Whether an account pin is required to enter the profile.  If no account pin is defined this has no impact. 

        :param pin_enabled: The pin_enabled of this ProfileUpdateRequest.
        :type pin_enabled: bool
        """

        self._pin_enabled = pin_enabled

    @property
    def purchase_enabled(self):
        """Gets the purchase_enabled of this ProfileUpdateRequest.

        Whether the profile can make purchases with the account payment options.

        :return: The purchase_enabled of this ProfileUpdateRequest.
        :rtype: bool
        """
        return self._purchase_enabled

    @purchase_enabled.setter
    def purchase_enabled(self, purchase_enabled):
        """Sets the purchase_enabled of this ProfileUpdateRequest.

        Whether the profile can make purchases with the account payment options.

        :param purchase_enabled: The purchase_enabled of this ProfileUpdateRequest.
        :type purchase_enabled: bool
        """

        self._purchase_enabled = purchase_enabled

    @property
    def segments(self):
        """Gets the segments of this ProfileUpdateRequest.

        The segments a profile should be placed under

        :return: The segments of this ProfileUpdateRequest.
        :rtype: List[str]
        """
        return self._segments

    @segments.setter
    def segments(self, segments):
        """Sets the segments of this ProfileUpdateRequest.

        The segments a profile should be placed under

        :param segments: The segments of this ProfileUpdateRequest.
        :type segments: List[str]
        """

        self._segments = segments
