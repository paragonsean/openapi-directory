# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExclusionRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, device: str=None, exclude_airplay: bool=None, exclude_chromecast: bool=None, exclude_delivery: str=None, exclude_min_resolution: str=None):
        """ExclusionRule - a model defined in OpenAPI

        :param description: The description of this ExclusionRule.
        :param device: The device of this ExclusionRule.
        :param exclude_airplay: The exclude_airplay of this ExclusionRule.
        :param exclude_chromecast: The exclude_chromecast of this ExclusionRule.
        :param exclude_delivery: The exclude_delivery of this ExclusionRule.
        :param exclude_min_resolution: The exclude_min_resolution of this ExclusionRule.
        """
        self.openapi_types = {
            'description': str,
            'device': str,
            'exclude_airplay': bool,
            'exclude_chromecast': bool,
            'exclude_delivery': str,
            'exclude_min_resolution': str
        }

        self.attribute_map = {
            'description': 'description',
            'device': 'device',
            'exclude_airplay': 'excludeAirplay',
            'exclude_chromecast': 'excludeChromecast',
            'exclude_delivery': 'excludeDelivery',
            'exclude_min_resolution': 'excludeMinResolution'
        }

        self._description = description
        self._device = device
        self._exclude_airplay = exclude_airplay
        self._exclude_chromecast = exclude_chromecast
        self._exclude_delivery = exclude_delivery
        self._exclude_min_resolution = exclude_min_resolution

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExclusionRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExclusionRule of this ExclusionRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ExclusionRule.


        :return: The description of this ExclusionRule.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ExclusionRule.


        :param description: The description of this ExclusionRule.
        :type description: str
        """

        self._description = description

    @property
    def device(self):
        """Gets the device of this ExclusionRule.

        The device type that the exclusion rules apply to.

        :return: The device of this ExclusionRule.
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this ExclusionRule.

        The device type that the exclusion rules apply to.

        :param device: The device of this ExclusionRule.
        :type device: str
        """

        self._device = device

    @property
    def exclude_airplay(self):
        """Gets the exclude_airplay of this ExclusionRule.

        Prevent airplay from an apple device.

        :return: The exclude_airplay of this ExclusionRule.
        :rtype: bool
        """
        return self._exclude_airplay

    @exclude_airplay.setter
    def exclude_airplay(self, exclude_airplay):
        """Sets the exclude_airplay of this ExclusionRule.

        Prevent airplay from an apple device.

        :param exclude_airplay: The exclude_airplay of this ExclusionRule.
        :type exclude_airplay: bool
        """

        self._exclude_airplay = exclude_airplay

    @property
    def exclude_chromecast(self):
        """Gets the exclude_chromecast of this ExclusionRule.

        Prevent chromecasting.

        :return: The exclude_chromecast of this ExclusionRule.
        :rtype: bool
        """
        return self._exclude_chromecast

    @exclude_chromecast.setter
    def exclude_chromecast(self, exclude_chromecast):
        """Sets the exclude_chromecast of this ExclusionRule.

        Prevent chromecasting.

        :param exclude_chromecast: The exclude_chromecast of this ExclusionRule.
        :type exclude_chromecast: bool
        """

        self._exclude_chromecast = exclude_chromecast

    @property
    def exclude_delivery(self):
        """Gets the exclude_delivery of this ExclusionRule.


        :return: The exclude_delivery of this ExclusionRule.
        :rtype: str
        """
        return self._exclude_delivery

    @exclude_delivery.setter
    def exclude_delivery(self, exclude_delivery):
        """Sets the exclude_delivery of this ExclusionRule.


        :param exclude_delivery: The exclude_delivery of this ExclusionRule.
        :type exclude_delivery: str
        """
        allowed_values = ["Stream", "Download", "StreamOrDownload", "ProgressiveDownload", "None"]  # noqa: E501
        if exclude_delivery not in allowed_values:
            raise ValueError(
                "Invalid value for `exclude_delivery` ({0}), must be one of {1}"
                .format(exclude_delivery, allowed_values)
            )

        self._exclude_delivery = exclude_delivery

    @property
    def exclude_min_resolution(self):
        """Gets the exclude_min_resolution of this ExclusionRule.


        :return: The exclude_min_resolution of this ExclusionRule.
        :rtype: str
        """
        return self._exclude_min_resolution

    @exclude_min_resolution.setter
    def exclude_min_resolution(self, exclude_min_resolution):
        """Sets the exclude_min_resolution of this ExclusionRule.


        :param exclude_min_resolution: The exclude_min_resolution of this ExclusionRule.
        :type exclude_min_resolution: str
        """
        allowed_values = ["SD", "HD-720", "HD-1080", "HD-4K", "External", "Unknown"]  # noqa: E501
        if exclude_min_resolution not in allowed_values:
            raise ValueError(
                "Invalid value for `exclude_min_resolution` ({0}), must be one of {1}"
                .format(exclude_min_resolution, allowed_values)
            )

        self._exclude_min_resolution = exclude_min_resolution
