# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Language(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, label: str=None, title: str=None):
        """Language - a model defined in OpenAPI

        :param code: The code of this Language.
        :param label: The label of this Language.
        :param title: The title of this Language.
        """
        self.openapi_types = {
            'code': str,
            'label': str,
            'title': str
        }

        self.attribute_map = {
            'code': 'code',
            'label': 'label',
            'title': 'title'
        }

        self._code = code
        self._label = label
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Language':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Language of this Language.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Language.

        The ISO language code of the language e.g. \"en-US\". See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 

        :return: The code of this Language.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Language.

        The ISO language code of the language e.g. \"en-US\". See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 

        :param code: The code of this Language.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def label(self):
        """Gets the label of this Language.

        Display label for the language.

        :return: The label of this Language.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Language.

        Display label for the language.

        :param label: The label of this Language.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def title(self):
        """Gets the title of this Language.

        Display title for the language.

        :return: The title of this Language.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Language.

        Display title for the language.

        :param title: The title of this Language.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
