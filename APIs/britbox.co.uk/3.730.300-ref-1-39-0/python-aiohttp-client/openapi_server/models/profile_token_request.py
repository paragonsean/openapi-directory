# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProfileTokenRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cookie_type: str=None, pin: str=None, profile_id: str=None, scopes: List[str]=None):
        """ProfileTokenRequest - a model defined in OpenAPI

        :param cookie_type: The cookie_type of this ProfileTokenRequest.
        :param pin: The pin of this ProfileTokenRequest.
        :param profile_id: The profile_id of this ProfileTokenRequest.
        :param scopes: The scopes of this ProfileTokenRequest.
        """
        self.openapi_types = {
            'cookie_type': str,
            'pin': str,
            'profile_id': str,
            'scopes': List[str]
        }

        self.attribute_map = {
            'cookie_type': 'cookieType',
            'pin': 'pin',
            'profile_id': 'profileId',
            'scopes': 'scopes'
        }

        self._cookie_type = cookie_type
        self._pin = pin
        self._profile_id = profile_id
        self._scopes = scopes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProfileTokenRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProfileTokenRequest of this ProfileTokenRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cookie_type(self):
        """Gets the cookie_type of this ProfileTokenRequest.

        If you specify a cookie type then a content filter cookie will be returned along with the token(s). This is only intended for web based clients which need to pass the cookies to a server to render a page based on the user's content filters e.g subscription code.  If type `Session` the cookie will be session based. If type `Persistent` the cookie will have a medium term lifespan. If undefined no cookies will be set. 

        :return: The cookie_type of this ProfileTokenRequest.
        :rtype: str
        """
        return self._cookie_type

    @cookie_type.setter
    def cookie_type(self, cookie_type):
        """Sets the cookie_type of this ProfileTokenRequest.

        If you specify a cookie type then a content filter cookie will be returned along with the token(s). This is only intended for web based clients which need to pass the cookies to a server to render a page based on the user's content filters e.g subscription code.  If type `Session` the cookie will be session based. If type `Persistent` the cookie will have a medium term lifespan. If undefined no cookies will be set. 

        :param cookie_type: The cookie_type of this ProfileTokenRequest.
        :type cookie_type: str
        """
        allowed_values = ["Session", "Persistent"]  # noqa: E501
        if cookie_type not in allowed_values:
            raise ValueError(
                "Invalid value for `cookie_type` ({0}), must be one of {1}"
                .format(cookie_type, allowed_values)
            )

        self._cookie_type = cookie_type

    @property
    def pin(self):
        """Gets the pin of this ProfileTokenRequest.

        The pin associated with this profile, if any.

        :return: The pin of this ProfileTokenRequest.
        :rtype: str
        """
        return self._pin

    @pin.setter
    def pin(self, pin):
        """Sets the pin of this ProfileTokenRequest.

        The pin associated with this profile, if any.

        :param pin: The pin of this ProfileTokenRequest.
        :type pin: str
        """

        self._pin = pin

    @property
    def profile_id(self):
        """Gets the profile_id of this ProfileTokenRequest.

        The id of the profile the token should grant access rights to.

        :return: The profile_id of this ProfileTokenRequest.
        :rtype: str
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this ProfileTokenRequest.

        The id of the profile the token should grant access rights to.

        :param profile_id: The profile_id of this ProfileTokenRequest.
        :type profile_id: str
        """
        if profile_id is None:
            raise ValueError("Invalid value for `profile_id`, must not be `None`")

        self._profile_id = profile_id

    @property
    def scopes(self):
        """Gets the scopes of this ProfileTokenRequest.

        The scope(s) of the token(s) required.

        :return: The scopes of this ProfileTokenRequest.
        :rtype: List[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this ProfileTokenRequest.

        The scope(s) of the token(s) required.

        :param scopes: The scopes of this ProfileTokenRequest.
        :type scopes: List[str]
        """
        allowed_values = ["Catalog", "Commerce", "Settings"]  # noqa: E501
        if not set(scopes).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `scopes` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(scopes) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._scopes = scopes
