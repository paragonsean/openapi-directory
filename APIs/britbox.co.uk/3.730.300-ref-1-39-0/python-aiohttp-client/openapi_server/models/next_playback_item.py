# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.item_detail import ItemDetail
from openapi_server import util


class NextPlaybackItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, first_watched_date: datetime=None, last_watched_date: datetime=None, next: ItemDetail=None, source_item_id: str=None, suggestion_type: str=None):
        """NextPlaybackItem - a model defined in OpenAPI

        :param first_watched_date: The first_watched_date of this NextPlaybackItem.
        :param last_watched_date: The last_watched_date of this NextPlaybackItem.
        :param next: The next of this NextPlaybackItem.
        :param source_item_id: The source_item_id of this NextPlaybackItem.
        :param suggestion_type: The suggestion_type of this NextPlaybackItem.
        """
        self.openapi_types = {
            'first_watched_date': datetime,
            'last_watched_date': datetime,
            'next': ItemDetail,
            'source_item_id': str,
            'suggestion_type': str
        }

        self.attribute_map = {
            'first_watched_date': 'firstWatchedDate',
            'last_watched_date': 'lastWatchedDate',
            'next': 'next',
            'source_item_id': 'sourceItemId',
            'suggestion_type': 'suggestionType'
        }

        self._first_watched_date = first_watched_date
        self._last_watched_date = last_watched_date
        self._next = next
        self._source_item_id = source_item_id
        self._suggestion_type = suggestion_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NextPlaybackItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NextPlaybackItem of this NextPlaybackItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first_watched_date(self):
        """Gets the first_watched_date of this NextPlaybackItem.

        Time when the item corresponding to the itemId passed in by the client was first watched by the user. Will be `undefined` if the user has never watched the item.  It can be used to identify the scenario where the user has never watched a show and we are suggesting they watch the first episode (i.e. it is missing in this scenario)  **This will only be populated when a `showId` is passed in** 

        :return: The first_watched_date of this NextPlaybackItem.
        :rtype: datetime
        """
        return self._first_watched_date

    @first_watched_date.setter
    def first_watched_date(self, first_watched_date):
        """Sets the first_watched_date of this NextPlaybackItem.

        Time when the item corresponding to the itemId passed in by the client was first watched by the user. Will be `undefined` if the user has never watched the item.  It can be used to identify the scenario where the user has never watched a show and we are suggesting they watch the first episode (i.e. it is missing in this scenario)  **This will only be populated when a `showId` is passed in** 

        :param first_watched_date: The first_watched_date of this NextPlaybackItem.
        :type first_watched_date: datetime
        """

        self._first_watched_date = first_watched_date

    @property
    def last_watched_date(self):
        """Gets the last_watched_date of this NextPlaybackItem.

        Time when the item corresponding to the itemId passed in by the client was last watched by the user. Will be `undefined` if the user has never watched the item.  It can be used to identify the scenario where the user has never watched a show and we are suggesting they watch the first episode (i.e. it is missing in this scenario)  **This will only be populated when a `showId` is passed in** 

        :return: The last_watched_date of this NextPlaybackItem.
        :rtype: datetime
        """
        return self._last_watched_date

    @last_watched_date.setter
    def last_watched_date(self, last_watched_date):
        """Sets the last_watched_date of this NextPlaybackItem.

        Time when the item corresponding to the itemId passed in by the client was last watched by the user. Will be `undefined` if the user has never watched the item.  It can be used to identify the scenario where the user has never watched a show and we are suggesting they watch the first episode (i.e. it is missing in this scenario)  **This will only be populated when a `showId` is passed in** 

        :param last_watched_date: The last_watched_date of this NextPlaybackItem.
        :type last_watched_date: datetime
        """

        self._last_watched_date = last_watched_date

    @property
    def next(self):
        """Gets the next of this NextPlaybackItem.


        :return: The next of this NextPlaybackItem.
        :rtype: ItemDetail
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this NextPlaybackItem.


        :param next: The next of this NextPlaybackItem.
        :type next: ItemDetail
        """

        self._next = next

    @property
    def source_item_id(self):
        """Gets the source_item_id of this NextPlaybackItem.

        The id of the item used to determine the next item to play.

        :return: The source_item_id of this NextPlaybackItem.
        :rtype: str
        """
        return self._source_item_id

    @source_item_id.setter
    def source_item_id(self, source_item_id):
        """Sets the source_item_id of this NextPlaybackItem.

        The id of the item used to determine the next item to play.

        :param source_item_id: The source_item_id of this NextPlaybackItem.
        :type source_item_id: str
        """
        if source_item_id is None:
            raise ValueError("Invalid value for `source_item_id`, must not be `None`")

        self._source_item_id = source_item_id

    @property
    def suggestion_type(self):
        """Gets the suggestion_type of this NextPlaybackItem.

        Field indicating the type or reason behind the suggestion.  Id Type   | Show Watched Status| Value            | Description ----------|--------------------|------------------|--------------------------------- showId    | Unwatched          | StartWatching    | showId    | Completely watched | RestartWatching  | showId    | Partly watched     | ContinueWatching | Suggested episode partly watched showId    | Partly watched     | Sequential       | Suggested episode unwatched episodeId | Any                | Sequential       | Next episode in show 

        :return: The suggestion_type of this NextPlaybackItem.
        :rtype: str
        """
        return self._suggestion_type

    @suggestion_type.setter
    def suggestion_type(self, suggestion_type):
        """Sets the suggestion_type of this NextPlaybackItem.

        Field indicating the type or reason behind the suggestion.  Id Type   | Show Watched Status| Value            | Description ----------|--------------------|------------------|--------------------------------- showId    | Unwatched          | StartWatching    | showId    | Completely watched | RestartWatching  | showId    | Partly watched     | ContinueWatching | Suggested episode partly watched showId    | Partly watched     | Sequential       | Suggested episode unwatched episodeId | Any                | Sequential       | Next episode in show 

        :param suggestion_type: The suggestion_type of this NextPlaybackItem.
        :type suggestion_type: str
        """
        allowed_values = ["StartWatching", "ContinueWatching", "RestartWatching", "Sequential", "None"]  # noqa: E501
        if suggestion_type not in allowed_values:
            raise ValueError(
                "Invalid value for `suggestion_type` ({0}), must be one of {1}"
                .format(suggestion_type, allowed_values)
            )

        self._suggestion_type = suggestion_type
