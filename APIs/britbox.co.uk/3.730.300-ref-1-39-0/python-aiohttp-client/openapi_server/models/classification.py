# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Classification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, name: str=None, advisory_text: str=None, images: Dict[str, str]=None, level: int=None, system: str=None):
        """Classification - a model defined in OpenAPI

        :param code: The code of this Classification.
        :param name: The name of this Classification.
        :param advisory_text: The advisory_text of this Classification.
        :param images: The images of this Classification.
        :param level: The level of this Classification.
        :param system: The system of this Classification.
        """
        self.openapi_types = {
            'code': str,
            'name': str,
            'advisory_text': str,
            'images': Dict[str, str],
            'level': int,
            'system': str
        }

        self.attribute_map = {
            'code': 'code',
            'name': 'name',
            'advisory_text': 'advisoryText',
            'images': 'images',
            'level': 'level',
            'system': 'system'
        }

        self._code = code
        self._name = name
        self._advisory_text = advisory_text
        self._images = images
        self._level = level
        self._system = system

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Classification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Classification of this Classification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Classification.

        The unique code for a classification.

        :return: The code of this Classification.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Classification.

        The unique code for a classification.

        :param code: The code of this Classification.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def name(self):
        """Gets the name of this Classification.

        The name of the classification for display.

        :return: The name of this Classification.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Classification.

        The name of the classification for display.

        :param name: The name of this Classification.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def advisory_text(self):
        """Gets the advisory_text of this Classification.

        Parental advisort text.

        :return: The advisory_text of this Classification.
        :rtype: str
        """
        return self._advisory_text

    @advisory_text.setter
    def advisory_text(self, advisory_text):
        """Sets the advisory_text of this Classification.

        Parental advisort text.

        :param advisory_text: The advisory_text of this Classification.
        :type advisory_text: str
        """

        self._advisory_text = advisory_text

    @property
    def images(self):
        """Gets the images of this Classification.


        :return: The images of this Classification.
        :rtype: Dict[str, str]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this Classification.


        :param images: The images of this Classification.
        :type images: Dict[str, str]
        """
        if images is None:
            raise ValueError("Invalid value for `images`, must not be `None`")

        self._images = images

    @property
    def level(self):
        """Gets the level of this Classification.

        The level of this classification when compared with its siblings. A higher level means a greater restriction. Each classification in a system should have a unique level. 

        :return: The level of this Classification.
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this Classification.

        The level of this classification when compared with its siblings. A higher level means a greater restriction. Each classification in a system should have a unique level. 

        :param level: The level of this Classification.
        :type level: int
        """
        if level is None:
            raise ValueError("Invalid value for `level`, must not be `None`")

        self._level = level

    @property
    def system(self):
        """Gets the system of this Classification.

        The parent system code of the classification.

        :return: The system of this Classification.
        :rtype: str
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this Classification.

        The parent system code of the classification.

        :param system: The system of this Classification.
        :type system: str
        """
        if system is None:
            raise ValueError("Invalid value for `system`, must not be `None`")

        self._system = system
