# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.item_summary import ItemSummary
from openapi_server.models.list_data import ListData
from openapi_server.models.pagination import Pagination
from openapi_server.models.theme import Theme
from openapi_server import util


class ItemList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_fields: Dict[str, object]=None, description: str=None, id: str=None, images: Dict[str, str]=None, item_types: List[str]=None, items: List[ItemSummary]=None, list_data: ListData=None, paging: Pagination=None, parameter: str=None, path: str=None, short_description: str=None, size: int=None, tagline: str=None, themes: List[Theme]=None, title: str=None):
        """ItemList - a model defined in OpenAPI

        :param custom_fields: The custom_fields of this ItemList.
        :param description: The description of this ItemList.
        :param id: The id of this ItemList.
        :param images: The images of this ItemList.
        :param item_types: The item_types of this ItemList.
        :param items: The items of this ItemList.
        :param list_data: The list_data of this ItemList.
        :param paging: The paging of this ItemList.
        :param parameter: The parameter of this ItemList.
        :param path: The path of this ItemList.
        :param short_description: The short_description of this ItemList.
        :param size: The size of this ItemList.
        :param tagline: The tagline of this ItemList.
        :param themes: The themes of this ItemList.
        :param title: The title of this ItemList.
        """
        self.openapi_types = {
            'custom_fields': Dict[str, object],
            'description': str,
            'id': str,
            'images': Dict[str, str],
            'item_types': List[str],
            'items': List[ItemSummary],
            'list_data': ListData,
            'paging': Pagination,
            'parameter': str,
            'path': str,
            'short_description': str,
            'size': int,
            'tagline': str,
            'themes': List[Theme],
            'title': str
        }

        self.attribute_map = {
            'custom_fields': 'customFields',
            'description': 'description',
            'id': 'id',
            'images': 'images',
            'item_types': 'itemTypes',
            'items': 'items',
            'list_data': 'listData',
            'paging': 'paging',
            'parameter': 'parameter',
            'path': 'path',
            'short_description': 'shortDescription',
            'size': 'size',
            'tagline': 'tagline',
            'themes': 'themes',
            'title': 'title'
        }

        self._custom_fields = custom_fields
        self._description = description
        self._id = id
        self._images = images
        self._item_types = item_types
        self._items = items
        self._list_data = list_data
        self._paging = paging
        self._parameter = parameter
        self._path = path
        self._short_description = short_description
        self._size = size
        self._tagline = tagline
        self._themes = themes
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItemList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItemList of this ItemList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_fields(self):
        """Gets the custom_fields of this ItemList.

        A map of custom fields defined by a curator for a list.

        :return: The custom_fields of this ItemList.
        :rtype: Dict[str, object]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this ItemList.

        A map of custom fields defined by a curator for a list.

        :param custom_fields: The custom_fields of this ItemList.
        :type custom_fields: Dict[str, object]
        """

        self._custom_fields = custom_fields

    @property
    def description(self):
        """Gets the description of this ItemList.

        A full description of this list.

        :return: The description of this ItemList.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ItemList.

        A full description of this list.

        :param description: The description of this ItemList.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this ItemList.

        The id of this list

        :return: The id of this ItemList.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ItemList.

        The id of this list

        :param id: The id of this ItemList.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def images(self):
        """Gets the images of this ItemList.


        :return: The images of this ItemList.
        :rtype: Dict[str, str]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this ItemList.


        :param images: The images of this ItemList.
        :type images: Dict[str, str]
        """

        self._images = images

    @property
    def item_types(self):
        """Gets the item_types of this ItemList.

        The types of items in the list

        :return: The item_types of this ItemList.
        :rtype: List[str]
        """
        return self._item_types

    @item_types.setter
    def item_types(self, item_types):
        """Sets the item_types of this ItemList.

        The types of items in the list

        :param item_types: The item_types of this ItemList.
        :type item_types: List[str]
        """
        allowed_values = ["movie", "show", "season", "episode", "program", "link", "trailer", "channel", "customAsset"]  # noqa: E501
        if not set(item_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `item_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(item_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._item_types = item_types

    @property
    def items(self):
        """Gets the items of this ItemList.

        A list of items

        :return: The items of this ItemList.
        :rtype: List[ItemSummary]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this ItemList.

        A list of items

        :param items: The items of this ItemList.
        :type items: List[ItemSummary]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def list_data(self):
        """Gets the list_data of this ItemList.


        :return: The list_data of this ItemList.
        :rtype: ListData
        """
        return self._list_data

    @list_data.setter
    def list_data(self, list_data):
        """Sets the list_data of this ItemList.


        :param list_data: The list_data of this ItemList.
        :type list_data: ListData
        """

        self._list_data = list_data

    @property
    def paging(self):
        """Gets the paging of this ItemList.


        :return: The paging of this ItemList.
        :rtype: Pagination
        """
        return self._paging

    @paging.setter
    def paging(self, paging):
        """Sets the paging of this ItemList.


        :param paging: The paging of this ItemList.
        :type paging: Pagination
        """
        if paging is None:
            raise ValueError("Invalid value for `paging`, must not be `None`")

        self._paging = paging

    @property
    def parameter(self):
        """Gets the parameter of this ItemList.

        If this list is parameterized, then this contains the parameter of the list in the format `name:value`. For example the Movies Genre list will take a parameter `genre` with a given value. e.g. `genre:action` or `genre:drama`.

        :return: The parameter of this ItemList.
        :rtype: str
        """
        return self._parameter

    @parameter.setter
    def parameter(self, parameter):
        """Sets the parameter of this ItemList.

        If this list is parameterized, then this contains the parameter of the list in the format `name:value`. For example the Movies Genre list will take a parameter `genre` with a given value. e.g. `genre:action` or `genre:drama`.

        :param parameter: The parameter of this ItemList.
        :type parameter: str
        """

        self._parameter = parameter

    @property
    def path(self):
        """Gets the path of this ItemList.

        The path of this list

        :return: The path of this ItemList.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ItemList.

        The path of this list

        :param path: The path of this ItemList.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def short_description(self):
        """Gets the short_description of this ItemList.

        A short description of this list.

        :return: The short_description of this ItemList.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this ItemList.

        A short description of this list.

        :param short_description: The short_description of this ItemList.
        :type short_description: str
        """

        self._short_description = short_description

    @property
    def size(self):
        """Gets the size of this ItemList.

        The total size of the list

        :return: The size of this ItemList.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ItemList.

        The total size of the list

        :param size: The size of this ItemList.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size

    @property
    def tagline(self):
        """Gets the tagline of this ItemList.

        The tagline of the item.

        :return: The tagline of this ItemList.
        :rtype: str
        """
        return self._tagline

    @tagline.setter
    def tagline(self, tagline):
        """Sets the tagline of this ItemList.

        The tagline of the item.

        :param tagline: The tagline of this ItemList.
        :type tagline: str
        """

        self._tagline = tagline

    @property
    def themes(self):
        """Gets the themes of this ItemList.


        :return: The themes of this ItemList.
        :rtype: List[Theme]
        """
        return self._themes

    @themes.setter
    def themes(self, themes):
        """Sets the themes of this ItemList.


        :param themes: The themes of this ItemList.
        :type themes: List[Theme]
        """

        self._themes = themes

    @property
    def title(self):
        """Gets the title of this ItemList.

        The title of this list

        :return: The title of this ItemList.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ItemList.

        The title of this list

        :param title: The title of this ItemList.
        :type title: str
        """

        self._title = title
