# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegistrationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, first_name: str=None, language_code: str=None, last_name: str=None, marketing: bool=True, password: str=None, pin: str=None, segments: List[str]=None):
        """RegistrationRequest - a model defined in OpenAPI

        :param email: The email of this RegistrationRequest.
        :param first_name: The first_name of this RegistrationRequest.
        :param language_code: The language_code of this RegistrationRequest.
        :param last_name: The last_name of this RegistrationRequest.
        :param marketing: The marketing of this RegistrationRequest.
        :param password: The password of this RegistrationRequest.
        :param pin: The pin of this RegistrationRequest.
        :param segments: The segments of this RegistrationRequest.
        """
        self.openapi_types = {
            'email': str,
            'first_name': str,
            'language_code': str,
            'last_name': str,
            'marketing': bool,
            'password': str,
            'pin': str,
            'segments': List[str]
        }

        self.attribute_map = {
            'email': 'email',
            'first_name': 'firstName',
            'language_code': 'languageCode',
            'last_name': 'lastName',
            'marketing': 'marketing',
            'password': 'password',
            'pin': 'pin',
            'segments': 'segments'
        }

        self._email = email
        self._first_name = first_name
        self._language_code = language_code
        self._last_name = last_name
        self._marketing = marketing
        self._password = password
        self._pin = pin
        self._segments = segments

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegistrationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegistrationRequest of this RegistrationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this RegistrationRequest.


        :return: The email of this RegistrationRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this RegistrationRequest.


        :param email: The email of this RegistrationRequest.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this RegistrationRequest.


        :return: The first_name of this RegistrationRequest.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this RegistrationRequest.


        :param first_name: The first_name of this RegistrationRequest.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def language_code(self):
        """Gets the language_code of this RegistrationRequest.

        The code of the preferred language for the primary profile. Must be a valid ISO language code e.g. \"en-US\" and must match the code of one of the languages specified in the app config. See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 

        :return: The language_code of this RegistrationRequest.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this RegistrationRequest.

        The code of the preferred language for the primary profile. Must be a valid ISO language code e.g. \"en-US\" and must match the code of one of the languages specified in the app config. See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 

        :param language_code: The language_code of this RegistrationRequest.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def last_name(self):
        """Gets the last_name of this RegistrationRequest.


        :return: The last_name of this RegistrationRequest.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this RegistrationRequest.


        :param last_name: The last_name of this RegistrationRequest.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def marketing(self):
        """Gets the marketing of this RegistrationRequest.

        Whether to receive marketing material or not. Default to true.

        :return: The marketing of this RegistrationRequest.
        :rtype: bool
        """
        return self._marketing

    @marketing.setter
    def marketing(self, marketing):
        """Sets the marketing of this RegistrationRequest.

        Whether to receive marketing material or not. Default to true.

        :param marketing: The marketing of this RegistrationRequest.
        :type marketing: bool
        """

        self._marketing = marketing

    @property
    def password(self):
        """Gets the password of this RegistrationRequest.


        :return: The password of this RegistrationRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this RegistrationRequest.


        :param password: The password of this RegistrationRequest.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def pin(self):
        """Gets the pin of this RegistrationRequest.

        The primary account pin.

        :return: The pin of this RegistrationRequest.
        :rtype: str
        """
        return self._pin

    @pin.setter
    def pin(self, pin):
        """Sets the pin of this RegistrationRequest.

        The primary account pin.

        :param pin: The pin of this RegistrationRequest.
        :type pin: str
        """

        self._pin = pin

    @property
    def segments(self):
        """Gets the segments of this RegistrationRequest.

        The segments to apply to the primary profile.

        :return: The segments of this RegistrationRequest.
        :rtype: List[str]
        """
        return self._segments

    @segments.setter
    def segments(self, segments):
        """Sets the segments of this RegistrationRequest.

        The segments to apply to the primary profile.

        :param segments: The segments of this RegistrationRequest.
        :type segments: List[str]
        """

        self._segments = segments
