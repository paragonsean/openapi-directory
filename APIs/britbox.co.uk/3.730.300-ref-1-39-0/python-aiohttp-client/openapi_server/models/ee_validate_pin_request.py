# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EeValidatePinRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, pin: str=None, pin_reference: str=None, tracking_header: str=None):
        """EeValidatePinRequest - a model defined in OpenAPI

        :param access_token: The access_token of this EeValidatePinRequest.
        :param pin: The pin of this EeValidatePinRequest.
        :param pin_reference: The pin_reference of this EeValidatePinRequest.
        :param tracking_header: The tracking_header of this EeValidatePinRequest.
        """
        self.openapi_types = {
            'access_token': str,
            'pin': str,
            'pin_reference': str,
            'tracking_header': str
        }

        self.attribute_map = {
            'access_token': 'accessToken',
            'pin': 'pin',
            'pin_reference': 'pinReference',
            'tracking_header': 'trackingHeader'
        }

        self._access_token = access_token
        self._pin = pin
        self._pin_reference = pin_reference
        self._tracking_header = tracking_header

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EeValidatePinRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EeValidatePinRequest of this EeValidatePinRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this EeValidatePinRequest.

        EE API authorization Token received from GET /ee/token/create.

        :return: The access_token of this EeValidatePinRequest.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this EeValidatePinRequest.

        EE API authorization Token received from GET /ee/token/create.

        :param access_token: The access_token of this EeValidatePinRequest.
        :type access_token: str
        """
        if access_token is None:
            raise ValueError("Invalid value for `access_token`, must not be `None`")

        self._access_token = access_token

    @property
    def pin(self):
        """Gets the pin of this EeValidatePinRequest.

        The pin entered by a user. 6 digits

        :return: The pin of this EeValidatePinRequest.
        :rtype: str
        """
        return self._pin

    @pin.setter
    def pin(self, pin):
        """Sets the pin of this EeValidatePinRequest.

        The pin entered by a user. 6 digits

        :param pin: The pin of this EeValidatePinRequest.
        :type pin: str
        """
        if pin is None:
            raise ValueError("Invalid value for `pin`, must not be `None`")

        self._pin = pin

    @property
    def pin_reference(self):
        """Gets the pin_reference of this EeValidatePinRequest.

        The pinReference.

        :return: The pin_reference of this EeValidatePinRequest.
        :rtype: str
        """
        return self._pin_reference

    @pin_reference.setter
    def pin_reference(self, pin_reference):
        """Sets the pin_reference of this EeValidatePinRequest.

        The pinReference.

        :param pin_reference: The pin_reference of this EeValidatePinRequest.
        :type pin_reference: str
        """
        if pin_reference is None:
            raise ValueError("Invalid value for `pin_reference`, must not be `None`")

        self._pin_reference = pin_reference

    @property
    def tracking_header(self):
        """Gets the tracking_header of this EeValidatePinRequest.

        Tracking header to be able to search logs for a specific user requests. If not provided it will be generated. FE should store it for later user.

        :return: The tracking_header of this EeValidatePinRequest.
        :rtype: str
        """
        return self._tracking_header

    @tracking_header.setter
    def tracking_header(self, tracking_header):
        """Sets the tracking_header of this EeValidatePinRequest.

        Tracking header to be able to search logs for a specific user requests. If not provided it will be generated. FE should store it for later user.

        :param tracking_header: The tracking_header of this EeValidatePinRequest.
        :type tracking_header: str
        """

        self._tracking_header = tracking_header
