# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.itv_entitlement import ItvEntitlement
from openapi_server import util


class ItvSubscriptionState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, effective_entitlements: List[ItvEntitlement]=None, failed_availability_checks: List[str]=None, purchased: List[str]=None, source: str=None):
        """ItvSubscriptionState - a model defined in OpenAPI

        :param effective_entitlements: The effective_entitlements of this ItvSubscriptionState.
        :param failed_availability_checks: The failed_availability_checks of this ItvSubscriptionState.
        :param purchased: The purchased of this ItvSubscriptionState.
        :param source: The source of this ItvSubscriptionState.
        """
        self.openapi_types = {
            'effective_entitlements': List[ItvEntitlement],
            'failed_availability_checks': List[str],
            'purchased': List[str],
            'source': str
        }

        self.attribute_map = {
            'effective_entitlements': 'effective_entitlements',
            'failed_availability_checks': 'failed_availability_checks',
            'purchased': 'purchased',
            'source': 'source'
        }

        self._effective_entitlements = effective_entitlements
        self._failed_availability_checks = failed_availability_checks
        self._purchased = purchased
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItvSubscriptionState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItvSubscriptionState of this ItvSubscriptionState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def effective_entitlements(self):
        """Gets the effective_entitlements of this ItvSubscriptionState.

        The array of entitlement objects.

        :return: The effective_entitlements of this ItvSubscriptionState.
        :rtype: List[ItvEntitlement]
        """
        return self._effective_entitlements

    @effective_entitlements.setter
    def effective_entitlements(self, effective_entitlements):
        """Sets the effective_entitlements of this ItvSubscriptionState.

        The array of entitlement objects.

        :param effective_entitlements: The effective_entitlements of this ItvSubscriptionState.
        :type effective_entitlements: List[ItvEntitlement]
        """
        if effective_entitlements is None:
            raise ValueError("Invalid value for `effective_entitlements`, must not be `None`")

        self._effective_entitlements = effective_entitlements

    @property
    def failed_availability_checks(self):
        """Gets the failed_availability_checks of this ItvSubscriptionState.

        The results of availability checks.

        :return: The failed_availability_checks of this ItvSubscriptionState.
        :rtype: List[str]
        """
        return self._failed_availability_checks

    @failed_availability_checks.setter
    def failed_availability_checks(self, failed_availability_checks):
        """Sets the failed_availability_checks of this ItvSubscriptionState.

        The results of availability checks.

        :param failed_availability_checks: The failed_availability_checks of this ItvSubscriptionState.
        :type failed_availability_checks: List[str]
        """
        if failed_availability_checks is None:
            raise ValueError("Invalid value for `failed_availability_checks`, must not be `None`")

        self._failed_availability_checks = failed_availability_checks

    @property
    def purchased(self):
        """Gets the purchased of this ItvSubscriptionState.

        The array of entitlement names.

        :return: The purchased of this ItvSubscriptionState.
        :rtype: List[str]
        """
        return self._purchased

    @purchased.setter
    def purchased(self, purchased):
        """Sets the purchased of this ItvSubscriptionState.

        The array of entitlement names.

        :param purchased: The purchased of this ItvSubscriptionState.
        :type purchased: List[str]
        """
        if purchased is None:
            raise ValueError("Invalid value for `purchased`, must not be `None`")

        self._purchased = purchased

    @property
    def source(self):
        """Gets the source of this ItvSubscriptionState.

        The payment provider (stripe/itunes)

        :return: The source of this ItvSubscriptionState.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ItvSubscriptionState.

        The payment provider (stripe/itunes)

        :param source: The source of this ItvSubscriptionState.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source
