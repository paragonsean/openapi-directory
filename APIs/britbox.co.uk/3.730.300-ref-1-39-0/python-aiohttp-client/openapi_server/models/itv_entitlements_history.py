# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.itv_entitlement import ItvEntitlement
from openapi_server.models.itv_entitlement_cancelation import ItvEntitlementCancelation
from openapi_server import util


class ItvEntitlementsHistory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cancellations: List[ItvEntitlementCancelation]=None, entitlements: List[ItvEntitlement]=None):
        """ItvEntitlementsHistory - a model defined in OpenAPI

        :param cancellations: The cancellations of this ItvEntitlementsHistory.
        :param entitlements: The entitlements of this ItvEntitlementsHistory.
        """
        self.openapi_types = {
            'cancellations': List[ItvEntitlementCancelation],
            'entitlements': List[ItvEntitlement]
        }

        self.attribute_map = {
            'cancellations': 'cancellations',
            'entitlements': 'entitlements'
        }

        self._cancellations = cancellations
        self._entitlements = entitlements

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItvEntitlementsHistory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItvEntitlementsHistory of this ItvEntitlementsHistory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cancellations(self):
        """Gets the cancellations of this ItvEntitlementsHistory.

        The results of availability checks.

        :return: The cancellations of this ItvEntitlementsHistory.
        :rtype: List[ItvEntitlementCancelation]
        """
        return self._cancellations

    @cancellations.setter
    def cancellations(self, cancellations):
        """Sets the cancellations of this ItvEntitlementsHistory.

        The results of availability checks.

        :param cancellations: The cancellations of this ItvEntitlementsHistory.
        :type cancellations: List[ItvEntitlementCancelation]
        """
        if cancellations is None:
            raise ValueError("Invalid value for `cancellations`, must not be `None`")

        self._cancellations = cancellations

    @property
    def entitlements(self):
        """Gets the entitlements of this ItvEntitlementsHistory.

        The results of availability checks.

        :return: The entitlements of this ItvEntitlementsHistory.
        :rtype: List[ItvEntitlement]
        """
        return self._entitlements

    @entitlements.setter
    def entitlements(self, entitlements):
        """Sets the entitlements of this ItvEntitlementsHistory.

        The results of availability checks.

        :param entitlements: The entitlements of this ItvEntitlementsHistory.
        :type entitlements: List[ItvEntitlement]
        """
        if entitlements is None:
            raise ValueError("Invalid value for `entitlements`, must not be `None`")

        self._entitlements = entitlements
