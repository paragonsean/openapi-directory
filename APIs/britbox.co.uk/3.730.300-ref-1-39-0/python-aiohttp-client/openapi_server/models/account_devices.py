# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device import Device
from openapi_server.models.device_registration_window import DeviceRegistrationWindow
from openapi_server import util


class AccountDevices(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deregistration_window: DeviceRegistrationWindow=None, devices: List[Device]=None, max_registered: int=None, registration_window: DeviceRegistrationWindow=None):
        """AccountDevices - a model defined in OpenAPI

        :param deregistration_window: The deregistration_window of this AccountDevices.
        :param devices: The devices of this AccountDevices.
        :param max_registered: The max_registered of this AccountDevices.
        :param registration_window: The registration_window of this AccountDevices.
        """
        self.openapi_types = {
            'deregistration_window': DeviceRegistrationWindow,
            'devices': List[Device],
            'max_registered': int,
            'registration_window': DeviceRegistrationWindow
        }

        self.attribute_map = {
            'deregistration_window': 'deregistrationWindow',
            'devices': 'devices',
            'max_registered': 'maxRegistered',
            'registration_window': 'registrationWindow'
        }

        self._deregistration_window = deregistration_window
        self._devices = devices
        self._max_registered = max_registered
        self._registration_window = registration_window

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountDevices':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountDevices of this AccountDevices.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deregistration_window(self):
        """Gets the deregistration_window of this AccountDevices.


        :return: The deregistration_window of this AccountDevices.
        :rtype: DeviceRegistrationWindow
        """
        return self._deregistration_window

    @deregistration_window.setter
    def deregistration_window(self, deregistration_window):
        """Sets the deregistration_window of this AccountDevices.


        :param deregistration_window: The deregistration_window of this AccountDevices.
        :type deregistration_window: DeviceRegistrationWindow
        """

        self._deregistration_window = deregistration_window

    @property
    def devices(self):
        """Gets the devices of this AccountDevices.

        The array of registered playack devices.

        :return: The devices of this AccountDevices.
        :rtype: List[Device]
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this AccountDevices.

        The array of registered playack devices.

        :param devices: The devices of this AccountDevices.
        :type devices: List[Device]
        """
        if devices is None:
            raise ValueError("Invalid value for `devices`, must not be `None`")

        self._devices = devices

    @property
    def max_registered(self):
        """Gets the max_registered of this AccountDevices.

        The maximum number of playback devices that can be registered under an account at a single time.  If there is no maximum defined this value will be `-1`. 

        :return: The max_registered of this AccountDevices.
        :rtype: int
        """
        return self._max_registered

    @max_registered.setter
    def max_registered(self, max_registered):
        """Sets the max_registered of this AccountDevices.

        The maximum number of playback devices that can be registered under an account at a single time.  If there is no maximum defined this value will be `-1`. 

        :param max_registered: The max_registered of this AccountDevices.
        :type max_registered: int
        """
        if max_registered is None:
            raise ValueError("Invalid value for `max_registered`, must not be `None`")

        self._max_registered = max_registered

    @property
    def registration_window(self):
        """Gets the registration_window of this AccountDevices.


        :return: The registration_window of this AccountDevices.
        :rtype: DeviceRegistrationWindow
        """
        return self._registration_window

    @registration_window.setter
    def registration_window(self, registration_window):
        """Sets the registration_window of this AccountDevices.


        :param registration_window: The registration_window of this AccountDevices.
        :type registration_window: DeviceRegistrationWindow
        """

        self._registration_window = registration_window
