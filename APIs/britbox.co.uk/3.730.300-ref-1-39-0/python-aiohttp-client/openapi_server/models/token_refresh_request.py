# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TokenRefreshRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cookie_type: str=None, token: str=None):
        """TokenRefreshRequest - a model defined in OpenAPI

        :param cookie_type: The cookie_type of this TokenRefreshRequest.
        :param token: The token of this TokenRefreshRequest.
        """
        self.openapi_types = {
            'cookie_type': str,
            'token': str
        }

        self.attribute_map = {
            'cookie_type': 'cookieType',
            'token': 'token'
        }

        self._cookie_type = cookie_type
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TokenRefreshRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TokenRefreshRequest of this TokenRefreshRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cookie_type(self):
        """Gets the cookie_type of this TokenRefreshRequest.

        If you specify a cookie type then a content filter cookie will be returned along with the token(s). This is only intended for web based clients which need to pass the cookies to a server to render a page based on the user's content filters e.g subscription code.  If type `Session` the cookie will be session based. If type `Persistent` the cookie will have a medium term lifespan. If undefined no cookies will be set. 

        :return: The cookie_type of this TokenRefreshRequest.
        :rtype: str
        """
        return self._cookie_type

    @cookie_type.setter
    def cookie_type(self, cookie_type):
        """Sets the cookie_type of this TokenRefreshRequest.

        If you specify a cookie type then a content filter cookie will be returned along with the token(s). This is only intended for web based clients which need to pass the cookies to a server to render a page based on the user's content filters e.g subscription code.  If type `Session` the cookie will be session based. If type `Persistent` the cookie will have a medium term lifespan. If undefined no cookies will be set. 

        :param cookie_type: The cookie_type of this TokenRefreshRequest.
        :type cookie_type: str
        """
        allowed_values = ["Session", "Persistent"]  # noqa: E501
        if cookie_type not in allowed_values:
            raise ValueError(
                "Invalid value for `cookie_type` ({0}), must be one of {1}"
                .format(cookie_type, allowed_values)
            )

        self._cookie_type = cookie_type

    @property
    def token(self):
        """Gets the token of this TokenRefreshRequest.

        The token to refresh.

        :return: The token of this TokenRefreshRequest.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this TokenRefreshRequest.

        The token to refresh.

        :param token: The token of this TokenRefreshRequest.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token
