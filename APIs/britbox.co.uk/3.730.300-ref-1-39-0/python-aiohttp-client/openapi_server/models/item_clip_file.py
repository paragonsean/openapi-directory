# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ItemClipFile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channels: int=None, delivery_type: str=None, drm: str=None, format: str=None, height: int=None, language: str=None, name: str=None, resolution: str=None, url: str=None, width: int=None):
        """ItemClipFile - a model defined in OpenAPI

        :param channels: The channels of this ItemClipFile.
        :param delivery_type: The delivery_type of this ItemClipFile.
        :param drm: The drm of this ItemClipFile.
        :param format: The format of this ItemClipFile.
        :param height: The height of this ItemClipFile.
        :param language: The language of this ItemClipFile.
        :param name: The name of this ItemClipFile.
        :param resolution: The resolution of this ItemClipFile.
        :param url: The url of this ItemClipFile.
        :param width: The width of this ItemClipFile.
        """
        self.openapi_types = {
            'channels': int,
            'delivery_type': str,
            'drm': str,
            'format': str,
            'height': int,
            'language': str,
            'name': str,
            'resolution': str,
            'url': str,
            'width': int
        }

        self.attribute_map = {
            'channels': 'channels',
            'delivery_type': 'deliveryType',
            'drm': 'drm',
            'format': 'format',
            'height': 'height',
            'language': 'language',
            'name': 'name',
            'resolution': 'resolution',
            'url': 'url',
            'width': 'width'
        }

        self._channels = channels
        self._delivery_type = delivery_type
        self._drm = drm
        self._format = format
        self._height = height
        self._language = language
        self._name = name
        self._resolution = resolution
        self._url = url
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItemClipFile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItemClipFile of this ItemClipFile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channels(self):
        """Gets the channels of this ItemClipFile.

        The number of audio channels.

        :return: The channels of this ItemClipFile.
        :rtype: int
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this ItemClipFile.

        The number of audio channels.

        :param channels: The channels of this ItemClipFile.
        :type channels: int
        """

        self._channels = channels

    @property
    def delivery_type(self):
        """Gets the delivery_type of this ItemClipFile.

        The way in which the media file is delivered.

        :return: The delivery_type of this ItemClipFile.
        :rtype: str
        """
        return self._delivery_type

    @delivery_type.setter
    def delivery_type(self, delivery_type):
        """Sets the delivery_type of this ItemClipFile.

        The way in which the media file is delivered.

        :param delivery_type: The delivery_type of this ItemClipFile.
        :type delivery_type: str
        """
        allowed_values = ["Stream", "Progressive", "Download"]  # noqa: E501
        if delivery_type not in allowed_values:
            raise ValueError(
                "Invalid value for `delivery_type` ({0}), must be one of {1}"
                .format(delivery_type, allowed_values)
            )

        self._delivery_type = delivery_type

    @property
    def drm(self):
        """Gets the drm of this ItemClipFile.

        The type of drm used to encrypt the media. 'None' if unencrypted.

        :return: The drm of this ItemClipFile.
        :rtype: str
        """
        return self._drm

    @drm.setter
    def drm(self, drm):
        """Sets the drm of this ItemClipFile.

        The type of drm used to encrypt the media. 'None' if unencrypted.

        :param drm: The drm of this ItemClipFile.
        :type drm: str
        """
        if drm is None:
            raise ValueError("Invalid value for `drm`, must not be `None`")

        self._drm = drm

    @property
    def format(self):
        """Gets the format of this ItemClipFile.

        The format the media was encoded in.

        :return: The format of this ItemClipFile.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ItemClipFile.

        The format the media was encoded in.

        :param format: The format of this ItemClipFile.
        :type format: str
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")

        self._format = format

    @property
    def height(self):
        """Gets the height of this ItemClipFile.

        The height of the video media.

        :return: The height of this ItemClipFile.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this ItemClipFile.

        The height of the video media.

        :param height: The height of this ItemClipFile.
        :type height: int
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")

        self._height = height

    @property
    def language(self):
        """Gets the language of this ItemClipFile.

        The language code for the media, e.g. 'en'.

        :return: The language of this ItemClipFile.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this ItemClipFile.

        The language code for the media, e.g. 'en'.

        :param language: The language of this ItemClipFile.
        :type language: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")

        self._language = language

    @property
    def name(self):
        """Gets the name of this ItemClipFile.

        The name of the media file.

        :return: The name of this ItemClipFile.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ItemClipFile.

        The name of the media file.

        :param name: The name of this ItemClipFile.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def resolution(self):
        """Gets the resolution of this ItemClipFile.

        The resolution of the video media.

        :return: The resolution of this ItemClipFile.
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this ItemClipFile.

        The resolution of the video media.

        :param resolution: The resolution of this ItemClipFile.
        :type resolution: str
        """
        allowed_values = ["SD", "HD-720", "HD-1080", "HD-4K", "External", "Unknown"]  # noqa: E501
        if resolution not in allowed_values:
            raise ValueError(
                "Invalid value for `resolution` ({0}), must be one of {1}"
                .format(resolution, allowed_values)
            )

        self._resolution = resolution

    @property
    def url(self):
        """Gets the url of this ItemClipFile.

        The url to access the media file.

        :return: The url of this ItemClipFile.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ItemClipFile.

        The url to access the media file.

        :param url: The url of this ItemClipFile.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def width(self):
        """Gets the width of this ItemClipFile.

        The width of the video media.

        :return: The width of this ItemClipFile.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this ItemClipFile.

        The width of the video media.

        :param width: The width of this ItemClipFile.
        :type width: int
        """
        if width is None:
            raise ValueError("Invalid value for `width`, must not be `None`")

        self._width = width
