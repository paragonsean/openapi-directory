# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.item_purchase import ItemPurchase
from openapi_server.models.plan_purchase import PlanPurchase
from openapi_server import util


class Purchase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorization_date: datetime=None, creation_date: datetime=None, currency: str=None, id: str=None, item: ItemPurchase=None, payment_method_id: str=None, plan: PlanPurchase=None, total: float=None):
        """Purchase - a model defined in OpenAPI

        :param authorization_date: The authorization_date of this Purchase.
        :param creation_date: The creation_date of this Purchase.
        :param currency: The currency of this Purchase.
        :param id: The id of this Purchase.
        :param item: The item of this Purchase.
        :param payment_method_id: The payment_method_id of this Purchase.
        :param plan: The plan of this Purchase.
        :param total: The total of this Purchase.
        """
        self.openapi_types = {
            'authorization_date': datetime,
            'creation_date': datetime,
            'currency': str,
            'id': str,
            'item': ItemPurchase,
            'payment_method_id': str,
            'plan': PlanPurchase,
            'total': float
        }

        self.attribute_map = {
            'authorization_date': 'authorizationDate',
            'creation_date': 'creationDate',
            'currency': 'currency',
            'id': 'id',
            'item': 'item',
            'payment_method_id': 'paymentMethodId',
            'plan': 'plan',
            'total': 'total'
        }

        self._authorization_date = authorization_date
        self._creation_date = creation_date
        self._currency = currency
        self._id = id
        self._item = item
        self._payment_method_id = payment_method_id
        self._plan = plan
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Purchase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Purchase of this Purchase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorization_date(self):
        """Gets the authorization_date of this Purchase.

        The date the purchase was authorized.

        :return: The authorization_date of this Purchase.
        :rtype: datetime
        """
        return self._authorization_date

    @authorization_date.setter
    def authorization_date(self, authorization_date):
        """Sets the authorization_date of this Purchase.

        The date the purchase was authorized.

        :param authorization_date: The authorization_date of this Purchase.
        :type authorization_date: datetime
        """

        self._authorization_date = authorization_date

    @property
    def creation_date(self):
        """Gets the creation_date of this Purchase.

        The date the purchase was created.

        :return: The creation_date of this Purchase.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Purchase.

        The date the purchase was created.

        :param creation_date: The creation_date of this Purchase.
        :type creation_date: datetime
        """
        if creation_date is None:
            raise ValueError("Invalid value for `creation_date`, must not be `None`")

        self._creation_date = creation_date

    @property
    def currency(self):
        """Gets the currency of this Purchase.

        The currency code used to make the purchase.

        :return: The currency of this Purchase.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Purchase.

        The currency code used to make the purchase.

        :param currency: The currency of this Purchase.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def id(self):
        """Gets the id of this Purchase.

        The identifier of the purchase.

        :return: The id of this Purchase.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Purchase.

        The identifier of the purchase.

        :param id: The id of this Purchase.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def item(self):
        """Gets the item of this Purchase.


        :return: The item of this Purchase.
        :rtype: ItemPurchase
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this Purchase.


        :param item: The item of this Purchase.
        :type item: ItemPurchase
        """

        self._item = item

    @property
    def payment_method_id(self):
        """Gets the payment_method_id of this Purchase.

        The identifier of the payment method used to make the purchase.

        :return: The payment_method_id of this Purchase.
        :rtype: str
        """
        return self._payment_method_id

    @payment_method_id.setter
    def payment_method_id(self, payment_method_id):
        """Sets the payment_method_id of this Purchase.

        The identifier of the payment method used to make the purchase.

        :param payment_method_id: The payment_method_id of this Purchase.
        :type payment_method_id: str
        """

        self._payment_method_id = payment_method_id

    @property
    def plan(self):
        """Gets the plan of this Purchase.


        :return: The plan of this Purchase.
        :rtype: PlanPurchase
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this Purchase.


        :param plan: The plan of this Purchase.
        :type plan: PlanPurchase
        """

        self._plan = plan

    @property
    def total(self):
        """Gets the total of this Purchase.

        The total cost of the purchase.

        :return: The total of this Purchase.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Purchase.

        The total cost of the purchase.

        :param total: The total of this Purchase.
        :type total: float
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total
