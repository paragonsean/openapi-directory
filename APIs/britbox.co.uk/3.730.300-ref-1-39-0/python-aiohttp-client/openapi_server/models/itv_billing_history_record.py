# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ItvBillingHistoryRecord(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card: object=None, charge: object=None, invoice: object=None, subscription: object=None):
        """ItvBillingHistoryRecord - a model defined in OpenAPI

        :param card: The card of this ItvBillingHistoryRecord.
        :param charge: The charge of this ItvBillingHistoryRecord.
        :param invoice: The invoice of this ItvBillingHistoryRecord.
        :param subscription: The subscription of this ItvBillingHistoryRecord.
        """
        self.openapi_types = {
            'card': object,
            'charge': object,
            'invoice': object,
            'subscription': object
        }

        self.attribute_map = {
            'card': 'card',
            'charge': 'charge',
            'invoice': 'invoice',
            'subscription': 'subscription'
        }

        self._card = card
        self._charge = charge
        self._invoice = invoice
        self._subscription = subscription

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItvBillingHistoryRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItvBillingHistoryRecord of this ItvBillingHistoryRecord.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card(self):
        """Gets the card of this ItvBillingHistoryRecord.

        The card info.

        :return: The card of this ItvBillingHistoryRecord.
        :rtype: object
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this ItvBillingHistoryRecord.

        The card info.

        :param card: The card of this ItvBillingHistoryRecord.
        :type card: object
        """
        if card is None:
            raise ValueError("Invalid value for `card`, must not be `None`")

        self._card = card

    @property
    def charge(self):
        """Gets the charge of this ItvBillingHistoryRecord.

        The amount charged.

        :return: The charge of this ItvBillingHistoryRecord.
        :rtype: object
        """
        return self._charge

    @charge.setter
    def charge(self, charge):
        """Sets the charge of this ItvBillingHistoryRecord.

        The amount charged.

        :param charge: The charge of this ItvBillingHistoryRecord.
        :type charge: object
        """
        if charge is None:
            raise ValueError("Invalid value for `charge`, must not be `None`")

        self._charge = charge

    @property
    def invoice(self):
        """Gets the invoice of this ItvBillingHistoryRecord.

        The object with invoice details.

        :return: The invoice of this ItvBillingHistoryRecord.
        :rtype: object
        """
        return self._invoice

    @invoice.setter
    def invoice(self, invoice):
        """Sets the invoice of this ItvBillingHistoryRecord.

        The object with invoice details.

        :param invoice: The invoice of this ItvBillingHistoryRecord.
        :type invoice: object
        """
        if invoice is None:
            raise ValueError("Invalid value for `invoice`, must not be `None`")

        self._invoice = invoice

    @property
    def subscription(self):
        """Gets the subscription of this ItvBillingHistoryRecord.

        The object with subscription payment details.

        :return: The subscription of this ItvBillingHistoryRecord.
        :rtype: object
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """Sets the subscription of this ItvBillingHistoryRecord.

        The object with subscription payment details.

        :param subscription: The subscription of this ItvBillingHistoryRecord.
        :type subscription: object
        """
        if subscription is None:
            raise ValueError("Invalid value for `subscription`, must not be `None`")

        self._subscription = subscription
