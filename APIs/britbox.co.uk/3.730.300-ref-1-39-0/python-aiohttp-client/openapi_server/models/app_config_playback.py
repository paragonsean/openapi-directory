# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AppConfigPlayback(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chain_play_countdown: int=None, chain_play_squeezeback: int=None, chain_play_timeout: int=None, heartbeat_frequency: int=None, view_event_points: List[float]=None):
        """AppConfigPlayback - a model defined in OpenAPI

        :param chain_play_countdown: The chain_play_countdown of this AppConfigPlayback.
        :param chain_play_squeezeback: The chain_play_squeezeback of this AppConfigPlayback.
        :param chain_play_timeout: The chain_play_timeout of this AppConfigPlayback.
        :param heartbeat_frequency: The heartbeat_frequency of this AppConfigPlayback.
        :param view_event_points: The view_event_points of this AppConfigPlayback.
        """
        self.openapi_types = {
            'chain_play_countdown': int,
            'chain_play_squeezeback': int,
            'chain_play_timeout': int,
            'heartbeat_frequency': int,
            'view_event_points': List[float]
        }

        self.attribute_map = {
            'chain_play_countdown': 'chainPlayCountdown',
            'chain_play_squeezeback': 'chainPlaySqueezeback',
            'chain_play_timeout': 'chainPlayTimeout',
            'heartbeat_frequency': 'heartbeatFrequency',
            'view_event_points': 'viewEventPoints'
        }

        self._chain_play_countdown = chain_play_countdown
        self._chain_play_squeezeback = chain_play_squeezeback
        self._chain_play_timeout = chain_play_timeout
        self._heartbeat_frequency = heartbeat_frequency
        self._view_event_points = view_event_points

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppConfigPlayback':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppConfigPlayback of this AppConfigPlayback.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chain_play_countdown(self):
        """Gets the chain_play_countdown of this AppConfigPlayback.

        The number of seconds before autoplay of next video.  If set to 0 there will be no autoplay. 

        :return: The chain_play_countdown of this AppConfigPlayback.
        :rtype: int
        """
        return self._chain_play_countdown

    @chain_play_countdown.setter
    def chain_play_countdown(self, chain_play_countdown):
        """Sets the chain_play_countdown of this AppConfigPlayback.

        The number of seconds before autoplay of next video.  If set to 0 there will be no autoplay. 

        :param chain_play_countdown: The chain_play_countdown of this AppConfigPlayback.
        :type chain_play_countdown: int
        """
        if chain_play_countdown is None:
            raise ValueError("Invalid value for `chain_play_countdown`, must not be `None`")

        self._chain_play_countdown = chain_play_countdown

    @property
    def chain_play_squeezeback(self):
        """Gets the chain_play_squeezeback of this AppConfigPlayback.

        The number of seconds before the end of playback when the current video should be minimized and user options are presented within the video player.  If set to 0 there will be no squeezeback. 

        :return: The chain_play_squeezeback of this AppConfigPlayback.
        :rtype: int
        """
        return self._chain_play_squeezeback

    @chain_play_squeezeback.setter
    def chain_play_squeezeback(self, chain_play_squeezeback):
        """Sets the chain_play_squeezeback of this AppConfigPlayback.

        The number of seconds before the end of playback when the current video should be minimized and user options are presented within the video player.  If set to 0 there will be no squeezeback. 

        :param chain_play_squeezeback: The chain_play_squeezeback of this AppConfigPlayback.
        :type chain_play_squeezeback: int
        """
        if chain_play_squeezeback is None:
            raise ValueError("Invalid value for `chain_play_squeezeback`, must not be `None`")

        self._chain_play_squeezeback = chain_play_squeezeback

    @property
    def chain_play_timeout(self):
        """Gets the chain_play_timeout of this AppConfigPlayback.

        The number of minutes of user inactivity before autoplay is paused.  If set to 0 there will be no autoplay timeout. 

        :return: The chain_play_timeout of this AppConfigPlayback.
        :rtype: int
        """
        return self._chain_play_timeout

    @chain_play_timeout.setter
    def chain_play_timeout(self, chain_play_timeout):
        """Sets the chain_play_timeout of this AppConfigPlayback.

        The number of minutes of user inactivity before autoplay is paused.  If set to 0 there will be no autoplay timeout. 

        :param chain_play_timeout: The chain_play_timeout of this AppConfigPlayback.
        :type chain_play_timeout: int
        """
        if chain_play_timeout is None:
            raise ValueError("Invalid value for `chain_play_timeout`, must not be `None`")

        self._chain_play_timeout = chain_play_timeout

    @property
    def heartbeat_frequency(self):
        """Gets the heartbeat_frequency of this AppConfigPlayback.

        How often a heartbeat should be renewed during playback.

        :return: The heartbeat_frequency of this AppConfigPlayback.
        :rtype: int
        """
        return self._heartbeat_frequency

    @heartbeat_frequency.setter
    def heartbeat_frequency(self, heartbeat_frequency):
        """Sets the heartbeat_frequency of this AppConfigPlayback.

        How often a heartbeat should be renewed during playback.

        :param heartbeat_frequency: The heartbeat_frequency of this AppConfigPlayback.
        :type heartbeat_frequency: int
        """
        if heartbeat_frequency is None:
            raise ValueError("Invalid value for `heartbeat_frequency`, must not be `None`")

        self._heartbeat_frequency = heartbeat_frequency

    @property
    def view_event_points(self):
        """Gets the view_event_points of this AppConfigPlayback.

        An array of percentage points in which to fire off plabyack view events. For example a value of 0.5 would indicate that an event should be fired when the user is half way through the video. Often known as quartiles when four equaly spread event points. 

        :return: The view_event_points of this AppConfigPlayback.
        :rtype: List[float]
        """
        return self._view_event_points

    @view_event_points.setter
    def view_event_points(self, view_event_points):
        """Sets the view_event_points of this AppConfigPlayback.

        An array of percentage points in which to fire off plabyack view events. For example a value of 0.5 would indicate that an event should be fired when the user is half way through the video. Often known as quartiles when four equaly spread event points. 

        :param view_event_points: The view_event_points of this AppConfigPlayback.
        :type view_event_points: List[float]
        """
        if view_event_points is None:
            raise ValueError("Invalid value for `view_event_points`, must not be `None`")

        self._view_event_points = view_event_points
