# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ItvEntitlementCancelation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cancelled_at: datetime=None, itv_id: str=None, source: str=None, subscription_id: str=None):
        """ItvEntitlementCancelation - a model defined in OpenAPI

        :param cancelled_at: The cancelled_at of this ItvEntitlementCancelation.
        :param itv_id: The itv_id of this ItvEntitlementCancelation.
        :param source: The source of this ItvEntitlementCancelation.
        :param subscription_id: The subscription_id of this ItvEntitlementCancelation.
        """
        self.openapi_types = {
            'cancelled_at': datetime,
            'itv_id': str,
            'source': str,
            'subscription_id': str
        }

        self.attribute_map = {
            'cancelled_at': 'cancelled_at',
            'itv_id': 'itvId',
            'source': 'source',
            'subscription_id': 'subscriptionId'
        }

        self._cancelled_at = cancelled_at
        self._itv_id = itv_id
        self._source = source
        self._subscription_id = subscription_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItvEntitlementCancelation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItvEntitlementCancelation of this ItvEntitlementCancelation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cancelled_at(self):
        """Gets the cancelled_at of this ItvEntitlementCancelation.

        Cancelation datetime.

        :return: The cancelled_at of this ItvEntitlementCancelation.
        :rtype: datetime
        """
        return self._cancelled_at

    @cancelled_at.setter
    def cancelled_at(self, cancelled_at):
        """Sets the cancelled_at of this ItvEntitlementCancelation.

        Cancelation datetime.

        :param cancelled_at: The cancelled_at of this ItvEntitlementCancelation.
        :type cancelled_at: datetime
        """
        if cancelled_at is None:
            raise ValueError("Invalid value for `cancelled_at`, must not be `None`")

        self._cancelled_at = cancelled_at

    @property
    def itv_id(self):
        """Gets the itv_id of this ItvEntitlementCancelation.

        Itv internal id.

        :return: The itv_id of this ItvEntitlementCancelation.
        :rtype: str
        """
        return self._itv_id

    @itv_id.setter
    def itv_id(self, itv_id):
        """Sets the itv_id of this ItvEntitlementCancelation.

        Itv internal id.

        :param itv_id: The itv_id of this ItvEntitlementCancelation.
        :type itv_id: str
        """
        if itv_id is None:
            raise ValueError("Invalid value for `itv_id`, must not be `None`")

        self._itv_id = itv_id

    @property
    def source(self):
        """Gets the source of this ItvEntitlementCancelation.

        Source platform of cancelation.

        :return: The source of this ItvEntitlementCancelation.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ItvEntitlementCancelation.

        Source platform of cancelation.

        :param source: The source of this ItvEntitlementCancelation.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def subscription_id(self):
        """Gets the subscription_id of this ItvEntitlementCancelation.

        Id of subscription.

        :return: The subscription_id of this ItvEntitlementCancelation.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this ItvEntitlementCancelation.

        Id of subscription.

        :param subscription_id: The subscription_id of this ItvEntitlementCancelation.
        :type subscription_id: str
        """
        if subscription_id is None:
            raise ValueError("Invalid value for `subscription_id`, must not be `None`")

        self._subscription_id = subscription_id
