# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.exclusion_rule import ExclusionRule
from openapi_server import util


class Offer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delivery_type: str=None, exclusion_rules: List[ExclusionRule]=None, max_downloads: int=None, max_plays: int=None, ownership: str=None, play_period: int=None, rental_period: int=None, resolution: str=None, scopes: List[str]=None, availability: str=None, custom_fields: Dict[str, object]=None, end_date: datetime=None, id: str=None, name: str=None, price: float=None, start_date: datetime=None, subscription_code: str=None):
        """Offer - a model defined in OpenAPI

        :param delivery_type: The delivery_type of this Offer.
        :param exclusion_rules: The exclusion_rules of this Offer.
        :param max_downloads: The max_downloads of this Offer.
        :param max_plays: The max_plays of this Offer.
        :param ownership: The ownership of this Offer.
        :param play_period: The play_period of this Offer.
        :param rental_period: The rental_period of this Offer.
        :param resolution: The resolution of this Offer.
        :param scopes: The scopes of this Offer.
        :param availability: The availability of this Offer.
        :param custom_fields: The custom_fields of this Offer.
        :param end_date: The end_date of this Offer.
        :param id: The id of this Offer.
        :param name: The name of this Offer.
        :param price: The price of this Offer.
        :param start_date: The start_date of this Offer.
        :param subscription_code: The subscription_code of this Offer.
        """
        self.openapi_types = {
            'delivery_type': str,
            'exclusion_rules': List[ExclusionRule],
            'max_downloads': int,
            'max_plays': int,
            'ownership': str,
            'play_period': int,
            'rental_period': int,
            'resolution': str,
            'scopes': List[str],
            'availability': str,
            'custom_fields': Dict[str, object],
            'end_date': datetime,
            'id': str,
            'name': str,
            'price': float,
            'start_date': datetime,
            'subscription_code': str
        }

        self.attribute_map = {
            'delivery_type': 'deliveryType',
            'exclusion_rules': 'exclusionRules',
            'max_downloads': 'maxDownloads',
            'max_plays': 'maxPlays',
            'ownership': 'ownership',
            'play_period': 'playPeriod',
            'rental_period': 'rentalPeriod',
            'resolution': 'resolution',
            'scopes': 'scopes',
            'availability': 'availability',
            'custom_fields': 'customFields',
            'end_date': 'endDate',
            'id': 'id',
            'name': 'name',
            'price': 'price',
            'start_date': 'startDate',
            'subscription_code': 'subscriptionCode'
        }

        self._delivery_type = delivery_type
        self._exclusion_rules = exclusion_rules
        self._max_downloads = max_downloads
        self._max_plays = max_plays
        self._ownership = ownership
        self._play_period = play_period
        self._rental_period = rental_period
        self._resolution = resolution
        self._scopes = scopes
        self._availability = availability
        self._custom_fields = custom_fields
        self._end_date = end_date
        self._id = id
        self._name = name
        self._price = price
        self._start_date = start_date
        self._subscription_code = subscription_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Offer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Offer of this Offer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delivery_type(self):
        """Gets the delivery_type of this Offer.


        :return: The delivery_type of this Offer.
        :rtype: str
        """
        return self._delivery_type

    @delivery_type.setter
    def delivery_type(self, delivery_type):
        """Sets the delivery_type of this Offer.


        :param delivery_type: The delivery_type of this Offer.
        :type delivery_type: str
        """
        allowed_values = ["Stream", "Download", "StreamOrDownload", "ProgressiveDownload", "None"]  # noqa: E501
        if delivery_type not in allowed_values:
            raise ValueError(
                "Invalid value for `delivery_type` ({0}), must be one of {1}"
                .format(delivery_type, allowed_values)
            )

        self._delivery_type = delivery_type

    @property
    def exclusion_rules(self):
        """Gets the exclusion_rules of this Offer.

        Any specific playback exclusion rules.

        :return: The exclusion_rules of this Offer.
        :rtype: List[ExclusionRule]
        """
        return self._exclusion_rules

    @exclusion_rules.setter
    def exclusion_rules(self, exclusion_rules):
        """Sets the exclusion_rules of this Offer.

        Any specific playback exclusion rules.

        :param exclusion_rules: The exclusion_rules of this Offer.
        :type exclusion_rules: List[ExclusionRule]
        """

        self._exclusion_rules = exclusion_rules

    @property
    def max_downloads(self):
        """Gets the max_downloads of this Offer.

        The maximum number of allowed downloads.

        :return: The max_downloads of this Offer.
        :rtype: int
        """
        return self._max_downloads

    @max_downloads.setter
    def max_downloads(self, max_downloads):
        """Sets the max_downloads of this Offer.

        The maximum number of allowed downloads.

        :param max_downloads: The max_downloads of this Offer.
        :type max_downloads: int
        """

        self._max_downloads = max_downloads

    @property
    def max_plays(self):
        """Gets the max_plays of this Offer.

        The maximum number of allowed plays.

        :return: The max_plays of this Offer.
        :rtype: int
        """
        return self._max_plays

    @max_plays.setter
    def max_plays(self, max_plays):
        """Sets the max_plays of this Offer.

        The maximum number of allowed plays.

        :param max_plays: The max_plays of this Offer.
        :type max_plays: int
        """

        self._max_plays = max_plays

    @property
    def ownership(self):
        """Gets the ownership of this Offer.


        :return: The ownership of this Offer.
        :rtype: str
        """
        return self._ownership

    @ownership.setter
    def ownership(self, ownership):
        """Sets the ownership of this Offer.


        :param ownership: The ownership of this Offer.
        :type ownership: str
        """
        allowed_values = ["Subscription", "Free", "Rent", "Own", "None"]  # noqa: E501
        if ownership not in allowed_values:
            raise ValueError(
                "Invalid value for `ownership` ({0}), must be one of {1}"
                .format(ownership, allowed_values)
            )

        self._ownership = ownership

    @property
    def play_period(self):
        """Gets the play_period of this Offer.

        The length of time in minutes which the rental will last once played for the first time.

        :return: The play_period of this Offer.
        :rtype: int
        """
        return self._play_period

    @play_period.setter
    def play_period(self, play_period):
        """Sets the play_period of this Offer.

        The length of time in minutes which the rental will last once played for the first time.

        :param play_period: The play_period of this Offer.
        :type play_period: int
        """

        self._play_period = play_period

    @property
    def rental_period(self):
        """Gets the rental_period of this Offer.

        The length of time in minutes which the rental will last once purchased.

        :return: The rental_period of this Offer.
        :rtype: int
        """
        return self._rental_period

    @rental_period.setter
    def rental_period(self, rental_period):
        """Sets the rental_period of this Offer.

        The length of time in minutes which the rental will last once purchased.

        :param rental_period: The rental_period of this Offer.
        :type rental_period: int
        """

        self._rental_period = rental_period

    @property
    def resolution(self):
        """Gets the resolution of this Offer.


        :return: The resolution of this Offer.
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this Offer.


        :param resolution: The resolution of this Offer.
        :type resolution: str
        """
        allowed_values = ["SD", "HD-720", "HD-1080", "HD-4K", "External", "Unknown"]  # noqa: E501
        if resolution not in allowed_values:
            raise ValueError(
                "Invalid value for `resolution` ({0}), must be one of {1}"
                .format(resolution, allowed_values)
            )

        self._resolution = resolution

    @property
    def scopes(self):
        """Gets the scopes of this Offer.


        :return: The scopes of this Offer.
        :rtype: List[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this Offer.


        :param scopes: The scopes of this Offer.
        :type scopes: List[str]
        """
        if scopes is None:
            raise ValueError("Invalid value for `scopes`, must not be `None`")

        self._scopes = scopes

    @property
    def availability(self):
        """Gets the availability of this Offer.


        :return: The availability of this Offer.
        :rtype: str
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this Offer.


        :param availability: The availability of this Offer.
        :type availability: str
        """
        allowed_values = ["Available", "ComingSoon"]  # noqa: E501
        if availability not in allowed_values:
            raise ValueError(
                "Invalid value for `availability` ({0}), must be one of {1}"
                .format(availability, allowed_values)
            )

        self._availability = availability

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Offer.

        A map of custom fields defined by a curator for an offer.

        :return: The custom_fields of this Offer.
        :rtype: Dict[str, object]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Offer.

        A map of custom fields defined by a curator for an offer.

        :param custom_fields: The custom_fields of this Offer.
        :type custom_fields: Dict[str, object]
        """

        self._custom_fields = custom_fields

    @property
    def end_date(self):
        """Gets the end_date of this Offer.


        :return: The end_date of this Offer.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Offer.


        :param end_date: The end_date of this Offer.
        :type end_date: datetime
        """

        self._end_date = end_date

    @property
    def id(self):
        """Gets the id of this Offer.


        :return: The id of this Offer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Offer.


        :param id: The id of this Offer.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Offer.


        :return: The name of this Offer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Offer.


        :param name: The name of this Offer.
        :type name: str
        """

        self._name = name

    @property
    def price(self):
        """Gets the price of this Offer.


        :return: The price of this Offer.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Offer.


        :param price: The price of this Offer.
        :type price: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def start_date(self):
        """Gets the start_date of this Offer.


        :return: The start_date of this Offer.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Offer.


        :param start_date: The start_date of this Offer.
        :type start_date: datetime
        """

        self._start_date = start_date

    @property
    def subscription_code(self):
        """Gets the subscription_code of this Offer.

        The code of the subscription this offer is offered under, if any.

        :return: The subscription_code of this Offer.
        :rtype: str
        """
        return self._subscription_code

    @subscription_code.setter
    def subscription_code(self, subscription_code):
        """Sets the subscription_code of this Offer.

        The code of the subscription this offer is offered under, if any.

        :param subscription_code: The subscription_code of this Offer.
        :type subscription_code: str
        """

        self._subscription_code = subscription_code
