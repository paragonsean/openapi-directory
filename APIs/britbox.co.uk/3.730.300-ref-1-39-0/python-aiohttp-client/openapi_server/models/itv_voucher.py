# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.itv_voucher_display import ItvVoucherDisplay
from openapi_server.models.itv_voucher_links import ItvVoucherLinks
from openapi_server import util


class ItvVoucher(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display: ItvVoucherDisplay=None, id: str=None, links: ItvVoucherLinks=None, offer_type: str=None):
        """ItvVoucher - a model defined in OpenAPI

        :param display: The display of this ItvVoucher.
        :param id: The id of this ItvVoucher.
        :param links: The links of this ItvVoucher.
        :param offer_type: The offer_type of this ItvVoucher.
        """
        self.openapi_types = {
            'display': ItvVoucherDisplay,
            'id': str,
            'links': ItvVoucherLinks,
            'offer_type': str
        }

        self.attribute_map = {
            'display': 'display',
            'id': 'id',
            'links': 'links',
            'offer_type': 'offerType'
        }

        self._display = display
        self._id = id
        self._links = links
        self._offer_type = offer_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItvVoucher':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItvVoucher of this ItvVoucher.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display(self):
        """Gets the display of this ItvVoucher.


        :return: The display of this ItvVoucher.
        :rtype: ItvVoucherDisplay
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this ItvVoucher.


        :param display: The display of this ItvVoucher.
        :type display: ItvVoucherDisplay
        """
        if display is None:
            raise ValueError("Invalid value for `display`, must not be `None`")

        self._display = display

    @property
    def id(self):
        """Gets the id of this ItvVoucher.

        The coupon/voucher.

        :return: The id of this ItvVoucher.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ItvVoucher.

        The coupon/voucher.

        :param id: The id of this ItvVoucher.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def links(self):
        """Gets the links of this ItvVoucher.


        :return: The links of this ItvVoucher.
        :rtype: ItvVoucherLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ItvVoucher.


        :param links: The links of this ItvVoucher.
        :type links: ItvVoucherLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def offer_type(self):
        """Gets the offer_type of this ItvVoucher.

        The voucher offer type.

        :return: The offer_type of this ItvVoucher.
        :rtype: str
        """
        return self._offer_type

    @offer_type.setter
    def offer_type(self, offer_type):
        """Sets the offer_type of this ItvVoucher.

        The voucher offer type.

        :param offer_type: The offer_type of this ItvVoucher.
        :type offer_type: str
        """
        allowed_values = ["stripe", "talon one"]  # noqa: E501
        if offer_type not in allowed_values:
            raise ValueError(
                "Invalid value for `offer_type` ({0}), must be one of {1}"
                .format(offer_type, allowed_values)
            )

        self._offer_type = offer_type
