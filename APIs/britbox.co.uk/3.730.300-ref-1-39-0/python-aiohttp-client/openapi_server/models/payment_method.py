# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PaymentMethod(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, balance: float=None, brand: str=None, currency: str=None, description: str=None, expiry_month: float=None, expiry_year: float=None, id: str=None, last_digits: float=None, type: str=None):
        """PaymentMethod - a model defined in OpenAPI

        :param balance: The balance of this PaymentMethod.
        :param brand: The brand of this PaymentMethod.
        :param currency: The currency of this PaymentMethod.
        :param description: The description of this PaymentMethod.
        :param expiry_month: The expiry_month of this PaymentMethod.
        :param expiry_year: The expiry_year of this PaymentMethod.
        :param id: The id of this PaymentMethod.
        :param last_digits: The last_digits of this PaymentMethod.
        :param type: The type of this PaymentMethod.
        """
        self.openapi_types = {
            'balance': float,
            'brand': str,
            'currency': str,
            'description': str,
            'expiry_month': float,
            'expiry_year': float,
            'id': str,
            'last_digits': float,
            'type': str
        }

        self.attribute_map = {
            'balance': 'balance',
            'brand': 'brand',
            'currency': 'currency',
            'description': 'description',
            'expiry_month': 'expiryMonth',
            'expiry_year': 'expiryYear',
            'id': 'id',
            'last_digits': 'lastDigits',
            'type': 'type'
        }

        self._balance = balance
        self._brand = brand
        self._currency = currency
        self._description = description
        self._expiry_month = expiry_month
        self._expiry_year = expiry_year
        self._id = id
        self._last_digits = last_digits
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentMethod':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentMethod of this PaymentMethod.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def balance(self):
        """Gets the balance of this PaymentMethod.

        The balance of the wallet if the payment method is a wallet.

        :return: The balance of this PaymentMethod.
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this PaymentMethod.

        The balance of the wallet if the payment method is a wallet.

        :param balance: The balance of this PaymentMethod.
        :type balance: float
        """

        self._balance = balance

    @property
    def brand(self):
        """Gets the brand of this PaymentMethod.

        The brand of the card if the payment method is a card.

        :return: The brand of this PaymentMethod.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this PaymentMethod.

        The brand of the card if the payment method is a card.

        :param brand: The brand of this PaymentMethod.
        :type brand: str
        """
        allowed_values = ["Visa", "MasterCard", "AmericanExpress", "Other"]  # noqa: E501
        if brand not in allowed_values:
            raise ValueError(
                "Invalid value for `brand` ({0}), must be one of {1}"
                .format(brand, allowed_values)
            )

        self._brand = brand

    @property
    def currency(self):
        """Gets the currency of this PaymentMethod.

        The currency code of the wallet if the payment method is a wallet.

        :return: The currency of this PaymentMethod.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PaymentMethod.

        The currency code of the wallet if the payment method is a wallet.

        :param currency: The currency of this PaymentMethod.
        :type currency: str
        """

        self._currency = currency

    @property
    def description(self):
        """Gets the description of this PaymentMethod.

        A short description of a payment method.  If the payment method is of type `Wallet` this will be \"My Wallet\"  For `Card` type payment methods the format of this description may differ depending on the payment gateway in use. In the case of Stripe, this will be in the format \"Visa (**** 4242, exp 08/19)\" 

        :return: The description of this PaymentMethod.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PaymentMethod.

        A short description of a payment method.  If the payment method is of type `Wallet` this will be \"My Wallet\"  For `Card` type payment methods the format of this description may differ depending on the payment gateway in use. In the case of Stripe, this will be in the format \"Visa (**** 4242, exp 08/19)\" 

        :param description: The description of this PaymentMethod.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def expiry_month(self):
        """Gets the expiry_month of this PaymentMethod.

        The expiry month of the card if the payment method is a card.

        :return: The expiry_month of this PaymentMethod.
        :rtype: float
        """
        return self._expiry_month

    @expiry_month.setter
    def expiry_month(self, expiry_month):
        """Sets the expiry_month of this PaymentMethod.

        The expiry month of the card if the payment method is a card.

        :param expiry_month: The expiry_month of this PaymentMethod.
        :type expiry_month: float
        """

        self._expiry_month = expiry_month

    @property
    def expiry_year(self):
        """Gets the expiry_year of this PaymentMethod.

        The expiry year of the card if the payment method is a card.

        :return: The expiry_year of this PaymentMethod.
        :rtype: float
        """
        return self._expiry_year

    @expiry_year.setter
    def expiry_year(self, expiry_year):
        """Sets the expiry_year of this PaymentMethod.

        The expiry year of the card if the payment method is a card.

        :param expiry_year: The expiry_year of this PaymentMethod.
        :type expiry_year: float
        """

        self._expiry_year = expiry_year

    @property
    def id(self):
        """Gets the id of this PaymentMethod.

        The unique identifier of a payment method.

        :return: The id of this PaymentMethod.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PaymentMethod.

        The unique identifier of a payment method.

        :param id: The id of this PaymentMethod.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def last_digits(self):
        """Gets the last_digits of this PaymentMethod.

        The last digits of the card if the payment method is a card. Depending on the payment gateway in use this value may be undefined. 

        :return: The last_digits of this PaymentMethod.
        :rtype: float
        """
        return self._last_digits

    @last_digits.setter
    def last_digits(self, last_digits):
        """Sets the last_digits of this PaymentMethod.

        The last digits of the card if the payment method is a card. Depending on the payment gateway in use this value may be undefined. 

        :param last_digits: The last_digits of this PaymentMethod.
        :type last_digits: float
        """

        self._last_digits = last_digits

    @property
    def type(self):
        """Gets the type of this PaymentMethod.

        The type of payment method.

        :return: The type of this PaymentMethod.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PaymentMethod.

        The type of payment method.

        :param type: The type of this PaymentMethod.
        :type type: str
        """
        allowed_values = ["Card", "Wallet"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
