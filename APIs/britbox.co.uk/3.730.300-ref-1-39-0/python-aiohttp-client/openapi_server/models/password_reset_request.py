# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PasswordResetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, password: str=None, reset_token: str=None):
        """PasswordResetRequest - a model defined in OpenAPI

        :param password: The password of this PasswordResetRequest.
        :param reset_token: The reset_token of this PasswordResetRequest.
        """
        self.openapi_types = {
            'password': str,
            'reset_token': str
        }

        self.attribute_map = {
            'password': 'password',
            'reset_token': 'resetToken'
        }

        self._password = password
        self._reset_token = reset_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PasswordResetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PasswordResetRequest of this PasswordResetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def password(self):
        """Gets the password of this PasswordResetRequest.

        The new password for the account.

        :return: The password of this PasswordResetRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this PasswordResetRequest.

        The new password for the account.

        :param password: The password of this PasswordResetRequest.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def reset_token(self):
        """Gets the reset_token of this PasswordResetRequest.

        The ITV reset token.

        :return: The reset_token of this PasswordResetRequest.
        :rtype: str
        """
        return self._reset_token

    @reset_token.setter
    def reset_token(self, reset_token):
        """Sets the reset_token of this PasswordResetRequest.

        The ITV reset token.

        :param reset_token: The reset_token of this PasswordResetRequest.
        :type reset_token: str
        """
        if reset_token is None:
            raise ValueError("Invalid value for `reset_token`, must not be `None`")

        self._reset_token = reset_token
