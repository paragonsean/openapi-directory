# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.classification_summary import ClassificationSummary
from openapi_server.models.offer import Offer
from openapi_server.models.theme import Theme
from openapi_server import util


class ItemSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advisory_text: str=None, available_episode_count: int=None, available_season_count: int=None, average_user_rating: float=None, badge: str=None, channel_short_code: str=None, classification: ClassificationSummary=None, contextual_title: str=None, custom_fields: Dict[str, object]=None, custom_id: str=None, duration: int=None, episode_count: int=None, episode_name: str=None, episode_number: int=None, genres: List[str]=None, has_closed_captions: bool=None, id: str=None, images: Dict[str, str]=None, offers: List[Offer]=None, path: str=None, release_year: int=None, scopes: List[str]=None, season_id: str=None, season_number: int=None, short_description: str=None, show_id: str=None, show_title: str=None, subtype: str=None, tagline: str=None, themes: List[Theme]=None, title: str=None, type: str=None, watch_path: str=None):
        """ItemSummary - a model defined in OpenAPI

        :param advisory_text: The advisory_text of this ItemSummary.
        :param available_episode_count: The available_episode_count of this ItemSummary.
        :param available_season_count: The available_season_count of this ItemSummary.
        :param average_user_rating: The average_user_rating of this ItemSummary.
        :param badge: The badge of this ItemSummary.
        :param channel_short_code: The channel_short_code of this ItemSummary.
        :param classification: The classification of this ItemSummary.
        :param contextual_title: The contextual_title of this ItemSummary.
        :param custom_fields: The custom_fields of this ItemSummary.
        :param custom_id: The custom_id of this ItemSummary.
        :param duration: The duration of this ItemSummary.
        :param episode_count: The episode_count of this ItemSummary.
        :param episode_name: The episode_name of this ItemSummary.
        :param episode_number: The episode_number of this ItemSummary.
        :param genres: The genres of this ItemSummary.
        :param has_closed_captions: The has_closed_captions of this ItemSummary.
        :param id: The id of this ItemSummary.
        :param images: The images of this ItemSummary.
        :param offers: The offers of this ItemSummary.
        :param path: The path of this ItemSummary.
        :param release_year: The release_year of this ItemSummary.
        :param scopes: The scopes of this ItemSummary.
        :param season_id: The season_id of this ItemSummary.
        :param season_number: The season_number of this ItemSummary.
        :param short_description: The short_description of this ItemSummary.
        :param show_id: The show_id of this ItemSummary.
        :param show_title: The show_title of this ItemSummary.
        :param subtype: The subtype of this ItemSummary.
        :param tagline: The tagline of this ItemSummary.
        :param themes: The themes of this ItemSummary.
        :param title: The title of this ItemSummary.
        :param type: The type of this ItemSummary.
        :param watch_path: The watch_path of this ItemSummary.
        """
        self.openapi_types = {
            'advisory_text': str,
            'available_episode_count': int,
            'available_season_count': int,
            'average_user_rating': float,
            'badge': str,
            'channel_short_code': str,
            'classification': ClassificationSummary,
            'contextual_title': str,
            'custom_fields': Dict[str, object],
            'custom_id': str,
            'duration': int,
            'episode_count': int,
            'episode_name': str,
            'episode_number': int,
            'genres': List[str],
            'has_closed_captions': bool,
            'id': str,
            'images': Dict[str, str],
            'offers': List[Offer],
            'path': str,
            'release_year': int,
            'scopes': List[str],
            'season_id': str,
            'season_number': int,
            'short_description': str,
            'show_id': str,
            'show_title': str,
            'subtype': str,
            'tagline': str,
            'themes': List[Theme],
            'title': str,
            'type': str,
            'watch_path': str
        }

        self.attribute_map = {
            'advisory_text': 'advisoryText',
            'available_episode_count': 'availableEpisodeCount',
            'available_season_count': 'availableSeasonCount',
            'average_user_rating': 'averageUserRating',
            'badge': 'badge',
            'channel_short_code': 'channelShortCode',
            'classification': 'classification',
            'contextual_title': 'contextualTitle',
            'custom_fields': 'customFields',
            'custom_id': 'customId',
            'duration': 'duration',
            'episode_count': 'episodeCount',
            'episode_name': 'episodeName',
            'episode_number': 'episodeNumber',
            'genres': 'genres',
            'has_closed_captions': 'hasClosedCaptions',
            'id': 'id',
            'images': 'images',
            'offers': 'offers',
            'path': 'path',
            'release_year': 'releaseYear',
            'scopes': 'scopes',
            'season_id': 'seasonId',
            'season_number': 'seasonNumber',
            'short_description': 'shortDescription',
            'show_id': 'showId',
            'show_title': 'showTitle',
            'subtype': 'subtype',
            'tagline': 'tagline',
            'themes': 'themes',
            'title': 'title',
            'type': 'type',
            'watch_path': 'watchPath'
        }

        self._advisory_text = advisory_text
        self._available_episode_count = available_episode_count
        self._available_season_count = available_season_count
        self._average_user_rating = average_user_rating
        self._badge = badge
        self._channel_short_code = channel_short_code
        self._classification = classification
        self._contextual_title = contextual_title
        self._custom_fields = custom_fields
        self._custom_id = custom_id
        self._duration = duration
        self._episode_count = episode_count
        self._episode_name = episode_name
        self._episode_number = episode_number
        self._genres = genres
        self._has_closed_captions = has_closed_captions
        self._id = id
        self._images = images
        self._offers = offers
        self._path = path
        self._release_year = release_year
        self._scopes = scopes
        self._season_id = season_id
        self._season_number = season_number
        self._short_description = short_description
        self._show_id = show_id
        self._show_title = show_title
        self._subtype = subtype
        self._tagline = tagline
        self._themes = themes
        self._title = title
        self._type = type
        self._watch_path = watch_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItemSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItemSummary of this ItemSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advisory_text(self):
        """Gets the advisory_text of this ItemSummary.

        Advisory text about this item, related to the classification

        :return: The advisory_text of this ItemSummary.
        :rtype: str
        """
        return self._advisory_text

    @advisory_text.setter
    def advisory_text(self, advisory_text):
        """Sets the advisory_text of this ItemSummary.

        Advisory text about this item, related to the classification

        :param advisory_text: The advisory_text of this ItemSummary.
        :type advisory_text: str
        """

        self._advisory_text = advisory_text

    @property
    def available_episode_count(self):
        """Gets the available_episode_count of this ItemSummary.

        The number of available episodes in the season, if the item is a season.

        :return: The available_episode_count of this ItemSummary.
        :rtype: int
        """
        return self._available_episode_count

    @available_episode_count.setter
    def available_episode_count(self, available_episode_count):
        """Sets the available_episode_count of this ItemSummary.

        The number of available episodes in the season, if the item is a season.

        :param available_episode_count: The available_episode_count of this ItemSummary.
        :type available_episode_count: int
        """

        self._available_episode_count = available_episode_count

    @property
    def available_season_count(self):
        """Gets the available_season_count of this ItemSummary.

        The number of available seasons in the show, if the item is a show.

        :return: The available_season_count of this ItemSummary.
        :rtype: int
        """
        return self._available_season_count

    @available_season_count.setter
    def available_season_count(self, available_season_count):
        """Sets the available_season_count of this ItemSummary.

        The number of available seasons in the show, if the item is a show.

        :param available_season_count: The available_season_count of this ItemSummary.
        :type available_season_count: int
        """

        self._available_season_count = available_season_count

    @property
    def average_user_rating(self):
        """Gets the average_user_rating of this ItemSummary.

        The average user rating. When based on user ratings from our system this will be out of 10. 

        :return: The average_user_rating of this ItemSummary.
        :rtype: float
        """
        return self._average_user_rating

    @average_user_rating.setter
    def average_user_rating(self, average_user_rating):
        """Sets the average_user_rating of this ItemSummary.

        The average user rating. When based on user ratings from our system this will be out of 10. 

        :param average_user_rating: The average_user_rating of this ItemSummary.
        :type average_user_rating: float
        """
        if average_user_rating is not None and average_user_rating < 0:
            raise ValueError("Invalid value for `average_user_rating`, must be a value greater than or equal to `0`")

        self._average_user_rating = average_user_rating

    @property
    def badge(self):
        """Gets the badge of this ItemSummary.

        The badge this item has.

        :return: The badge of this ItemSummary.
        :rtype: str
        """
        return self._badge

    @badge.setter
    def badge(self, badge):
        """Sets the badge of this ItemSummary.

        The badge this item has.

        :param badge: The badge of this ItemSummary.
        :type badge: str
        """

        self._badge = badge

    @property
    def channel_short_code(self):
        """Gets the channel_short_code of this ItemSummary.

        The channel short code, if the item is a channel.

        :return: The channel_short_code of this ItemSummary.
        :rtype: str
        """
        return self._channel_short_code

    @channel_short_code.setter
    def channel_short_code(self, channel_short_code):
        """Sets the channel_short_code of this ItemSummary.

        The channel short code, if the item is a channel.

        :param channel_short_code: The channel_short_code of this ItemSummary.
        :type channel_short_code: str
        """

        self._channel_short_code = channel_short_code

    @property
    def classification(self):
        """Gets the classification of this ItemSummary.


        :return: The classification of this ItemSummary.
        :rtype: ClassificationSummary
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this ItemSummary.


        :param classification: The classification of this ItemSummary.
        :type classification: ClassificationSummary
        """

        self._classification = classification

    @property
    def contextual_title(self):
        """Gets the contextual_title of this ItemSummary.

        A contextually relative title to display after a parent title. Mostly applicable to Season, Episode and Trailer. 

        :return: The contextual_title of this ItemSummary.
        :rtype: str
        """
        return self._contextual_title

    @contextual_title.setter
    def contextual_title(self, contextual_title):
        """Sets the contextual_title of this ItemSummary.

        A contextually relative title to display after a parent title. Mostly applicable to Season, Episode and Trailer. 

        :param contextual_title: The contextual_title of this ItemSummary.
        :type contextual_title: str
        """

        self._contextual_title = contextual_title

    @property
    def custom_fields(self):
        """Gets the custom_fields of this ItemSummary.

        A map of custom fields defined by a curator for an item.

        :return: The custom_fields of this ItemSummary.
        :rtype: Dict[str, object]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this ItemSummary.

        A map of custom fields defined by a curator for an item.

        :param custom_fields: The custom_fields of this ItemSummary.
        :type custom_fields: Dict[str, object]
        """

        self._custom_fields = custom_fields

    @property
    def custom_id(self):
        """Gets the custom_id of this ItemSummary.

        A custom identifier for this item. For example the id for this item under a different content system. 

        :return: The custom_id of this ItemSummary.
        :rtype: str
        """
        return self._custom_id

    @custom_id.setter
    def custom_id(self, custom_id):
        """Sets the custom_id of this ItemSummary.

        A custom identifier for this item. For example the id for this item under a different content system. 

        :param custom_id: The custom_id of this ItemSummary.
        :type custom_id: str
        """

        self._custom_id = custom_id

    @property
    def duration(self):
        """Gets the duration of this ItemSummary.

        The duration of the media in seconds.

        :return: The duration of this ItemSummary.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ItemSummary.

        The duration of the media in seconds.

        :param duration: The duration of this ItemSummary.
        :type duration: int
        """
        if duration is not None and duration < 0:
            raise ValueError("Invalid value for `duration`, must be a value greater than or equal to `0`")

        self._duration = duration

    @property
    def episode_count(self):
        """Gets the episode_count of this ItemSummary.

        The number of episodes in the season, if the item is a season.

        :return: The episode_count of this ItemSummary.
        :rtype: int
        """
        return self._episode_count

    @episode_count.setter
    def episode_count(self, episode_count):
        """Sets the episode_count of this ItemSummary.

        The number of episodes in the season, if the item is a season.

        :param episode_count: The episode_count of this ItemSummary.
        :type episode_count: int
        """

        self._episode_count = episode_count

    @property
    def episode_name(self):
        """Gets the episode_name of this ItemSummary.

        The full name of an episode.

        :return: The episode_name of this ItemSummary.
        :rtype: str
        """
        return self._episode_name

    @episode_name.setter
    def episode_name(self, episode_name):
        """Sets the episode_name of this ItemSummary.

        The full name of an episode.

        :param episode_name: The episode_name of this ItemSummary.
        :type episode_name: str
        """

        self._episode_name = episode_name

    @property
    def episode_number(self):
        """Gets the episode_number of this ItemSummary.

        The number of an episode, if the item is an episode.

        :return: The episode_number of this ItemSummary.
        :rtype: int
        """
        return self._episode_number

    @episode_number.setter
    def episode_number(self, episode_number):
        """Sets the episode_number of this ItemSummary.

        The number of an episode, if the item is an episode.

        :param episode_number: The episode_number of this ItemSummary.
        :type episode_number: int
        """

        self._episode_number = episode_number

    @property
    def genres(self):
        """Gets the genres of this ItemSummary.

        The array of genres this item belongs to.

        :return: The genres of this ItemSummary.
        :rtype: List[str]
        """
        return self._genres

    @genres.setter
    def genres(self, genres):
        """Sets the genres of this ItemSummary.

        The array of genres this item belongs to.

        :param genres: The genres of this ItemSummary.
        :type genres: List[str]
        """

        self._genres = genres

    @property
    def has_closed_captions(self):
        """Gets the has_closed_captions of this ItemSummary.

        Whether closed captioning is available.

        :return: The has_closed_captions of this ItemSummary.
        :rtype: bool
        """
        return self._has_closed_captions

    @has_closed_captions.setter
    def has_closed_captions(self, has_closed_captions):
        """Sets the has_closed_captions of this ItemSummary.

        Whether closed captioning is available.

        :param has_closed_captions: The has_closed_captions of this ItemSummary.
        :type has_closed_captions: bool
        """

        self._has_closed_captions = has_closed_captions

    @property
    def id(self):
        """Gets the id of this ItemSummary.

        Unique identifier for an Item

        :return: The id of this ItemSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ItemSummary.

        Unique identifier for an Item

        :param id: The id of this ItemSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def images(self):
        """Gets the images of this ItemSummary.


        :return: The images of this ItemSummary.
        :rtype: Dict[str, str]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this ItemSummary.


        :param images: The images of this ItemSummary.
        :type images: Dict[str, str]
        """

        self._images = images

    @property
    def offers(self):
        """Gets the offers of this ItemSummary.

        The array of available offers for this item.

        :return: The offers of this ItemSummary.
        :rtype: List[Offer]
        """
        return self._offers

    @offers.setter
    def offers(self, offers):
        """Sets the offers of this ItemSummary.

        The array of available offers for this item.

        :param offers: The offers of this ItemSummary.
        :type offers: List[Offer]
        """

        self._offers = offers

    @property
    def path(self):
        """Gets the path of this ItemSummary.

        The path to the detail page of this item. Can be used to load the item detail page via the /page endpoint.

        :return: The path of this ItemSummary.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ItemSummary.

        The path to the detail page of this item. Can be used to load the item detail page via the /page endpoint.

        :param path: The path of this ItemSummary.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def release_year(self):
        """Gets the release_year of this ItemSummary.

        The year this item was released

        :return: The release_year of this ItemSummary.
        :rtype: int
        """
        return self._release_year

    @release_year.setter
    def release_year(self, release_year):
        """Sets the release_year of this ItemSummary.

        The year this item was released

        :param release_year: The release_year of this ItemSummary.
        :type release_year: int
        """

        self._release_year = release_year

    @property
    def scopes(self):
        """Gets the scopes of this ItemSummary.

        The scopes for this item

        :return: The scopes of this ItemSummary.
        :rtype: List[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this ItemSummary.

        The scopes for this item

        :param scopes: The scopes of this ItemSummary.
        :type scopes: List[str]
        """

        self._scopes = scopes

    @property
    def season_id(self):
        """Gets the season_id of this ItemSummary.

        The identifier of the season this item belongs to, if the item is an episode.

        :return: The season_id of this ItemSummary.
        :rtype: str
        """
        return self._season_id

    @season_id.setter
    def season_id(self, season_id):
        """Sets the season_id of this ItemSummary.

        The identifier of the season this item belongs to, if the item is an episode.

        :param season_id: The season_id of this ItemSummary.
        :type season_id: str
        """

        self._season_id = season_id

    @property
    def season_number(self):
        """Gets the season_number of this ItemSummary.

        The number of a season, if the item is a season.

        :return: The season_number of this ItemSummary.
        :rtype: int
        """
        return self._season_number

    @season_number.setter
    def season_number(self, season_number):
        """Sets the season_number of this ItemSummary.

        The number of a season, if the item is a season.

        :param season_number: The season_number of this ItemSummary.
        :type season_number: int
        """

        self._season_number = season_number

    @property
    def short_description(self):
        """Gets the short_description of this ItemSummary.

        A truncated description of the item

        :return: The short_description of this ItemSummary.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this ItemSummary.

        A truncated description of the item

        :param short_description: The short_description of this ItemSummary.
        :type short_description: str
        """

        self._short_description = short_description

    @property
    def show_id(self):
        """Gets the show_id of this ItemSummary.

        The identifier of the show this item belongs to, if the item is a season or episode.

        :return: The show_id of this ItemSummary.
        :rtype: str
        """
        return self._show_id

    @show_id.setter
    def show_id(self, show_id):
        """Sets the show_id of this ItemSummary.

        The identifier of the show this item belongs to, if the item is a season or episode.

        :param show_id: The show_id of this ItemSummary.
        :type show_id: str
        """

        self._show_id = show_id

    @property
    def show_title(self):
        """Gets the show_title of this ItemSummary.


        :return: The show_title of this ItemSummary.
        :rtype: str
        """
        return self._show_title

    @show_title.setter
    def show_title(self, show_title):
        """Sets the show_title of this ItemSummary.


        :param show_title: The show_title of this ItemSummary.
        :type show_title: str
        """

        self._show_title = show_title

    @property
    def subtype(self):
        """Gets the subtype of this ItemSummary.

        Subtype of the item. Mainly used to identify different types when `type` is `customAsset` 

        :return: The subtype of this ItemSummary.
        :rtype: str
        """
        return self._subtype

    @subtype.setter
    def subtype(self, subtype):
        """Sets the subtype of this ItemSummary.

        Subtype of the item. Mainly used to identify different types when `type` is `customAsset` 

        :param subtype: The subtype of this ItemSummary.
        :type subtype: str
        """

        self._subtype = subtype

    @property
    def tagline(self):
        """Gets the tagline of this ItemSummary.

        The tagline of the item

        :return: The tagline of this ItemSummary.
        :rtype: str
        """
        return self._tagline

    @tagline.setter
    def tagline(self, tagline):
        """Sets the tagline of this ItemSummary.

        The tagline of the item

        :param tagline: The tagline of this ItemSummary.
        :type tagline: str
        """

        self._tagline = tagline

    @property
    def themes(self):
        """Gets the themes of this ItemSummary.

        Gets themes associated with the item

        :return: The themes of this ItemSummary.
        :rtype: List[Theme]
        """
        return self._themes

    @themes.setter
    def themes(self, themes):
        """Sets the themes of this ItemSummary.

        Gets themes associated with the item

        :param themes: The themes of this ItemSummary.
        :type themes: List[Theme]
        """

        self._themes = themes

    @property
    def title(self):
        """Gets the title of this ItemSummary.

        The display title of the item.

        :return: The title of this ItemSummary.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ItemSummary.

        The display title of the item.

        :param title: The title of this ItemSummary.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this ItemSummary.

        The type of item

        :return: The type of this ItemSummary.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ItemSummary.

        The type of item

        :param type: The type of this ItemSummary.
        :type type: str
        """
        allowed_values = ["movie", "show", "season", "episode", "program", "link", "trailer", "channel", "customAsset"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def watch_path(self):
        """Gets the watch_path of this ItemSummary.

        The path to watch this item, if the item is a watchable type, e.g. a `movie`, `program` and `episode`.

        :return: The watch_path of this ItemSummary.
        :rtype: str
        """
        return self._watch_path

    @watch_path.setter
    def watch_path(self, watch_path):
        """Sets the watch_path of this ItemSummary.

        The path to watch this item, if the item is a watchable type, e.g. a `movie`, `program` and `episode`.

        :param watch_path: The watch_path of this ItemSummary.
        :type watch_path: str
        """

        self._watch_path = watch_path
