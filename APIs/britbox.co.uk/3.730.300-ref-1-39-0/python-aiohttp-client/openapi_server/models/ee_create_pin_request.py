# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EeCreatePinRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, msisdn: str=None, tracking_header: str=None):
        """EeCreatePinRequest - a model defined in OpenAPI

        :param access_token: The access_token of this EeCreatePinRequest.
        :param msisdn: The msisdn of this EeCreatePinRequest.
        :param tracking_header: The tracking_header of this EeCreatePinRequest.
        """
        self.openapi_types = {
            'access_token': str,
            'msisdn': str,
            'tracking_header': str
        }

        self.attribute_map = {
            'access_token': 'accessToken',
            'msisdn': 'msisdn',
            'tracking_header': 'trackingHeader'
        }

        self._access_token = access_token
        self._msisdn = msisdn
        self._tracking_header = tracking_header

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EeCreatePinRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EeCreatePinRequest of this EeCreatePinRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this EeCreatePinRequest.

        EE API authorization Token received from GET /ee/token/create.

        :return: The access_token of this EeCreatePinRequest.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this EeCreatePinRequest.

        EE API authorization Token received from GET /ee/token/create.

        :param access_token: The access_token of this EeCreatePinRequest.
        :type access_token: str
        """
        if access_token is None:
            raise ValueError("Invalid value for `access_token`, must not be `None`")

        self._access_token = access_token

    @property
    def msisdn(self):
        """Gets the msisdn of this EeCreatePinRequest.

        The msisdn.

        :return: The msisdn of this EeCreatePinRequest.
        :rtype: str
        """
        return self._msisdn

    @msisdn.setter
    def msisdn(self, msisdn):
        """Sets the msisdn of this EeCreatePinRequest.

        The msisdn.

        :param msisdn: The msisdn of this EeCreatePinRequest.
        :type msisdn: str
        """
        if msisdn is None:
            raise ValueError("Invalid value for `msisdn`, must not be `None`")

        self._msisdn = msisdn

    @property
    def tracking_header(self):
        """Gets the tracking_header of this EeCreatePinRequest.

        trackingHeader

        :return: The tracking_header of this EeCreatePinRequest.
        :rtype: str
        """
        return self._tracking_header

    @tracking_header.setter
    def tracking_header(self, tracking_header):
        """Sets the tracking_header of this EeCreatePinRequest.

        trackingHeader

        :param tracking_header: The tracking_header of this EeCreatePinRequest.
        :type tracking_header: str
        """

        self._tracking_header = tracking_header
