# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ItvEntitlementPlan(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost: int=None, interval: str=None, trial_length: int=None, type: str=None):
        """ItvEntitlementPlan - a model defined in OpenAPI

        :param cost: The cost of this ItvEntitlementPlan.
        :param interval: The interval of this ItvEntitlementPlan.
        :param trial_length: The trial_length of this ItvEntitlementPlan.
        :param type: The type of this ItvEntitlementPlan.
        """
        self.openapi_types = {
            'cost': int,
            'interval': str,
            'trial_length': int,
            'type': str
        }

        self.attribute_map = {
            'cost': 'cost',
            'interval': 'interval',
            'trial_length': 'trialLength',
            'type': 'type'
        }

        self._cost = cost
        self._interval = interval
        self._trial_length = trial_length
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItvEntitlementPlan':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItvEntitlementPlan of this ItvEntitlementPlan.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost(self):
        """Gets the cost of this ItvEntitlementPlan.

        Source platform of purchase.

        :return: The cost of this ItvEntitlementPlan.
        :rtype: int
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this ItvEntitlementPlan.

        Source platform of purchase.

        :param cost: The cost of this ItvEntitlementPlan.
        :type cost: int
        """
        if cost is None:
            raise ValueError("Invalid value for `cost`, must not be `None`")

        self._cost = cost

    @property
    def interval(self):
        """Gets the interval of this ItvEntitlementPlan.

        The type of billing period used.

        :return: The interval of this ItvEntitlementPlan.
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this ItvEntitlementPlan.

        The type of billing period used.

        :param interval: The interval of this ItvEntitlementPlan.
        :type interval: str
        """
        allowed_values = ["day", "week", "month", "year", "none"]  # noqa: E501
        if interval not in allowed_values:
            raise ValueError(
                "Invalid value for `interval` ({0}), must be one of {1}"
                .format(interval, allowed_values)
            )

        self._interval = interval

    @property
    def trial_length(self):
        """Gets the trial_length of this ItvEntitlementPlan.

        Given the `interval` this is how frequently it will run. e.g. every 2 weeks.

        :return: The trial_length of this ItvEntitlementPlan.
        :rtype: int
        """
        return self._trial_length

    @trial_length.setter
    def trial_length(self, trial_length):
        """Sets the trial_length of this ItvEntitlementPlan.

        Given the `interval` this is how frequently it will run. e.g. every 2 weeks.

        :param trial_length: The trial_length of this ItvEntitlementPlan.
        :type trial_length: int
        """
        if trial_length is None:
            raise ValueError("Invalid value for `trial_length`, must not be `None`")

        self._trial_length = trial_length

    @property
    def type(self):
        """Gets the type of this ItvEntitlementPlan.

        Type of the plan.

        :return: The type of this ItvEntitlementPlan.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ItvEntitlementPlan.

        Type of the plan.

        :param type: The type of this ItvEntitlementPlan.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
