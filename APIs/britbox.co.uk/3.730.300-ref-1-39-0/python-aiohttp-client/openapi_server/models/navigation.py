# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nav_entry import NavEntry
from openapi_server import util


class Navigation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: NavEntry=None, copyright: str=None, custom_fields: Dict[str, object]=None, footer: NavEntry=None, header: List[NavEntry]=None, mobile: NavEntry=None):
        """Navigation - a model defined in OpenAPI

        :param account: The account of this Navigation.
        :param copyright: The copyright of this Navigation.
        :param custom_fields: The custom_fields of this Navigation.
        :param footer: The footer of this Navigation.
        :param header: The header of this Navigation.
        :param mobile: The mobile of this Navigation.
        """
        self.openapi_types = {
            'account': NavEntry,
            'copyright': str,
            'custom_fields': Dict[str, object],
            'footer': NavEntry,
            'header': List[NavEntry],
            'mobile': NavEntry
        }

        self.attribute_map = {
            'account': 'account',
            'copyright': 'copyright',
            'custom_fields': 'customFields',
            'footer': 'footer',
            'header': 'header',
            'mobile': 'mobile'
        }

        self._account = account
        self._copyright = copyright
        self._custom_fields = custom_fields
        self._footer = footer
        self._header = header
        self._mobile = mobile

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Navigation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Navigation of this Navigation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this Navigation.


        :return: The account of this Navigation.
        :rtype: NavEntry
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this Navigation.


        :param account: The account of this Navigation.
        :type account: NavEntry
        """

        self._account = account

    @property
    def copyright(self):
        """Gets the copyright of this Navigation.

        Copyright information.

        :return: The copyright of this Navigation.
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this Navigation.

        Copyright information.

        :param copyright: The copyright of this Navigation.
        :type copyright: str
        """

        self._copyright = copyright

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Navigation.

        A map of custom fields defined by a curator for navigation.

        :return: The custom_fields of this Navigation.
        :rtype: Dict[str, object]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Navigation.

        A map of custom fields defined by a curator for navigation.

        :param custom_fields: The custom_fields of this Navigation.
        :type custom_fields: Dict[str, object]
        """

        self._custom_fields = custom_fields

    @property
    def footer(self):
        """Gets the footer of this Navigation.


        :return: The footer of this Navigation.
        :rtype: NavEntry
        """
        return self._footer

    @footer.setter
    def footer(self, footer):
        """Sets the footer of this Navigation.


        :param footer: The footer of this Navigation.
        :type footer: NavEntry
        """

        self._footer = footer

    @property
    def header(self):
        """Gets the header of this Navigation.

        The header navigation.

        :return: The header of this Navigation.
        :rtype: List[NavEntry]
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this Navigation.

        The header navigation.

        :param header: The header of this Navigation.
        :type header: List[NavEntry]
        """
        if header is None:
            raise ValueError("Invalid value for `header`, must not be `None`")

        self._header = header

    @property
    def mobile(self):
        """Gets the mobile of this Navigation.


        :return: The mobile of this Navigation.
        :rtype: NavEntry
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this Navigation.


        :param mobile: The mobile of this Navigation.
        :type mobile: NavEntry
        """

        self._mobile = mobile
