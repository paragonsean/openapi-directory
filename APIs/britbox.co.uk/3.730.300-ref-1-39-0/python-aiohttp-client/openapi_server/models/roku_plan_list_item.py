# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RokuPlanListItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, currency: str=None, description: str=None, interval: str=None, interval_count: int=None, nickname: str=None, product: str=None, product_code: str=None, saving_label: str=None, trial_period_days: int=None):
        """RokuPlanListItem - a model defined in OpenAPI

        :param amount: The amount of this RokuPlanListItem.
        :param currency: The currency of this RokuPlanListItem.
        :param description: The description of this RokuPlanListItem.
        :param interval: The interval of this RokuPlanListItem.
        :param interval_count: The interval_count of this RokuPlanListItem.
        :param nickname: The nickname of this RokuPlanListItem.
        :param product: The product of this RokuPlanListItem.
        :param product_code: The product_code of this RokuPlanListItem.
        :param saving_label: The saving_label of this RokuPlanListItem.
        :param trial_period_days: The trial_period_days of this RokuPlanListItem.
        """
        self.openapi_types = {
            'amount': float,
            'currency': str,
            'description': str,
            'interval': str,
            'interval_count': int,
            'nickname': str,
            'product': str,
            'product_code': str,
            'saving_label': str,
            'trial_period_days': int
        }

        self.attribute_map = {
            'amount': 'amount',
            'currency': 'currency',
            'description': 'description',
            'interval': 'interval',
            'interval_count': 'intervalCount',
            'nickname': 'nickname',
            'product': 'product',
            'product_code': 'productCode',
            'saving_label': 'savingLabel',
            'trial_period_days': 'trialPeriodDays'
        }

        self._amount = amount
        self._currency = currency
        self._description = description
        self._interval = interval
        self._interval_count = interval_count
        self._nickname = nickname
        self._product = product
        self._product_code = product_code
        self._saving_label = saving_label
        self._trial_period_days = trial_period_days

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RokuPlanListItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RokuPlanListItem of this RokuPlanListItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this RokuPlanListItem.

        The price of a plan. If a free plan then undefined.

        :return: The amount of this RokuPlanListItem.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this RokuPlanListItem.

        The price of a plan. If a free plan then undefined.

        :param amount: The amount of this RokuPlanListItem.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this RokuPlanListItem.

        The currency a plan is offered in.

        :return: The currency of this RokuPlanListItem.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this RokuPlanListItem.

        The currency a plan is offered in.

        :param currency: The currency of this RokuPlanListItem.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def description(self):
        """Gets the description of this RokuPlanListItem.

        The textual description.

        :return: The description of this RokuPlanListItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RokuPlanListItem.

        The textual description.

        :param description: The description of this RokuPlanListItem.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def interval(self):
        """Gets the interval of this RokuPlanListItem.

        The type of billing period used.

        :return: The interval of this RokuPlanListItem.
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this RokuPlanListItem.

        The type of billing period used.

        :param interval: The interval of this RokuPlanListItem.
        :type interval: str
        """
        allowed_values = ["day", "week", "month", "year", "none"]  # noqa: E501
        if interval not in allowed_values:
            raise ValueError(
                "Invalid value for `interval` ({0}), must be one of {1}"
                .format(interval, allowed_values)
            )

        self._interval = interval

    @property
    def interval_count(self):
        """Gets the interval_count of this RokuPlanListItem.

        Given the `interval` this is how frequently it will run. e.g. every 2 weeks.

        :return: The interval_count of this RokuPlanListItem.
        :rtype: int
        """
        return self._interval_count

    @interval_count.setter
    def interval_count(self, interval_count):
        """Sets the interval_count of this RokuPlanListItem.

        Given the `interval` this is how frequently it will run. e.g. every 2 weeks.

        :param interval_count: The interval_count of this RokuPlanListItem.
        :type interval_count: int
        """
        if interval_count is None:
            raise ValueError("Invalid value for `interval_count`, must not be `None`")

        self._interval_count = interval_count

    @property
    def nickname(self):
        """Gets the nickname of this RokuPlanListItem.

        The title of a plan.

        :return: The nickname of this RokuPlanListItem.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this RokuPlanListItem.

        The title of a plan.

        :param nickname: The nickname of this RokuPlanListItem.
        :type nickname: str
        """
        if nickname is None:
            raise ValueError("Invalid value for `nickname`, must not be `None`")

        self._nickname = nickname

    @property
    def product(self):
        """Gets the product of this RokuPlanListItem.

        The product of a plan.

        :return: The product of this RokuPlanListItem.
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this RokuPlanListItem.

        The product of a plan.

        :param product: The product of this RokuPlanListItem.
        :type product: str
        """
        if product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")

        self._product = product

    @property
    def product_code(self):
        """Gets the product_code of this RokuPlanListItem.

        The identifier of a plan.

        :return: The product_code of this RokuPlanListItem.
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this RokuPlanListItem.

        The identifier of a plan.

        :param product_code: The product_code of this RokuPlanListItem.
        :type product_code: str
        """
        if product_code is None:
            raise ValueError("Invalid value for `product_code`, must not be `None`")

        self._product_code = product_code

    @property
    def saving_label(self):
        """Gets the saving_label of this RokuPlanListItem.

        NA.

        :return: The saving_label of this RokuPlanListItem.
        :rtype: str
        """
        return self._saving_label

    @saving_label.setter
    def saving_label(self, saving_label):
        """Sets the saving_label of this RokuPlanListItem.

        NA.

        :param saving_label: The saving_label of this RokuPlanListItem.
        :type saving_label: str
        """
        if saving_label is None:
            raise ValueError("Invalid value for `saving_label`, must not be `None`")

        self._saving_label = saving_label

    @property
    def trial_period_days(self):
        """Gets the trial_period_days of this RokuPlanListItem.

        How many days a trial period runs for a plan. Only valid if `hasTrialPeriod` is true.

        :return: The trial_period_days of this RokuPlanListItem.
        :rtype: int
        """
        return self._trial_period_days

    @trial_period_days.setter
    def trial_period_days(self, trial_period_days):
        """Sets the trial_period_days of this RokuPlanListItem.

        How many days a trial period runs for a plan. Only valid if `hasTrialPeriod` is true.

        :param trial_period_days: The trial_period_days of this RokuPlanListItem.
        :type trial_period_days: int
        """
        if trial_period_days is None:
            raise ValueError("Invalid value for `trial_period_days`, must not be `None`")

        self._trial_period_days = trial_period_days
