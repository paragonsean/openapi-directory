# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PageSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, is_static: bool=None, is_system_page: bool=None, key: str=None, path: str=None, template: str=None, title: str=None):
        """PageSummary - a model defined in OpenAPI

        :param id: The id of this PageSummary.
        :param is_static: The is_static of this PageSummary.
        :param is_system_page: The is_system_page of this PageSummary.
        :param key: The key of this PageSummary.
        :param path: The path of this PageSummary.
        :param template: The template of this PageSummary.
        :param title: The title of this PageSummary.
        """
        self.openapi_types = {
            'id': str,
            'is_static': bool,
            'is_system_page': bool,
            'key': str,
            'path': str,
            'template': str,
            'title': str
        }

        self.attribute_map = {
            'id': 'id',
            'is_static': 'isStatic',
            'is_system_page': 'isSystemPage',
            'key': 'key',
            'path': 'path',
            'template': 'template',
            'title': 'title'
        }

        self._id = id
        self._is_static = is_static
        self._is_system_page = is_system_page
        self._key = key
        self._path = path
        self._template = template
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PageSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PageSummary of this PageSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this PageSummary.

        Unique identifier for the page.

        :return: The id of this PageSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PageSummary.

        Unique identifier for the page.

        :param id: The id of this PageSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_static(self):
        """Gets the is_static of this PageSummary.

        True if this page is static and doesn't have any dynamic content to load.  Static pages don't need to go back to the page endpoint to load page content instead the page summary loaded with the sitemap should be enough to determine the page template type and render based on this. 

        :return: The is_static of this PageSummary.
        :rtype: bool
        """
        return self._is_static

    @is_static.setter
    def is_static(self, is_static):
        """Sets the is_static of this PageSummary.

        True if this page is static and doesn't have any dynamic content to load.  Static pages don't need to go back to the page endpoint to load page content instead the page summary loaded with the sitemap should be enough to determine the page template type and render based on this. 

        :param is_static: The is_static of this PageSummary.
        :type is_static: bool
        """
        if is_static is None:
            raise ValueError("Invalid value for `is_static`, must not be `None`")

        self._is_static = is_static

    @property
    def is_system_page(self):
        """Gets the is_system_page of this PageSummary.

        True if this page is a system page type.  **DEPRECATED** This property doesn't have any real use in client applications anymore so shouldn't be used. It especially shouldn't be used to determine if a page is static or not. Use the `isStatic` property instead. 

        :return: The is_system_page of this PageSummary.
        :rtype: bool
        """
        return self._is_system_page

    @is_system_page.setter
    def is_system_page(self, is_system_page):
        """Sets the is_system_page of this PageSummary.

        True if this page is a system page type.  **DEPRECATED** This property doesn't have any real use in client applications anymore so shouldn't be used. It especially shouldn't be used to determine if a page is static or not. Use the `isStatic` property instead. 

        :param is_system_page: The is_system_page of this PageSummary.
        :type is_system_page: bool
        """
        if is_system_page is None:
            raise ValueError("Invalid value for `is_system_page`, must not be `None`")

        self._is_system_page = is_system_page

    @property
    def key(self):
        """Gets the key of this PageSummary.

        Key used to lookup a known page.

        :return: The key of this PageSummary.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this PageSummary.

        Key used to lookup a known page.

        :param key: The key of this PageSummary.
        :type key: str
        """

        self._key = key

    @property
    def path(self):
        """Gets the path of this PageSummary.

        Unique path for the page.

        :return: The path of this PageSummary.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this PageSummary.

        Unique path for the page.

        :param path: The path of this PageSummary.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def template(self):
        """Gets the template of this PageSummary.

        Identifier for of the page template to render this page.

        :return: The template of this PageSummary.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this PageSummary.

        Identifier for of the page template to render this page.

        :param template: The template of this PageSummary.
        :type template: str
        """
        if template is None:
            raise ValueError("Invalid value for `template`, must not be `None`")

        self._template = template

    @property
    def title(self):
        """Gets the title of this PageSummary.

        Title of the page.

        :return: The title of this PageSummary.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PageSummary.

        Title of the page.

        :param title: The title of this PageSummary.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
