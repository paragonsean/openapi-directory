# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.item_detail import ItemDetail
from openapi_server.models.item_list import ItemList
from openapi_server.models.page_entry import PageEntry
from openapi_server.models.page_metadata import PageMetadata
from openapi_server.models.theme import Theme
from openapi_server import util


class Page(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, is_static: bool=None, is_system_page: bool=None, key: str=None, path: str=None, template: str=None, title: str=None, custom_fields: Dict[str, object]=None, entries: List[PageEntry]=None, item: ItemDetail=None, list: ItemList=None, metadata: PageMetadata=None, themes: List[Theme]=None):
        """Page - a model defined in OpenAPI

        :param id: The id of this Page.
        :param is_static: The is_static of this Page.
        :param is_system_page: The is_system_page of this Page.
        :param key: The key of this Page.
        :param path: The path of this Page.
        :param template: The template of this Page.
        :param title: The title of this Page.
        :param custom_fields: The custom_fields of this Page.
        :param entries: The entries of this Page.
        :param item: The item of this Page.
        :param list: The list of this Page.
        :param metadata: The metadata of this Page.
        :param themes: The themes of this Page.
        """
        self.openapi_types = {
            'id': str,
            'is_static': bool,
            'is_system_page': bool,
            'key': str,
            'path': str,
            'template': str,
            'title': str,
            'custom_fields': Dict[str, object],
            'entries': List[PageEntry],
            'item': ItemDetail,
            'list': ItemList,
            'metadata': PageMetadata,
            'themes': List[Theme]
        }

        self.attribute_map = {
            'id': 'id',
            'is_static': 'isStatic',
            'is_system_page': 'isSystemPage',
            'key': 'key',
            'path': 'path',
            'template': 'template',
            'title': 'title',
            'custom_fields': 'customFields',
            'entries': 'entries',
            'item': 'item',
            'list': 'list',
            'metadata': 'metadata',
            'themes': 'themes'
        }

        self._id = id
        self._is_static = is_static
        self._is_system_page = is_system_page
        self._key = key
        self._path = path
        self._template = template
        self._title = title
        self._custom_fields = custom_fields
        self._entries = entries
        self._item = item
        self._list = list
        self._metadata = metadata
        self._themes = themes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Page':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Page of this Page.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Page.

        Unique identifier for the page.

        :return: The id of this Page.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Page.

        Unique identifier for the page.

        :param id: The id of this Page.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_static(self):
        """Gets the is_static of this Page.

        True if this page is static and doesn't have any dynamic content to load.  Static pages don't need to go back to the page endpoint to load page content instead the page summary loaded with the sitemap should be enough to determine the page template type and render based on this. 

        :return: The is_static of this Page.
        :rtype: bool
        """
        return self._is_static

    @is_static.setter
    def is_static(self, is_static):
        """Sets the is_static of this Page.

        True if this page is static and doesn't have any dynamic content to load.  Static pages don't need to go back to the page endpoint to load page content instead the page summary loaded with the sitemap should be enough to determine the page template type and render based on this. 

        :param is_static: The is_static of this Page.
        :type is_static: bool
        """
        if is_static is None:
            raise ValueError("Invalid value for `is_static`, must not be `None`")

        self._is_static = is_static

    @property
    def is_system_page(self):
        """Gets the is_system_page of this Page.

        True if this page is a system page type.  **DEPRECATED** This property doesn't have any real use in client applications anymore so shouldn't be used. It especially shouldn't be used to determine if a page is static or not. Use the `isStatic` property instead. 

        :return: The is_system_page of this Page.
        :rtype: bool
        """
        return self._is_system_page

    @is_system_page.setter
    def is_system_page(self, is_system_page):
        """Sets the is_system_page of this Page.

        True if this page is a system page type.  **DEPRECATED** This property doesn't have any real use in client applications anymore so shouldn't be used. It especially shouldn't be used to determine if a page is static or not. Use the `isStatic` property instead. 

        :param is_system_page: The is_system_page of this Page.
        :type is_system_page: bool
        """
        if is_system_page is None:
            raise ValueError("Invalid value for `is_system_page`, must not be `None`")

        self._is_system_page = is_system_page

    @property
    def key(self):
        """Gets the key of this Page.

        Key used to lookup a known page.

        :return: The key of this Page.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Page.

        Key used to lookup a known page.

        :param key: The key of this Page.
        :type key: str
        """

        self._key = key

    @property
    def path(self):
        """Gets the path of this Page.

        Unique path for the page.

        :return: The path of this Page.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Page.

        Unique path for the page.

        :param path: The path of this Page.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def template(self):
        """Gets the template of this Page.

        Identifier for of the page template to render this page.

        :return: The template of this Page.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this Page.

        Identifier for of the page template to render this page.

        :param template: The template of this Page.
        :type template: str
        """
        if template is None:
            raise ValueError("Invalid value for `template`, must not be `None`")

        self._template = template

    @property
    def title(self):
        """Gets the title of this Page.

        Title of the page.

        :return: The title of this Page.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Page.

        Title of the page.

        :param title: The title of this Page.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Page.

        A map of custom fields defined by a curator for a page.

        :return: The custom_fields of this Page.
        :rtype: Dict[str, object]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Page.

        A map of custom fields defined by a curator for a page.

        :param custom_fields: The custom_fields of this Page.
        :type custom_fields: Dict[str, object]
        """

        self._custom_fields = custom_fields

    @property
    def entries(self):
        """Gets the entries of this Page.

        Entries of a page

        :return: The entries of this Page.
        :rtype: List[PageEntry]
        """
        return self._entries

    @entries.setter
    def entries(self, entries):
        """Sets the entries of this Page.

        Entries of a page

        :param entries: The entries of this Page.
        :type entries: List[PageEntry]
        """
        if entries is None:
            raise ValueError("Invalid value for `entries`, must not be `None`")

        self._entries = entries

    @property
    def item(self):
        """Gets the item of this Page.


        :return: The item of this Page.
        :rtype: ItemDetail
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this Page.


        :param item: The item of this Page.
        :type item: ItemDetail
        """

        self._item = item

    @property
    def list(self):
        """Gets the list of this Page.


        :return: The list of this Page.
        :rtype: ItemList
        """
        return self._list

    @list.setter
    def list(self, list):
        """Sets the list of this Page.


        :param list: The list of this Page.
        :type list: ItemList
        """

        self._list = list

    @property
    def metadata(self):
        """Gets the metadata of this Page.


        :return: The metadata of this Page.
        :rtype: PageMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Page.


        :param metadata: The metadata of this Page.
        :type metadata: PageMetadata
        """

        self._metadata = metadata

    @property
    def themes(self):
        """Gets the themes of this Page.


        :return: The themes of this Page.
        :rtype: List[Theme]
        """
        return self._themes

    @themes.setter
    def themes(self, themes):
        """Sets the themes of this Page.


        :param themes: The themes of this Page.
        :type themes: List[Theme]
        """

        self._themes = themes
