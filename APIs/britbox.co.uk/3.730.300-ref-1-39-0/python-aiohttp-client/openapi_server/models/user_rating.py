# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserRating(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, item_id: str=None, rating: int=None):
        """UserRating - a model defined in OpenAPI

        :param item_id: The item_id of this UserRating.
        :param rating: The rating of this UserRating.
        """
        self.openapi_types = {
            'item_id': str,
            'rating': int
        }

        self.attribute_map = {
            'item_id': 'itemId',
            'rating': 'rating'
        }

        self._item_id = item_id
        self._rating = rating

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserRating':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserRating of this UserRating.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def item_id(self):
        """Gets the item_id of this UserRating.

        The id of the item rated.

        :return: The item_id of this UserRating.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this UserRating.

        The id of the item rated.

        :param item_id: The item_id of this UserRating.
        :type item_id: str
        """
        if item_id is None:
            raise ValueError("Invalid value for `item_id`, must not be `None`")

        self._item_id = item_id

    @property
    def rating(self):
        """Gets the rating of this UserRating.

        The rating out of 10

        :return: The rating of this UserRating.
        :rtype: int
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this UserRating.

        The rating out of 10

        :param rating: The rating of this UserRating.
        :type rating: int
        """
        if rating is None:
            raise ValueError("Invalid value for `rating`, must not be `None`")
        if rating is not None and rating > 10:
            raise ValueError("Invalid value for `rating`, must be a value less than or equal to `10`")
        if rating is not None and rating < 1:
            raise ValueError("Invalid value for `rating`, must be a value greater than or equal to `1`")

        self._rating = rating
