# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Subscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, end_date: datetime=None, id: str=None, is_trial_period: bool=None, plan_id: str=None, start_date: datetime=None, status: str=None):
        """Subscription - a model defined in OpenAPI

        :param code: The code of this Subscription.
        :param end_date: The end_date of this Subscription.
        :param id: The id of this Subscription.
        :param is_trial_period: The is_trial_period of this Subscription.
        :param plan_id: The plan_id of this Subscription.
        :param start_date: The start_date of this Subscription.
        :param status: The status of this Subscription.
        """
        self.openapi_types = {
            'code': str,
            'end_date': datetime,
            'id': str,
            'is_trial_period': bool,
            'plan_id': str,
            'start_date': datetime,
            'status': str
        }

        self.attribute_map = {
            'code': 'code',
            'end_date': 'endDate',
            'id': 'id',
            'is_trial_period': 'isTrialPeriod',
            'plan_id': 'planId',
            'start_date': 'startDate',
            'status': 'status'
        }

        self._code = code
        self._end_date = end_date
        self._id = id
        self._is_trial_period = is_trial_period
        self._plan_id = plan_id
        self._start_date = start_date
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subscription of this Subscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Subscription.

        The unique subscription code.

        :return: The code of this Subscription.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Subscription.

        The unique subscription code.

        :param code: The code of this Subscription.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def end_date(self):
        """Gets the end_date of this Subscription.

        The end date of a subscription.  After this date the subscription will become expired. If this is a recurring subscription which has not been cancelled then the account holder will be automatically charged and a new subscription will be activated.  Some subscriptions may not have an end date, in which case this property will not exist. 

        :return: The end_date of this Subscription.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Subscription.

        The end date of a subscription.  After this date the subscription will become expired. If this is a recurring subscription which has not been cancelled then the account holder will be automatically charged and a new subscription will be activated.  Some subscriptions may not have an end date, in which case this property will not exist. 

        :param end_date: The end_date of this Subscription.
        :type end_date: datetime
        """

        self._end_date = end_date

    @property
    def id(self):
        """Gets the id of this Subscription.

        Unique identifier for the subscription.

        :return: The id of this Subscription.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Subscription.

        Unique identifier for the subscription.

        :param id: The id of this Subscription.
        :type id: str
        """

        self._id = id

    @property
    def is_trial_period(self):
        """Gets the is_trial_period of this Subscription.

        True if a subscription is in its trial period, false if not.

        :return: The is_trial_period of this Subscription.
        :rtype: bool
        """
        return self._is_trial_period

    @is_trial_period.setter
    def is_trial_period(self, is_trial_period):
        """Sets the is_trial_period of this Subscription.

        True if a subscription is in its trial period, false if not.

        :param is_trial_period: The is_trial_period of this Subscription.
        :type is_trial_period: bool
        """
        if is_trial_period is None:
            raise ValueError("Invalid value for `is_trial_period`, must not be `None`")

        self._is_trial_period = is_trial_period

    @property
    def plan_id(self):
        """Gets the plan_id of this Subscription.

        The plan a subscription belongs to.

        :return: The plan_id of this Subscription.
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this Subscription.

        The plan a subscription belongs to.

        :param plan_id: The plan_id of this Subscription.
        :type plan_id: str
        """
        if plan_id is None:
            raise ValueError("Invalid value for `plan_id`, must not be `None`")

        self._plan_id = plan_id

    @property
    def start_date(self):
        """Gets the start_date of this Subscription.

        The start date of a subscription.

        :return: The start_date of this Subscription.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Subscription.

        The start date of a subscription.

        :param start_date: The start_date of this Subscription.
        :type start_date: datetime
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")

        self._start_date = start_date

    @property
    def status(self):
        """Gets the status of this Subscription.

        The status of a subscription.

        :return: The status of this Subscription.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Subscription.

        The status of a subscription.

        :param status: The status of this Subscription.
        :type status: str
        """
        allowed_values = ["Active", "Cancelled", "Lapsed", "Expired", "None"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
