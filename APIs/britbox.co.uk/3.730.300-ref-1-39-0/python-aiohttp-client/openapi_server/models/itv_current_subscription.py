# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ItvCurrentSubscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cancel_at_period_end: bool=None, collection_method: str=None, created: int=None, current_period_end: int=None, current_period_start: int=None, plan: object=None, status: str=None):
        """ItvCurrentSubscription - a model defined in OpenAPI

        :param cancel_at_period_end: The cancel_at_period_end of this ItvCurrentSubscription.
        :param collection_method: The collection_method of this ItvCurrentSubscription.
        :param created: The created of this ItvCurrentSubscription.
        :param current_period_end: The current_period_end of this ItvCurrentSubscription.
        :param current_period_start: The current_period_start of this ItvCurrentSubscription.
        :param plan: The plan of this ItvCurrentSubscription.
        :param status: The status of this ItvCurrentSubscription.
        """
        self.openapi_types = {
            'cancel_at_period_end': bool,
            'collection_method': str,
            'created': int,
            'current_period_end': int,
            'current_period_start': int,
            'plan': object,
            'status': str
        }

        self.attribute_map = {
            'cancel_at_period_end': 'cancelAtPeriodEnd',
            'collection_method': 'collectionMethod',
            'created': 'created',
            'current_period_end': 'currentPeriodEnd',
            'current_period_start': 'currentPeriodStart',
            'plan': 'plan',
            'status': 'status'
        }

        self._cancel_at_period_end = cancel_at_period_end
        self._collection_method = collection_method
        self._created = created
        self._current_period_end = current_period_end
        self._current_period_start = current_period_start
        self._plan = plan
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItvCurrentSubscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItvCurrentSubscription of this ItvCurrentSubscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cancel_at_period_end(self):
        """Gets the cancel_at_period_end of this ItvCurrentSubscription.

        The cancellation period end flag.

        :return: The cancel_at_period_end of this ItvCurrentSubscription.
        :rtype: bool
        """
        return self._cancel_at_period_end

    @cancel_at_period_end.setter
    def cancel_at_period_end(self, cancel_at_period_end):
        """Sets the cancel_at_period_end of this ItvCurrentSubscription.

        The cancellation period end flag.

        :param cancel_at_period_end: The cancel_at_period_end of this ItvCurrentSubscription.
        :type cancel_at_period_end: bool
        """
        if cancel_at_period_end is None:
            raise ValueError("Invalid value for `cancel_at_period_end`, must not be `None`")

        self._cancel_at_period_end = cancel_at_period_end

    @property
    def collection_method(self):
        """Gets the collection_method of this ItvCurrentSubscription.

        The description of payment collection method.

        :return: The collection_method of this ItvCurrentSubscription.
        :rtype: str
        """
        return self._collection_method

    @collection_method.setter
    def collection_method(self, collection_method):
        """Sets the collection_method of this ItvCurrentSubscription.

        The description of payment collection method.

        :param collection_method: The collection_method of this ItvCurrentSubscription.
        :type collection_method: str
        """
        if collection_method is None:
            raise ValueError("Invalid value for `collection_method`, must not be `None`")

        self._collection_method = collection_method

    @property
    def created(self):
        """Gets the created of this ItvCurrentSubscription.

        The creation timestamp.

        :return: The created of this ItvCurrentSubscription.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ItvCurrentSubscription.

        The creation timestamp.

        :param created: The created of this ItvCurrentSubscription.
        :type created: int
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def current_period_end(self):
        """Gets the current_period_end of this ItvCurrentSubscription.

        The end of period timestamp.

        :return: The current_period_end of this ItvCurrentSubscription.
        :rtype: int
        """
        return self._current_period_end

    @current_period_end.setter
    def current_period_end(self, current_period_end):
        """Sets the current_period_end of this ItvCurrentSubscription.

        The end of period timestamp.

        :param current_period_end: The current_period_end of this ItvCurrentSubscription.
        :type current_period_end: int
        """
        if current_period_end is None:
            raise ValueError("Invalid value for `current_period_end`, must not be `None`")

        self._current_period_end = current_period_end

    @property
    def current_period_start(self):
        """Gets the current_period_start of this ItvCurrentSubscription.

        The start of period timestamp.

        :return: The current_period_start of this ItvCurrentSubscription.
        :rtype: int
        """
        return self._current_period_start

    @current_period_start.setter
    def current_period_start(self, current_period_start):
        """Sets the current_period_start of this ItvCurrentSubscription.

        The start of period timestamp.

        :param current_period_start: The current_period_start of this ItvCurrentSubscription.
        :type current_period_start: int
        """
        if current_period_start is None:
            raise ValueError("Invalid value for `current_period_start`, must not be `None`")

        self._current_period_start = current_period_start

    @property
    def plan(self):
        """Gets the plan of this ItvCurrentSubscription.

        The plan used during subsribing.

        :return: The plan of this ItvCurrentSubscription.
        :rtype: object
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this ItvCurrentSubscription.

        The plan used during subsribing.

        :param plan: The plan of this ItvCurrentSubscription.
        :type plan: object
        """
        if plan is None:
            raise ValueError("Invalid value for `plan`, must not be `None`")

        self._plan = plan

    @property
    def status(self):
        """Gets the status of this ItvCurrentSubscription.

        The status of subscription.

        :return: The status of this ItvCurrentSubscription.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ItvCurrentSubscription.

        The status of subscription.

        :param status: The status of this ItvCurrentSubscription.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
