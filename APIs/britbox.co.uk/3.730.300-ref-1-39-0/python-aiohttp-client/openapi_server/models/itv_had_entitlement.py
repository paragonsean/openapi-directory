# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ItvHadEntitlement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, has_had_entitlements: bool=None):
        """ItvHadEntitlement - a model defined in OpenAPI

        :param has_had_entitlements: The has_had_entitlements of this ItvHadEntitlement.
        """
        self.openapi_types = {
            'has_had_entitlements': bool
        }

        self.attribute_map = {
            'has_had_entitlements': 'hasHadEntitlements'
        }

        self._has_had_entitlements = has_had_entitlements

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItvHadEntitlement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItvHadEntitlement of this ItvHadEntitlement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def has_had_entitlements(self):
        """Gets the has_had_entitlements of this ItvHadEntitlement.

        whether the user has been previously entitlement

        :return: The has_had_entitlements of this ItvHadEntitlement.
        :rtype: bool
        """
        return self._has_had_entitlements

    @has_had_entitlements.setter
    def has_had_entitlements(self, has_had_entitlements):
        """Sets the has_had_entitlements of this ItvHadEntitlement.

        whether the user has been previously entitlement

        :param has_had_entitlements: The has_had_entitlements of this ItvHadEntitlement.
        :type has_had_entitlements: bool
        """
        if has_had_entitlements is None:
            raise ValueError("Invalid value for `has_had_entitlements`, must not be `None`")

        self._has_had_entitlements = has_had_entitlements
