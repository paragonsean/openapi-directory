# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.roku_plan_list_item import RokuPlanListItem
from openapi_server import util


class RokuPlans(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, plans: List[RokuPlanListItem]=None, terms_and_conditions: str=None):
        """RokuPlans - a model defined in OpenAPI

        :param plans: The plans of this RokuPlans.
        :param terms_and_conditions: The terms_and_conditions of this RokuPlans.
        """
        self.openapi_types = {
            'plans': List[RokuPlanListItem],
            'terms_and_conditions': str
        }

        self.attribute_map = {
            'plans': 'plans',
            'terms_and_conditions': 'termsAndConditions'
        }

        self._plans = plans
        self._terms_and_conditions = terms_and_conditions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RokuPlans':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RokuPlans of this RokuPlans.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def plans(self):
        """Gets the plans of this RokuPlans.

        The list of available plans.

        :return: The plans of this RokuPlans.
        :rtype: List[RokuPlanListItem]
        """
        return self._plans

    @plans.setter
    def plans(self, plans):
        """Sets the plans of this RokuPlans.

        The list of available plans.

        :param plans: The plans of this RokuPlans.
        :type plans: List[RokuPlanListItem]
        """
        if plans is None:
            raise ValueError("Invalid value for `plans`, must not be `None`")

        self._plans = plans

    @property
    def terms_and_conditions(self):
        """Gets the terms_and_conditions of this RokuPlans.

        Details of terms and conditions of the plan.

        :return: The terms_and_conditions of this RokuPlans.
        :rtype: str
        """
        return self._terms_and_conditions

    @terms_and_conditions.setter
    def terms_and_conditions(self, terms_and_conditions):
        """Sets the terms_and_conditions of this RokuPlans.

        Details of terms and conditions of the plan.

        :param terms_and_conditions: The terms_and_conditions of this RokuPlans.
        :type terms_and_conditions: str
        """
        if terms_and_conditions is None:
            raise ValueError("Invalid value for `terms_and_conditions`, must not be `None`")

        self._terms_and_conditions = terms_and_conditions
