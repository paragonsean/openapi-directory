# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Plan(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alias: str=None, benefits: List[str]=None, billing_period_frequency: int=None, billing_period_type: str=None, currency: str=None, custom_fields: Dict[str, object]=None, has_trial_period: bool=None, id: str=None, is_active: bool=None, is_featured: bool=None, is_private: bool=None, price: float=None, revenue_type: str=None, subscription_code: str=None, tagline: str=None, terms_and_conditions: str=None, title: str=None, trial_period_days: int=None, type: str=None):
        """Plan - a model defined in OpenAPI

        :param alias: The alias of this Plan.
        :param benefits: The benefits of this Plan.
        :param billing_period_frequency: The billing_period_frequency of this Plan.
        :param billing_period_type: The billing_period_type of this Plan.
        :param currency: The currency of this Plan.
        :param custom_fields: The custom_fields of this Plan.
        :param has_trial_period: The has_trial_period of this Plan.
        :param id: The id of this Plan.
        :param is_active: The is_active of this Plan.
        :param is_featured: The is_featured of this Plan.
        :param is_private: The is_private of this Plan.
        :param price: The price of this Plan.
        :param revenue_type: The revenue_type of this Plan.
        :param subscription_code: The subscription_code of this Plan.
        :param tagline: The tagline of this Plan.
        :param terms_and_conditions: The terms_and_conditions of this Plan.
        :param title: The title of this Plan.
        :param trial_period_days: The trial_period_days of this Plan.
        :param type: The type of this Plan.
        """
        self.openapi_types = {
            'alias': str,
            'benefits': List[str],
            'billing_period_frequency': int,
            'billing_period_type': str,
            'currency': str,
            'custom_fields': Dict[str, object],
            'has_trial_period': bool,
            'id': str,
            'is_active': bool,
            'is_featured': bool,
            'is_private': bool,
            'price': float,
            'revenue_type': str,
            'subscription_code': str,
            'tagline': str,
            'terms_and_conditions': str,
            'title': str,
            'trial_period_days': int,
            'type': str
        }

        self.attribute_map = {
            'alias': 'alias',
            'benefits': 'benefits',
            'billing_period_frequency': 'billingPeriodFrequency',
            'billing_period_type': 'billingPeriodType',
            'currency': 'currency',
            'custom_fields': 'customFields',
            'has_trial_period': 'hasTrialPeriod',
            'id': 'id',
            'is_active': 'isActive',
            'is_featured': 'isFeatured',
            'is_private': 'isPrivate',
            'price': 'price',
            'revenue_type': 'revenueType',
            'subscription_code': 'subscriptionCode',
            'tagline': 'tagline',
            'terms_and_conditions': 'termsAndConditions',
            'title': 'title',
            'trial_period_days': 'trialPeriodDays',
            'type': 'type'
        }

        self._alias = alias
        self._benefits = benefits
        self._billing_period_frequency = billing_period_frequency
        self._billing_period_type = billing_period_type
        self._currency = currency
        self._custom_fields = custom_fields
        self._has_trial_period = has_trial_period
        self._id = id
        self._is_active = is_active
        self._is_featured = is_featured
        self._is_private = is_private
        self._price = price
        self._revenue_type = revenue_type
        self._subscription_code = subscription_code
        self._tagline = tagline
        self._terms_and_conditions = terms_and_conditions
        self._title = title
        self._trial_period_days = trial_period_days
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Plan':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Plan of this Plan.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alias(self):
        """Gets the alias of this Plan.

        An alias for a plan.

        :return: The alias of this Plan.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this Plan.

        An alias for a plan.

        :param alias: The alias of this Plan.
        :type alias: str
        """
        if alias is None:
            raise ValueError("Invalid value for `alias`, must not be `None`")

        self._alias = alias

    @property
    def benefits(self):
        """Gets the benefits of this Plan.

        The list of benefits to display for a plan.

        :return: The benefits of this Plan.
        :rtype: List[str]
        """
        return self._benefits

    @benefits.setter
    def benefits(self, benefits):
        """Sets the benefits of this Plan.

        The list of benefits to display for a plan.

        :param benefits: The benefits of this Plan.
        :type benefits: List[str]
        """
        if benefits is None:
            raise ValueError("Invalid value for `benefits`, must not be `None`")

        self._benefits = benefits

    @property
    def billing_period_frequency(self):
        """Gets the billing_period_frequency of this Plan.

        Given the `billingPeriodType` this is how frequently it will run. e.g. every 2 weeks.

        :return: The billing_period_frequency of this Plan.
        :rtype: int
        """
        return self._billing_period_frequency

    @billing_period_frequency.setter
    def billing_period_frequency(self, billing_period_frequency):
        """Sets the billing_period_frequency of this Plan.

        Given the `billingPeriodType` this is how frequently it will run. e.g. every 2 weeks.

        :param billing_period_frequency: The billing_period_frequency of this Plan.
        :type billing_period_frequency: int
        """
        if billing_period_frequency is None:
            raise ValueError("Invalid value for `billing_period_frequency`, must not be `None`")

        self._billing_period_frequency = billing_period_frequency

    @property
    def billing_period_type(self):
        """Gets the billing_period_type of this Plan.

        The type of billing period used.

        :return: The billing_period_type of this Plan.
        :rtype: str
        """
        return self._billing_period_type

    @billing_period_type.setter
    def billing_period_type(self, billing_period_type):
        """Sets the billing_period_type of this Plan.

        The type of billing period used.

        :param billing_period_type: The billing_period_type of this Plan.
        :type billing_period_type: str
        """
        allowed_values = ["day", "week", "month", "year", "none"]  # noqa: E501
        if billing_period_type not in allowed_values:
            raise ValueError(
                "Invalid value for `billing_period_type` ({0}), must be one of {1}"
                .format(billing_period_type, allowed_values)
            )

        self._billing_period_type = billing_period_type

    @property
    def currency(self):
        """Gets the currency of this Plan.

        The currency a plan is offered in.

        :return: The currency of this Plan.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Plan.

        The currency a plan is offered in.

        :param currency: The currency of this Plan.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Plan.

        A map of custom fields defined by a curator for a plan.

        :return: The custom_fields of this Plan.
        :rtype: Dict[str, object]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Plan.

        A map of custom fields defined by a curator for a plan.

        :param custom_fields: The custom_fields of this Plan.
        :type custom_fields: Dict[str, object]
        """

        self._custom_fields = custom_fields

    @property
    def has_trial_period(self):
        """Gets the has_trial_period of this Plan.

        True if a plan has a trial period, false if not.

        :return: The has_trial_period of this Plan.
        :rtype: bool
        """
        return self._has_trial_period

    @has_trial_period.setter
    def has_trial_period(self, has_trial_period):
        """Sets the has_trial_period of this Plan.

        True if a plan has a trial period, false if not.

        :param has_trial_period: The has_trial_period of this Plan.
        :type has_trial_period: bool
        """
        if has_trial_period is None:
            raise ValueError("Invalid value for `has_trial_period`, must not be `None`")

        self._has_trial_period = has_trial_period

    @property
    def id(self):
        """Gets the id of this Plan.

        The identifier of a plan.

        :return: The id of this Plan.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Plan.

        The identifier of a plan.

        :param id: The id of this Plan.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_active(self):
        """Gets the is_active of this Plan.

        True if a plan is active, false if its retired.

        :return: The is_active of this Plan.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this Plan.

        True if a plan is active, false if its retired.

        :param is_active: The is_active of this Plan.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def is_featured(self):
        """Gets the is_featured of this Plan.

        True if a plan should be highlighted as featured, false if not.

        :return: The is_featured of this Plan.
        :rtype: bool
        """
        return self._is_featured

    @is_featured.setter
    def is_featured(self, is_featured):
        """Sets the is_featured of this Plan.

        True if a plan should be highlighted as featured, false if not.

        :param is_featured: The is_featured of this Plan.
        :type is_featured: bool
        """
        if is_featured is None:
            raise ValueError("Invalid value for `is_featured`, must not be `None`")

        self._is_featured = is_featured

    @property
    def is_private(self):
        """Gets the is_private of this Plan.

        True if a plan should not be presented in the primary plan options, false if not.

        :return: The is_private of this Plan.
        :rtype: bool
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private):
        """Sets the is_private of this Plan.

        True if a plan should not be presented in the primary plan options, false if not.

        :param is_private: The is_private of this Plan.
        :type is_private: bool
        """
        if is_private is None:
            raise ValueError("Invalid value for `is_private`, must not be `None`")

        self._is_private = is_private

    @property
    def price(self):
        """Gets the price of this Plan.

        The price of a plan. If a free plan then undefined.

        :return: The price of this Plan.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Plan.

        The price of a plan. If a free plan then undefined.

        :param price: The price of this Plan.
        :type price: float
        """

        self._price = price

    @property
    def revenue_type(self):
        """Gets the revenue_type of this Plan.

        The revenue type a plan targets.

        :return: The revenue_type of this Plan.
        :rtype: str
        """
        return self._revenue_type

    @revenue_type.setter
    def revenue_type(self, revenue_type):
        """Sets the revenue_type of this Plan.

        The revenue type a plan targets.

        :param revenue_type: The revenue_type of this Plan.
        :type revenue_type: str
        """
        allowed_values = ["TVOD", "SVOD"]  # noqa: E501
        if revenue_type not in allowed_values:
            raise ValueError(
                "Invalid value for `revenue_type` ({0}), must be one of {1}"
                .format(revenue_type, allowed_values)
            )

        self._revenue_type = revenue_type

    @property
    def subscription_code(self):
        """Gets the subscription_code of this Plan.

        The subscription code a plan targets.

        :return: The subscription_code of this Plan.
        :rtype: str
        """
        return self._subscription_code

    @subscription_code.setter
    def subscription_code(self, subscription_code):
        """Sets the subscription_code of this Plan.

        The subscription code a plan targets.

        :param subscription_code: The subscription_code of this Plan.
        :type subscription_code: str
        """
        if subscription_code is None:
            raise ValueError("Invalid value for `subscription_code`, must not be `None`")

        self._subscription_code = subscription_code

    @property
    def tagline(self):
        """Gets the tagline of this Plan.

        The short tagline for a plan.

        :return: The tagline of this Plan.
        :rtype: str
        """
        return self._tagline

    @tagline.setter
    def tagline(self, tagline):
        """Sets the tagline of this Plan.

        The short tagline for a plan.

        :param tagline: The tagline of this Plan.
        :type tagline: str
        """
        if tagline is None:
            raise ValueError("Invalid value for `tagline`, must not be `None`")

        self._tagline = tagline

    @property
    def terms_and_conditions(self):
        """Gets the terms_and_conditions of this Plan.

        The terms and conditions for a plan.

        :return: The terms_and_conditions of this Plan.
        :rtype: str
        """
        return self._terms_and_conditions

    @terms_and_conditions.setter
    def terms_and_conditions(self, terms_and_conditions):
        """Sets the terms_and_conditions of this Plan.

        The terms and conditions for a plan.

        :param terms_and_conditions: The terms_and_conditions of this Plan.
        :type terms_and_conditions: str
        """
        if terms_and_conditions is None:
            raise ValueError("Invalid value for `terms_and_conditions`, must not be `None`")

        self._terms_and_conditions = terms_and_conditions

    @property
    def title(self):
        """Gets the title of this Plan.

        The title of a plan.

        :return: The title of this Plan.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Plan.

        The title of a plan.

        :param title: The title of this Plan.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def trial_period_days(self):
        """Gets the trial_period_days of this Plan.

        How many days a trial period runs for a plan. Only valid if `hasTrialPeriod` is true.

        :return: The trial_period_days of this Plan.
        :rtype: int
        """
        return self._trial_period_days

    @trial_period_days.setter
    def trial_period_days(self, trial_period_days):
        """Sets the trial_period_days of this Plan.

        How many days a trial period runs for a plan. Only valid if `hasTrialPeriod` is true.

        :param trial_period_days: The trial_period_days of this Plan.
        :type trial_period_days: int
        """
        if trial_period_days is None:
            raise ValueError("Invalid value for `trial_period_days`, must not be `None`")

        self._trial_period_days = trial_period_days

    @property
    def type(self):
        """Gets the type of this Plan.

        The type of plan.

        :return: The type of this Plan.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Plan.

        The type of plan.

        :param type: The type of this Plan.
        :type type: str
        """
        allowed_values = ["Free", "Subscription"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
