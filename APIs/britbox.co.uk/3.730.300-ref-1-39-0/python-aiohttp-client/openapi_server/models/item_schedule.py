# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ItemSchedule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blackout: bool=None, channel_id: str=None, end_date: datetime=None, featured: bool=None, id: str=None, live: bool=None, repeat: bool=None, start_date: datetime=None):
        """ItemSchedule - a model defined in OpenAPI

        :param blackout: The blackout of this ItemSchedule.
        :param channel_id: The channel_id of this ItemSchedule.
        :param end_date: The end_date of this ItemSchedule.
        :param featured: The featured of this ItemSchedule.
        :param id: The id of this ItemSchedule.
        :param live: The live of this ItemSchedule.
        :param repeat: The repeat of this ItemSchedule.
        :param start_date: The start_date of this ItemSchedule.
        """
        self.openapi_types = {
            'blackout': bool,
            'channel_id': str,
            'end_date': datetime,
            'featured': bool,
            'id': str,
            'live': bool,
            'repeat': bool,
            'start_date': datetime
        }

        self.attribute_map = {
            'blackout': 'blackout',
            'channel_id': 'channelId',
            'end_date': 'endDate',
            'featured': 'featured',
            'id': 'id',
            'live': 'live',
            'repeat': 'repeat',
            'start_date': 'startDate'
        }

        self._blackout = blackout
        self._channel_id = channel_id
        self._end_date = end_date
        self._featured = featured
        self._id = id
        self._live = live
        self._repeat = repeat
        self._start_date = start_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItemSchedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItemSchedule of this ItemSchedule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blackout(self):
        """Gets the blackout of this ItemSchedule.

        True if this schedule represents time when the channel is completely off air.

        :return: The blackout of this ItemSchedule.
        :rtype: bool
        """
        return self._blackout

    @blackout.setter
    def blackout(self, blackout):
        """Sets the blackout of this ItemSchedule.

        True if this schedule represents time when the channel is completely off air.

        :param blackout: The blackout of this ItemSchedule.
        :type blackout: bool
        """

        self._blackout = blackout

    @property
    def channel_id(self):
        """Gets the channel_id of this ItemSchedule.

        The id of the channel item this schedule belongs to.

        :return: The channel_id of this ItemSchedule.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this ItemSchedule.

        The id of the channel item this schedule belongs to.

        :param channel_id: The channel_id of this ItemSchedule.
        :type channel_id: str
        """
        if channel_id is None:
            raise ValueError("Invalid value for `channel_id`, must not be `None`")

        self._channel_id = channel_id

    @property
    def end_date(self):
        """Gets the end_date of this ItemSchedule.

        The date and time this schedule ends.

        :return: The end_date of this ItemSchedule.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ItemSchedule.

        The date and time this schedule ends.

        :param end_date: The end_date of this ItemSchedule.
        :type end_date: datetime
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")

        self._end_date = end_date

    @property
    def featured(self):
        """Gets the featured of this ItemSchedule.

        True if this is a featured item schedule.

        :return: The featured of this ItemSchedule.
        :rtype: bool
        """
        return self._featured

    @featured.setter
    def featured(self, featured):
        """Sets the featured of this ItemSchedule.

        True if this is a featured item schedule.

        :param featured: The featured of this ItemSchedule.
        :type featured: bool
        """

        self._featured = featured

    @property
    def id(self):
        """Gets the id of this ItemSchedule.


        :return: The id of this ItemSchedule.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ItemSchedule.


        :param id: The id of this ItemSchedule.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def live(self):
        """Gets the live of this ItemSchedule.

        True if this is a live event.

        :return: The live of this ItemSchedule.
        :rtype: bool
        """
        return self._live

    @live.setter
    def live(self, live):
        """Sets the live of this ItemSchedule.

        True if this is a live event.

        :param live: The live of this ItemSchedule.
        :type live: bool
        """

        self._live = live

    @property
    def repeat(self):
        """Gets the repeat of this ItemSchedule.

        True if this has been aired previously on the same channel.

        :return: The repeat of this ItemSchedule.
        :rtype: bool
        """
        return self._repeat

    @repeat.setter
    def repeat(self, repeat):
        """Sets the repeat of this ItemSchedule.

        True if this has been aired previously on the same channel.

        :param repeat: The repeat of this ItemSchedule.
        :type repeat: bool
        """

        self._repeat = repeat

    @property
    def start_date(self):
        """Gets the start_date of this ItemSchedule.

        The date and time this schedule starts.

        :return: The start_date of this ItemSchedule.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ItemSchedule.

        The date and time this schedule starts.

        :param start_date: The start_date of this ItemSchedule.
        :type start_date: datetime
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")

        self._start_date = start_date
