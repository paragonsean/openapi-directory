# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bt_plan_list_item import BtPlanListItem
from openapi_server import util


class BtPlans(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, plans: List[BtPlanListItem]=None):
        """BtPlans - a model defined in OpenAPI

        :param plans: The plans of this BtPlans.
        """
        self.openapi_types = {
            'plans': List[BtPlanListItem]
        }

        self.attribute_map = {
            'plans': 'plans'
        }

        self._plans = plans

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BtPlans':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BtPlans of this BtPlans.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def plans(self):
        """Gets the plans of this BtPlans.

        The list of available plans.

        :return: The plans of this BtPlans.
        :rtype: List[BtPlanListItem]
        """
        return self._plans

    @plans.setter
    def plans(self, plans):
        """Sets the plans of this BtPlans.

        The list of available plans.

        :param plans: The plans of this BtPlans.
        :type plans: List[BtPlanListItem]
        """
        if plans is None:
            raise ValueError("Invalid value for `plans`, must not be `None`")

        self._plans = plans
