# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccessToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_created: bool=None, expiration_date: datetime=None, refreshable: bool=None, type: str=None, value: str=None):
        """AccessToken - a model defined in OpenAPI

        :param account_created: The account_created of this AccessToken.
        :param expiration_date: The expiration_date of this AccessToken.
        :param refreshable: The refreshable of this AccessToken.
        :param type: The type of this AccessToken.
        :param value: The value of this AccessToken.
        """
        self.openapi_types = {
            'account_created': bool,
            'expiration_date': datetime,
            'refreshable': bool,
            'type': str,
            'value': str
        }

        self.attribute_map = {
            'account_created': 'accountCreated',
            'expiration_date': 'expirationDate',
            'refreshable': 'refreshable',
            'type': 'type',
            'value': 'value'
        }

        self._account_created = account_created
        self._expiration_date = expiration_date
        self._refreshable = refreshable
        self._type = type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccessToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccessToken of this AccessToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_created(self):
        """Gets the account_created of this AccessToken.

        When a `UserAccount` token is issued during a single-sign-on flow a user may have been automatically registered if they didn't have an account already. If this occurs then `accountCreated` will be `true`. 

        :return: The account_created of this AccessToken.
        :rtype: bool
        """
        return self._account_created

    @account_created.setter
    def account_created(self, account_created):
        """Sets the account_created of this AccessToken.

        When a `UserAccount` token is issued during a single-sign-on flow a user may have been automatically registered if they didn't have an account already. If this occurs then `accountCreated` will be `true`. 

        :param account_created: The account_created of this AccessToken.
        :type account_created: bool
        """

        self._account_created = account_created

    @property
    def expiration_date(self):
        """Gets the expiration_date of this AccessToken.

        The timestamp this token expires.

        :return: The expiration_date of this AccessToken.
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this AccessToken.

        The timestamp this token expires.

        :param expiration_date: The expiration_date of this AccessToken.
        :type expiration_date: datetime
        """
        if expiration_date is None:
            raise ValueError("Invalid value for `expiration_date`, must not be `None`")

        self._expiration_date = expiration_date

    @property
    def refreshable(self):
        """Gets the refreshable of this AccessToken.

        True if this token can be refreshed, false if not.

        :return: The refreshable of this AccessToken.
        :rtype: bool
        """
        return self._refreshable

    @refreshable.setter
    def refreshable(self, refreshable):
        """Sets the refreshable of this AccessToken.

        True if this token can be refreshed, false if not.

        :param refreshable: The refreshable of this AccessToken.
        :type refreshable: bool
        """
        if refreshable is None:
            raise ValueError("Invalid value for `refreshable`, must not be `None`")

        self._refreshable = refreshable

    @property
    def type(self):
        """Gets the type of this AccessToken.

        The type of the token.

        :return: The type of this AccessToken.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AccessToken.

        The type of the token.

        :param type: The type of this AccessToken.
        :type type: str
        """
        allowed_values = ["UserAccount", "UserProfile"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self):
        """Gets the value of this AccessToken.

        The token value used for authenticated requests.

        :return: The value of this AccessToken.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this AccessToken.

        The token value used for authenticated requests.

        :param value: The value of this AccessToken.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
