# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Credit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, path: str=None, character: str=None, role: str=None):
        """Credit - a model defined in OpenAPI

        :param name: The name of this Credit.
        :param path: The path of this Credit.
        :param character: The character of this Credit.
        :param role: The role of this Credit.
        """
        self.openapi_types = {
            'name': str,
            'path': str,
            'character': str,
            'role': str
        }

        self.attribute_map = {
            'name': 'name',
            'path': 'path',
            'character': 'character',
            'role': 'role'
        }

        self._name = name
        self._path = path
        self._character = character
        self._role = role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Credit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Credit of this Credit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Credit.

        The name of the person.

        :return: The name of this Credit.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Credit.

        The name of the person.

        :param name: The name of this Credit.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def path(self):
        """Gets the path of this Credit.

        The path to the person

        :return: The path of this Credit.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Credit.

        The path to the person

        :param path: The path of this Credit.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def character(self):
        """Gets the character of this Credit.

        The name of the character.

        :return: The character of this Credit.
        :rtype: str
        """
        return self._character

    @character.setter
    def character(self, character):
        """Sets the character of this Credit.

        The name of the character.

        :param character: The character of this Credit.
        :type character: str
        """

        self._character = character

    @property
    def role(self):
        """Gets the role of this Credit.

        The type of role the credit performed, e.g. actor.

        :return: The role of this Credit.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Credit.

        The type of role the credit performed, e.g. actor.

        :param role: The role of this Credit.
        :type role: str
        """
        allowed_values = ["actor", "associateproducer", "coactor", "director", "executiveproducer", "filminglocation", "guest", "narrator", "other", "presenter", "producer", "productmanager", "thememusicby", "voice", "writer"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role
