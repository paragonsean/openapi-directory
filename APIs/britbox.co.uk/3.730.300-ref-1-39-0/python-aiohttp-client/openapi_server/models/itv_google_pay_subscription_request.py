# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ItvGooglePaySubscriptionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, purchase_token: str=None, subscription_item: str=None):
        """ItvGooglePaySubscriptionRequest - a model defined in OpenAPI

        :param purchase_token: The purchase_token of this ItvGooglePaySubscriptionRequest.
        :param subscription_item: The subscription_item of this ItvGooglePaySubscriptionRequest.
        """
        self.openapi_types = {
            'purchase_token': str,
            'subscription_item': str
        }

        self.attribute_map = {
            'purchase_token': 'purchaseToken',
            'subscription_item': 'subscriptionItem'
        }

        self._purchase_token = purchase_token
        self._subscription_item = subscription_item

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItvGooglePaySubscriptionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItvGooglePaySubscriptionRequest of this ItvGooglePaySubscriptionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def purchase_token(self):
        """Gets the purchase_token of this ItvGooglePaySubscriptionRequest.

        the unique identifier for this purchase

        :return: The purchase_token of this ItvGooglePaySubscriptionRequest.
        :rtype: str
        """
        return self._purchase_token

    @purchase_token.setter
    def purchase_token(self, purchase_token):
        """Sets the purchase_token of this ItvGooglePaySubscriptionRequest.

        the unique identifier for this purchase

        :param purchase_token: The purchase_token of this ItvGooglePaySubscriptionRequest.
        :type purchase_token: str
        """
        if purchase_token is None:
            raise ValueError("Invalid value for `purchase_token`, must not be `None`")

        self._purchase_token = purchase_token

    @property
    def subscription_item(self):
        """Gets the subscription_item of this ItvGooglePaySubscriptionRequest.

        the SKU of the item from the play console

        :return: The subscription_item of this ItvGooglePaySubscriptionRequest.
        :rtype: str
        """
        return self._subscription_item

    @subscription_item.setter
    def subscription_item(self, subscription_item):
        """Sets the subscription_item of this ItvGooglePaySubscriptionRequest.

        the SKU of the item from the play console

        :param subscription_item: The subscription_item of this ItvGooglePaySubscriptionRequest.
        :type subscription_item: str
        """
        if subscription_item is None:
            raise ValueError("Invalid value for `subscription_item`, must not be `None`")

        self._subscription_item = subscription_item
