# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountTokenByCodeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, id: str=None, scopes: List[str]=None):
        """AccountTokenByCodeRequest - a model defined in OpenAPI

        :param code: The code of this AccountTokenByCodeRequest.
        :param id: The id of this AccountTokenByCodeRequest.
        :param scopes: The scopes of this AccountTokenByCodeRequest.
        """
        self.openapi_types = {
            'code': str,
            'id': str,
            'scopes': List[str]
        }

        self.attribute_map = {
            'code': 'code',
            'id': 'id',
            'scopes': 'scopes'
        }

        self._code = code
        self._id = id
        self._scopes = scopes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountTokenByCodeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountTokenByCodeRequest of this AccountTokenByCodeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this AccountTokenByCodeRequest.

        The generated device authorization code.

        :return: The code of this AccountTokenByCodeRequest.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this AccountTokenByCodeRequest.

        The generated device authorization code.

        :param code: The code of this AccountTokenByCodeRequest.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def id(self):
        """Gets the id of this AccountTokenByCodeRequest.

        The unique identifier for the device e.g. serial number.

        :return: The id of this AccountTokenByCodeRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountTokenByCodeRequest.

        The unique identifier for the device e.g. serial number.

        :param id: The id of this AccountTokenByCodeRequest.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def scopes(self):
        """Gets the scopes of this AccountTokenByCodeRequest.

        The scope(s) of the token(s) required.

        :return: The scopes of this AccountTokenByCodeRequest.
        :rtype: List[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this AccountTokenByCodeRequest.

        The scope(s) of the token(s) required.

        :param scopes: The scopes of this AccountTokenByCodeRequest.
        :type scopes: List[str]
        """
        allowed_values = ["Catalog", "Commerce", "Settings", "Playback"]  # noqa: E501
        if not set(scopes).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `scopes` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(scopes) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._scopes = scopes
