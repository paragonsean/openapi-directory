# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.entitlement import Entitlement
from openapi_server.models.profile_summary import ProfileSummary
from openapi_server.models.subscription import Subscription
from openapi_server import util


class Account(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Address=None, default_payment_instrument_id: str=None, default_payment_method_id: str=None, email_verified: bool=None, entitlements: List[Entitlement]=None, first_name: str=None, id: str=None, is_first_time_subscriber: bool=None, last_name: str=None, marketing_enabled: bool=None, min_rating_playback_guard: str=None, pin_enabled: bool=None, primary_profile_id: str=None, profiles: List[ProfileSummary]=None, segments: List[str]=None, subscription_code: str=None, subscriptions: List[Subscription]=None, tracking_enabled: bool=None, used_free_trial: bool=None):
        """Account - a model defined in OpenAPI

        :param address: The address of this Account.
        :param default_payment_instrument_id: The default_payment_instrument_id of this Account.
        :param default_payment_method_id: The default_payment_method_id of this Account.
        :param email_verified: The email_verified of this Account.
        :param entitlements: The entitlements of this Account.
        :param first_name: The first_name of this Account.
        :param id: The id of this Account.
        :param is_first_time_subscriber: The is_first_time_subscriber of this Account.
        :param last_name: The last_name of this Account.
        :param marketing_enabled: The marketing_enabled of this Account.
        :param min_rating_playback_guard: The min_rating_playback_guard of this Account.
        :param pin_enabled: The pin_enabled of this Account.
        :param primary_profile_id: The primary_profile_id of this Account.
        :param profiles: The profiles of this Account.
        :param segments: The segments of this Account.
        :param subscription_code: The subscription_code of this Account.
        :param subscriptions: The subscriptions of this Account.
        :param tracking_enabled: The tracking_enabled of this Account.
        :param used_free_trial: The used_free_trial of this Account.
        """
        self.openapi_types = {
            'address': Address,
            'default_payment_instrument_id': str,
            'default_payment_method_id': str,
            'email_verified': bool,
            'entitlements': List[Entitlement],
            'first_name': str,
            'id': str,
            'is_first_time_subscriber': bool,
            'last_name': str,
            'marketing_enabled': bool,
            'min_rating_playback_guard': str,
            'pin_enabled': bool,
            'primary_profile_id': str,
            'profiles': List[ProfileSummary],
            'segments': List[str],
            'subscription_code': str,
            'subscriptions': List[Subscription],
            'tracking_enabled': bool,
            'used_free_trial': bool
        }

        self.attribute_map = {
            'address': 'address',
            'default_payment_instrument_id': 'defaultPaymentInstrumentId',
            'default_payment_method_id': 'defaultPaymentMethodId',
            'email_verified': 'emailVerified',
            'entitlements': 'entitlements',
            'first_name': 'firstName',
            'id': 'id',
            'is_first_time_subscriber': 'isFirstTimeSubscriber',
            'last_name': 'lastName',
            'marketing_enabled': 'marketingEnabled',
            'min_rating_playback_guard': 'minRatingPlaybackGuard',
            'pin_enabled': 'pinEnabled',
            'primary_profile_id': 'primaryProfileId',
            'profiles': 'profiles',
            'segments': 'segments',
            'subscription_code': 'subscriptionCode',
            'subscriptions': 'subscriptions',
            'tracking_enabled': 'trackingEnabled',
            'used_free_trial': 'usedFreeTrial'
        }

        self._address = address
        self._default_payment_instrument_id = default_payment_instrument_id
        self._default_payment_method_id = default_payment_method_id
        self._email_verified = email_verified
        self._entitlements = entitlements
        self._first_name = first_name
        self._id = id
        self._is_first_time_subscriber = is_first_time_subscriber
        self._last_name = last_name
        self._marketing_enabled = marketing_enabled
        self._min_rating_playback_guard = min_rating_playback_guard
        self._pin_enabled = pin_enabled
        self._primary_profile_id = primary_profile_id
        self._profiles = profiles
        self._segments = segments
        self._subscription_code = subscription_code
        self._subscriptions = subscriptions
        self._tracking_enabled = tracking_enabled
        self._used_free_trial = used_free_trial

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Account of this Account.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Account.


        :return: The address of this Account.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Account.


        :param address: The address of this Account.
        :type address: Address
        """

        self._address = address

    @property
    def default_payment_instrument_id(self):
        """Gets the default_payment_instrument_id of this Account.

        The id of the payment instrument to use by default for account transactions.   **DEPRECATED** The property `defaultPaymentMethodId` is now preferred. 

        :return: The default_payment_instrument_id of this Account.
        :rtype: str
        """
        return self._default_payment_instrument_id

    @default_payment_instrument_id.setter
    def default_payment_instrument_id(self, default_payment_instrument_id):
        """Sets the default_payment_instrument_id of this Account.

        The id of the payment instrument to use by default for account transactions.   **DEPRECATED** The property `defaultPaymentMethodId` is now preferred. 

        :param default_payment_instrument_id: The default_payment_instrument_id of this Account.
        :type default_payment_instrument_id: str
        """

        self._default_payment_instrument_id = default_payment_instrument_id

    @property
    def default_payment_method_id(self):
        """Gets the default_payment_method_id of this Account.

        The id of the payment method to use by default for account transactions.

        :return: The default_payment_method_id of this Account.
        :rtype: str
        """
        return self._default_payment_method_id

    @default_payment_method_id.setter
    def default_payment_method_id(self, default_payment_method_id):
        """Sets the default_payment_method_id of this Account.

        The id of the payment method to use by default for account transactions.

        :param default_payment_method_id: The default_payment_method_id of this Account.
        :type default_payment_method_id: str
        """

        self._default_payment_method_id = default_payment_method_id

    @property
    def email_verified(self):
        """Gets the email_verified of this Account.

        Whether the email address has been verified.  Users who receive an emailed verification url click the link to verify their email address. 

        :return: The email_verified of this Account.
        :rtype: bool
        """
        return self._email_verified

    @email_verified.setter
    def email_verified(self, email_verified):
        """Sets the email_verified of this Account.

        Whether the email address has been verified.  Users who receive an emailed verification url click the link to verify their email address. 

        :param email_verified: The email_verified of this Account.
        :type email_verified: bool
        """

        self._email_verified = email_verified

    @property
    def entitlements(self):
        """Gets the entitlements of this Account.

        The list of entitlements to playback specific items.

        :return: The entitlements of this Account.
        :rtype: List[Entitlement]
        """
        return self._entitlements

    @entitlements.setter
    def entitlements(self, entitlements):
        """Sets the entitlements of this Account.

        The list of entitlements to playback specific items.

        :param entitlements: The entitlements of this Account.
        :type entitlements: List[Entitlement]
        """

        self._entitlements = entitlements

    @property
    def first_name(self):
        """Gets the first_name of this Account.

        The first name of the account holder.

        :return: The first_name of this Account.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Account.

        The first name of the account holder.

        :param first_name: The first_name of this Account.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this Account.

        The id of the account.

        :return: The id of this Account.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Account.

        The id of the account.

        :param id: The id of this Account.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_first_time_subscriber(self):
        """Gets the is_first_time_subscriber of this Account.

        Whether the account has the very first subscription.

        :return: The is_first_time_subscriber of this Account.
        :rtype: bool
        """
        return self._is_first_time_subscriber

    @is_first_time_subscriber.setter
    def is_first_time_subscriber(self, is_first_time_subscriber):
        """Sets the is_first_time_subscriber of this Account.

        Whether the account has the very first subscription.

        :param is_first_time_subscriber: The is_first_time_subscriber of this Account.
        :type is_first_time_subscriber: bool
        """

        self._is_first_time_subscriber = is_first_time_subscriber

    @property
    def last_name(self):
        """Gets the last_name of this Account.

        The last name of the account holder.

        :return: The last_name of this Account.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Account.

        The last name of the account holder.

        :param last_name: The last_name of this Account.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def marketing_enabled(self):
        """Gets the marketing_enabled of this Account.

        Whether the account has opted in or out of marketing material.

        :return: The marketing_enabled of this Account.
        :rtype: bool
        """
        return self._marketing_enabled

    @marketing_enabled.setter
    def marketing_enabled(self, marketing_enabled):
        """Sets the marketing_enabled of this Account.

        Whether the account has opted in or out of marketing material.

        :param marketing_enabled: The marketing_enabled of this Account.
        :type marketing_enabled: bool
        """
        if marketing_enabled is None:
            raise ValueError("Invalid value for `marketing_enabled`, must not be `None`")

        self._marketing_enabled = marketing_enabled

    @property
    def min_rating_playback_guard(self):
        """Gets the min_rating_playback_guard of this Account.

        The classification rating defining the minimum rating level a user should be forced to enter the account pin code for playback. Anything at this rating level or above will require the pin for playback.  e.g. AUOFLC-MA15+  If you want to disable this guard pass an empty string or `null`. 

        :return: The min_rating_playback_guard of this Account.
        :rtype: str
        """
        return self._min_rating_playback_guard

    @min_rating_playback_guard.setter
    def min_rating_playback_guard(self, min_rating_playback_guard):
        """Sets the min_rating_playback_guard of this Account.

        The classification rating defining the minimum rating level a user should be forced to enter the account pin code for playback. Anything at this rating level or above will require the pin for playback.  e.g. AUOFLC-MA15+  If you want to disable this guard pass an empty string or `null`. 

        :param min_rating_playback_guard: The min_rating_playback_guard of this Account.
        :type min_rating_playback_guard: str
        """

        self._min_rating_playback_guard = min_rating_playback_guard

    @property
    def pin_enabled(self):
        """Gets the pin_enabled of this Account.

        When an account level pin is defined this will be true.

        :return: The pin_enabled of this Account.
        :rtype: bool
        """
        return self._pin_enabled

    @pin_enabled.setter
    def pin_enabled(self, pin_enabled):
        """Sets the pin_enabled of this Account.

        When an account level pin is defined this will be true.

        :param pin_enabled: The pin_enabled of this Account.
        :type pin_enabled: bool
        """
        if pin_enabled is None:
            raise ValueError("Invalid value for `pin_enabled`, must not be `None`")

        self._pin_enabled = pin_enabled

    @property
    def primary_profile_id(self):
        """Gets the primary_profile_id of this Account.

        The id of the primary profile.

        :return: The primary_profile_id of this Account.
        :rtype: str
        """
        return self._primary_profile_id

    @primary_profile_id.setter
    def primary_profile_id(self, primary_profile_id):
        """Sets the primary_profile_id of this Account.

        The id of the primary profile.

        :param primary_profile_id: The primary_profile_id of this Account.
        :type primary_profile_id: str
        """
        if primary_profile_id is None:
            raise ValueError("Invalid value for `primary_profile_id`, must not be `None`")

        self._primary_profile_id = primary_profile_id

    @property
    def profiles(self):
        """Gets the profiles of this Account.

        The list of profiles under this account.

        :return: The profiles of this Account.
        :rtype: List[ProfileSummary]
        """
        return self._profiles

    @profiles.setter
    def profiles(self, profiles):
        """Sets the profiles of this Account.

        The list of profiles under this account.

        :param profiles: The profiles of this Account.
        :type profiles: List[ProfileSummary]
        """
        if profiles is None:
            raise ValueError("Invalid value for `profiles`, must not be `None`")

        self._profiles = profiles

    @property
    def segments(self):
        """Gets the segments of this Account.

        The segments an account has been placed under

        :return: The segments of this Account.
        :rtype: List[str]
        """
        return self._segments

    @segments.setter
    def segments(self, segments):
        """Sets the segments of this Account.

        The segments an account has been placed under

        :param segments: The segments of this Account.
        :type segments: List[str]
        """

        self._segments = segments

    @property
    def subscription_code(self):
        """Gets the subscription_code of this Account.

        The active subscription code for an account.  The value of this should be passed to any endpoints accepting a `sub` query parameter. 

        :return: The subscription_code of this Account.
        :rtype: str
        """
        return self._subscription_code

    @subscription_code.setter
    def subscription_code(self, subscription_code):
        """Sets the subscription_code of this Account.

        The active subscription code for an account.  The value of this should be passed to any endpoints accepting a `sub` query parameter. 

        :param subscription_code: The subscription_code of this Account.
        :type subscription_code: str
        """
        if subscription_code is None:
            raise ValueError("Invalid value for `subscription_code`, must not be `None`")

        self._subscription_code = subscription_code

    @property
    def subscriptions(self):
        """Gets the subscriptions of this Account.

        The list of subscriptions, if any, the account has signed up to.

        :return: The subscriptions of this Account.
        :rtype: List[Subscription]
        """
        return self._subscriptions

    @subscriptions.setter
    def subscriptions(self, subscriptions):
        """Sets the subscriptions of this Account.

        The list of subscriptions, if any, the account has signed up to.

        :param subscriptions: The subscriptions of this Account.
        :type subscriptions: List[Subscription]
        """

        self._subscriptions = subscriptions

    @property
    def tracking_enabled(self):
        """Gets the tracking_enabled of this Account.

        Whether usage tracking is associated with the account or anonymous.

        :return: The tracking_enabled of this Account.
        :rtype: bool
        """
        return self._tracking_enabled

    @tracking_enabled.setter
    def tracking_enabled(self, tracking_enabled):
        """Sets the tracking_enabled of this Account.

        Whether usage tracking is associated with the account or anonymous.

        :param tracking_enabled: The tracking_enabled of this Account.
        :type tracking_enabled: bool
        """
        if tracking_enabled is None:
            raise ValueError("Invalid value for `tracking_enabled`, must not be `None`")

        self._tracking_enabled = tracking_enabled

    @property
    def used_free_trial(self):
        """Gets the used_free_trial of this Account.

        Whether the account has used up their free trial period of a plan.

        :return: The used_free_trial of this Account.
        :rtype: bool
        """
        return self._used_free_trial

    @used_free_trial.setter
    def used_free_trial(self, used_free_trial):
        """Sets the used_free_trial of this Account.

        Whether the account has used up their free trial period of a plan.

        :param used_free_trial: The used_free_trial of this Account.
        :type used_free_trial: bool
        """

        self._used_free_trial = used_free_trial
