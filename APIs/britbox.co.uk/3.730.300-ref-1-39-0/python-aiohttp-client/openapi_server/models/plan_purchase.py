# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PlanPurchase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, price: float=None, subscription_id: str=None, title: str=None, type: str=None):
        """PlanPurchase - a model defined in OpenAPI

        :param id: The id of this PlanPurchase.
        :param price: The price of this PlanPurchase.
        :param subscription_id: The subscription_id of this PlanPurchase.
        :param title: The title of this PlanPurchase.
        :param type: The type of this PlanPurchase.
        """
        self.openapi_types = {
            'id': str,
            'price': float,
            'subscription_id': str,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            'price': 'price',
            'subscription_id': 'subscriptionId',
            'title': 'title',
            'type': 'type'
        }

        self._id = id
        self._price = price
        self._subscription_id = subscription_id
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlanPurchase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlanPurchase of this PlanPurchase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this PlanPurchase.

        The identifier of the purchased plan.

        :return: The id of this PlanPurchase.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlanPurchase.

        The identifier of the purchased plan.

        :param id: The id of this PlanPurchase.
        :type id: str
        """

        self._id = id

    @property
    def price(self):
        """Gets the price of this PlanPurchase.

        The price of the purchased plan.

        :return: The price of this PlanPurchase.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this PlanPurchase.

        The price of the purchased plan.

        :param price: The price of this PlanPurchase.
        :type price: float
        """

        self._price = price

    @property
    def subscription_id(self):
        """Gets the subscription_id of this PlanPurchase.

        The identifier of the subscription membership to the plan.

        :return: The subscription_id of this PlanPurchase.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this PlanPurchase.

        The identifier of the subscription membership to the plan.

        :param subscription_id: The subscription_id of this PlanPurchase.
        :type subscription_id: str
        """

        self._subscription_id = subscription_id

    @property
    def title(self):
        """Gets the title of this PlanPurchase.

        The title of the purchased plan.

        :return: The title of this PlanPurchase.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PlanPurchase.

        The title of the purchased plan.

        :param title: The title of this PlanPurchase.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this PlanPurchase.

        The type of plan purchased.

        :return: The type of this PlanPurchase.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PlanPurchase.

        The type of plan purchased.

        :param type: The type of this PlanPurchase.
        :type type: str
        """
        allowed_values = ["Free", "Subscription"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
