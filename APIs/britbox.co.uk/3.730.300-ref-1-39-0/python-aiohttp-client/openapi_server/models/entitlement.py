# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.classification_summary import ClassificationSummary
from openapi_server.models.exclusion_rule import ExclusionRule
from openapi_server import util


class Entitlement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delivery_type: str=None, exclusion_rules: List[ExclusionRule]=None, max_downloads: int=None, max_plays: int=None, ownership: str=None, play_period: int=None, rental_period: int=None, resolution: str=None, scopes: List[str]=None, activation_date: datetime=None, classification: ClassificationSummary=None, creation_date: datetime=None, expiration_date: datetime=None, item_id: str=None, item_type: str=None, media_duration: int=None, plan_id: str=None, play_count: int=None, remaining_downloads: int=None):
        """Entitlement - a model defined in OpenAPI

        :param delivery_type: The delivery_type of this Entitlement.
        :param exclusion_rules: The exclusion_rules of this Entitlement.
        :param max_downloads: The max_downloads of this Entitlement.
        :param max_plays: The max_plays of this Entitlement.
        :param ownership: The ownership of this Entitlement.
        :param play_period: The play_period of this Entitlement.
        :param rental_period: The rental_period of this Entitlement.
        :param resolution: The resolution of this Entitlement.
        :param scopes: The scopes of this Entitlement.
        :param activation_date: The activation_date of this Entitlement.
        :param classification: The classification of this Entitlement.
        :param creation_date: The creation_date of this Entitlement.
        :param expiration_date: The expiration_date of this Entitlement.
        :param item_id: The item_id of this Entitlement.
        :param item_type: The item_type of this Entitlement.
        :param media_duration: The media_duration of this Entitlement.
        :param plan_id: The plan_id of this Entitlement.
        :param play_count: The play_count of this Entitlement.
        :param remaining_downloads: The remaining_downloads of this Entitlement.
        """
        self.openapi_types = {
            'delivery_type': str,
            'exclusion_rules': List[ExclusionRule],
            'max_downloads': int,
            'max_plays': int,
            'ownership': str,
            'play_period': int,
            'rental_period': int,
            'resolution': str,
            'scopes': List[str],
            'activation_date': datetime,
            'classification': ClassificationSummary,
            'creation_date': datetime,
            'expiration_date': datetime,
            'item_id': str,
            'item_type': str,
            'media_duration': int,
            'plan_id': str,
            'play_count': int,
            'remaining_downloads': int
        }

        self.attribute_map = {
            'delivery_type': 'deliveryType',
            'exclusion_rules': 'exclusionRules',
            'max_downloads': 'maxDownloads',
            'max_plays': 'maxPlays',
            'ownership': 'ownership',
            'play_period': 'playPeriod',
            'rental_period': 'rentalPeriod',
            'resolution': 'resolution',
            'scopes': 'scopes',
            'activation_date': 'activationDate',
            'classification': 'classification',
            'creation_date': 'creationDate',
            'expiration_date': 'expirationDate',
            'item_id': 'itemId',
            'item_type': 'itemType',
            'media_duration': 'mediaDuration',
            'plan_id': 'planId',
            'play_count': 'playCount',
            'remaining_downloads': 'remainingDownloads'
        }

        self._delivery_type = delivery_type
        self._exclusion_rules = exclusion_rules
        self._max_downloads = max_downloads
        self._max_plays = max_plays
        self._ownership = ownership
        self._play_period = play_period
        self._rental_period = rental_period
        self._resolution = resolution
        self._scopes = scopes
        self._activation_date = activation_date
        self._classification = classification
        self._creation_date = creation_date
        self._expiration_date = expiration_date
        self._item_id = item_id
        self._item_type = item_type
        self._media_duration = media_duration
        self._plan_id = plan_id
        self._play_count = play_count
        self._remaining_downloads = remaining_downloads

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Entitlement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Entitlement of this Entitlement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delivery_type(self):
        """Gets the delivery_type of this Entitlement.


        :return: The delivery_type of this Entitlement.
        :rtype: str
        """
        return self._delivery_type

    @delivery_type.setter
    def delivery_type(self, delivery_type):
        """Sets the delivery_type of this Entitlement.


        :param delivery_type: The delivery_type of this Entitlement.
        :type delivery_type: str
        """
        allowed_values = ["Stream", "Download", "StreamOrDownload", "ProgressiveDownload", "None"]  # noqa: E501
        if delivery_type not in allowed_values:
            raise ValueError(
                "Invalid value for `delivery_type` ({0}), must be one of {1}"
                .format(delivery_type, allowed_values)
            )

        self._delivery_type = delivery_type

    @property
    def exclusion_rules(self):
        """Gets the exclusion_rules of this Entitlement.

        Any specific playback exclusion rules.

        :return: The exclusion_rules of this Entitlement.
        :rtype: List[ExclusionRule]
        """
        return self._exclusion_rules

    @exclusion_rules.setter
    def exclusion_rules(self, exclusion_rules):
        """Sets the exclusion_rules of this Entitlement.

        Any specific playback exclusion rules.

        :param exclusion_rules: The exclusion_rules of this Entitlement.
        :type exclusion_rules: List[ExclusionRule]
        """

        self._exclusion_rules = exclusion_rules

    @property
    def max_downloads(self):
        """Gets the max_downloads of this Entitlement.

        The maximum number of allowed downloads.

        :return: The max_downloads of this Entitlement.
        :rtype: int
        """
        return self._max_downloads

    @max_downloads.setter
    def max_downloads(self, max_downloads):
        """Sets the max_downloads of this Entitlement.

        The maximum number of allowed downloads.

        :param max_downloads: The max_downloads of this Entitlement.
        :type max_downloads: int
        """

        self._max_downloads = max_downloads

    @property
    def max_plays(self):
        """Gets the max_plays of this Entitlement.

        The maximum number of allowed plays.

        :return: The max_plays of this Entitlement.
        :rtype: int
        """
        return self._max_plays

    @max_plays.setter
    def max_plays(self, max_plays):
        """Sets the max_plays of this Entitlement.

        The maximum number of allowed plays.

        :param max_plays: The max_plays of this Entitlement.
        :type max_plays: int
        """

        self._max_plays = max_plays

    @property
    def ownership(self):
        """Gets the ownership of this Entitlement.


        :return: The ownership of this Entitlement.
        :rtype: str
        """
        return self._ownership

    @ownership.setter
    def ownership(self, ownership):
        """Sets the ownership of this Entitlement.


        :param ownership: The ownership of this Entitlement.
        :type ownership: str
        """
        allowed_values = ["Subscription", "Free", "Rent", "Own", "None"]  # noqa: E501
        if ownership not in allowed_values:
            raise ValueError(
                "Invalid value for `ownership` ({0}), must be one of {1}"
                .format(ownership, allowed_values)
            )

        self._ownership = ownership

    @property
    def play_period(self):
        """Gets the play_period of this Entitlement.

        The length of time in minutes which the rental will last once played for the first time.

        :return: The play_period of this Entitlement.
        :rtype: int
        """
        return self._play_period

    @play_period.setter
    def play_period(self, play_period):
        """Sets the play_period of this Entitlement.

        The length of time in minutes which the rental will last once played for the first time.

        :param play_period: The play_period of this Entitlement.
        :type play_period: int
        """

        self._play_period = play_period

    @property
    def rental_period(self):
        """Gets the rental_period of this Entitlement.

        The length of time in minutes which the rental will last once purchased.

        :return: The rental_period of this Entitlement.
        :rtype: int
        """
        return self._rental_period

    @rental_period.setter
    def rental_period(self, rental_period):
        """Sets the rental_period of this Entitlement.

        The length of time in minutes which the rental will last once purchased.

        :param rental_period: The rental_period of this Entitlement.
        :type rental_period: int
        """

        self._rental_period = rental_period

    @property
    def resolution(self):
        """Gets the resolution of this Entitlement.


        :return: The resolution of this Entitlement.
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this Entitlement.


        :param resolution: The resolution of this Entitlement.
        :type resolution: str
        """
        allowed_values = ["SD", "HD-720", "HD-1080", "HD-4K", "External", "Unknown"]  # noqa: E501
        if resolution not in allowed_values:
            raise ValueError(
                "Invalid value for `resolution` ({0}), must be one of {1}"
                .format(resolution, allowed_values)
            )

        self._resolution = resolution

    @property
    def scopes(self):
        """Gets the scopes of this Entitlement.


        :return: The scopes of this Entitlement.
        :rtype: List[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this Entitlement.


        :param scopes: The scopes of this Entitlement.
        :type scopes: List[str]
        """
        if scopes is None:
            raise ValueError("Invalid value for `scopes`, must not be `None`")

        self._scopes = scopes

    @property
    def activation_date(self):
        """Gets the activation_date of this Entitlement.

        The date of activation. If no date is defined the entitlement has not be activated.

        :return: The activation_date of this Entitlement.
        :rtype: datetime
        """
        return self._activation_date

    @activation_date.setter
    def activation_date(self, activation_date):
        """Sets the activation_date of this Entitlement.

        The date of activation. If no date is defined the entitlement has not be activated.

        :param activation_date: The activation_date of this Entitlement.
        :type activation_date: datetime
        """

        self._activation_date = activation_date

    @property
    def classification(self):
        """Gets the classification of this Entitlement.


        :return: The classification of this Entitlement.
        :rtype: ClassificationSummary
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this Entitlement.


        :param classification: The classification of this Entitlement.
        :type classification: ClassificationSummary
        """

        self._classification = classification

    @property
    def creation_date(self):
        """Gets the creation_date of this Entitlement.

        The date the entitlement was created.

        :return: The creation_date of this Entitlement.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Entitlement.

        The date the entitlement was created.

        :param creation_date: The creation_date of this Entitlement.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def expiration_date(self):
        """Gets the expiration_date of this Entitlement.

        The date the entitlement expires.

        :return: The expiration_date of this Entitlement.
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this Entitlement.

        The date the entitlement expires.

        :param expiration_date: The expiration_date of this Entitlement.
        :type expiration_date: datetime
        """

        self._expiration_date = expiration_date

    @property
    def item_id(self):
        """Gets the item_id of this Entitlement.

        The id of the item this entitlement is for.

        :return: The item_id of this Entitlement.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this Entitlement.

        The id of the item this entitlement is for.

        :param item_id: The item_id of this Entitlement.
        :type item_id: str
        """

        self._item_id = item_id

    @property
    def item_type(self):
        """Gets the item_type of this Entitlement.

        The type of item this entitlement is for.

        :return: The item_type of this Entitlement.
        :rtype: str
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """Sets the item_type of this Entitlement.

        The type of item this entitlement is for.

        :param item_type: The item_type of this Entitlement.
        :type item_type: str
        """
        allowed_values = ["movie", "show", "season", "episode", "program", "link", "trailer", "channel", "customAsset"]  # noqa: E501
        if item_type not in allowed_values:
            raise ValueError(
                "Invalid value for `item_type` ({0}), must be one of {1}"
                .format(item_type, allowed_values)
            )

        self._item_type = item_type

    @property
    def media_duration(self):
        """Gets the media_duration of this Entitlement.

        The duration of the entitled media.

        :return: The media_duration of this Entitlement.
        :rtype: int
        """
        return self._media_duration

    @media_duration.setter
    def media_duration(self, media_duration):
        """Sets the media_duration of this Entitlement.

        The duration of the entitled media.

        :param media_duration: The media_duration of this Entitlement.
        :type media_duration: int
        """

        self._media_duration = media_duration

    @property
    def plan_id(self):
        """Gets the plan_id of this Entitlement.

        The id of the plan this entitlement is for.

        :return: The plan_id of this Entitlement.
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this Entitlement.

        The id of the plan this entitlement is for.

        :param plan_id: The plan_id of this Entitlement.
        :type plan_id: str
        """

        self._plan_id = plan_id

    @property
    def play_count(self):
        """Gets the play_count of this Entitlement.

        How many times the media has been played.

        :return: The play_count of this Entitlement.
        :rtype: int
        """
        return self._play_count

    @play_count.setter
    def play_count(self, play_count):
        """Sets the play_count of this Entitlement.

        How many times the media has been played.

        :param play_count: The play_count of this Entitlement.
        :type play_count: int
        """

        self._play_count = play_count

    @property
    def remaining_downloads(self):
        """Gets the remaining_downloads of this Entitlement.

        How many more downloads of this media are available.

        :return: The remaining_downloads of this Entitlement.
        :rtype: int
        """
        return self._remaining_downloads

    @remaining_downloads.setter
    def remaining_downloads(self, remaining_downloads):
        """Sets the remaining_downloads of this Entitlement.

        How many more downloads of this media are available.

        :param remaining_downloads: The remaining_downloads of this Entitlement.
        :type remaining_downloads: int
        """

        self._remaining_downloads = remaining_downloads
