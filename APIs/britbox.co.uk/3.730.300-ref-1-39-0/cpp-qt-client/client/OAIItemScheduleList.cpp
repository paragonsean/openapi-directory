/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItemScheduleList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItemScheduleList::OAIItemScheduleList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItemScheduleList::OAIItemScheduleList() {
    this->initializeModel();
}

OAIItemScheduleList::~OAIItemScheduleList() {}

void OAIItemScheduleList::initializeModel() {

    m_channel_id_isSet = false;
    m_channel_id_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_schedules_isSet = false;
    m_schedules_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAIItemScheduleList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItemScheduleList::fromJsonObject(QJsonObject json) {

    m_channel_id_isValid = ::OpenAPI::fromJsonValue(m_channel_id, json[QString("channelId")]);
    m_channel_id_isSet = !json[QString("channelId")].isNull() && m_channel_id_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_schedules_isValid = ::OpenAPI::fromJsonValue(m_schedules, json[QString("schedules")]);
    m_schedules_isSet = !json[QString("schedules")].isNull() && m_schedules_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;
}

QString OAIItemScheduleList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItemScheduleList::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_id_isSet) {
        obj.insert(QString("channelId"), ::OpenAPI::toJsonValue(m_channel_id));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_schedules.size() > 0) {
        obj.insert(QString("schedules"), ::OpenAPI::toJsonValue(m_schedules));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

QString OAIItemScheduleList::getChannelId() const {
    return m_channel_id;
}
void OAIItemScheduleList::setChannelId(const QString &channel_id) {
    m_channel_id = channel_id;
    m_channel_id_isSet = true;
}

bool OAIItemScheduleList::is_channel_id_Set() const{
    return m_channel_id_isSet;
}

bool OAIItemScheduleList::is_channel_id_Valid() const{
    return m_channel_id_isValid;
}

QDateTime OAIItemScheduleList::getEndDate() const {
    return m_end_date;
}
void OAIItemScheduleList::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIItemScheduleList::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIItemScheduleList::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QList<OAIItemSchedule> OAIItemScheduleList::getSchedules() const {
    return m_schedules;
}
void OAIItemScheduleList::setSchedules(const QList<OAIItemSchedule> &schedules) {
    m_schedules = schedules;
    m_schedules_isSet = true;
}

bool OAIItemScheduleList::is_schedules_Set() const{
    return m_schedules_isSet;
}

bool OAIItemScheduleList::is_schedules_Valid() const{
    return m_schedules_isValid;
}

QDateTime OAIItemScheduleList::getStartDate() const {
    return m_start_date;
}
void OAIItemScheduleList::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIItemScheduleList::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIItemScheduleList::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIItemScheduleList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItemScheduleList::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_channel_id_isValid && m_end_date_isValid && m_schedules_isValid && m_start_date_isValid && true;
}

} // namespace OpenAPI
