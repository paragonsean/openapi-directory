/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINavContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINavContent::OAINavContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINavContent::OAINavContent() {
    this->initializeModel();
}

OAINavContent::~OAINavContent() {}

void OAINavContent::initializeModel() {

    m_image_type_isSet = false;
    m_image_type_isValid = false;

    m_list_isSet = false;
    m_list_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAINavContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINavContent::fromJsonObject(QJsonObject json) {

    m_image_type_isValid = ::OpenAPI::fromJsonValue(m_image_type, json[QString("imageType")]);
    m_image_type_isSet = !json[QString("imageType")].isNull() && m_image_type_isValid;

    m_list_isValid = ::OpenAPI::fromJsonValue(m_list, json[QString("list")]);
    m_list_isSet = !json[QString("list")].isNull() && m_list_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAINavContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINavContent::asJsonObject() const {
    QJsonObject obj;
    if (m_image_type_isSet) {
        obj.insert(QString("imageType"), ::OpenAPI::toJsonValue(m_image_type));
    }
    if (m_list.isSet()) {
        obj.insert(QString("list"), ::OpenAPI::toJsonValue(m_list));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAINavContent::getImageType() const {
    return m_image_type;
}
void OAINavContent::setImageType(const QString &image_type) {
    m_image_type = image_type;
    m_image_type_isSet = true;
}

bool OAINavContent::is_image_type_Set() const{
    return m_image_type_isSet;
}

bool OAINavContent::is_image_type_Valid() const{
    return m_image_type_isValid;
}

OAIItemList OAINavContent::getList() const {
    return m_list;
}
void OAINavContent::setList(const OAIItemList &list) {
    m_list = list;
    m_list_isSet = true;
}

bool OAINavContent::is_list_Set() const{
    return m_list_isSet;
}

bool OAINavContent::is_list_Valid() const{
    return m_list_isValid;
}

QString OAINavContent::getTitle() const {
    return m_title;
}
void OAINavContent::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAINavContent::is_title_Set() const{
    return m_title_isSet;
}

bool OAINavContent::is_title_Valid() const{
    return m_title_isValid;
}

bool OAINavContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINavContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
