/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItvBillingHistoryRecord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItvBillingHistoryRecord::OAIItvBillingHistoryRecord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItvBillingHistoryRecord::OAIItvBillingHistoryRecord() {
    this->initializeModel();
}

OAIItvBillingHistoryRecord::~OAIItvBillingHistoryRecord() {}

void OAIItvBillingHistoryRecord::initializeModel() {

    m_card_isSet = false;
    m_card_isValid = false;

    m_charge_isSet = false;
    m_charge_isValid = false;

    m_invoice_isSet = false;
    m_invoice_isValid = false;

    m_subscription_isSet = false;
    m_subscription_isValid = false;
}

void OAIItvBillingHistoryRecord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItvBillingHistoryRecord::fromJsonObject(QJsonObject json) {

    m_card_isValid = ::OpenAPI::fromJsonValue(m_card, json[QString("card")]);
    m_card_isSet = !json[QString("card")].isNull() && m_card_isValid;

    m_charge_isValid = ::OpenAPI::fromJsonValue(m_charge, json[QString("charge")]);
    m_charge_isSet = !json[QString("charge")].isNull() && m_charge_isValid;

    m_invoice_isValid = ::OpenAPI::fromJsonValue(m_invoice, json[QString("invoice")]);
    m_invoice_isSet = !json[QString("invoice")].isNull() && m_invoice_isValid;

    m_subscription_isValid = ::OpenAPI::fromJsonValue(m_subscription, json[QString("subscription")]);
    m_subscription_isSet = !json[QString("subscription")].isNull() && m_subscription_isValid;
}

QString OAIItvBillingHistoryRecord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItvBillingHistoryRecord::asJsonObject() const {
    QJsonObject obj;
    if (m_card_isSet) {
        obj.insert(QString("card"), ::OpenAPI::toJsonValue(m_card));
    }
    if (m_charge_isSet) {
        obj.insert(QString("charge"), ::OpenAPI::toJsonValue(m_charge));
    }
    if (m_invoice_isSet) {
        obj.insert(QString("invoice"), ::OpenAPI::toJsonValue(m_invoice));
    }
    if (m_subscription_isSet) {
        obj.insert(QString("subscription"), ::OpenAPI::toJsonValue(m_subscription));
    }
    return obj;
}

OAIObject OAIItvBillingHistoryRecord::getCard() const {
    return m_card;
}
void OAIItvBillingHistoryRecord::setCard(const OAIObject &card) {
    m_card = card;
    m_card_isSet = true;
}

bool OAIItvBillingHistoryRecord::is_card_Set() const{
    return m_card_isSet;
}

bool OAIItvBillingHistoryRecord::is_card_Valid() const{
    return m_card_isValid;
}

OAIObject OAIItvBillingHistoryRecord::getCharge() const {
    return m_charge;
}
void OAIItvBillingHistoryRecord::setCharge(const OAIObject &charge) {
    m_charge = charge;
    m_charge_isSet = true;
}

bool OAIItvBillingHistoryRecord::is_charge_Set() const{
    return m_charge_isSet;
}

bool OAIItvBillingHistoryRecord::is_charge_Valid() const{
    return m_charge_isValid;
}

OAIObject OAIItvBillingHistoryRecord::getInvoice() const {
    return m_invoice;
}
void OAIItvBillingHistoryRecord::setInvoice(const OAIObject &invoice) {
    m_invoice = invoice;
    m_invoice_isSet = true;
}

bool OAIItvBillingHistoryRecord::is_invoice_Set() const{
    return m_invoice_isSet;
}

bool OAIItvBillingHistoryRecord::is_invoice_Valid() const{
    return m_invoice_isValid;
}

OAIObject OAIItvBillingHistoryRecord::getSubscription() const {
    return m_subscription;
}
void OAIItvBillingHistoryRecord::setSubscription(const OAIObject &subscription) {
    m_subscription = subscription;
    m_subscription_isSet = true;
}

bool OAIItvBillingHistoryRecord::is_subscription_Set() const{
    return m_subscription_isSet;
}

bool OAIItvBillingHistoryRecord::is_subscription_Valid() const{
    return m_subscription_isValid;
}

bool OAIItvBillingHistoryRecord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_card_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_charge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItvBillingHistoryRecord::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_card_isValid && m_charge_isValid && m_invoice_isValid && m_subscription_isValid && true;
}

} // namespace OpenAPI
