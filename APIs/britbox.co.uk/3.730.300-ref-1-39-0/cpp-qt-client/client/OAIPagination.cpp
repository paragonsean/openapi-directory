/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPagination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPagination::OAIPagination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPagination::OAIPagination() {
    this->initializeModel();
}

OAIPagination::~OAIPagination() {}

void OAIPagination::initializeModel() {

    m_authorization_isSet = false;
    m_authorization_isValid = false;

    m_next_isSet = false;
    m_next_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_previous_isSet = false;
    m_previous_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIPagination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPagination::fromJsonObject(QJsonObject json) {

    m_authorization_isValid = ::OpenAPI::fromJsonValue(m_authorization, json[QString("authorization")]);
    m_authorization_isSet = !json[QString("authorization")].isNull() && m_authorization_isValid;

    m_next_isValid = ::OpenAPI::fromJsonValue(m_next, json[QString("next")]);
    m_next_isSet = !json[QString("next")].isNull() && m_next_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_previous_isValid = ::OpenAPI::fromJsonValue(m_previous, json[QString("previous")]);
    m_previous_isSet = !json[QString("previous")].isNull() && m_previous_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIPagination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPagination::asJsonObject() const {
    QJsonObject obj;
    if (m_authorization.isSet()) {
        obj.insert(QString("authorization"), ::OpenAPI::toJsonValue(m_authorization));
    }
    if (m_next_isSet) {
        obj.insert(QString("next"), ::OpenAPI::toJsonValue(m_next));
    }
    if (m_options.isSet()) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_previous_isSet) {
        obj.insert(QString("previous"), ::OpenAPI::toJsonValue(m_previous));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

OAIPaginationAuth OAIPagination::getAuthorization() const {
    return m_authorization;
}
void OAIPagination::setAuthorization(const OAIPaginationAuth &authorization) {
    m_authorization = authorization;
    m_authorization_isSet = true;
}

bool OAIPagination::is_authorization_Set() const{
    return m_authorization_isSet;
}

bool OAIPagination::is_authorization_Valid() const{
    return m_authorization_isValid;
}

QString OAIPagination::getNext() const {
    return m_next;
}
void OAIPagination::setNext(const QString &next) {
    m_next = next;
    m_next_isSet = true;
}

bool OAIPagination::is_next_Set() const{
    return m_next_isSet;
}

bool OAIPagination::is_next_Valid() const{
    return m_next_isValid;
}

OAIPaginationOptions OAIPagination::getOptions() const {
    return m_options;
}
void OAIPagination::setOptions(const OAIPaginationOptions &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIPagination::is_options_Set() const{
    return m_options_isSet;
}

bool OAIPagination::is_options_Valid() const{
    return m_options_isValid;
}

qint32 OAIPagination::getPage() const {
    return m_page;
}
void OAIPagination::setPage(const qint32 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAIPagination::is_page_Set() const{
    return m_page_isSet;
}

bool OAIPagination::is_page_Valid() const{
    return m_page_isValid;
}

QString OAIPagination::getPrevious() const {
    return m_previous;
}
void OAIPagination::setPrevious(const QString &previous) {
    m_previous = previous;
    m_previous_isSet = true;
}

bool OAIPagination::is_previous_Set() const{
    return m_previous_isSet;
}

bool OAIPagination::is_previous_Valid() const{
    return m_previous_isValid;
}

qint32 OAIPagination::getSize() const {
    return m_size;
}
void OAIPagination::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIPagination::is_size_Set() const{
    return m_size_isSet;
}

bool OAIPagination::is_size_Valid() const{
    return m_size_isValid;
}

qint32 OAIPagination::getTotal() const {
    return m_total;
}
void OAIPagination::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIPagination::is_total_Set() const{
    return m_total_isSet;
}

bool OAIPagination::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIPagination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPagination::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_page_isValid && m_total_isValid && true;
}

} // namespace OpenAPI
