/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItvPlanListItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItvPlanListItem::OAIItvPlanListItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItvPlanListItem::OAIItvPlanListItem() {
    this->initializeModel();
}

OAIItvPlanListItem::~OAIItvPlanListItem() {}

void OAIItvPlanListItem::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_interval_count_isSet = false;
    m_interval_count_isValid = false;

    m_nickname_isSet = false;
    m_nickname_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_saving_label_isSet = false;
    m_saving_label_isValid = false;

    m_switching_text_isSet = false;
    m_switching_text_isValid = false;

    m_trial_period_days_isSet = false;
    m_trial_period_days_isValid = false;
}

void OAIItvPlanListItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItvPlanListItem::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_interval_count_isValid = ::OpenAPI::fromJsonValue(m_interval_count, json[QString("intervalCount")]);
    m_interval_count_isSet = !json[QString("intervalCount")].isNull() && m_interval_count_isValid;

    m_nickname_isValid = ::OpenAPI::fromJsonValue(m_nickname, json[QString("nickname")]);
    m_nickname_isSet = !json[QString("nickname")].isNull() && m_nickname_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_saving_label_isValid = ::OpenAPI::fromJsonValue(m_saving_label, json[QString("savingLabel")]);
    m_saving_label_isSet = !json[QString("savingLabel")].isNull() && m_saving_label_isValid;

    m_switching_text_isValid = ::OpenAPI::fromJsonValue(m_switching_text, json[QString("switchingText")]);
    m_switching_text_isSet = !json[QString("switchingText")].isNull() && m_switching_text_isValid;

    m_trial_period_days_isValid = ::OpenAPI::fromJsonValue(m_trial_period_days, json[QString("trialPeriodDays")]);
    m_trial_period_days_isSet = !json[QString("trialPeriodDays")].isNull() && m_trial_period_days_isValid;
}

QString OAIItvPlanListItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItvPlanListItem::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_interval_count_isSet) {
        obj.insert(QString("intervalCount"), ::OpenAPI::toJsonValue(m_interval_count));
    }
    if (m_nickname_isSet) {
        obj.insert(QString("nickname"), ::OpenAPI::toJsonValue(m_nickname));
    }
    if (m_product_isSet) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_saving_label_isSet) {
        obj.insert(QString("savingLabel"), ::OpenAPI::toJsonValue(m_saving_label));
    }
    if (m_switching_text_isSet) {
        obj.insert(QString("switchingText"), ::OpenAPI::toJsonValue(m_switching_text));
    }
    if (m_trial_period_days_isSet) {
        obj.insert(QString("trialPeriodDays"), ::OpenAPI::toJsonValue(m_trial_period_days));
    }
    return obj;
}

float OAIItvPlanListItem::getAmount() const {
    return m_amount;
}
void OAIItvPlanListItem::setAmount(const float &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIItvPlanListItem::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIItvPlanListItem::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIItvPlanListItem::getCurrency() const {
    return m_currency;
}
void OAIItvPlanListItem::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIItvPlanListItem::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIItvPlanListItem::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIItvPlanListItem::getDescription() const {
    return m_description;
}
void OAIItvPlanListItem::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIItvPlanListItem::is_description_Set() const{
    return m_description_isSet;
}

bool OAIItvPlanListItem::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIItvPlanListItem::getId() const {
    return m_id;
}
void OAIItvPlanListItem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIItvPlanListItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIItvPlanListItem::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIItvPlanListItem::getInterval() const {
    return m_interval;
}
void OAIItvPlanListItem::setInterval(const QString &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIItvPlanListItem::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIItvPlanListItem::is_interval_Valid() const{
    return m_interval_isValid;
}

qint32 OAIItvPlanListItem::getIntervalCount() const {
    return m_interval_count;
}
void OAIItvPlanListItem::setIntervalCount(const qint32 &interval_count) {
    m_interval_count = interval_count;
    m_interval_count_isSet = true;
}

bool OAIItvPlanListItem::is_interval_count_Set() const{
    return m_interval_count_isSet;
}

bool OAIItvPlanListItem::is_interval_count_Valid() const{
    return m_interval_count_isValid;
}

QString OAIItvPlanListItem::getNickname() const {
    return m_nickname;
}
void OAIItvPlanListItem::setNickname(const QString &nickname) {
    m_nickname = nickname;
    m_nickname_isSet = true;
}

bool OAIItvPlanListItem::is_nickname_Set() const{
    return m_nickname_isSet;
}

bool OAIItvPlanListItem::is_nickname_Valid() const{
    return m_nickname_isValid;
}

QString OAIItvPlanListItem::getProduct() const {
    return m_product;
}
void OAIItvPlanListItem::setProduct(const QString &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAIItvPlanListItem::is_product_Set() const{
    return m_product_isSet;
}

bool OAIItvPlanListItem::is_product_Valid() const{
    return m_product_isValid;
}

QString OAIItvPlanListItem::getSavingLabel() const {
    return m_saving_label;
}
void OAIItvPlanListItem::setSavingLabel(const QString &saving_label) {
    m_saving_label = saving_label;
    m_saving_label_isSet = true;
}

bool OAIItvPlanListItem::is_saving_label_Set() const{
    return m_saving_label_isSet;
}

bool OAIItvPlanListItem::is_saving_label_Valid() const{
    return m_saving_label_isValid;
}

QString OAIItvPlanListItem::getSwitchingText() const {
    return m_switching_text;
}
void OAIItvPlanListItem::setSwitchingText(const QString &switching_text) {
    m_switching_text = switching_text;
    m_switching_text_isSet = true;
}

bool OAIItvPlanListItem::is_switching_text_Set() const{
    return m_switching_text_isSet;
}

bool OAIItvPlanListItem::is_switching_text_Valid() const{
    return m_switching_text_isValid;
}

qint32 OAIItvPlanListItem::getTrialPeriodDays() const {
    return m_trial_period_days;
}
void OAIItvPlanListItem::setTrialPeriodDays(const qint32 &trial_period_days) {
    m_trial_period_days = trial_period_days;
    m_trial_period_days_isSet = true;
}

bool OAIItvPlanListItem::is_trial_period_days_Set() const{
    return m_trial_period_days_isSet;
}

bool OAIItvPlanListItem::is_trial_period_days_Valid() const{
    return m_trial_period_days_isValid;
}

bool OAIItvPlanListItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nickname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_saving_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_switching_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trial_period_days_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItvPlanListItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_currency_isValid && m_description_isValid && m_id_isValid && m_interval_isValid && m_interval_count_isValid && m_nickname_isValid && m_product_isValid && true;
}

} // namespace OpenAPI
