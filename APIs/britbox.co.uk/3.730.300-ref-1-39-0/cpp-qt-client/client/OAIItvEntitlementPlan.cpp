/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItvEntitlementPlan.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItvEntitlementPlan::OAIItvEntitlementPlan(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItvEntitlementPlan::OAIItvEntitlementPlan() {
    this->initializeModel();
}

OAIItvEntitlementPlan::~OAIItvEntitlementPlan() {}

void OAIItvEntitlementPlan::initializeModel() {

    m_cost_isSet = false;
    m_cost_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_trial_length_isSet = false;
    m_trial_length_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIItvEntitlementPlan::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItvEntitlementPlan::fromJsonObject(QJsonObject json) {

    m_cost_isValid = ::OpenAPI::fromJsonValue(m_cost, json[QString("cost")]);
    m_cost_isSet = !json[QString("cost")].isNull() && m_cost_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_trial_length_isValid = ::OpenAPI::fromJsonValue(m_trial_length, json[QString("trialLength")]);
    m_trial_length_isSet = !json[QString("trialLength")].isNull() && m_trial_length_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIItvEntitlementPlan::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItvEntitlementPlan::asJsonObject() const {
    QJsonObject obj;
    if (m_cost_isSet) {
        obj.insert(QString("cost"), ::OpenAPI::toJsonValue(m_cost));
    }
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_trial_length_isSet) {
        obj.insert(QString("trialLength"), ::OpenAPI::toJsonValue(m_trial_length));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAIItvEntitlementPlan::getCost() const {
    return m_cost;
}
void OAIItvEntitlementPlan::setCost(const qint32 &cost) {
    m_cost = cost;
    m_cost_isSet = true;
}

bool OAIItvEntitlementPlan::is_cost_Set() const{
    return m_cost_isSet;
}

bool OAIItvEntitlementPlan::is_cost_Valid() const{
    return m_cost_isValid;
}

QString OAIItvEntitlementPlan::getInterval() const {
    return m_interval;
}
void OAIItvEntitlementPlan::setInterval(const QString &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIItvEntitlementPlan::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIItvEntitlementPlan::is_interval_Valid() const{
    return m_interval_isValid;
}

qint32 OAIItvEntitlementPlan::getTrialLength() const {
    return m_trial_length;
}
void OAIItvEntitlementPlan::setTrialLength(const qint32 &trial_length) {
    m_trial_length = trial_length;
    m_trial_length_isSet = true;
}

bool OAIItvEntitlementPlan::is_trial_length_Set() const{
    return m_trial_length_isSet;
}

bool OAIItvEntitlementPlan::is_trial_length_Valid() const{
    return m_trial_length_isValid;
}

QString OAIItvEntitlementPlan::getType() const {
    return m_type;
}
void OAIItvEntitlementPlan::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIItvEntitlementPlan::is_type_Set() const{
    return m_type_isSet;
}

bool OAIItvEntitlementPlan::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIItvEntitlementPlan::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trial_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItvEntitlementPlan::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cost_isValid && m_interval_isValid && m_trial_length_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
