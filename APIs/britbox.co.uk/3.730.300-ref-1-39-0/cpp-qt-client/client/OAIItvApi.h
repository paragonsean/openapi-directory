/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIItvApi_H
#define OAI_OAIItvApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccessToken.h"
#include "OAIItemList.h"
#include "OAIItvBillingHistory.h"
#include "OAIItvBillingHistoryRequest.h"
#include "OAIItvCancelSubscriptionRequest.h"
#include "OAIItvCardDetails.h"
#include "OAIItvChangeCardDetailsRequest.h"
#include "OAIItvChangeEmailRequest.h"
#include "OAIItvChangeMarketingRequest.h"
#include "OAIItvCurrentSubscription.h"
#include "OAIItvDeleteAccountRequest.h"
#include "OAIItvEntitlementCurrent.h"
#include "OAIItvEntitlementsHistory.h"
#include "OAIItvFeatureFlag.h"
#include "OAIItvGetCardDetailsRequest.h"
#include "OAIItvGetDiscountResponse.h"
#include "OAIItvGooglePaySubscriptionRequest.h"
#include "OAIItvHadEntitlement.h"
#include "OAIItvPinAuthRequest.h"
#include "OAIItvPlans.h"
#include "OAIItvProfileToken.h"
#include "OAIItvProfileTokenRequest.h"
#include "OAIItvPurchase.h"
#include "OAIItvPurchaseRequest.h"
#include "OAIItvPurchaseStrongRequest.h"
#include "OAIItvPurchaseStrongResponse.h"
#include "OAIItvPurchaseWithOfferRequest.h"
#include "OAIItvPurchaseWithOfferResponse.h"
#include "OAIItvRokuTransactionRequest.h"
#include "OAIItvSubscriptionFullPriceRenewal.h"
#include "OAIItvSubscriptionState.h"
#include "OAIItvSubscriptionStatusResponse.h"
#include "OAIItvUpdateIntentStrongRequest.h"
#include "OAIItvUpdateIntentStrongResponse.h"
#include "OAIItvUpdatePaymentStrongRequest.h"
#include "OAIItvUpdateProfileRequest.h"
#include "OAIItvUpgradePlanRequest.h"
#include "OAIItvVoucher.h"
#include "OAIItvVoucherRequest.h"
#include "OAIObject.h"
#include "OAIRokuPlans.h"
#include "OAISamsungPreview.h"
#include "OAIServiceError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIItvApi : public QObject {
    Q_OBJECT

public:
    OAIItvApi(const int timeOut = 0);
    ~OAIItvApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  body QString [required]
    * @param[in]  lang QString [optional]
    */
    virtual void activateSaveOffer(const QString &body, const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  platform QString [required]
    * @param[in]  oai_itv_change_card_details_request OAIItvChangeCardDetailsRequest [required]
    * @param[in]  lang QString [optional]
    */
    virtual void changeCardDetails(const QString &platform, const OAIItvChangeCardDetailsRequest &oai_itv_change_card_details_request, const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_itv_change_email_request OAIItvChangeEmailRequest [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void changeEmail(const OAIItvChangeEmailRequest &oai_itv_change_email_request, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_itv_change_marketing_request OAIItvChangeMarketingRequest [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void changeMarketing(const OAIItvChangeMarketingRequest &oai_itv_change_marketing_request, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  lang QString [optional]
    */
    virtual void checkPreviousEntitlements(const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  platform QString [required]
    * @param[in]  oai_itv_voucher_request OAIItvVoucherRequest [required]
    * @param[in]  lang QString [optional]
    */
    virtual void checkVoucher(const QString &platform, const OAIItvVoucherRequest &oai_itv_voucher_request, const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  platform QString [required]
    * @param[in]  oai_itv_purchase_request OAIItvPurchaseRequest [required]
    * @param[in]  lang QString [optional]
    */
    virtual void confirmPurchase(const QString &platform, const OAIItvPurchaseRequest &oai_itv_purchase_request, const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  platform QString [required]
    * @param[in]  oai_itv_purchase_strong_request OAIItvPurchaseStrongRequest [required]
    * @param[in]  lang QString [optional]
    */
    virtual void confirmPurchaseStrong(const QString &platform, const OAIItvPurchaseStrongRequest &oai_itv_purchase_strong_request, const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  platform QString [required]
    * @param[in]  oai_itv_purchase_with_offer_request OAIItvPurchaseWithOfferRequest [required]
    * @param[in]  lang QString [optional]
    */
    virtual void confirmPurchaseWithOffer(const QString &platform, const OAIItvPurchaseWithOfferRequest &oai_itv_purchase_with_offer_request, const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_itv_delete_account_request OAIItvDeleteAccountRequest [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void deleteAccount(const OAIItvDeleteAccountRequest &oai_itv_delete_account_request, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  transactionid QString [required]
    * @param[in]  oai_itv_roku_transaction_request OAIItvRokuTransactionRequest [required]
    * @param[in]  lang QString [optional]
    */
    virtual void executeTransaction(const QString &transactionid, const OAIItvRokuTransactionRequest &oai_itv_roku_transaction_request, const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_itv_pin_auth_request OAIItvPinAuthRequest [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getAccountTokenWithPin(const OAIItvPinAuthRequest &oai_itv_pin_auth_request, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  platform QString [required]
    * @param[in]  oai_itv_billing_history_request OAIItvBillingHistoryRequest [required]
    * @param[in]  lang QString [optional]
    */
    virtual void getBillingHistory(const QString &platform, const OAIItvBillingHistoryRequest &oai_itv_billing_history_request, const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  platform QString [required]
    * @param[in]  oai_itv_get_card_details_request OAIItvGetCardDetailsRequest [required]
    * @param[in]  lang QString [optional]
    */
    virtual void getCardDetails(const QString &platform, const OAIItvGetCardDetailsRequest &oai_itv_get_card_details_request, const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  lang QString [optional]
    */
    virtual void getCurrentEntitlement(const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  platform QString [required]
    * @param[in]  lang QString [optional]
    */
    virtual void getCurrentSubscription(const QString &platform, const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  lang QString [optional]
    */
    virtual void getEntitlementsHistory(const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  feature QString [required]
    * @param[in]  lang QString [optional]
    */
    virtual void getFeatureFlag(const QString &feature, const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  lang QString [optional]
    */
    virtual void getFullPriceRenewal(const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_itv_profile_token_request OAIItvProfileTokenRequest [required]
    * @param[in]  lang QString [optional]
    */
    virtual void getItvProfileToken(const OAIItvProfileTokenRequest &oai_itv_profile_token_request, const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());


    virtual void getPublicPreview();

    /**
    * @param[in]  item_types QList<QString> [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  device QString [optional]
    * @param[in]  sub QString [optional]
    * @param[in]  segments QList<QString> [optional]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getRecommendedList(const ::OpenAPI::OptionalParam<QList<QString>> &item_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sub = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &segments = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  lang QString [optional]
    */
    virtual void getSaveOffer(const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  lang QString [optional]
    */
    virtual void getSubscriptionState(const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  platform QString [required]
    * @param[in]  lang QString [optional]
    */
    virtual void getSubscriptionStatus(const QString &platform, const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  lang QString [optional]
    */
    virtual void getUpcomingInvoice(const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voucher_id QString [required]
    * @param[in]  plan_id QString [required]
    * @param[in]  lang QString [optional]
    */
    virtual void getVoucherById(const QString &voucher_id, const QString &plan_id, const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_itv_google_pay_subscription_request OAIItvGooglePaySubscriptionRequest [required]
    * @param[in]  lang QString [optional]
    */
    virtual void googlePaySubscription(const OAIItvGooglePaySubscriptionRequest &oai_itv_google_pay_subscription_request, const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  external_id QString [required]
    */
    virtual void itvItemsummaryExternalIdGet(const QString &external_id);

    /**
    * @param[in]  platform QString [required]
    * @param[in]  lang QString [optional]
    */
    virtual void itvPlansPlatformGet(const QString &platform, const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  lang QString [optional]
    */
    virtual void itvProfileGet(const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  platform QString [required]
    * @param[in]  oai_itv_cancel_subscription_request OAIItvCancelSubscriptionRequest [required]
    * @param[in]  lang QString [optional]
    */
    virtual void itvPurchasePlatformDelete(const QString &platform, const OAIItvCancelSubscriptionRequest &oai_itv_cancel_subscription_request, const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  lang QString [optional]
    */
    virtual void itvRokuPlansGet(const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  plan_id QString [required]
    * @param[in]  platform QString [required]
    * @param[in]  lang QString [optional]
    */
    virtual void resubscribe(const QString &plan_id, const QString &platform, const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  platform QString [required]
    * @param[in]  oai_itv_update_intent_strong_request OAIItvUpdateIntentStrongRequest [required]
    * @param[in]  lang QString [optional]
    */
    virtual void updatePaymentIntentStrong(const QString &platform, const OAIItvUpdateIntentStrongRequest &oai_itv_update_intent_strong_request, const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  platform QString [required]
    * @param[in]  oai_itv_update_payment_strong_request OAIItvUpdatePaymentStrongRequest [required]
    * @param[in]  lang QString [optional]
    */
    virtual void updatePaymentMethodStrong(const QString &platform, const OAIItvUpdatePaymentStrongRequest &oai_itv_update_payment_strong_request, const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_itv_update_profile_request OAIItvUpdateProfileRequest [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void updateProfile(const OAIItvUpdateProfileRequest &oai_itv_update_profile_request, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  platform QString [required]
    * @param[in]  oai_itv_upgrade_plan_request OAIItvUpgradePlanRequest [required]
    * @param[in]  lang QString [optional]
    */
    virtual void upgradePlan(const QString &platform, const OAIItvUpgradePlanRequest &oai_itv_upgrade_plan_request, const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void activateSaveOfferCallback(OAIHttpRequestWorker *worker);
    void changeCardDetailsCallback(OAIHttpRequestWorker *worker);
    void changeEmailCallback(OAIHttpRequestWorker *worker);
    void changeMarketingCallback(OAIHttpRequestWorker *worker);
    void checkPreviousEntitlementsCallback(OAIHttpRequestWorker *worker);
    void checkVoucherCallback(OAIHttpRequestWorker *worker);
    void confirmPurchaseCallback(OAIHttpRequestWorker *worker);
    void confirmPurchaseStrongCallback(OAIHttpRequestWorker *worker);
    void confirmPurchaseWithOfferCallback(OAIHttpRequestWorker *worker);
    void deleteAccountCallback(OAIHttpRequestWorker *worker);
    void executeTransactionCallback(OAIHttpRequestWorker *worker);
    void getAccountTokenWithPinCallback(OAIHttpRequestWorker *worker);
    void getBillingHistoryCallback(OAIHttpRequestWorker *worker);
    void getCardDetailsCallback(OAIHttpRequestWorker *worker);
    void getCurrentEntitlementCallback(OAIHttpRequestWorker *worker);
    void getCurrentSubscriptionCallback(OAIHttpRequestWorker *worker);
    void getEntitlementsHistoryCallback(OAIHttpRequestWorker *worker);
    void getFeatureFlagCallback(OAIHttpRequestWorker *worker);
    void getFullPriceRenewalCallback(OAIHttpRequestWorker *worker);
    void getItvProfileTokenCallback(OAIHttpRequestWorker *worker);
    void getPublicPreviewCallback(OAIHttpRequestWorker *worker);
    void getRecommendedListCallback(OAIHttpRequestWorker *worker);
    void getSaveOfferCallback(OAIHttpRequestWorker *worker);
    void getSubscriptionStateCallback(OAIHttpRequestWorker *worker);
    void getSubscriptionStatusCallback(OAIHttpRequestWorker *worker);
    void getUpcomingInvoiceCallback(OAIHttpRequestWorker *worker);
    void getVoucherByIdCallback(OAIHttpRequestWorker *worker);
    void googlePaySubscriptionCallback(OAIHttpRequestWorker *worker);
    void itvItemsummaryExternalIdGetCallback(OAIHttpRequestWorker *worker);
    void itvPlansPlatformGetCallback(OAIHttpRequestWorker *worker);
    void itvProfileGetCallback(OAIHttpRequestWorker *worker);
    void itvPurchasePlatformDeleteCallback(OAIHttpRequestWorker *worker);
    void itvRokuPlansGetCallback(OAIHttpRequestWorker *worker);
    void resubscribeCallback(OAIHttpRequestWorker *worker);
    void updatePaymentIntentStrongCallback(OAIHttpRequestWorker *worker);
    void updatePaymentMethodStrongCallback(OAIHttpRequestWorker *worker);
    void updateProfileCallback(OAIHttpRequestWorker *worker);
    void upgradePlanCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void activateSaveOfferSignal();
    void changeCardDetailsSignal();
    void changeEmailSignal();
    void changeMarketingSignal();
    void checkPreviousEntitlementsSignal(OAIItvHadEntitlement summary);
    void checkVoucherSignal(OAIItvVoucher summary);
    void confirmPurchaseSignal(OAIItvPurchase summary);
    void confirmPurchaseStrongSignal(OAIItvPurchaseStrongResponse summary);
    void confirmPurchaseWithOfferSignal(OAIItvPurchaseWithOfferResponse summary);
    void deleteAccountSignal();
    void executeTransactionSignal();
    void getAccountTokenWithPinSignal(QList<OAIAccessToken> summary);
    void getBillingHistorySignal(OAIItvBillingHistory summary);
    void getCardDetailsSignal(OAIItvCardDetails summary);
    void getCurrentEntitlementSignal(OAIItvEntitlementCurrent summary);
    void getCurrentSubscriptionSignal(OAIItvCurrentSubscription summary);
    void getEntitlementsHistorySignal(OAIItvEntitlementsHistory summary);
    void getFeatureFlagSignal(OAIItvFeatureFlag summary);
    void getFullPriceRenewalSignal(OAIItvSubscriptionFullPriceRenewal summary);
    void getItvProfileTokenSignal(OAIItvProfileToken summary);
    void getPublicPreviewSignal(OAISamsungPreview summary);
    void getRecommendedListSignal(OAIItemList summary);
    void getSaveOfferSignal(OAIItvGetDiscountResponse summary);
    void getSubscriptionStateSignal(OAIItvSubscriptionState summary);
    void getSubscriptionStatusSignal(OAIItvSubscriptionStatusResponse summary);
    void getUpcomingInvoiceSignal(OAIItvGetDiscountResponse summary);
    void getVoucherByIdSignal(OAIItvVoucher summary);
    void googlePaySubscriptionSignal();
    void itvItemsummaryExternalIdGetSignal(OAIServiceError summary);
    void itvPlansPlatformGetSignal(OAIItvPlans summary);
    void itvProfileGetSignal(OAIObject summary);
    void itvPurchasePlatformDeleteSignal();
    void itvRokuPlansGetSignal(OAIRokuPlans summary);
    void resubscribeSignal(OAIObject summary);
    void updatePaymentIntentStrongSignal(OAIItvUpdateIntentStrongResponse summary);
    void updatePaymentMethodStrongSignal();
    void updateProfileSignal();
    void upgradePlanSignal();


    void activateSaveOfferSignalFull(OAIHttpRequestWorker *worker);
    void changeCardDetailsSignalFull(OAIHttpRequestWorker *worker);
    void changeEmailSignalFull(OAIHttpRequestWorker *worker);
    void changeMarketingSignalFull(OAIHttpRequestWorker *worker);
    void checkPreviousEntitlementsSignalFull(OAIHttpRequestWorker *worker, OAIItvHadEntitlement summary);
    void checkVoucherSignalFull(OAIHttpRequestWorker *worker, OAIItvVoucher summary);
    void confirmPurchaseSignalFull(OAIHttpRequestWorker *worker, OAIItvPurchase summary);
    void confirmPurchaseStrongSignalFull(OAIHttpRequestWorker *worker, OAIItvPurchaseStrongResponse summary);
    void confirmPurchaseWithOfferSignalFull(OAIHttpRequestWorker *worker, OAIItvPurchaseWithOfferResponse summary);
    void deleteAccountSignalFull(OAIHttpRequestWorker *worker);
    void executeTransactionSignalFull(OAIHttpRequestWorker *worker);
    void getAccountTokenWithPinSignalFull(OAIHttpRequestWorker *worker, QList<OAIAccessToken> summary);
    void getBillingHistorySignalFull(OAIHttpRequestWorker *worker, OAIItvBillingHistory summary);
    void getCardDetailsSignalFull(OAIHttpRequestWorker *worker, OAIItvCardDetails summary);
    void getCurrentEntitlementSignalFull(OAIHttpRequestWorker *worker, OAIItvEntitlementCurrent summary);
    void getCurrentSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIItvCurrentSubscription summary);
    void getEntitlementsHistorySignalFull(OAIHttpRequestWorker *worker, OAIItvEntitlementsHistory summary);
    void getFeatureFlagSignalFull(OAIHttpRequestWorker *worker, OAIItvFeatureFlag summary);
    void getFullPriceRenewalSignalFull(OAIHttpRequestWorker *worker, OAIItvSubscriptionFullPriceRenewal summary);
    void getItvProfileTokenSignalFull(OAIHttpRequestWorker *worker, OAIItvProfileToken summary);
    void getPublicPreviewSignalFull(OAIHttpRequestWorker *worker, OAISamsungPreview summary);
    void getRecommendedListSignalFull(OAIHttpRequestWorker *worker, OAIItemList summary);
    void getSaveOfferSignalFull(OAIHttpRequestWorker *worker, OAIItvGetDiscountResponse summary);
    void getSubscriptionStateSignalFull(OAIHttpRequestWorker *worker, OAIItvSubscriptionState summary);
    void getSubscriptionStatusSignalFull(OAIHttpRequestWorker *worker, OAIItvSubscriptionStatusResponse summary);
    void getUpcomingInvoiceSignalFull(OAIHttpRequestWorker *worker, OAIItvGetDiscountResponse summary);
    void getVoucherByIdSignalFull(OAIHttpRequestWorker *worker, OAIItvVoucher summary);
    void googlePaySubscriptionSignalFull(OAIHttpRequestWorker *worker);
    void itvItemsummaryExternalIdGetSignalFull(OAIHttpRequestWorker *worker, OAIServiceError summary);
    void itvPlansPlatformGetSignalFull(OAIHttpRequestWorker *worker, OAIItvPlans summary);
    void itvProfileGetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void itvPurchasePlatformDeleteSignalFull(OAIHttpRequestWorker *worker);
    void itvRokuPlansGetSignalFull(OAIHttpRequestWorker *worker, OAIRokuPlans summary);
    void resubscribeSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updatePaymentIntentStrongSignalFull(OAIHttpRequestWorker *worker, OAIItvUpdateIntentStrongResponse summary);
    void updatePaymentMethodStrongSignalFull(OAIHttpRequestWorker *worker);
    void updateProfileSignalFull(OAIHttpRequestWorker *worker);
    void upgradePlanSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use activateSaveOfferSignalError() instead")
    void activateSaveOfferSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void activateSaveOfferSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeCardDetailsSignalError() instead")
    void changeCardDetailsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void changeCardDetailsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeEmailSignalError() instead")
    void changeEmailSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void changeEmailSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeMarketingSignalError() instead")
    void changeMarketingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void changeMarketingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkPreviousEntitlementsSignalError() instead")
    void checkPreviousEntitlementsSignalE(OAIItvHadEntitlement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkPreviousEntitlementsSignalError(OAIItvHadEntitlement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkVoucherSignalError() instead")
    void checkVoucherSignalE(OAIItvVoucher summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkVoucherSignalError(OAIItvVoucher summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmPurchaseSignalError() instead")
    void confirmPurchaseSignalE(OAIItvPurchase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void confirmPurchaseSignalError(OAIItvPurchase summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmPurchaseStrongSignalError() instead")
    void confirmPurchaseStrongSignalE(OAIItvPurchaseStrongResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void confirmPurchaseStrongSignalError(OAIItvPurchaseStrongResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmPurchaseWithOfferSignalError() instead")
    void confirmPurchaseWithOfferSignalE(OAIItvPurchaseWithOfferResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void confirmPurchaseWithOfferSignalError(OAIItvPurchaseWithOfferResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAccountSignalError() instead")
    void deleteAccountSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAccountSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use executeTransactionSignalError() instead")
    void executeTransactionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void executeTransactionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountTokenWithPinSignalError() instead")
    void getAccountTokenWithPinSignalE(QList<OAIAccessToken> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountTokenWithPinSignalError(QList<OAIAccessToken> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBillingHistorySignalError() instead")
    void getBillingHistorySignalE(OAIItvBillingHistory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBillingHistorySignalError(OAIItvBillingHistory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCardDetailsSignalError() instead")
    void getCardDetailsSignalE(OAIItvCardDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCardDetailsSignalError(OAIItvCardDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCurrentEntitlementSignalError() instead")
    void getCurrentEntitlementSignalE(OAIItvEntitlementCurrent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCurrentEntitlementSignalError(OAIItvEntitlementCurrent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCurrentSubscriptionSignalError() instead")
    void getCurrentSubscriptionSignalE(OAIItvCurrentSubscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCurrentSubscriptionSignalError(OAIItvCurrentSubscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEntitlementsHistorySignalError() instead")
    void getEntitlementsHistorySignalE(OAIItvEntitlementsHistory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEntitlementsHistorySignalError(OAIItvEntitlementsHistory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeatureFlagSignalError() instead")
    void getFeatureFlagSignalE(OAIItvFeatureFlag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeatureFlagSignalError(OAIItvFeatureFlag summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFullPriceRenewalSignalError() instead")
    void getFullPriceRenewalSignalE(OAIItvSubscriptionFullPriceRenewal summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFullPriceRenewalSignalError(OAIItvSubscriptionFullPriceRenewal summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItvProfileTokenSignalError() instead")
    void getItvProfileTokenSignalE(OAIItvProfileToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getItvProfileTokenSignalError(OAIItvProfileToken summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicPreviewSignalError() instead")
    void getPublicPreviewSignalE(OAISamsungPreview summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicPreviewSignalError(OAISamsungPreview summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecommendedListSignalError() instead")
    void getRecommendedListSignalE(OAIItemList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecommendedListSignalError(OAIItemList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSaveOfferSignalError() instead")
    void getSaveOfferSignalE(OAIItvGetDiscountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSaveOfferSignalError(OAIItvGetDiscountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubscriptionStateSignalError() instead")
    void getSubscriptionStateSignalE(OAIItvSubscriptionState summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubscriptionStateSignalError(OAIItvSubscriptionState summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubscriptionStatusSignalError() instead")
    void getSubscriptionStatusSignalE(OAIItvSubscriptionStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubscriptionStatusSignalError(OAIItvSubscriptionStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUpcomingInvoiceSignalError() instead")
    void getUpcomingInvoiceSignalE(OAIItvGetDiscountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUpcomingInvoiceSignalError(OAIItvGetDiscountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVoucherByIdSignalError() instead")
    void getVoucherByIdSignalE(OAIItvVoucher summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVoucherByIdSignalError(OAIItvVoucher summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use googlePaySubscriptionSignalError() instead")
    void googlePaySubscriptionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void googlePaySubscriptionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use itvItemsummaryExternalIdGetSignalError() instead")
    void itvItemsummaryExternalIdGetSignalE(OAIServiceError summary, QNetworkReply::NetworkError error_type, QString error_str);
    void itvItemsummaryExternalIdGetSignalError(OAIServiceError summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use itvPlansPlatformGetSignalError() instead")
    void itvPlansPlatformGetSignalE(OAIItvPlans summary, QNetworkReply::NetworkError error_type, QString error_str);
    void itvPlansPlatformGetSignalError(OAIItvPlans summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use itvProfileGetSignalError() instead")
    void itvProfileGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void itvProfileGetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use itvPurchasePlatformDeleteSignalError() instead")
    void itvPurchasePlatformDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void itvPurchasePlatformDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use itvRokuPlansGetSignalError() instead")
    void itvRokuPlansGetSignalE(OAIRokuPlans summary, QNetworkReply::NetworkError error_type, QString error_str);
    void itvRokuPlansGetSignalError(OAIRokuPlans summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resubscribeSignalError() instead")
    void resubscribeSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resubscribeSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePaymentIntentStrongSignalError() instead")
    void updatePaymentIntentStrongSignalE(OAIItvUpdateIntentStrongResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePaymentIntentStrongSignalError(OAIItvUpdateIntentStrongResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePaymentMethodStrongSignalError() instead")
    void updatePaymentMethodStrongSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updatePaymentMethodStrongSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProfileSignalError() instead")
    void updateProfileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateProfileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use upgradePlanSignalError() instead")
    void upgradePlanSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void upgradePlanSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use activateSaveOfferSignalErrorFull() instead")
    void activateSaveOfferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activateSaveOfferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeCardDetailsSignalErrorFull() instead")
    void changeCardDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changeCardDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeEmailSignalErrorFull() instead")
    void changeEmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changeEmailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeMarketingSignalErrorFull() instead")
    void changeMarketingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changeMarketingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkPreviousEntitlementsSignalErrorFull() instead")
    void checkPreviousEntitlementsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkPreviousEntitlementsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkVoucherSignalErrorFull() instead")
    void checkVoucherSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkVoucherSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmPurchaseSignalErrorFull() instead")
    void confirmPurchaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void confirmPurchaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmPurchaseStrongSignalErrorFull() instead")
    void confirmPurchaseStrongSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void confirmPurchaseStrongSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmPurchaseWithOfferSignalErrorFull() instead")
    void confirmPurchaseWithOfferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void confirmPurchaseWithOfferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAccountSignalErrorFull() instead")
    void deleteAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use executeTransactionSignalErrorFull() instead")
    void executeTransactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void executeTransactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountTokenWithPinSignalErrorFull() instead")
    void getAccountTokenWithPinSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountTokenWithPinSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBillingHistorySignalErrorFull() instead")
    void getBillingHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBillingHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCardDetailsSignalErrorFull() instead")
    void getCardDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCardDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCurrentEntitlementSignalErrorFull() instead")
    void getCurrentEntitlementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCurrentEntitlementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCurrentSubscriptionSignalErrorFull() instead")
    void getCurrentSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCurrentSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEntitlementsHistorySignalErrorFull() instead")
    void getEntitlementsHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEntitlementsHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeatureFlagSignalErrorFull() instead")
    void getFeatureFlagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeatureFlagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFullPriceRenewalSignalErrorFull() instead")
    void getFullPriceRenewalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFullPriceRenewalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItvProfileTokenSignalErrorFull() instead")
    void getItvProfileTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getItvProfileTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicPreviewSignalErrorFull() instead")
    void getPublicPreviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicPreviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecommendedListSignalErrorFull() instead")
    void getRecommendedListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecommendedListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSaveOfferSignalErrorFull() instead")
    void getSaveOfferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSaveOfferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubscriptionStateSignalErrorFull() instead")
    void getSubscriptionStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubscriptionStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubscriptionStatusSignalErrorFull() instead")
    void getSubscriptionStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubscriptionStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUpcomingInvoiceSignalErrorFull() instead")
    void getUpcomingInvoiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUpcomingInvoiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVoucherByIdSignalErrorFull() instead")
    void getVoucherByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVoucherByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use googlePaySubscriptionSignalErrorFull() instead")
    void googlePaySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void googlePaySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use itvItemsummaryExternalIdGetSignalErrorFull() instead")
    void itvItemsummaryExternalIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void itvItemsummaryExternalIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use itvPlansPlatformGetSignalErrorFull() instead")
    void itvPlansPlatformGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void itvPlansPlatformGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use itvProfileGetSignalErrorFull() instead")
    void itvProfileGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void itvProfileGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use itvPurchasePlatformDeleteSignalErrorFull() instead")
    void itvPurchasePlatformDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void itvPurchasePlatformDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use itvRokuPlansGetSignalErrorFull() instead")
    void itvRokuPlansGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void itvRokuPlansGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resubscribeSignalErrorFull() instead")
    void resubscribeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resubscribeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePaymentIntentStrongSignalErrorFull() instead")
    void updatePaymentIntentStrongSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePaymentIntentStrongSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePaymentMethodStrongSignalErrorFull() instead")
    void updatePaymentMethodStrongSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePaymentMethodStrongSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProfileSignalErrorFull() instead")
    void updateProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use upgradePlanSignalErrorFull() instead")
    void upgradePlanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void upgradePlanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
