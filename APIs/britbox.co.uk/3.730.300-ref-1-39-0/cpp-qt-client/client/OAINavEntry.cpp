/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINavEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINavEntry::OAINavEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINavEntry::OAINavEntry() {
    this->initializeModel();
}

OAINavEntry::~OAINavEntry() {}

void OAINavEntry::initializeModel() {

    m_children_isSet = false;
    m_children_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_depth_isSet = false;
    m_depth_isValid = false;

    m_featured_isSet = false;
    m_featured_isValid = false;

    m_icon_isSet = false;
    m_icon_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;
}

void OAINavEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINavEntry::fromJsonObject(QJsonObject json) {

    m_children_isValid = ::OpenAPI::fromJsonValue(m_children, json[QString("children")]);
    m_children_isSet = !json[QString("children")].isNull() && m_children_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("customFields")]);
    m_custom_fields_isSet = !json[QString("customFields")].isNull() && m_custom_fields_isValid;

    m_depth_isValid = ::OpenAPI::fromJsonValue(m_depth, json[QString("depth")]);
    m_depth_isSet = !json[QString("depth")].isNull() && m_depth_isValid;

    m_featured_isValid = ::OpenAPI::fromJsonValue(m_featured, json[QString("featured")]);
    m_featured_isSet = !json[QString("featured")].isNull() && m_featured_isValid;

    m_icon_isValid = ::OpenAPI::fromJsonValue(m_icon, json[QString("icon")]);
    m_icon_isSet = !json[QString("icon")].isNull() && m_icon_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;
}

QString OAINavEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINavEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_children.size() > 0) {
        obj.insert(QString("children"), ::OpenAPI::toJsonValue(m_children));
    }
    if (m_content.isSet()) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("customFields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_depth_isSet) {
        obj.insert(QString("depth"), ::OpenAPI::toJsonValue(m_depth));
    }
    if (m_featured_isSet) {
        obj.insert(QString("featured"), ::OpenAPI::toJsonValue(m_featured));
    }
    if (m_icon_isSet) {
        obj.insert(QString("icon"), ::OpenAPI::toJsonValue(m_icon));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    return obj;
}

QList<OAINavEntry> OAINavEntry::getChildren() const {
    return m_children;
}
void OAINavEntry::setChildren(const QList<OAINavEntry> &children) {
    m_children = children;
    m_children_isSet = true;
}

bool OAINavEntry::is_children_Set() const{
    return m_children_isSet;
}

bool OAINavEntry::is_children_Valid() const{
    return m_children_isValid;
}

OAINavContent OAINavEntry::getContent() const {
    return m_content;
}
void OAINavEntry::setContent(const OAINavContent &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAINavEntry::is_content_Set() const{
    return m_content_isSet;
}

bool OAINavEntry::is_content_Valid() const{
    return m_content_isValid;
}

QMap<QString, QJsonValue> OAINavEntry::getCustomFields() const {
    return m_custom_fields;
}
void OAINavEntry::setCustomFields(const QMap<QString, QJsonValue> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAINavEntry::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAINavEntry::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

qint32 OAINavEntry::getDepth() const {
    return m_depth;
}
void OAINavEntry::setDepth(const qint32 &depth) {
    m_depth = depth;
    m_depth_isSet = true;
}

bool OAINavEntry::is_depth_Set() const{
    return m_depth_isSet;
}

bool OAINavEntry::is_depth_Valid() const{
    return m_depth_isValid;
}

bool OAINavEntry::isFeatured() const {
    return m_featured;
}
void OAINavEntry::setFeatured(const bool &featured) {
    m_featured = featured;
    m_featured_isSet = true;
}

bool OAINavEntry::is_featured_Set() const{
    return m_featured_isSet;
}

bool OAINavEntry::is_featured_Valid() const{
    return m_featured_isValid;
}

QString OAINavEntry::getIcon() const {
    return m_icon;
}
void OAINavEntry::setIcon(const QString &icon) {
    m_icon = icon;
    m_icon_isSet = true;
}

bool OAINavEntry::is_icon_Set() const{
    return m_icon_isSet;
}

bool OAINavEntry::is_icon_Valid() const{
    return m_icon_isValid;
}

QString OAINavEntry::getLabel() const {
    return m_label;
}
void OAINavEntry::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAINavEntry::is_label_Set() const{
    return m_label_isSet;
}

bool OAINavEntry::is_label_Valid() const{
    return m_label_isValid;
}

QString OAINavEntry::getPath() const {
    return m_path;
}
void OAINavEntry::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAINavEntry::is_path_Set() const{
    return m_path_isSet;
}

bool OAINavEntry::is_path_Valid() const{
    return m_path_isValid;
}

bool OAINavEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_children.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_depth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_featured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINavEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_depth_isValid && true;
}

} // namespace OpenAPI
