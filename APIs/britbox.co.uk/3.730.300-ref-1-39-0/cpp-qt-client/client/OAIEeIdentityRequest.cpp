/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEeIdentityRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEeIdentityRequest::OAIEeIdentityRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEeIdentityRequest::OAIEeIdentityRequest() {
    this->initializeModel();
}

OAIEeIdentityRequest::~OAIEeIdentityRequest() {}

void OAIEeIdentityRequest::initializeModel() {

    m_access_token_isSet = false;
    m_access_token_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;
}

void OAIEeIdentityRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEeIdentityRequest::fromJsonObject(QJsonObject json) {

    m_access_token_isValid = ::OpenAPI::fromJsonValue(m_access_token, json[QString("accessToken")]);
    m_access_token_isSet = !json[QString("accessToken")].isNull() && m_access_token_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("sessionId")]);
    m_session_id_isSet = !json[QString("sessionId")].isNull() && m_session_id_isValid;
}

QString OAIEeIdentityRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEeIdentityRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_access_token_isSet) {
        obj.insert(QString("accessToken"), ::OpenAPI::toJsonValue(m_access_token));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("sessionId"), ::OpenAPI::toJsonValue(m_session_id));
    }
    return obj;
}

QString OAIEeIdentityRequest::getAccessToken() const {
    return m_access_token;
}
void OAIEeIdentityRequest::setAccessToken(const QString &access_token) {
    m_access_token = access_token;
    m_access_token_isSet = true;
}

bool OAIEeIdentityRequest::is_access_token_Set() const{
    return m_access_token_isSet;
}

bool OAIEeIdentityRequest::is_access_token_Valid() const{
    return m_access_token_isValid;
}

QString OAIEeIdentityRequest::getSessionId() const {
    return m_session_id;
}
void OAIEeIdentityRequest::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAIEeIdentityRequest::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAIEeIdentityRequest::is_session_id_Valid() const{
    return m_session_id_isValid;
}

bool OAIEeIdentityRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEeIdentityRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_access_token_isValid && m_session_id_isValid && true;
}

} // namespace OpenAPI
