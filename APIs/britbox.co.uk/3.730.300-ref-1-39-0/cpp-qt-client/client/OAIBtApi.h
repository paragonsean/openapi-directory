/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBtApi_H
#define OAI_OAIBtApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBtPlanListItem.h"
#include "OAIBtPlans.h"
#include "OAIEeBtEligibility.h"
#include "OAIItvAssignBtTokenRequest.h"
#include "OAIServiceError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBtApi : public QObject {
    Q_OBJECT

public:
    OAIBtApi(const int timeOut = 0);
    ~OAIBtApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_itv_assign_bt_token_request OAIItvAssignBtTokenRequest [required]
    * @param[in]  lang QString [optional]
    */
    virtual void assignToken(const OAIItvAssignBtTokenRequest &oai_itv_assign_bt_token_request, const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  lang QString [optional]
    */
    virtual void checkEeBtEligibility(const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void checkUserToken(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  lang QString [optional]
    */
    virtual void getPlanByToken(const QString &token, const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  lang QString [optional]
    */
    virtual void getPlans(const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void assignTokenCallback(OAIHttpRequestWorker *worker);
    void checkEeBtEligibilityCallback(OAIHttpRequestWorker *worker);
    void checkUserTokenCallback(OAIHttpRequestWorker *worker);
    void getPlanByTokenCallback(OAIHttpRequestWorker *worker);
    void getPlansCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void assignTokenSignal();
    void checkEeBtEligibilitySignal(OAIEeBtEligibility summary);
    void checkUserTokenSignal();
    void getPlanByTokenSignal(OAIBtPlanListItem summary);
    void getPlansSignal(OAIBtPlans summary);


    void assignTokenSignalFull(OAIHttpRequestWorker *worker);
    void checkEeBtEligibilitySignalFull(OAIHttpRequestWorker *worker, OAIEeBtEligibility summary);
    void checkUserTokenSignalFull(OAIHttpRequestWorker *worker);
    void getPlanByTokenSignalFull(OAIHttpRequestWorker *worker, OAIBtPlanListItem summary);
    void getPlansSignalFull(OAIHttpRequestWorker *worker, OAIBtPlans summary);

    Q_DECL_DEPRECATED_X("Use assignTokenSignalError() instead")
    void assignTokenSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assignTokenSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkEeBtEligibilitySignalError() instead")
    void checkEeBtEligibilitySignalE(OAIEeBtEligibility summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkEeBtEligibilitySignalError(OAIEeBtEligibility summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkUserTokenSignalError() instead")
    void checkUserTokenSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void checkUserTokenSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPlanByTokenSignalError() instead")
    void getPlanByTokenSignalE(OAIBtPlanListItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPlanByTokenSignalError(OAIBtPlanListItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPlansSignalError() instead")
    void getPlansSignalE(OAIBtPlans summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPlansSignalError(OAIBtPlans summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use assignTokenSignalErrorFull() instead")
    void assignTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assignTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkEeBtEligibilitySignalErrorFull() instead")
    void checkEeBtEligibilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkEeBtEligibilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkUserTokenSignalErrorFull() instead")
    void checkUserTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkUserTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPlanByTokenSignalErrorFull() instead")
    void getPlanByTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPlanByTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPlansSignalErrorFull() instead")
    void getPlansSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPlansSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
