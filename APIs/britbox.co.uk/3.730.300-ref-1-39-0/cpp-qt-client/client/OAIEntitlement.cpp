/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntitlement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntitlement::OAIEntitlement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntitlement::OAIEntitlement() {
    this->initializeModel();
}

OAIEntitlement::~OAIEntitlement() {}

void OAIEntitlement::initializeModel() {

    m_delivery_type_isSet = false;
    m_delivery_type_isValid = false;

    m_exclusion_rules_isSet = false;
    m_exclusion_rules_isValid = false;

    m_max_downloads_isSet = false;
    m_max_downloads_isValid = false;

    m_max_plays_isSet = false;
    m_max_plays_isValid = false;

    m_ownership_isSet = false;
    m_ownership_isValid = false;

    m_play_period_isSet = false;
    m_play_period_isValid = false;

    m_rental_period_isSet = false;
    m_rental_period_isValid = false;

    m_resolution_isSet = false;
    m_resolution_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;

    m_activation_date_isSet = false;
    m_activation_date_isValid = false;

    m_classification_isSet = false;
    m_classification_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_item_type_isSet = false;
    m_item_type_isValid = false;

    m_media_duration_isSet = false;
    m_media_duration_isValid = false;

    m_plan_id_isSet = false;
    m_plan_id_isValid = false;

    m_play_count_isSet = false;
    m_play_count_isValid = false;

    m_remaining_downloads_isSet = false;
    m_remaining_downloads_isValid = false;
}

void OAIEntitlement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntitlement::fromJsonObject(QJsonObject json) {

    m_delivery_type_isValid = ::OpenAPI::fromJsonValue(m_delivery_type, json[QString("deliveryType")]);
    m_delivery_type_isSet = !json[QString("deliveryType")].isNull() && m_delivery_type_isValid;

    m_exclusion_rules_isValid = ::OpenAPI::fromJsonValue(m_exclusion_rules, json[QString("exclusionRules")]);
    m_exclusion_rules_isSet = !json[QString("exclusionRules")].isNull() && m_exclusion_rules_isValid;

    m_max_downloads_isValid = ::OpenAPI::fromJsonValue(m_max_downloads, json[QString("maxDownloads")]);
    m_max_downloads_isSet = !json[QString("maxDownloads")].isNull() && m_max_downloads_isValid;

    m_max_plays_isValid = ::OpenAPI::fromJsonValue(m_max_plays, json[QString("maxPlays")]);
    m_max_plays_isSet = !json[QString("maxPlays")].isNull() && m_max_plays_isValid;

    m_ownership_isValid = ::OpenAPI::fromJsonValue(m_ownership, json[QString("ownership")]);
    m_ownership_isSet = !json[QString("ownership")].isNull() && m_ownership_isValid;

    m_play_period_isValid = ::OpenAPI::fromJsonValue(m_play_period, json[QString("playPeriod")]);
    m_play_period_isSet = !json[QString("playPeriod")].isNull() && m_play_period_isValid;

    m_rental_period_isValid = ::OpenAPI::fromJsonValue(m_rental_period, json[QString("rentalPeriod")]);
    m_rental_period_isSet = !json[QString("rentalPeriod")].isNull() && m_rental_period_isValid;

    m_resolution_isValid = ::OpenAPI::fromJsonValue(m_resolution, json[QString("resolution")]);
    m_resolution_isSet = !json[QString("resolution")].isNull() && m_resolution_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;

    m_activation_date_isValid = ::OpenAPI::fromJsonValue(m_activation_date, json[QString("activationDate")]);
    m_activation_date_isSet = !json[QString("activationDate")].isNull() && m_activation_date_isValid;

    m_classification_isValid = ::OpenAPI::fromJsonValue(m_classification, json[QString("classification")]);
    m_classification_isSet = !json[QString("classification")].isNull() && m_classification_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("itemId")]);
    m_item_id_isSet = !json[QString("itemId")].isNull() && m_item_id_isValid;

    m_item_type_isValid = ::OpenAPI::fromJsonValue(m_item_type, json[QString("itemType")]);
    m_item_type_isSet = !json[QString("itemType")].isNull() && m_item_type_isValid;

    m_media_duration_isValid = ::OpenAPI::fromJsonValue(m_media_duration, json[QString("mediaDuration")]);
    m_media_duration_isSet = !json[QString("mediaDuration")].isNull() && m_media_duration_isValid;

    m_plan_id_isValid = ::OpenAPI::fromJsonValue(m_plan_id, json[QString("planId")]);
    m_plan_id_isSet = !json[QString("planId")].isNull() && m_plan_id_isValid;

    m_play_count_isValid = ::OpenAPI::fromJsonValue(m_play_count, json[QString("playCount")]);
    m_play_count_isSet = !json[QString("playCount")].isNull() && m_play_count_isValid;

    m_remaining_downloads_isValid = ::OpenAPI::fromJsonValue(m_remaining_downloads, json[QString("remainingDownloads")]);
    m_remaining_downloads_isSet = !json[QString("remainingDownloads")].isNull() && m_remaining_downloads_isValid;
}

QString OAIEntitlement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntitlement::asJsonObject() const {
    QJsonObject obj;
    if (m_delivery_type_isSet) {
        obj.insert(QString("deliveryType"), ::OpenAPI::toJsonValue(m_delivery_type));
    }
    if (m_exclusion_rules.size() > 0) {
        obj.insert(QString("exclusionRules"), ::OpenAPI::toJsonValue(m_exclusion_rules));
    }
    if (m_max_downloads_isSet) {
        obj.insert(QString("maxDownloads"), ::OpenAPI::toJsonValue(m_max_downloads));
    }
    if (m_max_plays_isSet) {
        obj.insert(QString("maxPlays"), ::OpenAPI::toJsonValue(m_max_plays));
    }
    if (m_ownership_isSet) {
        obj.insert(QString("ownership"), ::OpenAPI::toJsonValue(m_ownership));
    }
    if (m_play_period_isSet) {
        obj.insert(QString("playPeriod"), ::OpenAPI::toJsonValue(m_play_period));
    }
    if (m_rental_period_isSet) {
        obj.insert(QString("rentalPeriod"), ::OpenAPI::toJsonValue(m_rental_period));
    }
    if (m_resolution_isSet) {
        obj.insert(QString("resolution"), ::OpenAPI::toJsonValue(m_resolution));
    }
    if (m_scopes.size() > 0) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    if (m_activation_date_isSet) {
        obj.insert(QString("activationDate"), ::OpenAPI::toJsonValue(m_activation_date));
    }
    if (m_classification.isSet()) {
        obj.insert(QString("classification"), ::OpenAPI::toJsonValue(m_classification));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("itemId"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_item_type_isSet) {
        obj.insert(QString("itemType"), ::OpenAPI::toJsonValue(m_item_type));
    }
    if (m_media_duration_isSet) {
        obj.insert(QString("mediaDuration"), ::OpenAPI::toJsonValue(m_media_duration));
    }
    if (m_plan_id_isSet) {
        obj.insert(QString("planId"), ::OpenAPI::toJsonValue(m_plan_id));
    }
    if (m_play_count_isSet) {
        obj.insert(QString("playCount"), ::OpenAPI::toJsonValue(m_play_count));
    }
    if (m_remaining_downloads_isSet) {
        obj.insert(QString("remainingDownloads"), ::OpenAPI::toJsonValue(m_remaining_downloads));
    }
    return obj;
}

QString OAIEntitlement::getDeliveryType() const {
    return m_delivery_type;
}
void OAIEntitlement::setDeliveryType(const QString &delivery_type) {
    m_delivery_type = delivery_type;
    m_delivery_type_isSet = true;
}

bool OAIEntitlement::is_delivery_type_Set() const{
    return m_delivery_type_isSet;
}

bool OAIEntitlement::is_delivery_type_Valid() const{
    return m_delivery_type_isValid;
}

QList<OAIExclusionRule> OAIEntitlement::getExclusionRules() const {
    return m_exclusion_rules;
}
void OAIEntitlement::setExclusionRules(const QList<OAIExclusionRule> &exclusion_rules) {
    m_exclusion_rules = exclusion_rules;
    m_exclusion_rules_isSet = true;
}

bool OAIEntitlement::is_exclusion_rules_Set() const{
    return m_exclusion_rules_isSet;
}

bool OAIEntitlement::is_exclusion_rules_Valid() const{
    return m_exclusion_rules_isValid;
}

qint32 OAIEntitlement::getMaxDownloads() const {
    return m_max_downloads;
}
void OAIEntitlement::setMaxDownloads(const qint32 &max_downloads) {
    m_max_downloads = max_downloads;
    m_max_downloads_isSet = true;
}

bool OAIEntitlement::is_max_downloads_Set() const{
    return m_max_downloads_isSet;
}

bool OAIEntitlement::is_max_downloads_Valid() const{
    return m_max_downloads_isValid;
}

qint32 OAIEntitlement::getMaxPlays() const {
    return m_max_plays;
}
void OAIEntitlement::setMaxPlays(const qint32 &max_plays) {
    m_max_plays = max_plays;
    m_max_plays_isSet = true;
}

bool OAIEntitlement::is_max_plays_Set() const{
    return m_max_plays_isSet;
}

bool OAIEntitlement::is_max_plays_Valid() const{
    return m_max_plays_isValid;
}

QString OAIEntitlement::getOwnership() const {
    return m_ownership;
}
void OAIEntitlement::setOwnership(const QString &ownership) {
    m_ownership = ownership;
    m_ownership_isSet = true;
}

bool OAIEntitlement::is_ownership_Set() const{
    return m_ownership_isSet;
}

bool OAIEntitlement::is_ownership_Valid() const{
    return m_ownership_isValid;
}

qint32 OAIEntitlement::getPlayPeriod() const {
    return m_play_period;
}
void OAIEntitlement::setPlayPeriod(const qint32 &play_period) {
    m_play_period = play_period;
    m_play_period_isSet = true;
}

bool OAIEntitlement::is_play_period_Set() const{
    return m_play_period_isSet;
}

bool OAIEntitlement::is_play_period_Valid() const{
    return m_play_period_isValid;
}

qint32 OAIEntitlement::getRentalPeriod() const {
    return m_rental_period;
}
void OAIEntitlement::setRentalPeriod(const qint32 &rental_period) {
    m_rental_period = rental_period;
    m_rental_period_isSet = true;
}

bool OAIEntitlement::is_rental_period_Set() const{
    return m_rental_period_isSet;
}

bool OAIEntitlement::is_rental_period_Valid() const{
    return m_rental_period_isValid;
}

QString OAIEntitlement::getResolution() const {
    return m_resolution;
}
void OAIEntitlement::setResolution(const QString &resolution) {
    m_resolution = resolution;
    m_resolution_isSet = true;
}

bool OAIEntitlement::is_resolution_Set() const{
    return m_resolution_isSet;
}

bool OAIEntitlement::is_resolution_Valid() const{
    return m_resolution_isValid;
}

QList<QString> OAIEntitlement::getScopes() const {
    return m_scopes;
}
void OAIEntitlement::setScopes(const QList<QString> &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIEntitlement::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIEntitlement::is_scopes_Valid() const{
    return m_scopes_isValid;
}

QDateTime OAIEntitlement::getActivationDate() const {
    return m_activation_date;
}
void OAIEntitlement::setActivationDate(const QDateTime &activation_date) {
    m_activation_date = activation_date;
    m_activation_date_isSet = true;
}

bool OAIEntitlement::is_activation_date_Set() const{
    return m_activation_date_isSet;
}

bool OAIEntitlement::is_activation_date_Valid() const{
    return m_activation_date_isValid;
}

OAIClassificationSummary OAIEntitlement::getClassification() const {
    return m_classification;
}
void OAIEntitlement::setClassification(const OAIClassificationSummary &classification) {
    m_classification = classification;
    m_classification_isSet = true;
}

bool OAIEntitlement::is_classification_Set() const{
    return m_classification_isSet;
}

bool OAIEntitlement::is_classification_Valid() const{
    return m_classification_isValid;
}

QDateTime OAIEntitlement::getCreationDate() const {
    return m_creation_date;
}
void OAIEntitlement::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIEntitlement::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIEntitlement::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QDateTime OAIEntitlement::getExpirationDate() const {
    return m_expiration_date;
}
void OAIEntitlement::setExpirationDate(const QDateTime &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIEntitlement::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIEntitlement::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

QString OAIEntitlement::getItemId() const {
    return m_item_id;
}
void OAIEntitlement::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAIEntitlement::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAIEntitlement::is_item_id_Valid() const{
    return m_item_id_isValid;
}

QString OAIEntitlement::getItemType() const {
    return m_item_type;
}
void OAIEntitlement::setItemType(const QString &item_type) {
    m_item_type = item_type;
    m_item_type_isSet = true;
}

bool OAIEntitlement::is_item_type_Set() const{
    return m_item_type_isSet;
}

bool OAIEntitlement::is_item_type_Valid() const{
    return m_item_type_isValid;
}

qint32 OAIEntitlement::getMediaDuration() const {
    return m_media_duration;
}
void OAIEntitlement::setMediaDuration(const qint32 &media_duration) {
    m_media_duration = media_duration;
    m_media_duration_isSet = true;
}

bool OAIEntitlement::is_media_duration_Set() const{
    return m_media_duration_isSet;
}

bool OAIEntitlement::is_media_duration_Valid() const{
    return m_media_duration_isValid;
}

QString OAIEntitlement::getPlanId() const {
    return m_plan_id;
}
void OAIEntitlement::setPlanId(const QString &plan_id) {
    m_plan_id = plan_id;
    m_plan_id_isSet = true;
}

bool OAIEntitlement::is_plan_id_Set() const{
    return m_plan_id_isSet;
}

bool OAIEntitlement::is_plan_id_Valid() const{
    return m_plan_id_isValid;
}

qint32 OAIEntitlement::getPlayCount() const {
    return m_play_count;
}
void OAIEntitlement::setPlayCount(const qint32 &play_count) {
    m_play_count = play_count;
    m_play_count_isSet = true;
}

bool OAIEntitlement::is_play_count_Set() const{
    return m_play_count_isSet;
}

bool OAIEntitlement::is_play_count_Valid() const{
    return m_play_count_isValid;
}

qint32 OAIEntitlement::getRemainingDownloads() const {
    return m_remaining_downloads;
}
void OAIEntitlement::setRemainingDownloads(const qint32 &remaining_downloads) {
    m_remaining_downloads = remaining_downloads;
    m_remaining_downloads_isSet = true;
}

bool OAIEntitlement::is_remaining_downloads_Set() const{
    return m_remaining_downloads_isSet;
}

bool OAIEntitlement::is_remaining_downloads_Valid() const{
    return m_remaining_downloads_isValid;
}

bool OAIEntitlement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delivery_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusion_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_downloads_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_plays_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ownership_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rental_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_activation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_classification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remaining_downloads_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntitlement::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_delivery_type_isValid && m_ownership_isValid && m_resolution_isValid && m_scopes_isValid && true;
}

} // namespace OpenAPI
