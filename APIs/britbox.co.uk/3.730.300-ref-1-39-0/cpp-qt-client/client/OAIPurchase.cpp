/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPurchase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPurchase::OAIPurchase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPurchase::OAIPurchase() {
    this->initializeModel();
}

OAIPurchase::~OAIPurchase() {}

void OAIPurchase::initializeModel() {

    m_authorization_date_isSet = false;
    m_authorization_date_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_item_isSet = false;
    m_item_isValid = false;

    m_payment_method_id_isSet = false;
    m_payment_method_id_isValid = false;

    m_plan_isSet = false;
    m_plan_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIPurchase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPurchase::fromJsonObject(QJsonObject json) {

    m_authorization_date_isValid = ::OpenAPI::fromJsonValue(m_authorization_date, json[QString("authorizationDate")]);
    m_authorization_date_isSet = !json[QString("authorizationDate")].isNull() && m_authorization_date_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_item_isValid = ::OpenAPI::fromJsonValue(m_item, json[QString("item")]);
    m_item_isSet = !json[QString("item")].isNull() && m_item_isValid;

    m_payment_method_id_isValid = ::OpenAPI::fromJsonValue(m_payment_method_id, json[QString("paymentMethodId")]);
    m_payment_method_id_isSet = !json[QString("paymentMethodId")].isNull() && m_payment_method_id_isValid;

    m_plan_isValid = ::OpenAPI::fromJsonValue(m_plan, json[QString("plan")]);
    m_plan_isSet = !json[QString("plan")].isNull() && m_plan_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIPurchase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPurchase::asJsonObject() const {
    QJsonObject obj;
    if (m_authorization_date_isSet) {
        obj.insert(QString("authorizationDate"), ::OpenAPI::toJsonValue(m_authorization_date));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_item.isSet()) {
        obj.insert(QString("item"), ::OpenAPI::toJsonValue(m_item));
    }
    if (m_payment_method_id_isSet) {
        obj.insert(QString("paymentMethodId"), ::OpenAPI::toJsonValue(m_payment_method_id));
    }
    if (m_plan.isSet()) {
        obj.insert(QString("plan"), ::OpenAPI::toJsonValue(m_plan));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

QDateTime OAIPurchase::getAuthorizationDate() const {
    return m_authorization_date;
}
void OAIPurchase::setAuthorizationDate(const QDateTime &authorization_date) {
    m_authorization_date = authorization_date;
    m_authorization_date_isSet = true;
}

bool OAIPurchase::is_authorization_date_Set() const{
    return m_authorization_date_isSet;
}

bool OAIPurchase::is_authorization_date_Valid() const{
    return m_authorization_date_isValid;
}

QDateTime OAIPurchase::getCreationDate() const {
    return m_creation_date;
}
void OAIPurchase::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIPurchase::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIPurchase::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIPurchase::getCurrency() const {
    return m_currency;
}
void OAIPurchase::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIPurchase::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIPurchase::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIPurchase::getId() const {
    return m_id;
}
void OAIPurchase::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPurchase::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPurchase::is_id_Valid() const{
    return m_id_isValid;
}

OAIItemPurchase OAIPurchase::getItem() const {
    return m_item;
}
void OAIPurchase::setItem(const OAIItemPurchase &item) {
    m_item = item;
    m_item_isSet = true;
}

bool OAIPurchase::is_item_Set() const{
    return m_item_isSet;
}

bool OAIPurchase::is_item_Valid() const{
    return m_item_isValid;
}

QString OAIPurchase::getPaymentMethodId() const {
    return m_payment_method_id;
}
void OAIPurchase::setPaymentMethodId(const QString &payment_method_id) {
    m_payment_method_id = payment_method_id;
    m_payment_method_id_isSet = true;
}

bool OAIPurchase::is_payment_method_id_Set() const{
    return m_payment_method_id_isSet;
}

bool OAIPurchase::is_payment_method_id_Valid() const{
    return m_payment_method_id_isValid;
}

OAIPlanPurchase OAIPurchase::getPlan() const {
    return m_plan;
}
void OAIPurchase::setPlan(const OAIPlanPurchase &plan) {
    m_plan = plan;
    m_plan_isSet = true;
}

bool OAIPurchase::is_plan_Set() const{
    return m_plan_isSet;
}

bool OAIPurchase::is_plan_Valid() const{
    return m_plan_isValid;
}

float OAIPurchase::getTotal() const {
    return m_total;
}
void OAIPurchase::setTotal(const float &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIPurchase::is_total_Set() const{
    return m_total_isSet;
}

bool OAIPurchase::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIPurchase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorization_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPurchase::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_creation_date_isValid && m_currency_isValid && m_id_isValid && m_total_isValid && true;
}

} // namespace OpenAPI
