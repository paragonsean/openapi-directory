/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountDevices.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountDevices::OAIAccountDevices(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountDevices::OAIAccountDevices() {
    this->initializeModel();
}

OAIAccountDevices::~OAIAccountDevices() {}

void OAIAccountDevices::initializeModel() {

    m_deregistration_window_isSet = false;
    m_deregistration_window_isValid = false;

    m_devices_isSet = false;
    m_devices_isValid = false;

    m_max_registered_isSet = false;
    m_max_registered_isValid = false;

    m_registration_window_isSet = false;
    m_registration_window_isValid = false;
}

void OAIAccountDevices::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountDevices::fromJsonObject(QJsonObject json) {

    m_deregistration_window_isValid = ::OpenAPI::fromJsonValue(m_deregistration_window, json[QString("deregistrationWindow")]);
    m_deregistration_window_isSet = !json[QString("deregistrationWindow")].isNull() && m_deregistration_window_isValid;

    m_devices_isValid = ::OpenAPI::fromJsonValue(m_devices, json[QString("devices")]);
    m_devices_isSet = !json[QString("devices")].isNull() && m_devices_isValid;

    m_max_registered_isValid = ::OpenAPI::fromJsonValue(m_max_registered, json[QString("maxRegistered")]);
    m_max_registered_isSet = !json[QString("maxRegistered")].isNull() && m_max_registered_isValid;

    m_registration_window_isValid = ::OpenAPI::fromJsonValue(m_registration_window, json[QString("registrationWindow")]);
    m_registration_window_isSet = !json[QString("registrationWindow")].isNull() && m_registration_window_isValid;
}

QString OAIAccountDevices::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountDevices::asJsonObject() const {
    QJsonObject obj;
    if (m_deregistration_window.isSet()) {
        obj.insert(QString("deregistrationWindow"), ::OpenAPI::toJsonValue(m_deregistration_window));
    }
    if (m_devices.size() > 0) {
        obj.insert(QString("devices"), ::OpenAPI::toJsonValue(m_devices));
    }
    if (m_max_registered_isSet) {
        obj.insert(QString("maxRegistered"), ::OpenAPI::toJsonValue(m_max_registered));
    }
    if (m_registration_window.isSet()) {
        obj.insert(QString("registrationWindow"), ::OpenAPI::toJsonValue(m_registration_window));
    }
    return obj;
}

OAIDeviceRegistrationWindow OAIAccountDevices::getDeregistrationWindow() const {
    return m_deregistration_window;
}
void OAIAccountDevices::setDeregistrationWindow(const OAIDeviceRegistrationWindow &deregistration_window) {
    m_deregistration_window = deregistration_window;
    m_deregistration_window_isSet = true;
}

bool OAIAccountDevices::is_deregistration_window_Set() const{
    return m_deregistration_window_isSet;
}

bool OAIAccountDevices::is_deregistration_window_Valid() const{
    return m_deregistration_window_isValid;
}

QList<OAIDevice> OAIAccountDevices::getDevices() const {
    return m_devices;
}
void OAIAccountDevices::setDevices(const QList<OAIDevice> &devices) {
    m_devices = devices;
    m_devices_isSet = true;
}

bool OAIAccountDevices::is_devices_Set() const{
    return m_devices_isSet;
}

bool OAIAccountDevices::is_devices_Valid() const{
    return m_devices_isValid;
}

qint32 OAIAccountDevices::getMaxRegistered() const {
    return m_max_registered;
}
void OAIAccountDevices::setMaxRegistered(const qint32 &max_registered) {
    m_max_registered = max_registered;
    m_max_registered_isSet = true;
}

bool OAIAccountDevices::is_max_registered_Set() const{
    return m_max_registered_isSet;
}

bool OAIAccountDevices::is_max_registered_Valid() const{
    return m_max_registered_isValid;
}

OAIDeviceRegistrationWindow OAIAccountDevices::getRegistrationWindow() const {
    return m_registration_window;
}
void OAIAccountDevices::setRegistrationWindow(const OAIDeviceRegistrationWindow &registration_window) {
    m_registration_window = registration_window;
    m_registration_window_isSet = true;
}

bool OAIAccountDevices::is_registration_window_Set() const{
    return m_registration_window_isSet;
}

bool OAIAccountDevices::is_registration_window_Valid() const{
    return m_registration_window_isValid;
}

bool OAIAccountDevices::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deregistration_window.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_devices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_registered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_window.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountDevices::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_devices_isValid && m_max_registered_isValid && true;
}

} // namespace OpenAPI
