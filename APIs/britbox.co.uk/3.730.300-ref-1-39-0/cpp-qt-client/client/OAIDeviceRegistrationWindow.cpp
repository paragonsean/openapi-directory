/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceRegistrationWindow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceRegistrationWindow::OAIDeviceRegistrationWindow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceRegistrationWindow::OAIDeviceRegistrationWindow() {
    this->initializeModel();
}

OAIDeviceRegistrationWindow::~OAIDeviceRegistrationWindow() {}

void OAIDeviceRegistrationWindow::initializeModel() {

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_period_days_isSet = false;
    m_period_days_isValid = false;

    m_remaining_isSet = false;
    m_remaining_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAIDeviceRegistrationWindow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceRegistrationWindow::fromJsonObject(QJsonObject json) {

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_period_days_isValid = ::OpenAPI::fromJsonValue(m_period_days, json[QString("periodDays")]);
    m_period_days_isSet = !json[QString("periodDays")].isNull() && m_period_days_isValid;

    m_remaining_isValid = ::OpenAPI::fromJsonValue(m_remaining, json[QString("remaining")]);
    m_remaining_isSet = !json[QString("remaining")].isNull() && m_remaining_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;
}

QString OAIDeviceRegistrationWindow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceRegistrationWindow::asJsonObject() const {
    QJsonObject obj;
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_period_days_isSet) {
        obj.insert(QString("periodDays"), ::OpenAPI::toJsonValue(m_period_days));
    }
    if (m_remaining_isSet) {
        obj.insert(QString("remaining"), ::OpenAPI::toJsonValue(m_remaining));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

QDateTime OAIDeviceRegistrationWindow::getEndDate() const {
    return m_end_date;
}
void OAIDeviceRegistrationWindow::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIDeviceRegistrationWindow::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIDeviceRegistrationWindow::is_end_date_Valid() const{
    return m_end_date_isValid;
}

qint32 OAIDeviceRegistrationWindow::getLimit() const {
    return m_limit;
}
void OAIDeviceRegistrationWindow::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIDeviceRegistrationWindow::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIDeviceRegistrationWindow::is_limit_Valid() const{
    return m_limit_isValid;
}

qint32 OAIDeviceRegistrationWindow::getPeriodDays() const {
    return m_period_days;
}
void OAIDeviceRegistrationWindow::setPeriodDays(const qint32 &period_days) {
    m_period_days = period_days;
    m_period_days_isSet = true;
}

bool OAIDeviceRegistrationWindow::is_period_days_Set() const{
    return m_period_days_isSet;
}

bool OAIDeviceRegistrationWindow::is_period_days_Valid() const{
    return m_period_days_isValid;
}

qint32 OAIDeviceRegistrationWindow::getRemaining() const {
    return m_remaining;
}
void OAIDeviceRegistrationWindow::setRemaining(const qint32 &remaining) {
    m_remaining = remaining;
    m_remaining_isSet = true;
}

bool OAIDeviceRegistrationWindow::is_remaining_Set() const{
    return m_remaining_isSet;
}

bool OAIDeviceRegistrationWindow::is_remaining_Valid() const{
    return m_remaining_isValid;
}

QDateTime OAIDeviceRegistrationWindow::getStartDate() const {
    return m_start_date;
}
void OAIDeviceRegistrationWindow::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIDeviceRegistrationWindow::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIDeviceRegistrationWindow::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIDeviceRegistrationWindow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remaining_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceRegistrationWindow::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_end_date_isValid && m_limit_isValid && m_period_days_isValid && m_remaining_isValid && m_start_date_isValid && true;
}

} // namespace OpenAPI
