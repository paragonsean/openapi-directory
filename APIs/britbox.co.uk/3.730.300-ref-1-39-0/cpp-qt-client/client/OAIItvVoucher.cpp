/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItvVoucher.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItvVoucher::OAIItvVoucher(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItvVoucher::OAIItvVoucher() {
    this->initializeModel();
}

OAIItvVoucher::~OAIItvVoucher() {}

void OAIItvVoucher::initializeModel() {

    m_display_isSet = false;
    m_display_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_offer_type_isSet = false;
    m_offer_type_isValid = false;
}

void OAIItvVoucher::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItvVoucher::fromJsonObject(QJsonObject json) {

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_offer_type_isValid = ::OpenAPI::fromJsonValue(m_offer_type, json[QString("offerType")]);
    m_offer_type_isSet = !json[QString("offerType")].isNull() && m_offer_type_isValid;
}

QString OAIItvVoucher::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItvVoucher::asJsonObject() const {
    QJsonObject obj;
    if (m_display.isSet()) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_offer_type_isSet) {
        obj.insert(QString("offerType"), ::OpenAPI::toJsonValue(m_offer_type));
    }
    return obj;
}

OAIItvVoucherDisplay OAIItvVoucher::getDisplay() const {
    return m_display;
}
void OAIItvVoucher::setDisplay(const OAIItvVoucherDisplay &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIItvVoucher::is_display_Set() const{
    return m_display_isSet;
}

bool OAIItvVoucher::is_display_Valid() const{
    return m_display_isValid;
}

QString OAIItvVoucher::getId() const {
    return m_id;
}
void OAIItvVoucher::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIItvVoucher::is_id_Set() const{
    return m_id_isSet;
}

bool OAIItvVoucher::is_id_Valid() const{
    return m_id_isValid;
}

OAIItvVoucherLinks OAIItvVoucher::getLinks() const {
    return m_links;
}
void OAIItvVoucher::setLinks(const OAIItvVoucherLinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIItvVoucher::is_links_Set() const{
    return m_links_isSet;
}

bool OAIItvVoucher::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIItvVoucher::getOfferType() const {
    return m_offer_type;
}
void OAIItvVoucher::setOfferType(const QString &offer_type) {
    m_offer_type = offer_type;
    m_offer_type_isSet = true;
}

bool OAIItvVoucher::is_offer_type_Set() const{
    return m_offer_type_isSet;
}

bool OAIItvVoucher::is_offer_type_Valid() const{
    return m_offer_type_isValid;
}

bool OAIItvVoucher::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItvVoucher::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_display_isValid && m_id_isValid && m_links_isValid && m_offer_type_isValid && true;
}

} // namespace OpenAPI
