/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProfileUpdateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProfileUpdateRequest::OAIProfileUpdateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProfileUpdateRequest::OAIProfileUpdateRequest() {
    this->initializeModel();
}

OAIProfileUpdateRequest::~OAIProfileUpdateRequest() {}

void OAIProfileUpdateRequest::initializeModel() {

    m_hero_autoplay_isSet = false;
    m_hero_autoplay_isValid = false;

    m_hero_with_audio_isSet = false;
    m_hero_with_audio_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pin_enabled_isSet = false;
    m_pin_enabled_isValid = false;

    m_purchase_enabled_isSet = false;
    m_purchase_enabled_isValid = false;

    m_segments_isSet = false;
    m_segments_isValid = false;
}

void OAIProfileUpdateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProfileUpdateRequest::fromJsonObject(QJsonObject json) {

    m_hero_autoplay_isValid = ::OpenAPI::fromJsonValue(m_hero_autoplay, json[QString("heroAutoplay")]);
    m_hero_autoplay_isSet = !json[QString("heroAutoplay")].isNull() && m_hero_autoplay_isValid;

    m_hero_with_audio_isValid = ::OpenAPI::fromJsonValue(m_hero_with_audio, json[QString("heroWithAudio")]);
    m_hero_with_audio_isSet = !json[QString("heroWithAudio")].isNull() && m_hero_with_audio_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pin_enabled_isValid = ::OpenAPI::fromJsonValue(m_pin_enabled, json[QString("pinEnabled")]);
    m_pin_enabled_isSet = !json[QString("pinEnabled")].isNull() && m_pin_enabled_isValid;

    m_purchase_enabled_isValid = ::OpenAPI::fromJsonValue(m_purchase_enabled, json[QString("purchaseEnabled")]);
    m_purchase_enabled_isSet = !json[QString("purchaseEnabled")].isNull() && m_purchase_enabled_isValid;

    m_segments_isValid = ::OpenAPI::fromJsonValue(m_segments, json[QString("segments")]);
    m_segments_isSet = !json[QString("segments")].isNull() && m_segments_isValid;
}

QString OAIProfileUpdateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProfileUpdateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_hero_autoplay_isSet) {
        obj.insert(QString("heroAutoplay"), ::OpenAPI::toJsonValue(m_hero_autoplay));
    }
    if (m_hero_with_audio_isSet) {
        obj.insert(QString("heroWithAudio"), ::OpenAPI::toJsonValue(m_hero_with_audio));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pin_enabled_isSet) {
        obj.insert(QString("pinEnabled"), ::OpenAPI::toJsonValue(m_pin_enabled));
    }
    if (m_purchase_enabled_isSet) {
        obj.insert(QString("purchaseEnabled"), ::OpenAPI::toJsonValue(m_purchase_enabled));
    }
    if (m_segments.size() > 0) {
        obj.insert(QString("segments"), ::OpenAPI::toJsonValue(m_segments));
    }
    return obj;
}

bool OAIProfileUpdateRequest::isHeroAutoplay() const {
    return m_hero_autoplay;
}
void OAIProfileUpdateRequest::setHeroAutoplay(const bool &hero_autoplay) {
    m_hero_autoplay = hero_autoplay;
    m_hero_autoplay_isSet = true;
}

bool OAIProfileUpdateRequest::is_hero_autoplay_Set() const{
    return m_hero_autoplay_isSet;
}

bool OAIProfileUpdateRequest::is_hero_autoplay_Valid() const{
    return m_hero_autoplay_isValid;
}

bool OAIProfileUpdateRequest::isHeroWithAudio() const {
    return m_hero_with_audio;
}
void OAIProfileUpdateRequest::setHeroWithAudio(const bool &hero_with_audio) {
    m_hero_with_audio = hero_with_audio;
    m_hero_with_audio_isSet = true;
}

bool OAIProfileUpdateRequest::is_hero_with_audio_Set() const{
    return m_hero_with_audio_isSet;
}

bool OAIProfileUpdateRequest::is_hero_with_audio_Valid() const{
    return m_hero_with_audio_isValid;
}

QString OAIProfileUpdateRequest::getLanguageCode() const {
    return m_language_code;
}
void OAIProfileUpdateRequest::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIProfileUpdateRequest::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIProfileUpdateRequest::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QString OAIProfileUpdateRequest::getName() const {
    return m_name;
}
void OAIProfileUpdateRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProfileUpdateRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProfileUpdateRequest::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIProfileUpdateRequest::isPinEnabled() const {
    return m_pin_enabled;
}
void OAIProfileUpdateRequest::setPinEnabled(const bool &pin_enabled) {
    m_pin_enabled = pin_enabled;
    m_pin_enabled_isSet = true;
}

bool OAIProfileUpdateRequest::is_pin_enabled_Set() const{
    return m_pin_enabled_isSet;
}

bool OAIProfileUpdateRequest::is_pin_enabled_Valid() const{
    return m_pin_enabled_isValid;
}

bool OAIProfileUpdateRequest::isPurchaseEnabled() const {
    return m_purchase_enabled;
}
void OAIProfileUpdateRequest::setPurchaseEnabled(const bool &purchase_enabled) {
    m_purchase_enabled = purchase_enabled;
    m_purchase_enabled_isSet = true;
}

bool OAIProfileUpdateRequest::is_purchase_enabled_Set() const{
    return m_purchase_enabled_isSet;
}

bool OAIProfileUpdateRequest::is_purchase_enabled_Valid() const{
    return m_purchase_enabled_isValid;
}

QList<QString> OAIProfileUpdateRequest::getSegments() const {
    return m_segments;
}
void OAIProfileUpdateRequest::setSegments(const QList<QString> &segments) {
    m_segments = segments;
    m_segments_isSet = true;
}

bool OAIProfileUpdateRequest::is_segments_Set() const{
    return m_segments_isSet;
}

bool OAIProfileUpdateRequest::is_segments_Valid() const{
    return m_segments_isValid;
}

bool OAIProfileUpdateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hero_autoplay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hero_with_audio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pin_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segments.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProfileUpdateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
