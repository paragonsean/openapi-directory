/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINextPlaybackItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINextPlaybackItem::OAINextPlaybackItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINextPlaybackItem::OAINextPlaybackItem() {
    this->initializeModel();
}

OAINextPlaybackItem::~OAINextPlaybackItem() {}

void OAINextPlaybackItem::initializeModel() {

    m_first_watched_date_isSet = false;
    m_first_watched_date_isValid = false;

    m_last_watched_date_isSet = false;
    m_last_watched_date_isValid = false;

    m_next_isSet = false;
    m_next_isValid = false;

    m_source_item_id_isSet = false;
    m_source_item_id_isValid = false;

    m_suggestion_type_isSet = false;
    m_suggestion_type_isValid = false;
}

void OAINextPlaybackItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINextPlaybackItem::fromJsonObject(QJsonObject json) {

    m_first_watched_date_isValid = ::OpenAPI::fromJsonValue(m_first_watched_date, json[QString("firstWatchedDate")]);
    m_first_watched_date_isSet = !json[QString("firstWatchedDate")].isNull() && m_first_watched_date_isValid;

    m_last_watched_date_isValid = ::OpenAPI::fromJsonValue(m_last_watched_date, json[QString("lastWatchedDate")]);
    m_last_watched_date_isSet = !json[QString("lastWatchedDate")].isNull() && m_last_watched_date_isValid;

    m_next_isValid = ::OpenAPI::fromJsonValue(m_next, json[QString("next")]);
    m_next_isSet = !json[QString("next")].isNull() && m_next_isValid;

    m_source_item_id_isValid = ::OpenAPI::fromJsonValue(m_source_item_id, json[QString("sourceItemId")]);
    m_source_item_id_isSet = !json[QString("sourceItemId")].isNull() && m_source_item_id_isValid;

    m_suggestion_type_isValid = ::OpenAPI::fromJsonValue(m_suggestion_type, json[QString("suggestionType")]);
    m_suggestion_type_isSet = !json[QString("suggestionType")].isNull() && m_suggestion_type_isValid;
}

QString OAINextPlaybackItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINextPlaybackItem::asJsonObject() const {
    QJsonObject obj;
    if (m_first_watched_date_isSet) {
        obj.insert(QString("firstWatchedDate"), ::OpenAPI::toJsonValue(m_first_watched_date));
    }
    if (m_last_watched_date_isSet) {
        obj.insert(QString("lastWatchedDate"), ::OpenAPI::toJsonValue(m_last_watched_date));
    }
    if (m_next.isSet()) {
        obj.insert(QString("next"), ::OpenAPI::toJsonValue(m_next));
    }
    if (m_source_item_id_isSet) {
        obj.insert(QString("sourceItemId"), ::OpenAPI::toJsonValue(m_source_item_id));
    }
    if (m_suggestion_type_isSet) {
        obj.insert(QString("suggestionType"), ::OpenAPI::toJsonValue(m_suggestion_type));
    }
    return obj;
}

QDateTime OAINextPlaybackItem::getFirstWatchedDate() const {
    return m_first_watched_date;
}
void OAINextPlaybackItem::setFirstWatchedDate(const QDateTime &first_watched_date) {
    m_first_watched_date = first_watched_date;
    m_first_watched_date_isSet = true;
}

bool OAINextPlaybackItem::is_first_watched_date_Set() const{
    return m_first_watched_date_isSet;
}

bool OAINextPlaybackItem::is_first_watched_date_Valid() const{
    return m_first_watched_date_isValid;
}

QDateTime OAINextPlaybackItem::getLastWatchedDate() const {
    return m_last_watched_date;
}
void OAINextPlaybackItem::setLastWatchedDate(const QDateTime &last_watched_date) {
    m_last_watched_date = last_watched_date;
    m_last_watched_date_isSet = true;
}

bool OAINextPlaybackItem::is_last_watched_date_Set() const{
    return m_last_watched_date_isSet;
}

bool OAINextPlaybackItem::is_last_watched_date_Valid() const{
    return m_last_watched_date_isValid;
}

OAIItemDetail OAINextPlaybackItem::getNext() const {
    return m_next;
}
void OAINextPlaybackItem::setNext(const OAIItemDetail &next) {
    m_next = next;
    m_next_isSet = true;
}

bool OAINextPlaybackItem::is_next_Set() const{
    return m_next_isSet;
}

bool OAINextPlaybackItem::is_next_Valid() const{
    return m_next_isValid;
}

QString OAINextPlaybackItem::getSourceItemId() const {
    return m_source_item_id;
}
void OAINextPlaybackItem::setSourceItemId(const QString &source_item_id) {
    m_source_item_id = source_item_id;
    m_source_item_id_isSet = true;
}

bool OAINextPlaybackItem::is_source_item_id_Set() const{
    return m_source_item_id_isSet;
}

bool OAINextPlaybackItem::is_source_item_id_Valid() const{
    return m_source_item_id_isValid;
}

QString OAINextPlaybackItem::getSuggestionType() const {
    return m_suggestion_type;
}
void OAINextPlaybackItem::setSuggestionType(const QString &suggestion_type) {
    m_suggestion_type = suggestion_type;
    m_suggestion_type_isSet = true;
}

bool OAINextPlaybackItem::is_suggestion_type_Set() const{
    return m_suggestion_type_isSet;
}

bool OAINextPlaybackItem::is_suggestion_type_Valid() const{
    return m_suggestion_type_isValid;
}

bool OAINextPlaybackItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_first_watched_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_watched_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggestion_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINextPlaybackItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_item_id_isValid && true;
}

} // namespace OpenAPI
