/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPage::OAIPage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPage::OAIPage() {
    this->initializeModel();
}

OAIPage::~OAIPage() {}

void OAIPage::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_static_isSet = false;
    m_is_static_isValid = false;

    m_is_system_page_isSet = false;
    m_is_system_page_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_entries_isSet = false;
    m_entries_isValid = false;

    m_item_isSet = false;
    m_item_isValid = false;

    m_list_isSet = false;
    m_list_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_themes_isSet = false;
    m_themes_isValid = false;
}

void OAIPage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPage::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_static_isValid = ::OpenAPI::fromJsonValue(m_is_static, json[QString("isStatic")]);
    m_is_static_isSet = !json[QString("isStatic")].isNull() && m_is_static_isValid;

    m_is_system_page_isValid = ::OpenAPI::fromJsonValue(m_is_system_page, json[QString("isSystemPage")]);
    m_is_system_page_isSet = !json[QString("isSystemPage")].isNull() && m_is_system_page_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("customFields")]);
    m_custom_fields_isSet = !json[QString("customFields")].isNull() && m_custom_fields_isValid;

    m_entries_isValid = ::OpenAPI::fromJsonValue(m_entries, json[QString("entries")]);
    m_entries_isSet = !json[QString("entries")].isNull() && m_entries_isValid;

    m_item_isValid = ::OpenAPI::fromJsonValue(m_item, json[QString("item")]);
    m_item_isSet = !json[QString("item")].isNull() && m_item_isValid;

    m_list_isValid = ::OpenAPI::fromJsonValue(m_list, json[QString("list")]);
    m_list_isSet = !json[QString("list")].isNull() && m_list_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_themes_isValid = ::OpenAPI::fromJsonValue(m_themes, json[QString("themes")]);
    m_themes_isSet = !json[QString("themes")].isNull() && m_themes_isValid;
}

QString OAIPage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPage::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_static_isSet) {
        obj.insert(QString("isStatic"), ::OpenAPI::toJsonValue(m_is_static));
    }
    if (m_is_system_page_isSet) {
        obj.insert(QString("isSystemPage"), ::OpenAPI::toJsonValue(m_is_system_page));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_r_template_isSet) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("customFields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_entries.size() > 0) {
        obj.insert(QString("entries"), ::OpenAPI::toJsonValue(m_entries));
    }
    if (m_item.isSet()) {
        obj.insert(QString("item"), ::OpenAPI::toJsonValue(m_item));
    }
    if (m_list.isSet()) {
        obj.insert(QString("list"), ::OpenAPI::toJsonValue(m_list));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_themes.size() > 0) {
        obj.insert(QString("themes"), ::OpenAPI::toJsonValue(m_themes));
    }
    return obj;
}

QString OAIPage::getId() const {
    return m_id;
}
void OAIPage::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPage::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPage::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIPage::isIsStatic() const {
    return m_is_static;
}
void OAIPage::setIsStatic(const bool &is_static) {
    m_is_static = is_static;
    m_is_static_isSet = true;
}

bool OAIPage::is_is_static_Set() const{
    return m_is_static_isSet;
}

bool OAIPage::is_is_static_Valid() const{
    return m_is_static_isValid;
}

bool OAIPage::isIsSystemPage() const {
    return m_is_system_page;
}
void OAIPage::setIsSystemPage(const bool &is_system_page) {
    m_is_system_page = is_system_page;
    m_is_system_page_isSet = true;
}

bool OAIPage::is_is_system_page_Set() const{
    return m_is_system_page_isSet;
}

bool OAIPage::is_is_system_page_Valid() const{
    return m_is_system_page_isValid;
}

QString OAIPage::getKey() const {
    return m_key;
}
void OAIPage::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIPage::is_key_Set() const{
    return m_key_isSet;
}

bool OAIPage::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIPage::getPath() const {
    return m_path;
}
void OAIPage::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIPage::is_path_Set() const{
    return m_path_isSet;
}

bool OAIPage::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIPage::getRTemplate() const {
    return m_r_template;
}
void OAIPage::setRTemplate(const QString &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAIPage::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAIPage::is_r_template_Valid() const{
    return m_r_template_isValid;
}

QString OAIPage::getTitle() const {
    return m_title;
}
void OAIPage::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPage::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPage::is_title_Valid() const{
    return m_title_isValid;
}

QMap<QString, QJsonValue> OAIPage::getCustomFields() const {
    return m_custom_fields;
}
void OAIPage::setCustomFields(const QMap<QString, QJsonValue> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIPage::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIPage::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QList<OAIPageEntry> OAIPage::getEntries() const {
    return m_entries;
}
void OAIPage::setEntries(const QList<OAIPageEntry> &entries) {
    m_entries = entries;
    m_entries_isSet = true;
}

bool OAIPage::is_entries_Set() const{
    return m_entries_isSet;
}

bool OAIPage::is_entries_Valid() const{
    return m_entries_isValid;
}

OAIItemDetail OAIPage::getItem() const {
    return m_item;
}
void OAIPage::setItem(const OAIItemDetail &item) {
    m_item = item;
    m_item_isSet = true;
}

bool OAIPage::is_item_Set() const{
    return m_item_isSet;
}

bool OAIPage::is_item_Valid() const{
    return m_item_isValid;
}

OAIItemList OAIPage::getList() const {
    return m_list;
}
void OAIPage::setList(const OAIItemList &list) {
    m_list = list;
    m_list_isSet = true;
}

bool OAIPage::is_list_Set() const{
    return m_list_isSet;
}

bool OAIPage::is_list_Valid() const{
    return m_list_isValid;
}

OAIPageMetadata OAIPage::getMetadata() const {
    return m_metadata;
}
void OAIPage::setMetadata(const OAIPageMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIPage::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIPage::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QList<OAITheme> OAIPage::getThemes() const {
    return m_themes;
}
void OAIPage::setThemes(const QList<OAITheme> &themes) {
    m_themes = themes;
    m_themes_isSet = true;
}

bool OAIPage::is_themes_Set() const{
    return m_themes_isSet;
}

bool OAIPage::is_themes_Valid() const{
    return m_themes_isValid;
}

bool OAIPage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_static_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_system_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_entries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_themes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_is_static_isValid && m_is_system_page_isValid && m_path_isValid && m_r_template_isValid && m_title_isValid && m_entries_isValid && true;
}

} // namespace OpenAPI
