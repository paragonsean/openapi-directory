/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppConfigGeneral.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppConfigGeneral::OAIAppConfigGeneral(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppConfigGeneral::OAIAppConfigGeneral() {
    this->initializeModel();
}

OAIAppConfigGeneral::~OAIAppConfigGeneral() {}

void OAIAppConfigGeneral::initializeModel() {

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_default_time_zone_isSet = false;
    m_default_time_zone_isValid = false;

    m_facebook_app_id_isSet = false;
    m_facebook_app_id_isValid = false;

    m_ga_token_isSet = false;
    m_ga_token_isValid = false;

    m_item_image_types_isSet = false;
    m_item_image_types_isValid = false;

    m_mandatory_sign_in_isSet = false;
    m_mandatory_sign_in_isValid = false;

    m_max_user_rating_isSet = false;
    m_max_user_rating_isValid = false;

    m_stripe_key_isSet = false;
    m_stripe_key_isValid = false;

    m_website_url_isSet = false;
    m_website_url_isValid = false;
}

void OAIAppConfigGeneral::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppConfigGeneral::fromJsonObject(QJsonObject json) {

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currencyCode")]);
    m_currency_code_isSet = !json[QString("currencyCode")].isNull() && m_currency_code_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("customFields")]);
    m_custom_fields_isSet = !json[QString("customFields")].isNull() && m_custom_fields_isValid;

    m_default_time_zone_isValid = ::OpenAPI::fromJsonValue(m_default_time_zone, json[QString("defaultTimeZone")]);
    m_default_time_zone_isSet = !json[QString("defaultTimeZone")].isNull() && m_default_time_zone_isValid;

    m_facebook_app_id_isValid = ::OpenAPI::fromJsonValue(m_facebook_app_id, json[QString("facebookAppId")]);
    m_facebook_app_id_isSet = !json[QString("facebookAppId")].isNull() && m_facebook_app_id_isValid;

    m_ga_token_isValid = ::OpenAPI::fromJsonValue(m_ga_token, json[QString("gaToken")]);
    m_ga_token_isSet = !json[QString("gaToken")].isNull() && m_ga_token_isValid;

    m_item_image_types_isValid = ::OpenAPI::fromJsonValue(m_item_image_types, json[QString("itemImageTypes")]);
    m_item_image_types_isSet = !json[QString("itemImageTypes")].isNull() && m_item_image_types_isValid;

    m_mandatory_sign_in_isValid = ::OpenAPI::fromJsonValue(m_mandatory_sign_in, json[QString("mandatorySignIn")]);
    m_mandatory_sign_in_isSet = !json[QString("mandatorySignIn")].isNull() && m_mandatory_sign_in_isValid;

    m_max_user_rating_isValid = ::OpenAPI::fromJsonValue(m_max_user_rating, json[QString("maxUserRating")]);
    m_max_user_rating_isSet = !json[QString("maxUserRating")].isNull() && m_max_user_rating_isValid;

    m_stripe_key_isValid = ::OpenAPI::fromJsonValue(m_stripe_key, json[QString("stripeKey")]);
    m_stripe_key_isSet = !json[QString("stripeKey")].isNull() && m_stripe_key_isValid;

    m_website_url_isValid = ::OpenAPI::fromJsonValue(m_website_url, json[QString("websiteUrl")]);
    m_website_url_isSet = !json[QString("websiteUrl")].isNull() && m_website_url_isValid;
}

QString OAIAppConfigGeneral::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppConfigGeneral::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_code_isSet) {
        obj.insert(QString("currencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("customFields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_default_time_zone_isSet) {
        obj.insert(QString("defaultTimeZone"), ::OpenAPI::toJsonValue(m_default_time_zone));
    }
    if (m_facebook_app_id_isSet) {
        obj.insert(QString("facebookAppId"), ::OpenAPI::toJsonValue(m_facebook_app_id));
    }
    if (m_ga_token_isSet) {
        obj.insert(QString("gaToken"), ::OpenAPI::toJsonValue(m_ga_token));
    }
    if (m_item_image_types.size() > 0) {
        obj.insert(QString("itemImageTypes"), ::OpenAPI::toJsonValue(m_item_image_types));
    }
    if (m_mandatory_sign_in_isSet) {
        obj.insert(QString("mandatorySignIn"), ::OpenAPI::toJsonValue(m_mandatory_sign_in));
    }
    if (m_max_user_rating_isSet) {
        obj.insert(QString("maxUserRating"), ::OpenAPI::toJsonValue(m_max_user_rating));
    }
    if (m_stripe_key_isSet) {
        obj.insert(QString("stripeKey"), ::OpenAPI::toJsonValue(m_stripe_key));
    }
    if (m_website_url_isSet) {
        obj.insert(QString("websiteUrl"), ::OpenAPI::toJsonValue(m_website_url));
    }
    return obj;
}

QString OAIAppConfigGeneral::getCurrencyCode() const {
    return m_currency_code;
}
void OAIAppConfigGeneral::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIAppConfigGeneral::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIAppConfigGeneral::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QMap<QString, QJsonValue> OAIAppConfigGeneral::getCustomFields() const {
    return m_custom_fields;
}
void OAIAppConfigGeneral::setCustomFields(const QMap<QString, QJsonValue> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIAppConfigGeneral::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIAppConfigGeneral::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIAppConfigGeneral::getDefaultTimeZone() const {
    return m_default_time_zone;
}
void OAIAppConfigGeneral::setDefaultTimeZone(const QString &default_time_zone) {
    m_default_time_zone = default_time_zone;
    m_default_time_zone_isSet = true;
}

bool OAIAppConfigGeneral::is_default_time_zone_Set() const{
    return m_default_time_zone_isSet;
}

bool OAIAppConfigGeneral::is_default_time_zone_Valid() const{
    return m_default_time_zone_isValid;
}

QString OAIAppConfigGeneral::getFacebookAppId() const {
    return m_facebook_app_id;
}
void OAIAppConfigGeneral::setFacebookAppId(const QString &facebook_app_id) {
    m_facebook_app_id = facebook_app_id;
    m_facebook_app_id_isSet = true;
}

bool OAIAppConfigGeneral::is_facebook_app_id_Set() const{
    return m_facebook_app_id_isSet;
}

bool OAIAppConfigGeneral::is_facebook_app_id_Valid() const{
    return m_facebook_app_id_isValid;
}

QString OAIAppConfigGeneral::getGaToken() const {
    return m_ga_token;
}
void OAIAppConfigGeneral::setGaToken(const QString &ga_token) {
    m_ga_token = ga_token;
    m_ga_token_isSet = true;
}

bool OAIAppConfigGeneral::is_ga_token_Set() const{
    return m_ga_token_isSet;
}

bool OAIAppConfigGeneral::is_ga_token_Valid() const{
    return m_ga_token_isValid;
}

QMap<QString, QString> OAIAppConfigGeneral::getItemImageTypes() const {
    return m_item_image_types;
}
void OAIAppConfigGeneral::setItemImageTypes(const QMap<QString, QString> &item_image_types) {
    m_item_image_types = item_image_types;
    m_item_image_types_isSet = true;
}

bool OAIAppConfigGeneral::is_item_image_types_Set() const{
    return m_item_image_types_isSet;
}

bool OAIAppConfigGeneral::is_item_image_types_Valid() const{
    return m_item_image_types_isValid;
}

bool OAIAppConfigGeneral::isMandatorySignIn() const {
    return m_mandatory_sign_in;
}
void OAIAppConfigGeneral::setMandatorySignIn(const bool &mandatory_sign_in) {
    m_mandatory_sign_in = mandatory_sign_in;
    m_mandatory_sign_in_isSet = true;
}

bool OAIAppConfigGeneral::is_mandatory_sign_in_Set() const{
    return m_mandatory_sign_in_isSet;
}

bool OAIAppConfigGeneral::is_mandatory_sign_in_Valid() const{
    return m_mandatory_sign_in_isValid;
}

qint32 OAIAppConfigGeneral::getMaxUserRating() const {
    return m_max_user_rating;
}
void OAIAppConfigGeneral::setMaxUserRating(const qint32 &max_user_rating) {
    m_max_user_rating = max_user_rating;
    m_max_user_rating_isSet = true;
}

bool OAIAppConfigGeneral::is_max_user_rating_Set() const{
    return m_max_user_rating_isSet;
}

bool OAIAppConfigGeneral::is_max_user_rating_Valid() const{
    return m_max_user_rating_isValid;
}

QString OAIAppConfigGeneral::getStripeKey() const {
    return m_stripe_key;
}
void OAIAppConfigGeneral::setStripeKey(const QString &stripe_key) {
    m_stripe_key = stripe_key;
    m_stripe_key_isSet = true;
}

bool OAIAppConfigGeneral::is_stripe_key_Set() const{
    return m_stripe_key_isSet;
}

bool OAIAppConfigGeneral::is_stripe_key_Valid() const{
    return m_stripe_key_isValid;
}

QString OAIAppConfigGeneral::getWebsiteUrl() const {
    return m_website_url;
}
void OAIAppConfigGeneral::setWebsiteUrl(const QString &website_url) {
    m_website_url = website_url;
    m_website_url_isSet = true;
}

bool OAIAppConfigGeneral::is_website_url_Set() const{
    return m_website_url_isSet;
}

bool OAIAppConfigGeneral::is_website_url_Valid() const{
    return m_website_url_isValid;
}

bool OAIAppConfigGeneral::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facebook_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ga_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_image_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mandatory_sign_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_user_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stripe_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppConfigGeneral::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
