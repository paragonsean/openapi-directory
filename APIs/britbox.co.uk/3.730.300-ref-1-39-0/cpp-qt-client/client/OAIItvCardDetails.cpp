/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItvCardDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItvCardDetails::OAIItvCardDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItvCardDetails::OAIItvCardDetails() {
    this->initializeModel();
}

OAIItvCardDetails::~OAIItvCardDetails() {}

void OAIItvCardDetails::initializeModel() {

    m_card_type_isSet = false;
    m_card_type_isValid = false;

    m_exp_month_isSet = false;
    m_exp_month_isValid = false;

    m_exp_year_isSet = false;
    m_exp_year_isValid = false;

    m_last4_isSet = false;
    m_last4_isValid = false;
}

void OAIItvCardDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItvCardDetails::fromJsonObject(QJsonObject json) {

    m_card_type_isValid = ::OpenAPI::fromJsonValue(m_card_type, json[QString("card_type")]);
    m_card_type_isSet = !json[QString("card_type")].isNull() && m_card_type_isValid;

    m_exp_month_isValid = ::OpenAPI::fromJsonValue(m_exp_month, json[QString("exp_month")]);
    m_exp_month_isSet = !json[QString("exp_month")].isNull() && m_exp_month_isValid;

    m_exp_year_isValid = ::OpenAPI::fromJsonValue(m_exp_year, json[QString("exp_year")]);
    m_exp_year_isSet = !json[QString("exp_year")].isNull() && m_exp_year_isValid;

    m_last4_isValid = ::OpenAPI::fromJsonValue(m_last4, json[QString("last4")]);
    m_last4_isSet = !json[QString("last4")].isNull() && m_last4_isValid;
}

QString OAIItvCardDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItvCardDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_card_type_isSet) {
        obj.insert(QString("card_type"), ::OpenAPI::toJsonValue(m_card_type));
    }
    if (m_exp_month_isSet) {
        obj.insert(QString("exp_month"), ::OpenAPI::toJsonValue(m_exp_month));
    }
    if (m_exp_year_isSet) {
        obj.insert(QString("exp_year"), ::OpenAPI::toJsonValue(m_exp_year));
    }
    if (m_last4_isSet) {
        obj.insert(QString("last4"), ::OpenAPI::toJsonValue(m_last4));
    }
    return obj;
}

QString OAIItvCardDetails::getCardType() const {
    return m_card_type;
}
void OAIItvCardDetails::setCardType(const QString &card_type) {
    m_card_type = card_type;
    m_card_type_isSet = true;
}

bool OAIItvCardDetails::is_card_type_Set() const{
    return m_card_type_isSet;
}

bool OAIItvCardDetails::is_card_type_Valid() const{
    return m_card_type_isValid;
}

qint32 OAIItvCardDetails::getExpMonth() const {
    return m_exp_month;
}
void OAIItvCardDetails::setExpMonth(const qint32 &exp_month) {
    m_exp_month = exp_month;
    m_exp_month_isSet = true;
}

bool OAIItvCardDetails::is_exp_month_Set() const{
    return m_exp_month_isSet;
}

bool OAIItvCardDetails::is_exp_month_Valid() const{
    return m_exp_month_isValid;
}

qint32 OAIItvCardDetails::getExpYear() const {
    return m_exp_year;
}
void OAIItvCardDetails::setExpYear(const qint32 &exp_year) {
    m_exp_year = exp_year;
    m_exp_year_isSet = true;
}

bool OAIItvCardDetails::is_exp_year_Set() const{
    return m_exp_year_isSet;
}

bool OAIItvCardDetails::is_exp_year_Valid() const{
    return m_exp_year_isValid;
}

QString OAIItvCardDetails::getLast4() const {
    return m_last4;
}
void OAIItvCardDetails::setLast4(const QString &last4) {
    m_last4 = last4;
    m_last4_isSet = true;
}

bool OAIItvCardDetails::is_last4_Set() const{
    return m_last4_isSet;
}

bool OAIItvCardDetails::is_last4_Valid() const{
    return m_last4_isValid;
}

bool OAIItvCardDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_card_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exp_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exp_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last4_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItvCardDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_card_type_isValid && m_exp_month_isValid && m_exp_year_isValid && m_last4_isValid && true;
}

} // namespace OpenAPI
