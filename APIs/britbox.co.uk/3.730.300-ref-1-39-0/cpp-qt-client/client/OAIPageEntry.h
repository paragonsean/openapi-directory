/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPageEntry.h
 *
 * Represents an entry of a Page. Defines what specific piece of content should be presented e.g. an Item or ItemList. Also defines what visual template should be used to render that content. 
 */

#ifndef OAIPageEntry_H
#define OAIPageEntry_H

#include <QJsonObject>

#include "OAIItemList.h"
#include "OAIItemSummary.h"
#include "OAIPerson.h"
#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIItemSummary;
class OAIItemList;
class OAIPerson;

class OAIPageEntry : public OAIObject {
public:
    OAIPageEntry();
    OAIPageEntry(QString json);
    ~OAIPageEntry() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, QJsonValue> getCustomFields() const;
    void setCustomFields(const QMap<QString, QJsonValue> &custom_fields);
    bool is_custom_fields_Set() const;
    bool is_custom_fields_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QMap<QString, QString> getImages() const;
    void setImages(const QMap<QString, QString> &images);
    bool is_images_Set() const;
    bool is_images_Valid() const;

    OAIItemSummary getItem() const;
    void setItem(const OAIItemSummary &item);
    bool is_item_Set() const;
    bool is_item_Valid() const;

    OAIItemList getList() const;
    void setList(const OAIItemList &list);
    bool is_list_Set() const;
    bool is_list_Valid() const;

    QList<OAIPerson> getPeople() const;
    void setPeople(const QList<OAIPerson> &people);
    bool is_people_Set() const;
    bool is_people_Valid() const;

    QString getRTemplate() const;
    void setRTemplate(const QString &r_template);
    bool is_r_template_Set() const;
    bool is_r_template_Valid() const;

    QString getText() const;
    void setText(const QString &text);
    bool is_text_Set() const;
    bool is_text_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, QJsonValue> m_custom_fields;
    bool m_custom_fields_isSet;
    bool m_custom_fields_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QMap<QString, QString> m_images;
    bool m_images_isSet;
    bool m_images_isValid;

    OAIItemSummary m_item;
    bool m_item_isSet;
    bool m_item_isValid;

    OAIItemList m_list;
    bool m_list_isSet;
    bool m_list_isValid;

    QList<OAIPerson> m_people;
    bool m_people_isSet;
    bool m_people_isValid;

    QString m_r_template;
    bool m_r_template_isSet;
    bool m_r_template_isValid;

    QString m_text;
    bool m_text_isSet;
    bool m_text_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPageEntry)

#endif // OAIPageEntry_H
