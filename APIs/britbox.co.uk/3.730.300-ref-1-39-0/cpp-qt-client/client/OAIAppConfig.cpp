/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppConfig::OAIAppConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppConfig::OAIAppConfig() {
    this->initializeModel();
}

OAIAppConfig::~OAIAppConfig() {}

void OAIAppConfig::initializeModel() {

    m_classification_isSet = false;
    m_classification_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_general_isSet = false;
    m_general_isValid = false;

    m_i18n_isSet = false;
    m_i18n_isValid = false;

    m_linear_isSet = false;
    m_linear_isValid = false;

    m_navigation_isSet = false;
    m_navigation_isValid = false;

    m_playback_isSet = false;
    m_playback_isValid = false;

    m_sitemap_isSet = false;
    m_sitemap_isValid = false;

    m_subscription_isSet = false;
    m_subscription_isValid = false;
}

void OAIAppConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppConfig::fromJsonObject(QJsonObject json) {

    m_classification_isValid = ::OpenAPI::fromJsonValue(m_classification, json[QString("classification")]);
    m_classification_isSet = !json[QString("classification")].isNull() && m_classification_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_general_isValid = ::OpenAPI::fromJsonValue(m_general, json[QString("general")]);
    m_general_isSet = !json[QString("general")].isNull() && m_general_isValid;

    m_i18n_isValid = ::OpenAPI::fromJsonValue(m_i18n, json[QString("i18n")]);
    m_i18n_isSet = !json[QString("i18n")].isNull() && m_i18n_isValid;

    m_linear_isValid = ::OpenAPI::fromJsonValue(m_linear, json[QString("linear")]);
    m_linear_isSet = !json[QString("linear")].isNull() && m_linear_isValid;

    m_navigation_isValid = ::OpenAPI::fromJsonValue(m_navigation, json[QString("navigation")]);
    m_navigation_isSet = !json[QString("navigation")].isNull() && m_navigation_isValid;

    m_playback_isValid = ::OpenAPI::fromJsonValue(m_playback, json[QString("playback")]);
    m_playback_isSet = !json[QString("playback")].isNull() && m_playback_isValid;

    m_sitemap_isValid = ::OpenAPI::fromJsonValue(m_sitemap, json[QString("sitemap")]);
    m_sitemap_isSet = !json[QString("sitemap")].isNull() && m_sitemap_isValid;

    m_subscription_isValid = ::OpenAPI::fromJsonValue(m_subscription, json[QString("subscription")]);
    m_subscription_isSet = !json[QString("subscription")].isNull() && m_subscription_isValid;
}

QString OAIAppConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_classification.size() > 0) {
        obj.insert(QString("classification"), ::OpenAPI::toJsonValue(m_classification));
    }
    if (m_display.isSet()) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_general.isSet()) {
        obj.insert(QString("general"), ::OpenAPI::toJsonValue(m_general));
    }
    if (m_i18n.isSet()) {
        obj.insert(QString("i18n"), ::OpenAPI::toJsonValue(m_i18n));
    }
    if (m_linear.isSet()) {
        obj.insert(QString("linear"), ::OpenAPI::toJsonValue(m_linear));
    }
    if (m_navigation.isSet()) {
        obj.insert(QString("navigation"), ::OpenAPI::toJsonValue(m_navigation));
    }
    if (m_playback.isSet()) {
        obj.insert(QString("playback"), ::OpenAPI::toJsonValue(m_playback));
    }
    if (m_sitemap.size() > 0) {
        obj.insert(QString("sitemap"), ::OpenAPI::toJsonValue(m_sitemap));
    }
    if (m_subscription.isSet()) {
        obj.insert(QString("subscription"), ::OpenAPI::toJsonValue(m_subscription));
    }
    return obj;
}

QMap<QString, OAIClassification> OAIAppConfig::getClassification() const {
    return m_classification;
}
void OAIAppConfig::setClassification(const QMap<QString, OAIClassification> &classification) {
    m_classification = classification;
    m_classification_isSet = true;
}

bool OAIAppConfig::is_classification_Set() const{
    return m_classification_isSet;
}

bool OAIAppConfig::is_classification_Valid() const{
    return m_classification_isValid;
}

OAIAppConfigDisplay OAIAppConfig::getDisplay() const {
    return m_display;
}
void OAIAppConfig::setDisplay(const OAIAppConfigDisplay &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIAppConfig::is_display_Set() const{
    return m_display_isSet;
}

bool OAIAppConfig::is_display_Valid() const{
    return m_display_isValid;
}

OAIAppConfigGeneral OAIAppConfig::getGeneral() const {
    return m_general;
}
void OAIAppConfig::setGeneral(const OAIAppConfigGeneral &general) {
    m_general = general;
    m_general_isSet = true;
}

bool OAIAppConfig::is_general_Set() const{
    return m_general_isSet;
}

bool OAIAppConfig::is_general_Valid() const{
    return m_general_isValid;
}

OAIAppConfigI18n OAIAppConfig::getI18n() const {
    return m_i18n;
}
void OAIAppConfig::setI18n(const OAIAppConfigI18n &i18n) {
    m_i18n = i18n;
    m_i18n_isSet = true;
}

bool OAIAppConfig::is_i18n_Set() const{
    return m_i18n_isSet;
}

bool OAIAppConfig::is_i18n_Valid() const{
    return m_i18n_isValid;
}

OAIAppConfigLinear OAIAppConfig::getLinear() const {
    return m_linear;
}
void OAIAppConfig::setLinear(const OAIAppConfigLinear &linear) {
    m_linear = linear;
    m_linear_isSet = true;
}

bool OAIAppConfig::is_linear_Set() const{
    return m_linear_isSet;
}

bool OAIAppConfig::is_linear_Valid() const{
    return m_linear_isValid;
}

OAINavigation OAIAppConfig::getNavigation() const {
    return m_navigation;
}
void OAIAppConfig::setNavigation(const OAINavigation &navigation) {
    m_navigation = navigation;
    m_navigation_isSet = true;
}

bool OAIAppConfig::is_navigation_Set() const{
    return m_navigation_isSet;
}

bool OAIAppConfig::is_navigation_Valid() const{
    return m_navigation_isValid;
}

OAIAppConfigPlayback OAIAppConfig::getPlayback() const {
    return m_playback;
}
void OAIAppConfig::setPlayback(const OAIAppConfigPlayback &playback) {
    m_playback = playback;
    m_playback_isSet = true;
}

bool OAIAppConfig::is_playback_Set() const{
    return m_playback_isSet;
}

bool OAIAppConfig::is_playback_Valid() const{
    return m_playback_isValid;
}

QList<OAIPageSummary> OAIAppConfig::getSitemap() const {
    return m_sitemap;
}
void OAIAppConfig::setSitemap(const QList<OAIPageSummary> &sitemap) {
    m_sitemap = sitemap;
    m_sitemap_isSet = true;
}

bool OAIAppConfig::is_sitemap_Set() const{
    return m_sitemap_isSet;
}

bool OAIAppConfig::is_sitemap_Valid() const{
    return m_sitemap_isValid;
}

OAIAppConfigSubscription OAIAppConfig::getSubscription() const {
    return m_subscription;
}
void OAIAppConfig::setSubscription(const OAIAppConfigSubscription &subscription) {
    m_subscription = subscription;
    m_subscription_isSet = true;
}

bool OAIAppConfig::is_subscription_Set() const{
    return m_subscription_isSet;
}

bool OAIAppConfig::is_subscription_Valid() const{
    return m_subscription_isValid;
}

bool OAIAppConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_classification.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_general.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_i18n.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_linear.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_navigation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_playback.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sitemap.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
