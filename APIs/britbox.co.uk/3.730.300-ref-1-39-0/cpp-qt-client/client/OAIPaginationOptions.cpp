/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaginationOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaginationOptions::OAIPaginationOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaginationOptions::OAIPaginationOptions() {
    this->initializeModel();
}

OAIPaginationOptions::~OAIPaginationOptions() {}

void OAIPaginationOptions::initializeModel() {

    m_completed_isSet = false;
    m_completed_isValid = false;

    m_item_type_isSet = false;
    m_item_type_isValid = false;

    m_max_rating_isSet = false;
    m_max_rating_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_order_by_isSet = false;
    m_order_by_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;
}

void OAIPaginationOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaginationOptions::fromJsonObject(QJsonObject json) {

    m_completed_isValid = ::OpenAPI::fromJsonValue(m_completed, json[QString("completed")]);
    m_completed_isSet = !json[QString("completed")].isNull() && m_completed_isValid;

    m_item_type_isValid = ::OpenAPI::fromJsonValue(m_item_type, json[QString("itemType")]);
    m_item_type_isSet = !json[QString("itemType")].isNull() && m_item_type_isValid;

    m_max_rating_isValid = ::OpenAPI::fromJsonValue(m_max_rating, json[QString("maxRating")]);
    m_max_rating_isSet = !json[QString("maxRating")].isNull() && m_max_rating_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;

    m_order_by_isValid = ::OpenAPI::fromJsonValue(m_order_by, json[QString("orderBy")]);
    m_order_by_isSet = !json[QString("orderBy")].isNull() && m_order_by_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;
}

QString OAIPaginationOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaginationOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_completed_isSet) {
        obj.insert(QString("completed"), ::OpenAPI::toJsonValue(m_completed));
    }
    if (m_item_type_isSet) {
        obj.insert(QString("itemType"), ::OpenAPI::toJsonValue(m_item_type));
    }
    if (m_max_rating_isSet) {
        obj.insert(QString("maxRating"), ::OpenAPI::toJsonValue(m_max_rating));
    }
    if (m_order_isSet) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_order_by_isSet) {
        obj.insert(QString("orderBy"), ::OpenAPI::toJsonValue(m_order_by));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    return obj;
}

bool OAIPaginationOptions::isCompleted() const {
    return m_completed;
}
void OAIPaginationOptions::setCompleted(const bool &completed) {
    m_completed = completed;
    m_completed_isSet = true;
}

bool OAIPaginationOptions::is_completed_Set() const{
    return m_completed_isSet;
}

bool OAIPaginationOptions::is_completed_Valid() const{
    return m_completed_isValid;
}

QString OAIPaginationOptions::getItemType() const {
    return m_item_type;
}
void OAIPaginationOptions::setItemType(const QString &item_type) {
    m_item_type = item_type;
    m_item_type_isSet = true;
}

bool OAIPaginationOptions::is_item_type_Set() const{
    return m_item_type_isSet;
}

bool OAIPaginationOptions::is_item_type_Valid() const{
    return m_item_type_isValid;
}

QString OAIPaginationOptions::getMaxRating() const {
    return m_max_rating;
}
void OAIPaginationOptions::setMaxRating(const QString &max_rating) {
    m_max_rating = max_rating;
    m_max_rating_isSet = true;
}

bool OAIPaginationOptions::is_max_rating_Set() const{
    return m_max_rating_isSet;
}

bool OAIPaginationOptions::is_max_rating_Valid() const{
    return m_max_rating_isValid;
}

QString OAIPaginationOptions::getOrder() const {
    return m_order;
}
void OAIPaginationOptions::setOrder(const QString &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAIPaginationOptions::is_order_Set() const{
    return m_order_isSet;
}

bool OAIPaginationOptions::is_order_Valid() const{
    return m_order_isValid;
}

QString OAIPaginationOptions::getOrderBy() const {
    return m_order_by;
}
void OAIPaginationOptions::setOrderBy(const QString &order_by) {
    m_order_by = order_by;
    m_order_by_isSet = true;
}

bool OAIPaginationOptions::is_order_by_Set() const{
    return m_order_by_isSet;
}

bool OAIPaginationOptions::is_order_by_Valid() const{
    return m_order_by_isValid;
}

qint32 OAIPaginationOptions::getPageSize() const {
    return m_page_size;
}
void OAIPaginationOptions::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIPaginationOptions::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIPaginationOptions::is_page_size_Valid() const{
    return m_page_size_isValid;
}

bool OAIPaginationOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaginationOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
