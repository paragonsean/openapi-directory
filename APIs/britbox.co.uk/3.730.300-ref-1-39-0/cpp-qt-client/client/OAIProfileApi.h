/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProfileApi_H
#define OAI_OAIProfileApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBookmark.h"
#include "OAIItemList.h"
#include "OAINextPlaybackItem.h"
#include "OAIProfileDetail.h"
#include "OAIServiceError.h"
#include "OAIUserRating.h"
#include "OAIWatched.h"
#include <QDateTime>
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProfileApi : public QObject {
    Q_OBJECT

public:
    OAIProfileApi(const int timeOut = 0);
    ~OAIProfileApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void bookmarkItem(const QString &item_id, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void deleteItemBookmark(const QString &item_id, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  item_ids QList<QString> [optional]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void deleteWatched(const ::OpenAPI::OptionalParam<QList<QString>> &item_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  order QString [optional]
    * @param[in]  item_type QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  sub QString [optional]
    * @param[in]  segments QList<QString> [optional]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getBookmarkList(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &item_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sub = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &segments = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getBookmarks(const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  show_item_type QString [optional]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  max_rating QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  sub QString [optional]
    * @param[in]  segments QList<QString> [optional]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getContinueWatchingList(const ::OpenAPI::OptionalParam<QString> &show_item_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_rating = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sub = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &segments = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getItemBookmark(const QString &item_id, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getItemRating(const QString &item_id, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getItemWatchedStatus(const QString &item_id, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  max_rating QString [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  sub QString [optional]
    * @param[in]  segments QList<QString> [optional]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getNextPlaybackItem(const QString &item_id, const ::OpenAPI::OptionalParam<QString> &max_rating = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sub = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &segments = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getProfile(const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getRatings(const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  order QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  item_type QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  sub QString [optional]
    * @param[in]  segments QList<QString> [optional]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getRatingsList(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &item_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sub = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &segments = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getWatched(const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  completed bool [optional]
    * @param[in]  order QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  item_type QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  sub QString [optional]
    * @param[in]  segments QList<QString> [optional]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getWatchedList(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &completed = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &item_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sub = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &segments = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  rating qint32 [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void rateItem(const QString &item_id, const qint32 &rating, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  position qint32 [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void setItemWatchedStatus(const QString &item_id, const qint32 &position, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void bookmarkItemCallback(OAIHttpRequestWorker *worker);
    void deleteItemBookmarkCallback(OAIHttpRequestWorker *worker);
    void deleteWatchedCallback(OAIHttpRequestWorker *worker);
    void getBookmarkListCallback(OAIHttpRequestWorker *worker);
    void getBookmarksCallback(OAIHttpRequestWorker *worker);
    void getContinueWatchingListCallback(OAIHttpRequestWorker *worker);
    void getItemBookmarkCallback(OAIHttpRequestWorker *worker);
    void getItemRatingCallback(OAIHttpRequestWorker *worker);
    void getItemWatchedStatusCallback(OAIHttpRequestWorker *worker);
    void getNextPlaybackItemCallback(OAIHttpRequestWorker *worker);
    void getProfileCallback(OAIHttpRequestWorker *worker);
    void getRatingsCallback(OAIHttpRequestWorker *worker);
    void getRatingsListCallback(OAIHttpRequestWorker *worker);
    void getWatchedCallback(OAIHttpRequestWorker *worker);
    void getWatchedListCallback(OAIHttpRequestWorker *worker);
    void rateItemCallback(OAIHttpRequestWorker *worker);
    void setItemWatchedStatusCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void bookmarkItemSignal(OAIBookmark summary);
    void deleteItemBookmarkSignal();
    void deleteWatchedSignal();
    void getBookmarkListSignal(OAIItemList summary);
    void getBookmarksSignal(QMap<QString, QDateTime> summary);
    void getContinueWatchingListSignal(OAIItemList summary);
    void getItemBookmarkSignal(OAIBookmark summary);
    void getItemRatingSignal(OAIUserRating summary);
    void getItemWatchedStatusSignal(OAIWatched summary);
    void getNextPlaybackItemSignal(OAINextPlaybackItem summary);
    void getProfileSignal(OAIProfileDetail summary);
    void getRatingsSignal(QMap<QString, qint32> summary);
    void getRatingsListSignal(OAIItemList summary);
    void getWatchedSignal(QMap<QString, OAIWatched> summary);
    void getWatchedListSignal(OAIItemList summary);
    void rateItemSignal(OAIUserRating summary);
    void setItemWatchedStatusSignal(OAIWatched summary);


    void bookmarkItemSignalFull(OAIHttpRequestWorker *worker, OAIBookmark summary);
    void deleteItemBookmarkSignalFull(OAIHttpRequestWorker *worker);
    void deleteWatchedSignalFull(OAIHttpRequestWorker *worker);
    void getBookmarkListSignalFull(OAIHttpRequestWorker *worker, OAIItemList summary);
    void getBookmarksSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QDateTime> summary);
    void getContinueWatchingListSignalFull(OAIHttpRequestWorker *worker, OAIItemList summary);
    void getItemBookmarkSignalFull(OAIHttpRequestWorker *worker, OAIBookmark summary);
    void getItemRatingSignalFull(OAIHttpRequestWorker *worker, OAIUserRating summary);
    void getItemWatchedStatusSignalFull(OAIHttpRequestWorker *worker, OAIWatched summary);
    void getNextPlaybackItemSignalFull(OAIHttpRequestWorker *worker, OAINextPlaybackItem summary);
    void getProfileSignalFull(OAIHttpRequestWorker *worker, OAIProfileDetail summary);
    void getRatingsSignalFull(OAIHttpRequestWorker *worker, QMap<QString, qint32> summary);
    void getRatingsListSignalFull(OAIHttpRequestWorker *worker, OAIItemList summary);
    void getWatchedSignalFull(OAIHttpRequestWorker *worker, QMap<QString, OAIWatched> summary);
    void getWatchedListSignalFull(OAIHttpRequestWorker *worker, OAIItemList summary);
    void rateItemSignalFull(OAIHttpRequestWorker *worker, OAIUserRating summary);
    void setItemWatchedStatusSignalFull(OAIHttpRequestWorker *worker, OAIWatched summary);

    Q_DECL_DEPRECATED_X("Use bookmarkItemSignalError() instead")
    void bookmarkItemSignalE(OAIBookmark summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bookmarkItemSignalError(OAIBookmark summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteItemBookmarkSignalError() instead")
    void deleteItemBookmarkSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteItemBookmarkSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWatchedSignalError() instead")
    void deleteWatchedSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWatchedSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBookmarkListSignalError() instead")
    void getBookmarkListSignalE(OAIItemList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBookmarkListSignalError(OAIItemList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBookmarksSignalError() instead")
    void getBookmarksSignalE(QMap<QString, QDateTime> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBookmarksSignalError(QMap<QString, QDateTime> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContinueWatchingListSignalError() instead")
    void getContinueWatchingListSignalE(OAIItemList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContinueWatchingListSignalError(OAIItemList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemBookmarkSignalError() instead")
    void getItemBookmarkSignalE(OAIBookmark summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemBookmarkSignalError(OAIBookmark summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemRatingSignalError() instead")
    void getItemRatingSignalE(OAIUserRating summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemRatingSignalError(OAIUserRating summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemWatchedStatusSignalError() instead")
    void getItemWatchedStatusSignalE(OAIWatched summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemWatchedStatusSignalError(OAIWatched summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNextPlaybackItemSignalError() instead")
    void getNextPlaybackItemSignalE(OAINextPlaybackItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNextPlaybackItemSignalError(OAINextPlaybackItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProfileSignalError() instead")
    void getProfileSignalE(OAIProfileDetail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProfileSignalError(OAIProfileDetail summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRatingsSignalError() instead")
    void getRatingsSignalE(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRatingsSignalError(QMap<QString, qint32> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRatingsListSignalError() instead")
    void getRatingsListSignalE(OAIItemList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRatingsListSignalError(OAIItemList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWatchedSignalError() instead")
    void getWatchedSignalE(QMap<QString, OAIWatched> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWatchedSignalError(QMap<QString, OAIWatched> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWatchedListSignalError() instead")
    void getWatchedListSignalE(OAIItemList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWatchedListSignalError(OAIItemList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rateItemSignalError() instead")
    void rateItemSignalE(OAIUserRating summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rateItemSignalError(OAIUserRating summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setItemWatchedStatusSignalError() instead")
    void setItemWatchedStatusSignalE(OAIWatched summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setItemWatchedStatusSignalError(OAIWatched summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use bookmarkItemSignalErrorFull() instead")
    void bookmarkItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bookmarkItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteItemBookmarkSignalErrorFull() instead")
    void deleteItemBookmarkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteItemBookmarkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWatchedSignalErrorFull() instead")
    void deleteWatchedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWatchedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBookmarkListSignalErrorFull() instead")
    void getBookmarkListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBookmarkListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBookmarksSignalErrorFull() instead")
    void getBookmarksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBookmarksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContinueWatchingListSignalErrorFull() instead")
    void getContinueWatchingListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContinueWatchingListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemBookmarkSignalErrorFull() instead")
    void getItemBookmarkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemBookmarkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemRatingSignalErrorFull() instead")
    void getItemRatingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemRatingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemWatchedStatusSignalErrorFull() instead")
    void getItemWatchedStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemWatchedStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNextPlaybackItemSignalErrorFull() instead")
    void getNextPlaybackItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNextPlaybackItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProfileSignalErrorFull() instead")
    void getProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRatingsSignalErrorFull() instead")
    void getRatingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRatingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRatingsListSignalErrorFull() instead")
    void getRatingsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRatingsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWatchedSignalErrorFull() instead")
    void getWatchedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWatchedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWatchedListSignalErrorFull() instead")
    void getWatchedListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWatchedListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rateItemSignalErrorFull() instead")
    void rateItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rateItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setItemWatchedStatusSignalErrorFull() instead")
    void setItemWatchedStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setItemWatchedStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
