/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentMethod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentMethod::OAIPaymentMethod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentMethod::OAIPaymentMethod() {
    this->initializeModel();
}

OAIPaymentMethod::~OAIPaymentMethod() {}

void OAIPaymentMethod::initializeModel() {

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_expiry_month_isSet = false;
    m_expiry_month_isValid = false;

    m_expiry_year_isSet = false;
    m_expiry_year_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_digits_isSet = false;
    m_last_digits_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPaymentMethod::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentMethod::fromJsonObject(QJsonObject json) {

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_expiry_month_isValid = ::OpenAPI::fromJsonValue(m_expiry_month, json[QString("expiryMonth")]);
    m_expiry_month_isSet = !json[QString("expiryMonth")].isNull() && m_expiry_month_isValid;

    m_expiry_year_isValid = ::OpenAPI::fromJsonValue(m_expiry_year, json[QString("expiryYear")]);
    m_expiry_year_isSet = !json[QString("expiryYear")].isNull() && m_expiry_year_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_digits_isValid = ::OpenAPI::fromJsonValue(m_last_digits, json[QString("lastDigits")]);
    m_last_digits_isSet = !json[QString("lastDigits")].isNull() && m_last_digits_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPaymentMethod::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentMethod::asJsonObject() const {
    QJsonObject obj;
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_brand_isSet) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_expiry_month_isSet) {
        obj.insert(QString("expiryMonth"), ::OpenAPI::toJsonValue(m_expiry_month));
    }
    if (m_expiry_year_isSet) {
        obj.insert(QString("expiryYear"), ::OpenAPI::toJsonValue(m_expiry_year));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_digits_isSet) {
        obj.insert(QString("lastDigits"), ::OpenAPI::toJsonValue(m_last_digits));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

float OAIPaymentMethod::getBalance() const {
    return m_balance;
}
void OAIPaymentMethod::setBalance(const float &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAIPaymentMethod::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAIPaymentMethod::is_balance_Valid() const{
    return m_balance_isValid;
}

QString OAIPaymentMethod::getBrand() const {
    return m_brand;
}
void OAIPaymentMethod::setBrand(const QString &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAIPaymentMethod::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAIPaymentMethod::is_brand_Valid() const{
    return m_brand_isValid;
}

QString OAIPaymentMethod::getCurrency() const {
    return m_currency;
}
void OAIPaymentMethod::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIPaymentMethod::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIPaymentMethod::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIPaymentMethod::getDescription() const {
    return m_description;
}
void OAIPaymentMethod::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPaymentMethod::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPaymentMethod::is_description_Valid() const{
    return m_description_isValid;
}

double OAIPaymentMethod::getExpiryMonth() const {
    return m_expiry_month;
}
void OAIPaymentMethod::setExpiryMonth(const double &expiry_month) {
    m_expiry_month = expiry_month;
    m_expiry_month_isSet = true;
}

bool OAIPaymentMethod::is_expiry_month_Set() const{
    return m_expiry_month_isSet;
}

bool OAIPaymentMethod::is_expiry_month_Valid() const{
    return m_expiry_month_isValid;
}

double OAIPaymentMethod::getExpiryYear() const {
    return m_expiry_year;
}
void OAIPaymentMethod::setExpiryYear(const double &expiry_year) {
    m_expiry_year = expiry_year;
    m_expiry_year_isSet = true;
}

bool OAIPaymentMethod::is_expiry_year_Set() const{
    return m_expiry_year_isSet;
}

bool OAIPaymentMethod::is_expiry_year_Valid() const{
    return m_expiry_year_isValid;
}

QString OAIPaymentMethod::getId() const {
    return m_id;
}
void OAIPaymentMethod::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPaymentMethod::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPaymentMethod::is_id_Valid() const{
    return m_id_isValid;
}

double OAIPaymentMethod::getLastDigits() const {
    return m_last_digits;
}
void OAIPaymentMethod::setLastDigits(const double &last_digits) {
    m_last_digits = last_digits;
    m_last_digits_isSet = true;
}

bool OAIPaymentMethod::is_last_digits_Set() const{
    return m_last_digits_isSet;
}

bool OAIPaymentMethod::is_last_digits_Valid() const{
    return m_last_digits_isValid;
}

QString OAIPaymentMethod::getType() const {
    return m_type;
}
void OAIPaymentMethod::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPaymentMethod::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPaymentMethod::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPaymentMethod::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_digits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentMethod::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_id_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
