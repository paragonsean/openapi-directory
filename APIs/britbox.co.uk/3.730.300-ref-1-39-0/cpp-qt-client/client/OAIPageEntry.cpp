/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPageEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPageEntry::OAIPageEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPageEntry::OAIPageEntry() {
    this->initializeModel();
}

OAIPageEntry::~OAIPageEntry() {}

void OAIPageEntry::initializeModel() {

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_item_isSet = false;
    m_item_isValid = false;

    m_list_isSet = false;
    m_list_isValid = false;

    m_people_isSet = false;
    m_people_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPageEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPageEntry::fromJsonObject(QJsonObject json) {

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("customFields")]);
    m_custom_fields_isSet = !json[QString("customFields")].isNull() && m_custom_fields_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_item_isValid = ::OpenAPI::fromJsonValue(m_item, json[QString("item")]);
    m_item_isSet = !json[QString("item")].isNull() && m_item_isValid;

    m_list_isValid = ::OpenAPI::fromJsonValue(m_list, json[QString("list")]);
    m_list_isSet = !json[QString("list")].isNull() && m_list_isValid;

    m_people_isValid = ::OpenAPI::fromJsonValue(m_people, json[QString("people")]);
    m_people_isSet = !json[QString("people")].isNull() && m_people_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPageEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPageEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("customFields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_item.isSet()) {
        obj.insert(QString("item"), ::OpenAPI::toJsonValue(m_item));
    }
    if (m_list.isSet()) {
        obj.insert(QString("list"), ::OpenAPI::toJsonValue(m_list));
    }
    if (m_people.size() > 0) {
        obj.insert(QString("people"), ::OpenAPI::toJsonValue(m_people));
    }
    if (m_r_template_isSet) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIPageEntry::getCustomFields() const {
    return m_custom_fields;
}
void OAIPageEntry::setCustomFields(const QMap<QString, QJsonValue> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIPageEntry::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIPageEntry::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIPageEntry::getId() const {
    return m_id;
}
void OAIPageEntry::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPageEntry::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPageEntry::is_id_Valid() const{
    return m_id_isValid;
}

QMap<QString, QString> OAIPageEntry::getImages() const {
    return m_images;
}
void OAIPageEntry::setImages(const QMap<QString, QString> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIPageEntry::is_images_Set() const{
    return m_images_isSet;
}

bool OAIPageEntry::is_images_Valid() const{
    return m_images_isValid;
}

OAIItemSummary OAIPageEntry::getItem() const {
    return m_item;
}
void OAIPageEntry::setItem(const OAIItemSummary &item) {
    m_item = item;
    m_item_isSet = true;
}

bool OAIPageEntry::is_item_Set() const{
    return m_item_isSet;
}

bool OAIPageEntry::is_item_Valid() const{
    return m_item_isValid;
}

OAIItemList OAIPageEntry::getList() const {
    return m_list;
}
void OAIPageEntry::setList(const OAIItemList &list) {
    m_list = list;
    m_list_isSet = true;
}

bool OAIPageEntry::is_list_Set() const{
    return m_list_isSet;
}

bool OAIPageEntry::is_list_Valid() const{
    return m_list_isValid;
}

QList<OAIPerson> OAIPageEntry::getPeople() const {
    return m_people;
}
void OAIPageEntry::setPeople(const QList<OAIPerson> &people) {
    m_people = people;
    m_people_isSet = true;
}

bool OAIPageEntry::is_people_Set() const{
    return m_people_isSet;
}

bool OAIPageEntry::is_people_Valid() const{
    return m_people_isValid;
}

QString OAIPageEntry::getRTemplate() const {
    return m_r_template;
}
void OAIPageEntry::setRTemplate(const QString &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAIPageEntry::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAIPageEntry::is_r_template_Valid() const{
    return m_r_template_isValid;
}

QString OAIPageEntry::getText() const {
    return m_text;
}
void OAIPageEntry::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIPageEntry::is_text_Set() const{
    return m_text_isSet;
}

bool OAIPageEntry::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIPageEntry::getTitle() const {
    return m_title;
}
void OAIPageEntry::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPageEntry::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPageEntry::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIPageEntry::getType() const {
    return m_type;
}
void OAIPageEntry::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPageEntry::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPageEntry::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPageEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_people.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPageEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_r_template_isValid && m_title_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
