/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISingleSignOnRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISingleSignOnRequest::OAISingleSignOnRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISingleSignOnRequest::OAISingleSignOnRequest() {
    this->initializeModel();
}

OAISingleSignOnRequest::~OAISingleSignOnRequest() {}

void OAISingleSignOnRequest::initializeModel() {

    m_cookie_type_isSet = false;
    m_cookie_type_isValid = false;

    m_link_accounts_isSet = false;
    m_link_accounts_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;
}

void OAISingleSignOnRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISingleSignOnRequest::fromJsonObject(QJsonObject json) {

    m_cookie_type_isValid = ::OpenAPI::fromJsonValue(m_cookie_type, json[QString("cookieType")]);
    m_cookie_type_isSet = !json[QString("cookieType")].isNull() && m_cookie_type_isValid;

    m_link_accounts_isValid = ::OpenAPI::fromJsonValue(m_link_accounts, json[QString("linkAccounts")]);
    m_link_accounts_isSet = !json[QString("linkAccounts")].isNull() && m_link_accounts_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;
}

QString OAISingleSignOnRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISingleSignOnRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cookie_type_isSet) {
        obj.insert(QString("cookieType"), ::OpenAPI::toJsonValue(m_cookie_type));
    }
    if (m_link_accounts_isSet) {
        obj.insert(QString("linkAccounts"), ::OpenAPI::toJsonValue(m_link_accounts));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_scopes.size() > 0) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    return obj;
}

QString OAISingleSignOnRequest::getCookieType() const {
    return m_cookie_type;
}
void OAISingleSignOnRequest::setCookieType(const QString &cookie_type) {
    m_cookie_type = cookie_type;
    m_cookie_type_isSet = true;
}

bool OAISingleSignOnRequest::is_cookie_type_Set() const{
    return m_cookie_type_isSet;
}

bool OAISingleSignOnRequest::is_cookie_type_Valid() const{
    return m_cookie_type_isValid;
}

bool OAISingleSignOnRequest::isLinkAccounts() const {
    return m_link_accounts;
}
void OAISingleSignOnRequest::setLinkAccounts(const bool &link_accounts) {
    m_link_accounts = link_accounts;
    m_link_accounts_isSet = true;
}

bool OAISingleSignOnRequest::is_link_accounts_Set() const{
    return m_link_accounts_isSet;
}

bool OAISingleSignOnRequest::is_link_accounts_Valid() const{
    return m_link_accounts_isValid;
}

QString OAISingleSignOnRequest::getProvider() const {
    return m_provider;
}
void OAISingleSignOnRequest::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAISingleSignOnRequest::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAISingleSignOnRequest::is_provider_Valid() const{
    return m_provider_isValid;
}

QList<QString> OAISingleSignOnRequest::getScopes() const {
    return m_scopes;
}
void OAISingleSignOnRequest::setScopes(const QList<QString> &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAISingleSignOnRequest::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAISingleSignOnRequest::is_scopes_Valid() const{
    return m_scopes_isValid;
}

QString OAISingleSignOnRequest::getToken() const {
    return m_token;
}
void OAISingleSignOnRequest::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAISingleSignOnRequest::is_token_Set() const{
    return m_token_isSet;
}

bool OAISingleSignOnRequest::is_token_Valid() const{
    return m_token_isValid;
}

bool OAISingleSignOnRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cookie_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_accounts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISingleSignOnRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_provider_isValid && m_token_isValid && true;
}

} // namespace OpenAPI
