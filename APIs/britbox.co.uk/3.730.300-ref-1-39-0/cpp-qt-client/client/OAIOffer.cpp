/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOffer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOffer::OAIOffer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOffer::OAIOffer() {
    this->initializeModel();
}

OAIOffer::~OAIOffer() {}

void OAIOffer::initializeModel() {

    m_delivery_type_isSet = false;
    m_delivery_type_isValid = false;

    m_exclusion_rules_isSet = false;
    m_exclusion_rules_isValid = false;

    m_max_downloads_isSet = false;
    m_max_downloads_isValid = false;

    m_max_plays_isSet = false;
    m_max_plays_isValid = false;

    m_ownership_isSet = false;
    m_ownership_isValid = false;

    m_play_period_isSet = false;
    m_play_period_isValid = false;

    m_rental_period_isSet = false;
    m_rental_period_isValid = false;

    m_resolution_isSet = false;
    m_resolution_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;

    m_availability_isSet = false;
    m_availability_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_subscription_code_isSet = false;
    m_subscription_code_isValid = false;
}

void OAIOffer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOffer::fromJsonObject(QJsonObject json) {

    m_delivery_type_isValid = ::OpenAPI::fromJsonValue(m_delivery_type, json[QString("deliveryType")]);
    m_delivery_type_isSet = !json[QString("deliveryType")].isNull() && m_delivery_type_isValid;

    m_exclusion_rules_isValid = ::OpenAPI::fromJsonValue(m_exclusion_rules, json[QString("exclusionRules")]);
    m_exclusion_rules_isSet = !json[QString("exclusionRules")].isNull() && m_exclusion_rules_isValid;

    m_max_downloads_isValid = ::OpenAPI::fromJsonValue(m_max_downloads, json[QString("maxDownloads")]);
    m_max_downloads_isSet = !json[QString("maxDownloads")].isNull() && m_max_downloads_isValid;

    m_max_plays_isValid = ::OpenAPI::fromJsonValue(m_max_plays, json[QString("maxPlays")]);
    m_max_plays_isSet = !json[QString("maxPlays")].isNull() && m_max_plays_isValid;

    m_ownership_isValid = ::OpenAPI::fromJsonValue(m_ownership, json[QString("ownership")]);
    m_ownership_isSet = !json[QString("ownership")].isNull() && m_ownership_isValid;

    m_play_period_isValid = ::OpenAPI::fromJsonValue(m_play_period, json[QString("playPeriod")]);
    m_play_period_isSet = !json[QString("playPeriod")].isNull() && m_play_period_isValid;

    m_rental_period_isValid = ::OpenAPI::fromJsonValue(m_rental_period, json[QString("rentalPeriod")]);
    m_rental_period_isSet = !json[QString("rentalPeriod")].isNull() && m_rental_period_isValid;

    m_resolution_isValid = ::OpenAPI::fromJsonValue(m_resolution, json[QString("resolution")]);
    m_resolution_isSet = !json[QString("resolution")].isNull() && m_resolution_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;

    m_availability_isValid = ::OpenAPI::fromJsonValue(m_availability, json[QString("availability")]);
    m_availability_isSet = !json[QString("availability")].isNull() && m_availability_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("customFields")]);
    m_custom_fields_isSet = !json[QString("customFields")].isNull() && m_custom_fields_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_subscription_code_isValid = ::OpenAPI::fromJsonValue(m_subscription_code, json[QString("subscriptionCode")]);
    m_subscription_code_isSet = !json[QString("subscriptionCode")].isNull() && m_subscription_code_isValid;
}

QString OAIOffer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOffer::asJsonObject() const {
    QJsonObject obj;
    if (m_delivery_type_isSet) {
        obj.insert(QString("deliveryType"), ::OpenAPI::toJsonValue(m_delivery_type));
    }
    if (m_exclusion_rules.size() > 0) {
        obj.insert(QString("exclusionRules"), ::OpenAPI::toJsonValue(m_exclusion_rules));
    }
    if (m_max_downloads_isSet) {
        obj.insert(QString("maxDownloads"), ::OpenAPI::toJsonValue(m_max_downloads));
    }
    if (m_max_plays_isSet) {
        obj.insert(QString("maxPlays"), ::OpenAPI::toJsonValue(m_max_plays));
    }
    if (m_ownership_isSet) {
        obj.insert(QString("ownership"), ::OpenAPI::toJsonValue(m_ownership));
    }
    if (m_play_period_isSet) {
        obj.insert(QString("playPeriod"), ::OpenAPI::toJsonValue(m_play_period));
    }
    if (m_rental_period_isSet) {
        obj.insert(QString("rentalPeriod"), ::OpenAPI::toJsonValue(m_rental_period));
    }
    if (m_resolution_isSet) {
        obj.insert(QString("resolution"), ::OpenAPI::toJsonValue(m_resolution));
    }
    if (m_scopes.size() > 0) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    if (m_availability_isSet) {
        obj.insert(QString("availability"), ::OpenAPI::toJsonValue(m_availability));
    }
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("customFields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_subscription_code_isSet) {
        obj.insert(QString("subscriptionCode"), ::OpenAPI::toJsonValue(m_subscription_code));
    }
    return obj;
}

QString OAIOffer::getDeliveryType() const {
    return m_delivery_type;
}
void OAIOffer::setDeliveryType(const QString &delivery_type) {
    m_delivery_type = delivery_type;
    m_delivery_type_isSet = true;
}

bool OAIOffer::is_delivery_type_Set() const{
    return m_delivery_type_isSet;
}

bool OAIOffer::is_delivery_type_Valid() const{
    return m_delivery_type_isValid;
}

QList<OAIExclusionRule> OAIOffer::getExclusionRules() const {
    return m_exclusion_rules;
}
void OAIOffer::setExclusionRules(const QList<OAIExclusionRule> &exclusion_rules) {
    m_exclusion_rules = exclusion_rules;
    m_exclusion_rules_isSet = true;
}

bool OAIOffer::is_exclusion_rules_Set() const{
    return m_exclusion_rules_isSet;
}

bool OAIOffer::is_exclusion_rules_Valid() const{
    return m_exclusion_rules_isValid;
}

qint32 OAIOffer::getMaxDownloads() const {
    return m_max_downloads;
}
void OAIOffer::setMaxDownloads(const qint32 &max_downloads) {
    m_max_downloads = max_downloads;
    m_max_downloads_isSet = true;
}

bool OAIOffer::is_max_downloads_Set() const{
    return m_max_downloads_isSet;
}

bool OAIOffer::is_max_downloads_Valid() const{
    return m_max_downloads_isValid;
}

qint32 OAIOffer::getMaxPlays() const {
    return m_max_plays;
}
void OAIOffer::setMaxPlays(const qint32 &max_plays) {
    m_max_plays = max_plays;
    m_max_plays_isSet = true;
}

bool OAIOffer::is_max_plays_Set() const{
    return m_max_plays_isSet;
}

bool OAIOffer::is_max_plays_Valid() const{
    return m_max_plays_isValid;
}

QString OAIOffer::getOwnership() const {
    return m_ownership;
}
void OAIOffer::setOwnership(const QString &ownership) {
    m_ownership = ownership;
    m_ownership_isSet = true;
}

bool OAIOffer::is_ownership_Set() const{
    return m_ownership_isSet;
}

bool OAIOffer::is_ownership_Valid() const{
    return m_ownership_isValid;
}

qint32 OAIOffer::getPlayPeriod() const {
    return m_play_period;
}
void OAIOffer::setPlayPeriod(const qint32 &play_period) {
    m_play_period = play_period;
    m_play_period_isSet = true;
}

bool OAIOffer::is_play_period_Set() const{
    return m_play_period_isSet;
}

bool OAIOffer::is_play_period_Valid() const{
    return m_play_period_isValid;
}

qint32 OAIOffer::getRentalPeriod() const {
    return m_rental_period;
}
void OAIOffer::setRentalPeriod(const qint32 &rental_period) {
    m_rental_period = rental_period;
    m_rental_period_isSet = true;
}

bool OAIOffer::is_rental_period_Set() const{
    return m_rental_period_isSet;
}

bool OAIOffer::is_rental_period_Valid() const{
    return m_rental_period_isValid;
}

QString OAIOffer::getResolution() const {
    return m_resolution;
}
void OAIOffer::setResolution(const QString &resolution) {
    m_resolution = resolution;
    m_resolution_isSet = true;
}

bool OAIOffer::is_resolution_Set() const{
    return m_resolution_isSet;
}

bool OAIOffer::is_resolution_Valid() const{
    return m_resolution_isValid;
}

QList<QString> OAIOffer::getScopes() const {
    return m_scopes;
}
void OAIOffer::setScopes(const QList<QString> &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIOffer::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIOffer::is_scopes_Valid() const{
    return m_scopes_isValid;
}

QString OAIOffer::getAvailability() const {
    return m_availability;
}
void OAIOffer::setAvailability(const QString &availability) {
    m_availability = availability;
    m_availability_isSet = true;
}

bool OAIOffer::is_availability_Set() const{
    return m_availability_isSet;
}

bool OAIOffer::is_availability_Valid() const{
    return m_availability_isValid;
}

QMap<QString, QJsonValue> OAIOffer::getCustomFields() const {
    return m_custom_fields;
}
void OAIOffer::setCustomFields(const QMap<QString, QJsonValue> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIOffer::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIOffer::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QDateTime OAIOffer::getEndDate() const {
    return m_end_date;
}
void OAIOffer::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIOffer::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIOffer::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAIOffer::getId() const {
    return m_id;
}
void OAIOffer::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOffer::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOffer::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIOffer::getName() const {
    return m_name;
}
void OAIOffer::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOffer::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOffer::is_name_Valid() const{
    return m_name_isValid;
}

float OAIOffer::getPrice() const {
    return m_price;
}
void OAIOffer::setPrice(const float &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIOffer::is_price_Set() const{
    return m_price_isSet;
}

bool OAIOffer::is_price_Valid() const{
    return m_price_isValid;
}

QDateTime OAIOffer::getStartDate() const {
    return m_start_date;
}
void OAIOffer::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIOffer::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIOffer::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIOffer::getSubscriptionCode() const {
    return m_subscription_code;
}
void OAIOffer::setSubscriptionCode(const QString &subscription_code) {
    m_subscription_code = subscription_code;
    m_subscription_code_isSet = true;
}

bool OAIOffer::is_subscription_code_Set() const{
    return m_subscription_code_isSet;
}

bool OAIOffer::is_subscription_code_Valid() const{
    return m_subscription_code_isValid;
}

bool OAIOffer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delivery_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusion_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_downloads_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_plays_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ownership_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rental_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOffer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_delivery_type_isValid && m_ownership_isValid && m_resolution_isValid && m_scopes_isValid && m_availability_isValid && m_price_isValid && true;
}

} // namespace OpenAPI
