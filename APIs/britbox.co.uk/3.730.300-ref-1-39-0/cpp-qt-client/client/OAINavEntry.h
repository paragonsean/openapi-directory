/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINavEntry.h
 *
 * 
 */

#ifndef OAINavEntry_H
#define OAINavEntry_H

#include <QJsonObject>

#include "OAINavContent.h"
#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINavContent;

class OAINavEntry : public OAIObject {
public:
    OAINavEntry();
    OAINavEntry(QString json);
    ~OAINavEntry() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAINavEntry> getChildren() const;
    void setChildren(const QList<OAINavEntry> &children);
    bool is_children_Set() const;
    bool is_children_Valid() const;

    OAINavContent getContent() const;
    void setContent(const OAINavContent &content);
    bool is_content_Set() const;
    bool is_content_Valid() const;

    QMap<QString, QJsonValue> getCustomFields() const;
    void setCustomFields(const QMap<QString, QJsonValue> &custom_fields);
    bool is_custom_fields_Set() const;
    bool is_custom_fields_Valid() const;

    qint32 getDepth() const;
    void setDepth(const qint32 &depth);
    bool is_depth_Set() const;
    bool is_depth_Valid() const;

    bool isFeatured() const;
    void setFeatured(const bool &featured);
    bool is_featured_Set() const;
    bool is_featured_Valid() const;

    QString getIcon() const;
    void setIcon(const QString &icon);
    bool is_icon_Set() const;
    bool is_icon_Valid() const;

    QString getLabel() const;
    void setLabel(const QString &label);
    bool is_label_Set() const;
    bool is_label_Valid() const;

    QString getPath() const;
    void setPath(const QString &path);
    bool is_path_Set() const;
    bool is_path_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAINavEntry> m_children;
    bool m_children_isSet;
    bool m_children_isValid;

    OAINavContent m_content;
    bool m_content_isSet;
    bool m_content_isValid;

    QMap<QString, QJsonValue> m_custom_fields;
    bool m_custom_fields_isSet;
    bool m_custom_fields_isValid;

    qint32 m_depth;
    bool m_depth_isSet;
    bool m_depth_isValid;

    bool m_featured;
    bool m_featured_isSet;
    bool m_featured_isValid;

    QString m_icon;
    bool m_icon_isSet;
    bool m_icon_isValid;

    QString m_label;
    bool m_label_isSet;
    bool m_label_isValid;

    QString m_path;
    bool m_path_isSet;
    bool m_path_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINavEntry)

#endif // OAINavEntry_H
