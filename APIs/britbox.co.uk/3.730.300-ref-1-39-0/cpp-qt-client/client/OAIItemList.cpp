/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItemList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItemList::OAIItemList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItemList::OAIItemList() {
    this->initializeModel();
}

OAIItemList::~OAIItemList() {}

void OAIItemList::initializeModel() {

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_item_types_isSet = false;
    m_item_types_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_list_data_isSet = false;
    m_list_data_isValid = false;

    m_paging_isSet = false;
    m_paging_isValid = false;

    m_parameter_isSet = false;
    m_parameter_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_short_description_isSet = false;
    m_short_description_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_tagline_isSet = false;
    m_tagline_isValid = false;

    m_themes_isSet = false;
    m_themes_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIItemList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItemList::fromJsonObject(QJsonObject json) {

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("customFields")]);
    m_custom_fields_isSet = !json[QString("customFields")].isNull() && m_custom_fields_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_item_types_isValid = ::OpenAPI::fromJsonValue(m_item_types, json[QString("itemTypes")]);
    m_item_types_isSet = !json[QString("itemTypes")].isNull() && m_item_types_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_list_data_isValid = ::OpenAPI::fromJsonValue(m_list_data, json[QString("listData")]);
    m_list_data_isSet = !json[QString("listData")].isNull() && m_list_data_isValid;

    m_paging_isValid = ::OpenAPI::fromJsonValue(m_paging, json[QString("paging")]);
    m_paging_isSet = !json[QString("paging")].isNull() && m_paging_isValid;

    m_parameter_isValid = ::OpenAPI::fromJsonValue(m_parameter, json[QString("parameter")]);
    m_parameter_isSet = !json[QString("parameter")].isNull() && m_parameter_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_short_description_isValid = ::OpenAPI::fromJsonValue(m_short_description, json[QString("shortDescription")]);
    m_short_description_isSet = !json[QString("shortDescription")].isNull() && m_short_description_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_tagline_isValid = ::OpenAPI::fromJsonValue(m_tagline, json[QString("tagline")]);
    m_tagline_isSet = !json[QString("tagline")].isNull() && m_tagline_isValid;

    m_themes_isValid = ::OpenAPI::fromJsonValue(m_themes, json[QString("themes")]);
    m_themes_isSet = !json[QString("themes")].isNull() && m_themes_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIItemList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItemList::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("customFields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_item_types.size() > 0) {
        obj.insert(QString("itemTypes"), ::OpenAPI::toJsonValue(m_item_types));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_list_data.isSet()) {
        obj.insert(QString("listData"), ::OpenAPI::toJsonValue(m_list_data));
    }
    if (m_paging.isSet()) {
        obj.insert(QString("paging"), ::OpenAPI::toJsonValue(m_paging));
    }
    if (m_parameter_isSet) {
        obj.insert(QString("parameter"), ::OpenAPI::toJsonValue(m_parameter));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_short_description_isSet) {
        obj.insert(QString("shortDescription"), ::OpenAPI::toJsonValue(m_short_description));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_tagline_isSet) {
        obj.insert(QString("tagline"), ::OpenAPI::toJsonValue(m_tagline));
    }
    if (m_themes.size() > 0) {
        obj.insert(QString("themes"), ::OpenAPI::toJsonValue(m_themes));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIItemList::getCustomFields() const {
    return m_custom_fields;
}
void OAIItemList::setCustomFields(const QMap<QString, QJsonValue> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIItemList::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIItemList::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIItemList::getDescription() const {
    return m_description;
}
void OAIItemList::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIItemList::is_description_Set() const{
    return m_description_isSet;
}

bool OAIItemList::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIItemList::getId() const {
    return m_id;
}
void OAIItemList::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIItemList::is_id_Set() const{
    return m_id_isSet;
}

bool OAIItemList::is_id_Valid() const{
    return m_id_isValid;
}

QMap<QString, QString> OAIItemList::getImages() const {
    return m_images;
}
void OAIItemList::setImages(const QMap<QString, QString> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIItemList::is_images_Set() const{
    return m_images_isSet;
}

bool OAIItemList::is_images_Valid() const{
    return m_images_isValid;
}

QList<QString> OAIItemList::getItemTypes() const {
    return m_item_types;
}
void OAIItemList::setItemTypes(const QList<QString> &item_types) {
    m_item_types = item_types;
    m_item_types_isSet = true;
}

bool OAIItemList::is_item_types_Set() const{
    return m_item_types_isSet;
}

bool OAIItemList::is_item_types_Valid() const{
    return m_item_types_isValid;
}

QList<OAIItemSummary> OAIItemList::getItems() const {
    return m_items;
}
void OAIItemList::setItems(const QList<OAIItemSummary> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIItemList::is_items_Set() const{
    return m_items_isSet;
}

bool OAIItemList::is_items_Valid() const{
    return m_items_isValid;
}

OAIListData OAIItemList::getListData() const {
    return m_list_data;
}
void OAIItemList::setListData(const OAIListData &list_data) {
    m_list_data = list_data;
    m_list_data_isSet = true;
}

bool OAIItemList::is_list_data_Set() const{
    return m_list_data_isSet;
}

bool OAIItemList::is_list_data_Valid() const{
    return m_list_data_isValid;
}

OAIPagination OAIItemList::getPaging() const {
    return m_paging;
}
void OAIItemList::setPaging(const OAIPagination &paging) {
    m_paging = paging;
    m_paging_isSet = true;
}

bool OAIItemList::is_paging_Set() const{
    return m_paging_isSet;
}

bool OAIItemList::is_paging_Valid() const{
    return m_paging_isValid;
}

QString OAIItemList::getParameter() const {
    return m_parameter;
}
void OAIItemList::setParameter(const QString &parameter) {
    m_parameter = parameter;
    m_parameter_isSet = true;
}

bool OAIItemList::is_parameter_Set() const{
    return m_parameter_isSet;
}

bool OAIItemList::is_parameter_Valid() const{
    return m_parameter_isValid;
}

QString OAIItemList::getPath() const {
    return m_path;
}
void OAIItemList::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIItemList::is_path_Set() const{
    return m_path_isSet;
}

bool OAIItemList::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIItemList::getShortDescription() const {
    return m_short_description;
}
void OAIItemList::setShortDescription(const QString &short_description) {
    m_short_description = short_description;
    m_short_description_isSet = true;
}

bool OAIItemList::is_short_description_Set() const{
    return m_short_description_isSet;
}

bool OAIItemList::is_short_description_Valid() const{
    return m_short_description_isValid;
}

qint32 OAIItemList::getSize() const {
    return m_size;
}
void OAIItemList::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIItemList::is_size_Set() const{
    return m_size_isSet;
}

bool OAIItemList::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIItemList::getTagline() const {
    return m_tagline;
}
void OAIItemList::setTagline(const QString &tagline) {
    m_tagline = tagline;
    m_tagline_isSet = true;
}

bool OAIItemList::is_tagline_Set() const{
    return m_tagline_isSet;
}

bool OAIItemList::is_tagline_Valid() const{
    return m_tagline_isValid;
}

QList<OAITheme> OAIItemList::getThemes() const {
    return m_themes;
}
void OAIItemList::setThemes(const QList<OAITheme> &themes) {
    m_themes = themes;
    m_themes_isSet = true;
}

bool OAIItemList::is_themes_Set() const{
    return m_themes_isSet;
}

bool OAIItemList::is_themes_Valid() const{
    return m_themes_isValid;
}

QString OAIItemList::getTitle() const {
    return m_title;
}
void OAIItemList::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIItemList::is_title_Set() const{
    return m_title_isSet;
}

bool OAIItemList::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIItemList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_paging.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tagline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_themes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItemList::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_items_isValid && m_paging_isValid && m_path_isValid && m_size_isValid && true;
}

} // namespace OpenAPI
