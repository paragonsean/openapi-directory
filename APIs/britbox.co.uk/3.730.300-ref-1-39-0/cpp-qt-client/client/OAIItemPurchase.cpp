/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItemPurchase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItemPurchase::OAIItemPurchase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItemPurchase::OAIItemPurchase() {
    this->initializeModel();
}

OAIItemPurchase::~OAIItemPurchase() {}

void OAIItemPurchase::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_ownership_isSet = false;
    m_ownership_isValid = false;

    m_resolution_isSet = false;
    m_resolution_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIItemPurchase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItemPurchase::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ownership_isValid = ::OpenAPI::fromJsonValue(m_ownership, json[QString("ownership")]);
    m_ownership_isSet = !json[QString("ownership")].isNull() && m_ownership_isValid;

    m_resolution_isValid = ::OpenAPI::fromJsonValue(m_resolution, json[QString("resolution")]);
    m_resolution_isSet = !json[QString("resolution")].isNull() && m_resolution_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIItemPurchase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItemPurchase::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ownership_isSet) {
        obj.insert(QString("ownership"), ::OpenAPI::toJsonValue(m_ownership));
    }
    if (m_resolution_isSet) {
        obj.insert(QString("resolution"), ::OpenAPI::toJsonValue(m_resolution));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIItemPurchase::getId() const {
    return m_id;
}
void OAIItemPurchase::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIItemPurchase::is_id_Set() const{
    return m_id_isSet;
}

bool OAIItemPurchase::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIItemPurchase::getOwnership() const {
    return m_ownership;
}
void OAIItemPurchase::setOwnership(const QString &ownership) {
    m_ownership = ownership;
    m_ownership_isSet = true;
}

bool OAIItemPurchase::is_ownership_Set() const{
    return m_ownership_isSet;
}

bool OAIItemPurchase::is_ownership_Valid() const{
    return m_ownership_isValid;
}

QString OAIItemPurchase::getResolution() const {
    return m_resolution;
}
void OAIItemPurchase::setResolution(const QString &resolution) {
    m_resolution = resolution;
    m_resolution_isSet = true;
}

bool OAIItemPurchase::is_resolution_Set() const{
    return m_resolution_isSet;
}

bool OAIItemPurchase::is_resolution_Valid() const{
    return m_resolution_isValid;
}

QString OAIItemPurchase::getTitle() const {
    return m_title;
}
void OAIItemPurchase::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIItemPurchase::is_title_Set() const{
    return m_title_isSet;
}

bool OAIItemPurchase::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIItemPurchase::getType() const {
    return m_type;
}
void OAIItemPurchase::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIItemPurchase::is_type_Set() const{
    return m_type_isSet;
}

bool OAIItemPurchase::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIItemPurchase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ownership_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItemPurchase::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_ownership_isValid && m_resolution_isValid && m_title_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
