/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscription::OAISubscription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscription::OAISubscription() {
    this->initializeModel();
}

OAISubscription::~OAISubscription() {}

void OAISubscription::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_trial_period_isSet = false;
    m_is_trial_period_isValid = false;

    m_plan_id_isSet = false;
    m_plan_id_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAISubscription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscription::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_trial_period_isValid = ::OpenAPI::fromJsonValue(m_is_trial_period, json[QString("isTrialPeriod")]);
    m_is_trial_period_isSet = !json[QString("isTrialPeriod")].isNull() && m_is_trial_period_isValid;

    m_plan_id_isValid = ::OpenAPI::fromJsonValue(m_plan_id, json[QString("planId")]);
    m_plan_id_isSet = !json[QString("planId")].isNull() && m_plan_id_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAISubscription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscription::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_trial_period_isSet) {
        obj.insert(QString("isTrialPeriod"), ::OpenAPI::toJsonValue(m_is_trial_period));
    }
    if (m_plan_id_isSet) {
        obj.insert(QString("planId"), ::OpenAPI::toJsonValue(m_plan_id));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAISubscription::getCode() const {
    return m_code;
}
void OAISubscription::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAISubscription::is_code_Set() const{
    return m_code_isSet;
}

bool OAISubscription::is_code_Valid() const{
    return m_code_isValid;
}

QDateTime OAISubscription::getEndDate() const {
    return m_end_date;
}
void OAISubscription::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAISubscription::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAISubscription::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAISubscription::getId() const {
    return m_id;
}
void OAISubscription::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISubscription::is_id_Set() const{
    return m_id_isSet;
}

bool OAISubscription::is_id_Valid() const{
    return m_id_isValid;
}

bool OAISubscription::isIsTrialPeriod() const {
    return m_is_trial_period;
}
void OAISubscription::setIsTrialPeriod(const bool &is_trial_period) {
    m_is_trial_period = is_trial_period;
    m_is_trial_period_isSet = true;
}

bool OAISubscription::is_is_trial_period_Set() const{
    return m_is_trial_period_isSet;
}

bool OAISubscription::is_is_trial_period_Valid() const{
    return m_is_trial_period_isValid;
}

QString OAISubscription::getPlanId() const {
    return m_plan_id;
}
void OAISubscription::setPlanId(const QString &plan_id) {
    m_plan_id = plan_id;
    m_plan_id_isSet = true;
}

bool OAISubscription::is_plan_id_Set() const{
    return m_plan_id_isSet;
}

bool OAISubscription::is_plan_id_Valid() const{
    return m_plan_id_isValid;
}

QDateTime OAISubscription::getStartDate() const {
    return m_start_date;
}
void OAISubscription::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAISubscription::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAISubscription::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAISubscription::getStatus() const {
    return m_status;
}
void OAISubscription::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISubscription::is_status_Set() const{
    return m_status_isSet;
}

bool OAISubscription::is_status_Valid() const{
    return m_status_isValid;
}

bool OAISubscription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_trial_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_is_trial_period_isValid && m_plan_id_isValid && m_start_date_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
