/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAuthorizationApi_H
#define OAI_OAIAuthorizationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccessToken.h"
#include "OAIAccountTokenByCodeRequest.h"
#include "OAIAccountTokenRequest.h"
#include "OAIDeviceAuthorizationCode.h"
#include "OAIDeviceRegistrationRequest.h"
#include "OAIProfileTokenRequest.h"
#include "OAIServiceError.h"
#include "OAISingleSignOnRequest.h"
#include "OAITokenRefreshRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAuthorizationApi : public QObject {
    Q_OBJECT

public:
    OAIAuthorizationApi(const int timeOut = 0);
    ~OAIAuthorizationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_device_registration_request OAIDeviceRegistrationRequest [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void generateDeviceAuthorizationCode(const OAIDeviceRegistrationRequest &oai_device_registration_request, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_account_token_request OAIAccountTokenRequest [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getAccountToken(const OAIAccountTokenRequest &oai_account_token_request, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_account_token_by_code_request OAIAccountTokenByCodeRequest [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getAccountTokenByCode(const OAIAccountTokenByCodeRequest &oai_account_token_by_code_request, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_profile_token_request OAIProfileTokenRequest [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getProfileToken(const OAIProfileTokenRequest &oai_profile_token_request, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_token_refresh_request OAITokenRefreshRequest [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void refreshToken(const OAITokenRefreshRequest &oai_token_refresh_request, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void signOut(const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_single_sign_on_request OAISingleSignOnRequest [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void singleSignOn(const OAISingleSignOnRequest &oai_single_sign_on_request, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void generateDeviceAuthorizationCodeCallback(OAIHttpRequestWorker *worker);
    void getAccountTokenCallback(OAIHttpRequestWorker *worker);
    void getAccountTokenByCodeCallback(OAIHttpRequestWorker *worker);
    void getProfileTokenCallback(OAIHttpRequestWorker *worker);
    void refreshTokenCallback(OAIHttpRequestWorker *worker);
    void signOutCallback(OAIHttpRequestWorker *worker);
    void singleSignOnCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void generateDeviceAuthorizationCodeSignal(OAIDeviceAuthorizationCode summary);
    void getAccountTokenSignal(QList<OAIAccessToken> summary);
    void getAccountTokenByCodeSignal(QList<OAIAccessToken> summary);
    void getProfileTokenSignal(QList<OAIAccessToken> summary);
    void refreshTokenSignal(OAIAccessToken summary);
    void signOutSignal();
    void singleSignOnSignal(QList<OAIAccessToken> summary);


    void generateDeviceAuthorizationCodeSignalFull(OAIHttpRequestWorker *worker, OAIDeviceAuthorizationCode summary);
    void getAccountTokenSignalFull(OAIHttpRequestWorker *worker, QList<OAIAccessToken> summary);
    void getAccountTokenByCodeSignalFull(OAIHttpRequestWorker *worker, QList<OAIAccessToken> summary);
    void getProfileTokenSignalFull(OAIHttpRequestWorker *worker, QList<OAIAccessToken> summary);
    void refreshTokenSignalFull(OAIHttpRequestWorker *worker, OAIAccessToken summary);
    void signOutSignalFull(OAIHttpRequestWorker *worker);
    void singleSignOnSignalFull(OAIHttpRequestWorker *worker, QList<OAIAccessToken> summary);

    Q_DECL_DEPRECATED_X("Use generateDeviceAuthorizationCodeSignalError() instead")
    void generateDeviceAuthorizationCodeSignalE(OAIDeviceAuthorizationCode summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateDeviceAuthorizationCodeSignalError(OAIDeviceAuthorizationCode summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountTokenSignalError() instead")
    void getAccountTokenSignalE(QList<OAIAccessToken> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountTokenSignalError(QList<OAIAccessToken> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountTokenByCodeSignalError() instead")
    void getAccountTokenByCodeSignalE(QList<OAIAccessToken> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountTokenByCodeSignalError(QList<OAIAccessToken> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProfileTokenSignalError() instead")
    void getProfileTokenSignalE(QList<OAIAccessToken> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProfileTokenSignalError(QList<OAIAccessToken> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refreshTokenSignalError() instead")
    void refreshTokenSignalE(OAIAccessToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void refreshTokenSignalError(OAIAccessToken summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signOutSignalError() instead")
    void signOutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void signOutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use singleSignOnSignalError() instead")
    void singleSignOnSignalE(QList<OAIAccessToken> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void singleSignOnSignalError(QList<OAIAccessToken> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use generateDeviceAuthorizationCodeSignalErrorFull() instead")
    void generateDeviceAuthorizationCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateDeviceAuthorizationCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountTokenSignalErrorFull() instead")
    void getAccountTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountTokenByCodeSignalErrorFull() instead")
    void getAccountTokenByCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountTokenByCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProfileTokenSignalErrorFull() instead")
    void getProfileTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProfileTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refreshTokenSignalErrorFull() instead")
    void refreshTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void refreshTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signOutSignalErrorFull() instead")
    void signOutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void signOutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use singleSignOnSignalErrorFull() instead")
    void singleSignOnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void singleSignOnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
