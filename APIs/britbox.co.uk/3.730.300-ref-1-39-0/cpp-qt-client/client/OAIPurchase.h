/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPurchase.h
 *
 * 
 */

#ifndef OAIPurchase_H
#define OAIPurchase_H

#include <QJsonObject>

#include "OAIItemPurchase.h"
#include "OAIPlanPurchase.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIItemPurchase;
class OAIPlanPurchase;

class OAIPurchase : public OAIObject {
public:
    OAIPurchase();
    OAIPurchase(QString json);
    ~OAIPurchase() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getAuthorizationDate() const;
    void setAuthorizationDate(const QDateTime &authorization_date);
    bool is_authorization_date_Set() const;
    bool is_authorization_date_Valid() const;

    QDateTime getCreationDate() const;
    void setCreationDate(const QDateTime &creation_date);
    bool is_creation_date_Set() const;
    bool is_creation_date_Valid() const;

    QString getCurrency() const;
    void setCurrency(const QString &currency);
    bool is_currency_Set() const;
    bool is_currency_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAIItemPurchase getItem() const;
    void setItem(const OAIItemPurchase &item);
    bool is_item_Set() const;
    bool is_item_Valid() const;

    QString getPaymentMethodId() const;
    void setPaymentMethodId(const QString &payment_method_id);
    bool is_payment_method_id_Set() const;
    bool is_payment_method_id_Valid() const;

    OAIPlanPurchase getPlan() const;
    void setPlan(const OAIPlanPurchase &plan);
    bool is_plan_Set() const;
    bool is_plan_Valid() const;

    float getTotal() const;
    void setTotal(const float &total);
    bool is_total_Set() const;
    bool is_total_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_authorization_date;
    bool m_authorization_date_isSet;
    bool m_authorization_date_isValid;

    QDateTime m_creation_date;
    bool m_creation_date_isSet;
    bool m_creation_date_isValid;

    QString m_currency;
    bool m_currency_isSet;
    bool m_currency_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAIItemPurchase m_item;
    bool m_item_isSet;
    bool m_item_isValid;

    QString m_payment_method_id;
    bool m_payment_method_id_isSet;
    bool m_payment_method_id_isValid;

    OAIPlanPurchase m_plan;
    bool m_plan_isSet;
    bool m_plan_isValid;

    float m_total;
    bool m_total_isSet;
    bool m_total_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPurchase)

#endif // OAIPurchase_H
