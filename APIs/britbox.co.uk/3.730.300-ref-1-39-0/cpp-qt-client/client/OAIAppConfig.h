/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAppConfig.h
 *
 * 
 */

#ifndef OAIAppConfig_H
#define OAIAppConfig_H

#include <QJsonObject>

#include "OAIAppConfigDisplay.h"
#include "OAIAppConfigGeneral.h"
#include "OAIAppConfigI18n.h"
#include "OAIAppConfigLinear.h"
#include "OAIAppConfigPlayback.h"
#include "OAIAppConfigSubscription.h"
#include "OAIClassification.h"
#include "OAINavigation.h"
#include "OAIPageSummary.h"
#include <QList>
#include <QMap>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIClassification;
class OAIAppConfigDisplay;
class OAIAppConfigGeneral;
class OAIAppConfigI18n;
class OAIAppConfigLinear;
class OAINavigation;
class OAIAppConfigPlayback;
class OAIPageSummary;
class OAIAppConfigSubscription;

class OAIAppConfig : public OAIObject {
public:
    OAIAppConfig();
    OAIAppConfig(QString json);
    ~OAIAppConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, OAIClassification> getClassification() const;
    void setClassification(const QMap<QString, OAIClassification> &classification);
    bool is_classification_Set() const;
    bool is_classification_Valid() const;

    OAIAppConfigDisplay getDisplay() const;
    void setDisplay(const OAIAppConfigDisplay &display);
    bool is_display_Set() const;
    bool is_display_Valid() const;

    OAIAppConfigGeneral getGeneral() const;
    void setGeneral(const OAIAppConfigGeneral &general);
    bool is_general_Set() const;
    bool is_general_Valid() const;

    OAIAppConfigI18n getI18n() const;
    void setI18n(const OAIAppConfigI18n &i18n);
    bool is_i18n_Set() const;
    bool is_i18n_Valid() const;

    OAIAppConfigLinear getLinear() const;
    void setLinear(const OAIAppConfigLinear &linear);
    bool is_linear_Set() const;
    bool is_linear_Valid() const;

    OAINavigation getNavigation() const;
    void setNavigation(const OAINavigation &navigation);
    bool is_navigation_Set() const;
    bool is_navigation_Valid() const;

    OAIAppConfigPlayback getPlayback() const;
    void setPlayback(const OAIAppConfigPlayback &playback);
    bool is_playback_Set() const;
    bool is_playback_Valid() const;

    QList<OAIPageSummary> getSitemap() const;
    void setSitemap(const QList<OAIPageSummary> &sitemap);
    bool is_sitemap_Set() const;
    bool is_sitemap_Valid() const;

    OAIAppConfigSubscription getSubscription() const;
    void setSubscription(const OAIAppConfigSubscription &subscription);
    bool is_subscription_Set() const;
    bool is_subscription_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, OAIClassification> m_classification;
    bool m_classification_isSet;
    bool m_classification_isValid;

    OAIAppConfigDisplay m_display;
    bool m_display_isSet;
    bool m_display_isValid;

    OAIAppConfigGeneral m_general;
    bool m_general_isSet;
    bool m_general_isValid;

    OAIAppConfigI18n m_i18n;
    bool m_i18n_isSet;
    bool m_i18n_isValid;

    OAIAppConfigLinear m_linear;
    bool m_linear_isSet;
    bool m_linear_isValid;

    OAINavigation m_navigation;
    bool m_navigation_isSet;
    bool m_navigation_isValid;

    OAIAppConfigPlayback m_playback;
    bool m_playback_isSet;
    bool m_playback_isValid;

    QList<OAIPageSummary> m_sitemap;
    bool m_sitemap_isSet;
    bool m_sitemap_isValid;

    OAIAppConfigSubscription m_subscription;
    bool m_subscription_isSet;
    bool m_subscription_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAppConfig)

#endif // OAIAppConfig_H
