/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEeOffersRequest.h
 *
 * 
 */

#ifndef OAIEeOffersRequest_H
#define OAIEeOffersRequest_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEeOffersRequest : public OAIObject {
public:
    OAIEeOffersRequest();
    OAIEeOffersRequest(QString json);
    ~OAIEeOffersRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccessToken() const;
    void setAccessToken(const QString &access_token);
    bool is_access_token_Set() const;
    bool is_access_token_Valid() const;

    QString getMsisdn() const;
    void setMsisdn(const QString &msisdn);
    bool is_msisdn_Set() const;
    bool is_msisdn_Valid() const;

    QString getTrackingHeader() const;
    void setTrackingHeader(const QString &tracking_header);
    bool is_tracking_header_Set() const;
    bool is_tracking_header_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_access_token;
    bool m_access_token_isSet;
    bool m_access_token_isValid;

    QString m_msisdn;
    bool m_msisdn_isSet;
    bool m_msisdn_isValid;

    QString m_tracking_header;
    bool m_tracking_header_isSet;
    bool m_tracking_header_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEeOffersRequest)

#endif // OAIEeOffersRequest_H
