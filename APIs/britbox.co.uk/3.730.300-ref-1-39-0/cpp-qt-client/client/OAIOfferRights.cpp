/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOfferRights.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOfferRights::OAIOfferRights(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOfferRights::OAIOfferRights() {
    this->initializeModel();
}

OAIOfferRights::~OAIOfferRights() {}

void OAIOfferRights::initializeModel() {

    m_delivery_type_isSet = false;
    m_delivery_type_isValid = false;

    m_exclusion_rules_isSet = false;
    m_exclusion_rules_isValid = false;

    m_max_downloads_isSet = false;
    m_max_downloads_isValid = false;

    m_max_plays_isSet = false;
    m_max_plays_isValid = false;

    m_ownership_isSet = false;
    m_ownership_isValid = false;

    m_play_period_isSet = false;
    m_play_period_isValid = false;

    m_rental_period_isSet = false;
    m_rental_period_isValid = false;

    m_resolution_isSet = false;
    m_resolution_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;
}

void OAIOfferRights::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOfferRights::fromJsonObject(QJsonObject json) {

    m_delivery_type_isValid = ::OpenAPI::fromJsonValue(m_delivery_type, json[QString("deliveryType")]);
    m_delivery_type_isSet = !json[QString("deliveryType")].isNull() && m_delivery_type_isValid;

    m_exclusion_rules_isValid = ::OpenAPI::fromJsonValue(m_exclusion_rules, json[QString("exclusionRules")]);
    m_exclusion_rules_isSet = !json[QString("exclusionRules")].isNull() && m_exclusion_rules_isValid;

    m_max_downloads_isValid = ::OpenAPI::fromJsonValue(m_max_downloads, json[QString("maxDownloads")]);
    m_max_downloads_isSet = !json[QString("maxDownloads")].isNull() && m_max_downloads_isValid;

    m_max_plays_isValid = ::OpenAPI::fromJsonValue(m_max_plays, json[QString("maxPlays")]);
    m_max_plays_isSet = !json[QString("maxPlays")].isNull() && m_max_plays_isValid;

    m_ownership_isValid = ::OpenAPI::fromJsonValue(m_ownership, json[QString("ownership")]);
    m_ownership_isSet = !json[QString("ownership")].isNull() && m_ownership_isValid;

    m_play_period_isValid = ::OpenAPI::fromJsonValue(m_play_period, json[QString("playPeriod")]);
    m_play_period_isSet = !json[QString("playPeriod")].isNull() && m_play_period_isValid;

    m_rental_period_isValid = ::OpenAPI::fromJsonValue(m_rental_period, json[QString("rentalPeriod")]);
    m_rental_period_isSet = !json[QString("rentalPeriod")].isNull() && m_rental_period_isValid;

    m_resolution_isValid = ::OpenAPI::fromJsonValue(m_resolution, json[QString("resolution")]);
    m_resolution_isSet = !json[QString("resolution")].isNull() && m_resolution_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;
}

QString OAIOfferRights::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOfferRights::asJsonObject() const {
    QJsonObject obj;
    if (m_delivery_type_isSet) {
        obj.insert(QString("deliveryType"), ::OpenAPI::toJsonValue(m_delivery_type));
    }
    if (m_exclusion_rules.size() > 0) {
        obj.insert(QString("exclusionRules"), ::OpenAPI::toJsonValue(m_exclusion_rules));
    }
    if (m_max_downloads_isSet) {
        obj.insert(QString("maxDownloads"), ::OpenAPI::toJsonValue(m_max_downloads));
    }
    if (m_max_plays_isSet) {
        obj.insert(QString("maxPlays"), ::OpenAPI::toJsonValue(m_max_plays));
    }
    if (m_ownership_isSet) {
        obj.insert(QString("ownership"), ::OpenAPI::toJsonValue(m_ownership));
    }
    if (m_play_period_isSet) {
        obj.insert(QString("playPeriod"), ::OpenAPI::toJsonValue(m_play_period));
    }
    if (m_rental_period_isSet) {
        obj.insert(QString("rentalPeriod"), ::OpenAPI::toJsonValue(m_rental_period));
    }
    if (m_resolution_isSet) {
        obj.insert(QString("resolution"), ::OpenAPI::toJsonValue(m_resolution));
    }
    if (m_scopes.size() > 0) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    return obj;
}

QString OAIOfferRights::getDeliveryType() const {
    return m_delivery_type;
}
void OAIOfferRights::setDeliveryType(const QString &delivery_type) {
    m_delivery_type = delivery_type;
    m_delivery_type_isSet = true;
}

bool OAIOfferRights::is_delivery_type_Set() const{
    return m_delivery_type_isSet;
}

bool OAIOfferRights::is_delivery_type_Valid() const{
    return m_delivery_type_isValid;
}

QList<OAIExclusionRule> OAIOfferRights::getExclusionRules() const {
    return m_exclusion_rules;
}
void OAIOfferRights::setExclusionRules(const QList<OAIExclusionRule> &exclusion_rules) {
    m_exclusion_rules = exclusion_rules;
    m_exclusion_rules_isSet = true;
}

bool OAIOfferRights::is_exclusion_rules_Set() const{
    return m_exclusion_rules_isSet;
}

bool OAIOfferRights::is_exclusion_rules_Valid() const{
    return m_exclusion_rules_isValid;
}

qint32 OAIOfferRights::getMaxDownloads() const {
    return m_max_downloads;
}
void OAIOfferRights::setMaxDownloads(const qint32 &max_downloads) {
    m_max_downloads = max_downloads;
    m_max_downloads_isSet = true;
}

bool OAIOfferRights::is_max_downloads_Set() const{
    return m_max_downloads_isSet;
}

bool OAIOfferRights::is_max_downloads_Valid() const{
    return m_max_downloads_isValid;
}

qint32 OAIOfferRights::getMaxPlays() const {
    return m_max_plays;
}
void OAIOfferRights::setMaxPlays(const qint32 &max_plays) {
    m_max_plays = max_plays;
    m_max_plays_isSet = true;
}

bool OAIOfferRights::is_max_plays_Set() const{
    return m_max_plays_isSet;
}

bool OAIOfferRights::is_max_plays_Valid() const{
    return m_max_plays_isValid;
}

QString OAIOfferRights::getOwnership() const {
    return m_ownership;
}
void OAIOfferRights::setOwnership(const QString &ownership) {
    m_ownership = ownership;
    m_ownership_isSet = true;
}

bool OAIOfferRights::is_ownership_Set() const{
    return m_ownership_isSet;
}

bool OAIOfferRights::is_ownership_Valid() const{
    return m_ownership_isValid;
}

qint32 OAIOfferRights::getPlayPeriod() const {
    return m_play_period;
}
void OAIOfferRights::setPlayPeriod(const qint32 &play_period) {
    m_play_period = play_period;
    m_play_period_isSet = true;
}

bool OAIOfferRights::is_play_period_Set() const{
    return m_play_period_isSet;
}

bool OAIOfferRights::is_play_period_Valid() const{
    return m_play_period_isValid;
}

qint32 OAIOfferRights::getRentalPeriod() const {
    return m_rental_period;
}
void OAIOfferRights::setRentalPeriod(const qint32 &rental_period) {
    m_rental_period = rental_period;
    m_rental_period_isSet = true;
}

bool OAIOfferRights::is_rental_period_Set() const{
    return m_rental_period_isSet;
}

bool OAIOfferRights::is_rental_period_Valid() const{
    return m_rental_period_isValid;
}

QString OAIOfferRights::getResolution() const {
    return m_resolution;
}
void OAIOfferRights::setResolution(const QString &resolution) {
    m_resolution = resolution;
    m_resolution_isSet = true;
}

bool OAIOfferRights::is_resolution_Set() const{
    return m_resolution_isSet;
}

bool OAIOfferRights::is_resolution_Valid() const{
    return m_resolution_isValid;
}

QList<QString> OAIOfferRights::getScopes() const {
    return m_scopes;
}
void OAIOfferRights::setScopes(const QList<QString> &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIOfferRights::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIOfferRights::is_scopes_Valid() const{
    return m_scopes_isValid;
}

bool OAIOfferRights::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delivery_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusion_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_downloads_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_plays_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ownership_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rental_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOfferRights::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_delivery_type_isValid && m_ownership_isValid && m_resolution_isValid && m_scopes_isValid && true;
}

} // namespace OpenAPI
