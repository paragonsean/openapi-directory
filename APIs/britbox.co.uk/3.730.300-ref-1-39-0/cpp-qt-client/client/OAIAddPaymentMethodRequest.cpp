/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddPaymentMethodRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddPaymentMethodRequest::OAIAddPaymentMethodRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddPaymentMethodRequest::OAIAddPaymentMethodRequest() {
    this->initializeModel();
}

OAIAddPaymentMethodRequest::~OAIAddPaymentMethodRequest() {}

void OAIAddPaymentMethodRequest::initializeModel() {

    m_make_default_isSet = false;
    m_make_default_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAddPaymentMethodRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddPaymentMethodRequest::fromJsonObject(QJsonObject json) {

    m_make_default_isValid = ::OpenAPI::fromJsonValue(m_make_default, json[QString("makeDefault")]);
    m_make_default_isSet = !json[QString("makeDefault")].isNull() && m_make_default_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAddPaymentMethodRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddPaymentMethodRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_make_default_isSet) {
        obj.insert(QString("makeDefault"), ::OpenAPI::toJsonValue(m_make_default));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAIAddPaymentMethodRequest::isMakeDefault() const {
    return m_make_default;
}
void OAIAddPaymentMethodRequest::setMakeDefault(const bool &make_default) {
    m_make_default = make_default;
    m_make_default_isSet = true;
}

bool OAIAddPaymentMethodRequest::is_make_default_Set() const{
    return m_make_default_isSet;
}

bool OAIAddPaymentMethodRequest::is_make_default_Valid() const{
    return m_make_default_isValid;
}

QString OAIAddPaymentMethodRequest::getToken() const {
    return m_token;
}
void OAIAddPaymentMethodRequest::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIAddPaymentMethodRequest::is_token_Set() const{
    return m_token_isSet;
}

bool OAIAddPaymentMethodRequest::is_token_Valid() const{
    return m_token_isValid;
}

QString OAIAddPaymentMethodRequest::getType() const {
    return m_type;
}
void OAIAddPaymentMethodRequest::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAddPaymentMethodRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAddPaymentMethodRequest::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAddPaymentMethodRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_make_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddPaymentMethodRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_token_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
