/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItemClipFile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItemClipFile::OAIItemClipFile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItemClipFile::OAIItemClipFile() {
    this->initializeModel();
}

OAIItemClipFile::~OAIItemClipFile() {}

void OAIItemClipFile::initializeModel() {

    m_channels_isSet = false;
    m_channels_isValid = false;

    m_delivery_type_isSet = false;
    m_delivery_type_isValid = false;

    m_drm_isSet = false;
    m_drm_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_resolution_isSet = false;
    m_resolution_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIItemClipFile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItemClipFile::fromJsonObject(QJsonObject json) {

    m_channels_isValid = ::OpenAPI::fromJsonValue(m_channels, json[QString("channels")]);
    m_channels_isSet = !json[QString("channels")].isNull() && m_channels_isValid;

    m_delivery_type_isValid = ::OpenAPI::fromJsonValue(m_delivery_type, json[QString("deliveryType")]);
    m_delivery_type_isSet = !json[QString("deliveryType")].isNull() && m_delivery_type_isValid;

    m_drm_isValid = ::OpenAPI::fromJsonValue(m_drm, json[QString("drm")]);
    m_drm_isSet = !json[QString("drm")].isNull() && m_drm_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_resolution_isValid = ::OpenAPI::fromJsonValue(m_resolution, json[QString("resolution")]);
    m_resolution_isSet = !json[QString("resolution")].isNull() && m_resolution_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIItemClipFile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItemClipFile::asJsonObject() const {
    QJsonObject obj;
    if (m_channels_isSet) {
        obj.insert(QString("channels"), ::OpenAPI::toJsonValue(m_channels));
    }
    if (m_delivery_type_isSet) {
        obj.insert(QString("deliveryType"), ::OpenAPI::toJsonValue(m_delivery_type));
    }
    if (m_drm_isSet) {
        obj.insert(QString("drm"), ::OpenAPI::toJsonValue(m_drm));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resolution_isSet) {
        obj.insert(QString("resolution"), ::OpenAPI::toJsonValue(m_resolution));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

qint32 OAIItemClipFile::getChannels() const {
    return m_channels;
}
void OAIItemClipFile::setChannels(const qint32 &channels) {
    m_channels = channels;
    m_channels_isSet = true;
}

bool OAIItemClipFile::is_channels_Set() const{
    return m_channels_isSet;
}

bool OAIItemClipFile::is_channels_Valid() const{
    return m_channels_isValid;
}

QString OAIItemClipFile::getDeliveryType() const {
    return m_delivery_type;
}
void OAIItemClipFile::setDeliveryType(const QString &delivery_type) {
    m_delivery_type = delivery_type;
    m_delivery_type_isSet = true;
}

bool OAIItemClipFile::is_delivery_type_Set() const{
    return m_delivery_type_isSet;
}

bool OAIItemClipFile::is_delivery_type_Valid() const{
    return m_delivery_type_isValid;
}

QString OAIItemClipFile::getDrm() const {
    return m_drm;
}
void OAIItemClipFile::setDrm(const QString &drm) {
    m_drm = drm;
    m_drm_isSet = true;
}

bool OAIItemClipFile::is_drm_Set() const{
    return m_drm_isSet;
}

bool OAIItemClipFile::is_drm_Valid() const{
    return m_drm_isValid;
}

QString OAIItemClipFile::getFormat() const {
    return m_format;
}
void OAIItemClipFile::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIItemClipFile::is_format_Set() const{
    return m_format_isSet;
}

bool OAIItemClipFile::is_format_Valid() const{
    return m_format_isValid;
}

qint32 OAIItemClipFile::getHeight() const {
    return m_height;
}
void OAIItemClipFile::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIItemClipFile::is_height_Set() const{
    return m_height_isSet;
}

bool OAIItemClipFile::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIItemClipFile::getLanguage() const {
    return m_language;
}
void OAIItemClipFile::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIItemClipFile::is_language_Set() const{
    return m_language_isSet;
}

bool OAIItemClipFile::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIItemClipFile::getName() const {
    return m_name;
}
void OAIItemClipFile::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIItemClipFile::is_name_Set() const{
    return m_name_isSet;
}

bool OAIItemClipFile::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIItemClipFile::getResolution() const {
    return m_resolution;
}
void OAIItemClipFile::setResolution(const QString &resolution) {
    m_resolution = resolution;
    m_resolution_isSet = true;
}

bool OAIItemClipFile::is_resolution_Set() const{
    return m_resolution_isSet;
}

bool OAIItemClipFile::is_resolution_Valid() const{
    return m_resolution_isValid;
}

QString OAIItemClipFile::getUrl() const {
    return m_url;
}
void OAIItemClipFile::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIItemClipFile::is_url_Set() const{
    return m_url_isSet;
}

bool OAIItemClipFile::is_url_Valid() const{
    return m_url_isValid;
}

qint32 OAIItemClipFile::getWidth() const {
    return m_width;
}
void OAIItemClipFile::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIItemClipFile::is_width_Set() const{
    return m_width_isSet;
}

bool OAIItemClipFile::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIItemClipFile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItemClipFile::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_delivery_type_isValid && m_drm_isValid && m_format_isValid && m_height_isValid && m_language_isValid && m_name_isValid && m_resolution_isValid && m_url_isValid && m_width_isValid && true;
}

} // namespace OpenAPI
