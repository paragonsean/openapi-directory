/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItvUpdateProfileRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItvUpdateProfileRequest::OAIItvUpdateProfileRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItvUpdateProfileRequest::OAIItvUpdateProfileRequest() {
    this->initializeModel();
}

OAIItvUpdateProfileRequest::~OAIItvUpdateProfileRequest() {}

void OAIItvUpdateProfileRequest::initializeModel() {

    m_date_of_birth_isSet = false;
    m_date_of_birth_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_postcode_isSet = false;
    m_postcode_isValid = false;

    m_profile_token_isSet = false;
    m_profile_token_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIItvUpdateProfileRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItvUpdateProfileRequest::fromJsonObject(QJsonObject json) {

    m_date_of_birth_isValid = ::OpenAPI::fromJsonValue(m_date_of_birth, json[QString("dateOfBirth")]);
    m_date_of_birth_isSet = !json[QString("dateOfBirth")].isNull() && m_date_of_birth_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_postcode_isValid = ::OpenAPI::fromJsonValue(m_postcode, json[QString("postcode")]);
    m_postcode_isSet = !json[QString("postcode")].isNull() && m_postcode_isValid;

    m_profile_token_isValid = ::OpenAPI::fromJsonValue(m_profile_token, json[QString("profileToken")]);
    m_profile_token_isSet = !json[QString("profileToken")].isNull() && m_profile_token_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIItvUpdateProfileRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItvUpdateProfileRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_date_of_birth_isSet) {
        obj.insert(QString("dateOfBirth"), ::OpenAPI::toJsonValue(m_date_of_birth));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_postcode_isSet) {
        obj.insert(QString("postcode"), ::OpenAPI::toJsonValue(m_postcode));
    }
    if (m_profile_token_isSet) {
        obj.insert(QString("profileToken"), ::OpenAPI::toJsonValue(m_profile_token));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIItvUpdateProfileRequest::getDateOfBirth() const {
    return m_date_of_birth;
}
void OAIItvUpdateProfileRequest::setDateOfBirth(const QString &date_of_birth) {
    m_date_of_birth = date_of_birth;
    m_date_of_birth_isSet = true;
}

bool OAIItvUpdateProfileRequest::is_date_of_birth_Set() const{
    return m_date_of_birth_isSet;
}

bool OAIItvUpdateProfileRequest::is_date_of_birth_Valid() const{
    return m_date_of_birth_isValid;
}

QString OAIItvUpdateProfileRequest::getEmail() const {
    return m_email;
}
void OAIItvUpdateProfileRequest::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIItvUpdateProfileRequest::is_email_Set() const{
    return m_email_isSet;
}

bool OAIItvUpdateProfileRequest::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIItvUpdateProfileRequest::getFirstName() const {
    return m_first_name;
}
void OAIItvUpdateProfileRequest::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIItvUpdateProfileRequest::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIItvUpdateProfileRequest::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIItvUpdateProfileRequest::getLastName() const {
    return m_last_name;
}
void OAIItvUpdateProfileRequest::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIItvUpdateProfileRequest::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIItvUpdateProfileRequest::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIItvUpdateProfileRequest::getPostcode() const {
    return m_postcode;
}
void OAIItvUpdateProfileRequest::setPostcode(const QString &postcode) {
    m_postcode = postcode;
    m_postcode_isSet = true;
}

bool OAIItvUpdateProfileRequest::is_postcode_Set() const{
    return m_postcode_isSet;
}

bool OAIItvUpdateProfileRequest::is_postcode_Valid() const{
    return m_postcode_isValid;
}

QString OAIItvUpdateProfileRequest::getProfileToken() const {
    return m_profile_token;
}
void OAIItvUpdateProfileRequest::setProfileToken(const QString &profile_token) {
    m_profile_token = profile_token;
    m_profile_token_isSet = true;
}

bool OAIItvUpdateProfileRequest::is_profile_token_Set() const{
    return m_profile_token_isSet;
}

bool OAIItvUpdateProfileRequest::is_profile_token_Valid() const{
    return m_profile_token_isValid;
}

QString OAIItvUpdateProfileRequest::getTitle() const {
    return m_title;
}
void OAIItvUpdateProfileRequest::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIItvUpdateProfileRequest::is_title_Set() const{
    return m_title_isSet;
}

bool OAIItvUpdateProfileRequest::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIItvUpdateProfileRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_of_birth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItvUpdateProfileRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_profile_token_isValid && true;
}

} // namespace OpenAPI
