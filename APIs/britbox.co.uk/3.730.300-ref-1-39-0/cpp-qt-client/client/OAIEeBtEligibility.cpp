/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEeBtEligibility.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEeBtEligibility::OAIEeBtEligibility(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEeBtEligibility::OAIEeBtEligibility() {
    this->initializeModel();
}

OAIEeBtEligibility::~OAIEeBtEligibility() {}

void OAIEeBtEligibility::initializeModel() {

    m_eligible_isSet = false;
    m_eligible_isValid = false;

    m_plan_isSet = false;
    m_plan_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAIEeBtEligibility::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEeBtEligibility::fromJsonObject(QJsonObject json) {

    m_eligible_isValid = ::OpenAPI::fromJsonValue(m_eligible, json[QString("eligible")]);
    m_eligible_isSet = !json[QString("eligible")].isNull() && m_eligible_isValid;

    m_plan_isValid = ::OpenAPI::fromJsonValue(m_plan, json[QString("plan")]);
    m_plan_isSet = !json[QString("plan")].isNull() && m_plan_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAIEeBtEligibility::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEeBtEligibility::asJsonObject() const {
    QJsonObject obj;
    if (m_eligible_isSet) {
        obj.insert(QString("eligible"), ::OpenAPI::toJsonValue(m_eligible));
    }
    if (m_plan_isSet) {
        obj.insert(QString("plan"), ::OpenAPI::toJsonValue(m_plan));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

bool OAIEeBtEligibility::isEligible() const {
    return m_eligible;
}
void OAIEeBtEligibility::setEligible(const bool &eligible) {
    m_eligible = eligible;
    m_eligible_isSet = true;
}

bool OAIEeBtEligibility::is_eligible_Set() const{
    return m_eligible_isSet;
}

bool OAIEeBtEligibility::is_eligible_Valid() const{
    return m_eligible_isValid;
}

QString OAIEeBtEligibility::getPlan() const {
    return m_plan;
}
void OAIEeBtEligibility::setPlan(const QString &plan) {
    m_plan = plan;
    m_plan_isSet = true;
}

bool OAIEeBtEligibility::is_plan_Set() const{
    return m_plan_isSet;
}

bool OAIEeBtEligibility::is_plan_Valid() const{
    return m_plan_isValid;
}

QString OAIEeBtEligibility::getSource() const {
    return m_source;
}
void OAIEeBtEligibility::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIEeBtEligibility::is_source_Set() const{
    return m_source_isSet;
}

bool OAIEeBtEligibility::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIEeBtEligibility::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_eligible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEeBtEligibility::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_eligible_isValid && true;
}

} // namespace OpenAPI
