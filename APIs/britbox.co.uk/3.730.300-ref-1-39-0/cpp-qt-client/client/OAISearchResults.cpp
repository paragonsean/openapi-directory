/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchResults.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchResults::OAISearchResults(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchResults::OAISearchResults() {
    this->initializeModel();
}

OAISearchResults::~OAISearchResults() {}

void OAISearchResults::initializeModel() {

    m_items_isSet = false;
    m_items_isValid = false;

    m_movies_isSet = false;
    m_movies_isValid = false;

    m_other_isSet = false;
    m_other_isValid = false;

    m_people_isSet = false;
    m_people_isValid = false;

    m_term_isSet = false;
    m_term_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_tv_isSet = false;
    m_tv_isValid = false;
}

void OAISearchResults::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchResults::fromJsonObject(QJsonObject json) {

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_movies_isValid = ::OpenAPI::fromJsonValue(m_movies, json[QString("movies")]);
    m_movies_isSet = !json[QString("movies")].isNull() && m_movies_isValid;

    m_other_isValid = ::OpenAPI::fromJsonValue(m_other, json[QString("other")]);
    m_other_isSet = !json[QString("other")].isNull() && m_other_isValid;

    m_people_isValid = ::OpenAPI::fromJsonValue(m_people, json[QString("people")]);
    m_people_isSet = !json[QString("people")].isNull() && m_people_isValid;

    m_term_isValid = ::OpenAPI::fromJsonValue(m_term, json[QString("term")]);
    m_term_isSet = !json[QString("term")].isNull() && m_term_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_tv_isValid = ::OpenAPI::fromJsonValue(m_tv, json[QString("tv")]);
    m_tv_isSet = !json[QString("tv")].isNull() && m_tv_isValid;
}

QString OAISearchResults::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchResults::asJsonObject() const {
    QJsonObject obj;
    if (m_items.isSet()) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_movies.isSet()) {
        obj.insert(QString("movies"), ::OpenAPI::toJsonValue(m_movies));
    }
    if (m_other.isSet()) {
        obj.insert(QString("other"), ::OpenAPI::toJsonValue(m_other));
    }
    if (m_people.size() > 0) {
        obj.insert(QString("people"), ::OpenAPI::toJsonValue(m_people));
    }
    if (m_term_isSet) {
        obj.insert(QString("term"), ::OpenAPI::toJsonValue(m_term));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_tv.isSet()) {
        obj.insert(QString("tv"), ::OpenAPI::toJsonValue(m_tv));
    }
    return obj;
}

OAIItemList OAISearchResults::getItems() const {
    return m_items;
}
void OAISearchResults::setItems(const OAIItemList &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAISearchResults::is_items_Set() const{
    return m_items_isSet;
}

bool OAISearchResults::is_items_Valid() const{
    return m_items_isValid;
}

OAIItemList OAISearchResults::getMovies() const {
    return m_movies;
}
void OAISearchResults::setMovies(const OAIItemList &movies) {
    m_movies = movies;
    m_movies_isSet = true;
}

bool OAISearchResults::is_movies_Set() const{
    return m_movies_isSet;
}

bool OAISearchResults::is_movies_Valid() const{
    return m_movies_isValid;
}

OAIItemList OAISearchResults::getOther() const {
    return m_other;
}
void OAISearchResults::setOther(const OAIItemList &other) {
    m_other = other;
    m_other_isSet = true;
}

bool OAISearchResults::is_other_Set() const{
    return m_other_isSet;
}

bool OAISearchResults::is_other_Valid() const{
    return m_other_isValid;
}

QList<OAIPerson> OAISearchResults::getPeople() const {
    return m_people;
}
void OAISearchResults::setPeople(const QList<OAIPerson> &people) {
    m_people = people;
    m_people_isSet = true;
}

bool OAISearchResults::is_people_Set() const{
    return m_people_isSet;
}

bool OAISearchResults::is_people_Valid() const{
    return m_people_isValid;
}

QString OAISearchResults::getTerm() const {
    return m_term;
}
void OAISearchResults::setTerm(const QString &term) {
    m_term = term;
    m_term_isSet = true;
}

bool OAISearchResults::is_term_Set() const{
    return m_term_isSet;
}

bool OAISearchResults::is_term_Valid() const{
    return m_term_isValid;
}

qint32 OAISearchResults::getTotal() const {
    return m_total;
}
void OAISearchResults::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAISearchResults::is_total_Set() const{
    return m_total_isSet;
}

bool OAISearchResults::is_total_Valid() const{
    return m_total_isValid;
}

OAIItemList OAISearchResults::getTv() const {
    return m_tv;
}
void OAISearchResults::setTv(const OAIItemList &tv) {
    m_tv = tv;
    m_tv_isSet = true;
}

bool OAISearchResults::is_tv_Set() const{
    return m_tv_isSet;
}

bool OAISearchResults::is_tv_Valid() const{
    return m_tv_isValid;
}

bool OAISearchResults::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_items.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_movies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_other.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_people.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tv.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchResults::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_term_isValid && m_total_isValid && true;
}

} // namespace OpenAPI
