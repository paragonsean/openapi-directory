/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccount::OAIAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccount::OAIAccount() {
    this->initializeModel();
}

OAIAccount::~OAIAccount() {}

void OAIAccount::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_default_payment_instrument_id_isSet = false;
    m_default_payment_instrument_id_isValid = false;

    m_default_payment_method_id_isSet = false;
    m_default_payment_method_id_isValid = false;

    m_email_verified_isSet = false;
    m_email_verified_isValid = false;

    m_entitlements_isSet = false;
    m_entitlements_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_first_time_subscriber_isSet = false;
    m_is_first_time_subscriber_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_marketing_enabled_isSet = false;
    m_marketing_enabled_isValid = false;

    m_min_rating_playback_guard_isSet = false;
    m_min_rating_playback_guard_isValid = false;

    m_pin_enabled_isSet = false;
    m_pin_enabled_isValid = false;

    m_primary_profile_id_isSet = false;
    m_primary_profile_id_isValid = false;

    m_profiles_isSet = false;
    m_profiles_isValid = false;

    m_segments_isSet = false;
    m_segments_isValid = false;

    m_subscription_code_isSet = false;
    m_subscription_code_isValid = false;

    m_subscriptions_isSet = false;
    m_subscriptions_isValid = false;

    m_tracking_enabled_isSet = false;
    m_tracking_enabled_isValid = false;

    m_used_free_trial_isSet = false;
    m_used_free_trial_isValid = false;
}

void OAIAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccount::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_default_payment_instrument_id_isValid = ::OpenAPI::fromJsonValue(m_default_payment_instrument_id, json[QString("defaultPaymentInstrumentId")]);
    m_default_payment_instrument_id_isSet = !json[QString("defaultPaymentInstrumentId")].isNull() && m_default_payment_instrument_id_isValid;

    m_default_payment_method_id_isValid = ::OpenAPI::fromJsonValue(m_default_payment_method_id, json[QString("defaultPaymentMethodId")]);
    m_default_payment_method_id_isSet = !json[QString("defaultPaymentMethodId")].isNull() && m_default_payment_method_id_isValid;

    m_email_verified_isValid = ::OpenAPI::fromJsonValue(m_email_verified, json[QString("emailVerified")]);
    m_email_verified_isSet = !json[QString("emailVerified")].isNull() && m_email_verified_isValid;

    m_entitlements_isValid = ::OpenAPI::fromJsonValue(m_entitlements, json[QString("entitlements")]);
    m_entitlements_isSet = !json[QString("entitlements")].isNull() && m_entitlements_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_first_time_subscriber_isValid = ::OpenAPI::fromJsonValue(m_is_first_time_subscriber, json[QString("isFirstTimeSubscriber")]);
    m_is_first_time_subscriber_isSet = !json[QString("isFirstTimeSubscriber")].isNull() && m_is_first_time_subscriber_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_marketing_enabled_isValid = ::OpenAPI::fromJsonValue(m_marketing_enabled, json[QString("marketingEnabled")]);
    m_marketing_enabled_isSet = !json[QString("marketingEnabled")].isNull() && m_marketing_enabled_isValid;

    m_min_rating_playback_guard_isValid = ::OpenAPI::fromJsonValue(m_min_rating_playback_guard, json[QString("minRatingPlaybackGuard")]);
    m_min_rating_playback_guard_isSet = !json[QString("minRatingPlaybackGuard")].isNull() && m_min_rating_playback_guard_isValid;

    m_pin_enabled_isValid = ::OpenAPI::fromJsonValue(m_pin_enabled, json[QString("pinEnabled")]);
    m_pin_enabled_isSet = !json[QString("pinEnabled")].isNull() && m_pin_enabled_isValid;

    m_primary_profile_id_isValid = ::OpenAPI::fromJsonValue(m_primary_profile_id, json[QString("primaryProfileId")]);
    m_primary_profile_id_isSet = !json[QString("primaryProfileId")].isNull() && m_primary_profile_id_isValid;

    m_profiles_isValid = ::OpenAPI::fromJsonValue(m_profiles, json[QString("profiles")]);
    m_profiles_isSet = !json[QString("profiles")].isNull() && m_profiles_isValid;

    m_segments_isValid = ::OpenAPI::fromJsonValue(m_segments, json[QString("segments")]);
    m_segments_isSet = !json[QString("segments")].isNull() && m_segments_isValid;

    m_subscription_code_isValid = ::OpenAPI::fromJsonValue(m_subscription_code, json[QString("subscriptionCode")]);
    m_subscription_code_isSet = !json[QString("subscriptionCode")].isNull() && m_subscription_code_isValid;

    m_subscriptions_isValid = ::OpenAPI::fromJsonValue(m_subscriptions, json[QString("subscriptions")]);
    m_subscriptions_isSet = !json[QString("subscriptions")].isNull() && m_subscriptions_isValid;

    m_tracking_enabled_isValid = ::OpenAPI::fromJsonValue(m_tracking_enabled, json[QString("trackingEnabled")]);
    m_tracking_enabled_isSet = !json[QString("trackingEnabled")].isNull() && m_tracking_enabled_isValid;

    m_used_free_trial_isValid = ::OpenAPI::fromJsonValue(m_used_free_trial, json[QString("usedFreeTrial")]);
    m_used_free_trial_isSet = !json[QString("usedFreeTrial")].isNull() && m_used_free_trial_isValid;
}

QString OAIAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_default_payment_instrument_id_isSet) {
        obj.insert(QString("defaultPaymentInstrumentId"), ::OpenAPI::toJsonValue(m_default_payment_instrument_id));
    }
    if (m_default_payment_method_id_isSet) {
        obj.insert(QString("defaultPaymentMethodId"), ::OpenAPI::toJsonValue(m_default_payment_method_id));
    }
    if (m_email_verified_isSet) {
        obj.insert(QString("emailVerified"), ::OpenAPI::toJsonValue(m_email_verified));
    }
    if (m_entitlements.size() > 0) {
        obj.insert(QString("entitlements"), ::OpenAPI::toJsonValue(m_entitlements));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_first_time_subscriber_isSet) {
        obj.insert(QString("isFirstTimeSubscriber"), ::OpenAPI::toJsonValue(m_is_first_time_subscriber));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_marketing_enabled_isSet) {
        obj.insert(QString("marketingEnabled"), ::OpenAPI::toJsonValue(m_marketing_enabled));
    }
    if (m_min_rating_playback_guard_isSet) {
        obj.insert(QString("minRatingPlaybackGuard"), ::OpenAPI::toJsonValue(m_min_rating_playback_guard));
    }
    if (m_pin_enabled_isSet) {
        obj.insert(QString("pinEnabled"), ::OpenAPI::toJsonValue(m_pin_enabled));
    }
    if (m_primary_profile_id_isSet) {
        obj.insert(QString("primaryProfileId"), ::OpenAPI::toJsonValue(m_primary_profile_id));
    }
    if (m_profiles.size() > 0) {
        obj.insert(QString("profiles"), ::OpenAPI::toJsonValue(m_profiles));
    }
    if (m_segments.size() > 0) {
        obj.insert(QString("segments"), ::OpenAPI::toJsonValue(m_segments));
    }
    if (m_subscription_code_isSet) {
        obj.insert(QString("subscriptionCode"), ::OpenAPI::toJsonValue(m_subscription_code));
    }
    if (m_subscriptions.size() > 0) {
        obj.insert(QString("subscriptions"), ::OpenAPI::toJsonValue(m_subscriptions));
    }
    if (m_tracking_enabled_isSet) {
        obj.insert(QString("trackingEnabled"), ::OpenAPI::toJsonValue(m_tracking_enabled));
    }
    if (m_used_free_trial_isSet) {
        obj.insert(QString("usedFreeTrial"), ::OpenAPI::toJsonValue(m_used_free_trial));
    }
    return obj;
}

OAIAddress OAIAccount::getAddress() const {
    return m_address;
}
void OAIAccount::setAddress(const OAIAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIAccount::is_address_Set() const{
    return m_address_isSet;
}

bool OAIAccount::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIAccount::getDefaultPaymentInstrumentId() const {
    return m_default_payment_instrument_id;
}
void OAIAccount::setDefaultPaymentInstrumentId(const QString &default_payment_instrument_id) {
    m_default_payment_instrument_id = default_payment_instrument_id;
    m_default_payment_instrument_id_isSet = true;
}

bool OAIAccount::is_default_payment_instrument_id_Set() const{
    return m_default_payment_instrument_id_isSet;
}

bool OAIAccount::is_default_payment_instrument_id_Valid() const{
    return m_default_payment_instrument_id_isValid;
}

QString OAIAccount::getDefaultPaymentMethodId() const {
    return m_default_payment_method_id;
}
void OAIAccount::setDefaultPaymentMethodId(const QString &default_payment_method_id) {
    m_default_payment_method_id = default_payment_method_id;
    m_default_payment_method_id_isSet = true;
}

bool OAIAccount::is_default_payment_method_id_Set() const{
    return m_default_payment_method_id_isSet;
}

bool OAIAccount::is_default_payment_method_id_Valid() const{
    return m_default_payment_method_id_isValid;
}

bool OAIAccount::isEmailVerified() const {
    return m_email_verified;
}
void OAIAccount::setEmailVerified(const bool &email_verified) {
    m_email_verified = email_verified;
    m_email_verified_isSet = true;
}

bool OAIAccount::is_email_verified_Set() const{
    return m_email_verified_isSet;
}

bool OAIAccount::is_email_verified_Valid() const{
    return m_email_verified_isValid;
}

QList<OAIEntitlement> OAIAccount::getEntitlements() const {
    return m_entitlements;
}
void OAIAccount::setEntitlements(const QList<OAIEntitlement> &entitlements) {
    m_entitlements = entitlements;
    m_entitlements_isSet = true;
}

bool OAIAccount::is_entitlements_Set() const{
    return m_entitlements_isSet;
}

bool OAIAccount::is_entitlements_Valid() const{
    return m_entitlements_isValid;
}

QString OAIAccount::getFirstName() const {
    return m_first_name;
}
void OAIAccount::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIAccount::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIAccount::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIAccount::getId() const {
    return m_id;
}
void OAIAccount::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAccount::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAccount::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIAccount::isIsFirstTimeSubscriber() const {
    return m_is_first_time_subscriber;
}
void OAIAccount::setIsFirstTimeSubscriber(const bool &is_first_time_subscriber) {
    m_is_first_time_subscriber = is_first_time_subscriber;
    m_is_first_time_subscriber_isSet = true;
}

bool OAIAccount::is_is_first_time_subscriber_Set() const{
    return m_is_first_time_subscriber_isSet;
}

bool OAIAccount::is_is_first_time_subscriber_Valid() const{
    return m_is_first_time_subscriber_isValid;
}

QString OAIAccount::getLastName() const {
    return m_last_name;
}
void OAIAccount::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIAccount::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIAccount::is_last_name_Valid() const{
    return m_last_name_isValid;
}

bool OAIAccount::isMarketingEnabled() const {
    return m_marketing_enabled;
}
void OAIAccount::setMarketingEnabled(const bool &marketing_enabled) {
    m_marketing_enabled = marketing_enabled;
    m_marketing_enabled_isSet = true;
}

bool OAIAccount::is_marketing_enabled_Set() const{
    return m_marketing_enabled_isSet;
}

bool OAIAccount::is_marketing_enabled_Valid() const{
    return m_marketing_enabled_isValid;
}

QString OAIAccount::getMinRatingPlaybackGuard() const {
    return m_min_rating_playback_guard;
}
void OAIAccount::setMinRatingPlaybackGuard(const QString &min_rating_playback_guard) {
    m_min_rating_playback_guard = min_rating_playback_guard;
    m_min_rating_playback_guard_isSet = true;
}

bool OAIAccount::is_min_rating_playback_guard_Set() const{
    return m_min_rating_playback_guard_isSet;
}

bool OAIAccount::is_min_rating_playback_guard_Valid() const{
    return m_min_rating_playback_guard_isValid;
}

bool OAIAccount::isPinEnabled() const {
    return m_pin_enabled;
}
void OAIAccount::setPinEnabled(const bool &pin_enabled) {
    m_pin_enabled = pin_enabled;
    m_pin_enabled_isSet = true;
}

bool OAIAccount::is_pin_enabled_Set() const{
    return m_pin_enabled_isSet;
}

bool OAIAccount::is_pin_enabled_Valid() const{
    return m_pin_enabled_isValid;
}

QString OAIAccount::getPrimaryProfileId() const {
    return m_primary_profile_id;
}
void OAIAccount::setPrimaryProfileId(const QString &primary_profile_id) {
    m_primary_profile_id = primary_profile_id;
    m_primary_profile_id_isSet = true;
}

bool OAIAccount::is_primary_profile_id_Set() const{
    return m_primary_profile_id_isSet;
}

bool OAIAccount::is_primary_profile_id_Valid() const{
    return m_primary_profile_id_isValid;
}

QList<OAIProfileSummary> OAIAccount::getProfiles() const {
    return m_profiles;
}
void OAIAccount::setProfiles(const QList<OAIProfileSummary> &profiles) {
    m_profiles = profiles;
    m_profiles_isSet = true;
}

bool OAIAccount::is_profiles_Set() const{
    return m_profiles_isSet;
}

bool OAIAccount::is_profiles_Valid() const{
    return m_profiles_isValid;
}

QList<QString> OAIAccount::getSegments() const {
    return m_segments;
}
void OAIAccount::setSegments(const QList<QString> &segments) {
    m_segments = segments;
    m_segments_isSet = true;
}

bool OAIAccount::is_segments_Set() const{
    return m_segments_isSet;
}

bool OAIAccount::is_segments_Valid() const{
    return m_segments_isValid;
}

QString OAIAccount::getSubscriptionCode() const {
    return m_subscription_code;
}
void OAIAccount::setSubscriptionCode(const QString &subscription_code) {
    m_subscription_code = subscription_code;
    m_subscription_code_isSet = true;
}

bool OAIAccount::is_subscription_code_Set() const{
    return m_subscription_code_isSet;
}

bool OAIAccount::is_subscription_code_Valid() const{
    return m_subscription_code_isValid;
}

QList<OAISubscription> OAIAccount::getSubscriptions() const {
    return m_subscriptions;
}
void OAIAccount::setSubscriptions(const QList<OAISubscription> &subscriptions) {
    m_subscriptions = subscriptions;
    m_subscriptions_isSet = true;
}

bool OAIAccount::is_subscriptions_Set() const{
    return m_subscriptions_isSet;
}

bool OAIAccount::is_subscriptions_Valid() const{
    return m_subscriptions_isValid;
}

bool OAIAccount::isTrackingEnabled() const {
    return m_tracking_enabled;
}
void OAIAccount::setTrackingEnabled(const bool &tracking_enabled) {
    m_tracking_enabled = tracking_enabled;
    m_tracking_enabled_isSet = true;
}

bool OAIAccount::is_tracking_enabled_Set() const{
    return m_tracking_enabled_isSet;
}

bool OAIAccount::is_tracking_enabled_Valid() const{
    return m_tracking_enabled_isValid;
}

bool OAIAccount::isUsedFreeTrial() const {
    return m_used_free_trial;
}
void OAIAccount::setUsedFreeTrial(const bool &used_free_trial) {
    m_used_free_trial = used_free_trial;
    m_used_free_trial_isSet = true;
}

bool OAIAccount::is_used_free_trial_Set() const{
    return m_used_free_trial_isSet;
}

bool OAIAccount::is_used_free_trial_Valid() const{
    return m_used_free_trial_isValid;
}

bool OAIAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_payment_instrument_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_payment_method_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_verified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entitlements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_first_time_subscriber_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketing_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_rating_playback_guard_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pin_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profiles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_segments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscriptions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_free_trial_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_marketing_enabled_isValid && m_pin_enabled_isValid && m_primary_profile_id_isValid && m_profiles_isValid && m_subscription_code_isValid && m_tracking_enabled_isValid && true;
}

} // namespace OpenAPI
