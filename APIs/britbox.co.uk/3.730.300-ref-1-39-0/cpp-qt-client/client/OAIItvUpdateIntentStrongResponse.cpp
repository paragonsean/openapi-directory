/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItvUpdateIntentStrongResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItvUpdateIntentStrongResponse::OAIItvUpdateIntentStrongResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItvUpdateIntentStrongResponse::OAIItvUpdateIntentStrongResponse() {
    this->initializeModel();
}

OAIItvUpdateIntentStrongResponse::~OAIItvUpdateIntentStrongResponse() {}

void OAIItvUpdateIntentStrongResponse::initializeModel() {

    m_client_secret_isSet = false;
    m_client_secret_isValid = false;

    m_intent_id_isSet = false;
    m_intent_id_isValid = false;

    m_intent_type_isSet = false;
    m_intent_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIItvUpdateIntentStrongResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItvUpdateIntentStrongResponse::fromJsonObject(QJsonObject json) {

    m_client_secret_isValid = ::OpenAPI::fromJsonValue(m_client_secret, json[QString("clientSecret")]);
    m_client_secret_isSet = !json[QString("clientSecret")].isNull() && m_client_secret_isValid;

    m_intent_id_isValid = ::OpenAPI::fromJsonValue(m_intent_id, json[QString("intentId")]);
    m_intent_id_isSet = !json[QString("intentId")].isNull() && m_intent_id_isValid;

    m_intent_type_isValid = ::OpenAPI::fromJsonValue(m_intent_type, json[QString("intentType")]);
    m_intent_type_isSet = !json[QString("intentType")].isNull() && m_intent_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIItvUpdateIntentStrongResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItvUpdateIntentStrongResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_client_secret_isSet) {
        obj.insert(QString("clientSecret"), ::OpenAPI::toJsonValue(m_client_secret));
    }
    if (m_intent_id_isSet) {
        obj.insert(QString("intentId"), ::OpenAPI::toJsonValue(m_intent_id));
    }
    if (m_intent_type_isSet) {
        obj.insert(QString("intentType"), ::OpenAPI::toJsonValue(m_intent_type));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIItvUpdateIntentStrongResponse::getClientSecret() const {
    return m_client_secret;
}
void OAIItvUpdateIntentStrongResponse::setClientSecret(const QString &client_secret) {
    m_client_secret = client_secret;
    m_client_secret_isSet = true;
}

bool OAIItvUpdateIntentStrongResponse::is_client_secret_Set() const{
    return m_client_secret_isSet;
}

bool OAIItvUpdateIntentStrongResponse::is_client_secret_Valid() const{
    return m_client_secret_isValid;
}

QString OAIItvUpdateIntentStrongResponse::getIntentId() const {
    return m_intent_id;
}
void OAIItvUpdateIntentStrongResponse::setIntentId(const QString &intent_id) {
    m_intent_id = intent_id;
    m_intent_id_isSet = true;
}

bool OAIItvUpdateIntentStrongResponse::is_intent_id_Set() const{
    return m_intent_id_isSet;
}

bool OAIItvUpdateIntentStrongResponse::is_intent_id_Valid() const{
    return m_intent_id_isValid;
}

QString OAIItvUpdateIntentStrongResponse::getIntentType() const {
    return m_intent_type;
}
void OAIItvUpdateIntentStrongResponse::setIntentType(const QString &intent_type) {
    m_intent_type = intent_type;
    m_intent_type_isSet = true;
}

bool OAIItvUpdateIntentStrongResponse::is_intent_type_Set() const{
    return m_intent_type_isSet;
}

bool OAIItvUpdateIntentStrongResponse::is_intent_type_Valid() const{
    return m_intent_type_isValid;
}

QString OAIItvUpdateIntentStrongResponse::getStatus() const {
    return m_status;
}
void OAIItvUpdateIntentStrongResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIItvUpdateIntentStrongResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIItvUpdateIntentStrongResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIItvUpdateIntentStrongResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intent_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItvUpdateIntentStrongResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
