/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItvEntitlement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItvEntitlement::OAIItvEntitlement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItvEntitlement::OAIItvEntitlement() {
    this->initializeModel();
}

OAIItvEntitlement::~OAIItvEntitlement() {}

void OAIItvEntitlement::initializeModel() {

    m_card_type_isSet = false;
    m_card_type_isValid = false;

    m_expiry_isSet = false;
    m_expiry_isValid = false;

    m_plan_isSet = false;
    m_plan_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;
}

void OAIItvEntitlement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItvEntitlement::fromJsonObject(QJsonObject json) {

    m_card_type_isValid = ::OpenAPI::fromJsonValue(m_card_type, json[QString("card_type")]);
    m_card_type_isSet = !json[QString("card_type")].isNull() && m_card_type_isValid;

    m_expiry_isValid = ::OpenAPI::fromJsonValue(m_expiry, json[QString("expiry")]);
    m_expiry_isSet = !json[QString("expiry")].isNull() && m_expiry_isValid;

    m_plan_isValid = ::OpenAPI::fromJsonValue(m_plan, json[QString("plan")]);
    m_plan_isSet = !json[QString("plan")].isNull() && m_plan_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;
}

QString OAIItvEntitlement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItvEntitlement::asJsonObject() const {
    QJsonObject obj;
    if (m_card_type_isSet) {
        obj.insert(QString("card_type"), ::OpenAPI::toJsonValue(m_card_type));
    }
    if (m_expiry_isSet) {
        obj.insert(QString("expiry"), ::OpenAPI::toJsonValue(m_expiry));
    }
    if (m_plan_isSet) {
        obj.insert(QString("plan"), ::OpenAPI::toJsonValue(m_plan));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    return obj;
}

QDateTime OAIItvEntitlement::getCardType() const {
    return m_card_type;
}
void OAIItvEntitlement::setCardType(const QDateTime &card_type) {
    m_card_type = card_type;
    m_card_type_isSet = true;
}

bool OAIItvEntitlement::is_card_type_Set() const{
    return m_card_type_isSet;
}

bool OAIItvEntitlement::is_card_type_Valid() const{
    return m_card_type_isValid;
}

QDateTime OAIItvEntitlement::getExpiry() const {
    return m_expiry;
}
void OAIItvEntitlement::setExpiry(const QDateTime &expiry) {
    m_expiry = expiry;
    m_expiry_isSet = true;
}

bool OAIItvEntitlement::is_expiry_Set() const{
    return m_expiry_isSet;
}

bool OAIItvEntitlement::is_expiry_Valid() const{
    return m_expiry_isValid;
}

OAIObject OAIItvEntitlement::getPlan() const {
    return m_plan;
}
void OAIItvEntitlement::setPlan(const OAIObject &plan) {
    m_plan = plan;
    m_plan_isSet = true;
}

bool OAIItvEntitlement::is_plan_Set() const{
    return m_plan_isSet;
}

bool OAIItvEntitlement::is_plan_Valid() const{
    return m_plan_isValid;
}

QString OAIItvEntitlement::getSource() const {
    return m_source;
}
void OAIItvEntitlement::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIItvEntitlement::is_source_Set() const{
    return m_source_isSet;
}

bool OAIItvEntitlement::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIItvEntitlement::getSubscriptionId() const {
    return m_subscription_id;
}
void OAIItvEntitlement::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAIItvEntitlement::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIItvEntitlement::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

bool OAIItvEntitlement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_card_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItvEntitlement::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expiry_isValid && m_plan_isValid && m_source_isValid && m_subscription_id_isValid && true;
}

} // namespace OpenAPI
