/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProfileSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProfileSummary::OAIProfileSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProfileSummary::OAIProfileSummary() {
    this->initializeModel();
}

OAIProfileSummary::~OAIProfileSummary() {}

void OAIProfileSummary::initializeModel() {

    m_color_isSet = false;
    m_color_isValid = false;

    m_hero_autoplay_isSet = false;
    m_hero_autoplay_isValid = false;

    m_hero_with_audio_isSet = false;
    m_hero_with_audio_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_marketing_enabled_isSet = false;
    m_marketing_enabled_isValid = false;

    m_max_rating_content_filter_isSet = false;
    m_max_rating_content_filter_isValid = false;

    m_min_rating_playback_guard_isSet = false;
    m_min_rating_playback_guard_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pin_enabled_isSet = false;
    m_pin_enabled_isValid = false;

    m_purchase_enabled_isSet = false;
    m_purchase_enabled_isValid = false;

    m_segments_isSet = false;
    m_segments_isValid = false;
}

void OAIProfileSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProfileSummary::fromJsonObject(QJsonObject json) {

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_hero_autoplay_isValid = ::OpenAPI::fromJsonValue(m_hero_autoplay, json[QString("heroAutoplay")]);
    m_hero_autoplay_isSet = !json[QString("heroAutoplay")].isNull() && m_hero_autoplay_isValid;

    m_hero_with_audio_isValid = ::OpenAPI::fromJsonValue(m_hero_with_audio, json[QString("heroWithAudio")]);
    m_hero_with_audio_isSet = !json[QString("heroWithAudio")].isNull() && m_hero_with_audio_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_marketing_enabled_isValid = ::OpenAPI::fromJsonValue(m_marketing_enabled, json[QString("marketingEnabled")]);
    m_marketing_enabled_isSet = !json[QString("marketingEnabled")].isNull() && m_marketing_enabled_isValid;

    m_max_rating_content_filter_isValid = ::OpenAPI::fromJsonValue(m_max_rating_content_filter, json[QString("maxRatingContentFilter")]);
    m_max_rating_content_filter_isSet = !json[QString("maxRatingContentFilter")].isNull() && m_max_rating_content_filter_isValid;

    m_min_rating_playback_guard_isValid = ::OpenAPI::fromJsonValue(m_min_rating_playback_guard, json[QString("minRatingPlaybackGuard")]);
    m_min_rating_playback_guard_isSet = !json[QString("minRatingPlaybackGuard")].isNull() && m_min_rating_playback_guard_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pin_enabled_isValid = ::OpenAPI::fromJsonValue(m_pin_enabled, json[QString("pinEnabled")]);
    m_pin_enabled_isSet = !json[QString("pinEnabled")].isNull() && m_pin_enabled_isValid;

    m_purchase_enabled_isValid = ::OpenAPI::fromJsonValue(m_purchase_enabled, json[QString("purchaseEnabled")]);
    m_purchase_enabled_isSet = !json[QString("purchaseEnabled")].isNull() && m_purchase_enabled_isValid;

    m_segments_isValid = ::OpenAPI::fromJsonValue(m_segments, json[QString("segments")]);
    m_segments_isSet = !json[QString("segments")].isNull() && m_segments_isValid;
}

QString OAIProfileSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProfileSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_hero_autoplay_isSet) {
        obj.insert(QString("heroAutoplay"), ::OpenAPI::toJsonValue(m_hero_autoplay));
    }
    if (m_hero_with_audio_isSet) {
        obj.insert(QString("heroWithAudio"), ::OpenAPI::toJsonValue(m_hero_with_audio));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_marketing_enabled_isSet) {
        obj.insert(QString("marketingEnabled"), ::OpenAPI::toJsonValue(m_marketing_enabled));
    }
    if (m_max_rating_content_filter.isSet()) {
        obj.insert(QString("maxRatingContentFilter"), ::OpenAPI::toJsonValue(m_max_rating_content_filter));
    }
    if (m_min_rating_playback_guard.isSet()) {
        obj.insert(QString("minRatingPlaybackGuard"), ::OpenAPI::toJsonValue(m_min_rating_playback_guard));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pin_enabled_isSet) {
        obj.insert(QString("pinEnabled"), ::OpenAPI::toJsonValue(m_pin_enabled));
    }
    if (m_purchase_enabled_isSet) {
        obj.insert(QString("purchaseEnabled"), ::OpenAPI::toJsonValue(m_purchase_enabled));
    }
    if (m_segments.size() > 0) {
        obj.insert(QString("segments"), ::OpenAPI::toJsonValue(m_segments));
    }
    return obj;
}

QString OAIProfileSummary::getColor() const {
    return m_color;
}
void OAIProfileSummary::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIProfileSummary::is_color_Set() const{
    return m_color_isSet;
}

bool OAIProfileSummary::is_color_Valid() const{
    return m_color_isValid;
}

bool OAIProfileSummary::isHeroAutoplay() const {
    return m_hero_autoplay;
}
void OAIProfileSummary::setHeroAutoplay(const bool &hero_autoplay) {
    m_hero_autoplay = hero_autoplay;
    m_hero_autoplay_isSet = true;
}

bool OAIProfileSummary::is_hero_autoplay_Set() const{
    return m_hero_autoplay_isSet;
}

bool OAIProfileSummary::is_hero_autoplay_Valid() const{
    return m_hero_autoplay_isValid;
}

bool OAIProfileSummary::isHeroWithAudio() const {
    return m_hero_with_audio;
}
void OAIProfileSummary::setHeroWithAudio(const bool &hero_with_audio) {
    m_hero_with_audio = hero_with_audio;
    m_hero_with_audio_isSet = true;
}

bool OAIProfileSummary::is_hero_with_audio_Set() const{
    return m_hero_with_audio_isSet;
}

bool OAIProfileSummary::is_hero_with_audio_Valid() const{
    return m_hero_with_audio_isValid;
}

QString OAIProfileSummary::getId() const {
    return m_id;
}
void OAIProfileSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProfileSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProfileSummary::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIProfileSummary::isIsActive() const {
    return m_is_active;
}
void OAIProfileSummary::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIProfileSummary::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIProfileSummary::is_is_active_Valid() const{
    return m_is_active_isValid;
}

QString OAIProfileSummary::getLanguageCode() const {
    return m_language_code;
}
void OAIProfileSummary::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIProfileSummary::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIProfileSummary::is_language_code_Valid() const{
    return m_language_code_isValid;
}

bool OAIProfileSummary::isMarketingEnabled() const {
    return m_marketing_enabled;
}
void OAIProfileSummary::setMarketingEnabled(const bool &marketing_enabled) {
    m_marketing_enabled = marketing_enabled;
    m_marketing_enabled_isSet = true;
}

bool OAIProfileSummary::is_marketing_enabled_Set() const{
    return m_marketing_enabled_isSet;
}

bool OAIProfileSummary::is_marketing_enabled_Valid() const{
    return m_marketing_enabled_isValid;
}

OAIClassificationSummary OAIProfileSummary::getMaxRatingContentFilter() const {
    return m_max_rating_content_filter;
}
void OAIProfileSummary::setMaxRatingContentFilter(const OAIClassificationSummary &max_rating_content_filter) {
    m_max_rating_content_filter = max_rating_content_filter;
    m_max_rating_content_filter_isSet = true;
}

bool OAIProfileSummary::is_max_rating_content_filter_Set() const{
    return m_max_rating_content_filter_isSet;
}

bool OAIProfileSummary::is_max_rating_content_filter_Valid() const{
    return m_max_rating_content_filter_isValid;
}

OAIClassificationSummary OAIProfileSummary::getMinRatingPlaybackGuard() const {
    return m_min_rating_playback_guard;
}
void OAIProfileSummary::setMinRatingPlaybackGuard(const OAIClassificationSummary &min_rating_playback_guard) {
    m_min_rating_playback_guard = min_rating_playback_guard;
    m_min_rating_playback_guard_isSet = true;
}

bool OAIProfileSummary::is_min_rating_playback_guard_Set() const{
    return m_min_rating_playback_guard_isSet;
}

bool OAIProfileSummary::is_min_rating_playback_guard_Valid() const{
    return m_min_rating_playback_guard_isValid;
}

QString OAIProfileSummary::getName() const {
    return m_name;
}
void OAIProfileSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProfileSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProfileSummary::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIProfileSummary::isPinEnabled() const {
    return m_pin_enabled;
}
void OAIProfileSummary::setPinEnabled(const bool &pin_enabled) {
    m_pin_enabled = pin_enabled;
    m_pin_enabled_isSet = true;
}

bool OAIProfileSummary::is_pin_enabled_Set() const{
    return m_pin_enabled_isSet;
}

bool OAIProfileSummary::is_pin_enabled_Valid() const{
    return m_pin_enabled_isValid;
}

bool OAIProfileSummary::isPurchaseEnabled() const {
    return m_purchase_enabled;
}
void OAIProfileSummary::setPurchaseEnabled(const bool &purchase_enabled) {
    m_purchase_enabled = purchase_enabled;
    m_purchase_enabled_isSet = true;
}

bool OAIProfileSummary::is_purchase_enabled_Set() const{
    return m_purchase_enabled_isSet;
}

bool OAIProfileSummary::is_purchase_enabled_Valid() const{
    return m_purchase_enabled_isValid;
}

QList<QString> OAIProfileSummary::getSegments() const {
    return m_segments;
}
void OAIProfileSummary::setSegments(const QList<QString> &segments) {
    m_segments = segments;
    m_segments_isSet = true;
}

bool OAIProfileSummary::is_segments_Set() const{
    return m_segments_isSet;
}

bool OAIProfileSummary::is_segments_Valid() const{
    return m_segments_isValid;
}

bool OAIProfileSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hero_autoplay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hero_with_audio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketing_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_rating_content_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_rating_playback_guard.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pin_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segments.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProfileSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_is_active_isValid && m_marketing_enabled_isValid && m_name_isValid && m_pin_enabled_isValid && m_purchase_enabled_isValid && m_segments_isValid && true;
}

} // namespace OpenAPI
