/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItvCurrentSubscription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItvCurrentSubscription::OAIItvCurrentSubscription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItvCurrentSubscription::OAIItvCurrentSubscription() {
    this->initializeModel();
}

OAIItvCurrentSubscription::~OAIItvCurrentSubscription() {}

void OAIItvCurrentSubscription::initializeModel() {

    m_cancel_at_period_end_isSet = false;
    m_cancel_at_period_end_isValid = false;

    m_collection_method_isSet = false;
    m_collection_method_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_current_period_end_isSet = false;
    m_current_period_end_isValid = false;

    m_current_period_start_isSet = false;
    m_current_period_start_isValid = false;

    m_plan_isSet = false;
    m_plan_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIItvCurrentSubscription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItvCurrentSubscription::fromJsonObject(QJsonObject json) {

    m_cancel_at_period_end_isValid = ::OpenAPI::fromJsonValue(m_cancel_at_period_end, json[QString("cancelAtPeriodEnd")]);
    m_cancel_at_period_end_isSet = !json[QString("cancelAtPeriodEnd")].isNull() && m_cancel_at_period_end_isValid;

    m_collection_method_isValid = ::OpenAPI::fromJsonValue(m_collection_method, json[QString("collectionMethod")]);
    m_collection_method_isSet = !json[QString("collectionMethod")].isNull() && m_collection_method_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_current_period_end_isValid = ::OpenAPI::fromJsonValue(m_current_period_end, json[QString("currentPeriodEnd")]);
    m_current_period_end_isSet = !json[QString("currentPeriodEnd")].isNull() && m_current_period_end_isValid;

    m_current_period_start_isValid = ::OpenAPI::fromJsonValue(m_current_period_start, json[QString("currentPeriodStart")]);
    m_current_period_start_isSet = !json[QString("currentPeriodStart")].isNull() && m_current_period_start_isValid;

    m_plan_isValid = ::OpenAPI::fromJsonValue(m_plan, json[QString("plan")]);
    m_plan_isSet = !json[QString("plan")].isNull() && m_plan_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIItvCurrentSubscription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItvCurrentSubscription::asJsonObject() const {
    QJsonObject obj;
    if (m_cancel_at_period_end_isSet) {
        obj.insert(QString("cancelAtPeriodEnd"), ::OpenAPI::toJsonValue(m_cancel_at_period_end));
    }
    if (m_collection_method_isSet) {
        obj.insert(QString("collectionMethod"), ::OpenAPI::toJsonValue(m_collection_method));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_current_period_end_isSet) {
        obj.insert(QString("currentPeriodEnd"), ::OpenAPI::toJsonValue(m_current_period_end));
    }
    if (m_current_period_start_isSet) {
        obj.insert(QString("currentPeriodStart"), ::OpenAPI::toJsonValue(m_current_period_start));
    }
    if (m_plan_isSet) {
        obj.insert(QString("plan"), ::OpenAPI::toJsonValue(m_plan));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

bool OAIItvCurrentSubscription::isCancelAtPeriodEnd() const {
    return m_cancel_at_period_end;
}
void OAIItvCurrentSubscription::setCancelAtPeriodEnd(const bool &cancel_at_period_end) {
    m_cancel_at_period_end = cancel_at_period_end;
    m_cancel_at_period_end_isSet = true;
}

bool OAIItvCurrentSubscription::is_cancel_at_period_end_Set() const{
    return m_cancel_at_period_end_isSet;
}

bool OAIItvCurrentSubscription::is_cancel_at_period_end_Valid() const{
    return m_cancel_at_period_end_isValid;
}

QString OAIItvCurrentSubscription::getCollectionMethod() const {
    return m_collection_method;
}
void OAIItvCurrentSubscription::setCollectionMethod(const QString &collection_method) {
    m_collection_method = collection_method;
    m_collection_method_isSet = true;
}

bool OAIItvCurrentSubscription::is_collection_method_Set() const{
    return m_collection_method_isSet;
}

bool OAIItvCurrentSubscription::is_collection_method_Valid() const{
    return m_collection_method_isValid;
}

qint32 OAIItvCurrentSubscription::getCreated() const {
    return m_created;
}
void OAIItvCurrentSubscription::setCreated(const qint32 &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIItvCurrentSubscription::is_created_Set() const{
    return m_created_isSet;
}

bool OAIItvCurrentSubscription::is_created_Valid() const{
    return m_created_isValid;
}

qint32 OAIItvCurrentSubscription::getCurrentPeriodEnd() const {
    return m_current_period_end;
}
void OAIItvCurrentSubscription::setCurrentPeriodEnd(const qint32 &current_period_end) {
    m_current_period_end = current_period_end;
    m_current_period_end_isSet = true;
}

bool OAIItvCurrentSubscription::is_current_period_end_Set() const{
    return m_current_period_end_isSet;
}

bool OAIItvCurrentSubscription::is_current_period_end_Valid() const{
    return m_current_period_end_isValid;
}

qint32 OAIItvCurrentSubscription::getCurrentPeriodStart() const {
    return m_current_period_start;
}
void OAIItvCurrentSubscription::setCurrentPeriodStart(const qint32 &current_period_start) {
    m_current_period_start = current_period_start;
    m_current_period_start_isSet = true;
}

bool OAIItvCurrentSubscription::is_current_period_start_Set() const{
    return m_current_period_start_isSet;
}

bool OAIItvCurrentSubscription::is_current_period_start_Valid() const{
    return m_current_period_start_isValid;
}

OAIObject OAIItvCurrentSubscription::getPlan() const {
    return m_plan;
}
void OAIItvCurrentSubscription::setPlan(const OAIObject &plan) {
    m_plan = plan;
    m_plan_isSet = true;
}

bool OAIItvCurrentSubscription::is_plan_Set() const{
    return m_plan_isSet;
}

bool OAIItvCurrentSubscription::is_plan_Valid() const{
    return m_plan_isValid;
}

QString OAIItvCurrentSubscription::getStatus() const {
    return m_status;
}
void OAIItvCurrentSubscription::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIItvCurrentSubscription::is_status_Set() const{
    return m_status_isSet;
}

bool OAIItvCurrentSubscription::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIItvCurrentSubscription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cancel_at_period_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_period_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_period_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItvCurrentSubscription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cancel_at_period_end_isValid && m_collection_method_isValid && m_created_isValid && m_current_period_end_isValid && m_current_period_start_isValid && m_plan_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
