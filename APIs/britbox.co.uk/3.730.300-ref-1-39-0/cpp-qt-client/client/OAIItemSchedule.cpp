/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItemSchedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItemSchedule::OAIItemSchedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItemSchedule::OAIItemSchedule() {
    this->initializeModel();
}

OAIItemSchedule::~OAIItemSchedule() {}

void OAIItemSchedule::initializeModel() {

    m_blackout_isSet = false;
    m_blackout_isValid = false;

    m_channel_id_isSet = false;
    m_channel_id_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_featured_isSet = false;
    m_featured_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_live_isSet = false;
    m_live_isValid = false;

    m_repeat_isSet = false;
    m_repeat_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAIItemSchedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItemSchedule::fromJsonObject(QJsonObject json) {

    m_blackout_isValid = ::OpenAPI::fromJsonValue(m_blackout, json[QString("blackout")]);
    m_blackout_isSet = !json[QString("blackout")].isNull() && m_blackout_isValid;

    m_channel_id_isValid = ::OpenAPI::fromJsonValue(m_channel_id, json[QString("channelId")]);
    m_channel_id_isSet = !json[QString("channelId")].isNull() && m_channel_id_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_featured_isValid = ::OpenAPI::fromJsonValue(m_featured, json[QString("featured")]);
    m_featured_isSet = !json[QString("featured")].isNull() && m_featured_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_live_isValid = ::OpenAPI::fromJsonValue(m_live, json[QString("live")]);
    m_live_isSet = !json[QString("live")].isNull() && m_live_isValid;

    m_repeat_isValid = ::OpenAPI::fromJsonValue(m_repeat, json[QString("repeat")]);
    m_repeat_isSet = !json[QString("repeat")].isNull() && m_repeat_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;
}

QString OAIItemSchedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItemSchedule::asJsonObject() const {
    QJsonObject obj;
    if (m_blackout_isSet) {
        obj.insert(QString("blackout"), ::OpenAPI::toJsonValue(m_blackout));
    }
    if (m_channel_id_isSet) {
        obj.insert(QString("channelId"), ::OpenAPI::toJsonValue(m_channel_id));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_featured_isSet) {
        obj.insert(QString("featured"), ::OpenAPI::toJsonValue(m_featured));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_live_isSet) {
        obj.insert(QString("live"), ::OpenAPI::toJsonValue(m_live));
    }
    if (m_repeat_isSet) {
        obj.insert(QString("repeat"), ::OpenAPI::toJsonValue(m_repeat));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

bool OAIItemSchedule::isBlackout() const {
    return m_blackout;
}
void OAIItemSchedule::setBlackout(const bool &blackout) {
    m_blackout = blackout;
    m_blackout_isSet = true;
}

bool OAIItemSchedule::is_blackout_Set() const{
    return m_blackout_isSet;
}

bool OAIItemSchedule::is_blackout_Valid() const{
    return m_blackout_isValid;
}

QString OAIItemSchedule::getChannelId() const {
    return m_channel_id;
}
void OAIItemSchedule::setChannelId(const QString &channel_id) {
    m_channel_id = channel_id;
    m_channel_id_isSet = true;
}

bool OAIItemSchedule::is_channel_id_Set() const{
    return m_channel_id_isSet;
}

bool OAIItemSchedule::is_channel_id_Valid() const{
    return m_channel_id_isValid;
}

QDateTime OAIItemSchedule::getEndDate() const {
    return m_end_date;
}
void OAIItemSchedule::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIItemSchedule::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIItemSchedule::is_end_date_Valid() const{
    return m_end_date_isValid;
}

bool OAIItemSchedule::isFeatured() const {
    return m_featured;
}
void OAIItemSchedule::setFeatured(const bool &featured) {
    m_featured = featured;
    m_featured_isSet = true;
}

bool OAIItemSchedule::is_featured_Set() const{
    return m_featured_isSet;
}

bool OAIItemSchedule::is_featured_Valid() const{
    return m_featured_isValid;
}

QString OAIItemSchedule::getId() const {
    return m_id;
}
void OAIItemSchedule::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIItemSchedule::is_id_Set() const{
    return m_id_isSet;
}

bool OAIItemSchedule::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIItemSchedule::isLive() const {
    return m_live;
}
void OAIItemSchedule::setLive(const bool &live) {
    m_live = live;
    m_live_isSet = true;
}

bool OAIItemSchedule::is_live_Set() const{
    return m_live_isSet;
}

bool OAIItemSchedule::is_live_Valid() const{
    return m_live_isValid;
}

bool OAIItemSchedule::isRepeat() const {
    return m_repeat;
}
void OAIItemSchedule::setRepeat(const bool &repeat) {
    m_repeat = repeat;
    m_repeat_isSet = true;
}

bool OAIItemSchedule::is_repeat_Set() const{
    return m_repeat_isSet;
}

bool OAIItemSchedule::is_repeat_Valid() const{
    return m_repeat_isValid;
}

QDateTime OAIItemSchedule::getStartDate() const {
    return m_start_date;
}
void OAIItemSchedule::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIItemSchedule::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIItemSchedule::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIItemSchedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blackout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_featured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repeat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItemSchedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_channel_id_isValid && m_end_date_isValid && m_id_isValid && m_start_date_isValid && true;
}

} // namespace OpenAPI
