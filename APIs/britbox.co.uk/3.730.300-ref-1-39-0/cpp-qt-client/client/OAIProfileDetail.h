/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProfileDetail.h
 *
 * 
 */

#ifndef OAIProfileDetail_H
#define OAIProfileDetail_H

#include <QJsonObject>

#include "OAIClassificationSummary.h"
#include "OAIWatched.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIClassificationSummary;
class OAIWatched;

class OAIProfileDetail : public OAIObject {
public:
    OAIProfileDetail();
    OAIProfileDetail(QString json);
    ~OAIProfileDetail() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getColor() const;
    void setColor(const QString &color);
    bool is_color_Set() const;
    bool is_color_Valid() const;

    bool isHeroAutoplay() const;
    void setHeroAutoplay(const bool &hero_autoplay);
    bool is_hero_autoplay_Set() const;
    bool is_hero_autoplay_Valid() const;

    bool isHeroWithAudio() const;
    void setHeroWithAudio(const bool &hero_with_audio);
    bool is_hero_with_audio_Set() const;
    bool is_hero_with_audio_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsActive() const;
    void setIsActive(const bool &is_active);
    bool is_is_active_Set() const;
    bool is_is_active_Valid() const;

    QString getLanguageCode() const;
    void setLanguageCode(const QString &language_code);
    bool is_language_code_Set() const;
    bool is_language_code_Valid() const;

    bool isMarketingEnabled() const;
    void setMarketingEnabled(const bool &marketing_enabled);
    bool is_marketing_enabled_Set() const;
    bool is_marketing_enabled_Valid() const;

    OAIClassificationSummary getMaxRatingContentFilter() const;
    void setMaxRatingContentFilter(const OAIClassificationSummary &max_rating_content_filter);
    bool is_max_rating_content_filter_Set() const;
    bool is_max_rating_content_filter_Valid() const;

    OAIClassificationSummary getMinRatingPlaybackGuard() const;
    void setMinRatingPlaybackGuard(const OAIClassificationSummary &min_rating_playback_guard);
    bool is_min_rating_playback_guard_Set() const;
    bool is_min_rating_playback_guard_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    bool isPinEnabled() const;
    void setPinEnabled(const bool &pin_enabled);
    bool is_pin_enabled_Set() const;
    bool is_pin_enabled_Valid() const;

    bool isPurchaseEnabled() const;
    void setPurchaseEnabled(const bool &purchase_enabled);
    bool is_purchase_enabled_Set() const;
    bool is_purchase_enabled_Valid() const;

    QList<QString> getSegments() const;
    void setSegments(const QList<QString> &segments);
    bool is_segments_Set() const;
    bool is_segments_Valid() const;

    QMap<QString, QDateTime> getBookmarked() const;
    void setBookmarked(const QMap<QString, QDateTime> &bookmarked);
    bool is_bookmarked_Set() const;
    bool is_bookmarked_Valid() const;

    QMap<QString, qint32> getRated() const;
    void setRated(const QMap<QString, qint32> &rated);
    bool is_rated_Set() const;
    bool is_rated_Valid() const;

    QMap<QString, OAIWatched> getWatched() const;
    void setWatched(const QMap<QString, OAIWatched> &watched);
    bool is_watched_Set() const;
    bool is_watched_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_color;
    bool m_color_isSet;
    bool m_color_isValid;

    bool m_hero_autoplay;
    bool m_hero_autoplay_isSet;
    bool m_hero_autoplay_isValid;

    bool m_hero_with_audio;
    bool m_hero_with_audio_isSet;
    bool m_hero_with_audio_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_is_active;
    bool m_is_active_isSet;
    bool m_is_active_isValid;

    QString m_language_code;
    bool m_language_code_isSet;
    bool m_language_code_isValid;

    bool m_marketing_enabled;
    bool m_marketing_enabled_isSet;
    bool m_marketing_enabled_isValid;

    OAIClassificationSummary m_max_rating_content_filter;
    bool m_max_rating_content_filter_isSet;
    bool m_max_rating_content_filter_isValid;

    OAIClassificationSummary m_min_rating_playback_guard;
    bool m_min_rating_playback_guard_isSet;
    bool m_min_rating_playback_guard_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    bool m_pin_enabled;
    bool m_pin_enabled_isSet;
    bool m_pin_enabled_isValid;

    bool m_purchase_enabled;
    bool m_purchase_enabled_isSet;
    bool m_purchase_enabled_isValid;

    QList<QString> m_segments;
    bool m_segments_isSet;
    bool m_segments_isValid;

    QMap<QString, QDateTime> m_bookmarked;
    bool m_bookmarked_isSet;
    bool m_bookmarked_isValid;

    QMap<QString, qint32> m_rated;
    bool m_rated_isSet;
    bool m_rated_isValid;

    QMap<QString, OAIWatched> m_watched;
    bool m_watched_isSet;
    bool m_watched_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProfileDetail)

#endif // OAIProfileDetail_H
