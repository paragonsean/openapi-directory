/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAppConfigPlayback.h
 *
 * 
 */

#ifndef OAIAppConfigPlayback_H
#define OAIAppConfigPlayback_H

#include <QJsonObject>

#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAppConfigPlayback : public OAIObject {
public:
    OAIAppConfigPlayback();
    OAIAppConfigPlayback(QString json);
    ~OAIAppConfigPlayback() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getChainPlayCountdown() const;
    void setChainPlayCountdown(const qint32 &chain_play_countdown);
    bool is_chain_play_countdown_Set() const;
    bool is_chain_play_countdown_Valid() const;

    qint32 getChainPlaySqueezeback() const;
    void setChainPlaySqueezeback(const qint32 &chain_play_squeezeback);
    bool is_chain_play_squeezeback_Set() const;
    bool is_chain_play_squeezeback_Valid() const;

    qint32 getChainPlayTimeout() const;
    void setChainPlayTimeout(const qint32 &chain_play_timeout);
    bool is_chain_play_timeout_Set() const;
    bool is_chain_play_timeout_Valid() const;

    qint32 getHeartbeatFrequency() const;
    void setHeartbeatFrequency(const qint32 &heartbeat_frequency);
    bool is_heartbeat_frequency_Set() const;
    bool is_heartbeat_frequency_Valid() const;

    QList<double> getViewEventPoints() const;
    void setViewEventPoints(const QList<double> &view_event_points);
    bool is_view_event_points_Set() const;
    bool is_view_event_points_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_chain_play_countdown;
    bool m_chain_play_countdown_isSet;
    bool m_chain_play_countdown_isValid;

    qint32 m_chain_play_squeezeback;
    bool m_chain_play_squeezeback_isSet;
    bool m_chain_play_squeezeback_isValid;

    qint32 m_chain_play_timeout;
    bool m_chain_play_timeout_isSet;
    bool m_chain_play_timeout_isValid;

    qint32 m_heartbeat_frequency;
    bool m_heartbeat_frequency_isSet;
    bool m_heartbeat_frequency_isValid;

    QList<double> m_view_event_points;
    bool m_view_event_points_isSet;
    bool m_view_event_points_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAppConfigPlayback)

#endif // OAIAppConfigPlayback_H
