/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBtPlanListItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBtPlanListItem::OAIBtPlanListItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBtPlanListItem::OAIBtPlanListItem() {
    this->initializeModel();
}

OAIBtPlanListItem::~OAIBtPlanListItem() {}

void OAIBtPlanListItem::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_cta_text_isSet = false;
    m_cta_text_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_ees07_plan_description_isSet = false;
    m_ees07_plan_description_isValid = false;

    m_ees07_plan_title_isSet = false;
    m_ees07_plan_title_isValid = false;

    m_ees07_title_isSet = false;
    m_ees07_title_isValid = false;

    m_header_text_isSet = false;
    m_header_text_isValid = false;

    m_hero_text_isSet = false;
    m_hero_text_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_interval_count_isSet = false;
    m_interval_count_isValid = false;

    m_long_text_isSet = false;
    m_long_text_isValid = false;

    m_nickname_isSet = false;
    m_nickname_isValid = false;

    m_no_thanks_text_isSet = false;
    m_no_thanks_text_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_switching_text_isSet = false;
    m_switching_text_isValid = false;

    m_terms_and_conditions_itunes_isSet = false;
    m_terms_and_conditions_itunes_isValid = false;

    m_terms_and_conditions_stripe_isSet = false;
    m_terms_and_conditions_stripe_isValid = false;

    m_trial_period_days_isSet = false;
    m_trial_period_days_isValid = false;
}

void OAIBtPlanListItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBtPlanListItem::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_cta_text_isValid = ::OpenAPI::fromJsonValue(m_cta_text, json[QString("ctaText")]);
    m_cta_text_isSet = !json[QString("ctaText")].isNull() && m_cta_text_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_ees07_plan_description_isValid = ::OpenAPI::fromJsonValue(m_ees07_plan_description, json[QString("ees07PlanDescription")]);
    m_ees07_plan_description_isSet = !json[QString("ees07PlanDescription")].isNull() && m_ees07_plan_description_isValid;

    m_ees07_plan_title_isValid = ::OpenAPI::fromJsonValue(m_ees07_plan_title, json[QString("ees07PlanTitle")]);
    m_ees07_plan_title_isSet = !json[QString("ees07PlanTitle")].isNull() && m_ees07_plan_title_isValid;

    m_ees07_title_isValid = ::OpenAPI::fromJsonValue(m_ees07_title, json[QString("ees07Title")]);
    m_ees07_title_isSet = !json[QString("ees07Title")].isNull() && m_ees07_title_isValid;

    m_header_text_isValid = ::OpenAPI::fromJsonValue(m_header_text, json[QString("headerText")]);
    m_header_text_isSet = !json[QString("headerText")].isNull() && m_header_text_isValid;

    m_hero_text_isValid = ::OpenAPI::fromJsonValue(m_hero_text, json[QString("heroText")]);
    m_hero_text_isSet = !json[QString("heroText")].isNull() && m_hero_text_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_interval_count_isValid = ::OpenAPI::fromJsonValue(m_interval_count, json[QString("intervalCount")]);
    m_interval_count_isSet = !json[QString("intervalCount")].isNull() && m_interval_count_isValid;

    m_long_text_isValid = ::OpenAPI::fromJsonValue(m_long_text, json[QString("longText")]);
    m_long_text_isSet = !json[QString("longText")].isNull() && m_long_text_isValid;

    m_nickname_isValid = ::OpenAPI::fromJsonValue(m_nickname, json[QString("nickname")]);
    m_nickname_isSet = !json[QString("nickname")].isNull() && m_nickname_isValid;

    m_no_thanks_text_isValid = ::OpenAPI::fromJsonValue(m_no_thanks_text, json[QString("noThanksText")]);
    m_no_thanks_text_isSet = !json[QString("noThanksText")].isNull() && m_no_thanks_text_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_switching_text_isValid = ::OpenAPI::fromJsonValue(m_switching_text, json[QString("switchingText")]);
    m_switching_text_isSet = !json[QString("switchingText")].isNull() && m_switching_text_isValid;

    m_terms_and_conditions_itunes_isValid = ::OpenAPI::fromJsonValue(m_terms_and_conditions_itunes, json[QString("termsAndConditionsItunes")]);
    m_terms_and_conditions_itunes_isSet = !json[QString("termsAndConditionsItunes")].isNull() && m_terms_and_conditions_itunes_isValid;

    m_terms_and_conditions_stripe_isValid = ::OpenAPI::fromJsonValue(m_terms_and_conditions_stripe, json[QString("termsAndConditionsStripe")]);
    m_terms_and_conditions_stripe_isSet = !json[QString("termsAndConditionsStripe")].isNull() && m_terms_and_conditions_stripe_isValid;

    m_trial_period_days_isValid = ::OpenAPI::fromJsonValue(m_trial_period_days, json[QString("trialPeriodDays")]);
    m_trial_period_days_isSet = !json[QString("trialPeriodDays")].isNull() && m_trial_period_days_isValid;
}

QString OAIBtPlanListItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBtPlanListItem::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_cta_text_isSet) {
        obj.insert(QString("ctaText"), ::OpenAPI::toJsonValue(m_cta_text));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_ees07_plan_description_isSet) {
        obj.insert(QString("ees07PlanDescription"), ::OpenAPI::toJsonValue(m_ees07_plan_description));
    }
    if (m_ees07_plan_title_isSet) {
        obj.insert(QString("ees07PlanTitle"), ::OpenAPI::toJsonValue(m_ees07_plan_title));
    }
    if (m_ees07_title_isSet) {
        obj.insert(QString("ees07Title"), ::OpenAPI::toJsonValue(m_ees07_title));
    }
    if (m_header_text_isSet) {
        obj.insert(QString("headerText"), ::OpenAPI::toJsonValue(m_header_text));
    }
    if (m_hero_text_isSet) {
        obj.insert(QString("heroText"), ::OpenAPI::toJsonValue(m_hero_text));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_interval_count_isSet) {
        obj.insert(QString("intervalCount"), ::OpenAPI::toJsonValue(m_interval_count));
    }
    if (m_long_text_isSet) {
        obj.insert(QString("longText"), ::OpenAPI::toJsonValue(m_long_text));
    }
    if (m_nickname_isSet) {
        obj.insert(QString("nickname"), ::OpenAPI::toJsonValue(m_nickname));
    }
    if (m_no_thanks_text_isSet) {
        obj.insert(QString("noThanksText"), ::OpenAPI::toJsonValue(m_no_thanks_text));
    }
    if (m_product_isSet) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_switching_text_isSet) {
        obj.insert(QString("switchingText"), ::OpenAPI::toJsonValue(m_switching_text));
    }
    if (m_terms_and_conditions_itunes_isSet) {
        obj.insert(QString("termsAndConditionsItunes"), ::OpenAPI::toJsonValue(m_terms_and_conditions_itunes));
    }
    if (m_terms_and_conditions_stripe_isSet) {
        obj.insert(QString("termsAndConditionsStripe"), ::OpenAPI::toJsonValue(m_terms_and_conditions_stripe));
    }
    if (m_trial_period_days_isSet) {
        obj.insert(QString("trialPeriodDays"), ::OpenAPI::toJsonValue(m_trial_period_days));
    }
    return obj;
}

float OAIBtPlanListItem::getAmount() const {
    return m_amount;
}
void OAIBtPlanListItem::setAmount(const float &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIBtPlanListItem::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIBtPlanListItem::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIBtPlanListItem::getCtaText() const {
    return m_cta_text;
}
void OAIBtPlanListItem::setCtaText(const QString &cta_text) {
    m_cta_text = cta_text;
    m_cta_text_isSet = true;
}

bool OAIBtPlanListItem::is_cta_text_Set() const{
    return m_cta_text_isSet;
}

bool OAIBtPlanListItem::is_cta_text_Valid() const{
    return m_cta_text_isValid;
}

QString OAIBtPlanListItem::getCurrency() const {
    return m_currency;
}
void OAIBtPlanListItem::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIBtPlanListItem::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIBtPlanListItem::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIBtPlanListItem::getDescription() const {
    return m_description;
}
void OAIBtPlanListItem::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIBtPlanListItem::is_description_Set() const{
    return m_description_isSet;
}

bool OAIBtPlanListItem::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIBtPlanListItem::getEes07PlanDescription() const {
    return m_ees07_plan_description;
}
void OAIBtPlanListItem::setEes07PlanDescription(const QString &ees07_plan_description) {
    m_ees07_plan_description = ees07_plan_description;
    m_ees07_plan_description_isSet = true;
}

bool OAIBtPlanListItem::is_ees07_plan_description_Set() const{
    return m_ees07_plan_description_isSet;
}

bool OAIBtPlanListItem::is_ees07_plan_description_Valid() const{
    return m_ees07_plan_description_isValid;
}

QString OAIBtPlanListItem::getEes07PlanTitle() const {
    return m_ees07_plan_title;
}
void OAIBtPlanListItem::setEes07PlanTitle(const QString &ees07_plan_title) {
    m_ees07_plan_title = ees07_plan_title;
    m_ees07_plan_title_isSet = true;
}

bool OAIBtPlanListItem::is_ees07_plan_title_Set() const{
    return m_ees07_plan_title_isSet;
}

bool OAIBtPlanListItem::is_ees07_plan_title_Valid() const{
    return m_ees07_plan_title_isValid;
}

QString OAIBtPlanListItem::getEes07Title() const {
    return m_ees07_title;
}
void OAIBtPlanListItem::setEes07Title(const QString &ees07_title) {
    m_ees07_title = ees07_title;
    m_ees07_title_isSet = true;
}

bool OAIBtPlanListItem::is_ees07_title_Set() const{
    return m_ees07_title_isSet;
}

bool OAIBtPlanListItem::is_ees07_title_Valid() const{
    return m_ees07_title_isValid;
}

QString OAIBtPlanListItem::getHeaderText() const {
    return m_header_text;
}
void OAIBtPlanListItem::setHeaderText(const QString &header_text) {
    m_header_text = header_text;
    m_header_text_isSet = true;
}

bool OAIBtPlanListItem::is_header_text_Set() const{
    return m_header_text_isSet;
}

bool OAIBtPlanListItem::is_header_text_Valid() const{
    return m_header_text_isValid;
}

QString OAIBtPlanListItem::getHeroText() const {
    return m_hero_text;
}
void OAIBtPlanListItem::setHeroText(const QString &hero_text) {
    m_hero_text = hero_text;
    m_hero_text_isSet = true;
}

bool OAIBtPlanListItem::is_hero_text_Set() const{
    return m_hero_text_isSet;
}

bool OAIBtPlanListItem::is_hero_text_Valid() const{
    return m_hero_text_isValid;
}

QString OAIBtPlanListItem::getId() const {
    return m_id;
}
void OAIBtPlanListItem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBtPlanListItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBtPlanListItem::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIBtPlanListItem::getInterval() const {
    return m_interval;
}
void OAIBtPlanListItem::setInterval(const QString &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIBtPlanListItem::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIBtPlanListItem::is_interval_Valid() const{
    return m_interval_isValid;
}

qint32 OAIBtPlanListItem::getIntervalCount() const {
    return m_interval_count;
}
void OAIBtPlanListItem::setIntervalCount(const qint32 &interval_count) {
    m_interval_count = interval_count;
    m_interval_count_isSet = true;
}

bool OAIBtPlanListItem::is_interval_count_Set() const{
    return m_interval_count_isSet;
}

bool OAIBtPlanListItem::is_interval_count_Valid() const{
    return m_interval_count_isValid;
}

QString OAIBtPlanListItem::getLongText() const {
    return m_long_text;
}
void OAIBtPlanListItem::setLongText(const QString &long_text) {
    m_long_text = long_text;
    m_long_text_isSet = true;
}

bool OAIBtPlanListItem::is_long_text_Set() const{
    return m_long_text_isSet;
}

bool OAIBtPlanListItem::is_long_text_Valid() const{
    return m_long_text_isValid;
}

QString OAIBtPlanListItem::getNickname() const {
    return m_nickname;
}
void OAIBtPlanListItem::setNickname(const QString &nickname) {
    m_nickname = nickname;
    m_nickname_isSet = true;
}

bool OAIBtPlanListItem::is_nickname_Set() const{
    return m_nickname_isSet;
}

bool OAIBtPlanListItem::is_nickname_Valid() const{
    return m_nickname_isValid;
}

QString OAIBtPlanListItem::getNoThanksText() const {
    return m_no_thanks_text;
}
void OAIBtPlanListItem::setNoThanksText(const QString &no_thanks_text) {
    m_no_thanks_text = no_thanks_text;
    m_no_thanks_text_isSet = true;
}

bool OAIBtPlanListItem::is_no_thanks_text_Set() const{
    return m_no_thanks_text_isSet;
}

bool OAIBtPlanListItem::is_no_thanks_text_Valid() const{
    return m_no_thanks_text_isValid;
}

QString OAIBtPlanListItem::getProduct() const {
    return m_product;
}
void OAIBtPlanListItem::setProduct(const QString &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAIBtPlanListItem::is_product_Set() const{
    return m_product_isSet;
}

bool OAIBtPlanListItem::is_product_Valid() const{
    return m_product_isValid;
}

QString OAIBtPlanListItem::getSwitchingText() const {
    return m_switching_text;
}
void OAIBtPlanListItem::setSwitchingText(const QString &switching_text) {
    m_switching_text = switching_text;
    m_switching_text_isSet = true;
}

bool OAIBtPlanListItem::is_switching_text_Set() const{
    return m_switching_text_isSet;
}

bool OAIBtPlanListItem::is_switching_text_Valid() const{
    return m_switching_text_isValid;
}

QString OAIBtPlanListItem::getTermsAndConditionsItunes() const {
    return m_terms_and_conditions_itunes;
}
void OAIBtPlanListItem::setTermsAndConditionsItunes(const QString &terms_and_conditions_itunes) {
    m_terms_and_conditions_itunes = terms_and_conditions_itunes;
    m_terms_and_conditions_itunes_isSet = true;
}

bool OAIBtPlanListItem::is_terms_and_conditions_itunes_Set() const{
    return m_terms_and_conditions_itunes_isSet;
}

bool OAIBtPlanListItem::is_terms_and_conditions_itunes_Valid() const{
    return m_terms_and_conditions_itunes_isValid;
}

QString OAIBtPlanListItem::getTermsAndConditionsStripe() const {
    return m_terms_and_conditions_stripe;
}
void OAIBtPlanListItem::setTermsAndConditionsStripe(const QString &terms_and_conditions_stripe) {
    m_terms_and_conditions_stripe = terms_and_conditions_stripe;
    m_terms_and_conditions_stripe_isSet = true;
}

bool OAIBtPlanListItem::is_terms_and_conditions_stripe_Set() const{
    return m_terms_and_conditions_stripe_isSet;
}

bool OAIBtPlanListItem::is_terms_and_conditions_stripe_Valid() const{
    return m_terms_and_conditions_stripe_isValid;
}

qint32 OAIBtPlanListItem::getTrialPeriodDays() const {
    return m_trial_period_days;
}
void OAIBtPlanListItem::setTrialPeriodDays(const qint32 &trial_period_days) {
    m_trial_period_days = trial_period_days;
    m_trial_period_days_isSet = true;
}

bool OAIBtPlanListItem::is_trial_period_days_Set() const{
    return m_trial_period_days_isSet;
}

bool OAIBtPlanListItem::is_trial_period_days_Valid() const{
    return m_trial_period_days_isValid;
}

bool OAIBtPlanListItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cta_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ees07_plan_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ees07_plan_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ees07_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hero_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nickname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_thanks_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_switching_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms_and_conditions_itunes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms_and_conditions_stripe_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trial_period_days_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBtPlanListItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cta_text_isValid && m_currency_isValid && m_description_isValid && m_header_text_isValid && m_hero_text_isValid && m_id_isValid && m_long_text_isValid && m_nickname_isValid && m_product_isValid && m_trial_period_days_isValid && true;
}

} // namespace OpenAPI
