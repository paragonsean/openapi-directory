/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISamsungPreview.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISamsungPreview::OAISamsungPreview(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISamsungPreview::OAISamsungPreview() {
    this->initializeModel();
}

OAISamsungPreview::~OAISamsungPreview() {}

void OAISamsungPreview::initializeModel() {

    m_expires_isSet = false;
    m_expires_isValid = false;

    m_expires_only_isSet = false;
    m_expires_only_isValid = false;

    m_sections_isSet = false;
    m_sections_isValid = false;
}

void OAISamsungPreview::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISamsungPreview::fromJsonObject(QJsonObject json) {

    m_expires_isValid = ::OpenAPI::fromJsonValue(m_expires, json[QString("expires")]);
    m_expires_isSet = !json[QString("expires")].isNull() && m_expires_isValid;

    m_expires_only_isValid = ::OpenAPI::fromJsonValue(m_expires_only, json[QString("expires_only")]);
    m_expires_only_isSet = !json[QString("expires_only")].isNull() && m_expires_only_isValid;

    m_sections_isValid = ::OpenAPI::fromJsonValue(m_sections, json[QString("sections")]);
    m_sections_isSet = !json[QString("sections")].isNull() && m_sections_isValid;
}

QString OAISamsungPreview::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISamsungPreview::asJsonObject() const {
    QJsonObject obj;
    if (m_expires_isSet) {
        obj.insert(QString("expires"), ::OpenAPI::toJsonValue(m_expires));
    }
    if (m_expires_only_isSet) {
        obj.insert(QString("expires_only"), ::OpenAPI::toJsonValue(m_expires_only));
    }
    if (m_sections.size() > 0) {
        obj.insert(QString("sections"), ::OpenAPI::toJsonValue(m_sections));
    }
    return obj;
}

qint64 OAISamsungPreview::getExpires() const {
    return m_expires;
}
void OAISamsungPreview::setExpires(const qint64 &expires) {
    m_expires = expires;
    m_expires_isSet = true;
}

bool OAISamsungPreview::is_expires_Set() const{
    return m_expires_isSet;
}

bool OAISamsungPreview::is_expires_Valid() const{
    return m_expires_isValid;
}

bool OAISamsungPreview::isExpiresOnly() const {
    return m_expires_only;
}
void OAISamsungPreview::setExpiresOnly(const bool &expires_only) {
    m_expires_only = expires_only;
    m_expires_only_isSet = true;
}

bool OAISamsungPreview::is_expires_only_Set() const{
    return m_expires_only_isSet;
}

bool OAISamsungPreview::is_expires_only_Valid() const{
    return m_expires_only_isValid;
}

QList<OAISamsungPreviewSection> OAISamsungPreview::getSections() const {
    return m_sections;
}
void OAISamsungPreview::setSections(const QList<OAISamsungPreviewSection> &sections) {
    m_sections = sections;
    m_sections_isSet = true;
}

bool OAISamsungPreview::is_sections_Set() const{
    return m_sections_isSet;
}

bool OAISamsungPreview::is_sections_Valid() const{
    return m_sections_isValid;
}

bool OAISamsungPreview::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expires_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sections.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISamsungPreview::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sections_isValid && true;
}

} // namespace OpenAPI
