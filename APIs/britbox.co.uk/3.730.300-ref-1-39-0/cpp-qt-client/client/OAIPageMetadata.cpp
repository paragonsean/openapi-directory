/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPageMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPageMetadata::OAIPageMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPageMetadata::OAIPageMetadata() {
    this->initializeModel();
}

OAIPageMetadata::~OAIPageMetadata() {}

void OAIPageMetadata::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;

    m_segments_isSet = false;
    m_segments_isValid = false;
}

void OAIPageMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPageMetadata::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("keywords")]);
    m_keywords_isSet = !json[QString("keywords")].isNull() && m_keywords_isValid;

    m_segments_isValid = ::OpenAPI::fromJsonValue(m_segments, json[QString("segments")]);
    m_segments_isSet = !json[QString("segments")].isNull() && m_segments_isValid;
}

QString OAIPageMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPageMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_keywords.size() > 0) {
        obj.insert(QString("keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    if (m_segments.size() > 0) {
        obj.insert(QString("segments"), ::OpenAPI::toJsonValue(m_segments));
    }
    return obj;
}

QString OAIPageMetadata::getDescription() const {
    return m_description;
}
void OAIPageMetadata::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPageMetadata::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPageMetadata::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAIPageMetadata::getKeywords() const {
    return m_keywords;
}
void OAIPageMetadata::setKeywords(const QList<QString> &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAIPageMetadata::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAIPageMetadata::is_keywords_Valid() const{
    return m_keywords_isValid;
}

QList<QString> OAIPageMetadata::getSegments() const {
    return m_segments;
}
void OAIPageMetadata::setSegments(const QList<QString> &segments) {
    m_segments = segments;
    m_segments_isSet = true;
}

bool OAIPageMetadata::is_segments_Set() const{
    return m_segments_isSet;
}

bool OAIPageMetadata::is_segments_Valid() const{
    return m_segments_isValid;
}

bool OAIPageMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_segments.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPageMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
