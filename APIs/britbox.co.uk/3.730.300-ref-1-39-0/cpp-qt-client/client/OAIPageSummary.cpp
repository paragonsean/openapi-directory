/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPageSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPageSummary::OAIPageSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPageSummary::OAIPageSummary() {
    this->initializeModel();
}

OAIPageSummary::~OAIPageSummary() {}

void OAIPageSummary::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_static_isSet = false;
    m_is_static_isValid = false;

    m_is_system_page_isSet = false;
    m_is_system_page_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIPageSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPageSummary::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_static_isValid = ::OpenAPI::fromJsonValue(m_is_static, json[QString("isStatic")]);
    m_is_static_isSet = !json[QString("isStatic")].isNull() && m_is_static_isValid;

    m_is_system_page_isValid = ::OpenAPI::fromJsonValue(m_is_system_page, json[QString("isSystemPage")]);
    m_is_system_page_isSet = !json[QString("isSystemPage")].isNull() && m_is_system_page_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIPageSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPageSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_static_isSet) {
        obj.insert(QString("isStatic"), ::OpenAPI::toJsonValue(m_is_static));
    }
    if (m_is_system_page_isSet) {
        obj.insert(QString("isSystemPage"), ::OpenAPI::toJsonValue(m_is_system_page));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_r_template_isSet) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIPageSummary::getId() const {
    return m_id;
}
void OAIPageSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPageSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPageSummary::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIPageSummary::isIsStatic() const {
    return m_is_static;
}
void OAIPageSummary::setIsStatic(const bool &is_static) {
    m_is_static = is_static;
    m_is_static_isSet = true;
}

bool OAIPageSummary::is_is_static_Set() const{
    return m_is_static_isSet;
}

bool OAIPageSummary::is_is_static_Valid() const{
    return m_is_static_isValid;
}

bool OAIPageSummary::isIsSystemPage() const {
    return m_is_system_page;
}
void OAIPageSummary::setIsSystemPage(const bool &is_system_page) {
    m_is_system_page = is_system_page;
    m_is_system_page_isSet = true;
}

bool OAIPageSummary::is_is_system_page_Set() const{
    return m_is_system_page_isSet;
}

bool OAIPageSummary::is_is_system_page_Valid() const{
    return m_is_system_page_isValid;
}

QString OAIPageSummary::getKey() const {
    return m_key;
}
void OAIPageSummary::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIPageSummary::is_key_Set() const{
    return m_key_isSet;
}

bool OAIPageSummary::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIPageSummary::getPath() const {
    return m_path;
}
void OAIPageSummary::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIPageSummary::is_path_Set() const{
    return m_path_isSet;
}

bool OAIPageSummary::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIPageSummary::getRTemplate() const {
    return m_r_template;
}
void OAIPageSummary::setRTemplate(const QString &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAIPageSummary::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAIPageSummary::is_r_template_Valid() const{
    return m_r_template_isValid;
}

QString OAIPageSummary::getTitle() const {
    return m_title;
}
void OAIPageSummary::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPageSummary::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPageSummary::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIPageSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_static_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_system_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPageSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_is_static_isValid && m_is_system_page_isValid && m_path_isValid && m_r_template_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
