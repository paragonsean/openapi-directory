/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClassification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClassification::OAIClassification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClassification::OAIClassification() {
    this->initializeModel();
}

OAIClassification::~OAIClassification() {}

void OAIClassification::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_advisory_text_isSet = false;
    m_advisory_text_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_system_isSet = false;
    m_system_isValid = false;
}

void OAIClassification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClassification::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_advisory_text_isValid = ::OpenAPI::fromJsonValue(m_advisory_text, json[QString("advisoryText")]);
    m_advisory_text_isSet = !json[QString("advisoryText")].isNull() && m_advisory_text_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_system_isValid = ::OpenAPI::fromJsonValue(m_system, json[QString("system")]);
    m_system_isSet = !json[QString("system")].isNull() && m_system_isValid;
}

QString OAIClassification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClassification::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_advisory_text_isSet) {
        obj.insert(QString("advisoryText"), ::OpenAPI::toJsonValue(m_advisory_text));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_level_isSet) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_system_isSet) {
        obj.insert(QString("system"), ::OpenAPI::toJsonValue(m_system));
    }
    return obj;
}

QString OAIClassification::getCode() const {
    return m_code;
}
void OAIClassification::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIClassification::is_code_Set() const{
    return m_code_isSet;
}

bool OAIClassification::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIClassification::getName() const {
    return m_name;
}
void OAIClassification::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIClassification::is_name_Set() const{
    return m_name_isSet;
}

bool OAIClassification::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIClassification::getAdvisoryText() const {
    return m_advisory_text;
}
void OAIClassification::setAdvisoryText(const QString &advisory_text) {
    m_advisory_text = advisory_text;
    m_advisory_text_isSet = true;
}

bool OAIClassification::is_advisory_text_Set() const{
    return m_advisory_text_isSet;
}

bool OAIClassification::is_advisory_text_Valid() const{
    return m_advisory_text_isValid;
}

QMap<QString, QString> OAIClassification::getImages() const {
    return m_images;
}
void OAIClassification::setImages(const QMap<QString, QString> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIClassification::is_images_Set() const{
    return m_images_isSet;
}

bool OAIClassification::is_images_Valid() const{
    return m_images_isValid;
}

qint32 OAIClassification::getLevel() const {
    return m_level;
}
void OAIClassification::setLevel(const qint32 &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAIClassification::is_level_Set() const{
    return m_level_isSet;
}

bool OAIClassification::is_level_Valid() const{
    return m_level_isValid;
}

QString OAIClassification::getSystem() const {
    return m_system;
}
void OAIClassification::setSystem(const QString &system) {
    m_system = system;
    m_system_isSet = true;
}

bool OAIClassification::is_system_Set() const{
    return m_system_isSet;
}

bool OAIClassification::is_system_Valid() const{
    return m_system_isValid;
}

bool OAIClassification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_advisory_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClassification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_name_isValid && m_images_isValid && m_level_isValid && m_system_isValid && true;
}

} // namespace OpenAPI
