/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPlan.h
 *
 * 
 */

#ifndef OAIPlan_H
#define OAIPlan_H

#include <QJsonObject>

#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPlan : public OAIObject {
public:
    OAIPlan();
    OAIPlan(QString json);
    ~OAIPlan() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAlias() const;
    void setAlias(const QString &alias);
    bool is_alias_Set() const;
    bool is_alias_Valid() const;

    QList<QString> getBenefits() const;
    void setBenefits(const QList<QString> &benefits);
    bool is_benefits_Set() const;
    bool is_benefits_Valid() const;

    qint32 getBillingPeriodFrequency() const;
    void setBillingPeriodFrequency(const qint32 &billing_period_frequency);
    bool is_billing_period_frequency_Set() const;
    bool is_billing_period_frequency_Valid() const;

    QString getBillingPeriodType() const;
    void setBillingPeriodType(const QString &billing_period_type);
    bool is_billing_period_type_Set() const;
    bool is_billing_period_type_Valid() const;

    QString getCurrency() const;
    void setCurrency(const QString &currency);
    bool is_currency_Set() const;
    bool is_currency_Valid() const;

    QMap<QString, QJsonValue> getCustomFields() const;
    void setCustomFields(const QMap<QString, QJsonValue> &custom_fields);
    bool is_custom_fields_Set() const;
    bool is_custom_fields_Valid() const;

    bool isHasTrialPeriod() const;
    void setHasTrialPeriod(const bool &has_trial_period);
    bool is_has_trial_period_Set() const;
    bool is_has_trial_period_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsActive() const;
    void setIsActive(const bool &is_active);
    bool is_is_active_Set() const;
    bool is_is_active_Valid() const;

    bool isIsFeatured() const;
    void setIsFeatured(const bool &is_featured);
    bool is_is_featured_Set() const;
    bool is_is_featured_Valid() const;

    bool isIsPrivate() const;
    void setIsPrivate(const bool &is_private);
    bool is_is_private_Set() const;
    bool is_is_private_Valid() const;

    float getPrice() const;
    void setPrice(const float &price);
    bool is_price_Set() const;
    bool is_price_Valid() const;

    QString getRevenueType() const;
    void setRevenueType(const QString &revenue_type);
    bool is_revenue_type_Set() const;
    bool is_revenue_type_Valid() const;

    QString getSubscriptionCode() const;
    void setSubscriptionCode(const QString &subscription_code);
    bool is_subscription_code_Set() const;
    bool is_subscription_code_Valid() const;

    QString getTagline() const;
    void setTagline(const QString &tagline);
    bool is_tagline_Set() const;
    bool is_tagline_Valid() const;

    QString getTermsAndConditions() const;
    void setTermsAndConditions(const QString &terms_and_conditions);
    bool is_terms_and_conditions_Set() const;
    bool is_terms_and_conditions_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    qint32 getTrialPeriodDays() const;
    void setTrialPeriodDays(const qint32 &trial_period_days);
    bool is_trial_period_days_Set() const;
    bool is_trial_period_days_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_alias;
    bool m_alias_isSet;
    bool m_alias_isValid;

    QList<QString> m_benefits;
    bool m_benefits_isSet;
    bool m_benefits_isValid;

    qint32 m_billing_period_frequency;
    bool m_billing_period_frequency_isSet;
    bool m_billing_period_frequency_isValid;

    QString m_billing_period_type;
    bool m_billing_period_type_isSet;
    bool m_billing_period_type_isValid;

    QString m_currency;
    bool m_currency_isSet;
    bool m_currency_isValid;

    QMap<QString, QJsonValue> m_custom_fields;
    bool m_custom_fields_isSet;
    bool m_custom_fields_isValid;

    bool m_has_trial_period;
    bool m_has_trial_period_isSet;
    bool m_has_trial_period_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_is_active;
    bool m_is_active_isSet;
    bool m_is_active_isValid;

    bool m_is_featured;
    bool m_is_featured_isSet;
    bool m_is_featured_isValid;

    bool m_is_private;
    bool m_is_private_isSet;
    bool m_is_private_isValid;

    float m_price;
    bool m_price_isSet;
    bool m_price_isValid;

    QString m_revenue_type;
    bool m_revenue_type_isSet;
    bool m_revenue_type_isValid;

    QString m_subscription_code;
    bool m_subscription_code_isSet;
    bool m_subscription_code_isValid;

    QString m_tagline;
    bool m_tagline_isSet;
    bool m_tagline_isValid;

    QString m_terms_and_conditions;
    bool m_terms_and_conditions_isSet;
    bool m_terms_and_conditions_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    qint32 m_trial_period_days;
    bool m_trial_period_days_isSet;
    bool m_trial_period_days_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPlan)

#endif // OAIPlan_H
