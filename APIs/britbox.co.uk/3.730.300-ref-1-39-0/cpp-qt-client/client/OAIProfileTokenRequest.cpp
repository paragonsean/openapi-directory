/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProfileTokenRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProfileTokenRequest::OAIProfileTokenRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProfileTokenRequest::OAIProfileTokenRequest() {
    this->initializeModel();
}

OAIProfileTokenRequest::~OAIProfileTokenRequest() {}

void OAIProfileTokenRequest::initializeModel() {

    m_cookie_type_isSet = false;
    m_cookie_type_isValid = false;

    m_pin_isSet = false;
    m_pin_isValid = false;

    m_profile_id_isSet = false;
    m_profile_id_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;
}

void OAIProfileTokenRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProfileTokenRequest::fromJsonObject(QJsonObject json) {

    m_cookie_type_isValid = ::OpenAPI::fromJsonValue(m_cookie_type, json[QString("cookieType")]);
    m_cookie_type_isSet = !json[QString("cookieType")].isNull() && m_cookie_type_isValid;

    m_pin_isValid = ::OpenAPI::fromJsonValue(m_pin, json[QString("pin")]);
    m_pin_isSet = !json[QString("pin")].isNull() && m_pin_isValid;

    m_profile_id_isValid = ::OpenAPI::fromJsonValue(m_profile_id, json[QString("profileId")]);
    m_profile_id_isSet = !json[QString("profileId")].isNull() && m_profile_id_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;
}

QString OAIProfileTokenRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProfileTokenRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cookie_type_isSet) {
        obj.insert(QString("cookieType"), ::OpenAPI::toJsonValue(m_cookie_type));
    }
    if (m_pin_isSet) {
        obj.insert(QString("pin"), ::OpenAPI::toJsonValue(m_pin));
    }
    if (m_profile_id_isSet) {
        obj.insert(QString("profileId"), ::OpenAPI::toJsonValue(m_profile_id));
    }
    if (m_scopes.size() > 0) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    return obj;
}

QString OAIProfileTokenRequest::getCookieType() const {
    return m_cookie_type;
}
void OAIProfileTokenRequest::setCookieType(const QString &cookie_type) {
    m_cookie_type = cookie_type;
    m_cookie_type_isSet = true;
}

bool OAIProfileTokenRequest::is_cookie_type_Set() const{
    return m_cookie_type_isSet;
}

bool OAIProfileTokenRequest::is_cookie_type_Valid() const{
    return m_cookie_type_isValid;
}

QString OAIProfileTokenRequest::getPin() const {
    return m_pin;
}
void OAIProfileTokenRequest::setPin(const QString &pin) {
    m_pin = pin;
    m_pin_isSet = true;
}

bool OAIProfileTokenRequest::is_pin_Set() const{
    return m_pin_isSet;
}

bool OAIProfileTokenRequest::is_pin_Valid() const{
    return m_pin_isValid;
}

QString OAIProfileTokenRequest::getProfileId() const {
    return m_profile_id;
}
void OAIProfileTokenRequest::setProfileId(const QString &profile_id) {
    m_profile_id = profile_id;
    m_profile_id_isSet = true;
}

bool OAIProfileTokenRequest::is_profile_id_Set() const{
    return m_profile_id_isSet;
}

bool OAIProfileTokenRequest::is_profile_id_Valid() const{
    return m_profile_id_isValid;
}

QList<QString> OAIProfileTokenRequest::getScopes() const {
    return m_scopes;
}
void OAIProfileTokenRequest::setScopes(const QList<QString> &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIProfileTokenRequest::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIProfileTokenRequest::is_scopes_Valid() const{
    return m_scopes_isValid;
}

bool OAIProfileTokenRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cookie_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProfileTokenRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_profile_id_isValid && m_scopes_isValid && true;
}

} // namespace OpenAPI
