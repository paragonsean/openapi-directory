/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlan.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlan::OAIPlan(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlan::OAIPlan() {
    this->initializeModel();
}

OAIPlan::~OAIPlan() {}

void OAIPlan::initializeModel() {

    m_alias_isSet = false;
    m_alias_isValid = false;

    m_benefits_isSet = false;
    m_benefits_isValid = false;

    m_billing_period_frequency_isSet = false;
    m_billing_period_frequency_isValid = false;

    m_billing_period_type_isSet = false;
    m_billing_period_type_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_has_trial_period_isSet = false;
    m_has_trial_period_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_is_featured_isSet = false;
    m_is_featured_isValid = false;

    m_is_private_isSet = false;
    m_is_private_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_revenue_type_isSet = false;
    m_revenue_type_isValid = false;

    m_subscription_code_isSet = false;
    m_subscription_code_isValid = false;

    m_tagline_isSet = false;
    m_tagline_isValid = false;

    m_terms_and_conditions_isSet = false;
    m_terms_and_conditions_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_trial_period_days_isSet = false;
    m_trial_period_days_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPlan::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlan::fromJsonObject(QJsonObject json) {

    m_alias_isValid = ::OpenAPI::fromJsonValue(m_alias, json[QString("alias")]);
    m_alias_isSet = !json[QString("alias")].isNull() && m_alias_isValid;

    m_benefits_isValid = ::OpenAPI::fromJsonValue(m_benefits, json[QString("benefits")]);
    m_benefits_isSet = !json[QString("benefits")].isNull() && m_benefits_isValid;

    m_billing_period_frequency_isValid = ::OpenAPI::fromJsonValue(m_billing_period_frequency, json[QString("billingPeriodFrequency")]);
    m_billing_period_frequency_isSet = !json[QString("billingPeriodFrequency")].isNull() && m_billing_period_frequency_isValid;

    m_billing_period_type_isValid = ::OpenAPI::fromJsonValue(m_billing_period_type, json[QString("billingPeriodType")]);
    m_billing_period_type_isSet = !json[QString("billingPeriodType")].isNull() && m_billing_period_type_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("customFields")]);
    m_custom_fields_isSet = !json[QString("customFields")].isNull() && m_custom_fields_isValid;

    m_has_trial_period_isValid = ::OpenAPI::fromJsonValue(m_has_trial_period, json[QString("hasTrialPeriod")]);
    m_has_trial_period_isSet = !json[QString("hasTrialPeriod")].isNull() && m_has_trial_period_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_is_featured_isValid = ::OpenAPI::fromJsonValue(m_is_featured, json[QString("isFeatured")]);
    m_is_featured_isSet = !json[QString("isFeatured")].isNull() && m_is_featured_isValid;

    m_is_private_isValid = ::OpenAPI::fromJsonValue(m_is_private, json[QString("isPrivate")]);
    m_is_private_isSet = !json[QString("isPrivate")].isNull() && m_is_private_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_revenue_type_isValid = ::OpenAPI::fromJsonValue(m_revenue_type, json[QString("revenueType")]);
    m_revenue_type_isSet = !json[QString("revenueType")].isNull() && m_revenue_type_isValid;

    m_subscription_code_isValid = ::OpenAPI::fromJsonValue(m_subscription_code, json[QString("subscriptionCode")]);
    m_subscription_code_isSet = !json[QString("subscriptionCode")].isNull() && m_subscription_code_isValid;

    m_tagline_isValid = ::OpenAPI::fromJsonValue(m_tagline, json[QString("tagline")]);
    m_tagline_isSet = !json[QString("tagline")].isNull() && m_tagline_isValid;

    m_terms_and_conditions_isValid = ::OpenAPI::fromJsonValue(m_terms_and_conditions, json[QString("termsAndConditions")]);
    m_terms_and_conditions_isSet = !json[QString("termsAndConditions")].isNull() && m_terms_and_conditions_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_trial_period_days_isValid = ::OpenAPI::fromJsonValue(m_trial_period_days, json[QString("trialPeriodDays")]);
    m_trial_period_days_isSet = !json[QString("trialPeriodDays")].isNull() && m_trial_period_days_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPlan::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlan::asJsonObject() const {
    QJsonObject obj;
    if (m_alias_isSet) {
        obj.insert(QString("alias"), ::OpenAPI::toJsonValue(m_alias));
    }
    if (m_benefits.size() > 0) {
        obj.insert(QString("benefits"), ::OpenAPI::toJsonValue(m_benefits));
    }
    if (m_billing_period_frequency_isSet) {
        obj.insert(QString("billingPeriodFrequency"), ::OpenAPI::toJsonValue(m_billing_period_frequency));
    }
    if (m_billing_period_type_isSet) {
        obj.insert(QString("billingPeriodType"), ::OpenAPI::toJsonValue(m_billing_period_type));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("customFields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_has_trial_period_isSet) {
        obj.insert(QString("hasTrialPeriod"), ::OpenAPI::toJsonValue(m_has_trial_period));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_is_featured_isSet) {
        obj.insert(QString("isFeatured"), ::OpenAPI::toJsonValue(m_is_featured));
    }
    if (m_is_private_isSet) {
        obj.insert(QString("isPrivate"), ::OpenAPI::toJsonValue(m_is_private));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_revenue_type_isSet) {
        obj.insert(QString("revenueType"), ::OpenAPI::toJsonValue(m_revenue_type));
    }
    if (m_subscription_code_isSet) {
        obj.insert(QString("subscriptionCode"), ::OpenAPI::toJsonValue(m_subscription_code));
    }
    if (m_tagline_isSet) {
        obj.insert(QString("tagline"), ::OpenAPI::toJsonValue(m_tagline));
    }
    if (m_terms_and_conditions_isSet) {
        obj.insert(QString("termsAndConditions"), ::OpenAPI::toJsonValue(m_terms_and_conditions));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_trial_period_days_isSet) {
        obj.insert(QString("trialPeriodDays"), ::OpenAPI::toJsonValue(m_trial_period_days));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIPlan::getAlias() const {
    return m_alias;
}
void OAIPlan::setAlias(const QString &alias) {
    m_alias = alias;
    m_alias_isSet = true;
}

bool OAIPlan::is_alias_Set() const{
    return m_alias_isSet;
}

bool OAIPlan::is_alias_Valid() const{
    return m_alias_isValid;
}

QList<QString> OAIPlan::getBenefits() const {
    return m_benefits;
}
void OAIPlan::setBenefits(const QList<QString> &benefits) {
    m_benefits = benefits;
    m_benefits_isSet = true;
}

bool OAIPlan::is_benefits_Set() const{
    return m_benefits_isSet;
}

bool OAIPlan::is_benefits_Valid() const{
    return m_benefits_isValid;
}

qint32 OAIPlan::getBillingPeriodFrequency() const {
    return m_billing_period_frequency;
}
void OAIPlan::setBillingPeriodFrequency(const qint32 &billing_period_frequency) {
    m_billing_period_frequency = billing_period_frequency;
    m_billing_period_frequency_isSet = true;
}

bool OAIPlan::is_billing_period_frequency_Set() const{
    return m_billing_period_frequency_isSet;
}

bool OAIPlan::is_billing_period_frequency_Valid() const{
    return m_billing_period_frequency_isValid;
}

QString OAIPlan::getBillingPeriodType() const {
    return m_billing_period_type;
}
void OAIPlan::setBillingPeriodType(const QString &billing_period_type) {
    m_billing_period_type = billing_period_type;
    m_billing_period_type_isSet = true;
}

bool OAIPlan::is_billing_period_type_Set() const{
    return m_billing_period_type_isSet;
}

bool OAIPlan::is_billing_period_type_Valid() const{
    return m_billing_period_type_isValid;
}

QString OAIPlan::getCurrency() const {
    return m_currency;
}
void OAIPlan::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIPlan::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIPlan::is_currency_Valid() const{
    return m_currency_isValid;
}

QMap<QString, QJsonValue> OAIPlan::getCustomFields() const {
    return m_custom_fields;
}
void OAIPlan::setCustomFields(const QMap<QString, QJsonValue> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIPlan::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIPlan::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

bool OAIPlan::isHasTrialPeriod() const {
    return m_has_trial_period;
}
void OAIPlan::setHasTrialPeriod(const bool &has_trial_period) {
    m_has_trial_period = has_trial_period;
    m_has_trial_period_isSet = true;
}

bool OAIPlan::is_has_trial_period_Set() const{
    return m_has_trial_period_isSet;
}

bool OAIPlan::is_has_trial_period_Valid() const{
    return m_has_trial_period_isValid;
}

QString OAIPlan::getId() const {
    return m_id;
}
void OAIPlan::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPlan::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPlan::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIPlan::isIsActive() const {
    return m_is_active;
}
void OAIPlan::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIPlan::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIPlan::is_is_active_Valid() const{
    return m_is_active_isValid;
}

bool OAIPlan::isIsFeatured() const {
    return m_is_featured;
}
void OAIPlan::setIsFeatured(const bool &is_featured) {
    m_is_featured = is_featured;
    m_is_featured_isSet = true;
}

bool OAIPlan::is_is_featured_Set() const{
    return m_is_featured_isSet;
}

bool OAIPlan::is_is_featured_Valid() const{
    return m_is_featured_isValid;
}

bool OAIPlan::isIsPrivate() const {
    return m_is_private;
}
void OAIPlan::setIsPrivate(const bool &is_private) {
    m_is_private = is_private;
    m_is_private_isSet = true;
}

bool OAIPlan::is_is_private_Set() const{
    return m_is_private_isSet;
}

bool OAIPlan::is_is_private_Valid() const{
    return m_is_private_isValid;
}

float OAIPlan::getPrice() const {
    return m_price;
}
void OAIPlan::setPrice(const float &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIPlan::is_price_Set() const{
    return m_price_isSet;
}

bool OAIPlan::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIPlan::getRevenueType() const {
    return m_revenue_type;
}
void OAIPlan::setRevenueType(const QString &revenue_type) {
    m_revenue_type = revenue_type;
    m_revenue_type_isSet = true;
}

bool OAIPlan::is_revenue_type_Set() const{
    return m_revenue_type_isSet;
}

bool OAIPlan::is_revenue_type_Valid() const{
    return m_revenue_type_isValid;
}

QString OAIPlan::getSubscriptionCode() const {
    return m_subscription_code;
}
void OAIPlan::setSubscriptionCode(const QString &subscription_code) {
    m_subscription_code = subscription_code;
    m_subscription_code_isSet = true;
}

bool OAIPlan::is_subscription_code_Set() const{
    return m_subscription_code_isSet;
}

bool OAIPlan::is_subscription_code_Valid() const{
    return m_subscription_code_isValid;
}

QString OAIPlan::getTagline() const {
    return m_tagline;
}
void OAIPlan::setTagline(const QString &tagline) {
    m_tagline = tagline;
    m_tagline_isSet = true;
}

bool OAIPlan::is_tagline_Set() const{
    return m_tagline_isSet;
}

bool OAIPlan::is_tagline_Valid() const{
    return m_tagline_isValid;
}

QString OAIPlan::getTermsAndConditions() const {
    return m_terms_and_conditions;
}
void OAIPlan::setTermsAndConditions(const QString &terms_and_conditions) {
    m_terms_and_conditions = terms_and_conditions;
    m_terms_and_conditions_isSet = true;
}

bool OAIPlan::is_terms_and_conditions_Set() const{
    return m_terms_and_conditions_isSet;
}

bool OAIPlan::is_terms_and_conditions_Valid() const{
    return m_terms_and_conditions_isValid;
}

QString OAIPlan::getTitle() const {
    return m_title;
}
void OAIPlan::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPlan::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPlan::is_title_Valid() const{
    return m_title_isValid;
}

qint32 OAIPlan::getTrialPeriodDays() const {
    return m_trial_period_days;
}
void OAIPlan::setTrialPeriodDays(const qint32 &trial_period_days) {
    m_trial_period_days = trial_period_days;
    m_trial_period_days_isSet = true;
}

bool OAIPlan::is_trial_period_days_Set() const{
    return m_trial_period_days_isSet;
}

bool OAIPlan::is_trial_period_days_Valid() const{
    return m_trial_period_days_isValid;
}

QString OAIPlan::getType() const {
    return m_type;
}
void OAIPlan::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPlan::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPlan::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPlan::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_benefits.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_period_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_period_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_trial_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_featured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_private_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revenue_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tagline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms_and_conditions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trial_period_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlan::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_alias_isValid && m_benefits_isValid && m_billing_period_frequency_isValid && m_billing_period_type_isValid && m_currency_isValid && m_has_trial_period_isValid && m_id_isValid && m_is_active_isValid && m_is_featured_isValid && m_is_private_isValid && m_revenue_type_isValid && m_subscription_code_isValid && m_tagline_isValid && m_terms_and_conditions_isValid && m_title_isValid && m_trial_period_days_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
