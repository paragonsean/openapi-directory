/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItemDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItemDetail::OAIItemDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItemDetail::OAIItemDetail() {
    this->initializeModel();
}

OAIItemDetail::~OAIItemDetail() {}

void OAIItemDetail::initializeModel() {

    m_advisory_text_isSet = false;
    m_advisory_text_isValid = false;

    m_available_episode_count_isSet = false;
    m_available_episode_count_isValid = false;

    m_available_season_count_isSet = false;
    m_available_season_count_isValid = false;

    m_average_user_rating_isSet = false;
    m_average_user_rating_isValid = false;

    m_badge_isSet = false;
    m_badge_isValid = false;

    m_channel_short_code_isSet = false;
    m_channel_short_code_isValid = false;

    m_classification_isSet = false;
    m_classification_isValid = false;

    m_contextual_title_isSet = false;
    m_contextual_title_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_custom_id_isSet = false;
    m_custom_id_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_episode_count_isSet = false;
    m_episode_count_isValid = false;

    m_episode_name_isSet = false;
    m_episode_name_isValid = false;

    m_episode_number_isSet = false;
    m_episode_number_isValid = false;

    m_genres_isSet = false;
    m_genres_isValid = false;

    m_has_closed_captions_isSet = false;
    m_has_closed_captions_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_offers_isSet = false;
    m_offers_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_release_year_isSet = false;
    m_release_year_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;

    m_season_id_isSet = false;
    m_season_id_isValid = false;

    m_season_number_isSet = false;
    m_season_number_isValid = false;

    m_short_description_isSet = false;
    m_short_description_isValid = false;

    m_show_id_isSet = false;
    m_show_id_isValid = false;

    m_show_title_isSet = false;
    m_show_title_isValid = false;

    m_subtype_isSet = false;
    m_subtype_isValid = false;

    m_tagline_isSet = false;
    m_tagline_isValid = false;

    m_themes_isSet = false;
    m_themes_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_watch_path_isSet = false;
    m_watch_path_isValid = false;

    m_copyright_isSet = false;
    m_copyright_isValid = false;

    m_credits_isSet = false;
    m_credits_isValid = false;

    m_custom_metadata_isSet = false;
    m_custom_metadata_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_distributor_isSet = false;
    m_distributor_isValid = false;

    m_episodes_isSet = false;
    m_episodes_isValid = false;

    m_event_date_isSet = false;
    m_event_date_isValid = false;

    m_genre_paths_isSet = false;
    m_genre_paths_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_seasons_isSet = false;
    m_seasons_isValid = false;

    m_show_isSet = false;
    m_show_isValid = false;

    m_total_user_ratings_isSet = false;
    m_total_user_ratings_isValid = false;

    m_trailers_isSet = false;
    m_trailers_isValid = false;

    m_venue_isSet = false;
    m_venue_isValid = false;
}

void OAIItemDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItemDetail::fromJsonObject(QJsonObject json) {

    m_advisory_text_isValid = ::OpenAPI::fromJsonValue(m_advisory_text, json[QString("advisoryText")]);
    m_advisory_text_isSet = !json[QString("advisoryText")].isNull() && m_advisory_text_isValid;

    m_available_episode_count_isValid = ::OpenAPI::fromJsonValue(m_available_episode_count, json[QString("availableEpisodeCount")]);
    m_available_episode_count_isSet = !json[QString("availableEpisodeCount")].isNull() && m_available_episode_count_isValid;

    m_available_season_count_isValid = ::OpenAPI::fromJsonValue(m_available_season_count, json[QString("availableSeasonCount")]);
    m_available_season_count_isSet = !json[QString("availableSeasonCount")].isNull() && m_available_season_count_isValid;

    m_average_user_rating_isValid = ::OpenAPI::fromJsonValue(m_average_user_rating, json[QString("averageUserRating")]);
    m_average_user_rating_isSet = !json[QString("averageUserRating")].isNull() && m_average_user_rating_isValid;

    m_badge_isValid = ::OpenAPI::fromJsonValue(m_badge, json[QString("badge")]);
    m_badge_isSet = !json[QString("badge")].isNull() && m_badge_isValid;

    m_channel_short_code_isValid = ::OpenAPI::fromJsonValue(m_channel_short_code, json[QString("channelShortCode")]);
    m_channel_short_code_isSet = !json[QString("channelShortCode")].isNull() && m_channel_short_code_isValid;

    m_classification_isValid = ::OpenAPI::fromJsonValue(m_classification, json[QString("classification")]);
    m_classification_isSet = !json[QString("classification")].isNull() && m_classification_isValid;

    m_contextual_title_isValid = ::OpenAPI::fromJsonValue(m_contextual_title, json[QString("contextualTitle")]);
    m_contextual_title_isSet = !json[QString("contextualTitle")].isNull() && m_contextual_title_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("customFields")]);
    m_custom_fields_isSet = !json[QString("customFields")].isNull() && m_custom_fields_isValid;

    m_custom_id_isValid = ::OpenAPI::fromJsonValue(m_custom_id, json[QString("customId")]);
    m_custom_id_isSet = !json[QString("customId")].isNull() && m_custom_id_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_episode_count_isValid = ::OpenAPI::fromJsonValue(m_episode_count, json[QString("episodeCount")]);
    m_episode_count_isSet = !json[QString("episodeCount")].isNull() && m_episode_count_isValid;

    m_episode_name_isValid = ::OpenAPI::fromJsonValue(m_episode_name, json[QString("episodeName")]);
    m_episode_name_isSet = !json[QString("episodeName")].isNull() && m_episode_name_isValid;

    m_episode_number_isValid = ::OpenAPI::fromJsonValue(m_episode_number, json[QString("episodeNumber")]);
    m_episode_number_isSet = !json[QString("episodeNumber")].isNull() && m_episode_number_isValid;

    m_genres_isValid = ::OpenAPI::fromJsonValue(m_genres, json[QString("genres")]);
    m_genres_isSet = !json[QString("genres")].isNull() && m_genres_isValid;

    m_has_closed_captions_isValid = ::OpenAPI::fromJsonValue(m_has_closed_captions, json[QString("hasClosedCaptions")]);
    m_has_closed_captions_isSet = !json[QString("hasClosedCaptions")].isNull() && m_has_closed_captions_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_offers_isValid = ::OpenAPI::fromJsonValue(m_offers, json[QString("offers")]);
    m_offers_isSet = !json[QString("offers")].isNull() && m_offers_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_release_year_isValid = ::OpenAPI::fromJsonValue(m_release_year, json[QString("releaseYear")]);
    m_release_year_isSet = !json[QString("releaseYear")].isNull() && m_release_year_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;

    m_season_id_isValid = ::OpenAPI::fromJsonValue(m_season_id, json[QString("seasonId")]);
    m_season_id_isSet = !json[QString("seasonId")].isNull() && m_season_id_isValid;

    m_season_number_isValid = ::OpenAPI::fromJsonValue(m_season_number, json[QString("seasonNumber")]);
    m_season_number_isSet = !json[QString("seasonNumber")].isNull() && m_season_number_isValid;

    m_short_description_isValid = ::OpenAPI::fromJsonValue(m_short_description, json[QString("shortDescription")]);
    m_short_description_isSet = !json[QString("shortDescription")].isNull() && m_short_description_isValid;

    m_show_id_isValid = ::OpenAPI::fromJsonValue(m_show_id, json[QString("showId")]);
    m_show_id_isSet = !json[QString("showId")].isNull() && m_show_id_isValid;

    m_show_title_isValid = ::OpenAPI::fromJsonValue(m_show_title, json[QString("showTitle")]);
    m_show_title_isSet = !json[QString("showTitle")].isNull() && m_show_title_isValid;

    m_subtype_isValid = ::OpenAPI::fromJsonValue(m_subtype, json[QString("subtype")]);
    m_subtype_isSet = !json[QString("subtype")].isNull() && m_subtype_isValid;

    m_tagline_isValid = ::OpenAPI::fromJsonValue(m_tagline, json[QString("tagline")]);
    m_tagline_isSet = !json[QString("tagline")].isNull() && m_tagline_isValid;

    m_themes_isValid = ::OpenAPI::fromJsonValue(m_themes, json[QString("themes")]);
    m_themes_isSet = !json[QString("themes")].isNull() && m_themes_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_watch_path_isValid = ::OpenAPI::fromJsonValue(m_watch_path, json[QString("watchPath")]);
    m_watch_path_isSet = !json[QString("watchPath")].isNull() && m_watch_path_isValid;

    m_copyright_isValid = ::OpenAPI::fromJsonValue(m_copyright, json[QString("copyright")]);
    m_copyright_isSet = !json[QString("copyright")].isNull() && m_copyright_isValid;

    m_credits_isValid = ::OpenAPI::fromJsonValue(m_credits, json[QString("credits")]);
    m_credits_isSet = !json[QString("credits")].isNull() && m_credits_isValid;

    m_custom_metadata_isValid = ::OpenAPI::fromJsonValue(m_custom_metadata, json[QString("customMetadata")]);
    m_custom_metadata_isSet = !json[QString("customMetadata")].isNull() && m_custom_metadata_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_distributor_isValid = ::OpenAPI::fromJsonValue(m_distributor, json[QString("distributor")]);
    m_distributor_isSet = !json[QString("distributor")].isNull() && m_distributor_isValid;

    m_episodes_isValid = ::OpenAPI::fromJsonValue(m_episodes, json[QString("episodes")]);
    m_episodes_isSet = !json[QString("episodes")].isNull() && m_episodes_isValid;

    m_event_date_isValid = ::OpenAPI::fromJsonValue(m_event_date, json[QString("eventDate")]);
    m_event_date_isSet = !json[QString("eventDate")].isNull() && m_event_date_isValid;

    m_genre_paths_isValid = ::OpenAPI::fromJsonValue(m_genre_paths, json[QString("genrePaths")]);
    m_genre_paths_isSet = !json[QString("genrePaths")].isNull() && m_genre_paths_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("season")]);
    m_season_isSet = !json[QString("season")].isNull() && m_season_isValid;

    m_seasons_isValid = ::OpenAPI::fromJsonValue(m_seasons, json[QString("seasons")]);
    m_seasons_isSet = !json[QString("seasons")].isNull() && m_seasons_isValid;

    m_show_isValid = ::OpenAPI::fromJsonValue(m_show, json[QString("show")]);
    m_show_isSet = !json[QString("show")].isNull() && m_show_isValid;

    m_total_user_ratings_isValid = ::OpenAPI::fromJsonValue(m_total_user_ratings, json[QString("totalUserRatings")]);
    m_total_user_ratings_isSet = !json[QString("totalUserRatings")].isNull() && m_total_user_ratings_isValid;

    m_trailers_isValid = ::OpenAPI::fromJsonValue(m_trailers, json[QString("trailers")]);
    m_trailers_isSet = !json[QString("trailers")].isNull() && m_trailers_isValid;

    m_venue_isValid = ::OpenAPI::fromJsonValue(m_venue, json[QString("venue")]);
    m_venue_isSet = !json[QString("venue")].isNull() && m_venue_isValid;
}

QString OAIItemDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItemDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_advisory_text_isSet) {
        obj.insert(QString("advisoryText"), ::OpenAPI::toJsonValue(m_advisory_text));
    }
    if (m_available_episode_count_isSet) {
        obj.insert(QString("availableEpisodeCount"), ::OpenAPI::toJsonValue(m_available_episode_count));
    }
    if (m_available_season_count_isSet) {
        obj.insert(QString("availableSeasonCount"), ::OpenAPI::toJsonValue(m_available_season_count));
    }
    if (m_average_user_rating_isSet) {
        obj.insert(QString("averageUserRating"), ::OpenAPI::toJsonValue(m_average_user_rating));
    }
    if (m_badge_isSet) {
        obj.insert(QString("badge"), ::OpenAPI::toJsonValue(m_badge));
    }
    if (m_channel_short_code_isSet) {
        obj.insert(QString("channelShortCode"), ::OpenAPI::toJsonValue(m_channel_short_code));
    }
    if (m_classification.isSet()) {
        obj.insert(QString("classification"), ::OpenAPI::toJsonValue(m_classification));
    }
    if (m_contextual_title_isSet) {
        obj.insert(QString("contextualTitle"), ::OpenAPI::toJsonValue(m_contextual_title));
    }
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("customFields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_custom_id_isSet) {
        obj.insert(QString("customId"), ::OpenAPI::toJsonValue(m_custom_id));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_episode_count_isSet) {
        obj.insert(QString("episodeCount"), ::OpenAPI::toJsonValue(m_episode_count));
    }
    if (m_episode_name_isSet) {
        obj.insert(QString("episodeName"), ::OpenAPI::toJsonValue(m_episode_name));
    }
    if (m_episode_number_isSet) {
        obj.insert(QString("episodeNumber"), ::OpenAPI::toJsonValue(m_episode_number));
    }
    if (m_genres.size() > 0) {
        obj.insert(QString("genres"), ::OpenAPI::toJsonValue(m_genres));
    }
    if (m_has_closed_captions_isSet) {
        obj.insert(QString("hasClosedCaptions"), ::OpenAPI::toJsonValue(m_has_closed_captions));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_offers.size() > 0) {
        obj.insert(QString("offers"), ::OpenAPI::toJsonValue(m_offers));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_release_year_isSet) {
        obj.insert(QString("releaseYear"), ::OpenAPI::toJsonValue(m_release_year));
    }
    if (m_scopes.size() > 0) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    if (m_season_id_isSet) {
        obj.insert(QString("seasonId"), ::OpenAPI::toJsonValue(m_season_id));
    }
    if (m_season_number_isSet) {
        obj.insert(QString("seasonNumber"), ::OpenAPI::toJsonValue(m_season_number));
    }
    if (m_short_description_isSet) {
        obj.insert(QString("shortDescription"), ::OpenAPI::toJsonValue(m_short_description));
    }
    if (m_show_id_isSet) {
        obj.insert(QString("showId"), ::OpenAPI::toJsonValue(m_show_id));
    }
    if (m_show_title_isSet) {
        obj.insert(QString("showTitle"), ::OpenAPI::toJsonValue(m_show_title));
    }
    if (m_subtype_isSet) {
        obj.insert(QString("subtype"), ::OpenAPI::toJsonValue(m_subtype));
    }
    if (m_tagline_isSet) {
        obj.insert(QString("tagline"), ::OpenAPI::toJsonValue(m_tagline));
    }
    if (m_themes.size() > 0) {
        obj.insert(QString("themes"), ::OpenAPI::toJsonValue(m_themes));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_watch_path_isSet) {
        obj.insert(QString("watchPath"), ::OpenAPI::toJsonValue(m_watch_path));
    }
    if (m_copyright_isSet) {
        obj.insert(QString("copyright"), ::OpenAPI::toJsonValue(m_copyright));
    }
    if (m_credits.size() > 0) {
        obj.insert(QString("credits"), ::OpenAPI::toJsonValue(m_credits));
    }
    if (m_custom_metadata.size() > 0) {
        obj.insert(QString("customMetadata"), ::OpenAPI::toJsonValue(m_custom_metadata));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_distributor_isSet) {
        obj.insert(QString("distributor"), ::OpenAPI::toJsonValue(m_distributor));
    }
    if (m_episodes.isSet()) {
        obj.insert(QString("episodes"), ::OpenAPI::toJsonValue(m_episodes));
    }
    if (m_event_date_isSet) {
        obj.insert(QString("eventDate"), ::OpenAPI::toJsonValue(m_event_date));
    }
    if (m_genre_paths.size() > 0) {
        obj.insert(QString("genrePaths"), ::OpenAPI::toJsonValue(m_genre_paths));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_season.isSet()) {
        obj.insert(QString("season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_seasons.isSet()) {
        obj.insert(QString("seasons"), ::OpenAPI::toJsonValue(m_seasons));
    }
    if (m_show.isSet()) {
        obj.insert(QString("show"), ::OpenAPI::toJsonValue(m_show));
    }
    if (m_total_user_ratings_isSet) {
        obj.insert(QString("totalUserRatings"), ::OpenAPI::toJsonValue(m_total_user_ratings));
    }
    if (m_trailers.size() > 0) {
        obj.insert(QString("trailers"), ::OpenAPI::toJsonValue(m_trailers));
    }
    if (m_venue_isSet) {
        obj.insert(QString("venue"), ::OpenAPI::toJsonValue(m_venue));
    }
    return obj;
}

QString OAIItemDetail::getAdvisoryText() const {
    return m_advisory_text;
}
void OAIItemDetail::setAdvisoryText(const QString &advisory_text) {
    m_advisory_text = advisory_text;
    m_advisory_text_isSet = true;
}

bool OAIItemDetail::is_advisory_text_Set() const{
    return m_advisory_text_isSet;
}

bool OAIItemDetail::is_advisory_text_Valid() const{
    return m_advisory_text_isValid;
}

qint32 OAIItemDetail::getAvailableEpisodeCount() const {
    return m_available_episode_count;
}
void OAIItemDetail::setAvailableEpisodeCount(const qint32 &available_episode_count) {
    m_available_episode_count = available_episode_count;
    m_available_episode_count_isSet = true;
}

bool OAIItemDetail::is_available_episode_count_Set() const{
    return m_available_episode_count_isSet;
}

bool OAIItemDetail::is_available_episode_count_Valid() const{
    return m_available_episode_count_isValid;
}

qint32 OAIItemDetail::getAvailableSeasonCount() const {
    return m_available_season_count;
}
void OAIItemDetail::setAvailableSeasonCount(const qint32 &available_season_count) {
    m_available_season_count = available_season_count;
    m_available_season_count_isSet = true;
}

bool OAIItemDetail::is_available_season_count_Set() const{
    return m_available_season_count_isSet;
}

bool OAIItemDetail::is_available_season_count_Valid() const{
    return m_available_season_count_isValid;
}

double OAIItemDetail::getAverageUserRating() const {
    return m_average_user_rating;
}
void OAIItemDetail::setAverageUserRating(const double &average_user_rating) {
    m_average_user_rating = average_user_rating;
    m_average_user_rating_isSet = true;
}

bool OAIItemDetail::is_average_user_rating_Set() const{
    return m_average_user_rating_isSet;
}

bool OAIItemDetail::is_average_user_rating_Valid() const{
    return m_average_user_rating_isValid;
}

QString OAIItemDetail::getBadge() const {
    return m_badge;
}
void OAIItemDetail::setBadge(const QString &badge) {
    m_badge = badge;
    m_badge_isSet = true;
}

bool OAIItemDetail::is_badge_Set() const{
    return m_badge_isSet;
}

bool OAIItemDetail::is_badge_Valid() const{
    return m_badge_isValid;
}

QString OAIItemDetail::getChannelShortCode() const {
    return m_channel_short_code;
}
void OAIItemDetail::setChannelShortCode(const QString &channel_short_code) {
    m_channel_short_code = channel_short_code;
    m_channel_short_code_isSet = true;
}

bool OAIItemDetail::is_channel_short_code_Set() const{
    return m_channel_short_code_isSet;
}

bool OAIItemDetail::is_channel_short_code_Valid() const{
    return m_channel_short_code_isValid;
}

OAIClassificationSummary OAIItemDetail::getClassification() const {
    return m_classification;
}
void OAIItemDetail::setClassification(const OAIClassificationSummary &classification) {
    m_classification = classification;
    m_classification_isSet = true;
}

bool OAIItemDetail::is_classification_Set() const{
    return m_classification_isSet;
}

bool OAIItemDetail::is_classification_Valid() const{
    return m_classification_isValid;
}

QString OAIItemDetail::getContextualTitle() const {
    return m_contextual_title;
}
void OAIItemDetail::setContextualTitle(const QString &contextual_title) {
    m_contextual_title = contextual_title;
    m_contextual_title_isSet = true;
}

bool OAIItemDetail::is_contextual_title_Set() const{
    return m_contextual_title_isSet;
}

bool OAIItemDetail::is_contextual_title_Valid() const{
    return m_contextual_title_isValid;
}

QMap<QString, QJsonValue> OAIItemDetail::getCustomFields() const {
    return m_custom_fields;
}
void OAIItemDetail::setCustomFields(const QMap<QString, QJsonValue> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIItemDetail::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIItemDetail::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIItemDetail::getCustomId() const {
    return m_custom_id;
}
void OAIItemDetail::setCustomId(const QString &custom_id) {
    m_custom_id = custom_id;
    m_custom_id_isSet = true;
}

bool OAIItemDetail::is_custom_id_Set() const{
    return m_custom_id_isSet;
}

bool OAIItemDetail::is_custom_id_Valid() const{
    return m_custom_id_isValid;
}

qint32 OAIItemDetail::getDuration() const {
    return m_duration;
}
void OAIItemDetail::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIItemDetail::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIItemDetail::is_duration_Valid() const{
    return m_duration_isValid;
}

qint32 OAIItemDetail::getEpisodeCount() const {
    return m_episode_count;
}
void OAIItemDetail::setEpisodeCount(const qint32 &episode_count) {
    m_episode_count = episode_count;
    m_episode_count_isSet = true;
}

bool OAIItemDetail::is_episode_count_Set() const{
    return m_episode_count_isSet;
}

bool OAIItemDetail::is_episode_count_Valid() const{
    return m_episode_count_isValid;
}

QString OAIItemDetail::getEpisodeName() const {
    return m_episode_name;
}
void OAIItemDetail::setEpisodeName(const QString &episode_name) {
    m_episode_name = episode_name;
    m_episode_name_isSet = true;
}

bool OAIItemDetail::is_episode_name_Set() const{
    return m_episode_name_isSet;
}

bool OAIItemDetail::is_episode_name_Valid() const{
    return m_episode_name_isValid;
}

qint32 OAIItemDetail::getEpisodeNumber() const {
    return m_episode_number;
}
void OAIItemDetail::setEpisodeNumber(const qint32 &episode_number) {
    m_episode_number = episode_number;
    m_episode_number_isSet = true;
}

bool OAIItemDetail::is_episode_number_Set() const{
    return m_episode_number_isSet;
}

bool OAIItemDetail::is_episode_number_Valid() const{
    return m_episode_number_isValid;
}

QList<QString> OAIItemDetail::getGenres() const {
    return m_genres;
}
void OAIItemDetail::setGenres(const QList<QString> &genres) {
    m_genres = genres;
    m_genres_isSet = true;
}

bool OAIItemDetail::is_genres_Set() const{
    return m_genres_isSet;
}

bool OAIItemDetail::is_genres_Valid() const{
    return m_genres_isValid;
}

bool OAIItemDetail::isHasClosedCaptions() const {
    return m_has_closed_captions;
}
void OAIItemDetail::setHasClosedCaptions(const bool &has_closed_captions) {
    m_has_closed_captions = has_closed_captions;
    m_has_closed_captions_isSet = true;
}

bool OAIItemDetail::is_has_closed_captions_Set() const{
    return m_has_closed_captions_isSet;
}

bool OAIItemDetail::is_has_closed_captions_Valid() const{
    return m_has_closed_captions_isValid;
}

QString OAIItemDetail::getId() const {
    return m_id;
}
void OAIItemDetail::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIItemDetail::is_id_Set() const{
    return m_id_isSet;
}

bool OAIItemDetail::is_id_Valid() const{
    return m_id_isValid;
}

QMap<QString, QString> OAIItemDetail::getImages() const {
    return m_images;
}
void OAIItemDetail::setImages(const QMap<QString, QString> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIItemDetail::is_images_Set() const{
    return m_images_isSet;
}

bool OAIItemDetail::is_images_Valid() const{
    return m_images_isValid;
}

QList<OAIOffer> OAIItemDetail::getOffers() const {
    return m_offers;
}
void OAIItemDetail::setOffers(const QList<OAIOffer> &offers) {
    m_offers = offers;
    m_offers_isSet = true;
}

bool OAIItemDetail::is_offers_Set() const{
    return m_offers_isSet;
}

bool OAIItemDetail::is_offers_Valid() const{
    return m_offers_isValid;
}

QString OAIItemDetail::getPath() const {
    return m_path;
}
void OAIItemDetail::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIItemDetail::is_path_Set() const{
    return m_path_isSet;
}

bool OAIItemDetail::is_path_Valid() const{
    return m_path_isValid;
}

qint32 OAIItemDetail::getReleaseYear() const {
    return m_release_year;
}
void OAIItemDetail::setReleaseYear(const qint32 &release_year) {
    m_release_year = release_year;
    m_release_year_isSet = true;
}

bool OAIItemDetail::is_release_year_Set() const{
    return m_release_year_isSet;
}

bool OAIItemDetail::is_release_year_Valid() const{
    return m_release_year_isValid;
}

QList<QString> OAIItemDetail::getScopes() const {
    return m_scopes;
}
void OAIItemDetail::setScopes(const QList<QString> &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIItemDetail::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIItemDetail::is_scopes_Valid() const{
    return m_scopes_isValid;
}

QString OAIItemDetail::getSeasonId() const {
    return m_season_id;
}
void OAIItemDetail::setSeasonId(const QString &season_id) {
    m_season_id = season_id;
    m_season_id_isSet = true;
}

bool OAIItemDetail::is_season_id_Set() const{
    return m_season_id_isSet;
}

bool OAIItemDetail::is_season_id_Valid() const{
    return m_season_id_isValid;
}

qint32 OAIItemDetail::getSeasonNumber() const {
    return m_season_number;
}
void OAIItemDetail::setSeasonNumber(const qint32 &season_number) {
    m_season_number = season_number;
    m_season_number_isSet = true;
}

bool OAIItemDetail::is_season_number_Set() const{
    return m_season_number_isSet;
}

bool OAIItemDetail::is_season_number_Valid() const{
    return m_season_number_isValid;
}

QString OAIItemDetail::getShortDescription() const {
    return m_short_description;
}
void OAIItemDetail::setShortDescription(const QString &short_description) {
    m_short_description = short_description;
    m_short_description_isSet = true;
}

bool OAIItemDetail::is_short_description_Set() const{
    return m_short_description_isSet;
}

bool OAIItemDetail::is_short_description_Valid() const{
    return m_short_description_isValid;
}

QString OAIItemDetail::getShowId() const {
    return m_show_id;
}
void OAIItemDetail::setShowId(const QString &show_id) {
    m_show_id = show_id;
    m_show_id_isSet = true;
}

bool OAIItemDetail::is_show_id_Set() const{
    return m_show_id_isSet;
}

bool OAIItemDetail::is_show_id_Valid() const{
    return m_show_id_isValid;
}

QString OAIItemDetail::getShowTitle() const {
    return m_show_title;
}
void OAIItemDetail::setShowTitle(const QString &show_title) {
    m_show_title = show_title;
    m_show_title_isSet = true;
}

bool OAIItemDetail::is_show_title_Set() const{
    return m_show_title_isSet;
}

bool OAIItemDetail::is_show_title_Valid() const{
    return m_show_title_isValid;
}

QString OAIItemDetail::getSubtype() const {
    return m_subtype;
}
void OAIItemDetail::setSubtype(const QString &subtype) {
    m_subtype = subtype;
    m_subtype_isSet = true;
}

bool OAIItemDetail::is_subtype_Set() const{
    return m_subtype_isSet;
}

bool OAIItemDetail::is_subtype_Valid() const{
    return m_subtype_isValid;
}

QString OAIItemDetail::getTagline() const {
    return m_tagline;
}
void OAIItemDetail::setTagline(const QString &tagline) {
    m_tagline = tagline;
    m_tagline_isSet = true;
}

bool OAIItemDetail::is_tagline_Set() const{
    return m_tagline_isSet;
}

bool OAIItemDetail::is_tagline_Valid() const{
    return m_tagline_isValid;
}

QList<OAITheme> OAIItemDetail::getThemes() const {
    return m_themes;
}
void OAIItemDetail::setThemes(const QList<OAITheme> &themes) {
    m_themes = themes;
    m_themes_isSet = true;
}

bool OAIItemDetail::is_themes_Set() const{
    return m_themes_isSet;
}

bool OAIItemDetail::is_themes_Valid() const{
    return m_themes_isValid;
}

QString OAIItemDetail::getTitle() const {
    return m_title;
}
void OAIItemDetail::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIItemDetail::is_title_Set() const{
    return m_title_isSet;
}

bool OAIItemDetail::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIItemDetail::getType() const {
    return m_type;
}
void OAIItemDetail::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIItemDetail::is_type_Set() const{
    return m_type_isSet;
}

bool OAIItemDetail::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIItemDetail::getWatchPath() const {
    return m_watch_path;
}
void OAIItemDetail::setWatchPath(const QString &watch_path) {
    m_watch_path = watch_path;
    m_watch_path_isSet = true;
}

bool OAIItemDetail::is_watch_path_Set() const{
    return m_watch_path_isSet;
}

bool OAIItemDetail::is_watch_path_Valid() const{
    return m_watch_path_isValid;
}

QString OAIItemDetail::getCopyright() const {
    return m_copyright;
}
void OAIItemDetail::setCopyright(const QString &copyright) {
    m_copyright = copyright;
    m_copyright_isSet = true;
}

bool OAIItemDetail::is_copyright_Set() const{
    return m_copyright_isSet;
}

bool OAIItemDetail::is_copyright_Valid() const{
    return m_copyright_isValid;
}

QList<OAICredit> OAIItemDetail::getCredits() const {
    return m_credits;
}
void OAIItemDetail::setCredits(const QList<OAICredit> &credits) {
    m_credits = credits;
    m_credits_isSet = true;
}

bool OAIItemDetail::is_credits_Set() const{
    return m_credits_isSet;
}

bool OAIItemDetail::is_credits_Valid() const{
    return m_credits_isValid;
}

QList<OAIItemCustomMetadata> OAIItemDetail::getCustomMetadata() const {
    return m_custom_metadata;
}
void OAIItemDetail::setCustomMetadata(const QList<OAIItemCustomMetadata> &custom_metadata) {
    m_custom_metadata = custom_metadata;
    m_custom_metadata_isSet = true;
}

bool OAIItemDetail::is_custom_metadata_Set() const{
    return m_custom_metadata_isSet;
}

bool OAIItemDetail::is_custom_metadata_Valid() const{
    return m_custom_metadata_isValid;
}

QString OAIItemDetail::getDescription() const {
    return m_description;
}
void OAIItemDetail::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIItemDetail::is_description_Set() const{
    return m_description_isSet;
}

bool OAIItemDetail::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIItemDetail::getDistributor() const {
    return m_distributor;
}
void OAIItemDetail::setDistributor(const QString &distributor) {
    m_distributor = distributor;
    m_distributor_isSet = true;
}

bool OAIItemDetail::is_distributor_Set() const{
    return m_distributor_isSet;
}

bool OAIItemDetail::is_distributor_Valid() const{
    return m_distributor_isValid;
}

OAIItemList OAIItemDetail::getEpisodes() const {
    return m_episodes;
}
void OAIItemDetail::setEpisodes(const OAIItemList &episodes) {
    m_episodes = episodes;
    m_episodes_isSet = true;
}

bool OAIItemDetail::is_episodes_Set() const{
    return m_episodes_isSet;
}

bool OAIItemDetail::is_episodes_Valid() const{
    return m_episodes_isValid;
}

QDateTime OAIItemDetail::getEventDate() const {
    return m_event_date;
}
void OAIItemDetail::setEventDate(const QDateTime &event_date) {
    m_event_date = event_date;
    m_event_date_isSet = true;
}

bool OAIItemDetail::is_event_date_Set() const{
    return m_event_date_isSet;
}

bool OAIItemDetail::is_event_date_Valid() const{
    return m_event_date_isValid;
}

QList<QString> OAIItemDetail::getGenrePaths() const {
    return m_genre_paths;
}
void OAIItemDetail::setGenrePaths(const QList<QString> &genre_paths) {
    m_genre_paths = genre_paths;
    m_genre_paths_isSet = true;
}

bool OAIItemDetail::is_genre_paths_Set() const{
    return m_genre_paths_isSet;
}

bool OAIItemDetail::is_genre_paths_Valid() const{
    return m_genre_paths_isValid;
}

QString OAIItemDetail::getLocation() const {
    return m_location;
}
void OAIItemDetail::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIItemDetail::is_location_Set() const{
    return m_location_isSet;
}

bool OAIItemDetail::is_location_Valid() const{
    return m_location_isValid;
}

OAIItemDetail OAIItemDetail::getSeason() const {
    return m_season;
}
void OAIItemDetail::setSeason(const OAIItemDetail &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAIItemDetail::is_season_Set() const{
    return m_season_isSet;
}

bool OAIItemDetail::is_season_Valid() const{
    return m_season_isValid;
}

OAIItemList OAIItemDetail::getSeasons() const {
    return m_seasons;
}
void OAIItemDetail::setSeasons(const OAIItemList &seasons) {
    m_seasons = seasons;
    m_seasons_isSet = true;
}

bool OAIItemDetail::is_seasons_Set() const{
    return m_seasons_isSet;
}

bool OAIItemDetail::is_seasons_Valid() const{
    return m_seasons_isValid;
}

OAIItemDetail OAIItemDetail::getShow() const {
    return m_show;
}
void OAIItemDetail::setShow(const OAIItemDetail &show) {
    m_show = show;
    m_show_isSet = true;
}

bool OAIItemDetail::is_show_Set() const{
    return m_show_isSet;
}

bool OAIItemDetail::is_show_Valid() const{
    return m_show_isValid;
}

qint32 OAIItemDetail::getTotalUserRatings() const {
    return m_total_user_ratings;
}
void OAIItemDetail::setTotalUserRatings(const qint32 &total_user_ratings) {
    m_total_user_ratings = total_user_ratings;
    m_total_user_ratings_isSet = true;
}

bool OAIItemDetail::is_total_user_ratings_Set() const{
    return m_total_user_ratings_isSet;
}

bool OAIItemDetail::is_total_user_ratings_Valid() const{
    return m_total_user_ratings_isValid;
}

QList<OAIItemSummary> OAIItemDetail::getTrailers() const {
    return m_trailers;
}
void OAIItemDetail::setTrailers(const QList<OAIItemSummary> &trailers) {
    m_trailers = trailers;
    m_trailers_isSet = true;
}

bool OAIItemDetail::is_trailers_Set() const{
    return m_trailers_isSet;
}

bool OAIItemDetail::is_trailers_Valid() const{
    return m_trailers_isValid;
}

QString OAIItemDetail::getVenue() const {
    return m_venue;
}
void OAIItemDetail::setVenue(const QString &venue) {
    m_venue = venue;
    m_venue_isSet = true;
}

bool OAIItemDetail::is_venue_Set() const{
    return m_venue_isSet;
}

bool OAIItemDetail::is_venue_Valid() const{
    return m_venue_isValid;
}

bool OAIItemDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advisory_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_episode_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_season_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_user_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_badge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_short_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_classification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contextual_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_episode_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_episode_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_episode_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_genres.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_closed_captions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_offers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tagline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_themes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watch_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copyright_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credits.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distributor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_episodes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_genre_paths.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_seasons.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_show.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_user_ratings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trailers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_venue_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItemDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_path_isValid && m_title_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
