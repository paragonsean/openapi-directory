/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEeApi_H
#define OAI_OAIEeApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEeBtEligibility.h"
#include "OAIEeCreatePinRequest.h"
#include "OAIEeCreatePinResponse.h"
#include "OAIEeCreateTokenResponse.h"
#include "OAIEeOffersRequest.h"
#include "OAIEeOffersResponse.h"
#include "OAIEePlanListItem.h"
#include "OAIEePlans.h"
#include "OAIEeValidatePinRequest.h"
#include "OAIEeValidatePinResponse.h"
#include "OAIItvAssignMsisdnRequest.h"
#include "OAIServiceError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEeApi : public QObject {
    Q_OBJECT

public:
    OAIEeApi(const int timeOut = 0);
    ~OAIEeApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_itv_assign_msisdn_request OAIItvAssignMsisdnRequest [required]
    * @param[in]  lang QString [optional]
    */
    virtual void assignMsisdn(const OAIItvAssignMsisdnRequest &oai_itv_assign_msisdn_request, const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  lang QString [optional]
    */
    virtual void checkEeBtEligibility(const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oaiee_create_pin_request OAIEeCreatePinRequest [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void createPinRequest(const OAIEeCreatePinRequest &oaiee_create_pin_request, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());


    virtual void createToken();

    /**
    * @param[in]  lang QString [optional]
    */
    virtual void eePlansGet(const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oaiee_offers_request OAIEeOffersRequest [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getEligibleOffers(const OAIEeOffersRequest &oaiee_offers_request, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  lang QString [optional]
    */
    virtual void getPlan(const QString &id, const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oaiee_validate_pin_request OAIEeValidatePinRequest [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void validatePinRequest(const OAIEeValidatePinRequest &oaiee_validate_pin_request, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void assignMsisdnCallback(OAIHttpRequestWorker *worker);
    void checkEeBtEligibilityCallback(OAIHttpRequestWorker *worker);
    void createPinRequestCallback(OAIHttpRequestWorker *worker);
    void createTokenCallback(OAIHttpRequestWorker *worker);
    void eePlansGetCallback(OAIHttpRequestWorker *worker);
    void getEligibleOffersCallback(OAIHttpRequestWorker *worker);
    void getPlanCallback(OAIHttpRequestWorker *worker);
    void validatePinRequestCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void assignMsisdnSignal();
    void checkEeBtEligibilitySignal(OAIEeBtEligibility summary);
    void createPinRequestSignal(OAIEeCreatePinResponse summary);
    void createTokenSignal(OAIEeCreateTokenResponse summary);
    void eePlansGetSignal(OAIEePlans summary);
    void getEligibleOffersSignal(OAIEeOffersResponse summary);
    void getPlanSignal(OAIEePlanListItem summary);
    void validatePinRequestSignal(OAIEeValidatePinResponse summary);


    void assignMsisdnSignalFull(OAIHttpRequestWorker *worker);
    void checkEeBtEligibilitySignalFull(OAIHttpRequestWorker *worker, OAIEeBtEligibility summary);
    void createPinRequestSignalFull(OAIHttpRequestWorker *worker, OAIEeCreatePinResponse summary);
    void createTokenSignalFull(OAIHttpRequestWorker *worker, OAIEeCreateTokenResponse summary);
    void eePlansGetSignalFull(OAIHttpRequestWorker *worker, OAIEePlans summary);
    void getEligibleOffersSignalFull(OAIHttpRequestWorker *worker, OAIEeOffersResponse summary);
    void getPlanSignalFull(OAIHttpRequestWorker *worker, OAIEePlanListItem summary);
    void validatePinRequestSignalFull(OAIHttpRequestWorker *worker, OAIEeValidatePinResponse summary);

    Q_DECL_DEPRECATED_X("Use assignMsisdnSignalError() instead")
    void assignMsisdnSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assignMsisdnSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkEeBtEligibilitySignalError() instead")
    void checkEeBtEligibilitySignalE(OAIEeBtEligibility summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkEeBtEligibilitySignalError(OAIEeBtEligibility summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPinRequestSignalError() instead")
    void createPinRequestSignalE(OAIEeCreatePinResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPinRequestSignalError(OAIEeCreatePinResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTokenSignalError() instead")
    void createTokenSignalE(OAIEeCreateTokenResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTokenSignalError(OAIEeCreateTokenResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eePlansGetSignalError() instead")
    void eePlansGetSignalE(OAIEePlans summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eePlansGetSignalError(OAIEePlans summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEligibleOffersSignalError() instead")
    void getEligibleOffersSignalE(OAIEeOffersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEligibleOffersSignalError(OAIEeOffersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPlanSignalError() instead")
    void getPlanSignalE(OAIEePlanListItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPlanSignalError(OAIEePlanListItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validatePinRequestSignalError() instead")
    void validatePinRequestSignalE(OAIEeValidatePinResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void validatePinRequestSignalError(OAIEeValidatePinResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use assignMsisdnSignalErrorFull() instead")
    void assignMsisdnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assignMsisdnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkEeBtEligibilitySignalErrorFull() instead")
    void checkEeBtEligibilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkEeBtEligibilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPinRequestSignalErrorFull() instead")
    void createPinRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPinRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTokenSignalErrorFull() instead")
    void createTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eePlansGetSignalErrorFull() instead")
    void eePlansGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eePlansGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEligibleOffersSignalErrorFull() instead")
    void getEligibleOffersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEligibleOffersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPlanSignalErrorFull() instead")
    void getPlanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPlanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validatePinRequestSignalErrorFull() instead")
    void validatePinRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void validatePinRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
