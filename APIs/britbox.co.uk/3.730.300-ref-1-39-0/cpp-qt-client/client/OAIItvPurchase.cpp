/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItvPurchase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItvPurchase::OAIItvPurchase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItvPurchase::OAIItvPurchase() {
    this->initializeModel();
}

OAIItvPurchase::~OAIItvPurchase() {}

void OAIItvPurchase::initializeModel() {

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_plan_id_isSet = false;
    m_plan_id_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;
}

void OAIItvPurchase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItvPurchase::fromJsonObject(QJsonObject json) {

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customerId")]);
    m_customer_id_isSet = !json[QString("customerId")].isNull() && m_customer_id_isValid;

    m_plan_id_isValid = ::OpenAPI::fromJsonValue(m_plan_id, json[QString("planId")]);
    m_plan_id_isSet = !json[QString("planId")].isNull() && m_plan_id_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;
}

QString OAIItvPurchase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItvPurchase::asJsonObject() const {
    QJsonObject obj;
    if (m_customer_id_isSet) {
        obj.insert(QString("customerId"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_plan_id_isSet) {
        obj.insert(QString("planId"), ::OpenAPI::toJsonValue(m_plan_id));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    return obj;
}

QString OAIItvPurchase::getCustomerId() const {
    return m_customer_id;
}
void OAIItvPurchase::setCustomerId(const QString &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAIItvPurchase::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAIItvPurchase::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

QString OAIItvPurchase::getPlanId() const {
    return m_plan_id;
}
void OAIItvPurchase::setPlanId(const QString &plan_id) {
    m_plan_id = plan_id;
    m_plan_id_isSet = true;
}

bool OAIItvPurchase::is_plan_id_Set() const{
    return m_plan_id_isSet;
}

bool OAIItvPurchase::is_plan_id_Valid() const{
    return m_plan_id_isValid;
}

QString OAIItvPurchase::getSubscriptionId() const {
    return m_subscription_id;
}
void OAIItvPurchase::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAIItvPurchase::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIItvPurchase::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

bool OAIItvPurchase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItvPurchase::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_plan_id_isValid && true;
}

} // namespace OpenAPI
