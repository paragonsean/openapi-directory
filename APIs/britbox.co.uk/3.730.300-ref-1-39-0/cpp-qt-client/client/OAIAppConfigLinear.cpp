/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppConfigLinear.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppConfigLinear::OAIAppConfigLinear(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppConfigLinear::OAIAppConfigLinear() {
    this->initializeModel();
}

OAIAppConfigLinear::~OAIAppConfigLinear() {}

void OAIAppConfigLinear::initializeModel() {

    m_schedule_cache_max_age_minutes_isSet = false;
    m_schedule_cache_max_age_minutes_isValid = false;

    m_viewing_window_days_after_isSet = false;
    m_viewing_window_days_after_isValid = false;

    m_viewing_window_days_before_isSet = false;
    m_viewing_window_days_before_isValid = false;
}

void OAIAppConfigLinear::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppConfigLinear::fromJsonObject(QJsonObject json) {

    m_schedule_cache_max_age_minutes_isValid = ::OpenAPI::fromJsonValue(m_schedule_cache_max_age_minutes, json[QString("scheduleCacheMaxAgeMinutes")]);
    m_schedule_cache_max_age_minutes_isSet = !json[QString("scheduleCacheMaxAgeMinutes")].isNull() && m_schedule_cache_max_age_minutes_isValid;

    m_viewing_window_days_after_isValid = ::OpenAPI::fromJsonValue(m_viewing_window_days_after, json[QString("viewingWindowDaysAfter")]);
    m_viewing_window_days_after_isSet = !json[QString("viewingWindowDaysAfter")].isNull() && m_viewing_window_days_after_isValid;

    m_viewing_window_days_before_isValid = ::OpenAPI::fromJsonValue(m_viewing_window_days_before, json[QString("viewingWindowDaysBefore")]);
    m_viewing_window_days_before_isSet = !json[QString("viewingWindowDaysBefore")].isNull() && m_viewing_window_days_before_isValid;
}

QString OAIAppConfigLinear::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppConfigLinear::asJsonObject() const {
    QJsonObject obj;
    if (m_schedule_cache_max_age_minutes_isSet) {
        obj.insert(QString("scheduleCacheMaxAgeMinutes"), ::OpenAPI::toJsonValue(m_schedule_cache_max_age_minutes));
    }
    if (m_viewing_window_days_after_isSet) {
        obj.insert(QString("viewingWindowDaysAfter"), ::OpenAPI::toJsonValue(m_viewing_window_days_after));
    }
    if (m_viewing_window_days_before_isSet) {
        obj.insert(QString("viewingWindowDaysBefore"), ::OpenAPI::toJsonValue(m_viewing_window_days_before));
    }
    return obj;
}

qint32 OAIAppConfigLinear::getScheduleCacheMaxAgeMinutes() const {
    return m_schedule_cache_max_age_minutes;
}
void OAIAppConfigLinear::setScheduleCacheMaxAgeMinutes(const qint32 &schedule_cache_max_age_minutes) {
    m_schedule_cache_max_age_minutes = schedule_cache_max_age_minutes;
    m_schedule_cache_max_age_minutes_isSet = true;
}

bool OAIAppConfigLinear::is_schedule_cache_max_age_minutes_Set() const{
    return m_schedule_cache_max_age_minutes_isSet;
}

bool OAIAppConfigLinear::is_schedule_cache_max_age_minutes_Valid() const{
    return m_schedule_cache_max_age_minutes_isValid;
}

qint32 OAIAppConfigLinear::getViewingWindowDaysAfter() const {
    return m_viewing_window_days_after;
}
void OAIAppConfigLinear::setViewingWindowDaysAfter(const qint32 &viewing_window_days_after) {
    m_viewing_window_days_after = viewing_window_days_after;
    m_viewing_window_days_after_isSet = true;
}

bool OAIAppConfigLinear::is_viewing_window_days_after_Set() const{
    return m_viewing_window_days_after_isSet;
}

bool OAIAppConfigLinear::is_viewing_window_days_after_Valid() const{
    return m_viewing_window_days_after_isValid;
}

qint32 OAIAppConfigLinear::getViewingWindowDaysBefore() const {
    return m_viewing_window_days_before;
}
void OAIAppConfigLinear::setViewingWindowDaysBefore(const qint32 &viewing_window_days_before) {
    m_viewing_window_days_before = viewing_window_days_before;
    m_viewing_window_days_before_isSet = true;
}

bool OAIAppConfigLinear::is_viewing_window_days_before_Set() const{
    return m_viewing_window_days_before_isSet;
}

bool OAIAppConfigLinear::is_viewing_window_days_before_Valid() const{
    return m_viewing_window_days_before_isValid;
}

bool OAIAppConfigLinear::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_schedule_cache_max_age_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewing_window_days_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewing_window_days_before_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppConfigLinear::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
