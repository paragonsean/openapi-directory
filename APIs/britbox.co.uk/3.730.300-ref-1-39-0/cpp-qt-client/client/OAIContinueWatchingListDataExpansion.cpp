/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContinueWatchingListDataExpansion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContinueWatchingListDataExpansion::OAIContinueWatchingListDataExpansion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContinueWatchingListDataExpansion::OAIContinueWatchingListDataExpansion() {
    this->initializeModel();
}

OAIContinueWatchingListDataExpansion::~OAIContinueWatchingListDataExpansion() {}

void OAIContinueWatchingListDataExpansion::initializeModel() {

    m_episode_isSet = false;
    m_episode_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_show_isSet = false;
    m_show_isValid = false;
}

void OAIContinueWatchingListDataExpansion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContinueWatchingListDataExpansion::fromJsonObject(QJsonObject json) {

    m_episode_isValid = ::OpenAPI::fromJsonValue(m_episode, json[QString("episode")]);
    m_episode_isSet = !json[QString("episode")].isNull() && m_episode_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("season")]);
    m_season_isSet = !json[QString("season")].isNull() && m_season_isValid;

    m_show_isValid = ::OpenAPI::fromJsonValue(m_show, json[QString("show")]);
    m_show_isSet = !json[QString("show")].isNull() && m_show_isValid;
}

QString OAIContinueWatchingListDataExpansion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContinueWatchingListDataExpansion::asJsonObject() const {
    QJsonObject obj;
    if (m_episode.isSet()) {
        obj.insert(QString("episode"), ::OpenAPI::toJsonValue(m_episode));
    }
    if (m_season.isSet()) {
        obj.insert(QString("season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_show.isSet()) {
        obj.insert(QString("show"), ::OpenAPI::toJsonValue(m_show));
    }
    return obj;
}

OAIItemSummary OAIContinueWatchingListDataExpansion::getEpisode() const {
    return m_episode;
}
void OAIContinueWatchingListDataExpansion::setEpisode(const OAIItemSummary &episode) {
    m_episode = episode;
    m_episode_isSet = true;
}

bool OAIContinueWatchingListDataExpansion::is_episode_Set() const{
    return m_episode_isSet;
}

bool OAIContinueWatchingListDataExpansion::is_episode_Valid() const{
    return m_episode_isValid;
}

OAIItemSummary OAIContinueWatchingListDataExpansion::getSeason() const {
    return m_season;
}
void OAIContinueWatchingListDataExpansion::setSeason(const OAIItemSummary &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAIContinueWatchingListDataExpansion::is_season_Set() const{
    return m_season_isSet;
}

bool OAIContinueWatchingListDataExpansion::is_season_Valid() const{
    return m_season_isValid;
}

OAIItemSummary OAIContinueWatchingListDataExpansion::getShow() const {
    return m_show;
}
void OAIContinueWatchingListDataExpansion::setShow(const OAIItemSummary &show) {
    m_show = show;
    m_show_isSet = true;
}

bool OAIContinueWatchingListDataExpansion::is_show_Set() const{
    return m_show_isSet;
}

bool OAIContinueWatchingListDataExpansion::is_show_Valid() const{
    return m_show_isValid;
}

bool OAIContinueWatchingListDataExpansion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_episode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_season.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_show.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContinueWatchingListDataExpansion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
