/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISamsungPreviewSectionTile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISamsungPreviewSectionTile::OAISamsungPreviewSectionTile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISamsungPreviewSectionTile::OAISamsungPreviewSectionTile() {
    this->initializeModel();
}

OAISamsungPreviewSectionTile::~OAISamsungPreviewSectionTile() {}

void OAISamsungPreviewSectionTile::initializeModel() {

    m_action_data_isSet = false;
    m_action_data_isValid = false;

    m_display_from_isSet = false;
    m_display_from_isValid = false;

    m_display_until_isSet = false;
    m_display_until_isValid = false;

    m_image_ratio_isSet = false;
    m_image_ratio_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_is_playable_isSet = false;
    m_is_playable_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_subtitle_isSet = false;
    m_subtitle_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAISamsungPreviewSectionTile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISamsungPreviewSectionTile::fromJsonObject(QJsonObject json) {

    m_action_data_isValid = ::OpenAPI::fromJsonValue(m_action_data, json[QString("action_data")]);
    m_action_data_isSet = !json[QString("action_data")].isNull() && m_action_data_isValid;

    m_display_from_isValid = ::OpenAPI::fromJsonValue(m_display_from, json[QString("display_from")]);
    m_display_from_isSet = !json[QString("display_from")].isNull() && m_display_from_isValid;

    m_display_until_isValid = ::OpenAPI::fromJsonValue(m_display_until, json[QString("display_until")]);
    m_display_until_isSet = !json[QString("display_until")].isNull() && m_display_until_isValid;

    m_image_ratio_isValid = ::OpenAPI::fromJsonValue(m_image_ratio, json[QString("image_ratio")]);
    m_image_ratio_isSet = !json[QString("image_ratio")].isNull() && m_image_ratio_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("image_url")]);
    m_image_url_isSet = !json[QString("image_url")].isNull() && m_image_url_isValid;

    m_is_playable_isValid = ::OpenAPI::fromJsonValue(m_is_playable, json[QString("is_playable")]);
    m_is_playable_isSet = !json[QString("is_playable")].isNull() && m_is_playable_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_subtitle_isValid = ::OpenAPI::fromJsonValue(m_subtitle, json[QString("subtitle")]);
    m_subtitle_isSet = !json[QString("subtitle")].isNull() && m_subtitle_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAISamsungPreviewSectionTile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISamsungPreviewSectionTile::asJsonObject() const {
    QJsonObject obj;
    if (m_action_data_isSet) {
        obj.insert(QString("action_data"), ::OpenAPI::toJsonValue(m_action_data));
    }
    if (m_display_from_isSet) {
        obj.insert(QString("display_from"), ::OpenAPI::toJsonValue(m_display_from));
    }
    if (m_display_until_isSet) {
        obj.insert(QString("display_until"), ::OpenAPI::toJsonValue(m_display_until));
    }
    if (m_image_ratio_isSet) {
        obj.insert(QString("image_ratio"), ::OpenAPI::toJsonValue(m_image_ratio));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("image_url"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_is_playable_isSet) {
        obj.insert(QString("is_playable"), ::OpenAPI::toJsonValue(m_is_playable));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_subtitle_isSet) {
        obj.insert(QString("subtitle"), ::OpenAPI::toJsonValue(m_subtitle));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAISamsungPreviewSectionTile::getActionData() const {
    return m_action_data;
}
void OAISamsungPreviewSectionTile::setActionData(const QString &action_data) {
    m_action_data = action_data;
    m_action_data_isSet = true;
}

bool OAISamsungPreviewSectionTile::is_action_data_Set() const{
    return m_action_data_isSet;
}

bool OAISamsungPreviewSectionTile::is_action_data_Valid() const{
    return m_action_data_isValid;
}

QDateTime OAISamsungPreviewSectionTile::getDisplayFrom() const {
    return m_display_from;
}
void OAISamsungPreviewSectionTile::setDisplayFrom(const QDateTime &display_from) {
    m_display_from = display_from;
    m_display_from_isSet = true;
}

bool OAISamsungPreviewSectionTile::is_display_from_Set() const{
    return m_display_from_isSet;
}

bool OAISamsungPreviewSectionTile::is_display_from_Valid() const{
    return m_display_from_isValid;
}

QDateTime OAISamsungPreviewSectionTile::getDisplayUntil() const {
    return m_display_until;
}
void OAISamsungPreviewSectionTile::setDisplayUntil(const QDateTime &display_until) {
    m_display_until = display_until;
    m_display_until_isSet = true;
}

bool OAISamsungPreviewSectionTile::is_display_until_Set() const{
    return m_display_until_isSet;
}

bool OAISamsungPreviewSectionTile::is_display_until_Valid() const{
    return m_display_until_isValid;
}

QString OAISamsungPreviewSectionTile::getImageRatio() const {
    return m_image_ratio;
}
void OAISamsungPreviewSectionTile::setImageRatio(const QString &image_ratio) {
    m_image_ratio = image_ratio;
    m_image_ratio_isSet = true;
}

bool OAISamsungPreviewSectionTile::is_image_ratio_Set() const{
    return m_image_ratio_isSet;
}

bool OAISamsungPreviewSectionTile::is_image_ratio_Valid() const{
    return m_image_ratio_isValid;
}

QString OAISamsungPreviewSectionTile::getImageUrl() const {
    return m_image_url;
}
void OAISamsungPreviewSectionTile::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAISamsungPreviewSectionTile::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAISamsungPreviewSectionTile::is_image_url_Valid() const{
    return m_image_url_isValid;
}

bool OAISamsungPreviewSectionTile::isIsPlayable() const {
    return m_is_playable;
}
void OAISamsungPreviewSectionTile::setIsPlayable(const bool &is_playable) {
    m_is_playable = is_playable;
    m_is_playable_isSet = true;
}

bool OAISamsungPreviewSectionTile::is_is_playable_Set() const{
    return m_is_playable_isSet;
}

bool OAISamsungPreviewSectionTile::is_is_playable_Valid() const{
    return m_is_playable_isValid;
}

qint32 OAISamsungPreviewSectionTile::getPosition() const {
    return m_position;
}
void OAISamsungPreviewSectionTile::setPosition(const qint32 &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAISamsungPreviewSectionTile::is_position_Set() const{
    return m_position_isSet;
}

bool OAISamsungPreviewSectionTile::is_position_Valid() const{
    return m_position_isValid;
}

QString OAISamsungPreviewSectionTile::getSubtitle() const {
    return m_subtitle;
}
void OAISamsungPreviewSectionTile::setSubtitle(const QString &subtitle) {
    m_subtitle = subtitle;
    m_subtitle_isSet = true;
}

bool OAISamsungPreviewSectionTile::is_subtitle_Set() const{
    return m_subtitle_isSet;
}

bool OAISamsungPreviewSectionTile::is_subtitle_Valid() const{
    return m_subtitle_isValid;
}

QString OAISamsungPreviewSectionTile::getTitle() const {
    return m_title;
}
void OAISamsungPreviewSectionTile::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISamsungPreviewSectionTile::is_title_Set() const{
    return m_title_isSet;
}

bool OAISamsungPreviewSectionTile::is_title_Valid() const{
    return m_title_isValid;
}

bool OAISamsungPreviewSectionTile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_until_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_playable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISamsungPreviewSectionTile::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_data_isValid && m_image_ratio_isValid && m_image_url_isValid && m_is_playable_isValid && true;
}

} // namespace OpenAPI
