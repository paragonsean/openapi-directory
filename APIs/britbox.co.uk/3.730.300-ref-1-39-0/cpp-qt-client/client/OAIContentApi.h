/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIContentApi_H
#define OAI_OAIContentApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIItemClipFilesList.h"
#include "OAIItemDetail.h"
#include "OAIItemDownloadableList.h"
#include "OAIItemDownloadableRequest.h"
#include "OAIItemList.h"
#include "OAIItemScheduleList.h"
#include "OAIMediaFile.h"
#include "OAINextPlaybackItem.h"
#include "OAIPlan.h"
#include "OAISearchResults.h"
#include "OAIServiceError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIContentApi : public QObject {
    Q_OBJECT

public:
    OAIContentApi(const int timeOut = 0);
    ~OAIContentApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  max_rating QString [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  segments QList<QString> [optional]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getAnonNextPlaybackItem(const QString &item_id, const ::OpenAPI::OptionalParam<QString> &max_rating = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &segments = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  max_rating QString [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  select_season QString [optional]
    * @param[in]  use_custom_id bool [optional]
    * @param[in]  device QString [optional]
    * @param[in]  sub QString [optional]
    * @param[in]  segments QList<QString> [optional]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getItem(const QString &id, const ::OpenAPI::OptionalParam<QString> &max_rating = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &select_season = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &use_custom_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sub = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &segments = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  max_rating QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  sub QString [optional]
    * @param[in]  segments QList<QString> [optional]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getItemChildrenList(const QString &id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_rating = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sub = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &segments = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_item_downloadable_request OAIItemDownloadableRequest [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getItemDownloadables(const OAIItemDownloadableRequest &oai_item_downloadable_request, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  max_rating QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  sub QString [optional]
    * @param[in]  segments QList<QString> [optional]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getItemRelatedList(const QString &id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_rating = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sub = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &segments = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_item_downloadable_request OAIItemDownloadableRequest [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getItemsMediaClipFiles(const OAIItemDownloadableRequest &oai_item_downloadable_request, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  max_rating QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  param QString [optional]
    * @param[in]  item_type QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  sub QString [optional]
    * @param[in]  segments QList<QString> [optional]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getList(const QString &id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_rating = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &param = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &item_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sub = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &segments = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QList<QString> [required]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  max_rating QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  item_type QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  sub QString [optional]
    * @param[in]  segments QList<QString> [optional]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getLists(const QList<QString> &ids, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_rating = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &item_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sub = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &segments = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  delivery QList<QString> [required]
    * @param[in]  resolution QString [required]
    * @param[in]  formats QList<QString> [optional]
    * @param[in]  device QString [optional]
    * @param[in]  sub QString [optional]
    * @param[in]  segments QList<QString> [optional]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getPublicItemMediaFiles(const QString &id, const QList<QString> &delivery, const QString &resolution, const ::OpenAPI::OptionalParam<QList<QString>> &formats = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sub = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &segments = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  channels QList<QString> [required]
    * @param[in]  date QDate [required]
    * @param[in]  hour qint32 [required]
    * @param[in]  duration qint32 [required]
    * @param[in]  intersect bool [optional]
    * @param[in]  device QString [optional]
    * @param[in]  sub QString [optional]
    * @param[in]  segments QList<QString> [optional]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getSchedules(const QList<QString> &channels, const QDate &date, const qint32 &hour, const qint32 &duration, const ::OpenAPI::OptionalParam<bool> &intersect = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sub = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &segments = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  device QString [optional]
    * @param[in]  sub QString [optional]
    * @param[in]  segments QList<QString> [optional]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void plansIdGet(const QString &id, const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sub = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &segments = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  term QString [required]
    * @param[in]  include QList<QString> [optional]
    * @param[in]  group bool [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  max_rating QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  sub QString [optional]
    * @param[in]  segments QList<QString> [optional]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void search(const QString &term, const ::OpenAPI::OptionalParam<QList<QString>> &include = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &group = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_rating = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sub = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &segments = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAnonNextPlaybackItemCallback(OAIHttpRequestWorker *worker);
    void getItemCallback(OAIHttpRequestWorker *worker);
    void getItemChildrenListCallback(OAIHttpRequestWorker *worker);
    void getItemDownloadablesCallback(OAIHttpRequestWorker *worker);
    void getItemRelatedListCallback(OAIHttpRequestWorker *worker);
    void getItemsMediaClipFilesCallback(OAIHttpRequestWorker *worker);
    void getListCallback(OAIHttpRequestWorker *worker);
    void getListsCallback(OAIHttpRequestWorker *worker);
    void getPublicItemMediaFilesCallback(OAIHttpRequestWorker *worker);
    void getSchedulesCallback(OAIHttpRequestWorker *worker);
    void plansIdGetCallback(OAIHttpRequestWorker *worker);
    void searchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAnonNextPlaybackItemSignal(OAINextPlaybackItem summary);
    void getItemSignal(OAIItemDetail summary);
    void getItemChildrenListSignal(OAIItemList summary);
    void getItemDownloadablesSignal(OAIItemDownloadableList summary);
    void getItemRelatedListSignal(OAIItemList summary);
    void getItemsMediaClipFilesSignal(OAIItemClipFilesList summary);
    void getListSignal(OAIItemList summary);
    void getListsSignal(QList<OAIItemList> summary);
    void getPublicItemMediaFilesSignal(QList<OAIMediaFile> summary);
    void getSchedulesSignal(QList<OAIItemScheduleList> summary);
    void plansIdGetSignal(OAIPlan summary);
    void searchSignal(OAISearchResults summary);


    void getAnonNextPlaybackItemSignalFull(OAIHttpRequestWorker *worker, OAINextPlaybackItem summary);
    void getItemSignalFull(OAIHttpRequestWorker *worker, OAIItemDetail summary);
    void getItemChildrenListSignalFull(OAIHttpRequestWorker *worker, OAIItemList summary);
    void getItemDownloadablesSignalFull(OAIHttpRequestWorker *worker, OAIItemDownloadableList summary);
    void getItemRelatedListSignalFull(OAIHttpRequestWorker *worker, OAIItemList summary);
    void getItemsMediaClipFilesSignalFull(OAIHttpRequestWorker *worker, OAIItemClipFilesList summary);
    void getListSignalFull(OAIHttpRequestWorker *worker, OAIItemList summary);
    void getListsSignalFull(OAIHttpRequestWorker *worker, QList<OAIItemList> summary);
    void getPublicItemMediaFilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIMediaFile> summary);
    void getSchedulesSignalFull(OAIHttpRequestWorker *worker, QList<OAIItemScheduleList> summary);
    void plansIdGetSignalFull(OAIHttpRequestWorker *worker, OAIPlan summary);
    void searchSignalFull(OAIHttpRequestWorker *worker, OAISearchResults summary);

    Q_DECL_DEPRECATED_X("Use getAnonNextPlaybackItemSignalError() instead")
    void getAnonNextPlaybackItemSignalE(OAINextPlaybackItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnonNextPlaybackItemSignalError(OAINextPlaybackItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemSignalError() instead")
    void getItemSignalE(OAIItemDetail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemSignalError(OAIItemDetail summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemChildrenListSignalError() instead")
    void getItemChildrenListSignalE(OAIItemList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemChildrenListSignalError(OAIItemList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemDownloadablesSignalError() instead")
    void getItemDownloadablesSignalE(OAIItemDownloadableList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemDownloadablesSignalError(OAIItemDownloadableList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemRelatedListSignalError() instead")
    void getItemRelatedListSignalE(OAIItemList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemRelatedListSignalError(OAIItemList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemsMediaClipFilesSignalError() instead")
    void getItemsMediaClipFilesSignalE(OAIItemClipFilesList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemsMediaClipFilesSignalError(OAIItemClipFilesList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListSignalError() instead")
    void getListSignalE(OAIItemList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getListSignalError(OAIItemList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListsSignalError() instead")
    void getListsSignalE(QList<OAIItemList> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getListsSignalError(QList<OAIItemList> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicItemMediaFilesSignalError() instead")
    void getPublicItemMediaFilesSignalE(QList<OAIMediaFile> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicItemMediaFilesSignalError(QList<OAIMediaFile> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSchedulesSignalError() instead")
    void getSchedulesSignalE(QList<OAIItemScheduleList> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSchedulesSignalError(QList<OAIItemScheduleList> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use plansIdGetSignalError() instead")
    void plansIdGetSignalE(OAIPlan summary, QNetworkReply::NetworkError error_type, QString error_str);
    void plansIdGetSignalError(OAIPlan summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSignalError() instead")
    void searchSignalE(OAISearchResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchSignalError(OAISearchResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAnonNextPlaybackItemSignalErrorFull() instead")
    void getAnonNextPlaybackItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnonNextPlaybackItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemSignalErrorFull() instead")
    void getItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemChildrenListSignalErrorFull() instead")
    void getItemChildrenListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemChildrenListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemDownloadablesSignalErrorFull() instead")
    void getItemDownloadablesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemDownloadablesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemRelatedListSignalErrorFull() instead")
    void getItemRelatedListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemRelatedListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemsMediaClipFilesSignalErrorFull() instead")
    void getItemsMediaClipFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemsMediaClipFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListSignalErrorFull() instead")
    void getListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListsSignalErrorFull() instead")
    void getListsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getListsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicItemMediaFilesSignalErrorFull() instead")
    void getPublicItemMediaFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicItemMediaFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSchedulesSignalErrorFull() instead")
    void getSchedulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSchedulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use plansIdGetSignalErrorFull() instead")
    void plansIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void plansIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSignalErrorFull() instead")
    void searchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
