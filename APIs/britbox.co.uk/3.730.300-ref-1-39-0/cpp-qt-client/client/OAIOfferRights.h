/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOfferRights.h
 *
 * The base type for both Offer and Entitlement.
 */

#ifndef OAIOfferRights_H
#define OAIOfferRights_H

#include <QJsonObject>

#include "OAIExclusionRule.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIExclusionRule;

class OAIOfferRights : public OAIObject {
public:
    OAIOfferRights();
    OAIOfferRights(QString json);
    ~OAIOfferRights() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDeliveryType() const;
    void setDeliveryType(const QString &delivery_type);
    bool is_delivery_type_Set() const;
    bool is_delivery_type_Valid() const;

    QList<OAIExclusionRule> getExclusionRules() const;
    void setExclusionRules(const QList<OAIExclusionRule> &exclusion_rules);
    bool is_exclusion_rules_Set() const;
    bool is_exclusion_rules_Valid() const;

    qint32 getMaxDownloads() const;
    void setMaxDownloads(const qint32 &max_downloads);
    bool is_max_downloads_Set() const;
    bool is_max_downloads_Valid() const;

    qint32 getMaxPlays() const;
    void setMaxPlays(const qint32 &max_plays);
    bool is_max_plays_Set() const;
    bool is_max_plays_Valid() const;

    QString getOwnership() const;
    void setOwnership(const QString &ownership);
    bool is_ownership_Set() const;
    bool is_ownership_Valid() const;

    qint32 getPlayPeriod() const;
    void setPlayPeriod(const qint32 &play_period);
    bool is_play_period_Set() const;
    bool is_play_period_Valid() const;

    qint32 getRentalPeriod() const;
    void setRentalPeriod(const qint32 &rental_period);
    bool is_rental_period_Set() const;
    bool is_rental_period_Valid() const;

    QString getResolution() const;
    void setResolution(const QString &resolution);
    bool is_resolution_Set() const;
    bool is_resolution_Valid() const;

    QList<QString> getScopes() const;
    void setScopes(const QList<QString> &scopes);
    bool is_scopes_Set() const;
    bool is_scopes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_delivery_type;
    bool m_delivery_type_isSet;
    bool m_delivery_type_isValid;

    QList<OAIExclusionRule> m_exclusion_rules;
    bool m_exclusion_rules_isSet;
    bool m_exclusion_rules_isValid;

    qint32 m_max_downloads;
    bool m_max_downloads_isSet;
    bool m_max_downloads_isValid;

    qint32 m_max_plays;
    bool m_max_plays_isSet;
    bool m_max_plays_isValid;

    QString m_ownership;
    bool m_ownership_isSet;
    bool m_ownership_isValid;

    qint32 m_play_period;
    bool m_play_period_isSet;
    bool m_play_period_isValid;

    qint32 m_rental_period;
    bool m_rental_period_isSet;
    bool m_rental_period_isValid;

    QString m_resolution;
    bool m_resolution_isSet;
    bool m_resolution_isValid;

    QList<QString> m_scopes;
    bool m_scopes_isSet;
    bool m_scopes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOfferRights)

#endif // OAIOfferRights_H
