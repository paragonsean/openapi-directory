/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISamsungPreviewSectionTile.h
 *
 * 
 */

#ifndef OAISamsungPreviewSectionTile_H
#define OAISamsungPreviewSectionTile_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISamsungPreviewSectionTile : public OAIObject {
public:
    OAISamsungPreviewSectionTile();
    OAISamsungPreviewSectionTile(QString json);
    ~OAISamsungPreviewSectionTile() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getActionData() const;
    void setActionData(const QString &action_data);
    bool is_action_data_Set() const;
    bool is_action_data_Valid() const;

    QDateTime getDisplayFrom() const;
    void setDisplayFrom(const QDateTime &display_from);
    bool is_display_from_Set() const;
    bool is_display_from_Valid() const;

    QDateTime getDisplayUntil() const;
    void setDisplayUntil(const QDateTime &display_until);
    bool is_display_until_Set() const;
    bool is_display_until_Valid() const;

    QString getImageRatio() const;
    void setImageRatio(const QString &image_ratio);
    bool is_image_ratio_Set() const;
    bool is_image_ratio_Valid() const;

    QString getImageUrl() const;
    void setImageUrl(const QString &image_url);
    bool is_image_url_Set() const;
    bool is_image_url_Valid() const;

    bool isIsPlayable() const;
    void setIsPlayable(const bool &is_playable);
    bool is_is_playable_Set() const;
    bool is_is_playable_Valid() const;

    qint32 getPosition() const;
    void setPosition(const qint32 &position);
    bool is_position_Set() const;
    bool is_position_Valid() const;

    QString getSubtitle() const;
    void setSubtitle(const QString &subtitle);
    bool is_subtitle_Set() const;
    bool is_subtitle_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_action_data;
    bool m_action_data_isSet;
    bool m_action_data_isValid;

    QDateTime m_display_from;
    bool m_display_from_isSet;
    bool m_display_from_isValid;

    QDateTime m_display_until;
    bool m_display_until_isSet;
    bool m_display_until_isValid;

    QString m_image_ratio;
    bool m_image_ratio_isSet;
    bool m_image_ratio_isValid;

    QString m_image_url;
    bool m_image_url_isSet;
    bool m_image_url_isValid;

    bool m_is_playable;
    bool m_is_playable_isSet;
    bool m_is_playable_isValid;

    qint32 m_position;
    bool m_position_isSet;
    bool m_position_isValid;

    QString m_subtitle;
    bool m_subtitle_isSet;
    bool m_subtitle_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISamsungPreviewSectionTile)

#endif // OAISamsungPreviewSectionTile_H
