/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIItvSubscriptionState.h
 *
 * 
 */

#ifndef OAIItvSubscriptionState_H
#define OAIItvSubscriptionState_H

#include <QJsonObject>

#include "OAIItvEntitlement.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIItvEntitlement;

class OAIItvSubscriptionState : public OAIObject {
public:
    OAIItvSubscriptionState();
    OAIItvSubscriptionState(QString json);
    ~OAIItvSubscriptionState() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIItvEntitlement> getEffectiveEntitlements() const;
    void setEffectiveEntitlements(const QList<OAIItvEntitlement> &effective_entitlements);
    bool is_effective_entitlements_Set() const;
    bool is_effective_entitlements_Valid() const;

    QList<QString> getFailedAvailabilityChecks() const;
    void setFailedAvailabilityChecks(const QList<QString> &failed_availability_checks);
    bool is_failed_availability_checks_Set() const;
    bool is_failed_availability_checks_Valid() const;

    QList<QString> getPurchased() const;
    void setPurchased(const QList<QString> &purchased);
    bool is_purchased_Set() const;
    bool is_purchased_Valid() const;

    QString getSource() const;
    void setSource(const QString &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIItvEntitlement> m_effective_entitlements;
    bool m_effective_entitlements_isSet;
    bool m_effective_entitlements_isValid;

    QList<QString> m_failed_availability_checks;
    bool m_failed_availability_checks_isSet;
    bool m_failed_availability_checks_isValid;

    QList<QString> m_purchased;
    bool m_purchased_isSet;
    bool m_purchased_isValid;

    QString m_source;
    bool m_source_isSet;
    bool m_source_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIItvSubscriptionState)

#endif // OAIItvSubscriptionState_H
