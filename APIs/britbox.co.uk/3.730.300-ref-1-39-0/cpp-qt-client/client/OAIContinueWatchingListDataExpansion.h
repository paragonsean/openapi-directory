/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIContinueWatchingListDataExpansion.h
 *
 * 
 */

#ifndef OAIContinueWatchingListDataExpansion_H
#define OAIContinueWatchingListDataExpansion_H

#include <QJsonObject>

#include "OAIItemSummary.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIItemSummary;

class OAIContinueWatchingListDataExpansion : public OAIObject {
public:
    OAIContinueWatchingListDataExpansion();
    OAIContinueWatchingListDataExpansion(QString json);
    ~OAIContinueWatchingListDataExpansion() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIItemSummary getEpisode() const;
    void setEpisode(const OAIItemSummary &episode);
    bool is_episode_Set() const;
    bool is_episode_Valid() const;

    OAIItemSummary getSeason() const;
    void setSeason(const OAIItemSummary &season);
    bool is_season_Set() const;
    bool is_season_Valid() const;

    OAIItemSummary getShow() const;
    void setShow(const OAIItemSummary &show);
    bool is_show_Set() const;
    bool is_show_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIItemSummary m_episode;
    bool m_episode_isSet;
    bool m_episode_isValid;

    OAIItemSummary m_season;
    bool m_season_isSet;
    bool m_season_isValid;

    OAIItemSummary m_show;
    bool m_show_isSet;
    bool m_show_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIContinueWatchingListDataExpansion)

#endif // OAIContinueWatchingListDataExpansion_H
