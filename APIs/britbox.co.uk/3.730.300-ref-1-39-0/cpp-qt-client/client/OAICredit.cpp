/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICredit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICredit::OAICredit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICredit::OAICredit() {
    this->initializeModel();
}

OAICredit::~OAICredit() {}

void OAICredit::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_character_isSet = false;
    m_character_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;
}

void OAICredit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICredit::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_character_isValid = ::OpenAPI::fromJsonValue(m_character, json[QString("character")]);
    m_character_isSet = !json[QString("character")].isNull() && m_character_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;
}

QString OAICredit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICredit::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_character_isSet) {
        obj.insert(QString("character"), ::OpenAPI::toJsonValue(m_character));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    return obj;
}

QString OAICredit::getName() const {
    return m_name;
}
void OAICredit::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICredit::is_name_Set() const{
    return m_name_isSet;
}

bool OAICredit::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICredit::getPath() const {
    return m_path;
}
void OAICredit::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAICredit::is_path_Set() const{
    return m_path_isSet;
}

bool OAICredit::is_path_Valid() const{
    return m_path_isValid;
}

QString OAICredit::getCharacter() const {
    return m_character;
}
void OAICredit::setCharacter(const QString &character) {
    m_character = character;
    m_character_isSet = true;
}

bool OAICredit::is_character_Set() const{
    return m_character_isSet;
}

bool OAICredit::is_character_Valid() const{
    return m_character_isValid;
}

QString OAICredit::getRole() const {
    return m_role;
}
void OAICredit::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAICredit::is_role_Set() const{
    return m_role_isSet;
}

bool OAICredit::is_role_Valid() const{
    return m_role_isValid;
}

bool OAICredit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_character_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICredit::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_path_isValid && m_role_isValid && true;
}

} // namespace OpenAPI
