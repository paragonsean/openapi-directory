/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlanPurchase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlanPurchase::OAIPlanPurchase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlanPurchase::OAIPlanPurchase() {
    this->initializeModel();
}

OAIPlanPurchase::~OAIPlanPurchase() {}

void OAIPlanPurchase::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPlanPurchase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlanPurchase::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPlanPurchase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlanPurchase::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIPlanPurchase::getId() const {
    return m_id;
}
void OAIPlanPurchase::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPlanPurchase::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPlanPurchase::is_id_Valid() const{
    return m_id_isValid;
}

float OAIPlanPurchase::getPrice() const {
    return m_price;
}
void OAIPlanPurchase::setPrice(const float &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIPlanPurchase::is_price_Set() const{
    return m_price_isSet;
}

bool OAIPlanPurchase::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIPlanPurchase::getSubscriptionId() const {
    return m_subscription_id;
}
void OAIPlanPurchase::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAIPlanPurchase::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIPlanPurchase::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

QString OAIPlanPurchase::getTitle() const {
    return m_title;
}
void OAIPlanPurchase::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPlanPurchase::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPlanPurchase::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIPlanPurchase::getType() const {
    return m_type;
}
void OAIPlanPurchase::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPlanPurchase::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPlanPurchase::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPlanPurchase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlanPurchase::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_title_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
