/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEntitlement.h
 *
 * 
 */

#ifndef OAIEntitlement_H
#define OAIEntitlement_H

#include <QJsonObject>

#include "OAIClassificationSummary.h"
#include "OAIExclusionRule.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIExclusionRule;
class OAIClassificationSummary;

class OAIEntitlement : public OAIObject {
public:
    OAIEntitlement();
    OAIEntitlement(QString json);
    ~OAIEntitlement() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDeliveryType() const;
    void setDeliveryType(const QString &delivery_type);
    bool is_delivery_type_Set() const;
    bool is_delivery_type_Valid() const;

    QList<OAIExclusionRule> getExclusionRules() const;
    void setExclusionRules(const QList<OAIExclusionRule> &exclusion_rules);
    bool is_exclusion_rules_Set() const;
    bool is_exclusion_rules_Valid() const;

    qint32 getMaxDownloads() const;
    void setMaxDownloads(const qint32 &max_downloads);
    bool is_max_downloads_Set() const;
    bool is_max_downloads_Valid() const;

    qint32 getMaxPlays() const;
    void setMaxPlays(const qint32 &max_plays);
    bool is_max_plays_Set() const;
    bool is_max_plays_Valid() const;

    QString getOwnership() const;
    void setOwnership(const QString &ownership);
    bool is_ownership_Set() const;
    bool is_ownership_Valid() const;

    qint32 getPlayPeriod() const;
    void setPlayPeriod(const qint32 &play_period);
    bool is_play_period_Set() const;
    bool is_play_period_Valid() const;

    qint32 getRentalPeriod() const;
    void setRentalPeriod(const qint32 &rental_period);
    bool is_rental_period_Set() const;
    bool is_rental_period_Valid() const;

    QString getResolution() const;
    void setResolution(const QString &resolution);
    bool is_resolution_Set() const;
    bool is_resolution_Valid() const;

    QList<QString> getScopes() const;
    void setScopes(const QList<QString> &scopes);
    bool is_scopes_Set() const;
    bool is_scopes_Valid() const;

    QDateTime getActivationDate() const;
    void setActivationDate(const QDateTime &activation_date);
    bool is_activation_date_Set() const;
    bool is_activation_date_Valid() const;

    OAIClassificationSummary getClassification() const;
    void setClassification(const OAIClassificationSummary &classification);
    bool is_classification_Set() const;
    bool is_classification_Valid() const;

    QDateTime getCreationDate() const;
    void setCreationDate(const QDateTime &creation_date);
    bool is_creation_date_Set() const;
    bool is_creation_date_Valid() const;

    QDateTime getExpirationDate() const;
    void setExpirationDate(const QDateTime &expiration_date);
    bool is_expiration_date_Set() const;
    bool is_expiration_date_Valid() const;

    QString getItemId() const;
    void setItemId(const QString &item_id);
    bool is_item_id_Set() const;
    bool is_item_id_Valid() const;

    QString getItemType() const;
    void setItemType(const QString &item_type);
    bool is_item_type_Set() const;
    bool is_item_type_Valid() const;

    qint32 getMediaDuration() const;
    void setMediaDuration(const qint32 &media_duration);
    bool is_media_duration_Set() const;
    bool is_media_duration_Valid() const;

    QString getPlanId() const;
    void setPlanId(const QString &plan_id);
    bool is_plan_id_Set() const;
    bool is_plan_id_Valid() const;

    qint32 getPlayCount() const;
    void setPlayCount(const qint32 &play_count);
    bool is_play_count_Set() const;
    bool is_play_count_Valid() const;

    qint32 getRemainingDownloads() const;
    void setRemainingDownloads(const qint32 &remaining_downloads);
    bool is_remaining_downloads_Set() const;
    bool is_remaining_downloads_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_delivery_type;
    bool m_delivery_type_isSet;
    bool m_delivery_type_isValid;

    QList<OAIExclusionRule> m_exclusion_rules;
    bool m_exclusion_rules_isSet;
    bool m_exclusion_rules_isValid;

    qint32 m_max_downloads;
    bool m_max_downloads_isSet;
    bool m_max_downloads_isValid;

    qint32 m_max_plays;
    bool m_max_plays_isSet;
    bool m_max_plays_isValid;

    QString m_ownership;
    bool m_ownership_isSet;
    bool m_ownership_isValid;

    qint32 m_play_period;
    bool m_play_period_isSet;
    bool m_play_period_isValid;

    qint32 m_rental_period;
    bool m_rental_period_isSet;
    bool m_rental_period_isValid;

    QString m_resolution;
    bool m_resolution_isSet;
    bool m_resolution_isValid;

    QList<QString> m_scopes;
    bool m_scopes_isSet;
    bool m_scopes_isValid;

    QDateTime m_activation_date;
    bool m_activation_date_isSet;
    bool m_activation_date_isValid;

    OAIClassificationSummary m_classification;
    bool m_classification_isSet;
    bool m_classification_isValid;

    QDateTime m_creation_date;
    bool m_creation_date_isSet;
    bool m_creation_date_isValid;

    QDateTime m_expiration_date;
    bool m_expiration_date_isSet;
    bool m_expiration_date_isValid;

    QString m_item_id;
    bool m_item_id_isSet;
    bool m_item_id_isValid;

    QString m_item_type;
    bool m_item_type_isSet;
    bool m_item_type_isValid;

    qint32 m_media_duration;
    bool m_media_duration_isSet;
    bool m_media_duration_isValid;

    QString m_plan_id;
    bool m_plan_id_isSet;
    bool m_plan_id_isValid;

    qint32 m_play_count;
    bool m_play_count_isSet;
    bool m_play_count_isValid;

    qint32 m_remaining_downloads;
    bool m_remaining_downloads_isSet;
    bool m_remaining_downloads_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEntitlement)

#endif // OAIEntitlement_H
