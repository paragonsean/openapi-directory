/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExclusionRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExclusionRule::OAIExclusionRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExclusionRule::OAIExclusionRule() {
    this->initializeModel();
}

OAIExclusionRule::~OAIExclusionRule() {}

void OAIExclusionRule::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_exclude_airplay_isSet = false;
    m_exclude_airplay_isValid = false;

    m_exclude_chromecast_isSet = false;
    m_exclude_chromecast_isValid = false;

    m_exclude_delivery_isSet = false;
    m_exclude_delivery_isValid = false;

    m_exclude_min_resolution_isSet = false;
    m_exclude_min_resolution_isValid = false;
}

void OAIExclusionRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExclusionRule::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_exclude_airplay_isValid = ::OpenAPI::fromJsonValue(m_exclude_airplay, json[QString("excludeAirplay")]);
    m_exclude_airplay_isSet = !json[QString("excludeAirplay")].isNull() && m_exclude_airplay_isValid;

    m_exclude_chromecast_isValid = ::OpenAPI::fromJsonValue(m_exclude_chromecast, json[QString("excludeChromecast")]);
    m_exclude_chromecast_isSet = !json[QString("excludeChromecast")].isNull() && m_exclude_chromecast_isValid;

    m_exclude_delivery_isValid = ::OpenAPI::fromJsonValue(m_exclude_delivery, json[QString("excludeDelivery")]);
    m_exclude_delivery_isSet = !json[QString("excludeDelivery")].isNull() && m_exclude_delivery_isValid;

    m_exclude_min_resolution_isValid = ::OpenAPI::fromJsonValue(m_exclude_min_resolution, json[QString("excludeMinResolution")]);
    m_exclude_min_resolution_isSet = !json[QString("excludeMinResolution")].isNull() && m_exclude_min_resolution_isValid;
}

QString OAIExclusionRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExclusionRule::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_device_isSet) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_exclude_airplay_isSet) {
        obj.insert(QString("excludeAirplay"), ::OpenAPI::toJsonValue(m_exclude_airplay));
    }
    if (m_exclude_chromecast_isSet) {
        obj.insert(QString("excludeChromecast"), ::OpenAPI::toJsonValue(m_exclude_chromecast));
    }
    if (m_exclude_delivery_isSet) {
        obj.insert(QString("excludeDelivery"), ::OpenAPI::toJsonValue(m_exclude_delivery));
    }
    if (m_exclude_min_resolution_isSet) {
        obj.insert(QString("excludeMinResolution"), ::OpenAPI::toJsonValue(m_exclude_min_resolution));
    }
    return obj;
}

QString OAIExclusionRule::getDescription() const {
    return m_description;
}
void OAIExclusionRule::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIExclusionRule::is_description_Set() const{
    return m_description_isSet;
}

bool OAIExclusionRule::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIExclusionRule::getDevice() const {
    return m_device;
}
void OAIExclusionRule::setDevice(const QString &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIExclusionRule::is_device_Set() const{
    return m_device_isSet;
}

bool OAIExclusionRule::is_device_Valid() const{
    return m_device_isValid;
}

bool OAIExclusionRule::isExcludeAirplay() const {
    return m_exclude_airplay;
}
void OAIExclusionRule::setExcludeAirplay(const bool &exclude_airplay) {
    m_exclude_airplay = exclude_airplay;
    m_exclude_airplay_isSet = true;
}

bool OAIExclusionRule::is_exclude_airplay_Set() const{
    return m_exclude_airplay_isSet;
}

bool OAIExclusionRule::is_exclude_airplay_Valid() const{
    return m_exclude_airplay_isValid;
}

bool OAIExclusionRule::isExcludeChromecast() const {
    return m_exclude_chromecast;
}
void OAIExclusionRule::setExcludeChromecast(const bool &exclude_chromecast) {
    m_exclude_chromecast = exclude_chromecast;
    m_exclude_chromecast_isSet = true;
}

bool OAIExclusionRule::is_exclude_chromecast_Set() const{
    return m_exclude_chromecast_isSet;
}

bool OAIExclusionRule::is_exclude_chromecast_Valid() const{
    return m_exclude_chromecast_isValid;
}

QString OAIExclusionRule::getExcludeDelivery() const {
    return m_exclude_delivery;
}
void OAIExclusionRule::setExcludeDelivery(const QString &exclude_delivery) {
    m_exclude_delivery = exclude_delivery;
    m_exclude_delivery_isSet = true;
}

bool OAIExclusionRule::is_exclude_delivery_Set() const{
    return m_exclude_delivery_isSet;
}

bool OAIExclusionRule::is_exclude_delivery_Valid() const{
    return m_exclude_delivery_isValid;
}

QString OAIExclusionRule::getExcludeMinResolution() const {
    return m_exclude_min_resolution;
}
void OAIExclusionRule::setExcludeMinResolution(const QString &exclude_min_resolution) {
    m_exclude_min_resolution = exclude_min_resolution;
    m_exclude_min_resolution_isSet = true;
}

bool OAIExclusionRule::is_exclude_min_resolution_Set() const{
    return m_exclude_min_resolution_isSet;
}

bool OAIExclusionRule::is_exclude_min_resolution_Valid() const{
    return m_exclude_min_resolution_isValid;
}

bool OAIExclusionRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_airplay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_chromecast_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_delivery_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_min_resolution_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExclusionRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
