/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppConfigPlayback.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppConfigPlayback::OAIAppConfigPlayback(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppConfigPlayback::OAIAppConfigPlayback() {
    this->initializeModel();
}

OAIAppConfigPlayback::~OAIAppConfigPlayback() {}

void OAIAppConfigPlayback::initializeModel() {

    m_chain_play_countdown_isSet = false;
    m_chain_play_countdown_isValid = false;

    m_chain_play_squeezeback_isSet = false;
    m_chain_play_squeezeback_isValid = false;

    m_chain_play_timeout_isSet = false;
    m_chain_play_timeout_isValid = false;

    m_heartbeat_frequency_isSet = false;
    m_heartbeat_frequency_isValid = false;

    m_view_event_points_isSet = false;
    m_view_event_points_isValid = false;
}

void OAIAppConfigPlayback::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppConfigPlayback::fromJsonObject(QJsonObject json) {

    m_chain_play_countdown_isValid = ::OpenAPI::fromJsonValue(m_chain_play_countdown, json[QString("chainPlayCountdown")]);
    m_chain_play_countdown_isSet = !json[QString("chainPlayCountdown")].isNull() && m_chain_play_countdown_isValid;

    m_chain_play_squeezeback_isValid = ::OpenAPI::fromJsonValue(m_chain_play_squeezeback, json[QString("chainPlaySqueezeback")]);
    m_chain_play_squeezeback_isSet = !json[QString("chainPlaySqueezeback")].isNull() && m_chain_play_squeezeback_isValid;

    m_chain_play_timeout_isValid = ::OpenAPI::fromJsonValue(m_chain_play_timeout, json[QString("chainPlayTimeout")]);
    m_chain_play_timeout_isSet = !json[QString("chainPlayTimeout")].isNull() && m_chain_play_timeout_isValid;

    m_heartbeat_frequency_isValid = ::OpenAPI::fromJsonValue(m_heartbeat_frequency, json[QString("heartbeatFrequency")]);
    m_heartbeat_frequency_isSet = !json[QString("heartbeatFrequency")].isNull() && m_heartbeat_frequency_isValid;

    m_view_event_points_isValid = ::OpenAPI::fromJsonValue(m_view_event_points, json[QString("viewEventPoints")]);
    m_view_event_points_isSet = !json[QString("viewEventPoints")].isNull() && m_view_event_points_isValid;
}

QString OAIAppConfigPlayback::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppConfigPlayback::asJsonObject() const {
    QJsonObject obj;
    if (m_chain_play_countdown_isSet) {
        obj.insert(QString("chainPlayCountdown"), ::OpenAPI::toJsonValue(m_chain_play_countdown));
    }
    if (m_chain_play_squeezeback_isSet) {
        obj.insert(QString("chainPlaySqueezeback"), ::OpenAPI::toJsonValue(m_chain_play_squeezeback));
    }
    if (m_chain_play_timeout_isSet) {
        obj.insert(QString("chainPlayTimeout"), ::OpenAPI::toJsonValue(m_chain_play_timeout));
    }
    if (m_heartbeat_frequency_isSet) {
        obj.insert(QString("heartbeatFrequency"), ::OpenAPI::toJsonValue(m_heartbeat_frequency));
    }
    if (m_view_event_points.size() > 0) {
        obj.insert(QString("viewEventPoints"), ::OpenAPI::toJsonValue(m_view_event_points));
    }
    return obj;
}

qint32 OAIAppConfigPlayback::getChainPlayCountdown() const {
    return m_chain_play_countdown;
}
void OAIAppConfigPlayback::setChainPlayCountdown(const qint32 &chain_play_countdown) {
    m_chain_play_countdown = chain_play_countdown;
    m_chain_play_countdown_isSet = true;
}

bool OAIAppConfigPlayback::is_chain_play_countdown_Set() const{
    return m_chain_play_countdown_isSet;
}

bool OAIAppConfigPlayback::is_chain_play_countdown_Valid() const{
    return m_chain_play_countdown_isValid;
}

qint32 OAIAppConfigPlayback::getChainPlaySqueezeback() const {
    return m_chain_play_squeezeback;
}
void OAIAppConfigPlayback::setChainPlaySqueezeback(const qint32 &chain_play_squeezeback) {
    m_chain_play_squeezeback = chain_play_squeezeback;
    m_chain_play_squeezeback_isSet = true;
}

bool OAIAppConfigPlayback::is_chain_play_squeezeback_Set() const{
    return m_chain_play_squeezeback_isSet;
}

bool OAIAppConfigPlayback::is_chain_play_squeezeback_Valid() const{
    return m_chain_play_squeezeback_isValid;
}

qint32 OAIAppConfigPlayback::getChainPlayTimeout() const {
    return m_chain_play_timeout;
}
void OAIAppConfigPlayback::setChainPlayTimeout(const qint32 &chain_play_timeout) {
    m_chain_play_timeout = chain_play_timeout;
    m_chain_play_timeout_isSet = true;
}

bool OAIAppConfigPlayback::is_chain_play_timeout_Set() const{
    return m_chain_play_timeout_isSet;
}

bool OAIAppConfigPlayback::is_chain_play_timeout_Valid() const{
    return m_chain_play_timeout_isValid;
}

qint32 OAIAppConfigPlayback::getHeartbeatFrequency() const {
    return m_heartbeat_frequency;
}
void OAIAppConfigPlayback::setHeartbeatFrequency(const qint32 &heartbeat_frequency) {
    m_heartbeat_frequency = heartbeat_frequency;
    m_heartbeat_frequency_isSet = true;
}

bool OAIAppConfigPlayback::is_heartbeat_frequency_Set() const{
    return m_heartbeat_frequency_isSet;
}

bool OAIAppConfigPlayback::is_heartbeat_frequency_Valid() const{
    return m_heartbeat_frequency_isValid;
}

QList<double> OAIAppConfigPlayback::getViewEventPoints() const {
    return m_view_event_points;
}
void OAIAppConfigPlayback::setViewEventPoints(const QList<double> &view_event_points) {
    m_view_event_points = view_event_points;
    m_view_event_points_isSet = true;
}

bool OAIAppConfigPlayback::is_view_event_points_Set() const{
    return m_view_event_points_isSet;
}

bool OAIAppConfigPlayback::is_view_event_points_Valid() const{
    return m_view_event_points_isValid;
}

bool OAIAppConfigPlayback::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chain_play_countdown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chain_play_squeezeback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chain_play_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_heartbeat_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_event_points.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppConfigPlayback::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_chain_play_countdown_isValid && m_chain_play_squeezeback_isValid && m_chain_play_timeout_isValid && m_heartbeat_frequency_isValid && m_view_event_points_isValid && true;
}

} // namespace OpenAPI
