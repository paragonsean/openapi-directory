/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessToken.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessToken::OAIAccessToken(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessToken::OAIAccessToken() {
    this->initializeModel();
}

OAIAccessToken::~OAIAccessToken() {}

void OAIAccessToken::initializeModel() {

    m_account_created_isSet = false;
    m_account_created_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_refreshable_isSet = false;
    m_refreshable_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIAccessToken::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessToken::fromJsonObject(QJsonObject json) {

    m_account_created_isValid = ::OpenAPI::fromJsonValue(m_account_created, json[QString("accountCreated")]);
    m_account_created_isSet = !json[QString("accountCreated")].isNull() && m_account_created_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_refreshable_isValid = ::OpenAPI::fromJsonValue(m_refreshable, json[QString("refreshable")]);
    m_refreshable_isSet = !json[QString("refreshable")].isNull() && m_refreshable_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIAccessToken::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessToken::asJsonObject() const {
    QJsonObject obj;
    if (m_account_created_isSet) {
        obj.insert(QString("accountCreated"), ::OpenAPI::toJsonValue(m_account_created));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_refreshable_isSet) {
        obj.insert(QString("refreshable"), ::OpenAPI::toJsonValue(m_refreshable));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

bool OAIAccessToken::isAccountCreated() const {
    return m_account_created;
}
void OAIAccessToken::setAccountCreated(const bool &account_created) {
    m_account_created = account_created;
    m_account_created_isSet = true;
}

bool OAIAccessToken::is_account_created_Set() const{
    return m_account_created_isSet;
}

bool OAIAccessToken::is_account_created_Valid() const{
    return m_account_created_isValid;
}

QDateTime OAIAccessToken::getExpirationDate() const {
    return m_expiration_date;
}
void OAIAccessToken::setExpirationDate(const QDateTime &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIAccessToken::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIAccessToken::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

bool OAIAccessToken::isRefreshable() const {
    return m_refreshable;
}
void OAIAccessToken::setRefreshable(const bool &refreshable) {
    m_refreshable = refreshable;
    m_refreshable_isSet = true;
}

bool OAIAccessToken::is_refreshable_Set() const{
    return m_refreshable_isSet;
}

bool OAIAccessToken::is_refreshable_Valid() const{
    return m_refreshable_isValid;
}

QString OAIAccessToken::getType() const {
    return m_type;
}
void OAIAccessToken::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAccessToken::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAccessToken::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIAccessToken::getValue() const {
    return m_value;
}
void OAIAccessToken::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIAccessToken::is_value_Set() const{
    return m_value_isSet;
}

bool OAIAccessToken::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIAccessToken::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refreshable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessToken::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expiration_date_isValid && m_refreshable_isValid && m_type_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
