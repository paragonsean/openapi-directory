/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINavigation.h
 *
 * 
 */

#ifndef OAINavigation_H
#define OAINavigation_H

#include <QJsonObject>

#include "OAINavEntry.h"
#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINavEntry;

class OAINavigation : public OAIObject {
public:
    OAINavigation();
    OAINavigation(QString json);
    ~OAINavigation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAINavEntry getAccount() const;
    void setAccount(const OAINavEntry &account);
    bool is_account_Set() const;
    bool is_account_Valid() const;

    QString getCopyright() const;
    void setCopyright(const QString &copyright);
    bool is_copyright_Set() const;
    bool is_copyright_Valid() const;

    QMap<QString, QJsonValue> getCustomFields() const;
    void setCustomFields(const QMap<QString, QJsonValue> &custom_fields);
    bool is_custom_fields_Set() const;
    bool is_custom_fields_Valid() const;

    OAINavEntry getFooter() const;
    void setFooter(const OAINavEntry &footer);
    bool is_footer_Set() const;
    bool is_footer_Valid() const;

    QList<OAINavEntry> getHeader() const;
    void setHeader(const QList<OAINavEntry> &header);
    bool is_header_Set() const;
    bool is_header_Valid() const;

    OAINavEntry getMobile() const;
    void setMobile(const OAINavEntry &mobile);
    bool is_mobile_Set() const;
    bool is_mobile_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAINavEntry m_account;
    bool m_account_isSet;
    bool m_account_isValid;

    QString m_copyright;
    bool m_copyright_isSet;
    bool m_copyright_isValid;

    QMap<QString, QJsonValue> m_custom_fields;
    bool m_custom_fields_isSet;
    bool m_custom_fields_isValid;

    OAINavEntry m_footer;
    bool m_footer_isSet;
    bool m_footer_isValid;

    QList<OAINavEntry> m_header;
    bool m_header_isSet;
    bool m_header_isValid;

    OAINavEntry m_mobile;
    bool m_mobile_isSet;
    bool m_mobile_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINavigation)

#endif // OAINavigation_H
