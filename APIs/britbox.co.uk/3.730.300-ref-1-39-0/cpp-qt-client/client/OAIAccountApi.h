/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccountApi_H
#define OAI_OAIAccountApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccount.h"
#include "OAIAccountDevices.h"
#include "OAIAccountNonce.h"
#include "OAIAccountUpdateRequest.h"
#include "OAIAddPaymentMethodRequest.h"
#include "OAIChangePasswordRequest.h"
#include "OAIChangePinRequest.h"
#include "OAIDevice.h"
#include "OAIDeviceAuthorizationCode.h"
#include "OAIDeviceRegistrationRequest.h"
#include "OAIEntitlement.h"
#include "OAIMediaFile.h"
#include "OAIPaymentMethod.h"
#include "OAIProfileCreationRequest.h"
#include "OAIProfileDetail.h"
#include "OAIProfileSummary.h"
#include "OAIProfileUpdateRequest.h"
#include "OAIPurchase.h"
#include "OAIPurchaseRequest.h"
#include "OAIServiceError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccountApi : public QObject {
    Q_OBJECT

public:
    OAIAccountApi(const int timeOut = 0);
    ~OAIAccountApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_add_payment_method_request OAIAddPaymentMethodRequest [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void addPaymentMethod(const OAIAddPaymentMethodRequest &oai_add_payment_method_request, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_device_authorization_code OAIDeviceAuthorizationCode [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void authorizeDevice(const OAIDeviceAuthorizationCode &oai_device_authorization_code, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void cancelSubscription(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_change_password_request OAIChangePasswordRequest [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void changePassword(const OAIChangePasswordRequest &oai_change_password_request, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_change_pin_request OAIChangePinRequest [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void changePin(const OAIChangePinRequest &oai_change_pin_request, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_profile_creation_request OAIProfileCreationRequest [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void createProfile(const OAIProfileCreationRequest &oai_profile_creation_request, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void deleteProfileWithId(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void deregisterDevice(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void generateNonce(const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getAccount(const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getDevice(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getDevices(const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getEntitlements(const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  delivery QList<QString> [required]
    * @param[in]  resolution QString [required]
    * @param[in]  formats QList<QString> [optional]
    * @param[in]  device QString [optional]
    * @param[in]  sub QString [optional]
    * @param[in]  segments QList<QString> [optional]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getItemMediaFiles(const QString &id, const QList<QString> &delivery, const QString &resolution, const ::OpenAPI::OptionalParam<QList<QString>> &formats = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sub = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &segments = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  delivery QList<QString> [required]
    * @param[in]  resolution QString [required]
    * @param[in]  formats QList<QString> [optional]
    * @param[in]  device QString [optional]
    * @param[in]  sub QString [optional]
    * @param[in]  segments QList<QString> [optional]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getItemMediaFilesGuarded(const QString &id, const QList<QString> &delivery, const QString &resolution, const ::OpenAPI::OptionalParam<QList<QString>> &formats = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sub = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &segments = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getPaymentMethod(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getPaymentMethods(const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getProfileWithId(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void getPurchases(const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_purchase_request OAIPurchaseRequest [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void makePurchase(const OAIPurchaseRequest &oai_purchase_request, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_device_registration_request OAIDeviceRegistrationRequest [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void registerDevice(const OAIDeviceRegistrationRequest &oai_device_registration_request, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void removePaymentMethod(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void renameDevice(const QString &id, const QString &name, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void requestEmailVerification(const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_account_update_request OAIAccountUpdateRequest [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void updateAccount(const OAIAccountUpdateRequest &oai_account_update_request, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_profile_update_request OAIProfileUpdateRequest [required]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void updateProfileWithId(const QString &id, const OAIProfileUpdateRequest &oai_profile_update_request, const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  plan_id QString [optional]
    * @param[in]  ff QList<QString> [optional]
    * @param[in]  lang QString [optional]
    */
    virtual void updateSubscription(const QString &id, const ::OpenAPI::OptionalParam<QString> &plan_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &ff = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lang = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addPaymentMethodCallback(OAIHttpRequestWorker *worker);
    void authorizeDeviceCallback(OAIHttpRequestWorker *worker);
    void cancelSubscriptionCallback(OAIHttpRequestWorker *worker);
    void changePasswordCallback(OAIHttpRequestWorker *worker);
    void changePinCallback(OAIHttpRequestWorker *worker);
    void createProfileCallback(OAIHttpRequestWorker *worker);
    void deleteProfileWithIdCallback(OAIHttpRequestWorker *worker);
    void deregisterDeviceCallback(OAIHttpRequestWorker *worker);
    void generateNonceCallback(OAIHttpRequestWorker *worker);
    void getAccountCallback(OAIHttpRequestWorker *worker);
    void getDeviceCallback(OAIHttpRequestWorker *worker);
    void getDevicesCallback(OAIHttpRequestWorker *worker);
    void getEntitlementsCallback(OAIHttpRequestWorker *worker);
    void getItemMediaFilesCallback(OAIHttpRequestWorker *worker);
    void getItemMediaFilesGuardedCallback(OAIHttpRequestWorker *worker);
    void getPaymentMethodCallback(OAIHttpRequestWorker *worker);
    void getPaymentMethodsCallback(OAIHttpRequestWorker *worker);
    void getProfileWithIdCallback(OAIHttpRequestWorker *worker);
    void getPurchasesCallback(OAIHttpRequestWorker *worker);
    void makePurchaseCallback(OAIHttpRequestWorker *worker);
    void registerDeviceCallback(OAIHttpRequestWorker *worker);
    void removePaymentMethodCallback(OAIHttpRequestWorker *worker);
    void renameDeviceCallback(OAIHttpRequestWorker *worker);
    void requestEmailVerificationCallback(OAIHttpRequestWorker *worker);
    void updateAccountCallback(OAIHttpRequestWorker *worker);
    void updateProfileWithIdCallback(OAIHttpRequestWorker *worker);
    void updateSubscriptionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addPaymentMethodSignal(OAIPaymentMethod summary);
    void authorizeDeviceSignal();
    void cancelSubscriptionSignal();
    void changePasswordSignal();
    void changePinSignal();
    void createProfileSignal(OAIProfileDetail summary);
    void deleteProfileWithIdSignal();
    void deregisterDeviceSignal();
    void generateNonceSignal(OAIAccountNonce summary);
    void getAccountSignal(OAIAccount summary);
    void getDeviceSignal(OAIDevice summary);
    void getDevicesSignal(OAIAccountDevices summary);
    void getEntitlementsSignal(QList<OAIEntitlement> summary);
    void getItemMediaFilesSignal(QList<OAIMediaFile> summary);
    void getItemMediaFilesGuardedSignal(QList<OAIMediaFile> summary);
    void getPaymentMethodSignal(OAIPaymentMethod summary);
    void getPaymentMethodsSignal(QList<OAIPaymentMethod> summary);
    void getProfileWithIdSignal(OAIProfileSummary summary);
    void getPurchasesSignal(QList<OAIPurchase> summary);
    void makePurchaseSignal(OAIEntitlement summary);
    void registerDeviceSignal(OAIDevice summary);
    void removePaymentMethodSignal();
    void renameDeviceSignal();
    void requestEmailVerificationSignal();
    void updateAccountSignal();
    void updateProfileWithIdSignal();
    void updateSubscriptionSignal();


    void addPaymentMethodSignalFull(OAIHttpRequestWorker *worker, OAIPaymentMethod summary);
    void authorizeDeviceSignalFull(OAIHttpRequestWorker *worker);
    void cancelSubscriptionSignalFull(OAIHttpRequestWorker *worker);
    void changePasswordSignalFull(OAIHttpRequestWorker *worker);
    void changePinSignalFull(OAIHttpRequestWorker *worker);
    void createProfileSignalFull(OAIHttpRequestWorker *worker, OAIProfileDetail summary);
    void deleteProfileWithIdSignalFull(OAIHttpRequestWorker *worker);
    void deregisterDeviceSignalFull(OAIHttpRequestWorker *worker);
    void generateNonceSignalFull(OAIHttpRequestWorker *worker, OAIAccountNonce summary);
    void getAccountSignalFull(OAIHttpRequestWorker *worker, OAIAccount summary);
    void getDeviceSignalFull(OAIHttpRequestWorker *worker, OAIDevice summary);
    void getDevicesSignalFull(OAIHttpRequestWorker *worker, OAIAccountDevices summary);
    void getEntitlementsSignalFull(OAIHttpRequestWorker *worker, QList<OAIEntitlement> summary);
    void getItemMediaFilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIMediaFile> summary);
    void getItemMediaFilesGuardedSignalFull(OAIHttpRequestWorker *worker, QList<OAIMediaFile> summary);
    void getPaymentMethodSignalFull(OAIHttpRequestWorker *worker, OAIPaymentMethod summary);
    void getPaymentMethodsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPaymentMethod> summary);
    void getProfileWithIdSignalFull(OAIHttpRequestWorker *worker, OAIProfileSummary summary);
    void getPurchasesSignalFull(OAIHttpRequestWorker *worker, QList<OAIPurchase> summary);
    void makePurchaseSignalFull(OAIHttpRequestWorker *worker, OAIEntitlement summary);
    void registerDeviceSignalFull(OAIHttpRequestWorker *worker, OAIDevice summary);
    void removePaymentMethodSignalFull(OAIHttpRequestWorker *worker);
    void renameDeviceSignalFull(OAIHttpRequestWorker *worker);
    void requestEmailVerificationSignalFull(OAIHttpRequestWorker *worker);
    void updateAccountSignalFull(OAIHttpRequestWorker *worker);
    void updateProfileWithIdSignalFull(OAIHttpRequestWorker *worker);
    void updateSubscriptionSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addPaymentMethodSignalError() instead")
    void addPaymentMethodSignalE(OAIPaymentMethod summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addPaymentMethodSignalError(OAIPaymentMethod summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizeDeviceSignalError() instead")
    void authorizeDeviceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void authorizeDeviceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelSubscriptionSignalError() instead")
    void cancelSubscriptionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cancelSubscriptionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changePasswordSignalError() instead")
    void changePasswordSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void changePasswordSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changePinSignalError() instead")
    void changePinSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void changePinSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createProfileSignalError() instead")
    void createProfileSignalE(OAIProfileDetail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createProfileSignalError(OAIProfileDetail summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProfileWithIdSignalError() instead")
    void deleteProfileWithIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProfileWithIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deregisterDeviceSignalError() instead")
    void deregisterDeviceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deregisterDeviceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateNonceSignalError() instead")
    void generateNonceSignalE(OAIAccountNonce summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateNonceSignalError(OAIAccountNonce summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountSignalError() instead")
    void getAccountSignalE(OAIAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountSignalError(OAIAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSignalError() instead")
    void getDeviceSignalE(OAIDevice summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSignalError(OAIDevice summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDevicesSignalError() instead")
    void getDevicesSignalE(OAIAccountDevices summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDevicesSignalError(OAIAccountDevices summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEntitlementsSignalError() instead")
    void getEntitlementsSignalE(QList<OAIEntitlement> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEntitlementsSignalError(QList<OAIEntitlement> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemMediaFilesSignalError() instead")
    void getItemMediaFilesSignalE(QList<OAIMediaFile> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemMediaFilesSignalError(QList<OAIMediaFile> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemMediaFilesGuardedSignalError() instead")
    void getItemMediaFilesGuardedSignalE(QList<OAIMediaFile> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemMediaFilesGuardedSignalError(QList<OAIMediaFile> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentMethodSignalError() instead")
    void getPaymentMethodSignalE(OAIPaymentMethod summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentMethodSignalError(OAIPaymentMethod summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentMethodsSignalError() instead")
    void getPaymentMethodsSignalE(QList<OAIPaymentMethod> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentMethodsSignalError(QList<OAIPaymentMethod> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProfileWithIdSignalError() instead")
    void getProfileWithIdSignalE(OAIProfileSummary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProfileWithIdSignalError(OAIProfileSummary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPurchasesSignalError() instead")
    void getPurchasesSignalE(QList<OAIPurchase> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPurchasesSignalError(QList<OAIPurchase> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use makePurchaseSignalError() instead")
    void makePurchaseSignalE(OAIEntitlement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void makePurchaseSignalError(OAIEntitlement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registerDeviceSignalError() instead")
    void registerDeviceSignalE(OAIDevice summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registerDeviceSignalError(OAIDevice summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removePaymentMethodSignalError() instead")
    void removePaymentMethodSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removePaymentMethodSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use renameDeviceSignalError() instead")
    void renameDeviceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void renameDeviceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestEmailVerificationSignalError() instead")
    void requestEmailVerificationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void requestEmailVerificationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAccountSignalError() instead")
    void updateAccountSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateAccountSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProfileWithIdSignalError() instead")
    void updateProfileWithIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateProfileWithIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSubscriptionSignalError() instead")
    void updateSubscriptionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateSubscriptionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addPaymentMethodSignalErrorFull() instead")
    void addPaymentMethodSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addPaymentMethodSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizeDeviceSignalErrorFull() instead")
    void authorizeDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizeDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelSubscriptionSignalErrorFull() instead")
    void cancelSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changePasswordSignalErrorFull() instead")
    void changePasswordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changePasswordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changePinSignalErrorFull() instead")
    void changePinSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changePinSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createProfileSignalErrorFull() instead")
    void createProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProfileWithIdSignalErrorFull() instead")
    void deleteProfileWithIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProfileWithIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deregisterDeviceSignalErrorFull() instead")
    void deregisterDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deregisterDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateNonceSignalErrorFull() instead")
    void generateNonceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateNonceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountSignalErrorFull() instead")
    void getAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeviceSignalErrorFull() instead")
    void getDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDevicesSignalErrorFull() instead")
    void getDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEntitlementsSignalErrorFull() instead")
    void getEntitlementsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEntitlementsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemMediaFilesSignalErrorFull() instead")
    void getItemMediaFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemMediaFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemMediaFilesGuardedSignalErrorFull() instead")
    void getItemMediaFilesGuardedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemMediaFilesGuardedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentMethodSignalErrorFull() instead")
    void getPaymentMethodSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentMethodSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentMethodsSignalErrorFull() instead")
    void getPaymentMethodsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentMethodsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProfileWithIdSignalErrorFull() instead")
    void getProfileWithIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProfileWithIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPurchasesSignalErrorFull() instead")
    void getPurchasesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPurchasesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use makePurchaseSignalErrorFull() instead")
    void makePurchaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void makePurchaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registerDeviceSignalErrorFull() instead")
    void registerDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registerDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removePaymentMethodSignalErrorFull() instead")
    void removePaymentMethodSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removePaymentMethodSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use renameDeviceSignalErrorFull() instead")
    void renameDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void renameDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestEmailVerificationSignalErrorFull() instead")
    void requestEmailVerificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestEmailVerificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAccountSignalErrorFull() instead")
    void updateAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProfileWithIdSignalErrorFull() instead")
    void updateProfileWithIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProfileWithIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSubscriptionSignalErrorFull() instead")
    void updateSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
