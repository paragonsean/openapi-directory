/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINavigation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINavigation::OAINavigation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINavigation::OAINavigation() {
    this->initializeModel();
}

OAINavigation::~OAINavigation() {}

void OAINavigation::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_copyright_isSet = false;
    m_copyright_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_footer_isSet = false;
    m_footer_isValid = false;

    m_header_isSet = false;
    m_header_isValid = false;

    m_mobile_isSet = false;
    m_mobile_isValid = false;
}

void OAINavigation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINavigation::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_copyright_isValid = ::OpenAPI::fromJsonValue(m_copyright, json[QString("copyright")]);
    m_copyright_isSet = !json[QString("copyright")].isNull() && m_copyright_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("customFields")]);
    m_custom_fields_isSet = !json[QString("customFields")].isNull() && m_custom_fields_isValid;

    m_footer_isValid = ::OpenAPI::fromJsonValue(m_footer, json[QString("footer")]);
    m_footer_isSet = !json[QString("footer")].isNull() && m_footer_isValid;

    m_header_isValid = ::OpenAPI::fromJsonValue(m_header, json[QString("header")]);
    m_header_isSet = !json[QString("header")].isNull() && m_header_isValid;

    m_mobile_isValid = ::OpenAPI::fromJsonValue(m_mobile, json[QString("mobile")]);
    m_mobile_isSet = !json[QString("mobile")].isNull() && m_mobile_isValid;
}

QString OAINavigation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINavigation::asJsonObject() const {
    QJsonObject obj;
    if (m_account.isSet()) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_copyright_isSet) {
        obj.insert(QString("copyright"), ::OpenAPI::toJsonValue(m_copyright));
    }
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("customFields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_footer.isSet()) {
        obj.insert(QString("footer"), ::OpenAPI::toJsonValue(m_footer));
    }
    if (m_header.size() > 0) {
        obj.insert(QString("header"), ::OpenAPI::toJsonValue(m_header));
    }
    if (m_mobile.isSet()) {
        obj.insert(QString("mobile"), ::OpenAPI::toJsonValue(m_mobile));
    }
    return obj;
}

OAINavEntry OAINavigation::getAccount() const {
    return m_account;
}
void OAINavigation::setAccount(const OAINavEntry &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAINavigation::is_account_Set() const{
    return m_account_isSet;
}

bool OAINavigation::is_account_Valid() const{
    return m_account_isValid;
}

QString OAINavigation::getCopyright() const {
    return m_copyright;
}
void OAINavigation::setCopyright(const QString &copyright) {
    m_copyright = copyright;
    m_copyright_isSet = true;
}

bool OAINavigation::is_copyright_Set() const{
    return m_copyright_isSet;
}

bool OAINavigation::is_copyright_Valid() const{
    return m_copyright_isValid;
}

QMap<QString, QJsonValue> OAINavigation::getCustomFields() const {
    return m_custom_fields;
}
void OAINavigation::setCustomFields(const QMap<QString, QJsonValue> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAINavigation::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAINavigation::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

OAINavEntry OAINavigation::getFooter() const {
    return m_footer;
}
void OAINavigation::setFooter(const OAINavEntry &footer) {
    m_footer = footer;
    m_footer_isSet = true;
}

bool OAINavigation::is_footer_Set() const{
    return m_footer_isSet;
}

bool OAINavigation::is_footer_Valid() const{
    return m_footer_isValid;
}

QList<OAINavEntry> OAINavigation::getHeader() const {
    return m_header;
}
void OAINavigation::setHeader(const QList<OAINavEntry> &header) {
    m_header = header;
    m_header_isSet = true;
}

bool OAINavigation::is_header_Set() const{
    return m_header_isSet;
}

bool OAINavigation::is_header_Valid() const{
    return m_header_isValid;
}

OAINavEntry OAINavigation::getMobile() const {
    return m_mobile;
}
void OAINavigation::setMobile(const OAINavEntry &mobile) {
    m_mobile = mobile;
    m_mobile_isSet = true;
}

bool OAINavigation::is_mobile_Set() const{
    return m_mobile_isSet;
}

bool OAINavigation::is_mobile_Valid() const{
    return m_mobile_isValid;
}

bool OAINavigation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_copyright_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_footer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_header.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINavigation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_header_isValid && true;
}

} // namespace OpenAPI
