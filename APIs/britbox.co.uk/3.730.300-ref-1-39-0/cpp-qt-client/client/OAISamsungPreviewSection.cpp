/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISamsungPreviewSection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISamsungPreviewSection::OAISamsungPreviewSection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISamsungPreviewSection::OAISamsungPreviewSection() {
    this->initializeModel();
}

OAISamsungPreviewSection::~OAISamsungPreviewSection() {}

void OAISamsungPreviewSection::initializeModel() {

    m_position_isSet = false;
    m_position_isValid = false;

    m_tiles_isSet = false;
    m_tiles_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAISamsungPreviewSection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISamsungPreviewSection::fromJsonObject(QJsonObject json) {

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_tiles_isValid = ::OpenAPI::fromJsonValue(m_tiles, json[QString("tiles")]);
    m_tiles_isSet = !json[QString("tiles")].isNull() && m_tiles_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAISamsungPreviewSection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISamsungPreviewSection::asJsonObject() const {
    QJsonObject obj;
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_tiles.size() > 0) {
        obj.insert(QString("tiles"), ::OpenAPI::toJsonValue(m_tiles));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

qint32 OAISamsungPreviewSection::getPosition() const {
    return m_position;
}
void OAISamsungPreviewSection::setPosition(const qint32 &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAISamsungPreviewSection::is_position_Set() const{
    return m_position_isSet;
}

bool OAISamsungPreviewSection::is_position_Valid() const{
    return m_position_isValid;
}

QList<OAISamsungPreviewSectionTile> OAISamsungPreviewSection::getTiles() const {
    return m_tiles;
}
void OAISamsungPreviewSection::setTiles(const QList<OAISamsungPreviewSectionTile> &tiles) {
    m_tiles = tiles;
    m_tiles_isSet = true;
}

bool OAISamsungPreviewSection::is_tiles_Set() const{
    return m_tiles_isSet;
}

bool OAISamsungPreviewSection::is_tiles_Valid() const{
    return m_tiles_isValid;
}

QString OAISamsungPreviewSection::getTitle() const {
    return m_title;
}
void OAISamsungPreviewSection::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISamsungPreviewSection::is_title_Set() const{
    return m_title_isSet;
}

bool OAISamsungPreviewSection::is_title_Valid() const{
    return m_title_isValid;
}

bool OAISamsungPreviewSection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tiles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISamsungPreviewSection::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_tiles_isValid && true;
}

} // namespace OpenAPI
