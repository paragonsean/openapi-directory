/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItvEntitlementCancelation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItvEntitlementCancelation::OAIItvEntitlementCancelation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItvEntitlementCancelation::OAIItvEntitlementCancelation() {
    this->initializeModel();
}

OAIItvEntitlementCancelation::~OAIItvEntitlementCancelation() {}

void OAIItvEntitlementCancelation::initializeModel() {

    m_cancelled_at_isSet = false;
    m_cancelled_at_isValid = false;

    m_itv_id_isSet = false;
    m_itv_id_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;
}

void OAIItvEntitlementCancelation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItvEntitlementCancelation::fromJsonObject(QJsonObject json) {

    m_cancelled_at_isValid = ::OpenAPI::fromJsonValue(m_cancelled_at, json[QString("cancelled_at")]);
    m_cancelled_at_isSet = !json[QString("cancelled_at")].isNull() && m_cancelled_at_isValid;

    m_itv_id_isValid = ::OpenAPI::fromJsonValue(m_itv_id, json[QString("itvId")]);
    m_itv_id_isSet = !json[QString("itvId")].isNull() && m_itv_id_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;
}

QString OAIItvEntitlementCancelation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItvEntitlementCancelation::asJsonObject() const {
    QJsonObject obj;
    if (m_cancelled_at_isSet) {
        obj.insert(QString("cancelled_at"), ::OpenAPI::toJsonValue(m_cancelled_at));
    }
    if (m_itv_id_isSet) {
        obj.insert(QString("itvId"), ::OpenAPI::toJsonValue(m_itv_id));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    return obj;
}

QDateTime OAIItvEntitlementCancelation::getCancelledAt() const {
    return m_cancelled_at;
}
void OAIItvEntitlementCancelation::setCancelledAt(const QDateTime &cancelled_at) {
    m_cancelled_at = cancelled_at;
    m_cancelled_at_isSet = true;
}

bool OAIItvEntitlementCancelation::is_cancelled_at_Set() const{
    return m_cancelled_at_isSet;
}

bool OAIItvEntitlementCancelation::is_cancelled_at_Valid() const{
    return m_cancelled_at_isValid;
}

QString OAIItvEntitlementCancelation::getItvId() const {
    return m_itv_id;
}
void OAIItvEntitlementCancelation::setItvId(const QString &itv_id) {
    m_itv_id = itv_id;
    m_itv_id_isSet = true;
}

bool OAIItvEntitlementCancelation::is_itv_id_Set() const{
    return m_itv_id_isSet;
}

bool OAIItvEntitlementCancelation::is_itv_id_Valid() const{
    return m_itv_id_isValid;
}

QString OAIItvEntitlementCancelation::getSource() const {
    return m_source;
}
void OAIItvEntitlementCancelation::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIItvEntitlementCancelation::is_source_Set() const{
    return m_source_isSet;
}

bool OAIItvEntitlementCancelation::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIItvEntitlementCancelation::getSubscriptionId() const {
    return m_subscription_id;
}
void OAIItvEntitlementCancelation::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAIItvEntitlementCancelation::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIItvEntitlementCancelation::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

bool OAIItvEntitlementCancelation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cancelled_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_itv_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItvEntitlementCancelation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cancelled_at_isValid && m_itv_id_isValid && m_source_isValid && m_subscription_id_isValid && true;
}

} // namespace OpenAPI
