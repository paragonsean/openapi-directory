/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegistrationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegistrationRequest::OAIRegistrationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegistrationRequest::OAIRegistrationRequest() {
    this->initializeModel();
}

OAIRegistrationRequest::~OAIRegistrationRequest() {}

void OAIRegistrationRequest::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_marketing_isSet = false;
    m_marketing_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_pin_isSet = false;
    m_pin_isValid = false;

    m_segments_isSet = false;
    m_segments_isValid = false;
}

void OAIRegistrationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegistrationRequest::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_marketing_isValid = ::OpenAPI::fromJsonValue(m_marketing, json[QString("marketing")]);
    m_marketing_isSet = !json[QString("marketing")].isNull() && m_marketing_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_pin_isValid = ::OpenAPI::fromJsonValue(m_pin, json[QString("pin")]);
    m_pin_isSet = !json[QString("pin")].isNull() && m_pin_isValid;

    m_segments_isValid = ::OpenAPI::fromJsonValue(m_segments, json[QString("segments")]);
    m_segments_isSet = !json[QString("segments")].isNull() && m_segments_isValid;
}

QString OAIRegistrationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegistrationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_marketing_isSet) {
        obj.insert(QString("marketing"), ::OpenAPI::toJsonValue(m_marketing));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_pin_isSet) {
        obj.insert(QString("pin"), ::OpenAPI::toJsonValue(m_pin));
    }
    if (m_segments.size() > 0) {
        obj.insert(QString("segments"), ::OpenAPI::toJsonValue(m_segments));
    }
    return obj;
}

QString OAIRegistrationRequest::getEmail() const {
    return m_email;
}
void OAIRegistrationRequest::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIRegistrationRequest::is_email_Set() const{
    return m_email_isSet;
}

bool OAIRegistrationRequest::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIRegistrationRequest::getFirstName() const {
    return m_first_name;
}
void OAIRegistrationRequest::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIRegistrationRequest::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIRegistrationRequest::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIRegistrationRequest::getLanguageCode() const {
    return m_language_code;
}
void OAIRegistrationRequest::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIRegistrationRequest::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIRegistrationRequest::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QString OAIRegistrationRequest::getLastName() const {
    return m_last_name;
}
void OAIRegistrationRequest::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIRegistrationRequest::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIRegistrationRequest::is_last_name_Valid() const{
    return m_last_name_isValid;
}

bool OAIRegistrationRequest::isMarketing() const {
    return m_marketing;
}
void OAIRegistrationRequest::setMarketing(const bool &marketing) {
    m_marketing = marketing;
    m_marketing_isSet = true;
}

bool OAIRegistrationRequest::is_marketing_Set() const{
    return m_marketing_isSet;
}

bool OAIRegistrationRequest::is_marketing_Valid() const{
    return m_marketing_isValid;
}

QString OAIRegistrationRequest::getPassword() const {
    return m_password;
}
void OAIRegistrationRequest::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIRegistrationRequest::is_password_Set() const{
    return m_password_isSet;
}

bool OAIRegistrationRequest::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIRegistrationRequest::getPin() const {
    return m_pin;
}
void OAIRegistrationRequest::setPin(const QString &pin) {
    m_pin = pin;
    m_pin_isSet = true;
}

bool OAIRegistrationRequest::is_pin_Set() const{
    return m_pin_isSet;
}

bool OAIRegistrationRequest::is_pin_Valid() const{
    return m_pin_isValid;
}

QList<QString> OAIRegistrationRequest::getSegments() const {
    return m_segments;
}
void OAIRegistrationRequest::setSegments(const QList<QString> &segments) {
    m_segments = segments;
    m_segments_isSet = true;
}

bool OAIRegistrationRequest::is_segments_Set() const{
    return m_segments_isSet;
}

bool OAIRegistrationRequest::is_segments_Valid() const{
    return m_segments_isValid;
}

bool OAIRegistrationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segments.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegistrationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_email_isValid && m_password_isValid && true;
}

} // namespace OpenAPI
