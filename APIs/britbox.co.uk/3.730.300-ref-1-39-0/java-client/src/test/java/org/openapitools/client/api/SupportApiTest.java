/*
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.PasswordResetEmailRequest;
import org.openapitools.client.model.PasswordResetRequest;
import org.openapitools.client.model.ServiceError;
import org.openapitools.client.model.SubscriptionDetails;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SupportApi
 */
@Disabled
public class SupportApiTest {

    private final SupportApi api = new SupportApi();

    /**
     * Request the password of an account&#39;s primary profile be reset.  Should be called when a user has forgotten their password.  This will send an email with a password reset link to the email address of the primary profile of an account.  The link, once clicked, should take the user to the \&quot;reset-password\&quot; page of the website. Here they will enter their new password and submit to the /reset-password endpoint here, along with the password reset token provided in the original link. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void forgotPasswordTest() throws ApiException {
        PasswordResetEmailRequest passwordResetEmailRequest = null;
        List<String> ff = null;
        String lang = null;
        api.forgotPassword(passwordResetEmailRequest, ff, lang);
        // TODO: test validations
    }

    /**
     * Returns the details of subscription data for a user with specified id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubscriptionDataTest() throws ApiException {
        String id = null;
        SubscriptionDetails response = api.getSubscriptionData(id);
        // TODO: test validations
    }

    /**
     * When a user requests to reset their password via the /request-password-reset endpoint, an email is sent to the email address of the primary profile of the account. This email contains a link with a reset token as query parameter. The link should take the user to the \&quot;reset-password\&quot; page of the website.  From the reset-password page a user should enter the new password they wish to use.  It should then be submitted to this endpoint, along with the reset token from the email link.  The token should be provided in the body as resetToken property. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetPasswordTest() throws ApiException {
        PasswordResetRequest passwordResetRequest = null;
        List<String> ff = null;
        String lang = null;
        api.resetPassword(passwordResetRequest, ff, lang);
        // TODO: test validations
    }

    /**
     * When an account is created an email is sent to the email address of the new account. This contains a link, which once clicked, verifies the email address of the account is correct.  The link contains a token as a query parameter which should be passed as the authorization bearer token to this endpoint to complete email verification.  The token has en expiry, so if the link is not clicked before it expires, the account holder may need to request a new verification email be sent. This can be done via the endpoint /account/request-email-verification. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyEmailTest() throws ApiException {
        List<String> ff = null;
        String lang = null;
        api.verifyEmail(ff, lang);
        // TODO: test validations
    }

}
