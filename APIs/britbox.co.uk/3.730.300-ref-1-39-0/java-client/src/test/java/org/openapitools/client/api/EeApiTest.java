/*
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.EeBtEligibility;
import org.openapitools.client.model.EeCreatePinRequest;
import org.openapitools.client.model.EeCreatePinResponse;
import org.openapitools.client.model.EeCreateTokenResponse;
import org.openapitools.client.model.EeOffersRequest;
import org.openapitools.client.model.EeOffersResponse;
import org.openapitools.client.model.EePlanListItem;
import org.openapitools.client.model.EePlans;
import org.openapitools.client.model.EeValidatePinRequest;
import org.openapitools.client.model.EeValidatePinResponse;
import org.openapitools.client.model.ItvAssignMsisdnRequest;
import org.openapitools.client.model.ServiceError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EeApi
 */
@Disabled
public class EeApiTest {

    private final EeApi api = new EeApi();

    /**
     * Assigns a msisdn to a profile on ITV side.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignMsisdnTest() throws ApiException {
        ItvAssignMsisdnRequest itvAssignMsisdnRequest = null;
        String lang = null;
        api.assignMsisdn(itvAssignMsisdnRequest, lang);
        // TODO: test validations
    }

    /**
     * Check whether or not a user is eligible for switching to Bt or EE offers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkEeBtEligibilityTest() throws ApiException {
        String lang = null;
        EeBtEligibility response = api.checkEeBtEligibility(lang);
        // TODO: test validations
    }

    /**
     * Creates a PIN request that will send an SMS to the given msisdn. This call is to validate MSISDN entered by a user not comming through EE network. This call should be followed by POST ee/pin. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPinRequestTest() throws ApiException {
        EeCreatePinRequest eeCreatePinRequest = null;
        List<String> ff = null;
        String lang = null;
        EeCreatePinResponse response = api.createPinRequest(eeCreatePinRequest, ff, lang);
        // TODO: test validations
    }

    /**
     * Returns a token for later calls to EE API. TTL is one hour. Recommended is FE refreshes this token before each call.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTokenTest() throws ApiException {
        EeCreateTokenResponse response = api.createToken();
        // TODO: test validations
    }

    /**
     * Returns all the plans available for EE flow including additional description data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eePlansGetTest() throws ApiException {
        String lang = null;
        EePlans response = api.eePlansGet(lang);
        // TODO: test validations
    }

    /**
     * Returns eligible partner specific offers for the querying partner for an EE MSISDN. This call is supposed to be called after we have MSISDN accired. This call should be followed by POST /ee/msisdn. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEligibleOffersTest() throws ApiException {
        EeOffersRequest eeOffersRequest = null;
        List<String> ff = null;
        String lang = null;
        EeOffersResponse response = api.getEligibleOffers(eeOffersRequest, ff, lang);
        // TODO: test validations
    }

    /**
     * Returns the plan description for EE flow including additional description data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPlanTest() throws ApiException {
        String id = null;
        String lang = null;
        EePlanListItem response = api.getPlan(id, lang);
        // TODO: test validations
    }

    /**
     * Validate PIN request created by calling POST /ee/pin This call is to validate MSISDN entered by a user not comming through EE network. This call should be called after PUT /ee/pin. This call should be followed by POST /ee/offers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validatePinRequestTest() throws ApiException {
        EeValidatePinRequest eeValidatePinRequest = null;
        List<String> ff = null;
        String lang = null;
        EeValidatePinResponse response = api.validatePinRequest(eeValidatePinRequest, ff, lang);
        // TODO: test validations
    }

}
