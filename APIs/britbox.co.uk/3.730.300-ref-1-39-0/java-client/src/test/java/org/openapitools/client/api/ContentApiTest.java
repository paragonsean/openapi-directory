/*
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ItemClipFilesList;
import org.openapitools.client.model.ItemDetail;
import org.openapitools.client.model.ItemDownloadableList;
import org.openapitools.client.model.ItemDownloadableRequest;
import org.openapitools.client.model.ItemList;
import org.openapitools.client.model.ItemScheduleList;
import java.time.LocalDate;
import org.openapitools.client.model.MediaFile;
import org.openapitools.client.model.NextPlaybackItem;
import org.openapitools.client.model.Plan;
import org.openapitools.client.model.SearchResults;
import org.openapitools.client.model.ServiceError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContentApi
 */
@Disabled
public class ContentApiTest {

    private final ContentApi api = new ContentApi();

    /**
     * Identical to GET /account/profile/items/{itemId}/next route but for users that are not logged in i.e. this endpoint does not require authorisation 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnonNextPlaybackItemTest() throws ApiException {
        String itemId = null;
        String maxRating = null;
        String expand = null;
        String device = null;
        List<String> segments = null;
        List<String> ff = null;
        String lang = null;
        NextPlaybackItem response = api.getAnonNextPlaybackItem(itemId, maxRating, expand, device, segments, ff, lang);
        // TODO: test validations
    }

    /**
     * Returns the details of an item with the specified id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getItemTest() throws ApiException {
        String id = null;
        String maxRating = null;
        String expand = null;
        String selectSeason = null;
        Boolean useCustomId = null;
        String device = null;
        String sub = null;
        List<String> segments = null;
        List<String> ff = null;
        String lang = null;
        ItemDetail response = api.getItem(id, maxRating, expand, selectSeason, useCustomId, device, sub, segments, ff, lang);
        // TODO: test validations
    }

    /**
     * Returns the List of child summary items under an item.  If the item is a Season then the children will be episodes and ordered by episode number.  If the item is a Show then the children will be Seasons and ordered by season number.  Returns 404 if no children found. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getItemChildrenListTest() throws ApiException {
        String id = null;
        Integer page = null;
        Integer pageSize = null;
        String maxRating = null;
        String order = null;
        String device = null;
        String sub = null;
        List<String> segments = null;
        List<String> ff = null;
        String lang = null;
        ItemList response = api.getItemChildrenList(id, page, pageSize, maxRating, order, device, sub, segments, ff, lang);
        // TODO: test validations
    }

    /**
     * Returns the details of an item with the specified id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getItemDownloadablesTest() throws ApiException {
        ItemDownloadableRequest itemDownloadableRequest = null;
        List<String> ff = null;
        String lang = null;
        ItemDownloadableList response = api.getItemDownloadables(itemDownloadableRequest, ff, lang);
        // TODO: test validations
    }

    /**
     * Returns the list of items related to the parent item.  Note for now, due to the size of the list being unknown, only a single page will be returned. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getItemRelatedListTest() throws ApiException {
        String id = null;
        Integer page = null;
        Integer pageSize = null;
        String maxRating = null;
        String device = null;
        String sub = null;
        List<String> segments = null;
        List<String> ff = null;
        String lang = null;
        ItemList response = api.getItemRelatedList(id, page, pageSize, maxRating, device, sub, segments, ff, lang);
        // TODO: test validations
    }

    /**
     * Get the media clip files associated with items. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getItemsMediaClipFilesTest() throws ApiException {
        ItemDownloadableRequest itemDownloadableRequest = null;
        List<String> ff = null;
        String lang = null;
        ItemClipFilesList response = api.getItemsMediaClipFiles(itemDownloadableRequest, ff, lang);
        // TODO: test validations
    }

    /**
     * Returns a list of items under the specified item list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getListTest() throws ApiException {
        String id = null;
        Integer page = null;
        Integer pageSize = null;
        String maxRating = null;
        String order = null;
        String orderBy = null;
        String param = null;
        String itemType = null;
        String device = null;
        String sub = null;
        List<String> segments = null;
        List<String> ff = null;
        String lang = null;
        ItemList response = api.getList(id, page, pageSize, maxRating, order, orderBy, param, itemType, device, sub, segments, ff, lang);
        // TODO: test validations
    }

    /**
     * Returns an array of item lists with their first page of content resolved.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getListsTest() throws ApiException {
        List<String> ids = null;
        Integer pageSize = null;
        String maxRating = null;
        String order = null;
        String orderBy = null;
        String itemType = null;
        String device = null;
        String sub = null;
        List<String> segments = null;
        List<String> ff = null;
        String lang = null;
        List<ItemList> response = api.getLists(ids, pageSize, maxRating, order, orderBy, itemType, device, sub, segments, ff, lang);
        // TODO: test validations
    }

    /**
     * Get the free / public video files associated with an item given maximum resolution, device type and one or more delivery types.  Returns an array of video file objects which each include a url to a video.  The first entry in the array contains what is predicted to be the best match. The remainder of the entries, if any, may contain resolutions below what was requests. For example if you request HD-720 the response may also contain SD entries.  If you specify multiple delivery types, then the response array will insert types in the order you specify them in the query. For example &#x60;stream,progressive&#x60; would return an array with 0 or more stream files followed by 0 or more progressive files.  If no files are found a 404 is returned. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPublicItemMediaFilesTest() throws ApiException {
        String id = null;
        List<String> delivery = null;
        String resolution = null;
        List<String> formats = null;
        String device = null;
        String sub = null;
        List<String> segments = null;
        List<String> ff = null;
        String lang = null;
        List<MediaFile> response = api.getPublicItemMediaFiles(id, delivery, resolution, formats, device, sub, segments, ff, lang);
        // TODO: test validations
    }

    /**
     * Returns schedules for a defined set of channels over a requested period.  Schedules are requested in hour blocks and returned grouped by the channel they belong to.  For example, to load 12 hours of schedules for channels &#x60;4343&#x60; and &#x60;5234&#x60;, on 21/2/2017 starting from 08:00.  &#x60;&#x60;&#x60; channels&#x3D;4343,5234 date&#x3D;2017-02-21 hour&#x3D;8 duration&#x3D;12 &#x60;&#x60;&#x60;  Please remember that &#x60;date&#x60; and &#x60;hour&#x60; combined represent a normal datetime,  so they should be converted to UTC on the client - this will help to avoid  issues with EPG schedules near midnight.  If a channel id is passed which doesn&#39;t exist then this endpoint will return an empty schedule list for it. If instead we returned 404, this would invalidate all other channel schedules in the same request which would be unfriendly for clients presenting these channel schedules. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSchedulesTest() throws ApiException {
        List<String> channels = null;
        LocalDate date = null;
        Integer hour = null;
        Integer duration = null;
        Boolean intersect = null;
        String device = null;
        String sub = null;
        List<String> segments = null;
        List<String> ff = null;
        String lang = null;
        List<ItemScheduleList> response = api.getSchedules(channels, date, hour, duration, intersect, device, sub, segments, ff, lang);
        // TODO: test validations
    }

    /**
     * Returns the details of a Plan with the specified id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void plansIdGetTest() throws ApiException {
        String id = null;
        String device = null;
        String sub = null;
        List<String> segments = null;
        List<String> ff = null;
        String lang = null;
        Plan response = api.plansIdGet(id, device, sub, segments, ff, lang);
        // TODO: test validations
    }

    /**
     * Search the catalog of items and people.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchTest() throws ApiException {
        String term = null;
        List<String> include = null;
        Boolean group = null;
        Integer maxResults = null;
        String maxRating = null;
        String device = null;
        String sub = null;
        List<String> segments = null;
        List<String> ff = null;
        String lang = null;
        SearchResults response = api.search(term, include, group, maxResults, maxRating, device, sub, segments, ff, lang);
        // TODO: test validations
    }

}
