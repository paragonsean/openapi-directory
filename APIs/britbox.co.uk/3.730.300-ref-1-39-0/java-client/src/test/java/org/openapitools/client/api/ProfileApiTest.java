/*
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Bookmark;
import org.openapitools.client.model.ItemList;
import org.openapitools.client.model.NextPlaybackItem;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ProfileDetail;
import org.openapitools.client.model.ServiceError;
import org.openapitools.client.model.UserRating;
import org.openapitools.client.model.Watched;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProfileApi
 */
@Disabled
public class ProfileApiTest {

    private final ProfileApi api = new ProfileApi();

    /**
     * Bookmark an item under the active profile.  Creates one if it doesn&#39;t exist, overwrites one if it does. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bookmarkItemTest() throws ApiException {
        String itemId = null;
        List<String> ff = null;
        String lang = null;
        Bookmark response = api.bookmarkItem(itemId, ff, lang);
        // TODO: test validations
    }

    /**
     * Unbookmark an item under the active profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteItemBookmarkTest() throws ApiException {
        String itemId = null;
        List<String> ff = null;
        String lang = null;
        api.deleteItemBookmark(itemId, ff, lang);
        // TODO: test validations
    }

    /**
     * Remove the watched status of items under the active profile. Passing in specific &#x60;itemId&#x60;s to the &#x60;item_ids&#x60; query parameter will cause only these items to be removed. **If this list is missing all watched items will be removed** 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWatchedTest() throws ApiException {
        List<String> itemIds = null;
        List<String> ff = null;
        String lang = null;
        api.deleteWatched(itemIds, ff, lang);
        // TODO: test validations
    }

    /**
     * Returns the list of bookmarked items under the active profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBookmarkListTest() throws ApiException {
        Integer page = null;
        Integer pageSize = null;
        String order = null;
        String itemType = null;
        String device = null;
        String sub = null;
        List<String> segments = null;
        List<String> ff = null;
        String lang = null;
        ItemList response = api.getBookmarkList(page, pageSize, order, itemType, device, sub, segments, ff, lang);
        // TODO: test validations
    }

    /**
     * Get the map of bookmarked item ids (itemId &#x3D;&gt; creationDate) under the active profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBookmarksTest() throws ApiException {
        List<String> ff = null;
        String lang = null;
        Map<String, OffsetDateTime> response = api.getBookmarks(ff, lang);
        // TODO: test validations
    }

    /**
     * Returns a list of items which have been watched but not completed under the active profile.  Multiple episodes under the same show may be watched or in progress, however only a single item belonging to a particular show will be included in the returned list.  The next episode to continue watching for a particular show will be the most recent incompletely watched episode, or the next episode following the most recently completely watched episode. Based on the specified &#x60;show_item_type&#x60; type, either the next episode, the season of the next episode, or the show will be included in the list. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContinueWatchingListTest() throws ApiException {
        String showItemType = null;
        List<String> include = null;
        Integer page = null;
        Integer pageSize = null;
        String maxRating = null;
        String device = null;
        String sub = null;
        List<String> segments = null;
        List<String> ff = null;
        String lang = null;
        ItemList response = api.getContinueWatchingList(showItemType, include, page, pageSize, maxRating, device, sub, segments, ff, lang);
        // TODO: test validations
    }

    /**
     * Get the bookmark for an item under the active profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getItemBookmarkTest() throws ApiException {
        String itemId = null;
        List<String> ff = null;
        String lang = null;
        Bookmark response = api.getItemBookmark(itemId, ff, lang);
        // TODO: test validations
    }

    /**
     * Get the rating info for an item under the active profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getItemRatingTest() throws ApiException {
        String itemId = null;
        List<String> ff = null;
        String lang = null;
        UserRating response = api.getItemRating(itemId, ff, lang);
        // TODO: test validations
    }

    /**
     * Get the watched status info for an item under the active profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getItemWatchedStatusTest() throws ApiException {
        String itemId = null;
        List<String> ff = null;
        String lang = null;
        Watched response = api.getItemWatchedStatus(itemId, ff, lang);
        // TODO: test validations
    }

    /**
     * Returns the next item to play given a source item id.  For an unwatched show it returns the first episode available to the account.  For a watched show it returns the last incompletely watched episode by the profile, or the episode that immediately follows the last completely watched episode  or nothing.  For an episode it always returns the immediately following episode, if available to the account, or nothing.  If the response does not contain a &#x60;next&#x60; property then no item was found. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNextPlaybackItemTest() throws ApiException {
        String itemId = null;
        String maxRating = null;
        String expand = null;
        String device = null;
        String sub = null;
        List<String> segments = null;
        List<String> ff = null;
        String lang = null;
        NextPlaybackItem response = api.getNextPlaybackItem(itemId, maxRating, expand, device, sub, segments, ff, lang);
        // TODO: test validations
    }

    /**
     * Get the details of the active profile, including watched, bookmarked and rated items.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProfileTest() throws ApiException {
        List<String> ff = null;
        String lang = null;
        ProfileDetail response = api.getProfile(ff, lang);
        // TODO: test validations
    }

    /**
     * Get the map of rated item ids (itemId &#x3D;&gt; rating out of 10) under the active profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRatingsTest() throws ApiException {
        List<String> ff = null;
        String lang = null;
        Map<String, Integer> response = api.getRatings(ff, lang);
        // TODO: test validations
    }

    /**
     * Returns the list of rated items under the active profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRatingsListTest() throws ApiException {
        Integer page = null;
        Integer pageSize = null;
        String order = null;
        String orderBy = null;
        String itemType = null;
        String device = null;
        String sub = null;
        List<String> segments = null;
        List<String> ff = null;
        String lang = null;
        ItemList response = api.getRatingsList(page, pageSize, order, orderBy, itemType, device, sub, segments, ff, lang);
        // TODO: test validations
    }

    /**
     * Get the map of watched item ids (itemId &#x3D;&gt; last playhead position) under the active profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWatchedTest() throws ApiException {
        List<String> ff = null;
        String lang = null;
        Map<String, Watched> response = api.getWatched(ff, lang);
        // TODO: test validations
    }

    /**
     * Returns the list of watched items under the active profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWatchedListTest() throws ApiException {
        Integer page = null;
        Integer pageSize = null;
        Boolean completed = null;
        String order = null;
        String orderBy = null;
        String itemType = null;
        String device = null;
        String sub = null;
        List<String> segments = null;
        List<String> ff = null;
        String lang = null;
        ItemList response = api.getWatchedList(page, pageSize, completed, order, orderBy, itemType, device, sub, segments, ff, lang);
        // TODO: test validations
    }

    /**
     * Rate an item under the active profile.  Creates one if it doesn&#39;t exist, overwrites one if it does. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rateItemTest() throws ApiException {
        String itemId = null;
        Integer rating = null;
        List<String> ff = null;
        String lang = null;
        UserRating response = api.rateItem(itemId, rating, ff, lang);
        // TODO: test validations
    }

    /**
     * Record the watched playhead position of a video under the active profile.  Can be used later to resume a video from where it was last watched.  Creates one if it doesn&#39;t exist, overwrites one if it does. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setItemWatchedStatusTest() throws ApiException {
        String itemId = null;
        Integer position = null;
        List<String> ff = null;
        String lang = null;
        Watched response = api.setItemWatchedStatus(itemId, position, ff, lang);
        // TODO: test validations
    }

}
