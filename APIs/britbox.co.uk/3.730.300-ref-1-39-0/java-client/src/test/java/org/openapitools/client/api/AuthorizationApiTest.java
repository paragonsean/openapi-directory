/*
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccessToken;
import org.openapitools.client.model.AccountTokenByCodeRequest;
import org.openapitools.client.model.AccountTokenRequest;
import org.openapitools.client.model.DeviceAuthorizationCode;
import org.openapitools.client.model.DeviceRegistrationRequest;
import org.openapitools.client.model.ProfileTokenRequest;
import org.openapitools.client.model.ServiceError;
import org.openapitools.client.model.SingleSignOnRequest;
import org.openapitools.client.model.TokenRefreshRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthorizationApi
 */
@Disabled
public class AuthorizationApiTest {

    private final AuthorizationApi api = new AuthorizationApi();

    /**
     * Get a generated device authorization code.  This is the first step in the process of authorizing a device by pin code. The device will make a request to this endpoint providing a unique identifier for the device such as a serial number. This endpoint will then return a generated code which is tied to the given device.  The code may subsequently be used to authorize the device to sign in to an account via the &#x60;/account/devices/authorization&#x60; endpoint. Typically this will be from a page presented in the web app under the account section.  Once authorized, the device will then be able to sign in to that account via the &#x60;/authorization/device&#x60; endpoint, without needing to provide the  credentials of the user. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateDeviceAuthorizationCodeTest() throws ApiException {
        DeviceRegistrationRequest deviceRegistrationRequest = null;
        List<String> ff = null;
        String lang = null;
        DeviceAuthorizationCode response = api.generateDeviceAuthorizationCode(deviceRegistrationRequest, ff, lang);
        // TODO: test validations
    }

    /**
     * Request one or more &#x60;Account&#x60; level authorization tokens each with a chosen scope.  Tokens are used to access restricted service endpoints. These restricted endpoints will require a specific token type (e.g Account) with a specific scope (e.g. Catalog) before access is granted.  For convenience, where a Profile level token with the same scope exists it will also be returned.  Authorization with pin is not supported on this endpoint anymore. Use &#x60;/itv/pinauthorization&#x60; endpoint instead. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountTokenTest() throws ApiException {
        AccountTokenRequest accountTokenRequest = null;
        List<String> ff = null;
        String lang = null;
        List<AccessToken> response = api.getAccountToken(accountTokenRequest, ff, lang);
        // TODO: test validations
    }

    /**
     * Get Catalog tokens for an account using a device authorization code. Where a Profile level token of Catalog scope exists it will also be returned.  This is the final step in the process of authorizing a device by pin code.  Firstly the device must request a generated authorization code via the &#x60;/authorization/device/code&#x60; endpoint.  The code is subsequently used to authorize the device to sign in to a given account via the &#x60;/account/devices/authorization&#x60; endpoint. Typically this will be from a page presented in the web app under the account section.  Once authorized, this endpoint will allow the device to sign in without needing to provide the credentials of the user. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountTokenByCodeTest() throws ApiException {
        AccountTokenByCodeRequest accountTokenByCodeRequest = null;
        List<String> ff = null;
        String lang = null;
        List<AccessToken> response = api.getAccountTokenByCode(accountTokenByCodeRequest, ff, lang);
        // TODO: test validations
    }

    /**
     * Request one or more &#x60;Profile&#x60; level authorization tokens each with a chosen scope.  Tokens are used to access restricted service endpoints. These restriced endpoints will require a specific token type (e.g Profile) with a specific scope (e.g. Catalog) before access is granted. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProfileTokenTest() throws ApiException {
        ProfileTokenRequest profileTokenRequest = null;
        List<String> ff = null;
        String lang = null;
        List<AccessToken> response = api.getProfileToken(profileTokenRequest, ff, lang);
        // TODO: test validations
    }

    /**
     * Refresh an account or profile level authorization token which is marked as refreshable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void refreshTokenTest() throws ApiException {
        TokenRefreshRequest tokenRefreshRequest = null;
        List<String> ff = null;
        String lang = null;
        AccessToken response = api.refreshToken(tokenRefreshRequest, ff, lang);
        // TODO: test validations
    }

    /**
     * When a user signs out of an application we need to clear some basic cookies we assigned them during token authorization. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void signOutTest() throws ApiException {
        List<String> ff = null;
        String lang = null;
        api.signOut(ff, lang);
        // TODO: test validations
    }

    /**
     * Exchange a third party single-sign-on token for our own authorization tokens.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void singleSignOnTest() throws ApiException {
        SingleSignOnRequest singleSignOnRequest = null;
        List<String> ff = null;
        String lang = null;
        List<AccessToken> response = api.singleSignOn(singleSignOnRequest, ff, lang);
        // TODO: test validations
    }

}
