/*
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BtPlanListItem;
import org.openapitools.client.model.BtPlans;
import org.openapitools.client.model.EeBtEligibility;
import org.openapitools.client.model.ItvAssignBtTokenRequest;
import org.openapitools.client.model.ServiceError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BtApi
 */
@Disabled
public class BtApiTest {

    private final BtApi api = new BtApi();

    /**
     * Assigns an UserToken to a profile on the ITV side. Currently throws an exception.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignTokenTest() throws ApiException {
        ItvAssignBtTokenRequest itvAssignBtTokenRequest = null;
        String lang = null;
        api.assignToken(itvAssignBtTokenRequest, lang);
        // TODO: test validations
    }

    /**
     * Check whether or not a user is eligible for switching to Bt or EE offers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkEeBtEligibility_0Test() throws ApiException {
        String lang = null;
        EeBtEligibility response = api.checkEeBtEligibility_0(lang);
        // TODO: test validations
    }

    /**
     * Checks a provided token for BT eligible user. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkUserTokenTest() throws ApiException {
        String id = null;
        List<String> ff = null;
        String lang = null;
        api.checkUserToken(id, ff, lang);
        // TODO: test validations
    }

    /**
     * Returns all the plans available for BT flow including additional description data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPlanByTokenTest() throws ApiException {
        String token = null;
        String lang = null;
        BtPlanListItem response = api.getPlanByToken(token, lang);
        // TODO: test validations
    }

    /**
     * Returns all the plans available for BT flow including additional description data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPlansTest() throws ApiException {
        String lang = null;
        BtPlans response = api.getPlans(lang);
        // TODO: test validations
    }

}
