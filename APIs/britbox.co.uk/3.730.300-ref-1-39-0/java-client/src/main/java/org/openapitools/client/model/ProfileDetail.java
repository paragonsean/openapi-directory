/*
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ClassificationSummary;
import org.openapitools.client.model.Watched;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProfileDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:39.003134-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProfileDetail {
  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public static final String SERIALIZED_NAME_HERO_AUTOPLAY = "heroAutoplay";
  @SerializedName(SERIALIZED_NAME_HERO_AUTOPLAY)
  private Boolean heroAutoplay;

  public static final String SERIALIZED_NAME_HERO_WITH_AUDIO = "heroWithAudio";
  @SerializedName(SERIALIZED_NAME_HERO_WITH_AUDIO)
  private Boolean heroWithAudio;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "languageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  public static final String SERIALIZED_NAME_MARKETING_ENABLED = "marketingEnabled";
  @SerializedName(SERIALIZED_NAME_MARKETING_ENABLED)
  private Boolean marketingEnabled;

  public static final String SERIALIZED_NAME_MAX_RATING_CONTENT_FILTER = "maxRatingContentFilter";
  @SerializedName(SERIALIZED_NAME_MAX_RATING_CONTENT_FILTER)
  private ClassificationSummary maxRatingContentFilter;

  public static final String SERIALIZED_NAME_MIN_RATING_PLAYBACK_GUARD = "minRatingPlaybackGuard";
  @SerializedName(SERIALIZED_NAME_MIN_RATING_PLAYBACK_GUARD)
  private ClassificationSummary minRatingPlaybackGuard;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PIN_ENABLED = "pinEnabled";
  @SerializedName(SERIALIZED_NAME_PIN_ENABLED)
  private Boolean pinEnabled;

  public static final String SERIALIZED_NAME_PURCHASE_ENABLED = "purchaseEnabled";
  @SerializedName(SERIALIZED_NAME_PURCHASE_ENABLED)
  private Boolean purchaseEnabled;

  public static final String SERIALIZED_NAME_SEGMENTS = "segments";
  @SerializedName(SERIALIZED_NAME_SEGMENTS)
  private List<String> segments = new ArrayList<>();

  public static final String SERIALIZED_NAME_BOOKMARKED = "bookmarked";
  @SerializedName(SERIALIZED_NAME_BOOKMARKED)
  private Map<String, OffsetDateTime> bookmarked = new HashMap<>();

  public static final String SERIALIZED_NAME_RATED = "rated";
  @SerializedName(SERIALIZED_NAME_RATED)
  private Map<String, Integer> rated = new HashMap<>();

  public static final String SERIALIZED_NAME_WATCHED = "watched";
  @SerializedName(SERIALIZED_NAME_WATCHED)
  private Map<String, Watched> watched = new HashMap<>();

  public ProfileDetail() {
  }

  public ProfileDetail color(String color) {
    this.color = color;
    return this;
  }

  /**
   * Hex color value assigned to the profile.
   * @return color
   */
  @javax.annotation.Nullable
  public String getColor() {
    return color;
  }

  public void setColor(String color) {
    this.color = color;
  }


  public ProfileDetail heroAutoplay(Boolean heroAutoplay) {
    this.heroAutoplay = heroAutoplay;
    return this;
  }

  /**
   * Gets the Hero row clip auto playback enabled
   * @return heroAutoplay
   */
  @javax.annotation.Nullable
  public Boolean getHeroAutoplay() {
    return heroAutoplay;
  }

  public void setHeroAutoplay(Boolean heroAutoplay) {
    this.heroAutoplay = heroAutoplay;
  }


  public ProfileDetail heroWithAudio(Boolean heroWithAudio) {
    this.heroWithAudio = heroWithAudio;
    return this;
  }

  /**
   * Gets the Hero row clip auto playback audio enabled
   * @return heroWithAudio
   */
  @javax.annotation.Nullable
  public Boolean getHeroWithAudio() {
    return heroWithAudio;
  }

  public void setHeroWithAudio(Boolean heroWithAudio) {
    this.heroWithAudio = heroWithAudio;
  }


  public ProfileDetail id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The id of the profile.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ProfileDetail isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * Whether the profile is active or not.  **DEPRECATED** - Always true. Inactive profiles are no longer returned. 
   * @return isActive
   */
  @javax.annotation.Nonnull
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public ProfileDetail languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * The code of the preferred language for the profile. Must be a valid ISO language code e.g. \&quot;en-US\&quot; and must match the code of one of the languages specified in the app config. See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
   * @return languageCode
   */
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  public ProfileDetail marketingEnabled(Boolean marketingEnabled) {
    this.marketingEnabled = marketingEnabled;
    return this;
  }

  /**
   * Whether the profile has opted in or out of marketing material.  **DEPRECATED** - Marketing material is no longer tied to profiles, only account. See &#x60;Account.marketingEnabled&#x60;. 
   * @return marketingEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getMarketingEnabled() {
    return marketingEnabled;
  }

  public void setMarketingEnabled(Boolean marketingEnabled) {
    this.marketingEnabled = marketingEnabled;
  }


  public ProfileDetail maxRatingContentFilter(ClassificationSummary maxRatingContentFilter) {
    this.maxRatingContentFilter = maxRatingContentFilter;
    return this;
  }

  /**
   * Get maxRatingContentFilter
   * @return maxRatingContentFilter
   */
  @javax.annotation.Nullable
  public ClassificationSummary getMaxRatingContentFilter() {
    return maxRatingContentFilter;
  }

  public void setMaxRatingContentFilter(ClassificationSummary maxRatingContentFilter) {
    this.maxRatingContentFilter = maxRatingContentFilter;
  }


  public ProfileDetail minRatingPlaybackGuard(ClassificationSummary minRatingPlaybackGuard) {
    this.minRatingPlaybackGuard = minRatingPlaybackGuard;
    return this;
  }

  /**
   * Get minRatingPlaybackGuard
   * @return minRatingPlaybackGuard
   */
  @javax.annotation.Nullable
  public ClassificationSummary getMinRatingPlaybackGuard() {
    return minRatingPlaybackGuard;
  }

  public void setMinRatingPlaybackGuard(ClassificationSummary minRatingPlaybackGuard) {
    this.minRatingPlaybackGuard = minRatingPlaybackGuard;
  }


  public ProfileDetail name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The unique name of the profile.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ProfileDetail pinEnabled(Boolean pinEnabled) {
    this.pinEnabled = pinEnabled;
    return this;
  }

  /**
   * Whether a pin is required to enter the profile.
   * @return pinEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getPinEnabled() {
    return pinEnabled;
  }

  public void setPinEnabled(Boolean pinEnabled) {
    this.pinEnabled = pinEnabled;
  }


  public ProfileDetail purchaseEnabled(Boolean purchaseEnabled) {
    this.purchaseEnabled = purchaseEnabled;
    return this;
  }

  /**
   * Whether the profile can make purchases with the account payment options.
   * @return purchaseEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getPurchaseEnabled() {
    return purchaseEnabled;
  }

  public void setPurchaseEnabled(Boolean purchaseEnabled) {
    this.purchaseEnabled = purchaseEnabled;
  }


  public ProfileDetail segments(List<String> segments) {
    this.segments = segments;
    return this;
  }

  public ProfileDetail addSegmentsItem(String segmentsItem) {
    if (this.segments == null) {
      this.segments = new ArrayList<>();
    }
    this.segments.add(segmentsItem);
    return this;
  }

  /**
   * The segments a profile has been placed under
   * @return segments
   */
  @javax.annotation.Nonnull
  public List<String> getSegments() {
    return segments;
  }

  public void setSegments(List<String> segments) {
    this.segments = segments;
  }


  public ProfileDetail bookmarked(Map<String, OffsetDateTime> bookmarked) {
    this.bookmarked = bookmarked;
    return this;
  }

  public ProfileDetail putBookmarkedItem(String key, OffsetDateTime bookmarkedItem) {
    if (this.bookmarked == null) {
      this.bookmarked = new HashMap<>();
    }
    this.bookmarked.put(key, bookmarkedItem);
    return this;
  }

  /**
   * A map of bookmarked itemIds &#x3D;&gt; created date
   * @return bookmarked
   */
  @javax.annotation.Nonnull
  public Map<String, OffsetDateTime> getBookmarked() {
    return bookmarked;
  }

  public void setBookmarked(Map<String, OffsetDateTime> bookmarked) {
    this.bookmarked = bookmarked;
  }


  public ProfileDetail rated(Map<String, Integer> rated) {
    this.rated = rated;
    return this;
  }

  public ProfileDetail putRatedItem(String key, Integer ratedItem) {
    if (this.rated == null) {
      this.rated = new HashMap<>();
    }
    this.rated.put(key, ratedItem);
    return this;
  }

  /**
   * A map of rated itemIds &#x3D;&gt; rating out of 10
   * @return rated
   */
  @javax.annotation.Nonnull
  public Map<String, Integer> getRated() {
    return rated;
  }

  public void setRated(Map<String, Integer> rated) {
    this.rated = rated;
  }


  public ProfileDetail watched(Map<String, Watched> watched) {
    this.watched = watched;
    return this;
  }

  public ProfileDetail putWatchedItem(String key, Watched watchedItem) {
    if (this.watched == null) {
      this.watched = new HashMap<>();
    }
    this.watched.put(key, watchedItem);
    return this;
  }

  /**
   * A map of watched itemIds &#x3D;&gt; last watched position
   * @return watched
   */
  @javax.annotation.Nonnull
  public Map<String, Watched> getWatched() {
    return watched;
  }

  public void setWatched(Map<String, Watched> watched) {
    this.watched = watched;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProfileDetail profileDetail = (ProfileDetail) o;
    return Objects.equals(this.color, profileDetail.color) &&
        Objects.equals(this.heroAutoplay, profileDetail.heroAutoplay) &&
        Objects.equals(this.heroWithAudio, profileDetail.heroWithAudio) &&
        Objects.equals(this.id, profileDetail.id) &&
        Objects.equals(this.isActive, profileDetail.isActive) &&
        Objects.equals(this.languageCode, profileDetail.languageCode) &&
        Objects.equals(this.marketingEnabled, profileDetail.marketingEnabled) &&
        Objects.equals(this.maxRatingContentFilter, profileDetail.maxRatingContentFilter) &&
        Objects.equals(this.minRatingPlaybackGuard, profileDetail.minRatingPlaybackGuard) &&
        Objects.equals(this.name, profileDetail.name) &&
        Objects.equals(this.pinEnabled, profileDetail.pinEnabled) &&
        Objects.equals(this.purchaseEnabled, profileDetail.purchaseEnabled) &&
        Objects.equals(this.segments, profileDetail.segments) &&
        Objects.equals(this.bookmarked, profileDetail.bookmarked) &&
        Objects.equals(this.rated, profileDetail.rated) &&
        Objects.equals(this.watched, profileDetail.watched);
  }

  @Override
  public int hashCode() {
    return Objects.hash(color, heroAutoplay, heroWithAudio, id, isActive, languageCode, marketingEnabled, maxRatingContentFilter, minRatingPlaybackGuard, name, pinEnabled, purchaseEnabled, segments, bookmarked, rated, watched);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProfileDetail {\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    heroAutoplay: ").append(toIndentedString(heroAutoplay)).append("\n");
    sb.append("    heroWithAudio: ").append(toIndentedString(heroWithAudio)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    marketingEnabled: ").append(toIndentedString(marketingEnabled)).append("\n");
    sb.append("    maxRatingContentFilter: ").append(toIndentedString(maxRatingContentFilter)).append("\n");
    sb.append("    minRatingPlaybackGuard: ").append(toIndentedString(minRatingPlaybackGuard)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pinEnabled: ").append(toIndentedString(pinEnabled)).append("\n");
    sb.append("    purchaseEnabled: ").append(toIndentedString(purchaseEnabled)).append("\n");
    sb.append("    segments: ").append(toIndentedString(segments)).append("\n");
    sb.append("    bookmarked: ").append(toIndentedString(bookmarked)).append("\n");
    sb.append("    rated: ").append(toIndentedString(rated)).append("\n");
    sb.append("    watched: ").append(toIndentedString(watched)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("color");
    openapiFields.add("heroAutoplay");
    openapiFields.add("heroWithAudio");
    openapiFields.add("id");
    openapiFields.add("isActive");
    openapiFields.add("languageCode");
    openapiFields.add("marketingEnabled");
    openapiFields.add("maxRatingContentFilter");
    openapiFields.add("minRatingPlaybackGuard");
    openapiFields.add("name");
    openapiFields.add("pinEnabled");
    openapiFields.add("purchaseEnabled");
    openapiFields.add("segments");
    openapiFields.add("bookmarked");
    openapiFields.add("rated");
    openapiFields.add("watched");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("isActive");
    openapiRequiredFields.add("marketingEnabled");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("pinEnabled");
    openapiRequiredFields.add("purchaseEnabled");
    openapiRequiredFields.add("segments");
    openapiRequiredFields.add("bookmarked");
    openapiRequiredFields.add("rated");
    openapiRequiredFields.add("watched");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProfileDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProfileDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProfileDetail is not found in the empty JSON string", ProfileDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProfileDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProfileDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProfileDetail.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) && !jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("languageCode") != null && !jsonObj.get("languageCode").isJsonNull()) && !jsonObj.get("languageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageCode").toString()));
      }
      // validate the optional field `maxRatingContentFilter`
      if (jsonObj.get("maxRatingContentFilter") != null && !jsonObj.get("maxRatingContentFilter").isJsonNull()) {
        ClassificationSummary.validateJsonElement(jsonObj.get("maxRatingContentFilter"));
      }
      // validate the optional field `minRatingPlaybackGuard`
      if (jsonObj.get("minRatingPlaybackGuard") != null && !jsonObj.get("minRatingPlaybackGuard").isJsonNull()) {
        ClassificationSummary.validateJsonElement(jsonObj.get("minRatingPlaybackGuard"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("segments") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("segments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `segments` to be an array in the JSON string but got `%s`", jsonObj.get("segments").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProfileDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProfileDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProfileDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProfileDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<ProfileDetail>() {
           @Override
           public void write(JsonWriter out, ProfileDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProfileDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProfileDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProfileDetail
   * @throws IOException if the JSON string is invalid with respect to ProfileDetail
   */
  public static ProfileDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProfileDetail.class);
  }

  /**
   * Convert an instance of ProfileDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

