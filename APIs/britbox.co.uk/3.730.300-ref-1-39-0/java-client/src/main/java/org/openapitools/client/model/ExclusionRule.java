/*
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines playback exclusion rules for an Offer or Entitlement.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:39.003134-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExclusionRule {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DEVICE = "device";
  @SerializedName(SERIALIZED_NAME_DEVICE)
  private String device;

  public static final String SERIALIZED_NAME_EXCLUDE_AIRPLAY = "excludeAirplay";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_AIRPLAY)
  private Boolean excludeAirplay;

  public static final String SERIALIZED_NAME_EXCLUDE_CHROMECAST = "excludeChromecast";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_CHROMECAST)
  private Boolean excludeChromecast;

  /**
   * Gets or Sets excludeDelivery
   */
  @JsonAdapter(ExcludeDeliveryEnum.Adapter.class)
  public enum ExcludeDeliveryEnum {
    STREAM("Stream"),
    
    DOWNLOAD("Download"),
    
    STREAM_OR_DOWNLOAD("StreamOrDownload"),
    
    PROGRESSIVE_DOWNLOAD("ProgressiveDownload"),
    
    NONE("None");

    private String value;

    ExcludeDeliveryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExcludeDeliveryEnum fromValue(String value) {
      for (ExcludeDeliveryEnum b : ExcludeDeliveryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExcludeDeliveryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExcludeDeliveryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExcludeDeliveryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExcludeDeliveryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExcludeDeliveryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXCLUDE_DELIVERY = "excludeDelivery";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_DELIVERY)
  private ExcludeDeliveryEnum excludeDelivery;

  /**
   * Gets or Sets excludeMinResolution
   */
  @JsonAdapter(ExcludeMinResolutionEnum.Adapter.class)
  public enum ExcludeMinResolutionEnum {
    SD("SD"),
    
    HD_720("HD-720"),
    
    HD_1080("HD-1080"),
    
    HD_4_K("HD-4K"),
    
    EXTERNAL("External"),
    
    UNKNOWN("Unknown");

    private String value;

    ExcludeMinResolutionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExcludeMinResolutionEnum fromValue(String value) {
      for (ExcludeMinResolutionEnum b : ExcludeMinResolutionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExcludeMinResolutionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExcludeMinResolutionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExcludeMinResolutionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExcludeMinResolutionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExcludeMinResolutionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXCLUDE_MIN_RESOLUTION = "excludeMinResolution";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_MIN_RESOLUTION)
  private ExcludeMinResolutionEnum excludeMinResolution;

  public ExclusionRule() {
  }

  public ExclusionRule description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ExclusionRule device(String device) {
    this.device = device;
    return this;
  }

  /**
   * The device type that the exclusion rules apply to.
   * @return device
   */
  @javax.annotation.Nullable
  public String getDevice() {
    return device;
  }

  public void setDevice(String device) {
    this.device = device;
  }


  public ExclusionRule excludeAirplay(Boolean excludeAirplay) {
    this.excludeAirplay = excludeAirplay;
    return this;
  }

  /**
   * Prevent airplay from an apple device.
   * @return excludeAirplay
   */
  @javax.annotation.Nullable
  public Boolean getExcludeAirplay() {
    return excludeAirplay;
  }

  public void setExcludeAirplay(Boolean excludeAirplay) {
    this.excludeAirplay = excludeAirplay;
  }


  public ExclusionRule excludeChromecast(Boolean excludeChromecast) {
    this.excludeChromecast = excludeChromecast;
    return this;
  }

  /**
   * Prevent chromecasting.
   * @return excludeChromecast
   */
  @javax.annotation.Nullable
  public Boolean getExcludeChromecast() {
    return excludeChromecast;
  }

  public void setExcludeChromecast(Boolean excludeChromecast) {
    this.excludeChromecast = excludeChromecast;
  }


  public ExclusionRule excludeDelivery(ExcludeDeliveryEnum excludeDelivery) {
    this.excludeDelivery = excludeDelivery;
    return this;
  }

  /**
   * Get excludeDelivery
   * @return excludeDelivery
   */
  @javax.annotation.Nullable
  public ExcludeDeliveryEnum getExcludeDelivery() {
    return excludeDelivery;
  }

  public void setExcludeDelivery(ExcludeDeliveryEnum excludeDelivery) {
    this.excludeDelivery = excludeDelivery;
  }


  public ExclusionRule excludeMinResolution(ExcludeMinResolutionEnum excludeMinResolution) {
    this.excludeMinResolution = excludeMinResolution;
    return this;
  }

  /**
   * Get excludeMinResolution
   * @return excludeMinResolution
   */
  @javax.annotation.Nullable
  public ExcludeMinResolutionEnum getExcludeMinResolution() {
    return excludeMinResolution;
  }

  public void setExcludeMinResolution(ExcludeMinResolutionEnum excludeMinResolution) {
    this.excludeMinResolution = excludeMinResolution;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExclusionRule exclusionRule = (ExclusionRule) o;
    return Objects.equals(this.description, exclusionRule.description) &&
        Objects.equals(this.device, exclusionRule.device) &&
        Objects.equals(this.excludeAirplay, exclusionRule.excludeAirplay) &&
        Objects.equals(this.excludeChromecast, exclusionRule.excludeChromecast) &&
        Objects.equals(this.excludeDelivery, exclusionRule.excludeDelivery) &&
        Objects.equals(this.excludeMinResolution, exclusionRule.excludeMinResolution);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, device, excludeAirplay, excludeChromecast, excludeDelivery, excludeMinResolution);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExclusionRule {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    excludeAirplay: ").append(toIndentedString(excludeAirplay)).append("\n");
    sb.append("    excludeChromecast: ").append(toIndentedString(excludeChromecast)).append("\n");
    sb.append("    excludeDelivery: ").append(toIndentedString(excludeDelivery)).append("\n");
    sb.append("    excludeMinResolution: ").append(toIndentedString(excludeMinResolution)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("device");
    openapiFields.add("excludeAirplay");
    openapiFields.add("excludeChromecast");
    openapiFields.add("excludeDelivery");
    openapiFields.add("excludeMinResolution");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExclusionRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExclusionRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExclusionRule is not found in the empty JSON string", ExclusionRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExclusionRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExclusionRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("device") != null && !jsonObj.get("device").isJsonNull()) && !jsonObj.get("device").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device").toString()));
      }
      if ((jsonObj.get("excludeDelivery") != null && !jsonObj.get("excludeDelivery").isJsonNull()) && !jsonObj.get("excludeDelivery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludeDelivery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("excludeDelivery").toString()));
      }
      // validate the optional field `excludeDelivery`
      if (jsonObj.get("excludeDelivery") != null && !jsonObj.get("excludeDelivery").isJsonNull()) {
        ExcludeDeliveryEnum.validateJsonElement(jsonObj.get("excludeDelivery"));
      }
      if ((jsonObj.get("excludeMinResolution") != null && !jsonObj.get("excludeMinResolution").isJsonNull()) && !jsonObj.get("excludeMinResolution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludeMinResolution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("excludeMinResolution").toString()));
      }
      // validate the optional field `excludeMinResolution`
      if (jsonObj.get("excludeMinResolution") != null && !jsonObj.get("excludeMinResolution").isJsonNull()) {
        ExcludeMinResolutionEnum.validateJsonElement(jsonObj.get("excludeMinResolution"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExclusionRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExclusionRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExclusionRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExclusionRule.class));

       return (TypeAdapter<T>) new TypeAdapter<ExclusionRule>() {
           @Override
           public void write(JsonWriter out, ExclusionRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExclusionRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExclusionRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExclusionRule
   * @throws IOException if the JSON string is invalid with respect to ExclusionRule
   */
  public static ExclusionRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExclusionRule.class);
  }

  /**
   * Convert an instance of ExclusionRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

