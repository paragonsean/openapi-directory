/*
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AppConfigGeneral
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:39.003134-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppConfigGeneral {
  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "customFields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Map<String, Object> customFields = new HashMap<>();

  public static final String SERIALIZED_NAME_DEFAULT_TIME_ZONE = "defaultTimeZone";
  @SerializedName(SERIALIZED_NAME_DEFAULT_TIME_ZONE)
  private String defaultTimeZone;

  public static final String SERIALIZED_NAME_FACEBOOK_APP_ID = "facebookAppId";
  @SerializedName(SERIALIZED_NAME_FACEBOOK_APP_ID)
  private String facebookAppId;

  public static final String SERIALIZED_NAME_GA_TOKEN = "gaToken";
  @SerializedName(SERIALIZED_NAME_GA_TOKEN)
  private String gaToken;

  public static final String SERIALIZED_NAME_ITEM_IMAGE_TYPES = "itemImageTypes";
  @SerializedName(SERIALIZED_NAME_ITEM_IMAGE_TYPES)
  private Map<String, String> itemImageTypes = new HashMap<>();

  public static final String SERIALIZED_NAME_MANDATORY_SIGN_IN = "mandatorySignIn";
  @SerializedName(SERIALIZED_NAME_MANDATORY_SIGN_IN)
  private Boolean mandatorySignIn;

  public static final String SERIALIZED_NAME_MAX_USER_RATING = "maxUserRating";
  @SerializedName(SERIALIZED_NAME_MAX_USER_RATING)
  private Integer maxUserRating;

  public static final String SERIALIZED_NAME_STRIPE_KEY = "stripeKey";
  @SerializedName(SERIALIZED_NAME_STRIPE_KEY)
  private String stripeKey;

  public static final String SERIALIZED_NAME_WEBSITE_URL = "websiteUrl";
  @SerializedName(SERIALIZED_NAME_WEBSITE_URL)
  private URI websiteUrl;

  public AppConfigGeneral() {
  }

  public AppConfigGeneral currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * The currency code to target.
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public AppConfigGeneral customFields(Map<String, Object> customFields) {
    this.customFields = customFields;
    return this;
  }

  public AppConfigGeneral putCustomFieldsItem(String key, Object customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new HashMap<>();
    }
    this.customFields.put(key, customFieldsItem);
    return this;
  }

  /**
   * A map of custom configuration fields.
   * @return customFields
   */
  @javax.annotation.Nullable
  public Map<String, Object> getCustomFields() {
    return customFields;
  }

  public void setCustomFields(Map<String, Object> customFields) {
    this.customFields = customFields;
  }


  public AppConfigGeneral defaultTimeZone(String defaultTimeZone) {
    this.defaultTimeZone = defaultTimeZone;
    return this;
  }

  /**
   * The default time zone of the site. e.g. \&quot;Etc/GMT\&quot;
   * @return defaultTimeZone
   */
  @javax.annotation.Nullable
  public String getDefaultTimeZone() {
    return defaultTimeZone;
  }

  public void setDefaultTimeZone(String defaultTimeZone) {
    this.defaultTimeZone = defaultTimeZone;
  }


  public AppConfigGeneral facebookAppId(String facebookAppId) {
    this.facebookAppId = facebookAppId;
    return this;
  }

  /**
   * The Facebook application id associated with an environment.
   * @return facebookAppId
   */
  @javax.annotation.Nullable
  public String getFacebookAppId() {
    return facebookAppId;
  }

  public void setFacebookAppId(String facebookAppId) {
    this.facebookAppId = facebookAppId;
  }


  public AppConfigGeneral gaToken(String gaToken) {
    this.gaToken = gaToken;
    return this;
  }

  /**
   * A Google Analytics token to track applicaton user events.
   * @return gaToken
   */
  @javax.annotation.Nullable
  public String getGaToken() {
    return gaToken;
  }

  public void setGaToken(String gaToken) {
    this.gaToken = gaToken;
  }


  public AppConfigGeneral itemImageTypes(Map<String, String> itemImageTypes) {
    this.itemImageTypes = itemImageTypes;
    return this;
  }

  public AppConfigGeneral putItemImageTypesItem(String key, String itemImageTypesItem) {
    if (this.itemImageTypes == null) {
      this.itemImageTypes = new HashMap<>();
    }
    this.itemImageTypes.put(key, itemImageTypesItem);
    return this;
  }

  /**
   * A map of default item image types where the key is the item types.
   * @return itemImageTypes
   */
  @javax.annotation.Nullable
  public Map<String, String> getItemImageTypes() {
    return itemImageTypes;
  }

  public void setItemImageTypes(Map<String, String> itemImageTypes) {
    this.itemImageTypes = itemImageTypes;
  }


  public AppConfigGeneral mandatorySignIn(Boolean mandatorySignIn) {
    this.mandatorySignIn = mandatorySignIn;
    return this;
  }

  /**
   * Whether to require sign in for customers to access content.
   * @return mandatorySignIn
   */
  @javax.annotation.Nullable
  public Boolean getMandatorySignIn() {
    return mandatorySignIn;
  }

  public void setMandatorySignIn(Boolean mandatorySignIn) {
    this.mandatorySignIn = mandatorySignIn;
  }


  public AppConfigGeneral maxUserRating(Integer maxUserRating) {
    this.maxUserRating = maxUserRating;
    return this;
  }

  /**
   * The maximum value allowed for user ratings.
   * @return maxUserRating
   */
  @javax.annotation.Nullable
  public Integer getMaxUserRating() {
    return maxUserRating;
  }

  public void setMaxUserRating(Integer maxUserRating) {
    this.maxUserRating = maxUserRating;
  }


  public AppConfigGeneral stripeKey(String stripeKey) {
    this.stripeKey = stripeKey;
    return this;
  }

  /**
   * The public Stripe key to use for payment transactions.
   * @return stripeKey
   */
  @javax.annotation.Nullable
  public String getStripeKey() {
    return stripeKey;
  }

  public void setStripeKey(String stripeKey) {
    this.stripeKey = stripeKey;
  }


  public AppConfigGeneral websiteUrl(URI websiteUrl) {
    this.websiteUrl = websiteUrl;
    return this;
  }

  /**
   * The url of the primary website.
   * @return websiteUrl
   */
  @javax.annotation.Nullable
  public URI getWebsiteUrl() {
    return websiteUrl;
  }

  public void setWebsiteUrl(URI websiteUrl) {
    this.websiteUrl = websiteUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppConfigGeneral appConfigGeneral = (AppConfigGeneral) o;
    return Objects.equals(this.currencyCode, appConfigGeneral.currencyCode) &&
        Objects.equals(this.customFields, appConfigGeneral.customFields) &&
        Objects.equals(this.defaultTimeZone, appConfigGeneral.defaultTimeZone) &&
        Objects.equals(this.facebookAppId, appConfigGeneral.facebookAppId) &&
        Objects.equals(this.gaToken, appConfigGeneral.gaToken) &&
        Objects.equals(this.itemImageTypes, appConfigGeneral.itemImageTypes) &&
        Objects.equals(this.mandatorySignIn, appConfigGeneral.mandatorySignIn) &&
        Objects.equals(this.maxUserRating, appConfigGeneral.maxUserRating) &&
        Objects.equals(this.stripeKey, appConfigGeneral.stripeKey) &&
        Objects.equals(this.websiteUrl, appConfigGeneral.websiteUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currencyCode, customFields, defaultTimeZone, facebookAppId, gaToken, itemImageTypes, mandatorySignIn, maxUserRating, stripeKey, websiteUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppConfigGeneral {\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    defaultTimeZone: ").append(toIndentedString(defaultTimeZone)).append("\n");
    sb.append("    facebookAppId: ").append(toIndentedString(facebookAppId)).append("\n");
    sb.append("    gaToken: ").append(toIndentedString(gaToken)).append("\n");
    sb.append("    itemImageTypes: ").append(toIndentedString(itemImageTypes)).append("\n");
    sb.append("    mandatorySignIn: ").append(toIndentedString(mandatorySignIn)).append("\n");
    sb.append("    maxUserRating: ").append(toIndentedString(maxUserRating)).append("\n");
    sb.append("    stripeKey: ").append(toIndentedString(stripeKey)).append("\n");
    sb.append("    websiteUrl: ").append(toIndentedString(websiteUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currencyCode");
    openapiFields.add("customFields");
    openapiFields.add("defaultTimeZone");
    openapiFields.add("facebookAppId");
    openapiFields.add("gaToken");
    openapiFields.add("itemImageTypes");
    openapiFields.add("mandatorySignIn");
    openapiFields.add("maxUserRating");
    openapiFields.add("stripeKey");
    openapiFields.add("websiteUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppConfigGeneral
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppConfigGeneral.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppConfigGeneral is not found in the empty JSON string", AppConfigGeneral.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppConfigGeneral.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppConfigGeneral` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if ((jsonObj.get("defaultTimeZone") != null && !jsonObj.get("defaultTimeZone").isJsonNull()) && !jsonObj.get("defaultTimeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultTimeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultTimeZone").toString()));
      }
      if ((jsonObj.get("facebookAppId") != null && !jsonObj.get("facebookAppId").isJsonNull()) && !jsonObj.get("facebookAppId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `facebookAppId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("facebookAppId").toString()));
      }
      if ((jsonObj.get("gaToken") != null && !jsonObj.get("gaToken").isJsonNull()) && !jsonObj.get("gaToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gaToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gaToken").toString()));
      }
      if ((jsonObj.get("stripeKey") != null && !jsonObj.get("stripeKey").isJsonNull()) && !jsonObj.get("stripeKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stripeKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stripeKey").toString()));
      }
      if ((jsonObj.get("websiteUrl") != null && !jsonObj.get("websiteUrl").isJsonNull()) && !jsonObj.get("websiteUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `websiteUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("websiteUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppConfigGeneral.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppConfigGeneral' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppConfigGeneral> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppConfigGeneral.class));

       return (TypeAdapter<T>) new TypeAdapter<AppConfigGeneral>() {
           @Override
           public void write(JsonWriter out, AppConfigGeneral value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppConfigGeneral read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppConfigGeneral given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppConfigGeneral
   * @throws IOException if the JSON string is invalid with respect to AppConfigGeneral
   */
  public static AppConfigGeneral fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppConfigGeneral.class);
  }

  /**
   * Convert an instance of AppConfigGeneral to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

