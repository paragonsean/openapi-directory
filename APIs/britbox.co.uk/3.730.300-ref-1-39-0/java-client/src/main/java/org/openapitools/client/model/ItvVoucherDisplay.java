/*
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ItvVoucherDisplay
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:39.003134-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ItvVoucherDisplay {
  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_DISCOUNT_PRICE = "discountPrice";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_PRICE)
  private String discountPrice;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  public static final String SERIALIZED_NAME_DURATION_IN_MONTHS = "durationInMonths";
  @SerializedName(SERIALIZED_NAME_DURATION_IN_MONTHS)
  private BigDecimal durationInMonths;

  public static final String SERIALIZED_NAME_HEADLINE_LABEL = "headlineLabel";
  @SerializedName(SERIALIZED_NAME_HEADLINE_LABEL)
  private String headlineLabel;

  public static final String SERIALIZED_NAME_INITIAL_COST = "initialCost";
  @SerializedName(SERIALIZED_NAME_INITIAL_COST)
  private Float initialCost;

  public static final String SERIALIZED_NAME_LONG_DESCRIPTION = "longDescription";
  @SerializedName(SERIALIZED_NAME_LONG_DESCRIPTION)
  private String longDescription;

  public static final String SERIALIZED_NAME_PERCENT_OFF = "percentOff";
  @SerializedName(SERIALIZED_NAME_PERCENT_OFF)
  private Float percentOff;

  public static final String SERIALIZED_NAME_SAVING_LABEL = "savingLabel";
  @SerializedName(SERIALIZED_NAME_SAVING_LABEL)
  private String savingLabel;

  public static final String SERIALIZED_NAME_SHORT_DESCRIPTION = "shortDescription";
  @SerializedName(SERIALIZED_NAME_SHORT_DESCRIPTION)
  private String shortDescription;

  public ItvVoucherDisplay() {
  }

  public ItvVoucherDisplay currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Currency.
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public ItvVoucherDisplay discountPrice(String discountPrice) {
    this.discountPrice = discountPrice;
    return this;
  }

  /**
   * Discount price.
   * @return discountPrice
   */
  @javax.annotation.Nullable
  public String getDiscountPrice() {
    return discountPrice;
  }

  public void setDiscountPrice(String discountPrice) {
    this.discountPrice = discountPrice;
  }


  public ItvVoucherDisplay duration(String duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Duration.
   * @return duration
   */
  @javax.annotation.Nullable
  public String getDuration() {
    return duration;
  }

  public void setDuration(String duration) {
    this.duration = duration;
  }


  public ItvVoucherDisplay durationInMonths(BigDecimal durationInMonths) {
    this.durationInMonths = durationInMonths;
    return this;
  }

  /**
   * Duration in months.
   * @return durationInMonths
   */
  @javax.annotation.Nullable
  public BigDecimal getDurationInMonths() {
    return durationInMonths;
  }

  public void setDurationInMonths(BigDecimal durationInMonths) {
    this.durationInMonths = durationInMonths;
  }


  public ItvVoucherDisplay headlineLabel(String headlineLabel) {
    this.headlineLabel = headlineLabel;
    return this;
  }

  /**
   * Headline label.
   * @return headlineLabel
   */
  @javax.annotation.Nullable
  public String getHeadlineLabel() {
    return headlineLabel;
  }

  public void setHeadlineLabel(String headlineLabel) {
    this.headlineLabel = headlineLabel;
  }


  public ItvVoucherDisplay initialCost(Float initialCost) {
    this.initialCost = initialCost;
    return this;
  }

  /**
   * InitialCost.
   * @return initialCost
   */
  @javax.annotation.Nullable
  public Float getInitialCost() {
    return initialCost;
  }

  public void setInitialCost(Float initialCost) {
    this.initialCost = initialCost;
  }


  public ItvVoucherDisplay longDescription(String longDescription) {
    this.longDescription = longDescription;
    return this;
  }

  /**
   * Long description.
   * @return longDescription
   */
  @javax.annotation.Nullable
  public String getLongDescription() {
    return longDescription;
  }

  public void setLongDescription(String longDescription) {
    this.longDescription = longDescription;
  }


  public ItvVoucherDisplay percentOff(Float percentOff) {
    this.percentOff = percentOff;
    return this;
  }

  /**
   * Percent off.
   * @return percentOff
   */
  @javax.annotation.Nullable
  public Float getPercentOff() {
    return percentOff;
  }

  public void setPercentOff(Float percentOff) {
    this.percentOff = percentOff;
  }


  public ItvVoucherDisplay savingLabel(String savingLabel) {
    this.savingLabel = savingLabel;
    return this;
  }

  /**
   * SavingLabel.
   * @return savingLabel
   */
  @javax.annotation.Nullable
  public String getSavingLabel() {
    return savingLabel;
  }

  public void setSavingLabel(String savingLabel) {
    this.savingLabel = savingLabel;
  }


  public ItvVoucherDisplay shortDescription(String shortDescription) {
    this.shortDescription = shortDescription;
    return this;
  }

  /**
   * Short description.
   * @return shortDescription
   */
  @javax.annotation.Nullable
  public String getShortDescription() {
    return shortDescription;
  }

  public void setShortDescription(String shortDescription) {
    this.shortDescription = shortDescription;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ItvVoucherDisplay instance itself
   */
  public ItvVoucherDisplay putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItvVoucherDisplay itvVoucherDisplay = (ItvVoucherDisplay) o;
    return Objects.equals(this.currency, itvVoucherDisplay.currency) &&
        Objects.equals(this.discountPrice, itvVoucherDisplay.discountPrice) &&
        Objects.equals(this.duration, itvVoucherDisplay.duration) &&
        Objects.equals(this.durationInMonths, itvVoucherDisplay.durationInMonths) &&
        Objects.equals(this.headlineLabel, itvVoucherDisplay.headlineLabel) &&
        Objects.equals(this.initialCost, itvVoucherDisplay.initialCost) &&
        Objects.equals(this.longDescription, itvVoucherDisplay.longDescription) &&
        Objects.equals(this.percentOff, itvVoucherDisplay.percentOff) &&
        Objects.equals(this.savingLabel, itvVoucherDisplay.savingLabel) &&
        Objects.equals(this.shortDescription, itvVoucherDisplay.shortDescription)&&
        Objects.equals(this.additionalProperties, itvVoucherDisplay.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currency, discountPrice, duration, durationInMonths, headlineLabel, initialCost, longDescription, percentOff, savingLabel, shortDescription, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItvVoucherDisplay {\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    discountPrice: ").append(toIndentedString(discountPrice)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    durationInMonths: ").append(toIndentedString(durationInMonths)).append("\n");
    sb.append("    headlineLabel: ").append(toIndentedString(headlineLabel)).append("\n");
    sb.append("    initialCost: ").append(toIndentedString(initialCost)).append("\n");
    sb.append("    longDescription: ").append(toIndentedString(longDescription)).append("\n");
    sb.append("    percentOff: ").append(toIndentedString(percentOff)).append("\n");
    sb.append("    savingLabel: ").append(toIndentedString(savingLabel)).append("\n");
    sb.append("    shortDescription: ").append(toIndentedString(shortDescription)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currency");
    openapiFields.add("discountPrice");
    openapiFields.add("duration");
    openapiFields.add("durationInMonths");
    openapiFields.add("headlineLabel");
    openapiFields.add("initialCost");
    openapiFields.add("longDescription");
    openapiFields.add("percentOff");
    openapiFields.add("savingLabel");
    openapiFields.add("shortDescription");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ItvVoucherDisplay
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ItvVoucherDisplay.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItvVoucherDisplay is not found in the empty JSON string", ItvVoucherDisplay.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("discountPrice") != null && !jsonObj.get("discountPrice").isJsonNull()) && !jsonObj.get("discountPrice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discountPrice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discountPrice").toString()));
      }
      if ((jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) && !jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      if ((jsonObj.get("headlineLabel") != null && !jsonObj.get("headlineLabel").isJsonNull()) && !jsonObj.get("headlineLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `headlineLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("headlineLabel").toString()));
      }
      if ((jsonObj.get("longDescription") != null && !jsonObj.get("longDescription").isJsonNull()) && !jsonObj.get("longDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `longDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("longDescription").toString()));
      }
      if ((jsonObj.get("savingLabel") != null && !jsonObj.get("savingLabel").isJsonNull()) && !jsonObj.get("savingLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `savingLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("savingLabel").toString()));
      }
      if ((jsonObj.get("shortDescription") != null && !jsonObj.get("shortDescription").isJsonNull()) && !jsonObj.get("shortDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortDescription").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItvVoucherDisplay.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItvVoucherDisplay' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItvVoucherDisplay> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItvVoucherDisplay.class));

       return (TypeAdapter<T>) new TypeAdapter<ItvVoucherDisplay>() {
           @Override
           public void write(JsonWriter out, ItvVoucherDisplay value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ItvVoucherDisplay read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             ItvVoucherDisplay instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ItvVoucherDisplay given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ItvVoucherDisplay
   * @throws IOException if the JSON string is invalid with respect to ItvVoucherDisplay
   */
  public static ItvVoucherDisplay fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItvVoucherDisplay.class);
  }

  /**
   * Convert an instance of ItvVoucherDisplay to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

