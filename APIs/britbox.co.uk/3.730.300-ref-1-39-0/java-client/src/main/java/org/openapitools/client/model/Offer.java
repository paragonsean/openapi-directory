/*
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ExclusionRule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Offer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:39.003134-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Offer {
  /**
   * Gets or Sets deliveryType
   */
  @JsonAdapter(DeliveryTypeEnum.Adapter.class)
  public enum DeliveryTypeEnum {
    STREAM("Stream"),
    
    DOWNLOAD("Download"),
    
    STREAM_OR_DOWNLOAD("StreamOrDownload"),
    
    PROGRESSIVE_DOWNLOAD("ProgressiveDownload"),
    
    NONE("None");

    private String value;

    DeliveryTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeliveryTypeEnum fromValue(String value) {
      for (DeliveryTypeEnum b : DeliveryTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeliveryTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeliveryTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeliveryTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeliveryTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeliveryTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DELIVERY_TYPE = "deliveryType";
  @SerializedName(SERIALIZED_NAME_DELIVERY_TYPE)
  private DeliveryTypeEnum deliveryType;

  public static final String SERIALIZED_NAME_EXCLUSION_RULES = "exclusionRules";
  @SerializedName(SERIALIZED_NAME_EXCLUSION_RULES)
  private List<ExclusionRule> exclusionRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_DOWNLOADS = "maxDownloads";
  @SerializedName(SERIALIZED_NAME_MAX_DOWNLOADS)
  private Integer maxDownloads;

  public static final String SERIALIZED_NAME_MAX_PLAYS = "maxPlays";
  @SerializedName(SERIALIZED_NAME_MAX_PLAYS)
  private Integer maxPlays;

  /**
   * Gets or Sets ownership
   */
  @JsonAdapter(OwnershipEnum.Adapter.class)
  public enum OwnershipEnum {
    SUBSCRIPTION("Subscription"),
    
    FREE("Free"),
    
    RENT("Rent"),
    
    OWN("Own"),
    
    NONE("None");

    private String value;

    OwnershipEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OwnershipEnum fromValue(String value) {
      for (OwnershipEnum b : OwnershipEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OwnershipEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OwnershipEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OwnershipEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OwnershipEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OwnershipEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OWNERSHIP = "ownership";
  @SerializedName(SERIALIZED_NAME_OWNERSHIP)
  private OwnershipEnum ownership;

  public static final String SERIALIZED_NAME_PLAY_PERIOD = "playPeriod";
  @SerializedName(SERIALIZED_NAME_PLAY_PERIOD)
  private Integer playPeriod;

  public static final String SERIALIZED_NAME_RENTAL_PERIOD = "rentalPeriod";
  @SerializedName(SERIALIZED_NAME_RENTAL_PERIOD)
  private Integer rentalPeriod;

  /**
   * Gets or Sets resolution
   */
  @JsonAdapter(ResolutionEnum.Adapter.class)
  public enum ResolutionEnum {
    SD("SD"),
    
    HD_720("HD-720"),
    
    HD_1080("HD-1080"),
    
    HD_4_K("HD-4K"),
    
    EXTERNAL("External"),
    
    UNKNOWN("Unknown");

    private String value;

    ResolutionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResolutionEnum fromValue(String value) {
      for (ResolutionEnum b : ResolutionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResolutionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResolutionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResolutionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResolutionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResolutionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESOLUTION = "resolution";
  @SerializedName(SERIALIZED_NAME_RESOLUTION)
  private ResolutionEnum resolution;

  public static final String SERIALIZED_NAME_SCOPES = "scopes";
  @SerializedName(SERIALIZED_NAME_SCOPES)
  private List<String> scopes = new ArrayList<>();

  /**
   * Gets or Sets availability
   */
  @JsonAdapter(AvailabilityEnum.Adapter.class)
  public enum AvailabilityEnum {
    AVAILABLE("Available"),
    
    COMING_SOON("ComingSoon");

    private String value;

    AvailabilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AvailabilityEnum fromValue(String value) {
      for (AvailabilityEnum b : AvailabilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AvailabilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AvailabilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AvailabilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AvailabilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AvailabilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AVAILABILITY = "availability";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY)
  private AvailabilityEnum availability;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "customFields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Map<String, Object> customFields = new HashMap<>();

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Float price;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_CODE = "subscriptionCode";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_CODE)
  private String subscriptionCode;

  public Offer() {
  }

  public Offer deliveryType(DeliveryTypeEnum deliveryType) {
    this.deliveryType = deliveryType;
    return this;
  }

  /**
   * Get deliveryType
   * @return deliveryType
   */
  @javax.annotation.Nonnull
  public DeliveryTypeEnum getDeliveryType() {
    return deliveryType;
  }

  public void setDeliveryType(DeliveryTypeEnum deliveryType) {
    this.deliveryType = deliveryType;
  }


  public Offer exclusionRules(List<ExclusionRule> exclusionRules) {
    this.exclusionRules = exclusionRules;
    return this;
  }

  public Offer addExclusionRulesItem(ExclusionRule exclusionRulesItem) {
    if (this.exclusionRules == null) {
      this.exclusionRules = new ArrayList<>();
    }
    this.exclusionRules.add(exclusionRulesItem);
    return this;
  }

  /**
   * Any specific playback exclusion rules.
   * @return exclusionRules
   */
  @javax.annotation.Nullable
  public List<ExclusionRule> getExclusionRules() {
    return exclusionRules;
  }

  public void setExclusionRules(List<ExclusionRule> exclusionRules) {
    this.exclusionRules = exclusionRules;
  }


  public Offer maxDownloads(Integer maxDownloads) {
    this.maxDownloads = maxDownloads;
    return this;
  }

  /**
   * The maximum number of allowed downloads.
   * @return maxDownloads
   */
  @javax.annotation.Nullable
  public Integer getMaxDownloads() {
    return maxDownloads;
  }

  public void setMaxDownloads(Integer maxDownloads) {
    this.maxDownloads = maxDownloads;
  }


  public Offer maxPlays(Integer maxPlays) {
    this.maxPlays = maxPlays;
    return this;
  }

  /**
   * The maximum number of allowed plays.
   * @return maxPlays
   */
  @javax.annotation.Nullable
  public Integer getMaxPlays() {
    return maxPlays;
  }

  public void setMaxPlays(Integer maxPlays) {
    this.maxPlays = maxPlays;
  }


  public Offer ownership(OwnershipEnum ownership) {
    this.ownership = ownership;
    return this;
  }

  /**
   * Get ownership
   * @return ownership
   */
  @javax.annotation.Nonnull
  public OwnershipEnum getOwnership() {
    return ownership;
  }

  public void setOwnership(OwnershipEnum ownership) {
    this.ownership = ownership;
  }


  public Offer playPeriod(Integer playPeriod) {
    this.playPeriod = playPeriod;
    return this;
  }

  /**
   * The length of time in minutes which the rental will last once played for the first time.
   * @return playPeriod
   */
  @javax.annotation.Nullable
  public Integer getPlayPeriod() {
    return playPeriod;
  }

  public void setPlayPeriod(Integer playPeriod) {
    this.playPeriod = playPeriod;
  }


  public Offer rentalPeriod(Integer rentalPeriod) {
    this.rentalPeriod = rentalPeriod;
    return this;
  }

  /**
   * The length of time in minutes which the rental will last once purchased.
   * @return rentalPeriod
   */
  @javax.annotation.Nullable
  public Integer getRentalPeriod() {
    return rentalPeriod;
  }

  public void setRentalPeriod(Integer rentalPeriod) {
    this.rentalPeriod = rentalPeriod;
  }


  public Offer resolution(ResolutionEnum resolution) {
    this.resolution = resolution;
    return this;
  }

  /**
   * Get resolution
   * @return resolution
   */
  @javax.annotation.Nonnull
  public ResolutionEnum getResolution() {
    return resolution;
  }

  public void setResolution(ResolutionEnum resolution) {
    this.resolution = resolution;
  }


  public Offer scopes(List<String> scopes) {
    this.scopes = scopes;
    return this;
  }

  public Offer addScopesItem(String scopesItem) {
    if (this.scopes == null) {
      this.scopes = new ArrayList<>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

  /**
   * Get scopes
   * @return scopes
   */
  @javax.annotation.Nonnull
  public List<String> getScopes() {
    return scopes;
  }

  public void setScopes(List<String> scopes) {
    this.scopes = scopes;
  }


  public Offer availability(AvailabilityEnum availability) {
    this.availability = availability;
    return this;
  }

  /**
   * Get availability
   * @return availability
   */
  @javax.annotation.Nonnull
  public AvailabilityEnum getAvailability() {
    return availability;
  }

  public void setAvailability(AvailabilityEnum availability) {
    this.availability = availability;
  }


  public Offer customFields(Map<String, Object> customFields) {
    this.customFields = customFields;
    return this;
  }

  public Offer putCustomFieldsItem(String key, Object customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new HashMap<>();
    }
    this.customFields.put(key, customFieldsItem);
    return this;
  }

  /**
   * A map of custom fields defined by a curator for an offer.
   * @return customFields
   */
  @javax.annotation.Nullable
  public Map<String, Object> getCustomFields() {
    return customFields;
  }

  public void setCustomFields(Map<String, Object> customFields) {
    this.customFields = customFields;
  }


  public Offer endDate(OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Get endDate
   * @return endDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public Offer id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Offer name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Offer price(Float price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nonnull
  public Float getPrice() {
    return price;
  }

  public void setPrice(Float price) {
    this.price = price;
  }


  public Offer startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public Offer subscriptionCode(String subscriptionCode) {
    this.subscriptionCode = subscriptionCode;
    return this;
  }

  /**
   * The code of the subscription this offer is offered under, if any.
   * @return subscriptionCode
   */
  @javax.annotation.Nullable
  public String getSubscriptionCode() {
    return subscriptionCode;
  }

  public void setSubscriptionCode(String subscriptionCode) {
    this.subscriptionCode = subscriptionCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Offer offer = (Offer) o;
    return Objects.equals(this.deliveryType, offer.deliveryType) &&
        Objects.equals(this.exclusionRules, offer.exclusionRules) &&
        Objects.equals(this.maxDownloads, offer.maxDownloads) &&
        Objects.equals(this.maxPlays, offer.maxPlays) &&
        Objects.equals(this.ownership, offer.ownership) &&
        Objects.equals(this.playPeriod, offer.playPeriod) &&
        Objects.equals(this.rentalPeriod, offer.rentalPeriod) &&
        Objects.equals(this.resolution, offer.resolution) &&
        Objects.equals(this.scopes, offer.scopes) &&
        Objects.equals(this.availability, offer.availability) &&
        Objects.equals(this.customFields, offer.customFields) &&
        Objects.equals(this.endDate, offer.endDate) &&
        Objects.equals(this.id, offer.id) &&
        Objects.equals(this.name, offer.name) &&
        Objects.equals(this.price, offer.price) &&
        Objects.equals(this.startDate, offer.startDate) &&
        Objects.equals(this.subscriptionCode, offer.subscriptionCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deliveryType, exclusionRules, maxDownloads, maxPlays, ownership, playPeriod, rentalPeriod, resolution, scopes, availability, customFields, endDate, id, name, price, startDate, subscriptionCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Offer {\n");
    sb.append("    deliveryType: ").append(toIndentedString(deliveryType)).append("\n");
    sb.append("    exclusionRules: ").append(toIndentedString(exclusionRules)).append("\n");
    sb.append("    maxDownloads: ").append(toIndentedString(maxDownloads)).append("\n");
    sb.append("    maxPlays: ").append(toIndentedString(maxPlays)).append("\n");
    sb.append("    ownership: ").append(toIndentedString(ownership)).append("\n");
    sb.append("    playPeriod: ").append(toIndentedString(playPeriod)).append("\n");
    sb.append("    rentalPeriod: ").append(toIndentedString(rentalPeriod)).append("\n");
    sb.append("    resolution: ").append(toIndentedString(resolution)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("    availability: ").append(toIndentedString(availability)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    subscriptionCode: ").append(toIndentedString(subscriptionCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deliveryType");
    openapiFields.add("exclusionRules");
    openapiFields.add("maxDownloads");
    openapiFields.add("maxPlays");
    openapiFields.add("ownership");
    openapiFields.add("playPeriod");
    openapiFields.add("rentalPeriod");
    openapiFields.add("resolution");
    openapiFields.add("scopes");
    openapiFields.add("availability");
    openapiFields.add("customFields");
    openapiFields.add("endDate");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("price");
    openapiFields.add("startDate");
    openapiFields.add("subscriptionCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("deliveryType");
    openapiRequiredFields.add("ownership");
    openapiRequiredFields.add("resolution");
    openapiRequiredFields.add("scopes");
    openapiRequiredFields.add("availability");
    openapiRequiredFields.add("price");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Offer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Offer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Offer is not found in the empty JSON string", Offer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Offer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Offer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Offer.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("deliveryType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliveryType").toString()));
      }
      // validate the required field `deliveryType`
      DeliveryTypeEnum.validateJsonElement(jsonObj.get("deliveryType"));
      if (jsonObj.get("exclusionRules") != null && !jsonObj.get("exclusionRules").isJsonNull()) {
        JsonArray jsonArrayexclusionRules = jsonObj.getAsJsonArray("exclusionRules");
        if (jsonArrayexclusionRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("exclusionRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `exclusionRules` to be an array in the JSON string but got `%s`", jsonObj.get("exclusionRules").toString()));
          }

          // validate the optional field `exclusionRules` (array)
          for (int i = 0; i < jsonArrayexclusionRules.size(); i++) {
            ExclusionRule.validateJsonElement(jsonArrayexclusionRules.get(i));
          };
        }
      }
      if (!jsonObj.get("ownership").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownership` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownership").toString()));
      }
      // validate the required field `ownership`
      OwnershipEnum.validateJsonElement(jsonObj.get("ownership"));
      if (!jsonObj.get("resolution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resolution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resolution").toString()));
      }
      // validate the required field `resolution`
      ResolutionEnum.validateJsonElement(jsonObj.get("resolution"));
      // ensure the required json array is present
      if (jsonObj.get("scopes") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("scopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scopes` to be an array in the JSON string but got `%s`", jsonObj.get("scopes").toString()));
      }
      if (!jsonObj.get("availability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `availability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("availability").toString()));
      }
      // validate the required field `availability`
      AvailabilityEnum.validateJsonElement(jsonObj.get("availability"));
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("subscriptionCode") != null && !jsonObj.get("subscriptionCode").isJsonNull()) && !jsonObj.get("subscriptionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Offer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Offer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Offer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Offer.class));

       return (TypeAdapter<T>) new TypeAdapter<Offer>() {
           @Override
           public void write(JsonWriter out, Offer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Offer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Offer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Offer
   * @throws IOException if the JSON string is invalid with respect to Offer
   */
  public static Offer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Offer.class);
  }

  /**
   * Convert an instance of Offer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

