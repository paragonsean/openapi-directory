/*
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ItvCurrentSubscription
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:39.003134-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ItvCurrentSubscription {
  public static final String SERIALIZED_NAME_CANCEL_AT_PERIOD_END = "cancelAtPeriodEnd";
  @SerializedName(SERIALIZED_NAME_CANCEL_AT_PERIOD_END)
  private Boolean cancelAtPeriodEnd;

  public static final String SERIALIZED_NAME_COLLECTION_METHOD = "collectionMethod";
  @SerializedName(SERIALIZED_NAME_COLLECTION_METHOD)
  private String collectionMethod;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private Integer created;

  public static final String SERIALIZED_NAME_CURRENT_PERIOD_END = "currentPeriodEnd";
  @SerializedName(SERIALIZED_NAME_CURRENT_PERIOD_END)
  private Integer currentPeriodEnd;

  public static final String SERIALIZED_NAME_CURRENT_PERIOD_START = "currentPeriodStart";
  @SerializedName(SERIALIZED_NAME_CURRENT_PERIOD_START)
  private Integer currentPeriodStart;

  public static final String SERIALIZED_NAME_PLAN = "plan";
  @SerializedName(SERIALIZED_NAME_PLAN)
  private Object plan;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public ItvCurrentSubscription() {
  }

  public ItvCurrentSubscription cancelAtPeriodEnd(Boolean cancelAtPeriodEnd) {
    this.cancelAtPeriodEnd = cancelAtPeriodEnd;
    return this;
  }

  /**
   * The cancellation period end flag.
   * @return cancelAtPeriodEnd
   */
  @javax.annotation.Nonnull
  public Boolean getCancelAtPeriodEnd() {
    return cancelAtPeriodEnd;
  }

  public void setCancelAtPeriodEnd(Boolean cancelAtPeriodEnd) {
    this.cancelAtPeriodEnd = cancelAtPeriodEnd;
  }


  public ItvCurrentSubscription collectionMethod(String collectionMethod) {
    this.collectionMethod = collectionMethod;
    return this;
  }

  /**
   * The description of payment collection method.
   * @return collectionMethod
   */
  @javax.annotation.Nonnull
  public String getCollectionMethod() {
    return collectionMethod;
  }

  public void setCollectionMethod(String collectionMethod) {
    this.collectionMethod = collectionMethod;
  }


  public ItvCurrentSubscription created(Integer created) {
    this.created = created;
    return this;
  }

  /**
   * The creation timestamp.
   * @return created
   */
  @javax.annotation.Nonnull
  public Integer getCreated() {
    return created;
  }

  public void setCreated(Integer created) {
    this.created = created;
  }


  public ItvCurrentSubscription currentPeriodEnd(Integer currentPeriodEnd) {
    this.currentPeriodEnd = currentPeriodEnd;
    return this;
  }

  /**
   * The end of period timestamp.
   * @return currentPeriodEnd
   */
  @javax.annotation.Nonnull
  public Integer getCurrentPeriodEnd() {
    return currentPeriodEnd;
  }

  public void setCurrentPeriodEnd(Integer currentPeriodEnd) {
    this.currentPeriodEnd = currentPeriodEnd;
  }


  public ItvCurrentSubscription currentPeriodStart(Integer currentPeriodStart) {
    this.currentPeriodStart = currentPeriodStart;
    return this;
  }

  /**
   * The start of period timestamp.
   * @return currentPeriodStart
   */
  @javax.annotation.Nonnull
  public Integer getCurrentPeriodStart() {
    return currentPeriodStart;
  }

  public void setCurrentPeriodStart(Integer currentPeriodStart) {
    this.currentPeriodStart = currentPeriodStart;
  }


  public ItvCurrentSubscription plan(Object plan) {
    this.plan = plan;
    return this;
  }

  /**
   * The plan used during subsribing.
   * @return plan
   */
  @javax.annotation.Nonnull
  public Object getPlan() {
    return plan;
  }

  public void setPlan(Object plan) {
    this.plan = plan;
  }


  public ItvCurrentSubscription status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The status of subscription.
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItvCurrentSubscription itvCurrentSubscription = (ItvCurrentSubscription) o;
    return Objects.equals(this.cancelAtPeriodEnd, itvCurrentSubscription.cancelAtPeriodEnd) &&
        Objects.equals(this.collectionMethod, itvCurrentSubscription.collectionMethod) &&
        Objects.equals(this.created, itvCurrentSubscription.created) &&
        Objects.equals(this.currentPeriodEnd, itvCurrentSubscription.currentPeriodEnd) &&
        Objects.equals(this.currentPeriodStart, itvCurrentSubscription.currentPeriodStart) &&
        Objects.equals(this.plan, itvCurrentSubscription.plan) &&
        Objects.equals(this.status, itvCurrentSubscription.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cancelAtPeriodEnd, collectionMethod, created, currentPeriodEnd, currentPeriodStart, plan, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItvCurrentSubscription {\n");
    sb.append("    cancelAtPeriodEnd: ").append(toIndentedString(cancelAtPeriodEnd)).append("\n");
    sb.append("    collectionMethod: ").append(toIndentedString(collectionMethod)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    currentPeriodEnd: ").append(toIndentedString(currentPeriodEnd)).append("\n");
    sb.append("    currentPeriodStart: ").append(toIndentedString(currentPeriodStart)).append("\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cancelAtPeriodEnd");
    openapiFields.add("collectionMethod");
    openapiFields.add("created");
    openapiFields.add("currentPeriodEnd");
    openapiFields.add("currentPeriodStart");
    openapiFields.add("plan");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cancelAtPeriodEnd");
    openapiRequiredFields.add("collectionMethod");
    openapiRequiredFields.add("created");
    openapiRequiredFields.add("currentPeriodEnd");
    openapiRequiredFields.add("currentPeriodStart");
    openapiRequiredFields.add("plan");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ItvCurrentSubscription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ItvCurrentSubscription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItvCurrentSubscription is not found in the empty JSON string", ItvCurrentSubscription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ItvCurrentSubscription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItvCurrentSubscription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ItvCurrentSubscription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("collectionMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collectionMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collectionMethod").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItvCurrentSubscription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItvCurrentSubscription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItvCurrentSubscription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItvCurrentSubscription.class));

       return (TypeAdapter<T>) new TypeAdapter<ItvCurrentSubscription>() {
           @Override
           public void write(JsonWriter out, ItvCurrentSubscription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItvCurrentSubscription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ItvCurrentSubscription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ItvCurrentSubscription
   * @throws IOException if the JSON string is invalid with respect to ItvCurrentSubscription
   */
  public static ItvCurrentSubscription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItvCurrentSubscription.class);
  }

  /**
   * Convert an instance of ItvCurrentSubscription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

