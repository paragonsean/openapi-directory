/*
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ItvEntitlement;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ItvSubscriptionState
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:39.003134-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ItvSubscriptionState {
  public static final String SERIALIZED_NAME_EFFECTIVE_ENTITLEMENTS = "effective_entitlements";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_ENTITLEMENTS)
  private List<ItvEntitlement> effectiveEntitlements = new ArrayList<>();

  public static final String SERIALIZED_NAME_FAILED_AVAILABILITY_CHECKS = "failed_availability_checks";
  @SerializedName(SERIALIZED_NAME_FAILED_AVAILABILITY_CHECKS)
  private List<String> failedAvailabilityChecks = new ArrayList<>();

  public static final String SERIALIZED_NAME_PURCHASED = "purchased";
  @SerializedName(SERIALIZED_NAME_PURCHASED)
  private List<String> purchased = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public ItvSubscriptionState() {
  }

  public ItvSubscriptionState effectiveEntitlements(List<ItvEntitlement> effectiveEntitlements) {
    this.effectiveEntitlements = effectiveEntitlements;
    return this;
  }

  public ItvSubscriptionState addEffectiveEntitlementsItem(ItvEntitlement effectiveEntitlementsItem) {
    if (this.effectiveEntitlements == null) {
      this.effectiveEntitlements = new ArrayList<>();
    }
    this.effectiveEntitlements.add(effectiveEntitlementsItem);
    return this;
  }

  /**
   * The array of entitlement objects.
   * @return effectiveEntitlements
   */
  @javax.annotation.Nonnull
  public List<ItvEntitlement> getEffectiveEntitlements() {
    return effectiveEntitlements;
  }

  public void setEffectiveEntitlements(List<ItvEntitlement> effectiveEntitlements) {
    this.effectiveEntitlements = effectiveEntitlements;
  }


  public ItvSubscriptionState failedAvailabilityChecks(List<String> failedAvailabilityChecks) {
    this.failedAvailabilityChecks = failedAvailabilityChecks;
    return this;
  }

  public ItvSubscriptionState addFailedAvailabilityChecksItem(String failedAvailabilityChecksItem) {
    if (this.failedAvailabilityChecks == null) {
      this.failedAvailabilityChecks = new ArrayList<>();
    }
    this.failedAvailabilityChecks.add(failedAvailabilityChecksItem);
    return this;
  }

  /**
   * The results of availability checks.
   * @return failedAvailabilityChecks
   */
  @javax.annotation.Nonnull
  public List<String> getFailedAvailabilityChecks() {
    return failedAvailabilityChecks;
  }

  public void setFailedAvailabilityChecks(List<String> failedAvailabilityChecks) {
    this.failedAvailabilityChecks = failedAvailabilityChecks;
  }


  public ItvSubscriptionState purchased(List<String> purchased) {
    this.purchased = purchased;
    return this;
  }

  public ItvSubscriptionState addPurchasedItem(String purchasedItem) {
    if (this.purchased == null) {
      this.purchased = new ArrayList<>();
    }
    this.purchased.add(purchasedItem);
    return this;
  }

  /**
   * The array of entitlement names.
   * @return purchased
   */
  @javax.annotation.Nonnull
  public List<String> getPurchased() {
    return purchased;
  }

  public void setPurchased(List<String> purchased) {
    this.purchased = purchased;
  }


  public ItvSubscriptionState source(String source) {
    this.source = source;
    return this;
  }

  /**
   * The payment provider (stripe/itunes)
   * @return source
   */
  @javax.annotation.Nonnull
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItvSubscriptionState itvSubscriptionState = (ItvSubscriptionState) o;
    return Objects.equals(this.effectiveEntitlements, itvSubscriptionState.effectiveEntitlements) &&
        Objects.equals(this.failedAvailabilityChecks, itvSubscriptionState.failedAvailabilityChecks) &&
        Objects.equals(this.purchased, itvSubscriptionState.purchased) &&
        Objects.equals(this.source, itvSubscriptionState.source);
  }

  @Override
  public int hashCode() {
    return Objects.hash(effectiveEntitlements, failedAvailabilityChecks, purchased, source);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItvSubscriptionState {\n");
    sb.append("    effectiveEntitlements: ").append(toIndentedString(effectiveEntitlements)).append("\n");
    sb.append("    failedAvailabilityChecks: ").append(toIndentedString(failedAvailabilityChecks)).append("\n");
    sb.append("    purchased: ").append(toIndentedString(purchased)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("effective_entitlements");
    openapiFields.add("failed_availability_checks");
    openapiFields.add("purchased");
    openapiFields.add("source");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("effective_entitlements");
    openapiRequiredFields.add("failed_availability_checks");
    openapiRequiredFields.add("purchased");
    openapiRequiredFields.add("source");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ItvSubscriptionState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ItvSubscriptionState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItvSubscriptionState is not found in the empty JSON string", ItvSubscriptionState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ItvSubscriptionState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItvSubscriptionState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ItvSubscriptionState.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("effective_entitlements").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `effective_entitlements` to be an array in the JSON string but got `%s`", jsonObj.get("effective_entitlements").toString()));
      }

      JsonArray jsonArrayeffectiveEntitlements = jsonObj.getAsJsonArray("effective_entitlements");
      // validate the required field `effective_entitlements` (array)
      for (int i = 0; i < jsonArrayeffectiveEntitlements.size(); i++) {
        ItvEntitlement.validateJsonElement(jsonArrayeffectiveEntitlements.get(i));
      };
      // ensure the required json array is present
      if (jsonObj.get("failed_availability_checks") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("failed_availability_checks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `failed_availability_checks` to be an array in the JSON string but got `%s`", jsonObj.get("failed_availability_checks").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("purchased") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("purchased").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchased` to be an array in the JSON string but got `%s`", jsonObj.get("purchased").toString()));
      }
      if (!jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItvSubscriptionState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItvSubscriptionState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItvSubscriptionState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItvSubscriptionState.class));

       return (TypeAdapter<T>) new TypeAdapter<ItvSubscriptionState>() {
           @Override
           public void write(JsonWriter out, ItvSubscriptionState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItvSubscriptionState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ItvSubscriptionState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ItvSubscriptionState
   * @throws IOException if the JSON string is invalid with respect to ItvSubscriptionState
   */
  public static ItvSubscriptionState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItvSubscriptionState.class);
  }

  /**
   * Convert an instance of ItvSubscriptionState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

