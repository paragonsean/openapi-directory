/*
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.Entitlement;
import org.openapitools.client.model.ProfileSummary;
import org.openapitools.client.model.Subscription;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Account
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:39.003134-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Account {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address address;

  public static final String SERIALIZED_NAME_DEFAULT_PAYMENT_INSTRUMENT_ID = "defaultPaymentInstrumentId";
  @SerializedName(SERIALIZED_NAME_DEFAULT_PAYMENT_INSTRUMENT_ID)
  private String defaultPaymentInstrumentId;

  public static final String SERIALIZED_NAME_DEFAULT_PAYMENT_METHOD_ID = "defaultPaymentMethodId";
  @SerializedName(SERIALIZED_NAME_DEFAULT_PAYMENT_METHOD_ID)
  private String defaultPaymentMethodId;

  public static final String SERIALIZED_NAME_EMAIL_VERIFIED = "emailVerified";
  @SerializedName(SERIALIZED_NAME_EMAIL_VERIFIED)
  private Boolean emailVerified;

  public static final String SERIALIZED_NAME_ENTITLEMENTS = "entitlements";
  @SerializedName(SERIALIZED_NAME_ENTITLEMENTS)
  private List<Entitlement> entitlements = new ArrayList<>();

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_FIRST_TIME_SUBSCRIBER = "isFirstTimeSubscriber";
  @SerializedName(SERIALIZED_NAME_IS_FIRST_TIME_SUBSCRIBER)
  private Boolean isFirstTimeSubscriber;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_MARKETING_ENABLED = "marketingEnabled";
  @SerializedName(SERIALIZED_NAME_MARKETING_ENABLED)
  private Boolean marketingEnabled;

  public static final String SERIALIZED_NAME_MIN_RATING_PLAYBACK_GUARD = "minRatingPlaybackGuard";
  @SerializedName(SERIALIZED_NAME_MIN_RATING_PLAYBACK_GUARD)
  private String minRatingPlaybackGuard;

  public static final String SERIALIZED_NAME_PIN_ENABLED = "pinEnabled";
  @SerializedName(SERIALIZED_NAME_PIN_ENABLED)
  private Boolean pinEnabled;

  public static final String SERIALIZED_NAME_PRIMARY_PROFILE_ID = "primaryProfileId";
  @SerializedName(SERIALIZED_NAME_PRIMARY_PROFILE_ID)
  private String primaryProfileId;

  public static final String SERIALIZED_NAME_PROFILES = "profiles";
  @SerializedName(SERIALIZED_NAME_PROFILES)
  private List<ProfileSummary> profiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEGMENTS = "segments";
  @SerializedName(SERIALIZED_NAME_SEGMENTS)
  private List<String> segments = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBSCRIPTION_CODE = "subscriptionCode";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_CODE)
  private String subscriptionCode;

  public static final String SERIALIZED_NAME_SUBSCRIPTIONS = "subscriptions";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTIONS)
  private List<Subscription> subscriptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRACKING_ENABLED = "trackingEnabled";
  @SerializedName(SERIALIZED_NAME_TRACKING_ENABLED)
  private Boolean trackingEnabled;

  public static final String SERIALIZED_NAME_USED_FREE_TRIAL = "usedFreeTrial";
  @SerializedName(SERIALIZED_NAME_USED_FREE_TRIAL)
  private Boolean usedFreeTrial;

  public Account() {
  }

  public Account address(Address address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public Address getAddress() {
    return address;
  }

  public void setAddress(Address address) {
    this.address = address;
  }


  public Account defaultPaymentInstrumentId(String defaultPaymentInstrumentId) {
    this.defaultPaymentInstrumentId = defaultPaymentInstrumentId;
    return this;
  }

  /**
   * The id of the payment instrument to use by default for account transactions.   **DEPRECATED** The property &#x60;defaultPaymentMethodId&#x60; is now preferred. 
   * @return defaultPaymentInstrumentId
   */
  @javax.annotation.Nullable
  public String getDefaultPaymentInstrumentId() {
    return defaultPaymentInstrumentId;
  }

  public void setDefaultPaymentInstrumentId(String defaultPaymentInstrumentId) {
    this.defaultPaymentInstrumentId = defaultPaymentInstrumentId;
  }


  public Account defaultPaymentMethodId(String defaultPaymentMethodId) {
    this.defaultPaymentMethodId = defaultPaymentMethodId;
    return this;
  }

  /**
   * The id of the payment method to use by default for account transactions.
   * @return defaultPaymentMethodId
   */
  @javax.annotation.Nullable
  public String getDefaultPaymentMethodId() {
    return defaultPaymentMethodId;
  }

  public void setDefaultPaymentMethodId(String defaultPaymentMethodId) {
    this.defaultPaymentMethodId = defaultPaymentMethodId;
  }


  public Account emailVerified(Boolean emailVerified) {
    this.emailVerified = emailVerified;
    return this;
  }

  /**
   * Whether the email address has been verified.  Users who receive an emailed verification url click the link to verify their email address. 
   * @return emailVerified
   */
  @javax.annotation.Nullable
  public Boolean getEmailVerified() {
    return emailVerified;
  }

  public void setEmailVerified(Boolean emailVerified) {
    this.emailVerified = emailVerified;
  }


  public Account entitlements(List<Entitlement> entitlements) {
    this.entitlements = entitlements;
    return this;
  }

  public Account addEntitlementsItem(Entitlement entitlementsItem) {
    if (this.entitlements == null) {
      this.entitlements = new ArrayList<>();
    }
    this.entitlements.add(entitlementsItem);
    return this;
  }

  /**
   * The list of entitlements to playback specific items.
   * @return entitlements
   */
  @javax.annotation.Nullable
  public List<Entitlement> getEntitlements() {
    return entitlements;
  }

  public void setEntitlements(List<Entitlement> entitlements) {
    this.entitlements = entitlements;
  }


  public Account firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * The first name of the account holder.
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public Account id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The id of the account.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Account isFirstTimeSubscriber(Boolean isFirstTimeSubscriber) {
    this.isFirstTimeSubscriber = isFirstTimeSubscriber;
    return this;
  }

  /**
   * Whether the account has the very first subscription.
   * @return isFirstTimeSubscriber
   */
  @javax.annotation.Nullable
  public Boolean getIsFirstTimeSubscriber() {
    return isFirstTimeSubscriber;
  }

  public void setIsFirstTimeSubscriber(Boolean isFirstTimeSubscriber) {
    this.isFirstTimeSubscriber = isFirstTimeSubscriber;
  }


  public Account lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * The last name of the account holder.
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public Account marketingEnabled(Boolean marketingEnabled) {
    this.marketingEnabled = marketingEnabled;
    return this;
  }

  /**
   * Whether the account has opted in or out of marketing material.
   * @return marketingEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getMarketingEnabled() {
    return marketingEnabled;
  }

  public void setMarketingEnabled(Boolean marketingEnabled) {
    this.marketingEnabled = marketingEnabled;
  }


  public Account minRatingPlaybackGuard(String minRatingPlaybackGuard) {
    this.minRatingPlaybackGuard = minRatingPlaybackGuard;
    return this;
  }

  /**
   * The classification rating defining the minimum rating level a user should be forced to enter the account pin code for playback. Anything at this rating level or above will require the pin for playback.  e.g. AUOFLC-MA15+  If you want to disable this guard pass an empty string or &#x60;null&#x60;. 
   * @return minRatingPlaybackGuard
   */
  @javax.annotation.Nullable
  public String getMinRatingPlaybackGuard() {
    return minRatingPlaybackGuard;
  }

  public void setMinRatingPlaybackGuard(String minRatingPlaybackGuard) {
    this.minRatingPlaybackGuard = minRatingPlaybackGuard;
  }


  public Account pinEnabled(Boolean pinEnabled) {
    this.pinEnabled = pinEnabled;
    return this;
  }

  /**
   * When an account level pin is defined this will be true.
   * @return pinEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getPinEnabled() {
    return pinEnabled;
  }

  public void setPinEnabled(Boolean pinEnabled) {
    this.pinEnabled = pinEnabled;
  }


  public Account primaryProfileId(String primaryProfileId) {
    this.primaryProfileId = primaryProfileId;
    return this;
  }

  /**
   * The id of the primary profile.
   * @return primaryProfileId
   */
  @javax.annotation.Nonnull
  public String getPrimaryProfileId() {
    return primaryProfileId;
  }

  public void setPrimaryProfileId(String primaryProfileId) {
    this.primaryProfileId = primaryProfileId;
  }


  public Account profiles(List<ProfileSummary> profiles) {
    this.profiles = profiles;
    return this;
  }

  public Account addProfilesItem(ProfileSummary profilesItem) {
    if (this.profiles == null) {
      this.profiles = new ArrayList<>();
    }
    this.profiles.add(profilesItem);
    return this;
  }

  /**
   * The list of profiles under this account.
   * @return profiles
   */
  @javax.annotation.Nonnull
  public List<ProfileSummary> getProfiles() {
    return profiles;
  }

  public void setProfiles(List<ProfileSummary> profiles) {
    this.profiles = profiles;
  }


  public Account segments(List<String> segments) {
    this.segments = segments;
    return this;
  }

  public Account addSegmentsItem(String segmentsItem) {
    if (this.segments == null) {
      this.segments = new ArrayList<>();
    }
    this.segments.add(segmentsItem);
    return this;
  }

  /**
   * The segments an account has been placed under
   * @return segments
   */
  @javax.annotation.Nullable
  public List<String> getSegments() {
    return segments;
  }

  public void setSegments(List<String> segments) {
    this.segments = segments;
  }


  public Account subscriptionCode(String subscriptionCode) {
    this.subscriptionCode = subscriptionCode;
    return this;
  }

  /**
   * The active subscription code for an account.  The value of this should be passed to any endpoints accepting a &#x60;sub&#x60; query parameter. 
   * @return subscriptionCode
   */
  @javax.annotation.Nonnull
  public String getSubscriptionCode() {
    return subscriptionCode;
  }

  public void setSubscriptionCode(String subscriptionCode) {
    this.subscriptionCode = subscriptionCode;
  }


  public Account subscriptions(List<Subscription> subscriptions) {
    this.subscriptions = subscriptions;
    return this;
  }

  public Account addSubscriptionsItem(Subscription subscriptionsItem) {
    if (this.subscriptions == null) {
      this.subscriptions = new ArrayList<>();
    }
    this.subscriptions.add(subscriptionsItem);
    return this;
  }

  /**
   * The list of subscriptions, if any, the account has signed up to.
   * @return subscriptions
   */
  @javax.annotation.Nullable
  public List<Subscription> getSubscriptions() {
    return subscriptions;
  }

  public void setSubscriptions(List<Subscription> subscriptions) {
    this.subscriptions = subscriptions;
  }


  public Account trackingEnabled(Boolean trackingEnabled) {
    this.trackingEnabled = trackingEnabled;
    return this;
  }

  /**
   * Whether usage tracking is associated with the account or anonymous.
   * @return trackingEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getTrackingEnabled() {
    return trackingEnabled;
  }

  public void setTrackingEnabled(Boolean trackingEnabled) {
    this.trackingEnabled = trackingEnabled;
  }


  public Account usedFreeTrial(Boolean usedFreeTrial) {
    this.usedFreeTrial = usedFreeTrial;
    return this;
  }

  /**
   * Whether the account has used up their free trial period of a plan.
   * @return usedFreeTrial
   */
  @javax.annotation.Nullable
  public Boolean getUsedFreeTrial() {
    return usedFreeTrial;
  }

  public void setUsedFreeTrial(Boolean usedFreeTrial) {
    this.usedFreeTrial = usedFreeTrial;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Account instance itself
   */
  public Account putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Account account = (Account) o;
    return Objects.equals(this.address, account.address) &&
        Objects.equals(this.defaultPaymentInstrumentId, account.defaultPaymentInstrumentId) &&
        Objects.equals(this.defaultPaymentMethodId, account.defaultPaymentMethodId) &&
        Objects.equals(this.emailVerified, account.emailVerified) &&
        Objects.equals(this.entitlements, account.entitlements) &&
        Objects.equals(this.firstName, account.firstName) &&
        Objects.equals(this.id, account.id) &&
        Objects.equals(this.isFirstTimeSubscriber, account.isFirstTimeSubscriber) &&
        Objects.equals(this.lastName, account.lastName) &&
        Objects.equals(this.marketingEnabled, account.marketingEnabled) &&
        Objects.equals(this.minRatingPlaybackGuard, account.minRatingPlaybackGuard) &&
        Objects.equals(this.pinEnabled, account.pinEnabled) &&
        Objects.equals(this.primaryProfileId, account.primaryProfileId) &&
        Objects.equals(this.profiles, account.profiles) &&
        Objects.equals(this.segments, account.segments) &&
        Objects.equals(this.subscriptionCode, account.subscriptionCode) &&
        Objects.equals(this.subscriptions, account.subscriptions) &&
        Objects.equals(this.trackingEnabled, account.trackingEnabled) &&
        Objects.equals(this.usedFreeTrial, account.usedFreeTrial)&&
        Objects.equals(this.additionalProperties, account.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, defaultPaymentInstrumentId, defaultPaymentMethodId, emailVerified, entitlements, firstName, id, isFirstTimeSubscriber, lastName, marketingEnabled, minRatingPlaybackGuard, pinEnabled, primaryProfileId, profiles, segments, subscriptionCode, subscriptions, trackingEnabled, usedFreeTrial, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Account {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    defaultPaymentInstrumentId: ").append(toIndentedString(defaultPaymentInstrumentId)).append("\n");
    sb.append("    defaultPaymentMethodId: ").append(toIndentedString(defaultPaymentMethodId)).append("\n");
    sb.append("    emailVerified: ").append(toIndentedString(emailVerified)).append("\n");
    sb.append("    entitlements: ").append(toIndentedString(entitlements)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isFirstTimeSubscriber: ").append(toIndentedString(isFirstTimeSubscriber)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    marketingEnabled: ").append(toIndentedString(marketingEnabled)).append("\n");
    sb.append("    minRatingPlaybackGuard: ").append(toIndentedString(minRatingPlaybackGuard)).append("\n");
    sb.append("    pinEnabled: ").append(toIndentedString(pinEnabled)).append("\n");
    sb.append("    primaryProfileId: ").append(toIndentedString(primaryProfileId)).append("\n");
    sb.append("    profiles: ").append(toIndentedString(profiles)).append("\n");
    sb.append("    segments: ").append(toIndentedString(segments)).append("\n");
    sb.append("    subscriptionCode: ").append(toIndentedString(subscriptionCode)).append("\n");
    sb.append("    subscriptions: ").append(toIndentedString(subscriptions)).append("\n");
    sb.append("    trackingEnabled: ").append(toIndentedString(trackingEnabled)).append("\n");
    sb.append("    usedFreeTrial: ").append(toIndentedString(usedFreeTrial)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("defaultPaymentInstrumentId");
    openapiFields.add("defaultPaymentMethodId");
    openapiFields.add("emailVerified");
    openapiFields.add("entitlements");
    openapiFields.add("firstName");
    openapiFields.add("id");
    openapiFields.add("isFirstTimeSubscriber");
    openapiFields.add("lastName");
    openapiFields.add("marketingEnabled");
    openapiFields.add("minRatingPlaybackGuard");
    openapiFields.add("pinEnabled");
    openapiFields.add("primaryProfileId");
    openapiFields.add("profiles");
    openapiFields.add("segments");
    openapiFields.add("subscriptionCode");
    openapiFields.add("subscriptions");
    openapiFields.add("trackingEnabled");
    openapiFields.add("usedFreeTrial");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("marketingEnabled");
    openapiRequiredFields.add("pinEnabled");
    openapiRequiredFields.add("primaryProfileId");
    openapiRequiredFields.add("profiles");
    openapiRequiredFields.add("subscriptionCode");
    openapiRequiredFields.add("trackingEnabled");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Account
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Account.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Account is not found in the empty JSON string", Account.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Account.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("address"));
      }
      if ((jsonObj.get("defaultPaymentInstrumentId") != null && !jsonObj.get("defaultPaymentInstrumentId").isJsonNull()) && !jsonObj.get("defaultPaymentInstrumentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultPaymentInstrumentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultPaymentInstrumentId").toString()));
      }
      if ((jsonObj.get("defaultPaymentMethodId") != null && !jsonObj.get("defaultPaymentMethodId").isJsonNull()) && !jsonObj.get("defaultPaymentMethodId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultPaymentMethodId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultPaymentMethodId").toString()));
      }
      if (jsonObj.get("entitlements") != null && !jsonObj.get("entitlements").isJsonNull()) {
        JsonArray jsonArrayentitlements = jsonObj.getAsJsonArray("entitlements");
        if (jsonArrayentitlements != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entitlements").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entitlements` to be an array in the JSON string but got `%s`", jsonObj.get("entitlements").toString()));
          }

          // validate the optional field `entitlements` (array)
          for (int i = 0; i < jsonArrayentitlements.size(); i++) {
            Entitlement.validateJsonElement(jsonArrayentitlements.get(i));
          };
        }
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("minRatingPlaybackGuard") != null && !jsonObj.get("minRatingPlaybackGuard").isJsonNull()) && !jsonObj.get("minRatingPlaybackGuard").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minRatingPlaybackGuard` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minRatingPlaybackGuard").toString()));
      }
      if (!jsonObj.get("primaryProfileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryProfileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryProfileId").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("profiles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `profiles` to be an array in the JSON string but got `%s`", jsonObj.get("profiles").toString()));
      }

      JsonArray jsonArrayprofiles = jsonObj.getAsJsonArray("profiles");
      // validate the required field `profiles` (array)
      for (int i = 0; i < jsonArrayprofiles.size(); i++) {
        ProfileSummary.validateJsonElement(jsonArrayprofiles.get(i));
      };
      // ensure the optional json data is an array if present
      if (jsonObj.get("segments") != null && !jsonObj.get("segments").isJsonNull() && !jsonObj.get("segments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `segments` to be an array in the JSON string but got `%s`", jsonObj.get("segments").toString()));
      }
      if (!jsonObj.get("subscriptionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionCode").toString()));
      }
      if (jsonObj.get("subscriptions") != null && !jsonObj.get("subscriptions").isJsonNull()) {
        JsonArray jsonArraysubscriptions = jsonObj.getAsJsonArray("subscriptions");
        if (jsonArraysubscriptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subscriptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subscriptions` to be an array in the JSON string but got `%s`", jsonObj.get("subscriptions").toString()));
          }

          // validate the optional field `subscriptions` (array)
          for (int i = 0; i < jsonArraysubscriptions.size(); i++) {
            Subscription.validateJsonElement(jsonArraysubscriptions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Account.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Account' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Account> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Account.class));

       return (TypeAdapter<T>) new TypeAdapter<Account>() {
           @Override
           public void write(JsonWriter out, Account value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Account read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             Account instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Account given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Account
   * @throws IOException if the JSON string is invalid with respect to Account
   */
  public static Account fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Account.class);
  }

  /**
   * Convert an instance of Account to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

