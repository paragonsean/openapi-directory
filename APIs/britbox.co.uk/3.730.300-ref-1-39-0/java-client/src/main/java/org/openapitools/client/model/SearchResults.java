/*
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ItemList;
import org.openapitools.client.model.Person;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SearchResults
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:39.003134-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchResults {
  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private ItemList items;

  public static final String SERIALIZED_NAME_MOVIES = "movies";
  @SerializedName(SERIALIZED_NAME_MOVIES)
  private ItemList movies;

  public static final String SERIALIZED_NAME_OTHER = "other";
  @SerializedName(SERIALIZED_NAME_OTHER)
  private ItemList other;

  public static final String SERIALIZED_NAME_PEOPLE = "people";
  @SerializedName(SERIALIZED_NAME_PEOPLE)
  private List<Person> people = new ArrayList<>();

  public static final String SERIALIZED_NAME_TERM = "term";
  @SerializedName(SERIALIZED_NAME_TERM)
  private String term;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public static final String SERIALIZED_NAME_TV = "tv";
  @SerializedName(SERIALIZED_NAME_TV)
  private ItemList tv;

  public SearchResults() {
  }

  public SearchResults items(ItemList items) {
    this.items = items;
    return this;
  }

  /**
   * Get items
   * @return items
   */
  @javax.annotation.Nullable
  public ItemList getItems() {
    return items;
  }

  public void setItems(ItemList items) {
    this.items = items;
  }


  public SearchResults movies(ItemList movies) {
    this.movies = movies;
    return this;
  }

  /**
   * Get movies
   * @return movies
   */
  @javax.annotation.Nullable
  public ItemList getMovies() {
    return movies;
  }

  public void setMovies(ItemList movies) {
    this.movies = movies;
  }


  public SearchResults other(ItemList other) {
    this.other = other;
    return this;
  }

  /**
   * Get other
   * @return other
   */
  @javax.annotation.Nullable
  public ItemList getOther() {
    return other;
  }

  public void setOther(ItemList other) {
    this.other = other;
  }


  public SearchResults people(List<Person> people) {
    this.people = people;
    return this;
  }

  public SearchResults addPeopleItem(Person peopleItem) {
    if (this.people == null) {
      this.people = new ArrayList<>();
    }
    this.people.add(peopleItem);
    return this;
  }

  /**
   * The list of people relevant to the search term.
   * @return people
   */
  @javax.annotation.Nullable
  public List<Person> getPeople() {
    return people;
  }

  public void setPeople(List<Person> people) {
    this.people = people;
  }


  public SearchResults term(String term) {
    this.term = term;
    return this;
  }

  /**
   * The search term.
   * @return term
   */
  @javax.annotation.Nonnull
  public String getTerm() {
    return term;
  }

  public void setTerm(String term) {
    this.term = term;
  }


  public SearchResults total(Integer total) {
    this.total = total;
    return this;
  }

  /**
   * The total number of results.
   * minimum: 0
   * @return total
   */
  @javax.annotation.Nonnull
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }


  public SearchResults tv(ItemList tv) {
    this.tv = tv;
    return this;
  }

  /**
   * Get tv
   * @return tv
   */
  @javax.annotation.Nullable
  public ItemList getTv() {
    return tv;
  }

  public void setTv(ItemList tv) {
    this.tv = tv;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchResults searchResults = (SearchResults) o;
    return Objects.equals(this.items, searchResults.items) &&
        Objects.equals(this.movies, searchResults.movies) &&
        Objects.equals(this.other, searchResults.other) &&
        Objects.equals(this.people, searchResults.people) &&
        Objects.equals(this.term, searchResults.term) &&
        Objects.equals(this.total, searchResults.total) &&
        Objects.equals(this.tv, searchResults.tv);
  }

  @Override
  public int hashCode() {
    return Objects.hash(items, movies, other, people, term, total, tv);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchResults {\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    movies: ").append(toIndentedString(movies)).append("\n");
    sb.append("    other: ").append(toIndentedString(other)).append("\n");
    sb.append("    people: ").append(toIndentedString(people)).append("\n");
    sb.append("    term: ").append(toIndentedString(term)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    tv: ").append(toIndentedString(tv)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("items");
    openapiFields.add("movies");
    openapiFields.add("other");
    openapiFields.add("people");
    openapiFields.add("term");
    openapiFields.add("total");
    openapiFields.add("tv");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("term");
    openapiRequiredFields.add("total");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchResults
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchResults.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchResults is not found in the empty JSON string", SearchResults.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchResults.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchResults` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SearchResults.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `items`
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        ItemList.validateJsonElement(jsonObj.get("items"));
      }
      // validate the optional field `movies`
      if (jsonObj.get("movies") != null && !jsonObj.get("movies").isJsonNull()) {
        ItemList.validateJsonElement(jsonObj.get("movies"));
      }
      // validate the optional field `other`
      if (jsonObj.get("other") != null && !jsonObj.get("other").isJsonNull()) {
        ItemList.validateJsonElement(jsonObj.get("other"));
      }
      if (jsonObj.get("people") != null && !jsonObj.get("people").isJsonNull()) {
        JsonArray jsonArraypeople = jsonObj.getAsJsonArray("people");
        if (jsonArraypeople != null) {
          // ensure the json data is an array
          if (!jsonObj.get("people").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `people` to be an array in the JSON string but got `%s`", jsonObj.get("people").toString()));
          }

          // validate the optional field `people` (array)
          for (int i = 0; i < jsonArraypeople.size(); i++) {
            Person.validateJsonElement(jsonArraypeople.get(i));
          };
        }
      }
      if (!jsonObj.get("term").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `term` to be a primitive type in the JSON string but got `%s`", jsonObj.get("term").toString()));
      }
      // validate the optional field `tv`
      if (jsonObj.get("tv") != null && !jsonObj.get("tv").isJsonNull()) {
        ItemList.validateJsonElement(jsonObj.get("tv"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchResults.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchResults' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchResults> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchResults.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchResults>() {
           @Override
           public void write(JsonWriter out, SearchResults value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchResults read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchResults given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchResults
   * @throws IOException if the JSON string is invalid with respect to SearchResults
   */
  public static SearchResults fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchResults.class);
  }

  /**
   * Convert an instance of SearchResults to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

