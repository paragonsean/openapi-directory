/*
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Plan
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:39.003134-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Plan {
  public static final String SERIALIZED_NAME_ALIAS = "alias";
  @SerializedName(SERIALIZED_NAME_ALIAS)
  private String alias;

  public static final String SERIALIZED_NAME_BENEFITS = "benefits";
  @SerializedName(SERIALIZED_NAME_BENEFITS)
  private List<String> benefits = new ArrayList<>();

  public static final String SERIALIZED_NAME_BILLING_PERIOD_FREQUENCY = "billingPeriodFrequency";
  @SerializedName(SERIALIZED_NAME_BILLING_PERIOD_FREQUENCY)
  private Integer billingPeriodFrequency;

  /**
   * The type of billing period used.
   */
  @JsonAdapter(BillingPeriodTypeEnum.Adapter.class)
  public enum BillingPeriodTypeEnum {
    DAY("day"),
    
    WEEK("week"),
    
    MONTH("month"),
    
    YEAR("year"),
    
    NONE("none");

    private String value;

    BillingPeriodTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BillingPeriodTypeEnum fromValue(String value) {
      for (BillingPeriodTypeEnum b : BillingPeriodTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BillingPeriodTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BillingPeriodTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BillingPeriodTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BillingPeriodTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BillingPeriodTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BILLING_PERIOD_TYPE = "billingPeriodType";
  @SerializedName(SERIALIZED_NAME_BILLING_PERIOD_TYPE)
  private BillingPeriodTypeEnum billingPeriodType;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "customFields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Map<String, Object> customFields = new HashMap<>();

  public static final String SERIALIZED_NAME_HAS_TRIAL_PERIOD = "hasTrialPeriod";
  @SerializedName(SERIALIZED_NAME_HAS_TRIAL_PERIOD)
  private Boolean hasTrialPeriod;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_IS_FEATURED = "isFeatured";
  @SerializedName(SERIALIZED_NAME_IS_FEATURED)
  private Boolean isFeatured;

  public static final String SERIALIZED_NAME_IS_PRIVATE = "isPrivate";
  @SerializedName(SERIALIZED_NAME_IS_PRIVATE)
  private Boolean isPrivate;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Float price;

  /**
   * The revenue type a plan targets.
   */
  @JsonAdapter(RevenueTypeEnum.Adapter.class)
  public enum RevenueTypeEnum {
    TVOD("TVOD"),
    
    SVOD("SVOD");

    private String value;

    RevenueTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RevenueTypeEnum fromValue(String value) {
      for (RevenueTypeEnum b : RevenueTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RevenueTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RevenueTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RevenueTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RevenueTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RevenueTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REVENUE_TYPE = "revenueType";
  @SerializedName(SERIALIZED_NAME_REVENUE_TYPE)
  private RevenueTypeEnum revenueType;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_CODE = "subscriptionCode";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_CODE)
  private String subscriptionCode;

  public static final String SERIALIZED_NAME_TAGLINE = "tagline";
  @SerializedName(SERIALIZED_NAME_TAGLINE)
  private String tagline;

  public static final String SERIALIZED_NAME_TERMS_AND_CONDITIONS = "termsAndConditions";
  @SerializedName(SERIALIZED_NAME_TERMS_AND_CONDITIONS)
  private String termsAndConditions;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TRIAL_PERIOD_DAYS = "trialPeriodDays";
  @SerializedName(SERIALIZED_NAME_TRIAL_PERIOD_DAYS)
  private Integer trialPeriodDays;

  /**
   * The type of plan.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    FREE("Free"),
    
    SUBSCRIPTION("Subscription");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public Plan() {
  }

  public Plan alias(String alias) {
    this.alias = alias;
    return this;
  }

  /**
   * An alias for a plan.
   * @return alias
   */
  @javax.annotation.Nonnull
  public String getAlias() {
    return alias;
  }

  public void setAlias(String alias) {
    this.alias = alias;
  }


  public Plan benefits(List<String> benefits) {
    this.benefits = benefits;
    return this;
  }

  public Plan addBenefitsItem(String benefitsItem) {
    if (this.benefits == null) {
      this.benefits = new ArrayList<>();
    }
    this.benefits.add(benefitsItem);
    return this;
  }

  /**
   * The list of benefits to display for a plan.
   * @return benefits
   */
  @javax.annotation.Nonnull
  public List<String> getBenefits() {
    return benefits;
  }

  public void setBenefits(List<String> benefits) {
    this.benefits = benefits;
  }


  public Plan billingPeriodFrequency(Integer billingPeriodFrequency) {
    this.billingPeriodFrequency = billingPeriodFrequency;
    return this;
  }

  /**
   * Given the &#x60;billingPeriodType&#x60; this is how frequently it will run. e.g. every 2 weeks.
   * @return billingPeriodFrequency
   */
  @javax.annotation.Nonnull
  public Integer getBillingPeriodFrequency() {
    return billingPeriodFrequency;
  }

  public void setBillingPeriodFrequency(Integer billingPeriodFrequency) {
    this.billingPeriodFrequency = billingPeriodFrequency;
  }


  public Plan billingPeriodType(BillingPeriodTypeEnum billingPeriodType) {
    this.billingPeriodType = billingPeriodType;
    return this;
  }

  /**
   * The type of billing period used.
   * @return billingPeriodType
   */
  @javax.annotation.Nonnull
  public BillingPeriodTypeEnum getBillingPeriodType() {
    return billingPeriodType;
  }

  public void setBillingPeriodType(BillingPeriodTypeEnum billingPeriodType) {
    this.billingPeriodType = billingPeriodType;
  }


  public Plan currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * The currency a plan is offered in.
   * @return currency
   */
  @javax.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public Plan customFields(Map<String, Object> customFields) {
    this.customFields = customFields;
    return this;
  }

  public Plan putCustomFieldsItem(String key, Object customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new HashMap<>();
    }
    this.customFields.put(key, customFieldsItem);
    return this;
  }

  /**
   * A map of custom fields defined by a curator for a plan.
   * @return customFields
   */
  @javax.annotation.Nullable
  public Map<String, Object> getCustomFields() {
    return customFields;
  }

  public void setCustomFields(Map<String, Object> customFields) {
    this.customFields = customFields;
  }


  public Plan hasTrialPeriod(Boolean hasTrialPeriod) {
    this.hasTrialPeriod = hasTrialPeriod;
    return this;
  }

  /**
   * True if a plan has a trial period, false if not.
   * @return hasTrialPeriod
   */
  @javax.annotation.Nonnull
  public Boolean getHasTrialPeriod() {
    return hasTrialPeriod;
  }

  public void setHasTrialPeriod(Boolean hasTrialPeriod) {
    this.hasTrialPeriod = hasTrialPeriod;
  }


  public Plan id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The identifier of a plan.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Plan isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * True if a plan is active, false if its retired.
   * @return isActive
   */
  @javax.annotation.Nonnull
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public Plan isFeatured(Boolean isFeatured) {
    this.isFeatured = isFeatured;
    return this;
  }

  /**
   * True if a plan should be highlighted as featured, false if not.
   * @return isFeatured
   */
  @javax.annotation.Nonnull
  public Boolean getIsFeatured() {
    return isFeatured;
  }

  public void setIsFeatured(Boolean isFeatured) {
    this.isFeatured = isFeatured;
  }


  public Plan isPrivate(Boolean isPrivate) {
    this.isPrivate = isPrivate;
    return this;
  }

  /**
   * True if a plan should not be presented in the primary plan options, false if not.
   * @return isPrivate
   */
  @javax.annotation.Nonnull
  public Boolean getIsPrivate() {
    return isPrivate;
  }

  public void setIsPrivate(Boolean isPrivate) {
    this.isPrivate = isPrivate;
  }


  public Plan price(Float price) {
    this.price = price;
    return this;
  }

  /**
   * The price of a plan. If a free plan then undefined.
   * @return price
   */
  @javax.annotation.Nullable
  public Float getPrice() {
    return price;
  }

  public void setPrice(Float price) {
    this.price = price;
  }


  public Plan revenueType(RevenueTypeEnum revenueType) {
    this.revenueType = revenueType;
    return this;
  }

  /**
   * The revenue type a plan targets.
   * @return revenueType
   */
  @javax.annotation.Nonnull
  public RevenueTypeEnum getRevenueType() {
    return revenueType;
  }

  public void setRevenueType(RevenueTypeEnum revenueType) {
    this.revenueType = revenueType;
  }


  public Plan subscriptionCode(String subscriptionCode) {
    this.subscriptionCode = subscriptionCode;
    return this;
  }

  /**
   * The subscription code a plan targets.
   * @return subscriptionCode
   */
  @javax.annotation.Nonnull
  public String getSubscriptionCode() {
    return subscriptionCode;
  }

  public void setSubscriptionCode(String subscriptionCode) {
    this.subscriptionCode = subscriptionCode;
  }


  public Plan tagline(String tagline) {
    this.tagline = tagline;
    return this;
  }

  /**
   * The short tagline for a plan.
   * @return tagline
   */
  @javax.annotation.Nonnull
  public String getTagline() {
    return tagline;
  }

  public void setTagline(String tagline) {
    this.tagline = tagline;
  }


  public Plan termsAndConditions(String termsAndConditions) {
    this.termsAndConditions = termsAndConditions;
    return this;
  }

  /**
   * The terms and conditions for a plan.
   * @return termsAndConditions
   */
  @javax.annotation.Nonnull
  public String getTermsAndConditions() {
    return termsAndConditions;
  }

  public void setTermsAndConditions(String termsAndConditions) {
    this.termsAndConditions = termsAndConditions;
  }


  public Plan title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of a plan.
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Plan trialPeriodDays(Integer trialPeriodDays) {
    this.trialPeriodDays = trialPeriodDays;
    return this;
  }

  /**
   * How many days a trial period runs for a plan. Only valid if &#x60;hasTrialPeriod&#x60; is true.
   * @return trialPeriodDays
   */
  @javax.annotation.Nonnull
  public Integer getTrialPeriodDays() {
    return trialPeriodDays;
  }

  public void setTrialPeriodDays(Integer trialPeriodDays) {
    this.trialPeriodDays = trialPeriodDays;
  }


  public Plan type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of plan.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Plan plan = (Plan) o;
    return Objects.equals(this.alias, plan.alias) &&
        Objects.equals(this.benefits, plan.benefits) &&
        Objects.equals(this.billingPeriodFrequency, plan.billingPeriodFrequency) &&
        Objects.equals(this.billingPeriodType, plan.billingPeriodType) &&
        Objects.equals(this.currency, plan.currency) &&
        Objects.equals(this.customFields, plan.customFields) &&
        Objects.equals(this.hasTrialPeriod, plan.hasTrialPeriod) &&
        Objects.equals(this.id, plan.id) &&
        Objects.equals(this.isActive, plan.isActive) &&
        Objects.equals(this.isFeatured, plan.isFeatured) &&
        Objects.equals(this.isPrivate, plan.isPrivate) &&
        Objects.equals(this.price, plan.price) &&
        Objects.equals(this.revenueType, plan.revenueType) &&
        Objects.equals(this.subscriptionCode, plan.subscriptionCode) &&
        Objects.equals(this.tagline, plan.tagline) &&
        Objects.equals(this.termsAndConditions, plan.termsAndConditions) &&
        Objects.equals(this.title, plan.title) &&
        Objects.equals(this.trialPeriodDays, plan.trialPeriodDays) &&
        Objects.equals(this.type, plan.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alias, benefits, billingPeriodFrequency, billingPeriodType, currency, customFields, hasTrialPeriod, id, isActive, isFeatured, isPrivate, price, revenueType, subscriptionCode, tagline, termsAndConditions, title, trialPeriodDays, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Plan {\n");
    sb.append("    alias: ").append(toIndentedString(alias)).append("\n");
    sb.append("    benefits: ").append(toIndentedString(benefits)).append("\n");
    sb.append("    billingPeriodFrequency: ").append(toIndentedString(billingPeriodFrequency)).append("\n");
    sb.append("    billingPeriodType: ").append(toIndentedString(billingPeriodType)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    hasTrialPeriod: ").append(toIndentedString(hasTrialPeriod)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    isFeatured: ").append(toIndentedString(isFeatured)).append("\n");
    sb.append("    isPrivate: ").append(toIndentedString(isPrivate)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    revenueType: ").append(toIndentedString(revenueType)).append("\n");
    sb.append("    subscriptionCode: ").append(toIndentedString(subscriptionCode)).append("\n");
    sb.append("    tagline: ").append(toIndentedString(tagline)).append("\n");
    sb.append("    termsAndConditions: ").append(toIndentedString(termsAndConditions)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    trialPeriodDays: ").append(toIndentedString(trialPeriodDays)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alias");
    openapiFields.add("benefits");
    openapiFields.add("billingPeriodFrequency");
    openapiFields.add("billingPeriodType");
    openapiFields.add("currency");
    openapiFields.add("customFields");
    openapiFields.add("hasTrialPeriod");
    openapiFields.add("id");
    openapiFields.add("isActive");
    openapiFields.add("isFeatured");
    openapiFields.add("isPrivate");
    openapiFields.add("price");
    openapiFields.add("revenueType");
    openapiFields.add("subscriptionCode");
    openapiFields.add("tagline");
    openapiFields.add("termsAndConditions");
    openapiFields.add("title");
    openapiFields.add("trialPeriodDays");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("alias");
    openapiRequiredFields.add("benefits");
    openapiRequiredFields.add("billingPeriodFrequency");
    openapiRequiredFields.add("billingPeriodType");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("hasTrialPeriod");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("isActive");
    openapiRequiredFields.add("isFeatured");
    openapiRequiredFields.add("isPrivate");
    openapiRequiredFields.add("revenueType");
    openapiRequiredFields.add("subscriptionCode");
    openapiRequiredFields.add("tagline");
    openapiRequiredFields.add("termsAndConditions");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("trialPeriodDays");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Plan
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Plan.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Plan is not found in the empty JSON string", Plan.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Plan.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Plan` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Plan.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("alias").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alias` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alias").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("benefits") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("benefits").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `benefits` to be an array in the JSON string but got `%s`", jsonObj.get("benefits").toString()));
      }
      if (!jsonObj.get("billingPeriodType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingPeriodType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingPeriodType").toString()));
      }
      // validate the required field `billingPeriodType`
      BillingPeriodTypeEnum.validateJsonElement(jsonObj.get("billingPeriodType"));
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("revenueType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revenueType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revenueType").toString()));
      }
      // validate the required field `revenueType`
      RevenueTypeEnum.validateJsonElement(jsonObj.get("revenueType"));
      if (!jsonObj.get("subscriptionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionCode").toString()));
      }
      if (!jsonObj.get("tagline").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagline` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tagline").toString()));
      }
      if (!jsonObj.get("termsAndConditions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `termsAndConditions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("termsAndConditions").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Plan.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Plan' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Plan> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Plan.class));

       return (TypeAdapter<T>) new TypeAdapter<Plan>() {
           @Override
           public void write(JsonWriter out, Plan value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Plan read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Plan given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Plan
   * @throws IOException if the JSON string is invalid with respect to Plan
   */
  public static Plan fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Plan.class);
  }

  /**
   * Convert an instance of Plan to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

