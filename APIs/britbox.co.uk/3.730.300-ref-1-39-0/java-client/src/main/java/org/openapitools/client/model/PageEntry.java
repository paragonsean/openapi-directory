/*
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ItemList;
import org.openapitools.client.model.ItemSummary;
import org.openapitools.client.model.Person;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents an entry of a Page. Defines what specific piece of content should be presented e.g. an Item or ItemList. Also defines what visual template should be used to render that content. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:39.003134-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PageEntry {
  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "customFields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Map<String, Object> customFields = new HashMap<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private Map<String, URI> images = new HashMap<>();

  public static final String SERIALIZED_NAME_ITEM = "item";
  @SerializedName(SERIALIZED_NAME_ITEM)
  private ItemSummary item;

  public static final String SERIALIZED_NAME_LIST = "list";
  @SerializedName(SERIALIZED_NAME_LIST)
  private ItemList _list;

  public static final String SERIALIZED_NAME_PEOPLE = "people";
  @SerializedName(SERIALIZED_NAME_PEOPLE)
  private List<Person> people = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  private String template;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  /**
   * The type of PageEntry. Used to help identify what type of content will be presented.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ITEM_ENTRY("ItemEntry"),
    
    ITEM_DETAIL_ENTRY("ItemDetailEntry"),
    
    LIST_ENTRY("ListEntry"),
    
    LIST_DETAIL_ENTRY("ListDetailEntry"),
    
    USER_ENTRY("UserEntry"),
    
    TEXT_ENTRY("TextEntry"),
    
    IMAGE_ENTRY("ImageEntry"),
    
    CUSTOM_ENTRY("CustomEntry"),
    
    PEOPLE_ENTRY("PeopleEntry");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public PageEntry() {
  }

  public PageEntry customFields(Map<String, Object> customFields) {
    this.customFields = customFields;
    return this;
  }

  public PageEntry putCustomFieldsItem(String key, Object customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new HashMap<>();
    }
    this.customFields.put(key, customFieldsItem);
    return this;
  }

  /**
   * A map of custom fields defined by a curator for a page entry.
   * @return customFields
   */
  @javax.annotation.Nullable
  public Map<String, Object> getCustomFields() {
    return customFields;
  }

  public void setCustomFields(Map<String, Object> customFields) {
    this.customFields = customFields;
  }


  public PageEntry id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The unique identifier for a page entry.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public PageEntry images(Map<String, URI> images) {
    this.images = images;
    return this;
  }

  public PageEntry putImagesItem(String key, URI imagesItem) {
    if (this.images == null) {
      this.images = new HashMap<>();
    }
    this.images.put(key, imagesItem);
    return this;
  }

  /**
   * The images for the page entry if any.  For example the images of an &#x60;ImageEntry&#x60;. 
   * @return images
   */
  @javax.annotation.Nullable
  public Map<String, URI> getImages() {
    return images;
  }

  public void setImages(Map<String, URI> images) {
    this.images = images;
  }


  public PageEntry item(ItemSummary item) {
    this.item = item;
    return this;
  }

  /**
   * Get item
   * @return item
   */
  @javax.annotation.Nullable
  public ItemSummary getItem() {
    return item;
  }

  public void setItem(ItemSummary item) {
    this.item = item;
  }


  public PageEntry _list(ItemList _list) {
    this._list = _list;
    return this;
  }

  /**
   * Get _list
   * @return _list
   */
  @javax.annotation.Nullable
  public ItemList getList() {
    return _list;
  }

  public void setList(ItemList _list) {
    this._list = _list;
  }


  public PageEntry people(List<Person> people) {
    this.people = people;
    return this;
  }

  public PageEntry addPeopleItem(Person peopleItem) {
    if (this.people == null) {
      this.people = new ArrayList<>();
    }
    this.people.add(peopleItem);
    return this;
  }

  /**
   * If &#39;type&#39; is &#39;PeopleEntry&#39; then this is the array of people to present.
   * @return people
   */
  @javax.annotation.Nullable
  public List<Person> getPeople() {
    return people;
  }

  public void setPeople(List<Person> people) {
    this.people = people;
  }


  public PageEntry template(String template) {
    this.template = template;
    return this;
  }

  /**
   * Template type used to present the content of the PageEntry.
   * @return template
   */
  @javax.annotation.Nonnull
  public String getTemplate() {
    return template;
  }

  public void setTemplate(String template) {
    this.template = template;
  }


  public PageEntry text(String text) {
    this.text = text;
    return this;
  }

  /**
   * If &#39;type&#39; is &#39;TextEntry&#39; then this is the text to be represented.
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public PageEntry title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The name of the Page Entry.
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public PageEntry type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of PageEntry. Used to help identify what type of content will be presented.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PageEntry pageEntry = (PageEntry) o;
    return Objects.equals(this.customFields, pageEntry.customFields) &&
        Objects.equals(this.id, pageEntry.id) &&
        Objects.equals(this.images, pageEntry.images) &&
        Objects.equals(this.item, pageEntry.item) &&
        Objects.equals(this._list, pageEntry._list) &&
        Objects.equals(this.people, pageEntry.people) &&
        Objects.equals(this.template, pageEntry.template) &&
        Objects.equals(this.text, pageEntry.text) &&
        Objects.equals(this.title, pageEntry.title) &&
        Objects.equals(this.type, pageEntry.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customFields, id, images, item, _list, people, template, text, title, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PageEntry {\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    item: ").append(toIndentedString(item)).append("\n");
    sb.append("    _list: ").append(toIndentedString(_list)).append("\n");
    sb.append("    people: ").append(toIndentedString(people)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customFields");
    openapiFields.add("id");
    openapiFields.add("images");
    openapiFields.add("item");
    openapiFields.add("list");
    openapiFields.add("people");
    openapiFields.add("template");
    openapiFields.add("text");
    openapiFields.add("title");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("template");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PageEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PageEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PageEntry is not found in the empty JSON string", PageEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PageEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PageEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PageEntry.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `item`
      if (jsonObj.get("item") != null && !jsonObj.get("item").isJsonNull()) {
        ItemSummary.validateJsonElement(jsonObj.get("item"));
      }
      // validate the optional field `list`
      if (jsonObj.get("list") != null && !jsonObj.get("list").isJsonNull()) {
        ItemList.validateJsonElement(jsonObj.get("list"));
      }
      if (jsonObj.get("people") != null && !jsonObj.get("people").isJsonNull()) {
        JsonArray jsonArraypeople = jsonObj.getAsJsonArray("people");
        if (jsonArraypeople != null) {
          // ensure the json data is an array
          if (!jsonObj.get("people").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `people` to be an array in the JSON string but got `%s`", jsonObj.get("people").toString()));
          }

          // validate the optional field `people` (array)
          for (int i = 0; i < jsonArraypeople.size(); i++) {
            Person.validateJsonElement(jsonArraypeople.get(i));
          };
        }
      }
      if (!jsonObj.get("template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PageEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PageEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PageEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PageEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<PageEntry>() {
           @Override
           public void write(JsonWriter out, PageEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PageEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PageEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PageEntry
   * @throws IOException if the JSON string is invalid with respect to PageEntry
   */
  public static PageEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PageEntry.class);
  }

  /**
   * Convert an instance of PageEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

