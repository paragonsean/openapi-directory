/*
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Device;
import org.openapitools.client.model.DeviceRegistrationWindow;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountDevices
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:39.003134-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountDevices {
  public static final String SERIALIZED_NAME_DEREGISTRATION_WINDOW = "deregistrationWindow";
  @SerializedName(SERIALIZED_NAME_DEREGISTRATION_WINDOW)
  private DeviceRegistrationWindow deregistrationWindow;

  public static final String SERIALIZED_NAME_DEVICES = "devices";
  @SerializedName(SERIALIZED_NAME_DEVICES)
  private List<Device> devices = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_REGISTERED = "maxRegistered";
  @SerializedName(SERIALIZED_NAME_MAX_REGISTERED)
  private Integer maxRegistered;

  public static final String SERIALIZED_NAME_REGISTRATION_WINDOW = "registrationWindow";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_WINDOW)
  private DeviceRegistrationWindow registrationWindow;

  public AccountDevices() {
  }

  public AccountDevices deregistrationWindow(DeviceRegistrationWindow deregistrationWindow) {
    this.deregistrationWindow = deregistrationWindow;
    return this;
  }

  /**
   * Get deregistrationWindow
   * @return deregistrationWindow
   */
  @javax.annotation.Nullable
  public DeviceRegistrationWindow getDeregistrationWindow() {
    return deregistrationWindow;
  }

  public void setDeregistrationWindow(DeviceRegistrationWindow deregistrationWindow) {
    this.deregistrationWindow = deregistrationWindow;
  }


  public AccountDevices devices(List<Device> devices) {
    this.devices = devices;
    return this;
  }

  public AccountDevices addDevicesItem(Device devicesItem) {
    if (this.devices == null) {
      this.devices = new ArrayList<>();
    }
    this.devices.add(devicesItem);
    return this;
  }

  /**
   * The array of registered playack devices.
   * @return devices
   */
  @javax.annotation.Nonnull
  public List<Device> getDevices() {
    return devices;
  }

  public void setDevices(List<Device> devices) {
    this.devices = devices;
  }


  public AccountDevices maxRegistered(Integer maxRegistered) {
    this.maxRegistered = maxRegistered;
    return this;
  }

  /**
   * The maximum number of playback devices that can be registered under an account at a single time.  If there is no maximum defined this value will be &#x60;-1&#x60;. 
   * @return maxRegistered
   */
  @javax.annotation.Nonnull
  public Integer getMaxRegistered() {
    return maxRegistered;
  }

  public void setMaxRegistered(Integer maxRegistered) {
    this.maxRegistered = maxRegistered;
  }


  public AccountDevices registrationWindow(DeviceRegistrationWindow registrationWindow) {
    this.registrationWindow = registrationWindow;
    return this;
  }

  /**
   * Get registrationWindow
   * @return registrationWindow
   */
  @javax.annotation.Nullable
  public DeviceRegistrationWindow getRegistrationWindow() {
    return registrationWindow;
  }

  public void setRegistrationWindow(DeviceRegistrationWindow registrationWindow) {
    this.registrationWindow = registrationWindow;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountDevices accountDevices = (AccountDevices) o;
    return Objects.equals(this.deregistrationWindow, accountDevices.deregistrationWindow) &&
        Objects.equals(this.devices, accountDevices.devices) &&
        Objects.equals(this.maxRegistered, accountDevices.maxRegistered) &&
        Objects.equals(this.registrationWindow, accountDevices.registrationWindow);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deregistrationWindow, devices, maxRegistered, registrationWindow);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountDevices {\n");
    sb.append("    deregistrationWindow: ").append(toIndentedString(deregistrationWindow)).append("\n");
    sb.append("    devices: ").append(toIndentedString(devices)).append("\n");
    sb.append("    maxRegistered: ").append(toIndentedString(maxRegistered)).append("\n");
    sb.append("    registrationWindow: ").append(toIndentedString(registrationWindow)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deregistrationWindow");
    openapiFields.add("devices");
    openapiFields.add("maxRegistered");
    openapiFields.add("registrationWindow");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("devices");
    openapiRequiredFields.add("maxRegistered");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountDevices
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountDevices.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountDevices is not found in the empty JSON string", AccountDevices.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountDevices.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountDevices` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AccountDevices.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `deregistrationWindow`
      if (jsonObj.get("deregistrationWindow") != null && !jsonObj.get("deregistrationWindow").isJsonNull()) {
        DeviceRegistrationWindow.validateJsonElement(jsonObj.get("deregistrationWindow"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("devices").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `devices` to be an array in the JSON string but got `%s`", jsonObj.get("devices").toString()));
      }

      JsonArray jsonArraydevices = jsonObj.getAsJsonArray("devices");
      // validate the required field `devices` (array)
      for (int i = 0; i < jsonArraydevices.size(); i++) {
        Device.validateJsonElement(jsonArraydevices.get(i));
      };
      // validate the optional field `registrationWindow`
      if (jsonObj.get("registrationWindow") != null && !jsonObj.get("registrationWindow").isJsonNull()) {
        DeviceRegistrationWindow.validateJsonElement(jsonObj.get("registrationWindow"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountDevices.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountDevices' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountDevices> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountDevices.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountDevices>() {
           @Override
           public void write(JsonWriter out, AccountDevices value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountDevices read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountDevices given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountDevices
   * @throws IOException if the JSON string is invalid with respect to AccountDevices
   */
  public static AccountDevices fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountDevices.class);
  }

  /**
   * Convert an instance of AccountDevices to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

