/*
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ClassificationSummary;
import org.openapitools.client.model.Credit;
import org.openapitools.client.model.ItemCustomMetadata;
import org.openapitools.client.model.ItemList;
import org.openapitools.client.model.ItemSummary;
import org.openapitools.client.model.Offer;
import org.openapitools.client.model.Theme;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ItemDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:39.003134-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ItemDetail extends ItemSummary {
  public static final String SERIALIZED_NAME_COPYRIGHT = "copyright";
  @SerializedName(SERIALIZED_NAME_COPYRIGHT)
  private String copyright;

  public static final String SERIALIZED_NAME_CREDITS = "credits";
  @SerializedName(SERIALIZED_NAME_CREDITS)
  private List<Credit> credits = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOM_METADATA = "customMetadata";
  @SerializedName(SERIALIZED_NAME_CUSTOM_METADATA)
  private List<ItemCustomMetadata> customMetadata = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISTRIBUTOR = "distributor";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTOR)
  private String distributor;

  public static final String SERIALIZED_NAME_EPISODES = "episodes";
  @SerializedName(SERIALIZED_NAME_EPISODES)
  private ItemList episodes;

  public static final String SERIALIZED_NAME_EVENT_DATE = "eventDate";
  @SerializedName(SERIALIZED_NAME_EVENT_DATE)
  private OffsetDateTime eventDate;

  public static final String SERIALIZED_NAME_GENRE_PATHS = "genrePaths";
  @SerializedName(SERIALIZED_NAME_GENRE_PATHS)
  private List<String> genrePaths = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_SEASON = "season";
  @SerializedName(SERIALIZED_NAME_SEASON)
  private ItemDetail season;

  public static final String SERIALIZED_NAME_SEASONS = "seasons";
  @SerializedName(SERIALIZED_NAME_SEASONS)
  private ItemList seasons;

  public static final String SERIALIZED_NAME_SHOW = "show";
  @SerializedName(SERIALIZED_NAME_SHOW)
  private ItemDetail show;

  public static final String SERIALIZED_NAME_TOTAL_USER_RATINGS = "totalUserRatings";
  @SerializedName(SERIALIZED_NAME_TOTAL_USER_RATINGS)
  private Integer totalUserRatings;

  public static final String SERIALIZED_NAME_TRAILERS = "trailers";
  @SerializedName(SERIALIZED_NAME_TRAILERS)
  private List<ItemSummary> trailers = new ArrayList<>();

  public static final String SERIALIZED_NAME_VENUE = "venue";
  @SerializedName(SERIALIZED_NAME_VENUE)
  private String venue;

  public ItemDetail() {
    this.type = this.getClass().getSimpleName();
  }

  public ItemDetail copyright(String copyright) {
    this.copyright = copyright;
    return this;
  }

  /**
   * Copyright information about this item
   * @return copyright
   */
  @javax.annotation.Nullable
  public String getCopyright() {
    return copyright;
  }

  public void setCopyright(String copyright) {
    this.copyright = copyright;
  }


  public ItemDetail credits(List<Credit> credits) {
    this.credits = credits;
    return this;
  }

  public ItemDetail addCreditsItem(Credit creditsItem) {
    if (this.credits == null) {
      this.credits = new ArrayList<>();
    }
    this.credits.add(creditsItem);
    return this;
  }

  /**
   * A list of credits associated with this item.
   * @return credits
   */
  @javax.annotation.Nullable
  public List<Credit> getCredits() {
    return credits;
  }

  public void setCredits(List<Credit> credits) {
    this.credits = credits;
  }


  public ItemDetail customMetadata(List<ItemCustomMetadata> customMetadata) {
    this.customMetadata = customMetadata;
    return this;
  }

  public ItemDetail addCustomMetadataItem(ItemCustomMetadata customMetadataItem) {
    if (this.customMetadata == null) {
      this.customMetadata = new ArrayList<>();
    }
    this.customMetadata.add(customMetadataItem);
    return this;
  }

  /**
   * An ordered list of custom name-value-pair item metadata.  Usually displayed on an item detail page. 
   * @return customMetadata
   */
  @javax.annotation.Nullable
  public List<ItemCustomMetadata> getCustomMetadata() {
    return customMetadata;
  }

  public void setCustomMetadata(List<ItemCustomMetadata> customMetadata) {
    this.customMetadata = customMetadata;
  }


  public ItemDetail description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of this item.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ItemDetail distributor(String distributor) {
    this.distributor = distributor;
    return this;
  }

  /**
   * The distributor of this item.
   * @return distributor
   */
  @javax.annotation.Nullable
  public String getDistributor() {
    return distributor;
  }

  public void setDistributor(String distributor) {
    this.distributor = distributor;
  }


  public ItemDetail episodes(ItemList episodes) {
    this.episodes = episodes;
    return this;
  }

  /**
   * Get episodes
   * @return episodes
   */
  @javax.annotation.Nullable
  public ItemList getEpisodes() {
    return episodes;
  }

  public void setEpisodes(ItemList episodes) {
    this.episodes = episodes;
  }


  public ItemDetail eventDate(OffsetDateTime eventDate) {
    this.eventDate = eventDate;
    return this;
  }

  /**
   * The optional date of an event. Specific to a Program item type. 
   * @return eventDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEventDate() {
    return eventDate;
  }

  public void setEventDate(OffsetDateTime eventDate) {
    this.eventDate = eventDate;
  }


  public ItemDetail genrePaths(List<String> genrePaths) {
    this.genrePaths = genrePaths;
    return this;
  }

  public ItemDetail addGenrePathsItem(String genrePathsItem) {
    if (this.genrePaths == null) {
      this.genrePaths = new ArrayList<>();
    }
    this.genrePaths.add(genrePathsItem);
    return this;
  }

  /**
   * An array of genre paths mapping to the values within the &#x60;genres&#x60; array from ItemSummary. 
   * @return genrePaths
   */
  @javax.annotation.Nullable
  public List<String> getGenrePaths() {
    return genrePaths;
  }

  public void setGenrePaths(List<String> genrePaths) {
    this.genrePaths = genrePaths;
  }


  public ItemDetail location(String location) {
    this.location = location;
    return this;
  }

  /**
   * The optional location (e.g. city) of an event. Specific to a Program item type. 
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public ItemDetail season(ItemDetail season) {
    this.season = season;
    return this;
  }

  /**
   * Get season
   * @return season
   */
  @javax.annotation.Nullable
  public ItemDetail getSeason() {
    return season;
  }

  public void setSeason(ItemDetail season) {
    this.season = season;
  }


  public ItemDetail seasons(ItemList seasons) {
    this.seasons = seasons;
    return this;
  }

  /**
   * Get seasons
   * @return seasons
   */
  @javax.annotation.Nullable
  public ItemList getSeasons() {
    return seasons;
  }

  public void setSeasons(ItemList seasons) {
    this.seasons = seasons;
  }


  public ItemDetail show(ItemDetail show) {
    this.show = show;
    return this;
  }

  /**
   * Get show
   * @return show
   */
  @javax.annotation.Nullable
  public ItemDetail getShow() {
    return show;
  }

  public void setShow(ItemDetail show) {
    this.show = show;
  }


  public ItemDetail totalUserRatings(Integer totalUserRatings) {
    this.totalUserRatings = totalUserRatings;
    return this;
  }

  /**
   * The total number of users who have rated this item.
   * minimum: 0
   * @return totalUserRatings
   */
  @javax.annotation.Nullable
  public Integer getTotalUserRatings() {
    return totalUserRatings;
  }

  public void setTotalUserRatings(Integer totalUserRatings) {
    this.totalUserRatings = totalUserRatings;
  }


  public ItemDetail trailers(List<ItemSummary> trailers) {
    this.trailers = trailers;
    return this;
  }

  public ItemDetail addTrailersItem(ItemSummary trailersItem) {
    if (this.trailers == null) {
      this.trailers = new ArrayList<>();
    }
    this.trailers.add(trailersItem);
    return this;
  }

  /**
   * A list of trailers associated with this item.
   * @return trailers
   */
  @javax.annotation.Nullable
  public List<ItemSummary> getTrailers() {
    return trailers;
  }

  public void setTrailers(List<ItemSummary> trailers) {
    this.trailers = trailers;
  }


  public ItemDetail venue(String venue) {
    this.venue = venue;
    return this;
  }

  /**
   * The optional venue of an event. Specific to a Program item type. 
   * @return venue
   */
  @javax.annotation.Nullable
  public String getVenue() {
    return venue;
  }

  public void setVenue(String venue) {
    this.venue = venue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemDetail itemDetail = (ItemDetail) o;
    return Objects.equals(this.copyright, itemDetail.copyright) &&
        Objects.equals(this.credits, itemDetail.credits) &&
        Objects.equals(this.customMetadata, itemDetail.customMetadata) &&
        Objects.equals(this.description, itemDetail.description) &&
        Objects.equals(this.distributor, itemDetail.distributor) &&
        Objects.equals(this.episodes, itemDetail.episodes) &&
        Objects.equals(this.eventDate, itemDetail.eventDate) &&
        Objects.equals(this.genrePaths, itemDetail.genrePaths) &&
        Objects.equals(this.location, itemDetail.location) &&
        Objects.equals(this.season, itemDetail.season) &&
        Objects.equals(this.seasons, itemDetail.seasons) &&
        Objects.equals(this.show, itemDetail.show) &&
        Objects.equals(this.totalUserRatings, itemDetail.totalUserRatings) &&
        Objects.equals(this.trailers, itemDetail.trailers) &&
        Objects.equals(this.venue, itemDetail.venue) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(copyright, credits, customMetadata, description, distributor, episodes, eventDate, genrePaths, location, season, seasons, show, totalUserRatings, trailers, venue, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemDetail {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    copyright: ").append(toIndentedString(copyright)).append("\n");
    sb.append("    credits: ").append(toIndentedString(credits)).append("\n");
    sb.append("    customMetadata: ").append(toIndentedString(customMetadata)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    distributor: ").append(toIndentedString(distributor)).append("\n");
    sb.append("    episodes: ").append(toIndentedString(episodes)).append("\n");
    sb.append("    eventDate: ").append(toIndentedString(eventDate)).append("\n");
    sb.append("    genrePaths: ").append(toIndentedString(genrePaths)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    season: ").append(toIndentedString(season)).append("\n");
    sb.append("    seasons: ").append(toIndentedString(seasons)).append("\n");
    sb.append("    show: ").append(toIndentedString(show)).append("\n");
    sb.append("    totalUserRatings: ").append(toIndentedString(totalUserRatings)).append("\n");
    sb.append("    trailers: ").append(toIndentedString(trailers)).append("\n");
    sb.append("    venue: ").append(toIndentedString(venue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advisoryText");
    openapiFields.add("availableEpisodeCount");
    openapiFields.add("availableSeasonCount");
    openapiFields.add("averageUserRating");
    openapiFields.add("badge");
    openapiFields.add("channelShortCode");
    openapiFields.add("classification");
    openapiFields.add("contextualTitle");
    openapiFields.add("customFields");
    openapiFields.add("customId");
    openapiFields.add("duration");
    openapiFields.add("episodeCount");
    openapiFields.add("episodeName");
    openapiFields.add("episodeNumber");
    openapiFields.add("genres");
    openapiFields.add("hasClosedCaptions");
    openapiFields.add("id");
    openapiFields.add("images");
    openapiFields.add("offers");
    openapiFields.add("path");
    openapiFields.add("releaseYear");
    openapiFields.add("scopes");
    openapiFields.add("seasonId");
    openapiFields.add("seasonNumber");
    openapiFields.add("shortDescription");
    openapiFields.add("showId");
    openapiFields.add("showTitle");
    openapiFields.add("subtype");
    openapiFields.add("tagline");
    openapiFields.add("themes");
    openapiFields.add("title");
    openapiFields.add("type");
    openapiFields.add("watchPath");
    openapiFields.add("copyright");
    openapiFields.add("credits");
    openapiFields.add("customMetadata");
    openapiFields.add("description");
    openapiFields.add("distributor");
    openapiFields.add("episodes");
    openapiFields.add("eventDate");
    openapiFields.add("genrePaths");
    openapiFields.add("location");
    openapiFields.add("season");
    openapiFields.add("seasons");
    openapiFields.add("show");
    openapiFields.add("totalUserRatings");
    openapiFields.add("trailers");
    openapiFields.add("venue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("path");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ItemDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ItemDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemDetail is not found in the empty JSON string", ItemDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ItemDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ItemDetail.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemDetail>() {
           @Override
           public void write(JsonWriter out, ItemDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ItemDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ItemDetail
   * @throws IOException if the JSON string is invalid with respect to ItemDetail
   */
  public static ItemDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemDetail.class);
  }

  /**
   * Convert an instance of ItemDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

