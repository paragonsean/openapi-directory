/*
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ItemSummary;
import org.openapitools.client.model.ListData;
import org.openapitools.client.model.Pagination;
import org.openapitools.client.model.Theme;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A pageable list of items.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:39.003134-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ItemList {
  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "customFields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Map<String, Object> customFields = new HashMap<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private Map<String, URI> images = new HashMap<>();

  /**
   * Gets or Sets itemTypes
   */
  @JsonAdapter(ItemTypesEnum.Adapter.class)
  public enum ItemTypesEnum {
    MOVIE("movie"),
    
    SHOW("show"),
    
    SEASON("season"),
    
    EPISODE("episode"),
    
    PROGRAM("program"),
    
    LINK("link"),
    
    TRAILER("trailer"),
    
    CHANNEL("channel"),
    
    CUSTOM_ASSET("customAsset");

    private String value;

    ItemTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ItemTypesEnum fromValue(String value) {
      for (ItemTypesEnum b : ItemTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ItemTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ItemTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ItemTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ItemTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ItemTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ITEM_TYPES = "itemTypes";
  @SerializedName(SERIALIZED_NAME_ITEM_TYPES)
  private List<ItemTypesEnum> itemTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<ItemSummary> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_LIST_DATA = "listData";
  @SerializedName(SERIALIZED_NAME_LIST_DATA)
  private ListData listData;

  public static final String SERIALIZED_NAME_PAGING = "paging";
  @SerializedName(SERIALIZED_NAME_PAGING)
  private Pagination paging;

  public static final String SERIALIZED_NAME_PARAMETER = "parameter";
  @SerializedName(SERIALIZED_NAME_PARAMETER)
  private String parameter;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_SHORT_DESCRIPTION = "shortDescription";
  @SerializedName(SERIALIZED_NAME_SHORT_DESCRIPTION)
  private String shortDescription;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Integer size;

  public static final String SERIALIZED_NAME_TAGLINE = "tagline";
  @SerializedName(SERIALIZED_NAME_TAGLINE)
  private String tagline;

  public static final String SERIALIZED_NAME_THEMES = "themes";
  @SerializedName(SERIALIZED_NAME_THEMES)
  private List<Theme> themes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public ItemList() {
  }

  public ItemList customFields(Map<String, Object> customFields) {
    this.customFields = customFields;
    return this;
  }

  public ItemList putCustomFieldsItem(String key, Object customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new HashMap<>();
    }
    this.customFields.put(key, customFieldsItem);
    return this;
  }

  /**
   * A map of custom fields defined by a curator for a list.
   * @return customFields
   */
  @javax.annotation.Nullable
  public Map<String, Object> getCustomFields() {
    return customFields;
  }

  public void setCustomFields(Map<String, Object> customFields) {
    this.customFields = customFields;
  }


  public ItemList description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A full description of this list.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ItemList id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The id of this list
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ItemList images(Map<String, URI> images) {
    this.images = images;
    return this;
  }

  public ItemList putImagesItem(String key, URI imagesItem) {
    if (this.images == null) {
      this.images = new HashMap<>();
    }
    this.images.put(key, imagesItem);
    return this;
  }

  /**
   * Get images
   * @return images
   */
  @javax.annotation.Nullable
  public Map<String, URI> getImages() {
    return images;
  }

  public void setImages(Map<String, URI> images) {
    this.images = images;
  }


  public ItemList itemTypes(List<ItemTypesEnum> itemTypes) {
    this.itemTypes = itemTypes;
    return this;
  }

  public ItemList addItemTypesItem(ItemTypesEnum itemTypesItem) {
    if (this.itemTypes == null) {
      this.itemTypes = new ArrayList<>();
    }
    this.itemTypes.add(itemTypesItem);
    return this;
  }

  /**
   * The types of items in the list
   * @return itemTypes
   */
  @javax.annotation.Nullable
  public List<ItemTypesEnum> getItemTypes() {
    return itemTypes;
  }

  public void setItemTypes(List<ItemTypesEnum> itemTypes) {
    this.itemTypes = itemTypes;
  }


  public ItemList items(List<ItemSummary> items) {
    this.items = items;
    return this;
  }

  public ItemList addItemsItem(ItemSummary itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * A list of items
   * @return items
   */
  @javax.annotation.Nonnull
  public List<ItemSummary> getItems() {
    return items;
  }

  public void setItems(List<ItemSummary> items) {
    this.items = items;
  }


  public ItemList listData(ListData listData) {
    this.listData = listData;
    return this;
  }

  /**
   * Get listData
   * @return listData
   */
  @javax.annotation.Nullable
  public ListData getListData() {
    return listData;
  }

  public void setListData(ListData listData) {
    this.listData = listData;
  }


  public ItemList paging(Pagination paging) {
    this.paging = paging;
    return this;
  }

  /**
   * Get paging
   * @return paging
   */
  @javax.annotation.Nonnull
  public Pagination getPaging() {
    return paging;
  }

  public void setPaging(Pagination paging) {
    this.paging = paging;
  }


  public ItemList parameter(String parameter) {
    this.parameter = parameter;
    return this;
  }

  /**
   * If this list is parameterized, then this contains the parameter of the list in the format &#x60;name:value&#x60;. For example the Movies Genre list will take a parameter &#x60;genre&#x60; with a given value. e.g. &#x60;genre:action&#x60; or &#x60;genre:drama&#x60;.
   * @return parameter
   */
  @javax.annotation.Nullable
  public String getParameter() {
    return parameter;
  }

  public void setParameter(String parameter) {
    this.parameter = parameter;
  }


  public ItemList path(String path) {
    this.path = path;
    return this;
  }

  /**
   * The path of this list
   * @return path
   */
  @javax.annotation.Nonnull
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public ItemList shortDescription(String shortDescription) {
    this.shortDescription = shortDescription;
    return this;
  }

  /**
   * A short description of this list.
   * @return shortDescription
   */
  @javax.annotation.Nullable
  public String getShortDescription() {
    return shortDescription;
  }

  public void setShortDescription(String shortDescription) {
    this.shortDescription = shortDescription;
  }


  public ItemList size(Integer size) {
    this.size = size;
    return this;
  }

  /**
   * The total size of the list
   * @return size
   */
  @javax.annotation.Nonnull
  public Integer getSize() {
    return size;
  }

  public void setSize(Integer size) {
    this.size = size;
  }


  public ItemList tagline(String tagline) {
    this.tagline = tagline;
    return this;
  }

  /**
   * The tagline of the item.
   * @return tagline
   */
  @javax.annotation.Nullable
  public String getTagline() {
    return tagline;
  }

  public void setTagline(String tagline) {
    this.tagline = tagline;
  }


  public ItemList themes(List<Theme> themes) {
    this.themes = themes;
    return this;
  }

  public ItemList addThemesItem(Theme themesItem) {
    if (this.themes == null) {
      this.themes = new ArrayList<>();
    }
    this.themes.add(themesItem);
    return this;
  }

  /**
   * Get themes
   * @return themes
   */
  @javax.annotation.Nullable
  public List<Theme> getThemes() {
    return themes;
  }

  public void setThemes(List<Theme> themes) {
    this.themes = themes;
  }


  public ItemList title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of this list
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemList itemList = (ItemList) o;
    return Objects.equals(this.customFields, itemList.customFields) &&
        Objects.equals(this.description, itemList.description) &&
        Objects.equals(this.id, itemList.id) &&
        Objects.equals(this.images, itemList.images) &&
        Objects.equals(this.itemTypes, itemList.itemTypes) &&
        Objects.equals(this.items, itemList.items) &&
        Objects.equals(this.listData, itemList.listData) &&
        Objects.equals(this.paging, itemList.paging) &&
        Objects.equals(this.parameter, itemList.parameter) &&
        Objects.equals(this.path, itemList.path) &&
        Objects.equals(this.shortDescription, itemList.shortDescription) &&
        Objects.equals(this.size, itemList.size) &&
        Objects.equals(this.tagline, itemList.tagline) &&
        Objects.equals(this.themes, itemList.themes) &&
        Objects.equals(this.title, itemList.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customFields, description, id, images, itemTypes, items, listData, paging, parameter, path, shortDescription, size, tagline, themes, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemList {\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    itemTypes: ").append(toIndentedString(itemTypes)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    listData: ").append(toIndentedString(listData)).append("\n");
    sb.append("    paging: ").append(toIndentedString(paging)).append("\n");
    sb.append("    parameter: ").append(toIndentedString(parameter)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    shortDescription: ").append(toIndentedString(shortDescription)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    tagline: ").append(toIndentedString(tagline)).append("\n");
    sb.append("    themes: ").append(toIndentedString(themes)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customFields");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("images");
    openapiFields.add("itemTypes");
    openapiFields.add("items");
    openapiFields.add("listData");
    openapiFields.add("paging");
    openapiFields.add("parameter");
    openapiFields.add("path");
    openapiFields.add("shortDescription");
    openapiFields.add("size");
    openapiFields.add("tagline");
    openapiFields.add("themes");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("items");
    openapiRequiredFields.add("paging");
    openapiRequiredFields.add("path");
    openapiRequiredFields.add("size");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ItemList
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ItemList.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemList is not found in the empty JSON string", ItemList.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ItemList.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemList` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ItemList.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("itemTypes") != null && !jsonObj.get("itemTypes").isJsonNull() && !jsonObj.get("itemTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemTypes` to be an array in the JSON string but got `%s`", jsonObj.get("itemTypes").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("items").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
      }

      JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
      // validate the required field `items` (array)
      for (int i = 0; i < jsonArrayitems.size(); i++) {
        ItemSummary.validateJsonElement(jsonArrayitems.get(i));
      };
      // validate the optional field `listData`
      if (jsonObj.get("listData") != null && !jsonObj.get("listData").isJsonNull()) {
        ListData.validateJsonElement(jsonObj.get("listData"));
      }
      // validate the required field `paging`
      Pagination.validateJsonElement(jsonObj.get("paging"));
      if ((jsonObj.get("parameter") != null && !jsonObj.get("parameter").isJsonNull()) && !jsonObj.get("parameter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parameter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parameter").toString()));
      }
      if (!jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("shortDescription") != null && !jsonObj.get("shortDescription").isJsonNull()) && !jsonObj.get("shortDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortDescription").toString()));
      }
      if ((jsonObj.get("tagline") != null && !jsonObj.get("tagline").isJsonNull()) && !jsonObj.get("tagline").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagline` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tagline").toString()));
      }
      if (jsonObj.get("themes") != null && !jsonObj.get("themes").isJsonNull()) {
        JsonArray jsonArraythemes = jsonObj.getAsJsonArray("themes");
        if (jsonArraythemes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("themes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `themes` to be an array in the JSON string but got `%s`", jsonObj.get("themes").toString()));
          }

          // validate the optional field `themes` (array)
          for (int i = 0; i < jsonArraythemes.size(); i++) {
            Theme.validateJsonElement(jsonArraythemes.get(i));
          };
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemList.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemList' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemList> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemList.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemList>() {
           @Override
           public void write(JsonWriter out, ItemList value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemList read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ItemList given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ItemList
   * @throws IOException if the JSON string is invalid with respect to ItemList
   */
  public static ItemList fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemList.class);
  }

  /**
   * Convert an instance of ItemList to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

