/*
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AppConfigPlayback
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:39.003134-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppConfigPlayback {
  public static final String SERIALIZED_NAME_CHAIN_PLAY_COUNTDOWN = "chainPlayCountdown";
  @SerializedName(SERIALIZED_NAME_CHAIN_PLAY_COUNTDOWN)
  private Integer chainPlayCountdown;

  public static final String SERIALIZED_NAME_CHAIN_PLAY_SQUEEZEBACK = "chainPlaySqueezeback";
  @SerializedName(SERIALIZED_NAME_CHAIN_PLAY_SQUEEZEBACK)
  private Integer chainPlaySqueezeback;

  public static final String SERIALIZED_NAME_CHAIN_PLAY_TIMEOUT = "chainPlayTimeout";
  @SerializedName(SERIALIZED_NAME_CHAIN_PLAY_TIMEOUT)
  private Integer chainPlayTimeout;

  public static final String SERIALIZED_NAME_HEARTBEAT_FREQUENCY = "heartbeatFrequency";
  @SerializedName(SERIALIZED_NAME_HEARTBEAT_FREQUENCY)
  private Integer heartbeatFrequency;

  public static final String SERIALIZED_NAME_VIEW_EVENT_POINTS = "viewEventPoints";
  @SerializedName(SERIALIZED_NAME_VIEW_EVENT_POINTS)
  private List<BigDecimal> viewEventPoints = new ArrayList<>();

  public AppConfigPlayback() {
  }

  public AppConfigPlayback chainPlayCountdown(Integer chainPlayCountdown) {
    this.chainPlayCountdown = chainPlayCountdown;
    return this;
  }

  /**
   * The number of seconds before autoplay of next video.  If set to 0 there will be no autoplay. 
   * @return chainPlayCountdown
   */
  @javax.annotation.Nonnull
  public Integer getChainPlayCountdown() {
    return chainPlayCountdown;
  }

  public void setChainPlayCountdown(Integer chainPlayCountdown) {
    this.chainPlayCountdown = chainPlayCountdown;
  }


  public AppConfigPlayback chainPlaySqueezeback(Integer chainPlaySqueezeback) {
    this.chainPlaySqueezeback = chainPlaySqueezeback;
    return this;
  }

  /**
   * The number of seconds before the end of playback when the current video should be minimized and user options are presented within the video player.  If set to 0 there will be no squeezeback. 
   * @return chainPlaySqueezeback
   */
  @javax.annotation.Nonnull
  public Integer getChainPlaySqueezeback() {
    return chainPlaySqueezeback;
  }

  public void setChainPlaySqueezeback(Integer chainPlaySqueezeback) {
    this.chainPlaySqueezeback = chainPlaySqueezeback;
  }


  public AppConfigPlayback chainPlayTimeout(Integer chainPlayTimeout) {
    this.chainPlayTimeout = chainPlayTimeout;
    return this;
  }

  /**
   * The number of minutes of user inactivity before autoplay is paused.  If set to 0 there will be no autoplay timeout. 
   * @return chainPlayTimeout
   */
  @javax.annotation.Nonnull
  public Integer getChainPlayTimeout() {
    return chainPlayTimeout;
  }

  public void setChainPlayTimeout(Integer chainPlayTimeout) {
    this.chainPlayTimeout = chainPlayTimeout;
  }


  public AppConfigPlayback heartbeatFrequency(Integer heartbeatFrequency) {
    this.heartbeatFrequency = heartbeatFrequency;
    return this;
  }

  /**
   * How often a heartbeat should be renewed during playback.
   * @return heartbeatFrequency
   */
  @javax.annotation.Nonnull
  public Integer getHeartbeatFrequency() {
    return heartbeatFrequency;
  }

  public void setHeartbeatFrequency(Integer heartbeatFrequency) {
    this.heartbeatFrequency = heartbeatFrequency;
  }


  public AppConfigPlayback viewEventPoints(List<BigDecimal> viewEventPoints) {
    this.viewEventPoints = viewEventPoints;
    return this;
  }

  public AppConfigPlayback addViewEventPointsItem(BigDecimal viewEventPointsItem) {
    if (this.viewEventPoints == null) {
      this.viewEventPoints = new ArrayList<>();
    }
    this.viewEventPoints.add(viewEventPointsItem);
    return this;
  }

  /**
   * An array of percentage points in which to fire off plabyack view events. For example a value of 0.5 would indicate that an event should be fired when the user is half way through the video. Often known as quartiles when four equaly spread event points. 
   * @return viewEventPoints
   */
  @javax.annotation.Nonnull
  public List<BigDecimal> getViewEventPoints() {
    return viewEventPoints;
  }

  public void setViewEventPoints(List<BigDecimal> viewEventPoints) {
    this.viewEventPoints = viewEventPoints;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppConfigPlayback appConfigPlayback = (AppConfigPlayback) o;
    return Objects.equals(this.chainPlayCountdown, appConfigPlayback.chainPlayCountdown) &&
        Objects.equals(this.chainPlaySqueezeback, appConfigPlayback.chainPlaySqueezeback) &&
        Objects.equals(this.chainPlayTimeout, appConfigPlayback.chainPlayTimeout) &&
        Objects.equals(this.heartbeatFrequency, appConfigPlayback.heartbeatFrequency) &&
        Objects.equals(this.viewEventPoints, appConfigPlayback.viewEventPoints);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chainPlayCountdown, chainPlaySqueezeback, chainPlayTimeout, heartbeatFrequency, viewEventPoints);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppConfigPlayback {\n");
    sb.append("    chainPlayCountdown: ").append(toIndentedString(chainPlayCountdown)).append("\n");
    sb.append("    chainPlaySqueezeback: ").append(toIndentedString(chainPlaySqueezeback)).append("\n");
    sb.append("    chainPlayTimeout: ").append(toIndentedString(chainPlayTimeout)).append("\n");
    sb.append("    heartbeatFrequency: ").append(toIndentedString(heartbeatFrequency)).append("\n");
    sb.append("    viewEventPoints: ").append(toIndentedString(viewEventPoints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chainPlayCountdown");
    openapiFields.add("chainPlaySqueezeback");
    openapiFields.add("chainPlayTimeout");
    openapiFields.add("heartbeatFrequency");
    openapiFields.add("viewEventPoints");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("chainPlayCountdown");
    openapiRequiredFields.add("chainPlaySqueezeback");
    openapiRequiredFields.add("chainPlayTimeout");
    openapiRequiredFields.add("heartbeatFrequency");
    openapiRequiredFields.add("viewEventPoints");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppConfigPlayback
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppConfigPlayback.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppConfigPlayback is not found in the empty JSON string", AppConfigPlayback.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppConfigPlayback.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppConfigPlayback` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AppConfigPlayback.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("viewEventPoints") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("viewEventPoints").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `viewEventPoints` to be an array in the JSON string but got `%s`", jsonObj.get("viewEventPoints").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppConfigPlayback.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppConfigPlayback' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppConfigPlayback> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppConfigPlayback.class));

       return (TypeAdapter<T>) new TypeAdapter<AppConfigPlayback>() {
           @Override
           public void write(JsonWriter out, AppConfigPlayback value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppConfigPlayback read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppConfigPlayback given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppConfigPlayback
   * @throws IOException if the JSON string is invalid with respect to AppConfigPlayback
   */
  public static AppConfigPlayback fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppConfigPlayback.class);
  }

  /**
   * Convert an instance of AppConfigPlayback to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

