/*
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Address;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountUpdateRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:39.003134-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountUpdateRequest {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address address;

  public static final String SERIALIZED_NAME_DEFAULT_PAYMENT_INSTRUMENT_ID = "defaultPaymentInstrumentId";
  @SerializedName(SERIALIZED_NAME_DEFAULT_PAYMENT_INSTRUMENT_ID)
  private String defaultPaymentInstrumentId;

  public static final String SERIALIZED_NAME_DEFAULT_PAYMENT_METHOD_ID = "defaultPaymentMethodId";
  @SerializedName(SERIALIZED_NAME_DEFAULT_PAYMENT_METHOD_ID)
  private String defaultPaymentMethodId;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_MIN_RATING_PLAYBACK_GUARD = "minRatingPlaybackGuard";
  @SerializedName(SERIALIZED_NAME_MIN_RATING_PLAYBACK_GUARD)
  private String minRatingPlaybackGuard;

  public static final String SERIALIZED_NAME_SEGMENTS = "segments";
  @SerializedName(SERIALIZED_NAME_SEGMENTS)
  private List<String> segments = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRACKING_ENABLED = "trackingEnabled";
  @SerializedName(SERIALIZED_NAME_TRACKING_ENABLED)
  private Boolean trackingEnabled;

  public AccountUpdateRequest() {
  }

  public AccountUpdateRequest address(Address address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public Address getAddress() {
    return address;
  }

  public void setAddress(Address address) {
    this.address = address;
  }


  public AccountUpdateRequest defaultPaymentInstrumentId(String defaultPaymentInstrumentId) {
    this.defaultPaymentInstrumentId = defaultPaymentInstrumentId;
    return this;
  }

  /**
   * The id of the payment instrument to use by default for account transactions.  **DEPRECATED** The property &#x60;defaultPaymentMethodId&#x60; is now preferred. 
   * @return defaultPaymentInstrumentId
   */
  @javax.annotation.Nullable
  public String getDefaultPaymentInstrumentId() {
    return defaultPaymentInstrumentId;
  }

  public void setDefaultPaymentInstrumentId(String defaultPaymentInstrumentId) {
    this.defaultPaymentInstrumentId = defaultPaymentInstrumentId;
  }


  public AccountUpdateRequest defaultPaymentMethodId(String defaultPaymentMethodId) {
    this.defaultPaymentMethodId = defaultPaymentMethodId;
    return this;
  }

  /**
   * The id of the payment method to use by default for account transactions.
   * @return defaultPaymentMethodId
   */
  @javax.annotation.Nullable
  public String getDefaultPaymentMethodId() {
    return defaultPaymentMethodId;
  }

  public void setDefaultPaymentMethodId(String defaultPaymentMethodId) {
    this.defaultPaymentMethodId = defaultPaymentMethodId;
  }


  public AccountUpdateRequest firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * The first name of the account holder.
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public AccountUpdateRequest lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * The last name of the account holder.
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public AccountUpdateRequest minRatingPlaybackGuard(String minRatingPlaybackGuard) {
    this.minRatingPlaybackGuard = minRatingPlaybackGuard;
    return this;
  }

  /**
   * The classification rating defining the minimum rating level a user should be forced to enter the account pin code for playback. Anything at this rating level or above will require the pin for playback.  e.g. AUOFLC-MA15+  If you want to disable this guard pass an empty string or &#x60;null&#x60;. 
   * @return minRatingPlaybackGuard
   */
  @javax.annotation.Nullable
  public String getMinRatingPlaybackGuard() {
    return minRatingPlaybackGuard;
  }

  public void setMinRatingPlaybackGuard(String minRatingPlaybackGuard) {
    this.minRatingPlaybackGuard = minRatingPlaybackGuard;
  }


  public AccountUpdateRequest segments(List<String> segments) {
    this.segments = segments;
    return this;
  }

  public AccountUpdateRequest addSegmentsItem(String segmentsItem) {
    if (this.segments == null) {
      this.segments = new ArrayList<>();
    }
    this.segments.add(segmentsItem);
    return this;
  }

  /**
   * The segments an account should be placed under
   * @return segments
   */
  @javax.annotation.Nullable
  public List<String> getSegments() {
    return segments;
  }

  public void setSegments(List<String> segments) {
    this.segments = segments;
  }


  public AccountUpdateRequest trackingEnabled(Boolean trackingEnabled) {
    this.trackingEnabled = trackingEnabled;
    return this;
  }

  /**
   * Whether usage tracking is associated with an account or anonymous.
   * @return trackingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getTrackingEnabled() {
    return trackingEnabled;
  }

  public void setTrackingEnabled(Boolean trackingEnabled) {
    this.trackingEnabled = trackingEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountUpdateRequest accountUpdateRequest = (AccountUpdateRequest) o;
    return Objects.equals(this.address, accountUpdateRequest.address) &&
        Objects.equals(this.defaultPaymentInstrumentId, accountUpdateRequest.defaultPaymentInstrumentId) &&
        Objects.equals(this.defaultPaymentMethodId, accountUpdateRequest.defaultPaymentMethodId) &&
        Objects.equals(this.firstName, accountUpdateRequest.firstName) &&
        Objects.equals(this.lastName, accountUpdateRequest.lastName) &&
        Objects.equals(this.minRatingPlaybackGuard, accountUpdateRequest.minRatingPlaybackGuard) &&
        Objects.equals(this.segments, accountUpdateRequest.segments) &&
        Objects.equals(this.trackingEnabled, accountUpdateRequest.trackingEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, defaultPaymentInstrumentId, defaultPaymentMethodId, firstName, lastName, minRatingPlaybackGuard, segments, trackingEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountUpdateRequest {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    defaultPaymentInstrumentId: ").append(toIndentedString(defaultPaymentInstrumentId)).append("\n");
    sb.append("    defaultPaymentMethodId: ").append(toIndentedString(defaultPaymentMethodId)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    minRatingPlaybackGuard: ").append(toIndentedString(minRatingPlaybackGuard)).append("\n");
    sb.append("    segments: ").append(toIndentedString(segments)).append("\n");
    sb.append("    trackingEnabled: ").append(toIndentedString(trackingEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("defaultPaymentInstrumentId");
    openapiFields.add("defaultPaymentMethodId");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("minRatingPlaybackGuard");
    openapiFields.add("segments");
    openapiFields.add("trackingEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountUpdateRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountUpdateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountUpdateRequest is not found in the empty JSON string", AccountUpdateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountUpdateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountUpdateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("address"));
      }
      if ((jsonObj.get("defaultPaymentInstrumentId") != null && !jsonObj.get("defaultPaymentInstrumentId").isJsonNull()) && !jsonObj.get("defaultPaymentInstrumentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultPaymentInstrumentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultPaymentInstrumentId").toString()));
      }
      if ((jsonObj.get("defaultPaymentMethodId") != null && !jsonObj.get("defaultPaymentMethodId").isJsonNull()) && !jsonObj.get("defaultPaymentMethodId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultPaymentMethodId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultPaymentMethodId").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("minRatingPlaybackGuard") != null && !jsonObj.get("minRatingPlaybackGuard").isJsonNull()) && !jsonObj.get("minRatingPlaybackGuard").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minRatingPlaybackGuard` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minRatingPlaybackGuard").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("segments") != null && !jsonObj.get("segments").isJsonNull() && !jsonObj.get("segments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `segments` to be an array in the JSON string but got `%s`", jsonObj.get("segments").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountUpdateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountUpdateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountUpdateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountUpdateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountUpdateRequest>() {
           @Override
           public void write(JsonWriter out, AccountUpdateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountUpdateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountUpdateRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountUpdateRequest
   * @throws IOException if the JSON string is invalid with respect to AccountUpdateRequest
   */
  public static AccountUpdateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountUpdateRequest.class);
  }

  /**
   * Convert an instance of AccountUpdateRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

