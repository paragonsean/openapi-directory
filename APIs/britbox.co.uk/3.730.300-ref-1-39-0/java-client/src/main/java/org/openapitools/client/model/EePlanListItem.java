/*
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EePlanListItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:39.003134-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EePlanListItem {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Float amount;

  public static final String SERIALIZED_NAME_CTA_TEXT = "ctaText";
  @SerializedName(SERIALIZED_NAME_CTA_TEXT)
  private String ctaText;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HEADER_TEXT = "headerText";
  @SerializedName(SERIALIZED_NAME_HEADER_TEXT)
  private String headerText;

  public static final String SERIALIZED_NAME_HERO_TEXT = "heroText";
  @SerializedName(SERIALIZED_NAME_HERO_TEXT)
  private String heroText;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * The type of billing period used.
   */
  @JsonAdapter(IntervalEnum.Adapter.class)
  public enum IntervalEnum {
    DAY("day"),
    
    WEEK("week"),
    
    MONTH("month"),
    
    YEAR("year"),
    
    NONE("none");

    private String value;

    IntervalEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IntervalEnum fromValue(String value) {
      for (IntervalEnum b : IntervalEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IntervalEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IntervalEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IntervalEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IntervalEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IntervalEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private IntervalEnum interval;

  public static final String SERIALIZED_NAME_INTERVAL_COUNT = "intervalCount";
  @SerializedName(SERIALIZED_NAME_INTERVAL_COUNT)
  private Integer intervalCount;

  public static final String SERIALIZED_NAME_LONG_TEXT = "longText";
  @SerializedName(SERIALIZED_NAME_LONG_TEXT)
  private String longText;

  public static final String SERIALIZED_NAME_NICKNAME = "nickname";
  @SerializedName(SERIALIZED_NAME_NICKNAME)
  private String nickname;

  public static final String SERIALIZED_NAME_PRODUCT = "product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  private String product;

  public static final String SERIALIZED_NAME_TRIAL_PERIOD_DAYS = "trialPeriodDays";
  @SerializedName(SERIALIZED_NAME_TRIAL_PERIOD_DAYS)
  private Integer trialPeriodDays;

  public EePlanListItem() {
  }

  public EePlanListItem amount(Float amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The price of a plan. If a free plan then undefined.
   * @return amount
   */
  @javax.annotation.Nullable
  public Float getAmount() {
    return amount;
  }

  public void setAmount(Float amount) {
    this.amount = amount;
  }


  public EePlanListItem ctaText(String ctaText) {
    this.ctaText = ctaText;
    return this;
  }

  /**
   * The textual description.
   * @return ctaText
   */
  @javax.annotation.Nonnull
  public String getCtaText() {
    return ctaText;
  }

  public void setCtaText(String ctaText) {
    this.ctaText = ctaText;
  }


  public EePlanListItem currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * The currency a plan is offered in.
   * @return currency
   */
  @javax.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public EePlanListItem description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The textual description.
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public EePlanListItem headerText(String headerText) {
    this.headerText = headerText;
    return this;
  }

  /**
   * The textual description.
   * @return headerText
   */
  @javax.annotation.Nonnull
  public String getHeaderText() {
    return headerText;
  }

  public void setHeaderText(String headerText) {
    this.headerText = headerText;
  }


  public EePlanListItem heroText(String heroText) {
    this.heroText = heroText;
    return this;
  }

  /**
   * The textual description.
   * @return heroText
   */
  @javax.annotation.Nonnull
  public String getHeroText() {
    return heroText;
  }

  public void setHeroText(String heroText) {
    this.heroText = heroText;
  }


  public EePlanListItem id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The identifier of a plan.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public EePlanListItem interval(IntervalEnum interval) {
    this.interval = interval;
    return this;
  }

  /**
   * The type of billing period used.
   * @return interval
   */
  @javax.annotation.Nullable
  public IntervalEnum getInterval() {
    return interval;
  }

  public void setInterval(IntervalEnum interval) {
    this.interval = interval;
  }


  public EePlanListItem intervalCount(Integer intervalCount) {
    this.intervalCount = intervalCount;
    return this;
  }

  /**
   * Given the &#x60;interval&#x60; this is how frequently it will run. e.g. every 2 weeks.
   * @return intervalCount
   */
  @javax.annotation.Nullable
  public Integer getIntervalCount() {
    return intervalCount;
  }

  public void setIntervalCount(Integer intervalCount) {
    this.intervalCount = intervalCount;
  }


  public EePlanListItem longText(String longText) {
    this.longText = longText;
    return this;
  }

  /**
   * The textual description.
   * @return longText
   */
  @javax.annotation.Nonnull
  public String getLongText() {
    return longText;
  }

  public void setLongText(String longText) {
    this.longText = longText;
  }


  public EePlanListItem nickname(String nickname) {
    this.nickname = nickname;
    return this;
  }

  /**
   * The title of a plan.
   * @return nickname
   */
  @javax.annotation.Nonnull
  public String getNickname() {
    return nickname;
  }

  public void setNickname(String nickname) {
    this.nickname = nickname;
  }


  public EePlanListItem product(String product) {
    this.product = product;
    return this;
  }

  /**
   * The product of a plan.
   * @return product
   */
  @javax.annotation.Nonnull
  public String getProduct() {
    return product;
  }

  public void setProduct(String product) {
    this.product = product;
  }


  public EePlanListItem trialPeriodDays(Integer trialPeriodDays) {
    this.trialPeriodDays = trialPeriodDays;
    return this;
  }

  /**
   * How many days a trial period runs for a plan. Only valid if &#x60;hasTrialPeriod&#x60; is true.
   * @return trialPeriodDays
   */
  @javax.annotation.Nonnull
  public Integer getTrialPeriodDays() {
    return trialPeriodDays;
  }

  public void setTrialPeriodDays(Integer trialPeriodDays) {
    this.trialPeriodDays = trialPeriodDays;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EePlanListItem eePlanListItem = (EePlanListItem) o;
    return Objects.equals(this.amount, eePlanListItem.amount) &&
        Objects.equals(this.ctaText, eePlanListItem.ctaText) &&
        Objects.equals(this.currency, eePlanListItem.currency) &&
        Objects.equals(this.description, eePlanListItem.description) &&
        Objects.equals(this.headerText, eePlanListItem.headerText) &&
        Objects.equals(this.heroText, eePlanListItem.heroText) &&
        Objects.equals(this.id, eePlanListItem.id) &&
        Objects.equals(this.interval, eePlanListItem.interval) &&
        Objects.equals(this.intervalCount, eePlanListItem.intervalCount) &&
        Objects.equals(this.longText, eePlanListItem.longText) &&
        Objects.equals(this.nickname, eePlanListItem.nickname) &&
        Objects.equals(this.product, eePlanListItem.product) &&
        Objects.equals(this.trialPeriodDays, eePlanListItem.trialPeriodDays);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, ctaText, currency, description, headerText, heroText, id, interval, intervalCount, longText, nickname, product, trialPeriodDays);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EePlanListItem {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    ctaText: ").append(toIndentedString(ctaText)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    headerText: ").append(toIndentedString(headerText)).append("\n");
    sb.append("    heroText: ").append(toIndentedString(heroText)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    intervalCount: ").append(toIndentedString(intervalCount)).append("\n");
    sb.append("    longText: ").append(toIndentedString(longText)).append("\n");
    sb.append("    nickname: ").append(toIndentedString(nickname)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    trialPeriodDays: ").append(toIndentedString(trialPeriodDays)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("ctaText");
    openapiFields.add("currency");
    openapiFields.add("description");
    openapiFields.add("headerText");
    openapiFields.add("heroText");
    openapiFields.add("id");
    openapiFields.add("interval");
    openapiFields.add("intervalCount");
    openapiFields.add("longText");
    openapiFields.add("nickname");
    openapiFields.add("product");
    openapiFields.add("trialPeriodDays");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ctaText");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("headerText");
    openapiRequiredFields.add("heroText");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("longText");
    openapiRequiredFields.add("nickname");
    openapiRequiredFields.add("product");
    openapiRequiredFields.add("trialPeriodDays");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EePlanListItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EePlanListItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EePlanListItem is not found in the empty JSON string", EePlanListItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EePlanListItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EePlanListItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EePlanListItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ctaText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ctaText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ctaText").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("headerText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `headerText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("headerText").toString()));
      }
      if (!jsonObj.get("heroText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `heroText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("heroText").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("interval") != null && !jsonObj.get("interval").isJsonNull()) && !jsonObj.get("interval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interval").toString()));
      }
      // validate the optional field `interval`
      if (jsonObj.get("interval") != null && !jsonObj.get("interval").isJsonNull()) {
        IntervalEnum.validateJsonElement(jsonObj.get("interval"));
      }
      if (!jsonObj.get("longText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `longText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("longText").toString()));
      }
      if (!jsonObj.get("nickname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nickname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nickname").toString()));
      }
      if (!jsonObj.get("product").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EePlanListItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EePlanListItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EePlanListItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EePlanListItem.class));

       return (TypeAdapter<T>) new TypeAdapter<EePlanListItem>() {
           @Override
           public void write(JsonWriter out, EePlanListItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EePlanListItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EePlanListItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EePlanListItem
   * @throws IOException if the JSON string is invalid with respect to EePlanListItem
   */
  public static EePlanListItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EePlanListItem.class);
  }

  /**
   * Convert an instance of EePlanListItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

