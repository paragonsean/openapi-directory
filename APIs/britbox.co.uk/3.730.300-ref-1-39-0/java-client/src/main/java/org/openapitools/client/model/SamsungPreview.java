/*
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SamsungPreviewSection;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SamsungPreview
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:39.003134-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SamsungPreview {
  public static final String SERIALIZED_NAME_EXPIRES = "expires";
  @SerializedName(SERIALIZED_NAME_EXPIRES)
  private Long expires;

  public static final String SERIALIZED_NAME_EXPIRES_ONLY = "expires_only";
  @SerializedName(SERIALIZED_NAME_EXPIRES_ONLY)
  private Boolean expiresOnly = false;

  public static final String SERIALIZED_NAME_SECTIONS = "sections";
  @SerializedName(SERIALIZED_NAME_SECTIONS)
  private List<SamsungPreviewSection> sections = new ArrayList<>();

  public SamsungPreview() {
  }

  public SamsungPreview expires(Long expires) {
    this.expires = expires;
    return this;
  }

  /**
   * For public preview only If specified, the time at which the preview content is updated. The time is at most 1 week into the future. By default, the preview content is updated every 10 minutes, whenever the TV is switched on, or the JSON file changes. 
   * @return expires
   */
  @javax.annotation.Nullable
  public Long getExpires() {
    return expires;
  }

  public void setExpires(Long expires) {
    this.expires = expires;
  }


  public SamsungPreview expiresOnly(Boolean expiresOnly) {
    this.expiresOnly = expiresOnly;
    return this;
  }

  /**
   * For public preview only If this value is \&quot;true\&quot;, the preview content is updated only at the time specified by the \&quot;expires\&quot; parameter. 
   * @return expiresOnly
   */
  @javax.annotation.Nullable
  public Boolean getExpiresOnly() {
    return expiresOnly;
  }

  public void setExpiresOnly(Boolean expiresOnly) {
    this.expiresOnly = expiresOnly;
  }


  public SamsungPreview sections(List<SamsungPreviewSection> sections) {
    this.sections = sections;
    return this;
  }

  public SamsungPreview addSectionsItem(SamsungPreviewSection sectionsItem) {
    if (this.sections == null) {
      this.sections = new ArrayList<>();
    }
    this.sections.add(sectionsItem);
    return this;
  }

  /**
   * Preview sections
   * @return sections
   */
  @javax.annotation.Nonnull
  public List<SamsungPreviewSection> getSections() {
    return sections;
  }

  public void setSections(List<SamsungPreviewSection> sections) {
    this.sections = sections;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SamsungPreview samsungPreview = (SamsungPreview) o;
    return Objects.equals(this.expires, samsungPreview.expires) &&
        Objects.equals(this.expiresOnly, samsungPreview.expiresOnly) &&
        Objects.equals(this.sections, samsungPreview.sections);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expires, expiresOnly, sections);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SamsungPreview {\n");
    sb.append("    expires: ").append(toIndentedString(expires)).append("\n");
    sb.append("    expiresOnly: ").append(toIndentedString(expiresOnly)).append("\n");
    sb.append("    sections: ").append(toIndentedString(sections)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("expires");
    openapiFields.add("expires_only");
    openapiFields.add("sections");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sections");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SamsungPreview
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SamsungPreview.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SamsungPreview is not found in the empty JSON string", SamsungPreview.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SamsungPreview.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SamsungPreview` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SamsungPreview.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("sections").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sections` to be an array in the JSON string but got `%s`", jsonObj.get("sections").toString()));
      }

      JsonArray jsonArraysections = jsonObj.getAsJsonArray("sections");
      // validate the required field `sections` (array)
      for (int i = 0; i < jsonArraysections.size(); i++) {
        SamsungPreviewSection.validateJsonElement(jsonArraysections.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SamsungPreview.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SamsungPreview' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SamsungPreview> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SamsungPreview.class));

       return (TypeAdapter<T>) new TypeAdapter<SamsungPreview>() {
           @Override
           public void write(JsonWriter out, SamsungPreview value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SamsungPreview read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SamsungPreview given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SamsungPreview
   * @throws IOException if the JSON string is invalid with respect to SamsungPreview
   */
  public static SamsungPreview fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SamsungPreview.class);
  }

  /**
   * Convert an instance of SamsungPreview to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

