/*
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SamsungPreviewSectionTile
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:39.003134-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SamsungPreviewSectionTile {
  public static final String SERIALIZED_NAME_ACTION_DATA = "action_data";
  @SerializedName(SERIALIZED_NAME_ACTION_DATA)
  private String actionData;

  public static final String SERIALIZED_NAME_DISPLAY_FROM = "display_from";
  @SerializedName(SERIALIZED_NAME_DISPLAY_FROM)
  private OffsetDateTime displayFrom;

  public static final String SERIALIZED_NAME_DISPLAY_UNTIL = "display_until";
  @SerializedName(SERIALIZED_NAME_DISPLAY_UNTIL)
  private OffsetDateTime displayUntil;

  public static final String SERIALIZED_NAME_IMAGE_RATIO = "image_ratio";
  @SerializedName(SERIALIZED_NAME_IMAGE_RATIO)
  private String imageRatio;

  public static final String SERIALIZED_NAME_IMAGE_URL = "image_url";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private URI imageUrl;

  public static final String SERIALIZED_NAME_IS_PLAYABLE = "is_playable";
  @SerializedName(SERIALIZED_NAME_IS_PLAYABLE)
  private Boolean isPlayable;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private Integer position;

  public static final String SERIALIZED_NAME_SUBTITLE = "subtitle";
  @SerializedName(SERIALIZED_NAME_SUBTITLE)
  private String subtitle;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public SamsungPreviewSectionTile() {
  }

  public SamsungPreviewSectionTile actionData(String actionData) {
    this.actionData = actionData;
    return this;
  }

  /**
   * Data to send to the application when the tile is clicked
   * @return actionData
   */
  @javax.annotation.Nonnull
  public String getActionData() {
    return actionData;
  }

  public void setActionData(String actionData) {
    this.actionData = actionData;
  }


  public SamsungPreviewSectionTile displayFrom(OffsetDateTime displayFrom) {
    this.displayFrom = displayFrom;
    return this;
  }

  /**
   * Time to begin showing the tile
   * @return displayFrom
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDisplayFrom() {
    return displayFrom;
  }

  public void setDisplayFrom(OffsetDateTime displayFrom) {
    this.displayFrom = displayFrom;
  }


  public SamsungPreviewSectionTile displayUntil(OffsetDateTime displayUntil) {
    this.displayUntil = displayUntil;
    return this;
  }

  /**
   * Time to stop showing the tile
   * @return displayUntil
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDisplayUntil() {
    return displayUntil;
  }

  public void setDisplayUntil(OffsetDateTime displayUntil) {
    this.displayUntil = displayUntil;
  }


  public SamsungPreviewSectionTile imageRatio(String imageRatio) {
    this.imageRatio = imageRatio;
    return this;
  }

  /**
   * Thumbnail image aspect ratio   \&quot;16:9\&quot;   \&quot;4:3\&quot;   \&quot;1:1\&quot; (default)   \&quot;2:3\&quot;   The thumbnail height is fixed at 250 px on presentation. 
   * @return imageRatio
   */
  @javax.annotation.Nonnull
  public String getImageRatio() {
    return imageRatio;
  }

  public void setImageRatio(String imageRatio) {
    this.imageRatio = imageRatio;
  }


  public SamsungPreviewSectionTile imageUrl(URI imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Thumbnail image URL
   * @return imageUrl
   */
  @javax.annotation.Nonnull
  public URI getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(URI imageUrl) {
    this.imageUrl = imageUrl;
  }


  public SamsungPreviewSectionTile isPlayable(Boolean isPlayable) {
    this.isPlayable = isPlayable;
    return this;
  }

  /**
   * If \&quot;true\&quot;, a \&quot;Play\&quot; icon is shown over the thumbnail image
   * @return isPlayable
   */
  @javax.annotation.Nonnull
  public Boolean getIsPlayable() {
    return isPlayable;
  }

  public void setIsPlayable(Boolean isPlayable) {
    this.isPlayable = isPlayable;
  }


  public SamsungPreviewSectionTile position(Integer position) {
    this.position = position;
    return this;
  }

  /**
   * Section position. If specified, sections are shown in ascending position order
   * @return position
   */
  @javax.annotation.Nullable
  public Integer getPosition() {
    return position;
  }

  public void setPosition(Integer position) {
    this.position = position;
  }


  public SamsungPreviewSectionTile subtitle(String subtitle) {
    this.subtitle = subtitle;
    return this;
  }

  /**
   * Tile subtitle
   * @return subtitle
   */
  @javax.annotation.Nullable
  public String getSubtitle() {
    return subtitle;
  }

  public void setSubtitle(String subtitle) {
    this.subtitle = subtitle;
  }


  public SamsungPreviewSectionTile title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Tile title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SamsungPreviewSectionTile samsungPreviewSectionTile = (SamsungPreviewSectionTile) o;
    return Objects.equals(this.actionData, samsungPreviewSectionTile.actionData) &&
        Objects.equals(this.displayFrom, samsungPreviewSectionTile.displayFrom) &&
        Objects.equals(this.displayUntil, samsungPreviewSectionTile.displayUntil) &&
        Objects.equals(this.imageRatio, samsungPreviewSectionTile.imageRatio) &&
        Objects.equals(this.imageUrl, samsungPreviewSectionTile.imageUrl) &&
        Objects.equals(this.isPlayable, samsungPreviewSectionTile.isPlayable) &&
        Objects.equals(this.position, samsungPreviewSectionTile.position) &&
        Objects.equals(this.subtitle, samsungPreviewSectionTile.subtitle) &&
        Objects.equals(this.title, samsungPreviewSectionTile.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionData, displayFrom, displayUntil, imageRatio, imageUrl, isPlayable, position, subtitle, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SamsungPreviewSectionTile {\n");
    sb.append("    actionData: ").append(toIndentedString(actionData)).append("\n");
    sb.append("    displayFrom: ").append(toIndentedString(displayFrom)).append("\n");
    sb.append("    displayUntil: ").append(toIndentedString(displayUntil)).append("\n");
    sb.append("    imageRatio: ").append(toIndentedString(imageRatio)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    isPlayable: ").append(toIndentedString(isPlayable)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    subtitle: ").append(toIndentedString(subtitle)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action_data");
    openapiFields.add("display_from");
    openapiFields.add("display_until");
    openapiFields.add("image_ratio");
    openapiFields.add("image_url");
    openapiFields.add("is_playable");
    openapiFields.add("position");
    openapiFields.add("subtitle");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("action_data");
    openapiRequiredFields.add("image_ratio");
    openapiRequiredFields.add("image_url");
    openapiRequiredFields.add("is_playable");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SamsungPreviewSectionTile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SamsungPreviewSectionTile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SamsungPreviewSectionTile is not found in the empty JSON string", SamsungPreviewSectionTile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SamsungPreviewSectionTile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SamsungPreviewSectionTile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SamsungPreviewSectionTile.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("action_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action_data").toString()));
      }
      if (!jsonObj.get("image_ratio").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_ratio` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_ratio").toString()));
      }
      if (!jsonObj.get("image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_url").toString()));
      }
      if ((jsonObj.get("subtitle") != null && !jsonObj.get("subtitle").isJsonNull()) && !jsonObj.get("subtitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subtitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subtitle").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SamsungPreviewSectionTile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SamsungPreviewSectionTile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SamsungPreviewSectionTile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SamsungPreviewSectionTile.class));

       return (TypeAdapter<T>) new TypeAdapter<SamsungPreviewSectionTile>() {
           @Override
           public void write(JsonWriter out, SamsungPreviewSectionTile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SamsungPreviewSectionTile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SamsungPreviewSectionTile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SamsungPreviewSectionTile
   * @throws IOException if the JSON string is invalid with respect to SamsungPreviewSectionTile
   */
  public static SamsungPreviewSectionTile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SamsungPreviewSectionTile.class);
  }

  /**
   * Convert an instance of SamsungPreviewSectionTile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

