/*
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ItemDetail;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NextPlaybackItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:39.003134-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NextPlaybackItem {
  public static final String SERIALIZED_NAME_FIRST_WATCHED_DATE = "firstWatchedDate";
  @SerializedName(SERIALIZED_NAME_FIRST_WATCHED_DATE)
  private OffsetDateTime firstWatchedDate;

  public static final String SERIALIZED_NAME_LAST_WATCHED_DATE = "lastWatchedDate";
  @SerializedName(SERIALIZED_NAME_LAST_WATCHED_DATE)
  private OffsetDateTime lastWatchedDate;

  public static final String SERIALIZED_NAME_NEXT = "next";
  @SerializedName(SERIALIZED_NAME_NEXT)
  private ItemDetail next;

  public static final String SERIALIZED_NAME_SOURCE_ITEM_ID = "sourceItemId";
  @SerializedName(SERIALIZED_NAME_SOURCE_ITEM_ID)
  private String sourceItemId;

  /**
   * Field indicating the type or reason behind the suggestion.  Id Type   | Show Watched Status| Value            | Description ----------|--------------------|------------------|--------------------------------- showId    | Unwatched          | StartWatching    | showId    | Completely watched | RestartWatching  | showId    | Partly watched     | ContinueWatching | Suggested episode partly watched showId    | Partly watched     | Sequential       | Suggested episode unwatched episodeId | Any                | Sequential       | Next episode in show 
   */
  @JsonAdapter(SuggestionTypeEnum.Adapter.class)
  public enum SuggestionTypeEnum {
    START_WATCHING("StartWatching"),
    
    CONTINUE_WATCHING("ContinueWatching"),
    
    RESTART_WATCHING("RestartWatching"),
    
    SEQUENTIAL("Sequential"),
    
    NONE("None");

    private String value;

    SuggestionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SuggestionTypeEnum fromValue(String value) {
      for (SuggestionTypeEnum b : SuggestionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SuggestionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SuggestionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SuggestionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SuggestionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SuggestionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUGGESTION_TYPE = "suggestionType";
  @SerializedName(SERIALIZED_NAME_SUGGESTION_TYPE)
  private SuggestionTypeEnum suggestionType;

  public NextPlaybackItem() {
  }

  public NextPlaybackItem firstWatchedDate(OffsetDateTime firstWatchedDate) {
    this.firstWatchedDate = firstWatchedDate;
    return this;
  }

  /**
   * Time when the item corresponding to the itemId passed in by the client was first watched by the user. Will be &#x60;undefined&#x60; if the user has never watched the item.  It can be used to identify the scenario where the user has never watched a show and we are suggesting they watch the first episode (i.e. it is missing in this scenario)  **This will only be populated when a &#x60;showId&#x60; is passed in** 
   * @return firstWatchedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFirstWatchedDate() {
    return firstWatchedDate;
  }

  public void setFirstWatchedDate(OffsetDateTime firstWatchedDate) {
    this.firstWatchedDate = firstWatchedDate;
  }


  public NextPlaybackItem lastWatchedDate(OffsetDateTime lastWatchedDate) {
    this.lastWatchedDate = lastWatchedDate;
    return this;
  }

  /**
   * Time when the item corresponding to the itemId passed in by the client was last watched by the user. Will be &#x60;undefined&#x60; if the user has never watched the item.  It can be used to identify the scenario where the user has never watched a show and we are suggesting they watch the first episode (i.e. it is missing in this scenario)  **This will only be populated when a &#x60;showId&#x60; is passed in** 
   * @return lastWatchedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastWatchedDate() {
    return lastWatchedDate;
  }

  public void setLastWatchedDate(OffsetDateTime lastWatchedDate) {
    this.lastWatchedDate = lastWatchedDate;
  }


  public NextPlaybackItem next(ItemDetail next) {
    this.next = next;
    return this;
  }

  /**
   * Get next
   * @return next
   */
  @javax.annotation.Nullable
  public ItemDetail getNext() {
    return next;
  }

  public void setNext(ItemDetail next) {
    this.next = next;
  }


  public NextPlaybackItem sourceItemId(String sourceItemId) {
    this.sourceItemId = sourceItemId;
    return this;
  }

  /**
   * The id of the item used to determine the next item to play.
   * @return sourceItemId
   */
  @javax.annotation.Nonnull
  public String getSourceItemId() {
    return sourceItemId;
  }

  public void setSourceItemId(String sourceItemId) {
    this.sourceItemId = sourceItemId;
  }


  public NextPlaybackItem suggestionType(SuggestionTypeEnum suggestionType) {
    this.suggestionType = suggestionType;
    return this;
  }

  /**
   * Field indicating the type or reason behind the suggestion.  Id Type   | Show Watched Status| Value            | Description ----------|--------------------|------------------|--------------------------------- showId    | Unwatched          | StartWatching    | showId    | Completely watched | RestartWatching  | showId    | Partly watched     | ContinueWatching | Suggested episode partly watched showId    | Partly watched     | Sequential       | Suggested episode unwatched episodeId | Any                | Sequential       | Next episode in show 
   * @return suggestionType
   */
  @javax.annotation.Nullable
  public SuggestionTypeEnum getSuggestionType() {
    return suggestionType;
  }

  public void setSuggestionType(SuggestionTypeEnum suggestionType) {
    this.suggestionType = suggestionType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NextPlaybackItem nextPlaybackItem = (NextPlaybackItem) o;
    return Objects.equals(this.firstWatchedDate, nextPlaybackItem.firstWatchedDate) &&
        Objects.equals(this.lastWatchedDate, nextPlaybackItem.lastWatchedDate) &&
        Objects.equals(this.next, nextPlaybackItem.next) &&
        Objects.equals(this.sourceItemId, nextPlaybackItem.sourceItemId) &&
        Objects.equals(this.suggestionType, nextPlaybackItem.suggestionType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstWatchedDate, lastWatchedDate, next, sourceItemId, suggestionType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NextPlaybackItem {\n");
    sb.append("    firstWatchedDate: ").append(toIndentedString(firstWatchedDate)).append("\n");
    sb.append("    lastWatchedDate: ").append(toIndentedString(lastWatchedDate)).append("\n");
    sb.append("    next: ").append(toIndentedString(next)).append("\n");
    sb.append("    sourceItemId: ").append(toIndentedString(sourceItemId)).append("\n");
    sb.append("    suggestionType: ").append(toIndentedString(suggestionType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("firstWatchedDate");
    openapiFields.add("lastWatchedDate");
    openapiFields.add("next");
    openapiFields.add("sourceItemId");
    openapiFields.add("suggestionType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sourceItemId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NextPlaybackItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NextPlaybackItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NextPlaybackItem is not found in the empty JSON string", NextPlaybackItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NextPlaybackItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NextPlaybackItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NextPlaybackItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `next`
      if (jsonObj.get("next") != null && !jsonObj.get("next").isJsonNull()) {
        ItemDetail.validateJsonElement(jsonObj.get("next"));
      }
      if (!jsonObj.get("sourceItemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceItemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceItemId").toString()));
      }
      if ((jsonObj.get("suggestionType") != null && !jsonObj.get("suggestionType").isJsonNull()) && !jsonObj.get("suggestionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suggestionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suggestionType").toString()));
      }
      // validate the optional field `suggestionType`
      if (jsonObj.get("suggestionType") != null && !jsonObj.get("suggestionType").isJsonNull()) {
        SuggestionTypeEnum.validateJsonElement(jsonObj.get("suggestionType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NextPlaybackItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NextPlaybackItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NextPlaybackItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NextPlaybackItem.class));

       return (TypeAdapter<T>) new TypeAdapter<NextPlaybackItem>() {
           @Override
           public void write(JsonWriter out, NextPlaybackItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NextPlaybackItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NextPlaybackItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NextPlaybackItem
   * @throws IOException if the JSON string is invalid with respect to NextPlaybackItem
   */
  public static NextPlaybackItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NextPlaybackItem.class);
  }

  /**
   * Convert an instance of NextPlaybackItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

