/*
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ItemSummary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ContinueWatchingListDataExpansion
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:39.003134-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContinueWatchingListDataExpansion {
  public static final String SERIALIZED_NAME_EPISODE = "episode";
  @SerializedName(SERIALIZED_NAME_EPISODE)
  private ItemSummary episode;

  public static final String SERIALIZED_NAME_SEASON = "season";
  @SerializedName(SERIALIZED_NAME_SEASON)
  private ItemSummary season;

  public static final String SERIALIZED_NAME_SHOW = "show";
  @SerializedName(SERIALIZED_NAME_SHOW)
  private ItemSummary show;

  public ContinueWatchingListDataExpansion() {
  }

  public ContinueWatchingListDataExpansion episode(ItemSummary episode) {
    this.episode = episode;
    return this;
  }

  /**
   * Get episode
   * @return episode
   */
  @javax.annotation.Nullable
  public ItemSummary getEpisode() {
    return episode;
  }

  public void setEpisode(ItemSummary episode) {
    this.episode = episode;
  }


  public ContinueWatchingListDataExpansion season(ItemSummary season) {
    this.season = season;
    return this;
  }

  /**
   * Get season
   * @return season
   */
  @javax.annotation.Nullable
  public ItemSummary getSeason() {
    return season;
  }

  public void setSeason(ItemSummary season) {
    this.season = season;
  }


  public ContinueWatchingListDataExpansion show(ItemSummary show) {
    this.show = show;
    return this;
  }

  /**
   * Get show
   * @return show
   */
  @javax.annotation.Nullable
  public ItemSummary getShow() {
    return show;
  }

  public void setShow(ItemSummary show) {
    this.show = show;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContinueWatchingListDataExpansion continueWatchingListDataExpansion = (ContinueWatchingListDataExpansion) o;
    return Objects.equals(this.episode, continueWatchingListDataExpansion.episode) &&
        Objects.equals(this.season, continueWatchingListDataExpansion.season) &&
        Objects.equals(this.show, continueWatchingListDataExpansion.show);
  }

  @Override
  public int hashCode() {
    return Objects.hash(episode, season, show);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContinueWatchingListDataExpansion {\n");
    sb.append("    episode: ").append(toIndentedString(episode)).append("\n");
    sb.append("    season: ").append(toIndentedString(season)).append("\n");
    sb.append("    show: ").append(toIndentedString(show)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("episode");
    openapiFields.add("season");
    openapiFields.add("show");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContinueWatchingListDataExpansion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContinueWatchingListDataExpansion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContinueWatchingListDataExpansion is not found in the empty JSON string", ContinueWatchingListDataExpansion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContinueWatchingListDataExpansion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContinueWatchingListDataExpansion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `episode`
      if (jsonObj.get("episode") != null && !jsonObj.get("episode").isJsonNull()) {
        ItemSummary.validateJsonElement(jsonObj.get("episode"));
      }
      // validate the optional field `season`
      if (jsonObj.get("season") != null && !jsonObj.get("season").isJsonNull()) {
        ItemSummary.validateJsonElement(jsonObj.get("season"));
      }
      // validate the optional field `show`
      if (jsonObj.get("show") != null && !jsonObj.get("show").isJsonNull()) {
        ItemSummary.validateJsonElement(jsonObj.get("show"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContinueWatchingListDataExpansion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContinueWatchingListDataExpansion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContinueWatchingListDataExpansion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContinueWatchingListDataExpansion.class));

       return (TypeAdapter<T>) new TypeAdapter<ContinueWatchingListDataExpansion>() {
           @Override
           public void write(JsonWriter out, ContinueWatchingListDataExpansion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContinueWatchingListDataExpansion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContinueWatchingListDataExpansion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContinueWatchingListDataExpansion
   * @throws IOException if the JSON string is invalid with respect to ContinueWatchingListDataExpansion
   */
  public static ContinueWatchingListDataExpansion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContinueWatchingListDataExpansion.class);
  }

  /**
   * Convert an instance of ContinueWatchingListDataExpansion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

