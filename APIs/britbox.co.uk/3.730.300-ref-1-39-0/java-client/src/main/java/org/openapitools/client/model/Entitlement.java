/*
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ClassificationSummary;
import org.openapitools.client.model.ExclusionRule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Entitlement
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:39.003134-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Entitlement {
  /**
   * Gets or Sets deliveryType
   */
  @JsonAdapter(DeliveryTypeEnum.Adapter.class)
  public enum DeliveryTypeEnum {
    STREAM("Stream"),
    
    DOWNLOAD("Download"),
    
    STREAM_OR_DOWNLOAD("StreamOrDownload"),
    
    PROGRESSIVE_DOWNLOAD("ProgressiveDownload"),
    
    NONE("None");

    private String value;

    DeliveryTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeliveryTypeEnum fromValue(String value) {
      for (DeliveryTypeEnum b : DeliveryTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeliveryTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeliveryTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeliveryTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeliveryTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeliveryTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DELIVERY_TYPE = "deliveryType";
  @SerializedName(SERIALIZED_NAME_DELIVERY_TYPE)
  private DeliveryTypeEnum deliveryType;

  public static final String SERIALIZED_NAME_EXCLUSION_RULES = "exclusionRules";
  @SerializedName(SERIALIZED_NAME_EXCLUSION_RULES)
  private List<ExclusionRule> exclusionRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_DOWNLOADS = "maxDownloads";
  @SerializedName(SERIALIZED_NAME_MAX_DOWNLOADS)
  private Integer maxDownloads;

  public static final String SERIALIZED_NAME_MAX_PLAYS = "maxPlays";
  @SerializedName(SERIALIZED_NAME_MAX_PLAYS)
  private Integer maxPlays;

  /**
   * Gets or Sets ownership
   */
  @JsonAdapter(OwnershipEnum.Adapter.class)
  public enum OwnershipEnum {
    SUBSCRIPTION("Subscription"),
    
    FREE("Free"),
    
    RENT("Rent"),
    
    OWN("Own"),
    
    NONE("None");

    private String value;

    OwnershipEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OwnershipEnum fromValue(String value) {
      for (OwnershipEnum b : OwnershipEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OwnershipEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OwnershipEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OwnershipEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OwnershipEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OwnershipEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OWNERSHIP = "ownership";
  @SerializedName(SERIALIZED_NAME_OWNERSHIP)
  private OwnershipEnum ownership;

  public static final String SERIALIZED_NAME_PLAY_PERIOD = "playPeriod";
  @SerializedName(SERIALIZED_NAME_PLAY_PERIOD)
  private Integer playPeriod;

  public static final String SERIALIZED_NAME_RENTAL_PERIOD = "rentalPeriod";
  @SerializedName(SERIALIZED_NAME_RENTAL_PERIOD)
  private Integer rentalPeriod;

  /**
   * Gets or Sets resolution
   */
  @JsonAdapter(ResolutionEnum.Adapter.class)
  public enum ResolutionEnum {
    SD("SD"),
    
    HD_720("HD-720"),
    
    HD_1080("HD-1080"),
    
    HD_4_K("HD-4K"),
    
    EXTERNAL("External"),
    
    UNKNOWN("Unknown");

    private String value;

    ResolutionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResolutionEnum fromValue(String value) {
      for (ResolutionEnum b : ResolutionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResolutionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResolutionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResolutionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResolutionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResolutionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESOLUTION = "resolution";
  @SerializedName(SERIALIZED_NAME_RESOLUTION)
  private ResolutionEnum resolution;

  public static final String SERIALIZED_NAME_SCOPES = "scopes";
  @SerializedName(SERIALIZED_NAME_SCOPES)
  private List<String> scopes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACTIVATION_DATE = "activationDate";
  @SerializedName(SERIALIZED_NAME_ACTIVATION_DATE)
  private OffsetDateTime activationDate;

  public static final String SERIALIZED_NAME_CLASSIFICATION = "classification";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION)
  private ClassificationSummary classification;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "expirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  private OffsetDateTime expirationDate;

  public static final String SERIALIZED_NAME_ITEM_ID = "itemId";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  private String itemId;

  /**
   * The type of item this entitlement is for.
   */
  @JsonAdapter(ItemTypeEnum.Adapter.class)
  public enum ItemTypeEnum {
    MOVIE("movie"),
    
    SHOW("show"),
    
    SEASON("season"),
    
    EPISODE("episode"),
    
    PROGRAM("program"),
    
    LINK("link"),
    
    TRAILER("trailer"),
    
    CHANNEL("channel"),
    
    CUSTOM_ASSET("customAsset");

    private String value;

    ItemTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ItemTypeEnum fromValue(String value) {
      for (ItemTypeEnum b : ItemTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ItemTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ItemTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ItemTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ItemTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ItemTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ITEM_TYPE = "itemType";
  @SerializedName(SERIALIZED_NAME_ITEM_TYPE)
  private ItemTypeEnum itemType;

  public static final String SERIALIZED_NAME_MEDIA_DURATION = "mediaDuration";
  @SerializedName(SERIALIZED_NAME_MEDIA_DURATION)
  private Integer mediaDuration;

  public static final String SERIALIZED_NAME_PLAN_ID = "planId";
  @SerializedName(SERIALIZED_NAME_PLAN_ID)
  private String planId;

  public static final String SERIALIZED_NAME_PLAY_COUNT = "playCount";
  @SerializedName(SERIALIZED_NAME_PLAY_COUNT)
  private Integer playCount;

  public static final String SERIALIZED_NAME_REMAINING_DOWNLOADS = "remainingDownloads";
  @SerializedName(SERIALIZED_NAME_REMAINING_DOWNLOADS)
  private Integer remainingDownloads;

  public Entitlement() {
  }

  public Entitlement deliveryType(DeliveryTypeEnum deliveryType) {
    this.deliveryType = deliveryType;
    return this;
  }

  /**
   * Get deliveryType
   * @return deliveryType
   */
  @javax.annotation.Nonnull
  public DeliveryTypeEnum getDeliveryType() {
    return deliveryType;
  }

  public void setDeliveryType(DeliveryTypeEnum deliveryType) {
    this.deliveryType = deliveryType;
  }


  public Entitlement exclusionRules(List<ExclusionRule> exclusionRules) {
    this.exclusionRules = exclusionRules;
    return this;
  }

  public Entitlement addExclusionRulesItem(ExclusionRule exclusionRulesItem) {
    if (this.exclusionRules == null) {
      this.exclusionRules = new ArrayList<>();
    }
    this.exclusionRules.add(exclusionRulesItem);
    return this;
  }

  /**
   * Any specific playback exclusion rules.
   * @return exclusionRules
   */
  @javax.annotation.Nullable
  public List<ExclusionRule> getExclusionRules() {
    return exclusionRules;
  }

  public void setExclusionRules(List<ExclusionRule> exclusionRules) {
    this.exclusionRules = exclusionRules;
  }


  public Entitlement maxDownloads(Integer maxDownloads) {
    this.maxDownloads = maxDownloads;
    return this;
  }

  /**
   * The maximum number of allowed downloads.
   * @return maxDownloads
   */
  @javax.annotation.Nullable
  public Integer getMaxDownloads() {
    return maxDownloads;
  }

  public void setMaxDownloads(Integer maxDownloads) {
    this.maxDownloads = maxDownloads;
  }


  public Entitlement maxPlays(Integer maxPlays) {
    this.maxPlays = maxPlays;
    return this;
  }

  /**
   * The maximum number of allowed plays.
   * @return maxPlays
   */
  @javax.annotation.Nullable
  public Integer getMaxPlays() {
    return maxPlays;
  }

  public void setMaxPlays(Integer maxPlays) {
    this.maxPlays = maxPlays;
  }


  public Entitlement ownership(OwnershipEnum ownership) {
    this.ownership = ownership;
    return this;
  }

  /**
   * Get ownership
   * @return ownership
   */
  @javax.annotation.Nonnull
  public OwnershipEnum getOwnership() {
    return ownership;
  }

  public void setOwnership(OwnershipEnum ownership) {
    this.ownership = ownership;
  }


  public Entitlement playPeriod(Integer playPeriod) {
    this.playPeriod = playPeriod;
    return this;
  }

  /**
   * The length of time in minutes which the rental will last once played for the first time.
   * @return playPeriod
   */
  @javax.annotation.Nullable
  public Integer getPlayPeriod() {
    return playPeriod;
  }

  public void setPlayPeriod(Integer playPeriod) {
    this.playPeriod = playPeriod;
  }


  public Entitlement rentalPeriod(Integer rentalPeriod) {
    this.rentalPeriod = rentalPeriod;
    return this;
  }

  /**
   * The length of time in minutes which the rental will last once purchased.
   * @return rentalPeriod
   */
  @javax.annotation.Nullable
  public Integer getRentalPeriod() {
    return rentalPeriod;
  }

  public void setRentalPeriod(Integer rentalPeriod) {
    this.rentalPeriod = rentalPeriod;
  }


  public Entitlement resolution(ResolutionEnum resolution) {
    this.resolution = resolution;
    return this;
  }

  /**
   * Get resolution
   * @return resolution
   */
  @javax.annotation.Nonnull
  public ResolutionEnum getResolution() {
    return resolution;
  }

  public void setResolution(ResolutionEnum resolution) {
    this.resolution = resolution;
  }


  public Entitlement scopes(List<String> scopes) {
    this.scopes = scopes;
    return this;
  }

  public Entitlement addScopesItem(String scopesItem) {
    if (this.scopes == null) {
      this.scopes = new ArrayList<>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

  /**
   * Get scopes
   * @return scopes
   */
  @javax.annotation.Nonnull
  public List<String> getScopes() {
    return scopes;
  }

  public void setScopes(List<String> scopes) {
    this.scopes = scopes;
  }


  public Entitlement activationDate(OffsetDateTime activationDate) {
    this.activationDate = activationDate;
    return this;
  }

  /**
   * The date of activation. If no date is defined the entitlement has not be activated.
   * @return activationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getActivationDate() {
    return activationDate;
  }

  public void setActivationDate(OffsetDateTime activationDate) {
    this.activationDate = activationDate;
  }


  public Entitlement classification(ClassificationSummary classification) {
    this.classification = classification;
    return this;
  }

  /**
   * Get classification
   * @return classification
   */
  @javax.annotation.Nullable
  public ClassificationSummary getClassification() {
    return classification;
  }

  public void setClassification(ClassificationSummary classification) {
    this.classification = classification;
  }


  public Entitlement creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * The date the entitlement was created.
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public Entitlement expirationDate(OffsetDateTime expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

  /**
   * The date the entitlement expires.
   * @return expirationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpirationDate() {
    return expirationDate;
  }

  public void setExpirationDate(OffsetDateTime expirationDate) {
    this.expirationDate = expirationDate;
  }


  public Entitlement itemId(String itemId) {
    this.itemId = itemId;
    return this;
  }

  /**
   * The id of the item this entitlement is for.
   * @return itemId
   */
  @javax.annotation.Nullable
  public String getItemId() {
    return itemId;
  }

  public void setItemId(String itemId) {
    this.itemId = itemId;
  }


  public Entitlement itemType(ItemTypeEnum itemType) {
    this.itemType = itemType;
    return this;
  }

  /**
   * The type of item this entitlement is for.
   * @return itemType
   */
  @javax.annotation.Nullable
  public ItemTypeEnum getItemType() {
    return itemType;
  }

  public void setItemType(ItemTypeEnum itemType) {
    this.itemType = itemType;
  }


  public Entitlement mediaDuration(Integer mediaDuration) {
    this.mediaDuration = mediaDuration;
    return this;
  }

  /**
   * The duration of the entitled media.
   * @return mediaDuration
   */
  @javax.annotation.Nullable
  public Integer getMediaDuration() {
    return mediaDuration;
  }

  public void setMediaDuration(Integer mediaDuration) {
    this.mediaDuration = mediaDuration;
  }


  public Entitlement planId(String planId) {
    this.planId = planId;
    return this;
  }

  /**
   * The id of the plan this entitlement is for.
   * @return planId
   */
  @javax.annotation.Nullable
  public String getPlanId() {
    return planId;
  }

  public void setPlanId(String planId) {
    this.planId = planId;
  }


  public Entitlement playCount(Integer playCount) {
    this.playCount = playCount;
    return this;
  }

  /**
   * How many times the media has been played.
   * @return playCount
   */
  @javax.annotation.Nullable
  public Integer getPlayCount() {
    return playCount;
  }

  public void setPlayCount(Integer playCount) {
    this.playCount = playCount;
  }


  public Entitlement remainingDownloads(Integer remainingDownloads) {
    this.remainingDownloads = remainingDownloads;
    return this;
  }

  /**
   * How many more downloads of this media are available.
   * @return remainingDownloads
   */
  @javax.annotation.Nullable
  public Integer getRemainingDownloads() {
    return remainingDownloads;
  }

  public void setRemainingDownloads(Integer remainingDownloads) {
    this.remainingDownloads = remainingDownloads;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Entitlement entitlement = (Entitlement) o;
    return Objects.equals(this.deliveryType, entitlement.deliveryType) &&
        Objects.equals(this.exclusionRules, entitlement.exclusionRules) &&
        Objects.equals(this.maxDownloads, entitlement.maxDownloads) &&
        Objects.equals(this.maxPlays, entitlement.maxPlays) &&
        Objects.equals(this.ownership, entitlement.ownership) &&
        Objects.equals(this.playPeriod, entitlement.playPeriod) &&
        Objects.equals(this.rentalPeriod, entitlement.rentalPeriod) &&
        Objects.equals(this.resolution, entitlement.resolution) &&
        Objects.equals(this.scopes, entitlement.scopes) &&
        Objects.equals(this.activationDate, entitlement.activationDate) &&
        Objects.equals(this.classification, entitlement.classification) &&
        Objects.equals(this.creationDate, entitlement.creationDate) &&
        Objects.equals(this.expirationDate, entitlement.expirationDate) &&
        Objects.equals(this.itemId, entitlement.itemId) &&
        Objects.equals(this.itemType, entitlement.itemType) &&
        Objects.equals(this.mediaDuration, entitlement.mediaDuration) &&
        Objects.equals(this.planId, entitlement.planId) &&
        Objects.equals(this.playCount, entitlement.playCount) &&
        Objects.equals(this.remainingDownloads, entitlement.remainingDownloads);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deliveryType, exclusionRules, maxDownloads, maxPlays, ownership, playPeriod, rentalPeriod, resolution, scopes, activationDate, classification, creationDate, expirationDate, itemId, itemType, mediaDuration, planId, playCount, remainingDownloads);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Entitlement {\n");
    sb.append("    deliveryType: ").append(toIndentedString(deliveryType)).append("\n");
    sb.append("    exclusionRules: ").append(toIndentedString(exclusionRules)).append("\n");
    sb.append("    maxDownloads: ").append(toIndentedString(maxDownloads)).append("\n");
    sb.append("    maxPlays: ").append(toIndentedString(maxPlays)).append("\n");
    sb.append("    ownership: ").append(toIndentedString(ownership)).append("\n");
    sb.append("    playPeriod: ").append(toIndentedString(playPeriod)).append("\n");
    sb.append("    rentalPeriod: ").append(toIndentedString(rentalPeriod)).append("\n");
    sb.append("    resolution: ").append(toIndentedString(resolution)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("    activationDate: ").append(toIndentedString(activationDate)).append("\n");
    sb.append("    classification: ").append(toIndentedString(classification)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    itemType: ").append(toIndentedString(itemType)).append("\n");
    sb.append("    mediaDuration: ").append(toIndentedString(mediaDuration)).append("\n");
    sb.append("    planId: ").append(toIndentedString(planId)).append("\n");
    sb.append("    playCount: ").append(toIndentedString(playCount)).append("\n");
    sb.append("    remainingDownloads: ").append(toIndentedString(remainingDownloads)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deliveryType");
    openapiFields.add("exclusionRules");
    openapiFields.add("maxDownloads");
    openapiFields.add("maxPlays");
    openapiFields.add("ownership");
    openapiFields.add("playPeriod");
    openapiFields.add("rentalPeriod");
    openapiFields.add("resolution");
    openapiFields.add("scopes");
    openapiFields.add("activationDate");
    openapiFields.add("classification");
    openapiFields.add("creationDate");
    openapiFields.add("expirationDate");
    openapiFields.add("itemId");
    openapiFields.add("itemType");
    openapiFields.add("mediaDuration");
    openapiFields.add("planId");
    openapiFields.add("playCount");
    openapiFields.add("remainingDownloads");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("deliveryType");
    openapiRequiredFields.add("ownership");
    openapiRequiredFields.add("resolution");
    openapiRequiredFields.add("scopes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Entitlement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Entitlement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Entitlement is not found in the empty JSON string", Entitlement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Entitlement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Entitlement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Entitlement.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("deliveryType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliveryType").toString()));
      }
      // validate the required field `deliveryType`
      DeliveryTypeEnum.validateJsonElement(jsonObj.get("deliveryType"));
      if (jsonObj.get("exclusionRules") != null && !jsonObj.get("exclusionRules").isJsonNull()) {
        JsonArray jsonArrayexclusionRules = jsonObj.getAsJsonArray("exclusionRules");
        if (jsonArrayexclusionRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("exclusionRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `exclusionRules` to be an array in the JSON string but got `%s`", jsonObj.get("exclusionRules").toString()));
          }

          // validate the optional field `exclusionRules` (array)
          for (int i = 0; i < jsonArrayexclusionRules.size(); i++) {
            ExclusionRule.validateJsonElement(jsonArrayexclusionRules.get(i));
          };
        }
      }
      if (!jsonObj.get("ownership").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownership` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownership").toString()));
      }
      // validate the required field `ownership`
      OwnershipEnum.validateJsonElement(jsonObj.get("ownership"));
      if (!jsonObj.get("resolution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resolution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resolution").toString()));
      }
      // validate the required field `resolution`
      ResolutionEnum.validateJsonElement(jsonObj.get("resolution"));
      // ensure the required json array is present
      if (jsonObj.get("scopes") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("scopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scopes` to be an array in the JSON string but got `%s`", jsonObj.get("scopes").toString()));
      }
      // validate the optional field `classification`
      if (jsonObj.get("classification") != null && !jsonObj.get("classification").isJsonNull()) {
        ClassificationSummary.validateJsonElement(jsonObj.get("classification"));
      }
      if ((jsonObj.get("itemId") != null && !jsonObj.get("itemId").isJsonNull()) && !jsonObj.get("itemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemId").toString()));
      }
      if ((jsonObj.get("itemType") != null && !jsonObj.get("itemType").isJsonNull()) && !jsonObj.get("itemType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemType").toString()));
      }
      // validate the optional field `itemType`
      if (jsonObj.get("itemType") != null && !jsonObj.get("itemType").isJsonNull()) {
        ItemTypeEnum.validateJsonElement(jsonObj.get("itemType"));
      }
      if ((jsonObj.get("planId") != null && !jsonObj.get("planId").isJsonNull()) && !jsonObj.get("planId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `planId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("planId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Entitlement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Entitlement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Entitlement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Entitlement.class));

       return (TypeAdapter<T>) new TypeAdapter<Entitlement>() {
           @Override
           public void write(JsonWriter out, Entitlement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Entitlement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Entitlement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Entitlement
   * @throws IOException if the JSON string is invalid with respect to Entitlement
   */
  public static Entitlement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Entitlement.class);
  }

  /**
   * Convert an instance of Entitlement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

