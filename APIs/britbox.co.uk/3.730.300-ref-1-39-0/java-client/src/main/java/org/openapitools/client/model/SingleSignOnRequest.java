/*
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SingleSignOnRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:39.003134-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SingleSignOnRequest {
  /**
   * If you specify a cookie type then a content filter cookie will be returned along with the token(s). This is only intended for web based clients which need to pass the cookies to a server to render a page based on the user&#39;s content filters e.g subscription code.  If type &#x60;Session&#x60; the cookie will be session based. If type &#x60;Persistent&#x60; the cookie will have a medium term lifespan. If undefined no cookies will be set. 
   */
  @JsonAdapter(CookieTypeEnum.Adapter.class)
  public enum CookieTypeEnum {
    SESSION("Session"),
    
    PERSISTENT("Persistent");

    private String value;

    CookieTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CookieTypeEnum fromValue(String value) {
      for (CookieTypeEnum b : CookieTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CookieTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CookieTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CookieTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CookieTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CookieTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COOKIE_TYPE = "cookieType";
  @SerializedName(SERIALIZED_NAME_COOKIE_TYPE)
  private CookieTypeEnum cookieType;

  public static final String SERIALIZED_NAME_LINK_ACCOUNTS = "linkAccounts";
  @SerializedName(SERIALIZED_NAME_LINK_ACCOUNTS)
  private Boolean linkAccounts;

  /**
   * The third party single-sign-on provider.
   */
  @JsonAdapter(ProviderEnum.Adapter.class)
  public enum ProviderEnum {
    FACEBOOK("Facebook");

    private String value;

    ProviderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProviderEnum fromValue(String value) {
      for (ProviderEnum b : ProviderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProviderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProviderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProviderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProviderEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProviderEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private ProviderEnum provider;

  /**
   * Gets or Sets scopes
   */
  @JsonAdapter(ScopesEnum.Adapter.class)
  public enum ScopesEnum {
    CATALOG("Catalog"),
    
    COMMERCE("Commerce"),
    
    SETTINGS("Settings"),
    
    PLAYBACK("Playback");

    private String value;

    ScopesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScopesEnum fromValue(String value) {
      for (ScopesEnum b : ScopesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScopesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScopesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScopesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScopesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ScopesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCOPES = "scopes";
  @SerializedName(SERIALIZED_NAME_SCOPES)
  private List<ScopesEnum> scopes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public SingleSignOnRequest() {
  }

  public SingleSignOnRequest cookieType(CookieTypeEnum cookieType) {
    this.cookieType = cookieType;
    return this;
  }

  /**
   * If you specify a cookie type then a content filter cookie will be returned along with the token(s). This is only intended for web based clients which need to pass the cookies to a server to render a page based on the user&#39;s content filters e.g subscription code.  If type &#x60;Session&#x60; the cookie will be session based. If type &#x60;Persistent&#x60; the cookie will have a medium term lifespan. If undefined no cookies will be set. 
   * @return cookieType
   */
  @javax.annotation.Nullable
  public CookieTypeEnum getCookieType() {
    return cookieType;
  }

  public void setCookieType(CookieTypeEnum cookieType) {
    this.cookieType = cookieType;
  }


  public SingleSignOnRequest linkAccounts(Boolean linkAccounts) {
    this.linkAccounts = linkAccounts;
    return this;
  }

  /**
   * When a user attempts to sign in using single-sign-on, we may find an account created previously through the manual sign up flow with the same email. If this is the case then an option to link the two accounts can be made available.  If this flag is set to true then accounts will be linked automatically.  If this flag is not set or set to false and an existing account is found  then an http 401 with subcode &#x60;6001&#x60; will be returned. Client apps can then present the option to link the accounts. If the user decides to accept, then the same call can be repeated with this flag set to true. 
   * @return linkAccounts
   */
  @javax.annotation.Nullable
  public Boolean getLinkAccounts() {
    return linkAccounts;
  }

  public void setLinkAccounts(Boolean linkAccounts) {
    this.linkAccounts = linkAccounts;
  }


  public SingleSignOnRequest provider(ProviderEnum provider) {
    this.provider = provider;
    return this;
  }

  /**
   * The third party single-sign-on provider.
   * @return provider
   */
  @javax.annotation.Nonnull
  public ProviderEnum getProvider() {
    return provider;
  }

  public void setProvider(ProviderEnum provider) {
    this.provider = provider;
  }


  public SingleSignOnRequest scopes(List<ScopesEnum> scopes) {
    this.scopes = scopes;
    return this;
  }

  public SingleSignOnRequest addScopesItem(ScopesEnum scopesItem) {
    if (this.scopes == null) {
      this.scopes = new ArrayList<>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

  /**
   * The scope(s) of the tokens required. For each scope listed an Account and Profile token of that scope will be returned. 
   * @return scopes
   */
  @javax.annotation.Nullable
  public List<ScopesEnum> getScopes() {
    return scopes;
  }

  public void setScopes(List<ScopesEnum> scopes) {
    this.scopes = scopes;
  }


  public SingleSignOnRequest token(String token) {
    this.token = token;
    return this;
  }

  /**
   * A token from the third party single-sign-on provider e.g. an identity token from Facebook.
   * @return token
   */
  @javax.annotation.Nonnull
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SingleSignOnRequest singleSignOnRequest = (SingleSignOnRequest) o;
    return Objects.equals(this.cookieType, singleSignOnRequest.cookieType) &&
        Objects.equals(this.linkAccounts, singleSignOnRequest.linkAccounts) &&
        Objects.equals(this.provider, singleSignOnRequest.provider) &&
        Objects.equals(this.scopes, singleSignOnRequest.scopes) &&
        Objects.equals(this.token, singleSignOnRequest.token);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cookieType, linkAccounts, provider, scopes, token);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SingleSignOnRequest {\n");
    sb.append("    cookieType: ").append(toIndentedString(cookieType)).append("\n");
    sb.append("    linkAccounts: ").append(toIndentedString(linkAccounts)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cookieType");
    openapiFields.add("linkAccounts");
    openapiFields.add("provider");
    openapiFields.add("scopes");
    openapiFields.add("token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("provider");
    openapiRequiredFields.add("token");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SingleSignOnRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SingleSignOnRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SingleSignOnRequest is not found in the empty JSON string", SingleSignOnRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SingleSignOnRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SingleSignOnRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SingleSignOnRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cookieType") != null && !jsonObj.get("cookieType").isJsonNull()) && !jsonObj.get("cookieType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cookieType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cookieType").toString()));
      }
      // validate the optional field `cookieType`
      if (jsonObj.get("cookieType") != null && !jsonObj.get("cookieType").isJsonNull()) {
        CookieTypeEnum.validateJsonElement(jsonObj.get("cookieType"));
      }
      if (!jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
      // validate the required field `provider`
      ProviderEnum.validateJsonElement(jsonObj.get("provider"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("scopes") != null && !jsonObj.get("scopes").isJsonNull() && !jsonObj.get("scopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scopes` to be an array in the JSON string but got `%s`", jsonObj.get("scopes").toString()));
      }
      if (!jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SingleSignOnRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SingleSignOnRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SingleSignOnRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SingleSignOnRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SingleSignOnRequest>() {
           @Override
           public void write(JsonWriter out, SingleSignOnRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SingleSignOnRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SingleSignOnRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SingleSignOnRequest
   * @throws IOException if the JSON string is invalid with respect to SingleSignOnRequest
   */
  public static SingleSignOnRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SingleSignOnRequest.class);
  }

  /**
   * Convert an instance of SingleSignOnRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

