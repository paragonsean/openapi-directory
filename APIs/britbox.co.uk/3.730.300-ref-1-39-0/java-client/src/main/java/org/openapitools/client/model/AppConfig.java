/*
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AppConfigDisplay;
import org.openapitools.client.model.AppConfigGeneral;
import org.openapitools.client.model.AppConfigI18n;
import org.openapitools.client.model.AppConfigLinear;
import org.openapitools.client.model.AppConfigPlayback;
import org.openapitools.client.model.AppConfigSubscription;
import org.openapitools.client.model.Classification;
import org.openapitools.client.model.Navigation;
import org.openapitools.client.model.PageSummary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AppConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:39.003134-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppConfig {
  public static final String SERIALIZED_NAME_CLASSIFICATION = "classification";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION)
  private Map<String, Classification> classification = new HashMap<>();

  public static final String SERIALIZED_NAME_DISPLAY = "display";
  @SerializedName(SERIALIZED_NAME_DISPLAY)
  private AppConfigDisplay display;

  public static final String SERIALIZED_NAME_GENERAL = "general";
  @SerializedName(SERIALIZED_NAME_GENERAL)
  private AppConfigGeneral general;

  public static final String SERIALIZED_NAME_I18N = "i18n";
  @SerializedName(SERIALIZED_NAME_I18N)
  private AppConfigI18n i18n;

  public static final String SERIALIZED_NAME_LINEAR = "linear";
  @SerializedName(SERIALIZED_NAME_LINEAR)
  private AppConfigLinear linear;

  public static final String SERIALIZED_NAME_NAVIGATION = "navigation";
  @SerializedName(SERIALIZED_NAME_NAVIGATION)
  private Navigation navigation;

  public static final String SERIALIZED_NAME_PLAYBACK = "playback";
  @SerializedName(SERIALIZED_NAME_PLAYBACK)
  private AppConfigPlayback playback;

  public static final String SERIALIZED_NAME_SITEMAP = "sitemap";
  @SerializedName(SERIALIZED_NAME_SITEMAP)
  private List<PageSummary> sitemap = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBSCRIPTION = "subscription";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION)
  private AppConfigSubscription subscription;

  public AppConfig() {
  }

  public AppConfig classification(Map<String, Classification> classification) {
    this.classification = classification;
    return this;
  }

  public AppConfig putClassificationItem(String key, Classification classificationItem) {
    if (this.classification == null) {
      this.classification = new HashMap<>();
    }
    this.classification.put(key, classificationItem);
    return this;
  }

  /**
   * The map of classification ratings.
   * @return classification
   */
  @javax.annotation.Nullable
  public Map<String, Classification> getClassification() {
    return classification;
  }

  public void setClassification(Map<String, Classification> classification) {
    this.classification = classification;
  }


  public AppConfig display(AppConfigDisplay display) {
    this.display = display;
    return this;
  }

  /**
   * Get display
   * @return display
   */
  @javax.annotation.Nullable
  public AppConfigDisplay getDisplay() {
    return display;
  }

  public void setDisplay(AppConfigDisplay display) {
    this.display = display;
  }


  public AppConfig general(AppConfigGeneral general) {
    this.general = general;
    return this;
  }

  /**
   * Get general
   * @return general
   */
  @javax.annotation.Nullable
  public AppConfigGeneral getGeneral() {
    return general;
  }

  public void setGeneral(AppConfigGeneral general) {
    this.general = general;
  }


  public AppConfig i18n(AppConfigI18n i18n) {
    this.i18n = i18n;
    return this;
  }

  /**
   * Get i18n
   * @return i18n
   */
  @javax.annotation.Nullable
  public AppConfigI18n getI18n() {
    return i18n;
  }

  public void setI18n(AppConfigI18n i18n) {
    this.i18n = i18n;
  }


  public AppConfig linear(AppConfigLinear linear) {
    this.linear = linear;
    return this;
  }

  /**
   * Get linear
   * @return linear
   */
  @javax.annotation.Nullable
  public AppConfigLinear getLinear() {
    return linear;
  }

  public void setLinear(AppConfigLinear linear) {
    this.linear = linear;
  }


  public AppConfig navigation(Navigation navigation) {
    this.navigation = navigation;
    return this;
  }

  /**
   * Get navigation
   * @return navigation
   */
  @javax.annotation.Nullable
  public Navigation getNavigation() {
    return navigation;
  }

  public void setNavigation(Navigation navigation) {
    this.navigation = navigation;
  }


  public AppConfig playback(AppConfigPlayback playback) {
    this.playback = playback;
    return this;
  }

  /**
   * Get playback
   * @return playback
   */
  @javax.annotation.Nullable
  public AppConfigPlayback getPlayback() {
    return playback;
  }

  public void setPlayback(AppConfigPlayback playback) {
    this.playback = playback;
  }


  public AppConfig sitemap(List<PageSummary> sitemap) {
    this.sitemap = sitemap;
    return this;
  }

  public AppConfig addSitemapItem(PageSummary sitemapItem) {
    if (this.sitemap == null) {
      this.sitemap = new ArrayList<>();
    }
    this.sitemap.add(sitemapItem);
    return this;
  }

  /**
   * Get sitemap
   * @return sitemap
   */
  @javax.annotation.Nullable
  public List<PageSummary> getSitemap() {
    return sitemap;
  }

  public void setSitemap(List<PageSummary> sitemap) {
    this.sitemap = sitemap;
  }


  public AppConfig subscription(AppConfigSubscription subscription) {
    this.subscription = subscription;
    return this;
  }

  /**
   * Get subscription
   * @return subscription
   */
  @javax.annotation.Nullable
  public AppConfigSubscription getSubscription() {
    return subscription;
  }

  public void setSubscription(AppConfigSubscription subscription) {
    this.subscription = subscription;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppConfig appConfig = (AppConfig) o;
    return Objects.equals(this.classification, appConfig.classification) &&
        Objects.equals(this.display, appConfig.display) &&
        Objects.equals(this.general, appConfig.general) &&
        Objects.equals(this.i18n, appConfig.i18n) &&
        Objects.equals(this.linear, appConfig.linear) &&
        Objects.equals(this.navigation, appConfig.navigation) &&
        Objects.equals(this.playback, appConfig.playback) &&
        Objects.equals(this.sitemap, appConfig.sitemap) &&
        Objects.equals(this.subscription, appConfig.subscription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(classification, display, general, i18n, linear, navigation, playback, sitemap, subscription);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppConfig {\n");
    sb.append("    classification: ").append(toIndentedString(classification)).append("\n");
    sb.append("    display: ").append(toIndentedString(display)).append("\n");
    sb.append("    general: ").append(toIndentedString(general)).append("\n");
    sb.append("    i18n: ").append(toIndentedString(i18n)).append("\n");
    sb.append("    linear: ").append(toIndentedString(linear)).append("\n");
    sb.append("    navigation: ").append(toIndentedString(navigation)).append("\n");
    sb.append("    playback: ").append(toIndentedString(playback)).append("\n");
    sb.append("    sitemap: ").append(toIndentedString(sitemap)).append("\n");
    sb.append("    subscription: ").append(toIndentedString(subscription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("classification");
    openapiFields.add("display");
    openapiFields.add("general");
    openapiFields.add("i18n");
    openapiFields.add("linear");
    openapiFields.add("navigation");
    openapiFields.add("playback");
    openapiFields.add("sitemap");
    openapiFields.add("subscription");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppConfig is not found in the empty JSON string", AppConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `display`
      if (jsonObj.get("display") != null && !jsonObj.get("display").isJsonNull()) {
        AppConfigDisplay.validateJsonElement(jsonObj.get("display"));
      }
      // validate the optional field `general`
      if (jsonObj.get("general") != null && !jsonObj.get("general").isJsonNull()) {
        AppConfigGeneral.validateJsonElement(jsonObj.get("general"));
      }
      // validate the optional field `i18n`
      if (jsonObj.get("i18n") != null && !jsonObj.get("i18n").isJsonNull()) {
        AppConfigI18n.validateJsonElement(jsonObj.get("i18n"));
      }
      // validate the optional field `linear`
      if (jsonObj.get("linear") != null && !jsonObj.get("linear").isJsonNull()) {
        AppConfigLinear.validateJsonElement(jsonObj.get("linear"));
      }
      // validate the optional field `navigation`
      if (jsonObj.get("navigation") != null && !jsonObj.get("navigation").isJsonNull()) {
        Navigation.validateJsonElement(jsonObj.get("navigation"));
      }
      // validate the optional field `playback`
      if (jsonObj.get("playback") != null && !jsonObj.get("playback").isJsonNull()) {
        AppConfigPlayback.validateJsonElement(jsonObj.get("playback"));
      }
      if (jsonObj.get("sitemap") != null && !jsonObj.get("sitemap").isJsonNull()) {
        JsonArray jsonArraysitemap = jsonObj.getAsJsonArray("sitemap");
        if (jsonArraysitemap != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sitemap").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sitemap` to be an array in the JSON string but got `%s`", jsonObj.get("sitemap").toString()));
          }

          // validate the optional field `sitemap` (array)
          for (int i = 0; i < jsonArraysitemap.size(); i++) {
            PageSummary.validateJsonElement(jsonArraysitemap.get(i));
          };
        }
      }
      // validate the optional field `subscription`
      if (jsonObj.get("subscription") != null && !jsonObj.get("subscription").isJsonNull()) {
        AppConfigSubscription.validateJsonElement(jsonObj.get("subscription"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<AppConfig>() {
           @Override
           public void write(JsonWriter out, AppConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppConfig
   * @throws IOException if the JSON string is invalid with respect to AppConfig
   */
  public static AppConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppConfig.class);
  }

  /**
   * Convert an instance of AppConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

