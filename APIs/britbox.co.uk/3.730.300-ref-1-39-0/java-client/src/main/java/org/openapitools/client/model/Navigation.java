/*
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.NavEntry;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Navigation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:39.003134-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Navigation {
  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private NavEntry account;

  public static final String SERIALIZED_NAME_COPYRIGHT = "copyright";
  @SerializedName(SERIALIZED_NAME_COPYRIGHT)
  private String copyright;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "customFields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Map<String, Object> customFields = new HashMap<>();

  public static final String SERIALIZED_NAME_FOOTER = "footer";
  @SerializedName(SERIALIZED_NAME_FOOTER)
  private NavEntry footer;

  public static final String SERIALIZED_NAME_HEADER = "header";
  @SerializedName(SERIALIZED_NAME_HEADER)
  private List<NavEntry> header = new ArrayList<>();

  public static final String SERIALIZED_NAME_MOBILE = "mobile";
  @SerializedName(SERIALIZED_NAME_MOBILE)
  private NavEntry mobile;

  public Navigation() {
  }

  public Navigation account(NavEntry account) {
    this.account = account;
    return this;
  }

  /**
   * Get account
   * @return account
   */
  @javax.annotation.Nullable
  public NavEntry getAccount() {
    return account;
  }

  public void setAccount(NavEntry account) {
    this.account = account;
  }


  public Navigation copyright(String copyright) {
    this.copyright = copyright;
    return this;
  }

  /**
   * Copyright information.
   * @return copyright
   */
  @javax.annotation.Nullable
  public String getCopyright() {
    return copyright;
  }

  public void setCopyright(String copyright) {
    this.copyright = copyright;
  }


  public Navigation customFields(Map<String, Object> customFields) {
    this.customFields = customFields;
    return this;
  }

  public Navigation putCustomFieldsItem(String key, Object customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new HashMap<>();
    }
    this.customFields.put(key, customFieldsItem);
    return this;
  }

  /**
   * A map of custom fields defined by a curator for navigation.
   * @return customFields
   */
  @javax.annotation.Nullable
  public Map<String, Object> getCustomFields() {
    return customFields;
  }

  public void setCustomFields(Map<String, Object> customFields) {
    this.customFields = customFields;
  }


  public Navigation footer(NavEntry footer) {
    this.footer = footer;
    return this;
  }

  /**
   * Get footer
   * @return footer
   */
  @javax.annotation.Nullable
  public NavEntry getFooter() {
    return footer;
  }

  public void setFooter(NavEntry footer) {
    this.footer = footer;
  }


  public Navigation header(List<NavEntry> header) {
    this.header = header;
    return this;
  }

  public Navigation addHeaderItem(NavEntry headerItem) {
    if (this.header == null) {
      this.header = new ArrayList<>();
    }
    this.header.add(headerItem);
    return this;
  }

  /**
   * The header navigation.
   * @return header
   */
  @javax.annotation.Nonnull
  public List<NavEntry> getHeader() {
    return header;
  }

  public void setHeader(List<NavEntry> header) {
    this.header = header;
  }


  public Navigation mobile(NavEntry mobile) {
    this.mobile = mobile;
    return this;
  }

  /**
   * Get mobile
   * @return mobile
   */
  @javax.annotation.Nullable
  public NavEntry getMobile() {
    return mobile;
  }

  public void setMobile(NavEntry mobile) {
    this.mobile = mobile;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Navigation navigation = (Navigation) o;
    return Objects.equals(this.account, navigation.account) &&
        Objects.equals(this.copyright, navigation.copyright) &&
        Objects.equals(this.customFields, navigation.customFields) &&
        Objects.equals(this.footer, navigation.footer) &&
        Objects.equals(this.header, navigation.header) &&
        Objects.equals(this.mobile, navigation.mobile);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, copyright, customFields, footer, header, mobile);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Navigation {\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    copyright: ").append(toIndentedString(copyright)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    footer: ").append(toIndentedString(footer)).append("\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    mobile: ").append(toIndentedString(mobile)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account");
    openapiFields.add("copyright");
    openapiFields.add("customFields");
    openapiFields.add("footer");
    openapiFields.add("header");
    openapiFields.add("mobile");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("header");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Navigation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Navigation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Navigation is not found in the empty JSON string", Navigation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Navigation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Navigation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Navigation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `account`
      if (jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) {
        NavEntry.validateJsonElement(jsonObj.get("account"));
      }
      if ((jsonObj.get("copyright") != null && !jsonObj.get("copyright").isJsonNull()) && !jsonObj.get("copyright").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `copyright` to be a primitive type in the JSON string but got `%s`", jsonObj.get("copyright").toString()));
      }
      // validate the optional field `footer`
      if (jsonObj.get("footer") != null && !jsonObj.get("footer").isJsonNull()) {
        NavEntry.validateJsonElement(jsonObj.get("footer"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("header").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `header` to be an array in the JSON string but got `%s`", jsonObj.get("header").toString()));
      }

      JsonArray jsonArrayheader = jsonObj.getAsJsonArray("header");
      // validate the required field `header` (array)
      for (int i = 0; i < jsonArrayheader.size(); i++) {
        NavEntry.validateJsonElement(jsonArrayheader.get(i));
      };
      // validate the optional field `mobile`
      if (jsonObj.get("mobile") != null && !jsonObj.get("mobile").isJsonNull()) {
        NavEntry.validateJsonElement(jsonObj.get("mobile"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Navigation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Navigation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Navigation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Navigation.class));

       return (TypeAdapter<T>) new TypeAdapter<Navigation>() {
           @Override
           public void write(JsonWriter out, Navigation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Navigation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Navigation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Navigation
   * @throws IOException if the JSON string is invalid with respect to Navigation
   */
  public static Navigation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Navigation.class);
  }

  /**
   * Convert an instance of Navigation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

