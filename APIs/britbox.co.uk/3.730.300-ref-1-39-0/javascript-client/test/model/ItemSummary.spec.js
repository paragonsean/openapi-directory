/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.RocketServices);
  }
}(this, function(expect, RocketServices) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new RocketServices.ItemSummary();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ItemSummary', function() {
    it('should create an instance of ItemSummary', function() {
      // uncomment below and update the code to test ItemSummary
      //var instance = new RocketServices.ItemSummary();
      //expect(instance).to.be.a(RocketServices.ItemSummary);
    });

    it('should have the property advisoryText (base name: "advisoryText")', function() {
      // uncomment below and update the code to test the property advisoryText
      //var instance = new RocketServices.ItemSummary();
      //expect(instance).to.be();
    });

    it('should have the property availableEpisodeCount (base name: "availableEpisodeCount")', function() {
      // uncomment below and update the code to test the property availableEpisodeCount
      //var instance = new RocketServices.ItemSummary();
      //expect(instance).to.be();
    });

    it('should have the property availableSeasonCount (base name: "availableSeasonCount")', function() {
      // uncomment below and update the code to test the property availableSeasonCount
      //var instance = new RocketServices.ItemSummary();
      //expect(instance).to.be();
    });

    it('should have the property averageUserRating (base name: "averageUserRating")', function() {
      // uncomment below and update the code to test the property averageUserRating
      //var instance = new RocketServices.ItemSummary();
      //expect(instance).to.be();
    });

    it('should have the property badge (base name: "badge")', function() {
      // uncomment below and update the code to test the property badge
      //var instance = new RocketServices.ItemSummary();
      //expect(instance).to.be();
    });

    it('should have the property channelShortCode (base name: "channelShortCode")', function() {
      // uncomment below and update the code to test the property channelShortCode
      //var instance = new RocketServices.ItemSummary();
      //expect(instance).to.be();
    });

    it('should have the property classification (base name: "classification")', function() {
      // uncomment below and update the code to test the property classification
      //var instance = new RocketServices.ItemSummary();
      //expect(instance).to.be();
    });

    it('should have the property contextualTitle (base name: "contextualTitle")', function() {
      // uncomment below and update the code to test the property contextualTitle
      //var instance = new RocketServices.ItemSummary();
      //expect(instance).to.be();
    });

    it('should have the property customFields (base name: "customFields")', function() {
      // uncomment below and update the code to test the property customFields
      //var instance = new RocketServices.ItemSummary();
      //expect(instance).to.be();
    });

    it('should have the property customId (base name: "customId")', function() {
      // uncomment below and update the code to test the property customId
      //var instance = new RocketServices.ItemSummary();
      //expect(instance).to.be();
    });

    it('should have the property duration (base name: "duration")', function() {
      // uncomment below and update the code to test the property duration
      //var instance = new RocketServices.ItemSummary();
      //expect(instance).to.be();
    });

    it('should have the property episodeCount (base name: "episodeCount")', function() {
      // uncomment below and update the code to test the property episodeCount
      //var instance = new RocketServices.ItemSummary();
      //expect(instance).to.be();
    });

    it('should have the property episodeName (base name: "episodeName")', function() {
      // uncomment below and update the code to test the property episodeName
      //var instance = new RocketServices.ItemSummary();
      //expect(instance).to.be();
    });

    it('should have the property episodeNumber (base name: "episodeNumber")', function() {
      // uncomment below and update the code to test the property episodeNumber
      //var instance = new RocketServices.ItemSummary();
      //expect(instance).to.be();
    });

    it('should have the property genres (base name: "genres")', function() {
      // uncomment below and update the code to test the property genres
      //var instance = new RocketServices.ItemSummary();
      //expect(instance).to.be();
    });

    it('should have the property hasClosedCaptions (base name: "hasClosedCaptions")', function() {
      // uncomment below and update the code to test the property hasClosedCaptions
      //var instance = new RocketServices.ItemSummary();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new RocketServices.ItemSummary();
      //expect(instance).to.be();
    });

    it('should have the property images (base name: "images")', function() {
      // uncomment below and update the code to test the property images
      //var instance = new RocketServices.ItemSummary();
      //expect(instance).to.be();
    });

    it('should have the property offers (base name: "offers")', function() {
      // uncomment below and update the code to test the property offers
      //var instance = new RocketServices.ItemSummary();
      //expect(instance).to.be();
    });

    it('should have the property path (base name: "path")', function() {
      // uncomment below and update the code to test the property path
      //var instance = new RocketServices.ItemSummary();
      //expect(instance).to.be();
    });

    it('should have the property releaseYear (base name: "releaseYear")', function() {
      // uncomment below and update the code to test the property releaseYear
      //var instance = new RocketServices.ItemSummary();
      //expect(instance).to.be();
    });

    it('should have the property scopes (base name: "scopes")', function() {
      // uncomment below and update the code to test the property scopes
      //var instance = new RocketServices.ItemSummary();
      //expect(instance).to.be();
    });

    it('should have the property seasonId (base name: "seasonId")', function() {
      // uncomment below and update the code to test the property seasonId
      //var instance = new RocketServices.ItemSummary();
      //expect(instance).to.be();
    });

    it('should have the property seasonNumber (base name: "seasonNumber")', function() {
      // uncomment below and update the code to test the property seasonNumber
      //var instance = new RocketServices.ItemSummary();
      //expect(instance).to.be();
    });

    it('should have the property shortDescription (base name: "shortDescription")', function() {
      // uncomment below and update the code to test the property shortDescription
      //var instance = new RocketServices.ItemSummary();
      //expect(instance).to.be();
    });

    it('should have the property showId (base name: "showId")', function() {
      // uncomment below and update the code to test the property showId
      //var instance = new RocketServices.ItemSummary();
      //expect(instance).to.be();
    });

    it('should have the property showTitle (base name: "showTitle")', function() {
      // uncomment below and update the code to test the property showTitle
      //var instance = new RocketServices.ItemSummary();
      //expect(instance).to.be();
    });

    it('should have the property subtype (base name: "subtype")', function() {
      // uncomment below and update the code to test the property subtype
      //var instance = new RocketServices.ItemSummary();
      //expect(instance).to.be();
    });

    it('should have the property tagline (base name: "tagline")', function() {
      // uncomment below and update the code to test the property tagline
      //var instance = new RocketServices.ItemSummary();
      //expect(instance).to.be();
    });

    it('should have the property themes (base name: "themes")', function() {
      // uncomment below and update the code to test the property themes
      //var instance = new RocketServices.ItemSummary();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new RocketServices.ItemSummary();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new RocketServices.ItemSummary();
      //expect(instance).to.be();
    });

    it('should have the property watchPath (base name: "watchPath")', function() {
      // uncomment below and update the code to test the property watchPath
      //var instance = new RocketServices.ItemSummary();
      //expect(instance).to.be();
    });

  });

}));
