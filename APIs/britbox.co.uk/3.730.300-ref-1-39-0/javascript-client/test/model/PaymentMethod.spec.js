/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.RocketServices);
  }
}(this, function(expect, RocketServices) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new RocketServices.PaymentMethod();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PaymentMethod', function() {
    it('should create an instance of PaymentMethod', function() {
      // uncomment below and update the code to test PaymentMethod
      //var instance = new RocketServices.PaymentMethod();
      //expect(instance).to.be.a(RocketServices.PaymentMethod);
    });

    it('should have the property balance (base name: "balance")', function() {
      // uncomment below and update the code to test the property balance
      //var instance = new RocketServices.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property brand (base name: "brand")', function() {
      // uncomment below and update the code to test the property brand
      //var instance = new RocketServices.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property currency (base name: "currency")', function() {
      // uncomment below and update the code to test the property currency
      //var instance = new RocketServices.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new RocketServices.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property expiryMonth (base name: "expiryMonth")', function() {
      // uncomment below and update the code to test the property expiryMonth
      //var instance = new RocketServices.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property expiryYear (base name: "expiryYear")', function() {
      // uncomment below and update the code to test the property expiryYear
      //var instance = new RocketServices.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new RocketServices.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property lastDigits (base name: "lastDigits")', function() {
      // uncomment below and update the code to test the property lastDigits
      //var instance = new RocketServices.PaymentMethod();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new RocketServices.PaymentMethod();
      //expect(instance).to.be();
    });

  });

}));
