/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.RocketServices);
  }
}(this, function(expect, RocketServices) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new RocketServices.AppConfigGeneral();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AppConfigGeneral', function() {
    it('should create an instance of AppConfigGeneral', function() {
      // uncomment below and update the code to test AppConfigGeneral
      //var instance = new RocketServices.AppConfigGeneral();
      //expect(instance).to.be.a(RocketServices.AppConfigGeneral);
    });

    it('should have the property currencyCode (base name: "currencyCode")', function() {
      // uncomment below and update the code to test the property currencyCode
      //var instance = new RocketServices.AppConfigGeneral();
      //expect(instance).to.be();
    });

    it('should have the property customFields (base name: "customFields")', function() {
      // uncomment below and update the code to test the property customFields
      //var instance = new RocketServices.AppConfigGeneral();
      //expect(instance).to.be();
    });

    it('should have the property defaultTimeZone (base name: "defaultTimeZone")', function() {
      // uncomment below and update the code to test the property defaultTimeZone
      //var instance = new RocketServices.AppConfigGeneral();
      //expect(instance).to.be();
    });

    it('should have the property facebookAppId (base name: "facebookAppId")', function() {
      // uncomment below and update the code to test the property facebookAppId
      //var instance = new RocketServices.AppConfigGeneral();
      //expect(instance).to.be();
    });

    it('should have the property gaToken (base name: "gaToken")', function() {
      // uncomment below and update the code to test the property gaToken
      //var instance = new RocketServices.AppConfigGeneral();
      //expect(instance).to.be();
    });

    it('should have the property itemImageTypes (base name: "itemImageTypes")', function() {
      // uncomment below and update the code to test the property itemImageTypes
      //var instance = new RocketServices.AppConfigGeneral();
      //expect(instance).to.be();
    });

    it('should have the property mandatorySignIn (base name: "mandatorySignIn")', function() {
      // uncomment below and update the code to test the property mandatorySignIn
      //var instance = new RocketServices.AppConfigGeneral();
      //expect(instance).to.be();
    });

    it('should have the property maxUserRating (base name: "maxUserRating")', function() {
      // uncomment below and update the code to test the property maxUserRating
      //var instance = new RocketServices.AppConfigGeneral();
      //expect(instance).to.be();
    });

    it('should have the property stripeKey (base name: "stripeKey")', function() {
      // uncomment below and update the code to test the property stripeKey
      //var instance = new RocketServices.AppConfigGeneral();
      //expect(instance).to.be();
    });

    it('should have the property websiteUrl (base name: "websiteUrl")', function() {
      // uncomment below and update the code to test the property websiteUrl
      //var instance = new RocketServices.AppConfigGeneral();
      //expect(instance).to.be();
    });

  });

}));
