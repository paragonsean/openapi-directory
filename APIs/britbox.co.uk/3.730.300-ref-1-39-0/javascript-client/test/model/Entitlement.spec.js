/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.RocketServices);
  }
}(this, function(expect, RocketServices) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new RocketServices.Entitlement();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Entitlement', function() {
    it('should create an instance of Entitlement', function() {
      // uncomment below and update the code to test Entitlement
      //var instance = new RocketServices.Entitlement();
      //expect(instance).to.be.a(RocketServices.Entitlement);
    });

    it('should have the property deliveryType (base name: "deliveryType")', function() {
      // uncomment below and update the code to test the property deliveryType
      //var instance = new RocketServices.Entitlement();
      //expect(instance).to.be();
    });

    it('should have the property exclusionRules (base name: "exclusionRules")', function() {
      // uncomment below and update the code to test the property exclusionRules
      //var instance = new RocketServices.Entitlement();
      //expect(instance).to.be();
    });

    it('should have the property maxDownloads (base name: "maxDownloads")', function() {
      // uncomment below and update the code to test the property maxDownloads
      //var instance = new RocketServices.Entitlement();
      //expect(instance).to.be();
    });

    it('should have the property maxPlays (base name: "maxPlays")', function() {
      // uncomment below and update the code to test the property maxPlays
      //var instance = new RocketServices.Entitlement();
      //expect(instance).to.be();
    });

    it('should have the property ownership (base name: "ownership")', function() {
      // uncomment below and update the code to test the property ownership
      //var instance = new RocketServices.Entitlement();
      //expect(instance).to.be();
    });

    it('should have the property playPeriod (base name: "playPeriod")', function() {
      // uncomment below and update the code to test the property playPeriod
      //var instance = new RocketServices.Entitlement();
      //expect(instance).to.be();
    });

    it('should have the property rentalPeriod (base name: "rentalPeriod")', function() {
      // uncomment below and update the code to test the property rentalPeriod
      //var instance = new RocketServices.Entitlement();
      //expect(instance).to.be();
    });

    it('should have the property resolution (base name: "resolution")', function() {
      // uncomment below and update the code to test the property resolution
      //var instance = new RocketServices.Entitlement();
      //expect(instance).to.be();
    });

    it('should have the property scopes (base name: "scopes")', function() {
      // uncomment below and update the code to test the property scopes
      //var instance = new RocketServices.Entitlement();
      //expect(instance).to.be();
    });

    it('should have the property activationDate (base name: "activationDate")', function() {
      // uncomment below and update the code to test the property activationDate
      //var instance = new RocketServices.Entitlement();
      //expect(instance).to.be();
    });

    it('should have the property classification (base name: "classification")', function() {
      // uncomment below and update the code to test the property classification
      //var instance = new RocketServices.Entitlement();
      //expect(instance).to.be();
    });

    it('should have the property creationDate (base name: "creationDate")', function() {
      // uncomment below and update the code to test the property creationDate
      //var instance = new RocketServices.Entitlement();
      //expect(instance).to.be();
    });

    it('should have the property expirationDate (base name: "expirationDate")', function() {
      // uncomment below and update the code to test the property expirationDate
      //var instance = new RocketServices.Entitlement();
      //expect(instance).to.be();
    });

    it('should have the property itemId (base name: "itemId")', function() {
      // uncomment below and update the code to test the property itemId
      //var instance = new RocketServices.Entitlement();
      //expect(instance).to.be();
    });

    it('should have the property itemType (base name: "itemType")', function() {
      // uncomment below and update the code to test the property itemType
      //var instance = new RocketServices.Entitlement();
      //expect(instance).to.be();
    });

    it('should have the property mediaDuration (base name: "mediaDuration")', function() {
      // uncomment below and update the code to test the property mediaDuration
      //var instance = new RocketServices.Entitlement();
      //expect(instance).to.be();
    });

    it('should have the property planId (base name: "planId")', function() {
      // uncomment below and update the code to test the property planId
      //var instance = new RocketServices.Entitlement();
      //expect(instance).to.be();
    });

    it('should have the property playCount (base name: "playCount")', function() {
      // uncomment below and update the code to test the property playCount
      //var instance = new RocketServices.Entitlement();
      //expect(instance).to.be();
    });

    it('should have the property remainingDownloads (base name: "remainingDownloads")', function() {
      // uncomment below and update the code to test the property remainingDownloads
      //var instance = new RocketServices.Entitlement();
      //expect(instance).to.be();
    });

  });

}));
