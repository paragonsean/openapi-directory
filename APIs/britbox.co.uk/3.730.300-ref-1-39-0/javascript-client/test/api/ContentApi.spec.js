/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.RocketServices);
  }
}(this, function(expect, RocketServices) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new RocketServices.ContentApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ContentApi', function() {
    describe('getAnonNextPlaybackItem', function() {
      it('should call getAnonNextPlaybackItem successfully', function(done) {
        //uncomment below and update the code to test getAnonNextPlaybackItem
        //instance.getAnonNextPlaybackItem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getItem', function() {
      it('should call getItem successfully', function(done) {
        //uncomment below and update the code to test getItem
        //instance.getItem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getItemChildrenList', function() {
      it('should call getItemChildrenList successfully', function(done) {
        //uncomment below and update the code to test getItemChildrenList
        //instance.getItemChildrenList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getItemDownloadables', function() {
      it('should call getItemDownloadables successfully', function(done) {
        //uncomment below and update the code to test getItemDownloadables
        //instance.getItemDownloadables(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getItemRelatedList', function() {
      it('should call getItemRelatedList successfully', function(done) {
        //uncomment below and update the code to test getItemRelatedList
        //instance.getItemRelatedList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getItemsMediaClipFiles', function() {
      it('should call getItemsMediaClipFiles successfully', function(done) {
        //uncomment below and update the code to test getItemsMediaClipFiles
        //instance.getItemsMediaClipFiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getList', function() {
      it('should call getList successfully', function(done) {
        //uncomment below and update the code to test getList
        //instance.getList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLists', function() {
      it('should call getLists successfully', function(done) {
        //uncomment below and update the code to test getLists
        //instance.getLists(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPublicItemMediaFiles', function() {
      it('should call getPublicItemMediaFiles successfully', function(done) {
        //uncomment below and update the code to test getPublicItemMediaFiles
        //instance.getPublicItemMediaFiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSchedules', function() {
      it('should call getSchedules successfully', function(done) {
        //uncomment below and update the code to test getSchedules
        //instance.getSchedules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('plansIdGet', function() {
      it('should call plansIdGet successfully', function(done) {
        //uncomment below and update the code to test plansIdGet
        //instance.plansIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('search', function() {
      it('should call search successfully', function(done) {
        //uncomment below and update the code to test search
        //instance.search(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
