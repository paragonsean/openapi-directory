/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.RocketServices);
  }
}(this, function(expect, RocketServices) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new RocketServices.BtApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('BtApi', function() {
    describe('assignToken', function() {
      it('should call assignToken successfully', function(done) {
        //uncomment below and update the code to test assignToken
        //instance.assignToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('checkEeBtEligibility_0', function() {
      it('should call checkEeBtEligibility_0 successfully', function(done) {
        //uncomment below and update the code to test checkEeBtEligibility_0
        //instance.checkEeBtEligibility_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('checkUserToken', function() {
      it('should call checkUserToken successfully', function(done) {
        //uncomment below and update the code to test checkUserToken
        //instance.checkUserToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPlanByToken', function() {
      it('should call getPlanByToken successfully', function(done) {
        //uncomment below and update the code to test getPlanByToken
        //instance.getPlanByToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPlans', function() {
      it('should call getPlans successfully', function(done) {
        //uncomment below and update the code to test getPlans
        //instance.getPlans(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
