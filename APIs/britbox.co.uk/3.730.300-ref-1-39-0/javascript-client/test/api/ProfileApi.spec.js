/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.RocketServices);
  }
}(this, function(expect, RocketServices) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new RocketServices.ProfileApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProfileApi', function() {
    describe('bookmarkItem', function() {
      it('should call bookmarkItem successfully', function(done) {
        //uncomment below and update the code to test bookmarkItem
        //instance.bookmarkItem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteItemBookmark', function() {
      it('should call deleteItemBookmark successfully', function(done) {
        //uncomment below and update the code to test deleteItemBookmark
        //instance.deleteItemBookmark(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteWatched', function() {
      it('should call deleteWatched successfully', function(done) {
        //uncomment below and update the code to test deleteWatched
        //instance.deleteWatched(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBookmarkList', function() {
      it('should call getBookmarkList successfully', function(done) {
        //uncomment below and update the code to test getBookmarkList
        //instance.getBookmarkList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBookmarks', function() {
      it('should call getBookmarks successfully', function(done) {
        //uncomment below and update the code to test getBookmarks
        //instance.getBookmarks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContinueWatchingList', function() {
      it('should call getContinueWatchingList successfully', function(done) {
        //uncomment below and update the code to test getContinueWatchingList
        //instance.getContinueWatchingList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getItemBookmark', function() {
      it('should call getItemBookmark successfully', function(done) {
        //uncomment below and update the code to test getItemBookmark
        //instance.getItemBookmark(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getItemRating', function() {
      it('should call getItemRating successfully', function(done) {
        //uncomment below and update the code to test getItemRating
        //instance.getItemRating(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getItemWatchedStatus', function() {
      it('should call getItemWatchedStatus successfully', function(done) {
        //uncomment below and update the code to test getItemWatchedStatus
        //instance.getItemWatchedStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNextPlaybackItem', function() {
      it('should call getNextPlaybackItem successfully', function(done) {
        //uncomment below and update the code to test getNextPlaybackItem
        //instance.getNextPlaybackItem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProfile', function() {
      it('should call getProfile successfully', function(done) {
        //uncomment below and update the code to test getProfile
        //instance.getProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRatings', function() {
      it('should call getRatings successfully', function(done) {
        //uncomment below and update the code to test getRatings
        //instance.getRatings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRatingsList', function() {
      it('should call getRatingsList successfully', function(done) {
        //uncomment below and update the code to test getRatingsList
        //instance.getRatingsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWatched', function() {
      it('should call getWatched successfully', function(done) {
        //uncomment below and update the code to test getWatched
        //instance.getWatched(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWatchedList', function() {
      it('should call getWatchedList successfully', function(done) {
        //uncomment below and update the code to test getWatchedList
        //instance.getWatchedList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rateItem', function() {
      it('should call rateItem successfully', function(done) {
        //uncomment below and update the code to test rateItem
        //instance.rateItem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setItemWatchedStatus', function() {
      it('should call setItemWatchedStatus successfully', function(done) {
        //uncomment below and update the code to test setItemWatchedStatus
        //instance.setItemWatchedStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
