/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccessToken from '../model/AccessToken';
import ItemList from '../model/ItemList';
import ItvBillingHistory from '../model/ItvBillingHistory';
import ItvBillingHistoryRequest from '../model/ItvBillingHistoryRequest';
import ItvCancelSubscriptionRequest from '../model/ItvCancelSubscriptionRequest';
import ItvCardDetails from '../model/ItvCardDetails';
import ItvChangeCardDetailsRequest from '../model/ItvChangeCardDetailsRequest';
import ItvChangeEmailRequest from '../model/ItvChangeEmailRequest';
import ItvChangeMarketingRequest from '../model/ItvChangeMarketingRequest';
import ItvCurrentSubscription from '../model/ItvCurrentSubscription';
import ItvDeleteAccountRequest from '../model/ItvDeleteAccountRequest';
import ItvEntitlementCurrent from '../model/ItvEntitlementCurrent';
import ItvEntitlementsHistory from '../model/ItvEntitlementsHistory';
import ItvFeatureFlag from '../model/ItvFeatureFlag';
import ItvGetCardDetailsRequest from '../model/ItvGetCardDetailsRequest';
import ItvGetDiscountResponse from '../model/ItvGetDiscountResponse';
import ItvGooglePaySubscriptionRequest from '../model/ItvGooglePaySubscriptionRequest';
import ItvHadEntitlement from '../model/ItvHadEntitlement';
import ItvPinAuthRequest from '../model/ItvPinAuthRequest';
import ItvPlans from '../model/ItvPlans';
import ItvProfileToken from '../model/ItvProfileToken';
import ItvProfileTokenRequest from '../model/ItvProfileTokenRequest';
import ItvPurchase from '../model/ItvPurchase';
import ItvPurchaseRequest from '../model/ItvPurchaseRequest';
import ItvPurchaseStrongRequest from '../model/ItvPurchaseStrongRequest';
import ItvPurchaseStrongResponse from '../model/ItvPurchaseStrongResponse';
import ItvPurchaseWithOfferRequest from '../model/ItvPurchaseWithOfferRequest';
import ItvPurchaseWithOfferResponse from '../model/ItvPurchaseWithOfferResponse';
import ItvRokuTransactionRequest from '../model/ItvRokuTransactionRequest';
import ItvSubscriptionFullPriceRenewal from '../model/ItvSubscriptionFullPriceRenewal';
import ItvSubscriptionState from '../model/ItvSubscriptionState';
import ItvSubscriptionStatusResponse from '../model/ItvSubscriptionStatusResponse';
import ItvUpdateIntentStrongRequest from '../model/ItvUpdateIntentStrongRequest';
import ItvUpdateIntentStrongResponse from '../model/ItvUpdateIntentStrongResponse';
import ItvUpdatePaymentStrongRequest from '../model/ItvUpdatePaymentStrongRequest';
import ItvUpdateProfileRequest from '../model/ItvUpdateProfileRequest';
import ItvUpgradePlanRequest from '../model/ItvUpgradePlanRequest';
import ItvVoucher from '../model/ItvVoucher';
import ItvVoucherRequest from '../model/ItvVoucherRequest';
import RokuPlans from '../model/RokuPlans';
import SamsungPreview from '../model/SamsungPreview';
import ServiceError from '../model/ServiceError';

/**
* Itv service.
* @module api/ItvApi
* @version 3.730.300-ref-1-39-0
*/
export default class ItvApi {

    /**
    * Constructs a new ItvApi. 
    * @alias module:api/ItvApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the activateSaveOffer operation.
     * @callback module:api/ItvApi~activateSaveOfferCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activates the discount for a user. Only Stripe platform is currently supported.
     * @param {String} body The coupon id to be checked.
     * @param {Object} opts Optional parameters
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/ItvApi~activateSaveOfferCallback} callback The callback function, accepting three arguments: error, data, response
     */
    activateSaveOffer(body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling activateSaveOffer");
      }

      let pathParams = {
      };
      let queryParams = {
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/itv/save-offer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changeCardDetails operation.
     * @callback module:api/ItvApi~changeCardDetailsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change payment card details.
     * @param {String} platform The identifier of the payment platform (stripe/itunes).
     * @param {module:model/ItvChangeCardDetailsRequest} itvChangeCardDetailsRequest Details of change card details request.
     * @param {Object} opts Optional parameters
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/ItvApi~changeCardDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changeCardDetails(platform, itvChangeCardDetailsRequest, opts, callback) {
      opts = opts || {};
      let postBody = itvChangeCardDetailsRequest;
      // verify the required parameter 'platform' is set
      if (platform === undefined || platform === null) {
        throw new Error("Missing the required parameter 'platform' when calling changeCardDetails");
      }
      // verify the required parameter 'itvChangeCardDetailsRequest' is set
      if (itvChangeCardDetailsRequest === undefined || itvChangeCardDetailsRequest === null) {
        throw new Error("Missing the required parameter 'itvChangeCardDetailsRequest' when calling changeCardDetails");
      }

      let pathParams = {
        'platform': platform
      };
      let queryParams = {
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/itv/cards/{platform}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changeEmail operation.
     * @callback module:api/ItvApi~changeEmailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change email address related to account/profile.  The expected token scope is Settings. 
     * @param {module:model/ItvChangeEmailRequest} itvChangeEmailRequest New email address & ITV profile token.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [ff] The set of opt in feature flags which cause breaking changes to responses.  While Rocket APIs look to avoid breaking changes under the active major version, the formats of responses may need to evolve over this time.  These feature flags allow clients to select which response formats they expect and avoid breaking clients as these formats evolve under the current major version.  ### Flags  - `all` - Enable all flags. Useful for testing. _Don't use in production_. - `idp` - Dynamic item detail pages with schedulable rows. - `ldp` - Dynamic list detail pages with schedulable rows. - `hb` - Hubble formatted image urls. - `rpt` - Updated resume point threshold logic. - `cas` - \"Custom Asset Search\", inlcude `customAssets` in search results. - `lrl` - Do not pre-populate related list if more than `max_list_prefetch` down the page. - `cd` - Custom Destination support.  See the `feature-flags.md` for available flag details. 
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/ItvApi~changeEmailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changeEmail(itvChangeEmailRequest, opts, callback) {
      opts = opts || {};
      let postBody = itvChangeEmailRequest;
      // verify the required parameter 'itvChangeEmailRequest' is set
      if (itvChangeEmailRequest === undefined || itvChangeEmailRequest === null) {
        throw new Error("Missing the required parameter 'itvChangeEmailRequest' when calling changeEmail");
      }

      let pathParams = {
      };
      let queryParams = {
        'ff': this.apiClient.buildCollectionParam(opts['ff'], 'csv'),
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/itv/changeemail', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changeMarketing operation.
     * @callback module:api/ItvApi~changeMarketingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change marketing preferences related to account/profile.  The expected token scope is Settings. 
     * @param {module:model/ItvChangeMarketingRequest} itvChangeMarketingRequest Updated marketing preferences & ITV profile token.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [ff] The set of opt in feature flags which cause breaking changes to responses.  While Rocket APIs look to avoid breaking changes under the active major version, the formats of responses may need to evolve over this time.  These feature flags allow clients to select which response formats they expect and avoid breaking clients as these formats evolve under the current major version.  ### Flags  - `all` - Enable all flags. Useful for testing. _Don't use in production_. - `idp` - Dynamic item detail pages with schedulable rows. - `ldp` - Dynamic list detail pages with schedulable rows. - `hb` - Hubble formatted image urls. - `rpt` - Updated resume point threshold logic. - `cas` - \"Custom Asset Search\", inlcude `customAssets` in search results. - `lrl` - Do not pre-populate related list if more than `max_list_prefetch` down the page. - `cd` - Custom Destination support.  See the `feature-flags.md` for available flag details. 
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/ItvApi~changeMarketingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changeMarketing(itvChangeMarketingRequest, opts, callback) {
      opts = opts || {};
      let postBody = itvChangeMarketingRequest;
      // verify the required parameter 'itvChangeMarketingRequest' is set
      if (itvChangeMarketingRequest === undefined || itvChangeMarketingRequest === null) {
        throw new Error("Missing the required parameter 'itvChangeMarketingRequest' when calling changeMarketing");
      }

      let pathParams = {
      };
      let queryParams = {
        'ff': this.apiClient.buildCollectionParam(opts['ff'], 'csv'),
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/itv/changemarketing', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkPreviousEntitlements operation.
     * @callback module:api/ItvApi~checkPreviousEntitlementsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItvHadEntitlement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check whether the user has been previously entitled.
     * @param {Object} opts Optional parameters
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/ItvApi~checkPreviousEntitlementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItvHadEntitlement}
     */
    checkPreviousEntitlements(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ItvHadEntitlement;
      return this.apiClient.callApi(
        '/itv/had/entitlements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkVoucher operation.
     * @callback module:api/ItvApi~checkVoucherCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItvVoucher} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validates the coupon/voucher for specified payment platform.
     * @param {String} platform The identifier of the payment platform (stripe/itunes).
     * @param {module:model/ItvVoucherRequest} itvVoucherRequest Coupon/voucher.
     * @param {Object} opts Optional parameters
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/ItvApi~checkVoucherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItvVoucher}
     */
    checkVoucher(platform, itvVoucherRequest, opts, callback) {
      opts = opts || {};
      let postBody = itvVoucherRequest;
      // verify the required parameter 'platform' is set
      if (platform === undefined || platform === null) {
        throw new Error("Missing the required parameter 'platform' when calling checkVoucher");
      }
      // verify the required parameter 'itvVoucherRequest' is set
      if (itvVoucherRequest === undefined || itvVoucherRequest === null) {
        throw new Error("Missing the required parameter 'itvVoucherRequest' when calling checkVoucher");
      }

      let pathParams = {
        'platform': platform
      };
      let queryParams = {
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ItvVoucher;
      return this.apiClient.callApi(
        '/itv/voucher/{platform}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the confirmPurchase operation.
     * @callback module:api/ItvApi~confirmPurchaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItvPurchase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Confirms purchase and returns the details of purchased subscription for specified payment platform.
     * @param {String} platform The identifier of the payment platform (stripe/itunes).
     * @param {module:model/ItvPurchaseRequest} itvPurchaseRequest Details of a purchase request.
     * @param {Object} opts Optional parameters
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/ItvApi~confirmPurchaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItvPurchase}
     */
    confirmPurchase(platform, itvPurchaseRequest, opts, callback) {
      opts = opts || {};
      let postBody = itvPurchaseRequest;
      // verify the required parameter 'platform' is set
      if (platform === undefined || platform === null) {
        throw new Error("Missing the required parameter 'platform' when calling confirmPurchase");
      }
      // verify the required parameter 'itvPurchaseRequest' is set
      if (itvPurchaseRequest === undefined || itvPurchaseRequest === null) {
        throw new Error("Missing the required parameter 'itvPurchaseRequest' when calling confirmPurchase");
      }

      let pathParams = {
        'platform': platform
      };
      let queryParams = {
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ItvPurchase;
      return this.apiClient.callApi(
        '/itv/purchase/{platform}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the confirmPurchaseStrong operation.
     * @callback module:api/ItvApi~confirmPurchaseStrongCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItvPurchaseStrongResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Confirms purchase and returns the details of purchased subscription for specified payment platform.
     * @param {String} platform The identifier of the payment platform (stripe/itunes).
     * @param {module:model/ItvPurchaseStrongRequest} itvPurchaseStrongRequest Details of a purchase request.
     * @param {Object} opts Optional parameters
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/ItvApi~confirmPurchaseStrongCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItvPurchaseStrongResponse}
     */
    confirmPurchaseStrong(platform, itvPurchaseStrongRequest, opts, callback) {
      opts = opts || {};
      let postBody = itvPurchaseStrongRequest;
      // verify the required parameter 'platform' is set
      if (platform === undefined || platform === null) {
        throw new Error("Missing the required parameter 'platform' when calling confirmPurchaseStrong");
      }
      // verify the required parameter 'itvPurchaseStrongRequest' is set
      if (itvPurchaseStrongRequest === undefined || itvPurchaseStrongRequest === null) {
        throw new Error("Missing the required parameter 'itvPurchaseStrongRequest' when calling confirmPurchaseStrong");
      }

      let pathParams = {
        'platform': platform
      };
      let queryParams = {
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ItvPurchaseStrongResponse;
      return this.apiClient.callApi(
        '/itv/purchase/{platform}/strong', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the confirmPurchaseWithOffer operation.
     * @callback module:api/ItvApi~confirmPurchaseWithOfferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItvPurchaseWithOfferResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Confirms purchase and returns the details of purchased subscription for specified payment platform.
     * @param {String} platform The identifier of the payment platform (stripe/itunes).
     * @param {module:model/ItvPurchaseWithOfferRequest} itvPurchaseWithOfferRequest Details of a purchase request.
     * @param {Object} opts Optional parameters
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/ItvApi~confirmPurchaseWithOfferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItvPurchaseWithOfferResponse}
     */
    confirmPurchaseWithOffer(platform, itvPurchaseWithOfferRequest, opts, callback) {
      opts = opts || {};
      let postBody = itvPurchaseWithOfferRequest;
      // verify the required parameter 'platform' is set
      if (platform === undefined || platform === null) {
        throw new Error("Missing the required parameter 'platform' when calling confirmPurchaseWithOffer");
      }
      // verify the required parameter 'itvPurchaseWithOfferRequest' is set
      if (itvPurchaseWithOfferRequest === undefined || itvPurchaseWithOfferRequest === null) {
        throw new Error("Missing the required parameter 'itvPurchaseWithOfferRequest' when calling confirmPurchaseWithOffer");
      }

      let pathParams = {
        'platform': platform
      };
      let queryParams = {
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ItvPurchaseWithOfferResponse;
      return this.apiClient.callApi(
        '/itv/purchase/{platform}/withoffer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAccount operation.
     * @callback module:api/ItvApi~deleteAccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete account in compliance with GDPR.  The expected token scope is Settings. 
     * @param {module:model/ItvDeleteAccountRequest} itvDeleteAccountRequest New email address & ITV profile token.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [ff] The set of opt in feature flags which cause breaking changes to responses.  While Rocket APIs look to avoid breaking changes under the active major version, the formats of responses may need to evolve over this time.  These feature flags allow clients to select which response formats they expect and avoid breaking clients as these formats evolve under the current major version.  ### Flags  - `all` - Enable all flags. Useful for testing. _Don't use in production_. - `idp` - Dynamic item detail pages with schedulable rows. - `ldp` - Dynamic list detail pages with schedulable rows. - `hb` - Hubble formatted image urls. - `rpt` - Updated resume point threshold logic. - `cas` - \"Custom Asset Search\", inlcude `customAssets` in search results. - `lrl` - Do not pre-populate related list if more than `max_list_prefetch` down the page. - `cd` - Custom Destination support.  See the `feature-flags.md` for available flag details. 
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/ItvApi~deleteAccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAccount(itvDeleteAccountRequest, opts, callback) {
      opts = opts || {};
      let postBody = itvDeleteAccountRequest;
      // verify the required parameter 'itvDeleteAccountRequest' is set
      if (itvDeleteAccountRequest === undefined || itvDeleteAccountRequest === null) {
        throw new Error("Missing the required parameter 'itvDeleteAccountRequest' when calling deleteAccount");
      }

      let pathParams = {
      };
      let queryParams = {
        'ff': this.apiClient.buildCollectionParam(opts['ff'], 'csv'),
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/itv/deleteaccount', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the executeTransaction operation.
     * @callback module:api/ItvApi~executeTransactionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends request to execute specified transaction.
     * @param {String} transactionid The identifier of the Roku transaction (subscribe/upgrade/downgrade/cancellation).
     * @param {module:model/ItvRokuTransactionRequest} itvRokuTransactionRequest Details of a transaction request.
     * @param {Object} opts Optional parameters
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/ItvApi~executeTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    executeTransaction(transactionid, itvRokuTransactionRequest, opts, callback) {
      opts = opts || {};
      let postBody = itvRokuTransactionRequest;
      // verify the required parameter 'transactionid' is set
      if (transactionid === undefined || transactionid === null) {
        throw new Error("Missing the required parameter 'transactionid' when calling executeTransaction");
      }
      // verify the required parameter 'itvRokuTransactionRequest' is set
      if (itvRokuTransactionRequest === undefined || itvRokuTransactionRequest === null) {
        throw new Error("Missing the required parameter 'itvRokuTransactionRequest' when calling executeTransaction");
      }

      let pathParams = {
        'transactionid': transactionid
      };
      let queryParams = {
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/itv/roku/transaction/{transactionid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountTokenWithPin operation.
     * @callback module:api/ItvApi~getAccountTokenWithPinCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccessToken>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides authorization with parental control pin.  Returns an array containing account token with Playback scope.  Requires access token with Catalog scope.  Pin must be a 4-digit string 
     * @param {module:model/ItvPinAuthRequest} itvPinAuthRequest Details of token request.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [ff] The set of opt in feature flags which cause breaking changes to responses.  While Rocket APIs look to avoid breaking changes under the active major version, the formats of responses may need to evolve over this time.  These feature flags allow clients to select which response formats they expect and avoid breaking clients as these formats evolve under the current major version.  ### Flags  - `all` - Enable all flags. Useful for testing. _Don't use in production_. - `idp` - Dynamic item detail pages with schedulable rows. - `ldp` - Dynamic list detail pages with schedulable rows. - `hb` - Hubble formatted image urls. - `rpt` - Updated resume point threshold logic. - `cas` - \"Custom Asset Search\", inlcude `customAssets` in search results. - `lrl` - Do not pre-populate related list if more than `max_list_prefetch` down the page. - `cd` - Custom Destination support.  See the `feature-flags.md` for available flag details. 
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/ItvApi~getAccountTokenWithPinCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccessToken>}
     */
    getAccountTokenWithPin(itvPinAuthRequest, opts, callback) {
      opts = opts || {};
      let postBody = itvPinAuthRequest;
      // verify the required parameter 'itvPinAuthRequest' is set
      if (itvPinAuthRequest === undefined || itvPinAuthRequest === null) {
        throw new Error("Missing the required parameter 'itvPinAuthRequest' when calling getAccountTokenWithPin");
      }

      let pathParams = {
      };
      let queryParams = {
        'ff': this.apiClient.buildCollectionParam(opts['ff'], 'csv'),
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [AccessToken];
      return this.apiClient.callApi(
        '/itv/pinauthorization', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBillingHistory operation.
     * @callback module:api/ItvApi~getBillingHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItvBillingHistory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of billing records for specified payment platform.
     * @param {String} platform The identifier of the payment platform (stripe/itunes).
     * @param {module:model/ItvBillingHistoryRequest} itvBillingHistoryRequest Details of a billing history request.
     * @param {Object} opts Optional parameters
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/ItvApi~getBillingHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItvBillingHistory}
     */
    getBillingHistory(platform, itvBillingHistoryRequest, opts, callback) {
      opts = opts || {};
      let postBody = itvBillingHistoryRequest;
      // verify the required parameter 'platform' is set
      if (platform === undefined || platform === null) {
        throw new Error("Missing the required parameter 'platform' when calling getBillingHistory");
      }
      // verify the required parameter 'itvBillingHistoryRequest' is set
      if (itvBillingHistoryRequest === undefined || itvBillingHistoryRequest === null) {
        throw new Error("Missing the required parameter 'itvBillingHistoryRequest' when calling getBillingHistory");
      }

      let pathParams = {
        'platform': platform
      };
      let queryParams = {
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ItvBillingHistory;
      return this.apiClient.callApi(
        '/itv/billinghistory/{platform}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCardDetails operation.
     * @callback module:api/ItvApi~getCardDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItvCardDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get payment card details.
     * @param {String} platform The identifier of the payment platform (stripe/itunes).
     * @param {module:model/ItvGetCardDetailsRequest} itvGetCardDetailsRequest ITV profile token in body.
     * @param {Object} opts Optional parameters
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/ItvApi~getCardDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItvCardDetails}
     */
    getCardDetails(platform, itvGetCardDetailsRequest, opts, callback) {
      opts = opts || {};
      let postBody = itvGetCardDetailsRequest;
      // verify the required parameter 'platform' is set
      if (platform === undefined || platform === null) {
        throw new Error("Missing the required parameter 'platform' when calling getCardDetails");
      }
      // verify the required parameter 'itvGetCardDetailsRequest' is set
      if (itvGetCardDetailsRequest === undefined || itvGetCardDetailsRequest === null) {
        throw new Error("Missing the required parameter 'itvGetCardDetailsRequest' when calling getCardDetails");
      }

      let pathParams = {
        'platform': platform
      };
      let queryParams = {
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ItvCardDetails;
      return this.apiClient.callApi(
        '/itv/cards/{platform}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCurrentEntitlement operation.
     * @callback module:api/ItvApi~getCurrentEntitlementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItvEntitlementCurrent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns current entitlement.
     * @param {Object} opts Optional parameters
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/ItvApi~getCurrentEntitlementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItvEntitlementCurrent}
     */
    getCurrentEntitlement(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ItvEntitlementCurrent;
      return this.apiClient.callApi(
        '/itv/entitlements/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCurrentSubscription operation.
     * @callback module:api/ItvApi~getCurrentSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItvCurrentSubscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the details of current subscription for specified payment platform.
     * @param {String} platform The identifier of the payment platform (stripe/itunes).
     * @param {Object} opts Optional parameters
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/ItvApi~getCurrentSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItvCurrentSubscription}
     */
    getCurrentSubscription(platform, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'platform' is set
      if (platform === undefined || platform === null) {
        throw new Error("Missing the required parameter 'platform' when calling getCurrentSubscription");
      }

      let pathParams = {
        'platform': platform
      };
      let queryParams = {
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ItvCurrentSubscription;
      return this.apiClient.callApi(
        '/itv/purchase/{platform}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntitlementsHistory operation.
     * @callback module:api/ItvApi~getEntitlementsHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItvEntitlementsHistory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the state of subscription for any payment platform.
     * @param {Object} opts Optional parameters
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/ItvApi~getEntitlementsHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItvEntitlementsHistory}
     */
    getEntitlementsHistory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ItvEntitlementsHistory;
      return this.apiClient.callApi(
        '/itv/entitlements/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeatureFlag operation.
     * @callback module:api/ItvApi~getFeatureFlagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItvFeatureFlag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets info whether or not a feature is enabled or disabled using a feature flag. Feature flags are set as a custom field within PM. It also supports custom feature flag data if needed. Such data can be return as well.
     * @param {String} feature The identifier of the feature to check for feature flag.
     * @param {Object} opts Optional parameters
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/ItvApi~getFeatureFlagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItvFeatureFlag}
     */
    getFeatureFlag(feature, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'feature' is set
      if (feature === undefined || feature === null) {
        throw new Error("Missing the required parameter 'feature' when calling getFeatureFlag");
      }

      let pathParams = {
        'feature': feature
      };
      let queryParams = {
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ItvFeatureFlag;
      return this.apiClient.callApi(
        '/itv/featureFlag/{feature}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFullPriceRenewal operation.
     * @callback module:api/ItvApi~getFullPriceRenewalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItvSubscriptionFullPriceRenewal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns full price renewal state and reason for specific user.
     * @param {Object} opts Optional parameters
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/ItvApi~getFullPriceRenewalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItvSubscriptionFullPriceRenewal}
     */
    getFullPriceRenewal(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ItvSubscriptionFullPriceRenewal;
      return this.apiClient.callApi(
        '/itv/subscription/fullpricerenewal', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getItvProfileToken operation.
     * @callback module:api/ItvApi~getItvProfileTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItvProfileToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the ITV profile token.
     * @param {module:model/ItvProfileTokenRequest} itvProfileTokenRequest Details of token request.
     * @param {Object} opts Optional parameters
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/ItvApi~getItvProfileTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItvProfileToken}
     */
    getItvProfileToken(itvProfileTokenRequest, opts, callback) {
      opts = opts || {};
      let postBody = itvProfileTokenRequest;
      // verify the required parameter 'itvProfileTokenRequest' is set
      if (itvProfileTokenRequest === undefined || itvProfileTokenRequest === null) {
        throw new Error("Missing the required parameter 'itvProfileTokenRequest' when calling getItvProfileToken");
      }

      let pathParams = {
      };
      let queryParams = {
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ItvProfileToken;
      return this.apiClient.callApi(
        '/itv/profiletoken', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPublicPreview operation.
     * @callback module:api/ItvApi~getPublicPreviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SamsungPreview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns public preview for Samsung based on the page '/samsung-preview' configured in PresentationManager. There is a hard limit of max 40 items to be returned. It splits evenly items count into the page rows, remaining items are added into the first row. 
     * @param {module:api/ItvApi~getPublicPreviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SamsungPreview}
     */
    getPublicPreview(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SamsungPreview;
      return this.apiClient.callApi(
        '/samsung-preview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecommendedList operation.
     * @callback module:api/ItvApi~getRecommendedListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of recommended items under the active profile.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [itemTypes] List of item types to filter the recommendation list
     * @param {Number} [page = 1)] The page of items to load. Starts from page 1.
     * @param {Number} [pageSize = 12)] The number of items to return in a page.
     * @param {String} [device = 'web_browser')] The type of device the content is targeting.
     * @param {String} [sub] The active subscription code.
     * @param {Array.<String>} [segments] The list of segments to filter the response by.
     * @param {Array.<module:model/String>} [ff] The set of opt in feature flags which cause breaking changes to responses.  While Rocket APIs look to avoid breaking changes under the active major version, the formats of responses may need to evolve over this time.  These feature flags allow clients to select which response formats they expect and avoid breaking clients as these formats evolve under the current major version.  ### Flags  - `all` - Enable all flags. Useful for testing. _Don't use in production_. - `idp` - Dynamic item detail pages with schedulable rows. - `ldp` - Dynamic list detail pages with schedulable rows. - `hb` - Hubble formatted image urls. - `rpt` - Updated resume point threshold logic. - `cas` - \"Custom Asset Search\", inlcude `customAssets` in search results. - `lrl` - Do not pre-populate related list if more than `max_list_prefetch` down the page. - `cd` - Custom Destination support.  See the `feature-flags.md` for available flag details. 
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/ItvApi~getRecommendedListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemList}
     */
    getRecommendedList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'item_types': this.apiClient.buildCollectionParam(opts['itemTypes'], 'csv'),
        'page': opts['page'],
        'page_size': opts['pageSize'],
        'device': opts['device'],
        'sub': opts['sub'],
        'segments': this.apiClient.buildCollectionParam(opts['segments'], 'csv'),
        'ff': this.apiClient.buildCollectionParam(opts['ff'], 'csv'),
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['profileAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ItemList;
      return this.apiClient.callApi(
        '/itv/profile/recommendation/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSaveOffer operation.
     * @callback module:api/ItvApi~getSaveOfferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItvGetDiscountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks the provided coupon id for a user. Only Stripe platform is currently supported.
     * @param {Object} opts Optional parameters
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/ItvApi~getSaveOfferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItvGetDiscountResponse}
     */
    getSaveOffer(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ItvGetDiscountResponse;
      return this.apiClient.callApi(
        '/itv/save-offer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubscriptionState operation.
     * @callback module:api/ItvApi~getSubscriptionStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItvSubscriptionState} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the state of subscription for any payment platform.
     * @param {Object} opts Optional parameters
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/ItvApi~getSubscriptionStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItvSubscriptionState}
     */
    getSubscriptionState(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ItvSubscriptionState;
      return this.apiClient.callApi(
        '/itv/subscriptionstate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubscriptionStatus operation.
     * @callback module:api/ItvApi~getSubscriptionStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItvSubscriptionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns status of latest payment intent.
     * @param {String} platform The identifier of the payment platform (stripe/itunes).
     * @param {Object} opts Optional parameters
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/ItvApi~getSubscriptionStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItvSubscriptionStatusResponse}
     */
    getSubscriptionStatus(platform, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'platform' is set
      if (platform === undefined || platform === null) {
        throw new Error("Missing the required parameter 'platform' when calling getSubscriptionStatus");
      }

      let pathParams = {
        'platform': platform
      };
      let queryParams = {
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ItvSubscriptionStatusResponse;
      return this.apiClient.callApi(
        '/itv/subscription/status/{platform}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUpcomingInvoice operation.
     * @callback module:api/ItvApi~getUpcomingInvoiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItvGetDiscountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an upcoming invoice
     * @param {Object} opts Optional parameters
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/ItvApi~getUpcomingInvoiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItvGetDiscountResponse}
     */
    getUpcomingInvoice(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ItvGetDiscountResponse;
      return this.apiClient.callApi(
        '/itv/upcominginvoice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVoucherById operation.
     * @callback module:api/ItvApi~getVoucherByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItvVoucher} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks the provided coupon id for a user. Only Stripe platform is currently supported.
     * @param {String} voucherId The identifier of the voucher.
     * @param {String} planId The identifier of the plan.
     * @param {Object} opts Optional parameters
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/ItvApi~getVoucherByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItvVoucher}
     */
    getVoucherById(voucherId, planId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'voucherId' is set
      if (voucherId === undefined || voucherId === null) {
        throw new Error("Missing the required parameter 'voucherId' when calling getVoucherById");
      }
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling getVoucherById");
      }

      let pathParams = {
        'voucherId': voucherId,
        'planId': planId
      };
      let queryParams = {
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ItvVoucher;
      return this.apiClient.callApi(
        '/itv/voucher/{planId}/{voucherId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the googlePaySubscription operation.
     * @callback module:api/ItvApi~googlePaySubscriptionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of recommended items under the active profile.
     * @param {module:model/ItvGooglePaySubscriptionRequest} itvGooglePaySubscriptionRequest Details of googlePay subscription request.
     * @param {Object} opts Optional parameters
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/ItvApi~googlePaySubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    googlePaySubscription(itvGooglePaySubscriptionRequest, opts, callback) {
      opts = opts || {};
      let postBody = itvGooglePaySubscriptionRequest;
      // verify the required parameter 'itvGooglePaySubscriptionRequest' is set
      if (itvGooglePaySubscriptionRequest === undefined || itvGooglePaySubscriptionRequest === null) {
        throw new Error("Missing the required parameter 'itvGooglePaySubscriptionRequest' when calling googlePaySubscription");
      }

      let pathParams = {
      };
      let queryParams = {
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['profileAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/itv/googlepay/subscription', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the itvItemsummaryExternalIdGet operation.
     * @callback module:api/ItvApi~itvItemsummaryExternalIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceError} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Redirects to corresponding Axis Item details page.
     * @param {String} externalId The external identifier of the item.
     * @param {module:api/ItvApi~itvItemsummaryExternalIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceError}
     */
    itvItemsummaryExternalIdGet(externalId, callback) {
      let postBody = null;
      // verify the required parameter 'externalId' is set
      if (externalId === undefined || externalId === null) {
        throw new Error("Missing the required parameter 'externalId' when calling itvItemsummaryExternalIdGet");
      }

      let pathParams = {
        'externalId': externalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceError;
      return this.apiClient.callApi(
        '/itv/itemsummary/{externalId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the itvPlansPlatformGet operation.
     * @callback module:api/ItvApi~itvPlansPlatformGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItvPlans} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the plans available for specified payment platform.
     * @param {String} platform The identifier of the payment platform (stripe/itunes).
     * @param {Object} opts Optional parameters
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/ItvApi~itvPlansPlatformGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItvPlans}
     */
    itvPlansPlatformGet(platform, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'platform' is set
      if (platform === undefined || platform === null) {
        throw new Error("Missing the required parameter 'platform' when calling itvPlansPlatformGet");
      }

      let pathParams = {
        'platform': platform
      };
      let queryParams = {
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ItvPlans;
      return this.apiClient.callApi(
        '/itv/plans/{platform}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the itvProfileGet operation.
     * @callback module:api/ItvApi~itvProfileGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the ITV profile object.
     * @param {Object} opts Optional parameters
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/ItvApi~itvProfileGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    itvProfileGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/itv/profile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the itvPurchasePlatformDelete operation.
     * @callback module:api/ItvApi~itvPurchasePlatformDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a plan subscription.  A cancelled subscription will continue to be valid until the subscription expiry date or next renewal date. 
     * @param {String} platform The identifier of the payment platform (stripe/itunes).
     * @param {module:model/ItvCancelSubscriptionRequest} itvCancelSubscriptionRequest Details of a cancellation request.
     * @param {Object} opts Optional parameters
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/ItvApi~itvPurchasePlatformDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    itvPurchasePlatformDelete(platform, itvCancelSubscriptionRequest, opts, callback) {
      opts = opts || {};
      let postBody = itvCancelSubscriptionRequest;
      // verify the required parameter 'platform' is set
      if (platform === undefined || platform === null) {
        throw new Error("Missing the required parameter 'platform' when calling itvPurchasePlatformDelete");
      }
      // verify the required parameter 'itvCancelSubscriptionRequest' is set
      if (itvCancelSubscriptionRequest === undefined || itvCancelSubscriptionRequest === null) {
        throw new Error("Missing the required parameter 'itvCancelSubscriptionRequest' when calling itvPurchasePlatformDelete");
      }

      let pathParams = {
        'platform': platform
      };
      let queryParams = {
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/itv/purchase/{platform}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the itvRokuPlansGet operation.
     * @callback module:api/ItvApi~itvRokuPlansGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RokuPlans} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets available Roku plans.
     * @param {Object} opts Optional parameters
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/ItvApi~itvRokuPlansGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RokuPlans}
     */
    itvRokuPlansGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RokuPlans;
      return this.apiClient.callApi(
        '/itv/roku/plans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resubscribe operation.
     * @callback module:api/ItvApi~resubscribeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resubscription for a user.
     * @param {String} planId The id of the plan to renew.
     * @param {String} platform The identifier of the payment platform (stripe/itunes). Only stripe is currently supported.
     * @param {Object} opts Optional parameters
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/ItvApi~resubscribeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    resubscribe(planId, platform, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'planId' is set
      if (planId === undefined || planId === null) {
        throw new Error("Missing the required parameter 'planId' when calling resubscribe");
      }
      // verify the required parameter 'platform' is set
      if (platform === undefined || platform === null) {
        throw new Error("Missing the required parameter 'platform' when calling resubscribe");
      }

      let pathParams = {
        'platform': platform
      };
      let queryParams = {
        'planId': planId,
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/itv/resubscribe/{platform}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePaymentIntentStrong operation.
     * @callback module:api/ItvApi~updatePaymentIntentStrongCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItvUpdateIntentStrongResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change payment method details.
     * @param {String} platform The identifier of the payment platform (stripe only is currently supported).
     * @param {module:model/ItvUpdateIntentStrongRequest} itvUpdateIntentStrongRequest Details of change card details request.
     * @param {Object} opts Optional parameters
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/ItvApi~updatePaymentIntentStrongCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItvUpdateIntentStrongResponse}
     */
    updatePaymentIntentStrong(platform, itvUpdateIntentStrongRequest, opts, callback) {
      opts = opts || {};
      let postBody = itvUpdateIntentStrongRequest;
      // verify the required parameter 'platform' is set
      if (platform === undefined || platform === null) {
        throw new Error("Missing the required parameter 'platform' when calling updatePaymentIntentStrong");
      }
      // verify the required parameter 'itvUpdateIntentStrongRequest' is set
      if (itvUpdateIntentStrongRequest === undefined || itvUpdateIntentStrongRequest === null) {
        throw new Error("Missing the required parameter 'itvUpdateIntentStrongRequest' when calling updatePaymentIntentStrong");
      }

      let pathParams = {
        'platform': platform
      };
      let queryParams = {
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ItvUpdateIntentStrongResponse;
      return this.apiClient.callApi(
        '/itv/updateIntent/strong/{platform}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePaymentMethodStrong operation.
     * @callback module:api/ItvApi~updatePaymentMethodStrongCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change payment method details.
     * @param {String} platform The identifier of the payment platform (stripe only is currently supported).
     * @param {module:model/ItvUpdatePaymentStrongRequest} itvUpdatePaymentStrongRequest Details of change card details request.
     * @param {Object} opts Optional parameters
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/ItvApi~updatePaymentMethodStrongCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updatePaymentMethodStrong(platform, itvUpdatePaymentStrongRequest, opts, callback) {
      opts = opts || {};
      let postBody = itvUpdatePaymentStrongRequest;
      // verify the required parameter 'platform' is set
      if (platform === undefined || platform === null) {
        throw new Error("Missing the required parameter 'platform' when calling updatePaymentMethodStrong");
      }
      // verify the required parameter 'itvUpdatePaymentStrongRequest' is set
      if (itvUpdatePaymentStrongRequest === undefined || itvUpdatePaymentStrongRequest === null) {
        throw new Error("Missing the required parameter 'itvUpdatePaymentStrongRequest' when calling updatePaymentMethodStrong");
      }

      let pathParams = {
        'platform': platform
      };
      let queryParams = {
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/itv/updatePayment/strong/{platform}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProfile operation.
     * @callback module:api/ItvApi~updateProfileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update ITV profile.  The expected token scope is Settings. 
     * @param {module:model/ItvUpdateProfileRequest} itvUpdateProfileRequest ITV profile object with updated values & ITV profile token.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [ff] The set of opt in feature flags which cause breaking changes to responses.  While Rocket APIs look to avoid breaking changes under the active major version, the formats of responses may need to evolve over this time.  These feature flags allow clients to select which response formats they expect and avoid breaking clients as these formats evolve under the current major version.  ### Flags  - `all` - Enable all flags. Useful for testing. _Don't use in production_. - `idp` - Dynamic item detail pages with schedulable rows. - `ldp` - Dynamic list detail pages with schedulable rows. - `hb` - Hubble formatted image urls. - `rpt` - Updated resume point threshold logic. - `cas` - \"Custom Asset Search\", inlcude `customAssets` in search results. - `lrl` - Do not pre-populate related list if more than `max_list_prefetch` down the page. - `cd` - Custom Destination support.  See the `feature-flags.md` for available flag details. 
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/ItvApi~updateProfileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateProfile(itvUpdateProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = itvUpdateProfileRequest;
      // verify the required parameter 'itvUpdateProfileRequest' is set
      if (itvUpdateProfileRequest === undefined || itvUpdateProfileRequest === null) {
        throw new Error("Missing the required parameter 'itvUpdateProfileRequest' when calling updateProfile");
      }

      let pathParams = {
      };
      let queryParams = {
        'ff': this.apiClient.buildCollectionParam(opts['ff'], 'csv'),
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/itv/profile', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the upgradePlan operation.
     * @callback module:api/ItvApi~upgradePlanCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upgrades the plan for the current user.
     * @param {String} platform The identifier of the payment platform (stripe/itunes). Only Stripe is supported
     * @param {module:model/ItvUpgradePlanRequest} itvUpgradePlanRequest Details of an upgrade request.
     * @param {Object} opts Optional parameters
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/ItvApi~upgradePlanCallback} callback The callback function, accepting three arguments: error, data, response
     */
    upgradePlan(platform, itvUpgradePlanRequest, opts, callback) {
      opts = opts || {};
      let postBody = itvUpgradePlanRequest;
      // verify the required parameter 'platform' is set
      if (platform === undefined || platform === null) {
        throw new Error("Missing the required parameter 'platform' when calling upgradePlan");
      }
      // verify the required parameter 'itvUpgradePlanRequest' is set
      if (itvUpgradePlanRequest === undefined || itvUpgradePlanRequest === null) {
        throw new Error("Missing the required parameter 'itvUpgradePlanRequest' when calling upgradePlan");
      }

      let pathParams = {
        'platform': platform
      };
      let queryParams = {
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/itv/plan/{platform}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
