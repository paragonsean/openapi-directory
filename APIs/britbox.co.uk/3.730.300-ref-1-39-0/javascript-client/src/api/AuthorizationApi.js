/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccessToken from '../model/AccessToken';
import AccountTokenByCodeRequest from '../model/AccountTokenByCodeRequest';
import AccountTokenRequest from '../model/AccountTokenRequest';
import DeviceAuthorizationCode from '../model/DeviceAuthorizationCode';
import DeviceRegistrationRequest from '../model/DeviceRegistrationRequest';
import ProfileTokenRequest from '../model/ProfileTokenRequest';
import ServiceError from '../model/ServiceError';
import SingleSignOnRequest from '../model/SingleSignOnRequest';
import TokenRefreshRequest from '../model/TokenRefreshRequest';

/**
* Authorization service.
* @module api/AuthorizationApi
* @version 3.730.300-ref-1-39-0
*/
export default class AuthorizationApi {

    /**
    * Constructs a new AuthorizationApi. 
    * @alias module:api/AuthorizationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the generateDeviceAuthorizationCode operation.
     * @callback module:api/AuthorizationApi~generateDeviceAuthorizationCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceAuthorizationCode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a generated device authorization code.  This is the first step in the process of authorizing a device by pin code. The device will make a request to this endpoint providing a unique identifier for the device such as a serial number. This endpoint will then return a generated code which is tied to the given device.  The code may subsequently be used to authorize the device to sign in to an account via the `/account/devices/authorization` endpoint. Typically this will be from a page presented in the web app under the account section.  Once authorized, the device will then be able to sign in to that account via the `/authorization/device` endpoint, without needing to provide the  credentials of the user. 
     * @param {module:model/DeviceRegistrationRequest} deviceRegistrationRequest Details of the device being authorized.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [ff] The set of opt in feature flags which cause breaking changes to responses.  While Rocket APIs look to avoid breaking changes under the active major version, the formats of responses may need to evolve over this time.  These feature flags allow clients to select which response formats they expect and avoid breaking clients as these formats evolve under the current major version.  ### Flags  - `all` - Enable all flags. Useful for testing. _Don't use in production_. - `idp` - Dynamic item detail pages with schedulable rows. - `ldp` - Dynamic list detail pages with schedulable rows. - `hb` - Hubble formatted image urls. - `rpt` - Updated resume point threshold logic. - `cas` - \"Custom Asset Search\", inlcude `customAssets` in search results. - `lrl` - Do not pre-populate related list if more than `max_list_prefetch` down the page. - `cd` - Custom Destination support.  See the `feature-flags.md` for available flag details. 
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/AuthorizationApi~generateDeviceAuthorizationCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceAuthorizationCode}
     */
    generateDeviceAuthorizationCode(deviceRegistrationRequest, opts, callback) {
      opts = opts || {};
      let postBody = deviceRegistrationRequest;
      // verify the required parameter 'deviceRegistrationRequest' is set
      if (deviceRegistrationRequest === undefined || deviceRegistrationRequest === null) {
        throw new Error("Missing the required parameter 'deviceRegistrationRequest' when calling generateDeviceAuthorizationCode");
      }

      let pathParams = {
      };
      let queryParams = {
        'ff': this.apiClient.buildCollectionParam(opts['ff'], 'csv'),
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceAuthorizationCode;
      return this.apiClient.callApi(
        '/authorization/device/code', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountToken operation.
     * @callback module:api/AuthorizationApi~getAccountTokenCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccessToken>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request one or more `Account` level authorization tokens each with a chosen scope.  Tokens are used to access restricted service endpoints. These restricted endpoints will require a specific token type (e.g Account) with a specific scope (e.g. Catalog) before access is granted.  For convenience, where a Profile level token with the same scope exists it will also be returned.  Authorization with pin is not supported on this endpoint anymore. Use `/itv/pinauthorization` endpoint instead. 
     * @param {module:model/AccountTokenRequest} accountTokenRequest The account credentials with requested token scope.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [ff] The set of opt in feature flags which cause breaking changes to responses.  While Rocket APIs look to avoid breaking changes under the active major version, the formats of responses may need to evolve over this time.  These feature flags allow clients to select which response formats they expect and avoid breaking clients as these formats evolve under the current major version.  ### Flags  - `all` - Enable all flags. Useful for testing. _Don't use in production_. - `idp` - Dynamic item detail pages with schedulable rows. - `ldp` - Dynamic list detail pages with schedulable rows. - `hb` - Hubble formatted image urls. - `rpt` - Updated resume point threshold logic. - `cas` - \"Custom Asset Search\", inlcude `customAssets` in search results. - `lrl` - Do not pre-populate related list if more than `max_list_prefetch` down the page. - `cd` - Custom Destination support.  See the `feature-flags.md` for available flag details. 
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/AuthorizationApi~getAccountTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccessToken>}
     */
    getAccountToken(accountTokenRequest, opts, callback) {
      opts = opts || {};
      let postBody = accountTokenRequest;
      // verify the required parameter 'accountTokenRequest' is set
      if (accountTokenRequest === undefined || accountTokenRequest === null) {
        throw new Error("Missing the required parameter 'accountTokenRequest' when calling getAccountToken");
      }

      let pathParams = {
      };
      let queryParams = {
        'ff': this.apiClient.buildCollectionParam(opts['ff'], 'csv'),
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [AccessToken];
      return this.apiClient.callApi(
        '/authorization', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountTokenByCode operation.
     * @callback module:api/AuthorizationApi~getAccountTokenByCodeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccessToken>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Catalog tokens for an account using a device authorization code. Where a Profile level token of Catalog scope exists it will also be returned.  This is the final step in the process of authorizing a device by pin code.  Firstly the device must request a generated authorization code via the `/authorization/device/code` endpoint.  The code is subsequently used to authorize the device to sign in to a given account via the `/account/devices/authorization` endpoint. Typically this will be from a page presented in the web app under the account section.  Once authorized, this endpoint will allow the device to sign in without needing to provide the credentials of the user. 
     * @param {module:model/AccountTokenByCodeRequest} accountTokenByCodeRequest The device id e.g. serial number and authorization code.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [ff] The set of opt in feature flags which cause breaking changes to responses.  While Rocket APIs look to avoid breaking changes under the active major version, the formats of responses may need to evolve over this time.  These feature flags allow clients to select which response formats they expect and avoid breaking clients as these formats evolve under the current major version.  ### Flags  - `all` - Enable all flags. Useful for testing. _Don't use in production_. - `idp` - Dynamic item detail pages with schedulable rows. - `ldp` - Dynamic list detail pages with schedulable rows. - `hb` - Hubble formatted image urls. - `rpt` - Updated resume point threshold logic. - `cas` - \"Custom Asset Search\", inlcude `customAssets` in search results. - `lrl` - Do not pre-populate related list if more than `max_list_prefetch` down the page. - `cd` - Custom Destination support.  See the `feature-flags.md` for available flag details. 
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/AuthorizationApi~getAccountTokenByCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccessToken>}
     */
    getAccountTokenByCode(accountTokenByCodeRequest, opts, callback) {
      opts = opts || {};
      let postBody = accountTokenByCodeRequest;
      // verify the required parameter 'accountTokenByCodeRequest' is set
      if (accountTokenByCodeRequest === undefined || accountTokenByCodeRequest === null) {
        throw new Error("Missing the required parameter 'accountTokenByCodeRequest' when calling getAccountTokenByCode");
      }

      let pathParams = {
      };
      let queryParams = {
        'ff': this.apiClient.buildCollectionParam(opts['ff'], 'csv'),
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [AccessToken];
      return this.apiClient.callApi(
        '/authorization/device', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfileToken operation.
     * @callback module:api/AuthorizationApi~getProfileTokenCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccessToken>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request one or more `Profile` level authorization tokens each with a chosen scope.  Tokens are used to access restricted service endpoints. These restriced endpoints will require a specific token type (e.g Profile) with a specific scope (e.g. Catalog) before access is granted. 
     * @param {module:model/ProfileTokenRequest} profileTokenRequest The profile id and optional pin with required token scope.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [ff] The set of opt in feature flags which cause breaking changes to responses.  While Rocket APIs look to avoid breaking changes under the active major version, the formats of responses may need to evolve over this time.  These feature flags allow clients to select which response formats they expect and avoid breaking clients as these formats evolve under the current major version.  ### Flags  - `all` - Enable all flags. Useful for testing. _Don't use in production_. - `idp` - Dynamic item detail pages with schedulable rows. - `ldp` - Dynamic list detail pages with schedulable rows. - `hb` - Hubble formatted image urls. - `rpt` - Updated resume point threshold logic. - `cas` - \"Custom Asset Search\", inlcude `customAssets` in search results. - `lrl` - Do not pre-populate related list if more than `max_list_prefetch` down the page. - `cd` - Custom Destination support.  See the `feature-flags.md` for available flag details. 
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/AuthorizationApi~getProfileTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccessToken>}
     */
    getProfileToken(profileTokenRequest, opts, callback) {
      opts = opts || {};
      let postBody = profileTokenRequest;
      // verify the required parameter 'profileTokenRequest' is set
      if (profileTokenRequest === undefined || profileTokenRequest === null) {
        throw new Error("Missing the required parameter 'profileTokenRequest' when calling getProfileToken");
      }

      let pathParams = {
      };
      let queryParams = {
        'ff': this.apiClient.buildCollectionParam(opts['ff'], 'csv'),
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [AccessToken];
      return this.apiClient.callApi(
        '/authorization/profile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the refreshToken operation.
     * @callback module:api/AuthorizationApi~refreshTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccessToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh an account or profile level authorization token which is marked as refreshable.
     * @param {module:model/TokenRefreshRequest} tokenRefreshRequest The token to refresh.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [ff] The set of opt in feature flags which cause breaking changes to responses.  While Rocket APIs look to avoid breaking changes under the active major version, the formats of responses may need to evolve over this time.  These feature flags allow clients to select which response formats they expect and avoid breaking clients as these formats evolve under the current major version.  ### Flags  - `all` - Enable all flags. Useful for testing. _Don't use in production_. - `idp` - Dynamic item detail pages with schedulable rows. - `ldp` - Dynamic list detail pages with schedulable rows. - `hb` - Hubble formatted image urls. - `rpt` - Updated resume point threshold logic. - `cas` - \"Custom Asset Search\", inlcude `customAssets` in search results. - `lrl` - Do not pre-populate related list if more than `max_list_prefetch` down the page. - `cd` - Custom Destination support.  See the `feature-flags.md` for available flag details. 
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/AuthorizationApi~refreshTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccessToken}
     */
    refreshToken(tokenRefreshRequest, opts, callback) {
      opts = opts || {};
      let postBody = tokenRefreshRequest;
      // verify the required parameter 'tokenRefreshRequest' is set
      if (tokenRefreshRequest === undefined || tokenRefreshRequest === null) {
        throw new Error("Missing the required parameter 'tokenRefreshRequest' when calling refreshToken");
      }

      let pathParams = {
      };
      let queryParams = {
        'ff': this.apiClient.buildCollectionParam(opts['ff'], 'csv'),
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccessToken;
      return this.apiClient.callApi(
        '/authorization/refresh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the signOut operation.
     * @callback module:api/AuthorizationApi~signOutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * When a user signs out of an application we need to clear some basic cookies we assigned them during token authorization. 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [ff] The set of opt in feature flags which cause breaking changes to responses.  While Rocket APIs look to avoid breaking changes under the active major version, the formats of responses may need to evolve over this time.  These feature flags allow clients to select which response formats they expect and avoid breaking clients as these formats evolve under the current major version.  ### Flags  - `all` - Enable all flags. Useful for testing. _Don't use in production_. - `idp` - Dynamic item detail pages with schedulable rows. - `ldp` - Dynamic list detail pages with schedulable rows. - `hb` - Hubble formatted image urls. - `rpt` - Updated resume point threshold logic. - `cas` - \"Custom Asset Search\", inlcude `customAssets` in search results. - `lrl` - Do not pre-populate related list if more than `max_list_prefetch` down the page. - `cd` - Custom Destination support.  See the `feature-flags.md` for available flag details. 
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/AuthorizationApi~signOutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    signOut(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ff': this.apiClient.buildCollectionParam(opts['ff'], 'csv'),
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/authorization', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the singleSignOn operation.
     * @callback module:api/AuthorizationApi~singleSignOnCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccessToken>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exchange a third party single-sign-on token for our own authorization tokens.
     * @param {module:model/SingleSignOnRequest} singleSignOnRequest A single-sign-on request.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [ff] The set of opt in feature flags which cause breaking changes to responses.  While Rocket APIs look to avoid breaking changes under the active major version, the formats of responses may need to evolve over this time.  These feature flags allow clients to select which response formats they expect and avoid breaking clients as these formats evolve under the current major version.  ### Flags  - `all` - Enable all flags. Useful for testing. _Don't use in production_. - `idp` - Dynamic item detail pages with schedulable rows. - `ldp` - Dynamic list detail pages with schedulable rows. - `hb` - Hubble formatted image urls. - `rpt` - Updated resume point threshold logic. - `cas` - \"Custom Asset Search\", inlcude `customAssets` in search results. - `lrl` - Do not pre-populate related list if more than `max_list_prefetch` down the page. - `cd` - Custom Destination support.  See the `feature-flags.md` for available flag details. 
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/AuthorizationApi~singleSignOnCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccessToken>}
     */
    singleSignOn(singleSignOnRequest, opts, callback) {
      opts = opts || {};
      let postBody = singleSignOnRequest;
      // verify the required parameter 'singleSignOnRequest' is set
      if (singleSignOnRequest === undefined || singleSignOnRequest === null) {
        throw new Error("Missing the required parameter 'singleSignOnRequest' when calling singleSignOn");
      }

      let pathParams = {
      };
      let queryParams = {
        'ff': this.apiClient.buildCollectionParam(opts['ff'], 'csv'),
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [AccessToken];
      return this.apiClient.callApi(
        '/authorization/sso', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
