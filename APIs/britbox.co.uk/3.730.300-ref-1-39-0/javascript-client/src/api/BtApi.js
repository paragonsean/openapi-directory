/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BtPlanListItem from '../model/BtPlanListItem';
import BtPlans from '../model/BtPlans';
import EeBtEligibility from '../model/EeBtEligibility';
import ItvAssignBtTokenRequest from '../model/ItvAssignBtTokenRequest';
import ServiceError from '../model/ServiceError';

/**
* Bt service.
* @module api/BtApi
* @version 3.730.300-ref-1-39-0
*/
export default class BtApi {

    /**
    * Constructs a new BtApi. 
    * @alias module:api/BtApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the assignToken operation.
     * @callback module:api/BtApi~assignTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assigns an UserToken to a profile on the ITV side. Currently throws an exception.
     * @param {module:model/ItvAssignBtTokenRequest} itvAssignBtTokenRequest Details of an assign request.
     * @param {Object} opts Optional parameters
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/BtApi~assignTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    assignToken(itvAssignBtTokenRequest, opts, callback) {
      opts = opts || {};
      let postBody = itvAssignBtTokenRequest;
      // verify the required parameter 'itvAssignBtTokenRequest' is set
      if (itvAssignBtTokenRequest === undefined || itvAssignBtTokenRequest === null) {
        throw new Error("Missing the required parameter 'itvAssignBtTokenRequest' when calling assignToken");
      }

      let pathParams = {
      };
      let queryParams = {
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/bt/token/assign', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkEeBtEligibility_0 operation.
     * @callback module:api/BtApi~checkEeBtEligibility_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/EeBtEligibility} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check whether or not a user is eligible for switching to Bt or EE offers.
     * @param {Object} opts Optional parameters
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/BtApi~checkEeBtEligibility_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EeBtEligibility}
     */
    checkEeBtEligibility_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accountAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EeBtEligibility;
      return this.apiClient.callApi(
        '/ee-bt/eligibility', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkUserToken operation.
     * @callback module:api/BtApi~checkUserTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks a provided token for BT eligible user. 
     * @param {String} id User token provided by BT.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [ff] The set of opt in feature flags which cause breaking changes to responses.  While Rocket APIs look to avoid breaking changes under the active major version, the formats of responses may need to evolve over this time.  These feature flags allow clients to select which response formats they expect and avoid breaking clients as these formats evolve under the current major version.  ### Flags  - `all` - Enable all flags. Useful for testing. _Don't use in production_. - `idp` - Dynamic item detail pages with schedulable rows. - `ldp` - Dynamic list detail pages with schedulable rows. - `hb` - Hubble formatted image urls. - `rpt` - Updated resume point threshold logic. - `cas` - \"Custom Asset Search\", inlcude `customAssets` in search results. - `lrl` - Do not pre-populate related list if more than `max_list_prefetch` down the page. - `cd` - Custom Destination support.  See the `feature-flags.md` for available flag details. 
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/BtApi~checkUserTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    checkUserToken(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling checkUserToken");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'ff': this.apiClient.buildCollectionParam(opts['ff'], 'csv'),
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/bt/token/validate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlanByToken operation.
     * @callback module:api/BtApi~getPlanByTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BtPlanListItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all the plans available for BT flow including additional description data.
     * @param {String} token The identifier of the user provided by BT in an initial URL.
     * @param {Object} opts Optional parameters
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/BtApi~getPlanByTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BtPlanListItem}
     */
    getPlanByToken(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getPlanByToken");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BtPlanListItem;
      return this.apiClient.callApi(
        '/bt/plan/{token}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlans operation.
     * @callback module:api/BtApi~getPlansCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BtPlans} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all the plans available for BT flow including additional description data.
     * @param {Object} opts Optional parameters
     * @param {String} [lang] Language code for the preferred language to be returned in the response.  Parameter value is case-insensitive and should be   - a valid 2 letter language code without region such as en, de   - or with region such as en_us, en_au  If undefined then defaults to 'en', unless the server has been configured with a custom default.  See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
     * @param {module:api/BtApi~getPlansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BtPlans}
     */
    getPlans(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BtPlans;
      return this.apiClient.callApi(
        '/bt/plans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
