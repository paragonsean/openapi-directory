/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PaginationAuth model module.
 * @module model/PaginationAuth
 * @version 3.730.300-ref-1-39-0
 */
class PaginationAuth {
    /**
     * Constructs a new <code>PaginationAuth</code>.
     * @alias module:model/PaginationAuth
     * @param scope {module:model/PaginationAuth.ScopeEnum} The token scope required.
     * @param type {module:model/PaginationAuth.TypeEnum} The token type required to load the list.
     */
    constructor(scope, type) { 
        
        PaginationAuth.initialize(this, scope, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, scope, type) { 
        obj['scope'] = scope;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>PaginationAuth</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaginationAuth} obj Optional instance to populate.
     * @return {module:model/PaginationAuth} The populated <code>PaginationAuth</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaginationAuth();

            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaginationAuth</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaginationAuth</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PaginationAuth.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['scope'] && !(typeof data['scope'] === 'string' || data['scope'] instanceof String)) {
            throw new Error("Expected the field `scope` to be a primitive type in the JSON string but got " + data['scope']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

PaginationAuth.RequiredProperties = ["scope", "type"];

/**
 * The token scope required.
 * @member {module:model/PaginationAuth.ScopeEnum} scope
 */
PaginationAuth.prototype['scope'] = undefined;

/**
 * The token type required to load the list.
 * @member {module:model/PaginationAuth.TypeEnum} type
 */
PaginationAuth.prototype['type'] = undefined;





/**
 * Allowed values for the <code>scope</code> property.
 * @enum {String}
 * @readonly
 */
PaginationAuth['ScopeEnum'] = {

    /**
     * value: "Catalog"
     * @const
     */
    "Catalog": "Catalog",

    /**
     * value: "Commerce"
     * @const
     */
    "Commerce": "Commerce",

    /**
     * value: "Settings"
     * @const
     */
    "Settings": "Settings"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
PaginationAuth['TypeEnum'] = {

    /**
     * value: "UserAccount"
     * @const
     */
    "UserAccount": "UserAccount",

    /**
     * value: "UserProfile"
     * @const
     */
    "UserProfile": "UserProfile"
};



export default PaginationAuth;

