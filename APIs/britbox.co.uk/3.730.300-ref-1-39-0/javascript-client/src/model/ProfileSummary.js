/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClassificationSummary from './ClassificationSummary';

/**
 * The ProfileSummary model module.
 * @module model/ProfileSummary
 * @version 3.730.300-ref-1-39-0
 */
class ProfileSummary {
    /**
     * Constructs a new <code>ProfileSummary</code>.
     * @alias module:model/ProfileSummary
     * @param id {String} The id of the profile.
     * @param isActive {Boolean} Whether the profile is active or not.  **DEPRECATED** - Always true. Inactive profiles are no longer returned. 
     * @param marketingEnabled {Boolean} Whether the profile has opted in or out of marketing material.  **DEPRECATED** - Marketing material is no longer tied to profiles, only account. See `Account.marketingEnabled`. 
     * @param name {String} The unique name of the profile.
     * @param pinEnabled {Boolean} Whether a pin is required to enter the profile.
     * @param purchaseEnabled {Boolean} Whether the profile can make purchases with the account payment options.
     * @param segments {Array.<String>} The segments a profile has been placed under
     */
    constructor(id, isActive, marketingEnabled, name, pinEnabled, purchaseEnabled, segments) { 
        
        ProfileSummary.initialize(this, id, isActive, marketingEnabled, name, pinEnabled, purchaseEnabled, segments);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, isActive, marketingEnabled, name, pinEnabled, purchaseEnabled, segments) { 
        obj['id'] = id;
        obj['isActive'] = isActive;
        obj['marketingEnabled'] = marketingEnabled;
        obj['name'] = name;
        obj['pinEnabled'] = pinEnabled;
        obj['purchaseEnabled'] = purchaseEnabled;
        obj['segments'] = segments;
    }

    /**
     * Constructs a <code>ProfileSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProfileSummary} obj Optional instance to populate.
     * @return {module:model/ProfileSummary} The populated <code>ProfileSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProfileSummary();

            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('heroAutoplay')) {
                obj['heroAutoplay'] = ApiClient.convertToType(data['heroAutoplay'], 'Boolean');
            }
            if (data.hasOwnProperty('heroWithAudio')) {
                obj['heroWithAudio'] = ApiClient.convertToType(data['heroWithAudio'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isActive')) {
                obj['isActive'] = ApiClient.convertToType(data['isActive'], 'Boolean');
            }
            if (data.hasOwnProperty('languageCode')) {
                obj['languageCode'] = ApiClient.convertToType(data['languageCode'], 'String');
            }
            if (data.hasOwnProperty('marketingEnabled')) {
                obj['marketingEnabled'] = ApiClient.convertToType(data['marketingEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('maxRatingContentFilter')) {
                obj['maxRatingContentFilter'] = ClassificationSummary.constructFromObject(data['maxRatingContentFilter']);
            }
            if (data.hasOwnProperty('minRatingPlaybackGuard')) {
                obj['minRatingPlaybackGuard'] = ClassificationSummary.constructFromObject(data['minRatingPlaybackGuard']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pinEnabled')) {
                obj['pinEnabled'] = ApiClient.convertToType(data['pinEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('purchaseEnabled')) {
                obj['purchaseEnabled'] = ApiClient.convertToType(data['purchaseEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('segments')) {
                obj['segments'] = ApiClient.convertToType(data['segments'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProfileSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProfileSummary</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProfileSummary.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['color'] && !(typeof data['color'] === 'string' || data['color'] instanceof String)) {
            throw new Error("Expected the field `color` to be a primitive type in the JSON string but got " + data['color']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['languageCode'] && !(typeof data['languageCode'] === 'string' || data['languageCode'] instanceof String)) {
            throw new Error("Expected the field `languageCode` to be a primitive type in the JSON string but got " + data['languageCode']);
        }
        // validate the optional field `maxRatingContentFilter`
        if (data['maxRatingContentFilter']) { // data not null
          ClassificationSummary.validateJSON(data['maxRatingContentFilter']);
        }
        // validate the optional field `minRatingPlaybackGuard`
        if (data['minRatingPlaybackGuard']) { // data not null
          ClassificationSummary.validateJSON(data['minRatingPlaybackGuard']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['segments'])) {
            throw new Error("Expected the field `segments` to be an array in the JSON data but got " + data['segments']);
        }

        return true;
    }


}

ProfileSummary.RequiredProperties = ["id", "isActive", "marketingEnabled", "name", "pinEnabled", "purchaseEnabled", "segments"];

/**
 * Hex color value assigned to the profile.
 * @member {String} color
 */
ProfileSummary.prototype['color'] = undefined;

/**
 * Gets the Hero row clip auto playback enabled
 * @member {Boolean} heroAutoplay
 */
ProfileSummary.prototype['heroAutoplay'] = undefined;

/**
 * Gets the Hero row clip auto playback audio enabled
 * @member {Boolean} heroWithAudio
 */
ProfileSummary.prototype['heroWithAudio'] = undefined;

/**
 * The id of the profile.
 * @member {String} id
 */
ProfileSummary.prototype['id'] = undefined;

/**
 * Whether the profile is active or not.  **DEPRECATED** - Always true. Inactive profiles are no longer returned. 
 * @member {Boolean} isActive
 */
ProfileSummary.prototype['isActive'] = undefined;

/**
 * The code of the preferred language for the profile. Must be a valid ISO language code e.g. \"en-US\" and must match the code of one of the languages specified in the app config. See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
 * @member {String} languageCode
 */
ProfileSummary.prototype['languageCode'] = undefined;

/**
 * Whether the profile has opted in or out of marketing material.  **DEPRECATED** - Marketing material is no longer tied to profiles, only account. See `Account.marketingEnabled`. 
 * @member {Boolean} marketingEnabled
 */
ProfileSummary.prototype['marketingEnabled'] = undefined;

/**
 * @member {module:model/ClassificationSummary} maxRatingContentFilter
 */
ProfileSummary.prototype['maxRatingContentFilter'] = undefined;

/**
 * @member {module:model/ClassificationSummary} minRatingPlaybackGuard
 */
ProfileSummary.prototype['minRatingPlaybackGuard'] = undefined;

/**
 * The unique name of the profile.
 * @member {String} name
 */
ProfileSummary.prototype['name'] = undefined;

/**
 * Whether a pin is required to enter the profile.
 * @member {Boolean} pinEnabled
 */
ProfileSummary.prototype['pinEnabled'] = undefined;

/**
 * Whether the profile can make purchases with the account payment options.
 * @member {Boolean} purchaseEnabled
 */
ProfileSummary.prototype['purchaseEnabled'] = undefined;

/**
 * The segments a profile has been placed under
 * @member {Array.<String>} segments
 */
ProfileSummary.prototype['segments'] = undefined;






export default ProfileSummary;

