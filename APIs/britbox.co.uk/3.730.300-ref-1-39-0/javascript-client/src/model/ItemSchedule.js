/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ItemSchedule model module.
 * @module model/ItemSchedule
 * @version 3.730.300-ref-1-39-0
 */
class ItemSchedule {
    /**
     * Constructs a new <code>ItemSchedule</code>.
     * @alias module:model/ItemSchedule
     * @extends Object
     * @param channelId {String} The id of the channel item this schedule belongs to.
     * @param endDate {Date} The date and time this schedule ends.
     * @param id {String} 
     * @param startDate {Date} The date and time this schedule starts.
     */
    constructor(channelId, endDate, id, startDate) { 
        
        ItemSchedule.initialize(this, channelId, endDate, id, startDate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, channelId, endDate, id, startDate) { 
        obj['channelId'] = channelId;
        obj['endDate'] = endDate;
        obj['id'] = id;
        obj['startDate'] = startDate;
    }

    /**
     * Constructs a <code>ItemSchedule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ItemSchedule} obj Optional instance to populate.
     * @return {module:model/ItemSchedule} The populated <code>ItemSchedule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ItemSchedule();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('blackout')) {
                obj['blackout'] = ApiClient.convertToType(data['blackout'], 'Boolean');
            }
            if (data.hasOwnProperty('channelId')) {
                obj['channelId'] = ApiClient.convertToType(data['channelId'], 'String');
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'Date');
            }
            if (data.hasOwnProperty('featured')) {
                obj['featured'] = ApiClient.convertToType(data['featured'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('live')) {
                obj['live'] = ApiClient.convertToType(data['live'], 'Boolean');
            }
            if (data.hasOwnProperty('repeat')) {
                obj['repeat'] = ApiClient.convertToType(data['repeat'], 'Boolean');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ItemSchedule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ItemSchedule</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ItemSchedule.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['channelId'] && !(typeof data['channelId'] === 'string' || data['channelId'] instanceof String)) {
            throw new Error("Expected the field `channelId` to be a primitive type in the JSON string but got " + data['channelId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }

        return true;
    }


}

ItemSchedule.RequiredProperties = ["channelId", "endDate", "id", "startDate"];

/**
 * True if this schedule represents time when the channel is completely off air.
 * @member {Boolean} blackout
 */
ItemSchedule.prototype['blackout'] = undefined;

/**
 * The id of the channel item this schedule belongs to.
 * @member {String} channelId
 */
ItemSchedule.prototype['channelId'] = undefined;

/**
 * The date and time this schedule ends.
 * @member {Date} endDate
 */
ItemSchedule.prototype['endDate'] = undefined;

/**
 * True if this is a featured item schedule.
 * @member {Boolean} featured
 */
ItemSchedule.prototype['featured'] = undefined;

/**
 * @member {String} id
 */
ItemSchedule.prototype['id'] = undefined;

/**
 * True if this is a live event.
 * @member {Boolean} live
 */
ItemSchedule.prototype['live'] = undefined;

/**
 * True if this has been aired previously on the same channel.
 * @member {Boolean} repeat
 */
ItemSchedule.prototype['repeat'] = undefined;

/**
 * The date and time this schedule starts.
 * @member {Date} startDate
 */
ItemSchedule.prototype['startDate'] = undefined;






export default ItemSchedule;

