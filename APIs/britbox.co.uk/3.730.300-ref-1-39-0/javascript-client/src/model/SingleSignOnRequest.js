/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SingleSignOnRequest model module.
 * @module model/SingleSignOnRequest
 * @version 3.730.300-ref-1-39-0
 */
class SingleSignOnRequest {
    /**
     * Constructs a new <code>SingleSignOnRequest</code>.
     * @alias module:model/SingleSignOnRequest
     * @param provider {module:model/SingleSignOnRequest.ProviderEnum} The third party single-sign-on provider.
     * @param token {String} A token from the third party single-sign-on provider e.g. an identity token from Facebook.
     */
    constructor(provider, token) { 
        
        SingleSignOnRequest.initialize(this, provider, token);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, provider, token) { 
        obj['provider'] = provider;
        obj['token'] = token;
    }

    /**
     * Constructs a <code>SingleSignOnRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SingleSignOnRequest} obj Optional instance to populate.
     * @return {module:model/SingleSignOnRequest} The populated <code>SingleSignOnRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SingleSignOnRequest();

            if (data.hasOwnProperty('cookieType')) {
                obj['cookieType'] = ApiClient.convertToType(data['cookieType'], 'String');
            }
            if (data.hasOwnProperty('linkAccounts')) {
                obj['linkAccounts'] = ApiClient.convertToType(data['linkAccounts'], 'Boolean');
            }
            if (data.hasOwnProperty('provider')) {
                obj['provider'] = ApiClient.convertToType(data['provider'], 'String');
            }
            if (data.hasOwnProperty('scopes')) {
                obj['scopes'] = ApiClient.convertToType(data['scopes'], ['String']);
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SingleSignOnRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SingleSignOnRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SingleSignOnRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['cookieType'] && !(typeof data['cookieType'] === 'string' || data['cookieType'] instanceof String)) {
            throw new Error("Expected the field `cookieType` to be a primitive type in the JSON string but got " + data['cookieType']);
        }
        // ensure the json data is a string
        if (data['provider'] && !(typeof data['provider'] === 'string' || data['provider'] instanceof String)) {
            throw new Error("Expected the field `provider` to be a primitive type in the JSON string but got " + data['provider']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scopes'])) {
            throw new Error("Expected the field `scopes` to be an array in the JSON data but got " + data['scopes']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }

        return true;
    }


}

SingleSignOnRequest.RequiredProperties = ["provider", "token"];

/**
 * If you specify a cookie type then a content filter cookie will be returned along with the token(s). This is only intended for web based clients which need to pass the cookies to a server to render a page based on the user's content filters e.g subscription code.  If type `Session` the cookie will be session based. If type `Persistent` the cookie will have a medium term lifespan. If undefined no cookies will be set. 
 * @member {module:model/SingleSignOnRequest.CookieTypeEnum} cookieType
 */
SingleSignOnRequest.prototype['cookieType'] = undefined;

/**
 * When a user attempts to sign in using single-sign-on, we may find an account created previously through the manual sign up flow with the same email. If this is the case then an option to link the two accounts can be made available.  If this flag is set to true then accounts will be linked automatically.  If this flag is not set or set to false and an existing account is found  then an http 401 with subcode `6001` will be returned. Client apps can then present the option to link the accounts. If the user decides to accept, then the same call can be repeated with this flag set to true. 
 * @member {Boolean} linkAccounts
 */
SingleSignOnRequest.prototype['linkAccounts'] = undefined;

/**
 * The third party single-sign-on provider.
 * @member {module:model/SingleSignOnRequest.ProviderEnum} provider
 */
SingleSignOnRequest.prototype['provider'] = undefined;

/**
 * The scope(s) of the tokens required. For each scope listed an Account and Profile token of that scope will be returned. 
 * @member {Array.<module:model/SingleSignOnRequest.ScopesEnum>} scopes
 */
SingleSignOnRequest.prototype['scopes'] = undefined;

/**
 * A token from the third party single-sign-on provider e.g. an identity token from Facebook.
 * @member {String} token
 */
SingleSignOnRequest.prototype['token'] = undefined;





/**
 * Allowed values for the <code>cookieType</code> property.
 * @enum {String}
 * @readonly
 */
SingleSignOnRequest['CookieTypeEnum'] = {

    /**
     * value: "Session"
     * @const
     */
    "Session": "Session",

    /**
     * value: "Persistent"
     * @const
     */
    "Persistent": "Persistent"
};


/**
 * Allowed values for the <code>provider</code> property.
 * @enum {String}
 * @readonly
 */
SingleSignOnRequest['ProviderEnum'] = {

    /**
     * value: "Facebook"
     * @const
     */
    "Facebook": "Facebook"
};


/**
 * Allowed values for the <code>scopes</code> property.
 * @enum {String}
 * @readonly
 */
SingleSignOnRequest['ScopesEnum'] = {

    /**
     * value: "Catalog"
     * @const
     */
    "Catalog": "Catalog",

    /**
     * value: "Commerce"
     * @const
     */
    "Commerce": "Commerce",

    /**
     * value: "Settings"
     * @const
     */
    "Settings": "Settings",

    /**
     * value: "Playback"
     * @const
     */
    "Playback": "Playback"
};



export default SingleSignOnRequest;

