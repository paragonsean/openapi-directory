/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Subscription model module.
 * @module model/Subscription
 * @version 3.730.300-ref-1-39-0
 */
class Subscription {
    /**
     * Constructs a new <code>Subscription</code>.
     * @alias module:model/Subscription
     * @param code {String} The unique subscription code.
     * @param isTrialPeriod {Boolean} True if a subscription is in its trial period, false if not.
     * @param planId {String} The plan a subscription belongs to.
     * @param startDate {Date} The start date of a subscription.
     * @param status {module:model/Subscription.StatusEnum} The status of a subscription.
     */
    constructor(code, isTrialPeriod, planId, startDate, status) { 
        
        Subscription.initialize(this, code, isTrialPeriod, planId, startDate, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, code, isTrialPeriod, planId, startDate, status) { 
        obj['code'] = code;
        obj['isTrialPeriod'] = isTrialPeriod;
        obj['planId'] = planId;
        obj['startDate'] = startDate;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>Subscription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Subscription} obj Optional instance to populate.
     * @return {module:model/Subscription} The populated <code>Subscription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Subscription();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isTrialPeriod')) {
                obj['isTrialPeriod'] = ApiClient.convertToType(data['isTrialPeriod'], 'Boolean');
            }
            if (data.hasOwnProperty('planId')) {
                obj['planId'] = ApiClient.convertToType(data['planId'], 'String');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Subscription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Subscription</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Subscription.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['planId'] && !(typeof data['planId'] === 'string' || data['planId'] instanceof String)) {
            throw new Error("Expected the field `planId` to be a primitive type in the JSON string but got " + data['planId']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

Subscription.RequiredProperties = ["code", "isTrialPeriod", "planId", "startDate", "status"];

/**
 * The unique subscription code.
 * @member {String} code
 */
Subscription.prototype['code'] = undefined;

/**
 * The end date of a subscription.  After this date the subscription will become expired. If this is a recurring subscription which has not been cancelled then the account holder will be automatically charged and a new subscription will be activated.  Some subscriptions may not have an end date, in which case this property will not exist. 
 * @member {Date} endDate
 */
Subscription.prototype['endDate'] = undefined;

/**
 * Unique identifier for the subscription.
 * @member {String} id
 */
Subscription.prototype['id'] = undefined;

/**
 * True if a subscription is in its trial period, false if not.
 * @member {Boolean} isTrialPeriod
 */
Subscription.prototype['isTrialPeriod'] = undefined;

/**
 * The plan a subscription belongs to.
 * @member {String} planId
 */
Subscription.prototype['planId'] = undefined;

/**
 * The start date of a subscription.
 * @member {Date} startDate
 */
Subscription.prototype['startDate'] = undefined;

/**
 * The status of a subscription.
 * @member {module:model/Subscription.StatusEnum} status
 */
Subscription.prototype['status'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Subscription['StatusEnum'] = {

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "Cancelled"
     * @const
     */
    "Cancelled": "Cancelled",

    /**
     * value: "Lapsed"
     * @const
     */
    "Lapsed": "Lapsed",

    /**
     * value: "Expired"
     * @const
     */
    "Expired": "Expired",

    /**
     * value: "None"
     * @const
     */
    "None": "None"
};



export default Subscription;

