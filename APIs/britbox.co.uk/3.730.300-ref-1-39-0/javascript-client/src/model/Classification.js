/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClassificationSummary from './ClassificationSummary';

/**
 * The Classification model module.
 * @module model/Classification
 * @version 3.730.300-ref-1-39-0
 */
class Classification {
    /**
     * Constructs a new <code>Classification</code>.
     * @alias module:model/Classification
     * @implements module:model/ClassificationSummary
     * @param code {String} The unique code for a classification.
     * @param name {String} The name of the classification for display.
     * @param images {Object.<String, String>} 
     * @param level {Number} The level of this classification when compared with its siblings. A higher level means a greater restriction. Each classification in a system should have a unique level. 
     * @param system {String} The parent system code of the classification.
     */
    constructor(code, name, images, level, system) { 
        ClassificationSummary.initialize(this, code, name);
        Classification.initialize(this, code, name, images, level, system);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, code, name, images, level, system) { 
        obj['code'] = code;
        obj['name'] = name;
        obj['images'] = images;
        obj['level'] = level;
        obj['system'] = system;
    }

    /**
     * Constructs a <code>Classification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Classification} obj Optional instance to populate.
     * @return {module:model/Classification} The populated <code>Classification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Classification();
            ClassificationSummary.constructFromObject(data, obj);

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('advisoryText')) {
                obj['advisoryText'] = ApiClient.convertToType(data['advisoryText'], 'String');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], {'String': 'String'});
            }
            if (data.hasOwnProperty('level')) {
                obj['level'] = ApiClient.convertToType(data['level'], 'Number');
            }
            if (data.hasOwnProperty('system')) {
                obj['system'] = ApiClient.convertToType(data['system'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Classification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Classification</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Classification.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['advisoryText'] && !(typeof data['advisoryText'] === 'string' || data['advisoryText'] instanceof String)) {
            throw new Error("Expected the field `advisoryText` to be a primitive type in the JSON string but got " + data['advisoryText']);
        }
        // ensure the json data is a string
        if (data['system'] && !(typeof data['system'] === 'string' || data['system'] instanceof String)) {
            throw new Error("Expected the field `system` to be a primitive type in the JSON string but got " + data['system']);
        }

        return true;
    }


}

Classification.RequiredProperties = ["code", "name", "images", "level", "system"];

/**
 * The unique code for a classification.
 * @member {String} code
 */
Classification.prototype['code'] = undefined;

/**
 * The name of the classification for display.
 * @member {String} name
 */
Classification.prototype['name'] = undefined;

/**
 * Parental advisort text.
 * @member {String} advisoryText
 */
Classification.prototype['advisoryText'] = undefined;

/**
 * @member {Object.<String, String>} images
 */
Classification.prototype['images'] = undefined;

/**
 * The level of this classification when compared with its siblings. A higher level means a greater restriction. Each classification in a system should have a unique level. 
 * @member {Number} level
 */
Classification.prototype['level'] = undefined;

/**
 * The parent system code of the classification.
 * @member {String} system
 */
Classification.prototype['system'] = undefined;


// Implement ClassificationSummary interface:
/**
 * The unique code for a classification.
 * @member {String} code
 */
ClassificationSummary.prototype['code'] = undefined;
/**
 * The name of the classification for display.
 * @member {String} name
 */
ClassificationSummary.prototype['name'] = undefined;




export default Classification;

