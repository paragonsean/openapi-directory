/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClassificationSummary from './ClassificationSummary';
import ExclusionRule from './ExclusionRule';
import OfferRights from './OfferRights';

/**
 * The Entitlement model module.
 * @module model/Entitlement
 * @version 3.730.300-ref-1-39-0
 */
class Entitlement {
    /**
     * Constructs a new <code>Entitlement</code>.
     * @alias module:model/Entitlement
     * @implements module:model/OfferRights
     * @param deliveryType {module:model/Entitlement.DeliveryTypeEnum} 
     * @param ownership {module:model/Entitlement.OwnershipEnum} 
     * @param resolution {module:model/Entitlement.ResolutionEnum} 
     * @param scopes {Array.<String>} 
     */
    constructor(deliveryType, ownership, resolution, scopes) { 
        OfferRights.initialize(this, deliveryType, ownership, resolution, scopes);
        Entitlement.initialize(this, deliveryType, ownership, resolution, scopes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, deliveryType, ownership, resolution, scopes) { 
        obj['deliveryType'] = deliveryType;
        obj['ownership'] = ownership;
        obj['resolution'] = resolution;
        obj['scopes'] = scopes;
    }

    /**
     * Constructs a <code>Entitlement</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Entitlement} obj Optional instance to populate.
     * @return {module:model/Entitlement} The populated <code>Entitlement</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Entitlement();
            OfferRights.constructFromObject(data, obj);

            if (data.hasOwnProperty('deliveryType')) {
                obj['deliveryType'] = ApiClient.convertToType(data['deliveryType'], 'String');
            }
            if (data.hasOwnProperty('exclusionRules')) {
                obj['exclusionRules'] = ApiClient.convertToType(data['exclusionRules'], [ExclusionRule]);
            }
            if (data.hasOwnProperty('maxDownloads')) {
                obj['maxDownloads'] = ApiClient.convertToType(data['maxDownloads'], 'Number');
            }
            if (data.hasOwnProperty('maxPlays')) {
                obj['maxPlays'] = ApiClient.convertToType(data['maxPlays'], 'Number');
            }
            if (data.hasOwnProperty('ownership')) {
                obj['ownership'] = ApiClient.convertToType(data['ownership'], 'String');
            }
            if (data.hasOwnProperty('playPeriod')) {
                obj['playPeriod'] = ApiClient.convertToType(data['playPeriod'], 'Number');
            }
            if (data.hasOwnProperty('rentalPeriod')) {
                obj['rentalPeriod'] = ApiClient.convertToType(data['rentalPeriod'], 'Number');
            }
            if (data.hasOwnProperty('resolution')) {
                obj['resolution'] = ApiClient.convertToType(data['resolution'], 'String');
            }
            if (data.hasOwnProperty('scopes')) {
                obj['scopes'] = ApiClient.convertToType(data['scopes'], ['String']);
            }
            if (data.hasOwnProperty('activationDate')) {
                obj['activationDate'] = ApiClient.convertToType(data['activationDate'], 'Date');
            }
            if (data.hasOwnProperty('classification')) {
                obj['classification'] = ClassificationSummary.constructFromObject(data['classification']);
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'Date');
            }
            if (data.hasOwnProperty('expirationDate')) {
                obj['expirationDate'] = ApiClient.convertToType(data['expirationDate'], 'Date');
            }
            if (data.hasOwnProperty('itemId')) {
                obj['itemId'] = ApiClient.convertToType(data['itemId'], 'String');
            }
            if (data.hasOwnProperty('itemType')) {
                obj['itemType'] = ApiClient.convertToType(data['itemType'], 'String');
            }
            if (data.hasOwnProperty('mediaDuration')) {
                obj['mediaDuration'] = ApiClient.convertToType(data['mediaDuration'], 'Number');
            }
            if (data.hasOwnProperty('planId')) {
                obj['planId'] = ApiClient.convertToType(data['planId'], 'String');
            }
            if (data.hasOwnProperty('playCount')) {
                obj['playCount'] = ApiClient.convertToType(data['playCount'], 'Number');
            }
            if (data.hasOwnProperty('remainingDownloads')) {
                obj['remainingDownloads'] = ApiClient.convertToType(data['remainingDownloads'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Entitlement</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Entitlement</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Entitlement.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['deliveryType'] && !(typeof data['deliveryType'] === 'string' || data['deliveryType'] instanceof String)) {
            throw new Error("Expected the field `deliveryType` to be a primitive type in the JSON string but got " + data['deliveryType']);
        }
        if (data['exclusionRules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['exclusionRules'])) {
                throw new Error("Expected the field `exclusionRules` to be an array in the JSON data but got " + data['exclusionRules']);
            }
            // validate the optional field `exclusionRules` (array)
            for (const item of data['exclusionRules']) {
                ExclusionRule.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ownership'] && !(typeof data['ownership'] === 'string' || data['ownership'] instanceof String)) {
            throw new Error("Expected the field `ownership` to be a primitive type in the JSON string but got " + data['ownership']);
        }
        // ensure the json data is a string
        if (data['resolution'] && !(typeof data['resolution'] === 'string' || data['resolution'] instanceof String)) {
            throw new Error("Expected the field `resolution` to be a primitive type in the JSON string but got " + data['resolution']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scopes'])) {
            throw new Error("Expected the field `scopes` to be an array in the JSON data but got " + data['scopes']);
        }
        // validate the optional field `classification`
        if (data['classification']) { // data not null
          ClassificationSummary.validateJSON(data['classification']);
        }
        // ensure the json data is a string
        if (data['itemId'] && !(typeof data['itemId'] === 'string' || data['itemId'] instanceof String)) {
            throw new Error("Expected the field `itemId` to be a primitive type in the JSON string but got " + data['itemId']);
        }
        // ensure the json data is a string
        if (data['itemType'] && !(typeof data['itemType'] === 'string' || data['itemType'] instanceof String)) {
            throw new Error("Expected the field `itemType` to be a primitive type in the JSON string but got " + data['itemType']);
        }
        // ensure the json data is a string
        if (data['planId'] && !(typeof data['planId'] === 'string' || data['planId'] instanceof String)) {
            throw new Error("Expected the field `planId` to be a primitive type in the JSON string but got " + data['planId']);
        }

        return true;
    }


}

Entitlement.RequiredProperties = ["deliveryType", "ownership", "resolution", "scopes"];

/**
 * @member {module:model/Entitlement.DeliveryTypeEnum} deliveryType
 */
Entitlement.prototype['deliveryType'] = undefined;

/**
 * Any specific playback exclusion rules.
 * @member {Array.<module:model/ExclusionRule>} exclusionRules
 */
Entitlement.prototype['exclusionRules'] = undefined;

/**
 * The maximum number of allowed downloads.
 * @member {Number} maxDownloads
 */
Entitlement.prototype['maxDownloads'] = undefined;

/**
 * The maximum number of allowed plays.
 * @member {Number} maxPlays
 */
Entitlement.prototype['maxPlays'] = undefined;

/**
 * @member {module:model/Entitlement.OwnershipEnum} ownership
 */
Entitlement.prototype['ownership'] = undefined;

/**
 * The length of time in minutes which the rental will last once played for the first time.
 * @member {Number} playPeriod
 */
Entitlement.prototype['playPeriod'] = undefined;

/**
 * The length of time in minutes which the rental will last once purchased.
 * @member {Number} rentalPeriod
 */
Entitlement.prototype['rentalPeriod'] = undefined;

/**
 * @member {module:model/Entitlement.ResolutionEnum} resolution
 */
Entitlement.prototype['resolution'] = undefined;

/**
 * @member {Array.<String>} scopes
 */
Entitlement.prototype['scopes'] = undefined;

/**
 * The date of activation. If no date is defined the entitlement has not be activated.
 * @member {Date} activationDate
 */
Entitlement.prototype['activationDate'] = undefined;

/**
 * @member {module:model/ClassificationSummary} classification
 */
Entitlement.prototype['classification'] = undefined;

/**
 * The date the entitlement was created.
 * @member {Date} creationDate
 */
Entitlement.prototype['creationDate'] = undefined;

/**
 * The date the entitlement expires.
 * @member {Date} expirationDate
 */
Entitlement.prototype['expirationDate'] = undefined;

/**
 * The id of the item this entitlement is for.
 * @member {String} itemId
 */
Entitlement.prototype['itemId'] = undefined;

/**
 * The type of item this entitlement is for.
 * @member {module:model/Entitlement.ItemTypeEnum} itemType
 */
Entitlement.prototype['itemType'] = undefined;

/**
 * The duration of the entitled media.
 * @member {Number} mediaDuration
 */
Entitlement.prototype['mediaDuration'] = undefined;

/**
 * The id of the plan this entitlement is for.
 * @member {String} planId
 */
Entitlement.prototype['planId'] = undefined;

/**
 * How many times the media has been played.
 * @member {Number} playCount
 */
Entitlement.prototype['playCount'] = undefined;

/**
 * How many more downloads of this media are available.
 * @member {Number} remainingDownloads
 */
Entitlement.prototype['remainingDownloads'] = undefined;


// Implement OfferRights interface:
/**
 * @member {module:model/OfferRights.DeliveryTypeEnum} deliveryType
 */
OfferRights.prototype['deliveryType'] = undefined;
/**
 * Any specific playback exclusion rules.
 * @member {Array.<module:model/ExclusionRule>} exclusionRules
 */
OfferRights.prototype['exclusionRules'] = undefined;
/**
 * The maximum number of allowed downloads.
 * @member {Number} maxDownloads
 */
OfferRights.prototype['maxDownloads'] = undefined;
/**
 * The maximum number of allowed plays.
 * @member {Number} maxPlays
 */
OfferRights.prototype['maxPlays'] = undefined;
/**
 * @member {module:model/OfferRights.OwnershipEnum} ownership
 */
OfferRights.prototype['ownership'] = undefined;
/**
 * The length of time in minutes which the rental will last once played for the first time.
 * @member {Number} playPeriod
 */
OfferRights.prototype['playPeriod'] = undefined;
/**
 * The length of time in minutes which the rental will last once purchased.
 * @member {Number} rentalPeriod
 */
OfferRights.prototype['rentalPeriod'] = undefined;
/**
 * @member {module:model/OfferRights.ResolutionEnum} resolution
 */
OfferRights.prototype['resolution'] = undefined;
/**
 * @member {Array.<String>} scopes
 */
OfferRights.prototype['scopes'] = undefined;



/**
 * Allowed values for the <code>deliveryType</code> property.
 * @enum {String}
 * @readonly
 */
Entitlement['DeliveryTypeEnum'] = {

    /**
     * value: "Stream"
     * @const
     */
    "Stream": "Stream",

    /**
     * value: "Download"
     * @const
     */
    "Download": "Download",

    /**
     * value: "StreamOrDownload"
     * @const
     */
    "StreamOrDownload": "StreamOrDownload",

    /**
     * value: "ProgressiveDownload"
     * @const
     */
    "ProgressiveDownload": "ProgressiveDownload",

    /**
     * value: "None"
     * @const
     */
    "None": "None"
};


/**
 * Allowed values for the <code>ownership</code> property.
 * @enum {String}
 * @readonly
 */
Entitlement['OwnershipEnum'] = {

    /**
     * value: "Subscription"
     * @const
     */
    "Subscription": "Subscription",

    /**
     * value: "Free"
     * @const
     */
    "Free": "Free",

    /**
     * value: "Rent"
     * @const
     */
    "Rent": "Rent",

    /**
     * value: "Own"
     * @const
     */
    "Own": "Own",

    /**
     * value: "None"
     * @const
     */
    "None": "None"
};


/**
 * Allowed values for the <code>resolution</code> property.
 * @enum {String}
 * @readonly
 */
Entitlement['ResolutionEnum'] = {

    /**
     * value: "SD"
     * @const
     */
    "SD": "SD",

    /**
     * value: "HD-720"
     * @const
     */
    "HD-720": "HD-720",

    /**
     * value: "HD-1080"
     * @const
     */
    "HD-1080": "HD-1080",

    /**
     * value: "HD-4K"
     * @const
     */
    "HD-4K": "HD-4K",

    /**
     * value: "External"
     * @const
     */
    "External": "External",

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown"
};


/**
 * Allowed values for the <code>itemType</code> property.
 * @enum {String}
 * @readonly
 */
Entitlement['ItemTypeEnum'] = {

    /**
     * value: "movie"
     * @const
     */
    "movie": "movie",

    /**
     * value: "show"
     * @const
     */
    "show": "show",

    /**
     * value: "season"
     * @const
     */
    "season": "season",

    /**
     * value: "episode"
     * @const
     */
    "episode": "episode",

    /**
     * value: "program"
     * @const
     */
    "program": "program",

    /**
     * value: "link"
     * @const
     */
    "link": "link",

    /**
     * value: "trailer"
     * @const
     */
    "trailer": "trailer",

    /**
     * value: "channel"
     * @const
     */
    "channel": "channel",

    /**
     * value: "customAsset"
     * @const
     */
    "customAsset": "customAsset"
};



export default Entitlement;

