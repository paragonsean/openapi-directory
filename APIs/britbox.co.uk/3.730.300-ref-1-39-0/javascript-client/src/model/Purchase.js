/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ItemPurchase from './ItemPurchase';
import PlanPurchase from './PlanPurchase';

/**
 * The Purchase model module.
 * @module model/Purchase
 * @version 3.730.300-ref-1-39-0
 */
class Purchase {
    /**
     * Constructs a new <code>Purchase</code>.
     * @alias module:model/Purchase
     * @param creationDate {Date} The date the purchase was created.
     * @param currency {String} The currency code used to make the purchase.
     * @param id {String} The identifier of the purchase.
     * @param total {Number} The total cost of the purchase.
     */
    constructor(creationDate, currency, id, total) { 
        
        Purchase.initialize(this, creationDate, currency, id, total);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, creationDate, currency, id, total) { 
        obj['creationDate'] = creationDate;
        obj['currency'] = currency;
        obj['id'] = id;
        obj['total'] = total;
    }

    /**
     * Constructs a <code>Purchase</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Purchase} obj Optional instance to populate.
     * @return {module:model/Purchase} The populated <code>Purchase</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Purchase();

            if (data.hasOwnProperty('authorizationDate')) {
                obj['authorizationDate'] = ApiClient.convertToType(data['authorizationDate'], 'Date');
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'Date');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('item')) {
                obj['item'] = ItemPurchase.constructFromObject(data['item']);
            }
            if (data.hasOwnProperty('paymentMethodId')) {
                obj['paymentMethodId'] = ApiClient.convertToType(data['paymentMethodId'], 'String');
            }
            if (data.hasOwnProperty('plan')) {
                obj['plan'] = PlanPurchase.constructFromObject(data['plan']);
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Purchase</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Purchase</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Purchase.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `item`
        if (data['item']) { // data not null
          ItemPurchase.validateJSON(data['item']);
        }
        // ensure the json data is a string
        if (data['paymentMethodId'] && !(typeof data['paymentMethodId'] === 'string' || data['paymentMethodId'] instanceof String)) {
            throw new Error("Expected the field `paymentMethodId` to be a primitive type in the JSON string but got " + data['paymentMethodId']);
        }
        // validate the optional field `plan`
        if (data['plan']) { // data not null
          PlanPurchase.validateJSON(data['plan']);
        }

        return true;
    }


}

Purchase.RequiredProperties = ["creationDate", "currency", "id", "total"];

/**
 * The date the purchase was authorized.
 * @member {Date} authorizationDate
 */
Purchase.prototype['authorizationDate'] = undefined;

/**
 * The date the purchase was created.
 * @member {Date} creationDate
 */
Purchase.prototype['creationDate'] = undefined;

/**
 * The currency code used to make the purchase.
 * @member {String} currency
 */
Purchase.prototype['currency'] = undefined;

/**
 * The identifier of the purchase.
 * @member {String} id
 */
Purchase.prototype['id'] = undefined;

/**
 * @member {module:model/ItemPurchase} item
 */
Purchase.prototype['item'] = undefined;

/**
 * The identifier of the payment method used to make the purchase.
 * @member {String} paymentMethodId
 */
Purchase.prototype['paymentMethodId'] = undefined;

/**
 * @member {module:model/PlanPurchase} plan
 */
Purchase.prototype['plan'] = undefined;

/**
 * The total cost of the purchase.
 * @member {Number} total
 */
Purchase.prototype['total'] = undefined;






export default Purchase;

