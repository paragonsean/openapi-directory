/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChangePinRequest model module.
 * @module model/ChangePinRequest
 * @version 3.730.300-ref-1-39-0
 */
class ChangePinRequest {
    /**
     * Constructs a new <code>ChangePinRequest</code>.
     * @alias module:model/ChangePinRequest
     * @param pin {String} The new pin to set.
     */
    constructor(pin) { 
        
        ChangePinRequest.initialize(this, pin);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, pin) { 
        obj['pin'] = pin;
    }

    /**
     * Constructs a <code>ChangePinRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChangePinRequest} obj Optional instance to populate.
     * @return {module:model/ChangePinRequest} The populated <code>ChangePinRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChangePinRequest();

            if (data.hasOwnProperty('pin')) {
                obj['pin'] = ApiClient.convertToType(data['pin'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChangePinRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChangePinRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChangePinRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['pin'] && !(typeof data['pin'] === 'string' || data['pin'] instanceof String)) {
            throw new Error("Expected the field `pin` to be a primitive type in the JSON string but got " + data['pin']);
        }

        return true;
    }


}

ChangePinRequest.RequiredProperties = ["pin"];

/**
 * The new pin to set.
 * @member {String} pin
 */
ChangePinRequest.prototype['pin'] = undefined;






export default ChangePinRequest;

