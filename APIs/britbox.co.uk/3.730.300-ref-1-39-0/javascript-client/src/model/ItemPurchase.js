/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ItemPurchase model module.
 * @module model/ItemPurchase
 * @version 3.730.300-ref-1-39-0
 */
class ItemPurchase {
    /**
     * Constructs a new <code>ItemPurchase</code>.
     * @alias module:model/ItemPurchase
     * @param id {String} The identifier of the purchased item.
     * @param ownership {module:model/ItemPurchase.OwnershipEnum} The ownership of the purchased item.
     * @param resolution {module:model/ItemPurchase.ResolutionEnum} The resolution of the purchased item.
     * @param title {String} The title of the purchased item.
     * @param type {module:model/ItemPurchase.TypeEnum} The type of item purchased.
     */
    constructor(id, ownership, resolution, title, type) { 
        
        ItemPurchase.initialize(this, id, ownership, resolution, title, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, ownership, resolution, title, type) { 
        obj['id'] = id;
        obj['ownership'] = ownership;
        obj['resolution'] = resolution;
        obj['title'] = title;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>ItemPurchase</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ItemPurchase} obj Optional instance to populate.
     * @return {module:model/ItemPurchase} The populated <code>ItemPurchase</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ItemPurchase();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('ownership')) {
                obj['ownership'] = ApiClient.convertToType(data['ownership'], 'String');
            }
            if (data.hasOwnProperty('resolution')) {
                obj['resolution'] = ApiClient.convertToType(data['resolution'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ItemPurchase</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ItemPurchase</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ItemPurchase.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['ownership'] && !(typeof data['ownership'] === 'string' || data['ownership'] instanceof String)) {
            throw new Error("Expected the field `ownership` to be a primitive type in the JSON string but got " + data['ownership']);
        }
        // ensure the json data is a string
        if (data['resolution'] && !(typeof data['resolution'] === 'string' || data['resolution'] instanceof String)) {
            throw new Error("Expected the field `resolution` to be a primitive type in the JSON string but got " + data['resolution']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

ItemPurchase.RequiredProperties = ["id", "ownership", "resolution", "title", "type"];

/**
 * The identifier of the purchased item.
 * @member {String} id
 */
ItemPurchase.prototype['id'] = undefined;

/**
 * The ownership of the purchased item.
 * @member {module:model/ItemPurchase.OwnershipEnum} ownership
 */
ItemPurchase.prototype['ownership'] = undefined;

/**
 * The resolution of the purchased item.
 * @member {module:model/ItemPurchase.ResolutionEnum} resolution
 */
ItemPurchase.prototype['resolution'] = undefined;

/**
 * The title of the purchased item.
 * @member {String} title
 */
ItemPurchase.prototype['title'] = undefined;

/**
 * The type of item purchased.
 * @member {module:model/ItemPurchase.TypeEnum} type
 */
ItemPurchase.prototype['type'] = undefined;





/**
 * Allowed values for the <code>ownership</code> property.
 * @enum {String}
 * @readonly
 */
ItemPurchase['OwnershipEnum'] = {

    /**
     * value: "Subscription"
     * @const
     */
    "Subscription": "Subscription",

    /**
     * value: "Free"
     * @const
     */
    "Free": "Free",

    /**
     * value: "Rent"
     * @const
     */
    "Rent": "Rent",

    /**
     * value: "Own"
     * @const
     */
    "Own": "Own",

    /**
     * value: "None"
     * @const
     */
    "None": "None"
};


/**
 * Allowed values for the <code>resolution</code> property.
 * @enum {String}
 * @readonly
 */
ItemPurchase['ResolutionEnum'] = {

    /**
     * value: "SD"
     * @const
     */
    "SD": "SD",

    /**
     * value: "HD-720"
     * @const
     */
    "HD-720": "HD-720",

    /**
     * value: "HD-1080"
     * @const
     */
    "HD-1080": "HD-1080",

    /**
     * value: "HD-4K"
     * @const
     */
    "HD-4K": "HD-4K",

    /**
     * value: "External"
     * @const
     */
    "External": "External",

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ItemPurchase['TypeEnum'] = {

    /**
     * value: "movie"
     * @const
     */
    "movie": "movie",

    /**
     * value: "show"
     * @const
     */
    "show": "show",

    /**
     * value: "season"
     * @const
     */
    "season": "season",

    /**
     * value: "episode"
     * @const
     */
    "episode": "episode",

    /**
     * value: "program"
     * @const
     */
    "program": "program",

    /**
     * value: "link"
     * @const
     */
    "link": "link",

    /**
     * value: "trailer"
     * @const
     */
    "trailer": "trailer",

    /**
     * value: "channel"
     * @const
     */
    "channel": "channel",

    /**
     * value: "customAsset"
     * @const
     */
    "customAsset": "customAsset"
};



export default ItemPurchase;

