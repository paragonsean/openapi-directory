/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Device from './Device';
import DeviceRegistrationWindow from './DeviceRegistrationWindow';

/**
 * The AccountDevices model module.
 * @module model/AccountDevices
 * @version 3.730.300-ref-1-39-0
 */
class AccountDevices {
    /**
     * Constructs a new <code>AccountDevices</code>.
     * @alias module:model/AccountDevices
     * @param devices {Array.<module:model/Device>} The array of registered playack devices.
     * @param maxRegistered {Number} The maximum number of playback devices that can be registered under an account at a single time.  If there is no maximum defined this value will be `-1`. 
     */
    constructor(devices, maxRegistered) { 
        
        AccountDevices.initialize(this, devices, maxRegistered);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, devices, maxRegistered) { 
        obj['devices'] = devices;
        obj['maxRegistered'] = maxRegistered;
    }

    /**
     * Constructs a <code>AccountDevices</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountDevices} obj Optional instance to populate.
     * @return {module:model/AccountDevices} The populated <code>AccountDevices</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountDevices();

            if (data.hasOwnProperty('deregistrationWindow')) {
                obj['deregistrationWindow'] = DeviceRegistrationWindow.constructFromObject(data['deregistrationWindow']);
            }
            if (data.hasOwnProperty('devices')) {
                obj['devices'] = ApiClient.convertToType(data['devices'], [Device]);
            }
            if (data.hasOwnProperty('maxRegistered')) {
                obj['maxRegistered'] = ApiClient.convertToType(data['maxRegistered'], 'Number');
            }
            if (data.hasOwnProperty('registrationWindow')) {
                obj['registrationWindow'] = DeviceRegistrationWindow.constructFromObject(data['registrationWindow']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountDevices</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountDevices</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AccountDevices.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `deregistrationWindow`
        if (data['deregistrationWindow']) { // data not null
          DeviceRegistrationWindow.validateJSON(data['deregistrationWindow']);
        }
        if (data['devices']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['devices'])) {
                throw new Error("Expected the field `devices` to be an array in the JSON data but got " + data['devices']);
            }
            // validate the optional field `devices` (array)
            for (const item of data['devices']) {
                Device.validateJSON(item);
            };
        }
        // validate the optional field `registrationWindow`
        if (data['registrationWindow']) { // data not null
          DeviceRegistrationWindow.validateJSON(data['registrationWindow']);
        }

        return true;
    }


}

AccountDevices.RequiredProperties = ["devices", "maxRegistered"];

/**
 * @member {module:model/DeviceRegistrationWindow} deregistrationWindow
 */
AccountDevices.prototype['deregistrationWindow'] = undefined;

/**
 * The array of registered playack devices.
 * @member {Array.<module:model/Device>} devices
 */
AccountDevices.prototype['devices'] = undefined;

/**
 * The maximum number of playback devices that can be registered under an account at a single time.  If there is no maximum defined this value will be `-1`. 
 * @member {Number} maxRegistered
 */
AccountDevices.prototype['maxRegistered'] = undefined;

/**
 * @member {module:model/DeviceRegistrationWindow} registrationWindow
 */
AccountDevices.prototype['registrationWindow'] = undefined;






export default AccountDevices;

