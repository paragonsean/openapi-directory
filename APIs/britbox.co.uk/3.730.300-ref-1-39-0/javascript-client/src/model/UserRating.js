/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UserRating model module.
 * @module model/UserRating
 * @version 3.730.300-ref-1-39-0
 */
class UserRating {
    /**
     * Constructs a new <code>UserRating</code>.
     * @alias module:model/UserRating
     * @param itemId {String} The id of the item rated.
     * @param rating {Number} The rating out of 10
     */
    constructor(itemId, rating) { 
        
        UserRating.initialize(this, itemId, rating);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, itemId, rating) { 
        obj['itemId'] = itemId;
        obj['rating'] = rating;
    }

    /**
     * Constructs a <code>UserRating</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserRating} obj Optional instance to populate.
     * @return {module:model/UserRating} The populated <code>UserRating</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserRating();

            if (data.hasOwnProperty('itemId')) {
                obj['itemId'] = ApiClient.convertToType(data['itemId'], 'String');
            }
            if (data.hasOwnProperty('rating')) {
                obj['rating'] = ApiClient.convertToType(data['rating'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserRating</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserRating</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserRating.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['itemId'] && !(typeof data['itemId'] === 'string' || data['itemId'] instanceof String)) {
            throw new Error("Expected the field `itemId` to be a primitive type in the JSON string but got " + data['itemId']);
        }

        return true;
    }


}

UserRating.RequiredProperties = ["itemId", "rating"];

/**
 * The id of the item rated.
 * @member {String} itemId
 */
UserRating.prototype['itemId'] = undefined;

/**
 * The rating out of 10
 * @member {Number} rating
 */
UserRating.prototype['rating'] = undefined;






export default UserRating;

