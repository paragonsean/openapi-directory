/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProfileTokenRequest model module.
 * @module model/ProfileTokenRequest
 * @version 3.730.300-ref-1-39-0
 */
class ProfileTokenRequest {
    /**
     * Constructs a new <code>ProfileTokenRequest</code>.
     * @alias module:model/ProfileTokenRequest
     * @param profileId {String} The id of the profile the token should grant access rights to.
     * @param scopes {Array.<module:model/ProfileTokenRequest.ScopesEnum>} The scope(s) of the token(s) required.
     */
    constructor(profileId, scopes) { 
        
        ProfileTokenRequest.initialize(this, profileId, scopes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, profileId, scopes) { 
        obj['profileId'] = profileId;
        obj['scopes'] = scopes;
    }

    /**
     * Constructs a <code>ProfileTokenRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProfileTokenRequest} obj Optional instance to populate.
     * @return {module:model/ProfileTokenRequest} The populated <code>ProfileTokenRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProfileTokenRequest();

            if (data.hasOwnProperty('cookieType')) {
                obj['cookieType'] = ApiClient.convertToType(data['cookieType'], 'String');
            }
            if (data.hasOwnProperty('pin')) {
                obj['pin'] = ApiClient.convertToType(data['pin'], 'String');
            }
            if (data.hasOwnProperty('profileId')) {
                obj['profileId'] = ApiClient.convertToType(data['profileId'], 'String');
            }
            if (data.hasOwnProperty('scopes')) {
                obj['scopes'] = ApiClient.convertToType(data['scopes'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProfileTokenRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProfileTokenRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProfileTokenRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['cookieType'] && !(typeof data['cookieType'] === 'string' || data['cookieType'] instanceof String)) {
            throw new Error("Expected the field `cookieType` to be a primitive type in the JSON string but got " + data['cookieType']);
        }
        // ensure the json data is a string
        if (data['pin'] && !(typeof data['pin'] === 'string' || data['pin'] instanceof String)) {
            throw new Error("Expected the field `pin` to be a primitive type in the JSON string but got " + data['pin']);
        }
        // ensure the json data is a string
        if (data['profileId'] && !(typeof data['profileId'] === 'string' || data['profileId'] instanceof String)) {
            throw new Error("Expected the field `profileId` to be a primitive type in the JSON string but got " + data['profileId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scopes'])) {
            throw new Error("Expected the field `scopes` to be an array in the JSON data but got " + data['scopes']);
        }

        return true;
    }


}

ProfileTokenRequest.RequiredProperties = ["profileId", "scopes"];

/**
 * If you specify a cookie type then a content filter cookie will be returned along with the token(s). This is only intended for web based clients which need to pass the cookies to a server to render a page based on the user's content filters e.g subscription code.  If type `Session` the cookie will be session based. If type `Persistent` the cookie will have a medium term lifespan. If undefined no cookies will be set. 
 * @member {module:model/ProfileTokenRequest.CookieTypeEnum} cookieType
 */
ProfileTokenRequest.prototype['cookieType'] = undefined;

/**
 * The pin associated with this profile, if any.
 * @member {String} pin
 */
ProfileTokenRequest.prototype['pin'] = undefined;

/**
 * The id of the profile the token should grant access rights to.
 * @member {String} profileId
 */
ProfileTokenRequest.prototype['profileId'] = undefined;

/**
 * The scope(s) of the token(s) required.
 * @member {Array.<module:model/ProfileTokenRequest.ScopesEnum>} scopes
 */
ProfileTokenRequest.prototype['scopes'] = undefined;





/**
 * Allowed values for the <code>cookieType</code> property.
 * @enum {String}
 * @readonly
 */
ProfileTokenRequest['CookieTypeEnum'] = {

    /**
     * value: "Session"
     * @const
     */
    "Session": "Session",

    /**
     * value: "Persistent"
     * @const
     */
    "Persistent": "Persistent"
};


/**
 * Allowed values for the <code>scopes</code> property.
 * @enum {String}
 * @readonly
 */
ProfileTokenRequest['ScopesEnum'] = {

    /**
     * value: "Catalog"
     * @const
     */
    "Catalog": "Catalog",

    /**
     * value: "Commerce"
     * @const
     */
    "Commerce": "Commerce",

    /**
     * value: "Settings"
     * @const
     */
    "Settings": "Settings"
};



export default ProfileTokenRequest;

