/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClassificationSummary from './ClassificationSummary';
import Credit from './Credit';
import ItemCustomMetadata from './ItemCustomMetadata';
import ItemList from './ItemList';
import ItemSummary from './ItemSummary';
import Offer from './Offer';
import Theme from './Theme';

/**
 * The ItemDetail model module.
 * @module model/ItemDetail
 * @version 3.730.300-ref-1-39-0
 */
class ItemDetail {
    /**
     * Constructs a new <code>ItemDetail</code>.
     * @alias module:model/ItemDetail
     * @extends module:model/ItemSummary
     * @implements module:model/ItemSummary
     * @param id {String} Unique identifier for an Item
     * @param path {String} The path to the detail page of this item. Can be used to load the item detail page via the /page endpoint.
     * @param title {String} The display title of the item.
     * @param type {module:model/ItemDetail.TypeEnum} The type of item
     */
    constructor(id, path, title, type) { 
        ItemSummary.initialize(this, id, path, title, type);
        ItemDetail.initialize(this, id, path, title, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, path, title, type) { 
    }

    /**
     * Constructs a <code>ItemDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ItemDetail} obj Optional instance to populate.
     * @return {module:model/ItemDetail} The populated <code>ItemDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ItemDetail();
            ItemSummary.constructFromObject(data, obj);
            ItemSummary.constructFromObject(data, obj);

            if (data.hasOwnProperty('copyright')) {
                obj['copyright'] = ApiClient.convertToType(data['copyright'], 'String');
            }
            if (data.hasOwnProperty('credits')) {
                obj['credits'] = ApiClient.convertToType(data['credits'], [Credit]);
            }
            if (data.hasOwnProperty('customMetadata')) {
                obj['customMetadata'] = ApiClient.convertToType(data['customMetadata'], [ItemCustomMetadata]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('distributor')) {
                obj['distributor'] = ApiClient.convertToType(data['distributor'], 'String');
            }
            if (data.hasOwnProperty('episodes')) {
                obj['episodes'] = ItemList.constructFromObject(data['episodes']);
            }
            if (data.hasOwnProperty('eventDate')) {
                obj['eventDate'] = ApiClient.convertToType(data['eventDate'], 'Date');
            }
            if (data.hasOwnProperty('genrePaths')) {
                obj['genrePaths'] = ApiClient.convertToType(data['genrePaths'], ['String']);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('season')) {
                obj['season'] = ItemDetail.constructFromObject(data['season']);
            }
            if (data.hasOwnProperty('seasons')) {
                obj['seasons'] = ItemList.constructFromObject(data['seasons']);
            }
            if (data.hasOwnProperty('show')) {
                obj['show'] = ItemDetail.constructFromObject(data['show']);
            }
            if (data.hasOwnProperty('totalUserRatings')) {
                obj['totalUserRatings'] = ApiClient.convertToType(data['totalUserRatings'], 'Number');
            }
            if (data.hasOwnProperty('trailers')) {
                obj['trailers'] = ApiClient.convertToType(data['trailers'], [ItemSummary]);
            }
            if (data.hasOwnProperty('venue')) {
                obj['venue'] = ApiClient.convertToType(data['venue'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ItemDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ItemDetail</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ItemDetail.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['copyright'] && !(typeof data['copyright'] === 'string' || data['copyright'] instanceof String)) {
            throw new Error("Expected the field `copyright` to be a primitive type in the JSON string but got " + data['copyright']);
        }
        if (data['credits']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['credits'])) {
                throw new Error("Expected the field `credits` to be an array in the JSON data but got " + data['credits']);
            }
            // validate the optional field `credits` (array)
            for (const item of data['credits']) {
                Credit.validateJSON(item);
            };
        }
        if (data['customMetadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['customMetadata'])) {
                throw new Error("Expected the field `customMetadata` to be an array in the JSON data but got " + data['customMetadata']);
            }
            // validate the optional field `customMetadata` (array)
            for (const item of data['customMetadata']) {
                ItemCustomMetadata.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['distributor'] && !(typeof data['distributor'] === 'string' || data['distributor'] instanceof String)) {
            throw new Error("Expected the field `distributor` to be a primitive type in the JSON string but got " + data['distributor']);
        }
        // validate the optional field `episodes`
        if (data['episodes']) { // data not null
          ItemList.validateJSON(data['episodes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['genrePaths'])) {
            throw new Error("Expected the field `genrePaths` to be an array in the JSON data but got " + data['genrePaths']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // validate the optional field `season`
        if (data['season']) { // data not null
          ItemDetail.validateJSON(data['season']);
        }
        // validate the optional field `seasons`
        if (data['seasons']) { // data not null
          ItemList.validateJSON(data['seasons']);
        }
        // validate the optional field `show`
        if (data['show']) { // data not null
          ItemDetail.validateJSON(data['show']);
        }
        if (data['trailers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['trailers'])) {
                throw new Error("Expected the field `trailers` to be an array in the JSON data but got " + data['trailers']);
            }
            // validate the optional field `trailers` (array)
            for (const item of data['trailers']) {
                ItemSummary.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['venue'] && !(typeof data['venue'] === 'string' || data['venue'] instanceof String)) {
            throw new Error("Expected the field `venue` to be a primitive type in the JSON string but got " + data['venue']);
        }

        return true;
    }


}

ItemDetail.RequiredProperties = ["id", "path", "title", "type"];

/**
 * Copyright information about this item
 * @member {String} copyright
 */
ItemDetail.prototype['copyright'] = undefined;

/**
 * A list of credits associated with this item.
 * @member {Array.<module:model/Credit>} credits
 */
ItemDetail.prototype['credits'] = undefined;

/**
 * An ordered list of custom name-value-pair item metadata.  Usually displayed on an item detail page. 
 * @member {Array.<module:model/ItemCustomMetadata>} customMetadata
 */
ItemDetail.prototype['customMetadata'] = undefined;

/**
 * The description of this item.
 * @member {String} description
 */
ItemDetail.prototype['description'] = undefined;

/**
 * The distributor of this item.
 * @member {String} distributor
 */
ItemDetail.prototype['distributor'] = undefined;

/**
 * @member {module:model/ItemList} episodes
 */
ItemDetail.prototype['episodes'] = undefined;

/**
 * The optional date of an event. Specific to a Program item type. 
 * @member {Date} eventDate
 */
ItemDetail.prototype['eventDate'] = undefined;

/**
 * An array of genre paths mapping to the values within the `genres` array from ItemSummary. 
 * @member {Array.<String>} genrePaths
 */
ItemDetail.prototype['genrePaths'] = undefined;

/**
 * The optional location (e.g. city) of an event. Specific to a Program item type. 
 * @member {String} location
 */
ItemDetail.prototype['location'] = undefined;

/**
 * @member {module:model/ItemDetail} season
 */
ItemDetail.prototype['season'] = undefined;

/**
 * @member {module:model/ItemList} seasons
 */
ItemDetail.prototype['seasons'] = undefined;

/**
 * @member {module:model/ItemDetail} show
 */
ItemDetail.prototype['show'] = undefined;

/**
 * The total number of users who have rated this item.
 * @member {Number} totalUserRatings
 */
ItemDetail.prototype['totalUserRatings'] = undefined;

/**
 * A list of trailers associated with this item.
 * @member {Array.<module:model/ItemSummary>} trailers
 */
ItemDetail.prototype['trailers'] = undefined;

/**
 * The optional venue of an event. Specific to a Program item type. 
 * @member {String} venue
 */
ItemDetail.prototype['venue'] = undefined;


// Implement ItemSummary interface:
/**
 * Advisory text about this item, related to the classification
 * @member {String} advisoryText
 */
ItemSummary.prototype['advisoryText'] = undefined;
/**
 * The number of available episodes in the season, if the item is a season.
 * @member {Number} availableEpisodeCount
 */
ItemSummary.prototype['availableEpisodeCount'] = undefined;
/**
 * The number of available seasons in the show, if the item is a show.
 * @member {Number} availableSeasonCount
 */
ItemSummary.prototype['availableSeasonCount'] = undefined;
/**
 * The average user rating. When based on user ratings from our system this will be out of 10. 
 * @member {Number} averageUserRating
 */
ItemSummary.prototype['averageUserRating'] = undefined;
/**
 * The badge this item has.
 * @member {String} badge
 */
ItemSummary.prototype['badge'] = undefined;
/**
 * The channel short code, if the item is a channel.
 * @member {String} channelShortCode
 */
ItemSummary.prototype['channelShortCode'] = undefined;
/**
 * @member {module:model/ClassificationSummary} classification
 */
ItemSummary.prototype['classification'] = undefined;
/**
 * A contextually relative title to display after a parent title. Mostly applicable to Season, Episode and Trailer. 
 * @member {String} contextualTitle
 */
ItemSummary.prototype['contextualTitle'] = undefined;
/**
 * A map of custom fields defined by a curator for an item.
 * @member {Object.<String, Object>} customFields
 */
ItemSummary.prototype['customFields'] = undefined;
/**
 * A custom identifier for this item. For example the id for this item under a different content system. 
 * @member {String} customId
 */
ItemSummary.prototype['customId'] = undefined;
/**
 * The duration of the media in seconds.
 * @member {Number} duration
 */
ItemSummary.prototype['duration'] = undefined;
/**
 * The number of episodes in the season, if the item is a season.
 * @member {Number} episodeCount
 */
ItemSummary.prototype['episodeCount'] = undefined;
/**
 * The full name of an episode.
 * @member {String} episodeName
 */
ItemSummary.prototype['episodeName'] = undefined;
/**
 * The number of an episode, if the item is an episode.
 * @member {Number} episodeNumber
 */
ItemSummary.prototype['episodeNumber'] = undefined;
/**
 * The array of genres this item belongs to.
 * @member {Array.<String>} genres
 */
ItemSummary.prototype['genres'] = undefined;
/**
 * Whether closed captioning is available.
 * @member {Boolean} hasClosedCaptions
 */
ItemSummary.prototype['hasClosedCaptions'] = undefined;
/**
 * Unique identifier for an Item
 * @member {String} id
 */
ItemSummary.prototype['id'] = undefined;
/**
 * @member {Object.<String, String>} images
 */
ItemSummary.prototype['images'] = undefined;
/**
 * The array of available offers for this item.
 * @member {Array.<module:model/Offer>} offers
 */
ItemSummary.prototype['offers'] = undefined;
/**
 * The path to the detail page of this item. Can be used to load the item detail page via the /page endpoint.
 * @member {String} path
 */
ItemSummary.prototype['path'] = undefined;
/**
 * The year this item was released
 * @member {Number} releaseYear
 */
ItemSummary.prototype['releaseYear'] = undefined;
/**
 * The scopes for this item
 * @member {Array.<String>} scopes
 */
ItemSummary.prototype['scopes'] = undefined;
/**
 * The identifier of the season this item belongs to, if the item is an episode.
 * @member {String} seasonId
 */
ItemSummary.prototype['seasonId'] = undefined;
/**
 * The number of a season, if the item is a season.
 * @member {Number} seasonNumber
 */
ItemSummary.prototype['seasonNumber'] = undefined;
/**
 * A truncated description of the item
 * @member {String} shortDescription
 */
ItemSummary.prototype['shortDescription'] = undefined;
/**
 * The identifier of the show this item belongs to, if the item is a season or episode.
 * @member {String} showId
 */
ItemSummary.prototype['showId'] = undefined;
/**
 * @member {String} showTitle
 */
ItemSummary.prototype['showTitle'] = undefined;
/**
 * Subtype of the item. Mainly used to identify different types when `type` is `customAsset` 
 * @member {String} subtype
 */
ItemSummary.prototype['subtype'] = undefined;
/**
 * The tagline of the item
 * @member {String} tagline
 */
ItemSummary.prototype['tagline'] = undefined;
/**
 * Gets themes associated with the item
 * @member {Array.<module:model/Theme>} themes
 */
ItemSummary.prototype['themes'] = undefined;
/**
 * The display title of the item.
 * @member {String} title
 */
ItemSummary.prototype['title'] = undefined;
/**
 * The type of item
 * @member {module:model/ItemSummary.TypeEnum} type
 */
ItemSummary.prototype['type'] = undefined;
/**
 * The path to watch this item, if the item is a watchable type, e.g. a `movie`, `program` and `episode`.
 * @member {String} watchPath
 */
ItemSummary.prototype['watchPath'] = undefined;




export default ItemDetail;

