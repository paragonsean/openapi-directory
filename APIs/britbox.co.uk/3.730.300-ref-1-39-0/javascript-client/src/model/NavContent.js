/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ItemList from './ItemList';

/**
 * The NavContent model module.
 * @module model/NavContent
 * @version 3.730.300-ref-1-39-0
 */
class NavContent {
    /**
     * Constructs a new <code>NavContent</code>.
     * @alias module:model/NavContent
     */
    constructor() { 
        
        NavContent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NavContent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NavContent} obj Optional instance to populate.
     * @return {module:model/NavContent} The populated <code>NavContent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NavContent();

            if (data.hasOwnProperty('imageType')) {
                obj['imageType'] = ApiClient.convertToType(data['imageType'], 'String');
            }
            if (data.hasOwnProperty('list')) {
                obj['list'] = ItemList.constructFromObject(data['list']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NavContent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NavContent</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['imageType'] && !(typeof data['imageType'] === 'string' || data['imageType'] instanceof String)) {
            throw new Error("Expected the field `imageType` to be a primitive type in the JSON string but got " + data['imageType']);
        }
        // validate the optional field `list`
        if (data['list']) { // data not null
          ItemList.validateJSON(data['list']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * The image type to target when rendering items of the list.  e.g wallpaper, poster, hero3x1, logo. 
 * @member {String} imageType
 */
NavContent.prototype['imageType'] = undefined;

/**
 * @member {module:model/ItemList} list
 */
NavContent.prototype['list'] = undefined;

/**
 * The title of the embedded navigation content.
 * @member {String} title
 */
NavContent.prototype['title'] = undefined;






export default NavContent;

