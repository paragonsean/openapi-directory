/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AppConfigPlayback model module.
 * @module model/AppConfigPlayback
 * @version 3.730.300-ref-1-39-0
 */
class AppConfigPlayback {
    /**
     * Constructs a new <code>AppConfigPlayback</code>.
     * @alias module:model/AppConfigPlayback
     * @param chainPlayCountdown {Number} The number of seconds before autoplay of next video.  If set to 0 there will be no autoplay. 
     * @param chainPlaySqueezeback {Number} The number of seconds before the end of playback when the current video should be minimized and user options are presented within the video player.  If set to 0 there will be no squeezeback. 
     * @param chainPlayTimeout {Number} The number of minutes of user inactivity before autoplay is paused.  If set to 0 there will be no autoplay timeout. 
     * @param heartbeatFrequency {Number} How often a heartbeat should be renewed during playback.
     * @param viewEventPoints {Array.<Number>} An array of percentage points in which to fire off plabyack view events. For example a value of 0.5 would indicate that an event should be fired when the user is half way through the video. Often known as quartiles when four equaly spread event points. 
     */
    constructor(chainPlayCountdown, chainPlaySqueezeback, chainPlayTimeout, heartbeatFrequency, viewEventPoints) { 
        
        AppConfigPlayback.initialize(this, chainPlayCountdown, chainPlaySqueezeback, chainPlayTimeout, heartbeatFrequency, viewEventPoints);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, chainPlayCountdown, chainPlaySqueezeback, chainPlayTimeout, heartbeatFrequency, viewEventPoints) { 
        obj['chainPlayCountdown'] = chainPlayCountdown;
        obj['chainPlaySqueezeback'] = chainPlaySqueezeback;
        obj['chainPlayTimeout'] = chainPlayTimeout;
        obj['heartbeatFrequency'] = heartbeatFrequency;
        obj['viewEventPoints'] = viewEventPoints;
    }

    /**
     * Constructs a <code>AppConfigPlayback</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AppConfigPlayback} obj Optional instance to populate.
     * @return {module:model/AppConfigPlayback} The populated <code>AppConfigPlayback</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AppConfigPlayback();

            if (data.hasOwnProperty('chainPlayCountdown')) {
                obj['chainPlayCountdown'] = ApiClient.convertToType(data['chainPlayCountdown'], 'Number');
            }
            if (data.hasOwnProperty('chainPlaySqueezeback')) {
                obj['chainPlaySqueezeback'] = ApiClient.convertToType(data['chainPlaySqueezeback'], 'Number');
            }
            if (data.hasOwnProperty('chainPlayTimeout')) {
                obj['chainPlayTimeout'] = ApiClient.convertToType(data['chainPlayTimeout'], 'Number');
            }
            if (data.hasOwnProperty('heartbeatFrequency')) {
                obj['heartbeatFrequency'] = ApiClient.convertToType(data['heartbeatFrequency'], 'Number');
            }
            if (data.hasOwnProperty('viewEventPoints')) {
                obj['viewEventPoints'] = ApiClient.convertToType(data['viewEventPoints'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AppConfigPlayback</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AppConfigPlayback</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AppConfigPlayback.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['viewEventPoints'])) {
            throw new Error("Expected the field `viewEventPoints` to be an array in the JSON data but got " + data['viewEventPoints']);
        }

        return true;
    }


}

AppConfigPlayback.RequiredProperties = ["chainPlayCountdown", "chainPlaySqueezeback", "chainPlayTimeout", "heartbeatFrequency", "viewEventPoints"];

/**
 * The number of seconds before autoplay of next video.  If set to 0 there will be no autoplay. 
 * @member {Number} chainPlayCountdown
 */
AppConfigPlayback.prototype['chainPlayCountdown'] = undefined;

/**
 * The number of seconds before the end of playback when the current video should be minimized and user options are presented within the video player.  If set to 0 there will be no squeezeback. 
 * @member {Number} chainPlaySqueezeback
 */
AppConfigPlayback.prototype['chainPlaySqueezeback'] = undefined;

/**
 * The number of minutes of user inactivity before autoplay is paused.  If set to 0 there will be no autoplay timeout. 
 * @member {Number} chainPlayTimeout
 */
AppConfigPlayback.prototype['chainPlayTimeout'] = undefined;

/**
 * How often a heartbeat should be renewed during playback.
 * @member {Number} heartbeatFrequency
 */
AppConfigPlayback.prototype['heartbeatFrequency'] = undefined;

/**
 * An array of percentage points in which to fire off plabyack view events. For example a value of 0.5 would indicate that an event should be fired when the user is half way through the video. Often known as quartiles when four equaly spread event points. 
 * @member {Array.<Number>} viewEventPoints
 */
AppConfigPlayback.prototype['viewEventPoints'] = undefined;






export default AppConfigPlayback;

