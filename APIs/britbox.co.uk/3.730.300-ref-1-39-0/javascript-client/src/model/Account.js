/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import Entitlement from './Entitlement';
import ProfileSummary from './ProfileSummary';
import Subscription from './Subscription';

/**
 * The Account model module.
 * @module model/Account
 * @version 3.730.300-ref-1-39-0
 */
class Account {
    /**
     * Constructs a new <code>Account</code>.
     * @alias module:model/Account
     * @extends Object
     * @param id {String} The id of the account.
     * @param marketingEnabled {Boolean} Whether the account has opted in or out of marketing material.
     * @param pinEnabled {Boolean} When an account level pin is defined this will be true.
     * @param primaryProfileId {String} The id of the primary profile.
     * @param profiles {Array.<module:model/ProfileSummary>} The list of profiles under this account.
     * @param subscriptionCode {String} The active subscription code for an account.  The value of this should be passed to any endpoints accepting a `sub` query parameter. 
     * @param trackingEnabled {Boolean} Whether usage tracking is associated with the account or anonymous.
     */
    constructor(id, marketingEnabled, pinEnabled, primaryProfileId, profiles, subscriptionCode, trackingEnabled) { 
        
        Account.initialize(this, id, marketingEnabled, pinEnabled, primaryProfileId, profiles, subscriptionCode, trackingEnabled);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, marketingEnabled, pinEnabled, primaryProfileId, profiles, subscriptionCode, trackingEnabled) { 
        obj['id'] = id;
        obj['marketingEnabled'] = marketingEnabled;
        obj['pinEnabled'] = pinEnabled;
        obj['primaryProfileId'] = primaryProfileId;
        obj['profiles'] = profiles;
        obj['subscriptionCode'] = subscriptionCode;
        obj['trackingEnabled'] = trackingEnabled;
    }

    /**
     * Constructs a <code>Account</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Account} obj Optional instance to populate.
     * @return {module:model/Account} The populated <code>Account</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Account();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('address')) {
                obj['address'] = Address.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('defaultPaymentInstrumentId')) {
                obj['defaultPaymentInstrumentId'] = ApiClient.convertToType(data['defaultPaymentInstrumentId'], 'String');
            }
            if (data.hasOwnProperty('defaultPaymentMethodId')) {
                obj['defaultPaymentMethodId'] = ApiClient.convertToType(data['defaultPaymentMethodId'], 'String');
            }
            if (data.hasOwnProperty('emailVerified')) {
                obj['emailVerified'] = ApiClient.convertToType(data['emailVerified'], 'Boolean');
            }
            if (data.hasOwnProperty('entitlements')) {
                obj['entitlements'] = ApiClient.convertToType(data['entitlements'], [Entitlement]);
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isFirstTimeSubscriber')) {
                obj['isFirstTimeSubscriber'] = ApiClient.convertToType(data['isFirstTimeSubscriber'], 'Boolean');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('marketingEnabled')) {
                obj['marketingEnabled'] = ApiClient.convertToType(data['marketingEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('minRatingPlaybackGuard')) {
                obj['minRatingPlaybackGuard'] = ApiClient.convertToType(data['minRatingPlaybackGuard'], 'String');
            }
            if (data.hasOwnProperty('pinEnabled')) {
                obj['pinEnabled'] = ApiClient.convertToType(data['pinEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('primaryProfileId')) {
                obj['primaryProfileId'] = ApiClient.convertToType(data['primaryProfileId'], 'String');
            }
            if (data.hasOwnProperty('profiles')) {
                obj['profiles'] = ApiClient.convertToType(data['profiles'], [ProfileSummary]);
            }
            if (data.hasOwnProperty('segments')) {
                obj['segments'] = ApiClient.convertToType(data['segments'], ['String']);
            }
            if (data.hasOwnProperty('subscriptionCode')) {
                obj['subscriptionCode'] = ApiClient.convertToType(data['subscriptionCode'], 'String');
            }
            if (data.hasOwnProperty('subscriptions')) {
                obj['subscriptions'] = ApiClient.convertToType(data['subscriptions'], [Subscription]);
            }
            if (data.hasOwnProperty('trackingEnabled')) {
                obj['trackingEnabled'] = ApiClient.convertToType(data['trackingEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('usedFreeTrial')) {
                obj['usedFreeTrial'] = ApiClient.convertToType(data['usedFreeTrial'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Account</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Account</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Account.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `address`
        if (data['address']) { // data not null
          Address.validateJSON(data['address']);
        }
        // ensure the json data is a string
        if (data['defaultPaymentInstrumentId'] && !(typeof data['defaultPaymentInstrumentId'] === 'string' || data['defaultPaymentInstrumentId'] instanceof String)) {
            throw new Error("Expected the field `defaultPaymentInstrumentId` to be a primitive type in the JSON string but got " + data['defaultPaymentInstrumentId']);
        }
        // ensure the json data is a string
        if (data['defaultPaymentMethodId'] && !(typeof data['defaultPaymentMethodId'] === 'string' || data['defaultPaymentMethodId'] instanceof String)) {
            throw new Error("Expected the field `defaultPaymentMethodId` to be a primitive type in the JSON string but got " + data['defaultPaymentMethodId']);
        }
        if (data['entitlements']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['entitlements'])) {
                throw new Error("Expected the field `entitlements` to be an array in the JSON data but got " + data['entitlements']);
            }
            // validate the optional field `entitlements` (array)
            for (const item of data['entitlements']) {
                Entitlement.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['minRatingPlaybackGuard'] && !(typeof data['minRatingPlaybackGuard'] === 'string' || data['minRatingPlaybackGuard'] instanceof String)) {
            throw new Error("Expected the field `minRatingPlaybackGuard` to be a primitive type in the JSON string but got " + data['minRatingPlaybackGuard']);
        }
        // ensure the json data is a string
        if (data['primaryProfileId'] && !(typeof data['primaryProfileId'] === 'string' || data['primaryProfileId'] instanceof String)) {
            throw new Error("Expected the field `primaryProfileId` to be a primitive type in the JSON string but got " + data['primaryProfileId']);
        }
        if (data['profiles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['profiles'])) {
                throw new Error("Expected the field `profiles` to be an array in the JSON data but got " + data['profiles']);
            }
            // validate the optional field `profiles` (array)
            for (const item of data['profiles']) {
                ProfileSummary.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['segments'])) {
            throw new Error("Expected the field `segments` to be an array in the JSON data but got " + data['segments']);
        }
        // ensure the json data is a string
        if (data['subscriptionCode'] && !(typeof data['subscriptionCode'] === 'string' || data['subscriptionCode'] instanceof String)) {
            throw new Error("Expected the field `subscriptionCode` to be a primitive type in the JSON string but got " + data['subscriptionCode']);
        }
        if (data['subscriptions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['subscriptions'])) {
                throw new Error("Expected the field `subscriptions` to be an array in the JSON data but got " + data['subscriptions']);
            }
            // validate the optional field `subscriptions` (array)
            for (const item of data['subscriptions']) {
                Subscription.validateJSON(item);
            };
        }

        return true;
    }


}

Account.RequiredProperties = ["id", "marketingEnabled", "pinEnabled", "primaryProfileId", "profiles", "subscriptionCode", "trackingEnabled"];

/**
 * @member {module:model/Address} address
 */
Account.prototype['address'] = undefined;

/**
 * The id of the payment instrument to use by default for account transactions.   **DEPRECATED** The property `defaultPaymentMethodId` is now preferred. 
 * @member {String} defaultPaymentInstrumentId
 */
Account.prototype['defaultPaymentInstrumentId'] = undefined;

/**
 * The id of the payment method to use by default for account transactions.
 * @member {String} defaultPaymentMethodId
 */
Account.prototype['defaultPaymentMethodId'] = undefined;

/**
 * Whether the email address has been verified.  Users who receive an emailed verification url click the link to verify their email address. 
 * @member {Boolean} emailVerified
 */
Account.prototype['emailVerified'] = undefined;

/**
 * The list of entitlements to playback specific items.
 * @member {Array.<module:model/Entitlement>} entitlements
 */
Account.prototype['entitlements'] = undefined;

/**
 * The first name of the account holder.
 * @member {String} firstName
 */
Account.prototype['firstName'] = undefined;

/**
 * The id of the account.
 * @member {String} id
 */
Account.prototype['id'] = undefined;

/**
 * Whether the account has the very first subscription.
 * @member {Boolean} isFirstTimeSubscriber
 */
Account.prototype['isFirstTimeSubscriber'] = undefined;

/**
 * The last name of the account holder.
 * @member {String} lastName
 */
Account.prototype['lastName'] = undefined;

/**
 * Whether the account has opted in or out of marketing material.
 * @member {Boolean} marketingEnabled
 */
Account.prototype['marketingEnabled'] = undefined;

/**
 * The classification rating defining the minimum rating level a user should be forced to enter the account pin code for playback. Anything at this rating level or above will require the pin for playback.  e.g. AUOFLC-MA15+  If you want to disable this guard pass an empty string or `null`. 
 * @member {String} minRatingPlaybackGuard
 */
Account.prototype['minRatingPlaybackGuard'] = undefined;

/**
 * When an account level pin is defined this will be true.
 * @member {Boolean} pinEnabled
 */
Account.prototype['pinEnabled'] = undefined;

/**
 * The id of the primary profile.
 * @member {String} primaryProfileId
 */
Account.prototype['primaryProfileId'] = undefined;

/**
 * The list of profiles under this account.
 * @member {Array.<module:model/ProfileSummary>} profiles
 */
Account.prototype['profiles'] = undefined;

/**
 * The segments an account has been placed under
 * @member {Array.<String>} segments
 */
Account.prototype['segments'] = undefined;

/**
 * The active subscription code for an account.  The value of this should be passed to any endpoints accepting a `sub` query parameter. 
 * @member {String} subscriptionCode
 */
Account.prototype['subscriptionCode'] = undefined;

/**
 * The list of subscriptions, if any, the account has signed up to.
 * @member {Array.<module:model/Subscription>} subscriptions
 */
Account.prototype['subscriptions'] = undefined;

/**
 * Whether usage tracking is associated with the account or anonymous.
 * @member {Boolean} trackingEnabled
 */
Account.prototype['trackingEnabled'] = undefined;

/**
 * Whether the account has used up their free trial period of a plan.
 * @member {Boolean} usedFreeTrial
 */
Account.prototype['usedFreeTrial'] = undefined;






export default Account;

