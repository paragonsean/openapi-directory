/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AccessToken model module.
 * @module model/AccessToken
 * @version 3.730.300-ref-1-39-0
 */
class AccessToken {
    /**
     * Constructs a new <code>AccessToken</code>.
     * @alias module:model/AccessToken
     * @param expirationDate {Date} The timestamp this token expires.
     * @param refreshable {Boolean} True if this token can be refreshed, false if not.
     * @param type {module:model/AccessToken.TypeEnum} The type of the token.
     * @param value {String} The token value used for authenticated requests.
     */
    constructor(expirationDate, refreshable, type, value) { 
        
        AccessToken.initialize(this, expirationDate, refreshable, type, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, expirationDate, refreshable, type, value) { 
        obj['expirationDate'] = expirationDate;
        obj['refreshable'] = refreshable;
        obj['type'] = type;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>AccessToken</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccessToken} obj Optional instance to populate.
     * @return {module:model/AccessToken} The populated <code>AccessToken</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccessToken();

            if (data.hasOwnProperty('accountCreated')) {
                obj['accountCreated'] = ApiClient.convertToType(data['accountCreated'], 'Boolean');
            }
            if (data.hasOwnProperty('expirationDate')) {
                obj['expirationDate'] = ApiClient.convertToType(data['expirationDate'], 'Date');
            }
            if (data.hasOwnProperty('refreshable')) {
                obj['refreshable'] = ApiClient.convertToType(data['refreshable'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccessToken</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccessToken</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AccessToken.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}

AccessToken.RequiredProperties = ["expirationDate", "refreshable", "type", "value"];

/**
 * When a `UserAccount` token is issued during a single-sign-on flow a user may have been automatically registered if they didn't have an account already. If this occurs then `accountCreated` will be `true`. 
 * @member {Boolean} accountCreated
 */
AccessToken.prototype['accountCreated'] = undefined;

/**
 * The timestamp this token expires.
 * @member {Date} expirationDate
 */
AccessToken.prototype['expirationDate'] = undefined;

/**
 * True if this token can be refreshed, false if not.
 * @member {Boolean} refreshable
 */
AccessToken.prototype['refreshable'] = undefined;

/**
 * The type of the token.
 * @member {module:model/AccessToken.TypeEnum} type
 */
AccessToken.prototype['type'] = undefined;

/**
 * The token value used for authenticated requests.
 * @member {String} value
 */
AccessToken.prototype['value'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
AccessToken['TypeEnum'] = {

    /**
     * value: "UserAccount"
     * @const
     */
    "UserAccount": "UserAccount",

    /**
     * value: "UserProfile"
     * @const
     */
    "UserProfile": "UserProfile"
};



export default AccessToken;

