/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NavContent from './NavContent';

/**
 * The NavEntry model module.
 * @module model/NavEntry
 * @version 3.730.300-ref-1-39-0
 */
class NavEntry {
    /**
     * Constructs a new <code>NavEntry</code>.
     * @alias module:model/NavEntry
     * @param depth {Number} The depth of the NavEntry (top level is 0)
     */
    constructor(depth) { 
        
        NavEntry.initialize(this, depth);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, depth) { 
        obj['depth'] = depth;
    }

    /**
     * Constructs a <code>NavEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NavEntry} obj Optional instance to populate.
     * @return {module:model/NavEntry} The populated <code>NavEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NavEntry();

            if (data.hasOwnProperty('children')) {
                obj['children'] = ApiClient.convertToType(data['children'], [NavEntry]);
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = NavContent.constructFromObject(data['content']);
            }
            if (data.hasOwnProperty('customFields')) {
                obj['customFields'] = ApiClient.convertToType(data['customFields'], {'String': Object});
            }
            if (data.hasOwnProperty('depth')) {
                obj['depth'] = ApiClient.convertToType(data['depth'], 'Number');
            }
            if (data.hasOwnProperty('featured')) {
                obj['featured'] = ApiClient.convertToType(data['featured'], 'Boolean');
            }
            if (data.hasOwnProperty('icon')) {
                obj['icon'] = ApiClient.convertToType(data['icon'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NavEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NavEntry</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NavEntry.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['children']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['children'])) {
                throw new Error("Expected the field `children` to be an array in the JSON data but got " + data['children']);
            }
            // validate the optional field `children` (array)
            for (const item of data['children']) {
                NavEntry.validateJSON(item);
            };
        }
        // validate the optional field `content`
        if (data['content']) { // data not null
          NavContent.validateJSON(data['content']);
        }
        // ensure the json data is a string
        if (data['icon'] && !(typeof data['icon'] === 'string' || data['icon'] instanceof String)) {
            throw new Error("Expected the field `icon` to be a primitive type in the JSON string but got " + data['icon']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }

        return true;
    }


}

NavEntry.RequiredProperties = ["depth"];

/**
 * Child nav entries.
 * @member {Array.<module:model/NavEntry>} children
 */
NavEntry.prototype['children'] = undefined;

/**
 * @member {module:model/NavContent} content
 */
NavEntry.prototype['content'] = undefined;

/**
 * A map of custom fields defined by a curator for a nav entry.
 * @member {Object.<String, Object>} customFields
 */
NavEntry.prototype['customFields'] = undefined;

/**
 * The depth of the NavEntry (top level is 0)
 * @member {Number} depth
 */
NavEntry.prototype['depth'] = undefined;

/**
 * True if this is a featured menu item.  Featured menu items may have a more prominent presentation than others in the navigation. 
 * @member {Boolean} featured
 */
NavEntry.prototype['featured'] = undefined;

/**
 * The icon for this nav entry.
 * @member {String} icon
 */
NavEntry.prototype['icon'] = undefined;

/**
 * The text label for this nav entry.
 * @member {String} label
 */
NavEntry.prototype['label'] = undefined;

/**
 * The path this nav entry links to. May be undefined if the nav entry is not clickable e.g. a nav heading. If the value begins with `http` then it's an external url. 
 * @member {String} path
 */
NavEntry.prototype['path'] = undefined;






export default NavEntry;

