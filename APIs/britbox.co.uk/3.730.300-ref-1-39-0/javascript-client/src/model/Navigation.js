/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NavEntry from './NavEntry';

/**
 * The Navigation model module.
 * @module model/Navigation
 * @version 3.730.300-ref-1-39-0
 */
class Navigation {
    /**
     * Constructs a new <code>Navigation</code>.
     * @alias module:model/Navigation
     * @param header {Array.<module:model/NavEntry>} The header navigation.
     */
    constructor(header) { 
        
        Navigation.initialize(this, header);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, header) { 
        obj['header'] = header;
    }

    /**
     * Constructs a <code>Navigation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Navigation} obj Optional instance to populate.
     * @return {module:model/Navigation} The populated <code>Navigation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Navigation();

            if (data.hasOwnProperty('account')) {
                obj['account'] = NavEntry.constructFromObject(data['account']);
            }
            if (data.hasOwnProperty('copyright')) {
                obj['copyright'] = ApiClient.convertToType(data['copyright'], 'String');
            }
            if (data.hasOwnProperty('customFields')) {
                obj['customFields'] = ApiClient.convertToType(data['customFields'], {'String': Object});
            }
            if (data.hasOwnProperty('footer')) {
                obj['footer'] = NavEntry.constructFromObject(data['footer']);
            }
            if (data.hasOwnProperty('header')) {
                obj['header'] = ApiClient.convertToType(data['header'], [NavEntry]);
            }
            if (data.hasOwnProperty('mobile')) {
                obj['mobile'] = NavEntry.constructFromObject(data['mobile']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Navigation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Navigation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Navigation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `account`
        if (data['account']) { // data not null
          NavEntry.validateJSON(data['account']);
        }
        // ensure the json data is a string
        if (data['copyright'] && !(typeof data['copyright'] === 'string' || data['copyright'] instanceof String)) {
            throw new Error("Expected the field `copyright` to be a primitive type in the JSON string but got " + data['copyright']);
        }
        // validate the optional field `footer`
        if (data['footer']) { // data not null
          NavEntry.validateJSON(data['footer']);
        }
        if (data['header']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['header'])) {
                throw new Error("Expected the field `header` to be an array in the JSON data but got " + data['header']);
            }
            // validate the optional field `header` (array)
            for (const item of data['header']) {
                NavEntry.validateJSON(item);
            };
        }
        // validate the optional field `mobile`
        if (data['mobile']) { // data not null
          NavEntry.validateJSON(data['mobile']);
        }

        return true;
    }


}

Navigation.RequiredProperties = ["header"];

/**
 * @member {module:model/NavEntry} account
 */
Navigation.prototype['account'] = undefined;

/**
 * Copyright information.
 * @member {String} copyright
 */
Navigation.prototype['copyright'] = undefined;

/**
 * A map of custom fields defined by a curator for navigation.
 * @member {Object.<String, Object>} customFields
 */
Navigation.prototype['customFields'] = undefined;

/**
 * @member {module:model/NavEntry} footer
 */
Navigation.prototype['footer'] = undefined;

/**
 * The header navigation.
 * @member {Array.<module:model/NavEntry>} header
 */
Navigation.prototype['header'] = undefined;

/**
 * @member {module:model/NavEntry} mobile
 */
Navigation.prototype['mobile'] = undefined;






export default Navigation;

