/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PaymentMethod model module.
 * @module model/PaymentMethod
 * @version 3.730.300-ref-1-39-0
 */
class PaymentMethod {
    /**
     * Constructs a new <code>PaymentMethod</code>.
     * @alias module:model/PaymentMethod
     * @param description {String} A short description of a payment method.  If the payment method is of type `Wallet` this will be \"My Wallet\"  For `Card` type payment methods the format of this description may differ depending on the payment gateway in use. In the case of Stripe, this will be in the format \"Visa (**** 4242, exp 08/19)\" 
     * @param id {String} The unique identifier of a payment method.
     * @param type {module:model/PaymentMethod.TypeEnum} The type of payment method.
     */
    constructor(description, id, type) { 
        
        PaymentMethod.initialize(this, description, id, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, description, id, type) { 
        obj['description'] = description;
        obj['id'] = id;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>PaymentMethod</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentMethod} obj Optional instance to populate.
     * @return {module:model/PaymentMethod} The populated <code>PaymentMethod</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentMethod();

            if (data.hasOwnProperty('balance')) {
                obj['balance'] = ApiClient.convertToType(data['balance'], 'Number');
            }
            if (data.hasOwnProperty('brand')) {
                obj['brand'] = ApiClient.convertToType(data['brand'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('expiryMonth')) {
                obj['expiryMonth'] = ApiClient.convertToType(data['expiryMonth'], 'Number');
            }
            if (data.hasOwnProperty('expiryYear')) {
                obj['expiryYear'] = ApiClient.convertToType(data['expiryYear'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lastDigits')) {
                obj['lastDigits'] = ApiClient.convertToType(data['lastDigits'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentMethod</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentMethod</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PaymentMethod.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['brand'] && !(typeof data['brand'] === 'string' || data['brand'] instanceof String)) {
            throw new Error("Expected the field `brand` to be a primitive type in the JSON string but got " + data['brand']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

PaymentMethod.RequiredProperties = ["description", "id", "type"];

/**
 * The balance of the wallet if the payment method is a wallet.
 * @member {Number} balance
 */
PaymentMethod.prototype['balance'] = undefined;

/**
 * The brand of the card if the payment method is a card.
 * @member {module:model/PaymentMethod.BrandEnum} brand
 */
PaymentMethod.prototype['brand'] = undefined;

/**
 * The currency code of the wallet if the payment method is a wallet.
 * @member {String} currency
 */
PaymentMethod.prototype['currency'] = undefined;

/**
 * A short description of a payment method.  If the payment method is of type `Wallet` this will be \"My Wallet\"  For `Card` type payment methods the format of this description may differ depending on the payment gateway in use. In the case of Stripe, this will be in the format \"Visa (**** 4242, exp 08/19)\" 
 * @member {String} description
 */
PaymentMethod.prototype['description'] = undefined;

/**
 * The expiry month of the card if the payment method is a card.
 * @member {Number} expiryMonth
 */
PaymentMethod.prototype['expiryMonth'] = undefined;

/**
 * The expiry year of the card if the payment method is a card.
 * @member {Number} expiryYear
 */
PaymentMethod.prototype['expiryYear'] = undefined;

/**
 * The unique identifier of a payment method.
 * @member {String} id
 */
PaymentMethod.prototype['id'] = undefined;

/**
 * The last digits of the card if the payment method is a card. Depending on the payment gateway in use this value may be undefined. 
 * @member {Number} lastDigits
 */
PaymentMethod.prototype['lastDigits'] = undefined;

/**
 * The type of payment method.
 * @member {module:model/PaymentMethod.TypeEnum} type
 */
PaymentMethod.prototype['type'] = undefined;





/**
 * Allowed values for the <code>brand</code> property.
 * @enum {String}
 * @readonly
 */
PaymentMethod['BrandEnum'] = {

    /**
     * value: "Visa"
     * @const
     */
    "Visa": "Visa",

    /**
     * value: "MasterCard"
     * @const
     */
    "MasterCard": "MasterCard",

    /**
     * value: "AmericanExpress"
     * @const
     */
    "AmericanExpress": "AmericanExpress",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
PaymentMethod['TypeEnum'] = {

    /**
     * value: "Card"
     * @const
     */
    "Card": "Card",

    /**
     * value: "Wallet"
     * @const
     */
    "Wallet": "Wallet"
};



export default PaymentMethod;

