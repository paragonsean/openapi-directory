/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ItemClipFile model module.
 * @module model/ItemClipFile
 * @version 3.730.300-ref-1-39-0
 */
class ItemClipFile {
    /**
     * Constructs a new <code>ItemClipFile</code>.
     * @alias module:model/ItemClipFile
     * @extends Object
     * @param deliveryType {module:model/ItemClipFile.DeliveryTypeEnum} The way in which the media file is delivered.
     * @param drm {String} The type of drm used to encrypt the media. 'None' if unencrypted.
     * @param format {String} The format the media was encoded in.
     * @param height {Number} The height of the video media.
     * @param language {String} The language code for the media, e.g. 'en'.
     * @param name {String} The name of the media file.
     * @param resolution {module:model/ItemClipFile.ResolutionEnum} The resolution of the video media.
     * @param url {String} The url to access the media file.
     * @param width {Number} The width of the video media.
     */
    constructor(deliveryType, drm, format, height, language, name, resolution, url, width) { 
        
        ItemClipFile.initialize(this, deliveryType, drm, format, height, language, name, resolution, url, width);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, deliveryType, drm, format, height, language, name, resolution, url, width) { 
        obj['deliveryType'] = deliveryType;
        obj['drm'] = drm;
        obj['format'] = format;
        obj['height'] = height;
        obj['language'] = language;
        obj['name'] = name;
        obj['resolution'] = resolution;
        obj['url'] = url;
        obj['width'] = width;
    }

    /**
     * Constructs a <code>ItemClipFile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ItemClipFile} obj Optional instance to populate.
     * @return {module:model/ItemClipFile} The populated <code>ItemClipFile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ItemClipFile();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('channels')) {
                obj['channels'] = ApiClient.convertToType(data['channels'], 'Number');
            }
            if (data.hasOwnProperty('deliveryType')) {
                obj['deliveryType'] = ApiClient.convertToType(data['deliveryType'], 'String');
            }
            if (data.hasOwnProperty('drm')) {
                obj['drm'] = ApiClient.convertToType(data['drm'], 'String');
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('resolution')) {
                obj['resolution'] = ApiClient.convertToType(data['resolution'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ItemClipFile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ItemClipFile</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ItemClipFile.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['deliveryType'] && !(typeof data['deliveryType'] === 'string' || data['deliveryType'] instanceof String)) {
            throw new Error("Expected the field `deliveryType` to be a primitive type in the JSON string but got " + data['deliveryType']);
        }
        // ensure the json data is a string
        if (data['drm'] && !(typeof data['drm'] === 'string' || data['drm'] instanceof String)) {
            throw new Error("Expected the field `drm` to be a primitive type in the JSON string but got " + data['drm']);
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['resolution'] && !(typeof data['resolution'] === 'string' || data['resolution'] instanceof String)) {
            throw new Error("Expected the field `resolution` to be a primitive type in the JSON string but got " + data['resolution']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

ItemClipFile.RequiredProperties = ["deliveryType", "drm", "format", "height", "language", "name", "resolution", "url", "width"];

/**
 * The number of audio channels.
 * @member {Number} channels
 */
ItemClipFile.prototype['channels'] = undefined;

/**
 * The way in which the media file is delivered.
 * @member {module:model/ItemClipFile.DeliveryTypeEnum} deliveryType
 */
ItemClipFile.prototype['deliveryType'] = undefined;

/**
 * The type of drm used to encrypt the media. 'None' if unencrypted.
 * @member {String} drm
 */
ItemClipFile.prototype['drm'] = undefined;

/**
 * The format the media was encoded in.
 * @member {String} format
 */
ItemClipFile.prototype['format'] = undefined;

/**
 * The height of the video media.
 * @member {Number} height
 */
ItemClipFile.prototype['height'] = undefined;

/**
 * The language code for the media, e.g. 'en'.
 * @member {String} language
 */
ItemClipFile.prototype['language'] = undefined;

/**
 * The name of the media file.
 * @member {String} name
 */
ItemClipFile.prototype['name'] = undefined;

/**
 * The resolution of the video media.
 * @member {module:model/ItemClipFile.ResolutionEnum} resolution
 */
ItemClipFile.prototype['resolution'] = undefined;

/**
 * The url to access the media file.
 * @member {String} url
 */
ItemClipFile.prototype['url'] = undefined;

/**
 * The width of the video media.
 * @member {Number} width
 */
ItemClipFile.prototype['width'] = undefined;





/**
 * Allowed values for the <code>deliveryType</code> property.
 * @enum {String}
 * @readonly
 */
ItemClipFile['DeliveryTypeEnum'] = {

    /**
     * value: "Stream"
     * @const
     */
    "Stream": "Stream",

    /**
     * value: "Progressive"
     * @const
     */
    "Progressive": "Progressive",

    /**
     * value: "Download"
     * @const
     */
    "Download": "Download"
};


/**
 * Allowed values for the <code>resolution</code> property.
 * @enum {String}
 * @readonly
 */
ItemClipFile['ResolutionEnum'] = {

    /**
     * value: "SD"
     * @const
     */
    "SD": "SD",

    /**
     * value: "HD-720"
     * @const
     */
    "HD-720": "HD-720",

    /**
     * value: "HD-1080"
     * @const
     */
    "HD-1080": "HD-1080",

    /**
     * value: "HD-4K"
     * @const
     */
    "HD-4K": "HD-4K",

    /**
     * value: "External"
     * @const
     */
    "External": "External",

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown"
};



export default ItemClipFile;

