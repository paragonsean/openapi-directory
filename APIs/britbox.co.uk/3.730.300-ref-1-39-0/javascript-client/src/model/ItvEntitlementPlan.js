/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ItvEntitlementPlan model module.
 * @module model/ItvEntitlementPlan
 * @version 3.730.300-ref-1-39-0
 */
class ItvEntitlementPlan {
    /**
     * Constructs a new <code>ItvEntitlementPlan</code>.
     * @alias module:model/ItvEntitlementPlan
     * @param cost {Number} Source platform of purchase.
     * @param interval {module:model/ItvEntitlementPlan.IntervalEnum} The type of billing period used.
     * @param trialLength {Number} Given the `interval` this is how frequently it will run. e.g. every 2 weeks.
     * @param type {String} Type of the plan.
     */
    constructor(cost, interval, trialLength, type) { 
        
        ItvEntitlementPlan.initialize(this, cost, interval, trialLength, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cost, interval, trialLength, type) { 
        obj['cost'] = cost;
        obj['interval'] = interval;
        obj['trialLength'] = trialLength;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>ItvEntitlementPlan</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ItvEntitlementPlan} obj Optional instance to populate.
     * @return {module:model/ItvEntitlementPlan} The populated <code>ItvEntitlementPlan</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ItvEntitlementPlan();

            if (data.hasOwnProperty('cost')) {
                obj['cost'] = ApiClient.convertToType(data['cost'], 'Number');
            }
            if (data.hasOwnProperty('interval')) {
                obj['interval'] = ApiClient.convertToType(data['interval'], 'String');
            }
            if (data.hasOwnProperty('trialLength')) {
                obj['trialLength'] = ApiClient.convertToType(data['trialLength'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ItvEntitlementPlan</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ItvEntitlementPlan</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ItvEntitlementPlan.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['interval'] && !(typeof data['interval'] === 'string' || data['interval'] instanceof String)) {
            throw new Error("Expected the field `interval` to be a primitive type in the JSON string but got " + data['interval']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

ItvEntitlementPlan.RequiredProperties = ["cost", "interval", "trialLength", "type"];

/**
 * Source platform of purchase.
 * @member {Number} cost
 */
ItvEntitlementPlan.prototype['cost'] = undefined;

/**
 * The type of billing period used.
 * @member {module:model/ItvEntitlementPlan.IntervalEnum} interval
 */
ItvEntitlementPlan.prototype['interval'] = undefined;

/**
 * Given the `interval` this is how frequently it will run. e.g. every 2 weeks.
 * @member {Number} trialLength
 */
ItvEntitlementPlan.prototype['trialLength'] = undefined;

/**
 * Type of the plan.
 * @member {String} type
 */
ItvEntitlementPlan.prototype['type'] = undefined;





/**
 * Allowed values for the <code>interval</code> property.
 * @enum {String}
 * @readonly
 */
ItvEntitlementPlan['IntervalEnum'] = {

    /**
     * value: "day"
     * @const
     */
    "day": "day",

    /**
     * value: "week"
     * @const
     */
    "week": "week",

    /**
     * value: "month"
     * @const
     */
    "month": "month",

    /**
     * value: "year"
     * @const
     */
    "year": "year",

    /**
     * value: "none"
     * @const
     */
    "none": "none"
};



export default ItvEntitlementPlan;

