/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ItemSchedule from './ItemSchedule';

/**
 * The ItemScheduleList model module.
 * @module model/ItemScheduleList
 * @version 3.730.300-ref-1-39-0
 */
class ItemScheduleList {
    /**
     * Constructs a new <code>ItemScheduleList</code>.
     * @alias module:model/ItemScheduleList
     * @param channelId {String} The id of the channel the schedules belong to.
     * @param endDate {Date} The date and time this list of schedules ends.
     * @param schedules {Array.<module:model/ItemSchedule>} The list of item schedules.
     * @param startDate {Date} The date and time this list of schedules starts.
     */
    constructor(channelId, endDate, schedules, startDate) { 
        
        ItemScheduleList.initialize(this, channelId, endDate, schedules, startDate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, channelId, endDate, schedules, startDate) { 
        obj['channelId'] = channelId;
        obj['endDate'] = endDate;
        obj['schedules'] = schedules;
        obj['startDate'] = startDate;
    }

    /**
     * Constructs a <code>ItemScheduleList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ItemScheduleList} obj Optional instance to populate.
     * @return {module:model/ItemScheduleList} The populated <code>ItemScheduleList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ItemScheduleList();

            if (data.hasOwnProperty('channelId')) {
                obj['channelId'] = ApiClient.convertToType(data['channelId'], 'String');
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'Date');
            }
            if (data.hasOwnProperty('schedules')) {
                obj['schedules'] = ApiClient.convertToType(data['schedules'], [ItemSchedule]);
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ItemScheduleList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ItemScheduleList</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ItemScheduleList.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['channelId'] && !(typeof data['channelId'] === 'string' || data['channelId'] instanceof String)) {
            throw new Error("Expected the field `channelId` to be a primitive type in the JSON string but got " + data['channelId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['schedules'])) {
            throw new Error("Expected the field `schedules` to be an array in the JSON data but got " + data['schedules']);
        }

        return true;
    }


}

ItemScheduleList.RequiredProperties = ["channelId", "endDate", "schedules", "startDate"];

/**
 * The id of the channel the schedules belong to.
 * @member {String} channelId
 */
ItemScheduleList.prototype['channelId'] = undefined;

/**
 * The date and time this list of schedules ends.
 * @member {Date} endDate
 */
ItemScheduleList.prototype['endDate'] = undefined;

/**
 * The list of item schedules.
 * @member {Array.<module:model/ItemSchedule>} schedules
 */
ItemScheduleList.prototype['schedules'] = undefined;

/**
 * The date and time this list of schedules starts.
 * @member {Date} startDate
 */
ItemScheduleList.prototype['startDate'] = undefined;






export default ItemScheduleList;

