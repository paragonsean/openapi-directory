/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BtPlanListItem model module.
 * @module model/BtPlanListItem
 * @version 3.730.300-ref-1-39-0
 */
class BtPlanListItem {
    /**
     * Constructs a new <code>BtPlanListItem</code>.
     * @alias module:model/BtPlanListItem
     * @param ctaText {String} The textual description.
     * @param currency {String} The currency a plan is offered in.
     * @param description {String} The textual description.
     * @param headerText {String} The textual description.
     * @param heroText {String} The textual description.
     * @param id {String} The identifier of a plan.
     * @param longText {String} The textual description.
     * @param nickname {String} The title of a plan.
     * @param product {String} The product of a plan.
     * @param trialPeriodDays {Number} How many days a trial period runs for a plan. Only valid if `hasTrialPeriod` is true.
     */
    constructor(ctaText, currency, description, headerText, heroText, id, longText, nickname, product, trialPeriodDays) { 
        
        BtPlanListItem.initialize(this, ctaText, currency, description, headerText, heroText, id, longText, nickname, product, trialPeriodDays);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, ctaText, currency, description, headerText, heroText, id, longText, nickname, product, trialPeriodDays) { 
        obj['ctaText'] = ctaText;
        obj['currency'] = currency;
        obj['description'] = description;
        obj['headerText'] = headerText;
        obj['heroText'] = heroText;
        obj['id'] = id;
        obj['longText'] = longText;
        obj['nickname'] = nickname;
        obj['product'] = product;
        obj['trialPeriodDays'] = trialPeriodDays;
    }

    /**
     * Constructs a <code>BtPlanListItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BtPlanListItem} obj Optional instance to populate.
     * @return {module:model/BtPlanListItem} The populated <code>BtPlanListItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BtPlanListItem();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('ctaText')) {
                obj['ctaText'] = ApiClient.convertToType(data['ctaText'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('ees07PlanDescription')) {
                obj['ees07PlanDescription'] = ApiClient.convertToType(data['ees07PlanDescription'], 'String');
            }
            if (data.hasOwnProperty('ees07PlanTitle')) {
                obj['ees07PlanTitle'] = ApiClient.convertToType(data['ees07PlanTitle'], 'String');
            }
            if (data.hasOwnProperty('ees07Title')) {
                obj['ees07Title'] = ApiClient.convertToType(data['ees07Title'], 'String');
            }
            if (data.hasOwnProperty('headerText')) {
                obj['headerText'] = ApiClient.convertToType(data['headerText'], 'String');
            }
            if (data.hasOwnProperty('heroText')) {
                obj['heroText'] = ApiClient.convertToType(data['heroText'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('interval')) {
                obj['interval'] = ApiClient.convertToType(data['interval'], 'String');
            }
            if (data.hasOwnProperty('intervalCount')) {
                obj['intervalCount'] = ApiClient.convertToType(data['intervalCount'], 'Number');
            }
            if (data.hasOwnProperty('longText')) {
                obj['longText'] = ApiClient.convertToType(data['longText'], 'String');
            }
            if (data.hasOwnProperty('nickname')) {
                obj['nickname'] = ApiClient.convertToType(data['nickname'], 'String');
            }
            if (data.hasOwnProperty('noThanksText')) {
                obj['noThanksText'] = ApiClient.convertToType(data['noThanksText'], 'String');
            }
            if (data.hasOwnProperty('product')) {
                obj['product'] = ApiClient.convertToType(data['product'], 'String');
            }
            if (data.hasOwnProperty('switchingText')) {
                obj['switchingText'] = ApiClient.convertToType(data['switchingText'], 'String');
            }
            if (data.hasOwnProperty('termsAndConditionsItunes')) {
                obj['termsAndConditionsItunes'] = ApiClient.convertToType(data['termsAndConditionsItunes'], 'String');
            }
            if (data.hasOwnProperty('termsAndConditionsStripe')) {
                obj['termsAndConditionsStripe'] = ApiClient.convertToType(data['termsAndConditionsStripe'], 'String');
            }
            if (data.hasOwnProperty('trialPeriodDays')) {
                obj['trialPeriodDays'] = ApiClient.convertToType(data['trialPeriodDays'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BtPlanListItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BtPlanListItem</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BtPlanListItem.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ctaText'] && !(typeof data['ctaText'] === 'string' || data['ctaText'] instanceof String)) {
            throw new Error("Expected the field `ctaText` to be a primitive type in the JSON string but got " + data['ctaText']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['ees07PlanDescription'] && !(typeof data['ees07PlanDescription'] === 'string' || data['ees07PlanDescription'] instanceof String)) {
            throw new Error("Expected the field `ees07PlanDescription` to be a primitive type in the JSON string but got " + data['ees07PlanDescription']);
        }
        // ensure the json data is a string
        if (data['ees07PlanTitle'] && !(typeof data['ees07PlanTitle'] === 'string' || data['ees07PlanTitle'] instanceof String)) {
            throw new Error("Expected the field `ees07PlanTitle` to be a primitive type in the JSON string but got " + data['ees07PlanTitle']);
        }
        // ensure the json data is a string
        if (data['ees07Title'] && !(typeof data['ees07Title'] === 'string' || data['ees07Title'] instanceof String)) {
            throw new Error("Expected the field `ees07Title` to be a primitive type in the JSON string but got " + data['ees07Title']);
        }
        // ensure the json data is a string
        if (data['headerText'] && !(typeof data['headerText'] === 'string' || data['headerText'] instanceof String)) {
            throw new Error("Expected the field `headerText` to be a primitive type in the JSON string but got " + data['headerText']);
        }
        // ensure the json data is a string
        if (data['heroText'] && !(typeof data['heroText'] === 'string' || data['heroText'] instanceof String)) {
            throw new Error("Expected the field `heroText` to be a primitive type in the JSON string but got " + data['heroText']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['interval'] && !(typeof data['interval'] === 'string' || data['interval'] instanceof String)) {
            throw new Error("Expected the field `interval` to be a primitive type in the JSON string but got " + data['interval']);
        }
        // ensure the json data is a string
        if (data['longText'] && !(typeof data['longText'] === 'string' || data['longText'] instanceof String)) {
            throw new Error("Expected the field `longText` to be a primitive type in the JSON string but got " + data['longText']);
        }
        // ensure the json data is a string
        if (data['nickname'] && !(typeof data['nickname'] === 'string' || data['nickname'] instanceof String)) {
            throw new Error("Expected the field `nickname` to be a primitive type in the JSON string but got " + data['nickname']);
        }
        // ensure the json data is a string
        if (data['noThanksText'] && !(typeof data['noThanksText'] === 'string' || data['noThanksText'] instanceof String)) {
            throw new Error("Expected the field `noThanksText` to be a primitive type in the JSON string but got " + data['noThanksText']);
        }
        // ensure the json data is a string
        if (data['product'] && !(typeof data['product'] === 'string' || data['product'] instanceof String)) {
            throw new Error("Expected the field `product` to be a primitive type in the JSON string but got " + data['product']);
        }
        // ensure the json data is a string
        if (data['switchingText'] && !(typeof data['switchingText'] === 'string' || data['switchingText'] instanceof String)) {
            throw new Error("Expected the field `switchingText` to be a primitive type in the JSON string but got " + data['switchingText']);
        }
        // ensure the json data is a string
        if (data['termsAndConditionsItunes'] && !(typeof data['termsAndConditionsItunes'] === 'string' || data['termsAndConditionsItunes'] instanceof String)) {
            throw new Error("Expected the field `termsAndConditionsItunes` to be a primitive type in the JSON string but got " + data['termsAndConditionsItunes']);
        }
        // ensure the json data is a string
        if (data['termsAndConditionsStripe'] && !(typeof data['termsAndConditionsStripe'] === 'string' || data['termsAndConditionsStripe'] instanceof String)) {
            throw new Error("Expected the field `termsAndConditionsStripe` to be a primitive type in the JSON string but got " + data['termsAndConditionsStripe']);
        }

        return true;
    }


}

BtPlanListItem.RequiredProperties = ["ctaText", "currency", "description", "headerText", "heroText", "id", "longText", "nickname", "product", "trialPeriodDays"];

/**
 * The price of a plan. If a free plan then undefined.
 * @member {Number} amount
 */
BtPlanListItem.prototype['amount'] = undefined;

/**
 * The textual description.
 * @member {String} ctaText
 */
BtPlanListItem.prototype['ctaText'] = undefined;

/**
 * The currency a plan is offered in.
 * @member {String} currency
 */
BtPlanListItem.prototype['currency'] = undefined;

/**
 * The textual description.
 * @member {String} description
 */
BtPlanListItem.prototype['description'] = undefined;

/**
 * @member {String} ees07PlanDescription
 */
BtPlanListItem.prototype['ees07PlanDescription'] = undefined;

/**
 * @member {String} ees07PlanTitle
 */
BtPlanListItem.prototype['ees07PlanTitle'] = undefined;

/**
 * @member {String} ees07Title
 */
BtPlanListItem.prototype['ees07Title'] = undefined;

/**
 * The textual description.
 * @member {String} headerText
 */
BtPlanListItem.prototype['headerText'] = undefined;

/**
 * The textual description.
 * @member {String} heroText
 */
BtPlanListItem.prototype['heroText'] = undefined;

/**
 * The identifier of a plan.
 * @member {String} id
 */
BtPlanListItem.prototype['id'] = undefined;

/**
 * The type of billing period used.
 * @member {module:model/BtPlanListItem.IntervalEnum} interval
 */
BtPlanListItem.prototype['interval'] = undefined;

/**
 * Given the `interval` this is how frequently it will run. e.g. every 2 weeks.
 * @member {Number} intervalCount
 */
BtPlanListItem.prototype['intervalCount'] = undefined;

/**
 * The textual description.
 * @member {String} longText
 */
BtPlanListItem.prototype['longText'] = undefined;

/**
 * The title of a plan.
 * @member {String} nickname
 */
BtPlanListItem.prototype['nickname'] = undefined;

/**
 * @member {String} noThanksText
 */
BtPlanListItem.prototype['noThanksText'] = undefined;

/**
 * The product of a plan.
 * @member {String} product
 */
BtPlanListItem.prototype['product'] = undefined;

/**
 * @member {String} switchingText
 */
BtPlanListItem.prototype['switchingText'] = undefined;

/**
 * @member {String} termsAndConditionsItunes
 */
BtPlanListItem.prototype['termsAndConditionsItunes'] = undefined;

/**
 * @member {String} termsAndConditionsStripe
 */
BtPlanListItem.prototype['termsAndConditionsStripe'] = undefined;

/**
 * How many days a trial period runs for a plan. Only valid if `hasTrialPeriod` is true.
 * @member {Number} trialPeriodDays
 */
BtPlanListItem.prototype['trialPeriodDays'] = undefined;





/**
 * Allowed values for the <code>interval</code> property.
 * @enum {String}
 * @readonly
 */
BtPlanListItem['IntervalEnum'] = {

    /**
     * value: "day"
     * @const
     */
    "day": "day",

    /**
     * value: "week"
     * @const
     */
    "week": "week",

    /**
     * value: "month"
     * @const
     */
    "month": "month",

    /**
     * value: "year"
     * @const
     */
    "year": "year",

    /**
     * value: "none"
     * @const
     */
    "none": "none"
};



export default BtPlanListItem;

