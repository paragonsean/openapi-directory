/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ItvEntitlement model module.
 * @module model/ItvEntitlement
 * @version 3.730.300-ref-1-39-0
 */
class ItvEntitlement {
    /**
     * Constructs a new <code>ItvEntitlement</code>.
     * @alias module:model/ItvEntitlement
     * @param expiry {Date} Expiry of subscription.
     * @param plan {Object} Purchased plan data.
     * @param source {String} Source platform of purchase.
     * @param subscriptionId {String} Id of subscription.
     */
    constructor(expiry, plan, source, subscriptionId) { 
        
        ItvEntitlement.initialize(this, expiry, plan, source, subscriptionId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, expiry, plan, source, subscriptionId) { 
        obj['expiry'] = expiry;
        obj['plan'] = plan;
        obj['source'] = source;
        obj['subscriptionId'] = subscriptionId;
    }

    /**
     * Constructs a <code>ItvEntitlement</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ItvEntitlement} obj Optional instance to populate.
     * @return {module:model/ItvEntitlement} The populated <code>ItvEntitlement</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ItvEntitlement();

            if (data.hasOwnProperty('card_type')) {
                obj['card_type'] = ApiClient.convertToType(data['card_type'], 'Date');
            }
            if (data.hasOwnProperty('expiry')) {
                obj['expiry'] = ApiClient.convertToType(data['expiry'], 'Date');
            }
            if (data.hasOwnProperty('plan')) {
                obj['plan'] = ApiClient.convertToType(data['plan'], Object);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('subscriptionId')) {
                obj['subscriptionId'] = ApiClient.convertToType(data['subscriptionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ItvEntitlement</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ItvEntitlement</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ItvEntitlement.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['subscriptionId'] && !(typeof data['subscriptionId'] === 'string' || data['subscriptionId'] instanceof String)) {
            throw new Error("Expected the field `subscriptionId` to be a primitive type in the JSON string but got " + data['subscriptionId']);
        }

        return true;
    }


}

ItvEntitlement.RequiredProperties = ["expiry", "plan", "source", "subscriptionId"];

/**
 * Start of subscription.
 * @member {Date} card_type
 */
ItvEntitlement.prototype['card_type'] = undefined;

/**
 * Expiry of subscription.
 * @member {Date} expiry
 */
ItvEntitlement.prototype['expiry'] = undefined;

/**
 * Purchased plan data.
 * @member {Object} plan
 */
ItvEntitlement.prototype['plan'] = undefined;

/**
 * Source platform of purchase.
 * @member {String} source
 */
ItvEntitlement.prototype['source'] = undefined;

/**
 * Id of subscription.
 * @member {String} subscriptionId
 */
ItvEntitlement.prototype['subscriptionId'] = undefined;






export default ItvEntitlement;

