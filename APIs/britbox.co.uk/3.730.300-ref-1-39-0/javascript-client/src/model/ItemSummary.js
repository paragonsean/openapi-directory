/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClassificationSummary from './ClassificationSummary';
import Offer from './Offer';
import Theme from './Theme';

/**
 * The ItemSummary model module.
 * @module model/ItemSummary
 * @version 3.730.300-ref-1-39-0
 */
class ItemSummary {
    /**
     * Constructs a new <code>ItemSummary</code>.
     * @alias module:model/ItemSummary
     * @param id {String} Unique identifier for an Item
     * @param path {String} The path to the detail page of this item. Can be used to load the item detail page via the /page endpoint.
     * @param title {String} The display title of the item.
     * @param type {module:model/ItemSummary.TypeEnum} The type of item
     */
    constructor(id, path, title, type) { 
        
        ItemSummary.initialize(this, id, path, title, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, path, title, type) { 
        obj['id'] = id;
        obj['path'] = path;
        obj['title'] = title;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>ItemSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ItemSummary} obj Optional instance to populate.
     * @return {module:model/ItemSummary} The populated <code>ItemSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ItemSummary();

            if (data.hasOwnProperty('advisoryText')) {
                obj['advisoryText'] = ApiClient.convertToType(data['advisoryText'], 'String');
            }
            if (data.hasOwnProperty('availableEpisodeCount')) {
                obj['availableEpisodeCount'] = ApiClient.convertToType(data['availableEpisodeCount'], 'Number');
            }
            if (data.hasOwnProperty('availableSeasonCount')) {
                obj['availableSeasonCount'] = ApiClient.convertToType(data['availableSeasonCount'], 'Number');
            }
            if (data.hasOwnProperty('averageUserRating')) {
                obj['averageUserRating'] = ApiClient.convertToType(data['averageUserRating'], 'Number');
            }
            if (data.hasOwnProperty('badge')) {
                obj['badge'] = ApiClient.convertToType(data['badge'], 'String');
            }
            if (data.hasOwnProperty('channelShortCode')) {
                obj['channelShortCode'] = ApiClient.convertToType(data['channelShortCode'], 'String');
            }
            if (data.hasOwnProperty('classification')) {
                obj['classification'] = ClassificationSummary.constructFromObject(data['classification']);
            }
            if (data.hasOwnProperty('contextualTitle')) {
                obj['contextualTitle'] = ApiClient.convertToType(data['contextualTitle'], 'String');
            }
            if (data.hasOwnProperty('customFields')) {
                obj['customFields'] = ApiClient.convertToType(data['customFields'], {'String': Object});
            }
            if (data.hasOwnProperty('customId')) {
                obj['customId'] = ApiClient.convertToType(data['customId'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('episodeCount')) {
                obj['episodeCount'] = ApiClient.convertToType(data['episodeCount'], 'Number');
            }
            if (data.hasOwnProperty('episodeName')) {
                obj['episodeName'] = ApiClient.convertToType(data['episodeName'], 'String');
            }
            if (data.hasOwnProperty('episodeNumber')) {
                obj['episodeNumber'] = ApiClient.convertToType(data['episodeNumber'], 'Number');
            }
            if (data.hasOwnProperty('genres')) {
                obj['genres'] = ApiClient.convertToType(data['genres'], ['String']);
            }
            if (data.hasOwnProperty('hasClosedCaptions')) {
                obj['hasClosedCaptions'] = ApiClient.convertToType(data['hasClosedCaptions'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], {'String': 'String'});
            }
            if (data.hasOwnProperty('offers')) {
                obj['offers'] = ApiClient.convertToType(data['offers'], [Offer]);
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('releaseYear')) {
                obj['releaseYear'] = ApiClient.convertToType(data['releaseYear'], 'Number');
            }
            if (data.hasOwnProperty('scopes')) {
                obj['scopes'] = ApiClient.convertToType(data['scopes'], ['String']);
            }
            if (data.hasOwnProperty('seasonId')) {
                obj['seasonId'] = ApiClient.convertToType(data['seasonId'], 'String');
            }
            if (data.hasOwnProperty('seasonNumber')) {
                obj['seasonNumber'] = ApiClient.convertToType(data['seasonNumber'], 'Number');
            }
            if (data.hasOwnProperty('shortDescription')) {
                obj['shortDescription'] = ApiClient.convertToType(data['shortDescription'], 'String');
            }
            if (data.hasOwnProperty('showId')) {
                obj['showId'] = ApiClient.convertToType(data['showId'], 'String');
            }
            if (data.hasOwnProperty('showTitle')) {
                obj['showTitle'] = ApiClient.convertToType(data['showTitle'], 'String');
            }
            if (data.hasOwnProperty('subtype')) {
                obj['subtype'] = ApiClient.convertToType(data['subtype'], 'String');
            }
            if (data.hasOwnProperty('tagline')) {
                obj['tagline'] = ApiClient.convertToType(data['tagline'], 'String');
            }
            if (data.hasOwnProperty('themes')) {
                obj['themes'] = ApiClient.convertToType(data['themes'], [Theme]);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('watchPath')) {
                obj['watchPath'] = ApiClient.convertToType(data['watchPath'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ItemSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ItemSummary</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ItemSummary.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['advisoryText'] && !(typeof data['advisoryText'] === 'string' || data['advisoryText'] instanceof String)) {
            throw new Error("Expected the field `advisoryText` to be a primitive type in the JSON string but got " + data['advisoryText']);
        }
        // ensure the json data is a string
        if (data['badge'] && !(typeof data['badge'] === 'string' || data['badge'] instanceof String)) {
            throw new Error("Expected the field `badge` to be a primitive type in the JSON string but got " + data['badge']);
        }
        // ensure the json data is a string
        if (data['channelShortCode'] && !(typeof data['channelShortCode'] === 'string' || data['channelShortCode'] instanceof String)) {
            throw new Error("Expected the field `channelShortCode` to be a primitive type in the JSON string but got " + data['channelShortCode']);
        }
        // validate the optional field `classification`
        if (data['classification']) { // data not null
          ClassificationSummary.validateJSON(data['classification']);
        }
        // ensure the json data is a string
        if (data['contextualTitle'] && !(typeof data['contextualTitle'] === 'string' || data['contextualTitle'] instanceof String)) {
            throw new Error("Expected the field `contextualTitle` to be a primitive type in the JSON string but got " + data['contextualTitle']);
        }
        // ensure the json data is a string
        if (data['customId'] && !(typeof data['customId'] === 'string' || data['customId'] instanceof String)) {
            throw new Error("Expected the field `customId` to be a primitive type in the JSON string but got " + data['customId']);
        }
        // ensure the json data is a string
        if (data['episodeName'] && !(typeof data['episodeName'] === 'string' || data['episodeName'] instanceof String)) {
            throw new Error("Expected the field `episodeName` to be a primitive type in the JSON string but got " + data['episodeName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['genres'])) {
            throw new Error("Expected the field `genres` to be an array in the JSON data but got " + data['genres']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['offers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['offers'])) {
                throw new Error("Expected the field `offers` to be an array in the JSON data but got " + data['offers']);
            }
            // validate the optional field `offers` (array)
            for (const item of data['offers']) {
                Offer.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scopes'])) {
            throw new Error("Expected the field `scopes` to be an array in the JSON data but got " + data['scopes']);
        }
        // ensure the json data is a string
        if (data['seasonId'] && !(typeof data['seasonId'] === 'string' || data['seasonId'] instanceof String)) {
            throw new Error("Expected the field `seasonId` to be a primitive type in the JSON string but got " + data['seasonId']);
        }
        // ensure the json data is a string
        if (data['shortDescription'] && !(typeof data['shortDescription'] === 'string' || data['shortDescription'] instanceof String)) {
            throw new Error("Expected the field `shortDescription` to be a primitive type in the JSON string but got " + data['shortDescription']);
        }
        // ensure the json data is a string
        if (data['showId'] && !(typeof data['showId'] === 'string' || data['showId'] instanceof String)) {
            throw new Error("Expected the field `showId` to be a primitive type in the JSON string but got " + data['showId']);
        }
        // ensure the json data is a string
        if (data['showTitle'] && !(typeof data['showTitle'] === 'string' || data['showTitle'] instanceof String)) {
            throw new Error("Expected the field `showTitle` to be a primitive type in the JSON string but got " + data['showTitle']);
        }
        // ensure the json data is a string
        if (data['subtype'] && !(typeof data['subtype'] === 'string' || data['subtype'] instanceof String)) {
            throw new Error("Expected the field `subtype` to be a primitive type in the JSON string but got " + data['subtype']);
        }
        // ensure the json data is a string
        if (data['tagline'] && !(typeof data['tagline'] === 'string' || data['tagline'] instanceof String)) {
            throw new Error("Expected the field `tagline` to be a primitive type in the JSON string but got " + data['tagline']);
        }
        if (data['themes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['themes'])) {
                throw new Error("Expected the field `themes` to be an array in the JSON data but got " + data['themes']);
            }
            // validate the optional field `themes` (array)
            for (const item of data['themes']) {
                Theme.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['watchPath'] && !(typeof data['watchPath'] === 'string' || data['watchPath'] instanceof String)) {
            throw new Error("Expected the field `watchPath` to be a primitive type in the JSON string but got " + data['watchPath']);
        }

        return true;
    }


}

ItemSummary.RequiredProperties = ["id", "path", "title", "type"];

/**
 * Advisory text about this item, related to the classification
 * @member {String} advisoryText
 */
ItemSummary.prototype['advisoryText'] = undefined;

/**
 * The number of available episodes in the season, if the item is a season.
 * @member {Number} availableEpisodeCount
 */
ItemSummary.prototype['availableEpisodeCount'] = undefined;

/**
 * The number of available seasons in the show, if the item is a show.
 * @member {Number} availableSeasonCount
 */
ItemSummary.prototype['availableSeasonCount'] = undefined;

/**
 * The average user rating. When based on user ratings from our system this will be out of 10. 
 * @member {Number} averageUserRating
 */
ItemSummary.prototype['averageUserRating'] = undefined;

/**
 * The badge this item has.
 * @member {String} badge
 */
ItemSummary.prototype['badge'] = undefined;

/**
 * The channel short code, if the item is a channel.
 * @member {String} channelShortCode
 */
ItemSummary.prototype['channelShortCode'] = undefined;

/**
 * @member {module:model/ClassificationSummary} classification
 */
ItemSummary.prototype['classification'] = undefined;

/**
 * A contextually relative title to display after a parent title. Mostly applicable to Season, Episode and Trailer. 
 * @member {String} contextualTitle
 */
ItemSummary.prototype['contextualTitle'] = undefined;

/**
 * A map of custom fields defined by a curator for an item.
 * @member {Object.<String, Object>} customFields
 */
ItemSummary.prototype['customFields'] = undefined;

/**
 * A custom identifier for this item. For example the id for this item under a different content system. 
 * @member {String} customId
 */
ItemSummary.prototype['customId'] = undefined;

/**
 * The duration of the media in seconds.
 * @member {Number} duration
 */
ItemSummary.prototype['duration'] = undefined;

/**
 * The number of episodes in the season, if the item is a season.
 * @member {Number} episodeCount
 */
ItemSummary.prototype['episodeCount'] = undefined;

/**
 * The full name of an episode.
 * @member {String} episodeName
 */
ItemSummary.prototype['episodeName'] = undefined;

/**
 * The number of an episode, if the item is an episode.
 * @member {Number} episodeNumber
 */
ItemSummary.prototype['episodeNumber'] = undefined;

/**
 * The array of genres this item belongs to.
 * @member {Array.<String>} genres
 */
ItemSummary.prototype['genres'] = undefined;

/**
 * Whether closed captioning is available.
 * @member {Boolean} hasClosedCaptions
 */
ItemSummary.prototype['hasClosedCaptions'] = undefined;

/**
 * Unique identifier for an Item
 * @member {String} id
 */
ItemSummary.prototype['id'] = undefined;

/**
 * @member {Object.<String, String>} images
 */
ItemSummary.prototype['images'] = undefined;

/**
 * The array of available offers for this item.
 * @member {Array.<module:model/Offer>} offers
 */
ItemSummary.prototype['offers'] = undefined;

/**
 * The path to the detail page of this item. Can be used to load the item detail page via the /page endpoint.
 * @member {String} path
 */
ItemSummary.prototype['path'] = undefined;

/**
 * The year this item was released
 * @member {Number} releaseYear
 */
ItemSummary.prototype['releaseYear'] = undefined;

/**
 * The scopes for this item
 * @member {Array.<String>} scopes
 */
ItemSummary.prototype['scopes'] = undefined;

/**
 * The identifier of the season this item belongs to, if the item is an episode.
 * @member {String} seasonId
 */
ItemSummary.prototype['seasonId'] = undefined;

/**
 * The number of a season, if the item is a season.
 * @member {Number} seasonNumber
 */
ItemSummary.prototype['seasonNumber'] = undefined;

/**
 * A truncated description of the item
 * @member {String} shortDescription
 */
ItemSummary.prototype['shortDescription'] = undefined;

/**
 * The identifier of the show this item belongs to, if the item is a season or episode.
 * @member {String} showId
 */
ItemSummary.prototype['showId'] = undefined;

/**
 * @member {String} showTitle
 */
ItemSummary.prototype['showTitle'] = undefined;

/**
 * Subtype of the item. Mainly used to identify different types when `type` is `customAsset` 
 * @member {String} subtype
 */
ItemSummary.prototype['subtype'] = undefined;

/**
 * The tagline of the item
 * @member {String} tagline
 */
ItemSummary.prototype['tagline'] = undefined;

/**
 * Gets themes associated with the item
 * @member {Array.<module:model/Theme>} themes
 */
ItemSummary.prototype['themes'] = undefined;

/**
 * The display title of the item.
 * @member {String} title
 */
ItemSummary.prototype['title'] = undefined;

/**
 * The type of item
 * @member {module:model/ItemSummary.TypeEnum} type
 */
ItemSummary.prototype['type'] = undefined;

/**
 * The path to watch this item, if the item is a watchable type, e.g. a `movie`, `program` and `episode`.
 * @member {String} watchPath
 */
ItemSummary.prototype['watchPath'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ItemSummary['TypeEnum'] = {

    /**
     * value: "movie"
     * @const
     */
    "movie": "movie",

    /**
     * value: "show"
     * @const
     */
    "show": "show",

    /**
     * value: "season"
     * @const
     */
    "season": "season",

    /**
     * value: "episode"
     * @const
     */
    "episode": "episode",

    /**
     * value: "program"
     * @const
     */
    "program": "program",

    /**
     * value: "link"
     * @const
     */
    "link": "link",

    /**
     * value: "trailer"
     * @const
     */
    "trailer": "trailer",

    /**
     * value: "channel"
     * @const
     */
    "channel": "channel",

    /**
     * value: "customAsset"
     * @const
     */
    "customAsset": "customAsset"
};



export default ItemSummary;

