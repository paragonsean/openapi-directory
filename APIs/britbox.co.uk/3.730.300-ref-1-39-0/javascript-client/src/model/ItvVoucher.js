/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ItvVoucherDisplay from './ItvVoucherDisplay';
import ItvVoucherLinks from './ItvVoucherLinks';

/**
 * The ItvVoucher model module.
 * @module model/ItvVoucher
 * @version 3.730.300-ref-1-39-0
 */
class ItvVoucher {
    /**
     * Constructs a new <code>ItvVoucher</code>.
     * @alias module:model/ItvVoucher
     * @param display {module:model/ItvVoucherDisplay} 
     * @param id {String} The coupon/voucher.
     * @param links {module:model/ItvVoucherLinks} 
     * @param offerType {module:model/ItvVoucher.OfferTypeEnum} The voucher offer type.
     */
    constructor(display, id, links, offerType) { 
        
        ItvVoucher.initialize(this, display, id, links, offerType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, display, id, links, offerType) { 
        obj['display'] = display;
        obj['id'] = id;
        obj['links'] = links;
        obj['offerType'] = offerType;
    }

    /**
     * Constructs a <code>ItvVoucher</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ItvVoucher} obj Optional instance to populate.
     * @return {module:model/ItvVoucher} The populated <code>ItvVoucher</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ItvVoucher();

            if (data.hasOwnProperty('display')) {
                obj['display'] = ItvVoucherDisplay.constructFromObject(data['display']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ItvVoucherLinks.constructFromObject(data['links']);
            }
            if (data.hasOwnProperty('offerType')) {
                obj['offerType'] = ApiClient.convertToType(data['offerType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ItvVoucher</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ItvVoucher</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ItvVoucher.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['offerType'] && !(typeof data['offerType'] === 'string' || data['offerType'] instanceof String)) {
            throw new Error("Expected the field `offerType` to be a primitive type in the JSON string but got " + data['offerType']);
        }

        return true;
    }


}

ItvVoucher.RequiredProperties = ["display", "id", "links", "offerType"];

/**
 * @member {module:model/ItvVoucherDisplay} display
 */
ItvVoucher.prototype['display'] = undefined;

/**
 * The coupon/voucher.
 * @member {String} id
 */
ItvVoucher.prototype['id'] = undefined;

/**
 * @member {module:model/ItvVoucherLinks} links
 */
ItvVoucher.prototype['links'] = undefined;

/**
 * The voucher offer type.
 * @member {module:model/ItvVoucher.OfferTypeEnum} offerType
 */
ItvVoucher.prototype['offerType'] = undefined;





/**
 * Allowed values for the <code>offerType</code> property.
 * @enum {String}
 * @readonly
 */
ItvVoucher['OfferTypeEnum'] = {

    /**
     * value: "stripe"
     * @const
     */
    "stripe": "stripe",

    /**
     * value: "talon one"
     * @const
     */
    "talon one": "talon one"
};



export default ItvVoucher;

