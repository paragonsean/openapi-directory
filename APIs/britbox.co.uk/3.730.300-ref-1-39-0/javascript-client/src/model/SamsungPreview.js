/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SamsungPreviewSection from './SamsungPreviewSection';

/**
 * The SamsungPreview model module.
 * @module model/SamsungPreview
 * @version 3.730.300-ref-1-39-0
 */
class SamsungPreview {
    /**
     * Constructs a new <code>SamsungPreview</code>.
     * @alias module:model/SamsungPreview
     * @param sections {Array.<module:model/SamsungPreviewSection>} Preview sections
     */
    constructor(sections) { 
        
        SamsungPreview.initialize(this, sections);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sections) { 
        obj['expires_only'] = false;
        obj['sections'] = sections;
    }

    /**
     * Constructs a <code>SamsungPreview</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SamsungPreview} obj Optional instance to populate.
     * @return {module:model/SamsungPreview} The populated <code>SamsungPreview</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SamsungPreview();

            if (data.hasOwnProperty('expires')) {
                obj['expires'] = ApiClient.convertToType(data['expires'], 'Number');
            }
            if (data.hasOwnProperty('expires_only')) {
                obj['expires_only'] = ApiClient.convertToType(data['expires_only'], 'Boolean');
            }
            if (data.hasOwnProperty('sections')) {
                obj['sections'] = ApiClient.convertToType(data['sections'], [SamsungPreviewSection]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SamsungPreview</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SamsungPreview</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SamsungPreview.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['sections']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sections'])) {
                throw new Error("Expected the field `sections` to be an array in the JSON data but got " + data['sections']);
            }
            // validate the optional field `sections` (array)
            for (const item of data['sections']) {
                SamsungPreviewSection.validateJSON(item);
            };
        }

        return true;
    }


}

SamsungPreview.RequiredProperties = ["sections"];

/**
 * For public preview only If specified, the time at which the preview content is updated. The time is at most 1 week into the future. By default, the preview content is updated every 10 minutes, whenever the TV is switched on, or the JSON file changes. 
 * @member {Number} expires
 */
SamsungPreview.prototype['expires'] = undefined;

/**
 * For public preview only If this value is \"true\", the preview content is updated only at the time specified by the \"expires\" parameter. 
 * @member {Boolean} expires_only
 * @default false
 */
SamsungPreview.prototype['expires_only'] = false;

/**
 * Preview sections
 * @member {Array.<module:model/SamsungPreviewSection>} sections
 */
SamsungPreview.prototype['sections'] = undefined;






export default SamsungPreview;

