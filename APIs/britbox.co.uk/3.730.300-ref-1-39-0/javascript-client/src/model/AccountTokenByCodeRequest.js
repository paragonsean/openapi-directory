/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AccountTokenByCodeRequest model module.
 * @module model/AccountTokenByCodeRequest
 * @version 3.730.300-ref-1-39-0
 */
class AccountTokenByCodeRequest {
    /**
     * Constructs a new <code>AccountTokenByCodeRequest</code>.
     * @alias module:model/AccountTokenByCodeRequest
     * @param code {String} The generated device authorization code.
     * @param id {String} The unique identifier for the device e.g. serial number.
     * @param scopes {Array.<module:model/AccountTokenByCodeRequest.ScopesEnum>} The scope(s) of the token(s) required.
     */
    constructor(code, id, scopes) { 
        
        AccountTokenByCodeRequest.initialize(this, code, id, scopes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, code, id, scopes) { 
        obj['code'] = code;
        obj['id'] = id;
        obj['scopes'] = scopes;
    }

    /**
     * Constructs a <code>AccountTokenByCodeRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountTokenByCodeRequest} obj Optional instance to populate.
     * @return {module:model/AccountTokenByCodeRequest} The populated <code>AccountTokenByCodeRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountTokenByCodeRequest();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('scopes')) {
                obj['scopes'] = ApiClient.convertToType(data['scopes'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountTokenByCodeRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountTokenByCodeRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AccountTokenByCodeRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scopes'])) {
            throw new Error("Expected the field `scopes` to be an array in the JSON data but got " + data['scopes']);
        }

        return true;
    }


}

AccountTokenByCodeRequest.RequiredProperties = ["code", "id", "scopes"];

/**
 * The generated device authorization code.
 * @member {String} code
 */
AccountTokenByCodeRequest.prototype['code'] = undefined;

/**
 * The unique identifier for the device e.g. serial number.
 * @member {String} id
 */
AccountTokenByCodeRequest.prototype['id'] = undefined;

/**
 * The scope(s) of the token(s) required.
 * @member {Array.<module:model/AccountTokenByCodeRequest.ScopesEnum>} scopes
 */
AccountTokenByCodeRequest.prototype['scopes'] = undefined;





/**
 * Allowed values for the <code>scopes</code> property.
 * @enum {String}
 * @readonly
 */
AccountTokenByCodeRequest['ScopesEnum'] = {

    /**
     * value: "Catalog"
     * @const
     */
    "Catalog": "Catalog",

    /**
     * value: "Commerce"
     * @const
     */
    "Commerce": "Commerce",

    /**
     * value: "Settings"
     * @const
     */
    "Settings": "Settings",

    /**
     * value: "Playback"
     * @const
     */
    "Playback": "Playback"
};



export default AccountTokenByCodeRequest;

