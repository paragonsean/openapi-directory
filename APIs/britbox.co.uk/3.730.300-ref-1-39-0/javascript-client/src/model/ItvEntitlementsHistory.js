/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ItvEntitlement from './ItvEntitlement';
import ItvEntitlementCancelation from './ItvEntitlementCancelation';

/**
 * The ItvEntitlementsHistory model module.
 * @module model/ItvEntitlementsHistory
 * @version 3.730.300-ref-1-39-0
 */
class ItvEntitlementsHistory {
    /**
     * Constructs a new <code>ItvEntitlementsHistory</code>.
     * @alias module:model/ItvEntitlementsHistory
     * @param cancellations {Array.<module:model/ItvEntitlementCancelation>} The results of availability checks.
     * @param entitlements {Array.<module:model/ItvEntitlement>} The results of availability checks.
     */
    constructor(cancellations, entitlements) { 
        
        ItvEntitlementsHistory.initialize(this, cancellations, entitlements);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cancellations, entitlements) { 
        obj['cancellations'] = cancellations;
        obj['entitlements'] = entitlements;
    }

    /**
     * Constructs a <code>ItvEntitlementsHistory</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ItvEntitlementsHistory} obj Optional instance to populate.
     * @return {module:model/ItvEntitlementsHistory} The populated <code>ItvEntitlementsHistory</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ItvEntitlementsHistory();

            if (data.hasOwnProperty('cancellations')) {
                obj['cancellations'] = ApiClient.convertToType(data['cancellations'], [ItvEntitlementCancelation]);
            }
            if (data.hasOwnProperty('entitlements')) {
                obj['entitlements'] = ApiClient.convertToType(data['entitlements'], [ItvEntitlement]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ItvEntitlementsHistory</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ItvEntitlementsHistory</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ItvEntitlementsHistory.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['cancellations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cancellations'])) {
                throw new Error("Expected the field `cancellations` to be an array in the JSON data but got " + data['cancellations']);
            }
            // validate the optional field `cancellations` (array)
            for (const item of data['cancellations']) {
                ItvEntitlementCancelation.validateJSON(item);
            };
        }
        if (data['entitlements']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['entitlements'])) {
                throw new Error("Expected the field `entitlements` to be an array in the JSON data but got " + data['entitlements']);
            }
            // validate the optional field `entitlements` (array)
            for (const item of data['entitlements']) {
                ItvEntitlement.validateJSON(item);
            };
        }

        return true;
    }


}

ItvEntitlementsHistory.RequiredProperties = ["cancellations", "entitlements"];

/**
 * The results of availability checks.
 * @member {Array.<module:model/ItvEntitlementCancelation>} cancellations
 */
ItvEntitlementsHistory.prototype['cancellations'] = undefined;

/**
 * The results of availability checks.
 * @member {Array.<module:model/ItvEntitlement>} entitlements
 */
ItvEntitlementsHistory.prototype['entitlements'] = undefined;






export default ItvEntitlementsHistory;

