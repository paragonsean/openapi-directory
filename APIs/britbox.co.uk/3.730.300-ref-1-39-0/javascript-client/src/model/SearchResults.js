/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ItemList from './ItemList';
import Person from './Person';

/**
 * The SearchResults model module.
 * @module model/SearchResults
 * @version 3.730.300-ref-1-39-0
 */
class SearchResults {
    /**
     * Constructs a new <code>SearchResults</code>.
     * @alias module:model/SearchResults
     * @param term {String} The search term.
     * @param total {Number} The total number of results.
     */
    constructor(term, total) { 
        
        SearchResults.initialize(this, term, total);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, term, total) { 
        obj['term'] = term;
        obj['total'] = total;
    }

    /**
     * Constructs a <code>SearchResults</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchResults} obj Optional instance to populate.
     * @return {module:model/SearchResults} The populated <code>SearchResults</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchResults();

            if (data.hasOwnProperty('items')) {
                obj['items'] = ItemList.constructFromObject(data['items']);
            }
            if (data.hasOwnProperty('movies')) {
                obj['movies'] = ItemList.constructFromObject(data['movies']);
            }
            if (data.hasOwnProperty('other')) {
                obj['other'] = ItemList.constructFromObject(data['other']);
            }
            if (data.hasOwnProperty('people')) {
                obj['people'] = ApiClient.convertToType(data['people'], [Person]);
            }
            if (data.hasOwnProperty('term')) {
                obj['term'] = ApiClient.convertToType(data['term'], 'String');
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
            if (data.hasOwnProperty('tv')) {
                obj['tv'] = ItemList.constructFromObject(data['tv']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchResults</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchResults</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SearchResults.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `items`
        if (data['items']) { // data not null
          ItemList.validateJSON(data['items']);
        }
        // validate the optional field `movies`
        if (data['movies']) { // data not null
          ItemList.validateJSON(data['movies']);
        }
        // validate the optional field `other`
        if (data['other']) { // data not null
          ItemList.validateJSON(data['other']);
        }
        if (data['people']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['people'])) {
                throw new Error("Expected the field `people` to be an array in the JSON data but got " + data['people']);
            }
            // validate the optional field `people` (array)
            for (const item of data['people']) {
                Person.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['term'] && !(typeof data['term'] === 'string' || data['term'] instanceof String)) {
            throw new Error("Expected the field `term` to be a primitive type in the JSON string but got " + data['term']);
        }
        // validate the optional field `tv`
        if (data['tv']) { // data not null
          ItemList.validateJSON(data['tv']);
        }

        return true;
    }


}

SearchResults.RequiredProperties = ["term", "total"];

/**
 * @member {module:model/ItemList} items
 */
SearchResults.prototype['items'] = undefined;

/**
 * @member {module:model/ItemList} movies
 */
SearchResults.prototype['movies'] = undefined;

/**
 * @member {module:model/ItemList} other
 */
SearchResults.prototype['other'] = undefined;

/**
 * The list of people relevant to the search term.
 * @member {Array.<module:model/Person>} people
 */
SearchResults.prototype['people'] = undefined;

/**
 * The search term.
 * @member {String} term
 */
SearchResults.prototype['term'] = undefined;

/**
 * The total number of results.
 * @member {Number} total
 */
SearchResults.prototype['total'] = undefined;

/**
 * @member {module:model/ItemList} tv
 */
SearchResults.prototype['tv'] = undefined;






export default SearchResults;

