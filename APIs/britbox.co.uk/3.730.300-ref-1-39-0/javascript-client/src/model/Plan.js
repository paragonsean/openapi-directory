/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Plan model module.
 * @module model/Plan
 * @version 3.730.300-ref-1-39-0
 */
class Plan {
    /**
     * Constructs a new <code>Plan</code>.
     * @alias module:model/Plan
     * @param alias {String} An alias for a plan.
     * @param benefits {Array.<String>} The list of benefits to display for a plan.
     * @param billingPeriodFrequency {Number} Given the `billingPeriodType` this is how frequently it will run. e.g. every 2 weeks.
     * @param billingPeriodType {module:model/Plan.BillingPeriodTypeEnum} The type of billing period used.
     * @param currency {String} The currency a plan is offered in.
     * @param hasTrialPeriod {Boolean} True if a plan has a trial period, false if not.
     * @param id {String} The identifier of a plan.
     * @param isActive {Boolean} True if a plan is active, false if its retired.
     * @param isFeatured {Boolean} True if a plan should be highlighted as featured, false if not.
     * @param isPrivate {Boolean} True if a plan should not be presented in the primary plan options, false if not.
     * @param revenueType {module:model/Plan.RevenueTypeEnum} The revenue type a plan targets.
     * @param subscriptionCode {String} The subscription code a plan targets.
     * @param tagline {String} The short tagline for a plan.
     * @param termsAndConditions {String} The terms and conditions for a plan.
     * @param title {String} The title of a plan.
     * @param trialPeriodDays {Number} How many days a trial period runs for a plan. Only valid if `hasTrialPeriod` is true.
     * @param type {module:model/Plan.TypeEnum} The type of plan.
     */
    constructor(alias, benefits, billingPeriodFrequency, billingPeriodType, currency, hasTrialPeriod, id, isActive, isFeatured, isPrivate, revenueType, subscriptionCode, tagline, termsAndConditions, title, trialPeriodDays, type) { 
        
        Plan.initialize(this, alias, benefits, billingPeriodFrequency, billingPeriodType, currency, hasTrialPeriod, id, isActive, isFeatured, isPrivate, revenueType, subscriptionCode, tagline, termsAndConditions, title, trialPeriodDays, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, alias, benefits, billingPeriodFrequency, billingPeriodType, currency, hasTrialPeriod, id, isActive, isFeatured, isPrivate, revenueType, subscriptionCode, tagline, termsAndConditions, title, trialPeriodDays, type) { 
        obj['alias'] = alias;
        obj['benefits'] = benefits;
        obj['billingPeriodFrequency'] = billingPeriodFrequency;
        obj['billingPeriodType'] = billingPeriodType;
        obj['currency'] = currency;
        obj['hasTrialPeriod'] = hasTrialPeriod;
        obj['id'] = id;
        obj['isActive'] = isActive;
        obj['isFeatured'] = isFeatured;
        obj['isPrivate'] = isPrivate;
        obj['revenueType'] = revenueType;
        obj['subscriptionCode'] = subscriptionCode;
        obj['tagline'] = tagline;
        obj['termsAndConditions'] = termsAndConditions;
        obj['title'] = title;
        obj['trialPeriodDays'] = trialPeriodDays;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Plan</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Plan} obj Optional instance to populate.
     * @return {module:model/Plan} The populated <code>Plan</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Plan();

            if (data.hasOwnProperty('alias')) {
                obj['alias'] = ApiClient.convertToType(data['alias'], 'String');
            }
            if (data.hasOwnProperty('benefits')) {
                obj['benefits'] = ApiClient.convertToType(data['benefits'], ['String']);
            }
            if (data.hasOwnProperty('billingPeriodFrequency')) {
                obj['billingPeriodFrequency'] = ApiClient.convertToType(data['billingPeriodFrequency'], 'Number');
            }
            if (data.hasOwnProperty('billingPeriodType')) {
                obj['billingPeriodType'] = ApiClient.convertToType(data['billingPeriodType'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('customFields')) {
                obj['customFields'] = ApiClient.convertToType(data['customFields'], {'String': Object});
            }
            if (data.hasOwnProperty('hasTrialPeriod')) {
                obj['hasTrialPeriod'] = ApiClient.convertToType(data['hasTrialPeriod'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isActive')) {
                obj['isActive'] = ApiClient.convertToType(data['isActive'], 'Boolean');
            }
            if (data.hasOwnProperty('isFeatured')) {
                obj['isFeatured'] = ApiClient.convertToType(data['isFeatured'], 'Boolean');
            }
            if (data.hasOwnProperty('isPrivate')) {
                obj['isPrivate'] = ApiClient.convertToType(data['isPrivate'], 'Boolean');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('revenueType')) {
                obj['revenueType'] = ApiClient.convertToType(data['revenueType'], 'String');
            }
            if (data.hasOwnProperty('subscriptionCode')) {
                obj['subscriptionCode'] = ApiClient.convertToType(data['subscriptionCode'], 'String');
            }
            if (data.hasOwnProperty('tagline')) {
                obj['tagline'] = ApiClient.convertToType(data['tagline'], 'String');
            }
            if (data.hasOwnProperty('termsAndConditions')) {
                obj['termsAndConditions'] = ApiClient.convertToType(data['termsAndConditions'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('trialPeriodDays')) {
                obj['trialPeriodDays'] = ApiClient.convertToType(data['trialPeriodDays'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Plan</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Plan</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Plan.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['alias'] && !(typeof data['alias'] === 'string' || data['alias'] instanceof String)) {
            throw new Error("Expected the field `alias` to be a primitive type in the JSON string but got " + data['alias']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['benefits'])) {
            throw new Error("Expected the field `benefits` to be an array in the JSON data but got " + data['benefits']);
        }
        // ensure the json data is a string
        if (data['billingPeriodType'] && !(typeof data['billingPeriodType'] === 'string' || data['billingPeriodType'] instanceof String)) {
            throw new Error("Expected the field `billingPeriodType` to be a primitive type in the JSON string but got " + data['billingPeriodType']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['revenueType'] && !(typeof data['revenueType'] === 'string' || data['revenueType'] instanceof String)) {
            throw new Error("Expected the field `revenueType` to be a primitive type in the JSON string but got " + data['revenueType']);
        }
        // ensure the json data is a string
        if (data['subscriptionCode'] && !(typeof data['subscriptionCode'] === 'string' || data['subscriptionCode'] instanceof String)) {
            throw new Error("Expected the field `subscriptionCode` to be a primitive type in the JSON string but got " + data['subscriptionCode']);
        }
        // ensure the json data is a string
        if (data['tagline'] && !(typeof data['tagline'] === 'string' || data['tagline'] instanceof String)) {
            throw new Error("Expected the field `tagline` to be a primitive type in the JSON string but got " + data['tagline']);
        }
        // ensure the json data is a string
        if (data['termsAndConditions'] && !(typeof data['termsAndConditions'] === 'string' || data['termsAndConditions'] instanceof String)) {
            throw new Error("Expected the field `termsAndConditions` to be a primitive type in the JSON string but got " + data['termsAndConditions']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Plan.RequiredProperties = ["alias", "benefits", "billingPeriodFrequency", "billingPeriodType", "currency", "hasTrialPeriod", "id", "isActive", "isFeatured", "isPrivate", "revenueType", "subscriptionCode", "tagline", "termsAndConditions", "title", "trialPeriodDays", "type"];

/**
 * An alias for a plan.
 * @member {String} alias
 */
Plan.prototype['alias'] = undefined;

/**
 * The list of benefits to display for a plan.
 * @member {Array.<String>} benefits
 */
Plan.prototype['benefits'] = undefined;

/**
 * Given the `billingPeriodType` this is how frequently it will run. e.g. every 2 weeks.
 * @member {Number} billingPeriodFrequency
 */
Plan.prototype['billingPeriodFrequency'] = undefined;

/**
 * The type of billing period used.
 * @member {module:model/Plan.BillingPeriodTypeEnum} billingPeriodType
 */
Plan.prototype['billingPeriodType'] = undefined;

/**
 * The currency a plan is offered in.
 * @member {String} currency
 */
Plan.prototype['currency'] = undefined;

/**
 * A map of custom fields defined by a curator for a plan.
 * @member {Object.<String, Object>} customFields
 */
Plan.prototype['customFields'] = undefined;

/**
 * True if a plan has a trial period, false if not.
 * @member {Boolean} hasTrialPeriod
 */
Plan.prototype['hasTrialPeriod'] = undefined;

/**
 * The identifier of a plan.
 * @member {String} id
 */
Plan.prototype['id'] = undefined;

/**
 * True if a plan is active, false if its retired.
 * @member {Boolean} isActive
 */
Plan.prototype['isActive'] = undefined;

/**
 * True if a plan should be highlighted as featured, false if not.
 * @member {Boolean} isFeatured
 */
Plan.prototype['isFeatured'] = undefined;

/**
 * True if a plan should not be presented in the primary plan options, false if not.
 * @member {Boolean} isPrivate
 */
Plan.prototype['isPrivate'] = undefined;

/**
 * The price of a plan. If a free plan then undefined.
 * @member {Number} price
 */
Plan.prototype['price'] = undefined;

/**
 * The revenue type a plan targets.
 * @member {module:model/Plan.RevenueTypeEnum} revenueType
 */
Plan.prototype['revenueType'] = undefined;

/**
 * The subscription code a plan targets.
 * @member {String} subscriptionCode
 */
Plan.prototype['subscriptionCode'] = undefined;

/**
 * The short tagline for a plan.
 * @member {String} tagline
 */
Plan.prototype['tagline'] = undefined;

/**
 * The terms and conditions for a plan.
 * @member {String} termsAndConditions
 */
Plan.prototype['termsAndConditions'] = undefined;

/**
 * The title of a plan.
 * @member {String} title
 */
Plan.prototype['title'] = undefined;

/**
 * How many days a trial period runs for a plan. Only valid if `hasTrialPeriod` is true.
 * @member {Number} trialPeriodDays
 */
Plan.prototype['trialPeriodDays'] = undefined;

/**
 * The type of plan.
 * @member {module:model/Plan.TypeEnum} type
 */
Plan.prototype['type'] = undefined;





/**
 * Allowed values for the <code>billingPeriodType</code> property.
 * @enum {String}
 * @readonly
 */
Plan['BillingPeriodTypeEnum'] = {

    /**
     * value: "day"
     * @const
     */
    "day": "day",

    /**
     * value: "week"
     * @const
     */
    "week": "week",

    /**
     * value: "month"
     * @const
     */
    "month": "month",

    /**
     * value: "year"
     * @const
     */
    "year": "year",

    /**
     * value: "none"
     * @const
     */
    "none": "none"
};


/**
 * Allowed values for the <code>revenueType</code> property.
 * @enum {String}
 * @readonly
 */
Plan['RevenueTypeEnum'] = {

    /**
     * value: "TVOD"
     * @const
     */
    "TVOD": "TVOD",

    /**
     * value: "SVOD"
     * @const
     */
    "SVOD": "SVOD"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Plan['TypeEnum'] = {

    /**
     * value: "Free"
     * @const
     */
    "Free": "Free",

    /**
     * value: "Subscription"
     * @const
     */
    "Subscription": "Subscription"
};



export default Plan;

