/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ItemDetail from './ItemDetail';

/**
 * The NextPlaybackItem model module.
 * @module model/NextPlaybackItem
 * @version 3.730.300-ref-1-39-0
 */
class NextPlaybackItem {
    /**
     * Constructs a new <code>NextPlaybackItem</code>.
     * @alias module:model/NextPlaybackItem
     * @param sourceItemId {String} The id of the item used to determine the next item to play.
     */
    constructor(sourceItemId) { 
        
        NextPlaybackItem.initialize(this, sourceItemId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sourceItemId) { 
        obj['sourceItemId'] = sourceItemId;
    }

    /**
     * Constructs a <code>NextPlaybackItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NextPlaybackItem} obj Optional instance to populate.
     * @return {module:model/NextPlaybackItem} The populated <code>NextPlaybackItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NextPlaybackItem();

            if (data.hasOwnProperty('firstWatchedDate')) {
                obj['firstWatchedDate'] = ApiClient.convertToType(data['firstWatchedDate'], 'Date');
            }
            if (data.hasOwnProperty('lastWatchedDate')) {
                obj['lastWatchedDate'] = ApiClient.convertToType(data['lastWatchedDate'], 'Date');
            }
            if (data.hasOwnProperty('next')) {
                obj['next'] = ItemDetail.constructFromObject(data['next']);
            }
            if (data.hasOwnProperty('sourceItemId')) {
                obj['sourceItemId'] = ApiClient.convertToType(data['sourceItemId'], 'String');
            }
            if (data.hasOwnProperty('suggestionType')) {
                obj['suggestionType'] = ApiClient.convertToType(data['suggestionType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NextPlaybackItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NextPlaybackItem</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NextPlaybackItem.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `next`
        if (data['next']) { // data not null
          ItemDetail.validateJSON(data['next']);
        }
        // ensure the json data is a string
        if (data['sourceItemId'] && !(typeof data['sourceItemId'] === 'string' || data['sourceItemId'] instanceof String)) {
            throw new Error("Expected the field `sourceItemId` to be a primitive type in the JSON string but got " + data['sourceItemId']);
        }
        // ensure the json data is a string
        if (data['suggestionType'] && !(typeof data['suggestionType'] === 'string' || data['suggestionType'] instanceof String)) {
            throw new Error("Expected the field `suggestionType` to be a primitive type in the JSON string but got " + data['suggestionType']);
        }

        return true;
    }


}

NextPlaybackItem.RequiredProperties = ["sourceItemId"];

/**
 * Time when the item corresponding to the itemId passed in by the client was first watched by the user. Will be `undefined` if the user has never watched the item.  It can be used to identify the scenario where the user has never watched a show and we are suggesting they watch the first episode (i.e. it is missing in this scenario)  **This will only be populated when a `showId` is passed in** 
 * @member {Date} firstWatchedDate
 */
NextPlaybackItem.prototype['firstWatchedDate'] = undefined;

/**
 * Time when the item corresponding to the itemId passed in by the client was last watched by the user. Will be `undefined` if the user has never watched the item.  It can be used to identify the scenario where the user has never watched a show and we are suggesting they watch the first episode (i.e. it is missing in this scenario)  **This will only be populated when a `showId` is passed in** 
 * @member {Date} lastWatchedDate
 */
NextPlaybackItem.prototype['lastWatchedDate'] = undefined;

/**
 * @member {module:model/ItemDetail} next
 */
NextPlaybackItem.prototype['next'] = undefined;

/**
 * The id of the item used to determine the next item to play.
 * @member {String} sourceItemId
 */
NextPlaybackItem.prototype['sourceItemId'] = undefined;

/**
 * Field indicating the type or reason behind the suggestion.  Id Type   | Show Watched Status| Value            | Description ----------|--------------------|------------------|--------------------------------- showId    | Unwatched          | StartWatching    | showId    | Completely watched | RestartWatching  | showId    | Partly watched     | ContinueWatching | Suggested episode partly watched showId    | Partly watched     | Sequential       | Suggested episode unwatched episodeId | Any                | Sequential       | Next episode in show 
 * @member {module:model/NextPlaybackItem.SuggestionTypeEnum} suggestionType
 */
NextPlaybackItem.prototype['suggestionType'] = undefined;





/**
 * Allowed values for the <code>suggestionType</code> property.
 * @enum {String}
 * @readonly
 */
NextPlaybackItem['SuggestionTypeEnum'] = {

    /**
     * value: "StartWatching"
     * @const
     */
    "StartWatching": "StartWatching",

    /**
     * value: "ContinueWatching"
     * @const
     */
    "ContinueWatching": "ContinueWatching",

    /**
     * value: "RestartWatching"
     * @const
     */
    "RestartWatching": "RestartWatching",

    /**
     * value: "Sequential"
     * @const
     */
    "Sequential": "Sequential",

    /**
     * value: "None"
     * @const
     */
    "None": "None"
};



export default NextPlaybackItem;

