/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ItvEntitlement from './ItvEntitlement';

/**
 * The ItvSubscriptionState model module.
 * @module model/ItvSubscriptionState
 * @version 3.730.300-ref-1-39-0
 */
class ItvSubscriptionState {
    /**
     * Constructs a new <code>ItvSubscriptionState</code>.
     * @alias module:model/ItvSubscriptionState
     * @param effectiveEntitlements {Array.<module:model/ItvEntitlement>} The array of entitlement objects.
     * @param failedAvailabilityChecks {Array.<String>} The results of availability checks.
     * @param purchased {Array.<String>} The array of entitlement names.
     * @param source {String} The payment provider (stripe/itunes)
     */
    constructor(effectiveEntitlements, failedAvailabilityChecks, purchased, source) { 
        
        ItvSubscriptionState.initialize(this, effectiveEntitlements, failedAvailabilityChecks, purchased, source);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, effectiveEntitlements, failedAvailabilityChecks, purchased, source) { 
        obj['effective_entitlements'] = effectiveEntitlements;
        obj['failed_availability_checks'] = failedAvailabilityChecks;
        obj['purchased'] = purchased;
        obj['source'] = source;
    }

    /**
     * Constructs a <code>ItvSubscriptionState</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ItvSubscriptionState} obj Optional instance to populate.
     * @return {module:model/ItvSubscriptionState} The populated <code>ItvSubscriptionState</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ItvSubscriptionState();

            if (data.hasOwnProperty('effective_entitlements')) {
                obj['effective_entitlements'] = ApiClient.convertToType(data['effective_entitlements'], [ItvEntitlement]);
            }
            if (data.hasOwnProperty('failed_availability_checks')) {
                obj['failed_availability_checks'] = ApiClient.convertToType(data['failed_availability_checks'], ['String']);
            }
            if (data.hasOwnProperty('purchased')) {
                obj['purchased'] = ApiClient.convertToType(data['purchased'], ['String']);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ItvSubscriptionState</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ItvSubscriptionState</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ItvSubscriptionState.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['effective_entitlements']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['effective_entitlements'])) {
                throw new Error("Expected the field `effective_entitlements` to be an array in the JSON data but got " + data['effective_entitlements']);
            }
            // validate the optional field `effective_entitlements` (array)
            for (const item of data['effective_entitlements']) {
                ItvEntitlement.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['failed_availability_checks'])) {
            throw new Error("Expected the field `failed_availability_checks` to be an array in the JSON data but got " + data['failed_availability_checks']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['purchased'])) {
            throw new Error("Expected the field `purchased` to be an array in the JSON data but got " + data['purchased']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }

        return true;
    }


}

ItvSubscriptionState.RequiredProperties = ["effective_entitlements", "failed_availability_checks", "purchased", "source"];

/**
 * The array of entitlement objects.
 * @member {Array.<module:model/ItvEntitlement>} effective_entitlements
 */
ItvSubscriptionState.prototype['effective_entitlements'] = undefined;

/**
 * The results of availability checks.
 * @member {Array.<String>} failed_availability_checks
 */
ItvSubscriptionState.prototype['failed_availability_checks'] = undefined;

/**
 * The array of entitlement names.
 * @member {Array.<String>} purchased
 */
ItvSubscriptionState.prototype['purchased'] = undefined;

/**
 * The payment provider (stripe/itunes)
 * @member {String} source
 */
ItvSubscriptionState.prototype['source'] = undefined;






export default ItvSubscriptionState;

