/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ItemSummary from './ItemSummary';
import ListData from './ListData';
import Pagination from './Pagination';
import Theme from './Theme';

/**
 * The ItemList model module.
 * @module model/ItemList
 * @version 3.730.300-ref-1-39-0
 */
class ItemList {
    /**
     * Constructs a new <code>ItemList</code>.
     * A pageable list of items.
     * @alias module:model/ItemList
     * @param id {String} The id of this list
     * @param items {Array.<module:model/ItemSummary>} A list of items
     * @param paging {module:model/Pagination} 
     * @param path {String} The path of this list
     * @param size {Number} The total size of the list
     */
    constructor(id, items, paging, path, size) { 
        
        ItemList.initialize(this, id, items, paging, path, size);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, items, paging, path, size) { 
        obj['id'] = id;
        obj['items'] = items;
        obj['paging'] = paging;
        obj['path'] = path;
        obj['size'] = size;
    }

    /**
     * Constructs a <code>ItemList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ItemList} obj Optional instance to populate.
     * @return {module:model/ItemList} The populated <code>ItemList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ItemList();

            if (data.hasOwnProperty('customFields')) {
                obj['customFields'] = ApiClient.convertToType(data['customFields'], {'String': Object});
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], {'String': 'String'});
            }
            if (data.hasOwnProperty('itemTypes')) {
                obj['itemTypes'] = ApiClient.convertToType(data['itemTypes'], ['String']);
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [ItemSummary]);
            }
            if (data.hasOwnProperty('listData')) {
                obj['listData'] = ListData.constructFromObject(data['listData']);
            }
            if (data.hasOwnProperty('paging')) {
                obj['paging'] = Pagination.constructFromObject(data['paging']);
            }
            if (data.hasOwnProperty('parameter')) {
                obj['parameter'] = ApiClient.convertToType(data['parameter'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('shortDescription')) {
                obj['shortDescription'] = ApiClient.convertToType(data['shortDescription'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('tagline')) {
                obj['tagline'] = ApiClient.convertToType(data['tagline'], 'String');
            }
            if (data.hasOwnProperty('themes')) {
                obj['themes'] = ApiClient.convertToType(data['themes'], [Theme]);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ItemList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ItemList</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ItemList.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['itemTypes'])) {
            throw new Error("Expected the field `itemTypes` to be an array in the JSON data but got " + data['itemTypes']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                ItemSummary.validateJSON(item);
            };
        }
        // validate the optional field `listData`
        if (data['listData']) { // data not null
          ListData.validateJSON(data['listData']);
        }
        // validate the optional field `paging`
        if (data['paging']) { // data not null
          Pagination.validateJSON(data['paging']);
        }
        // ensure the json data is a string
        if (data['parameter'] && !(typeof data['parameter'] === 'string' || data['parameter'] instanceof String)) {
            throw new Error("Expected the field `parameter` to be a primitive type in the JSON string but got " + data['parameter']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['shortDescription'] && !(typeof data['shortDescription'] === 'string' || data['shortDescription'] instanceof String)) {
            throw new Error("Expected the field `shortDescription` to be a primitive type in the JSON string but got " + data['shortDescription']);
        }
        // ensure the json data is a string
        if (data['tagline'] && !(typeof data['tagline'] === 'string' || data['tagline'] instanceof String)) {
            throw new Error("Expected the field `tagline` to be a primitive type in the JSON string but got " + data['tagline']);
        }
        if (data['themes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['themes'])) {
                throw new Error("Expected the field `themes` to be an array in the JSON data but got " + data['themes']);
            }
            // validate the optional field `themes` (array)
            for (const item of data['themes']) {
                Theme.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

ItemList.RequiredProperties = ["id", "items", "paging", "path", "size"];

/**
 * A map of custom fields defined by a curator for a list.
 * @member {Object.<String, Object>} customFields
 */
ItemList.prototype['customFields'] = undefined;

/**
 * A full description of this list.
 * @member {String} description
 */
ItemList.prototype['description'] = undefined;

/**
 * The id of this list
 * @member {String} id
 */
ItemList.prototype['id'] = undefined;

/**
 * @member {Object.<String, String>} images
 */
ItemList.prototype['images'] = undefined;

/**
 * The types of items in the list
 * @member {Array.<module:model/ItemList.ItemTypesEnum>} itemTypes
 */
ItemList.prototype['itemTypes'] = undefined;

/**
 * A list of items
 * @member {Array.<module:model/ItemSummary>} items
 */
ItemList.prototype['items'] = undefined;

/**
 * @member {module:model/ListData} listData
 */
ItemList.prototype['listData'] = undefined;

/**
 * @member {module:model/Pagination} paging
 */
ItemList.prototype['paging'] = undefined;

/**
 * If this list is parameterized, then this contains the parameter of the list in the format `name:value`. For example the Movies Genre list will take a parameter `genre` with a given value. e.g. `genre:action` or `genre:drama`.
 * @member {String} parameter
 */
ItemList.prototype['parameter'] = undefined;

/**
 * The path of this list
 * @member {String} path
 */
ItemList.prototype['path'] = undefined;

/**
 * A short description of this list.
 * @member {String} shortDescription
 */
ItemList.prototype['shortDescription'] = undefined;

/**
 * The total size of the list
 * @member {Number} size
 */
ItemList.prototype['size'] = undefined;

/**
 * The tagline of the item.
 * @member {String} tagline
 */
ItemList.prototype['tagline'] = undefined;

/**
 * @member {Array.<module:model/Theme>} themes
 */
ItemList.prototype['themes'] = undefined;

/**
 * The title of this list
 * @member {String} title
 */
ItemList.prototype['title'] = undefined;





/**
 * Allowed values for the <code>itemTypes</code> property.
 * @enum {String}
 * @readonly
 */
ItemList['ItemTypesEnum'] = {

    /**
     * value: "movie"
     * @const
     */
    "movie": "movie",

    /**
     * value: "show"
     * @const
     */
    "show": "show",

    /**
     * value: "season"
     * @const
     */
    "season": "season",

    /**
     * value: "episode"
     * @const
     */
    "episode": "episode",

    /**
     * value: "program"
     * @const
     */
    "program": "program",

    /**
     * value: "link"
     * @const
     */
    "link": "link",

    /**
     * value: "trailer"
     * @const
     */
    "trailer": "trailer",

    /**
     * value: "channel"
     * @const
     */
    "channel": "channel",

    /**
     * value: "customAsset"
     * @const
     */
    "customAsset": "customAsset"
};



export default ItemList;

