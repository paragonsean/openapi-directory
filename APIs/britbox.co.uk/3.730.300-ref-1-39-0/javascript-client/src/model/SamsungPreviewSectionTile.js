/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SamsungPreviewSectionTile model module.
 * @module model/SamsungPreviewSectionTile
 * @version 3.730.300-ref-1-39-0
 */
class SamsungPreviewSectionTile {
    /**
     * Constructs a new <code>SamsungPreviewSectionTile</code>.
     * @alias module:model/SamsungPreviewSectionTile
     * @param actionData {String} Data to send to the application when the tile is clicked
     * @param imageRatio {String} Thumbnail image aspect ratio   \"16:9\"   \"4:3\"   \"1:1\" (default)   \"2:3\"   The thumbnail height is fixed at 250 px on presentation. 
     * @param imageUrl {String} Thumbnail image URL
     * @param isPlayable {Boolean} If \"true\", a \"Play\" icon is shown over the thumbnail image
     */
    constructor(actionData, imageRatio, imageUrl, isPlayable) { 
        
        SamsungPreviewSectionTile.initialize(this, actionData, imageRatio, imageUrl, isPlayable);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, actionData, imageRatio, imageUrl, isPlayable) { 
        obj['action_data'] = actionData;
        obj['image_ratio'] = imageRatio;
        obj['image_url'] = imageUrl;
        obj['is_playable'] = isPlayable;
    }

    /**
     * Constructs a <code>SamsungPreviewSectionTile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SamsungPreviewSectionTile} obj Optional instance to populate.
     * @return {module:model/SamsungPreviewSectionTile} The populated <code>SamsungPreviewSectionTile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SamsungPreviewSectionTile();

            if (data.hasOwnProperty('action_data')) {
                obj['action_data'] = ApiClient.convertToType(data['action_data'], 'String');
            }
            if (data.hasOwnProperty('display_from')) {
                obj['display_from'] = ApiClient.convertToType(data['display_from'], 'Date');
            }
            if (data.hasOwnProperty('display_until')) {
                obj['display_until'] = ApiClient.convertToType(data['display_until'], 'Date');
            }
            if (data.hasOwnProperty('image_ratio')) {
                obj['image_ratio'] = ApiClient.convertToType(data['image_ratio'], 'String');
            }
            if (data.hasOwnProperty('image_url')) {
                obj['image_url'] = ApiClient.convertToType(data['image_url'], 'String');
            }
            if (data.hasOwnProperty('is_playable')) {
                obj['is_playable'] = ApiClient.convertToType(data['is_playable'], 'Boolean');
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], 'Number');
            }
            if (data.hasOwnProperty('subtitle')) {
                obj['subtitle'] = ApiClient.convertToType(data['subtitle'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SamsungPreviewSectionTile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SamsungPreviewSectionTile</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SamsungPreviewSectionTile.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['action_data'] && !(typeof data['action_data'] === 'string' || data['action_data'] instanceof String)) {
            throw new Error("Expected the field `action_data` to be a primitive type in the JSON string but got " + data['action_data']);
        }
        // ensure the json data is a string
        if (data['image_ratio'] && !(typeof data['image_ratio'] === 'string' || data['image_ratio'] instanceof String)) {
            throw new Error("Expected the field `image_ratio` to be a primitive type in the JSON string but got " + data['image_ratio']);
        }
        // ensure the json data is a string
        if (data['image_url'] && !(typeof data['image_url'] === 'string' || data['image_url'] instanceof String)) {
            throw new Error("Expected the field `image_url` to be a primitive type in the JSON string but got " + data['image_url']);
        }
        // ensure the json data is a string
        if (data['subtitle'] && !(typeof data['subtitle'] === 'string' || data['subtitle'] instanceof String)) {
            throw new Error("Expected the field `subtitle` to be a primitive type in the JSON string but got " + data['subtitle']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

SamsungPreviewSectionTile.RequiredProperties = ["action_data", "image_ratio", "image_url", "is_playable"];

/**
 * Data to send to the application when the tile is clicked
 * @member {String} action_data
 */
SamsungPreviewSectionTile.prototype['action_data'] = undefined;

/**
 * Time to begin showing the tile
 * @member {Date} display_from
 */
SamsungPreviewSectionTile.prototype['display_from'] = undefined;

/**
 * Time to stop showing the tile
 * @member {Date} display_until
 */
SamsungPreviewSectionTile.prototype['display_until'] = undefined;

/**
 * Thumbnail image aspect ratio   \"16:9\"   \"4:3\"   \"1:1\" (default)   \"2:3\"   The thumbnail height is fixed at 250 px on presentation. 
 * @member {String} image_ratio
 */
SamsungPreviewSectionTile.prototype['image_ratio'] = undefined;

/**
 * Thumbnail image URL
 * @member {String} image_url
 */
SamsungPreviewSectionTile.prototype['image_url'] = undefined;

/**
 * If \"true\", a \"Play\" icon is shown over the thumbnail image
 * @member {Boolean} is_playable
 */
SamsungPreviewSectionTile.prototype['is_playable'] = undefined;

/**
 * Section position. If specified, sections are shown in ascending position order
 * @member {Number} position
 */
SamsungPreviewSectionTile.prototype['position'] = undefined;

/**
 * Tile subtitle
 * @member {String} subtitle
 */
SamsungPreviewSectionTile.prototype['subtitle'] = undefined;

/**
 * Tile title
 * @member {String} title
 */
SamsungPreviewSectionTile.prototype['title'] = undefined;






export default SamsungPreviewSectionTile;

