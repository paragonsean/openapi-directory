/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeviceRegistrationWindow model module.
 * @module model/DeviceRegistrationWindow
 * @version 3.730.300-ref-1-39-0
 */
class DeviceRegistrationWindow {
    /**
     * Constructs a new <code>DeviceRegistrationWindow</code>.
     * @alias module:model/DeviceRegistrationWindow
     * @param endDate {Date} The end date of the current period.  This is based on the value of `startDate` plus the number of days defined by  `periodDays`. 
     * @param limit {Number} The maximum de/registrations that can be made in a period.
     * @param periodDays {Number} The number of days a de/registration period runs for.
     * @param remaining {Number} The remaining de/registrations that can be made in the current period.
     * @param startDate {Date} The start date of the current period.  This is based on the earliest device de/registrations in the past N days, where N is defined by `periodDays`.  If no device has been de/registered then start date will be from the current date. 
     */
    constructor(endDate, limit, periodDays, remaining, startDate) { 
        
        DeviceRegistrationWindow.initialize(this, endDate, limit, periodDays, remaining, startDate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, endDate, limit, periodDays, remaining, startDate) { 
        obj['endDate'] = endDate;
        obj['limit'] = limit;
        obj['periodDays'] = periodDays;
        obj['remaining'] = remaining;
        obj['startDate'] = startDate;
    }

    /**
     * Constructs a <code>DeviceRegistrationWindow</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceRegistrationWindow} obj Optional instance to populate.
     * @return {module:model/DeviceRegistrationWindow} The populated <code>DeviceRegistrationWindow</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceRegistrationWindow();

            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'Date');
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
            }
            if (data.hasOwnProperty('periodDays')) {
                obj['periodDays'] = ApiClient.convertToType(data['periodDays'], 'Number');
            }
            if (data.hasOwnProperty('remaining')) {
                obj['remaining'] = ApiClient.convertToType(data['remaining'], 'Number');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceRegistrationWindow</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceRegistrationWindow</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeviceRegistrationWindow.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

DeviceRegistrationWindow.RequiredProperties = ["endDate", "limit", "periodDays", "remaining", "startDate"];

/**
 * The end date of the current period.  This is based on the value of `startDate` plus the number of days defined by  `periodDays`. 
 * @member {Date} endDate
 */
DeviceRegistrationWindow.prototype['endDate'] = undefined;

/**
 * The maximum de/registrations that can be made in a period.
 * @member {Number} limit
 */
DeviceRegistrationWindow.prototype['limit'] = undefined;

/**
 * The number of days a de/registration period runs for.
 * @member {Number} periodDays
 */
DeviceRegistrationWindow.prototype['periodDays'] = undefined;

/**
 * The remaining de/registrations that can be made in the current period.
 * @member {Number} remaining
 */
DeviceRegistrationWindow.prototype['remaining'] = undefined;

/**
 * The start date of the current period.  This is based on the earliest device de/registrations in the past N days, where N is defined by `periodDays`.  If no device has been de/registered then start date will be from the current date. 
 * @member {Date} startDate
 */
DeviceRegistrationWindow.prototype['startDate'] = undefined;






export default DeviceRegistrationWindow;

