/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ExclusionRule model module.
 * @module model/ExclusionRule
 * @version 3.730.300-ref-1-39-0
 */
class ExclusionRule {
    /**
     * Constructs a new <code>ExclusionRule</code>.
     * Defines playback exclusion rules for an Offer or Entitlement.
     * @alias module:model/ExclusionRule
     */
    constructor() { 
        
        ExclusionRule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExclusionRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExclusionRule} obj Optional instance to populate.
     * @return {module:model/ExclusionRule} The populated <code>ExclusionRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExclusionRule();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('device')) {
                obj['device'] = ApiClient.convertToType(data['device'], 'String');
            }
            if (data.hasOwnProperty('excludeAirplay')) {
                obj['excludeAirplay'] = ApiClient.convertToType(data['excludeAirplay'], 'Boolean');
            }
            if (data.hasOwnProperty('excludeChromecast')) {
                obj['excludeChromecast'] = ApiClient.convertToType(data['excludeChromecast'], 'Boolean');
            }
            if (data.hasOwnProperty('excludeDelivery')) {
                obj['excludeDelivery'] = ApiClient.convertToType(data['excludeDelivery'], 'String');
            }
            if (data.hasOwnProperty('excludeMinResolution')) {
                obj['excludeMinResolution'] = ApiClient.convertToType(data['excludeMinResolution'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExclusionRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExclusionRule</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['device'] && !(typeof data['device'] === 'string' || data['device'] instanceof String)) {
            throw new Error("Expected the field `device` to be a primitive type in the JSON string but got " + data['device']);
        }
        // ensure the json data is a string
        if (data['excludeDelivery'] && !(typeof data['excludeDelivery'] === 'string' || data['excludeDelivery'] instanceof String)) {
            throw new Error("Expected the field `excludeDelivery` to be a primitive type in the JSON string but got " + data['excludeDelivery']);
        }
        // ensure the json data is a string
        if (data['excludeMinResolution'] && !(typeof data['excludeMinResolution'] === 'string' || data['excludeMinResolution'] instanceof String)) {
            throw new Error("Expected the field `excludeMinResolution` to be a primitive type in the JSON string but got " + data['excludeMinResolution']);
        }

        return true;
    }


}



/**
 * @member {String} description
 */
ExclusionRule.prototype['description'] = undefined;

/**
 * The device type that the exclusion rules apply to.
 * @member {String} device
 */
ExclusionRule.prototype['device'] = undefined;

/**
 * Prevent airplay from an apple device.
 * @member {Boolean} excludeAirplay
 */
ExclusionRule.prototype['excludeAirplay'] = undefined;

/**
 * Prevent chromecasting.
 * @member {Boolean} excludeChromecast
 */
ExclusionRule.prototype['excludeChromecast'] = undefined;

/**
 * @member {module:model/ExclusionRule.ExcludeDeliveryEnum} excludeDelivery
 */
ExclusionRule.prototype['excludeDelivery'] = undefined;

/**
 * @member {module:model/ExclusionRule.ExcludeMinResolutionEnum} excludeMinResolution
 */
ExclusionRule.prototype['excludeMinResolution'] = undefined;





/**
 * Allowed values for the <code>excludeDelivery</code> property.
 * @enum {String}
 * @readonly
 */
ExclusionRule['ExcludeDeliveryEnum'] = {

    /**
     * value: "Stream"
     * @const
     */
    "Stream": "Stream",

    /**
     * value: "Download"
     * @const
     */
    "Download": "Download",

    /**
     * value: "StreamOrDownload"
     * @const
     */
    "StreamOrDownload": "StreamOrDownload",

    /**
     * value: "ProgressiveDownload"
     * @const
     */
    "ProgressiveDownload": "ProgressiveDownload",

    /**
     * value: "None"
     * @const
     */
    "None": "None"
};


/**
 * Allowed values for the <code>excludeMinResolution</code> property.
 * @enum {String}
 * @readonly
 */
ExclusionRule['ExcludeMinResolutionEnum'] = {

    /**
     * value: "SD"
     * @const
     */
    "SD": "SD",

    /**
     * value: "HD-720"
     * @const
     */
    "HD-720": "HD-720",

    /**
     * value: "HD-1080"
     * @const
     */
    "HD-1080": "HD-1080",

    /**
     * value: "HD-4K"
     * @const
     */
    "HD-4K": "HD-4K",

    /**
     * value: "External"
     * @const
     */
    "External": "External",

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown"
};



export default ExclusionRule;

