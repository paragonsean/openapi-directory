/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PaginationAuth from './PaginationAuth';
import PaginationOptions from './PaginationOptions';

/**
 * The Pagination model module.
 * @module model/Pagination
 * @version 3.730.300-ref-1-39-0
 */
class Pagination {
    /**
     * Constructs a new <code>Pagination</code>.
     * @alias module:model/Pagination
     * @param page {Number} The current page number.  A value of 0 indicates that the fist page has not yet been loaded. This is useful when wanting to return the paging metadata to indicate how to load in the first page. 
     * @param total {Number} The total number of pages available given the current page size.  A value of -1 indicates that the total has not yet been determined. This may arise when embedding secure list pagination info in a page which must be cached by a CDN. For example a Bookmarks list. 
     */
    constructor(page, total) { 
        
        Pagination.initialize(this, page, total);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, page, total) { 
        obj['page'] = page;
        obj['total'] = total;
    }

    /**
     * Constructs a <code>Pagination</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Pagination} obj Optional instance to populate.
     * @return {module:model/Pagination} The populated <code>Pagination</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Pagination();

            if (data.hasOwnProperty('authorization')) {
                obj['authorization'] = PaginationAuth.constructFromObject(data['authorization']);
            }
            if (data.hasOwnProperty('next')) {
                obj['next'] = ApiClient.convertToType(data['next'], 'String');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = PaginationOptions.constructFromObject(data['options']);
            }
            if (data.hasOwnProperty('page')) {
                obj['page'] = ApiClient.convertToType(data['page'], 'Number');
            }
            if (data.hasOwnProperty('previous')) {
                obj['previous'] = ApiClient.convertToType(data['previous'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Pagination</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Pagination</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Pagination.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `authorization`
        if (data['authorization']) { // data not null
          PaginationAuth.validateJSON(data['authorization']);
        }
        // ensure the json data is a string
        if (data['next'] && !(typeof data['next'] === 'string' || data['next'] instanceof String)) {
            throw new Error("Expected the field `next` to be a primitive type in the JSON string but got " + data['next']);
        }
        // validate the optional field `options`
        if (data['options']) { // data not null
          PaginationOptions.validateJSON(data['options']);
        }
        // ensure the json data is a string
        if (data['previous'] && !(typeof data['previous'] === 'string' || data['previous'] instanceof String)) {
            throw new Error("Expected the field `previous` to be a primitive type in the JSON string but got " + data['previous']);
        }

        return true;
    }


}

Pagination.RequiredProperties = ["page", "total"];

/**
 * @member {module:model/PaginationAuth} authorization
 */
Pagination.prototype['authorization'] = undefined;

/**
 * Path to load next page of data, or null if not available
 * @member {String} next
 */
Pagination.prototype['next'] = undefined;

/**
 * @member {module:model/PaginationOptions} options
 */
Pagination.prototype['options'] = undefined;

/**
 * The current page number.  A value of 0 indicates that the fist page has not yet been loaded. This is useful when wanting to return the paging metadata to indicate how to load in the first page. 
 * @member {Number} page
 */
Pagination.prototype['page'] = undefined;

/**
 * Path to load previous page of data, or null if not available.
 * @member {String} previous
 */
Pagination.prototype['previous'] = undefined;

/**
 * The current page size.  A value of -1 indicates that the size has not yet been determined. This may arise when embedding secure list pagination info in a page which must be cached by a CDN. For example a Bookmarks list. 
 * @member {Number} size
 */
Pagination.prototype['size'] = undefined;

/**
 * The total number of pages available given the current page size.  A value of -1 indicates that the total has not yet been determined. This may arise when embedding secure list pagination info in a page which must be cached by a CDN. For example a Bookmarks list. 
 * @member {Number} total
 */
Pagination.prototype['total'] = undefined;






export default Pagination;

