/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Person from './Person';

/**
 * The Credit model module.
 * @module model/Credit
 * @version 3.730.300-ref-1-39-0
 */
class Credit {
    /**
     * Constructs a new <code>Credit</code>.
     * @alias module:model/Credit
     * @implements module:model/Person
     * @param name {String} The name of the person.
     * @param path {String} The path to the person
     * @param role {module:model/Credit.RoleEnum} The type of role the credit performed, e.g. actor.
     */
    constructor(name, path, role) { 
        Person.initialize(this, name, path);
        Credit.initialize(this, name, path, role);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, path, role) { 
        obj['name'] = name;
        obj['path'] = path;
        obj['role'] = role;
    }

    /**
     * Constructs a <code>Credit</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Credit} obj Optional instance to populate.
     * @return {module:model/Credit} The populated <code>Credit</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Credit();
            Person.constructFromObject(data, obj);

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('character')) {
                obj['character'] = ApiClient.convertToType(data['character'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Credit</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Credit</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Credit.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['character'] && !(typeof data['character'] === 'string' || data['character'] instanceof String)) {
            throw new Error("Expected the field `character` to be a primitive type in the JSON string but got " + data['character']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }

        return true;
    }


}

Credit.RequiredProperties = ["name", "path", "role"];

/**
 * The name of the person.
 * @member {String} name
 */
Credit.prototype['name'] = undefined;

/**
 * The path to the person
 * @member {String} path
 */
Credit.prototype['path'] = undefined;

/**
 * The name of the character.
 * @member {String} character
 */
Credit.prototype['character'] = undefined;

/**
 * The type of role the credit performed, e.g. actor.
 * @member {module:model/Credit.RoleEnum} role
 */
Credit.prototype['role'] = undefined;


// Implement Person interface:
/**
 * The name of the person.
 * @member {String} name
 */
Person.prototype['name'] = undefined;
/**
 * The path to the person
 * @member {String} path
 */
Person.prototype['path'] = undefined;



/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
Credit['RoleEnum'] = {

    /**
     * value: "actor"
     * @const
     */
    "actor": "actor",

    /**
     * value: "associateproducer"
     * @const
     */
    "associateproducer": "associateproducer",

    /**
     * value: "coactor"
     * @const
     */
    "coactor": "coactor",

    /**
     * value: "director"
     * @const
     */
    "director": "director",

    /**
     * value: "executiveproducer"
     * @const
     */
    "executiveproducer": "executiveproducer",

    /**
     * value: "filminglocation"
     * @const
     */
    "filminglocation": "filminglocation",

    /**
     * value: "guest"
     * @const
     */
    "guest": "guest",

    /**
     * value: "narrator"
     * @const
     */
    "narrator": "narrator",

    /**
     * value: "other"
     * @const
     */
    "other": "other",

    /**
     * value: "presenter"
     * @const
     */
    "presenter": "presenter",

    /**
     * value: "producer"
     * @const
     */
    "producer": "producer",

    /**
     * value: "productmanager"
     * @const
     */
    "productmanager": "productmanager",

    /**
     * value: "thememusicby"
     * @const
     */
    "thememusicby": "thememusicby",

    /**
     * value: "voice"
     * @const
     */
    "voice": "voice",

    /**
     * value: "writer"
     * @const
     */
    "writer": "writer"
};



export default Credit;

