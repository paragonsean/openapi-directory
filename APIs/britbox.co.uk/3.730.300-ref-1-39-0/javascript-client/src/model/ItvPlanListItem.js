/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ItvPlanListItem model module.
 * @module model/ItvPlanListItem
 * @version 3.730.300-ref-1-39-0
 */
class ItvPlanListItem {
    /**
     * Constructs a new <code>ItvPlanListItem</code>.
     * @alias module:model/ItvPlanListItem
     * @param amount {Number} The price of a plan. If a free plan then undefined.
     * @param currency {String} The currency a plan is offered in.
     * @param description {String} The textual description.
     * @param id {String} The identifier of a plan.
     * @param interval {module:model/ItvPlanListItem.IntervalEnum} The type of billing period used.
     * @param intervalCount {Number} Given the `interval` this is how frequently it will run. e.g. every 2 weeks.
     * @param nickname {String} The title of a plan.
     * @param product {String} The product description.
     */
    constructor(amount, currency, description, id, interval, intervalCount, nickname, product) { 
        
        ItvPlanListItem.initialize(this, amount, currency, description, id, interval, intervalCount, nickname, product);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, currency, description, id, interval, intervalCount, nickname, product) { 
        obj['amount'] = amount;
        obj['currency'] = currency;
        obj['description'] = description;
        obj['id'] = id;
        obj['interval'] = interval;
        obj['intervalCount'] = intervalCount;
        obj['nickname'] = nickname;
        obj['product'] = product;
    }

    /**
     * Constructs a <code>ItvPlanListItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ItvPlanListItem} obj Optional instance to populate.
     * @return {module:model/ItvPlanListItem} The populated <code>ItvPlanListItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ItvPlanListItem();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('interval')) {
                obj['interval'] = ApiClient.convertToType(data['interval'], 'String');
            }
            if (data.hasOwnProperty('intervalCount')) {
                obj['intervalCount'] = ApiClient.convertToType(data['intervalCount'], 'Number');
            }
            if (data.hasOwnProperty('nickname')) {
                obj['nickname'] = ApiClient.convertToType(data['nickname'], 'String');
            }
            if (data.hasOwnProperty('product')) {
                obj['product'] = ApiClient.convertToType(data['product'], 'String');
            }
            if (data.hasOwnProperty('savingLabel')) {
                obj['savingLabel'] = ApiClient.convertToType(data['savingLabel'], 'String');
            }
            if (data.hasOwnProperty('switchingText')) {
                obj['switchingText'] = ApiClient.convertToType(data['switchingText'], 'String');
            }
            if (data.hasOwnProperty('trialPeriodDays')) {
                obj['trialPeriodDays'] = ApiClient.convertToType(data['trialPeriodDays'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ItvPlanListItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ItvPlanListItem</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ItvPlanListItem.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['interval'] && !(typeof data['interval'] === 'string' || data['interval'] instanceof String)) {
            throw new Error("Expected the field `interval` to be a primitive type in the JSON string but got " + data['interval']);
        }
        // ensure the json data is a string
        if (data['nickname'] && !(typeof data['nickname'] === 'string' || data['nickname'] instanceof String)) {
            throw new Error("Expected the field `nickname` to be a primitive type in the JSON string but got " + data['nickname']);
        }
        // ensure the json data is a string
        if (data['product'] && !(typeof data['product'] === 'string' || data['product'] instanceof String)) {
            throw new Error("Expected the field `product` to be a primitive type in the JSON string but got " + data['product']);
        }
        // ensure the json data is a string
        if (data['savingLabel'] && !(typeof data['savingLabel'] === 'string' || data['savingLabel'] instanceof String)) {
            throw new Error("Expected the field `savingLabel` to be a primitive type in the JSON string but got " + data['savingLabel']);
        }
        // ensure the json data is a string
        if (data['switchingText'] && !(typeof data['switchingText'] === 'string' || data['switchingText'] instanceof String)) {
            throw new Error("Expected the field `switchingText` to be a primitive type in the JSON string but got " + data['switchingText']);
        }

        return true;
    }


}

ItvPlanListItem.RequiredProperties = ["amount", "currency", "description", "id", "interval", "intervalCount", "nickname", "product"];

/**
 * The price of a plan. If a free plan then undefined.
 * @member {Number} amount
 */
ItvPlanListItem.prototype['amount'] = undefined;

/**
 * The currency a plan is offered in.
 * @member {String} currency
 */
ItvPlanListItem.prototype['currency'] = undefined;

/**
 * The textual description.
 * @member {String} description
 */
ItvPlanListItem.prototype['description'] = undefined;

/**
 * The identifier of a plan.
 * @member {String} id
 */
ItvPlanListItem.prototype['id'] = undefined;

/**
 * The type of billing period used.
 * @member {module:model/ItvPlanListItem.IntervalEnum} interval
 */
ItvPlanListItem.prototype['interval'] = undefined;

/**
 * Given the `interval` this is how frequently it will run. e.g. every 2 weeks.
 * @member {Number} intervalCount
 */
ItvPlanListItem.prototype['intervalCount'] = undefined;

/**
 * The title of a plan.
 * @member {String} nickname
 */
ItvPlanListItem.prototype['nickname'] = undefined;

/**
 * The product description.
 * @member {String} product
 */
ItvPlanListItem.prototype['product'] = undefined;

/**
 * The saving label.
 * @member {String} savingLabel
 */
ItvPlanListItem.prototype['savingLabel'] = undefined;

/**
 * The text to switch for.
 * @member {String} switchingText
 */
ItvPlanListItem.prototype['switchingText'] = undefined;

/**
 * How many days a trial period runs for a plan. Only valid if `hasTrialPeriod` is true.
 * @member {Number} trialPeriodDays
 */
ItvPlanListItem.prototype['trialPeriodDays'] = undefined;





/**
 * Allowed values for the <code>interval</code> property.
 * @enum {String}
 * @readonly
 */
ItvPlanListItem['IntervalEnum'] = {

    /**
     * value: "day"
     * @const
     */
    "day": "day",

    /**
     * value: "week"
     * @const
     */
    "week": "week",

    /**
     * value: "month"
     * @const
     */
    "month": "month",

    /**
     * value: "year"
     * @const
     */
    "year": "year",

    /**
     * value: "none"
     * @const
     */
    "none": "none"
};



export default ItvPlanListItem;

