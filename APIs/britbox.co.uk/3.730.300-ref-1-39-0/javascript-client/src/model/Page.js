/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ItemDetail from './ItemDetail';
import ItemList from './ItemList';
import PageEntry from './PageEntry';
import PageMetadata from './PageMetadata';
import PageSummary from './PageSummary';
import Theme from './Theme';

/**
 * The Page model module.
 * @module model/Page
 * @version 3.730.300-ref-1-39-0
 */
class Page {
    /**
     * Constructs a new <code>Page</code>.
     * @alias module:model/Page
     * @implements module:model/PageSummary
     * @param id {String} Unique identifier for the page.
     * @param isStatic {Boolean} True if this page is static and doesn't have any dynamic content to load.  Static pages don't need to go back to the page endpoint to load page content instead the page summary loaded with the sitemap should be enough to determine the page template type and render based on this. 
     * @param isSystemPage {Boolean} True if this page is a system page type.  **DEPRECATED** This property doesn't have any real use in client applications anymore so shouldn't be used. It especially shouldn't be used to determine if a page is static or not. Use the `isStatic` property instead. 
     * @param path {String} Unique path for the page.
     * @param template {String} Identifier for of the page template to render this page.
     * @param title {String} Title of the page.
     * @param entries {Array.<module:model/PageEntry>} Entries of a page
     */
    constructor(id, isStatic, isSystemPage, path, template, title, entries) { 
        PageSummary.initialize(this, id, isStatic, isSystemPage, path, template, title);
        Page.initialize(this, id, isStatic, isSystemPage, path, template, title, entries);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, isStatic, isSystemPage, path, template, title, entries) { 
        obj['id'] = id;
        obj['isStatic'] = isStatic;
        obj['isSystemPage'] = isSystemPage;
        obj['path'] = path;
        obj['template'] = template;
        obj['title'] = title;
        obj['entries'] = entries;
    }

    /**
     * Constructs a <code>Page</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Page} obj Optional instance to populate.
     * @return {module:model/Page} The populated <code>Page</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Page();
            PageSummary.constructFromObject(data, obj);

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isStatic')) {
                obj['isStatic'] = ApiClient.convertToType(data['isStatic'], 'Boolean');
            }
            if (data.hasOwnProperty('isSystemPage')) {
                obj['isSystemPage'] = ApiClient.convertToType(data['isSystemPage'], 'Boolean');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('template')) {
                obj['template'] = ApiClient.convertToType(data['template'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('customFields')) {
                obj['customFields'] = ApiClient.convertToType(data['customFields'], {'String': Object});
            }
            if (data.hasOwnProperty('entries')) {
                obj['entries'] = ApiClient.convertToType(data['entries'], [PageEntry]);
            }
            if (data.hasOwnProperty('item')) {
                obj['item'] = ItemDetail.constructFromObject(data['item']);
            }
            if (data.hasOwnProperty('list')) {
                obj['list'] = ItemList.constructFromObject(data['list']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = PageMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('themes')) {
                obj['themes'] = ApiClient.convertToType(data['themes'], [Theme]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Page</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Page</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Page.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['template'] && !(typeof data['template'] === 'string' || data['template'] instanceof String)) {
            throw new Error("Expected the field `template` to be a primitive type in the JSON string but got " + data['template']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        if (data['entries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['entries'])) {
                throw new Error("Expected the field `entries` to be an array in the JSON data but got " + data['entries']);
            }
            // validate the optional field `entries` (array)
            for (const item of data['entries']) {
                PageEntry.validateJSON(item);
            };
        }
        // validate the optional field `item`
        if (data['item']) { // data not null
          ItemDetail.validateJSON(data['item']);
        }
        // validate the optional field `list`
        if (data['list']) { // data not null
          ItemList.validateJSON(data['list']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          PageMetadata.validateJSON(data['metadata']);
        }
        if (data['themes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['themes'])) {
                throw new Error("Expected the field `themes` to be an array in the JSON data but got " + data['themes']);
            }
            // validate the optional field `themes` (array)
            for (const item of data['themes']) {
                Theme.validateJSON(item);
            };
        }

        return true;
    }


}

Page.RequiredProperties = ["id", "isStatic", "isSystemPage", "path", "template", "title", "entries"];

/**
 * Unique identifier for the page.
 * @member {String} id
 */
Page.prototype['id'] = undefined;

/**
 * True if this page is static and doesn't have any dynamic content to load.  Static pages don't need to go back to the page endpoint to load page content instead the page summary loaded with the sitemap should be enough to determine the page template type and render based on this. 
 * @member {Boolean} isStatic
 */
Page.prototype['isStatic'] = undefined;

/**
 * True if this page is a system page type.  **DEPRECATED** This property doesn't have any real use in client applications anymore so shouldn't be used. It especially shouldn't be used to determine if a page is static or not. Use the `isStatic` property instead. 
 * @member {Boolean} isSystemPage
 */
Page.prototype['isSystemPage'] = undefined;

/**
 * Key used to lookup a known page.
 * @member {String} key
 */
Page.prototype['key'] = undefined;

/**
 * Unique path for the page.
 * @member {String} path
 */
Page.prototype['path'] = undefined;

/**
 * Identifier for of the page template to render this page.
 * @member {String} template
 */
Page.prototype['template'] = undefined;

/**
 * Title of the page.
 * @member {String} title
 */
Page.prototype['title'] = undefined;

/**
 * A map of custom fields defined by a curator for a page.
 * @member {Object.<String, Object>} customFields
 */
Page.prototype['customFields'] = undefined;

/**
 * Entries of a page
 * @member {Array.<module:model/PageEntry>} entries
 */
Page.prototype['entries'] = undefined;

/**
 * @member {module:model/ItemDetail} item
 */
Page.prototype['item'] = undefined;

/**
 * @member {module:model/ItemList} list
 */
Page.prototype['list'] = undefined;

/**
 * @member {module:model/PageMetadata} metadata
 */
Page.prototype['metadata'] = undefined;

/**
 * @member {Array.<module:model/Theme>} themes
 */
Page.prototype['themes'] = undefined;


// Implement PageSummary interface:
/**
 * Unique identifier for the page.
 * @member {String} id
 */
PageSummary.prototype['id'] = undefined;
/**
 * True if this page is static and doesn't have any dynamic content to load.  Static pages don't need to go back to the page endpoint to load page content instead the page summary loaded with the sitemap should be enough to determine the page template type and render based on this. 
 * @member {Boolean} isStatic
 */
PageSummary.prototype['isStatic'] = undefined;
/**
 * True if this page is a system page type.  **DEPRECATED** This property doesn't have any real use in client applications anymore so shouldn't be used. It especially shouldn't be used to determine if a page is static or not. Use the `isStatic` property instead. 
 * @member {Boolean} isSystemPage
 */
PageSummary.prototype['isSystemPage'] = undefined;
/**
 * Key used to lookup a known page.
 * @member {String} key
 */
PageSummary.prototype['key'] = undefined;
/**
 * Unique path for the page.
 * @member {String} path
 */
PageSummary.prototype['path'] = undefined;
/**
 * Identifier for of the page template to render this page.
 * @member {String} template
 */
PageSummary.prototype['template'] = undefined;
/**
 * Title of the page.
 * @member {String} title
 */
PageSummary.prototype['title'] = undefined;




export default Page;

