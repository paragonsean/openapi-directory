/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ItemList from './ItemList';
import ItemSummary from './ItemSummary';
import Person from './Person';

/**
 * The PageEntry model module.
 * @module model/PageEntry
 * @version 3.730.300-ref-1-39-0
 */
class PageEntry {
    /**
     * Constructs a new <code>PageEntry</code>.
     * Represents an entry of a Page. Defines what specific piece of content should be presented e.g. an Item or ItemList. Also defines what visual template should be used to render that content. 
     * @alias module:model/PageEntry
     * @param id {String} The unique identifier for a page entry.
     * @param template {String} Template type used to present the content of the PageEntry.
     * @param title {String} The name of the Page Entry.
     * @param type {module:model/PageEntry.TypeEnum} The type of PageEntry. Used to help identify what type of content will be presented.
     */
    constructor(id, template, title, type) { 
        
        PageEntry.initialize(this, id, template, title, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, template, title, type) { 
        obj['id'] = id;
        obj['template'] = template;
        obj['title'] = title;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>PageEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PageEntry} obj Optional instance to populate.
     * @return {module:model/PageEntry} The populated <code>PageEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PageEntry();

            if (data.hasOwnProperty('customFields')) {
                obj['customFields'] = ApiClient.convertToType(data['customFields'], {'String': Object});
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], {'String': 'String'});
            }
            if (data.hasOwnProperty('item')) {
                obj['item'] = ItemSummary.constructFromObject(data['item']);
            }
            if (data.hasOwnProperty('list')) {
                obj['list'] = ItemList.constructFromObject(data['list']);
            }
            if (data.hasOwnProperty('people')) {
                obj['people'] = ApiClient.convertToType(data['people'], [Person]);
            }
            if (data.hasOwnProperty('template')) {
                obj['template'] = ApiClient.convertToType(data['template'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PageEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PageEntry</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PageEntry.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `item`
        if (data['item']) { // data not null
          ItemSummary.validateJSON(data['item']);
        }
        // validate the optional field `list`
        if (data['list']) { // data not null
          ItemList.validateJSON(data['list']);
        }
        if (data['people']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['people'])) {
                throw new Error("Expected the field `people` to be an array in the JSON data but got " + data['people']);
            }
            // validate the optional field `people` (array)
            for (const item of data['people']) {
                Person.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['template'] && !(typeof data['template'] === 'string' || data['template'] instanceof String)) {
            throw new Error("Expected the field `template` to be a primitive type in the JSON string but got " + data['template']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

PageEntry.RequiredProperties = ["id", "template", "title", "type"];

/**
 * A map of custom fields defined by a curator for a page entry.
 * @member {Object.<String, Object>} customFields
 */
PageEntry.prototype['customFields'] = undefined;

/**
 * The unique identifier for a page entry.
 * @member {String} id
 */
PageEntry.prototype['id'] = undefined;

/**
 * The images for the page entry if any.  For example the images of an `ImageEntry`. 
 * @member {Object.<String, String>} images
 */
PageEntry.prototype['images'] = undefined;

/**
 * @member {module:model/ItemSummary} item
 */
PageEntry.prototype['item'] = undefined;

/**
 * @member {module:model/ItemList} list
 */
PageEntry.prototype['list'] = undefined;

/**
 * If 'type' is 'PeopleEntry' then this is the array of people to present.
 * @member {Array.<module:model/Person>} people
 */
PageEntry.prototype['people'] = undefined;

/**
 * Template type used to present the content of the PageEntry.
 * @member {String} template
 */
PageEntry.prototype['template'] = undefined;

/**
 * If 'type' is 'TextEntry' then this is the text to be represented.
 * @member {String} text
 */
PageEntry.prototype['text'] = undefined;

/**
 * The name of the Page Entry.
 * @member {String} title
 */
PageEntry.prototype['title'] = undefined;

/**
 * The type of PageEntry. Used to help identify what type of content will be presented.
 * @member {module:model/PageEntry.TypeEnum} type
 */
PageEntry.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
PageEntry['TypeEnum'] = {

    /**
     * value: "ItemEntry"
     * @const
     */
    "ItemEntry": "ItemEntry",

    /**
     * value: "ItemDetailEntry"
     * @const
     */
    "ItemDetailEntry": "ItemDetailEntry",

    /**
     * value: "ListEntry"
     * @const
     */
    "ListEntry": "ListEntry",

    /**
     * value: "ListDetailEntry"
     * @const
     */
    "ListDetailEntry": "ListDetailEntry",

    /**
     * value: "UserEntry"
     * @const
     */
    "UserEntry": "UserEntry",

    /**
     * value: "TextEntry"
     * @const
     */
    "TextEntry": "TextEntry",

    /**
     * value: "ImageEntry"
     * @const
     */
    "ImageEntry": "ImageEntry",

    /**
     * value: "CustomEntry"
     * @const
     */
    "CustomEntry": "CustomEntry",

    /**
     * value: "PeopleEntry"
     * @const
     */
    "PeopleEntry": "PeopleEntry"
};



export default PageEntry;

