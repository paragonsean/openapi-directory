/**
 * Rocket Services
 * An Orchestration Layer that takes ISL services and packages them in a more targeted way for front-end applications. This in turn makes client integration easier and reduces the complexity and size of front-end applications.  Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that best suits the application they are developing. 
 *
 * The version of the OpenAPI document: 3.730.300-ref-1-39-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RegistrationRequest model module.
 * @module model/RegistrationRequest
 * @version 3.730.300-ref-1-39-0
 */
class RegistrationRequest {
    /**
     * Constructs a new <code>RegistrationRequest</code>.
     * @alias module:model/RegistrationRequest
     * @param email {String} 
     * @param password {String} 
     */
    constructor(email, password) { 
        
        RegistrationRequest.initialize(this, email, password);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, email, password) { 
        obj['email'] = email;
        obj['marketing'] = true;
        obj['password'] = password;
    }

    /**
     * Constructs a <code>RegistrationRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RegistrationRequest} obj Optional instance to populate.
     * @return {module:model/RegistrationRequest} The populated <code>RegistrationRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RegistrationRequest();

            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('languageCode')) {
                obj['languageCode'] = ApiClient.convertToType(data['languageCode'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('marketing')) {
                obj['marketing'] = ApiClient.convertToType(data['marketing'], 'Boolean');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('pin')) {
                obj['pin'] = ApiClient.convertToType(data['pin'], 'String');
            }
            if (data.hasOwnProperty('segments')) {
                obj['segments'] = ApiClient.convertToType(data['segments'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RegistrationRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RegistrationRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RegistrationRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['languageCode'] && !(typeof data['languageCode'] === 'string' || data['languageCode'] instanceof String)) {
            throw new Error("Expected the field `languageCode` to be a primitive type in the JSON string but got " + data['languageCode']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['pin'] && !(typeof data['pin'] === 'string' || data['pin'] instanceof String)) {
            throw new Error("Expected the field `pin` to be a primitive type in the JSON string but got " + data['pin']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['segments'])) {
            throw new Error("Expected the field `segments` to be an array in the JSON data but got " + data['segments']);
        }

        return true;
    }


}

RegistrationRequest.RequiredProperties = ["email", "password"];

/**
 * @member {String} email
 */
RegistrationRequest.prototype['email'] = undefined;

/**
 * @member {String} firstName
 */
RegistrationRequest.prototype['firstName'] = undefined;

/**
 * The code of the preferred language for the primary profile. Must be a valid ISO language code e.g. \"en-US\" and must match the code of one of the languages specified in the app config. See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes 
 * @member {String} languageCode
 */
RegistrationRequest.prototype['languageCode'] = undefined;

/**
 * @member {String} lastName
 */
RegistrationRequest.prototype['lastName'] = undefined;

/**
 * Whether to receive marketing material or not. Default to true.
 * @member {Boolean} marketing
 * @default true
 */
RegistrationRequest.prototype['marketing'] = true;

/**
 * @member {String} password
 */
RegistrationRequest.prototype['password'] = undefined;

/**
 * The primary account pin.
 * @member {String} pin
 */
RegistrationRequest.prototype['pin'] = undefined;

/**
 * The segments to apply to the primary profile.
 * @member {Array.<String>} segments
 */
RegistrationRequest.prototype['segments'] = undefined;






export default RegistrationRequest;

