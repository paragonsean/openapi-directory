/**
 * departureboard.io API
 * The departureboard.io is a high performance API written in Golang. Its goal is to provide to main functions:<br><br> (1): A JSON API interface to the legacy National Rail SOAP API: Giving developers the ability to pull live information on departures, arrivals, and services from National Rail, without having to use the legacy SOAP API provided by National Rail. Information is still pulled directly from National Rail in the background, providing the same level of real-time data without the additional complexity of having to interact with SOAP. <br><br>(2): A JSON API interface for additional National Rail information: Giving developers the ability to pull a range of information about the Rail Network, via a JSON API interface. This is not an offering that National Rail currently provide, and is custom developed. Data is sourced from periodically updated XML documents, parsed, and provided for consumption via the departureboard.io API.<br><br>This API is completely free to use for non-commercial purposes. You can explore the various sections of the documentation using the links below.<br><br> For more information please see <a href=\"https://api.departureboard.io\">https://api.departureboard.io</a>
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import DeparturesArrivalsApi from './api/DeparturesArrivalsApi';
import FastestAndNextDeparturesApi from './api/FastestAndNextDeparturesApi';
import ServiceInformationApi from './api/ServiceInformationApi';


/**
* The departureboard.io is a high performance API written in Golang. Its goal is to provide to main functions:&lt;br&gt;&lt;br&gt; (1): A JSON API interface to the legacy National Rail SOAP API: Giving developers the ability to pull live information on departures, arrivals, and services from National Rail, without having to use the legacy SOAP API provided by National Rail. Information is still pulled directly from National Rail in the background, providing the same level of real-time data without the additional complexity of having to interact with SOAP. &lt;br&gt;&lt;br&gt;(2): A JSON API interface for additional National Rail information: Giving developers the ability to pull a range of information about the Rail Network, via a JSON API interface. This is not an offering that National Rail currently provide, and is custom developed. Data is sourced from periodically updated XML documents, parsed, and provided for consumption via the departureboard.io API.&lt;br&gt;&lt;br&gt;This API is completely free to use for non-commercial purposes. You can explore the various sections of the documentation using the links below.&lt;br&gt;&lt;br&gt; For more information please see &lt;a href&#x3D;\&quot;https://api.departureboard.io\&quot;&gt;https://api.departureboard.io&lt;/a&gt;.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var DepartureboardIoApi = require('index'); // See note below*.
* var xxxSvc = new DepartureboardIoApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new DepartureboardIoApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new DepartureboardIoApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new DepartureboardIoApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
    * The DeparturesArrivalsApi service constructor.
    * @property {module:api/DeparturesArrivalsApi}
    */
    DeparturesArrivalsApi,

    /**
    * The FastestAndNextDeparturesApi service constructor.
    * @property {module:api/FastestAndNextDeparturesApi}
    */
    FastestAndNextDeparturesApi,

    /**
    * The ServiceInformationApi service constructor.
    * @property {module:api/ServiceInformationApi}
    */
    ServiceInformationApi
};
