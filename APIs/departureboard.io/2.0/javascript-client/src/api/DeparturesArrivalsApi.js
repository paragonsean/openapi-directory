/**
 * departureboard.io API
 * The departureboard.io is a high performance API written in Golang. Its goal is to provide to main functions:<br><br> (1): A JSON API interface to the legacy National Rail SOAP API: Giving developers the ability to pull live information on departures, arrivals, and services from National Rail, without having to use the legacy SOAP API provided by National Rail. Information is still pulled directly from National Rail in the background, providing the same level of real-time data without the additional complexity of having to interact with SOAP. <br><br>(2): A JSON API interface for additional National Rail information: Giving developers the ability to pull a range of information about the Rail Network, via a JSON API interface. This is not an offering that National Rail currently provide, and is custom developed. Data is sourced from periodically updated XML documents, parsed, and provided for consumption via the departureboard.io API.<br><br>This API is completely free to use for non-commercial purposes. You can explore the various sections of the documentation using the links below.<br><br> For more information please see <a href=\"https://api.departureboard.io\">https://api.departureboard.io</a>
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* DeparturesArrivals service.
* @module api/DeparturesArrivalsApi
* @version 2.0
*/
export default class DeparturesArrivalsApi {

    /**
    * Constructs a new DeparturesArrivalsApi. 
    * @alias module:api/DeparturesArrivalsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getArrivalsAndDeparturesByCRS operation.
     * @callback module:api/DeparturesArrivalsApi~getArrivalsAndDeparturesByCRSCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getArrivalsAndDeparturesByCRS is used to get a list of services arriving to and departing from a UK train station by the CRS (Computer Reservation System) code. This will typically return a list of train services, but will also return any replacement bus or ferry services that are in place.
     * @param {String} CRS The CRS (Computer Reservation System) for the Station you wish to get departure and arrival information for, e.g. KGX for London Kings Cross.
     * @param {String} apiKey The National Rail OpenLDBWS API Key to use for looking up service information. You must register with National Rail to obtain this key and whitelist it with us. See https://api.departureboard.io/docs/registration for more information.
     * @param {Object} opts Optional parameters
     * @param {Number} [numServices = 10)] The number of arriving and departing services to return. This is a maximum value, less may be returned if there is not a sufficient amount of services arriving to or departing from this station within the time window specified.
     * @param {Number} [timeOffset = 0)] The time window in minutes to offset the arrival and departure information by. For example, a value of 20 will not show services arriving to or departing from the station within the next 20 minutes.
     * @param {Number} [timeWindow = 120)] The time window in minutes to offset the arrival and departure information by. For example, a value of 20 will not show services arriving to or departing from the selected station within the next 20 minutes.
     * @param {Boolean} [serviceDetails = true)] Should the response contain information on the calling points for each service? If set to false, calling points will not be returned.
     * @param {String} [filterStation] The CRS (Computer Reservation System) code to filter the results by. When setting this you must also set the filterType parameter. For example, performing a lookup for PAD (London Paddington) and setting filterStation to RED (Reading) and filterType to from, will only show services arriving to London Paddington that stopped at Reading. Setting a filter for getArrivalsAndDeparturesByCRS is similar to performing a getArrivalsByCRS or getDeparturesByCRS lookup, with the appropriate filterStation parameter. However using the getArrivalsAndDeparturesByCRS endpoint shows more details for each of the returned services.
     * @param {String} [filterType] Determines if the filterStation parameter should be applied for services arriving to, or leaving from the selected station. Required if filterStation is set.
     * @param {module:api/DeparturesArrivalsApi~getArrivalsAndDeparturesByCRSCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getArrivalsAndDeparturesByCRS(CRS, apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'CRS' is set
      if (CRS === undefined || CRS === null) {
        throw new Error("Missing the required parameter 'CRS' when calling getArrivalsAndDeparturesByCRS");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getArrivalsAndDeparturesByCRS");
      }

      let pathParams = {
        'CRS': CRS
      };
      let queryParams = {
        'apiKey': apiKey,
        'numServices': opts['numServices'],
        'timeOffset': opts['timeOffset'],
        'timeWindow': opts['timeWindow'],
        'serviceDetails': opts['serviceDetails'],
        'filterStation': opts['filterStation'],
        'filterType': opts['filterType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/getArrivalsAndDeparturesByCRS/{CRS}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getArrivalsByCRS operation.
     * @callback module:api/DeparturesArrivalsApi~getArrivalsByCRSCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getArrivalsByCRS is used to get a list of services arriving to a UK train station by the CRS (Computer Reservation System) code. This will typically return a list of train services, but will also return any replacement bus or ferry services that are in place.
     * @param {String} CRS The CRS (Computer Reservation System) for the Station you wish to get arrival information for, e.g. KGX for London Kings Cross.
     * @param {String} apiKey The National Rail OpenLDBWS API Key to use for looking up service information. You must register with National Rail to obtain this key and whitelist it with us. See https://api.departureboard.io/docs/registration for more information.
     * @param {Object} opts Optional parameters
     * @param {Number} [numServices = 10)] The number of arriving train services to return. This is a maximum value, less may be returned if there is not a sufficient amount of services running to this station within the time window specified.
     * @param {Number} [timeOffset = 0)] The time window in minutes to offset the arrival information by. For example, a value of 20 will not show services arriving within the next 20 minutes.
     * @param {Number} [timeWindow = 120)] The time window to show train services for in minutes. For example, a value of 60 will show services arriving to the station in the next 60 minutes.
     * @param {Boolean} [serviceDetails = true)] Should the response contain information on the calling points for each service? If set to false, calling points will not be returned.
     * @param {String} [filterStation] The CRS (Computer Reservation System) code to filter the results by. For example, performing a lookup for PAD (London Paddington) and setting filterStation to RED (Reading), will only show services arriving to Paddington that stopped at Reading.
     * @param {module:api/DeparturesArrivalsApi~getArrivalsByCRSCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getArrivalsByCRS(CRS, apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'CRS' is set
      if (CRS === undefined || CRS === null) {
        throw new Error("Missing the required parameter 'CRS' when calling getArrivalsByCRS");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getArrivalsByCRS");
      }

      let pathParams = {
        'CRS': CRS
      };
      let queryParams = {
        'apiKey': apiKey,
        'numServices': opts['numServices'],
        'timeOffset': opts['timeOffset'],
        'timeWindow': opts['timeWindow'],
        'serviceDetails': opts['serviceDetails'],
        'filterStation': opts['filterStation']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/getArrivalsByCRS/{CRS}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeparturesByCRS operation.
     * @callback module:api/DeparturesArrivalsApi~getDeparturesByCRSCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getDeparturesByCRS is used to get a list of services departing from a UK train station by the CRS (Computer Reservation System) code. This will typically return a list of train services, but will also return any replacement bus or ferry services that are in place.
     * @param {String} CRS The CRS (Computer Reservation System) for the station you wish to get departure information for, e.g. KGX for London Kings Cross.
     * @param {String} apiKey The National Rail OpenLDBWS API Key to use for looking up service information. You must register with National Rail to obtain this key and whitelist it with us. See https://api.departureboard.io/docs/registration for more information.
     * @param {Object} opts Optional parameters
     * @param {Number} [numServices = 10)] The number of departing services to return. This is a maximum value, less may be returned if there is not a sufficient amount of services running from the selected station within the time window specified.
     * @param {Number} [timeOffset = 0)] The time window in minutes to offset the departure information by. For example, a value of 20 will not show services departing within the next 20 minutes.
     * @param {Number} [timeWindow = 120)] The time window to show services for in minutes. For example, a value of 60 will show services departing the station in the next 60 minutes.
     * @param {Boolean} [serviceDetails = true)] Should the response contain information on the calling points for each service? If set to false, calling points will not be returned.
     * @param {String} [filterStation] The CRS (Computer Reservation System) code to filter the results by. For example, performing a lookup for PAD (London Paddington) and setting filterStation to RED (Reading), will only show services departing from Paddington that stop at Reading.
     * @param {module:api/DeparturesArrivalsApi~getDeparturesByCRSCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDeparturesByCRS(CRS, apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'CRS' is set
      if (CRS === undefined || CRS === null) {
        throw new Error("Missing the required parameter 'CRS' when calling getDeparturesByCRS");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getDeparturesByCRS");
      }

      let pathParams = {
        'CRS': CRS
      };
      let queryParams = {
        'apiKey': apiKey,
        'numServices': opts['numServices'],
        'timeOffset': opts['timeOffset'],
        'timeWindow': opts['timeWindow'],
        'serviceDetails': opts['serviceDetails'],
        'filterStation': opts['filterStation']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/getDeparturesByCRS/{CRS}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
