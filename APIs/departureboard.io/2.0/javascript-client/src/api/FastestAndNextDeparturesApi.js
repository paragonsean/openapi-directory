/**
 * departureboard.io API
 * The departureboard.io is a high performance API written in Golang. Its goal is to provide to main functions:<br><br> (1): A JSON API interface to the legacy National Rail SOAP API: Giving developers the ability to pull live information on departures, arrivals, and services from National Rail, without having to use the legacy SOAP API provided by National Rail. Information is still pulled directly from National Rail in the background, providing the same level of real-time data without the additional complexity of having to interact with SOAP. <br><br>(2): A JSON API interface for additional National Rail information: Giving developers the ability to pull a range of information about the Rail Network, via a JSON API interface. This is not an offering that National Rail currently provide, and is custom developed. Data is sourced from periodically updated XML documents, parsed, and provided for consumption via the departureboard.io API.<br><br>This API is completely free to use for non-commercial purposes. You can explore the various sections of the documentation using the links below.<br><br> For more information please see <a href=\"https://api.departureboard.io\">https://api.departureboard.io</a>
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* FastestAndNextDepartures service.
* @module api/FastestAndNextDeparturesApi
* @version 2.0
*/
export default class FastestAndNextDeparturesApi {

    /**
    * Constructs a new FastestAndNextDeparturesApi. 
    * @alias module:api/FastestAndNextDeparturesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getFastestDeparturesByCRS operation.
     * @callback module:api/FastestAndNextDeparturesApi~getFastestDeparturesByCRSCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getFastestDeparturesByCRS is used to get the fastest next service running between two stations. Multiple destinations can be specified. This will typically return a single train service, but will also return a replacement bus or ferry service if in place.
     * @param {String} CRS The CRS (Computer Reservation System) for the station you wish to get departure information for, e.g. KGX for London Kings Cross.
     * @param {String} apiKey The National Rail OpenLDBWS API Key to use for looking up service information. You must register with National Rail to obtain this key and whitelist it with us. See https://api.departureboard.io/docs/registration for more information.
     * @param {String} filterList The CRS (Computer Reservation System) codes to show the fastest departing services to. Up to 20 destination stations can be specified. These should be split by a comma, for example HAY,EAL,PAD.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeOffset = 0)] The time window in minutes to offset the departure information by. For example, a value of 20 will show the fastest services departing after 20 minutes.
     * @param {Number} [timeWindow = 120)] The time window to show train services for in minutes. For example, a value of 60 will show the fastest services departing the station in the next 60 minutes.
     * @param {Boolean} [serviceDetails = true)] Should the response contain information on the calling points for each service? If set to false, calling points will not be returned.
     * @param {module:api/FastestAndNextDeparturesApi~getFastestDeparturesByCRSCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getFastestDeparturesByCRS(CRS, apiKey, filterList, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'CRS' is set
      if (CRS === undefined || CRS === null) {
        throw new Error("Missing the required parameter 'CRS' when calling getFastestDeparturesByCRS");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getFastestDeparturesByCRS");
      }
      // verify the required parameter 'filterList' is set
      if (filterList === undefined || filterList === null) {
        throw new Error("Missing the required parameter 'filterList' when calling getFastestDeparturesByCRS");
      }

      let pathParams = {
        'CRS': CRS
      };
      let queryParams = {
        'apiKey': apiKey,
        'filterList': filterList,
        'timeOffset': opts['timeOffset'],
        'timeWindow': opts['timeWindow'],
        'serviceDetails': opts['serviceDetails']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/getFastestDeparturesByCRS/{CRS}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNextDeparturesByCRS operation.
     * @callback module:api/FastestAndNextDeparturesApi~getNextDeparturesByCRSCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getNextDeparturesByCRS is used to get the next service running between two stations. Multiple destinations can be specified. This will typically return a single train service, but will also return a replacement bus or ferry service if in place. This will return the next departures for each of the filterList stations specified. It may not return the fastest next service. To get the fastest next service use the getFastestDeparturesByCRS endpoint.
     * @param {String} CRS The CRS (Computer Reservation System) for the station you wish to get departure information for, e.g. KGX for London Kings Cross.
     * @param {String} apiKey The National Rail OpenLDBWS API Key to use for looking up service information. You must register with National Rail to obtain this key and whitelist it with us. See https://api.departureboard.io/docs/registration for more information.
     * @param {String} filterList The CRS (Computer Reservation System) codes to show departing services to. Up to 20 destination stations can be specified. These should be split by a comma, for example HAY,EAL,PAD.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeOffset = 0)] The time window in minutes to offset the arrival and departure information by. For example, a value of 20 will not show services arriving to or departing from the station within the next 20 minutes.
     * @param {Number} [timeWindow = 120)] The time window in minutes to offset the arrival and departure information by. For example, a value of 20 will not show services arriving to or departing from the selected station within the next 20 minutes.
     * @param {Boolean} [serviceDetails = true)] Should the response contain information on the calling points for each service? If set to false, calling points will not be returned.
     * @param {module:api/FastestAndNextDeparturesApi~getNextDeparturesByCRSCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getNextDeparturesByCRS(CRS, apiKey, filterList, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'CRS' is set
      if (CRS === undefined || CRS === null) {
        throw new Error("Missing the required parameter 'CRS' when calling getNextDeparturesByCRS");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getNextDeparturesByCRS");
      }
      // verify the required parameter 'filterList' is set
      if (filterList === undefined || filterList === null) {
        throw new Error("Missing the required parameter 'filterList' when calling getNextDeparturesByCRS");
      }

      let pathParams = {
        'CRS': CRS
      };
      let queryParams = {
        'apiKey': apiKey,
        'filterList': filterList,
        'timeOffset': opts['timeOffset'],
        'timeWindow': opts['timeWindow'],
        'serviceDetails': opts['serviceDetails']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/getNextDeparturesByCRS/{CRS}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
