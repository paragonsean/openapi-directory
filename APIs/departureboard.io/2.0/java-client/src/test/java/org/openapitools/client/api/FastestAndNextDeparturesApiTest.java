/*
 * departureboard.io API
 * The departureboard.io is a high performance API written in Golang. Its goal is to provide to main functions:<br><br> (1): A JSON API interface to the legacy National Rail SOAP API: Giving developers the ability to pull live information on departures, arrivals, and services from National Rail, without having to use the legacy SOAP API provided by National Rail. Information is still pulled directly from National Rail in the background, providing the same level of real-time data without the additional complexity of having to interact with SOAP. <br><br>(2): A JSON API interface for additional National Rail information: Giving developers the ability to pull a range of information about the Rail Network, via a JSON API interface. This is not an offering that National Rail currently provide, and is custom developed. Data is sourced from periodically updated XML documents, parsed, and provided for consumption via the departureboard.io API.<br><br>This API is completely free to use for non-commercial purposes. You can explore the various sections of the documentation using the links below.<br><br> For more information please see <a href=\"https://api.departureboard.io\">https://api.departureboard.io</a>
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FastestAndNextDeparturesApi
 */
@Disabled
public class FastestAndNextDeparturesApiTest {

    private final FastestAndNextDeparturesApi api = new FastestAndNextDeparturesApi();

    /**
     * getFastestDeparturesByCRS is used to get the fastest next service running between two stations. Multiple destinations can be specified. This will typically return a single train service, but will also return a replacement bus or ferry service if in place.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFastestDeparturesByCRSTest() throws ApiException {
        String CRS = null;
        String apiKey = null;
        String filterList = null;
        Integer timeOffset = null;
        Integer timeWindow = null;
        Boolean serviceDetails = null;
        api.getFastestDeparturesByCRS(CRS, apiKey, filterList, timeOffset, timeWindow, serviceDetails);
        // TODO: test validations
    }

    /**
     * getNextDeparturesByCRS is used to get the next service running between two stations. Multiple destinations can be specified. This will typically return a single train service, but will also return a replacement bus or ferry service if in place. This will return the next departures for each of the filterList stations specified. It may not return the fastest next service. To get the fastest next service use the getFastestDeparturesByCRS endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNextDeparturesByCRSTest() throws ApiException {
        String CRS = null;
        String apiKey = null;
        String filterList = null;
        Integer timeOffset = null;
        Integer timeWindow = null;
        Boolean serviceDetails = null;
        api.getNextDeparturesByCRS(CRS, apiKey, filterList, timeOffset, timeWindow, serviceDetails);
        // TODO: test validations
    }

}
