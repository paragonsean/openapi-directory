/*
 * departureboard.io API
 * The departureboard.io is a high performance API written in Golang. Its goal is to provide to main functions:<br><br> (1): A JSON API interface to the legacy National Rail SOAP API: Giving developers the ability to pull live information on departures, arrivals, and services from National Rail, without having to use the legacy SOAP API provided by National Rail. Information is still pulled directly from National Rail in the background, providing the same level of real-time data without the additional complexity of having to interact with SOAP. <br><br>(2): A JSON API interface for additional National Rail information: Giving developers the ability to pull a range of information about the Rail Network, via a JSON API interface. This is not an offering that National Rail currently provide, and is custom developed. Data is sourced from periodically updated XML documents, parsed, and provided for consumption via the departureboard.io API.<br><br>This API is completely free to use for non-commercial purposes. You can explore the various sections of the documentation using the links below.<br><br> For more information please see <a href=\"https://api.departureboard.io\">https://api.departureboard.io</a>
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DeparturesArrivalsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DeparturesArrivalsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DeparturesArrivalsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getArrivalsAndDeparturesByCRS
     * @param CRS The CRS (Computer Reservation System) for the Station you wish to get departure and arrival information for, e.g. KGX for London Kings Cross. (required)
     * @param apiKey The National Rail OpenLDBWS API Key to use for looking up service information. You must register with National Rail to obtain this key and whitelist it with us. See https://api.departureboard.io/docs/registration for more information. (required)
     * @param numServices The number of arriving and departing services to return. This is a maximum value, less may be returned if there is not a sufficient amount of services arriving to or departing from this station within the time window specified. (optional, default to 10)
     * @param timeOffset The time window in minutes to offset the arrival and departure information by. For example, a value of 20 will not show services arriving to or departing from the station within the next 20 minutes. (optional, default to 0)
     * @param timeWindow The time window in minutes to offset the arrival and departure information by. For example, a value of 20 will not show services arriving to or departing from the selected station within the next 20 minutes. (optional, default to 120)
     * @param serviceDetails Should the response contain information on the calling points for each service? If set to false, calling points will not be returned. (optional, default to true)
     * @param filterStation The CRS (Computer Reservation System) code to filter the results by. When setting this you must also set the filterType parameter. For example, performing a lookup for PAD (London Paddington) and setting filterStation to RED (Reading) and filterType to from, will only show services arriving to London Paddington that stopped at Reading. Setting a filter for getArrivalsAndDeparturesByCRS is similar to performing a getArrivalsByCRS or getDeparturesByCRS lookup, with the appropriate filterStation parameter. However using the getArrivalsAndDeparturesByCRS endpoint shows more details for each of the returned services. (optional)
     * @param filterType Determines if the filterStation parameter should be applied for services arriving to, or leaving from the selected station. Required if filterStation is set. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **OK**: The API Request was successful and returned data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was not valid. &lt;br&gt;&lt;br&gt;The departureboard.io API performs validation of queries to make sure they make sense and will return a valid response from National Rail. Bad queries made directly to the National Rail API return a generic &#x60;500 Internal Server Error&#x60; response which is difficult to troubleshoot.&lt;br&gt;&lt;br&gt;By validating requests the departureboard.io API can provide improved error messages to help with troubleshooting, and prevent bad queries from ever reaching National Rail. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Unauthorized**: Your National Rail API key is wrong or your key has not been registered in the [departureboard.io API Portal](https://api-portal.departureboard.io) as detailed in the [registration](https://api.departureboard.io/docs/registration) section of the documentation.&lt;br&gt;&lt;br&gt;You should double check your API Key is valid and has been whitelisted. Newly generated API Keys can take up to 15 minutes to become active. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> **Too Many Requests**: You have exceeded the rate limit. &lt;br&gt;&lt;br&gt;Get in touch to arrange an exception, or slow down your requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Internal Server Error**: There was an unknown error returning the response.&lt;br&gt;&lt;br&gt;This error is served when an unknown error is encountered returning your response. This is often due to upstream problems with National Rail, for example them returning a bad response or malformed data. In rare circumstances it can be caused by a bad request that was not caught in the departureboard.io validation. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> **Service Unavailable**: The National Rail upstream API is experiencing issues.&lt;br&gt;&lt;br&gt;This error is returned when the departureboard.io API detects issues with the upstream National Rail API. The departureboard.io API is functioning but cannot return a result as the National Rail API is down. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArrivalsAndDeparturesByCRSCall(String CRS, String apiKey, Integer numServices, Integer timeOffset, Integer timeWindow, Boolean serviceDetails, String filterStation, String filterType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getArrivalsAndDeparturesByCRS/{CRS}"
            .replace("{" + "CRS" + "}", localVarApiClient.escapeString(CRS.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apiKey", apiKey));
        }

        if (numServices != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numServices", numServices));
        }

        if (timeOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeOffset", timeOffset));
        }

        if (timeWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeWindow", timeWindow));
        }

        if (serviceDetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceDetails", serviceDetails));
        }

        if (filterStation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterStation", filterStation));
        }

        if (filterType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterType", filterType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getArrivalsAndDeparturesByCRSValidateBeforeCall(String CRS, String apiKey, Integer numServices, Integer timeOffset, Integer timeWindow, Boolean serviceDetails, String filterStation, String filterType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'CRS' is set
        if (CRS == null) {
            throw new ApiException("Missing the required parameter 'CRS' when calling getArrivalsAndDeparturesByCRS(Async)");
        }

        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getArrivalsAndDeparturesByCRS(Async)");
        }

        return getArrivalsAndDeparturesByCRSCall(CRS, apiKey, numServices, timeOffset, timeWindow, serviceDetails, filterStation, filterType, _callback);

    }

    /**
     * getArrivalsAndDeparturesByCRS is used to get a list of services arriving to and departing from a UK train station by the CRS (Computer Reservation System) code. This will typically return a list of train services, but will also return any replacement bus or ferry services that are in place.
     * 
     * @param CRS The CRS (Computer Reservation System) for the Station you wish to get departure and arrival information for, e.g. KGX for London Kings Cross. (required)
     * @param apiKey The National Rail OpenLDBWS API Key to use for looking up service information. You must register with National Rail to obtain this key and whitelist it with us. See https://api.departureboard.io/docs/registration for more information. (required)
     * @param numServices The number of arriving and departing services to return. This is a maximum value, less may be returned if there is not a sufficient amount of services arriving to or departing from this station within the time window specified. (optional, default to 10)
     * @param timeOffset The time window in minutes to offset the arrival and departure information by. For example, a value of 20 will not show services arriving to or departing from the station within the next 20 minutes. (optional, default to 0)
     * @param timeWindow The time window in minutes to offset the arrival and departure information by. For example, a value of 20 will not show services arriving to or departing from the selected station within the next 20 minutes. (optional, default to 120)
     * @param serviceDetails Should the response contain information on the calling points for each service? If set to false, calling points will not be returned. (optional, default to true)
     * @param filterStation The CRS (Computer Reservation System) code to filter the results by. When setting this you must also set the filterType parameter. For example, performing a lookup for PAD (London Paddington) and setting filterStation to RED (Reading) and filterType to from, will only show services arriving to London Paddington that stopped at Reading. Setting a filter for getArrivalsAndDeparturesByCRS is similar to performing a getArrivalsByCRS or getDeparturesByCRS lookup, with the appropriate filterStation parameter. However using the getArrivalsAndDeparturesByCRS endpoint shows more details for each of the returned services. (optional)
     * @param filterType Determines if the filterStation parameter should be applied for services arriving to, or leaving from the selected station. Required if filterStation is set. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **OK**: The API Request was successful and returned data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was not valid. &lt;br&gt;&lt;br&gt;The departureboard.io API performs validation of queries to make sure they make sense and will return a valid response from National Rail. Bad queries made directly to the National Rail API return a generic &#x60;500 Internal Server Error&#x60; response which is difficult to troubleshoot.&lt;br&gt;&lt;br&gt;By validating requests the departureboard.io API can provide improved error messages to help with troubleshooting, and prevent bad queries from ever reaching National Rail. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Unauthorized**: Your National Rail API key is wrong or your key has not been registered in the [departureboard.io API Portal](https://api-portal.departureboard.io) as detailed in the [registration](https://api.departureboard.io/docs/registration) section of the documentation.&lt;br&gt;&lt;br&gt;You should double check your API Key is valid and has been whitelisted. Newly generated API Keys can take up to 15 minutes to become active. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> **Too Many Requests**: You have exceeded the rate limit. &lt;br&gt;&lt;br&gt;Get in touch to arrange an exception, or slow down your requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Internal Server Error**: There was an unknown error returning the response.&lt;br&gt;&lt;br&gt;This error is served when an unknown error is encountered returning your response. This is often due to upstream problems with National Rail, for example them returning a bad response or malformed data. In rare circumstances it can be caused by a bad request that was not caught in the departureboard.io validation. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> **Service Unavailable**: The National Rail upstream API is experiencing issues.&lt;br&gt;&lt;br&gt;This error is returned when the departureboard.io API detects issues with the upstream National Rail API. The departureboard.io API is functioning but cannot return a result as the National Rail API is down. </td><td>  -  </td></tr>
     </table>
     */
    public void getArrivalsAndDeparturesByCRS(String CRS, String apiKey, Integer numServices, Integer timeOffset, Integer timeWindow, Boolean serviceDetails, String filterStation, String filterType) throws ApiException {
        getArrivalsAndDeparturesByCRSWithHttpInfo(CRS, apiKey, numServices, timeOffset, timeWindow, serviceDetails, filterStation, filterType);
    }

    /**
     * getArrivalsAndDeparturesByCRS is used to get a list of services arriving to and departing from a UK train station by the CRS (Computer Reservation System) code. This will typically return a list of train services, but will also return any replacement bus or ferry services that are in place.
     * 
     * @param CRS The CRS (Computer Reservation System) for the Station you wish to get departure and arrival information for, e.g. KGX for London Kings Cross. (required)
     * @param apiKey The National Rail OpenLDBWS API Key to use for looking up service information. You must register with National Rail to obtain this key and whitelist it with us. See https://api.departureboard.io/docs/registration for more information. (required)
     * @param numServices The number of arriving and departing services to return. This is a maximum value, less may be returned if there is not a sufficient amount of services arriving to or departing from this station within the time window specified. (optional, default to 10)
     * @param timeOffset The time window in minutes to offset the arrival and departure information by. For example, a value of 20 will not show services arriving to or departing from the station within the next 20 minutes. (optional, default to 0)
     * @param timeWindow The time window in minutes to offset the arrival and departure information by. For example, a value of 20 will not show services arriving to or departing from the selected station within the next 20 minutes. (optional, default to 120)
     * @param serviceDetails Should the response contain information on the calling points for each service? If set to false, calling points will not be returned. (optional, default to true)
     * @param filterStation The CRS (Computer Reservation System) code to filter the results by. When setting this you must also set the filterType parameter. For example, performing a lookup for PAD (London Paddington) and setting filterStation to RED (Reading) and filterType to from, will only show services arriving to London Paddington that stopped at Reading. Setting a filter for getArrivalsAndDeparturesByCRS is similar to performing a getArrivalsByCRS or getDeparturesByCRS lookup, with the appropriate filterStation parameter. However using the getArrivalsAndDeparturesByCRS endpoint shows more details for each of the returned services. (optional)
     * @param filterType Determines if the filterStation parameter should be applied for services arriving to, or leaving from the selected station. Required if filterStation is set. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **OK**: The API Request was successful and returned data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was not valid. &lt;br&gt;&lt;br&gt;The departureboard.io API performs validation of queries to make sure they make sense and will return a valid response from National Rail. Bad queries made directly to the National Rail API return a generic &#x60;500 Internal Server Error&#x60; response which is difficult to troubleshoot.&lt;br&gt;&lt;br&gt;By validating requests the departureboard.io API can provide improved error messages to help with troubleshooting, and prevent bad queries from ever reaching National Rail. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Unauthorized**: Your National Rail API key is wrong or your key has not been registered in the [departureboard.io API Portal](https://api-portal.departureboard.io) as detailed in the [registration](https://api.departureboard.io/docs/registration) section of the documentation.&lt;br&gt;&lt;br&gt;You should double check your API Key is valid and has been whitelisted. Newly generated API Keys can take up to 15 minutes to become active. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> **Too Many Requests**: You have exceeded the rate limit. &lt;br&gt;&lt;br&gt;Get in touch to arrange an exception, or slow down your requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Internal Server Error**: There was an unknown error returning the response.&lt;br&gt;&lt;br&gt;This error is served when an unknown error is encountered returning your response. This is often due to upstream problems with National Rail, for example them returning a bad response or malformed data. In rare circumstances it can be caused by a bad request that was not caught in the departureboard.io validation. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> **Service Unavailable**: The National Rail upstream API is experiencing issues.&lt;br&gt;&lt;br&gt;This error is returned when the departureboard.io API detects issues with the upstream National Rail API. The departureboard.io API is functioning but cannot return a result as the National Rail API is down. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getArrivalsAndDeparturesByCRSWithHttpInfo(String CRS, String apiKey, Integer numServices, Integer timeOffset, Integer timeWindow, Boolean serviceDetails, String filterStation, String filterType) throws ApiException {
        okhttp3.Call localVarCall = getArrivalsAndDeparturesByCRSValidateBeforeCall(CRS, apiKey, numServices, timeOffset, timeWindow, serviceDetails, filterStation, filterType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getArrivalsAndDeparturesByCRS is used to get a list of services arriving to and departing from a UK train station by the CRS (Computer Reservation System) code. This will typically return a list of train services, but will also return any replacement bus or ferry services that are in place. (asynchronously)
     * 
     * @param CRS The CRS (Computer Reservation System) for the Station you wish to get departure and arrival information for, e.g. KGX for London Kings Cross. (required)
     * @param apiKey The National Rail OpenLDBWS API Key to use for looking up service information. You must register with National Rail to obtain this key and whitelist it with us. See https://api.departureboard.io/docs/registration for more information. (required)
     * @param numServices The number of arriving and departing services to return. This is a maximum value, less may be returned if there is not a sufficient amount of services arriving to or departing from this station within the time window specified. (optional, default to 10)
     * @param timeOffset The time window in minutes to offset the arrival and departure information by. For example, a value of 20 will not show services arriving to or departing from the station within the next 20 minutes. (optional, default to 0)
     * @param timeWindow The time window in minutes to offset the arrival and departure information by. For example, a value of 20 will not show services arriving to or departing from the selected station within the next 20 minutes. (optional, default to 120)
     * @param serviceDetails Should the response contain information on the calling points for each service? If set to false, calling points will not be returned. (optional, default to true)
     * @param filterStation The CRS (Computer Reservation System) code to filter the results by. When setting this you must also set the filterType parameter. For example, performing a lookup for PAD (London Paddington) and setting filterStation to RED (Reading) and filterType to from, will only show services arriving to London Paddington that stopped at Reading. Setting a filter for getArrivalsAndDeparturesByCRS is similar to performing a getArrivalsByCRS or getDeparturesByCRS lookup, with the appropriate filterStation parameter. However using the getArrivalsAndDeparturesByCRS endpoint shows more details for each of the returned services. (optional)
     * @param filterType Determines if the filterStation parameter should be applied for services arriving to, or leaving from the selected station. Required if filterStation is set. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **OK**: The API Request was successful and returned data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was not valid. &lt;br&gt;&lt;br&gt;The departureboard.io API performs validation of queries to make sure they make sense and will return a valid response from National Rail. Bad queries made directly to the National Rail API return a generic &#x60;500 Internal Server Error&#x60; response which is difficult to troubleshoot.&lt;br&gt;&lt;br&gt;By validating requests the departureboard.io API can provide improved error messages to help with troubleshooting, and prevent bad queries from ever reaching National Rail. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Unauthorized**: Your National Rail API key is wrong or your key has not been registered in the [departureboard.io API Portal](https://api-portal.departureboard.io) as detailed in the [registration](https://api.departureboard.io/docs/registration) section of the documentation.&lt;br&gt;&lt;br&gt;You should double check your API Key is valid and has been whitelisted. Newly generated API Keys can take up to 15 minutes to become active. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> **Too Many Requests**: You have exceeded the rate limit. &lt;br&gt;&lt;br&gt;Get in touch to arrange an exception, or slow down your requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Internal Server Error**: There was an unknown error returning the response.&lt;br&gt;&lt;br&gt;This error is served when an unknown error is encountered returning your response. This is often due to upstream problems with National Rail, for example them returning a bad response or malformed data. In rare circumstances it can be caused by a bad request that was not caught in the departureboard.io validation. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> **Service Unavailable**: The National Rail upstream API is experiencing issues.&lt;br&gt;&lt;br&gt;This error is returned when the departureboard.io API detects issues with the upstream National Rail API. The departureboard.io API is functioning but cannot return a result as the National Rail API is down. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArrivalsAndDeparturesByCRSAsync(String CRS, String apiKey, Integer numServices, Integer timeOffset, Integer timeWindow, Boolean serviceDetails, String filterStation, String filterType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getArrivalsAndDeparturesByCRSValidateBeforeCall(CRS, apiKey, numServices, timeOffset, timeWindow, serviceDetails, filterStation, filterType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getArrivalsByCRS
     * @param CRS The CRS (Computer Reservation System) for the Station you wish to get arrival information for, e.g. KGX for London Kings Cross. (required)
     * @param apiKey The National Rail OpenLDBWS API Key to use for looking up service information. You must register with National Rail to obtain this key and whitelist it with us. See https://api.departureboard.io/docs/registration for more information. (required)
     * @param numServices The number of arriving train services to return. This is a maximum value, less may be returned if there is not a sufficient amount of services running to this station within the time window specified. (optional, default to 10)
     * @param timeOffset The time window in minutes to offset the arrival information by. For example, a value of 20 will not show services arriving within the next 20 minutes. (optional, default to 0)
     * @param timeWindow The time window to show train services for in minutes. For example, a value of 60 will show services arriving to the station in the next 60 minutes. (optional, default to 120)
     * @param serviceDetails Should the response contain information on the calling points for each service? If set to false, calling points will not be returned. (optional, default to true)
     * @param filterStation The CRS (Computer Reservation System) code to filter the results by. For example, performing a lookup for PAD (London Paddington) and setting filterStation to RED (Reading), will only show services arriving to Paddington that stopped at Reading. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **OK**: The API Request was successful and returned data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was not valid. &lt;br&gt;&lt;br&gt;The departureboard.io API performs validation of queries to make sure they make sense and will return a valid response from National Rail. Bad queries made directly to the National Rail API return a generic &#x60;500 Internal Server Error&#x60; response which is difficult to troubleshoot.&lt;br&gt;&lt;br&gt;By validating requests the departureboard.io API can provide improved error messages to help with troubleshooting, and prevent bad queries from ever reaching National Rail. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Unauthorized**: Your National Rail API key is wrong or your key has not been registered in the [departureboard.io API Portal](https://api-portal.departureboard.io) as detailed in the [registration](https://api.departureboard.io/docs/registration) section of the documentation.&lt;br&gt;&lt;br&gt;You should double check your API Key is valid and has been whitelisted. Newly generated API Keys can take up to 15 minutes to become active. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> **Too Many Requests**: You have exceeded the rate limit. &lt;br&gt;&lt;br&gt;Get in touch to arrange an exception, or slow down your requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Internal Server Error**: There was an unknown error returning the response.&lt;br&gt;&lt;br&gt;This error is served when an unknown error is encountered returning your response. This is often due to upstream problems with National Rail, for example them returning a bad response or malformed data. In rare circumstances it can be caused by a bad request that was not caught in the departureboard.io validation. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> **Service Unavailable**: The National Rail upstream API is experiencing issues.&lt;br&gt;&lt;br&gt;This error is returned when the departureboard.io API detects issues with the upstream National Rail API. The departureboard.io API is functioning but cannot return a result as the National Rail API is down. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArrivalsByCRSCall(String CRS, String apiKey, Integer numServices, Integer timeOffset, Integer timeWindow, Boolean serviceDetails, String filterStation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getArrivalsByCRS/{CRS}"
            .replace("{" + "CRS" + "}", localVarApiClient.escapeString(CRS.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apiKey", apiKey));
        }

        if (numServices != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numServices", numServices));
        }

        if (timeOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeOffset", timeOffset));
        }

        if (timeWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeWindow", timeWindow));
        }

        if (serviceDetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceDetails", serviceDetails));
        }

        if (filterStation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterStation", filterStation));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getArrivalsByCRSValidateBeforeCall(String CRS, String apiKey, Integer numServices, Integer timeOffset, Integer timeWindow, Boolean serviceDetails, String filterStation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'CRS' is set
        if (CRS == null) {
            throw new ApiException("Missing the required parameter 'CRS' when calling getArrivalsByCRS(Async)");
        }

        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getArrivalsByCRS(Async)");
        }

        return getArrivalsByCRSCall(CRS, apiKey, numServices, timeOffset, timeWindow, serviceDetails, filterStation, _callback);

    }

    /**
     * getArrivalsByCRS is used to get a list of services arriving to a UK train station by the CRS (Computer Reservation System) code. This will typically return a list of train services, but will also return any replacement bus or ferry services that are in place.
     * 
     * @param CRS The CRS (Computer Reservation System) for the Station you wish to get arrival information for, e.g. KGX for London Kings Cross. (required)
     * @param apiKey The National Rail OpenLDBWS API Key to use for looking up service information. You must register with National Rail to obtain this key and whitelist it with us. See https://api.departureboard.io/docs/registration for more information. (required)
     * @param numServices The number of arriving train services to return. This is a maximum value, less may be returned if there is not a sufficient amount of services running to this station within the time window specified. (optional, default to 10)
     * @param timeOffset The time window in minutes to offset the arrival information by. For example, a value of 20 will not show services arriving within the next 20 minutes. (optional, default to 0)
     * @param timeWindow The time window to show train services for in minutes. For example, a value of 60 will show services arriving to the station in the next 60 minutes. (optional, default to 120)
     * @param serviceDetails Should the response contain information on the calling points for each service? If set to false, calling points will not be returned. (optional, default to true)
     * @param filterStation The CRS (Computer Reservation System) code to filter the results by. For example, performing a lookup for PAD (London Paddington) and setting filterStation to RED (Reading), will only show services arriving to Paddington that stopped at Reading. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **OK**: The API Request was successful and returned data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was not valid. &lt;br&gt;&lt;br&gt;The departureboard.io API performs validation of queries to make sure they make sense and will return a valid response from National Rail. Bad queries made directly to the National Rail API return a generic &#x60;500 Internal Server Error&#x60; response which is difficult to troubleshoot.&lt;br&gt;&lt;br&gt;By validating requests the departureboard.io API can provide improved error messages to help with troubleshooting, and prevent bad queries from ever reaching National Rail. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Unauthorized**: Your National Rail API key is wrong or your key has not been registered in the [departureboard.io API Portal](https://api-portal.departureboard.io) as detailed in the [registration](https://api.departureboard.io/docs/registration) section of the documentation.&lt;br&gt;&lt;br&gt;You should double check your API Key is valid and has been whitelisted. Newly generated API Keys can take up to 15 minutes to become active. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> **Too Many Requests**: You have exceeded the rate limit. &lt;br&gt;&lt;br&gt;Get in touch to arrange an exception, or slow down your requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Internal Server Error**: There was an unknown error returning the response.&lt;br&gt;&lt;br&gt;This error is served when an unknown error is encountered returning your response. This is often due to upstream problems with National Rail, for example them returning a bad response or malformed data. In rare circumstances it can be caused by a bad request that was not caught in the departureboard.io validation. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> **Service Unavailable**: The National Rail upstream API is experiencing issues.&lt;br&gt;&lt;br&gt;This error is returned when the departureboard.io API detects issues with the upstream National Rail API. The departureboard.io API is functioning but cannot return a result as the National Rail API is down. </td><td>  -  </td></tr>
     </table>
     */
    public void getArrivalsByCRS(String CRS, String apiKey, Integer numServices, Integer timeOffset, Integer timeWindow, Boolean serviceDetails, String filterStation) throws ApiException {
        getArrivalsByCRSWithHttpInfo(CRS, apiKey, numServices, timeOffset, timeWindow, serviceDetails, filterStation);
    }

    /**
     * getArrivalsByCRS is used to get a list of services arriving to a UK train station by the CRS (Computer Reservation System) code. This will typically return a list of train services, but will also return any replacement bus or ferry services that are in place.
     * 
     * @param CRS The CRS (Computer Reservation System) for the Station you wish to get arrival information for, e.g. KGX for London Kings Cross. (required)
     * @param apiKey The National Rail OpenLDBWS API Key to use for looking up service information. You must register with National Rail to obtain this key and whitelist it with us. See https://api.departureboard.io/docs/registration for more information. (required)
     * @param numServices The number of arriving train services to return. This is a maximum value, less may be returned if there is not a sufficient amount of services running to this station within the time window specified. (optional, default to 10)
     * @param timeOffset The time window in minutes to offset the arrival information by. For example, a value of 20 will not show services arriving within the next 20 minutes. (optional, default to 0)
     * @param timeWindow The time window to show train services for in minutes. For example, a value of 60 will show services arriving to the station in the next 60 minutes. (optional, default to 120)
     * @param serviceDetails Should the response contain information on the calling points for each service? If set to false, calling points will not be returned. (optional, default to true)
     * @param filterStation The CRS (Computer Reservation System) code to filter the results by. For example, performing a lookup for PAD (London Paddington) and setting filterStation to RED (Reading), will only show services arriving to Paddington that stopped at Reading. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **OK**: The API Request was successful and returned data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was not valid. &lt;br&gt;&lt;br&gt;The departureboard.io API performs validation of queries to make sure they make sense and will return a valid response from National Rail. Bad queries made directly to the National Rail API return a generic &#x60;500 Internal Server Error&#x60; response which is difficult to troubleshoot.&lt;br&gt;&lt;br&gt;By validating requests the departureboard.io API can provide improved error messages to help with troubleshooting, and prevent bad queries from ever reaching National Rail. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Unauthorized**: Your National Rail API key is wrong or your key has not been registered in the [departureboard.io API Portal](https://api-portal.departureboard.io) as detailed in the [registration](https://api.departureboard.io/docs/registration) section of the documentation.&lt;br&gt;&lt;br&gt;You should double check your API Key is valid and has been whitelisted. Newly generated API Keys can take up to 15 minutes to become active. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> **Too Many Requests**: You have exceeded the rate limit. &lt;br&gt;&lt;br&gt;Get in touch to arrange an exception, or slow down your requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Internal Server Error**: There was an unknown error returning the response.&lt;br&gt;&lt;br&gt;This error is served when an unknown error is encountered returning your response. This is often due to upstream problems with National Rail, for example them returning a bad response or malformed data. In rare circumstances it can be caused by a bad request that was not caught in the departureboard.io validation. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> **Service Unavailable**: The National Rail upstream API is experiencing issues.&lt;br&gt;&lt;br&gt;This error is returned when the departureboard.io API detects issues with the upstream National Rail API. The departureboard.io API is functioning but cannot return a result as the National Rail API is down. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getArrivalsByCRSWithHttpInfo(String CRS, String apiKey, Integer numServices, Integer timeOffset, Integer timeWindow, Boolean serviceDetails, String filterStation) throws ApiException {
        okhttp3.Call localVarCall = getArrivalsByCRSValidateBeforeCall(CRS, apiKey, numServices, timeOffset, timeWindow, serviceDetails, filterStation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getArrivalsByCRS is used to get a list of services arriving to a UK train station by the CRS (Computer Reservation System) code. This will typically return a list of train services, but will also return any replacement bus or ferry services that are in place. (asynchronously)
     * 
     * @param CRS The CRS (Computer Reservation System) for the Station you wish to get arrival information for, e.g. KGX for London Kings Cross. (required)
     * @param apiKey The National Rail OpenLDBWS API Key to use for looking up service information. You must register with National Rail to obtain this key and whitelist it with us. See https://api.departureboard.io/docs/registration for more information. (required)
     * @param numServices The number of arriving train services to return. This is a maximum value, less may be returned if there is not a sufficient amount of services running to this station within the time window specified. (optional, default to 10)
     * @param timeOffset The time window in minutes to offset the arrival information by. For example, a value of 20 will not show services arriving within the next 20 minutes. (optional, default to 0)
     * @param timeWindow The time window to show train services for in minutes. For example, a value of 60 will show services arriving to the station in the next 60 minutes. (optional, default to 120)
     * @param serviceDetails Should the response contain information on the calling points for each service? If set to false, calling points will not be returned. (optional, default to true)
     * @param filterStation The CRS (Computer Reservation System) code to filter the results by. For example, performing a lookup for PAD (London Paddington) and setting filterStation to RED (Reading), will only show services arriving to Paddington that stopped at Reading. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **OK**: The API Request was successful and returned data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was not valid. &lt;br&gt;&lt;br&gt;The departureboard.io API performs validation of queries to make sure they make sense and will return a valid response from National Rail. Bad queries made directly to the National Rail API return a generic &#x60;500 Internal Server Error&#x60; response which is difficult to troubleshoot.&lt;br&gt;&lt;br&gt;By validating requests the departureboard.io API can provide improved error messages to help with troubleshooting, and prevent bad queries from ever reaching National Rail. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Unauthorized**: Your National Rail API key is wrong or your key has not been registered in the [departureboard.io API Portal](https://api-portal.departureboard.io) as detailed in the [registration](https://api.departureboard.io/docs/registration) section of the documentation.&lt;br&gt;&lt;br&gt;You should double check your API Key is valid and has been whitelisted. Newly generated API Keys can take up to 15 minutes to become active. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> **Too Many Requests**: You have exceeded the rate limit. &lt;br&gt;&lt;br&gt;Get in touch to arrange an exception, or slow down your requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Internal Server Error**: There was an unknown error returning the response.&lt;br&gt;&lt;br&gt;This error is served when an unknown error is encountered returning your response. This is often due to upstream problems with National Rail, for example them returning a bad response or malformed data. In rare circumstances it can be caused by a bad request that was not caught in the departureboard.io validation. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> **Service Unavailable**: The National Rail upstream API is experiencing issues.&lt;br&gt;&lt;br&gt;This error is returned when the departureboard.io API detects issues with the upstream National Rail API. The departureboard.io API is functioning but cannot return a result as the National Rail API is down. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArrivalsByCRSAsync(String CRS, String apiKey, Integer numServices, Integer timeOffset, Integer timeWindow, Boolean serviceDetails, String filterStation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getArrivalsByCRSValidateBeforeCall(CRS, apiKey, numServices, timeOffset, timeWindow, serviceDetails, filterStation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeparturesByCRS
     * @param CRS The CRS (Computer Reservation System) for the station you wish to get departure information for, e.g. KGX for London Kings Cross. (required)
     * @param apiKey The National Rail OpenLDBWS API Key to use for looking up service information. You must register with National Rail to obtain this key and whitelist it with us. See https://api.departureboard.io/docs/registration for more information. (required)
     * @param numServices The number of departing services to return. This is a maximum value, less may be returned if there is not a sufficient amount of services running from the selected station within the time window specified. (optional, default to 10)
     * @param timeOffset The time window in minutes to offset the departure information by. For example, a value of 20 will not show services departing within the next 20 minutes. (optional, default to 0)
     * @param timeWindow The time window to show services for in minutes. For example, a value of 60 will show services departing the station in the next 60 minutes. (optional, default to 120)
     * @param serviceDetails Should the response contain information on the calling points for each service? If set to false, calling points will not be returned. (optional, default to true)
     * @param filterStation The CRS (Computer Reservation System) code to filter the results by. For example, performing a lookup for PAD (London Paddington) and setting filterStation to RED (Reading), will only show services departing from Paddington that stop at Reading. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **OK**: The API Request was successful and returned data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was not valid. &lt;br&gt;&lt;br&gt;The departureboard.io API performs validation of queries to make sure they make sense and will return a valid response from National Rail. Bad queries made directly to the National Rail API return a generic &#x60;500 Internal Server Error&#x60; response which is difficult to troubleshoot.&lt;br&gt;&lt;br&gt;By validating requests the departureboard.io API can provide improved error messages to help with troubleshooting, and prevent bad queries from ever reaching National Rail. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Unauthorized**: Your National Rail API key is wrong or your key has not been registered in the [departureboard.io API Portal](https://api-portal.departureboard.io) as detailed in the [registration](https://api.departureboard.io/docs/registration) section of the documentation.&lt;br&gt;&lt;br&gt;You should double check your API Key is valid and has been whitelisted. Newly generated API Keys can take up to 15 minutes to become active. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> **Too Many Requests**: You have exceeded the rate limit. &lt;br&gt;&lt;br&gt;Get in touch to arrange an exception, or slow down your requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Internal Server Error**: There was an unknown error returning the response.&lt;br&gt;&lt;br&gt;This error is served when an unknown error is encountered returning your response. This is often due to upstream problems with National Rail, for example them returning a bad response or malformed data. In rare circumstances it can be caused by a bad request that was not caught in the departureboard.io validation. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> **Service Unavailable**: The National Rail upstream API is experiencing issues.&lt;br&gt;&lt;br&gt;This error is returned when the departureboard.io API detects issues with the upstream National Rail API. The departureboard.io API is functioning but cannot return a result as the National Rail API is down. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeparturesByCRSCall(String CRS, String apiKey, Integer numServices, Integer timeOffset, Integer timeWindow, Boolean serviceDetails, String filterStation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getDeparturesByCRS/{CRS}"
            .replace("{" + "CRS" + "}", localVarApiClient.escapeString(CRS.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apiKey", apiKey));
        }

        if (numServices != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numServices", numServices));
        }

        if (timeOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeOffset", timeOffset));
        }

        if (timeWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeWindow", timeWindow));
        }

        if (serviceDetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceDetails", serviceDetails));
        }

        if (filterStation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterStation", filterStation));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeparturesByCRSValidateBeforeCall(String CRS, String apiKey, Integer numServices, Integer timeOffset, Integer timeWindow, Boolean serviceDetails, String filterStation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'CRS' is set
        if (CRS == null) {
            throw new ApiException("Missing the required parameter 'CRS' when calling getDeparturesByCRS(Async)");
        }

        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getDeparturesByCRS(Async)");
        }

        return getDeparturesByCRSCall(CRS, apiKey, numServices, timeOffset, timeWindow, serviceDetails, filterStation, _callback);

    }

    /**
     * getDeparturesByCRS is used to get a list of services departing from a UK train station by the CRS (Computer Reservation System) code. This will typically return a list of train services, but will also return any replacement bus or ferry services that are in place.
     * 
     * @param CRS The CRS (Computer Reservation System) for the station you wish to get departure information for, e.g. KGX for London Kings Cross. (required)
     * @param apiKey The National Rail OpenLDBWS API Key to use for looking up service information. You must register with National Rail to obtain this key and whitelist it with us. See https://api.departureboard.io/docs/registration for more information. (required)
     * @param numServices The number of departing services to return. This is a maximum value, less may be returned if there is not a sufficient amount of services running from the selected station within the time window specified. (optional, default to 10)
     * @param timeOffset The time window in minutes to offset the departure information by. For example, a value of 20 will not show services departing within the next 20 minutes. (optional, default to 0)
     * @param timeWindow The time window to show services for in minutes. For example, a value of 60 will show services departing the station in the next 60 minutes. (optional, default to 120)
     * @param serviceDetails Should the response contain information on the calling points for each service? If set to false, calling points will not be returned. (optional, default to true)
     * @param filterStation The CRS (Computer Reservation System) code to filter the results by. For example, performing a lookup for PAD (London Paddington) and setting filterStation to RED (Reading), will only show services departing from Paddington that stop at Reading. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **OK**: The API Request was successful and returned data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was not valid. &lt;br&gt;&lt;br&gt;The departureboard.io API performs validation of queries to make sure they make sense and will return a valid response from National Rail. Bad queries made directly to the National Rail API return a generic &#x60;500 Internal Server Error&#x60; response which is difficult to troubleshoot.&lt;br&gt;&lt;br&gt;By validating requests the departureboard.io API can provide improved error messages to help with troubleshooting, and prevent bad queries from ever reaching National Rail. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Unauthorized**: Your National Rail API key is wrong or your key has not been registered in the [departureboard.io API Portal](https://api-portal.departureboard.io) as detailed in the [registration](https://api.departureboard.io/docs/registration) section of the documentation.&lt;br&gt;&lt;br&gt;You should double check your API Key is valid and has been whitelisted. Newly generated API Keys can take up to 15 minutes to become active. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> **Too Many Requests**: You have exceeded the rate limit. &lt;br&gt;&lt;br&gt;Get in touch to arrange an exception, or slow down your requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Internal Server Error**: There was an unknown error returning the response.&lt;br&gt;&lt;br&gt;This error is served when an unknown error is encountered returning your response. This is often due to upstream problems with National Rail, for example them returning a bad response or malformed data. In rare circumstances it can be caused by a bad request that was not caught in the departureboard.io validation. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> **Service Unavailable**: The National Rail upstream API is experiencing issues.&lt;br&gt;&lt;br&gt;This error is returned when the departureboard.io API detects issues with the upstream National Rail API. The departureboard.io API is functioning but cannot return a result as the National Rail API is down. </td><td>  -  </td></tr>
     </table>
     */
    public void getDeparturesByCRS(String CRS, String apiKey, Integer numServices, Integer timeOffset, Integer timeWindow, Boolean serviceDetails, String filterStation) throws ApiException {
        getDeparturesByCRSWithHttpInfo(CRS, apiKey, numServices, timeOffset, timeWindow, serviceDetails, filterStation);
    }

    /**
     * getDeparturesByCRS is used to get a list of services departing from a UK train station by the CRS (Computer Reservation System) code. This will typically return a list of train services, but will also return any replacement bus or ferry services that are in place.
     * 
     * @param CRS The CRS (Computer Reservation System) for the station you wish to get departure information for, e.g. KGX for London Kings Cross. (required)
     * @param apiKey The National Rail OpenLDBWS API Key to use for looking up service information. You must register with National Rail to obtain this key and whitelist it with us. See https://api.departureboard.io/docs/registration for more information. (required)
     * @param numServices The number of departing services to return. This is a maximum value, less may be returned if there is not a sufficient amount of services running from the selected station within the time window specified. (optional, default to 10)
     * @param timeOffset The time window in minutes to offset the departure information by. For example, a value of 20 will not show services departing within the next 20 minutes. (optional, default to 0)
     * @param timeWindow The time window to show services for in minutes. For example, a value of 60 will show services departing the station in the next 60 minutes. (optional, default to 120)
     * @param serviceDetails Should the response contain information on the calling points for each service? If set to false, calling points will not be returned. (optional, default to true)
     * @param filterStation The CRS (Computer Reservation System) code to filter the results by. For example, performing a lookup for PAD (London Paddington) and setting filterStation to RED (Reading), will only show services departing from Paddington that stop at Reading. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **OK**: The API Request was successful and returned data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was not valid. &lt;br&gt;&lt;br&gt;The departureboard.io API performs validation of queries to make sure they make sense and will return a valid response from National Rail. Bad queries made directly to the National Rail API return a generic &#x60;500 Internal Server Error&#x60; response which is difficult to troubleshoot.&lt;br&gt;&lt;br&gt;By validating requests the departureboard.io API can provide improved error messages to help with troubleshooting, and prevent bad queries from ever reaching National Rail. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Unauthorized**: Your National Rail API key is wrong or your key has not been registered in the [departureboard.io API Portal](https://api-portal.departureboard.io) as detailed in the [registration](https://api.departureboard.io/docs/registration) section of the documentation.&lt;br&gt;&lt;br&gt;You should double check your API Key is valid and has been whitelisted. Newly generated API Keys can take up to 15 minutes to become active. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> **Too Many Requests**: You have exceeded the rate limit. &lt;br&gt;&lt;br&gt;Get in touch to arrange an exception, or slow down your requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Internal Server Error**: There was an unknown error returning the response.&lt;br&gt;&lt;br&gt;This error is served when an unknown error is encountered returning your response. This is often due to upstream problems with National Rail, for example them returning a bad response or malformed data. In rare circumstances it can be caused by a bad request that was not caught in the departureboard.io validation. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> **Service Unavailable**: The National Rail upstream API is experiencing issues.&lt;br&gt;&lt;br&gt;This error is returned when the departureboard.io API detects issues with the upstream National Rail API. The departureboard.io API is functioning but cannot return a result as the National Rail API is down. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getDeparturesByCRSWithHttpInfo(String CRS, String apiKey, Integer numServices, Integer timeOffset, Integer timeWindow, Boolean serviceDetails, String filterStation) throws ApiException {
        okhttp3.Call localVarCall = getDeparturesByCRSValidateBeforeCall(CRS, apiKey, numServices, timeOffset, timeWindow, serviceDetails, filterStation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getDeparturesByCRS is used to get a list of services departing from a UK train station by the CRS (Computer Reservation System) code. This will typically return a list of train services, but will also return any replacement bus or ferry services that are in place. (asynchronously)
     * 
     * @param CRS The CRS (Computer Reservation System) for the station you wish to get departure information for, e.g. KGX for London Kings Cross. (required)
     * @param apiKey The National Rail OpenLDBWS API Key to use for looking up service information. You must register with National Rail to obtain this key and whitelist it with us. See https://api.departureboard.io/docs/registration for more information. (required)
     * @param numServices The number of departing services to return. This is a maximum value, less may be returned if there is not a sufficient amount of services running from the selected station within the time window specified. (optional, default to 10)
     * @param timeOffset The time window in minutes to offset the departure information by. For example, a value of 20 will not show services departing within the next 20 minutes. (optional, default to 0)
     * @param timeWindow The time window to show services for in minutes. For example, a value of 60 will show services departing the station in the next 60 minutes. (optional, default to 120)
     * @param serviceDetails Should the response contain information on the calling points for each service? If set to false, calling points will not be returned. (optional, default to true)
     * @param filterStation The CRS (Computer Reservation System) code to filter the results by. For example, performing a lookup for PAD (London Paddington) and setting filterStation to RED (Reading), will only show services departing from Paddington that stop at Reading. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> **OK**: The API Request was successful and returned data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was not valid. &lt;br&gt;&lt;br&gt;The departureboard.io API performs validation of queries to make sure they make sense and will return a valid response from National Rail. Bad queries made directly to the National Rail API return a generic &#x60;500 Internal Server Error&#x60; response which is difficult to troubleshoot.&lt;br&gt;&lt;br&gt;By validating requests the departureboard.io API can provide improved error messages to help with troubleshooting, and prevent bad queries from ever reaching National Rail. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> **Unauthorized**: Your National Rail API key is wrong or your key has not been registered in the [departureboard.io API Portal](https://api-portal.departureboard.io) as detailed in the [registration](https://api.departureboard.io/docs/registration) section of the documentation.&lt;br&gt;&lt;br&gt;You should double check your API Key is valid and has been whitelisted. Newly generated API Keys can take up to 15 minutes to become active. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> **Too Many Requests**: You have exceeded the rate limit. &lt;br&gt;&lt;br&gt;Get in touch to arrange an exception, or slow down your requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> **Internal Server Error**: There was an unknown error returning the response.&lt;br&gt;&lt;br&gt;This error is served when an unknown error is encountered returning your response. This is often due to upstream problems with National Rail, for example them returning a bad response or malformed data. In rare circumstances it can be caused by a bad request that was not caught in the departureboard.io validation. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> **Service Unavailable**: The National Rail upstream API is experiencing issues.&lt;br&gt;&lt;br&gt;This error is returned when the departureboard.io API detects issues with the upstream National Rail API. The departureboard.io API is functioning but cannot return a result as the National Rail API is down. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeparturesByCRSAsync(String CRS, String apiKey, Integer numServices, Integer timeOffset, Integer timeWindow, Boolean serviceDetails, String filterStation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeparturesByCRSValidateBeforeCall(CRS, apiKey, numServices, timeOffset, timeWindow, serviceDetails, filterStation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
