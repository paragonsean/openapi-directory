/**
 * Georg API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputPart.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputPart::OAIInputPart(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputPart::OAIInputPart() {
    this->initializeModel();
}

OAIInputPart::~OAIInputPart() {}

void OAIInputPart::initializeModel() {

    m_body_as_string_isSet = false;
    m_body_as_string_isValid = false;

    m_content_type_from_message_isSet = false;
    m_content_type_from_message_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_media_type_isSet = false;
    m_media_type_isValid = false;
}

void OAIInputPart::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputPart::fromJsonObject(QJsonObject json) {

    m_body_as_string_isValid = ::OpenAPI::fromJsonValue(m_body_as_string, json[QString("bodyAsString")]);
    m_body_as_string_isSet = !json[QString("bodyAsString")].isNull() && m_body_as_string_isValid;

    m_content_type_from_message_isValid = ::OpenAPI::fromJsonValue(m_content_type_from_message, json[QString("contentTypeFromMessage")]);
    m_content_type_from_message_isSet = !json[QString("contentTypeFromMessage")].isNull() && m_content_type_from_message_isValid;

    if(json["headers"].isObject()){
        auto varmap = json["headers"].toObject().toVariantMap();
        m_headers_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_headers_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_headers_isSet &= !jval.isNull() && m_headers_isValid;
                m_headers.insert(m_headers.end(), val, item);
            }
        }
    }

    m_media_type_isValid = ::OpenAPI::fromJsonValue(m_media_type, json[QString("mediaType")]);
    m_media_type_isSet = !json[QString("mediaType")].isNull() && m_media_type_isValid;
}

QString OAIInputPart::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputPart::asJsonObject() const {
    QJsonObject obj;
    if (m_body_as_string_isSet) {
        obj.insert(QString("bodyAsString"), ::OpenAPI::toJsonValue(m_body_as_string));
    }
    if (m_content_type_from_message_isSet) {
        obj.insert(QString("contentTypeFromMessage"), ::OpenAPI::toJsonValue(m_content_type_from_message));
    }
    if (m_headers.size() > 0) {
        
        obj.insert(QString("headers"), toJsonValue(m_headers));
    }
    if (m_media_type.isSet()) {
        obj.insert(QString("mediaType"), ::OpenAPI::toJsonValue(m_media_type));
    }
    return obj;
}

QString OAIInputPart::getBodyAsString() const {
    return m_body_as_string;
}
void OAIInputPart::setBodyAsString(const QString &body_as_string) {
    m_body_as_string = body_as_string;
    m_body_as_string_isSet = true;
}

bool OAIInputPart::is_body_as_string_Set() const{
    return m_body_as_string_isSet;
}

bool OAIInputPart::is_body_as_string_Valid() const{
    return m_body_as_string_isValid;
}

bool OAIInputPart::isContentTypeFromMessage() const {
    return m_content_type_from_message;
}
void OAIInputPart::setContentTypeFromMessage(const bool &content_type_from_message) {
    m_content_type_from_message = content_type_from_message;
    m_content_type_from_message_isSet = true;
}

bool OAIInputPart::is_content_type_from_message_Set() const{
    return m_content_type_from_message_isSet;
}

bool OAIInputPart::is_content_type_from_message_Valid() const{
    return m_content_type_from_message_isValid;
}

QMap<QString, QList<QString>> OAIInputPart::getHeaders() const {
    return m_headers;
}
void OAIInputPart::setHeaders(const QMap<QString, QList<QString>> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIInputPart::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIInputPart::is_headers_Valid() const{
    return m_headers_isValid;
}

OAIMediaType OAIInputPart::getMediaType() const {
    return m_media_type;
}
void OAIInputPart::setMediaType(const OAIMediaType &media_type) {
    m_media_type = media_type;
    m_media_type_isSet = true;
}

bool OAIInputPart::is_media_type_Set() const{
    return m_media_type_isSet;
}

bool OAIInputPart::is_media_type_Valid() const{
    return m_media_type_isValid;
}

bool OAIInputPart::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_as_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_from_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputPart::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
