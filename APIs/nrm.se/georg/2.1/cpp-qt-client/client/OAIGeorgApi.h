/**
 * Georg API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGeorgApi_H
#define OAI_OAIGeorgApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIInputPart.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGeorgApi : public QObject {
    Q_OBJECT

public:
    OAIGeorgApi(const int timeOut = 0);
    ~OAIGeorgApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  text QString [optional]
    * @param[in]  sources QString [optional]
    * @param[in]  layers QString [optional]
    * @param[in]  country_code QString [optional]
    * @param[in]  size qint32 [optional]
    */
    virtual void autoComplete(const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sources = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &layers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  lat double [optional]
    * @param[in]  lng double [optional]
    */
    virtual void getReverseGeoCode(const ::OpenAPI::OptionalParam<double> &lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &lng = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  text QString [optional]
    * @param[in]  sources QString [optional]
    * @param[in]  layers QString [optional]
    * @param[in]  country_code QString [optional]
    * @param[in]  size qint32 [optional]
    */
    virtual void search(const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sources = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &layers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  coordinates QString [optional]
    */
    virtual void searchCoordinates(const ::OpenAPI::OptionalParam<QString> &coordinates = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  type QString [optional]
    * @param[in]  form_data QMap<QString, OAIInputPart> [optional]
    * @param[in]  form_data_map QMap<QString, QList<OAIInputPart>> [optional]
    * @param[in]  parts QList<OAIInputPart> [optional]
    * @param[in]  preamble QString [optional]
    */
    virtual void uploadFile(const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QMap<QString, OAIInputPart>> &form_data = ::OpenAPI::OptionalParam<QMap<QString, OAIInputPart>>(), const ::OpenAPI::OptionalParam<QMap<QString, QList<OAIInputPart>>> &form_data_map = ::OpenAPI::OptionalParam<QMap<QString, QList<OAIInputPart>>>(), const ::OpenAPI::OptionalParam<QList<OAIInputPart>> &parts = ::OpenAPI::OptionalParam<QList<OAIInputPart>>(), const ::OpenAPI::OptionalParam<QString> &preamble = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void autoCompleteCallback(OAIHttpRequestWorker *worker);
    void getReverseGeoCodeCallback(OAIHttpRequestWorker *worker);
    void searchCallback(OAIHttpRequestWorker *worker);
    void searchCoordinatesCallback(OAIHttpRequestWorker *worker);
    void uploadFileCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void autoCompleteSignal(QString summary);
    void getReverseGeoCodeSignal(QString summary);
    void searchSignal(QString summary);
    void searchCoordinatesSignal(QString summary);
    void uploadFileSignal();


    void autoCompleteSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getReverseGeoCodeSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void searchSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void searchCoordinatesSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void uploadFileSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use autoCompleteSignalError() instead")
    void autoCompleteSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void autoCompleteSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReverseGeoCodeSignalError() instead")
    void getReverseGeoCodeSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReverseGeoCodeSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSignalError() instead")
    void searchSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchCoordinatesSignalError() instead")
    void searchCoordinatesSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchCoordinatesSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadFileSignalError() instead")
    void uploadFileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void uploadFileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use autoCompleteSignalErrorFull() instead")
    void autoCompleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void autoCompleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReverseGeoCodeSignalErrorFull() instead")
    void getReverseGeoCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReverseGeoCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSignalErrorFull() instead")
    void searchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchCoordinatesSignalErrorFull() instead")
    void searchCoordinatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchCoordinatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadFileSignalErrorFull() instead")
    void uploadFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
