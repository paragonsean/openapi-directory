/*
 * Georg API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.MediaType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InputPart
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:45.818575-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InputPart {
  public static final String SERIALIZED_NAME_BODY_AS_STRING = "bodyAsString";
  @SerializedName(SERIALIZED_NAME_BODY_AS_STRING)
  private String bodyAsString;

  public static final String SERIALIZED_NAME_CONTENT_TYPE_FROM_MESSAGE = "contentTypeFromMessage";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE_FROM_MESSAGE)
  private Boolean contentTypeFromMessage;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private Map<String, List<String>> headers = new HashMap<>();

  public static final String SERIALIZED_NAME_MEDIA_TYPE = "mediaType";
  @SerializedName(SERIALIZED_NAME_MEDIA_TYPE)
  private MediaType mediaType;

  public InputPart() {
  }

  public InputPart bodyAsString(String bodyAsString) {
    this.bodyAsString = bodyAsString;
    return this;
  }

  /**
   * Get bodyAsString
   * @return bodyAsString
   */
  @javax.annotation.Nullable
  public String getBodyAsString() {
    return bodyAsString;
  }

  public void setBodyAsString(String bodyAsString) {
    this.bodyAsString = bodyAsString;
  }


  public InputPart contentTypeFromMessage(Boolean contentTypeFromMessage) {
    this.contentTypeFromMessage = contentTypeFromMessage;
    return this;
  }

  /**
   * Get contentTypeFromMessage
   * @return contentTypeFromMessage
   */
  @javax.annotation.Nullable
  public Boolean getContentTypeFromMessage() {
    return contentTypeFromMessage;
  }

  public void setContentTypeFromMessage(Boolean contentTypeFromMessage) {
    this.contentTypeFromMessage = contentTypeFromMessage;
  }


  public InputPart headers(Map<String, List<String>> headers) {
    this.headers = headers;
    return this;
  }

  public InputPart putHeadersItem(String key, List<String> headersItem) {
    if (this.headers == null) {
      this.headers = new HashMap<>();
    }
    this.headers.put(key, headersItem);
    return this;
  }

  /**
   * Get headers
   * @return headers
   */
  @javax.annotation.Nullable
  public Map<String, List<String>> getHeaders() {
    return headers;
  }

  public void setHeaders(Map<String, List<String>> headers) {
    this.headers = headers;
  }


  public InputPart mediaType(MediaType mediaType) {
    this.mediaType = mediaType;
    return this;
  }

  /**
   * Get mediaType
   * @return mediaType
   */
  @javax.annotation.Nullable
  public MediaType getMediaType() {
    return mediaType;
  }

  public void setMediaType(MediaType mediaType) {
    this.mediaType = mediaType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputPart inputPart = (InputPart) o;
    return Objects.equals(this.bodyAsString, inputPart.bodyAsString) &&
        Objects.equals(this.contentTypeFromMessage, inputPart.contentTypeFromMessage) &&
        Objects.equals(this.headers, inputPart.headers) &&
        Objects.equals(this.mediaType, inputPart.mediaType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bodyAsString, contentTypeFromMessage, headers, mediaType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputPart {\n");
    sb.append("    bodyAsString: ").append(toIndentedString(bodyAsString)).append("\n");
    sb.append("    contentTypeFromMessage: ").append(toIndentedString(contentTypeFromMessage)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    mediaType: ").append(toIndentedString(mediaType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bodyAsString");
    openapiFields.add("contentTypeFromMessage");
    openapiFields.add("headers");
    openapiFields.add("mediaType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InputPart
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InputPart.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InputPart is not found in the empty JSON string", InputPart.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InputPart.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InputPart` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bodyAsString") != null && !jsonObj.get("bodyAsString").isJsonNull()) && !jsonObj.get("bodyAsString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bodyAsString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bodyAsString").toString()));
      }
      // validate the optional field `mediaType`
      if (jsonObj.get("mediaType") != null && !jsonObj.get("mediaType").isJsonNull()) {
        MediaType.validateJsonElement(jsonObj.get("mediaType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InputPart.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InputPart' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InputPart> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InputPart.class));

       return (TypeAdapter<T>) new TypeAdapter<InputPart>() {
           @Override
           public void write(JsonWriter out, InputPart value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InputPart read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InputPart given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InputPart
   * @throws IOException if the JSON string is invalid with respect to InputPart
   */
  public static InputPart fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InputPart.class);
  }

  /**
   * Convert an instance of InputPart to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

