/*
 * Georg API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.InputPart;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GeorgApi
 */
@Disabled
public class GeorgApiTest {

    private final GeorgApi api = new GeorgApi();

    /**
     * Search
     *
     * Return search results in json
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void autoCompleteTest() throws ApiException {
        String text = null;
        String sources = null;
        String layers = null;
        String countryCode = null;
        Integer size = null;
        String response = api.autoComplete(text, sources, layers, countryCode, size);
        // TODO: test validations
    }

    /**
     * Get reverse geocoding
     *
     * Return search results in json
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReverseGeoCodeTest() throws ApiException {
        Double lat = null;
        Double lng = null;
        String response = api.getReverseGeoCode(lat, lng);
        // TODO: test validations
    }

    /**
     * Get geocoding
     *
     * Return search results in json
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchTest() throws ApiException {
        String text = null;
        String sources = null;
        String layers = null;
        String countryCode = null;
        Integer size = null;
        String response = api.search(text, sources, layers, countryCode, size);
        // TODO: test validations
    }

    /**
     * Search coordinates in different formate
     *
     * Return search results in json
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchCoordinatesTest() throws ApiException {
        String coordinates = null;
        String response = api.searchCoordinates(coordinates);
        // TODO: test validations
    }

    /**
     * Batch upload
     *
     * Upload csv file with minimum two columns (Id, SourceLocality). Return search results in json
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadFileTest() throws ApiException {
        String type = null;
        Map<String, InputPart> formData = null;
        Map<String, List<InputPart>> formDataMap = null;
        List<InputPart> parts = null;
        String preamble = null;
        api.uploadFile(type, formData, formDataMap, parts, preamble);
        // TODO: test validations
    }

}
