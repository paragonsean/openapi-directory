/**
 * Georg API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MediaType from './MediaType';

/**
 * The InputPart model module.
 * @module model/InputPart
 * @version 2.1
 */
class InputPart {
    /**
     * Constructs a new <code>InputPart</code>.
     * @alias module:model/InputPart
     */
    constructor() { 
        
        InputPart.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InputPart</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InputPart} obj Optional instance to populate.
     * @return {module:model/InputPart} The populated <code>InputPart</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InputPart();

            if (data.hasOwnProperty('bodyAsString')) {
                obj['bodyAsString'] = ApiClient.convertToType(data['bodyAsString'], 'String');
            }
            if (data.hasOwnProperty('contentTypeFromMessage')) {
                obj['contentTypeFromMessage'] = ApiClient.convertToType(data['contentTypeFromMessage'], 'Boolean');
            }
            if (data.hasOwnProperty('headers')) {
                obj['headers'] = ApiClient.convertToType(data['headers'], {'String': ['String']});
            }
            if (data.hasOwnProperty('mediaType')) {
                obj['mediaType'] = MediaType.constructFromObject(data['mediaType']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InputPart</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InputPart</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bodyAsString'] && !(typeof data['bodyAsString'] === 'string' || data['bodyAsString'] instanceof String)) {
            throw new Error("Expected the field `bodyAsString` to be a primitive type in the JSON string but got " + data['bodyAsString']);
        }
        // validate the optional field `mediaType`
        if (data['mediaType']) { // data not null
          MediaType.validateJSON(data['mediaType']);
        }

        return true;
    }


}



/**
 * @member {String} bodyAsString
 */
InputPart.prototype['bodyAsString'] = undefined;

/**
 * @member {Boolean} contentTypeFromMessage
 */
InputPart.prototype['contentTypeFromMessage'] = undefined;

/**
 * @member {Object.<String, Array.<String>>} headers
 */
InputPart.prototype['headers'] = undefined;

/**
 * @member {module:model/MediaType} mediaType
 */
InputPart.prototype['mediaType'] = undefined;






export default InputPart;

