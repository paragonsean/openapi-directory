/**
 * Georg API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InputPart from '../model/InputPart';

/**
* Georg service.
* @module api/GeorgApi
* @version 2.1
*/
export default class GeorgApi {

    /**
    * Constructs a new GeorgApi. 
    * @alias module:api/GeorgApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the autoComplete operation.
     * @callback module:api/GeorgApi~autoCompleteCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search
     * Return search results in json
     * @param {Object} opts Optional parameters
     * @param {String} [text] 
     * @param {String} [sources] 
     * @param {String} [layers] 
     * @param {String} [countryCode] 
     * @param {Number} [size] 
     * @param {module:api/GeorgApi~autoCompleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    autoComplete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'text': opts['text'],
        'sources': opts['sources'],
        'layers': opts['layers'],
        'countryCode': opts['countryCode'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/autocomplete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReverseGeoCode operation.
     * @callback module:api/GeorgApi~getReverseGeoCodeCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get reverse geocoding
     * Return search results in json
     * @param {Object} opts Optional parameters
     * @param {Number} [lat] 
     * @param {Number} [lng] 
     * @param {module:api/GeorgApi~getReverseGeoCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getReverseGeoCode(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'lat': opts['lat'],
        'lng': opts['lng']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/reverse', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the search operation.
     * @callback module:api/GeorgApi~searchCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get geocoding
     * Return search results in json
     * @param {Object} opts Optional parameters
     * @param {String} [text] 
     * @param {String} [sources] 
     * @param {String} [layers] 
     * @param {String} [countryCode] 
     * @param {Number} [size] 
     * @param {module:api/GeorgApi~searchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    search(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'text': opts['text'],
        'sources': opts['sources'],
        'layers': opts['layers'],
        'countryCode': opts['countryCode'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchCoordinates operation.
     * @callback module:api/GeorgApi~searchCoordinatesCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search coordinates in different formate
     * Return search results in json
     * @param {Object} opts Optional parameters
     * @param {String} [coordinates] 
     * @param {module:api/GeorgApi~searchCoordinatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    searchCoordinates(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'coordinates': opts['coordinates']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/coordinates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadFile operation.
     * @callback module:api/GeorgApi~uploadFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Batch upload
     * Upload csv file with minimum two columns (Id, SourceLocality). Return search results in json
     * @param {Object} opts Optional parameters
     * @param {String} [type] 
     * @param {Object.<String, {String: InputPart}>} [formData] 
     * @param {Object.<String, {String: [InputPart]}>} [formDataMap] 
     * @param {Array.<module:model/InputPart>} [parts] 
     * @param {String} [preamble] 
     * @param {module:api/GeorgApi~uploadFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uploadFile(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
        'formData': opts['formData'],
        'formDataMap': opts['formDataMap'],
        'parts': this.apiClient.buildCollectionParam(opts['parts'], 'csv'),
        'preamble': opts['preamble']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
