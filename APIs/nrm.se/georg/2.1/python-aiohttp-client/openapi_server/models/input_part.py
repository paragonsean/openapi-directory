# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.media_type import MediaType
from openapi_server import util


class InputPart(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body_as_string: str=None, content_type_from_message: bool=None, headers: Dict[str, List[str]]=None, media_type: MediaType=None):
        """InputPart - a model defined in OpenAPI

        :param body_as_string: The body_as_string of this InputPart.
        :param content_type_from_message: The content_type_from_message of this InputPart.
        :param headers: The headers of this InputPart.
        :param media_type: The media_type of this InputPart.
        """
        self.openapi_types = {
            'body_as_string': str,
            'content_type_from_message': bool,
            'headers': Dict[str, List[str]],
            'media_type': MediaType
        }

        self.attribute_map = {
            'body_as_string': 'bodyAsString',
            'content_type_from_message': 'contentTypeFromMessage',
            'headers': 'headers',
            'media_type': 'mediaType'
        }

        self._body_as_string = body_as_string
        self._content_type_from_message = content_type_from_message
        self._headers = headers
        self._media_type = media_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputPart':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InputPart of this InputPart.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body_as_string(self):
        """Gets the body_as_string of this InputPart.


        :return: The body_as_string of this InputPart.
        :rtype: str
        """
        return self._body_as_string

    @body_as_string.setter
    def body_as_string(self, body_as_string):
        """Sets the body_as_string of this InputPart.


        :param body_as_string: The body_as_string of this InputPart.
        :type body_as_string: str
        """

        self._body_as_string = body_as_string

    @property
    def content_type_from_message(self):
        """Gets the content_type_from_message of this InputPart.


        :return: The content_type_from_message of this InputPart.
        :rtype: bool
        """
        return self._content_type_from_message

    @content_type_from_message.setter
    def content_type_from_message(self, content_type_from_message):
        """Sets the content_type_from_message of this InputPart.


        :param content_type_from_message: The content_type_from_message of this InputPart.
        :type content_type_from_message: bool
        """

        self._content_type_from_message = content_type_from_message

    @property
    def headers(self):
        """Gets the headers of this InputPart.


        :return: The headers of this InputPart.
        :rtype: Dict[str, List[str]]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this InputPart.


        :param headers: The headers of this InputPart.
        :type headers: Dict[str, List[str]]
        """

        self._headers = headers

    @property
    def media_type(self):
        """Gets the media_type of this InputPart.


        :return: The media_type of this InputPart.
        :rtype: MediaType
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this InputPart.


        :param media_type: The media_type of this InputPart.
        :type media_type: MediaType
        """

        self._media_type = media_type
