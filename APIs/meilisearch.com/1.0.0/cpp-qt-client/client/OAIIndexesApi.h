/**
 * Meilisearch v1.1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIndexesApi_H
#define OAI_OAIIndexesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateIndexWithPrimaryKey_request.h"
#include "OAISwapIndexes_request_inner.h"
#include "OAIUpdateIndex_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIndexesApi : public QObject {
    Q_OBJECT

public:
    OAIIndexesApi(const int timeOut = 0);
    ~OAIIndexesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_index_with_primary_key_request OAICreateIndexWithPrimaryKey_request [optional]
    */
    virtual void createIndexWithPrimaryKey(const ::OpenAPI::OptionalParam<OAICreateIndexWithPrimaryKey_request> &oai_create_index_with_primary_key_request = ::OpenAPI::OptionalParam<OAICreateIndexWithPrimaryKey_request>());


    virtual void deleteAnIndex();

    /**
    * @param[in]  offset QString [optional]
    * @param[in]  limit QString [optional]
    */
    virtual void getIndexes(const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>());


    virtual void showIndex();

    /**
    * @param[in]  oai_swap_indexes_request_inner QList<OAISwapIndexes_request_inner> [optional]
    */
    virtual void swapIndexes(const ::OpenAPI::OptionalParam<QList<OAISwapIndexes_request_inner>> &oai_swap_indexes_request_inner = ::OpenAPI::OptionalParam<QList<OAISwapIndexes_request_inner>>());

    /**
    * @param[in]  oai_update_index_request OAIUpdateIndex_request [optional]
    */
    virtual void updateIndex(const ::OpenAPI::OptionalParam<OAIUpdateIndex_request> &oai_update_index_request = ::OpenAPI::OptionalParam<OAIUpdateIndex_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createIndexWithPrimaryKeyCallback(OAIHttpRequestWorker *worker);
    void deleteAnIndexCallback(OAIHttpRequestWorker *worker);
    void getIndexesCallback(OAIHttpRequestWorker *worker);
    void showIndexCallback(OAIHttpRequestWorker *worker);
    void swapIndexesCallback(OAIHttpRequestWorker *worker);
    void updateIndexCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createIndexWithPrimaryKeySignal();
    void deleteAnIndexSignal();
    void getIndexesSignal();
    void showIndexSignal();
    void swapIndexesSignal();
    void updateIndexSignal();


    void createIndexWithPrimaryKeySignalFull(OAIHttpRequestWorker *worker);
    void deleteAnIndexSignalFull(OAIHttpRequestWorker *worker);
    void getIndexesSignalFull(OAIHttpRequestWorker *worker);
    void showIndexSignalFull(OAIHttpRequestWorker *worker);
    void swapIndexesSignalFull(OAIHttpRequestWorker *worker);
    void updateIndexSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use createIndexWithPrimaryKeySignalError() instead")
    void createIndexWithPrimaryKeySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createIndexWithPrimaryKeySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAnIndexSignalError() instead")
    void deleteAnIndexSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAnIndexSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIndexesSignalError() instead")
    void getIndexesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getIndexesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showIndexSignalError() instead")
    void showIndexSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void showIndexSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use swapIndexesSignalError() instead")
    void swapIndexesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void swapIndexesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateIndexSignalError() instead")
    void updateIndexSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateIndexSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createIndexWithPrimaryKeySignalErrorFull() instead")
    void createIndexWithPrimaryKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createIndexWithPrimaryKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAnIndexSignalErrorFull() instead")
    void deleteAnIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAnIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIndexesSignalErrorFull() instead")
    void getIndexesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIndexesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showIndexSignalErrorFull() instead")
    void showIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void showIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use swapIndexesSignalErrorFull() instead")
    void swapIndexesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void swapIndexesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateIndexSignalErrorFull() instead")
    void updateIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
