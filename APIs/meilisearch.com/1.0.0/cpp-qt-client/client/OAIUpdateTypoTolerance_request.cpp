/**
 * Meilisearch v1.1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateTypoTolerance_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateTypoTolerance_request::OAIUpdateTypoTolerance_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateTypoTolerance_request::OAIUpdateTypoTolerance_request() {
    this->initializeModel();
}

OAIUpdateTypoTolerance_request::~OAIUpdateTypoTolerance_request() {}

void OAIUpdateTypoTolerance_request::initializeModel() {

    m_disable_on_attributes_isSet = false;
    m_disable_on_attributes_isValid = false;

    m_disable_on_words_isSet = false;
    m_disable_on_words_isValid = false;

    m_min_word_size_for_typos_isSet = false;
    m_min_word_size_for_typos_isValid = false;
}

void OAIUpdateTypoTolerance_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateTypoTolerance_request::fromJsonObject(QJsonObject json) {

    m_disable_on_attributes_isValid = ::OpenAPI::fromJsonValue(m_disable_on_attributes, json[QString("disableOnAttributes")]);
    m_disable_on_attributes_isSet = !json[QString("disableOnAttributes")].isNull() && m_disable_on_attributes_isValid;

    m_disable_on_words_isValid = ::OpenAPI::fromJsonValue(m_disable_on_words, json[QString("disableOnWords")]);
    m_disable_on_words_isSet = !json[QString("disableOnWords")].isNull() && m_disable_on_words_isValid;

    m_min_word_size_for_typos_isValid = ::OpenAPI::fromJsonValue(m_min_word_size_for_typos, json[QString("minWordSizeForTypos")]);
    m_min_word_size_for_typos_isSet = !json[QString("minWordSizeForTypos")].isNull() && m_min_word_size_for_typos_isValid;
}

QString OAIUpdateTypoTolerance_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateTypoTolerance_request::asJsonObject() const {
    QJsonObject obj;
    if (m_disable_on_attributes.size() > 0) {
        obj.insert(QString("disableOnAttributes"), ::OpenAPI::toJsonValue(m_disable_on_attributes));
    }
    if (m_disable_on_words.size() > 0) {
        obj.insert(QString("disableOnWords"), ::OpenAPI::toJsonValue(m_disable_on_words));
    }
    if (m_min_word_size_for_typos.isSet()) {
        obj.insert(QString("minWordSizeForTypos"), ::OpenAPI::toJsonValue(m_min_word_size_for_typos));
    }
    return obj;
}

QList<QString> OAIUpdateTypoTolerance_request::getDisableOnAttributes() const {
    return m_disable_on_attributes;
}
void OAIUpdateTypoTolerance_request::setDisableOnAttributes(const QList<QString> &disable_on_attributes) {
    m_disable_on_attributes = disable_on_attributes;
    m_disable_on_attributes_isSet = true;
}

bool OAIUpdateTypoTolerance_request::is_disable_on_attributes_Set() const{
    return m_disable_on_attributes_isSet;
}

bool OAIUpdateTypoTolerance_request::is_disable_on_attributes_Valid() const{
    return m_disable_on_attributes_isValid;
}

QList<QString> OAIUpdateTypoTolerance_request::getDisableOnWords() const {
    return m_disable_on_words;
}
void OAIUpdateTypoTolerance_request::setDisableOnWords(const QList<QString> &disable_on_words) {
    m_disable_on_words = disable_on_words;
    m_disable_on_words_isSet = true;
}

bool OAIUpdateTypoTolerance_request::is_disable_on_words_Set() const{
    return m_disable_on_words_isSet;
}

bool OAIUpdateTypoTolerance_request::is_disable_on_words_Valid() const{
    return m_disable_on_words_isValid;
}

OAIUpdateTypoTolerance_request_minWordSizeForTypos OAIUpdateTypoTolerance_request::getMinWordSizeForTypos() const {
    return m_min_word_size_for_typos;
}
void OAIUpdateTypoTolerance_request::setMinWordSizeForTypos(const OAIUpdateTypoTolerance_request_minWordSizeForTypos &min_word_size_for_typos) {
    m_min_word_size_for_typos = min_word_size_for_typos;
    m_min_word_size_for_typos_isSet = true;
}

bool OAIUpdateTypoTolerance_request::is_min_word_size_for_typos_Set() const{
    return m_min_word_size_for_typos_isSet;
}

bool OAIUpdateTypoTolerance_request::is_min_word_size_for_typos_Valid() const{
    return m_min_word_size_for_typos_isValid;
}

bool OAIUpdateTypoTolerance_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disable_on_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_on_words.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_word_size_for_typos.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateTypoTolerance_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
