/**
 * Meilisearch v1.1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateSettings_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateSettings_request::OAIUpdateSettings_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateSettings_request::OAIUpdateSettings_request() {
    this->initializeModel();
}

OAIUpdateSettings_request::~OAIUpdateSettings_request() {}

void OAIUpdateSettings_request::initializeModel() {

    m_displayed_attributes_isSet = false;
    m_displayed_attributes_isValid = false;

    m_filterable_attributes_isSet = false;
    m_filterable_attributes_isValid = false;

    m_searchable_attributes_isSet = false;
    m_searchable_attributes_isValid = false;

    m_sortable_attributes_isSet = false;
    m_sortable_attributes_isValid = false;

    m_stop_words_isSet = false;
    m_stop_words_isValid = false;
}

void OAIUpdateSettings_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateSettings_request::fromJsonObject(QJsonObject json) {

    m_displayed_attributes_isValid = ::OpenAPI::fromJsonValue(m_displayed_attributes, json[QString("displayedAttributes")]);
    m_displayed_attributes_isSet = !json[QString("displayedAttributes")].isNull() && m_displayed_attributes_isValid;

    m_filterable_attributes_isValid = ::OpenAPI::fromJsonValue(m_filterable_attributes, json[QString("filterableAttributes")]);
    m_filterable_attributes_isSet = !json[QString("filterableAttributes")].isNull() && m_filterable_attributes_isValid;

    m_searchable_attributes_isValid = ::OpenAPI::fromJsonValue(m_searchable_attributes, json[QString("searchableAttributes")]);
    m_searchable_attributes_isSet = !json[QString("searchableAttributes")].isNull() && m_searchable_attributes_isValid;

    m_sortable_attributes_isValid = ::OpenAPI::fromJsonValue(m_sortable_attributes, json[QString("sortableAttributes")]);
    m_sortable_attributes_isSet = !json[QString("sortableAttributes")].isNull() && m_sortable_attributes_isValid;

    m_stop_words_isValid = ::OpenAPI::fromJsonValue(m_stop_words, json[QString("stopWords")]);
    m_stop_words_isSet = !json[QString("stopWords")].isNull() && m_stop_words_isValid;
}

QString OAIUpdateSettings_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateSettings_request::asJsonObject() const {
    QJsonObject obj;
    if (m_displayed_attributes.size() > 0) {
        obj.insert(QString("displayedAttributes"), ::OpenAPI::toJsonValue(m_displayed_attributes));
    }
    if (m_filterable_attributes.size() > 0) {
        obj.insert(QString("filterableAttributes"), ::OpenAPI::toJsonValue(m_filterable_attributes));
    }
    if (m_searchable_attributes.size() > 0) {
        obj.insert(QString("searchableAttributes"), ::OpenAPI::toJsonValue(m_searchable_attributes));
    }
    if (m_sortable_attributes.size() > 0) {
        obj.insert(QString("sortableAttributes"), ::OpenAPI::toJsonValue(m_sortable_attributes));
    }
    if (m_stop_words.size() > 0) {
        obj.insert(QString("stopWords"), ::OpenAPI::toJsonValue(m_stop_words));
    }
    return obj;
}

QList<QString> OAIUpdateSettings_request::getDisplayedAttributes() const {
    return m_displayed_attributes;
}
void OAIUpdateSettings_request::setDisplayedAttributes(const QList<QString> &displayed_attributes) {
    m_displayed_attributes = displayed_attributes;
    m_displayed_attributes_isSet = true;
}

bool OAIUpdateSettings_request::is_displayed_attributes_Set() const{
    return m_displayed_attributes_isSet;
}

bool OAIUpdateSettings_request::is_displayed_attributes_Valid() const{
    return m_displayed_attributes_isValid;
}

QList<QString> OAIUpdateSettings_request::getFilterableAttributes() const {
    return m_filterable_attributes;
}
void OAIUpdateSettings_request::setFilterableAttributes(const QList<QString> &filterable_attributes) {
    m_filterable_attributes = filterable_attributes;
    m_filterable_attributes_isSet = true;
}

bool OAIUpdateSettings_request::is_filterable_attributes_Set() const{
    return m_filterable_attributes_isSet;
}

bool OAIUpdateSettings_request::is_filterable_attributes_Valid() const{
    return m_filterable_attributes_isValid;
}

QList<QString> OAIUpdateSettings_request::getSearchableAttributes() const {
    return m_searchable_attributes;
}
void OAIUpdateSettings_request::setSearchableAttributes(const QList<QString> &searchable_attributes) {
    m_searchable_attributes = searchable_attributes;
    m_searchable_attributes_isSet = true;
}

bool OAIUpdateSettings_request::is_searchable_attributes_Set() const{
    return m_searchable_attributes_isSet;
}

bool OAIUpdateSettings_request::is_searchable_attributes_Valid() const{
    return m_searchable_attributes_isValid;
}

QList<QString> OAIUpdateSettings_request::getSortableAttributes() const {
    return m_sortable_attributes;
}
void OAIUpdateSettings_request::setSortableAttributes(const QList<QString> &sortable_attributes) {
    m_sortable_attributes = sortable_attributes;
    m_sortable_attributes_isSet = true;
}

bool OAIUpdateSettings_request::is_sortable_attributes_Set() const{
    return m_sortable_attributes_isSet;
}

bool OAIUpdateSettings_request::is_sortable_attributes_Valid() const{
    return m_sortable_attributes_isValid;
}

QList<QString> OAIUpdateSettings_request::getStopWords() const {
    return m_stop_words;
}
void OAIUpdateSettings_request::setStopWords(const QList<QString> &stop_words) {
    m_stop_words = stop_words;
    m_stop_words_isSet = true;
}

bool OAIUpdateSettings_request::is_stop_words_Set() const{
    return m_stop_words_isSet;
}

bool OAIUpdateSettings_request::is_stop_words_Valid() const{
    return m_stop_words_isValid;
}

bool OAIUpdateSettings_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_displayed_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_filterable_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_searchable_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sortable_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_words.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateSettings_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
