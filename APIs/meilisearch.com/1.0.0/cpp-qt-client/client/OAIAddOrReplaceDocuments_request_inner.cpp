/**
 * Meilisearch v1.1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddOrReplaceDocuments_request_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddOrReplaceDocuments_request_inner::OAIAddOrReplaceDocuments_request_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddOrReplaceDocuments_request_inner::OAIAddOrReplaceDocuments_request_inner() {
    this->initializeModel();
}

OAIAddOrReplaceDocuments_request_inner::~OAIAddOrReplaceDocuments_request_inner() {}

void OAIAddOrReplaceDocuments_request_inner::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_genre_isSet = false;
    m_genre_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIAddOrReplaceDocuments_request_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddOrReplaceDocuments_request_inner::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_genre_isValid = ::OpenAPI::fromJsonValue(m_genre, json[QString("genre")]);
    m_genre_isSet = !json[QString("genre")].isNull() && m_genre_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIAddOrReplaceDocuments_request_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddOrReplaceDocuments_request_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_genre_isSet) {
        obj.insert(QString("genre"), ::OpenAPI::toJsonValue(m_genre));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIAddOrReplaceDocuments_request_inner::getAuthor() const {
    return m_author;
}
void OAIAddOrReplaceDocuments_request_inner::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIAddOrReplaceDocuments_request_inner::is_author_Set() const{
    return m_author_isSet;
}

bool OAIAddOrReplaceDocuments_request_inner::is_author_Valid() const{
    return m_author_isValid;
}

QString OAIAddOrReplaceDocuments_request_inner::getGenre() const {
    return m_genre;
}
void OAIAddOrReplaceDocuments_request_inner::setGenre(const QString &genre) {
    m_genre = genre;
    m_genre_isSet = true;
}

bool OAIAddOrReplaceDocuments_request_inner::is_genre_Set() const{
    return m_genre_isSet;
}

bool OAIAddOrReplaceDocuments_request_inner::is_genre_Valid() const{
    return m_genre_isValid;
}

double OAIAddOrReplaceDocuments_request_inner::getId() const {
    return m_id;
}
void OAIAddOrReplaceDocuments_request_inner::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAddOrReplaceDocuments_request_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAddOrReplaceDocuments_request_inner::is_id_Valid() const{
    return m_id_isValid;
}

double OAIAddOrReplaceDocuments_request_inner::getPrice() const {
    return m_price;
}
void OAIAddOrReplaceDocuments_request_inner::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIAddOrReplaceDocuments_request_inner::is_price_Set() const{
    return m_price_isSet;
}

bool OAIAddOrReplaceDocuments_request_inner::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIAddOrReplaceDocuments_request_inner::getTitle() const {
    return m_title;
}
void OAIAddOrReplaceDocuments_request_inner::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAddOrReplaceDocuments_request_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAddOrReplaceDocuments_request_inner::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIAddOrReplaceDocuments_request_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_genre_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddOrReplaceDocuments_request_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
