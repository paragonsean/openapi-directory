/**
 * Meilisearch v1.1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISettingsApi_H
#define OAI_OAISettingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIUpdateFaceting_request.h"
#include "OAIUpdatePagination_request.h"
#include "OAIUpdateSettings_request.h"
#include "OAIUpdateSynonyms_request.h"
#include "OAIUpdateTypoTolerance_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISettingsApi : public QObject {
    Q_OBJECT

public:
    OAISettingsApi(const int timeOut = 0);
    ~OAISettingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void getAllSettings();


    virtual void getDisplayedAttributes();


    virtual void getDistinctAttribute();


    virtual void getFaceting();


    virtual void getFilterableAttributes();


    virtual void getPagination();


    virtual void getRankingRules();


    virtual void getSearchableAttributes();


    virtual void getSortableAttributes();

    /**
    * @param[in]  request_body QList<QString> [optional]
    */
    virtual void getStopWords(const ::OpenAPI::OptionalParam<QList<QString>> &request_body = ::OpenAPI::OptionalParam<QList<QString>>());


    virtual void getSynonyms();


    virtual void getTypoTolerance();


    virtual void resetAllSettings();


    virtual void resetDisplayedAttributes();


    virtual void resetDistinctAttribute();


    virtual void resetFaceting();


    virtual void resetFilterableAttributes();


    virtual void resetPagination();


    virtual void resetRankingRules();


    virtual void resetSearchableAttributes();


    virtual void resetSortableAttributes();


    virtual void resetStopWords();


    virtual void resetSynonyms();


    virtual void resetTypoTolerance();

    /**
    * @param[in]  request_body QList<QString> [optional]
    */
    virtual void updateDisplayedAttributes(const ::OpenAPI::OptionalParam<QList<QString>> &request_body = ::OpenAPI::OptionalParam<QList<QString>>());


    virtual void updateDistinctAttribute();

    /**
    * @param[in]  oai_update_faceting_request OAIUpdateFaceting_request [optional]
    */
    virtual void updateFaceting(const ::OpenAPI::OptionalParam<OAIUpdateFaceting_request> &oai_update_faceting_request = ::OpenAPI::OptionalParam<OAIUpdateFaceting_request>());

    /**
    * @param[in]  request_body QList<QString> [optional]
    */
    virtual void updateFilterableAttributes(const ::OpenAPI::OptionalParam<QList<QString>> &request_body = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  oai_update_pagination_request OAIUpdatePagination_request [optional]
    */
    virtual void updatePagination(const ::OpenAPI::OptionalParam<OAIUpdatePagination_request> &oai_update_pagination_request = ::OpenAPI::OptionalParam<OAIUpdatePagination_request>());

    /**
    * @param[in]  request_body QList<QString> [optional]
    */
    virtual void updateRankingRules(const ::OpenAPI::OptionalParam<QList<QString>> &request_body = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  request_body QList<QString> [optional]
    */
    virtual void updateSearchableAttributes(const ::OpenAPI::OptionalParam<QList<QString>> &request_body = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  oai_update_settings_request OAIUpdateSettings_request [optional]
    */
    virtual void updateSettings(const ::OpenAPI::OptionalParam<OAIUpdateSettings_request> &oai_update_settings_request = ::OpenAPI::OptionalParam<OAIUpdateSettings_request>());

    /**
    * @param[in]  request_body QList<QString> [optional]
    */
    virtual void updateSortableAttributes(const ::OpenAPI::OptionalParam<QList<QString>> &request_body = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  request_body QList<QString> [optional]
    */
    virtual void updateStopWords(const ::OpenAPI::OptionalParam<QList<QString>> &request_body = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  oai_update_synonyms_request OAIUpdateSynonyms_request [optional]
    */
    virtual void updateSynonyms(const ::OpenAPI::OptionalParam<OAIUpdateSynonyms_request> &oai_update_synonyms_request = ::OpenAPI::OptionalParam<OAIUpdateSynonyms_request>());

    /**
    * @param[in]  oai_update_typo_tolerance_request OAIUpdateTypoTolerance_request [optional]
    */
    virtual void updateTypoTolerance(const ::OpenAPI::OptionalParam<OAIUpdateTypoTolerance_request> &oai_update_typo_tolerance_request = ::OpenAPI::OptionalParam<OAIUpdateTypoTolerance_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAllSettingsCallback(OAIHttpRequestWorker *worker);
    void getDisplayedAttributesCallback(OAIHttpRequestWorker *worker);
    void getDistinctAttributeCallback(OAIHttpRequestWorker *worker);
    void getFacetingCallback(OAIHttpRequestWorker *worker);
    void getFilterableAttributesCallback(OAIHttpRequestWorker *worker);
    void getPaginationCallback(OAIHttpRequestWorker *worker);
    void getRankingRulesCallback(OAIHttpRequestWorker *worker);
    void getSearchableAttributesCallback(OAIHttpRequestWorker *worker);
    void getSortableAttributesCallback(OAIHttpRequestWorker *worker);
    void getStopWordsCallback(OAIHttpRequestWorker *worker);
    void getSynonymsCallback(OAIHttpRequestWorker *worker);
    void getTypoToleranceCallback(OAIHttpRequestWorker *worker);
    void resetAllSettingsCallback(OAIHttpRequestWorker *worker);
    void resetDisplayedAttributesCallback(OAIHttpRequestWorker *worker);
    void resetDistinctAttributeCallback(OAIHttpRequestWorker *worker);
    void resetFacetingCallback(OAIHttpRequestWorker *worker);
    void resetFilterableAttributesCallback(OAIHttpRequestWorker *worker);
    void resetPaginationCallback(OAIHttpRequestWorker *worker);
    void resetRankingRulesCallback(OAIHttpRequestWorker *worker);
    void resetSearchableAttributesCallback(OAIHttpRequestWorker *worker);
    void resetSortableAttributesCallback(OAIHttpRequestWorker *worker);
    void resetStopWordsCallback(OAIHttpRequestWorker *worker);
    void resetSynonymsCallback(OAIHttpRequestWorker *worker);
    void resetTypoToleranceCallback(OAIHttpRequestWorker *worker);
    void updateDisplayedAttributesCallback(OAIHttpRequestWorker *worker);
    void updateDistinctAttributeCallback(OAIHttpRequestWorker *worker);
    void updateFacetingCallback(OAIHttpRequestWorker *worker);
    void updateFilterableAttributesCallback(OAIHttpRequestWorker *worker);
    void updatePaginationCallback(OAIHttpRequestWorker *worker);
    void updateRankingRulesCallback(OAIHttpRequestWorker *worker);
    void updateSearchableAttributesCallback(OAIHttpRequestWorker *worker);
    void updateSettingsCallback(OAIHttpRequestWorker *worker);
    void updateSortableAttributesCallback(OAIHttpRequestWorker *worker);
    void updateStopWordsCallback(OAIHttpRequestWorker *worker);
    void updateSynonymsCallback(OAIHttpRequestWorker *worker);
    void updateTypoToleranceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAllSettingsSignal();
    void getDisplayedAttributesSignal();
    void getDistinctAttributeSignal();
    void getFacetingSignal();
    void getFilterableAttributesSignal();
    void getPaginationSignal();
    void getRankingRulesSignal();
    void getSearchableAttributesSignal();
    void getSortableAttributesSignal();
    void getStopWordsSignal();
    void getSynonymsSignal();
    void getTypoToleranceSignal();
    void resetAllSettingsSignal();
    void resetDisplayedAttributesSignal();
    void resetDistinctAttributeSignal();
    void resetFacetingSignal();
    void resetFilterableAttributesSignal();
    void resetPaginationSignal();
    void resetRankingRulesSignal();
    void resetSearchableAttributesSignal();
    void resetSortableAttributesSignal();
    void resetStopWordsSignal();
    void resetSynonymsSignal();
    void resetTypoToleranceSignal();
    void updateDisplayedAttributesSignal();
    void updateDistinctAttributeSignal();
    void updateFacetingSignal();
    void updateFilterableAttributesSignal();
    void updatePaginationSignal();
    void updateRankingRulesSignal();
    void updateSearchableAttributesSignal();
    void updateSettingsSignal();
    void updateSortableAttributesSignal();
    void updateStopWordsSignal();
    void updateSynonymsSignal();
    void updateTypoToleranceSignal();


    void getAllSettingsSignalFull(OAIHttpRequestWorker *worker);
    void getDisplayedAttributesSignalFull(OAIHttpRequestWorker *worker);
    void getDistinctAttributeSignalFull(OAIHttpRequestWorker *worker);
    void getFacetingSignalFull(OAIHttpRequestWorker *worker);
    void getFilterableAttributesSignalFull(OAIHttpRequestWorker *worker);
    void getPaginationSignalFull(OAIHttpRequestWorker *worker);
    void getRankingRulesSignalFull(OAIHttpRequestWorker *worker);
    void getSearchableAttributesSignalFull(OAIHttpRequestWorker *worker);
    void getSortableAttributesSignalFull(OAIHttpRequestWorker *worker);
    void getStopWordsSignalFull(OAIHttpRequestWorker *worker);
    void getSynonymsSignalFull(OAIHttpRequestWorker *worker);
    void getTypoToleranceSignalFull(OAIHttpRequestWorker *worker);
    void resetAllSettingsSignalFull(OAIHttpRequestWorker *worker);
    void resetDisplayedAttributesSignalFull(OAIHttpRequestWorker *worker);
    void resetDistinctAttributeSignalFull(OAIHttpRequestWorker *worker);
    void resetFacetingSignalFull(OAIHttpRequestWorker *worker);
    void resetFilterableAttributesSignalFull(OAIHttpRequestWorker *worker);
    void resetPaginationSignalFull(OAIHttpRequestWorker *worker);
    void resetRankingRulesSignalFull(OAIHttpRequestWorker *worker);
    void resetSearchableAttributesSignalFull(OAIHttpRequestWorker *worker);
    void resetSortableAttributesSignalFull(OAIHttpRequestWorker *worker);
    void resetStopWordsSignalFull(OAIHttpRequestWorker *worker);
    void resetSynonymsSignalFull(OAIHttpRequestWorker *worker);
    void resetTypoToleranceSignalFull(OAIHttpRequestWorker *worker);
    void updateDisplayedAttributesSignalFull(OAIHttpRequestWorker *worker);
    void updateDistinctAttributeSignalFull(OAIHttpRequestWorker *worker);
    void updateFacetingSignalFull(OAIHttpRequestWorker *worker);
    void updateFilterableAttributesSignalFull(OAIHttpRequestWorker *worker);
    void updatePaginationSignalFull(OAIHttpRequestWorker *worker);
    void updateRankingRulesSignalFull(OAIHttpRequestWorker *worker);
    void updateSearchableAttributesSignalFull(OAIHttpRequestWorker *worker);
    void updateSettingsSignalFull(OAIHttpRequestWorker *worker);
    void updateSortableAttributesSignalFull(OAIHttpRequestWorker *worker);
    void updateStopWordsSignalFull(OAIHttpRequestWorker *worker);
    void updateSynonymsSignalFull(OAIHttpRequestWorker *worker);
    void updateTypoToleranceSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getAllSettingsSignalError() instead")
    void getAllSettingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAllSettingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDisplayedAttributesSignalError() instead")
    void getDisplayedAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getDisplayedAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistinctAttributeSignalError() instead")
    void getDistinctAttributeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getDistinctAttributeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFacetingSignalError() instead")
    void getFacetingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getFacetingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFilterableAttributesSignalError() instead")
    void getFilterableAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getFilterableAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaginationSignalError() instead")
    void getPaginationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getPaginationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRankingRulesSignalError() instead")
    void getRankingRulesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getRankingRulesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSearchableAttributesSignalError() instead")
    void getSearchableAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSearchableAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSortableAttributesSignalError() instead")
    void getSortableAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSortableAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStopWordsSignalError() instead")
    void getStopWordsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getStopWordsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSynonymsSignalError() instead")
    void getSynonymsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSynonymsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTypoToleranceSignalError() instead")
    void getTypoToleranceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getTypoToleranceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetAllSettingsSignalError() instead")
    void resetAllSettingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resetAllSettingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetDisplayedAttributesSignalError() instead")
    void resetDisplayedAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resetDisplayedAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetDistinctAttributeSignalError() instead")
    void resetDistinctAttributeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resetDistinctAttributeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetFacetingSignalError() instead")
    void resetFacetingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resetFacetingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetFilterableAttributesSignalError() instead")
    void resetFilterableAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resetFilterableAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetPaginationSignalError() instead")
    void resetPaginationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resetPaginationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetRankingRulesSignalError() instead")
    void resetRankingRulesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resetRankingRulesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetSearchableAttributesSignalError() instead")
    void resetSearchableAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resetSearchableAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetSortableAttributesSignalError() instead")
    void resetSortableAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resetSortableAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetStopWordsSignalError() instead")
    void resetStopWordsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resetStopWordsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetSynonymsSignalError() instead")
    void resetSynonymsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resetSynonymsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetTypoToleranceSignalError() instead")
    void resetTypoToleranceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resetTypoToleranceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDisplayedAttributesSignalError() instead")
    void updateDisplayedAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateDisplayedAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDistinctAttributeSignalError() instead")
    void updateDistinctAttributeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateDistinctAttributeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFacetingSignalError() instead")
    void updateFacetingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateFacetingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFilterableAttributesSignalError() instead")
    void updateFilterableAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateFilterableAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePaginationSignalError() instead")
    void updatePaginationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updatePaginationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRankingRulesSignalError() instead")
    void updateRankingRulesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateRankingRulesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSearchableAttributesSignalError() instead")
    void updateSearchableAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateSearchableAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSettingsSignalError() instead")
    void updateSettingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateSettingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSortableAttributesSignalError() instead")
    void updateSortableAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateSortableAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStopWordsSignalError() instead")
    void updateStopWordsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateStopWordsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSynonymsSignalError() instead")
    void updateSynonymsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateSynonymsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTypoToleranceSignalError() instead")
    void updateTypoToleranceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateTypoToleranceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAllSettingsSignalErrorFull() instead")
    void getAllSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDisplayedAttributesSignalErrorFull() instead")
    void getDisplayedAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDisplayedAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistinctAttributeSignalErrorFull() instead")
    void getDistinctAttributeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistinctAttributeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFacetingSignalErrorFull() instead")
    void getFacetingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFacetingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFilterableAttributesSignalErrorFull() instead")
    void getFilterableAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFilterableAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaginationSignalErrorFull() instead")
    void getPaginationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaginationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRankingRulesSignalErrorFull() instead")
    void getRankingRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRankingRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSearchableAttributesSignalErrorFull() instead")
    void getSearchableAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSearchableAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSortableAttributesSignalErrorFull() instead")
    void getSortableAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSortableAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStopWordsSignalErrorFull() instead")
    void getStopWordsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStopWordsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSynonymsSignalErrorFull() instead")
    void getSynonymsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSynonymsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTypoToleranceSignalErrorFull() instead")
    void getTypoToleranceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTypoToleranceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetAllSettingsSignalErrorFull() instead")
    void resetAllSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resetAllSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetDisplayedAttributesSignalErrorFull() instead")
    void resetDisplayedAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resetDisplayedAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetDistinctAttributeSignalErrorFull() instead")
    void resetDistinctAttributeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resetDistinctAttributeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetFacetingSignalErrorFull() instead")
    void resetFacetingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resetFacetingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetFilterableAttributesSignalErrorFull() instead")
    void resetFilterableAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resetFilterableAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetPaginationSignalErrorFull() instead")
    void resetPaginationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resetPaginationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetRankingRulesSignalErrorFull() instead")
    void resetRankingRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resetRankingRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetSearchableAttributesSignalErrorFull() instead")
    void resetSearchableAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resetSearchableAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetSortableAttributesSignalErrorFull() instead")
    void resetSortableAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resetSortableAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetStopWordsSignalErrorFull() instead")
    void resetStopWordsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resetStopWordsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetSynonymsSignalErrorFull() instead")
    void resetSynonymsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resetSynonymsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetTypoToleranceSignalErrorFull() instead")
    void resetTypoToleranceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resetTypoToleranceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDisplayedAttributesSignalErrorFull() instead")
    void updateDisplayedAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDisplayedAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDistinctAttributeSignalErrorFull() instead")
    void updateDistinctAttributeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDistinctAttributeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFacetingSignalErrorFull() instead")
    void updateFacetingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFacetingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFilterableAttributesSignalErrorFull() instead")
    void updateFilterableAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFilterableAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePaginationSignalErrorFull() instead")
    void updatePaginationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePaginationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRankingRulesSignalErrorFull() instead")
    void updateRankingRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRankingRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSearchableAttributesSignalErrorFull() instead")
    void updateSearchableAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSearchableAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSettingsSignalErrorFull() instead")
    void updateSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSortableAttributesSignalErrorFull() instead")
    void updateSortableAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSortableAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateStopWordsSignalErrorFull() instead")
    void updateStopWordsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStopWordsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSynonymsSignalErrorFull() instead")
    void updateSynonymsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSynonymsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTypoToleranceSignalErrorFull() instead")
    void updateTypoToleranceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTypoToleranceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
