/**
 * Meilisearch v1.1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAKey_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAKey_request::OAICreateAKey_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAKey_request::OAICreateAKey_request() {
    this->initializeModel();
}

OAICreateAKey_request::~OAICreateAKey_request() {}

void OAICreateAKey_request::initializeModel() {

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_indexes_isSet = false;
    m_indexes_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAICreateAKey_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAKey_request::fromJsonObject(QJsonObject json) {

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expiresAt")]);
    m_expires_at_isSet = !json[QString("expiresAt")].isNull() && m_expires_at_isValid;

    m_indexes_isValid = ::OpenAPI::fromJsonValue(m_indexes, json[QString("indexes")]);
    m_indexes_isSet = !json[QString("indexes")].isNull() && m_indexes_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAICreateAKey_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAKey_request::asJsonObject() const {
    QJsonObject obj;
    if (m_actions.size() > 0) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expiresAt"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_indexes.size() > 0) {
        obj.insert(QString("indexes"), ::OpenAPI::toJsonValue(m_indexes));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QList<QString> OAICreateAKey_request::getActions() const {
    return m_actions;
}
void OAICreateAKey_request::setActions(const QList<QString> &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAICreateAKey_request::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAICreateAKey_request::is_actions_Valid() const{
    return m_actions_isValid;
}

QString OAICreateAKey_request::getDescription() const {
    return m_description;
}
void OAICreateAKey_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateAKey_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateAKey_request::is_description_Valid() const{
    return m_description_isValid;
}

QJsonValue OAICreateAKey_request::getExpiresAt() const {
    return m_expires_at;
}
void OAICreateAKey_request::setExpiresAt(const QJsonValue &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAICreateAKey_request::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAICreateAKey_request::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

QList<QString> OAICreateAKey_request::getIndexes() const {
    return m_indexes;
}
void OAICreateAKey_request::setIndexes(const QList<QString> &indexes) {
    m_indexes = indexes;
    m_indexes_isSet = true;
}

bool OAICreateAKey_request::is_indexes_Set() const{
    return m_indexes_isSet;
}

bool OAICreateAKey_request::is_indexes_Valid() const{
    return m_indexes_isValid;
}

QString OAICreateAKey_request::getName() const {
    return m_name;
}
void OAICreateAKey_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateAKey_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateAKey_request::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICreateAKey_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_indexes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAKey_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
