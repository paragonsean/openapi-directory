/**
 * Meilisearch v1.1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDocumentsApi_H
#define OAI_OAIDocumentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddOrReplaceDocuments_request_inner.h"
#include "OAIAddOrUpdateDocuments_request_inner.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDocumentsApi : public QObject {
    Q_OBJECT

public:
    OAIDocumentsApi(const int timeOut = 0);
    ~OAIDocumentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  primary_key QString [optional]
    * @param[in]  csv_delimiter QString [optional]
    * @param[in]  oai_add_or_replace_documents_request_inner QList<OAIAddOrReplaceDocuments_request_inner> [optional]
    */
    virtual void addOrReplaceDocuments(const ::OpenAPI::OptionalParam<QString> &primary_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &csv_delimiter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIAddOrReplaceDocuments_request_inner>> &oai_add_or_replace_documents_request_inner = ::OpenAPI::OptionalParam<QList<OAIAddOrReplaceDocuments_request_inner>>());

    /**
    * @param[in]  primary_key QString [optional]
    * @param[in]  csv_delimiter QString [optional]
    * @param[in]  oai_add_or_update_documents_request_inner QList<OAIAddOrUpdateDocuments_request_inner> [optional]
    */
    virtual void addOrUpdateDocuments(const ::OpenAPI::OptionalParam<QString> &primary_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &csv_delimiter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIAddOrUpdateDocuments_request_inner>> &oai_add_or_update_documents_request_inner = ::OpenAPI::OptionalParam<QList<OAIAddOrUpdateDocuments_request_inner>>());


    virtual void deleteAllDocuments();

    /**
    * @param[in]  request_body QList<double> [optional]
    */
    virtual void deleteDocuments(const ::OpenAPI::OptionalParam<QList<double>> &request_body = ::OpenAPI::OptionalParam<QList<double>>());


    virtual void deleteOneDocument();

    /**
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void getDocuments(const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  fields QString [optional]
    */
    virtual void getOneDocument(const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addOrReplaceDocumentsCallback(OAIHttpRequestWorker *worker);
    void addOrUpdateDocumentsCallback(OAIHttpRequestWorker *worker);
    void deleteAllDocumentsCallback(OAIHttpRequestWorker *worker);
    void deleteDocumentsCallback(OAIHttpRequestWorker *worker);
    void deleteOneDocumentCallback(OAIHttpRequestWorker *worker);
    void getDocumentsCallback(OAIHttpRequestWorker *worker);
    void getOneDocumentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addOrReplaceDocumentsSignal();
    void addOrUpdateDocumentsSignal();
    void deleteAllDocumentsSignal();
    void deleteDocumentsSignal();
    void deleteOneDocumentSignal();
    void getDocumentsSignal();
    void getOneDocumentSignal();


    void addOrReplaceDocumentsSignalFull(OAIHttpRequestWorker *worker);
    void addOrUpdateDocumentsSignalFull(OAIHttpRequestWorker *worker);
    void deleteAllDocumentsSignalFull(OAIHttpRequestWorker *worker);
    void deleteDocumentsSignalFull(OAIHttpRequestWorker *worker);
    void deleteOneDocumentSignalFull(OAIHttpRequestWorker *worker);
    void getDocumentsSignalFull(OAIHttpRequestWorker *worker);
    void getOneDocumentSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addOrReplaceDocumentsSignalError() instead")
    void addOrReplaceDocumentsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addOrReplaceDocumentsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addOrUpdateDocumentsSignalError() instead")
    void addOrUpdateDocumentsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addOrUpdateDocumentsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAllDocumentsSignalError() instead")
    void deleteAllDocumentsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAllDocumentsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDocumentsSignalError() instead")
    void deleteDocumentsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDocumentsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOneDocumentSignalError() instead")
    void deleteOneDocumentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOneDocumentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDocumentsSignalError() instead")
    void getDocumentsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getDocumentsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOneDocumentSignalError() instead")
    void getOneDocumentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getOneDocumentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addOrReplaceDocumentsSignalErrorFull() instead")
    void addOrReplaceDocumentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addOrReplaceDocumentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addOrUpdateDocumentsSignalErrorFull() instead")
    void addOrUpdateDocumentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addOrUpdateDocumentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAllDocumentsSignalErrorFull() instead")
    void deleteAllDocumentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAllDocumentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDocumentsSignalErrorFull() instead")
    void deleteDocumentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDocumentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOneDocumentSignalErrorFull() instead")
    void deleteOneDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOneDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDocumentsSignalErrorFull() instead")
    void getDocumentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDocumentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOneDocumentSignalErrorFull() instead")
    void getOneDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOneDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
