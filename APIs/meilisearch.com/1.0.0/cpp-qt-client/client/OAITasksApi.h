/**
 * Meilisearch v1.1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITasksApi_H
#define OAI_OAITasksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITasksApi : public QObject {
    Q_OBJECT

public:
    OAITasksApi(const int timeOut = 0);
    ~OAITasksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  uids QString [optional]
    * @param[in]  index_uids QString [optional]
    * @param[in]  types QString [optional]
    * @param[in]  statuses QString [optional]
    * @param[in]  before_enqueued_at QString [optional]
    * @param[in]  after_enqueued_at QString [optional]
    * @param[in]  before_started_at QString [optional]
    * @param[in]  after_started_at QString [optional]
    * @param[in]  before_finished_at QString [optional]
    * @param[in]  after_finished_at QString [optional]
    * @param[in]  canceled_by QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  from QString [optional]
    */
    virtual void cancelTasks(const ::OpenAPI::OptionalParam<QString> &uids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &index_uids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &types = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &statuses = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &before_enqueued_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &after_enqueued_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &before_started_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &after_started_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &before_finished_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &after_finished_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &canceled_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  uids QString [optional]
    * @param[in]  index_uids QString [optional]
    * @param[in]  types QString [optional]
    * @param[in]  statuses QString [optional]
    * @param[in]  before_enqueued_at QString [optional]
    * @param[in]  after_enqueued_at QString [optional]
    * @param[in]  before_started_at QString [optional]
    * @param[in]  after_started_at QString [optional]
    * @param[in]  before_finished_at QString [optional]
    * @param[in]  after_finished_at QString [optional]
    * @param[in]  canceled_by QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  from QString [optional]
    */
    virtual void deleteTasks(const ::OpenAPI::OptionalParam<QString> &uids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &index_uids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &types = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &statuses = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &before_enqueued_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &after_enqueued_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &before_started_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &after_started_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &before_finished_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &after_finished_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &canceled_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  uids QString [optional]
    * @param[in]  index_uids QString [optional]
    * @param[in]  types QString [optional]
    * @param[in]  statuses QString [optional]
    * @param[in]  before_enqueued_at QString [optional]
    * @param[in]  after_enqueued_at QString [optional]
    * @param[in]  before_started_at QString [optional]
    * @param[in]  after_started_at QString [optional]
    * @param[in]  before_finished_at QString [optional]
    * @param[in]  after_finished_at QString [optional]
    * @param[in]  canceled_by QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  from QString [optional]
    */
    virtual void getAllTasks(const ::OpenAPI::OptionalParam<QString> &uids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &index_uids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &types = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &statuses = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &before_enqueued_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &after_enqueued_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &before_started_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &after_started_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &before_finished_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &after_finished_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &canceled_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from = ::OpenAPI::OptionalParam<QString>());


    virtual void getOneTask();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cancelTasksCallback(OAIHttpRequestWorker *worker);
    void deleteTasksCallback(OAIHttpRequestWorker *worker);
    void getAllTasksCallback(OAIHttpRequestWorker *worker);
    void getOneTaskCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cancelTasksSignal();
    void deleteTasksSignal();
    void getAllTasksSignal();
    void getOneTaskSignal();


    void cancelTasksSignalFull(OAIHttpRequestWorker *worker);
    void deleteTasksSignalFull(OAIHttpRequestWorker *worker);
    void getAllTasksSignalFull(OAIHttpRequestWorker *worker);
    void getOneTaskSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use cancelTasksSignalError() instead")
    void cancelTasksSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cancelTasksSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTasksSignalError() instead")
    void deleteTasksSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTasksSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllTasksSignalError() instead")
    void getAllTasksSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAllTasksSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOneTaskSignalError() instead")
    void getOneTaskSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getOneTaskSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cancelTasksSignalErrorFull() instead")
    void cancelTasksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelTasksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTasksSignalErrorFull() instead")
    void deleteTasksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTasksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllTasksSignalErrorFull() instead")
    void getAllTasksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllTasksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOneTaskSignalErrorFull() instead")
    void getOneTaskSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOneTaskSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
