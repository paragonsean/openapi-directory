/**
 * Meilisearch v1.1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateTypoTolerance_request_minWordSizeForTypos.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateTypoTolerance_request_minWordSizeForTypos::OAIUpdateTypoTolerance_request_minWordSizeForTypos(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateTypoTolerance_request_minWordSizeForTypos::OAIUpdateTypoTolerance_request_minWordSizeForTypos() {
    this->initializeModel();
}

OAIUpdateTypoTolerance_request_minWordSizeForTypos::~OAIUpdateTypoTolerance_request_minWordSizeForTypos() {}

void OAIUpdateTypoTolerance_request_minWordSizeForTypos::initializeModel() {

    m_one_typo_isSet = false;
    m_one_typo_isValid = false;

    m_two_typos_isSet = false;
    m_two_typos_isValid = false;
}

void OAIUpdateTypoTolerance_request_minWordSizeForTypos::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateTypoTolerance_request_minWordSizeForTypos::fromJsonObject(QJsonObject json) {

    m_one_typo_isValid = ::OpenAPI::fromJsonValue(m_one_typo, json[QString("oneTypo")]);
    m_one_typo_isSet = !json[QString("oneTypo")].isNull() && m_one_typo_isValid;

    m_two_typos_isValid = ::OpenAPI::fromJsonValue(m_two_typos, json[QString("twoTypos")]);
    m_two_typos_isSet = !json[QString("twoTypos")].isNull() && m_two_typos_isValid;
}

QString OAIUpdateTypoTolerance_request_minWordSizeForTypos::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateTypoTolerance_request_minWordSizeForTypos::asJsonObject() const {
    QJsonObject obj;
    if (m_one_typo_isSet) {
        obj.insert(QString("oneTypo"), ::OpenAPI::toJsonValue(m_one_typo));
    }
    if (m_two_typos_isSet) {
        obj.insert(QString("twoTypos"), ::OpenAPI::toJsonValue(m_two_typos));
    }
    return obj;
}

double OAIUpdateTypoTolerance_request_minWordSizeForTypos::getOneTypo() const {
    return m_one_typo;
}
void OAIUpdateTypoTolerance_request_minWordSizeForTypos::setOneTypo(const double &one_typo) {
    m_one_typo = one_typo;
    m_one_typo_isSet = true;
}

bool OAIUpdateTypoTolerance_request_minWordSizeForTypos::is_one_typo_Set() const{
    return m_one_typo_isSet;
}

bool OAIUpdateTypoTolerance_request_minWordSizeForTypos::is_one_typo_Valid() const{
    return m_one_typo_isValid;
}

double OAIUpdateTypoTolerance_request_minWordSizeForTypos::getTwoTypos() const {
    return m_two_typos;
}
void OAIUpdateTypoTolerance_request_minWordSizeForTypos::setTwoTypos(const double &two_typos) {
    m_two_typos = two_typos;
    m_two_typos_isSet = true;
}

bool OAIUpdateTypoTolerance_request_minWordSizeForTypos::is_two_typos_Set() const{
    return m_two_typos_isSet;
}

bool OAIUpdateTypoTolerance_request_minWordSizeForTypos::is_two_typos_Valid() const{
    return m_two_typos_isValid;
}

bool OAIUpdateTypoTolerance_request_minWordSizeForTypos::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_one_typo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_two_typos_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateTypoTolerance_request_minWordSizeForTypos::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
