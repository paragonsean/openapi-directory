# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateFacetingRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_values_per_facet: float=None):
        """UpdateFacetingRequest - a model defined in OpenAPI

        :param max_values_per_facet: The max_values_per_facet of this UpdateFacetingRequest.
        """
        self.openapi_types = {
            'max_values_per_facet': float
        }

        self.attribute_map = {
            'max_values_per_facet': 'maxValuesPerFacet'
        }

        self._max_values_per_facet = max_values_per_facet

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateFacetingRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateFaceting_request of this UpdateFacetingRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_values_per_facet(self):
        """Gets the max_values_per_facet of this UpdateFacetingRequest.


        :return: The max_values_per_facet of this UpdateFacetingRequest.
        :rtype: float
        """
        return self._max_values_per_facet

    @max_values_per_facet.setter
    def max_values_per_facet(self, max_values_per_facet):
        """Sets the max_values_per_facet of this UpdateFacetingRequest.


        :param max_values_per_facet: The max_values_per_facet of this UpdateFacetingRequest.
        :type max_values_per_facet: float
        """

        self._max_values_per_facet = max_values_per_facet
