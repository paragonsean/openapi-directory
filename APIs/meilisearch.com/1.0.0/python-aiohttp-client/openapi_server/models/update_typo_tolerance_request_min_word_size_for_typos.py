# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateTypoToleranceRequestMinWordSizeForTypos(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, one_typo: float=None, two_typos: float=None):
        """UpdateTypoToleranceRequestMinWordSizeForTypos - a model defined in OpenAPI

        :param one_typo: The one_typo of this UpdateTypoToleranceRequestMinWordSizeForTypos.
        :param two_typos: The two_typos of this UpdateTypoToleranceRequestMinWordSizeForTypos.
        """
        self.openapi_types = {
            'one_typo': float,
            'two_typos': float
        }

        self.attribute_map = {
            'one_typo': 'oneTypo',
            'two_typos': 'twoTypos'
        }

        self._one_typo = one_typo
        self._two_typos = two_typos

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateTypoToleranceRequestMinWordSizeForTypos':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateTypoTolerance_request_minWordSizeForTypos of this UpdateTypoToleranceRequestMinWordSizeForTypos.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def one_typo(self):
        """Gets the one_typo of this UpdateTypoToleranceRequestMinWordSizeForTypos.


        :return: The one_typo of this UpdateTypoToleranceRequestMinWordSizeForTypos.
        :rtype: float
        """
        return self._one_typo

    @one_typo.setter
    def one_typo(self, one_typo):
        """Sets the one_typo of this UpdateTypoToleranceRequestMinWordSizeForTypos.


        :param one_typo: The one_typo of this UpdateTypoToleranceRequestMinWordSizeForTypos.
        :type one_typo: float
        """

        self._one_typo = one_typo

    @property
    def two_typos(self):
        """Gets the two_typos of this UpdateTypoToleranceRequestMinWordSizeForTypos.


        :return: The two_typos of this UpdateTypoToleranceRequestMinWordSizeForTypos.
        :rtype: float
        """
        return self._two_typos

    @two_typos.setter
    def two_typos(self, two_typos):
        """Sets the two_typos of this UpdateTypoToleranceRequestMinWordSizeForTypos.


        :param two_typos: The two_typos of this UpdateTypoToleranceRequestMinWordSizeForTypos.
        :type two_typos: float
        """

        self._two_typos = two_typos
