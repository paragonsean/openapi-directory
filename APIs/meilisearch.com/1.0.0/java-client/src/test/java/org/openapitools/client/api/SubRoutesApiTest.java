/*
 * Meilisearch v1.1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.UpdateFacetingRequest;
import org.openapitools.client.model.UpdatePaginationRequest;
import org.openapitools.client.model.UpdateSynonymsRequest;
import org.openapitools.client.model.UpdateTypoToleranceRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SubRoutesApi
 */
@Disabled
public class SubRoutesApiTest {

    private final SubRoutesApi api = new SubRoutesApi();

    /**
     * Get displayed attributes
     *
     * Get displayed attributes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDisplayedAttributes_0Test() throws ApiException {
        api.getDisplayedAttributes_0();
        // TODO: test validations
    }

    /**
     * Get distinct attribute
     *
     * Get distinct attribute
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDistinctAttribute_0Test() throws ApiException {
        api.getDistinctAttribute_0();
        // TODO: test validations
    }

    /**
     * Get faceting
     *
     * Get faceting
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFaceting_0Test() throws ApiException {
        api.getFaceting_0();
        // TODO: test validations
    }

    /**
     * Get filterable attributes
     *
     * Get filterable attributes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFilterableAttributes_0Test() throws ApiException {
        api.getFilterableAttributes_0();
        // TODO: test validations
    }

    /**
     * Get pagination
     *
     * Get pagination
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPagination_0Test() throws ApiException {
        api.getPagination_0();
        // TODO: test validations
    }

    /**
     * Get ranking rules
     *
     * Get ranking rules
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRankingRules_0Test() throws ApiException {
        api.getRankingRules_0();
        // TODO: test validations
    }

    /**
     * Get searchable attributes
     *
     * Get searchable attributes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSearchableAttributes_0Test() throws ApiException {
        api.getSearchableAttributes_0();
        // TODO: test validations
    }

    /**
     * Get sortable attributes
     *
     * Get sortable attributes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSortableAttributes_0Test() throws ApiException {
        api.getSortableAttributes_0();
        // TODO: test validations
    }

    /**
     * Get stop-words
     *
     * Get stop-words
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStopWords_0Test() throws ApiException {
        List<String> requestBody = null;
        api.getStopWords_0(requestBody);
        // TODO: test validations
    }

    /**
     * Get synonyms
     *
     * Get synonyms
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSynonyms_0Test() throws ApiException {
        api.getSynonyms_0();
        // TODO: test validations
    }

    /**
     * Get typo-tolerance
     *
     * Get typo-tolerance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTypoTolerance_0Test() throws ApiException {
        api.getTypoTolerance_0();
        // TODO: test validations
    }

    /**
     * Reset displayed attributes
     *
     * Reset displayed attributes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetDisplayedAttributes_0Test() throws ApiException {
        api.resetDisplayedAttributes_0();
        // TODO: test validations
    }

    /**
     * Reset distinct attribute
     *
     * Reset distinct attribute
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetDistinctAttribute_0Test() throws ApiException {
        api.resetDistinctAttribute_0();
        // TODO: test validations
    }

    /**
     * Reset faceting
     *
     * Reset faceting
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetFaceting_0Test() throws ApiException {
        api.resetFaceting_0();
        // TODO: test validations
    }

    /**
     * Reset filterable attributes
     *
     * Reset filterable attributes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetFilterableAttributes_0Test() throws ApiException {
        api.resetFilterableAttributes_0();
        // TODO: test validations
    }

    /**
     * Reset pagination
     *
     * Reset pagination
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetPagination_0Test() throws ApiException {
        api.resetPagination_0();
        // TODO: test validations
    }

    /**
     * Reset ranking rules
     *
     * Reset ranking rules
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetRankingRules_0Test() throws ApiException {
        api.resetRankingRules_0();
        // TODO: test validations
    }

    /**
     * Reset searchable attributes
     *
     * Reset searchable attributes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetSearchableAttributes_0Test() throws ApiException {
        api.resetSearchableAttributes_0();
        // TODO: test validations
    }

    /**
     * Reset sortable attributes
     *
     * Reset sortable attributes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetSortableAttributes_0Test() throws ApiException {
        api.resetSortableAttributes_0();
        // TODO: test validations
    }

    /**
     * Reset stop-words
     *
     * Reset stop-words
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetStopWords_0Test() throws ApiException {
        api.resetStopWords_0();
        // TODO: test validations
    }

    /**
     * Reset synonyms
     *
     * Reset synonyms
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetSynonyms_0Test() throws ApiException {
        api.resetSynonyms_0();
        // TODO: test validations
    }

    /**
     * Reset typo-tolerance
     *
     * Reset typo-tolerance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetTypoTolerance_0Test() throws ApiException {
        api.resetTypoTolerance_0();
        // TODO: test validations
    }

    /**
     * Update displayed attributes
     *
     * Update displayed attributes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDisplayedAttributes_0Test() throws ApiException {
        List<String> requestBody = null;
        api.updateDisplayedAttributes_0(requestBody);
        // TODO: test validations
    }

    /**
     * Update distinct attribute
     *
     * Update distinct attribute
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDistinctAttribute_0Test() throws ApiException {
        api.updateDistinctAttribute_0();
        // TODO: test validations
    }

    /**
     * Update faceting
     *
     * Update faceting
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFaceting_0Test() throws ApiException {
        UpdateFacetingRequest updateFacetingRequest = null;
        api.updateFaceting_0(updateFacetingRequest);
        // TODO: test validations
    }

    /**
     * Update filterable attributes
     *
     * Update filterable attributes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFilterableAttributes_0Test() throws ApiException {
        List<String> requestBody = null;
        api.updateFilterableAttributes_0(requestBody);
        // TODO: test validations
    }

    /**
     * Update pagination
     *
     * Update pagination
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePagination_0Test() throws ApiException {
        UpdatePaginationRequest updatePaginationRequest = null;
        api.updatePagination_0(updatePaginationRequest);
        // TODO: test validations
    }

    /**
     * Update ranking rules
     *
     * Update ranking rules
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRankingRules_0Test() throws ApiException {
        List<String> requestBody = null;
        api.updateRankingRules_0(requestBody);
        // TODO: test validations
    }

    /**
     * Update searchable attributes
     *
     * Update searchable attributes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSearchableAttributes_0Test() throws ApiException {
        List<String> requestBody = null;
        api.updateSearchableAttributes_0(requestBody);
        // TODO: test validations
    }

    /**
     * Update sortable attributes
     *
     * Update sortable attributes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSortableAttributes_0Test() throws ApiException {
        List<String> requestBody = null;
        api.updateSortableAttributes_0(requestBody);
        // TODO: test validations
    }

    /**
     * Update stop-words
     *
     * Update stop-words
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStopWords_0Test() throws ApiException {
        List<String> requestBody = null;
        api.updateStopWords_0(requestBody);
        // TODO: test validations
    }

    /**
     * Update synonyms
     *
     * Update synonyms
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSynonyms_0Test() throws ApiException {
        UpdateSynonymsRequest updateSynonymsRequest = null;
        api.updateSynonyms_0(updateSynonymsRequest);
        // TODO: test validations
    }

    /**
     * Update typo-tolerance
     *
     * Update typo-tolerance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTypoTolerance_0Test() throws ApiException {
        UpdateTypoToleranceRequest updateTypoToleranceRequest = null;
        api.updateTypoTolerance_0(updateTypoToleranceRequest);
        // TODO: test validations
    }

}
