/*
 * Meilisearch v1.1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.UpdateFacetingRequest;
import org.openapitools.client.model.UpdatePaginationRequest;
import org.openapitools.client.model.UpdateSettingsRequest;
import org.openapitools.client.model.UpdateSynonymsRequest;
import org.openapitools.client.model.UpdateTypoToleranceRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SettingsApi
 */
@Disabled
public class SettingsApiTest {

    private final SettingsApi api = new SettingsApi();

    /**
     * Get all settings
     *
     * Get all settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllSettingsTest() throws ApiException {
        api.getAllSettings();
        // TODO: test validations
    }

    /**
     * Get displayed attributes
     *
     * Get displayed attributes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDisplayedAttributesTest() throws ApiException {
        api.getDisplayedAttributes();
        // TODO: test validations
    }

    /**
     * Get distinct attribute
     *
     * Get distinct attribute
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDistinctAttributeTest() throws ApiException {
        api.getDistinctAttribute();
        // TODO: test validations
    }

    /**
     * Get faceting
     *
     * Get faceting
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFacetingTest() throws ApiException {
        api.getFaceting();
        // TODO: test validations
    }

    /**
     * Get filterable attributes
     *
     * Get filterable attributes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFilterableAttributesTest() throws ApiException {
        api.getFilterableAttributes();
        // TODO: test validations
    }

    /**
     * Get pagination
     *
     * Get pagination
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaginationTest() throws ApiException {
        api.getPagination();
        // TODO: test validations
    }

    /**
     * Get ranking rules
     *
     * Get ranking rules
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRankingRulesTest() throws ApiException {
        api.getRankingRules();
        // TODO: test validations
    }

    /**
     * Get searchable attributes
     *
     * Get searchable attributes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSearchableAttributesTest() throws ApiException {
        api.getSearchableAttributes();
        // TODO: test validations
    }

    /**
     * Get sortable attributes
     *
     * Get sortable attributes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSortableAttributesTest() throws ApiException {
        api.getSortableAttributes();
        // TODO: test validations
    }

    /**
     * Get stop-words
     *
     * Get stop-words
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStopWordsTest() throws ApiException {
        List<String> requestBody = null;
        api.getStopWords(requestBody);
        // TODO: test validations
    }

    /**
     * Get synonyms
     *
     * Get synonyms
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSynonymsTest() throws ApiException {
        api.getSynonyms();
        // TODO: test validations
    }

    /**
     * Get typo-tolerance
     *
     * Get typo-tolerance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTypoToleranceTest() throws ApiException {
        api.getTypoTolerance();
        // TODO: test validations
    }

    /**
     * Reset all settings
     *
     * Reset all settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetAllSettingsTest() throws ApiException {
        api.resetAllSettings();
        // TODO: test validations
    }

    /**
     * Reset displayed attributes
     *
     * Reset displayed attributes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetDisplayedAttributesTest() throws ApiException {
        api.resetDisplayedAttributes();
        // TODO: test validations
    }

    /**
     * Reset distinct attribute
     *
     * Reset distinct attribute
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetDistinctAttributeTest() throws ApiException {
        api.resetDistinctAttribute();
        // TODO: test validations
    }

    /**
     * Reset faceting
     *
     * Reset faceting
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetFacetingTest() throws ApiException {
        api.resetFaceting();
        // TODO: test validations
    }

    /**
     * Reset filterable attributes
     *
     * Reset filterable attributes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetFilterableAttributesTest() throws ApiException {
        api.resetFilterableAttributes();
        // TODO: test validations
    }

    /**
     * Reset pagination
     *
     * Reset pagination
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetPaginationTest() throws ApiException {
        api.resetPagination();
        // TODO: test validations
    }

    /**
     * Reset ranking rules
     *
     * Reset ranking rules
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetRankingRulesTest() throws ApiException {
        api.resetRankingRules();
        // TODO: test validations
    }

    /**
     * Reset searchable attributes
     *
     * Reset searchable attributes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetSearchableAttributesTest() throws ApiException {
        api.resetSearchableAttributes();
        // TODO: test validations
    }

    /**
     * Reset sortable attributes
     *
     * Reset sortable attributes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetSortableAttributesTest() throws ApiException {
        api.resetSortableAttributes();
        // TODO: test validations
    }

    /**
     * Reset stop-words
     *
     * Reset stop-words
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetStopWordsTest() throws ApiException {
        api.resetStopWords();
        // TODO: test validations
    }

    /**
     * Reset synonyms
     *
     * Reset synonyms
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetSynonymsTest() throws ApiException {
        api.resetSynonyms();
        // TODO: test validations
    }

    /**
     * Reset typo-tolerance
     *
     * Reset typo-tolerance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetTypoToleranceTest() throws ApiException {
        api.resetTypoTolerance();
        // TODO: test validations
    }

    /**
     * Update displayed attributes
     *
     * Update displayed attributes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDisplayedAttributesTest() throws ApiException {
        List<String> requestBody = null;
        api.updateDisplayedAttributes(requestBody);
        // TODO: test validations
    }

    /**
     * Update distinct attribute
     *
     * Update distinct attribute
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDistinctAttributeTest() throws ApiException {
        api.updateDistinctAttribute();
        // TODO: test validations
    }

    /**
     * Update faceting
     *
     * Update faceting
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFacetingTest() throws ApiException {
        UpdateFacetingRequest updateFacetingRequest = null;
        api.updateFaceting(updateFacetingRequest);
        // TODO: test validations
    }

    /**
     * Update filterable attributes
     *
     * Update filterable attributes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFilterableAttributesTest() throws ApiException {
        List<String> requestBody = null;
        api.updateFilterableAttributes(requestBody);
        // TODO: test validations
    }

    /**
     * Update pagination
     *
     * Update pagination
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePaginationTest() throws ApiException {
        UpdatePaginationRequest updatePaginationRequest = null;
        api.updatePagination(updatePaginationRequest);
        // TODO: test validations
    }

    /**
     * Update ranking rules
     *
     * Update ranking rules
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRankingRulesTest() throws ApiException {
        List<String> requestBody = null;
        api.updateRankingRules(requestBody);
        // TODO: test validations
    }

    /**
     * Update searchable attributes
     *
     * Update searchable attributes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSearchableAttributesTest() throws ApiException {
        List<String> requestBody = null;
        api.updateSearchableAttributes(requestBody);
        // TODO: test validations
    }

    /**
     * Update settings
     *
     * Update settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSettingsTest() throws ApiException {
        UpdateSettingsRequest updateSettingsRequest = null;
        api.updateSettings(updateSettingsRequest);
        // TODO: test validations
    }

    /**
     * Update sortable attributes
     *
     * Update sortable attributes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSortableAttributesTest() throws ApiException {
        List<String> requestBody = null;
        api.updateSortableAttributes(requestBody);
        // TODO: test validations
    }

    /**
     * Update stop-words
     *
     * Update stop-words
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStopWordsTest() throws ApiException {
        List<String> requestBody = null;
        api.updateStopWords(requestBody);
        // TODO: test validations
    }

    /**
     * Update synonyms
     *
     * Update synonyms
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSynonymsTest() throws ApiException {
        UpdateSynonymsRequest updateSynonymsRequest = null;
        api.updateSynonyms(updateSynonymsRequest);
        // TODO: test validations
    }

    /**
     * Update typo-tolerance
     *
     * Update typo-tolerance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTypoToleranceTest() throws ApiException {
        UpdateTypoToleranceRequest updateTypoToleranceRequest = null;
        api.updateTypoTolerance(updateTypoToleranceRequest);
        // TODO: test validations
    }

}
