/*
 * Meilisearch v1.1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateSettingsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:17.373645-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateSettingsRequest {
  public static final String SERIALIZED_NAME_DISPLAYED_ATTRIBUTES = "displayedAttributes";
  @SerializedName(SERIALIZED_NAME_DISPLAYED_ATTRIBUTES)
  private List<String> displayedAttributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILTERABLE_ATTRIBUTES = "filterableAttributes";
  @SerializedName(SERIALIZED_NAME_FILTERABLE_ATTRIBUTES)
  private List<String> filterableAttributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEARCHABLE_ATTRIBUTES = "searchableAttributes";
  @SerializedName(SERIALIZED_NAME_SEARCHABLE_ATTRIBUTES)
  private List<String> searchableAttributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SORTABLE_ATTRIBUTES = "sortableAttributes";
  @SerializedName(SERIALIZED_NAME_SORTABLE_ATTRIBUTES)
  private List<String> sortableAttributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_STOP_WORDS = "stopWords";
  @SerializedName(SERIALIZED_NAME_STOP_WORDS)
  private List<String> stopWords = new ArrayList<>();

  public UpdateSettingsRequest() {
  }

  public UpdateSettingsRequest displayedAttributes(List<String> displayedAttributes) {
    this.displayedAttributes = displayedAttributes;
    return this;
  }

  public UpdateSettingsRequest addDisplayedAttributesItem(String displayedAttributesItem) {
    if (this.displayedAttributes == null) {
      this.displayedAttributes = new ArrayList<>();
    }
    this.displayedAttributes.add(displayedAttributesItem);
    return this;
  }

  /**
   * Get displayedAttributes
   * @return displayedAttributes
   */
  @javax.annotation.Nullable
  public List<String> getDisplayedAttributes() {
    return displayedAttributes;
  }

  public void setDisplayedAttributes(List<String> displayedAttributes) {
    this.displayedAttributes = displayedAttributes;
  }


  public UpdateSettingsRequest filterableAttributes(List<String> filterableAttributes) {
    this.filterableAttributes = filterableAttributes;
    return this;
  }

  public UpdateSettingsRequest addFilterableAttributesItem(String filterableAttributesItem) {
    if (this.filterableAttributes == null) {
      this.filterableAttributes = new ArrayList<>();
    }
    this.filterableAttributes.add(filterableAttributesItem);
    return this;
  }

  /**
   * Get filterableAttributes
   * @return filterableAttributes
   */
  @javax.annotation.Nullable
  public List<String> getFilterableAttributes() {
    return filterableAttributes;
  }

  public void setFilterableAttributes(List<String> filterableAttributes) {
    this.filterableAttributes = filterableAttributes;
  }


  public UpdateSettingsRequest searchableAttributes(List<String> searchableAttributes) {
    this.searchableAttributes = searchableAttributes;
    return this;
  }

  public UpdateSettingsRequest addSearchableAttributesItem(String searchableAttributesItem) {
    if (this.searchableAttributes == null) {
      this.searchableAttributes = new ArrayList<>();
    }
    this.searchableAttributes.add(searchableAttributesItem);
    return this;
  }

  /**
   * Get searchableAttributes
   * @return searchableAttributes
   */
  @javax.annotation.Nullable
  public List<String> getSearchableAttributes() {
    return searchableAttributes;
  }

  public void setSearchableAttributes(List<String> searchableAttributes) {
    this.searchableAttributes = searchableAttributes;
  }


  public UpdateSettingsRequest sortableAttributes(List<String> sortableAttributes) {
    this.sortableAttributes = sortableAttributes;
    return this;
  }

  public UpdateSettingsRequest addSortableAttributesItem(String sortableAttributesItem) {
    if (this.sortableAttributes == null) {
      this.sortableAttributes = new ArrayList<>();
    }
    this.sortableAttributes.add(sortableAttributesItem);
    return this;
  }

  /**
   * Get sortableAttributes
   * @return sortableAttributes
   */
  @javax.annotation.Nullable
  public List<String> getSortableAttributes() {
    return sortableAttributes;
  }

  public void setSortableAttributes(List<String> sortableAttributes) {
    this.sortableAttributes = sortableAttributes;
  }


  public UpdateSettingsRequest stopWords(List<String> stopWords) {
    this.stopWords = stopWords;
    return this;
  }

  public UpdateSettingsRequest addStopWordsItem(String stopWordsItem) {
    if (this.stopWords == null) {
      this.stopWords = new ArrayList<>();
    }
    this.stopWords.add(stopWordsItem);
    return this;
  }

  /**
   * Get stopWords
   * @return stopWords
   */
  @javax.annotation.Nullable
  public List<String> getStopWords() {
    return stopWords;
  }

  public void setStopWords(List<String> stopWords) {
    this.stopWords = stopWords;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateSettingsRequest updateSettingsRequest = (UpdateSettingsRequest) o;
    return Objects.equals(this.displayedAttributes, updateSettingsRequest.displayedAttributes) &&
        Objects.equals(this.filterableAttributes, updateSettingsRequest.filterableAttributes) &&
        Objects.equals(this.searchableAttributes, updateSettingsRequest.searchableAttributes) &&
        Objects.equals(this.sortableAttributes, updateSettingsRequest.sortableAttributes) &&
        Objects.equals(this.stopWords, updateSettingsRequest.stopWords);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayedAttributes, filterableAttributes, searchableAttributes, sortableAttributes, stopWords);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateSettingsRequest {\n");
    sb.append("    displayedAttributes: ").append(toIndentedString(displayedAttributes)).append("\n");
    sb.append("    filterableAttributes: ").append(toIndentedString(filterableAttributes)).append("\n");
    sb.append("    searchableAttributes: ").append(toIndentedString(searchableAttributes)).append("\n");
    sb.append("    sortableAttributes: ").append(toIndentedString(sortableAttributes)).append("\n");
    sb.append("    stopWords: ").append(toIndentedString(stopWords)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayedAttributes");
    openapiFields.add("filterableAttributes");
    openapiFields.add("searchableAttributes");
    openapiFields.add("sortableAttributes");
    openapiFields.add("stopWords");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateSettingsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateSettingsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateSettingsRequest is not found in the empty JSON string", UpdateSettingsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateSettingsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateSettingsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("displayedAttributes") != null && !jsonObj.get("displayedAttributes").isJsonNull() && !jsonObj.get("displayedAttributes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayedAttributes` to be an array in the JSON string but got `%s`", jsonObj.get("displayedAttributes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("filterableAttributes") != null && !jsonObj.get("filterableAttributes").isJsonNull() && !jsonObj.get("filterableAttributes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `filterableAttributes` to be an array in the JSON string but got `%s`", jsonObj.get("filterableAttributes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("searchableAttributes") != null && !jsonObj.get("searchableAttributes").isJsonNull() && !jsonObj.get("searchableAttributes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchableAttributes` to be an array in the JSON string but got `%s`", jsonObj.get("searchableAttributes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sortableAttributes") != null && !jsonObj.get("sortableAttributes").isJsonNull() && !jsonObj.get("sortableAttributes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sortableAttributes` to be an array in the JSON string but got `%s`", jsonObj.get("sortableAttributes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("stopWords") != null && !jsonObj.get("stopWords").isJsonNull() && !jsonObj.get("stopWords").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `stopWords` to be an array in the JSON string but got `%s`", jsonObj.get("stopWords").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateSettingsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateSettingsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateSettingsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateSettingsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateSettingsRequest>() {
           @Override
           public void write(JsonWriter out, UpdateSettingsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateSettingsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateSettingsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateSettingsRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateSettingsRequest
   */
  public static UpdateSettingsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateSettingsRequest.class);
  }

  /**
   * Convert an instance of UpdateSettingsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

