/*
 * Meilisearch v1.1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TasksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TasksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TasksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cancelTasks
     * @param uids  (optional)
     * @param indexUids  (optional)
     * @param types  (optional)
     * @param statuses  (optional)
     * @param beforeEnqueuedAt  (optional)
     * @param afterEnqueuedAt  (optional)
     * @param beforeStartedAt  (optional)
     * @param afterStartedAt  (optional)
     * @param beforeFinishedAt  (optional)
     * @param afterFinishedAt  (optional)
     * @param canceledBy  (optional)
     * @param limit  (optional)
     * @param from  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelTasksCall(String uids, String indexUids, String types, String statuses, String beforeEnqueuedAt, String afterEnqueuedAt, String beforeStartedAt, String afterStartedAt, String beforeFinishedAt, String afterFinishedAt, String canceledBy, String limit, String from, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uids", uids));
        }

        if (indexUids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("indexUids", indexUids));
        }

        if (types != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("types", types));
        }

        if (statuses != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statuses", statuses));
        }

        if (beforeEnqueuedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("beforeEnqueuedAt", beforeEnqueuedAt));
        }

        if (afterEnqueuedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("afterEnqueuedAt", afterEnqueuedAt));
        }

        if (beforeStartedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("beforeStartedAt", beforeStartedAt));
        }

        if (afterStartedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("afterStartedAt", afterStartedAt));
        }

        if (beforeFinishedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("beforeFinishedAt", beforeFinishedAt));
        }

        if (afterFinishedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("afterFinishedAt", afterFinishedAt));
        }

        if (canceledBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("canceledBy", canceledBy));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelTasksValidateBeforeCall(String uids, String indexUids, String types, String statuses, String beforeEnqueuedAt, String afterEnqueuedAt, String beforeStartedAt, String afterStartedAt, String beforeFinishedAt, String afterFinishedAt, String canceledBy, String limit, String from, final ApiCallback _callback) throws ApiException {
        return cancelTasksCall(uids, indexUids, types, statuses, beforeEnqueuedAt, afterEnqueuedAt, beforeStartedAt, afterStartedAt, beforeFinishedAt, afterFinishedAt, canceledBy, limit, from, _callback);

    }

    /**
     * Cancel tasks
     * Cancel tasks
     * @param uids  (optional)
     * @param indexUids  (optional)
     * @param types  (optional)
     * @param statuses  (optional)
     * @param beforeEnqueuedAt  (optional)
     * @param afterEnqueuedAt  (optional)
     * @param beforeStartedAt  (optional)
     * @param afterStartedAt  (optional)
     * @param beforeFinishedAt  (optional)
     * @param afterFinishedAt  (optional)
     * @param canceledBy  (optional)
     * @param limit  (optional)
     * @param from  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void cancelTasks(String uids, String indexUids, String types, String statuses, String beforeEnqueuedAt, String afterEnqueuedAt, String beforeStartedAt, String afterStartedAt, String beforeFinishedAt, String afterFinishedAt, String canceledBy, String limit, String from) throws ApiException {
        cancelTasksWithHttpInfo(uids, indexUids, types, statuses, beforeEnqueuedAt, afterEnqueuedAt, beforeStartedAt, afterStartedAt, beforeFinishedAt, afterFinishedAt, canceledBy, limit, from);
    }

    /**
     * Cancel tasks
     * Cancel tasks
     * @param uids  (optional)
     * @param indexUids  (optional)
     * @param types  (optional)
     * @param statuses  (optional)
     * @param beforeEnqueuedAt  (optional)
     * @param afterEnqueuedAt  (optional)
     * @param beforeStartedAt  (optional)
     * @param afterStartedAt  (optional)
     * @param beforeFinishedAt  (optional)
     * @param afterFinishedAt  (optional)
     * @param canceledBy  (optional)
     * @param limit  (optional)
     * @param from  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cancelTasksWithHttpInfo(String uids, String indexUids, String types, String statuses, String beforeEnqueuedAt, String afterEnqueuedAt, String beforeStartedAt, String afterStartedAt, String beforeFinishedAt, String afterFinishedAt, String canceledBy, String limit, String from) throws ApiException {
        okhttp3.Call localVarCall = cancelTasksValidateBeforeCall(uids, indexUids, types, statuses, beforeEnqueuedAt, afterEnqueuedAt, beforeStartedAt, afterStartedAt, beforeFinishedAt, afterFinishedAt, canceledBy, limit, from, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel tasks (asynchronously)
     * Cancel tasks
     * @param uids  (optional)
     * @param indexUids  (optional)
     * @param types  (optional)
     * @param statuses  (optional)
     * @param beforeEnqueuedAt  (optional)
     * @param afterEnqueuedAt  (optional)
     * @param beforeStartedAt  (optional)
     * @param afterStartedAt  (optional)
     * @param beforeFinishedAt  (optional)
     * @param afterFinishedAt  (optional)
     * @param canceledBy  (optional)
     * @param limit  (optional)
     * @param from  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelTasksAsync(String uids, String indexUids, String types, String statuses, String beforeEnqueuedAt, String afterEnqueuedAt, String beforeStartedAt, String afterStartedAt, String beforeFinishedAt, String afterFinishedAt, String canceledBy, String limit, String from, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelTasksValidateBeforeCall(uids, indexUids, types, statuses, beforeEnqueuedAt, afterEnqueuedAt, beforeStartedAt, afterStartedAt, beforeFinishedAt, afterFinishedAt, canceledBy, limit, from, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTasks
     * @param uids  (optional)
     * @param indexUids  (optional)
     * @param types  (optional)
     * @param statuses  (optional)
     * @param beforeEnqueuedAt  (optional)
     * @param afterEnqueuedAt  (optional)
     * @param beforeStartedAt  (optional)
     * @param afterStartedAt  (optional)
     * @param beforeFinishedAt  (optional)
     * @param afterFinishedAt  (optional)
     * @param canceledBy  (optional)
     * @param limit  (optional)
     * @param from  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTasksCall(String uids, String indexUids, String types, String statuses, String beforeEnqueuedAt, String afterEnqueuedAt, String beforeStartedAt, String afterStartedAt, String beforeFinishedAt, String afterFinishedAt, String canceledBy, String limit, String from, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uids", uids));
        }

        if (indexUids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("indexUids", indexUids));
        }

        if (types != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("types", types));
        }

        if (statuses != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statuses", statuses));
        }

        if (beforeEnqueuedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("beforeEnqueuedAt", beforeEnqueuedAt));
        }

        if (afterEnqueuedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("afterEnqueuedAt", afterEnqueuedAt));
        }

        if (beforeStartedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("beforeStartedAt", beforeStartedAt));
        }

        if (afterStartedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("afterStartedAt", afterStartedAt));
        }

        if (beforeFinishedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("beforeFinishedAt", beforeFinishedAt));
        }

        if (afterFinishedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("afterFinishedAt", afterFinishedAt));
        }

        if (canceledBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("canceledBy", canceledBy));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTasksValidateBeforeCall(String uids, String indexUids, String types, String statuses, String beforeEnqueuedAt, String afterEnqueuedAt, String beforeStartedAt, String afterStartedAt, String beforeFinishedAt, String afterFinishedAt, String canceledBy, String limit, String from, final ApiCallback _callback) throws ApiException {
        return deleteTasksCall(uids, indexUids, types, statuses, beforeEnqueuedAt, afterEnqueuedAt, beforeStartedAt, afterStartedAt, beforeFinishedAt, afterFinishedAt, canceledBy, limit, from, _callback);

    }

    /**
     * Delete tasks
     * Delete tasks
     * @param uids  (optional)
     * @param indexUids  (optional)
     * @param types  (optional)
     * @param statuses  (optional)
     * @param beforeEnqueuedAt  (optional)
     * @param afterEnqueuedAt  (optional)
     * @param beforeStartedAt  (optional)
     * @param afterStartedAt  (optional)
     * @param beforeFinishedAt  (optional)
     * @param afterFinishedAt  (optional)
     * @param canceledBy  (optional)
     * @param limit  (optional)
     * @param from  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTasks(String uids, String indexUids, String types, String statuses, String beforeEnqueuedAt, String afterEnqueuedAt, String beforeStartedAt, String afterStartedAt, String beforeFinishedAt, String afterFinishedAt, String canceledBy, String limit, String from) throws ApiException {
        deleteTasksWithHttpInfo(uids, indexUids, types, statuses, beforeEnqueuedAt, afterEnqueuedAt, beforeStartedAt, afterStartedAt, beforeFinishedAt, afterFinishedAt, canceledBy, limit, from);
    }

    /**
     * Delete tasks
     * Delete tasks
     * @param uids  (optional)
     * @param indexUids  (optional)
     * @param types  (optional)
     * @param statuses  (optional)
     * @param beforeEnqueuedAt  (optional)
     * @param afterEnqueuedAt  (optional)
     * @param beforeStartedAt  (optional)
     * @param afterStartedAt  (optional)
     * @param beforeFinishedAt  (optional)
     * @param afterFinishedAt  (optional)
     * @param canceledBy  (optional)
     * @param limit  (optional)
     * @param from  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTasksWithHttpInfo(String uids, String indexUids, String types, String statuses, String beforeEnqueuedAt, String afterEnqueuedAt, String beforeStartedAt, String afterStartedAt, String beforeFinishedAt, String afterFinishedAt, String canceledBy, String limit, String from) throws ApiException {
        okhttp3.Call localVarCall = deleteTasksValidateBeforeCall(uids, indexUids, types, statuses, beforeEnqueuedAt, afterEnqueuedAt, beforeStartedAt, afterStartedAt, beforeFinishedAt, afterFinishedAt, canceledBy, limit, from, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete tasks (asynchronously)
     * Delete tasks
     * @param uids  (optional)
     * @param indexUids  (optional)
     * @param types  (optional)
     * @param statuses  (optional)
     * @param beforeEnqueuedAt  (optional)
     * @param afterEnqueuedAt  (optional)
     * @param beforeStartedAt  (optional)
     * @param afterStartedAt  (optional)
     * @param beforeFinishedAt  (optional)
     * @param afterFinishedAt  (optional)
     * @param canceledBy  (optional)
     * @param limit  (optional)
     * @param from  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTasksAsync(String uids, String indexUids, String types, String statuses, String beforeEnqueuedAt, String afterEnqueuedAt, String beforeStartedAt, String afterStartedAt, String beforeFinishedAt, String afterFinishedAt, String canceledBy, String limit, String from, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTasksValidateBeforeCall(uids, indexUids, types, statuses, beforeEnqueuedAt, afterEnqueuedAt, beforeStartedAt, afterStartedAt, beforeFinishedAt, afterFinishedAt, canceledBy, limit, from, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllTasks
     * @param uids  (optional)
     * @param indexUids  (optional)
     * @param types  (optional)
     * @param statuses  (optional)
     * @param beforeEnqueuedAt  (optional)
     * @param afterEnqueuedAt  (optional)
     * @param beforeStartedAt  (optional)
     * @param afterStartedAt  (optional)
     * @param beforeFinishedAt  (optional)
     * @param afterFinishedAt  (optional)
     * @param canceledBy  (optional)
     * @param limit  (optional)
     * @param from  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllTasksCall(String uids, String indexUids, String types, String statuses, String beforeEnqueuedAt, String afterEnqueuedAt, String beforeStartedAt, String afterStartedAt, String beforeFinishedAt, String afterFinishedAt, String canceledBy, String limit, String from, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uids", uids));
        }

        if (indexUids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("indexUids", indexUids));
        }

        if (types != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("types", types));
        }

        if (statuses != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statuses", statuses));
        }

        if (beforeEnqueuedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("beforeEnqueuedAt", beforeEnqueuedAt));
        }

        if (afterEnqueuedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("afterEnqueuedAt", afterEnqueuedAt));
        }

        if (beforeStartedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("beforeStartedAt", beforeStartedAt));
        }

        if (afterStartedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("afterStartedAt", afterStartedAt));
        }

        if (beforeFinishedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("beforeFinishedAt", beforeFinishedAt));
        }

        if (afterFinishedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("afterFinishedAt", afterFinishedAt));
        }

        if (canceledBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("canceledBy", canceledBy));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllTasksValidateBeforeCall(String uids, String indexUids, String types, String statuses, String beforeEnqueuedAt, String afterEnqueuedAt, String beforeStartedAt, String afterStartedAt, String beforeFinishedAt, String afterFinishedAt, String canceledBy, String limit, String from, final ApiCallback _callback) throws ApiException {
        return getAllTasksCall(uids, indexUids, types, statuses, beforeEnqueuedAt, afterEnqueuedAt, beforeStartedAt, afterStartedAt, beforeFinishedAt, afterFinishedAt, canceledBy, limit, from, _callback);

    }

    /**
     * Get all tasks
     * Get all tasks
     * @param uids  (optional)
     * @param indexUids  (optional)
     * @param types  (optional)
     * @param statuses  (optional)
     * @param beforeEnqueuedAt  (optional)
     * @param afterEnqueuedAt  (optional)
     * @param beforeStartedAt  (optional)
     * @param afterStartedAt  (optional)
     * @param beforeFinishedAt  (optional)
     * @param afterFinishedAt  (optional)
     * @param canceledBy  (optional)
     * @param limit  (optional)
     * @param from  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void getAllTasks(String uids, String indexUids, String types, String statuses, String beforeEnqueuedAt, String afterEnqueuedAt, String beforeStartedAt, String afterStartedAt, String beforeFinishedAt, String afterFinishedAt, String canceledBy, String limit, String from) throws ApiException {
        getAllTasksWithHttpInfo(uids, indexUids, types, statuses, beforeEnqueuedAt, afterEnqueuedAt, beforeStartedAt, afterStartedAt, beforeFinishedAt, afterFinishedAt, canceledBy, limit, from);
    }

    /**
     * Get all tasks
     * Get all tasks
     * @param uids  (optional)
     * @param indexUids  (optional)
     * @param types  (optional)
     * @param statuses  (optional)
     * @param beforeEnqueuedAt  (optional)
     * @param afterEnqueuedAt  (optional)
     * @param beforeStartedAt  (optional)
     * @param afterStartedAt  (optional)
     * @param beforeFinishedAt  (optional)
     * @param afterFinishedAt  (optional)
     * @param canceledBy  (optional)
     * @param limit  (optional)
     * @param from  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getAllTasksWithHttpInfo(String uids, String indexUids, String types, String statuses, String beforeEnqueuedAt, String afterEnqueuedAt, String beforeStartedAt, String afterStartedAt, String beforeFinishedAt, String afterFinishedAt, String canceledBy, String limit, String from) throws ApiException {
        okhttp3.Call localVarCall = getAllTasksValidateBeforeCall(uids, indexUids, types, statuses, beforeEnqueuedAt, afterEnqueuedAt, beforeStartedAt, afterStartedAt, beforeFinishedAt, afterFinishedAt, canceledBy, limit, from, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get all tasks (asynchronously)
     * Get all tasks
     * @param uids  (optional)
     * @param indexUids  (optional)
     * @param types  (optional)
     * @param statuses  (optional)
     * @param beforeEnqueuedAt  (optional)
     * @param afterEnqueuedAt  (optional)
     * @param beforeStartedAt  (optional)
     * @param afterStartedAt  (optional)
     * @param beforeFinishedAt  (optional)
     * @param afterFinishedAt  (optional)
     * @param canceledBy  (optional)
     * @param limit  (optional)
     * @param from  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllTasksAsync(String uids, String indexUids, String types, String statuses, String beforeEnqueuedAt, String afterEnqueuedAt, String beforeStartedAt, String afterStartedAt, String beforeFinishedAt, String afterFinishedAt, String canceledBy, String limit, String from, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllTasksValidateBeforeCall(uids, indexUids, types, statuses, beforeEnqueuedAt, afterEnqueuedAt, beforeStartedAt, afterStartedAt, beforeFinishedAt, afterFinishedAt, canceledBy, limit, from, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOneTask
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOneTaskCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/0";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOneTaskValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getOneTaskCall(_callback);

    }

    /**
     * Get one task
     * Get one task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void getOneTask() throws ApiException {
        getOneTaskWithHttpInfo();
    }

    /**
     * Get one task
     * Get one task
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getOneTaskWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getOneTaskValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get one task (asynchronously)
     * Get one task
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOneTaskAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOneTaskValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
