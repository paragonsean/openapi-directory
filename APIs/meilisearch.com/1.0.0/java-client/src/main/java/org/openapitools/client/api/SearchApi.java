/*
 * Meilisearch v1.1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.SearchInIndex1Request;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for searchInIndex
     * @param q  (optional)
     * @param offset  (optional)
     * @param limit  (optional)
     * @param attributesToRetrieve  (optional)
     * @param attributesToCrop  (optional)
     * @param attributesToHighlight  (optional)
     * @param cropLength  (optional)
     * @param cropMarker  (optional)
     * @param filter  (optional)
     * @param showMatchesPosition  (optional)
     * @param facets  (optional)
     * @param sort  (optional)
     * @param highlightPreTag  (optional)
     * @param highlightPostTag  (optional)
     * @param matchingStrategy  (optional)
     * @param page  (optional)
     * @param hitsPerPage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchInIndexCall(String q, String offset, String limit, String attributesToRetrieve, String attributesToCrop, String attributesToHighlight, String cropLength, String cropMarker, String filter, String showMatchesPosition, String facets, String sort, String highlightPreTag, String highlightPostTag, String matchingStrategy, String page, String hitsPerPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/indexes/books/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (attributesToRetrieve != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attributesToRetrieve", attributesToRetrieve));
        }

        if (attributesToCrop != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attributesToCrop", attributesToCrop));
        }

        if (attributesToHighlight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attributesToHighlight", attributesToHighlight));
        }

        if (cropLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cropLength", cropLength));
        }

        if (cropMarker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cropMarker", cropMarker));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (showMatchesPosition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showMatchesPosition", showMatchesPosition));
        }

        if (facets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facets", facets));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (highlightPreTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("highlightPreTag", highlightPreTag));
        }

        if (highlightPostTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("highlightPostTag", highlightPostTag));
        }

        if (matchingStrategy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("matchingStrategy", matchingStrategy));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (hitsPerPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hitsPerPage", hitsPerPage));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchInIndexValidateBeforeCall(String q, String offset, String limit, String attributesToRetrieve, String attributesToCrop, String attributesToHighlight, String cropLength, String cropMarker, String filter, String showMatchesPosition, String facets, String sort, String highlightPreTag, String highlightPostTag, String matchingStrategy, String page, String hitsPerPage, final ApiCallback _callback) throws ApiException {
        return searchInIndexCall(q, offset, limit, attributesToRetrieve, attributesToCrop, attributesToHighlight, cropLength, cropMarker, filter, showMatchesPosition, facets, sort, highlightPreTag, highlightPostTag, matchingStrategy, page, hitsPerPage, _callback);

    }

    /**
     * Search in index
     * Search in index
     * @param q  (optional)
     * @param offset  (optional)
     * @param limit  (optional)
     * @param attributesToRetrieve  (optional)
     * @param attributesToCrop  (optional)
     * @param attributesToHighlight  (optional)
     * @param cropLength  (optional)
     * @param cropMarker  (optional)
     * @param filter  (optional)
     * @param showMatchesPosition  (optional)
     * @param facets  (optional)
     * @param sort  (optional)
     * @param highlightPreTag  (optional)
     * @param highlightPostTag  (optional)
     * @param matchingStrategy  (optional)
     * @param page  (optional)
     * @param hitsPerPage  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void searchInIndex(String q, String offset, String limit, String attributesToRetrieve, String attributesToCrop, String attributesToHighlight, String cropLength, String cropMarker, String filter, String showMatchesPosition, String facets, String sort, String highlightPreTag, String highlightPostTag, String matchingStrategy, String page, String hitsPerPage) throws ApiException {
        searchInIndexWithHttpInfo(q, offset, limit, attributesToRetrieve, attributesToCrop, attributesToHighlight, cropLength, cropMarker, filter, showMatchesPosition, facets, sort, highlightPreTag, highlightPostTag, matchingStrategy, page, hitsPerPage);
    }

    /**
     * Search in index
     * Search in index
     * @param q  (optional)
     * @param offset  (optional)
     * @param limit  (optional)
     * @param attributesToRetrieve  (optional)
     * @param attributesToCrop  (optional)
     * @param attributesToHighlight  (optional)
     * @param cropLength  (optional)
     * @param cropMarker  (optional)
     * @param filter  (optional)
     * @param showMatchesPosition  (optional)
     * @param facets  (optional)
     * @param sort  (optional)
     * @param highlightPreTag  (optional)
     * @param highlightPostTag  (optional)
     * @param matchingStrategy  (optional)
     * @param page  (optional)
     * @param hitsPerPage  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> searchInIndexWithHttpInfo(String q, String offset, String limit, String attributesToRetrieve, String attributesToCrop, String attributesToHighlight, String cropLength, String cropMarker, String filter, String showMatchesPosition, String facets, String sort, String highlightPreTag, String highlightPostTag, String matchingStrategy, String page, String hitsPerPage) throws ApiException {
        okhttp3.Call localVarCall = searchInIndexValidateBeforeCall(q, offset, limit, attributesToRetrieve, attributesToCrop, attributesToHighlight, cropLength, cropMarker, filter, showMatchesPosition, facets, sort, highlightPreTag, highlightPostTag, matchingStrategy, page, hitsPerPage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search in index (asynchronously)
     * Search in index
     * @param q  (optional)
     * @param offset  (optional)
     * @param limit  (optional)
     * @param attributesToRetrieve  (optional)
     * @param attributesToCrop  (optional)
     * @param attributesToHighlight  (optional)
     * @param cropLength  (optional)
     * @param cropMarker  (optional)
     * @param filter  (optional)
     * @param showMatchesPosition  (optional)
     * @param facets  (optional)
     * @param sort  (optional)
     * @param highlightPreTag  (optional)
     * @param highlightPostTag  (optional)
     * @param matchingStrategy  (optional)
     * @param page  (optional)
     * @param hitsPerPage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchInIndexAsync(String q, String offset, String limit, String attributesToRetrieve, String attributesToCrop, String attributesToHighlight, String cropLength, String cropMarker, String filter, String showMatchesPosition, String facets, String sort, String highlightPreTag, String highlightPostTag, String matchingStrategy, String page, String hitsPerPage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchInIndexValidateBeforeCall(q, offset, limit, attributesToRetrieve, attributesToCrop, attributesToHighlight, cropLength, cropMarker, filter, showMatchesPosition, facets, sort, highlightPreTag, highlightPostTag, matchingStrategy, page, hitsPerPage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchInIndex1
     * @param searchInIndex1Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchInIndex1Call(SearchInIndex1Request searchInIndex1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchInIndex1Request;

        // create path and map variables
        String localVarPath = "/indexes/books/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchInIndex1ValidateBeforeCall(SearchInIndex1Request searchInIndex1Request, final ApiCallback _callback) throws ApiException {
        return searchInIndex1Call(searchInIndex1Request, _callback);

    }

    /**
     * Search in index
     * Search in index
     * @param searchInIndex1Request  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void searchInIndex1(SearchInIndex1Request searchInIndex1Request) throws ApiException {
        searchInIndex1WithHttpInfo(searchInIndex1Request);
    }

    /**
     * Search in index
     * Search in index
     * @param searchInIndex1Request  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> searchInIndex1WithHttpInfo(SearchInIndex1Request searchInIndex1Request) throws ApiException {
        okhttp3.Call localVarCall = searchInIndex1ValidateBeforeCall(searchInIndex1Request, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search in index (asynchronously)
     * Search in index
     * @param searchInIndex1Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchInIndex1Async(SearchInIndex1Request searchInIndex1Request, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchInIndex1ValidateBeforeCall(searchInIndex1Request, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
