/**
 * Meilisearch v1.1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UpdateFacetingRequest from '../model/UpdateFacetingRequest';
import UpdatePaginationRequest from '../model/UpdatePaginationRequest';
import UpdateSettingsRequest from '../model/UpdateSettingsRequest';
import UpdateSynonymsRequest from '../model/UpdateSynonymsRequest';
import UpdateTypoToleranceRequest from '../model/UpdateTypoToleranceRequest';

/**
* Settings service.
* @module api/SettingsApi
* @version 1.0.0
*/
export default class SettingsApi {

    /**
    * Constructs a new SettingsApi. 
    * @alias module:api/SettingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAllSettings operation.
     * @callback module:api/SettingsApi~getAllSettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all settings
     * Get all settings
     * @param {module:api/SettingsApi~getAllSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAllSettings(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDisplayedAttributes operation.
     * @callback module:api/SettingsApi~getDisplayedAttributesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get displayed attributes
     * Get displayed attributes
     * @param {module:api/SettingsApi~getDisplayedAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDisplayedAttributes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/settings/displayed-attributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDistinctAttribute operation.
     * @callback module:api/SettingsApi~getDistinctAttributeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get distinct attribute
     * Get distinct attribute
     * @param {module:api/SettingsApi~getDistinctAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDistinctAttribute(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/settings/distinct-attribute', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFaceting operation.
     * @callback module:api/SettingsApi~getFacetingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get faceting
     * Get faceting
     * @param {module:api/SettingsApi~getFacetingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getFaceting(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/settings/faceting', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFilterableAttributes operation.
     * @callback module:api/SettingsApi~getFilterableAttributesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get filterable attributes
     * Get filterable attributes
     * @param {module:api/SettingsApi~getFilterableAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getFilterableAttributes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/settings/filterable-attributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPagination operation.
     * @callback module:api/SettingsApi~getPaginationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pagination
     * Get pagination
     * @param {module:api/SettingsApi~getPaginationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPagination(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/settings/pagination', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRankingRules operation.
     * @callback module:api/SettingsApi~getRankingRulesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get ranking rules
     * Get ranking rules
     * @param {module:api/SettingsApi~getRankingRulesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRankingRules(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/settings/ranking-rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSearchableAttributes operation.
     * @callback module:api/SettingsApi~getSearchableAttributesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get searchable attributes
     * Get searchable attributes
     * @param {module:api/SettingsApi~getSearchableAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSearchableAttributes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/settings/searchable-attributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSortableAttributes operation.
     * @callback module:api/SettingsApi~getSortableAttributesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get sortable attributes
     * Get sortable attributes
     * @param {module:api/SettingsApi~getSortableAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSortableAttributes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/settings/sortable-attributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStopWords operation.
     * @callback module:api/SettingsApi~getStopWordsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get stop-words
     * Get stop-words
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [requestBody] 
     * @param {module:api/SettingsApi~getStopWordsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getStopWords(opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/settings/stop-words', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSynonyms operation.
     * @callback module:api/SettingsApi~getSynonymsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get synonyms
     * Get synonyms
     * @param {module:api/SettingsApi~getSynonymsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSynonyms(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/settings/synonyms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTypoTolerance operation.
     * @callback module:api/SettingsApi~getTypoToleranceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get typo-tolerance
     * Get typo-tolerance
     * @param {module:api/SettingsApi~getTypoToleranceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTypoTolerance(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/settings/typo-tolerance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetAllSettings operation.
     * @callback module:api/SettingsApi~resetAllSettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset all settings
     * Reset all settings
     * @param {module:api/SettingsApi~resetAllSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resetAllSettings(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/settings', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetDisplayedAttributes operation.
     * @callback module:api/SettingsApi~resetDisplayedAttributesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset displayed attributes
     * Reset displayed attributes
     * @param {module:api/SettingsApi~resetDisplayedAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resetDisplayedAttributes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/settings/displayed-attributes', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetDistinctAttribute operation.
     * @callback module:api/SettingsApi~resetDistinctAttributeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset distinct attribute
     * Reset distinct attribute
     * @param {module:api/SettingsApi~resetDistinctAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resetDistinctAttribute(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/settings/distinct-attribute', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetFaceting operation.
     * @callback module:api/SettingsApi~resetFacetingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset faceting
     * Reset faceting
     * @param {module:api/SettingsApi~resetFacetingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resetFaceting(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/settings/faceting', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetFilterableAttributes operation.
     * @callback module:api/SettingsApi~resetFilterableAttributesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset filterable attributes
     * Reset filterable attributes
     * @param {module:api/SettingsApi~resetFilterableAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resetFilterableAttributes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/settings/filterable-attributes', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetPagination operation.
     * @callback module:api/SettingsApi~resetPaginationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset pagination
     * Reset pagination
     * @param {module:api/SettingsApi~resetPaginationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resetPagination(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/settings/pagination', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetRankingRules operation.
     * @callback module:api/SettingsApi~resetRankingRulesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset ranking rules
     * Reset ranking rules
     * @param {module:api/SettingsApi~resetRankingRulesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resetRankingRules(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/settings/ranking-rules', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetSearchableAttributes operation.
     * @callback module:api/SettingsApi~resetSearchableAttributesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset searchable attributes
     * Reset searchable attributes
     * @param {module:api/SettingsApi~resetSearchableAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resetSearchableAttributes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/settings/searchable-attributes', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetSortableAttributes operation.
     * @callback module:api/SettingsApi~resetSortableAttributesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset sortable attributes
     * Reset sortable attributes
     * @param {module:api/SettingsApi~resetSortableAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resetSortableAttributes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/settings/sortable-attributes', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetStopWords operation.
     * @callback module:api/SettingsApi~resetStopWordsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset stop-words
     * Reset stop-words
     * @param {module:api/SettingsApi~resetStopWordsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resetStopWords(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/settings/stop-words', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetSynonyms operation.
     * @callback module:api/SettingsApi~resetSynonymsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset synonyms
     * Reset synonyms
     * @param {module:api/SettingsApi~resetSynonymsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resetSynonyms(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/settings/synonyms', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetTypoTolerance operation.
     * @callback module:api/SettingsApi~resetTypoToleranceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset typo-tolerance
     * Reset typo-tolerance
     * @param {module:api/SettingsApi~resetTypoToleranceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resetTypoTolerance(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/settings/typo-tolerance', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDisplayedAttributes operation.
     * @callback module:api/SettingsApi~updateDisplayedAttributesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update displayed attributes
     * Update displayed attributes
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [requestBody] 
     * @param {module:api/SettingsApi~updateDisplayedAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateDisplayedAttributes(opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/settings/displayed-attributes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDistinctAttribute operation.
     * @callback module:api/SettingsApi~updateDistinctAttributeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update distinct attribute
     * Update distinct attribute
     * @param {module:api/SettingsApi~updateDistinctAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateDistinctAttribute(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/octet-stream'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/settings/distinct-attribute', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFaceting operation.
     * @callback module:api/SettingsApi~updateFacetingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update faceting
     * Update faceting
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateFacetingRequest} [updateFacetingRequest] 
     * @param {module:api/SettingsApi~updateFacetingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateFaceting(opts, callback) {
      opts = opts || {};
      let postBody = opts['updateFacetingRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/settings/faceting', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFilterableAttributes operation.
     * @callback module:api/SettingsApi~updateFilterableAttributesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update filterable attributes
     * Update filterable attributes
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [requestBody] 
     * @param {module:api/SettingsApi~updateFilterableAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateFilterableAttributes(opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/settings/filterable-attributes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePagination operation.
     * @callback module:api/SettingsApi~updatePaginationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update pagination
     * Update pagination
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdatePaginationRequest} [updatePaginationRequest] 
     * @param {module:api/SettingsApi~updatePaginationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updatePagination(opts, callback) {
      opts = opts || {};
      let postBody = opts['updatePaginationRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/settings/pagination', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRankingRules operation.
     * @callback module:api/SettingsApi~updateRankingRulesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update ranking rules
     * Update ranking rules
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [requestBody] 
     * @param {module:api/SettingsApi~updateRankingRulesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateRankingRules(opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/settings/ranking-rules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSearchableAttributes operation.
     * @callback module:api/SettingsApi~updateSearchableAttributesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update searchable attributes
     * Update searchable attributes
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [requestBody] 
     * @param {module:api/SettingsApi~updateSearchableAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateSearchableAttributes(opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/settings/searchable-attributes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSettings operation.
     * @callback module:api/SettingsApi~updateSettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update settings
     * Update settings
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateSettingsRequest} [updateSettingsRequest] 
     * @param {module:api/SettingsApi~updateSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateSettings(opts, callback) {
      opts = opts || {};
      let postBody = opts['updateSettingsRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/settings', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSortableAttributes operation.
     * @callback module:api/SettingsApi~updateSortableAttributesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update sortable attributes
     * Update sortable attributes
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [requestBody] 
     * @param {module:api/SettingsApi~updateSortableAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateSortableAttributes(opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/settings/sortable-attributes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStopWords operation.
     * @callback module:api/SettingsApi~updateStopWordsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update stop-words
     * Update stop-words
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [requestBody] 
     * @param {module:api/SettingsApi~updateStopWordsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateStopWords(opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/settings/stop-words', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSynonyms operation.
     * @callback module:api/SettingsApi~updateSynonymsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update synonyms
     * Update synonyms
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateSynonymsRequest} [updateSynonymsRequest] 
     * @param {module:api/SettingsApi~updateSynonymsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateSynonyms(opts, callback) {
      opts = opts || {};
      let postBody = opts['updateSynonymsRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/settings/synonyms', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTypoTolerance operation.
     * @callback module:api/SettingsApi~updateTypoToleranceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update typo-tolerance
     * Update typo-tolerance
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateTypoToleranceRequest} [updateTypoToleranceRequest] 
     * @param {module:api/SettingsApi~updateTypoToleranceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateTypoTolerance(opts, callback) {
      opts = opts || {};
      let postBody = opts['updateTypoToleranceRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/settings/typo-tolerance', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
