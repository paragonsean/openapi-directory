/**
 * Meilisearch v1.1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateIndexWithPrimaryKeyRequest from '../model/CreateIndexWithPrimaryKeyRequest';
import SwapIndexesRequestInner from '../model/SwapIndexesRequestInner';
import UpdateIndexRequest from '../model/UpdateIndexRequest';

/**
* Indexes service.
* @module api/IndexesApi
* @version 1.0.0
*/
export default class IndexesApi {

    /**
    * Constructs a new IndexesApi. 
    * @alias module:api/IndexesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createIndexWithPrimaryKey operation.
     * @callback module:api/IndexesApi~createIndexWithPrimaryKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create index with primary key
     * Create index with primary key
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateIndexWithPrimaryKeyRequest} [createIndexWithPrimaryKeyRequest] 
     * @param {module:api/IndexesApi~createIndexWithPrimaryKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createIndexWithPrimaryKey(opts, callback) {
      opts = opts || {};
      let postBody = opts['createIndexWithPrimaryKeyRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAnIndex operation.
     * @callback module:api/IndexesApi~deleteAnIndexCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an index
     * Delete an index
     * @param {module:api/IndexesApi~deleteAnIndexCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAnIndex(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIndexes operation.
     * @callback module:api/IndexesApi~getIndexesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get indexes
     * Get indexes
     * @param {Object} opts Optional parameters
     * @param {String} [offset] 
     * @param {String} [limit] 
     * @param {module:api/IndexesApi~getIndexesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getIndexes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showIndex operation.
     * @callback module:api/IndexesApi~showIndexCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show index
     * Show index
     * @param {module:api/IndexesApi~showIndexCallback} callback The callback function, accepting three arguments: error, data, response
     */
    showIndex(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the swapIndexes operation.
     * @callback module:api/IndexesApi~swapIndexesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Swap indexes
     * Swap indexes
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/SwapIndexesRequestInner>} [swapIndexesRequestInner] 
     * @param {module:api/IndexesApi~swapIndexesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    swapIndexes(opts, callback) {
      opts = opts || {};
      let postBody = opts['swapIndexesRequestInner'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/swap-indexes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIndex operation.
     * @callback module:api/IndexesApi~updateIndexCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update index
     * Can only change the document identifier if it has not already been added before.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateIndexRequest} [updateIndexRequest] 
     * @param {module:api/IndexesApi~updateIndexCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateIndex(opts, callback) {
      opts = opts || {};
      let postBody = opts['updateIndexRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
