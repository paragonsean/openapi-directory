/**
 * Meilisearch v1.1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateAKeyRequest from '../model/CreateAKeyRequest';
import UpdateAKeyRequest from '../model/UpdateAKeyRequest';

/**
* KeyManagement service.
* @module api/KeyManagementApi
* @version 1.0.0
*/
export default class KeyManagementApi {

    /**
    * Constructs a new KeyManagementApi. 
    * @alias module:api/KeyManagementApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAKey operation.
     * @callback module:api/KeyManagementApi~createAKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a key
     * Create a key
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateAKeyRequest} [createAKeyRequest] 
     * @param {module:api/KeyManagementApi~createAKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createAKey(opts, callback) {
      opts = opts || {};
      let postBody = opts['createAKeyRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/keys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAKey operation.
     * @callback module:api/KeyManagementApi~deleteAKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a key
     * Delete a key
     * @param {module:api/KeyManagementApi~deleteAKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAKey(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/keys/kN2aK9EO8a7b627e425717d9196c8081552ca004e513545ed178f8a56981dbd3080d4a5b', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getKeys operation.
     * @callback module:api/KeyManagementApi~getKeysCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get keys
     * Get keys
     * @param {Object} opts Optional parameters
     * @param {String} [offset] 
     * @param {String} [limit] 
     * @param {module:api/KeyManagementApi~getKeysCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getKeys(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOneKey operation.
     * @callback module:api/KeyManagementApi~getOneKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get one key
     * Get one key
     * @param {module:api/KeyManagementApi~getOneKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getOneKey(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/keys/L8l05tFb188aab693735bbaf1f898b9902fb39f865160d39dddba2b47b940115a0430705', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAKey operation.
     * @callback module:api/KeyManagementApi~updateAKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a key
     * Update a key
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateAKeyRequest} [updateAKeyRequest] 
     * @param {module:api/KeyManagementApi~updateAKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateAKey(opts, callback) {
      opts = opts || {};
      let postBody = opts['updateAKeyRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/keys/wYZjGJyBcdb0621b97999c233246a8ec0a35d0fcd9a6417ef8ccee0c8978b64b123af2dd', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
