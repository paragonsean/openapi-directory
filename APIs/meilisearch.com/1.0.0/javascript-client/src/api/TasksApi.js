/**
 * Meilisearch v1.1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Tasks service.
* @module api/TasksApi
* @version 1.0.0
*/
export default class TasksApi {

    /**
    * Constructs a new TasksApi. 
    * @alias module:api/TasksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelTasks operation.
     * @callback module:api/TasksApi~cancelTasksCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel tasks
     * Cancel tasks
     * @param {Object} opts Optional parameters
     * @param {String} [uids] 
     * @param {String} [indexUids] 
     * @param {String} [types] 
     * @param {String} [statuses] 
     * @param {String} [beforeEnqueuedAt] 
     * @param {String} [afterEnqueuedAt] 
     * @param {String} [beforeStartedAt] 
     * @param {String} [afterStartedAt] 
     * @param {String} [beforeFinishedAt] 
     * @param {String} [afterFinishedAt] 
     * @param {String} [canceledBy] 
     * @param {String} [limit] 
     * @param {String} [from] 
     * @param {module:api/TasksApi~cancelTasksCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelTasks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'uids': opts['uids'],
        'indexUids': opts['indexUids'],
        'types': opts['types'],
        'statuses': opts['statuses'],
        'beforeEnqueuedAt': opts['beforeEnqueuedAt'],
        'afterEnqueuedAt': opts['afterEnqueuedAt'],
        'beforeStartedAt': opts['beforeStartedAt'],
        'afterStartedAt': opts['afterStartedAt'],
        'beforeFinishedAt': opts['beforeFinishedAt'],
        'afterFinishedAt': opts['afterFinishedAt'],
        'canceledBy': opts['canceledBy'],
        'limit': opts['limit'],
        'from': opts['from']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTasks operation.
     * @callback module:api/TasksApi~deleteTasksCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete tasks
     * Delete tasks
     * @param {Object} opts Optional parameters
     * @param {String} [uids] 
     * @param {String} [indexUids] 
     * @param {String} [types] 
     * @param {String} [statuses] 
     * @param {String} [beforeEnqueuedAt] 
     * @param {String} [afterEnqueuedAt] 
     * @param {String} [beforeStartedAt] 
     * @param {String} [afterStartedAt] 
     * @param {String} [beforeFinishedAt] 
     * @param {String} [afterFinishedAt] 
     * @param {String} [canceledBy] 
     * @param {String} [limit] 
     * @param {String} [from] 
     * @param {module:api/TasksApi~deleteTasksCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTasks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'uids': opts['uids'],
        'indexUids': opts['indexUids'],
        'types': opts['types'],
        'statuses': opts['statuses'],
        'beforeEnqueuedAt': opts['beforeEnqueuedAt'],
        'afterEnqueuedAt': opts['afterEnqueuedAt'],
        'beforeStartedAt': opts['beforeStartedAt'],
        'afterStartedAt': opts['afterStartedAt'],
        'beforeFinishedAt': opts['beforeFinishedAt'],
        'afterFinishedAt': opts['afterFinishedAt'],
        'canceledBy': opts['canceledBy'],
        'limit': opts['limit'],
        'from': opts['from']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllTasks operation.
     * @callback module:api/TasksApi~getAllTasksCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all tasks
     * Get all tasks
     * @param {Object} opts Optional parameters
     * @param {String} [uids] 
     * @param {String} [indexUids] 
     * @param {String} [types] 
     * @param {String} [statuses] 
     * @param {String} [beforeEnqueuedAt] 
     * @param {String} [afterEnqueuedAt] 
     * @param {String} [beforeStartedAt] 
     * @param {String} [afterStartedAt] 
     * @param {String} [beforeFinishedAt] 
     * @param {String} [afterFinishedAt] 
     * @param {String} [canceledBy] 
     * @param {String} [limit] 
     * @param {String} [from] 
     * @param {module:api/TasksApi~getAllTasksCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAllTasks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'uids': opts['uids'],
        'indexUids': opts['indexUids'],
        'types': opts['types'],
        'statuses': opts['statuses'],
        'beforeEnqueuedAt': opts['beforeEnqueuedAt'],
        'afterEnqueuedAt': opts['afterEnqueuedAt'],
        'beforeStartedAt': opts['beforeStartedAt'],
        'afterStartedAt': opts['afterStartedAt'],
        'beforeFinishedAt': opts['beforeFinishedAt'],
        'afterFinishedAt': opts['afterFinishedAt'],
        'canceledBy': opts['canceledBy'],
        'limit': opts['limit'],
        'from': opts['from']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOneTask operation.
     * @callback module:api/TasksApi~getOneTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get one task
     * Get one task
     * @param {module:api/TasksApi~getOneTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getOneTask(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/0', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
