/**
 * Meilisearch v1.1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddOrReplaceDocumentsRequestInner from '../model/AddOrReplaceDocumentsRequestInner';
import AddOrUpdateDocumentsRequestInner from '../model/AddOrUpdateDocumentsRequestInner';

/**
* Documents service.
* @module api/DocumentsApi
* @version 1.0.0
*/
export default class DocumentsApi {

    /**
    * Constructs a new DocumentsApi. 
    * @alias module:api/DocumentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addOrReplaceDocuments operation.
     * @callback module:api/DocumentsApi~addOrReplaceDocumentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add or replace documents
     * Add or replace documents
     * @param {Object} opts Optional parameters
     * @param {String} [primaryKey] 
     * @param {String} [csvDelimiter] 
     * @param {Array.<module:model/AddOrReplaceDocumentsRequestInner>} [addOrReplaceDocumentsRequestInner] 
     * @param {module:api/DocumentsApi~addOrReplaceDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addOrReplaceDocuments(opts, callback) {
      opts = opts || {};
      let postBody = opts['addOrReplaceDocumentsRequestInner'];

      let pathParams = {
      };
      let queryParams = {
        'primaryKey': opts['primaryKey'],
        'csvDelimiter': opts['csvDelimiter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addOrUpdateDocuments operation.
     * @callback module:api/DocumentsApi~addOrUpdateDocumentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add or update documents
     * Add or update documents
     * @param {Object} opts Optional parameters
     * @param {String} [primaryKey] 
     * @param {String} [csvDelimiter] 
     * @param {Array.<module:model/AddOrUpdateDocumentsRequestInner>} [addOrUpdateDocumentsRequestInner] 
     * @param {module:api/DocumentsApi~addOrUpdateDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addOrUpdateDocuments(opts, callback) {
      opts = opts || {};
      let postBody = opts['addOrUpdateDocumentsRequestInner'];

      let pathParams = {
      };
      let queryParams = {
        'primaryKey': opts['primaryKey'],
        'csvDelimiter': opts['csvDelimiter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/documents', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAllDocuments operation.
     * @callback module:api/DocumentsApi~deleteAllDocumentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete all documents
     * Delete all documents
     * @param {module:api/DocumentsApi~deleteAllDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAllDocuments(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/documents', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDocuments operation.
     * @callback module:api/DocumentsApi~deleteDocumentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete documents
     * Delete documents
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [requestBody] 
     * @param {module:api/DocumentsApi~deleteDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDocuments(opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/documents/delete-batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOneDocument operation.
     * @callback module:api/DocumentsApi~deleteOneDocumentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete one document
     * Delete one document
     * @param {module:api/DocumentsApi~deleteOneDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOneDocument(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/documents/1', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDocuments operation.
     * @callback module:api/DocumentsApi~getDocumentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get documents
     * Get documents
     * @param {Object} opts Optional parameters
     * @param {String} [limit] 
     * @param {String} [offset] 
     * @param {String} [fields] 
     * @param {module:api/DocumentsApi~getDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDocuments(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOneDocument operation.
     * @callback module:api/DocumentsApi~getOneDocumentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get one document
     * Get one document
     * @param {Object} opts Optional parameters
     * @param {String} [fields] 
     * @param {module:api/DocumentsApi~getOneDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getOneDocument(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/indexes/books/documents/2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
