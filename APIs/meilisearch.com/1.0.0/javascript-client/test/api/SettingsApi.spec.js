/**
 * Meilisearch v1.1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MeilisearchV11);
  }
}(this, function(expect, MeilisearchV11) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MeilisearchV11.SettingsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SettingsApi', function() {
    describe('getAllSettings', function() {
      it('should call getAllSettings successfully', function(done) {
        //uncomment below and update the code to test getAllSettings
        //instance.getAllSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDisplayedAttributes', function() {
      it('should call getDisplayedAttributes successfully', function(done) {
        //uncomment below and update the code to test getDisplayedAttributes
        //instance.getDisplayedAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDistinctAttribute', function() {
      it('should call getDistinctAttribute successfully', function(done) {
        //uncomment below and update the code to test getDistinctAttribute
        //instance.getDistinctAttribute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFaceting', function() {
      it('should call getFaceting successfully', function(done) {
        //uncomment below and update the code to test getFaceting
        //instance.getFaceting(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFilterableAttributes', function() {
      it('should call getFilterableAttributes successfully', function(done) {
        //uncomment below and update the code to test getFilterableAttributes
        //instance.getFilterableAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPagination', function() {
      it('should call getPagination successfully', function(done) {
        //uncomment below and update the code to test getPagination
        //instance.getPagination(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRankingRules', function() {
      it('should call getRankingRules successfully', function(done) {
        //uncomment below and update the code to test getRankingRules
        //instance.getRankingRules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSearchableAttributes', function() {
      it('should call getSearchableAttributes successfully', function(done) {
        //uncomment below and update the code to test getSearchableAttributes
        //instance.getSearchableAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSortableAttributes', function() {
      it('should call getSortableAttributes successfully', function(done) {
        //uncomment below and update the code to test getSortableAttributes
        //instance.getSortableAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStopWords', function() {
      it('should call getStopWords successfully', function(done) {
        //uncomment below and update the code to test getStopWords
        //instance.getStopWords(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSynonyms', function() {
      it('should call getSynonyms successfully', function(done) {
        //uncomment below and update the code to test getSynonyms
        //instance.getSynonyms(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTypoTolerance', function() {
      it('should call getTypoTolerance successfully', function(done) {
        //uncomment below and update the code to test getTypoTolerance
        //instance.getTypoTolerance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resetAllSettings', function() {
      it('should call resetAllSettings successfully', function(done) {
        //uncomment below and update the code to test resetAllSettings
        //instance.resetAllSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resetDisplayedAttributes', function() {
      it('should call resetDisplayedAttributes successfully', function(done) {
        //uncomment below and update the code to test resetDisplayedAttributes
        //instance.resetDisplayedAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resetDistinctAttribute', function() {
      it('should call resetDistinctAttribute successfully', function(done) {
        //uncomment below and update the code to test resetDistinctAttribute
        //instance.resetDistinctAttribute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resetFaceting', function() {
      it('should call resetFaceting successfully', function(done) {
        //uncomment below and update the code to test resetFaceting
        //instance.resetFaceting(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resetFilterableAttributes', function() {
      it('should call resetFilterableAttributes successfully', function(done) {
        //uncomment below and update the code to test resetFilterableAttributes
        //instance.resetFilterableAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resetPagination', function() {
      it('should call resetPagination successfully', function(done) {
        //uncomment below and update the code to test resetPagination
        //instance.resetPagination(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resetRankingRules', function() {
      it('should call resetRankingRules successfully', function(done) {
        //uncomment below and update the code to test resetRankingRules
        //instance.resetRankingRules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resetSearchableAttributes', function() {
      it('should call resetSearchableAttributes successfully', function(done) {
        //uncomment below and update the code to test resetSearchableAttributes
        //instance.resetSearchableAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resetSortableAttributes', function() {
      it('should call resetSortableAttributes successfully', function(done) {
        //uncomment below and update the code to test resetSortableAttributes
        //instance.resetSortableAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resetStopWords', function() {
      it('should call resetStopWords successfully', function(done) {
        //uncomment below and update the code to test resetStopWords
        //instance.resetStopWords(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resetSynonyms', function() {
      it('should call resetSynonyms successfully', function(done) {
        //uncomment below and update the code to test resetSynonyms
        //instance.resetSynonyms(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resetTypoTolerance', function() {
      it('should call resetTypoTolerance successfully', function(done) {
        //uncomment below and update the code to test resetTypoTolerance
        //instance.resetTypoTolerance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDisplayedAttributes', function() {
      it('should call updateDisplayedAttributes successfully', function(done) {
        //uncomment below and update the code to test updateDisplayedAttributes
        //instance.updateDisplayedAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDistinctAttribute', function() {
      it('should call updateDistinctAttribute successfully', function(done) {
        //uncomment below and update the code to test updateDistinctAttribute
        //instance.updateDistinctAttribute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFaceting', function() {
      it('should call updateFaceting successfully', function(done) {
        //uncomment below and update the code to test updateFaceting
        //instance.updateFaceting(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFilterableAttributes', function() {
      it('should call updateFilterableAttributes successfully', function(done) {
        //uncomment below and update the code to test updateFilterableAttributes
        //instance.updateFilterableAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updatePagination', function() {
      it('should call updatePagination successfully', function(done) {
        //uncomment below and update the code to test updatePagination
        //instance.updatePagination(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRankingRules', function() {
      it('should call updateRankingRules successfully', function(done) {
        //uncomment below and update the code to test updateRankingRules
        //instance.updateRankingRules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSearchableAttributes', function() {
      it('should call updateSearchableAttributes successfully', function(done) {
        //uncomment below and update the code to test updateSearchableAttributes
        //instance.updateSearchableAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSettings', function() {
      it('should call updateSettings successfully', function(done) {
        //uncomment below and update the code to test updateSettings
        //instance.updateSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSortableAttributes', function() {
      it('should call updateSortableAttributes successfully', function(done) {
        //uncomment below and update the code to test updateSortableAttributes
        //instance.updateSortableAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateStopWords', function() {
      it('should call updateStopWords successfully', function(done) {
        //uncomment below and update the code to test updateStopWords
        //instance.updateStopWords(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSynonyms', function() {
      it('should call updateSynonyms successfully', function(done) {
        //uncomment below and update the code to test updateSynonyms
        //instance.updateSynonyms(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTypoTolerance', function() {
      it('should call updateTypoTolerance successfully', function(done) {
        //uncomment below and update the code to test updateTypoTolerance
        //instance.updateTypoTolerance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
