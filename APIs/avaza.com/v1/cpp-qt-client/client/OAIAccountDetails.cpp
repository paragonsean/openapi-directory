/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountDetails::OAIAccountDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountDetails::OAIAccountDetails() {
    this->initializeModel();
}

OAIAccountDetails::~OAIAccountDetails() {}

void OAIAccountDetails::initializeModel() {

    m_account_email_isSet = false;
    m_account_email_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_allow_hiding_completed_tasks_on_timesheet_isSet = false;
    m_allow_hiding_completed_tasks_on_timesheet_isValid = false;

    m_brand_primary_color_isSet = false;
    m_brand_primary_color_isValid = false;

    m_brand_primary_color_luminance_isSet = false;
    m_brand_primary_color_luminance_isValid = false;

    m_company_name_isSet = false;
    m_company_name_isValid = false;

    m_current_server_time_iso_isSet = false;
    m_current_server_time_iso_isValid = false;

    m_default_currency_code_isSet = false;
    m_default_currency_code_isValid = false;

    m_expense_approval_required_isSet = false;
    m_expense_approval_required_isValid = false;

    m_lock_approved_expenses_isSet = false;
    m_lock_approved_expenses_isValid = false;

    m_lock_approved_timesheets_isSet = false;
    m_lock_approved_timesheets_isValid = false;

    m_sc_isSet = false;
    m_sc_isValid = false;

    m_subdomain_isSet = false;
    m_subdomain_isValid = false;

    m_timesheet_day_of_week_isSet = false;
    m_timesheet_day_of_week_isValid = false;

    m_timesheet_display_format_code_isSet = false;
    m_timesheet_display_format_code_isValid = false;

    m_weekly_timesheet_reminder_isSet = false;
    m_weekly_timesheet_reminder_isValid = false;

    m_has24_hour_timesheet_format_isSet = false;
    m_has24_hour_timesheet_format_isValid = false;

    m_has_start_end_timesheets_isSet = false;
    m_has_start_end_timesheets_isValid = false;
}

void OAIAccountDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountDetails::fromJsonObject(QJsonObject json) {

    m_account_email_isValid = ::OpenAPI::fromJsonValue(m_account_email, json[QString("AccountEmail")]);
    m_account_email_isSet = !json[QString("AccountEmail")].isNull() && m_account_email_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("AccountID")]);
    m_account_id_isSet = !json[QString("AccountID")].isNull() && m_account_id_isValid;

    m_allow_hiding_completed_tasks_on_timesheet_isValid = ::OpenAPI::fromJsonValue(m_allow_hiding_completed_tasks_on_timesheet, json[QString("AllowHidingCompletedTasksOnTimesheet")]);
    m_allow_hiding_completed_tasks_on_timesheet_isSet = !json[QString("AllowHidingCompletedTasksOnTimesheet")].isNull() && m_allow_hiding_completed_tasks_on_timesheet_isValid;

    m_brand_primary_color_isValid = ::OpenAPI::fromJsonValue(m_brand_primary_color, json[QString("BrandPrimaryColor")]);
    m_brand_primary_color_isSet = !json[QString("BrandPrimaryColor")].isNull() && m_brand_primary_color_isValid;

    m_brand_primary_color_luminance_isValid = ::OpenAPI::fromJsonValue(m_brand_primary_color_luminance, json[QString("BrandPrimaryColorLuminance")]);
    m_brand_primary_color_luminance_isSet = !json[QString("BrandPrimaryColorLuminance")].isNull() && m_brand_primary_color_luminance_isValid;

    m_company_name_isValid = ::OpenAPI::fromJsonValue(m_company_name, json[QString("CompanyName")]);
    m_company_name_isSet = !json[QString("CompanyName")].isNull() && m_company_name_isValid;

    m_current_server_time_iso_isValid = ::OpenAPI::fromJsonValue(m_current_server_time_iso, json[QString("CurrentServerTimeISO")]);
    m_current_server_time_iso_isSet = !json[QString("CurrentServerTimeISO")].isNull() && m_current_server_time_iso_isValid;

    m_default_currency_code_isValid = ::OpenAPI::fromJsonValue(m_default_currency_code, json[QString("DefaultCurrencyCode")]);
    m_default_currency_code_isSet = !json[QString("DefaultCurrencyCode")].isNull() && m_default_currency_code_isValid;

    m_expense_approval_required_isValid = ::OpenAPI::fromJsonValue(m_expense_approval_required, json[QString("ExpenseApprovalRequired")]);
    m_expense_approval_required_isSet = !json[QString("ExpenseApprovalRequired")].isNull() && m_expense_approval_required_isValid;

    m_lock_approved_expenses_isValid = ::OpenAPI::fromJsonValue(m_lock_approved_expenses, json[QString("LockApprovedExpenses")]);
    m_lock_approved_expenses_isSet = !json[QString("LockApprovedExpenses")].isNull() && m_lock_approved_expenses_isValid;

    m_lock_approved_timesheets_isValid = ::OpenAPI::fromJsonValue(m_lock_approved_timesheets, json[QString("LockApprovedTimesheets")]);
    m_lock_approved_timesheets_isSet = !json[QString("LockApprovedTimesheets")].isNull() && m_lock_approved_timesheets_isValid;

    m_sc_isValid = ::OpenAPI::fromJsonValue(m_sc, json[QString("SC")]);
    m_sc_isSet = !json[QString("SC")].isNull() && m_sc_isValid;

    m_subdomain_isValid = ::OpenAPI::fromJsonValue(m_subdomain, json[QString("Subdomain")]);
    m_subdomain_isSet = !json[QString("Subdomain")].isNull() && m_subdomain_isValid;

    m_timesheet_day_of_week_isValid = ::OpenAPI::fromJsonValue(m_timesheet_day_of_week, json[QString("TimesheetDayOfWeek")]);
    m_timesheet_day_of_week_isSet = !json[QString("TimesheetDayOfWeek")].isNull() && m_timesheet_day_of_week_isValid;

    m_timesheet_display_format_code_isValid = ::OpenAPI::fromJsonValue(m_timesheet_display_format_code, json[QString("TimesheetDisplayFormatCode")]);
    m_timesheet_display_format_code_isSet = !json[QString("TimesheetDisplayFormatCode")].isNull() && m_timesheet_display_format_code_isValid;

    m_weekly_timesheet_reminder_isValid = ::OpenAPI::fromJsonValue(m_weekly_timesheet_reminder, json[QString("WeeklyTimesheetReminder")]);
    m_weekly_timesheet_reminder_isSet = !json[QString("WeeklyTimesheetReminder")].isNull() && m_weekly_timesheet_reminder_isValid;

    m_has24_hour_timesheet_format_isValid = ::OpenAPI::fromJsonValue(m_has24_hour_timesheet_format, json[QString("has24HourTimesheetFormat")]);
    m_has24_hour_timesheet_format_isSet = !json[QString("has24HourTimesheetFormat")].isNull() && m_has24_hour_timesheet_format_isValid;

    m_has_start_end_timesheets_isValid = ::OpenAPI::fromJsonValue(m_has_start_end_timesheets, json[QString("hasStartEndTimesheets")]);
    m_has_start_end_timesheets_isSet = !json[QString("hasStartEndTimesheets")].isNull() && m_has_start_end_timesheets_isValid;
}

QString OAIAccountDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_account_email_isSet) {
        obj.insert(QString("AccountEmail"), ::OpenAPI::toJsonValue(m_account_email));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("AccountID"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_allow_hiding_completed_tasks_on_timesheet_isSet) {
        obj.insert(QString("AllowHidingCompletedTasksOnTimesheet"), ::OpenAPI::toJsonValue(m_allow_hiding_completed_tasks_on_timesheet));
    }
    if (m_brand_primary_color_isSet) {
        obj.insert(QString("BrandPrimaryColor"), ::OpenAPI::toJsonValue(m_brand_primary_color));
    }
    if (m_brand_primary_color_luminance_isSet) {
        obj.insert(QString("BrandPrimaryColorLuminance"), ::OpenAPI::toJsonValue(m_brand_primary_color_luminance));
    }
    if (m_company_name_isSet) {
        obj.insert(QString("CompanyName"), ::OpenAPI::toJsonValue(m_company_name));
    }
    if (m_current_server_time_iso_isSet) {
        obj.insert(QString("CurrentServerTimeISO"), ::OpenAPI::toJsonValue(m_current_server_time_iso));
    }
    if (m_default_currency_code_isSet) {
        obj.insert(QString("DefaultCurrencyCode"), ::OpenAPI::toJsonValue(m_default_currency_code));
    }
    if (m_expense_approval_required_isSet) {
        obj.insert(QString("ExpenseApprovalRequired"), ::OpenAPI::toJsonValue(m_expense_approval_required));
    }
    if (m_lock_approved_expenses_isSet) {
        obj.insert(QString("LockApprovedExpenses"), ::OpenAPI::toJsonValue(m_lock_approved_expenses));
    }
    if (m_lock_approved_timesheets_isSet) {
        obj.insert(QString("LockApprovedTimesheets"), ::OpenAPI::toJsonValue(m_lock_approved_timesheets));
    }
    if (m_sc_isSet) {
        obj.insert(QString("SC"), ::OpenAPI::toJsonValue(m_sc));
    }
    if (m_subdomain_isSet) {
        obj.insert(QString("Subdomain"), ::OpenAPI::toJsonValue(m_subdomain));
    }
    if (m_timesheet_day_of_week_isSet) {
        obj.insert(QString("TimesheetDayOfWeek"), ::OpenAPI::toJsonValue(m_timesheet_day_of_week));
    }
    if (m_timesheet_display_format_code_isSet) {
        obj.insert(QString("TimesheetDisplayFormatCode"), ::OpenAPI::toJsonValue(m_timesheet_display_format_code));
    }
    if (m_weekly_timesheet_reminder_isSet) {
        obj.insert(QString("WeeklyTimesheetReminder"), ::OpenAPI::toJsonValue(m_weekly_timesheet_reminder));
    }
    if (m_has24_hour_timesheet_format_isSet) {
        obj.insert(QString("has24HourTimesheetFormat"), ::OpenAPI::toJsonValue(m_has24_hour_timesheet_format));
    }
    if (m_has_start_end_timesheets_isSet) {
        obj.insert(QString("hasStartEndTimesheets"), ::OpenAPI::toJsonValue(m_has_start_end_timesheets));
    }
    return obj;
}

QString OAIAccountDetails::getAccountEmail() const {
    return m_account_email;
}
void OAIAccountDetails::setAccountEmail(const QString &account_email) {
    m_account_email = account_email;
    m_account_email_isSet = true;
}

bool OAIAccountDetails::is_account_email_Set() const{
    return m_account_email_isSet;
}

bool OAIAccountDetails::is_account_email_Valid() const{
    return m_account_email_isValid;
}

qint32 OAIAccountDetails::getAccountId() const {
    return m_account_id;
}
void OAIAccountDetails::setAccountId(const qint32 &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIAccountDetails::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIAccountDetails::is_account_id_Valid() const{
    return m_account_id_isValid;
}

bool OAIAccountDetails::isAllowHidingCompletedTasksOnTimesheet() const {
    return m_allow_hiding_completed_tasks_on_timesheet;
}
void OAIAccountDetails::setAllowHidingCompletedTasksOnTimesheet(const bool &allow_hiding_completed_tasks_on_timesheet) {
    m_allow_hiding_completed_tasks_on_timesheet = allow_hiding_completed_tasks_on_timesheet;
    m_allow_hiding_completed_tasks_on_timesheet_isSet = true;
}

bool OAIAccountDetails::is_allow_hiding_completed_tasks_on_timesheet_Set() const{
    return m_allow_hiding_completed_tasks_on_timesheet_isSet;
}

bool OAIAccountDetails::is_allow_hiding_completed_tasks_on_timesheet_Valid() const{
    return m_allow_hiding_completed_tasks_on_timesheet_isValid;
}

QString OAIAccountDetails::getBrandPrimaryColor() const {
    return m_brand_primary_color;
}
void OAIAccountDetails::setBrandPrimaryColor(const QString &brand_primary_color) {
    m_brand_primary_color = brand_primary_color;
    m_brand_primary_color_isSet = true;
}

bool OAIAccountDetails::is_brand_primary_color_Set() const{
    return m_brand_primary_color_isSet;
}

bool OAIAccountDetails::is_brand_primary_color_Valid() const{
    return m_brand_primary_color_isValid;
}

QString OAIAccountDetails::getBrandPrimaryColorLuminance() const {
    return m_brand_primary_color_luminance;
}
void OAIAccountDetails::setBrandPrimaryColorLuminance(const QString &brand_primary_color_luminance) {
    m_brand_primary_color_luminance = brand_primary_color_luminance;
    m_brand_primary_color_luminance_isSet = true;
}

bool OAIAccountDetails::is_brand_primary_color_luminance_Set() const{
    return m_brand_primary_color_luminance_isSet;
}

bool OAIAccountDetails::is_brand_primary_color_luminance_Valid() const{
    return m_brand_primary_color_luminance_isValid;
}

QString OAIAccountDetails::getCompanyName() const {
    return m_company_name;
}
void OAIAccountDetails::setCompanyName(const QString &company_name) {
    m_company_name = company_name;
    m_company_name_isSet = true;
}

bool OAIAccountDetails::is_company_name_Set() const{
    return m_company_name_isSet;
}

bool OAIAccountDetails::is_company_name_Valid() const{
    return m_company_name_isValid;
}

QString OAIAccountDetails::getCurrentServerTimeIso() const {
    return m_current_server_time_iso;
}
void OAIAccountDetails::setCurrentServerTimeIso(const QString &current_server_time_iso) {
    m_current_server_time_iso = current_server_time_iso;
    m_current_server_time_iso_isSet = true;
}

bool OAIAccountDetails::is_current_server_time_iso_Set() const{
    return m_current_server_time_iso_isSet;
}

bool OAIAccountDetails::is_current_server_time_iso_Valid() const{
    return m_current_server_time_iso_isValid;
}

QString OAIAccountDetails::getDefaultCurrencyCode() const {
    return m_default_currency_code;
}
void OAIAccountDetails::setDefaultCurrencyCode(const QString &default_currency_code) {
    m_default_currency_code = default_currency_code;
    m_default_currency_code_isSet = true;
}

bool OAIAccountDetails::is_default_currency_code_Set() const{
    return m_default_currency_code_isSet;
}

bool OAIAccountDetails::is_default_currency_code_Valid() const{
    return m_default_currency_code_isValid;
}

bool OAIAccountDetails::isExpenseApprovalRequired() const {
    return m_expense_approval_required;
}
void OAIAccountDetails::setExpenseApprovalRequired(const bool &expense_approval_required) {
    m_expense_approval_required = expense_approval_required;
    m_expense_approval_required_isSet = true;
}

bool OAIAccountDetails::is_expense_approval_required_Set() const{
    return m_expense_approval_required_isSet;
}

bool OAIAccountDetails::is_expense_approval_required_Valid() const{
    return m_expense_approval_required_isValid;
}

bool OAIAccountDetails::isLockApprovedExpenses() const {
    return m_lock_approved_expenses;
}
void OAIAccountDetails::setLockApprovedExpenses(const bool &lock_approved_expenses) {
    m_lock_approved_expenses = lock_approved_expenses;
    m_lock_approved_expenses_isSet = true;
}

bool OAIAccountDetails::is_lock_approved_expenses_Set() const{
    return m_lock_approved_expenses_isSet;
}

bool OAIAccountDetails::is_lock_approved_expenses_Valid() const{
    return m_lock_approved_expenses_isValid;
}

bool OAIAccountDetails::isLockApprovedTimesheets() const {
    return m_lock_approved_timesheets;
}
void OAIAccountDetails::setLockApprovedTimesheets(const bool &lock_approved_timesheets) {
    m_lock_approved_timesheets = lock_approved_timesheets;
    m_lock_approved_timesheets_isSet = true;
}

bool OAIAccountDetails::is_lock_approved_timesheets_Set() const{
    return m_lock_approved_timesheets_isSet;
}

bool OAIAccountDetails::is_lock_approved_timesheets_Valid() const{
    return m_lock_approved_timesheets_isValid;
}

QString OAIAccountDetails::getSc() const {
    return m_sc;
}
void OAIAccountDetails::setSc(const QString &sc) {
    m_sc = sc;
    m_sc_isSet = true;
}

bool OAIAccountDetails::is_sc_Set() const{
    return m_sc_isSet;
}

bool OAIAccountDetails::is_sc_Valid() const{
    return m_sc_isValid;
}

QString OAIAccountDetails::getSubdomain() const {
    return m_subdomain;
}
void OAIAccountDetails::setSubdomain(const QString &subdomain) {
    m_subdomain = subdomain;
    m_subdomain_isSet = true;
}

bool OAIAccountDetails::is_subdomain_Set() const{
    return m_subdomain_isSet;
}

bool OAIAccountDetails::is_subdomain_Valid() const{
    return m_subdomain_isValid;
}

qint32 OAIAccountDetails::getTimesheetDayOfWeek() const {
    return m_timesheet_day_of_week;
}
void OAIAccountDetails::setTimesheetDayOfWeek(const qint32 &timesheet_day_of_week) {
    m_timesheet_day_of_week = timesheet_day_of_week;
    m_timesheet_day_of_week_isSet = true;
}

bool OAIAccountDetails::is_timesheet_day_of_week_Set() const{
    return m_timesheet_day_of_week_isSet;
}

bool OAIAccountDetails::is_timesheet_day_of_week_Valid() const{
    return m_timesheet_day_of_week_isValid;
}

QString OAIAccountDetails::getTimesheetDisplayFormatCode() const {
    return m_timesheet_display_format_code;
}
void OAIAccountDetails::setTimesheetDisplayFormatCode(const QString &timesheet_display_format_code) {
    m_timesheet_display_format_code = timesheet_display_format_code;
    m_timesheet_display_format_code_isSet = true;
}

bool OAIAccountDetails::is_timesheet_display_format_code_Set() const{
    return m_timesheet_display_format_code_isSet;
}

bool OAIAccountDetails::is_timesheet_display_format_code_Valid() const{
    return m_timesheet_display_format_code_isValid;
}

bool OAIAccountDetails::isWeeklyTimesheetReminder() const {
    return m_weekly_timesheet_reminder;
}
void OAIAccountDetails::setWeeklyTimesheetReminder(const bool &weekly_timesheet_reminder) {
    m_weekly_timesheet_reminder = weekly_timesheet_reminder;
    m_weekly_timesheet_reminder_isSet = true;
}

bool OAIAccountDetails::is_weekly_timesheet_reminder_Set() const{
    return m_weekly_timesheet_reminder_isSet;
}

bool OAIAccountDetails::is_weekly_timesheet_reminder_Valid() const{
    return m_weekly_timesheet_reminder_isValid;
}

bool OAIAccountDetails::isHas24HourTimesheetFormat() const {
    return m_has24_hour_timesheet_format;
}
void OAIAccountDetails::setHas24HourTimesheetFormat(const bool &has24_hour_timesheet_format) {
    m_has24_hour_timesheet_format = has24_hour_timesheet_format;
    m_has24_hour_timesheet_format_isSet = true;
}

bool OAIAccountDetails::is_has24_hour_timesheet_format_Set() const{
    return m_has24_hour_timesheet_format_isSet;
}

bool OAIAccountDetails::is_has24_hour_timesheet_format_Valid() const{
    return m_has24_hour_timesheet_format_isValid;
}

bool OAIAccountDetails::isHasStartEndTimesheets() const {
    return m_has_start_end_timesheets;
}
void OAIAccountDetails::setHasStartEndTimesheets(const bool &has_start_end_timesheets) {
    m_has_start_end_timesheets = has_start_end_timesheets;
    m_has_start_end_timesheets_isSet = true;
}

bool OAIAccountDetails::is_has_start_end_timesheets_Set() const{
    return m_has_start_end_timesheets_isSet;
}

bool OAIAccountDetails::is_has_start_end_timesheets_Valid() const{
    return m_has_start_end_timesheets_isValid;
}

bool OAIAccountDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_hiding_completed_tasks_on_timesheet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_primary_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_primary_color_luminance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_server_time_iso_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_approval_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lock_approved_expenses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lock_approved_timesheets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subdomain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timesheet_day_of_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timesheet_display_format_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weekly_timesheet_reminder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has24_hour_timesheet_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_start_end_timesheets_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
