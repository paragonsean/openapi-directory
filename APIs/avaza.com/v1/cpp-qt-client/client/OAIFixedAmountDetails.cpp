/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFixedAmountDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFixedAmountDetails::OAIFixedAmountDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFixedAmountDetails::OAIFixedAmountDetails() {
    this->initializeModel();
}

OAIFixedAmountDetails::~OAIFixedAmountDetails() {}

void OAIFixedAmountDetails::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_fixed_amount_id_isSet = false;
    m_fixed_amount_id_isValid = false;

    m_inventory_item_idfk_isSet = false;
    m_inventory_item_idfk_isValid = false;

    m_inventory_item_name_isSet = false;
    m_inventory_item_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_project_code_isSet = false;
    m_project_code_isValid = false;

    m_project_idfk_isSet = false;
    m_project_idfk_isValid = false;

    m_project_title_isSet = false;
    m_project_title_isValid = false;

    m_task_idfk_isSet = false;
    m_task_idfk_isValid = false;

    m_task_title_isSet = false;
    m_task_title_isValid = false;

    m_updated_by_user_idfk_isSet = false;
    m_updated_by_user_idfk_isValid = false;

    m_is_invoiced_isSet = false;
    m_is_invoiced_isValid = false;
}

void OAIFixedAmountDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFixedAmountDetails::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("Amount")]);
    m_amount_isSet = !json[QString("Amount")].isNull() && m_amount_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("DateCreated")]);
    m_date_created_isSet = !json[QString("DateCreated")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("DateUpdated")]);
    m_date_updated_isSet = !json[QString("DateUpdated")].isNull() && m_date_updated_isValid;

    m_fixed_amount_id_isValid = ::OpenAPI::fromJsonValue(m_fixed_amount_id, json[QString("FixedAmountID")]);
    m_fixed_amount_id_isSet = !json[QString("FixedAmountID")].isNull() && m_fixed_amount_id_isValid;

    m_inventory_item_idfk_isValid = ::OpenAPI::fromJsonValue(m_inventory_item_idfk, json[QString("InventoryItemIDFK")]);
    m_inventory_item_idfk_isSet = !json[QString("InventoryItemIDFK")].isNull() && m_inventory_item_idfk_isValid;

    m_inventory_item_name_isValid = ::OpenAPI::fromJsonValue(m_inventory_item_name, json[QString("InventoryItemName")]);
    m_inventory_item_name_isSet = !json[QString("InventoryItemName")].isNull() && m_inventory_item_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("Notes")]);
    m_notes_isSet = !json[QString("Notes")].isNull() && m_notes_isValid;

    m_project_code_isValid = ::OpenAPI::fromJsonValue(m_project_code, json[QString("ProjectCode")]);
    m_project_code_isSet = !json[QString("ProjectCode")].isNull() && m_project_code_isValid;

    m_project_idfk_isValid = ::OpenAPI::fromJsonValue(m_project_idfk, json[QString("ProjectIDFK")]);
    m_project_idfk_isSet = !json[QString("ProjectIDFK")].isNull() && m_project_idfk_isValid;

    m_project_title_isValid = ::OpenAPI::fromJsonValue(m_project_title, json[QString("ProjectTitle")]);
    m_project_title_isSet = !json[QString("ProjectTitle")].isNull() && m_project_title_isValid;

    m_task_idfk_isValid = ::OpenAPI::fromJsonValue(m_task_idfk, json[QString("TaskIDFK")]);
    m_task_idfk_isSet = !json[QString("TaskIDFK")].isNull() && m_task_idfk_isValid;

    m_task_title_isValid = ::OpenAPI::fromJsonValue(m_task_title, json[QString("TaskTitle")]);
    m_task_title_isSet = !json[QString("TaskTitle")].isNull() && m_task_title_isValid;

    m_updated_by_user_idfk_isValid = ::OpenAPI::fromJsonValue(m_updated_by_user_idfk, json[QString("UpdatedByUserIDFK")]);
    m_updated_by_user_idfk_isSet = !json[QString("UpdatedByUserIDFK")].isNull() && m_updated_by_user_idfk_isValid;

    m_is_invoiced_isValid = ::OpenAPI::fromJsonValue(m_is_invoiced, json[QString("isInvoiced")]);
    m_is_invoiced_isSet = !json[QString("isInvoiced")].isNull() && m_is_invoiced_isValid;
}

QString OAIFixedAmountDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFixedAmountDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("Amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("DateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("DateUpdated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_fixed_amount_id_isSet) {
        obj.insert(QString("FixedAmountID"), ::OpenAPI::toJsonValue(m_fixed_amount_id));
    }
    if (m_inventory_item_idfk_isSet) {
        obj.insert(QString("InventoryItemIDFK"), ::OpenAPI::toJsonValue(m_inventory_item_idfk));
    }
    if (m_inventory_item_name_isSet) {
        obj.insert(QString("InventoryItemName"), ::OpenAPI::toJsonValue(m_inventory_item_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("Notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_project_code_isSet) {
        obj.insert(QString("ProjectCode"), ::OpenAPI::toJsonValue(m_project_code));
    }
    if (m_project_idfk_isSet) {
        obj.insert(QString("ProjectIDFK"), ::OpenAPI::toJsonValue(m_project_idfk));
    }
    if (m_project_title_isSet) {
        obj.insert(QString("ProjectTitle"), ::OpenAPI::toJsonValue(m_project_title));
    }
    if (m_task_idfk_isSet) {
        obj.insert(QString("TaskIDFK"), ::OpenAPI::toJsonValue(m_task_idfk));
    }
    if (m_task_title_isSet) {
        obj.insert(QString("TaskTitle"), ::OpenAPI::toJsonValue(m_task_title));
    }
    if (m_updated_by_user_idfk_isSet) {
        obj.insert(QString("UpdatedByUserIDFK"), ::OpenAPI::toJsonValue(m_updated_by_user_idfk));
    }
    if (m_is_invoiced_isSet) {
        obj.insert(QString("isInvoiced"), ::OpenAPI::toJsonValue(m_is_invoiced));
    }
    return obj;
}

double OAIFixedAmountDetails::getAmount() const {
    return m_amount;
}
void OAIFixedAmountDetails::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIFixedAmountDetails::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIFixedAmountDetails::is_amount_Valid() const{
    return m_amount_isValid;
}

QDateTime OAIFixedAmountDetails::getDateCreated() const {
    return m_date_created;
}
void OAIFixedAmountDetails::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIFixedAmountDetails::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIFixedAmountDetails::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIFixedAmountDetails::getDateUpdated() const {
    return m_date_updated;
}
void OAIFixedAmountDetails::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIFixedAmountDetails::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIFixedAmountDetails::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

qint32 OAIFixedAmountDetails::getFixedAmountId() const {
    return m_fixed_amount_id;
}
void OAIFixedAmountDetails::setFixedAmountId(const qint32 &fixed_amount_id) {
    m_fixed_amount_id = fixed_amount_id;
    m_fixed_amount_id_isSet = true;
}

bool OAIFixedAmountDetails::is_fixed_amount_id_Set() const{
    return m_fixed_amount_id_isSet;
}

bool OAIFixedAmountDetails::is_fixed_amount_id_Valid() const{
    return m_fixed_amount_id_isValid;
}

qint64 OAIFixedAmountDetails::getInventoryItemIdfk() const {
    return m_inventory_item_idfk;
}
void OAIFixedAmountDetails::setInventoryItemIdfk(const qint64 &inventory_item_idfk) {
    m_inventory_item_idfk = inventory_item_idfk;
    m_inventory_item_idfk_isSet = true;
}

bool OAIFixedAmountDetails::is_inventory_item_idfk_Set() const{
    return m_inventory_item_idfk_isSet;
}

bool OAIFixedAmountDetails::is_inventory_item_idfk_Valid() const{
    return m_inventory_item_idfk_isValid;
}

QString OAIFixedAmountDetails::getInventoryItemName() const {
    return m_inventory_item_name;
}
void OAIFixedAmountDetails::setInventoryItemName(const QString &inventory_item_name) {
    m_inventory_item_name = inventory_item_name;
    m_inventory_item_name_isSet = true;
}

bool OAIFixedAmountDetails::is_inventory_item_name_Set() const{
    return m_inventory_item_name_isSet;
}

bool OAIFixedAmountDetails::is_inventory_item_name_Valid() const{
    return m_inventory_item_name_isValid;
}

QString OAIFixedAmountDetails::getNotes() const {
    return m_notes;
}
void OAIFixedAmountDetails::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIFixedAmountDetails::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIFixedAmountDetails::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIFixedAmountDetails::getProjectCode() const {
    return m_project_code;
}
void OAIFixedAmountDetails::setProjectCode(const QString &project_code) {
    m_project_code = project_code;
    m_project_code_isSet = true;
}

bool OAIFixedAmountDetails::is_project_code_Set() const{
    return m_project_code_isSet;
}

bool OAIFixedAmountDetails::is_project_code_Valid() const{
    return m_project_code_isValid;
}

qint32 OAIFixedAmountDetails::getProjectIdfk() const {
    return m_project_idfk;
}
void OAIFixedAmountDetails::setProjectIdfk(const qint32 &project_idfk) {
    m_project_idfk = project_idfk;
    m_project_idfk_isSet = true;
}

bool OAIFixedAmountDetails::is_project_idfk_Set() const{
    return m_project_idfk_isSet;
}

bool OAIFixedAmountDetails::is_project_idfk_Valid() const{
    return m_project_idfk_isValid;
}

QString OAIFixedAmountDetails::getProjectTitle() const {
    return m_project_title;
}
void OAIFixedAmountDetails::setProjectTitle(const QString &project_title) {
    m_project_title = project_title;
    m_project_title_isSet = true;
}

bool OAIFixedAmountDetails::is_project_title_Set() const{
    return m_project_title_isSet;
}

bool OAIFixedAmountDetails::is_project_title_Valid() const{
    return m_project_title_isValid;
}

qint32 OAIFixedAmountDetails::getTaskIdfk() const {
    return m_task_idfk;
}
void OAIFixedAmountDetails::setTaskIdfk(const qint32 &task_idfk) {
    m_task_idfk = task_idfk;
    m_task_idfk_isSet = true;
}

bool OAIFixedAmountDetails::is_task_idfk_Set() const{
    return m_task_idfk_isSet;
}

bool OAIFixedAmountDetails::is_task_idfk_Valid() const{
    return m_task_idfk_isValid;
}

QString OAIFixedAmountDetails::getTaskTitle() const {
    return m_task_title;
}
void OAIFixedAmountDetails::setTaskTitle(const QString &task_title) {
    m_task_title = task_title;
    m_task_title_isSet = true;
}

bool OAIFixedAmountDetails::is_task_title_Set() const{
    return m_task_title_isSet;
}

bool OAIFixedAmountDetails::is_task_title_Valid() const{
    return m_task_title_isValid;
}

qint32 OAIFixedAmountDetails::getUpdatedByUserIdfk() const {
    return m_updated_by_user_idfk;
}
void OAIFixedAmountDetails::setUpdatedByUserIdfk(const qint32 &updated_by_user_idfk) {
    m_updated_by_user_idfk = updated_by_user_idfk;
    m_updated_by_user_idfk_isSet = true;
}

bool OAIFixedAmountDetails::is_updated_by_user_idfk_Set() const{
    return m_updated_by_user_idfk_isSet;
}

bool OAIFixedAmountDetails::is_updated_by_user_idfk_Valid() const{
    return m_updated_by_user_idfk_isValid;
}

bool OAIFixedAmountDetails::isIsInvoiced() const {
    return m_is_invoiced;
}
void OAIFixedAmountDetails::setIsInvoiced(const bool &is_invoiced) {
    m_is_invoiced = is_invoiced;
    m_is_invoiced_isSet = true;
}

bool OAIFixedAmountDetails::is_is_invoiced_Set() const{
    return m_is_invoiced_isSet;
}

bool OAIFixedAmountDetails::is_is_invoiced_Valid() const{
    return m_is_invoiced_isValid;
}

bool OAIFixedAmountDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_amount_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_item_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_item_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_by_user_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_invoiced_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFixedAmountDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
