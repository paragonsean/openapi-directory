/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITaskDetails.h
 *
 * 
 */

#ifndef OAITaskDetails_H
#define OAITaskDetails_H

#include <QJsonObject>

#include "OAIAssignedToUser.h"
#include "OAITagItem.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAssignedToUser;
class OAITagItem;

class OAITaskDetails : public OAIObject {
public:
    OAITaskDetails();
    OAITaskDetails(QString json);
    ~OAITaskDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAccountTaskTypeIdfk() const;
    void setAccountTaskTypeIdfk(const qint32 &account_task_type_idfk);
    bool is_account_task_type_idfk_Set() const;
    bool is_account_task_type_idfk_Valid() const;

    double getActualTime() const;
    void setActualTime(const double &actual_time);
    bool is_actual_time_Set() const;
    bool is_actual_time_Valid() const;

    QList<OAIAssignedToUser> getAssignedToUsers() const;
    void setAssignedToUsers(const QList<OAIAssignedToUser> &assigned_to_users);
    bool is_assigned_to_users_Set() const;
    bool is_assigned_to_users_Valid() const;

    QDateTime getDateCompleted() const;
    void setDateCompleted(const QDateTime &date_completed);
    bool is_date_completed_Set() const;
    bool is_date_completed_Valid() const;

    QDateTime getDateCreated() const;
    void setDateCreated(const QDateTime &date_created);
    bool is_date_created_Set() const;
    bool is_date_created_Valid() const;

    QDateTime getDateDue() const;
    void setDateDue(const QDateTime &date_due);
    bool is_date_due_Set() const;
    bool is_date_due_Valid() const;

    QDateTime getDateStart() const;
    void setDateStart(const QDateTime &date_start);
    bool is_date_start_Set() const;
    bool is_date_start_Valid() const;

    QDateTime getDateUpdated() const;
    void setDateUpdated(const QDateTime &date_updated);
    bool is_date_updated_Set() const;
    bool is_date_updated_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getDescriptionNoHtml() const;
    void setDescriptionNoHtml(const QString &description_no_html);
    bool is_description_no_html_Set() const;
    bool is_description_no_html_Valid() const;

    double getEstimatedEffort() const;
    void setEstimatedEffort(const double &estimated_effort);
    bool is_estimated_effort_Set() const;
    bool is_estimated_effort_Valid() const;

    double getPercentComplete() const;
    void setPercentComplete(const double &percent_complete);
    bool is_percent_complete_Set() const;
    bool is_percent_complete_Valid() const;

    QString getProjectCode() const;
    void setProjectCode(const QString &project_code);
    bool is_project_code_Set() const;
    bool is_project_code_Valid() const;

    qint32 getProjectIdfk() const;
    void setProjectIdfk(const qint32 &project_idfk);
    bool is_project_idfk_Set() const;
    bool is_project_idfk_Valid() const;

    QString getProjectTitle() const;
    void setProjectTitle(const QString &project_title);
    bool is_project_title_Set() const;
    bool is_project_title_Valid() const;

    qint32 getSectionIdfk() const;
    void setSectionIdfk(const qint32 &section_idfk);
    bool is_section_idfk_Set() const;
    bool is_section_idfk_Valid() const;

    QString getSectionTitle() const;
    void setSectionTitle(const QString &section_title);
    bool is_section_title_Set() const;
    bool is_section_title_Valid() const;

    QList<OAITagItem> getTags() const;
    void setTags(const QList<OAITagItem> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    qint32 getTaskId() const;
    void setTaskId(const qint32 &task_id);
    bool is_task_id_Set() const;
    bool is_task_id_Valid() const;

    QString getTaskPriorityCode() const;
    void setTaskPriorityCode(const QString &task_priority_code);
    bool is_task_priority_code_Set() const;
    bool is_task_priority_code_Valid() const;

    QString getTaskPriorityName() const;
    void setTaskPriorityName(const QString &task_priority_name);
    bool is_task_priority_name_Set() const;
    bool is_task_priority_name_Valid() const;

    QString getTaskStatusCode() const;
    void setTaskStatusCode(const QString &task_status_code);
    bool is_task_status_code_Set() const;
    bool is_task_status_code_Valid() const;

    QString getTaskStatusName() const;
    void setTaskStatusName(const QString &task_status_name);
    bool is_task_status_name_Set() const;
    bool is_task_status_name_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    bool isIsCompleteStatus() const;
    void setIsCompleteStatus(const bool &is_complete_status);
    bool is_is_complete_status_Set() const;
    bool is_is_complete_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_account_task_type_idfk;
    bool m_account_task_type_idfk_isSet;
    bool m_account_task_type_idfk_isValid;

    double m_actual_time;
    bool m_actual_time_isSet;
    bool m_actual_time_isValid;

    QList<OAIAssignedToUser> m_assigned_to_users;
    bool m_assigned_to_users_isSet;
    bool m_assigned_to_users_isValid;

    QDateTime m_date_completed;
    bool m_date_completed_isSet;
    bool m_date_completed_isValid;

    QDateTime m_date_created;
    bool m_date_created_isSet;
    bool m_date_created_isValid;

    QDateTime m_date_due;
    bool m_date_due_isSet;
    bool m_date_due_isValid;

    QDateTime m_date_start;
    bool m_date_start_isSet;
    bool m_date_start_isValid;

    QDateTime m_date_updated;
    bool m_date_updated_isSet;
    bool m_date_updated_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_description_no_html;
    bool m_description_no_html_isSet;
    bool m_description_no_html_isValid;

    double m_estimated_effort;
    bool m_estimated_effort_isSet;
    bool m_estimated_effort_isValid;

    double m_percent_complete;
    bool m_percent_complete_isSet;
    bool m_percent_complete_isValid;

    QString m_project_code;
    bool m_project_code_isSet;
    bool m_project_code_isValid;

    qint32 m_project_idfk;
    bool m_project_idfk_isSet;
    bool m_project_idfk_isValid;

    QString m_project_title;
    bool m_project_title_isSet;
    bool m_project_title_isValid;

    qint32 m_section_idfk;
    bool m_section_idfk_isSet;
    bool m_section_idfk_isValid;

    QString m_section_title;
    bool m_section_title_isSet;
    bool m_section_title_isValid;

    QList<OAITagItem> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    qint32 m_task_id;
    bool m_task_id_isSet;
    bool m_task_id_isValid;

    QString m_task_priority_code;
    bool m_task_priority_code_isSet;
    bool m_task_priority_code_isValid;

    QString m_task_priority_name;
    bool m_task_priority_name_isSet;
    bool m_task_priority_name_isValid;

    QString m_task_status_code;
    bool m_task_status_code_isSet;
    bool m_task_status_code_isValid;

    QString m_task_status_name;
    bool m_task_status_name_isSet;
    bool m_task_status_name_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    bool m_is_complete_status;
    bool m_is_complete_status_isSet;
    bool m_is_complete_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITaskDetails)

#endif // OAITaskDetails_H
