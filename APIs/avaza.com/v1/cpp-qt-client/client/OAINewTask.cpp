/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINewTask.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINewTask::OAINewTask(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINewTask::OAINewTask() {
    this->initializeModel();
}

OAINewTask::~OAINewTask() {}

void OAINewTask::initializeModel() {

    m_account_task_type_idfk_isSet = false;
    m_account_task_type_idfk_isValid = false;

    m_assigned_to_user_idfks_isSet = false;
    m_assigned_to_user_idfks_isValid = false;

    m_date_due_isSet = false;
    m_date_due_isValid = false;

    m_date_start_isSet = false;
    m_date_start_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_estimated_effort_isSet = false;
    m_estimated_effort_isValid = false;

    m_project_idfk_isSet = false;
    m_project_idfk_isValid = false;

    m_section_idfk_isSet = false;
    m_section_idfk_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_task_priority_code_isSet = false;
    m_task_priority_code_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAINewTask::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINewTask::fromJsonObject(QJsonObject json) {

    m_account_task_type_idfk_isValid = ::OpenAPI::fromJsonValue(m_account_task_type_idfk, json[QString("AccountTaskTypeIDFK")]);
    m_account_task_type_idfk_isSet = !json[QString("AccountTaskTypeIDFK")].isNull() && m_account_task_type_idfk_isValid;

    m_assigned_to_user_idfks_isValid = ::OpenAPI::fromJsonValue(m_assigned_to_user_idfks, json[QString("AssignedToUserIDFKs")]);
    m_assigned_to_user_idfks_isSet = !json[QString("AssignedToUserIDFKs")].isNull() && m_assigned_to_user_idfks_isValid;

    m_date_due_isValid = ::OpenAPI::fromJsonValue(m_date_due, json[QString("DateDue")]);
    m_date_due_isSet = !json[QString("DateDue")].isNull() && m_date_due_isValid;

    m_date_start_isValid = ::OpenAPI::fromJsonValue(m_date_start, json[QString("DateStart")]);
    m_date_start_isSet = !json[QString("DateStart")].isNull() && m_date_start_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_estimated_effort_isValid = ::OpenAPI::fromJsonValue(m_estimated_effort, json[QString("EstimatedEffort")]);
    m_estimated_effort_isSet = !json[QString("EstimatedEffort")].isNull() && m_estimated_effort_isValid;

    m_project_idfk_isValid = ::OpenAPI::fromJsonValue(m_project_idfk, json[QString("ProjectIDFK")]);
    m_project_idfk_isSet = !json[QString("ProjectIDFK")].isNull() && m_project_idfk_isValid;

    m_section_idfk_isValid = ::OpenAPI::fromJsonValue(m_section_idfk, json[QString("SectionIDFK")]);
    m_section_idfk_isSet = !json[QString("SectionIDFK")].isNull() && m_section_idfk_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_task_priority_code_isValid = ::OpenAPI::fromJsonValue(m_task_priority_code, json[QString("TaskPriorityCode")]);
    m_task_priority_code_isSet = !json[QString("TaskPriorityCode")].isNull() && m_task_priority_code_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;
}

QString OAINewTask::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINewTask::asJsonObject() const {
    QJsonObject obj;
    if (m_account_task_type_idfk_isSet) {
        obj.insert(QString("AccountTaskTypeIDFK"), ::OpenAPI::toJsonValue(m_account_task_type_idfk));
    }
    if (m_assigned_to_user_idfks.size() > 0) {
        obj.insert(QString("AssignedToUserIDFKs"), ::OpenAPI::toJsonValue(m_assigned_to_user_idfks));
    }
    if (m_date_due_isSet) {
        obj.insert(QString("DateDue"), ::OpenAPI::toJsonValue(m_date_due));
    }
    if (m_date_start_isSet) {
        obj.insert(QString("DateStart"), ::OpenAPI::toJsonValue(m_date_start));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_estimated_effort_isSet) {
        obj.insert(QString("EstimatedEffort"), ::OpenAPI::toJsonValue(m_estimated_effort));
    }
    if (m_project_idfk_isSet) {
        obj.insert(QString("ProjectIDFK"), ::OpenAPI::toJsonValue(m_project_idfk));
    }
    if (m_section_idfk_isSet) {
        obj.insert(QString("SectionIDFK"), ::OpenAPI::toJsonValue(m_section_idfk));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_task_priority_code_isSet) {
        obj.insert(QString("TaskPriorityCode"), ::OpenAPI::toJsonValue(m_task_priority_code));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

qint32 OAINewTask::getAccountTaskTypeIdfk() const {
    return m_account_task_type_idfk;
}
void OAINewTask::setAccountTaskTypeIdfk(const qint32 &account_task_type_idfk) {
    m_account_task_type_idfk = account_task_type_idfk;
    m_account_task_type_idfk_isSet = true;
}

bool OAINewTask::is_account_task_type_idfk_Set() const{
    return m_account_task_type_idfk_isSet;
}

bool OAINewTask::is_account_task_type_idfk_Valid() const{
    return m_account_task_type_idfk_isValid;
}

QList<qint32> OAINewTask::getAssignedToUserIdfks() const {
    return m_assigned_to_user_idfks;
}
void OAINewTask::setAssignedToUserIdfks(const QList<qint32> &assigned_to_user_idfks) {
    m_assigned_to_user_idfks = assigned_to_user_idfks;
    m_assigned_to_user_idfks_isSet = true;
}

bool OAINewTask::is_assigned_to_user_idfks_Set() const{
    return m_assigned_to_user_idfks_isSet;
}

bool OAINewTask::is_assigned_to_user_idfks_Valid() const{
    return m_assigned_to_user_idfks_isValid;
}

QDateTime OAINewTask::getDateDue() const {
    return m_date_due;
}
void OAINewTask::setDateDue(const QDateTime &date_due) {
    m_date_due = date_due;
    m_date_due_isSet = true;
}

bool OAINewTask::is_date_due_Set() const{
    return m_date_due_isSet;
}

bool OAINewTask::is_date_due_Valid() const{
    return m_date_due_isValid;
}

QDateTime OAINewTask::getDateStart() const {
    return m_date_start;
}
void OAINewTask::setDateStart(const QDateTime &date_start) {
    m_date_start = date_start;
    m_date_start_isSet = true;
}

bool OAINewTask::is_date_start_Set() const{
    return m_date_start_isSet;
}

bool OAINewTask::is_date_start_Valid() const{
    return m_date_start_isValid;
}

QString OAINewTask::getDescription() const {
    return m_description;
}
void OAINewTask::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAINewTask::is_description_Set() const{
    return m_description_isSet;
}

bool OAINewTask::is_description_Valid() const{
    return m_description_isValid;
}

double OAINewTask::getEstimatedEffort() const {
    return m_estimated_effort;
}
void OAINewTask::setEstimatedEffort(const double &estimated_effort) {
    m_estimated_effort = estimated_effort;
    m_estimated_effort_isSet = true;
}

bool OAINewTask::is_estimated_effort_Set() const{
    return m_estimated_effort_isSet;
}

bool OAINewTask::is_estimated_effort_Valid() const{
    return m_estimated_effort_isValid;
}

qint32 OAINewTask::getProjectIdfk() const {
    return m_project_idfk;
}
void OAINewTask::setProjectIdfk(const qint32 &project_idfk) {
    m_project_idfk = project_idfk;
    m_project_idfk_isSet = true;
}

bool OAINewTask::is_project_idfk_Set() const{
    return m_project_idfk_isSet;
}

bool OAINewTask::is_project_idfk_Valid() const{
    return m_project_idfk_isValid;
}

qint32 OAINewTask::getSectionIdfk() const {
    return m_section_idfk;
}
void OAINewTask::setSectionIdfk(const qint32 &section_idfk) {
    m_section_idfk = section_idfk;
    m_section_idfk_isSet = true;
}

bool OAINewTask::is_section_idfk_Set() const{
    return m_section_idfk_isSet;
}

bool OAINewTask::is_section_idfk_Valid() const{
    return m_section_idfk_isValid;
}

QList<OAINewTag> OAINewTask::getTags() const {
    return m_tags;
}
void OAINewTask::setTags(const QList<OAINewTag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAINewTask::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAINewTask::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAINewTask::getTaskPriorityCode() const {
    return m_task_priority_code;
}
void OAINewTask::setTaskPriorityCode(const QString &task_priority_code) {
    m_task_priority_code = task_priority_code;
    m_task_priority_code_isSet = true;
}

bool OAINewTask::is_task_priority_code_Set() const{
    return m_task_priority_code_isSet;
}

bool OAINewTask::is_task_priority_code_Valid() const{
    return m_task_priority_code_isValid;
}

QString OAINewTask::getTitle() const {
    return m_title;
}
void OAINewTask::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAINewTask::is_title_Set() const{
    return m_title_isSet;
}

bool OAINewTask::is_title_Valid() const{
    return m_title_isValid;
}

bool OAINewTask::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_task_type_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assigned_to_user_idfks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_due_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_effort_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_section_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_priority_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINewTask::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_project_idfk_isValid && m_section_idfk_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
