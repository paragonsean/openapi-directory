/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimesheetSummaryResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimesheetSummaryResult::OAITimesheetSummaryResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimesheetSummaryResult::OAITimesheetSummaryResult() {
    this->initializeModel();
}

OAITimesheetSummaryResult::~OAITimesheetSummaryResult() {}

void OAITimesheetSummaryResult::initializeModel() {

    m_billable_hours_isSet = false;
    m_billable_hours_isValid = false;

    m_entry_date_from_isSet = false;
    m_entry_date_from_isValid = false;

    m_entry_date_to_isSet = false;
    m_entry_date_to_isValid = false;

    m_group_data_isSet = false;
    m_group_data_isValid = false;

    m_grouping_levels_isSet = false;
    m_grouping_levels_isValid = false;

    m_total_hours_isSet = false;
    m_total_hours_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAITimesheetSummaryResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimesheetSummaryResult::fromJsonObject(QJsonObject json) {

    m_billable_hours_isValid = ::OpenAPI::fromJsonValue(m_billable_hours, json[QString("BillableHours")]);
    m_billable_hours_isSet = !json[QString("BillableHours")].isNull() && m_billable_hours_isValid;

    m_entry_date_from_isValid = ::OpenAPI::fromJsonValue(m_entry_date_from, json[QString("EntryDateFrom")]);
    m_entry_date_from_isSet = !json[QString("EntryDateFrom")].isNull() && m_entry_date_from_isValid;

    m_entry_date_to_isValid = ::OpenAPI::fromJsonValue(m_entry_date_to, json[QString("EntryDateTo")]);
    m_entry_date_to_isSet = !json[QString("EntryDateTo")].isNull() && m_entry_date_to_isValid;

    m_group_data_isValid = ::OpenAPI::fromJsonValue(m_group_data, json[QString("GroupData")]);
    m_group_data_isSet = !json[QString("GroupData")].isNull() && m_group_data_isValid;

    m_grouping_levels_isValid = ::OpenAPI::fromJsonValue(m_grouping_levels, json[QString("GroupingLevels")]);
    m_grouping_levels_isSet = !json[QString("GroupingLevels")].isNull() && m_grouping_levels_isValid;

    m_total_hours_isValid = ::OpenAPI::fromJsonValue(m_total_hours, json[QString("TotalHours")]);
    m_total_hours_isSet = !json[QString("TotalHours")].isNull() && m_total_hours_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("UserID")]);
    m_user_id_isSet = !json[QString("UserID")].isNull() && m_user_id_isValid;
}

QString OAITimesheetSummaryResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimesheetSummaryResult::asJsonObject() const {
    QJsonObject obj;
    if (m_billable_hours_isSet) {
        obj.insert(QString("BillableHours"), ::OpenAPI::toJsonValue(m_billable_hours));
    }
    if (m_entry_date_from_isSet) {
        obj.insert(QString("EntryDateFrom"), ::OpenAPI::toJsonValue(m_entry_date_from));
    }
    if (m_entry_date_to_isSet) {
        obj.insert(QString("EntryDateTo"), ::OpenAPI::toJsonValue(m_entry_date_to));
    }
    if (m_group_data.size() > 0) {
        obj.insert(QString("GroupData"), ::OpenAPI::toJsonValue(m_group_data));
    }
    if (m_grouping_levels.size() > 0) {
        obj.insert(QString("GroupingLevels"), ::OpenAPI::toJsonValue(m_grouping_levels));
    }
    if (m_total_hours_isSet) {
        obj.insert(QString("TotalHours"), ::OpenAPI::toJsonValue(m_total_hours));
    }
    if (m_user_id.size() > 0) {
        obj.insert(QString("UserID"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

double OAITimesheetSummaryResult::getBillableHours() const {
    return m_billable_hours;
}
void OAITimesheetSummaryResult::setBillableHours(const double &billable_hours) {
    m_billable_hours = billable_hours;
    m_billable_hours_isSet = true;
}

bool OAITimesheetSummaryResult::is_billable_hours_Set() const{
    return m_billable_hours_isSet;
}

bool OAITimesheetSummaryResult::is_billable_hours_Valid() const{
    return m_billable_hours_isValid;
}

QDateTime OAITimesheetSummaryResult::getEntryDateFrom() const {
    return m_entry_date_from;
}
void OAITimesheetSummaryResult::setEntryDateFrom(const QDateTime &entry_date_from) {
    m_entry_date_from = entry_date_from;
    m_entry_date_from_isSet = true;
}

bool OAITimesheetSummaryResult::is_entry_date_from_Set() const{
    return m_entry_date_from_isSet;
}

bool OAITimesheetSummaryResult::is_entry_date_from_Valid() const{
    return m_entry_date_from_isValid;
}

QDateTime OAITimesheetSummaryResult::getEntryDateTo() const {
    return m_entry_date_to;
}
void OAITimesheetSummaryResult::setEntryDateTo(const QDateTime &entry_date_to) {
    m_entry_date_to = entry_date_to;
    m_entry_date_to_isSet = true;
}

bool OAITimesheetSummaryResult::is_entry_date_to_Set() const{
    return m_entry_date_to_isSet;
}

bool OAITimesheetSummaryResult::is_entry_date_to_Valid() const{
    return m_entry_date_to_isValid;
}

QList<OAITimesheetSummaryGroup> OAITimesheetSummaryResult::getGroupData() const {
    return m_group_data;
}
void OAITimesheetSummaryResult::setGroupData(const QList<OAITimesheetSummaryGroup> &group_data) {
    m_group_data = group_data;
    m_group_data_isSet = true;
}

bool OAITimesheetSummaryResult::is_group_data_Set() const{
    return m_group_data_isSet;
}

bool OAITimesheetSummaryResult::is_group_data_Valid() const{
    return m_group_data_isValid;
}

QList<QString> OAITimesheetSummaryResult::getGroupingLevels() const {
    return m_grouping_levels;
}
void OAITimesheetSummaryResult::setGroupingLevels(const QList<QString> &grouping_levels) {
    m_grouping_levels = grouping_levels;
    m_grouping_levels_isSet = true;
}

bool OAITimesheetSummaryResult::is_grouping_levels_Set() const{
    return m_grouping_levels_isSet;
}

bool OAITimesheetSummaryResult::is_grouping_levels_Valid() const{
    return m_grouping_levels_isValid;
}

double OAITimesheetSummaryResult::getTotalHours() const {
    return m_total_hours;
}
void OAITimesheetSummaryResult::setTotalHours(const double &total_hours) {
    m_total_hours = total_hours;
    m_total_hours_isSet = true;
}

bool OAITimesheetSummaryResult::is_total_hours_Set() const{
    return m_total_hours_isSet;
}

bool OAITimesheetSummaryResult::is_total_hours_Valid() const{
    return m_total_hours_isValid;
}

QList<qint32> OAITimesheetSummaryResult::getUserId() const {
    return m_user_id;
}
void OAITimesheetSummaryResult::setUserId(const QList<qint32> &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAITimesheetSummaryResult::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAITimesheetSummaryResult::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAITimesheetSummaryResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billable_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry_date_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry_date_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_grouping_levels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimesheetSummaryResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
