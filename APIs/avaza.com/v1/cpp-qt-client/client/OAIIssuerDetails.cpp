/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssuerDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssuerDetails::OAIIssuerDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssuerDetails::OAIIssuerDetails() {
    this->initializeModel();
}

OAIIssuerDetails::~OAIIssuerDetails() {}

void OAIIssuerDetails::initializeModel() {

    m_billing_address_isSet = false;
    m_billing_address_isValid = false;

    m_billing_address_city_isSet = false;
    m_billing_address_city_isValid = false;

    m_billing_address_line_isSet = false;
    m_billing_address_line_isValid = false;

    m_billing_address_post_code_isSet = false;
    m_billing_address_post_code_isValid = false;

    m_billing_address_state_isSet = false;
    m_billing_address_state_isValid = false;

    m_billing_country_code_isSet = false;
    m_billing_country_code_isValid = false;

    m_tax_number_isSet = false;
    m_tax_number_isValid = false;
}

void OAIIssuerDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssuerDetails::fromJsonObject(QJsonObject json) {

    m_billing_address_isValid = ::OpenAPI::fromJsonValue(m_billing_address, json[QString("BillingAddress")]);
    m_billing_address_isSet = !json[QString("BillingAddress")].isNull() && m_billing_address_isValid;

    m_billing_address_city_isValid = ::OpenAPI::fromJsonValue(m_billing_address_city, json[QString("BillingAddressCity")]);
    m_billing_address_city_isSet = !json[QString("BillingAddressCity")].isNull() && m_billing_address_city_isValid;

    m_billing_address_line_isValid = ::OpenAPI::fromJsonValue(m_billing_address_line, json[QString("BillingAddressLine")]);
    m_billing_address_line_isSet = !json[QString("BillingAddressLine")].isNull() && m_billing_address_line_isValid;

    m_billing_address_post_code_isValid = ::OpenAPI::fromJsonValue(m_billing_address_post_code, json[QString("BillingAddressPostCode")]);
    m_billing_address_post_code_isSet = !json[QString("BillingAddressPostCode")].isNull() && m_billing_address_post_code_isValid;

    m_billing_address_state_isValid = ::OpenAPI::fromJsonValue(m_billing_address_state, json[QString("BillingAddressState")]);
    m_billing_address_state_isSet = !json[QString("BillingAddressState")].isNull() && m_billing_address_state_isValid;

    m_billing_country_code_isValid = ::OpenAPI::fromJsonValue(m_billing_country_code, json[QString("BillingCountryCode")]);
    m_billing_country_code_isSet = !json[QString("BillingCountryCode")].isNull() && m_billing_country_code_isValid;

    m_tax_number_isValid = ::OpenAPI::fromJsonValue(m_tax_number, json[QString("TaxNumber")]);
    m_tax_number_isSet = !json[QString("TaxNumber")].isNull() && m_tax_number_isValid;
}

QString OAIIssuerDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssuerDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_billing_address_isSet) {
        obj.insert(QString("BillingAddress"), ::OpenAPI::toJsonValue(m_billing_address));
    }
    if (m_billing_address_city_isSet) {
        obj.insert(QString("BillingAddressCity"), ::OpenAPI::toJsonValue(m_billing_address_city));
    }
    if (m_billing_address_line_isSet) {
        obj.insert(QString("BillingAddressLine"), ::OpenAPI::toJsonValue(m_billing_address_line));
    }
    if (m_billing_address_post_code_isSet) {
        obj.insert(QString("BillingAddressPostCode"), ::OpenAPI::toJsonValue(m_billing_address_post_code));
    }
    if (m_billing_address_state_isSet) {
        obj.insert(QString("BillingAddressState"), ::OpenAPI::toJsonValue(m_billing_address_state));
    }
    if (m_billing_country_code_isSet) {
        obj.insert(QString("BillingCountryCode"), ::OpenAPI::toJsonValue(m_billing_country_code));
    }
    if (m_tax_number_isSet) {
        obj.insert(QString("TaxNumber"), ::OpenAPI::toJsonValue(m_tax_number));
    }
    return obj;
}

QString OAIIssuerDetails::getBillingAddress() const {
    return m_billing_address;
}
void OAIIssuerDetails::setBillingAddress(const QString &billing_address) {
    m_billing_address = billing_address;
    m_billing_address_isSet = true;
}

bool OAIIssuerDetails::is_billing_address_Set() const{
    return m_billing_address_isSet;
}

bool OAIIssuerDetails::is_billing_address_Valid() const{
    return m_billing_address_isValid;
}

QString OAIIssuerDetails::getBillingAddressCity() const {
    return m_billing_address_city;
}
void OAIIssuerDetails::setBillingAddressCity(const QString &billing_address_city) {
    m_billing_address_city = billing_address_city;
    m_billing_address_city_isSet = true;
}

bool OAIIssuerDetails::is_billing_address_city_Set() const{
    return m_billing_address_city_isSet;
}

bool OAIIssuerDetails::is_billing_address_city_Valid() const{
    return m_billing_address_city_isValid;
}

QString OAIIssuerDetails::getBillingAddressLine() const {
    return m_billing_address_line;
}
void OAIIssuerDetails::setBillingAddressLine(const QString &billing_address_line) {
    m_billing_address_line = billing_address_line;
    m_billing_address_line_isSet = true;
}

bool OAIIssuerDetails::is_billing_address_line_Set() const{
    return m_billing_address_line_isSet;
}

bool OAIIssuerDetails::is_billing_address_line_Valid() const{
    return m_billing_address_line_isValid;
}

QString OAIIssuerDetails::getBillingAddressPostCode() const {
    return m_billing_address_post_code;
}
void OAIIssuerDetails::setBillingAddressPostCode(const QString &billing_address_post_code) {
    m_billing_address_post_code = billing_address_post_code;
    m_billing_address_post_code_isSet = true;
}

bool OAIIssuerDetails::is_billing_address_post_code_Set() const{
    return m_billing_address_post_code_isSet;
}

bool OAIIssuerDetails::is_billing_address_post_code_Valid() const{
    return m_billing_address_post_code_isValid;
}

QString OAIIssuerDetails::getBillingAddressState() const {
    return m_billing_address_state;
}
void OAIIssuerDetails::setBillingAddressState(const QString &billing_address_state) {
    m_billing_address_state = billing_address_state;
    m_billing_address_state_isSet = true;
}

bool OAIIssuerDetails::is_billing_address_state_Set() const{
    return m_billing_address_state_isSet;
}

bool OAIIssuerDetails::is_billing_address_state_Valid() const{
    return m_billing_address_state_isValid;
}

QString OAIIssuerDetails::getBillingCountryCode() const {
    return m_billing_country_code;
}
void OAIIssuerDetails::setBillingCountryCode(const QString &billing_country_code) {
    m_billing_country_code = billing_country_code;
    m_billing_country_code_isSet = true;
}

bool OAIIssuerDetails::is_billing_country_code_Set() const{
    return m_billing_country_code_isSet;
}

bool OAIIssuerDetails::is_billing_country_code_Valid() const{
    return m_billing_country_code_isValid;
}

QString OAIIssuerDetails::getTaxNumber() const {
    return m_tax_number;
}
void OAIIssuerDetails::setTaxNumber(const QString &tax_number) {
    m_tax_number = tax_number;
    m_tax_number_isSet = true;
}

bool OAIIssuerDetails::is_tax_number_Set() const{
    return m_tax_number_isSet;
}

bool OAIIssuerDetails::is_tax_number_Valid() const{
    return m_tax_number_isValid;
}

bool OAIIssuerDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address_post_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssuerDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
