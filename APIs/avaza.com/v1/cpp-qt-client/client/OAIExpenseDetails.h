/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIExpenseDetails.h
 *
 * 
 */

#ifndef OAIExpenseDetails_H
#define OAIExpenseDetails_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIExpenseDetails : public OAIObject {
public:
    OAIExpenseDetails();
    OAIExpenseDetails(QString json);
    ~OAIExpenseDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAmount() const;
    void setAmount(const double &amount);
    bool is_amount_Set() const;
    bool is_amount_Valid() const;

    QString getAttachmentPreviewUrl() const;
    void setAttachmentPreviewUrl(const QString &attachment_preview_url);
    bool is_attachment_preview_url_Set() const;
    bool is_attachment_preview_url_Valid() const;

    QString getAttachmentUrl() const;
    void setAttachmentUrl(const QString &attachment_url);
    bool is_attachment_url_Set() const;
    bool is_attachment_url_Valid() const;

    QString getChargeableStatusCode() const;
    void setChargeableStatusCode(const QString &chargeable_status_code);
    bool is_chargeable_status_code_Set() const;
    bool is_chargeable_status_code_Valid() const;

    QString getCurrencyCode() const;
    void setCurrencyCode(const QString &currency_code);
    bool is_currency_code_Set() const;
    bool is_currency_code_Valid() const;

    qint32 getCustomerIdfk() const;
    void setCustomerIdfk(const qint32 &customer_idfk);
    bool is_customer_idfk_Set() const;
    bool is_customer_idfk_Valid() const;

    QString getCustomerName() const;
    void setCustomerName(const QString &customer_name);
    bool is_customer_name_Set() const;
    bool is_customer_name_Valid() const;

    QDateTime getDateCreated() const;
    void setDateCreated(const QDateTime &date_created);
    bool is_date_created_Set() const;
    bool is_date_created_Valid() const;

    QDateTime getDateUpdated() const;
    void setDateUpdated(const QDateTime &date_updated);
    bool is_date_updated_Set() const;
    bool is_date_updated_Valid() const;

    QString getEmail() const;
    void setEmail(const QString &email);
    bool is_email_Set() const;
    bool is_email_Valid() const;

    double getExchangeRate() const;
    void setExchangeRate(const double &exchange_rate);
    bool is_exchange_rate_Set() const;
    bool is_exchange_rate_Valid() const;

    QString getExpenseApprovalStatusCode() const;
    void setExpenseApprovalStatusCode(const QString &expense_approval_status_code);
    bool is_expense_approval_status_code_Set() const;
    bool is_expense_approval_status_code_Valid() const;

    bool isExpenseCategoryHasUnitPrice() const;
    void setExpenseCategoryHasUnitPrice(const bool &expense_category_has_unit_price);
    bool is_expense_category_has_unit_price_Set() const;
    bool is_expense_category_has_unit_price_Valid() const;

    qint32 getExpenseCategoryIdfk() const;
    void setExpenseCategoryIdfk(const qint32 &expense_category_idfk);
    bool is_expense_category_idfk_Set() const;
    bool is_expense_category_idfk_Valid() const;

    QString getExpenseCategoryName() const;
    void setExpenseCategoryName(const QString &expense_category_name);
    bool is_expense_category_name_Set() const;
    bool is_expense_category_name_Valid() const;

    QString getExpenseCategoryUnitName() const;
    void setExpenseCategoryUnitName(const QString &expense_category_unit_name);
    bool is_expense_category_unit_name_Set() const;
    bool is_expense_category_unit_name_Valid() const;

    double getExpenseCategoryUnitPrice() const;
    void setExpenseCategoryUnitPrice(const double &expense_category_unit_price);
    bool is_expense_category_unit_price_Set() const;
    bool is_expense_category_unit_price_Valid() const;

    QDateTime getExpenseDate() const;
    void setExpenseDate(const QDateTime &expense_date);
    bool is_expense_date_Set() const;
    bool is_expense_date_Valid() const;

    qint64 getExpenseId() const;
    void setExpenseId(const qint64 &expense_id);
    bool is_expense_id_Set() const;
    bool is_expense_id_Valid() const;

    qint32 getExpensePaymentMethodIdfk() const;
    void setExpensePaymentMethodIdfk(const qint32 &expense_payment_method_idfk);
    bool is_expense_payment_method_idfk_Set() const;
    bool is_expense_payment_method_idfk_Valid() const;

    QString getExpensePaymentMethodName() const;
    void setExpensePaymentMethodName(const QString &expense_payment_method_name);
    bool is_expense_payment_method_name_Set() const;
    bool is_expense_payment_method_name_Valid() const;

    qint64 getExpenseReimbursementIdfk() const;
    void setExpenseReimbursementIdfk(const qint64 &expense_reimbursement_idfk);
    bool is_expense_reimbursement_idfk_Set() const;
    bool is_expense_reimbursement_idfk_Valid() const;

    QString getExpenseReimbursementStatusCode() const;
    void setExpenseReimbursementStatusCode(const QString &expense_reimbursement_status_code);
    bool is_expense_reimbursement_status_code_Set() const;
    bool is_expense_reimbursement_status_code_Valid() const;

    qint64 getExpenseReportIdfk() const;
    void setExpenseReportIdfk(const qint64 &expense_report_idfk);
    bool is_expense_report_idfk_Set() const;
    bool is_expense_report_idfk_Valid() const;

    QString getExpenseReportName() const;
    void setExpenseReportName(const QString &expense_report_name);
    bool is_expense_report_name_Set() const;
    bool is_expense_report_name_Valid() const;

    qint64 getFileAttachmentIdfk() const;
    void setFileAttachmentIdfk(const qint64 &file_attachment_idfk);
    bool is_file_attachment_idfk_Set() const;
    bool is_file_attachment_idfk_Valid() const;

    QString getFirstname() const;
    void setFirstname(const QString &firstname);
    bool is_firstname_Set() const;
    bool is_firstname_Valid() const;

    QString getLastname() const;
    void setLastname(const QString &lastname);
    bool is_lastname_Set() const;
    bool is_lastname_Valid() const;

    QString getMerchant() const;
    void setMerchant(const QString &merchant);
    bool is_merchant_Set() const;
    bool is_merchant_Valid() const;

    QString getMerchantTaxNumber() const;
    void setMerchantTaxNumber(const QString &merchant_tax_number);
    bool is_merchant_tax_number_Set() const;
    bool is_merchant_tax_number_Valid() const;

    QString getNotes() const;
    void setNotes(const QString &notes);
    bool is_notes_Set() const;
    bool is_notes_Valid() const;

    QString getProjectCode() const;
    void setProjectCode(const QString &project_code);
    bool is_project_code_Set() const;
    bool is_project_code_Valid() const;

    qint32 getProjectIdfk() const;
    void setProjectIdfk(const qint32 &project_idfk);
    bool is_project_idfk_Set() const;
    bool is_project_idfk_Valid() const;

    QString getProjectTitle() const;
    void setProjectTitle(const QString &project_title);
    bool is_project_title_Set() const;
    bool is_project_title_Valid() const;

    double getQuantity() const;
    void setQuantity(const double &quantity);
    bool is_quantity_Set() const;
    bool is_quantity_Valid() const;

    qint32 getTaskIdfk() const;
    void setTaskIdfk(const qint32 &task_idfk);
    bool is_task_idfk_Set() const;
    bool is_task_idfk_Valid() const;

    QString getTaskTitle() const;
    void setTaskTitle(const QString &task_title);
    bool is_task_title_Set() const;
    bool is_task_title_Valid() const;

    double getTaxAmount() const;
    void setTaxAmount(const double &tax_amount);
    bool is_tax_amount_Set() const;
    bool is_tax_amount_Valid() const;

    qint32 getTaxIdfk() const;
    void setTaxIdfk(const qint32 &tax_idfk);
    bool is_tax_idfk_Set() const;
    bool is_tax_idfk_Valid() const;

    QString getTaxName() const;
    void setTaxName(const QString &tax_name);
    bool is_tax_name_Set() const;
    bool is_tax_name_Valid() const;

    QString getTransactionTaxConfigCode() const;
    void setTransactionTaxConfigCode(const QString &transaction_tax_config_code);
    bool is_transaction_tax_config_code_Set() const;
    bool is_transaction_tax_config_code_Valid() const;

    QString getTransactionTaxConfigName() const;
    void setTransactionTaxConfigName(const QString &transaction_tax_config_name);
    bool is_transaction_tax_config_name_Set() const;
    bool is_transaction_tax_config_name_Valid() const;

    qint32 getUserIdfk() const;
    void setUserIdfk(const qint32 &user_idfk);
    bool is_user_idfk_Set() const;
    bool is_user_idfk_Valid() const;

    bool isIsChargeable() const;
    void setIsChargeable(const bool &is_chargeable);
    bool is_is_chargeable_Set() const;
    bool is_is_chargeable_Valid() const;

    bool isIsOfficialExchangeRate() const;
    void setIsOfficialExchangeRate(const bool &is_official_exchange_rate);
    bool is_is_official_exchange_rate_Set() const;
    bool is_is_official_exchange_rate_Valid() const;

    bool isIsReimbursable() const;
    void setIsReimbursable(const bool &is_reimbursable);
    bool is_is_reimbursable_Set() const;
    bool is_is_reimbursable_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_amount;
    bool m_amount_isSet;
    bool m_amount_isValid;

    QString m_attachment_preview_url;
    bool m_attachment_preview_url_isSet;
    bool m_attachment_preview_url_isValid;

    QString m_attachment_url;
    bool m_attachment_url_isSet;
    bool m_attachment_url_isValid;

    QString m_chargeable_status_code;
    bool m_chargeable_status_code_isSet;
    bool m_chargeable_status_code_isValid;

    QString m_currency_code;
    bool m_currency_code_isSet;
    bool m_currency_code_isValid;

    qint32 m_customer_idfk;
    bool m_customer_idfk_isSet;
    bool m_customer_idfk_isValid;

    QString m_customer_name;
    bool m_customer_name_isSet;
    bool m_customer_name_isValid;

    QDateTime m_date_created;
    bool m_date_created_isSet;
    bool m_date_created_isValid;

    QDateTime m_date_updated;
    bool m_date_updated_isSet;
    bool m_date_updated_isValid;

    QString m_email;
    bool m_email_isSet;
    bool m_email_isValid;

    double m_exchange_rate;
    bool m_exchange_rate_isSet;
    bool m_exchange_rate_isValid;

    QString m_expense_approval_status_code;
    bool m_expense_approval_status_code_isSet;
    bool m_expense_approval_status_code_isValid;

    bool m_expense_category_has_unit_price;
    bool m_expense_category_has_unit_price_isSet;
    bool m_expense_category_has_unit_price_isValid;

    qint32 m_expense_category_idfk;
    bool m_expense_category_idfk_isSet;
    bool m_expense_category_idfk_isValid;

    QString m_expense_category_name;
    bool m_expense_category_name_isSet;
    bool m_expense_category_name_isValid;

    QString m_expense_category_unit_name;
    bool m_expense_category_unit_name_isSet;
    bool m_expense_category_unit_name_isValid;

    double m_expense_category_unit_price;
    bool m_expense_category_unit_price_isSet;
    bool m_expense_category_unit_price_isValid;

    QDateTime m_expense_date;
    bool m_expense_date_isSet;
    bool m_expense_date_isValid;

    qint64 m_expense_id;
    bool m_expense_id_isSet;
    bool m_expense_id_isValid;

    qint32 m_expense_payment_method_idfk;
    bool m_expense_payment_method_idfk_isSet;
    bool m_expense_payment_method_idfk_isValid;

    QString m_expense_payment_method_name;
    bool m_expense_payment_method_name_isSet;
    bool m_expense_payment_method_name_isValid;

    qint64 m_expense_reimbursement_idfk;
    bool m_expense_reimbursement_idfk_isSet;
    bool m_expense_reimbursement_idfk_isValid;

    QString m_expense_reimbursement_status_code;
    bool m_expense_reimbursement_status_code_isSet;
    bool m_expense_reimbursement_status_code_isValid;

    qint64 m_expense_report_idfk;
    bool m_expense_report_idfk_isSet;
    bool m_expense_report_idfk_isValid;

    QString m_expense_report_name;
    bool m_expense_report_name_isSet;
    bool m_expense_report_name_isValid;

    qint64 m_file_attachment_idfk;
    bool m_file_attachment_idfk_isSet;
    bool m_file_attachment_idfk_isValid;

    QString m_firstname;
    bool m_firstname_isSet;
    bool m_firstname_isValid;

    QString m_lastname;
    bool m_lastname_isSet;
    bool m_lastname_isValid;

    QString m_merchant;
    bool m_merchant_isSet;
    bool m_merchant_isValid;

    QString m_merchant_tax_number;
    bool m_merchant_tax_number_isSet;
    bool m_merchant_tax_number_isValid;

    QString m_notes;
    bool m_notes_isSet;
    bool m_notes_isValid;

    QString m_project_code;
    bool m_project_code_isSet;
    bool m_project_code_isValid;

    qint32 m_project_idfk;
    bool m_project_idfk_isSet;
    bool m_project_idfk_isValid;

    QString m_project_title;
    bool m_project_title_isSet;
    bool m_project_title_isValid;

    double m_quantity;
    bool m_quantity_isSet;
    bool m_quantity_isValid;

    qint32 m_task_idfk;
    bool m_task_idfk_isSet;
    bool m_task_idfk_isValid;

    QString m_task_title;
    bool m_task_title_isSet;
    bool m_task_title_isValid;

    double m_tax_amount;
    bool m_tax_amount_isSet;
    bool m_tax_amount_isValid;

    qint32 m_tax_idfk;
    bool m_tax_idfk_isSet;
    bool m_tax_idfk_isValid;

    QString m_tax_name;
    bool m_tax_name_isSet;
    bool m_tax_name_isValid;

    QString m_transaction_tax_config_code;
    bool m_transaction_tax_config_code_isSet;
    bool m_transaction_tax_config_code_isValid;

    QString m_transaction_tax_config_name;
    bool m_transaction_tax_config_name_isSet;
    bool m_transaction_tax_config_name_isValid;

    qint32 m_user_idfk;
    bool m_user_idfk_isSet;
    bool m_user_idfk_isValid;

    bool m_is_chargeable;
    bool m_is_chargeable_isSet;
    bool m_is_chargeable_isValid;

    bool m_is_official_exchange_rate;
    bool m_is_official_exchange_rate_isSet;
    bool m_is_official_exchange_rate_isValid;

    bool m_is_reimbursable;
    bool m_is_reimbursable_isSet;
    bool m_is_reimbursable_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIExpenseDetails)

#endif // OAIExpenseDetails_H
