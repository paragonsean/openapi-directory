/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateBooking.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateBooking::OAICreateBooking(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateBooking::OAICreateBooking() {
    this->initializeModel();
}

OAICreateBooking::~OAICreateBooking() {}

void OAICreateBooking::initializeModel() {

    m_category_idfk_isSet = false;
    m_category_idfk_isValid = false;

    m_duration_type_isSet = false;
    m_duration_type_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_hours_per_day_isSet = false;
    m_hours_per_day_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_project_idfk_isSet = false;
    m_project_idfk_isValid = false;

    m_schedule_on_days_off_isSet = false;
    m_schedule_on_days_off_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_task_idfk_isSet = false;
    m_task_idfk_isValid = false;

    m_total_duration_isSet = false;
    m_total_duration_isValid = false;

    m_user_idfk_isSet = false;
    m_user_idfk_isValid = false;
}

void OAICreateBooking::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateBooking::fromJsonObject(QJsonObject json) {

    m_category_idfk_isValid = ::OpenAPI::fromJsonValue(m_category_idfk, json[QString("CategoryIDFK")]);
    m_category_idfk_isSet = !json[QString("CategoryIDFK")].isNull() && m_category_idfk_isValid;

    m_duration_type_isValid = ::OpenAPI::fromJsonValue(m_duration_type, json[QString("DurationType")]);
    m_duration_type_isSet = !json[QString("DurationType")].isNull() && m_duration_type_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("EndDate")]);
    m_end_date_isSet = !json[QString("EndDate")].isNull() && m_end_date_isValid;

    m_hours_per_day_isValid = ::OpenAPI::fromJsonValue(m_hours_per_day, json[QString("HoursPerDay")]);
    m_hours_per_day_isSet = !json[QString("HoursPerDay")].isNull() && m_hours_per_day_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("Notes")]);
    m_notes_isSet = !json[QString("Notes")].isNull() && m_notes_isValid;

    m_project_idfk_isValid = ::OpenAPI::fromJsonValue(m_project_idfk, json[QString("ProjectIDFK")]);
    m_project_idfk_isSet = !json[QString("ProjectIDFK")].isNull() && m_project_idfk_isValid;

    m_schedule_on_days_off_isValid = ::OpenAPI::fromJsonValue(m_schedule_on_days_off, json[QString("ScheduleOnDaysOff")]);
    m_schedule_on_days_off_isSet = !json[QString("ScheduleOnDaysOff")].isNull() && m_schedule_on_days_off_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("StartDate")]);
    m_start_date_isSet = !json[QString("StartDate")].isNull() && m_start_date_isValid;

    m_task_idfk_isValid = ::OpenAPI::fromJsonValue(m_task_idfk, json[QString("TaskIDFK")]);
    m_task_idfk_isSet = !json[QString("TaskIDFK")].isNull() && m_task_idfk_isValid;

    m_total_duration_isValid = ::OpenAPI::fromJsonValue(m_total_duration, json[QString("TotalDuration")]);
    m_total_duration_isSet = !json[QString("TotalDuration")].isNull() && m_total_duration_isValid;

    m_user_idfk_isValid = ::OpenAPI::fromJsonValue(m_user_idfk, json[QString("UserIDFK")]);
    m_user_idfk_isSet = !json[QString("UserIDFK")].isNull() && m_user_idfk_isValid;
}

QString OAICreateBooking::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateBooking::asJsonObject() const {
    QJsonObject obj;
    if (m_category_idfk_isSet) {
        obj.insert(QString("CategoryIDFK"), ::OpenAPI::toJsonValue(m_category_idfk));
    }
    if (m_duration_type_isSet) {
        obj.insert(QString("DurationType"), ::OpenAPI::toJsonValue(m_duration_type));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("EndDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_hours_per_day_isSet) {
        obj.insert(QString("HoursPerDay"), ::OpenAPI::toJsonValue(m_hours_per_day));
    }
    if (m_notes_isSet) {
        obj.insert(QString("Notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_project_idfk_isSet) {
        obj.insert(QString("ProjectIDFK"), ::OpenAPI::toJsonValue(m_project_idfk));
    }
    if (m_schedule_on_days_off_isSet) {
        obj.insert(QString("ScheduleOnDaysOff"), ::OpenAPI::toJsonValue(m_schedule_on_days_off));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("StartDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_task_idfk_isSet) {
        obj.insert(QString("TaskIDFK"), ::OpenAPI::toJsonValue(m_task_idfk));
    }
    if (m_total_duration_isSet) {
        obj.insert(QString("TotalDuration"), ::OpenAPI::toJsonValue(m_total_duration));
    }
    if (m_user_idfk_isSet) {
        obj.insert(QString("UserIDFK"), ::OpenAPI::toJsonValue(m_user_idfk));
    }
    return obj;
}

qint32 OAICreateBooking::getCategoryIdfk() const {
    return m_category_idfk;
}
void OAICreateBooking::setCategoryIdfk(const qint32 &category_idfk) {
    m_category_idfk = category_idfk;
    m_category_idfk_isSet = true;
}

bool OAICreateBooking::is_category_idfk_Set() const{
    return m_category_idfk_isSet;
}

bool OAICreateBooking::is_category_idfk_Valid() const{
    return m_category_idfk_isValid;
}

QString OAICreateBooking::getDurationType() const {
    return m_duration_type;
}
void OAICreateBooking::setDurationType(const QString &duration_type) {
    m_duration_type = duration_type;
    m_duration_type_isSet = true;
}

bool OAICreateBooking::is_duration_type_Set() const{
    return m_duration_type_isSet;
}

bool OAICreateBooking::is_duration_type_Valid() const{
    return m_duration_type_isValid;
}

QDateTime OAICreateBooking::getEndDate() const {
    return m_end_date;
}
void OAICreateBooking::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAICreateBooking::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAICreateBooking::is_end_date_Valid() const{
    return m_end_date_isValid;
}

double OAICreateBooking::getHoursPerDay() const {
    return m_hours_per_day;
}
void OAICreateBooking::setHoursPerDay(const double &hours_per_day) {
    m_hours_per_day = hours_per_day;
    m_hours_per_day_isSet = true;
}

bool OAICreateBooking::is_hours_per_day_Set() const{
    return m_hours_per_day_isSet;
}

bool OAICreateBooking::is_hours_per_day_Valid() const{
    return m_hours_per_day_isValid;
}

QString OAICreateBooking::getNotes() const {
    return m_notes;
}
void OAICreateBooking::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAICreateBooking::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAICreateBooking::is_notes_Valid() const{
    return m_notes_isValid;
}

qint32 OAICreateBooking::getProjectIdfk() const {
    return m_project_idfk;
}
void OAICreateBooking::setProjectIdfk(const qint32 &project_idfk) {
    m_project_idfk = project_idfk;
    m_project_idfk_isSet = true;
}

bool OAICreateBooking::is_project_idfk_Set() const{
    return m_project_idfk_isSet;
}

bool OAICreateBooking::is_project_idfk_Valid() const{
    return m_project_idfk_isValid;
}

bool OAICreateBooking::isScheduleOnDaysOff() const {
    return m_schedule_on_days_off;
}
void OAICreateBooking::setScheduleOnDaysOff(const bool &schedule_on_days_off) {
    m_schedule_on_days_off = schedule_on_days_off;
    m_schedule_on_days_off_isSet = true;
}

bool OAICreateBooking::is_schedule_on_days_off_Set() const{
    return m_schedule_on_days_off_isSet;
}

bool OAICreateBooking::is_schedule_on_days_off_Valid() const{
    return m_schedule_on_days_off_isValid;
}

QDateTime OAICreateBooking::getStartDate() const {
    return m_start_date;
}
void OAICreateBooking::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAICreateBooking::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAICreateBooking::is_start_date_Valid() const{
    return m_start_date_isValid;
}

qint32 OAICreateBooking::getTaskIdfk() const {
    return m_task_idfk;
}
void OAICreateBooking::setTaskIdfk(const qint32 &task_idfk) {
    m_task_idfk = task_idfk;
    m_task_idfk_isSet = true;
}

bool OAICreateBooking::is_task_idfk_Set() const{
    return m_task_idfk_isSet;
}

bool OAICreateBooking::is_task_idfk_Valid() const{
    return m_task_idfk_isValid;
}

double OAICreateBooking::getTotalDuration() const {
    return m_total_duration;
}
void OAICreateBooking::setTotalDuration(const double &total_duration) {
    m_total_duration = total_duration;
    m_total_duration_isSet = true;
}

bool OAICreateBooking::is_total_duration_Set() const{
    return m_total_duration_isSet;
}

bool OAICreateBooking::is_total_duration_Valid() const{
    return m_total_duration_isValid;
}

qint32 OAICreateBooking::getUserIdfk() const {
    return m_user_idfk;
}
void OAICreateBooking::setUserIdfk(const qint32 &user_idfk) {
    m_user_idfk = user_idfk;
    m_user_idfk_isSet = true;
}

bool OAICreateBooking::is_user_idfk_Set() const{
    return m_user_idfk_isSet;
}

bool OAICreateBooking::is_user_idfk_Valid() const{
    return m_user_idfk_isValid;
}

bool OAICreateBooking::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hours_per_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_on_days_off_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateBooking::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
