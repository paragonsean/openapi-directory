/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpenseMerchantMinimal.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpenseMerchantMinimal::OAIExpenseMerchantMinimal(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpenseMerchantMinimal::OAIExpenseMerchantMinimal() {
    this->initializeModel();
}

OAIExpenseMerchantMinimal::~OAIExpenseMerchantMinimal() {}

void OAIExpenseMerchantMinimal::initializeModel() {

    m_merchant_name_isSet = false;
    m_merchant_name_isValid = false;
}

void OAIExpenseMerchantMinimal::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpenseMerchantMinimal::fromJsonObject(QJsonObject json) {

    m_merchant_name_isValid = ::OpenAPI::fromJsonValue(m_merchant_name, json[QString("MerchantName")]);
    m_merchant_name_isSet = !json[QString("MerchantName")].isNull() && m_merchant_name_isValid;
}

QString OAIExpenseMerchantMinimal::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpenseMerchantMinimal::asJsonObject() const {
    QJsonObject obj;
    if (m_merchant_name_isSet) {
        obj.insert(QString("MerchantName"), ::OpenAPI::toJsonValue(m_merchant_name));
    }
    return obj;
}

QString OAIExpenseMerchantMinimal::getMerchantName() const {
    return m_merchant_name;
}
void OAIExpenseMerchantMinimal::setMerchantName(const QString &merchant_name) {
    m_merchant_name = merchant_name;
    m_merchant_name_isSet = true;
}

bool OAIExpenseMerchantMinimal::is_merchant_name_Set() const{
    return m_merchant_name_isSet;
}

bool OAIExpenseMerchantMinimal::is_merchant_name_Valid() const{
    return m_merchant_name_isValid;
}

bool OAIExpenseMerchantMinimal::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_merchant_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpenseMerchantMinimal::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
