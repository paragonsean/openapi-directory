/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectTimesheetCategoryDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectTimesheetCategoryDetails::OAIProjectTimesheetCategoryDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectTimesheetCategoryDetails::OAIProjectTimesheetCategoryDetails() {
    this->initializeModel();
}

OAIProjectTimesheetCategoryDetails::~OAIProjectTimesheetCategoryDetails() {}

void OAIProjectTimesheetCategoryDetails::initializeModel() {

    m_account_idfk_isSet = false;
    m_account_idfk_isValid = false;

    m_budget_hours_isSet = false;
    m_budget_hours_isValid = false;

    m_cost_amount_isSet = false;
    m_cost_amount_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_project_idfk_isSet = false;
    m_project_idfk_isValid = false;

    m_rate_amount_isSet = false;
    m_rate_amount_isValid = false;

    m_time_sheet_category_idfk_isSet = false;
    m_time_sheet_category_idfk_isValid = false;

    m_is_billable_isSet = false;
    m_is_billable_isValid = false;

    m_is_disabled_isSet = false;
    m_is_disabled_isValid = false;

    m_is_payable_isSet = false;
    m_is_payable_isValid = false;
}

void OAIProjectTimesheetCategoryDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectTimesheetCategoryDetails::fromJsonObject(QJsonObject json) {

    m_account_idfk_isValid = ::OpenAPI::fromJsonValue(m_account_idfk, json[QString("AccountIDFK")]);
    m_account_idfk_isSet = !json[QString("AccountIDFK")].isNull() && m_account_idfk_isValid;

    m_budget_hours_isValid = ::OpenAPI::fromJsonValue(m_budget_hours, json[QString("BudgetHours")]);
    m_budget_hours_isSet = !json[QString("BudgetHours")].isNull() && m_budget_hours_isValid;

    m_cost_amount_isValid = ::OpenAPI::fromJsonValue(m_cost_amount, json[QString("CostAmount")]);
    m_cost_amount_isSet = !json[QString("CostAmount")].isNull() && m_cost_amount_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_project_idfk_isValid = ::OpenAPI::fromJsonValue(m_project_idfk, json[QString("ProjectIDFK")]);
    m_project_idfk_isSet = !json[QString("ProjectIDFK")].isNull() && m_project_idfk_isValid;

    m_rate_amount_isValid = ::OpenAPI::fromJsonValue(m_rate_amount, json[QString("RateAmount")]);
    m_rate_amount_isSet = !json[QString("RateAmount")].isNull() && m_rate_amount_isValid;

    m_time_sheet_category_idfk_isValid = ::OpenAPI::fromJsonValue(m_time_sheet_category_idfk, json[QString("TimeSheetCategoryIDFK")]);
    m_time_sheet_category_idfk_isSet = !json[QString("TimeSheetCategoryIDFK")].isNull() && m_time_sheet_category_idfk_isValid;

    m_is_billable_isValid = ::OpenAPI::fromJsonValue(m_is_billable, json[QString("isBillable")]);
    m_is_billable_isSet = !json[QString("isBillable")].isNull() && m_is_billable_isValid;

    m_is_disabled_isValid = ::OpenAPI::fromJsonValue(m_is_disabled, json[QString("isDisabled")]);
    m_is_disabled_isSet = !json[QString("isDisabled")].isNull() && m_is_disabled_isValid;

    m_is_payable_isValid = ::OpenAPI::fromJsonValue(m_is_payable, json[QString("isPayable")]);
    m_is_payable_isSet = !json[QString("isPayable")].isNull() && m_is_payable_isValid;
}

QString OAIProjectTimesheetCategoryDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectTimesheetCategoryDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_account_idfk_isSet) {
        obj.insert(QString("AccountIDFK"), ::OpenAPI::toJsonValue(m_account_idfk));
    }
    if (m_budget_hours_isSet) {
        obj.insert(QString("BudgetHours"), ::OpenAPI::toJsonValue(m_budget_hours));
    }
    if (m_cost_amount_isSet) {
        obj.insert(QString("CostAmount"), ::OpenAPI::toJsonValue(m_cost_amount));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_project_idfk_isSet) {
        obj.insert(QString("ProjectIDFK"), ::OpenAPI::toJsonValue(m_project_idfk));
    }
    if (m_rate_amount_isSet) {
        obj.insert(QString("RateAmount"), ::OpenAPI::toJsonValue(m_rate_amount));
    }
    if (m_time_sheet_category_idfk_isSet) {
        obj.insert(QString("TimeSheetCategoryIDFK"), ::OpenAPI::toJsonValue(m_time_sheet_category_idfk));
    }
    if (m_is_billable_isSet) {
        obj.insert(QString("isBillable"), ::OpenAPI::toJsonValue(m_is_billable));
    }
    if (m_is_disabled_isSet) {
        obj.insert(QString("isDisabled"), ::OpenAPI::toJsonValue(m_is_disabled));
    }
    if (m_is_payable_isSet) {
        obj.insert(QString("isPayable"), ::OpenAPI::toJsonValue(m_is_payable));
    }
    return obj;
}

qint32 OAIProjectTimesheetCategoryDetails::getAccountIdfk() const {
    return m_account_idfk;
}
void OAIProjectTimesheetCategoryDetails::setAccountIdfk(const qint32 &account_idfk) {
    m_account_idfk = account_idfk;
    m_account_idfk_isSet = true;
}

bool OAIProjectTimesheetCategoryDetails::is_account_idfk_Set() const{
    return m_account_idfk_isSet;
}

bool OAIProjectTimesheetCategoryDetails::is_account_idfk_Valid() const{
    return m_account_idfk_isValid;
}

double OAIProjectTimesheetCategoryDetails::getBudgetHours() const {
    return m_budget_hours;
}
void OAIProjectTimesheetCategoryDetails::setBudgetHours(const double &budget_hours) {
    m_budget_hours = budget_hours;
    m_budget_hours_isSet = true;
}

bool OAIProjectTimesheetCategoryDetails::is_budget_hours_Set() const{
    return m_budget_hours_isSet;
}

bool OAIProjectTimesheetCategoryDetails::is_budget_hours_Valid() const{
    return m_budget_hours_isValid;
}

double OAIProjectTimesheetCategoryDetails::getCostAmount() const {
    return m_cost_amount;
}
void OAIProjectTimesheetCategoryDetails::setCostAmount(const double &cost_amount) {
    m_cost_amount = cost_amount;
    m_cost_amount_isSet = true;
}

bool OAIProjectTimesheetCategoryDetails::is_cost_amount_Set() const{
    return m_cost_amount_isSet;
}

bool OAIProjectTimesheetCategoryDetails::is_cost_amount_Valid() const{
    return m_cost_amount_isValid;
}

QString OAIProjectTimesheetCategoryDetails::getName() const {
    return m_name;
}
void OAIProjectTimesheetCategoryDetails::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProjectTimesheetCategoryDetails::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProjectTimesheetCategoryDetails::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIProjectTimesheetCategoryDetails::getProjectIdfk() const {
    return m_project_idfk;
}
void OAIProjectTimesheetCategoryDetails::setProjectIdfk(const qint32 &project_idfk) {
    m_project_idfk = project_idfk;
    m_project_idfk_isSet = true;
}

bool OAIProjectTimesheetCategoryDetails::is_project_idfk_Set() const{
    return m_project_idfk_isSet;
}

bool OAIProjectTimesheetCategoryDetails::is_project_idfk_Valid() const{
    return m_project_idfk_isValid;
}

double OAIProjectTimesheetCategoryDetails::getRateAmount() const {
    return m_rate_amount;
}
void OAIProjectTimesheetCategoryDetails::setRateAmount(const double &rate_amount) {
    m_rate_amount = rate_amount;
    m_rate_amount_isSet = true;
}

bool OAIProjectTimesheetCategoryDetails::is_rate_amount_Set() const{
    return m_rate_amount_isSet;
}

bool OAIProjectTimesheetCategoryDetails::is_rate_amount_Valid() const{
    return m_rate_amount_isValid;
}

qint32 OAIProjectTimesheetCategoryDetails::getTimeSheetCategoryIdfk() const {
    return m_time_sheet_category_idfk;
}
void OAIProjectTimesheetCategoryDetails::setTimeSheetCategoryIdfk(const qint32 &time_sheet_category_idfk) {
    m_time_sheet_category_idfk = time_sheet_category_idfk;
    m_time_sheet_category_idfk_isSet = true;
}

bool OAIProjectTimesheetCategoryDetails::is_time_sheet_category_idfk_Set() const{
    return m_time_sheet_category_idfk_isSet;
}

bool OAIProjectTimesheetCategoryDetails::is_time_sheet_category_idfk_Valid() const{
    return m_time_sheet_category_idfk_isValid;
}

bool OAIProjectTimesheetCategoryDetails::isIsBillable() const {
    return m_is_billable;
}
void OAIProjectTimesheetCategoryDetails::setIsBillable(const bool &is_billable) {
    m_is_billable = is_billable;
    m_is_billable_isSet = true;
}

bool OAIProjectTimesheetCategoryDetails::is_is_billable_Set() const{
    return m_is_billable_isSet;
}

bool OAIProjectTimesheetCategoryDetails::is_is_billable_Valid() const{
    return m_is_billable_isValid;
}

bool OAIProjectTimesheetCategoryDetails::isIsDisabled() const {
    return m_is_disabled;
}
void OAIProjectTimesheetCategoryDetails::setIsDisabled(const bool &is_disabled) {
    m_is_disabled = is_disabled;
    m_is_disabled_isSet = true;
}

bool OAIProjectTimesheetCategoryDetails::is_is_disabled_Set() const{
    return m_is_disabled_isSet;
}

bool OAIProjectTimesheetCategoryDetails::is_is_disabled_Valid() const{
    return m_is_disabled_isValid;
}

bool OAIProjectTimesheetCategoryDetails::isIsPayable() const {
    return m_is_payable;
}
void OAIProjectTimesheetCategoryDetails::setIsPayable(const bool &is_payable) {
    m_is_payable = is_payable;
    m_is_payable_isSet = true;
}

bool OAIProjectTimesheetCategoryDetails::is_is_payable_Set() const{
    return m_is_payable_isSet;
}

bool OAIProjectTimesheetCategoryDetails::is_is_payable_Valid() const{
    return m_is_payable_isValid;
}

bool OAIProjectTimesheetCategoryDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_budget_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_sheet_category_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_billable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_payable_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectTimesheetCategoryDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
