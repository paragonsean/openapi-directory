/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduleAssignmentDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduleAssignmentDetails::OAIScheduleAssignmentDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduleAssignmentDetails::OAIScheduleAssignmentDetails() {
    this->initializeModel();
}

OAIScheduleAssignmentDetails::~OAIScheduleAssignmentDetails() {}

void OAIScheduleAssignmentDetails::initializeModel() {

    m_account_idfk_isSet = false;
    m_account_idfk_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_schedule_assignment_id_isSet = false;
    m_schedule_assignment_id_isValid = false;

    m_schedule_date_isSet = false;
    m_schedule_date_isValid = false;

    m_schedule_series_idfk_isSet = false;
    m_schedule_series_idfk_isValid = false;

    m_user_idfk_isSet = false;
    m_user_idfk_isValid = false;
}

void OAIScheduleAssignmentDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduleAssignmentDetails::fromJsonObject(QJsonObject json) {

    m_account_idfk_isValid = ::OpenAPI::fromJsonValue(m_account_idfk, json[QString("AccountIDFK")]);
    m_account_idfk_isSet = !json[QString("AccountIDFK")].isNull() && m_account_idfk_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("DateCreated")]);
    m_date_created_isSet = !json[QString("DateCreated")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("DateUpdated")]);
    m_date_updated_isSet = !json[QString("DateUpdated")].isNull() && m_date_updated_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("Duration")]);
    m_duration_isSet = !json[QString("Duration")].isNull() && m_duration_isValid;

    m_schedule_assignment_id_isValid = ::OpenAPI::fromJsonValue(m_schedule_assignment_id, json[QString("ScheduleAssignmentID")]);
    m_schedule_assignment_id_isSet = !json[QString("ScheduleAssignmentID")].isNull() && m_schedule_assignment_id_isValid;

    m_schedule_date_isValid = ::OpenAPI::fromJsonValue(m_schedule_date, json[QString("ScheduleDate")]);
    m_schedule_date_isSet = !json[QString("ScheduleDate")].isNull() && m_schedule_date_isValid;

    m_schedule_series_idfk_isValid = ::OpenAPI::fromJsonValue(m_schedule_series_idfk, json[QString("ScheduleSeriesIDFK")]);
    m_schedule_series_idfk_isSet = !json[QString("ScheduleSeriesIDFK")].isNull() && m_schedule_series_idfk_isValid;

    m_user_idfk_isValid = ::OpenAPI::fromJsonValue(m_user_idfk, json[QString("UserIDFK")]);
    m_user_idfk_isSet = !json[QString("UserIDFK")].isNull() && m_user_idfk_isValid;
}

QString OAIScheduleAssignmentDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduleAssignmentDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_account_idfk_isSet) {
        obj.insert(QString("AccountIDFK"), ::OpenAPI::toJsonValue(m_account_idfk));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("DateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("DateUpdated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_duration_isSet) {
        obj.insert(QString("Duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_schedule_assignment_id_isSet) {
        obj.insert(QString("ScheduleAssignmentID"), ::OpenAPI::toJsonValue(m_schedule_assignment_id));
    }
    if (m_schedule_date_isSet) {
        obj.insert(QString("ScheduleDate"), ::OpenAPI::toJsonValue(m_schedule_date));
    }
    if (m_schedule_series_idfk_isSet) {
        obj.insert(QString("ScheduleSeriesIDFK"), ::OpenAPI::toJsonValue(m_schedule_series_idfk));
    }
    if (m_user_idfk_isSet) {
        obj.insert(QString("UserIDFK"), ::OpenAPI::toJsonValue(m_user_idfk));
    }
    return obj;
}

qint32 OAIScheduleAssignmentDetails::getAccountIdfk() const {
    return m_account_idfk;
}
void OAIScheduleAssignmentDetails::setAccountIdfk(const qint32 &account_idfk) {
    m_account_idfk = account_idfk;
    m_account_idfk_isSet = true;
}

bool OAIScheduleAssignmentDetails::is_account_idfk_Set() const{
    return m_account_idfk_isSet;
}

bool OAIScheduleAssignmentDetails::is_account_idfk_Valid() const{
    return m_account_idfk_isValid;
}

QDateTime OAIScheduleAssignmentDetails::getDateCreated() const {
    return m_date_created;
}
void OAIScheduleAssignmentDetails::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIScheduleAssignmentDetails::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIScheduleAssignmentDetails::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIScheduleAssignmentDetails::getDateUpdated() const {
    return m_date_updated;
}
void OAIScheduleAssignmentDetails::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIScheduleAssignmentDetails::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIScheduleAssignmentDetails::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

double OAIScheduleAssignmentDetails::getDuration() const {
    return m_duration;
}
void OAIScheduleAssignmentDetails::setDuration(const double &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIScheduleAssignmentDetails::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIScheduleAssignmentDetails::is_duration_Valid() const{
    return m_duration_isValid;
}

qint64 OAIScheduleAssignmentDetails::getScheduleAssignmentId() const {
    return m_schedule_assignment_id;
}
void OAIScheduleAssignmentDetails::setScheduleAssignmentId(const qint64 &schedule_assignment_id) {
    m_schedule_assignment_id = schedule_assignment_id;
    m_schedule_assignment_id_isSet = true;
}

bool OAIScheduleAssignmentDetails::is_schedule_assignment_id_Set() const{
    return m_schedule_assignment_id_isSet;
}

bool OAIScheduleAssignmentDetails::is_schedule_assignment_id_Valid() const{
    return m_schedule_assignment_id_isValid;
}

QDateTime OAIScheduleAssignmentDetails::getScheduleDate() const {
    return m_schedule_date;
}
void OAIScheduleAssignmentDetails::setScheduleDate(const QDateTime &schedule_date) {
    m_schedule_date = schedule_date;
    m_schedule_date_isSet = true;
}

bool OAIScheduleAssignmentDetails::is_schedule_date_Set() const{
    return m_schedule_date_isSet;
}

bool OAIScheduleAssignmentDetails::is_schedule_date_Valid() const{
    return m_schedule_date_isValid;
}

qint64 OAIScheduleAssignmentDetails::getScheduleSeriesIdfk() const {
    return m_schedule_series_idfk;
}
void OAIScheduleAssignmentDetails::setScheduleSeriesIdfk(const qint64 &schedule_series_idfk) {
    m_schedule_series_idfk = schedule_series_idfk;
    m_schedule_series_idfk_isSet = true;
}

bool OAIScheduleAssignmentDetails::is_schedule_series_idfk_Set() const{
    return m_schedule_series_idfk_isSet;
}

bool OAIScheduleAssignmentDetails::is_schedule_series_idfk_Valid() const{
    return m_schedule_series_idfk_isValid;
}

qint32 OAIScheduleAssignmentDetails::getUserIdfk() const {
    return m_user_idfk;
}
void OAIScheduleAssignmentDetails::setUserIdfk(const qint32 &user_idfk) {
    m_user_idfk = user_idfk;
    m_user_idfk_isSet = true;
}

bool OAIScheduleAssignmentDetails::is_user_idfk_Set() const{
    return m_user_idfk_isSet;
}

bool OAIScheduleAssignmentDetails::is_user_idfk_Valid() const{
    return m_user_idfk_isValid;
}

bool OAIScheduleAssignmentDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_assignment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_series_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduleAssignmentDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
