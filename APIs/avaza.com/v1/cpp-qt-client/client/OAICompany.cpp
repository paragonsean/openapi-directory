/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompany.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompany::OAICompany(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompany::OAICompany() {
    this->initializeModel();
}

OAICompany::~OAICompany() {}

void OAICompany::initializeModel() {

    m_billing_address_isSet = false;
    m_billing_address_isValid = false;

    m_billing_address_city_isSet = false;
    m_billing_address_city_isValid = false;

    m_billing_address_line_isSet = false;
    m_billing_address_line_isValid = false;

    m_billing_address_post_code_isSet = false;
    m_billing_address_post_code_isValid = false;

    m_billing_address_state_isSet = false;
    m_billing_address_state_isValid = false;

    m_billing_country_code_isSet = false;
    m_billing_country_code_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_company_id_isSet = false;
    m_company_id_isValid = false;

    m_company_name_isSet = false;
    m_company_name_isValid = false;

    m_contacts_isSet = false;
    m_contacts_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_default_trading_term_idfk_isSet = false;
    m_default_trading_term_idfk_isValid = false;

    m_fax_isSet = false;
    m_fax_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_tax_number_isSet = false;
    m_tax_number_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAICompany::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompany::fromJsonObject(QJsonObject json) {

    m_billing_address_isValid = ::OpenAPI::fromJsonValue(m_billing_address, json[QString("BillingAddress")]);
    m_billing_address_isSet = !json[QString("BillingAddress")].isNull() && m_billing_address_isValid;

    m_billing_address_city_isValid = ::OpenAPI::fromJsonValue(m_billing_address_city, json[QString("BillingAddressCity")]);
    m_billing_address_city_isSet = !json[QString("BillingAddressCity")].isNull() && m_billing_address_city_isValid;

    m_billing_address_line_isValid = ::OpenAPI::fromJsonValue(m_billing_address_line, json[QString("BillingAddressLine")]);
    m_billing_address_line_isSet = !json[QString("BillingAddressLine")].isNull() && m_billing_address_line_isValid;

    m_billing_address_post_code_isValid = ::OpenAPI::fromJsonValue(m_billing_address_post_code, json[QString("BillingAddressPostCode")]);
    m_billing_address_post_code_isSet = !json[QString("BillingAddressPostCode")].isNull() && m_billing_address_post_code_isValid;

    m_billing_address_state_isValid = ::OpenAPI::fromJsonValue(m_billing_address_state, json[QString("BillingAddressState")]);
    m_billing_address_state_isSet = !json[QString("BillingAddressState")].isNull() && m_billing_address_state_isValid;

    m_billing_country_code_isValid = ::OpenAPI::fromJsonValue(m_billing_country_code, json[QString("BillingCountryCode")]);
    m_billing_country_code_isSet = !json[QString("BillingCountryCode")].isNull() && m_billing_country_code_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("Comments")]);
    m_comments_isSet = !json[QString("Comments")].isNull() && m_comments_isValid;

    m_company_id_isValid = ::OpenAPI::fromJsonValue(m_company_id, json[QString("CompanyID")]);
    m_company_id_isSet = !json[QString("CompanyID")].isNull() && m_company_id_isValid;

    m_company_name_isValid = ::OpenAPI::fromJsonValue(m_company_name, json[QString("CompanyName")]);
    m_company_name_isSet = !json[QString("CompanyName")].isNull() && m_company_name_isValid;

    m_contacts_isValid = ::OpenAPI::fromJsonValue(m_contacts, json[QString("Contacts")]);
    m_contacts_isSet = !json[QString("Contacts")].isNull() && m_contacts_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("CurrencyCode")]);
    m_currency_code_isSet = !json[QString("CurrencyCode")].isNull() && m_currency_code_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("DateCreated")]);
    m_date_created_isSet = !json[QString("DateCreated")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("DateUpdated")]);
    m_date_updated_isSet = !json[QString("DateUpdated")].isNull() && m_date_updated_isValid;

    m_default_trading_term_idfk_isValid = ::OpenAPI::fromJsonValue(m_default_trading_term_idfk, json[QString("DefaultTradingTermIDFK")]);
    m_default_trading_term_idfk_isSet = !json[QString("DefaultTradingTermIDFK")].isNull() && m_default_trading_term_idfk_isValid;

    m_fax_isValid = ::OpenAPI::fromJsonValue(m_fax, json[QString("Fax")]);
    m_fax_isSet = !json[QString("Fax")].isNull() && m_fax_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("Phone")]);
    m_phone_isSet = !json[QString("Phone")].isNull() && m_phone_isValid;

    m_tax_number_isValid = ::OpenAPI::fromJsonValue(m_tax_number, json[QString("TaxNumber")]);
    m_tax_number_isSet = !json[QString("TaxNumber")].isNull() && m_tax_number_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAICompany::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompany::asJsonObject() const {
    QJsonObject obj;
    if (m_billing_address_isSet) {
        obj.insert(QString("BillingAddress"), ::OpenAPI::toJsonValue(m_billing_address));
    }
    if (m_billing_address_city_isSet) {
        obj.insert(QString("BillingAddressCity"), ::OpenAPI::toJsonValue(m_billing_address_city));
    }
    if (m_billing_address_line_isSet) {
        obj.insert(QString("BillingAddressLine"), ::OpenAPI::toJsonValue(m_billing_address_line));
    }
    if (m_billing_address_post_code_isSet) {
        obj.insert(QString("BillingAddressPostCode"), ::OpenAPI::toJsonValue(m_billing_address_post_code));
    }
    if (m_billing_address_state_isSet) {
        obj.insert(QString("BillingAddressState"), ::OpenAPI::toJsonValue(m_billing_address_state));
    }
    if (m_billing_country_code_isSet) {
        obj.insert(QString("BillingCountryCode"), ::OpenAPI::toJsonValue(m_billing_country_code));
    }
    if (m_comments_isSet) {
        obj.insert(QString("Comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_company_id_isSet) {
        obj.insert(QString("CompanyID"), ::OpenAPI::toJsonValue(m_company_id));
    }
    if (m_company_name_isSet) {
        obj.insert(QString("CompanyName"), ::OpenAPI::toJsonValue(m_company_name));
    }
    if (m_contacts.size() > 0) {
        obj.insert(QString("Contacts"), ::OpenAPI::toJsonValue(m_contacts));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("CurrencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("DateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("DateUpdated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_default_trading_term_idfk_isSet) {
        obj.insert(QString("DefaultTradingTermIDFK"), ::OpenAPI::toJsonValue(m_default_trading_term_idfk));
    }
    if (m_fax_isSet) {
        obj.insert(QString("Fax"), ::OpenAPI::toJsonValue(m_fax));
    }
    if (m_phone_isSet) {
        obj.insert(QString("Phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_tax_number_isSet) {
        obj.insert(QString("TaxNumber"), ::OpenAPI::toJsonValue(m_tax_number));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

QString OAICompany::getBillingAddress() const {
    return m_billing_address;
}
void OAICompany::setBillingAddress(const QString &billing_address) {
    m_billing_address = billing_address;
    m_billing_address_isSet = true;
}

bool OAICompany::is_billing_address_Set() const{
    return m_billing_address_isSet;
}

bool OAICompany::is_billing_address_Valid() const{
    return m_billing_address_isValid;
}

QString OAICompany::getBillingAddressCity() const {
    return m_billing_address_city;
}
void OAICompany::setBillingAddressCity(const QString &billing_address_city) {
    m_billing_address_city = billing_address_city;
    m_billing_address_city_isSet = true;
}

bool OAICompany::is_billing_address_city_Set() const{
    return m_billing_address_city_isSet;
}

bool OAICompany::is_billing_address_city_Valid() const{
    return m_billing_address_city_isValid;
}

QString OAICompany::getBillingAddressLine() const {
    return m_billing_address_line;
}
void OAICompany::setBillingAddressLine(const QString &billing_address_line) {
    m_billing_address_line = billing_address_line;
    m_billing_address_line_isSet = true;
}

bool OAICompany::is_billing_address_line_Set() const{
    return m_billing_address_line_isSet;
}

bool OAICompany::is_billing_address_line_Valid() const{
    return m_billing_address_line_isValid;
}

QString OAICompany::getBillingAddressPostCode() const {
    return m_billing_address_post_code;
}
void OAICompany::setBillingAddressPostCode(const QString &billing_address_post_code) {
    m_billing_address_post_code = billing_address_post_code;
    m_billing_address_post_code_isSet = true;
}

bool OAICompany::is_billing_address_post_code_Set() const{
    return m_billing_address_post_code_isSet;
}

bool OAICompany::is_billing_address_post_code_Valid() const{
    return m_billing_address_post_code_isValid;
}

QString OAICompany::getBillingAddressState() const {
    return m_billing_address_state;
}
void OAICompany::setBillingAddressState(const QString &billing_address_state) {
    m_billing_address_state = billing_address_state;
    m_billing_address_state_isSet = true;
}

bool OAICompany::is_billing_address_state_Set() const{
    return m_billing_address_state_isSet;
}

bool OAICompany::is_billing_address_state_Valid() const{
    return m_billing_address_state_isValid;
}

QString OAICompany::getBillingCountryCode() const {
    return m_billing_country_code;
}
void OAICompany::setBillingCountryCode(const QString &billing_country_code) {
    m_billing_country_code = billing_country_code;
    m_billing_country_code_isSet = true;
}

bool OAICompany::is_billing_country_code_Set() const{
    return m_billing_country_code_isSet;
}

bool OAICompany::is_billing_country_code_Valid() const{
    return m_billing_country_code_isValid;
}

QString OAICompany::getComments() const {
    return m_comments;
}
void OAICompany::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAICompany::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAICompany::is_comments_Valid() const{
    return m_comments_isValid;
}

qint32 OAICompany::getCompanyId() const {
    return m_company_id;
}
void OAICompany::setCompanyId(const qint32 &company_id) {
    m_company_id = company_id;
    m_company_id_isSet = true;
}

bool OAICompany::is_company_id_Set() const{
    return m_company_id_isSet;
}

bool OAICompany::is_company_id_Valid() const{
    return m_company_id_isValid;
}

QString OAICompany::getCompanyName() const {
    return m_company_name;
}
void OAICompany::setCompanyName(const QString &company_name) {
    m_company_name = company_name;
    m_company_name_isSet = true;
}

bool OAICompany::is_company_name_Set() const{
    return m_company_name_isSet;
}

bool OAICompany::is_company_name_Valid() const{
    return m_company_name_isValid;
}

QList<OAICompanyContact> OAICompany::getContacts() const {
    return m_contacts;
}
void OAICompany::setContacts(const QList<OAICompanyContact> &contacts) {
    m_contacts = contacts;
    m_contacts_isSet = true;
}

bool OAICompany::is_contacts_Set() const{
    return m_contacts_isSet;
}

bool OAICompany::is_contacts_Valid() const{
    return m_contacts_isValid;
}

QString OAICompany::getCurrencyCode() const {
    return m_currency_code;
}
void OAICompany::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAICompany::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAICompany::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QDateTime OAICompany::getDateCreated() const {
    return m_date_created;
}
void OAICompany::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAICompany::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAICompany::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAICompany::getDateUpdated() const {
    return m_date_updated;
}
void OAICompany::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAICompany::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAICompany::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

qint32 OAICompany::getDefaultTradingTermIdfk() const {
    return m_default_trading_term_idfk;
}
void OAICompany::setDefaultTradingTermIdfk(const qint32 &default_trading_term_idfk) {
    m_default_trading_term_idfk = default_trading_term_idfk;
    m_default_trading_term_idfk_isSet = true;
}

bool OAICompany::is_default_trading_term_idfk_Set() const{
    return m_default_trading_term_idfk_isSet;
}

bool OAICompany::is_default_trading_term_idfk_Valid() const{
    return m_default_trading_term_idfk_isValid;
}

QString OAICompany::getFax() const {
    return m_fax;
}
void OAICompany::setFax(const QString &fax) {
    m_fax = fax;
    m_fax_isSet = true;
}

bool OAICompany::is_fax_Set() const{
    return m_fax_isSet;
}

bool OAICompany::is_fax_Valid() const{
    return m_fax_isValid;
}

QString OAICompany::getPhone() const {
    return m_phone;
}
void OAICompany::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAICompany::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAICompany::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAICompany::getTaxNumber() const {
    return m_tax_number;
}
void OAICompany::setTaxNumber(const QString &tax_number) {
    m_tax_number = tax_number;
    m_tax_number_isSet = true;
}

bool OAICompany::is_tax_number_Set() const{
    return m_tax_number_isSet;
}

bool OAICompany::is_tax_number_Valid() const{
    return m_tax_number_isValid;
}

QString OAICompany::getWebsite() const {
    return m_website;
}
void OAICompany::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAICompany::is_website_Set() const{
    return m_website_isSet;
}

bool OAICompany::is_website_Valid() const{
    return m_website_isValid;
}

bool OAICompany::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address_post_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_trading_term_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompany::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
