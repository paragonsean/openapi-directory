/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateExpense.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateExpense::OAIUpdateExpense(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateExpense::OAIUpdateExpense() {
    this->initializeModel();
}

OAIUpdateExpense::~OAIUpdateExpense() {}

void OAIUpdateExpense::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_customer_idfk_isSet = false;
    m_customer_idfk_isValid = false;

    m_exchange_rate_isSet = false;
    m_exchange_rate_isValid = false;

    m_expense_category_idfk_isSet = false;
    m_expense_category_idfk_isValid = false;

    m_expense_date_isSet = false;
    m_expense_date_isValid = false;

    m_expense_id_isSet = false;
    m_expense_id_isValid = false;

    m_expense_payment_method_idfk_isSet = false;
    m_expense_payment_method_idfk_isValid = false;

    m_fields_to_update_isSet = false;
    m_fields_to_update_isValid = false;

    m_file_attachment_ids_isSet = false;
    m_file_attachment_ids_isValid = false;

    m_group_trip_name_isSet = false;
    m_group_trip_name_isValid = false;

    m_merchant_isSet = false;
    m_merchant_isValid = false;

    m_merchant_tax_number_isSet = false;
    m_merchant_tax_number_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_project_idfk_isSet = false;
    m_project_idfk_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_task_idfk_isSet = false;
    m_task_idfk_isValid = false;

    m_tax_idfk_isSet = false;
    m_tax_idfk_isValid = false;

    m_transaction_tax_config_code_isSet = false;
    m_transaction_tax_config_code_isValid = false;

    m_verify_and_save_isSet = false;
    m_verify_and_save_isValid = false;

    m_is_chargeable_isSet = false;
    m_is_chargeable_isValid = false;

    m_is_reimbursable_isSet = false;
    m_is_reimbursable_isValid = false;
}

void OAIUpdateExpense::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateExpense::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("Amount")]);
    m_amount_isSet = !json[QString("Amount")].isNull() && m_amount_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("CurrencyCode")]);
    m_currency_code_isSet = !json[QString("CurrencyCode")].isNull() && m_currency_code_isValid;

    m_customer_idfk_isValid = ::OpenAPI::fromJsonValue(m_customer_idfk, json[QString("CustomerIDFK")]);
    m_customer_idfk_isSet = !json[QString("CustomerIDFK")].isNull() && m_customer_idfk_isValid;

    m_exchange_rate_isValid = ::OpenAPI::fromJsonValue(m_exchange_rate, json[QString("ExchangeRate")]);
    m_exchange_rate_isSet = !json[QString("ExchangeRate")].isNull() && m_exchange_rate_isValid;

    m_expense_category_idfk_isValid = ::OpenAPI::fromJsonValue(m_expense_category_idfk, json[QString("ExpenseCategoryIDFK")]);
    m_expense_category_idfk_isSet = !json[QString("ExpenseCategoryIDFK")].isNull() && m_expense_category_idfk_isValid;

    m_expense_date_isValid = ::OpenAPI::fromJsonValue(m_expense_date, json[QString("ExpenseDate")]);
    m_expense_date_isSet = !json[QString("ExpenseDate")].isNull() && m_expense_date_isValid;

    m_expense_id_isValid = ::OpenAPI::fromJsonValue(m_expense_id, json[QString("ExpenseID")]);
    m_expense_id_isSet = !json[QString("ExpenseID")].isNull() && m_expense_id_isValid;

    m_expense_payment_method_idfk_isValid = ::OpenAPI::fromJsonValue(m_expense_payment_method_idfk, json[QString("ExpensePaymentMethodIDFK")]);
    m_expense_payment_method_idfk_isSet = !json[QString("ExpensePaymentMethodIDFK")].isNull() && m_expense_payment_method_idfk_isValid;

    m_fields_to_update_isValid = ::OpenAPI::fromJsonValue(m_fields_to_update, json[QString("FieldsToUpdate")]);
    m_fields_to_update_isSet = !json[QString("FieldsToUpdate")].isNull() && m_fields_to_update_isValid;

    m_file_attachment_ids_isValid = ::OpenAPI::fromJsonValue(m_file_attachment_ids, json[QString("FileAttachmentIDs")]);
    m_file_attachment_ids_isSet = !json[QString("FileAttachmentIDs")].isNull() && m_file_attachment_ids_isValid;

    m_group_trip_name_isValid = ::OpenAPI::fromJsonValue(m_group_trip_name, json[QString("GroupTripName")]);
    m_group_trip_name_isSet = !json[QString("GroupTripName")].isNull() && m_group_trip_name_isValid;

    m_merchant_isValid = ::OpenAPI::fromJsonValue(m_merchant, json[QString("Merchant")]);
    m_merchant_isSet = !json[QString("Merchant")].isNull() && m_merchant_isValid;

    m_merchant_tax_number_isValid = ::OpenAPI::fromJsonValue(m_merchant_tax_number, json[QString("MerchantTaxNumber")]);
    m_merchant_tax_number_isSet = !json[QString("MerchantTaxNumber")].isNull() && m_merchant_tax_number_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("Notes")]);
    m_notes_isSet = !json[QString("Notes")].isNull() && m_notes_isValid;

    m_project_idfk_isValid = ::OpenAPI::fromJsonValue(m_project_idfk, json[QString("ProjectIDFK")]);
    m_project_idfk_isSet = !json[QString("ProjectIDFK")].isNull() && m_project_idfk_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("Quantity")]);
    m_quantity_isSet = !json[QString("Quantity")].isNull() && m_quantity_isValid;

    m_task_idfk_isValid = ::OpenAPI::fromJsonValue(m_task_idfk, json[QString("TaskIDFK")]);
    m_task_idfk_isSet = !json[QString("TaskIDFK")].isNull() && m_task_idfk_isValid;

    m_tax_idfk_isValid = ::OpenAPI::fromJsonValue(m_tax_idfk, json[QString("TaxIDFK")]);
    m_tax_idfk_isSet = !json[QString("TaxIDFK")].isNull() && m_tax_idfk_isValid;

    m_transaction_tax_config_code_isValid = ::OpenAPI::fromJsonValue(m_transaction_tax_config_code, json[QString("TransactionTaxConfigCode")]);
    m_transaction_tax_config_code_isSet = !json[QString("TransactionTaxConfigCode")].isNull() && m_transaction_tax_config_code_isValid;

    m_verify_and_save_isValid = ::OpenAPI::fromJsonValue(m_verify_and_save, json[QString("VerifyAndSave")]);
    m_verify_and_save_isSet = !json[QString("VerifyAndSave")].isNull() && m_verify_and_save_isValid;

    m_is_chargeable_isValid = ::OpenAPI::fromJsonValue(m_is_chargeable, json[QString("isChargeable")]);
    m_is_chargeable_isSet = !json[QString("isChargeable")].isNull() && m_is_chargeable_isValid;

    m_is_reimbursable_isValid = ::OpenAPI::fromJsonValue(m_is_reimbursable, json[QString("isReimbursable")]);
    m_is_reimbursable_isSet = !json[QString("isReimbursable")].isNull() && m_is_reimbursable_isValid;
}

QString OAIUpdateExpense::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateExpense::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("Amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("CurrencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_customer_idfk_isSet) {
        obj.insert(QString("CustomerIDFK"), ::OpenAPI::toJsonValue(m_customer_idfk));
    }
    if (m_exchange_rate_isSet) {
        obj.insert(QString("ExchangeRate"), ::OpenAPI::toJsonValue(m_exchange_rate));
    }
    if (m_expense_category_idfk_isSet) {
        obj.insert(QString("ExpenseCategoryIDFK"), ::OpenAPI::toJsonValue(m_expense_category_idfk));
    }
    if (m_expense_date_isSet) {
        obj.insert(QString("ExpenseDate"), ::OpenAPI::toJsonValue(m_expense_date));
    }
    if (m_expense_id_isSet) {
        obj.insert(QString("ExpenseID"), ::OpenAPI::toJsonValue(m_expense_id));
    }
    if (m_expense_payment_method_idfk_isSet) {
        obj.insert(QString("ExpensePaymentMethodIDFK"), ::OpenAPI::toJsonValue(m_expense_payment_method_idfk));
    }
    if (m_fields_to_update.size() > 0) {
        obj.insert(QString("FieldsToUpdate"), ::OpenAPI::toJsonValue(m_fields_to_update));
    }
    if (m_file_attachment_ids.size() > 0) {
        obj.insert(QString("FileAttachmentIDs"), ::OpenAPI::toJsonValue(m_file_attachment_ids));
    }
    if (m_group_trip_name_isSet) {
        obj.insert(QString("GroupTripName"), ::OpenAPI::toJsonValue(m_group_trip_name));
    }
    if (m_merchant_isSet) {
        obj.insert(QString("Merchant"), ::OpenAPI::toJsonValue(m_merchant));
    }
    if (m_merchant_tax_number_isSet) {
        obj.insert(QString("MerchantTaxNumber"), ::OpenAPI::toJsonValue(m_merchant_tax_number));
    }
    if (m_notes_isSet) {
        obj.insert(QString("Notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_project_idfk_isSet) {
        obj.insert(QString("ProjectIDFK"), ::OpenAPI::toJsonValue(m_project_idfk));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("Quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_task_idfk_isSet) {
        obj.insert(QString("TaskIDFK"), ::OpenAPI::toJsonValue(m_task_idfk));
    }
    if (m_tax_idfk_isSet) {
        obj.insert(QString("TaxIDFK"), ::OpenAPI::toJsonValue(m_tax_idfk));
    }
    if (m_transaction_tax_config_code_isSet) {
        obj.insert(QString("TransactionTaxConfigCode"), ::OpenAPI::toJsonValue(m_transaction_tax_config_code));
    }
    if (m_verify_and_save_isSet) {
        obj.insert(QString("VerifyAndSave"), ::OpenAPI::toJsonValue(m_verify_and_save));
    }
    if (m_is_chargeable_isSet) {
        obj.insert(QString("isChargeable"), ::OpenAPI::toJsonValue(m_is_chargeable));
    }
    if (m_is_reimbursable_isSet) {
        obj.insert(QString("isReimbursable"), ::OpenAPI::toJsonValue(m_is_reimbursable));
    }
    return obj;
}

double OAIUpdateExpense::getAmount() const {
    return m_amount;
}
void OAIUpdateExpense::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIUpdateExpense::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIUpdateExpense::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIUpdateExpense::getCurrencyCode() const {
    return m_currency_code;
}
void OAIUpdateExpense::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIUpdateExpense::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIUpdateExpense::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

qint32 OAIUpdateExpense::getCustomerIdfk() const {
    return m_customer_idfk;
}
void OAIUpdateExpense::setCustomerIdfk(const qint32 &customer_idfk) {
    m_customer_idfk = customer_idfk;
    m_customer_idfk_isSet = true;
}

bool OAIUpdateExpense::is_customer_idfk_Set() const{
    return m_customer_idfk_isSet;
}

bool OAIUpdateExpense::is_customer_idfk_Valid() const{
    return m_customer_idfk_isValid;
}

double OAIUpdateExpense::getExchangeRate() const {
    return m_exchange_rate;
}
void OAIUpdateExpense::setExchangeRate(const double &exchange_rate) {
    m_exchange_rate = exchange_rate;
    m_exchange_rate_isSet = true;
}

bool OAIUpdateExpense::is_exchange_rate_Set() const{
    return m_exchange_rate_isSet;
}

bool OAIUpdateExpense::is_exchange_rate_Valid() const{
    return m_exchange_rate_isValid;
}

qint32 OAIUpdateExpense::getExpenseCategoryIdfk() const {
    return m_expense_category_idfk;
}
void OAIUpdateExpense::setExpenseCategoryIdfk(const qint32 &expense_category_idfk) {
    m_expense_category_idfk = expense_category_idfk;
    m_expense_category_idfk_isSet = true;
}

bool OAIUpdateExpense::is_expense_category_idfk_Set() const{
    return m_expense_category_idfk_isSet;
}

bool OAIUpdateExpense::is_expense_category_idfk_Valid() const{
    return m_expense_category_idfk_isValid;
}

QDateTime OAIUpdateExpense::getExpenseDate() const {
    return m_expense_date;
}
void OAIUpdateExpense::setExpenseDate(const QDateTime &expense_date) {
    m_expense_date = expense_date;
    m_expense_date_isSet = true;
}

bool OAIUpdateExpense::is_expense_date_Set() const{
    return m_expense_date_isSet;
}

bool OAIUpdateExpense::is_expense_date_Valid() const{
    return m_expense_date_isValid;
}

qint64 OAIUpdateExpense::getExpenseId() const {
    return m_expense_id;
}
void OAIUpdateExpense::setExpenseId(const qint64 &expense_id) {
    m_expense_id = expense_id;
    m_expense_id_isSet = true;
}

bool OAIUpdateExpense::is_expense_id_Set() const{
    return m_expense_id_isSet;
}

bool OAIUpdateExpense::is_expense_id_Valid() const{
    return m_expense_id_isValid;
}

qint32 OAIUpdateExpense::getExpensePaymentMethodIdfk() const {
    return m_expense_payment_method_idfk;
}
void OAIUpdateExpense::setExpensePaymentMethodIdfk(const qint32 &expense_payment_method_idfk) {
    m_expense_payment_method_idfk = expense_payment_method_idfk;
    m_expense_payment_method_idfk_isSet = true;
}

bool OAIUpdateExpense::is_expense_payment_method_idfk_Set() const{
    return m_expense_payment_method_idfk_isSet;
}

bool OAIUpdateExpense::is_expense_payment_method_idfk_Valid() const{
    return m_expense_payment_method_idfk_isValid;
}

QList<QString> OAIUpdateExpense::getFieldsToUpdate() const {
    return m_fields_to_update;
}
void OAIUpdateExpense::setFieldsToUpdate(const QList<QString> &fields_to_update) {
    m_fields_to_update = fields_to_update;
    m_fields_to_update_isSet = true;
}

bool OAIUpdateExpense::is_fields_to_update_Set() const{
    return m_fields_to_update_isSet;
}

bool OAIUpdateExpense::is_fields_to_update_Valid() const{
    return m_fields_to_update_isValid;
}

QList<qint64> OAIUpdateExpense::getFileAttachmentIds() const {
    return m_file_attachment_ids;
}
void OAIUpdateExpense::setFileAttachmentIds(const QList<qint64> &file_attachment_ids) {
    m_file_attachment_ids = file_attachment_ids;
    m_file_attachment_ids_isSet = true;
}

bool OAIUpdateExpense::is_file_attachment_ids_Set() const{
    return m_file_attachment_ids_isSet;
}

bool OAIUpdateExpense::is_file_attachment_ids_Valid() const{
    return m_file_attachment_ids_isValid;
}

QString OAIUpdateExpense::getGroupTripName() const {
    return m_group_trip_name;
}
void OAIUpdateExpense::setGroupTripName(const QString &group_trip_name) {
    m_group_trip_name = group_trip_name;
    m_group_trip_name_isSet = true;
}

bool OAIUpdateExpense::is_group_trip_name_Set() const{
    return m_group_trip_name_isSet;
}

bool OAIUpdateExpense::is_group_trip_name_Valid() const{
    return m_group_trip_name_isValid;
}

QString OAIUpdateExpense::getMerchant() const {
    return m_merchant;
}
void OAIUpdateExpense::setMerchant(const QString &merchant) {
    m_merchant = merchant;
    m_merchant_isSet = true;
}

bool OAIUpdateExpense::is_merchant_Set() const{
    return m_merchant_isSet;
}

bool OAIUpdateExpense::is_merchant_Valid() const{
    return m_merchant_isValid;
}

QString OAIUpdateExpense::getMerchantTaxNumber() const {
    return m_merchant_tax_number;
}
void OAIUpdateExpense::setMerchantTaxNumber(const QString &merchant_tax_number) {
    m_merchant_tax_number = merchant_tax_number;
    m_merchant_tax_number_isSet = true;
}

bool OAIUpdateExpense::is_merchant_tax_number_Set() const{
    return m_merchant_tax_number_isSet;
}

bool OAIUpdateExpense::is_merchant_tax_number_Valid() const{
    return m_merchant_tax_number_isValid;
}

QString OAIUpdateExpense::getNotes() const {
    return m_notes;
}
void OAIUpdateExpense::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIUpdateExpense::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIUpdateExpense::is_notes_Valid() const{
    return m_notes_isValid;
}

qint32 OAIUpdateExpense::getProjectIdfk() const {
    return m_project_idfk;
}
void OAIUpdateExpense::setProjectIdfk(const qint32 &project_idfk) {
    m_project_idfk = project_idfk;
    m_project_idfk_isSet = true;
}

bool OAIUpdateExpense::is_project_idfk_Set() const{
    return m_project_idfk_isSet;
}

bool OAIUpdateExpense::is_project_idfk_Valid() const{
    return m_project_idfk_isValid;
}

double OAIUpdateExpense::getQuantity() const {
    return m_quantity;
}
void OAIUpdateExpense::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIUpdateExpense::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIUpdateExpense::is_quantity_Valid() const{
    return m_quantity_isValid;
}

qint32 OAIUpdateExpense::getTaskIdfk() const {
    return m_task_idfk;
}
void OAIUpdateExpense::setTaskIdfk(const qint32 &task_idfk) {
    m_task_idfk = task_idfk;
    m_task_idfk_isSet = true;
}

bool OAIUpdateExpense::is_task_idfk_Set() const{
    return m_task_idfk_isSet;
}

bool OAIUpdateExpense::is_task_idfk_Valid() const{
    return m_task_idfk_isValid;
}

qint32 OAIUpdateExpense::getTaxIdfk() const {
    return m_tax_idfk;
}
void OAIUpdateExpense::setTaxIdfk(const qint32 &tax_idfk) {
    m_tax_idfk = tax_idfk;
    m_tax_idfk_isSet = true;
}

bool OAIUpdateExpense::is_tax_idfk_Set() const{
    return m_tax_idfk_isSet;
}

bool OAIUpdateExpense::is_tax_idfk_Valid() const{
    return m_tax_idfk_isValid;
}

QString OAIUpdateExpense::getTransactionTaxConfigCode() const {
    return m_transaction_tax_config_code;
}
void OAIUpdateExpense::setTransactionTaxConfigCode(const QString &transaction_tax_config_code) {
    m_transaction_tax_config_code = transaction_tax_config_code;
    m_transaction_tax_config_code_isSet = true;
}

bool OAIUpdateExpense::is_transaction_tax_config_code_Set() const{
    return m_transaction_tax_config_code_isSet;
}

bool OAIUpdateExpense::is_transaction_tax_config_code_Valid() const{
    return m_transaction_tax_config_code_isValid;
}

bool OAIUpdateExpense::isVerifyAndSave() const {
    return m_verify_and_save;
}
void OAIUpdateExpense::setVerifyAndSave(const bool &verify_and_save) {
    m_verify_and_save = verify_and_save;
    m_verify_and_save_isSet = true;
}

bool OAIUpdateExpense::is_verify_and_save_Set() const{
    return m_verify_and_save_isSet;
}

bool OAIUpdateExpense::is_verify_and_save_Valid() const{
    return m_verify_and_save_isValid;
}

bool OAIUpdateExpense::isIsChargeable() const {
    return m_is_chargeable;
}
void OAIUpdateExpense::setIsChargeable(const bool &is_chargeable) {
    m_is_chargeable = is_chargeable;
    m_is_chargeable_isSet = true;
}

bool OAIUpdateExpense::is_is_chargeable_Set() const{
    return m_is_chargeable_isSet;
}

bool OAIUpdateExpense::is_is_chargeable_Valid() const{
    return m_is_chargeable_isValid;
}

bool OAIUpdateExpense::isIsReimbursable() const {
    return m_is_reimbursable;
}
void OAIUpdateExpense::setIsReimbursable(const bool &is_reimbursable) {
    m_is_reimbursable = is_reimbursable;
    m_is_reimbursable_isSet = true;
}

bool OAIUpdateExpense::is_is_reimbursable_Set() const{
    return m_is_reimbursable_isSet;
}

bool OAIUpdateExpense::is_is_reimbursable_Valid() const{
    return m_is_reimbursable_isValid;
}

bool OAIUpdateExpense::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_category_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_payment_method_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields_to_update.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_attachment_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_trip_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_tax_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_tax_config_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verify_and_save_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_chargeable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_reimbursable_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateExpense::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expense_id_isValid && m_fields_to_update_isValid && true;
}

} // namespace OpenAPI
