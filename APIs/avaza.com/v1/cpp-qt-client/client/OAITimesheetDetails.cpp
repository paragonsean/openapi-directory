/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimesheetDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimesheetDetails::OAITimesheetDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimesheetDetails::OAITimesheetDetails() {
    this->initializeModel();
}

OAITimesheetDetails::~OAITimesheetDetails() {}

void OAITimesheetDetails::initializeModel() {

    m_approved_by_isSet = false;
    m_approved_by_isValid = false;

    m_category_name_isSet = false;
    m_category_name_isValid = false;

    m_custom_metadata_isSet = false;
    m_custom_metadata_isValid = false;

    m_customer_idfk_isSet = false;
    m_customer_idfk_isValid = false;

    m_customer_name_isSet = false;
    m_customer_name_isValid = false;

    m_date_approved_isSet = false;
    m_date_approved_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_end_time_local_isSet = false;
    m_end_time_local_isValid = false;

    m_end_time_utc_isSet = false;
    m_end_time_utc_isValid = false;

    m_entry_date_isSet = false;
    m_entry_date_isValid = false;

    m_firstname_isSet = false;
    m_firstname_isValid = false;

    m_has_timer_isSet = false;
    m_has_timer_isValid = false;

    m_invoice_idfk_isSet = false;
    m_invoice_idfk_isValid = false;

    m_invoice_line_item_idfk_isSet = false;
    m_invoice_line_item_idfk_isValid = false;

    m_lastname_isSet = false;
    m_lastname_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_project_code_isSet = false;
    m_project_code_isValid = false;

    m_project_idfk_isSet = false;
    m_project_idfk_isValid = false;

    m_project_title_isSet = false;
    m_project_title_isValid = false;

    m_start_time_local_isSet = false;
    m_start_time_local_isValid = false;

    m_start_time_utc_isSet = false;
    m_start_time_utc_isValid = false;

    m_task_idfk_isSet = false;
    m_task_idfk_isValid = false;

    m_task_title_isSet = false;
    m_task_title_isValid = false;

    m_timer_started_at_utc_isSet = false;
    m_timer_started_at_utc_isValid = false;

    m_timesheet_category_idfk_isSet = false;
    m_timesheet_category_idfk_isValid = false;

    m_timesheet_entry_approval_status_code_isSet = false;
    m_timesheet_entry_approval_status_code_isValid = false;

    m_timesheet_entry_id_isSet = false;
    m_timesheet_entry_id_isValid = false;

    m_timesheet_user_time_zone_isSet = false;
    m_timesheet_user_time_zone_isValid = false;

    m_user_idfk_isSet = false;
    m_user_idfk_isValid = false;

    m_is_billable_isSet = false;
    m_is_billable_isValid = false;

    m_is_invoiced_isSet = false;
    m_is_invoiced_isValid = false;
}

void OAITimesheetDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimesheetDetails::fromJsonObject(QJsonObject json) {

    m_approved_by_isValid = ::OpenAPI::fromJsonValue(m_approved_by, json[QString("ApprovedBy")]);
    m_approved_by_isSet = !json[QString("ApprovedBy")].isNull() && m_approved_by_isValid;

    m_category_name_isValid = ::OpenAPI::fromJsonValue(m_category_name, json[QString("CategoryName")]);
    m_category_name_isSet = !json[QString("CategoryName")].isNull() && m_category_name_isValid;

    m_custom_metadata_isValid = ::OpenAPI::fromJsonValue(m_custom_metadata, json[QString("CustomMetadata")]);
    m_custom_metadata_isSet = !json[QString("CustomMetadata")].isNull() && m_custom_metadata_isValid;

    m_customer_idfk_isValid = ::OpenAPI::fromJsonValue(m_customer_idfk, json[QString("CustomerIDFK")]);
    m_customer_idfk_isSet = !json[QString("CustomerIDFK")].isNull() && m_customer_idfk_isValid;

    m_customer_name_isValid = ::OpenAPI::fromJsonValue(m_customer_name, json[QString("CustomerName")]);
    m_customer_name_isSet = !json[QString("CustomerName")].isNull() && m_customer_name_isValid;

    m_date_approved_isValid = ::OpenAPI::fromJsonValue(m_date_approved, json[QString("DateApproved")]);
    m_date_approved_isSet = !json[QString("DateApproved")].isNull() && m_date_approved_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("DateCreated")]);
    m_date_created_isSet = !json[QString("DateCreated")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("DateUpdated")]);
    m_date_updated_isSet = !json[QString("DateUpdated")].isNull() && m_date_updated_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("Duration")]);
    m_duration_isSet = !json[QString("Duration")].isNull() && m_duration_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("Email")]);
    m_email_isSet = !json[QString("Email")].isNull() && m_email_isValid;

    m_end_time_local_isValid = ::OpenAPI::fromJsonValue(m_end_time_local, json[QString("EndTimeLocal")]);
    m_end_time_local_isSet = !json[QString("EndTimeLocal")].isNull() && m_end_time_local_isValid;

    m_end_time_utc_isValid = ::OpenAPI::fromJsonValue(m_end_time_utc, json[QString("EndTimeUTC")]);
    m_end_time_utc_isSet = !json[QString("EndTimeUTC")].isNull() && m_end_time_utc_isValid;

    m_entry_date_isValid = ::OpenAPI::fromJsonValue(m_entry_date, json[QString("EntryDate")]);
    m_entry_date_isSet = !json[QString("EntryDate")].isNull() && m_entry_date_isValid;

    m_firstname_isValid = ::OpenAPI::fromJsonValue(m_firstname, json[QString("Firstname")]);
    m_firstname_isSet = !json[QString("Firstname")].isNull() && m_firstname_isValid;

    m_has_timer_isValid = ::OpenAPI::fromJsonValue(m_has_timer, json[QString("HasTimer")]);
    m_has_timer_isSet = !json[QString("HasTimer")].isNull() && m_has_timer_isValid;

    m_invoice_idfk_isValid = ::OpenAPI::fromJsonValue(m_invoice_idfk, json[QString("InvoiceIDFK")]);
    m_invoice_idfk_isSet = !json[QString("InvoiceIDFK")].isNull() && m_invoice_idfk_isValid;

    m_invoice_line_item_idfk_isValid = ::OpenAPI::fromJsonValue(m_invoice_line_item_idfk, json[QString("InvoiceLineItemIDFK")]);
    m_invoice_line_item_idfk_isSet = !json[QString("InvoiceLineItemIDFK")].isNull() && m_invoice_line_item_idfk_isValid;

    m_lastname_isValid = ::OpenAPI::fromJsonValue(m_lastname, json[QString("Lastname")]);
    m_lastname_isSet = !json[QString("Lastname")].isNull() && m_lastname_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("Notes")]);
    m_notes_isSet = !json[QString("Notes")].isNull() && m_notes_isValid;

    m_project_code_isValid = ::OpenAPI::fromJsonValue(m_project_code, json[QString("ProjectCode")]);
    m_project_code_isSet = !json[QString("ProjectCode")].isNull() && m_project_code_isValid;

    m_project_idfk_isValid = ::OpenAPI::fromJsonValue(m_project_idfk, json[QString("ProjectIDFK")]);
    m_project_idfk_isSet = !json[QString("ProjectIDFK")].isNull() && m_project_idfk_isValid;

    m_project_title_isValid = ::OpenAPI::fromJsonValue(m_project_title, json[QString("ProjectTitle")]);
    m_project_title_isSet = !json[QString("ProjectTitle")].isNull() && m_project_title_isValid;

    m_start_time_local_isValid = ::OpenAPI::fromJsonValue(m_start_time_local, json[QString("StartTimeLocal")]);
    m_start_time_local_isSet = !json[QString("StartTimeLocal")].isNull() && m_start_time_local_isValid;

    m_start_time_utc_isValid = ::OpenAPI::fromJsonValue(m_start_time_utc, json[QString("StartTimeUTC")]);
    m_start_time_utc_isSet = !json[QString("StartTimeUTC")].isNull() && m_start_time_utc_isValid;

    m_task_idfk_isValid = ::OpenAPI::fromJsonValue(m_task_idfk, json[QString("TaskIDFK")]);
    m_task_idfk_isSet = !json[QString("TaskIDFK")].isNull() && m_task_idfk_isValid;

    m_task_title_isValid = ::OpenAPI::fromJsonValue(m_task_title, json[QString("TaskTitle")]);
    m_task_title_isSet = !json[QString("TaskTitle")].isNull() && m_task_title_isValid;

    m_timer_started_at_utc_isValid = ::OpenAPI::fromJsonValue(m_timer_started_at_utc, json[QString("TimerStartedAtUTC")]);
    m_timer_started_at_utc_isSet = !json[QString("TimerStartedAtUTC")].isNull() && m_timer_started_at_utc_isValid;

    m_timesheet_category_idfk_isValid = ::OpenAPI::fromJsonValue(m_timesheet_category_idfk, json[QString("TimesheetCategoryIDFK")]);
    m_timesheet_category_idfk_isSet = !json[QString("TimesheetCategoryIDFK")].isNull() && m_timesheet_category_idfk_isValid;

    m_timesheet_entry_approval_status_code_isValid = ::OpenAPI::fromJsonValue(m_timesheet_entry_approval_status_code, json[QString("TimesheetEntryApprovalStatusCode")]);
    m_timesheet_entry_approval_status_code_isSet = !json[QString("TimesheetEntryApprovalStatusCode")].isNull() && m_timesheet_entry_approval_status_code_isValid;

    m_timesheet_entry_id_isValid = ::OpenAPI::fromJsonValue(m_timesheet_entry_id, json[QString("TimesheetEntryID")]);
    m_timesheet_entry_id_isSet = !json[QString("TimesheetEntryID")].isNull() && m_timesheet_entry_id_isValid;

    m_timesheet_user_time_zone_isValid = ::OpenAPI::fromJsonValue(m_timesheet_user_time_zone, json[QString("TimesheetUserTimeZone")]);
    m_timesheet_user_time_zone_isSet = !json[QString("TimesheetUserTimeZone")].isNull() && m_timesheet_user_time_zone_isValid;

    m_user_idfk_isValid = ::OpenAPI::fromJsonValue(m_user_idfk, json[QString("UserIDFK")]);
    m_user_idfk_isSet = !json[QString("UserIDFK")].isNull() && m_user_idfk_isValid;

    m_is_billable_isValid = ::OpenAPI::fromJsonValue(m_is_billable, json[QString("isBillable")]);
    m_is_billable_isSet = !json[QString("isBillable")].isNull() && m_is_billable_isValid;

    m_is_invoiced_isValid = ::OpenAPI::fromJsonValue(m_is_invoiced, json[QString("isInvoiced")]);
    m_is_invoiced_isSet = !json[QString("isInvoiced")].isNull() && m_is_invoiced_isValid;
}

QString OAITimesheetDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimesheetDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_approved_by_isSet) {
        obj.insert(QString("ApprovedBy"), ::OpenAPI::toJsonValue(m_approved_by));
    }
    if (m_category_name_isSet) {
        obj.insert(QString("CategoryName"), ::OpenAPI::toJsonValue(m_category_name));
    }
    if (m_custom_metadata_isSet) {
        obj.insert(QString("CustomMetadata"), ::OpenAPI::toJsonValue(m_custom_metadata));
    }
    if (m_customer_idfk_isSet) {
        obj.insert(QString("CustomerIDFK"), ::OpenAPI::toJsonValue(m_customer_idfk));
    }
    if (m_customer_name_isSet) {
        obj.insert(QString("CustomerName"), ::OpenAPI::toJsonValue(m_customer_name));
    }
    if (m_date_approved_isSet) {
        obj.insert(QString("DateApproved"), ::OpenAPI::toJsonValue(m_date_approved));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("DateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("DateUpdated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_duration_isSet) {
        obj.insert(QString("Duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_email_isSet) {
        obj.insert(QString("Email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_end_time_local_isSet) {
        obj.insert(QString("EndTimeLocal"), ::OpenAPI::toJsonValue(m_end_time_local));
    }
    if (m_end_time_utc_isSet) {
        obj.insert(QString("EndTimeUTC"), ::OpenAPI::toJsonValue(m_end_time_utc));
    }
    if (m_entry_date_isSet) {
        obj.insert(QString("EntryDate"), ::OpenAPI::toJsonValue(m_entry_date));
    }
    if (m_firstname_isSet) {
        obj.insert(QString("Firstname"), ::OpenAPI::toJsonValue(m_firstname));
    }
    if (m_has_timer_isSet) {
        obj.insert(QString("HasTimer"), ::OpenAPI::toJsonValue(m_has_timer));
    }
    if (m_invoice_idfk_isSet) {
        obj.insert(QString("InvoiceIDFK"), ::OpenAPI::toJsonValue(m_invoice_idfk));
    }
    if (m_invoice_line_item_idfk_isSet) {
        obj.insert(QString("InvoiceLineItemIDFK"), ::OpenAPI::toJsonValue(m_invoice_line_item_idfk));
    }
    if (m_lastname_isSet) {
        obj.insert(QString("Lastname"), ::OpenAPI::toJsonValue(m_lastname));
    }
    if (m_notes_isSet) {
        obj.insert(QString("Notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_project_code_isSet) {
        obj.insert(QString("ProjectCode"), ::OpenAPI::toJsonValue(m_project_code));
    }
    if (m_project_idfk_isSet) {
        obj.insert(QString("ProjectIDFK"), ::OpenAPI::toJsonValue(m_project_idfk));
    }
    if (m_project_title_isSet) {
        obj.insert(QString("ProjectTitle"), ::OpenAPI::toJsonValue(m_project_title));
    }
    if (m_start_time_local_isSet) {
        obj.insert(QString("StartTimeLocal"), ::OpenAPI::toJsonValue(m_start_time_local));
    }
    if (m_start_time_utc_isSet) {
        obj.insert(QString("StartTimeUTC"), ::OpenAPI::toJsonValue(m_start_time_utc));
    }
    if (m_task_idfk_isSet) {
        obj.insert(QString("TaskIDFK"), ::OpenAPI::toJsonValue(m_task_idfk));
    }
    if (m_task_title_isSet) {
        obj.insert(QString("TaskTitle"), ::OpenAPI::toJsonValue(m_task_title));
    }
    if (m_timer_started_at_utc_isSet) {
        obj.insert(QString("TimerStartedAtUTC"), ::OpenAPI::toJsonValue(m_timer_started_at_utc));
    }
    if (m_timesheet_category_idfk_isSet) {
        obj.insert(QString("TimesheetCategoryIDFK"), ::OpenAPI::toJsonValue(m_timesheet_category_idfk));
    }
    if (m_timesheet_entry_approval_status_code_isSet) {
        obj.insert(QString("TimesheetEntryApprovalStatusCode"), ::OpenAPI::toJsonValue(m_timesheet_entry_approval_status_code));
    }
    if (m_timesheet_entry_id_isSet) {
        obj.insert(QString("TimesheetEntryID"), ::OpenAPI::toJsonValue(m_timesheet_entry_id));
    }
    if (m_timesheet_user_time_zone_isSet) {
        obj.insert(QString("TimesheetUserTimeZone"), ::OpenAPI::toJsonValue(m_timesheet_user_time_zone));
    }
    if (m_user_idfk_isSet) {
        obj.insert(QString("UserIDFK"), ::OpenAPI::toJsonValue(m_user_idfk));
    }
    if (m_is_billable_isSet) {
        obj.insert(QString("isBillable"), ::OpenAPI::toJsonValue(m_is_billable));
    }
    if (m_is_invoiced_isSet) {
        obj.insert(QString("isInvoiced"), ::OpenAPI::toJsonValue(m_is_invoiced));
    }
    return obj;
}

QString OAITimesheetDetails::getApprovedBy() const {
    return m_approved_by;
}
void OAITimesheetDetails::setApprovedBy(const QString &approved_by) {
    m_approved_by = approved_by;
    m_approved_by_isSet = true;
}

bool OAITimesheetDetails::is_approved_by_Set() const{
    return m_approved_by_isSet;
}

bool OAITimesheetDetails::is_approved_by_Valid() const{
    return m_approved_by_isValid;
}

QString OAITimesheetDetails::getCategoryName() const {
    return m_category_name;
}
void OAITimesheetDetails::setCategoryName(const QString &category_name) {
    m_category_name = category_name;
    m_category_name_isSet = true;
}

bool OAITimesheetDetails::is_category_name_Set() const{
    return m_category_name_isSet;
}

bool OAITimesheetDetails::is_category_name_Valid() const{
    return m_category_name_isValid;
}

QString OAITimesheetDetails::getCustomMetadata() const {
    return m_custom_metadata;
}
void OAITimesheetDetails::setCustomMetadata(const QString &custom_metadata) {
    m_custom_metadata = custom_metadata;
    m_custom_metadata_isSet = true;
}

bool OAITimesheetDetails::is_custom_metadata_Set() const{
    return m_custom_metadata_isSet;
}

bool OAITimesheetDetails::is_custom_metadata_Valid() const{
    return m_custom_metadata_isValid;
}

qint32 OAITimesheetDetails::getCustomerIdfk() const {
    return m_customer_idfk;
}
void OAITimesheetDetails::setCustomerIdfk(const qint32 &customer_idfk) {
    m_customer_idfk = customer_idfk;
    m_customer_idfk_isSet = true;
}

bool OAITimesheetDetails::is_customer_idfk_Set() const{
    return m_customer_idfk_isSet;
}

bool OAITimesheetDetails::is_customer_idfk_Valid() const{
    return m_customer_idfk_isValid;
}

QString OAITimesheetDetails::getCustomerName() const {
    return m_customer_name;
}
void OAITimesheetDetails::setCustomerName(const QString &customer_name) {
    m_customer_name = customer_name;
    m_customer_name_isSet = true;
}

bool OAITimesheetDetails::is_customer_name_Set() const{
    return m_customer_name_isSet;
}

bool OAITimesheetDetails::is_customer_name_Valid() const{
    return m_customer_name_isValid;
}

QDateTime OAITimesheetDetails::getDateApproved() const {
    return m_date_approved;
}
void OAITimesheetDetails::setDateApproved(const QDateTime &date_approved) {
    m_date_approved = date_approved;
    m_date_approved_isSet = true;
}

bool OAITimesheetDetails::is_date_approved_Set() const{
    return m_date_approved_isSet;
}

bool OAITimesheetDetails::is_date_approved_Valid() const{
    return m_date_approved_isValid;
}

QDateTime OAITimesheetDetails::getDateCreated() const {
    return m_date_created;
}
void OAITimesheetDetails::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAITimesheetDetails::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAITimesheetDetails::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAITimesheetDetails::getDateUpdated() const {
    return m_date_updated;
}
void OAITimesheetDetails::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAITimesheetDetails::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAITimesheetDetails::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

double OAITimesheetDetails::getDuration() const {
    return m_duration;
}
void OAITimesheetDetails::setDuration(const double &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAITimesheetDetails::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAITimesheetDetails::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAITimesheetDetails::getEmail() const {
    return m_email;
}
void OAITimesheetDetails::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAITimesheetDetails::is_email_Set() const{
    return m_email_isSet;
}

bool OAITimesheetDetails::is_email_Valid() const{
    return m_email_isValid;
}

QDateTime OAITimesheetDetails::getEndTimeLocal() const {
    return m_end_time_local;
}
void OAITimesheetDetails::setEndTimeLocal(const QDateTime &end_time_local) {
    m_end_time_local = end_time_local;
    m_end_time_local_isSet = true;
}

bool OAITimesheetDetails::is_end_time_local_Set() const{
    return m_end_time_local_isSet;
}

bool OAITimesheetDetails::is_end_time_local_Valid() const{
    return m_end_time_local_isValid;
}

QDateTime OAITimesheetDetails::getEndTimeUtc() const {
    return m_end_time_utc;
}
void OAITimesheetDetails::setEndTimeUtc(const QDateTime &end_time_utc) {
    m_end_time_utc = end_time_utc;
    m_end_time_utc_isSet = true;
}

bool OAITimesheetDetails::is_end_time_utc_Set() const{
    return m_end_time_utc_isSet;
}

bool OAITimesheetDetails::is_end_time_utc_Valid() const{
    return m_end_time_utc_isValid;
}

QDateTime OAITimesheetDetails::getEntryDate() const {
    return m_entry_date;
}
void OAITimesheetDetails::setEntryDate(const QDateTime &entry_date) {
    m_entry_date = entry_date;
    m_entry_date_isSet = true;
}

bool OAITimesheetDetails::is_entry_date_Set() const{
    return m_entry_date_isSet;
}

bool OAITimesheetDetails::is_entry_date_Valid() const{
    return m_entry_date_isValid;
}

QString OAITimesheetDetails::getFirstname() const {
    return m_firstname;
}
void OAITimesheetDetails::setFirstname(const QString &firstname) {
    m_firstname = firstname;
    m_firstname_isSet = true;
}

bool OAITimesheetDetails::is_firstname_Set() const{
    return m_firstname_isSet;
}

bool OAITimesheetDetails::is_firstname_Valid() const{
    return m_firstname_isValid;
}

bool OAITimesheetDetails::isHasTimer() const {
    return m_has_timer;
}
void OAITimesheetDetails::setHasTimer(const bool &has_timer) {
    m_has_timer = has_timer;
    m_has_timer_isSet = true;
}

bool OAITimesheetDetails::is_has_timer_Set() const{
    return m_has_timer_isSet;
}

bool OAITimesheetDetails::is_has_timer_Valid() const{
    return m_has_timer_isValid;
}

qint64 OAITimesheetDetails::getInvoiceIdfk() const {
    return m_invoice_idfk;
}
void OAITimesheetDetails::setInvoiceIdfk(const qint64 &invoice_idfk) {
    m_invoice_idfk = invoice_idfk;
    m_invoice_idfk_isSet = true;
}

bool OAITimesheetDetails::is_invoice_idfk_Set() const{
    return m_invoice_idfk_isSet;
}

bool OAITimesheetDetails::is_invoice_idfk_Valid() const{
    return m_invoice_idfk_isValid;
}

qint64 OAITimesheetDetails::getInvoiceLineItemIdfk() const {
    return m_invoice_line_item_idfk;
}
void OAITimesheetDetails::setInvoiceLineItemIdfk(const qint64 &invoice_line_item_idfk) {
    m_invoice_line_item_idfk = invoice_line_item_idfk;
    m_invoice_line_item_idfk_isSet = true;
}

bool OAITimesheetDetails::is_invoice_line_item_idfk_Set() const{
    return m_invoice_line_item_idfk_isSet;
}

bool OAITimesheetDetails::is_invoice_line_item_idfk_Valid() const{
    return m_invoice_line_item_idfk_isValid;
}

QString OAITimesheetDetails::getLastname() const {
    return m_lastname;
}
void OAITimesheetDetails::setLastname(const QString &lastname) {
    m_lastname = lastname;
    m_lastname_isSet = true;
}

bool OAITimesheetDetails::is_lastname_Set() const{
    return m_lastname_isSet;
}

bool OAITimesheetDetails::is_lastname_Valid() const{
    return m_lastname_isValid;
}

QString OAITimesheetDetails::getNotes() const {
    return m_notes;
}
void OAITimesheetDetails::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAITimesheetDetails::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAITimesheetDetails::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAITimesheetDetails::getProjectCode() const {
    return m_project_code;
}
void OAITimesheetDetails::setProjectCode(const QString &project_code) {
    m_project_code = project_code;
    m_project_code_isSet = true;
}

bool OAITimesheetDetails::is_project_code_Set() const{
    return m_project_code_isSet;
}

bool OAITimesheetDetails::is_project_code_Valid() const{
    return m_project_code_isValid;
}

qint32 OAITimesheetDetails::getProjectIdfk() const {
    return m_project_idfk;
}
void OAITimesheetDetails::setProjectIdfk(const qint32 &project_idfk) {
    m_project_idfk = project_idfk;
    m_project_idfk_isSet = true;
}

bool OAITimesheetDetails::is_project_idfk_Set() const{
    return m_project_idfk_isSet;
}

bool OAITimesheetDetails::is_project_idfk_Valid() const{
    return m_project_idfk_isValid;
}

QString OAITimesheetDetails::getProjectTitle() const {
    return m_project_title;
}
void OAITimesheetDetails::setProjectTitle(const QString &project_title) {
    m_project_title = project_title;
    m_project_title_isSet = true;
}

bool OAITimesheetDetails::is_project_title_Set() const{
    return m_project_title_isSet;
}

bool OAITimesheetDetails::is_project_title_Valid() const{
    return m_project_title_isValid;
}

QDateTime OAITimesheetDetails::getStartTimeLocal() const {
    return m_start_time_local;
}
void OAITimesheetDetails::setStartTimeLocal(const QDateTime &start_time_local) {
    m_start_time_local = start_time_local;
    m_start_time_local_isSet = true;
}

bool OAITimesheetDetails::is_start_time_local_Set() const{
    return m_start_time_local_isSet;
}

bool OAITimesheetDetails::is_start_time_local_Valid() const{
    return m_start_time_local_isValid;
}

QDateTime OAITimesheetDetails::getStartTimeUtc() const {
    return m_start_time_utc;
}
void OAITimesheetDetails::setStartTimeUtc(const QDateTime &start_time_utc) {
    m_start_time_utc = start_time_utc;
    m_start_time_utc_isSet = true;
}

bool OAITimesheetDetails::is_start_time_utc_Set() const{
    return m_start_time_utc_isSet;
}

bool OAITimesheetDetails::is_start_time_utc_Valid() const{
    return m_start_time_utc_isValid;
}

qint32 OAITimesheetDetails::getTaskIdfk() const {
    return m_task_idfk;
}
void OAITimesheetDetails::setTaskIdfk(const qint32 &task_idfk) {
    m_task_idfk = task_idfk;
    m_task_idfk_isSet = true;
}

bool OAITimesheetDetails::is_task_idfk_Set() const{
    return m_task_idfk_isSet;
}

bool OAITimesheetDetails::is_task_idfk_Valid() const{
    return m_task_idfk_isValid;
}

QString OAITimesheetDetails::getTaskTitle() const {
    return m_task_title;
}
void OAITimesheetDetails::setTaskTitle(const QString &task_title) {
    m_task_title = task_title;
    m_task_title_isSet = true;
}

bool OAITimesheetDetails::is_task_title_Set() const{
    return m_task_title_isSet;
}

bool OAITimesheetDetails::is_task_title_Valid() const{
    return m_task_title_isValid;
}

QDateTime OAITimesheetDetails::getTimerStartedAtUtc() const {
    return m_timer_started_at_utc;
}
void OAITimesheetDetails::setTimerStartedAtUtc(const QDateTime &timer_started_at_utc) {
    m_timer_started_at_utc = timer_started_at_utc;
    m_timer_started_at_utc_isSet = true;
}

bool OAITimesheetDetails::is_timer_started_at_utc_Set() const{
    return m_timer_started_at_utc_isSet;
}

bool OAITimesheetDetails::is_timer_started_at_utc_Valid() const{
    return m_timer_started_at_utc_isValid;
}

qint32 OAITimesheetDetails::getTimesheetCategoryIdfk() const {
    return m_timesheet_category_idfk;
}
void OAITimesheetDetails::setTimesheetCategoryIdfk(const qint32 &timesheet_category_idfk) {
    m_timesheet_category_idfk = timesheet_category_idfk;
    m_timesheet_category_idfk_isSet = true;
}

bool OAITimesheetDetails::is_timesheet_category_idfk_Set() const{
    return m_timesheet_category_idfk_isSet;
}

bool OAITimesheetDetails::is_timesheet_category_idfk_Valid() const{
    return m_timesheet_category_idfk_isValid;
}

QString OAITimesheetDetails::getTimesheetEntryApprovalStatusCode() const {
    return m_timesheet_entry_approval_status_code;
}
void OAITimesheetDetails::setTimesheetEntryApprovalStatusCode(const QString &timesheet_entry_approval_status_code) {
    m_timesheet_entry_approval_status_code = timesheet_entry_approval_status_code;
    m_timesheet_entry_approval_status_code_isSet = true;
}

bool OAITimesheetDetails::is_timesheet_entry_approval_status_code_Set() const{
    return m_timesheet_entry_approval_status_code_isSet;
}

bool OAITimesheetDetails::is_timesheet_entry_approval_status_code_Valid() const{
    return m_timesheet_entry_approval_status_code_isValid;
}

qint64 OAITimesheetDetails::getTimesheetEntryId() const {
    return m_timesheet_entry_id;
}
void OAITimesheetDetails::setTimesheetEntryId(const qint64 &timesheet_entry_id) {
    m_timesheet_entry_id = timesheet_entry_id;
    m_timesheet_entry_id_isSet = true;
}

bool OAITimesheetDetails::is_timesheet_entry_id_Set() const{
    return m_timesheet_entry_id_isSet;
}

bool OAITimesheetDetails::is_timesheet_entry_id_Valid() const{
    return m_timesheet_entry_id_isValid;
}

QString OAITimesheetDetails::getTimesheetUserTimeZone() const {
    return m_timesheet_user_time_zone;
}
void OAITimesheetDetails::setTimesheetUserTimeZone(const QString &timesheet_user_time_zone) {
    m_timesheet_user_time_zone = timesheet_user_time_zone;
    m_timesheet_user_time_zone_isSet = true;
}

bool OAITimesheetDetails::is_timesheet_user_time_zone_Set() const{
    return m_timesheet_user_time_zone_isSet;
}

bool OAITimesheetDetails::is_timesheet_user_time_zone_Valid() const{
    return m_timesheet_user_time_zone_isValid;
}

qint32 OAITimesheetDetails::getUserIdfk() const {
    return m_user_idfk;
}
void OAITimesheetDetails::setUserIdfk(const qint32 &user_idfk) {
    m_user_idfk = user_idfk;
    m_user_idfk_isSet = true;
}

bool OAITimesheetDetails::is_user_idfk_Set() const{
    return m_user_idfk_isSet;
}

bool OAITimesheetDetails::is_user_idfk_Valid() const{
    return m_user_idfk_isValid;
}

bool OAITimesheetDetails::isIsBillable() const {
    return m_is_billable;
}
void OAITimesheetDetails::setIsBillable(const bool &is_billable) {
    m_is_billable = is_billable;
    m_is_billable_isSet = true;
}

bool OAITimesheetDetails::is_is_billable_Set() const{
    return m_is_billable_isSet;
}

bool OAITimesheetDetails::is_is_billable_Valid() const{
    return m_is_billable_isValid;
}

bool OAITimesheetDetails::isIsInvoiced() const {
    return m_is_invoiced;
}
void OAITimesheetDetails::setIsInvoiced(const bool &is_invoiced) {
    m_is_invoiced = is_invoiced;
    m_is_invoiced_isSet = true;
}

bool OAITimesheetDetails::is_is_invoiced_Set() const{
    return m_is_invoiced_isSet;
}

bool OAITimesheetDetails::is_is_invoiced_Valid() const{
    return m_is_invoiced_isValid;
}

bool OAITimesheetDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_approved_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_approved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_local_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firstname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_timer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_line_item_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lastname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_local_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timer_started_at_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timesheet_category_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timesheet_entry_approval_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timesheet_entry_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timesheet_user_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_billable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_invoiced_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimesheetDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
