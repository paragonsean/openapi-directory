/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInventoryItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInventoryItem::OAIInventoryItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInventoryItem::OAIInventoryItem() {
    this->initializeModel();
}

OAIInventoryItem::~OAIInventoryItem() {}

void OAIInventoryItem::initializeModel() {

    m_cost_price_isSet = false;
    m_cost_price_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_inventory_item_id_isSet = false;
    m_inventory_item_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_sale_price_isSet = false;
    m_sale_price_isValid = false;

    m_sale_tax_idfk_isSet = false;
    m_sale_tax_idfk_isValid = false;

    m_is_hidden_isSet = false;
    m_is_hidden_isValid = false;
}

void OAIInventoryItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInventoryItem::fromJsonObject(QJsonObject json) {

    m_cost_price_isValid = ::OpenAPI::fromJsonValue(m_cost_price, json[QString("CostPrice")]);
    m_cost_price_isSet = !json[QString("CostPrice")].isNull() && m_cost_price_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("DateCreated")]);
    m_date_created_isSet = !json[QString("DateCreated")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("DateUpdated")]);
    m_date_updated_isSet = !json[QString("DateUpdated")].isNull() && m_date_updated_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_inventory_item_id_isValid = ::OpenAPI::fromJsonValue(m_inventory_item_id, json[QString("InventoryItemID")]);
    m_inventory_item_id_isSet = !json[QString("InventoryItemID")].isNull() && m_inventory_item_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("SKU")]);
    m_sku_isSet = !json[QString("SKU")].isNull() && m_sku_isValid;

    m_sale_price_isValid = ::OpenAPI::fromJsonValue(m_sale_price, json[QString("SalePrice")]);
    m_sale_price_isSet = !json[QString("SalePrice")].isNull() && m_sale_price_isValid;

    m_sale_tax_idfk_isValid = ::OpenAPI::fromJsonValue(m_sale_tax_idfk, json[QString("SaleTaxIDFK")]);
    m_sale_tax_idfk_isSet = !json[QString("SaleTaxIDFK")].isNull() && m_sale_tax_idfk_isValid;

    m_is_hidden_isValid = ::OpenAPI::fromJsonValue(m_is_hidden, json[QString("isHidden")]);
    m_is_hidden_isSet = !json[QString("isHidden")].isNull() && m_is_hidden_isValid;
}

QString OAIInventoryItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInventoryItem::asJsonObject() const {
    QJsonObject obj;
    if (m_cost_price_isSet) {
        obj.insert(QString("CostPrice"), ::OpenAPI::toJsonValue(m_cost_price));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("DateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("DateUpdated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_inventory_item_id_isSet) {
        obj.insert(QString("InventoryItemID"), ::OpenAPI::toJsonValue(m_inventory_item_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_sku_isSet) {
        obj.insert(QString("SKU"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_sale_price_isSet) {
        obj.insert(QString("SalePrice"), ::OpenAPI::toJsonValue(m_sale_price));
    }
    if (m_sale_tax_idfk_isSet) {
        obj.insert(QString("SaleTaxIDFK"), ::OpenAPI::toJsonValue(m_sale_tax_idfk));
    }
    if (m_is_hidden_isSet) {
        obj.insert(QString("isHidden"), ::OpenAPI::toJsonValue(m_is_hidden));
    }
    return obj;
}

double OAIInventoryItem::getCostPrice() const {
    return m_cost_price;
}
void OAIInventoryItem::setCostPrice(const double &cost_price) {
    m_cost_price = cost_price;
    m_cost_price_isSet = true;
}

bool OAIInventoryItem::is_cost_price_Set() const{
    return m_cost_price_isSet;
}

bool OAIInventoryItem::is_cost_price_Valid() const{
    return m_cost_price_isValid;
}

QDateTime OAIInventoryItem::getDateCreated() const {
    return m_date_created;
}
void OAIInventoryItem::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIInventoryItem::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIInventoryItem::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIInventoryItem::getDateUpdated() const {
    return m_date_updated;
}
void OAIInventoryItem::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIInventoryItem::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIInventoryItem::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QString OAIInventoryItem::getDescription() const {
    return m_description;
}
void OAIInventoryItem::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIInventoryItem::is_description_Set() const{
    return m_description_isSet;
}

bool OAIInventoryItem::is_description_Valid() const{
    return m_description_isValid;
}

qint64 OAIInventoryItem::getInventoryItemId() const {
    return m_inventory_item_id;
}
void OAIInventoryItem::setInventoryItemId(const qint64 &inventory_item_id) {
    m_inventory_item_id = inventory_item_id;
    m_inventory_item_id_isSet = true;
}

bool OAIInventoryItem::is_inventory_item_id_Set() const{
    return m_inventory_item_id_isSet;
}

bool OAIInventoryItem::is_inventory_item_id_Valid() const{
    return m_inventory_item_id_isValid;
}

QString OAIInventoryItem::getName() const {
    return m_name;
}
void OAIInventoryItem::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInventoryItem::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInventoryItem::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIInventoryItem::getSku() const {
    return m_sku;
}
void OAIInventoryItem::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIInventoryItem::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIInventoryItem::is_sku_Valid() const{
    return m_sku_isValid;
}

double OAIInventoryItem::getSalePrice() const {
    return m_sale_price;
}
void OAIInventoryItem::setSalePrice(const double &sale_price) {
    m_sale_price = sale_price;
    m_sale_price_isSet = true;
}

bool OAIInventoryItem::is_sale_price_Set() const{
    return m_sale_price_isSet;
}

bool OAIInventoryItem::is_sale_price_Valid() const{
    return m_sale_price_isValid;
}

qint32 OAIInventoryItem::getSaleTaxIdfk() const {
    return m_sale_tax_idfk;
}
void OAIInventoryItem::setSaleTaxIdfk(const qint32 &sale_tax_idfk) {
    m_sale_tax_idfk = sale_tax_idfk;
    m_sale_tax_idfk_isSet = true;
}

bool OAIInventoryItem::is_sale_tax_idfk_Set() const{
    return m_sale_tax_idfk_isSet;
}

bool OAIInventoryItem::is_sale_tax_idfk_Valid() const{
    return m_sale_tax_idfk_isValid;
}

bool OAIInventoryItem::isIsHidden() const {
    return m_is_hidden;
}
void OAIInventoryItem::setIsHidden(const bool &is_hidden) {
    m_is_hidden = is_hidden;
    m_is_hidden_isSet = true;
}

bool OAIInventoryItem::is_is_hidden_Set() const{
    return m_is_hidden_isSet;
}

bool OAIInventoryItem::is_is_hidden_Valid() const{
    return m_is_hidden_isValid;
}

bool OAIInventoryItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cost_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_tax_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInventoryItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
