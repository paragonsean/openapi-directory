/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskDetails::OAITaskDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskDetails::OAITaskDetails() {
    this->initializeModel();
}

OAITaskDetails::~OAITaskDetails() {}

void OAITaskDetails::initializeModel() {

    m_account_task_type_idfk_isSet = false;
    m_account_task_type_idfk_isValid = false;

    m_actual_time_isSet = false;
    m_actual_time_isValid = false;

    m_assigned_to_users_isSet = false;
    m_assigned_to_users_isValid = false;

    m_date_completed_isSet = false;
    m_date_completed_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_due_isSet = false;
    m_date_due_isValid = false;

    m_date_start_isSet = false;
    m_date_start_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_description_no_html_isSet = false;
    m_description_no_html_isValid = false;

    m_estimated_effort_isSet = false;
    m_estimated_effort_isValid = false;

    m_percent_complete_isSet = false;
    m_percent_complete_isValid = false;

    m_project_code_isSet = false;
    m_project_code_isValid = false;

    m_project_idfk_isSet = false;
    m_project_idfk_isValid = false;

    m_project_title_isSet = false;
    m_project_title_isValid = false;

    m_section_idfk_isSet = false;
    m_section_idfk_isValid = false;

    m_section_title_isSet = false;
    m_section_title_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_task_id_isSet = false;
    m_task_id_isValid = false;

    m_task_priority_code_isSet = false;
    m_task_priority_code_isValid = false;

    m_task_priority_name_isSet = false;
    m_task_priority_name_isValid = false;

    m_task_status_code_isSet = false;
    m_task_status_code_isValid = false;

    m_task_status_name_isSet = false;
    m_task_status_name_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_is_complete_status_isSet = false;
    m_is_complete_status_isValid = false;
}

void OAITaskDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskDetails::fromJsonObject(QJsonObject json) {

    m_account_task_type_idfk_isValid = ::OpenAPI::fromJsonValue(m_account_task_type_idfk, json[QString("AccountTaskTypeIDFK")]);
    m_account_task_type_idfk_isSet = !json[QString("AccountTaskTypeIDFK")].isNull() && m_account_task_type_idfk_isValid;

    m_actual_time_isValid = ::OpenAPI::fromJsonValue(m_actual_time, json[QString("ActualTime")]);
    m_actual_time_isSet = !json[QString("ActualTime")].isNull() && m_actual_time_isValid;

    m_assigned_to_users_isValid = ::OpenAPI::fromJsonValue(m_assigned_to_users, json[QString("AssignedToUsers")]);
    m_assigned_to_users_isSet = !json[QString("AssignedToUsers")].isNull() && m_assigned_to_users_isValid;

    m_date_completed_isValid = ::OpenAPI::fromJsonValue(m_date_completed, json[QString("DateCompleted")]);
    m_date_completed_isSet = !json[QString("DateCompleted")].isNull() && m_date_completed_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("DateCreated")]);
    m_date_created_isSet = !json[QString("DateCreated")].isNull() && m_date_created_isValid;

    m_date_due_isValid = ::OpenAPI::fromJsonValue(m_date_due, json[QString("DateDue")]);
    m_date_due_isSet = !json[QString("DateDue")].isNull() && m_date_due_isValid;

    m_date_start_isValid = ::OpenAPI::fromJsonValue(m_date_start, json[QString("DateStart")]);
    m_date_start_isSet = !json[QString("DateStart")].isNull() && m_date_start_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("DateUpdated")]);
    m_date_updated_isSet = !json[QString("DateUpdated")].isNull() && m_date_updated_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_description_no_html_isValid = ::OpenAPI::fromJsonValue(m_description_no_html, json[QString("DescriptionNoHTML")]);
    m_description_no_html_isSet = !json[QString("DescriptionNoHTML")].isNull() && m_description_no_html_isValid;

    m_estimated_effort_isValid = ::OpenAPI::fromJsonValue(m_estimated_effort, json[QString("EstimatedEffort")]);
    m_estimated_effort_isSet = !json[QString("EstimatedEffort")].isNull() && m_estimated_effort_isValid;

    m_percent_complete_isValid = ::OpenAPI::fromJsonValue(m_percent_complete, json[QString("PercentComplete")]);
    m_percent_complete_isSet = !json[QString("PercentComplete")].isNull() && m_percent_complete_isValid;

    m_project_code_isValid = ::OpenAPI::fromJsonValue(m_project_code, json[QString("ProjectCode")]);
    m_project_code_isSet = !json[QString("ProjectCode")].isNull() && m_project_code_isValid;

    m_project_idfk_isValid = ::OpenAPI::fromJsonValue(m_project_idfk, json[QString("ProjectIDFK")]);
    m_project_idfk_isSet = !json[QString("ProjectIDFK")].isNull() && m_project_idfk_isValid;

    m_project_title_isValid = ::OpenAPI::fromJsonValue(m_project_title, json[QString("ProjectTitle")]);
    m_project_title_isSet = !json[QString("ProjectTitle")].isNull() && m_project_title_isValid;

    m_section_idfk_isValid = ::OpenAPI::fromJsonValue(m_section_idfk, json[QString("SectionIDFK")]);
    m_section_idfk_isSet = !json[QString("SectionIDFK")].isNull() && m_section_idfk_isValid;

    m_section_title_isValid = ::OpenAPI::fromJsonValue(m_section_title, json[QString("SectionTitle")]);
    m_section_title_isSet = !json[QString("SectionTitle")].isNull() && m_section_title_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_task_id_isValid = ::OpenAPI::fromJsonValue(m_task_id, json[QString("TaskID")]);
    m_task_id_isSet = !json[QString("TaskID")].isNull() && m_task_id_isValid;

    m_task_priority_code_isValid = ::OpenAPI::fromJsonValue(m_task_priority_code, json[QString("TaskPriorityCode")]);
    m_task_priority_code_isSet = !json[QString("TaskPriorityCode")].isNull() && m_task_priority_code_isValid;

    m_task_priority_name_isValid = ::OpenAPI::fromJsonValue(m_task_priority_name, json[QString("TaskPriorityName")]);
    m_task_priority_name_isSet = !json[QString("TaskPriorityName")].isNull() && m_task_priority_name_isValid;

    m_task_status_code_isValid = ::OpenAPI::fromJsonValue(m_task_status_code, json[QString("TaskStatusCode")]);
    m_task_status_code_isSet = !json[QString("TaskStatusCode")].isNull() && m_task_status_code_isValid;

    m_task_status_name_isValid = ::OpenAPI::fromJsonValue(m_task_status_name, json[QString("TaskStatusName")]);
    m_task_status_name_isSet = !json[QString("TaskStatusName")].isNull() && m_task_status_name_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_is_complete_status_isValid = ::OpenAPI::fromJsonValue(m_is_complete_status, json[QString("isCompleteStatus")]);
    m_is_complete_status_isSet = !json[QString("isCompleteStatus")].isNull() && m_is_complete_status_isValid;
}

QString OAITaskDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_account_task_type_idfk_isSet) {
        obj.insert(QString("AccountTaskTypeIDFK"), ::OpenAPI::toJsonValue(m_account_task_type_idfk));
    }
    if (m_actual_time_isSet) {
        obj.insert(QString("ActualTime"), ::OpenAPI::toJsonValue(m_actual_time));
    }
    if (m_assigned_to_users.size() > 0) {
        obj.insert(QString("AssignedToUsers"), ::OpenAPI::toJsonValue(m_assigned_to_users));
    }
    if (m_date_completed_isSet) {
        obj.insert(QString("DateCompleted"), ::OpenAPI::toJsonValue(m_date_completed));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("DateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_due_isSet) {
        obj.insert(QString("DateDue"), ::OpenAPI::toJsonValue(m_date_due));
    }
    if (m_date_start_isSet) {
        obj.insert(QString("DateStart"), ::OpenAPI::toJsonValue(m_date_start));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("DateUpdated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_description_no_html_isSet) {
        obj.insert(QString("DescriptionNoHTML"), ::OpenAPI::toJsonValue(m_description_no_html));
    }
    if (m_estimated_effort_isSet) {
        obj.insert(QString("EstimatedEffort"), ::OpenAPI::toJsonValue(m_estimated_effort));
    }
    if (m_percent_complete_isSet) {
        obj.insert(QString("PercentComplete"), ::OpenAPI::toJsonValue(m_percent_complete));
    }
    if (m_project_code_isSet) {
        obj.insert(QString("ProjectCode"), ::OpenAPI::toJsonValue(m_project_code));
    }
    if (m_project_idfk_isSet) {
        obj.insert(QString("ProjectIDFK"), ::OpenAPI::toJsonValue(m_project_idfk));
    }
    if (m_project_title_isSet) {
        obj.insert(QString("ProjectTitle"), ::OpenAPI::toJsonValue(m_project_title));
    }
    if (m_section_idfk_isSet) {
        obj.insert(QString("SectionIDFK"), ::OpenAPI::toJsonValue(m_section_idfk));
    }
    if (m_section_title_isSet) {
        obj.insert(QString("SectionTitle"), ::OpenAPI::toJsonValue(m_section_title));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_task_id_isSet) {
        obj.insert(QString("TaskID"), ::OpenAPI::toJsonValue(m_task_id));
    }
    if (m_task_priority_code_isSet) {
        obj.insert(QString("TaskPriorityCode"), ::OpenAPI::toJsonValue(m_task_priority_code));
    }
    if (m_task_priority_name_isSet) {
        obj.insert(QString("TaskPriorityName"), ::OpenAPI::toJsonValue(m_task_priority_name));
    }
    if (m_task_status_code_isSet) {
        obj.insert(QString("TaskStatusCode"), ::OpenAPI::toJsonValue(m_task_status_code));
    }
    if (m_task_status_name_isSet) {
        obj.insert(QString("TaskStatusName"), ::OpenAPI::toJsonValue(m_task_status_name));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_is_complete_status_isSet) {
        obj.insert(QString("isCompleteStatus"), ::OpenAPI::toJsonValue(m_is_complete_status));
    }
    return obj;
}

qint32 OAITaskDetails::getAccountTaskTypeIdfk() const {
    return m_account_task_type_idfk;
}
void OAITaskDetails::setAccountTaskTypeIdfk(const qint32 &account_task_type_idfk) {
    m_account_task_type_idfk = account_task_type_idfk;
    m_account_task_type_idfk_isSet = true;
}

bool OAITaskDetails::is_account_task_type_idfk_Set() const{
    return m_account_task_type_idfk_isSet;
}

bool OAITaskDetails::is_account_task_type_idfk_Valid() const{
    return m_account_task_type_idfk_isValid;
}

double OAITaskDetails::getActualTime() const {
    return m_actual_time;
}
void OAITaskDetails::setActualTime(const double &actual_time) {
    m_actual_time = actual_time;
    m_actual_time_isSet = true;
}

bool OAITaskDetails::is_actual_time_Set() const{
    return m_actual_time_isSet;
}

bool OAITaskDetails::is_actual_time_Valid() const{
    return m_actual_time_isValid;
}

QList<OAIAssignedToUser> OAITaskDetails::getAssignedToUsers() const {
    return m_assigned_to_users;
}
void OAITaskDetails::setAssignedToUsers(const QList<OAIAssignedToUser> &assigned_to_users) {
    m_assigned_to_users = assigned_to_users;
    m_assigned_to_users_isSet = true;
}

bool OAITaskDetails::is_assigned_to_users_Set() const{
    return m_assigned_to_users_isSet;
}

bool OAITaskDetails::is_assigned_to_users_Valid() const{
    return m_assigned_to_users_isValid;
}

QDateTime OAITaskDetails::getDateCompleted() const {
    return m_date_completed;
}
void OAITaskDetails::setDateCompleted(const QDateTime &date_completed) {
    m_date_completed = date_completed;
    m_date_completed_isSet = true;
}

bool OAITaskDetails::is_date_completed_Set() const{
    return m_date_completed_isSet;
}

bool OAITaskDetails::is_date_completed_Valid() const{
    return m_date_completed_isValid;
}

QDateTime OAITaskDetails::getDateCreated() const {
    return m_date_created;
}
void OAITaskDetails::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAITaskDetails::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAITaskDetails::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAITaskDetails::getDateDue() const {
    return m_date_due;
}
void OAITaskDetails::setDateDue(const QDateTime &date_due) {
    m_date_due = date_due;
    m_date_due_isSet = true;
}

bool OAITaskDetails::is_date_due_Set() const{
    return m_date_due_isSet;
}

bool OAITaskDetails::is_date_due_Valid() const{
    return m_date_due_isValid;
}

QDateTime OAITaskDetails::getDateStart() const {
    return m_date_start;
}
void OAITaskDetails::setDateStart(const QDateTime &date_start) {
    m_date_start = date_start;
    m_date_start_isSet = true;
}

bool OAITaskDetails::is_date_start_Set() const{
    return m_date_start_isSet;
}

bool OAITaskDetails::is_date_start_Valid() const{
    return m_date_start_isValid;
}

QDateTime OAITaskDetails::getDateUpdated() const {
    return m_date_updated;
}
void OAITaskDetails::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAITaskDetails::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAITaskDetails::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QString OAITaskDetails::getDescription() const {
    return m_description;
}
void OAITaskDetails::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITaskDetails::is_description_Set() const{
    return m_description_isSet;
}

bool OAITaskDetails::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITaskDetails::getDescriptionNoHtml() const {
    return m_description_no_html;
}
void OAITaskDetails::setDescriptionNoHtml(const QString &description_no_html) {
    m_description_no_html = description_no_html;
    m_description_no_html_isSet = true;
}

bool OAITaskDetails::is_description_no_html_Set() const{
    return m_description_no_html_isSet;
}

bool OAITaskDetails::is_description_no_html_Valid() const{
    return m_description_no_html_isValid;
}

double OAITaskDetails::getEstimatedEffort() const {
    return m_estimated_effort;
}
void OAITaskDetails::setEstimatedEffort(const double &estimated_effort) {
    m_estimated_effort = estimated_effort;
    m_estimated_effort_isSet = true;
}

bool OAITaskDetails::is_estimated_effort_Set() const{
    return m_estimated_effort_isSet;
}

bool OAITaskDetails::is_estimated_effort_Valid() const{
    return m_estimated_effort_isValid;
}

double OAITaskDetails::getPercentComplete() const {
    return m_percent_complete;
}
void OAITaskDetails::setPercentComplete(const double &percent_complete) {
    m_percent_complete = percent_complete;
    m_percent_complete_isSet = true;
}

bool OAITaskDetails::is_percent_complete_Set() const{
    return m_percent_complete_isSet;
}

bool OAITaskDetails::is_percent_complete_Valid() const{
    return m_percent_complete_isValid;
}

QString OAITaskDetails::getProjectCode() const {
    return m_project_code;
}
void OAITaskDetails::setProjectCode(const QString &project_code) {
    m_project_code = project_code;
    m_project_code_isSet = true;
}

bool OAITaskDetails::is_project_code_Set() const{
    return m_project_code_isSet;
}

bool OAITaskDetails::is_project_code_Valid() const{
    return m_project_code_isValid;
}

qint32 OAITaskDetails::getProjectIdfk() const {
    return m_project_idfk;
}
void OAITaskDetails::setProjectIdfk(const qint32 &project_idfk) {
    m_project_idfk = project_idfk;
    m_project_idfk_isSet = true;
}

bool OAITaskDetails::is_project_idfk_Set() const{
    return m_project_idfk_isSet;
}

bool OAITaskDetails::is_project_idfk_Valid() const{
    return m_project_idfk_isValid;
}

QString OAITaskDetails::getProjectTitle() const {
    return m_project_title;
}
void OAITaskDetails::setProjectTitle(const QString &project_title) {
    m_project_title = project_title;
    m_project_title_isSet = true;
}

bool OAITaskDetails::is_project_title_Set() const{
    return m_project_title_isSet;
}

bool OAITaskDetails::is_project_title_Valid() const{
    return m_project_title_isValid;
}

qint32 OAITaskDetails::getSectionIdfk() const {
    return m_section_idfk;
}
void OAITaskDetails::setSectionIdfk(const qint32 &section_idfk) {
    m_section_idfk = section_idfk;
    m_section_idfk_isSet = true;
}

bool OAITaskDetails::is_section_idfk_Set() const{
    return m_section_idfk_isSet;
}

bool OAITaskDetails::is_section_idfk_Valid() const{
    return m_section_idfk_isValid;
}

QString OAITaskDetails::getSectionTitle() const {
    return m_section_title;
}
void OAITaskDetails::setSectionTitle(const QString &section_title) {
    m_section_title = section_title;
    m_section_title_isSet = true;
}

bool OAITaskDetails::is_section_title_Set() const{
    return m_section_title_isSet;
}

bool OAITaskDetails::is_section_title_Valid() const{
    return m_section_title_isValid;
}

QList<OAITagItem> OAITaskDetails::getTags() const {
    return m_tags;
}
void OAITaskDetails::setTags(const QList<OAITagItem> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAITaskDetails::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAITaskDetails::is_tags_Valid() const{
    return m_tags_isValid;
}

qint32 OAITaskDetails::getTaskId() const {
    return m_task_id;
}
void OAITaskDetails::setTaskId(const qint32 &task_id) {
    m_task_id = task_id;
    m_task_id_isSet = true;
}

bool OAITaskDetails::is_task_id_Set() const{
    return m_task_id_isSet;
}

bool OAITaskDetails::is_task_id_Valid() const{
    return m_task_id_isValid;
}

QString OAITaskDetails::getTaskPriorityCode() const {
    return m_task_priority_code;
}
void OAITaskDetails::setTaskPriorityCode(const QString &task_priority_code) {
    m_task_priority_code = task_priority_code;
    m_task_priority_code_isSet = true;
}

bool OAITaskDetails::is_task_priority_code_Set() const{
    return m_task_priority_code_isSet;
}

bool OAITaskDetails::is_task_priority_code_Valid() const{
    return m_task_priority_code_isValid;
}

QString OAITaskDetails::getTaskPriorityName() const {
    return m_task_priority_name;
}
void OAITaskDetails::setTaskPriorityName(const QString &task_priority_name) {
    m_task_priority_name = task_priority_name;
    m_task_priority_name_isSet = true;
}

bool OAITaskDetails::is_task_priority_name_Set() const{
    return m_task_priority_name_isSet;
}

bool OAITaskDetails::is_task_priority_name_Valid() const{
    return m_task_priority_name_isValid;
}

QString OAITaskDetails::getTaskStatusCode() const {
    return m_task_status_code;
}
void OAITaskDetails::setTaskStatusCode(const QString &task_status_code) {
    m_task_status_code = task_status_code;
    m_task_status_code_isSet = true;
}

bool OAITaskDetails::is_task_status_code_Set() const{
    return m_task_status_code_isSet;
}

bool OAITaskDetails::is_task_status_code_Valid() const{
    return m_task_status_code_isValid;
}

QString OAITaskDetails::getTaskStatusName() const {
    return m_task_status_name;
}
void OAITaskDetails::setTaskStatusName(const QString &task_status_name) {
    m_task_status_name = task_status_name;
    m_task_status_name_isSet = true;
}

bool OAITaskDetails::is_task_status_name_Set() const{
    return m_task_status_name_isSet;
}

bool OAITaskDetails::is_task_status_name_Valid() const{
    return m_task_status_name_isValid;
}

QString OAITaskDetails::getTitle() const {
    return m_title;
}
void OAITaskDetails::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAITaskDetails::is_title_Set() const{
    return m_title_isSet;
}

bool OAITaskDetails::is_title_Valid() const{
    return m_title_isValid;
}

bool OAITaskDetails::isIsCompleteStatus() const {
    return m_is_complete_status;
}
void OAITaskDetails::setIsCompleteStatus(const bool &is_complete_status) {
    m_is_complete_status = is_complete_status;
    m_is_complete_status_isSet = true;
}

bool OAITaskDetails::is_is_complete_status_Set() const{
    return m_is_complete_status_isSet;
}

bool OAITaskDetails::is_is_complete_status_Valid() const{
    return m_is_complete_status_isValid;
}

bool OAITaskDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_task_type_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actual_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assigned_to_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_due_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_no_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_effort_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_section_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_section_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_priority_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_priority_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_status_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_complete_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
