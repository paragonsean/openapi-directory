/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompanyContact.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompanyContact::OAICompanyContact(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompanyContact::OAICompanyContact() {
    this->initializeModel();
}

OAICompanyContact::~OAICompanyContact() {}

void OAICompanyContact::initializeModel() {

    m_company_idfk_isSet = false;
    m_company_idfk_isValid = false;

    m_company_name_isSet = false;
    m_company_name_isValid = false;

    m_contact_id_isSet = false;
    m_contact_id_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_firstname_isSet = false;
    m_firstname_isValid = false;

    m_lastname_isSet = false;
    m_lastname_isValid = false;

    m_mobile_isSet = false;
    m_mobile_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_position_title_isSet = false;
    m_position_title_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;
}

void OAICompanyContact::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompanyContact::fromJsonObject(QJsonObject json) {

    m_company_idfk_isValid = ::OpenAPI::fromJsonValue(m_company_idfk, json[QString("CompanyIDFK")]);
    m_company_idfk_isSet = !json[QString("CompanyIDFK")].isNull() && m_company_idfk_isValid;

    m_company_name_isValid = ::OpenAPI::fromJsonValue(m_company_name, json[QString("CompanyName")]);
    m_company_name_isSet = !json[QString("CompanyName")].isNull() && m_company_name_isValid;

    m_contact_id_isValid = ::OpenAPI::fromJsonValue(m_contact_id, json[QString("ContactID")]);
    m_contact_id_isSet = !json[QString("ContactID")].isNull() && m_contact_id_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("DateCreated")]);
    m_date_created_isSet = !json[QString("DateCreated")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("DateUpdated")]);
    m_date_updated_isSet = !json[QString("DateUpdated")].isNull() && m_date_updated_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("Email")]);
    m_email_isSet = !json[QString("Email")].isNull() && m_email_isValid;

    m_firstname_isValid = ::OpenAPI::fromJsonValue(m_firstname, json[QString("Firstname")]);
    m_firstname_isSet = !json[QString("Firstname")].isNull() && m_firstname_isValid;

    m_lastname_isValid = ::OpenAPI::fromJsonValue(m_lastname, json[QString("Lastname")]);
    m_lastname_isSet = !json[QString("Lastname")].isNull() && m_lastname_isValid;

    m_mobile_isValid = ::OpenAPI::fromJsonValue(m_mobile, json[QString("Mobile")]);
    m_mobile_isSet = !json[QString("Mobile")].isNull() && m_mobile_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("Phone")]);
    m_phone_isSet = !json[QString("Phone")].isNull() && m_phone_isValid;

    m_position_title_isValid = ::OpenAPI::fromJsonValue(m_position_title, json[QString("PositionTitle")]);
    m_position_title_isSet = !json[QString("PositionTitle")].isNull() && m_position_title_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("TimeZone")]);
    m_time_zone_isSet = !json[QString("TimeZone")].isNull() && m_time_zone_isValid;
}

QString OAICompanyContact::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompanyContact::asJsonObject() const {
    QJsonObject obj;
    if (m_company_idfk_isSet) {
        obj.insert(QString("CompanyIDFK"), ::OpenAPI::toJsonValue(m_company_idfk));
    }
    if (m_company_name_isSet) {
        obj.insert(QString("CompanyName"), ::OpenAPI::toJsonValue(m_company_name));
    }
    if (m_contact_id_isSet) {
        obj.insert(QString("ContactID"), ::OpenAPI::toJsonValue(m_contact_id));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("DateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("DateUpdated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_email_isSet) {
        obj.insert(QString("Email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_firstname_isSet) {
        obj.insert(QString("Firstname"), ::OpenAPI::toJsonValue(m_firstname));
    }
    if (m_lastname_isSet) {
        obj.insert(QString("Lastname"), ::OpenAPI::toJsonValue(m_lastname));
    }
    if (m_mobile_isSet) {
        obj.insert(QString("Mobile"), ::OpenAPI::toJsonValue(m_mobile));
    }
    if (m_phone_isSet) {
        obj.insert(QString("Phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_position_title_isSet) {
        obj.insert(QString("PositionTitle"), ::OpenAPI::toJsonValue(m_position_title));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("TimeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    return obj;
}

qint32 OAICompanyContact::getCompanyIdfk() const {
    return m_company_idfk;
}
void OAICompanyContact::setCompanyIdfk(const qint32 &company_idfk) {
    m_company_idfk = company_idfk;
    m_company_idfk_isSet = true;
}

bool OAICompanyContact::is_company_idfk_Set() const{
    return m_company_idfk_isSet;
}

bool OAICompanyContact::is_company_idfk_Valid() const{
    return m_company_idfk_isValid;
}

QString OAICompanyContact::getCompanyName() const {
    return m_company_name;
}
void OAICompanyContact::setCompanyName(const QString &company_name) {
    m_company_name = company_name;
    m_company_name_isSet = true;
}

bool OAICompanyContact::is_company_name_Set() const{
    return m_company_name_isSet;
}

bool OAICompanyContact::is_company_name_Valid() const{
    return m_company_name_isValid;
}

qint32 OAICompanyContact::getContactId() const {
    return m_contact_id;
}
void OAICompanyContact::setContactId(const qint32 &contact_id) {
    m_contact_id = contact_id;
    m_contact_id_isSet = true;
}

bool OAICompanyContact::is_contact_id_Set() const{
    return m_contact_id_isSet;
}

bool OAICompanyContact::is_contact_id_Valid() const{
    return m_contact_id_isValid;
}

QDateTime OAICompanyContact::getDateCreated() const {
    return m_date_created;
}
void OAICompanyContact::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAICompanyContact::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAICompanyContact::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAICompanyContact::getDateUpdated() const {
    return m_date_updated;
}
void OAICompanyContact::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAICompanyContact::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAICompanyContact::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QString OAICompanyContact::getEmail() const {
    return m_email;
}
void OAICompanyContact::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAICompanyContact::is_email_Set() const{
    return m_email_isSet;
}

bool OAICompanyContact::is_email_Valid() const{
    return m_email_isValid;
}

QString OAICompanyContact::getFirstname() const {
    return m_firstname;
}
void OAICompanyContact::setFirstname(const QString &firstname) {
    m_firstname = firstname;
    m_firstname_isSet = true;
}

bool OAICompanyContact::is_firstname_Set() const{
    return m_firstname_isSet;
}

bool OAICompanyContact::is_firstname_Valid() const{
    return m_firstname_isValid;
}

QString OAICompanyContact::getLastname() const {
    return m_lastname;
}
void OAICompanyContact::setLastname(const QString &lastname) {
    m_lastname = lastname;
    m_lastname_isSet = true;
}

bool OAICompanyContact::is_lastname_Set() const{
    return m_lastname_isSet;
}

bool OAICompanyContact::is_lastname_Valid() const{
    return m_lastname_isValid;
}

QString OAICompanyContact::getMobile() const {
    return m_mobile;
}
void OAICompanyContact::setMobile(const QString &mobile) {
    m_mobile = mobile;
    m_mobile_isSet = true;
}

bool OAICompanyContact::is_mobile_Set() const{
    return m_mobile_isSet;
}

bool OAICompanyContact::is_mobile_Valid() const{
    return m_mobile_isValid;
}

QString OAICompanyContact::getPhone() const {
    return m_phone;
}
void OAICompanyContact::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAICompanyContact::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAICompanyContact::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAICompanyContact::getPositionTitle() const {
    return m_position_title;
}
void OAICompanyContact::setPositionTitle(const QString &position_title) {
    m_position_title = position_title;
    m_position_title_isSet = true;
}

bool OAICompanyContact::is_position_title_Set() const{
    return m_position_title_isSet;
}

bool OAICompanyContact::is_position_title_Valid() const{
    return m_position_title_isValid;
}

QString OAICompanyContact::getTimeZone() const {
    return m_time_zone;
}
void OAICompanyContact::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAICompanyContact::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAICompanyContact::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

bool OAICompanyContact::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_company_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firstname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lastname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompanyContact::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
