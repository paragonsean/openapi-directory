/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskStatusDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskStatusDetails::OAITaskStatusDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskStatusDetails::OAITaskStatusDetails() {
    this->initializeModel();
}

OAITaskStatusDetails::~OAITaskStatusDetails() {}

void OAITaskStatusDetails::initializeModel() {

    m_account_task_type_idfk_isSet = false;
    m_account_task_type_idfk_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_display_order_isSet = false;
    m_display_order_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_task_status_code_isSet = false;
    m_task_status_code_isValid = false;

    m_task_type_name_isSet = false;
    m_task_type_name_isValid = false;

    m_is_complete_isSet = false;
    m_is_complete_isValid = false;
}

void OAITaskStatusDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskStatusDetails::fromJsonObject(QJsonObject json) {

    m_account_task_type_idfk_isValid = ::OpenAPI::fromJsonValue(m_account_task_type_idfk, json[QString("AccountTaskTypeIDFK")]);
    m_account_task_type_idfk_isSet = !json[QString("AccountTaskTypeIDFK")].isNull() && m_account_task_type_idfk_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("Color")]);
    m_color_isSet = !json[QString("Color")].isNull() && m_color_isValid;

    m_display_order_isValid = ::OpenAPI::fromJsonValue(m_display_order, json[QString("DisplayOrder")]);
    m_display_order_isSet = !json[QString("DisplayOrder")].isNull() && m_display_order_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_task_status_code_isValid = ::OpenAPI::fromJsonValue(m_task_status_code, json[QString("TaskStatusCode")]);
    m_task_status_code_isSet = !json[QString("TaskStatusCode")].isNull() && m_task_status_code_isValid;

    m_task_type_name_isValid = ::OpenAPI::fromJsonValue(m_task_type_name, json[QString("TaskTypeName")]);
    m_task_type_name_isSet = !json[QString("TaskTypeName")].isNull() && m_task_type_name_isValid;

    m_is_complete_isValid = ::OpenAPI::fromJsonValue(m_is_complete, json[QString("isComplete")]);
    m_is_complete_isSet = !json[QString("isComplete")].isNull() && m_is_complete_isValid;
}

QString OAITaskStatusDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskStatusDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_account_task_type_idfk_isSet) {
        obj.insert(QString("AccountTaskTypeIDFK"), ::OpenAPI::toJsonValue(m_account_task_type_idfk));
    }
    if (m_color_isSet) {
        obj.insert(QString("Color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_display_order_isSet) {
        obj.insert(QString("DisplayOrder"), ::OpenAPI::toJsonValue(m_display_order));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_task_status_code_isSet) {
        obj.insert(QString("TaskStatusCode"), ::OpenAPI::toJsonValue(m_task_status_code));
    }
    if (m_task_type_name_isSet) {
        obj.insert(QString("TaskTypeName"), ::OpenAPI::toJsonValue(m_task_type_name));
    }
    if (m_is_complete_isSet) {
        obj.insert(QString("isComplete"), ::OpenAPI::toJsonValue(m_is_complete));
    }
    return obj;
}

qint32 OAITaskStatusDetails::getAccountTaskTypeIdfk() const {
    return m_account_task_type_idfk;
}
void OAITaskStatusDetails::setAccountTaskTypeIdfk(const qint32 &account_task_type_idfk) {
    m_account_task_type_idfk = account_task_type_idfk;
    m_account_task_type_idfk_isSet = true;
}

bool OAITaskStatusDetails::is_account_task_type_idfk_Set() const{
    return m_account_task_type_idfk_isSet;
}

bool OAITaskStatusDetails::is_account_task_type_idfk_Valid() const{
    return m_account_task_type_idfk_isValid;
}

QString OAITaskStatusDetails::getColor() const {
    return m_color;
}
void OAITaskStatusDetails::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAITaskStatusDetails::is_color_Set() const{
    return m_color_isSet;
}

bool OAITaskStatusDetails::is_color_Valid() const{
    return m_color_isValid;
}

qint32 OAITaskStatusDetails::getDisplayOrder() const {
    return m_display_order;
}
void OAITaskStatusDetails::setDisplayOrder(const qint32 &display_order) {
    m_display_order = display_order;
    m_display_order_isSet = true;
}

bool OAITaskStatusDetails::is_display_order_Set() const{
    return m_display_order_isSet;
}

bool OAITaskStatusDetails::is_display_order_Valid() const{
    return m_display_order_isValid;
}

QString OAITaskStatusDetails::getName() const {
    return m_name;
}
void OAITaskStatusDetails::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITaskStatusDetails::is_name_Set() const{
    return m_name_isSet;
}

bool OAITaskStatusDetails::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITaskStatusDetails::getTaskStatusCode() const {
    return m_task_status_code;
}
void OAITaskStatusDetails::setTaskStatusCode(const QString &task_status_code) {
    m_task_status_code = task_status_code;
    m_task_status_code_isSet = true;
}

bool OAITaskStatusDetails::is_task_status_code_Set() const{
    return m_task_status_code_isSet;
}

bool OAITaskStatusDetails::is_task_status_code_Valid() const{
    return m_task_status_code_isValid;
}

QString OAITaskStatusDetails::getTaskTypeName() const {
    return m_task_type_name;
}
void OAITaskStatusDetails::setTaskTypeName(const QString &task_type_name) {
    m_task_type_name = task_type_name;
    m_task_type_name_isSet = true;
}

bool OAITaskStatusDetails::is_task_type_name_Set() const{
    return m_task_type_name_isSet;
}

bool OAITaskStatusDetails::is_task_type_name_Valid() const{
    return m_task_type_name_isValid;
}

bool OAITaskStatusDetails::isIsComplete() const {
    return m_is_complete;
}
void OAITaskStatusDetails::setIsComplete(const bool &is_complete) {
    m_is_complete = is_complete;
    m_is_complete_isSet = true;
}

bool OAITaskStatusDetails::is_is_complete_Set() const{
    return m_is_complete_isSet;
}

bool OAITaskStatusDetails::is_is_complete_Valid() const{
    return m_is_complete_isValid;
}

bool OAITaskStatusDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_task_type_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_complete_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskStatusDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
