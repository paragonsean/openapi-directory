/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpenseDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpenseDetails::OAIExpenseDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpenseDetails::OAIExpenseDetails() {
    this->initializeModel();
}

OAIExpenseDetails::~OAIExpenseDetails() {}

void OAIExpenseDetails::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_attachment_preview_url_isSet = false;
    m_attachment_preview_url_isValid = false;

    m_attachment_url_isSet = false;
    m_attachment_url_isValid = false;

    m_chargeable_status_code_isSet = false;
    m_chargeable_status_code_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_customer_idfk_isSet = false;
    m_customer_idfk_isValid = false;

    m_customer_name_isSet = false;
    m_customer_name_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_exchange_rate_isSet = false;
    m_exchange_rate_isValid = false;

    m_expense_approval_status_code_isSet = false;
    m_expense_approval_status_code_isValid = false;

    m_expense_category_has_unit_price_isSet = false;
    m_expense_category_has_unit_price_isValid = false;

    m_expense_category_idfk_isSet = false;
    m_expense_category_idfk_isValid = false;

    m_expense_category_name_isSet = false;
    m_expense_category_name_isValid = false;

    m_expense_category_unit_name_isSet = false;
    m_expense_category_unit_name_isValid = false;

    m_expense_category_unit_price_isSet = false;
    m_expense_category_unit_price_isValid = false;

    m_expense_date_isSet = false;
    m_expense_date_isValid = false;

    m_expense_id_isSet = false;
    m_expense_id_isValid = false;

    m_expense_payment_method_idfk_isSet = false;
    m_expense_payment_method_idfk_isValid = false;

    m_expense_payment_method_name_isSet = false;
    m_expense_payment_method_name_isValid = false;

    m_expense_reimbursement_idfk_isSet = false;
    m_expense_reimbursement_idfk_isValid = false;

    m_expense_reimbursement_status_code_isSet = false;
    m_expense_reimbursement_status_code_isValid = false;

    m_expense_report_idfk_isSet = false;
    m_expense_report_idfk_isValid = false;

    m_expense_report_name_isSet = false;
    m_expense_report_name_isValid = false;

    m_file_attachment_idfk_isSet = false;
    m_file_attachment_idfk_isValid = false;

    m_firstname_isSet = false;
    m_firstname_isValid = false;

    m_lastname_isSet = false;
    m_lastname_isValid = false;

    m_merchant_isSet = false;
    m_merchant_isValid = false;

    m_merchant_tax_number_isSet = false;
    m_merchant_tax_number_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_project_code_isSet = false;
    m_project_code_isValid = false;

    m_project_idfk_isSet = false;
    m_project_idfk_isValid = false;

    m_project_title_isSet = false;
    m_project_title_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_task_idfk_isSet = false;
    m_task_idfk_isValid = false;

    m_task_title_isSet = false;
    m_task_title_isValid = false;

    m_tax_amount_isSet = false;
    m_tax_amount_isValid = false;

    m_tax_idfk_isSet = false;
    m_tax_idfk_isValid = false;

    m_tax_name_isSet = false;
    m_tax_name_isValid = false;

    m_transaction_tax_config_code_isSet = false;
    m_transaction_tax_config_code_isValid = false;

    m_transaction_tax_config_name_isSet = false;
    m_transaction_tax_config_name_isValid = false;

    m_user_idfk_isSet = false;
    m_user_idfk_isValid = false;

    m_is_chargeable_isSet = false;
    m_is_chargeable_isValid = false;

    m_is_official_exchange_rate_isSet = false;
    m_is_official_exchange_rate_isValid = false;

    m_is_reimbursable_isSet = false;
    m_is_reimbursable_isValid = false;
}

void OAIExpenseDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpenseDetails::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("Amount")]);
    m_amount_isSet = !json[QString("Amount")].isNull() && m_amount_isValid;

    m_attachment_preview_url_isValid = ::OpenAPI::fromJsonValue(m_attachment_preview_url, json[QString("AttachmentPreviewURL")]);
    m_attachment_preview_url_isSet = !json[QString("AttachmentPreviewURL")].isNull() && m_attachment_preview_url_isValid;

    m_attachment_url_isValid = ::OpenAPI::fromJsonValue(m_attachment_url, json[QString("AttachmentURL")]);
    m_attachment_url_isSet = !json[QString("AttachmentURL")].isNull() && m_attachment_url_isValid;

    m_chargeable_status_code_isValid = ::OpenAPI::fromJsonValue(m_chargeable_status_code, json[QString("ChargeableStatusCode")]);
    m_chargeable_status_code_isSet = !json[QString("ChargeableStatusCode")].isNull() && m_chargeable_status_code_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("CurrencyCode")]);
    m_currency_code_isSet = !json[QString("CurrencyCode")].isNull() && m_currency_code_isValid;

    m_customer_idfk_isValid = ::OpenAPI::fromJsonValue(m_customer_idfk, json[QString("CustomerIDFK")]);
    m_customer_idfk_isSet = !json[QString("CustomerIDFK")].isNull() && m_customer_idfk_isValid;

    m_customer_name_isValid = ::OpenAPI::fromJsonValue(m_customer_name, json[QString("CustomerName")]);
    m_customer_name_isSet = !json[QString("CustomerName")].isNull() && m_customer_name_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("DateCreated")]);
    m_date_created_isSet = !json[QString("DateCreated")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("DateUpdated")]);
    m_date_updated_isSet = !json[QString("DateUpdated")].isNull() && m_date_updated_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("Email")]);
    m_email_isSet = !json[QString("Email")].isNull() && m_email_isValid;

    m_exchange_rate_isValid = ::OpenAPI::fromJsonValue(m_exchange_rate, json[QString("ExchangeRate")]);
    m_exchange_rate_isSet = !json[QString("ExchangeRate")].isNull() && m_exchange_rate_isValid;

    m_expense_approval_status_code_isValid = ::OpenAPI::fromJsonValue(m_expense_approval_status_code, json[QString("ExpenseApprovalStatusCode")]);
    m_expense_approval_status_code_isSet = !json[QString("ExpenseApprovalStatusCode")].isNull() && m_expense_approval_status_code_isValid;

    m_expense_category_has_unit_price_isValid = ::OpenAPI::fromJsonValue(m_expense_category_has_unit_price, json[QString("ExpenseCategoryHasUnitPrice")]);
    m_expense_category_has_unit_price_isSet = !json[QString("ExpenseCategoryHasUnitPrice")].isNull() && m_expense_category_has_unit_price_isValid;

    m_expense_category_idfk_isValid = ::OpenAPI::fromJsonValue(m_expense_category_idfk, json[QString("ExpenseCategoryIDFK")]);
    m_expense_category_idfk_isSet = !json[QString("ExpenseCategoryIDFK")].isNull() && m_expense_category_idfk_isValid;

    m_expense_category_name_isValid = ::OpenAPI::fromJsonValue(m_expense_category_name, json[QString("ExpenseCategoryName")]);
    m_expense_category_name_isSet = !json[QString("ExpenseCategoryName")].isNull() && m_expense_category_name_isValid;

    m_expense_category_unit_name_isValid = ::OpenAPI::fromJsonValue(m_expense_category_unit_name, json[QString("ExpenseCategoryUnitName")]);
    m_expense_category_unit_name_isSet = !json[QString("ExpenseCategoryUnitName")].isNull() && m_expense_category_unit_name_isValid;

    m_expense_category_unit_price_isValid = ::OpenAPI::fromJsonValue(m_expense_category_unit_price, json[QString("ExpenseCategoryUnitPrice")]);
    m_expense_category_unit_price_isSet = !json[QString("ExpenseCategoryUnitPrice")].isNull() && m_expense_category_unit_price_isValid;

    m_expense_date_isValid = ::OpenAPI::fromJsonValue(m_expense_date, json[QString("ExpenseDate")]);
    m_expense_date_isSet = !json[QString("ExpenseDate")].isNull() && m_expense_date_isValid;

    m_expense_id_isValid = ::OpenAPI::fromJsonValue(m_expense_id, json[QString("ExpenseID")]);
    m_expense_id_isSet = !json[QString("ExpenseID")].isNull() && m_expense_id_isValid;

    m_expense_payment_method_idfk_isValid = ::OpenAPI::fromJsonValue(m_expense_payment_method_idfk, json[QString("ExpensePaymentMethodIDFK")]);
    m_expense_payment_method_idfk_isSet = !json[QString("ExpensePaymentMethodIDFK")].isNull() && m_expense_payment_method_idfk_isValid;

    m_expense_payment_method_name_isValid = ::OpenAPI::fromJsonValue(m_expense_payment_method_name, json[QString("ExpensePaymentMethodName")]);
    m_expense_payment_method_name_isSet = !json[QString("ExpensePaymentMethodName")].isNull() && m_expense_payment_method_name_isValid;

    m_expense_reimbursement_idfk_isValid = ::OpenAPI::fromJsonValue(m_expense_reimbursement_idfk, json[QString("ExpenseReimbursementIDFK")]);
    m_expense_reimbursement_idfk_isSet = !json[QString("ExpenseReimbursementIDFK")].isNull() && m_expense_reimbursement_idfk_isValid;

    m_expense_reimbursement_status_code_isValid = ::OpenAPI::fromJsonValue(m_expense_reimbursement_status_code, json[QString("ExpenseReimbursementStatusCode")]);
    m_expense_reimbursement_status_code_isSet = !json[QString("ExpenseReimbursementStatusCode")].isNull() && m_expense_reimbursement_status_code_isValid;

    m_expense_report_idfk_isValid = ::OpenAPI::fromJsonValue(m_expense_report_idfk, json[QString("ExpenseReportIDFK")]);
    m_expense_report_idfk_isSet = !json[QString("ExpenseReportIDFK")].isNull() && m_expense_report_idfk_isValid;

    m_expense_report_name_isValid = ::OpenAPI::fromJsonValue(m_expense_report_name, json[QString("ExpenseReportName")]);
    m_expense_report_name_isSet = !json[QString("ExpenseReportName")].isNull() && m_expense_report_name_isValid;

    m_file_attachment_idfk_isValid = ::OpenAPI::fromJsonValue(m_file_attachment_idfk, json[QString("FileAttachmentIDFK")]);
    m_file_attachment_idfk_isSet = !json[QString("FileAttachmentIDFK")].isNull() && m_file_attachment_idfk_isValid;

    m_firstname_isValid = ::OpenAPI::fromJsonValue(m_firstname, json[QString("Firstname")]);
    m_firstname_isSet = !json[QString("Firstname")].isNull() && m_firstname_isValid;

    m_lastname_isValid = ::OpenAPI::fromJsonValue(m_lastname, json[QString("Lastname")]);
    m_lastname_isSet = !json[QString("Lastname")].isNull() && m_lastname_isValid;

    m_merchant_isValid = ::OpenAPI::fromJsonValue(m_merchant, json[QString("Merchant")]);
    m_merchant_isSet = !json[QString("Merchant")].isNull() && m_merchant_isValid;

    m_merchant_tax_number_isValid = ::OpenAPI::fromJsonValue(m_merchant_tax_number, json[QString("MerchantTaxNumber")]);
    m_merchant_tax_number_isSet = !json[QString("MerchantTaxNumber")].isNull() && m_merchant_tax_number_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("Notes")]);
    m_notes_isSet = !json[QString("Notes")].isNull() && m_notes_isValid;

    m_project_code_isValid = ::OpenAPI::fromJsonValue(m_project_code, json[QString("ProjectCode")]);
    m_project_code_isSet = !json[QString("ProjectCode")].isNull() && m_project_code_isValid;

    m_project_idfk_isValid = ::OpenAPI::fromJsonValue(m_project_idfk, json[QString("ProjectIDFK")]);
    m_project_idfk_isSet = !json[QString("ProjectIDFK")].isNull() && m_project_idfk_isValid;

    m_project_title_isValid = ::OpenAPI::fromJsonValue(m_project_title, json[QString("ProjectTitle")]);
    m_project_title_isSet = !json[QString("ProjectTitle")].isNull() && m_project_title_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("Quantity")]);
    m_quantity_isSet = !json[QString("Quantity")].isNull() && m_quantity_isValid;

    m_task_idfk_isValid = ::OpenAPI::fromJsonValue(m_task_idfk, json[QString("TaskIDFK")]);
    m_task_idfk_isSet = !json[QString("TaskIDFK")].isNull() && m_task_idfk_isValid;

    m_task_title_isValid = ::OpenAPI::fromJsonValue(m_task_title, json[QString("TaskTitle")]);
    m_task_title_isSet = !json[QString("TaskTitle")].isNull() && m_task_title_isValid;

    m_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_tax_amount, json[QString("TaxAmount")]);
    m_tax_amount_isSet = !json[QString("TaxAmount")].isNull() && m_tax_amount_isValid;

    m_tax_idfk_isValid = ::OpenAPI::fromJsonValue(m_tax_idfk, json[QString("TaxIDFK")]);
    m_tax_idfk_isSet = !json[QString("TaxIDFK")].isNull() && m_tax_idfk_isValid;

    m_tax_name_isValid = ::OpenAPI::fromJsonValue(m_tax_name, json[QString("TaxName")]);
    m_tax_name_isSet = !json[QString("TaxName")].isNull() && m_tax_name_isValid;

    m_transaction_tax_config_code_isValid = ::OpenAPI::fromJsonValue(m_transaction_tax_config_code, json[QString("TransactionTaxConfigCode")]);
    m_transaction_tax_config_code_isSet = !json[QString("TransactionTaxConfigCode")].isNull() && m_transaction_tax_config_code_isValid;

    m_transaction_tax_config_name_isValid = ::OpenAPI::fromJsonValue(m_transaction_tax_config_name, json[QString("TransactionTaxConfigName")]);
    m_transaction_tax_config_name_isSet = !json[QString("TransactionTaxConfigName")].isNull() && m_transaction_tax_config_name_isValid;

    m_user_idfk_isValid = ::OpenAPI::fromJsonValue(m_user_idfk, json[QString("UserIDFK")]);
    m_user_idfk_isSet = !json[QString("UserIDFK")].isNull() && m_user_idfk_isValid;

    m_is_chargeable_isValid = ::OpenAPI::fromJsonValue(m_is_chargeable, json[QString("isChargeable")]);
    m_is_chargeable_isSet = !json[QString("isChargeable")].isNull() && m_is_chargeable_isValid;

    m_is_official_exchange_rate_isValid = ::OpenAPI::fromJsonValue(m_is_official_exchange_rate, json[QString("isOfficialExchangeRate")]);
    m_is_official_exchange_rate_isSet = !json[QString("isOfficialExchangeRate")].isNull() && m_is_official_exchange_rate_isValid;

    m_is_reimbursable_isValid = ::OpenAPI::fromJsonValue(m_is_reimbursable, json[QString("isReimbursable")]);
    m_is_reimbursable_isSet = !json[QString("isReimbursable")].isNull() && m_is_reimbursable_isValid;
}

QString OAIExpenseDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpenseDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("Amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_attachment_preview_url_isSet) {
        obj.insert(QString("AttachmentPreviewURL"), ::OpenAPI::toJsonValue(m_attachment_preview_url));
    }
    if (m_attachment_url_isSet) {
        obj.insert(QString("AttachmentURL"), ::OpenAPI::toJsonValue(m_attachment_url));
    }
    if (m_chargeable_status_code_isSet) {
        obj.insert(QString("ChargeableStatusCode"), ::OpenAPI::toJsonValue(m_chargeable_status_code));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("CurrencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_customer_idfk_isSet) {
        obj.insert(QString("CustomerIDFK"), ::OpenAPI::toJsonValue(m_customer_idfk));
    }
    if (m_customer_name_isSet) {
        obj.insert(QString("CustomerName"), ::OpenAPI::toJsonValue(m_customer_name));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("DateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("DateUpdated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_email_isSet) {
        obj.insert(QString("Email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_exchange_rate_isSet) {
        obj.insert(QString("ExchangeRate"), ::OpenAPI::toJsonValue(m_exchange_rate));
    }
    if (m_expense_approval_status_code_isSet) {
        obj.insert(QString("ExpenseApprovalStatusCode"), ::OpenAPI::toJsonValue(m_expense_approval_status_code));
    }
    if (m_expense_category_has_unit_price_isSet) {
        obj.insert(QString("ExpenseCategoryHasUnitPrice"), ::OpenAPI::toJsonValue(m_expense_category_has_unit_price));
    }
    if (m_expense_category_idfk_isSet) {
        obj.insert(QString("ExpenseCategoryIDFK"), ::OpenAPI::toJsonValue(m_expense_category_idfk));
    }
    if (m_expense_category_name_isSet) {
        obj.insert(QString("ExpenseCategoryName"), ::OpenAPI::toJsonValue(m_expense_category_name));
    }
    if (m_expense_category_unit_name_isSet) {
        obj.insert(QString("ExpenseCategoryUnitName"), ::OpenAPI::toJsonValue(m_expense_category_unit_name));
    }
    if (m_expense_category_unit_price_isSet) {
        obj.insert(QString("ExpenseCategoryUnitPrice"), ::OpenAPI::toJsonValue(m_expense_category_unit_price));
    }
    if (m_expense_date_isSet) {
        obj.insert(QString("ExpenseDate"), ::OpenAPI::toJsonValue(m_expense_date));
    }
    if (m_expense_id_isSet) {
        obj.insert(QString("ExpenseID"), ::OpenAPI::toJsonValue(m_expense_id));
    }
    if (m_expense_payment_method_idfk_isSet) {
        obj.insert(QString("ExpensePaymentMethodIDFK"), ::OpenAPI::toJsonValue(m_expense_payment_method_idfk));
    }
    if (m_expense_payment_method_name_isSet) {
        obj.insert(QString("ExpensePaymentMethodName"), ::OpenAPI::toJsonValue(m_expense_payment_method_name));
    }
    if (m_expense_reimbursement_idfk_isSet) {
        obj.insert(QString("ExpenseReimbursementIDFK"), ::OpenAPI::toJsonValue(m_expense_reimbursement_idfk));
    }
    if (m_expense_reimbursement_status_code_isSet) {
        obj.insert(QString("ExpenseReimbursementStatusCode"), ::OpenAPI::toJsonValue(m_expense_reimbursement_status_code));
    }
    if (m_expense_report_idfk_isSet) {
        obj.insert(QString("ExpenseReportIDFK"), ::OpenAPI::toJsonValue(m_expense_report_idfk));
    }
    if (m_expense_report_name_isSet) {
        obj.insert(QString("ExpenseReportName"), ::OpenAPI::toJsonValue(m_expense_report_name));
    }
    if (m_file_attachment_idfk_isSet) {
        obj.insert(QString("FileAttachmentIDFK"), ::OpenAPI::toJsonValue(m_file_attachment_idfk));
    }
    if (m_firstname_isSet) {
        obj.insert(QString("Firstname"), ::OpenAPI::toJsonValue(m_firstname));
    }
    if (m_lastname_isSet) {
        obj.insert(QString("Lastname"), ::OpenAPI::toJsonValue(m_lastname));
    }
    if (m_merchant_isSet) {
        obj.insert(QString("Merchant"), ::OpenAPI::toJsonValue(m_merchant));
    }
    if (m_merchant_tax_number_isSet) {
        obj.insert(QString("MerchantTaxNumber"), ::OpenAPI::toJsonValue(m_merchant_tax_number));
    }
    if (m_notes_isSet) {
        obj.insert(QString("Notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_project_code_isSet) {
        obj.insert(QString("ProjectCode"), ::OpenAPI::toJsonValue(m_project_code));
    }
    if (m_project_idfk_isSet) {
        obj.insert(QString("ProjectIDFK"), ::OpenAPI::toJsonValue(m_project_idfk));
    }
    if (m_project_title_isSet) {
        obj.insert(QString("ProjectTitle"), ::OpenAPI::toJsonValue(m_project_title));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("Quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_task_idfk_isSet) {
        obj.insert(QString("TaskIDFK"), ::OpenAPI::toJsonValue(m_task_idfk));
    }
    if (m_task_title_isSet) {
        obj.insert(QString("TaskTitle"), ::OpenAPI::toJsonValue(m_task_title));
    }
    if (m_tax_amount_isSet) {
        obj.insert(QString("TaxAmount"), ::OpenAPI::toJsonValue(m_tax_amount));
    }
    if (m_tax_idfk_isSet) {
        obj.insert(QString("TaxIDFK"), ::OpenAPI::toJsonValue(m_tax_idfk));
    }
    if (m_tax_name_isSet) {
        obj.insert(QString("TaxName"), ::OpenAPI::toJsonValue(m_tax_name));
    }
    if (m_transaction_tax_config_code_isSet) {
        obj.insert(QString("TransactionTaxConfigCode"), ::OpenAPI::toJsonValue(m_transaction_tax_config_code));
    }
    if (m_transaction_tax_config_name_isSet) {
        obj.insert(QString("TransactionTaxConfigName"), ::OpenAPI::toJsonValue(m_transaction_tax_config_name));
    }
    if (m_user_idfk_isSet) {
        obj.insert(QString("UserIDFK"), ::OpenAPI::toJsonValue(m_user_idfk));
    }
    if (m_is_chargeable_isSet) {
        obj.insert(QString("isChargeable"), ::OpenAPI::toJsonValue(m_is_chargeable));
    }
    if (m_is_official_exchange_rate_isSet) {
        obj.insert(QString("isOfficialExchangeRate"), ::OpenAPI::toJsonValue(m_is_official_exchange_rate));
    }
    if (m_is_reimbursable_isSet) {
        obj.insert(QString("isReimbursable"), ::OpenAPI::toJsonValue(m_is_reimbursable));
    }
    return obj;
}

double OAIExpenseDetails::getAmount() const {
    return m_amount;
}
void OAIExpenseDetails::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIExpenseDetails::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIExpenseDetails::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIExpenseDetails::getAttachmentPreviewUrl() const {
    return m_attachment_preview_url;
}
void OAIExpenseDetails::setAttachmentPreviewUrl(const QString &attachment_preview_url) {
    m_attachment_preview_url = attachment_preview_url;
    m_attachment_preview_url_isSet = true;
}

bool OAIExpenseDetails::is_attachment_preview_url_Set() const{
    return m_attachment_preview_url_isSet;
}

bool OAIExpenseDetails::is_attachment_preview_url_Valid() const{
    return m_attachment_preview_url_isValid;
}

QString OAIExpenseDetails::getAttachmentUrl() const {
    return m_attachment_url;
}
void OAIExpenseDetails::setAttachmentUrl(const QString &attachment_url) {
    m_attachment_url = attachment_url;
    m_attachment_url_isSet = true;
}

bool OAIExpenseDetails::is_attachment_url_Set() const{
    return m_attachment_url_isSet;
}

bool OAIExpenseDetails::is_attachment_url_Valid() const{
    return m_attachment_url_isValid;
}

QString OAIExpenseDetails::getChargeableStatusCode() const {
    return m_chargeable_status_code;
}
void OAIExpenseDetails::setChargeableStatusCode(const QString &chargeable_status_code) {
    m_chargeable_status_code = chargeable_status_code;
    m_chargeable_status_code_isSet = true;
}

bool OAIExpenseDetails::is_chargeable_status_code_Set() const{
    return m_chargeable_status_code_isSet;
}

bool OAIExpenseDetails::is_chargeable_status_code_Valid() const{
    return m_chargeable_status_code_isValid;
}

QString OAIExpenseDetails::getCurrencyCode() const {
    return m_currency_code;
}
void OAIExpenseDetails::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIExpenseDetails::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIExpenseDetails::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

qint32 OAIExpenseDetails::getCustomerIdfk() const {
    return m_customer_idfk;
}
void OAIExpenseDetails::setCustomerIdfk(const qint32 &customer_idfk) {
    m_customer_idfk = customer_idfk;
    m_customer_idfk_isSet = true;
}

bool OAIExpenseDetails::is_customer_idfk_Set() const{
    return m_customer_idfk_isSet;
}

bool OAIExpenseDetails::is_customer_idfk_Valid() const{
    return m_customer_idfk_isValid;
}

QString OAIExpenseDetails::getCustomerName() const {
    return m_customer_name;
}
void OAIExpenseDetails::setCustomerName(const QString &customer_name) {
    m_customer_name = customer_name;
    m_customer_name_isSet = true;
}

bool OAIExpenseDetails::is_customer_name_Set() const{
    return m_customer_name_isSet;
}

bool OAIExpenseDetails::is_customer_name_Valid() const{
    return m_customer_name_isValid;
}

QDateTime OAIExpenseDetails::getDateCreated() const {
    return m_date_created;
}
void OAIExpenseDetails::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIExpenseDetails::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIExpenseDetails::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIExpenseDetails::getDateUpdated() const {
    return m_date_updated;
}
void OAIExpenseDetails::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIExpenseDetails::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIExpenseDetails::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QString OAIExpenseDetails::getEmail() const {
    return m_email;
}
void OAIExpenseDetails::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIExpenseDetails::is_email_Set() const{
    return m_email_isSet;
}

bool OAIExpenseDetails::is_email_Valid() const{
    return m_email_isValid;
}

double OAIExpenseDetails::getExchangeRate() const {
    return m_exchange_rate;
}
void OAIExpenseDetails::setExchangeRate(const double &exchange_rate) {
    m_exchange_rate = exchange_rate;
    m_exchange_rate_isSet = true;
}

bool OAIExpenseDetails::is_exchange_rate_Set() const{
    return m_exchange_rate_isSet;
}

bool OAIExpenseDetails::is_exchange_rate_Valid() const{
    return m_exchange_rate_isValid;
}

QString OAIExpenseDetails::getExpenseApprovalStatusCode() const {
    return m_expense_approval_status_code;
}
void OAIExpenseDetails::setExpenseApprovalStatusCode(const QString &expense_approval_status_code) {
    m_expense_approval_status_code = expense_approval_status_code;
    m_expense_approval_status_code_isSet = true;
}

bool OAIExpenseDetails::is_expense_approval_status_code_Set() const{
    return m_expense_approval_status_code_isSet;
}

bool OAIExpenseDetails::is_expense_approval_status_code_Valid() const{
    return m_expense_approval_status_code_isValid;
}

bool OAIExpenseDetails::isExpenseCategoryHasUnitPrice() const {
    return m_expense_category_has_unit_price;
}
void OAIExpenseDetails::setExpenseCategoryHasUnitPrice(const bool &expense_category_has_unit_price) {
    m_expense_category_has_unit_price = expense_category_has_unit_price;
    m_expense_category_has_unit_price_isSet = true;
}

bool OAIExpenseDetails::is_expense_category_has_unit_price_Set() const{
    return m_expense_category_has_unit_price_isSet;
}

bool OAIExpenseDetails::is_expense_category_has_unit_price_Valid() const{
    return m_expense_category_has_unit_price_isValid;
}

qint32 OAIExpenseDetails::getExpenseCategoryIdfk() const {
    return m_expense_category_idfk;
}
void OAIExpenseDetails::setExpenseCategoryIdfk(const qint32 &expense_category_idfk) {
    m_expense_category_idfk = expense_category_idfk;
    m_expense_category_idfk_isSet = true;
}

bool OAIExpenseDetails::is_expense_category_idfk_Set() const{
    return m_expense_category_idfk_isSet;
}

bool OAIExpenseDetails::is_expense_category_idfk_Valid() const{
    return m_expense_category_idfk_isValid;
}

QString OAIExpenseDetails::getExpenseCategoryName() const {
    return m_expense_category_name;
}
void OAIExpenseDetails::setExpenseCategoryName(const QString &expense_category_name) {
    m_expense_category_name = expense_category_name;
    m_expense_category_name_isSet = true;
}

bool OAIExpenseDetails::is_expense_category_name_Set() const{
    return m_expense_category_name_isSet;
}

bool OAIExpenseDetails::is_expense_category_name_Valid() const{
    return m_expense_category_name_isValid;
}

QString OAIExpenseDetails::getExpenseCategoryUnitName() const {
    return m_expense_category_unit_name;
}
void OAIExpenseDetails::setExpenseCategoryUnitName(const QString &expense_category_unit_name) {
    m_expense_category_unit_name = expense_category_unit_name;
    m_expense_category_unit_name_isSet = true;
}

bool OAIExpenseDetails::is_expense_category_unit_name_Set() const{
    return m_expense_category_unit_name_isSet;
}

bool OAIExpenseDetails::is_expense_category_unit_name_Valid() const{
    return m_expense_category_unit_name_isValid;
}

double OAIExpenseDetails::getExpenseCategoryUnitPrice() const {
    return m_expense_category_unit_price;
}
void OAIExpenseDetails::setExpenseCategoryUnitPrice(const double &expense_category_unit_price) {
    m_expense_category_unit_price = expense_category_unit_price;
    m_expense_category_unit_price_isSet = true;
}

bool OAIExpenseDetails::is_expense_category_unit_price_Set() const{
    return m_expense_category_unit_price_isSet;
}

bool OAIExpenseDetails::is_expense_category_unit_price_Valid() const{
    return m_expense_category_unit_price_isValid;
}

QDateTime OAIExpenseDetails::getExpenseDate() const {
    return m_expense_date;
}
void OAIExpenseDetails::setExpenseDate(const QDateTime &expense_date) {
    m_expense_date = expense_date;
    m_expense_date_isSet = true;
}

bool OAIExpenseDetails::is_expense_date_Set() const{
    return m_expense_date_isSet;
}

bool OAIExpenseDetails::is_expense_date_Valid() const{
    return m_expense_date_isValid;
}

qint64 OAIExpenseDetails::getExpenseId() const {
    return m_expense_id;
}
void OAIExpenseDetails::setExpenseId(const qint64 &expense_id) {
    m_expense_id = expense_id;
    m_expense_id_isSet = true;
}

bool OAIExpenseDetails::is_expense_id_Set() const{
    return m_expense_id_isSet;
}

bool OAIExpenseDetails::is_expense_id_Valid() const{
    return m_expense_id_isValid;
}

qint32 OAIExpenseDetails::getExpensePaymentMethodIdfk() const {
    return m_expense_payment_method_idfk;
}
void OAIExpenseDetails::setExpensePaymentMethodIdfk(const qint32 &expense_payment_method_idfk) {
    m_expense_payment_method_idfk = expense_payment_method_idfk;
    m_expense_payment_method_idfk_isSet = true;
}

bool OAIExpenseDetails::is_expense_payment_method_idfk_Set() const{
    return m_expense_payment_method_idfk_isSet;
}

bool OAIExpenseDetails::is_expense_payment_method_idfk_Valid() const{
    return m_expense_payment_method_idfk_isValid;
}

QString OAIExpenseDetails::getExpensePaymentMethodName() const {
    return m_expense_payment_method_name;
}
void OAIExpenseDetails::setExpensePaymentMethodName(const QString &expense_payment_method_name) {
    m_expense_payment_method_name = expense_payment_method_name;
    m_expense_payment_method_name_isSet = true;
}

bool OAIExpenseDetails::is_expense_payment_method_name_Set() const{
    return m_expense_payment_method_name_isSet;
}

bool OAIExpenseDetails::is_expense_payment_method_name_Valid() const{
    return m_expense_payment_method_name_isValid;
}

qint64 OAIExpenseDetails::getExpenseReimbursementIdfk() const {
    return m_expense_reimbursement_idfk;
}
void OAIExpenseDetails::setExpenseReimbursementIdfk(const qint64 &expense_reimbursement_idfk) {
    m_expense_reimbursement_idfk = expense_reimbursement_idfk;
    m_expense_reimbursement_idfk_isSet = true;
}

bool OAIExpenseDetails::is_expense_reimbursement_idfk_Set() const{
    return m_expense_reimbursement_idfk_isSet;
}

bool OAIExpenseDetails::is_expense_reimbursement_idfk_Valid() const{
    return m_expense_reimbursement_idfk_isValid;
}

QString OAIExpenseDetails::getExpenseReimbursementStatusCode() const {
    return m_expense_reimbursement_status_code;
}
void OAIExpenseDetails::setExpenseReimbursementStatusCode(const QString &expense_reimbursement_status_code) {
    m_expense_reimbursement_status_code = expense_reimbursement_status_code;
    m_expense_reimbursement_status_code_isSet = true;
}

bool OAIExpenseDetails::is_expense_reimbursement_status_code_Set() const{
    return m_expense_reimbursement_status_code_isSet;
}

bool OAIExpenseDetails::is_expense_reimbursement_status_code_Valid() const{
    return m_expense_reimbursement_status_code_isValid;
}

qint64 OAIExpenseDetails::getExpenseReportIdfk() const {
    return m_expense_report_idfk;
}
void OAIExpenseDetails::setExpenseReportIdfk(const qint64 &expense_report_idfk) {
    m_expense_report_idfk = expense_report_idfk;
    m_expense_report_idfk_isSet = true;
}

bool OAIExpenseDetails::is_expense_report_idfk_Set() const{
    return m_expense_report_idfk_isSet;
}

bool OAIExpenseDetails::is_expense_report_idfk_Valid() const{
    return m_expense_report_idfk_isValid;
}

QString OAIExpenseDetails::getExpenseReportName() const {
    return m_expense_report_name;
}
void OAIExpenseDetails::setExpenseReportName(const QString &expense_report_name) {
    m_expense_report_name = expense_report_name;
    m_expense_report_name_isSet = true;
}

bool OAIExpenseDetails::is_expense_report_name_Set() const{
    return m_expense_report_name_isSet;
}

bool OAIExpenseDetails::is_expense_report_name_Valid() const{
    return m_expense_report_name_isValid;
}

qint64 OAIExpenseDetails::getFileAttachmentIdfk() const {
    return m_file_attachment_idfk;
}
void OAIExpenseDetails::setFileAttachmentIdfk(const qint64 &file_attachment_idfk) {
    m_file_attachment_idfk = file_attachment_idfk;
    m_file_attachment_idfk_isSet = true;
}

bool OAIExpenseDetails::is_file_attachment_idfk_Set() const{
    return m_file_attachment_idfk_isSet;
}

bool OAIExpenseDetails::is_file_attachment_idfk_Valid() const{
    return m_file_attachment_idfk_isValid;
}

QString OAIExpenseDetails::getFirstname() const {
    return m_firstname;
}
void OAIExpenseDetails::setFirstname(const QString &firstname) {
    m_firstname = firstname;
    m_firstname_isSet = true;
}

bool OAIExpenseDetails::is_firstname_Set() const{
    return m_firstname_isSet;
}

bool OAIExpenseDetails::is_firstname_Valid() const{
    return m_firstname_isValid;
}

QString OAIExpenseDetails::getLastname() const {
    return m_lastname;
}
void OAIExpenseDetails::setLastname(const QString &lastname) {
    m_lastname = lastname;
    m_lastname_isSet = true;
}

bool OAIExpenseDetails::is_lastname_Set() const{
    return m_lastname_isSet;
}

bool OAIExpenseDetails::is_lastname_Valid() const{
    return m_lastname_isValid;
}

QString OAIExpenseDetails::getMerchant() const {
    return m_merchant;
}
void OAIExpenseDetails::setMerchant(const QString &merchant) {
    m_merchant = merchant;
    m_merchant_isSet = true;
}

bool OAIExpenseDetails::is_merchant_Set() const{
    return m_merchant_isSet;
}

bool OAIExpenseDetails::is_merchant_Valid() const{
    return m_merchant_isValid;
}

QString OAIExpenseDetails::getMerchantTaxNumber() const {
    return m_merchant_tax_number;
}
void OAIExpenseDetails::setMerchantTaxNumber(const QString &merchant_tax_number) {
    m_merchant_tax_number = merchant_tax_number;
    m_merchant_tax_number_isSet = true;
}

bool OAIExpenseDetails::is_merchant_tax_number_Set() const{
    return m_merchant_tax_number_isSet;
}

bool OAIExpenseDetails::is_merchant_tax_number_Valid() const{
    return m_merchant_tax_number_isValid;
}

QString OAIExpenseDetails::getNotes() const {
    return m_notes;
}
void OAIExpenseDetails::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIExpenseDetails::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIExpenseDetails::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIExpenseDetails::getProjectCode() const {
    return m_project_code;
}
void OAIExpenseDetails::setProjectCode(const QString &project_code) {
    m_project_code = project_code;
    m_project_code_isSet = true;
}

bool OAIExpenseDetails::is_project_code_Set() const{
    return m_project_code_isSet;
}

bool OAIExpenseDetails::is_project_code_Valid() const{
    return m_project_code_isValid;
}

qint32 OAIExpenseDetails::getProjectIdfk() const {
    return m_project_idfk;
}
void OAIExpenseDetails::setProjectIdfk(const qint32 &project_idfk) {
    m_project_idfk = project_idfk;
    m_project_idfk_isSet = true;
}

bool OAIExpenseDetails::is_project_idfk_Set() const{
    return m_project_idfk_isSet;
}

bool OAIExpenseDetails::is_project_idfk_Valid() const{
    return m_project_idfk_isValid;
}

QString OAIExpenseDetails::getProjectTitle() const {
    return m_project_title;
}
void OAIExpenseDetails::setProjectTitle(const QString &project_title) {
    m_project_title = project_title;
    m_project_title_isSet = true;
}

bool OAIExpenseDetails::is_project_title_Set() const{
    return m_project_title_isSet;
}

bool OAIExpenseDetails::is_project_title_Valid() const{
    return m_project_title_isValid;
}

double OAIExpenseDetails::getQuantity() const {
    return m_quantity;
}
void OAIExpenseDetails::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIExpenseDetails::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIExpenseDetails::is_quantity_Valid() const{
    return m_quantity_isValid;
}

qint32 OAIExpenseDetails::getTaskIdfk() const {
    return m_task_idfk;
}
void OAIExpenseDetails::setTaskIdfk(const qint32 &task_idfk) {
    m_task_idfk = task_idfk;
    m_task_idfk_isSet = true;
}

bool OAIExpenseDetails::is_task_idfk_Set() const{
    return m_task_idfk_isSet;
}

bool OAIExpenseDetails::is_task_idfk_Valid() const{
    return m_task_idfk_isValid;
}

QString OAIExpenseDetails::getTaskTitle() const {
    return m_task_title;
}
void OAIExpenseDetails::setTaskTitle(const QString &task_title) {
    m_task_title = task_title;
    m_task_title_isSet = true;
}

bool OAIExpenseDetails::is_task_title_Set() const{
    return m_task_title_isSet;
}

bool OAIExpenseDetails::is_task_title_Valid() const{
    return m_task_title_isValid;
}

double OAIExpenseDetails::getTaxAmount() const {
    return m_tax_amount;
}
void OAIExpenseDetails::setTaxAmount(const double &tax_amount) {
    m_tax_amount = tax_amount;
    m_tax_amount_isSet = true;
}

bool OAIExpenseDetails::is_tax_amount_Set() const{
    return m_tax_amount_isSet;
}

bool OAIExpenseDetails::is_tax_amount_Valid() const{
    return m_tax_amount_isValid;
}

qint32 OAIExpenseDetails::getTaxIdfk() const {
    return m_tax_idfk;
}
void OAIExpenseDetails::setTaxIdfk(const qint32 &tax_idfk) {
    m_tax_idfk = tax_idfk;
    m_tax_idfk_isSet = true;
}

bool OAIExpenseDetails::is_tax_idfk_Set() const{
    return m_tax_idfk_isSet;
}

bool OAIExpenseDetails::is_tax_idfk_Valid() const{
    return m_tax_idfk_isValid;
}

QString OAIExpenseDetails::getTaxName() const {
    return m_tax_name;
}
void OAIExpenseDetails::setTaxName(const QString &tax_name) {
    m_tax_name = tax_name;
    m_tax_name_isSet = true;
}

bool OAIExpenseDetails::is_tax_name_Set() const{
    return m_tax_name_isSet;
}

bool OAIExpenseDetails::is_tax_name_Valid() const{
    return m_tax_name_isValid;
}

QString OAIExpenseDetails::getTransactionTaxConfigCode() const {
    return m_transaction_tax_config_code;
}
void OAIExpenseDetails::setTransactionTaxConfigCode(const QString &transaction_tax_config_code) {
    m_transaction_tax_config_code = transaction_tax_config_code;
    m_transaction_tax_config_code_isSet = true;
}

bool OAIExpenseDetails::is_transaction_tax_config_code_Set() const{
    return m_transaction_tax_config_code_isSet;
}

bool OAIExpenseDetails::is_transaction_tax_config_code_Valid() const{
    return m_transaction_tax_config_code_isValid;
}

QString OAIExpenseDetails::getTransactionTaxConfigName() const {
    return m_transaction_tax_config_name;
}
void OAIExpenseDetails::setTransactionTaxConfigName(const QString &transaction_tax_config_name) {
    m_transaction_tax_config_name = transaction_tax_config_name;
    m_transaction_tax_config_name_isSet = true;
}

bool OAIExpenseDetails::is_transaction_tax_config_name_Set() const{
    return m_transaction_tax_config_name_isSet;
}

bool OAIExpenseDetails::is_transaction_tax_config_name_Valid() const{
    return m_transaction_tax_config_name_isValid;
}

qint32 OAIExpenseDetails::getUserIdfk() const {
    return m_user_idfk;
}
void OAIExpenseDetails::setUserIdfk(const qint32 &user_idfk) {
    m_user_idfk = user_idfk;
    m_user_idfk_isSet = true;
}

bool OAIExpenseDetails::is_user_idfk_Set() const{
    return m_user_idfk_isSet;
}

bool OAIExpenseDetails::is_user_idfk_Valid() const{
    return m_user_idfk_isValid;
}

bool OAIExpenseDetails::isIsChargeable() const {
    return m_is_chargeable;
}
void OAIExpenseDetails::setIsChargeable(const bool &is_chargeable) {
    m_is_chargeable = is_chargeable;
    m_is_chargeable_isSet = true;
}

bool OAIExpenseDetails::is_is_chargeable_Set() const{
    return m_is_chargeable_isSet;
}

bool OAIExpenseDetails::is_is_chargeable_Valid() const{
    return m_is_chargeable_isValid;
}

bool OAIExpenseDetails::isIsOfficialExchangeRate() const {
    return m_is_official_exchange_rate;
}
void OAIExpenseDetails::setIsOfficialExchangeRate(const bool &is_official_exchange_rate) {
    m_is_official_exchange_rate = is_official_exchange_rate;
    m_is_official_exchange_rate_isSet = true;
}

bool OAIExpenseDetails::is_is_official_exchange_rate_Set() const{
    return m_is_official_exchange_rate_isSet;
}

bool OAIExpenseDetails::is_is_official_exchange_rate_Valid() const{
    return m_is_official_exchange_rate_isValid;
}

bool OAIExpenseDetails::isIsReimbursable() const {
    return m_is_reimbursable;
}
void OAIExpenseDetails::setIsReimbursable(const bool &is_reimbursable) {
    m_is_reimbursable = is_reimbursable;
    m_is_reimbursable_isSet = true;
}

bool OAIExpenseDetails::is_is_reimbursable_Set() const{
    return m_is_reimbursable_isSet;
}

bool OAIExpenseDetails::is_is_reimbursable_Valid() const{
    return m_is_reimbursable_isValid;
}

bool OAIExpenseDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachment_preview_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachment_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chargeable_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_approval_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_category_has_unit_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_category_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_category_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_category_unit_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_category_unit_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_payment_method_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_payment_method_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_reimbursement_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_reimbursement_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_report_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_report_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_attachment_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firstname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lastname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_tax_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_tax_config_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_tax_config_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_chargeable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_official_exchange_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_reimbursable_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpenseDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
