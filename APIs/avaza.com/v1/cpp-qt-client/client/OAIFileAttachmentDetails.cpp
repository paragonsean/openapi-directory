/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileAttachmentDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFileAttachmentDetails::OAIFileAttachmentDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFileAttachmentDetails::OAIFileAttachmentDetails() {
    this->initializeModel();
}

OAIFileAttachmentDetails::~OAIFileAttachmentDetails() {}

void OAIFileAttachmentDetails::initializeModel() {

    m_file_attachment_id_isSet = false;
    m_file_attachment_id_isValid = false;

    m_original_filename_isSet = false;
    m_original_filename_isValid = false;

    m_preview_base_url_isSet = false;
    m_preview_base_url_isValid = false;

    m_public_file_url_isSet = false;
    m_public_file_url_isValid = false;

    m_size_bytes_isSet = false;
    m_size_bytes_isValid = false;
}

void OAIFileAttachmentDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFileAttachmentDetails::fromJsonObject(QJsonObject json) {

    m_file_attachment_id_isValid = ::OpenAPI::fromJsonValue(m_file_attachment_id, json[QString("FileAttachmentID")]);
    m_file_attachment_id_isSet = !json[QString("FileAttachmentID")].isNull() && m_file_attachment_id_isValid;

    m_original_filename_isValid = ::OpenAPI::fromJsonValue(m_original_filename, json[QString("OriginalFilename")]);
    m_original_filename_isSet = !json[QString("OriginalFilename")].isNull() && m_original_filename_isValid;

    m_preview_base_url_isValid = ::OpenAPI::fromJsonValue(m_preview_base_url, json[QString("PreviewBaseURL")]);
    m_preview_base_url_isSet = !json[QString("PreviewBaseURL")].isNull() && m_preview_base_url_isValid;

    m_public_file_url_isValid = ::OpenAPI::fromJsonValue(m_public_file_url, json[QString("PublicFileURL")]);
    m_public_file_url_isSet = !json[QString("PublicFileURL")].isNull() && m_public_file_url_isValid;

    m_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_size_bytes, json[QString("SizeBytes")]);
    m_size_bytes_isSet = !json[QString("SizeBytes")].isNull() && m_size_bytes_isValid;
}

QString OAIFileAttachmentDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFileAttachmentDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_file_attachment_id_isSet) {
        obj.insert(QString("FileAttachmentID"), ::OpenAPI::toJsonValue(m_file_attachment_id));
    }
    if (m_original_filename_isSet) {
        obj.insert(QString("OriginalFilename"), ::OpenAPI::toJsonValue(m_original_filename));
    }
    if (m_preview_base_url_isSet) {
        obj.insert(QString("PreviewBaseURL"), ::OpenAPI::toJsonValue(m_preview_base_url));
    }
    if (m_public_file_url_isSet) {
        obj.insert(QString("PublicFileURL"), ::OpenAPI::toJsonValue(m_public_file_url));
    }
    if (m_size_bytes_isSet) {
        obj.insert(QString("SizeBytes"), ::OpenAPI::toJsonValue(m_size_bytes));
    }
    return obj;
}

qint64 OAIFileAttachmentDetails::getFileAttachmentId() const {
    return m_file_attachment_id;
}
void OAIFileAttachmentDetails::setFileAttachmentId(const qint64 &file_attachment_id) {
    m_file_attachment_id = file_attachment_id;
    m_file_attachment_id_isSet = true;
}

bool OAIFileAttachmentDetails::is_file_attachment_id_Set() const{
    return m_file_attachment_id_isSet;
}

bool OAIFileAttachmentDetails::is_file_attachment_id_Valid() const{
    return m_file_attachment_id_isValid;
}

QString OAIFileAttachmentDetails::getOriginalFilename() const {
    return m_original_filename;
}
void OAIFileAttachmentDetails::setOriginalFilename(const QString &original_filename) {
    m_original_filename = original_filename;
    m_original_filename_isSet = true;
}

bool OAIFileAttachmentDetails::is_original_filename_Set() const{
    return m_original_filename_isSet;
}

bool OAIFileAttachmentDetails::is_original_filename_Valid() const{
    return m_original_filename_isValid;
}

QString OAIFileAttachmentDetails::getPreviewBaseUrl() const {
    return m_preview_base_url;
}
void OAIFileAttachmentDetails::setPreviewBaseUrl(const QString &preview_base_url) {
    m_preview_base_url = preview_base_url;
    m_preview_base_url_isSet = true;
}

bool OAIFileAttachmentDetails::is_preview_base_url_Set() const{
    return m_preview_base_url_isSet;
}

bool OAIFileAttachmentDetails::is_preview_base_url_Valid() const{
    return m_preview_base_url_isValid;
}

QString OAIFileAttachmentDetails::getPublicFileUrl() const {
    return m_public_file_url;
}
void OAIFileAttachmentDetails::setPublicFileUrl(const QString &public_file_url) {
    m_public_file_url = public_file_url;
    m_public_file_url_isSet = true;
}

bool OAIFileAttachmentDetails::is_public_file_url_Set() const{
    return m_public_file_url_isSet;
}

bool OAIFileAttachmentDetails::is_public_file_url_Valid() const{
    return m_public_file_url_isValid;
}

qint64 OAIFileAttachmentDetails::getSizeBytes() const {
    return m_size_bytes;
}
void OAIFileAttachmentDetails::setSizeBytes(const qint64 &size_bytes) {
    m_size_bytes = size_bytes;
    m_size_bytes_isSet = true;
}

bool OAIFileAttachmentDetails::is_size_bytes_Set() const{
    return m_size_bytes_isSet;
}

bool OAIFileAttachmentDetails::is_size_bytes_Valid() const{
    return m_size_bytes_isValid;
}

bool OAIFileAttachmentDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_attachment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_base_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_file_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFileAttachmentDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
