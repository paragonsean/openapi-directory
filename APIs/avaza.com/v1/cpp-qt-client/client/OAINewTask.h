/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINewTask.h
 *
 * 
 */

#ifndef OAINewTask_H
#define OAINewTask_H

#include <QJsonObject>

#include "OAINewTag.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINewTag;

class OAINewTask : public OAIObject {
public:
    OAINewTask();
    OAINewTask(QString json);
    ~OAINewTask() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAccountTaskTypeIdfk() const;
    void setAccountTaskTypeIdfk(const qint32 &account_task_type_idfk);
    bool is_account_task_type_idfk_Set() const;
    bool is_account_task_type_idfk_Valid() const;

    QList<qint32> getAssignedToUserIdfks() const;
    void setAssignedToUserIdfks(const QList<qint32> &assigned_to_user_idfks);
    bool is_assigned_to_user_idfks_Set() const;
    bool is_assigned_to_user_idfks_Valid() const;

    QDateTime getDateDue() const;
    void setDateDue(const QDateTime &date_due);
    bool is_date_due_Set() const;
    bool is_date_due_Valid() const;

    QDateTime getDateStart() const;
    void setDateStart(const QDateTime &date_start);
    bool is_date_start_Set() const;
    bool is_date_start_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    double getEstimatedEffort() const;
    void setEstimatedEffort(const double &estimated_effort);
    bool is_estimated_effort_Set() const;
    bool is_estimated_effort_Valid() const;

    qint32 getProjectIdfk() const;
    void setProjectIdfk(const qint32 &project_idfk);
    bool is_project_idfk_Set() const;
    bool is_project_idfk_Valid() const;

    qint32 getSectionIdfk() const;
    void setSectionIdfk(const qint32 &section_idfk);
    bool is_section_idfk_Set() const;
    bool is_section_idfk_Valid() const;

    QList<OAINewTag> getTags() const;
    void setTags(const QList<OAINewTag> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getTaskPriorityCode() const;
    void setTaskPriorityCode(const QString &task_priority_code);
    bool is_task_priority_code_Set() const;
    bool is_task_priority_code_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_account_task_type_idfk;
    bool m_account_task_type_idfk_isSet;
    bool m_account_task_type_idfk_isValid;

    QList<qint32> m_assigned_to_user_idfks;
    bool m_assigned_to_user_idfks_isSet;
    bool m_assigned_to_user_idfks_isValid;

    QDateTime m_date_due;
    bool m_date_due_isSet;
    bool m_date_due_isValid;

    QDateTime m_date_start;
    bool m_date_start_isSet;
    bool m_date_start_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    double m_estimated_effort;
    bool m_estimated_effort_isSet;
    bool m_estimated_effort_isValid;

    qint32 m_project_idfk;
    bool m_project_idfk_isSet;
    bool m_project_idfk_isValid;

    qint32 m_section_idfk;
    bool m_section_idfk_isSet;
    bool m_section_idfk_isValid;

    QList<OAINewTag> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_task_priority_code;
    bool m_task_priority_code_isSet;
    bool m_task_priority_code_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINewTask)

#endif // OAINewTask_H
