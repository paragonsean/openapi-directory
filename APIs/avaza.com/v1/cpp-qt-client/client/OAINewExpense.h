/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINewExpense.h
 *
 * 
 */

#ifndef OAINewExpense_H
#define OAINewExpense_H

#include <QJsonObject>

#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAINewExpense : public OAIObject {
public:
    OAINewExpense();
    OAINewExpense(QString json);
    ~OAINewExpense() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAmount() const;
    void setAmount(const double &amount);
    bool is_amount_Set() const;
    bool is_amount_Valid() const;

    QString getCurrencyCode() const;
    void setCurrencyCode(const QString &currency_code);
    bool is_currency_code_Set() const;
    bool is_currency_code_Valid() const;

    qint32 getCustomerIdfk() const;
    void setCustomerIdfk(const qint32 &customer_idfk);
    bool is_customer_idfk_Set() const;
    bool is_customer_idfk_Valid() const;

    QString getCustomerName() const;
    void setCustomerName(const QString &customer_name);
    bool is_customer_name_Set() const;
    bool is_customer_name_Valid() const;

    double getExchangeRate() const;
    void setExchangeRate(const double &exchange_rate);
    bool is_exchange_rate_Set() const;
    bool is_exchange_rate_Valid() const;

    qint32 getExpenseCategoryIdfk() const;
    void setExpenseCategoryIdfk(const qint32 &expense_category_idfk);
    bool is_expense_category_idfk_Set() const;
    bool is_expense_category_idfk_Valid() const;

    QString getExpenseCategoryName() const;
    void setExpenseCategoryName(const QString &expense_category_name);
    bool is_expense_category_name_Set() const;
    bool is_expense_category_name_Valid() const;

    QDateTime getExpenseDate() const;
    void setExpenseDate(const QDateTime &expense_date);
    bool is_expense_date_Set() const;
    bool is_expense_date_Valid() const;

    qint32 getExpensePaymentMethodIdfk() const;
    void setExpensePaymentMethodIdfk(const qint32 &expense_payment_method_idfk);
    bool is_expense_payment_method_idfk_Set() const;
    bool is_expense_payment_method_idfk_Valid() const;

    QList<qint64> getFileAttachmentIds() const;
    void setFileAttachmentIds(const QList<qint64> &file_attachment_ids);
    bool is_file_attachment_ids_Set() const;
    bool is_file_attachment_ids_Valid() const;

    QString getGroupTripName() const;
    void setGroupTripName(const QString &group_trip_name);
    bool is_group_trip_name_Set() const;
    bool is_group_trip_name_Valid() const;

    QString getMerchant() const;
    void setMerchant(const QString &merchant);
    bool is_merchant_Set() const;
    bool is_merchant_Valid() const;

    QString getMerchantTaxNumber() const;
    void setMerchantTaxNumber(const QString &merchant_tax_number);
    bool is_merchant_tax_number_Set() const;
    bool is_merchant_tax_number_Valid() const;

    QString getNotes() const;
    void setNotes(const QString &notes);
    bool is_notes_Set() const;
    bool is_notes_Valid() const;

    qint32 getProjectIdfk() const;
    void setProjectIdfk(const qint32 &project_idfk);
    bool is_project_idfk_Set() const;
    bool is_project_idfk_Valid() const;

    QString getProjectName() const;
    void setProjectName(const QString &project_name);
    bool is_project_name_Set() const;
    bool is_project_name_Valid() const;

    double getQuantity() const;
    void setQuantity(const double &quantity);
    bool is_quantity_Set() const;
    bool is_quantity_Valid() const;

    qint32 getTaskIdfk() const;
    void setTaskIdfk(const qint32 &task_idfk);
    bool is_task_idfk_Set() const;
    bool is_task_idfk_Valid() const;

    qint32 getTaxIdfk() const;
    void setTaxIdfk(const qint32 &tax_idfk);
    bool is_tax_idfk_Set() const;
    bool is_tax_idfk_Valid() const;

    QString getTaxName() const;
    void setTaxName(const QString &tax_name);
    bool is_tax_name_Set() const;
    bool is_tax_name_Valid() const;

    QString getTransactionTaxConfigCode() const;
    void setTransactionTaxConfigCode(const QString &transaction_tax_config_code);
    bool is_transaction_tax_config_code_Set() const;
    bool is_transaction_tax_config_code_Valid() const;

    QString getUserEmail() const;
    void setUserEmail(const QString &user_email);
    bool is_user_email_Set() const;
    bool is_user_email_Valid() const;

    qint32 getUserIdfk() const;
    void setUserIdfk(const qint32 &user_idfk);
    bool is_user_idfk_Set() const;
    bool is_user_idfk_Valid() const;

    bool isVerifyAndSave() const;
    void setVerifyAndSave(const bool &verify_and_save);
    bool is_verify_and_save_Set() const;
    bool is_verify_and_save_Valid() const;

    bool isIsChargeable() const;
    void setIsChargeable(const bool &is_chargeable);
    bool is_is_chargeable_Set() const;
    bool is_is_chargeable_Valid() const;

    bool isIsReimbursable() const;
    void setIsReimbursable(const bool &is_reimbursable);
    bool is_is_reimbursable_Set() const;
    bool is_is_reimbursable_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_amount;
    bool m_amount_isSet;
    bool m_amount_isValid;

    QString m_currency_code;
    bool m_currency_code_isSet;
    bool m_currency_code_isValid;

    qint32 m_customer_idfk;
    bool m_customer_idfk_isSet;
    bool m_customer_idfk_isValid;

    QString m_customer_name;
    bool m_customer_name_isSet;
    bool m_customer_name_isValid;

    double m_exchange_rate;
    bool m_exchange_rate_isSet;
    bool m_exchange_rate_isValid;

    qint32 m_expense_category_idfk;
    bool m_expense_category_idfk_isSet;
    bool m_expense_category_idfk_isValid;

    QString m_expense_category_name;
    bool m_expense_category_name_isSet;
    bool m_expense_category_name_isValid;

    QDateTime m_expense_date;
    bool m_expense_date_isSet;
    bool m_expense_date_isValid;

    qint32 m_expense_payment_method_idfk;
    bool m_expense_payment_method_idfk_isSet;
    bool m_expense_payment_method_idfk_isValid;

    QList<qint64> m_file_attachment_ids;
    bool m_file_attachment_ids_isSet;
    bool m_file_attachment_ids_isValid;

    QString m_group_trip_name;
    bool m_group_trip_name_isSet;
    bool m_group_trip_name_isValid;

    QString m_merchant;
    bool m_merchant_isSet;
    bool m_merchant_isValid;

    QString m_merchant_tax_number;
    bool m_merchant_tax_number_isSet;
    bool m_merchant_tax_number_isValid;

    QString m_notes;
    bool m_notes_isSet;
    bool m_notes_isValid;

    qint32 m_project_idfk;
    bool m_project_idfk_isSet;
    bool m_project_idfk_isValid;

    QString m_project_name;
    bool m_project_name_isSet;
    bool m_project_name_isValid;

    double m_quantity;
    bool m_quantity_isSet;
    bool m_quantity_isValid;

    qint32 m_task_idfk;
    bool m_task_idfk_isSet;
    bool m_task_idfk_isValid;

    qint32 m_tax_idfk;
    bool m_tax_idfk_isSet;
    bool m_tax_idfk_isValid;

    QString m_tax_name;
    bool m_tax_name_isSet;
    bool m_tax_name_isValid;

    QString m_transaction_tax_config_code;
    bool m_transaction_tax_config_code_isSet;
    bool m_transaction_tax_config_code_isValid;

    QString m_user_email;
    bool m_user_email_isSet;
    bool m_user_email_isValid;

    qint32 m_user_idfk;
    bool m_user_idfk_isSet;
    bool m_user_idfk_isValid;

    bool m_verify_and_save;
    bool m_verify_and_save_isSet;
    bool m_verify_and_save_isValid;

    bool m_is_chargeable;
    bool m_is_chargeable_isSet;
    bool m_is_chargeable_isValid;

    bool m_is_reimbursable;
    bool m_is_reimbursable_isSet;
    bool m_is_reimbursable_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINewExpense)

#endif // OAINewExpense_H
