/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAccountDetails.h
 *
 * 
 */

#ifndef OAIAccountDetails_H
#define OAIAccountDetails_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAccountDetails : public OAIObject {
public:
    OAIAccountDetails();
    OAIAccountDetails(QString json);
    ~OAIAccountDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountEmail() const;
    void setAccountEmail(const QString &account_email);
    bool is_account_email_Set() const;
    bool is_account_email_Valid() const;

    qint32 getAccountId() const;
    void setAccountId(const qint32 &account_id);
    bool is_account_id_Set() const;
    bool is_account_id_Valid() const;

    bool isAllowHidingCompletedTasksOnTimesheet() const;
    void setAllowHidingCompletedTasksOnTimesheet(const bool &allow_hiding_completed_tasks_on_timesheet);
    bool is_allow_hiding_completed_tasks_on_timesheet_Set() const;
    bool is_allow_hiding_completed_tasks_on_timesheet_Valid() const;

    QString getBrandPrimaryColor() const;
    void setBrandPrimaryColor(const QString &brand_primary_color);
    bool is_brand_primary_color_Set() const;
    bool is_brand_primary_color_Valid() const;

    QString getBrandPrimaryColorLuminance() const;
    void setBrandPrimaryColorLuminance(const QString &brand_primary_color_luminance);
    bool is_brand_primary_color_luminance_Set() const;
    bool is_brand_primary_color_luminance_Valid() const;

    QString getCompanyName() const;
    void setCompanyName(const QString &company_name);
    bool is_company_name_Set() const;
    bool is_company_name_Valid() const;

    QString getCurrentServerTimeIso() const;
    void setCurrentServerTimeIso(const QString &current_server_time_iso);
    bool is_current_server_time_iso_Set() const;
    bool is_current_server_time_iso_Valid() const;

    QString getDefaultCurrencyCode() const;
    void setDefaultCurrencyCode(const QString &default_currency_code);
    bool is_default_currency_code_Set() const;
    bool is_default_currency_code_Valid() const;

    bool isExpenseApprovalRequired() const;
    void setExpenseApprovalRequired(const bool &expense_approval_required);
    bool is_expense_approval_required_Set() const;
    bool is_expense_approval_required_Valid() const;

    bool isLockApprovedExpenses() const;
    void setLockApprovedExpenses(const bool &lock_approved_expenses);
    bool is_lock_approved_expenses_Set() const;
    bool is_lock_approved_expenses_Valid() const;

    bool isLockApprovedTimesheets() const;
    void setLockApprovedTimesheets(const bool &lock_approved_timesheets);
    bool is_lock_approved_timesheets_Set() const;
    bool is_lock_approved_timesheets_Valid() const;

    QString getSc() const;
    void setSc(const QString &sc);
    bool is_sc_Set() const;
    bool is_sc_Valid() const;

    QString getSubdomain() const;
    void setSubdomain(const QString &subdomain);
    bool is_subdomain_Set() const;
    bool is_subdomain_Valid() const;

    qint32 getTimesheetDayOfWeek() const;
    void setTimesheetDayOfWeek(const qint32 &timesheet_day_of_week);
    bool is_timesheet_day_of_week_Set() const;
    bool is_timesheet_day_of_week_Valid() const;

    QString getTimesheetDisplayFormatCode() const;
    void setTimesheetDisplayFormatCode(const QString &timesheet_display_format_code);
    bool is_timesheet_display_format_code_Set() const;
    bool is_timesheet_display_format_code_Valid() const;

    bool isWeeklyTimesheetReminder() const;
    void setWeeklyTimesheetReminder(const bool &weekly_timesheet_reminder);
    bool is_weekly_timesheet_reminder_Set() const;
    bool is_weekly_timesheet_reminder_Valid() const;

    bool isHas24HourTimesheetFormat() const;
    void setHas24HourTimesheetFormat(const bool &has24_hour_timesheet_format);
    bool is_has24_hour_timesheet_format_Set() const;
    bool is_has24_hour_timesheet_format_Valid() const;

    bool isHasStartEndTimesheets() const;
    void setHasStartEndTimesheets(const bool &has_start_end_timesheets);
    bool is_has_start_end_timesheets_Set() const;
    bool is_has_start_end_timesheets_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_email;
    bool m_account_email_isSet;
    bool m_account_email_isValid;

    qint32 m_account_id;
    bool m_account_id_isSet;
    bool m_account_id_isValid;

    bool m_allow_hiding_completed_tasks_on_timesheet;
    bool m_allow_hiding_completed_tasks_on_timesheet_isSet;
    bool m_allow_hiding_completed_tasks_on_timesheet_isValid;

    QString m_brand_primary_color;
    bool m_brand_primary_color_isSet;
    bool m_brand_primary_color_isValid;

    QString m_brand_primary_color_luminance;
    bool m_brand_primary_color_luminance_isSet;
    bool m_brand_primary_color_luminance_isValid;

    QString m_company_name;
    bool m_company_name_isSet;
    bool m_company_name_isValid;

    QString m_current_server_time_iso;
    bool m_current_server_time_iso_isSet;
    bool m_current_server_time_iso_isValid;

    QString m_default_currency_code;
    bool m_default_currency_code_isSet;
    bool m_default_currency_code_isValid;

    bool m_expense_approval_required;
    bool m_expense_approval_required_isSet;
    bool m_expense_approval_required_isValid;

    bool m_lock_approved_expenses;
    bool m_lock_approved_expenses_isSet;
    bool m_lock_approved_expenses_isValid;

    bool m_lock_approved_timesheets;
    bool m_lock_approved_timesheets_isSet;
    bool m_lock_approved_timesheets_isValid;

    QString m_sc;
    bool m_sc_isSet;
    bool m_sc_isValid;

    QString m_subdomain;
    bool m_subdomain_isSet;
    bool m_subdomain_isValid;

    qint32 m_timesheet_day_of_week;
    bool m_timesheet_day_of_week_isSet;
    bool m_timesheet_day_of_week_isValid;

    QString m_timesheet_display_format_code;
    bool m_timesheet_display_format_code_isSet;
    bool m_timesheet_display_format_code_isValid;

    bool m_weekly_timesheet_reminder;
    bool m_weekly_timesheet_reminder_isSet;
    bool m_weekly_timesheet_reminder_isValid;

    bool m_has24_hour_timesheet_format;
    bool m_has24_hour_timesheet_format_isSet;
    bool m_has24_hour_timesheet_format_isValid;

    bool m_has_start_end_timesheets;
    bool m_has_start_end_timesheets_isSet;
    bool m_has_start_end_timesheets_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAccountDetails)

#endif // OAIAccountDetails_H
