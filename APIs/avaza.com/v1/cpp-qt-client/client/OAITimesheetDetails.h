/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITimesheetDetails.h
 *
 * 
 */

#ifndef OAITimesheetDetails_H
#define OAITimesheetDetails_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITimesheetDetails : public OAIObject {
public:
    OAITimesheetDetails();
    OAITimesheetDetails(QString json);
    ~OAITimesheetDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getApprovedBy() const;
    void setApprovedBy(const QString &approved_by);
    bool is_approved_by_Set() const;
    bool is_approved_by_Valid() const;

    QString getCategoryName() const;
    void setCategoryName(const QString &category_name);
    bool is_category_name_Set() const;
    bool is_category_name_Valid() const;

    QString getCustomMetadata() const;
    void setCustomMetadata(const QString &custom_metadata);
    bool is_custom_metadata_Set() const;
    bool is_custom_metadata_Valid() const;

    qint32 getCustomerIdfk() const;
    void setCustomerIdfk(const qint32 &customer_idfk);
    bool is_customer_idfk_Set() const;
    bool is_customer_idfk_Valid() const;

    QString getCustomerName() const;
    void setCustomerName(const QString &customer_name);
    bool is_customer_name_Set() const;
    bool is_customer_name_Valid() const;

    QDateTime getDateApproved() const;
    void setDateApproved(const QDateTime &date_approved);
    bool is_date_approved_Set() const;
    bool is_date_approved_Valid() const;

    QDateTime getDateCreated() const;
    void setDateCreated(const QDateTime &date_created);
    bool is_date_created_Set() const;
    bool is_date_created_Valid() const;

    QDateTime getDateUpdated() const;
    void setDateUpdated(const QDateTime &date_updated);
    bool is_date_updated_Set() const;
    bool is_date_updated_Valid() const;

    double getDuration() const;
    void setDuration(const double &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    QString getEmail() const;
    void setEmail(const QString &email);
    bool is_email_Set() const;
    bool is_email_Valid() const;

    QDateTime getEndTimeLocal() const;
    void setEndTimeLocal(const QDateTime &end_time_local);
    bool is_end_time_local_Set() const;
    bool is_end_time_local_Valid() const;

    QDateTime getEndTimeUtc() const;
    void setEndTimeUtc(const QDateTime &end_time_utc);
    bool is_end_time_utc_Set() const;
    bool is_end_time_utc_Valid() const;

    QDateTime getEntryDate() const;
    void setEntryDate(const QDateTime &entry_date);
    bool is_entry_date_Set() const;
    bool is_entry_date_Valid() const;

    QString getFirstname() const;
    void setFirstname(const QString &firstname);
    bool is_firstname_Set() const;
    bool is_firstname_Valid() const;

    bool isHasTimer() const;
    void setHasTimer(const bool &has_timer);
    bool is_has_timer_Set() const;
    bool is_has_timer_Valid() const;

    qint64 getInvoiceIdfk() const;
    void setInvoiceIdfk(const qint64 &invoice_idfk);
    bool is_invoice_idfk_Set() const;
    bool is_invoice_idfk_Valid() const;

    qint64 getInvoiceLineItemIdfk() const;
    void setInvoiceLineItemIdfk(const qint64 &invoice_line_item_idfk);
    bool is_invoice_line_item_idfk_Set() const;
    bool is_invoice_line_item_idfk_Valid() const;

    QString getLastname() const;
    void setLastname(const QString &lastname);
    bool is_lastname_Set() const;
    bool is_lastname_Valid() const;

    QString getNotes() const;
    void setNotes(const QString &notes);
    bool is_notes_Set() const;
    bool is_notes_Valid() const;

    QString getProjectCode() const;
    void setProjectCode(const QString &project_code);
    bool is_project_code_Set() const;
    bool is_project_code_Valid() const;

    qint32 getProjectIdfk() const;
    void setProjectIdfk(const qint32 &project_idfk);
    bool is_project_idfk_Set() const;
    bool is_project_idfk_Valid() const;

    QString getProjectTitle() const;
    void setProjectTitle(const QString &project_title);
    bool is_project_title_Set() const;
    bool is_project_title_Valid() const;

    QDateTime getStartTimeLocal() const;
    void setStartTimeLocal(const QDateTime &start_time_local);
    bool is_start_time_local_Set() const;
    bool is_start_time_local_Valid() const;

    QDateTime getStartTimeUtc() const;
    void setStartTimeUtc(const QDateTime &start_time_utc);
    bool is_start_time_utc_Set() const;
    bool is_start_time_utc_Valid() const;

    qint32 getTaskIdfk() const;
    void setTaskIdfk(const qint32 &task_idfk);
    bool is_task_idfk_Set() const;
    bool is_task_idfk_Valid() const;

    QString getTaskTitle() const;
    void setTaskTitle(const QString &task_title);
    bool is_task_title_Set() const;
    bool is_task_title_Valid() const;

    QDateTime getTimerStartedAtUtc() const;
    void setTimerStartedAtUtc(const QDateTime &timer_started_at_utc);
    bool is_timer_started_at_utc_Set() const;
    bool is_timer_started_at_utc_Valid() const;

    qint32 getTimesheetCategoryIdfk() const;
    void setTimesheetCategoryIdfk(const qint32 &timesheet_category_idfk);
    bool is_timesheet_category_idfk_Set() const;
    bool is_timesheet_category_idfk_Valid() const;

    QString getTimesheetEntryApprovalStatusCode() const;
    void setTimesheetEntryApprovalStatusCode(const QString &timesheet_entry_approval_status_code);
    bool is_timesheet_entry_approval_status_code_Set() const;
    bool is_timesheet_entry_approval_status_code_Valid() const;

    qint64 getTimesheetEntryId() const;
    void setTimesheetEntryId(const qint64 &timesheet_entry_id);
    bool is_timesheet_entry_id_Set() const;
    bool is_timesheet_entry_id_Valid() const;

    QString getTimesheetUserTimeZone() const;
    void setTimesheetUserTimeZone(const QString &timesheet_user_time_zone);
    bool is_timesheet_user_time_zone_Set() const;
    bool is_timesheet_user_time_zone_Valid() const;

    qint32 getUserIdfk() const;
    void setUserIdfk(const qint32 &user_idfk);
    bool is_user_idfk_Set() const;
    bool is_user_idfk_Valid() const;

    bool isIsBillable() const;
    void setIsBillable(const bool &is_billable);
    bool is_is_billable_Set() const;
    bool is_is_billable_Valid() const;

    bool isIsInvoiced() const;
    void setIsInvoiced(const bool &is_invoiced);
    bool is_is_invoiced_Set() const;
    bool is_is_invoiced_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_approved_by;
    bool m_approved_by_isSet;
    bool m_approved_by_isValid;

    QString m_category_name;
    bool m_category_name_isSet;
    bool m_category_name_isValid;

    QString m_custom_metadata;
    bool m_custom_metadata_isSet;
    bool m_custom_metadata_isValid;

    qint32 m_customer_idfk;
    bool m_customer_idfk_isSet;
    bool m_customer_idfk_isValid;

    QString m_customer_name;
    bool m_customer_name_isSet;
    bool m_customer_name_isValid;

    QDateTime m_date_approved;
    bool m_date_approved_isSet;
    bool m_date_approved_isValid;

    QDateTime m_date_created;
    bool m_date_created_isSet;
    bool m_date_created_isValid;

    QDateTime m_date_updated;
    bool m_date_updated_isSet;
    bool m_date_updated_isValid;

    double m_duration;
    bool m_duration_isSet;
    bool m_duration_isValid;

    QString m_email;
    bool m_email_isSet;
    bool m_email_isValid;

    QDateTime m_end_time_local;
    bool m_end_time_local_isSet;
    bool m_end_time_local_isValid;

    QDateTime m_end_time_utc;
    bool m_end_time_utc_isSet;
    bool m_end_time_utc_isValid;

    QDateTime m_entry_date;
    bool m_entry_date_isSet;
    bool m_entry_date_isValid;

    QString m_firstname;
    bool m_firstname_isSet;
    bool m_firstname_isValid;

    bool m_has_timer;
    bool m_has_timer_isSet;
    bool m_has_timer_isValid;

    qint64 m_invoice_idfk;
    bool m_invoice_idfk_isSet;
    bool m_invoice_idfk_isValid;

    qint64 m_invoice_line_item_idfk;
    bool m_invoice_line_item_idfk_isSet;
    bool m_invoice_line_item_idfk_isValid;

    QString m_lastname;
    bool m_lastname_isSet;
    bool m_lastname_isValid;

    QString m_notes;
    bool m_notes_isSet;
    bool m_notes_isValid;

    QString m_project_code;
    bool m_project_code_isSet;
    bool m_project_code_isValid;

    qint32 m_project_idfk;
    bool m_project_idfk_isSet;
    bool m_project_idfk_isValid;

    QString m_project_title;
    bool m_project_title_isSet;
    bool m_project_title_isValid;

    QDateTime m_start_time_local;
    bool m_start_time_local_isSet;
    bool m_start_time_local_isValid;

    QDateTime m_start_time_utc;
    bool m_start_time_utc_isSet;
    bool m_start_time_utc_isValid;

    qint32 m_task_idfk;
    bool m_task_idfk_isSet;
    bool m_task_idfk_isValid;

    QString m_task_title;
    bool m_task_title_isSet;
    bool m_task_title_isValid;

    QDateTime m_timer_started_at_utc;
    bool m_timer_started_at_utc_isSet;
    bool m_timer_started_at_utc_isValid;

    qint32 m_timesheet_category_idfk;
    bool m_timesheet_category_idfk_isSet;
    bool m_timesheet_category_idfk_isValid;

    QString m_timesheet_entry_approval_status_code;
    bool m_timesheet_entry_approval_status_code_isSet;
    bool m_timesheet_entry_approval_status_code_isValid;

    qint64 m_timesheet_entry_id;
    bool m_timesheet_entry_id_isSet;
    bool m_timesheet_entry_id_isValid;

    QString m_timesheet_user_time_zone;
    bool m_timesheet_user_time_zone_isSet;
    bool m_timesheet_user_time_zone_isValid;

    qint32 m_user_idfk;
    bool m_user_idfk_isSet;
    bool m_user_idfk_isValid;

    bool m_is_billable;
    bool m_is_billable_isSet;
    bool m_is_billable_isValid;

    bool m_is_invoiced;
    bool m_is_invoiced_isSet;
    bool m_is_invoiced_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITimesheetDetails)

#endif // OAITimesheetDetails_H
