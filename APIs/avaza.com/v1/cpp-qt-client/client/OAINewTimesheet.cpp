/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINewTimesheet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINewTimesheet::OAINewTimesheet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINewTimesheet::OAINewTimesheet() {
    this->initializeModel();
}

OAINewTimesheet::~OAINewTimesheet() {}

void OAINewTimesheet::initializeModel() {

    m_custom_metadata_isSet = false;
    m_custom_metadata_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_entry_date_isSet = false;
    m_entry_date_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_project_idfk_isSet = false;
    m_project_idfk_isValid = false;

    m_task_idfk_isSet = false;
    m_task_idfk_isValid = false;

    m_timesheet_category_idfk_isSet = false;
    m_timesheet_category_idfk_isValid = false;

    m_user_idfk_isSet = false;
    m_user_idfk_isValid = false;

    m_has_start_end_time_isSet = false;
    m_has_start_end_time_isValid = false;

    m_is_invoiced_isSet = false;
    m_is_invoiced_isValid = false;
}

void OAINewTimesheet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINewTimesheet::fromJsonObject(QJsonObject json) {

    m_custom_metadata_isValid = ::OpenAPI::fromJsonValue(m_custom_metadata, json[QString("CustomMetadata")]);
    m_custom_metadata_isSet = !json[QString("CustomMetadata")].isNull() && m_custom_metadata_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("Duration")]);
    m_duration_isSet = !json[QString("Duration")].isNull() && m_duration_isValid;

    m_entry_date_isValid = ::OpenAPI::fromJsonValue(m_entry_date, json[QString("EntryDate")]);
    m_entry_date_isSet = !json[QString("EntryDate")].isNull() && m_entry_date_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("Notes")]);
    m_notes_isSet = !json[QString("Notes")].isNull() && m_notes_isValid;

    m_project_idfk_isValid = ::OpenAPI::fromJsonValue(m_project_idfk, json[QString("ProjectIDFK")]);
    m_project_idfk_isSet = !json[QString("ProjectIDFK")].isNull() && m_project_idfk_isValid;

    m_task_idfk_isValid = ::OpenAPI::fromJsonValue(m_task_idfk, json[QString("TaskIDFK")]);
    m_task_idfk_isSet = !json[QString("TaskIDFK")].isNull() && m_task_idfk_isValid;

    m_timesheet_category_idfk_isValid = ::OpenAPI::fromJsonValue(m_timesheet_category_idfk, json[QString("TimesheetCategoryIDFK")]);
    m_timesheet_category_idfk_isSet = !json[QString("TimesheetCategoryIDFK")].isNull() && m_timesheet_category_idfk_isValid;

    m_user_idfk_isValid = ::OpenAPI::fromJsonValue(m_user_idfk, json[QString("UserIDFK")]);
    m_user_idfk_isSet = !json[QString("UserIDFK")].isNull() && m_user_idfk_isValid;

    m_has_start_end_time_isValid = ::OpenAPI::fromJsonValue(m_has_start_end_time, json[QString("hasStartEndTime")]);
    m_has_start_end_time_isSet = !json[QString("hasStartEndTime")].isNull() && m_has_start_end_time_isValid;

    m_is_invoiced_isValid = ::OpenAPI::fromJsonValue(m_is_invoiced, json[QString("isInvoiced")]);
    m_is_invoiced_isSet = !json[QString("isInvoiced")].isNull() && m_is_invoiced_isValid;
}

QString OAINewTimesheet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINewTimesheet::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_metadata_isSet) {
        obj.insert(QString("CustomMetadata"), ::OpenAPI::toJsonValue(m_custom_metadata));
    }
    if (m_duration_isSet) {
        obj.insert(QString("Duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_entry_date_isSet) {
        obj.insert(QString("EntryDate"), ::OpenAPI::toJsonValue(m_entry_date));
    }
    if (m_notes_isSet) {
        obj.insert(QString("Notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_project_idfk_isSet) {
        obj.insert(QString("ProjectIDFK"), ::OpenAPI::toJsonValue(m_project_idfk));
    }
    if (m_task_idfk_isSet) {
        obj.insert(QString("TaskIDFK"), ::OpenAPI::toJsonValue(m_task_idfk));
    }
    if (m_timesheet_category_idfk_isSet) {
        obj.insert(QString("TimesheetCategoryIDFK"), ::OpenAPI::toJsonValue(m_timesheet_category_idfk));
    }
    if (m_user_idfk_isSet) {
        obj.insert(QString("UserIDFK"), ::OpenAPI::toJsonValue(m_user_idfk));
    }
    if (m_has_start_end_time_isSet) {
        obj.insert(QString("hasStartEndTime"), ::OpenAPI::toJsonValue(m_has_start_end_time));
    }
    if (m_is_invoiced_isSet) {
        obj.insert(QString("isInvoiced"), ::OpenAPI::toJsonValue(m_is_invoiced));
    }
    return obj;
}

QString OAINewTimesheet::getCustomMetadata() const {
    return m_custom_metadata;
}
void OAINewTimesheet::setCustomMetadata(const QString &custom_metadata) {
    m_custom_metadata = custom_metadata;
    m_custom_metadata_isSet = true;
}

bool OAINewTimesheet::is_custom_metadata_Set() const{
    return m_custom_metadata_isSet;
}

bool OAINewTimesheet::is_custom_metadata_Valid() const{
    return m_custom_metadata_isValid;
}

double OAINewTimesheet::getDuration() const {
    return m_duration;
}
void OAINewTimesheet::setDuration(const double &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAINewTimesheet::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAINewTimesheet::is_duration_Valid() const{
    return m_duration_isValid;
}

QDateTime OAINewTimesheet::getEntryDate() const {
    return m_entry_date;
}
void OAINewTimesheet::setEntryDate(const QDateTime &entry_date) {
    m_entry_date = entry_date;
    m_entry_date_isSet = true;
}

bool OAINewTimesheet::is_entry_date_Set() const{
    return m_entry_date_isSet;
}

bool OAINewTimesheet::is_entry_date_Valid() const{
    return m_entry_date_isValid;
}

QString OAINewTimesheet::getNotes() const {
    return m_notes;
}
void OAINewTimesheet::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAINewTimesheet::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAINewTimesheet::is_notes_Valid() const{
    return m_notes_isValid;
}

qint32 OAINewTimesheet::getProjectIdfk() const {
    return m_project_idfk;
}
void OAINewTimesheet::setProjectIdfk(const qint32 &project_idfk) {
    m_project_idfk = project_idfk;
    m_project_idfk_isSet = true;
}

bool OAINewTimesheet::is_project_idfk_Set() const{
    return m_project_idfk_isSet;
}

bool OAINewTimesheet::is_project_idfk_Valid() const{
    return m_project_idfk_isValid;
}

qint32 OAINewTimesheet::getTaskIdfk() const {
    return m_task_idfk;
}
void OAINewTimesheet::setTaskIdfk(const qint32 &task_idfk) {
    m_task_idfk = task_idfk;
    m_task_idfk_isSet = true;
}

bool OAINewTimesheet::is_task_idfk_Set() const{
    return m_task_idfk_isSet;
}

bool OAINewTimesheet::is_task_idfk_Valid() const{
    return m_task_idfk_isValid;
}

qint32 OAINewTimesheet::getTimesheetCategoryIdfk() const {
    return m_timesheet_category_idfk;
}
void OAINewTimesheet::setTimesheetCategoryIdfk(const qint32 &timesheet_category_idfk) {
    m_timesheet_category_idfk = timesheet_category_idfk;
    m_timesheet_category_idfk_isSet = true;
}

bool OAINewTimesheet::is_timesheet_category_idfk_Set() const{
    return m_timesheet_category_idfk_isSet;
}

bool OAINewTimesheet::is_timesheet_category_idfk_Valid() const{
    return m_timesheet_category_idfk_isValid;
}

qint32 OAINewTimesheet::getUserIdfk() const {
    return m_user_idfk;
}
void OAINewTimesheet::setUserIdfk(const qint32 &user_idfk) {
    m_user_idfk = user_idfk;
    m_user_idfk_isSet = true;
}

bool OAINewTimesheet::is_user_idfk_Set() const{
    return m_user_idfk_isSet;
}

bool OAINewTimesheet::is_user_idfk_Valid() const{
    return m_user_idfk_isValid;
}

bool OAINewTimesheet::isHasStartEndTime() const {
    return m_has_start_end_time;
}
void OAINewTimesheet::setHasStartEndTime(const bool &has_start_end_time) {
    m_has_start_end_time = has_start_end_time;
    m_has_start_end_time_isSet = true;
}

bool OAINewTimesheet::is_has_start_end_time_Set() const{
    return m_has_start_end_time_isSet;
}

bool OAINewTimesheet::is_has_start_end_time_Valid() const{
    return m_has_start_end_time_isValid;
}

bool OAINewTimesheet::isIsInvoiced() const {
    return m_is_invoiced;
}
void OAINewTimesheet::setIsInvoiced(const bool &is_invoiced) {
    m_is_invoiced = is_invoiced;
    m_is_invoiced_isSet = true;
}

bool OAINewTimesheet::is_is_invoiced_Set() const{
    return m_is_invoiced_isSet;
}

bool OAINewTimesheet::is_is_invoiced_Valid() const{
    return m_is_invoiced_isValid;
}

bool OAINewTimesheet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timesheet_category_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_start_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_invoiced_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINewTimesheet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
