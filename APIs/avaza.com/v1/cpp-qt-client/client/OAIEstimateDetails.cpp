/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEstimateDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEstimateDetails::OAIEstimateDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEstimateDetails::OAIEstimateDetails() {
    this->initializeModel();
}

OAIEstimateDetails::~OAIEstimateDetails() {}

void OAIEstimateDetails::initializeModel() {

    m_account_idfk_isSet = false;
    m_account_idfk_isValid = false;

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_company_idfk_isSet = false;
    m_company_idfk_isValid = false;

    m_company_name_isSet = false;
    m_company_name_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_issued_isSet = false;
    m_date_issued_isValid = false;

    m_date_sent_isSet = false;
    m_date_sent_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_estimate_id_isSet = false;
    m_estimate_id_isValid = false;

    m_estimate_item_number_isSet = false;
    m_estimate_item_number_isValid = false;

    m_estimate_prefix_isSet = false;
    m_estimate_prefix_isValid = false;

    m_estimate_status_code_isSet = false;
    m_estimate_status_code_isValid = false;

    m_estimate_tax_config_code_isSet = false;
    m_estimate_tax_config_code_isValid = false;

    m_exchange_rate_isSet = false;
    m_exchange_rate_isValid = false;

    m_issuer_isSet = false;
    m_issuer_isValid = false;

    m_line_items_isSet = false;
    m_line_items_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_recipient_isSet = false;
    m_recipient_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_tax_amount_isSet = false;
    m_tax_amount_isValid = false;

    m_total_amount_isSet = false;
    m_total_amount_isValid = false;
}

void OAIEstimateDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEstimateDetails::fromJsonObject(QJsonObject json) {

    m_account_idfk_isValid = ::OpenAPI::fromJsonValue(m_account_idfk, json[QString("AccountIDFK")]);
    m_account_idfk_isSet = !json[QString("AccountIDFK")].isNull() && m_account_idfk_isValid;

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("Balance")]);
    m_balance_isSet = !json[QString("Balance")].isNull() && m_balance_isValid;

    m_company_idfk_isValid = ::OpenAPI::fromJsonValue(m_company_idfk, json[QString("CompanyIDFK")]);
    m_company_idfk_isSet = !json[QString("CompanyIDFK")].isNull() && m_company_idfk_isValid;

    m_company_name_isValid = ::OpenAPI::fromJsonValue(m_company_name, json[QString("CompanyName")]);
    m_company_name_isSet = !json[QString("CompanyName")].isNull() && m_company_name_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("CurrencyCode")]);
    m_currency_code_isSet = !json[QString("CurrencyCode")].isNull() && m_currency_code_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("DateCreated")]);
    m_date_created_isSet = !json[QString("DateCreated")].isNull() && m_date_created_isValid;

    m_date_issued_isValid = ::OpenAPI::fromJsonValue(m_date_issued, json[QString("DateIssued")]);
    m_date_issued_isSet = !json[QString("DateIssued")].isNull() && m_date_issued_isValid;

    m_date_sent_isValid = ::OpenAPI::fromJsonValue(m_date_sent, json[QString("DateSent")]);
    m_date_sent_isSet = !json[QString("DateSent")].isNull() && m_date_sent_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("DateUpdated")]);
    m_date_updated_isSet = !json[QString("DateUpdated")].isNull() && m_date_updated_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("DueDate")]);
    m_due_date_isSet = !json[QString("DueDate")].isNull() && m_due_date_isValid;

    m_estimate_id_isValid = ::OpenAPI::fromJsonValue(m_estimate_id, json[QString("EstimateID")]);
    m_estimate_id_isSet = !json[QString("EstimateID")].isNull() && m_estimate_id_isValid;

    m_estimate_item_number_isValid = ::OpenAPI::fromJsonValue(m_estimate_item_number, json[QString("EstimateItemNumber")]);
    m_estimate_item_number_isSet = !json[QString("EstimateItemNumber")].isNull() && m_estimate_item_number_isValid;

    m_estimate_prefix_isValid = ::OpenAPI::fromJsonValue(m_estimate_prefix, json[QString("EstimatePrefix")]);
    m_estimate_prefix_isSet = !json[QString("EstimatePrefix")].isNull() && m_estimate_prefix_isValid;

    m_estimate_status_code_isValid = ::OpenAPI::fromJsonValue(m_estimate_status_code, json[QString("EstimateStatusCode")]);
    m_estimate_status_code_isSet = !json[QString("EstimateStatusCode")].isNull() && m_estimate_status_code_isValid;

    m_estimate_tax_config_code_isValid = ::OpenAPI::fromJsonValue(m_estimate_tax_config_code, json[QString("EstimateTaxConfigCode")]);
    m_estimate_tax_config_code_isSet = !json[QString("EstimateTaxConfigCode")].isNull() && m_estimate_tax_config_code_isValid;

    m_exchange_rate_isValid = ::OpenAPI::fromJsonValue(m_exchange_rate, json[QString("ExchangeRate")]);
    m_exchange_rate_isSet = !json[QString("ExchangeRate")].isNull() && m_exchange_rate_isValid;

    m_issuer_isValid = ::OpenAPI::fromJsonValue(m_issuer, json[QString("Issuer")]);
    m_issuer_isSet = !json[QString("Issuer")].isNull() && m_issuer_isValid;

    m_line_items_isValid = ::OpenAPI::fromJsonValue(m_line_items, json[QString("LineItems")]);
    m_line_items_isSet = !json[QString("LineItems")].isNull() && m_line_items_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("Links")]);
    m_links_isSet = !json[QString("Links")].isNull() && m_links_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("Notes")]);
    m_notes_isSet = !json[QString("Notes")].isNull() && m_notes_isValid;

    m_recipient_isValid = ::OpenAPI::fromJsonValue(m_recipient, json[QString("Recipient")]);
    m_recipient_isSet = !json[QString("Recipient")].isNull() && m_recipient_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("Subject")]);
    m_subject_isSet = !json[QString("Subject")].isNull() && m_subject_isValid;

    m_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_tax_amount, json[QString("TaxAmount")]);
    m_tax_amount_isSet = !json[QString("TaxAmount")].isNull() && m_tax_amount_isValid;

    m_total_amount_isValid = ::OpenAPI::fromJsonValue(m_total_amount, json[QString("TotalAmount")]);
    m_total_amount_isSet = !json[QString("TotalAmount")].isNull() && m_total_amount_isValid;
}

QString OAIEstimateDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEstimateDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_account_idfk_isSet) {
        obj.insert(QString("AccountIDFK"), ::OpenAPI::toJsonValue(m_account_idfk));
    }
    if (m_balance_isSet) {
        obj.insert(QString("Balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_company_idfk_isSet) {
        obj.insert(QString("CompanyIDFK"), ::OpenAPI::toJsonValue(m_company_idfk));
    }
    if (m_company_name_isSet) {
        obj.insert(QString("CompanyName"), ::OpenAPI::toJsonValue(m_company_name));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("CurrencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("DateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_issued_isSet) {
        obj.insert(QString("DateIssued"), ::OpenAPI::toJsonValue(m_date_issued));
    }
    if (m_date_sent_isSet) {
        obj.insert(QString("DateSent"), ::OpenAPI::toJsonValue(m_date_sent));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("DateUpdated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("DueDate"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_estimate_id_isSet) {
        obj.insert(QString("EstimateID"), ::OpenAPI::toJsonValue(m_estimate_id));
    }
    if (m_estimate_item_number_isSet) {
        obj.insert(QString("EstimateItemNumber"), ::OpenAPI::toJsonValue(m_estimate_item_number));
    }
    if (m_estimate_prefix_isSet) {
        obj.insert(QString("EstimatePrefix"), ::OpenAPI::toJsonValue(m_estimate_prefix));
    }
    if (m_estimate_status_code_isSet) {
        obj.insert(QString("EstimateStatusCode"), ::OpenAPI::toJsonValue(m_estimate_status_code));
    }
    if (m_estimate_tax_config_code_isSet) {
        obj.insert(QString("EstimateTaxConfigCode"), ::OpenAPI::toJsonValue(m_estimate_tax_config_code));
    }
    if (m_exchange_rate_isSet) {
        obj.insert(QString("ExchangeRate"), ::OpenAPI::toJsonValue(m_exchange_rate));
    }
    if (m_issuer.isSet()) {
        obj.insert(QString("Issuer"), ::OpenAPI::toJsonValue(m_issuer));
    }
    if (m_line_items.size() > 0) {
        obj.insert(QString("LineItems"), ::OpenAPI::toJsonValue(m_line_items));
    }
    if (m_links.isSet()) {
        obj.insert(QString("Links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_notes_isSet) {
        obj.insert(QString("Notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_recipient.isSet()) {
        obj.insert(QString("Recipient"), ::OpenAPI::toJsonValue(m_recipient));
    }
    if (m_subject_isSet) {
        obj.insert(QString("Subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_tax_amount_isSet) {
        obj.insert(QString("TaxAmount"), ::OpenAPI::toJsonValue(m_tax_amount));
    }
    if (m_total_amount_isSet) {
        obj.insert(QString("TotalAmount"), ::OpenAPI::toJsonValue(m_total_amount));
    }
    return obj;
}

qint32 OAIEstimateDetails::getAccountIdfk() const {
    return m_account_idfk;
}
void OAIEstimateDetails::setAccountIdfk(const qint32 &account_idfk) {
    m_account_idfk = account_idfk;
    m_account_idfk_isSet = true;
}

bool OAIEstimateDetails::is_account_idfk_Set() const{
    return m_account_idfk_isSet;
}

bool OAIEstimateDetails::is_account_idfk_Valid() const{
    return m_account_idfk_isValid;
}

double OAIEstimateDetails::getBalance() const {
    return m_balance;
}
void OAIEstimateDetails::setBalance(const double &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAIEstimateDetails::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAIEstimateDetails::is_balance_Valid() const{
    return m_balance_isValid;
}

qint32 OAIEstimateDetails::getCompanyIdfk() const {
    return m_company_idfk;
}
void OAIEstimateDetails::setCompanyIdfk(const qint32 &company_idfk) {
    m_company_idfk = company_idfk;
    m_company_idfk_isSet = true;
}

bool OAIEstimateDetails::is_company_idfk_Set() const{
    return m_company_idfk_isSet;
}

bool OAIEstimateDetails::is_company_idfk_Valid() const{
    return m_company_idfk_isValid;
}

QString OAIEstimateDetails::getCompanyName() const {
    return m_company_name;
}
void OAIEstimateDetails::setCompanyName(const QString &company_name) {
    m_company_name = company_name;
    m_company_name_isSet = true;
}

bool OAIEstimateDetails::is_company_name_Set() const{
    return m_company_name_isSet;
}

bool OAIEstimateDetails::is_company_name_Valid() const{
    return m_company_name_isValid;
}

QString OAIEstimateDetails::getCurrencyCode() const {
    return m_currency_code;
}
void OAIEstimateDetails::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIEstimateDetails::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIEstimateDetails::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QDateTime OAIEstimateDetails::getDateCreated() const {
    return m_date_created;
}
void OAIEstimateDetails::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIEstimateDetails::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIEstimateDetails::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIEstimateDetails::getDateIssued() const {
    return m_date_issued;
}
void OAIEstimateDetails::setDateIssued(const QDateTime &date_issued) {
    m_date_issued = date_issued;
    m_date_issued_isSet = true;
}

bool OAIEstimateDetails::is_date_issued_Set() const{
    return m_date_issued_isSet;
}

bool OAIEstimateDetails::is_date_issued_Valid() const{
    return m_date_issued_isValid;
}

QDateTime OAIEstimateDetails::getDateSent() const {
    return m_date_sent;
}
void OAIEstimateDetails::setDateSent(const QDateTime &date_sent) {
    m_date_sent = date_sent;
    m_date_sent_isSet = true;
}

bool OAIEstimateDetails::is_date_sent_Set() const{
    return m_date_sent_isSet;
}

bool OAIEstimateDetails::is_date_sent_Valid() const{
    return m_date_sent_isValid;
}

QDateTime OAIEstimateDetails::getDateUpdated() const {
    return m_date_updated;
}
void OAIEstimateDetails::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIEstimateDetails::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIEstimateDetails::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QDateTime OAIEstimateDetails::getDueDate() const {
    return m_due_date;
}
void OAIEstimateDetails::setDueDate(const QDateTime &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAIEstimateDetails::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAIEstimateDetails::is_due_date_Valid() const{
    return m_due_date_isValid;
}

qint64 OAIEstimateDetails::getEstimateId() const {
    return m_estimate_id;
}
void OAIEstimateDetails::setEstimateId(const qint64 &estimate_id) {
    m_estimate_id = estimate_id;
    m_estimate_id_isSet = true;
}

bool OAIEstimateDetails::is_estimate_id_Set() const{
    return m_estimate_id_isSet;
}

bool OAIEstimateDetails::is_estimate_id_Valid() const{
    return m_estimate_id_isValid;
}

QString OAIEstimateDetails::getEstimateItemNumber() const {
    return m_estimate_item_number;
}
void OAIEstimateDetails::setEstimateItemNumber(const QString &estimate_item_number) {
    m_estimate_item_number = estimate_item_number;
    m_estimate_item_number_isSet = true;
}

bool OAIEstimateDetails::is_estimate_item_number_Set() const{
    return m_estimate_item_number_isSet;
}

bool OAIEstimateDetails::is_estimate_item_number_Valid() const{
    return m_estimate_item_number_isValid;
}

QString OAIEstimateDetails::getEstimatePrefix() const {
    return m_estimate_prefix;
}
void OAIEstimateDetails::setEstimatePrefix(const QString &estimate_prefix) {
    m_estimate_prefix = estimate_prefix;
    m_estimate_prefix_isSet = true;
}

bool OAIEstimateDetails::is_estimate_prefix_Set() const{
    return m_estimate_prefix_isSet;
}

bool OAIEstimateDetails::is_estimate_prefix_Valid() const{
    return m_estimate_prefix_isValid;
}

QString OAIEstimateDetails::getEstimateStatusCode() const {
    return m_estimate_status_code;
}
void OAIEstimateDetails::setEstimateStatusCode(const QString &estimate_status_code) {
    m_estimate_status_code = estimate_status_code;
    m_estimate_status_code_isSet = true;
}

bool OAIEstimateDetails::is_estimate_status_code_Set() const{
    return m_estimate_status_code_isSet;
}

bool OAIEstimateDetails::is_estimate_status_code_Valid() const{
    return m_estimate_status_code_isValid;
}

QString OAIEstimateDetails::getEstimateTaxConfigCode() const {
    return m_estimate_tax_config_code;
}
void OAIEstimateDetails::setEstimateTaxConfigCode(const QString &estimate_tax_config_code) {
    m_estimate_tax_config_code = estimate_tax_config_code;
    m_estimate_tax_config_code_isSet = true;
}

bool OAIEstimateDetails::is_estimate_tax_config_code_Set() const{
    return m_estimate_tax_config_code_isSet;
}

bool OAIEstimateDetails::is_estimate_tax_config_code_Valid() const{
    return m_estimate_tax_config_code_isValid;
}

double OAIEstimateDetails::getExchangeRate() const {
    return m_exchange_rate;
}
void OAIEstimateDetails::setExchangeRate(const double &exchange_rate) {
    m_exchange_rate = exchange_rate;
    m_exchange_rate_isSet = true;
}

bool OAIEstimateDetails::is_exchange_rate_Set() const{
    return m_exchange_rate_isSet;
}

bool OAIEstimateDetails::is_exchange_rate_Valid() const{
    return m_exchange_rate_isValid;
}

OAIIssuerDetails OAIEstimateDetails::getIssuer() const {
    return m_issuer;
}
void OAIEstimateDetails::setIssuer(const OAIIssuerDetails &issuer) {
    m_issuer = issuer;
    m_issuer_isSet = true;
}

bool OAIEstimateDetails::is_issuer_Set() const{
    return m_issuer_isSet;
}

bool OAIEstimateDetails::is_issuer_Valid() const{
    return m_issuer_isValid;
}

QList<OAIEstimateLineItemDetails> OAIEstimateDetails::getLineItems() const {
    return m_line_items;
}
void OAIEstimateDetails::setLineItems(const QList<OAIEstimateLineItemDetails> &line_items) {
    m_line_items = line_items;
    m_line_items_isSet = true;
}

bool OAIEstimateDetails::is_line_items_Set() const{
    return m_line_items_isSet;
}

bool OAIEstimateDetails::is_line_items_Valid() const{
    return m_line_items_isValid;
}

OAIEstimateLinks OAIEstimateDetails::getLinks() const {
    return m_links;
}
void OAIEstimateDetails::setLinks(const OAIEstimateLinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIEstimateDetails::is_links_Set() const{
    return m_links_isSet;
}

bool OAIEstimateDetails::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIEstimateDetails::getNotes() const {
    return m_notes;
}
void OAIEstimateDetails::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIEstimateDetails::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIEstimateDetails::is_notes_Valid() const{
    return m_notes_isValid;
}

OAIRecipientDetails OAIEstimateDetails::getRecipient() const {
    return m_recipient;
}
void OAIEstimateDetails::setRecipient(const OAIRecipientDetails &recipient) {
    m_recipient = recipient;
    m_recipient_isSet = true;
}

bool OAIEstimateDetails::is_recipient_Set() const{
    return m_recipient_isSet;
}

bool OAIEstimateDetails::is_recipient_Valid() const{
    return m_recipient_isValid;
}

QString OAIEstimateDetails::getSubject() const {
    return m_subject;
}
void OAIEstimateDetails::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIEstimateDetails::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIEstimateDetails::is_subject_Valid() const{
    return m_subject_isValid;
}

double OAIEstimateDetails::getTaxAmount() const {
    return m_tax_amount;
}
void OAIEstimateDetails::setTaxAmount(const double &tax_amount) {
    m_tax_amount = tax_amount;
    m_tax_amount_isSet = true;
}

bool OAIEstimateDetails::is_tax_amount_Set() const{
    return m_tax_amount_isSet;
}

bool OAIEstimateDetails::is_tax_amount_Valid() const{
    return m_tax_amount_isValid;
}

double OAIEstimateDetails::getTotalAmount() const {
    return m_total_amount;
}
void OAIEstimateDetails::setTotalAmount(const double &total_amount) {
    m_total_amount = total_amount;
    m_total_amount_isSet = true;
}

bool OAIEstimateDetails::is_total_amount_Set() const{
    return m_total_amount_isSet;
}

bool OAIEstimateDetails::is_total_amount_Valid() const{
    return m_total_amount_isValid;
}

bool OAIEstimateDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_issued_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimate_item_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimate_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimate_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimate_tax_config_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_amount_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEstimateDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
