/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserDetails::OAIUserDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserDetails::OAIUserDetails() {
    this->initializeModel();
}

OAIUserDetails::~OAIUserDetails() {}

void OAIUserDetails::initializeModel() {

    m_account_idfk_isSet = false;
    m_account_idfk_isValid = false;

    m_company_idfk_isSet = false;
    m_company_idfk_isValid = false;

    m_company_name_isSet = false;
    m_company_name_isValid = false;

    m_default_billable_rate_isSet = false;
    m_default_billable_rate_isValid = false;

    m_default_cost_rate_isSet = false;
    m_default_cost_rate_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_firstname_isSet = false;
    m_firstname_isValid = false;

    m_friday_available_hours_isSet = false;
    m_friday_available_hours_isValid = false;

    m_iana_timezone_isSet = false;
    m_iana_timezone_isValid = false;

    m_lastname_isSet = false;
    m_lastname_isValid = false;

    m_mobile_isSet = false;
    m_mobile_isValid = false;

    m_monday_available_hours_isSet = false;
    m_monday_available_hours_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_position_title_isSet = false;
    m_position_title_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;

    m_saturday_available_hours_isSet = false;
    m_saturday_available_hours_isValid = false;

    m_sunday_available_hours_isSet = false;
    m_sunday_available_hours_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_thursday_available_hours_isSet = false;
    m_thursday_available_hours_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_tuesday_available_hours_isSet = false;
    m_tuesday_available_hours_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_wednesday_available_hours_isSet = false;
    m_wednesday_available_hours_isValid = false;

    m_is_team_member_isSet = false;
    m_is_team_member_isValid = false;
}

void OAIUserDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserDetails::fromJsonObject(QJsonObject json) {

    m_account_idfk_isValid = ::OpenAPI::fromJsonValue(m_account_idfk, json[QString("AccountIDFK")]);
    m_account_idfk_isSet = !json[QString("AccountIDFK")].isNull() && m_account_idfk_isValid;

    m_company_idfk_isValid = ::OpenAPI::fromJsonValue(m_company_idfk, json[QString("CompanyIDFK")]);
    m_company_idfk_isSet = !json[QString("CompanyIDFK")].isNull() && m_company_idfk_isValid;

    m_company_name_isValid = ::OpenAPI::fromJsonValue(m_company_name, json[QString("CompanyName")]);
    m_company_name_isSet = !json[QString("CompanyName")].isNull() && m_company_name_isValid;

    m_default_billable_rate_isValid = ::OpenAPI::fromJsonValue(m_default_billable_rate, json[QString("DefaultBillableRate")]);
    m_default_billable_rate_isSet = !json[QString("DefaultBillableRate")].isNull() && m_default_billable_rate_isValid;

    m_default_cost_rate_isValid = ::OpenAPI::fromJsonValue(m_default_cost_rate, json[QString("DefaultCostRate")]);
    m_default_cost_rate_isSet = !json[QString("DefaultCostRate")].isNull() && m_default_cost_rate_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("Email")]);
    m_email_isSet = !json[QString("Email")].isNull() && m_email_isValid;

    m_firstname_isValid = ::OpenAPI::fromJsonValue(m_firstname, json[QString("Firstname")]);
    m_firstname_isSet = !json[QString("Firstname")].isNull() && m_firstname_isValid;

    m_friday_available_hours_isValid = ::OpenAPI::fromJsonValue(m_friday_available_hours, json[QString("FridayAvailableHours")]);
    m_friday_available_hours_isSet = !json[QString("FridayAvailableHours")].isNull() && m_friday_available_hours_isValid;

    m_iana_timezone_isValid = ::OpenAPI::fromJsonValue(m_iana_timezone, json[QString("IANATimezone")]);
    m_iana_timezone_isSet = !json[QString("IANATimezone")].isNull() && m_iana_timezone_isValid;

    m_lastname_isValid = ::OpenAPI::fromJsonValue(m_lastname, json[QString("Lastname")]);
    m_lastname_isSet = !json[QString("Lastname")].isNull() && m_lastname_isValid;

    m_mobile_isValid = ::OpenAPI::fromJsonValue(m_mobile, json[QString("Mobile")]);
    m_mobile_isSet = !json[QString("Mobile")].isNull() && m_mobile_isValid;

    m_monday_available_hours_isValid = ::OpenAPI::fromJsonValue(m_monday_available_hours, json[QString("MondayAvailableHours")]);
    m_monday_available_hours_isSet = !json[QString("MondayAvailableHours")].isNull() && m_monday_available_hours_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("Phone")]);
    m_phone_isSet = !json[QString("Phone")].isNull() && m_phone_isValid;

    m_position_title_isValid = ::OpenAPI::fromJsonValue(m_position_title, json[QString("PositionTitle")]);
    m_position_title_isSet = !json[QString("PositionTitle")].isNull() && m_position_title_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("Roles")]);
    m_roles_isSet = !json[QString("Roles")].isNull() && m_roles_isValid;

    m_saturday_available_hours_isValid = ::OpenAPI::fromJsonValue(m_saturday_available_hours, json[QString("SaturdayAvailableHours")]);
    m_saturday_available_hours_isSet = !json[QString("SaturdayAvailableHours")].isNull() && m_saturday_available_hours_isValid;

    m_sunday_available_hours_isValid = ::OpenAPI::fromJsonValue(m_sunday_available_hours, json[QString("SundayAvailableHours")]);
    m_sunday_available_hours_isSet = !json[QString("SundayAvailableHours")].isNull() && m_sunday_available_hours_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_thursday_available_hours_isValid = ::OpenAPI::fromJsonValue(m_thursday_available_hours, json[QString("ThursdayAvailableHours")]);
    m_thursday_available_hours_isSet = !json[QString("ThursdayAvailableHours")].isNull() && m_thursday_available_hours_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("TimeZone")]);
    m_time_zone_isSet = !json[QString("TimeZone")].isNull() && m_time_zone_isValid;

    m_tuesday_available_hours_isValid = ::OpenAPI::fromJsonValue(m_tuesday_available_hours, json[QString("TuesdayAvailableHours")]);
    m_tuesday_available_hours_isSet = !json[QString("TuesdayAvailableHours")].isNull() && m_tuesday_available_hours_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("UserID")]);
    m_user_id_isSet = !json[QString("UserID")].isNull() && m_user_id_isValid;

    m_wednesday_available_hours_isValid = ::OpenAPI::fromJsonValue(m_wednesday_available_hours, json[QString("WednesdayAvailableHours")]);
    m_wednesday_available_hours_isSet = !json[QString("WednesdayAvailableHours")].isNull() && m_wednesday_available_hours_isValid;

    m_is_team_member_isValid = ::OpenAPI::fromJsonValue(m_is_team_member, json[QString("isTeamMember")]);
    m_is_team_member_isSet = !json[QString("isTeamMember")].isNull() && m_is_team_member_isValid;
}

QString OAIUserDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_account_idfk_isSet) {
        obj.insert(QString("AccountIDFK"), ::OpenAPI::toJsonValue(m_account_idfk));
    }
    if (m_company_idfk_isSet) {
        obj.insert(QString("CompanyIDFK"), ::OpenAPI::toJsonValue(m_company_idfk));
    }
    if (m_company_name_isSet) {
        obj.insert(QString("CompanyName"), ::OpenAPI::toJsonValue(m_company_name));
    }
    if (m_default_billable_rate_isSet) {
        obj.insert(QString("DefaultBillableRate"), ::OpenAPI::toJsonValue(m_default_billable_rate));
    }
    if (m_default_cost_rate_isSet) {
        obj.insert(QString("DefaultCostRate"), ::OpenAPI::toJsonValue(m_default_cost_rate));
    }
    if (m_email_isSet) {
        obj.insert(QString("Email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_firstname_isSet) {
        obj.insert(QString("Firstname"), ::OpenAPI::toJsonValue(m_firstname));
    }
    if (m_friday_available_hours_isSet) {
        obj.insert(QString("FridayAvailableHours"), ::OpenAPI::toJsonValue(m_friday_available_hours));
    }
    if (m_iana_timezone_isSet) {
        obj.insert(QString("IANATimezone"), ::OpenAPI::toJsonValue(m_iana_timezone));
    }
    if (m_lastname_isSet) {
        obj.insert(QString("Lastname"), ::OpenAPI::toJsonValue(m_lastname));
    }
    if (m_mobile_isSet) {
        obj.insert(QString("Mobile"), ::OpenAPI::toJsonValue(m_mobile));
    }
    if (m_monday_available_hours_isSet) {
        obj.insert(QString("MondayAvailableHours"), ::OpenAPI::toJsonValue(m_monday_available_hours));
    }
    if (m_phone_isSet) {
        obj.insert(QString("Phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_position_title_isSet) {
        obj.insert(QString("PositionTitle"), ::OpenAPI::toJsonValue(m_position_title));
    }
    if (m_roles.size() > 0) {
        obj.insert(QString("Roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    if (m_saturday_available_hours_isSet) {
        obj.insert(QString("SaturdayAvailableHours"), ::OpenAPI::toJsonValue(m_saturday_available_hours));
    }
    if (m_sunday_available_hours_isSet) {
        obj.insert(QString("SundayAvailableHours"), ::OpenAPI::toJsonValue(m_sunday_available_hours));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_thursday_available_hours_isSet) {
        obj.insert(QString("ThursdayAvailableHours"), ::OpenAPI::toJsonValue(m_thursday_available_hours));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("TimeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_tuesday_available_hours_isSet) {
        obj.insert(QString("TuesdayAvailableHours"), ::OpenAPI::toJsonValue(m_tuesday_available_hours));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("UserID"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_wednesday_available_hours_isSet) {
        obj.insert(QString("WednesdayAvailableHours"), ::OpenAPI::toJsonValue(m_wednesday_available_hours));
    }
    if (m_is_team_member_isSet) {
        obj.insert(QString("isTeamMember"), ::OpenAPI::toJsonValue(m_is_team_member));
    }
    return obj;
}

qint32 OAIUserDetails::getAccountIdfk() const {
    return m_account_idfk;
}
void OAIUserDetails::setAccountIdfk(const qint32 &account_idfk) {
    m_account_idfk = account_idfk;
    m_account_idfk_isSet = true;
}

bool OAIUserDetails::is_account_idfk_Set() const{
    return m_account_idfk_isSet;
}

bool OAIUserDetails::is_account_idfk_Valid() const{
    return m_account_idfk_isValid;
}

qint32 OAIUserDetails::getCompanyIdfk() const {
    return m_company_idfk;
}
void OAIUserDetails::setCompanyIdfk(const qint32 &company_idfk) {
    m_company_idfk = company_idfk;
    m_company_idfk_isSet = true;
}

bool OAIUserDetails::is_company_idfk_Set() const{
    return m_company_idfk_isSet;
}

bool OAIUserDetails::is_company_idfk_Valid() const{
    return m_company_idfk_isValid;
}

QString OAIUserDetails::getCompanyName() const {
    return m_company_name;
}
void OAIUserDetails::setCompanyName(const QString &company_name) {
    m_company_name = company_name;
    m_company_name_isSet = true;
}

bool OAIUserDetails::is_company_name_Set() const{
    return m_company_name_isSet;
}

bool OAIUserDetails::is_company_name_Valid() const{
    return m_company_name_isValid;
}

double OAIUserDetails::getDefaultBillableRate() const {
    return m_default_billable_rate;
}
void OAIUserDetails::setDefaultBillableRate(const double &default_billable_rate) {
    m_default_billable_rate = default_billable_rate;
    m_default_billable_rate_isSet = true;
}

bool OAIUserDetails::is_default_billable_rate_Set() const{
    return m_default_billable_rate_isSet;
}

bool OAIUserDetails::is_default_billable_rate_Valid() const{
    return m_default_billable_rate_isValid;
}

double OAIUserDetails::getDefaultCostRate() const {
    return m_default_cost_rate;
}
void OAIUserDetails::setDefaultCostRate(const double &default_cost_rate) {
    m_default_cost_rate = default_cost_rate;
    m_default_cost_rate_isSet = true;
}

bool OAIUserDetails::is_default_cost_rate_Set() const{
    return m_default_cost_rate_isSet;
}

bool OAIUserDetails::is_default_cost_rate_Valid() const{
    return m_default_cost_rate_isValid;
}

QString OAIUserDetails::getEmail() const {
    return m_email;
}
void OAIUserDetails::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUserDetails::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUserDetails::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIUserDetails::getFirstname() const {
    return m_firstname;
}
void OAIUserDetails::setFirstname(const QString &firstname) {
    m_firstname = firstname;
    m_firstname_isSet = true;
}

bool OAIUserDetails::is_firstname_Set() const{
    return m_firstname_isSet;
}

bool OAIUserDetails::is_firstname_Valid() const{
    return m_firstname_isValid;
}

double OAIUserDetails::getFridayAvailableHours() const {
    return m_friday_available_hours;
}
void OAIUserDetails::setFridayAvailableHours(const double &friday_available_hours) {
    m_friday_available_hours = friday_available_hours;
    m_friday_available_hours_isSet = true;
}

bool OAIUserDetails::is_friday_available_hours_Set() const{
    return m_friday_available_hours_isSet;
}

bool OAIUserDetails::is_friday_available_hours_Valid() const{
    return m_friday_available_hours_isValid;
}

QString OAIUserDetails::getIanaTimezone() const {
    return m_iana_timezone;
}
void OAIUserDetails::setIanaTimezone(const QString &iana_timezone) {
    m_iana_timezone = iana_timezone;
    m_iana_timezone_isSet = true;
}

bool OAIUserDetails::is_iana_timezone_Set() const{
    return m_iana_timezone_isSet;
}

bool OAIUserDetails::is_iana_timezone_Valid() const{
    return m_iana_timezone_isValid;
}

QString OAIUserDetails::getLastname() const {
    return m_lastname;
}
void OAIUserDetails::setLastname(const QString &lastname) {
    m_lastname = lastname;
    m_lastname_isSet = true;
}

bool OAIUserDetails::is_lastname_Set() const{
    return m_lastname_isSet;
}

bool OAIUserDetails::is_lastname_Valid() const{
    return m_lastname_isValid;
}

QString OAIUserDetails::getMobile() const {
    return m_mobile;
}
void OAIUserDetails::setMobile(const QString &mobile) {
    m_mobile = mobile;
    m_mobile_isSet = true;
}

bool OAIUserDetails::is_mobile_Set() const{
    return m_mobile_isSet;
}

bool OAIUserDetails::is_mobile_Valid() const{
    return m_mobile_isValid;
}

double OAIUserDetails::getMondayAvailableHours() const {
    return m_monday_available_hours;
}
void OAIUserDetails::setMondayAvailableHours(const double &monday_available_hours) {
    m_monday_available_hours = monday_available_hours;
    m_monday_available_hours_isSet = true;
}

bool OAIUserDetails::is_monday_available_hours_Set() const{
    return m_monday_available_hours_isSet;
}

bool OAIUserDetails::is_monday_available_hours_Valid() const{
    return m_monday_available_hours_isValid;
}

QString OAIUserDetails::getPhone() const {
    return m_phone;
}
void OAIUserDetails::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIUserDetails::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIUserDetails::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAIUserDetails::getPositionTitle() const {
    return m_position_title;
}
void OAIUserDetails::setPositionTitle(const QString &position_title) {
    m_position_title = position_title;
    m_position_title_isSet = true;
}

bool OAIUserDetails::is_position_title_Set() const{
    return m_position_title_isSet;
}

bool OAIUserDetails::is_position_title_Valid() const{
    return m_position_title_isValid;
}

QList<OAIRoleDetails> OAIUserDetails::getRoles() const {
    return m_roles;
}
void OAIUserDetails::setRoles(const QList<OAIRoleDetails> &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAIUserDetails::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAIUserDetails::is_roles_Valid() const{
    return m_roles_isValid;
}

double OAIUserDetails::getSaturdayAvailableHours() const {
    return m_saturday_available_hours;
}
void OAIUserDetails::setSaturdayAvailableHours(const double &saturday_available_hours) {
    m_saturday_available_hours = saturday_available_hours;
    m_saturday_available_hours_isSet = true;
}

bool OAIUserDetails::is_saturday_available_hours_Set() const{
    return m_saturday_available_hours_isSet;
}

bool OAIUserDetails::is_saturday_available_hours_Valid() const{
    return m_saturday_available_hours_isValid;
}

double OAIUserDetails::getSundayAvailableHours() const {
    return m_sunday_available_hours;
}
void OAIUserDetails::setSundayAvailableHours(const double &sunday_available_hours) {
    m_sunday_available_hours = sunday_available_hours;
    m_sunday_available_hours_isSet = true;
}

bool OAIUserDetails::is_sunday_available_hours_Set() const{
    return m_sunday_available_hours_isSet;
}

bool OAIUserDetails::is_sunday_available_hours_Valid() const{
    return m_sunday_available_hours_isValid;
}

QList<OAIUserTagDetails> OAIUserDetails::getTags() const {
    return m_tags;
}
void OAIUserDetails::setTags(const QList<OAIUserTagDetails> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIUserDetails::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIUserDetails::is_tags_Valid() const{
    return m_tags_isValid;
}

double OAIUserDetails::getThursdayAvailableHours() const {
    return m_thursday_available_hours;
}
void OAIUserDetails::setThursdayAvailableHours(const double &thursday_available_hours) {
    m_thursday_available_hours = thursday_available_hours;
    m_thursday_available_hours_isSet = true;
}

bool OAIUserDetails::is_thursday_available_hours_Set() const{
    return m_thursday_available_hours_isSet;
}

bool OAIUserDetails::is_thursday_available_hours_Valid() const{
    return m_thursday_available_hours_isValid;
}

QString OAIUserDetails::getTimeZone() const {
    return m_time_zone;
}
void OAIUserDetails::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIUserDetails::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIUserDetails::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

double OAIUserDetails::getTuesdayAvailableHours() const {
    return m_tuesday_available_hours;
}
void OAIUserDetails::setTuesdayAvailableHours(const double &tuesday_available_hours) {
    m_tuesday_available_hours = tuesday_available_hours;
    m_tuesday_available_hours_isSet = true;
}

bool OAIUserDetails::is_tuesday_available_hours_Set() const{
    return m_tuesday_available_hours_isSet;
}

bool OAIUserDetails::is_tuesday_available_hours_Valid() const{
    return m_tuesday_available_hours_isValid;
}

qint32 OAIUserDetails::getUserId() const {
    return m_user_id;
}
void OAIUserDetails::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIUserDetails::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIUserDetails::is_user_id_Valid() const{
    return m_user_id_isValid;
}

double OAIUserDetails::getWednesdayAvailableHours() const {
    return m_wednesday_available_hours;
}
void OAIUserDetails::setWednesdayAvailableHours(const double &wednesday_available_hours) {
    m_wednesday_available_hours = wednesday_available_hours;
    m_wednesday_available_hours_isSet = true;
}

bool OAIUserDetails::is_wednesday_available_hours_Set() const{
    return m_wednesday_available_hours_isSet;
}

bool OAIUserDetails::is_wednesday_available_hours_Valid() const{
    return m_wednesday_available_hours_isValid;
}

bool OAIUserDetails::isIsTeamMember() const {
    return m_is_team_member;
}
void OAIUserDetails::setIsTeamMember(const bool &is_team_member) {
    m_is_team_member = is_team_member;
    m_is_team_member_isSet = true;
}

bool OAIUserDetails::is_is_team_member_Set() const{
    return m_is_team_member_isSet;
}

bool OAIUserDetails::is_is_team_member_Valid() const{
    return m_is_team_member_isValid;
}

bool OAIUserDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_billable_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_cost_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firstname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friday_available_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iana_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lastname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monday_available_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_saturday_available_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sunday_available_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_thursday_available_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tuesday_available_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wednesday_available_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_team_member_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
