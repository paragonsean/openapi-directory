/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectMemberDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectMemberDetails::OAIProjectMemberDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectMemberDetails::OAIProjectMemberDetails() {
    this->initializeModel();
}

OAIProjectMemberDetails::~OAIProjectMemberDetails() {}

void OAIProjectMemberDetails::initializeModel() {

    m_budget_amount_isSet = false;
    m_budget_amount_isValid = false;

    m_cost_amount_isSet = false;
    m_cost_amount_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_firstname_isSet = false;
    m_firstname_isValid = false;

    m_fullname_isSet = false;
    m_fullname_isValid = false;

    m_lastname_isSet = false;
    m_lastname_isValid = false;

    m_project_idfk_isSet = false;
    m_project_idfk_isValid = false;

    m_rate_amount_isSet = false;
    m_rate_amount_isValid = false;

    m_user_idfk_isSet = false;
    m_user_idfk_isValid = false;

    m_can_comment_on_tasks_isSet = false;
    m_can_comment_on_tasks_isValid = false;

    m_can_create_tasks_isSet = false;
    m_can_create_tasks_isValid = false;

    m_can_delete_tasks_isSet = false;
    m_can_delete_tasks_isValid = false;

    m_can_update_tasks_isSet = false;
    m_can_update_tasks_isValid = false;

    m_is_member_disabled_isSet = false;
    m_is_member_disabled_isValid = false;

    m_is_timesheet_allowed_isSet = false;
    m_is_timesheet_allowed_isValid = false;

    m_is_timesheet_approval_required_isSet = false;
    m_is_timesheet_approval_required_isValid = false;

    m_is_timesheet_approver_isSet = false;
    m_is_timesheet_approver_isValid = false;
}

void OAIProjectMemberDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectMemberDetails::fromJsonObject(QJsonObject json) {

    m_budget_amount_isValid = ::OpenAPI::fromJsonValue(m_budget_amount, json[QString("BudgetAmount")]);
    m_budget_amount_isSet = !json[QString("BudgetAmount")].isNull() && m_budget_amount_isValid;

    m_cost_amount_isValid = ::OpenAPI::fromJsonValue(m_cost_amount, json[QString("CostAmount")]);
    m_cost_amount_isSet = !json[QString("CostAmount")].isNull() && m_cost_amount_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("Email")]);
    m_email_isSet = !json[QString("Email")].isNull() && m_email_isValid;

    m_firstname_isValid = ::OpenAPI::fromJsonValue(m_firstname, json[QString("Firstname")]);
    m_firstname_isSet = !json[QString("Firstname")].isNull() && m_firstname_isValid;

    m_fullname_isValid = ::OpenAPI::fromJsonValue(m_fullname, json[QString("Fullname")]);
    m_fullname_isSet = !json[QString("Fullname")].isNull() && m_fullname_isValid;

    m_lastname_isValid = ::OpenAPI::fromJsonValue(m_lastname, json[QString("Lastname")]);
    m_lastname_isSet = !json[QString("Lastname")].isNull() && m_lastname_isValid;

    m_project_idfk_isValid = ::OpenAPI::fromJsonValue(m_project_idfk, json[QString("ProjectIDFK")]);
    m_project_idfk_isSet = !json[QString("ProjectIDFK")].isNull() && m_project_idfk_isValid;

    m_rate_amount_isValid = ::OpenAPI::fromJsonValue(m_rate_amount, json[QString("RateAmount")]);
    m_rate_amount_isSet = !json[QString("RateAmount")].isNull() && m_rate_amount_isValid;

    m_user_idfk_isValid = ::OpenAPI::fromJsonValue(m_user_idfk, json[QString("UserIDFK")]);
    m_user_idfk_isSet = !json[QString("UserIDFK")].isNull() && m_user_idfk_isValid;

    m_can_comment_on_tasks_isValid = ::OpenAPI::fromJsonValue(m_can_comment_on_tasks, json[QString("canCommentOnTasks")]);
    m_can_comment_on_tasks_isSet = !json[QString("canCommentOnTasks")].isNull() && m_can_comment_on_tasks_isValid;

    m_can_create_tasks_isValid = ::OpenAPI::fromJsonValue(m_can_create_tasks, json[QString("canCreateTasks")]);
    m_can_create_tasks_isSet = !json[QString("canCreateTasks")].isNull() && m_can_create_tasks_isValid;

    m_can_delete_tasks_isValid = ::OpenAPI::fromJsonValue(m_can_delete_tasks, json[QString("canDeleteTasks")]);
    m_can_delete_tasks_isSet = !json[QString("canDeleteTasks")].isNull() && m_can_delete_tasks_isValid;

    m_can_update_tasks_isValid = ::OpenAPI::fromJsonValue(m_can_update_tasks, json[QString("canUpdateTasks")]);
    m_can_update_tasks_isSet = !json[QString("canUpdateTasks")].isNull() && m_can_update_tasks_isValid;

    m_is_member_disabled_isValid = ::OpenAPI::fromJsonValue(m_is_member_disabled, json[QString("isMemberDisabled")]);
    m_is_member_disabled_isSet = !json[QString("isMemberDisabled")].isNull() && m_is_member_disabled_isValid;

    m_is_timesheet_allowed_isValid = ::OpenAPI::fromJsonValue(m_is_timesheet_allowed, json[QString("isTimesheetAllowed")]);
    m_is_timesheet_allowed_isSet = !json[QString("isTimesheetAllowed")].isNull() && m_is_timesheet_allowed_isValid;

    m_is_timesheet_approval_required_isValid = ::OpenAPI::fromJsonValue(m_is_timesheet_approval_required, json[QString("isTimesheetApprovalRequired")]);
    m_is_timesheet_approval_required_isSet = !json[QString("isTimesheetApprovalRequired")].isNull() && m_is_timesheet_approval_required_isValid;

    m_is_timesheet_approver_isValid = ::OpenAPI::fromJsonValue(m_is_timesheet_approver, json[QString("isTimesheetApprover")]);
    m_is_timesheet_approver_isSet = !json[QString("isTimesheetApprover")].isNull() && m_is_timesheet_approver_isValid;
}

QString OAIProjectMemberDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectMemberDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_budget_amount_isSet) {
        obj.insert(QString("BudgetAmount"), ::OpenAPI::toJsonValue(m_budget_amount));
    }
    if (m_cost_amount_isSet) {
        obj.insert(QString("CostAmount"), ::OpenAPI::toJsonValue(m_cost_amount));
    }
    if (m_email_isSet) {
        obj.insert(QString("Email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_firstname_isSet) {
        obj.insert(QString("Firstname"), ::OpenAPI::toJsonValue(m_firstname));
    }
    if (m_fullname_isSet) {
        obj.insert(QString("Fullname"), ::OpenAPI::toJsonValue(m_fullname));
    }
    if (m_lastname_isSet) {
        obj.insert(QString("Lastname"), ::OpenAPI::toJsonValue(m_lastname));
    }
    if (m_project_idfk_isSet) {
        obj.insert(QString("ProjectIDFK"), ::OpenAPI::toJsonValue(m_project_idfk));
    }
    if (m_rate_amount_isSet) {
        obj.insert(QString("RateAmount"), ::OpenAPI::toJsonValue(m_rate_amount));
    }
    if (m_user_idfk_isSet) {
        obj.insert(QString("UserIDFK"), ::OpenAPI::toJsonValue(m_user_idfk));
    }
    if (m_can_comment_on_tasks_isSet) {
        obj.insert(QString("canCommentOnTasks"), ::OpenAPI::toJsonValue(m_can_comment_on_tasks));
    }
    if (m_can_create_tasks_isSet) {
        obj.insert(QString("canCreateTasks"), ::OpenAPI::toJsonValue(m_can_create_tasks));
    }
    if (m_can_delete_tasks_isSet) {
        obj.insert(QString("canDeleteTasks"), ::OpenAPI::toJsonValue(m_can_delete_tasks));
    }
    if (m_can_update_tasks_isSet) {
        obj.insert(QString("canUpdateTasks"), ::OpenAPI::toJsonValue(m_can_update_tasks));
    }
    if (m_is_member_disabled_isSet) {
        obj.insert(QString("isMemberDisabled"), ::OpenAPI::toJsonValue(m_is_member_disabled));
    }
    if (m_is_timesheet_allowed_isSet) {
        obj.insert(QString("isTimesheetAllowed"), ::OpenAPI::toJsonValue(m_is_timesheet_allowed));
    }
    if (m_is_timesheet_approval_required_isSet) {
        obj.insert(QString("isTimesheetApprovalRequired"), ::OpenAPI::toJsonValue(m_is_timesheet_approval_required));
    }
    if (m_is_timesheet_approver_isSet) {
        obj.insert(QString("isTimesheetApprover"), ::OpenAPI::toJsonValue(m_is_timesheet_approver));
    }
    return obj;
}

double OAIProjectMemberDetails::getBudgetAmount() const {
    return m_budget_amount;
}
void OAIProjectMemberDetails::setBudgetAmount(const double &budget_amount) {
    m_budget_amount = budget_amount;
    m_budget_amount_isSet = true;
}

bool OAIProjectMemberDetails::is_budget_amount_Set() const{
    return m_budget_amount_isSet;
}

bool OAIProjectMemberDetails::is_budget_amount_Valid() const{
    return m_budget_amount_isValid;
}

double OAIProjectMemberDetails::getCostAmount() const {
    return m_cost_amount;
}
void OAIProjectMemberDetails::setCostAmount(const double &cost_amount) {
    m_cost_amount = cost_amount;
    m_cost_amount_isSet = true;
}

bool OAIProjectMemberDetails::is_cost_amount_Set() const{
    return m_cost_amount_isSet;
}

bool OAIProjectMemberDetails::is_cost_amount_Valid() const{
    return m_cost_amount_isValid;
}

QString OAIProjectMemberDetails::getEmail() const {
    return m_email;
}
void OAIProjectMemberDetails::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIProjectMemberDetails::is_email_Set() const{
    return m_email_isSet;
}

bool OAIProjectMemberDetails::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIProjectMemberDetails::getFirstname() const {
    return m_firstname;
}
void OAIProjectMemberDetails::setFirstname(const QString &firstname) {
    m_firstname = firstname;
    m_firstname_isSet = true;
}

bool OAIProjectMemberDetails::is_firstname_Set() const{
    return m_firstname_isSet;
}

bool OAIProjectMemberDetails::is_firstname_Valid() const{
    return m_firstname_isValid;
}

QString OAIProjectMemberDetails::getFullname() const {
    return m_fullname;
}
void OAIProjectMemberDetails::setFullname(const QString &fullname) {
    m_fullname = fullname;
    m_fullname_isSet = true;
}

bool OAIProjectMemberDetails::is_fullname_Set() const{
    return m_fullname_isSet;
}

bool OAIProjectMemberDetails::is_fullname_Valid() const{
    return m_fullname_isValid;
}

QString OAIProjectMemberDetails::getLastname() const {
    return m_lastname;
}
void OAIProjectMemberDetails::setLastname(const QString &lastname) {
    m_lastname = lastname;
    m_lastname_isSet = true;
}

bool OAIProjectMemberDetails::is_lastname_Set() const{
    return m_lastname_isSet;
}

bool OAIProjectMemberDetails::is_lastname_Valid() const{
    return m_lastname_isValid;
}

qint32 OAIProjectMemberDetails::getProjectIdfk() const {
    return m_project_idfk;
}
void OAIProjectMemberDetails::setProjectIdfk(const qint32 &project_idfk) {
    m_project_idfk = project_idfk;
    m_project_idfk_isSet = true;
}

bool OAIProjectMemberDetails::is_project_idfk_Set() const{
    return m_project_idfk_isSet;
}

bool OAIProjectMemberDetails::is_project_idfk_Valid() const{
    return m_project_idfk_isValid;
}

double OAIProjectMemberDetails::getRateAmount() const {
    return m_rate_amount;
}
void OAIProjectMemberDetails::setRateAmount(const double &rate_amount) {
    m_rate_amount = rate_amount;
    m_rate_amount_isSet = true;
}

bool OAIProjectMemberDetails::is_rate_amount_Set() const{
    return m_rate_amount_isSet;
}

bool OAIProjectMemberDetails::is_rate_amount_Valid() const{
    return m_rate_amount_isValid;
}

qint32 OAIProjectMemberDetails::getUserIdfk() const {
    return m_user_idfk;
}
void OAIProjectMemberDetails::setUserIdfk(const qint32 &user_idfk) {
    m_user_idfk = user_idfk;
    m_user_idfk_isSet = true;
}

bool OAIProjectMemberDetails::is_user_idfk_Set() const{
    return m_user_idfk_isSet;
}

bool OAIProjectMemberDetails::is_user_idfk_Valid() const{
    return m_user_idfk_isValid;
}

bool OAIProjectMemberDetails::isCanCommentOnTasks() const {
    return m_can_comment_on_tasks;
}
void OAIProjectMemberDetails::setCanCommentOnTasks(const bool &can_comment_on_tasks) {
    m_can_comment_on_tasks = can_comment_on_tasks;
    m_can_comment_on_tasks_isSet = true;
}

bool OAIProjectMemberDetails::is_can_comment_on_tasks_Set() const{
    return m_can_comment_on_tasks_isSet;
}

bool OAIProjectMemberDetails::is_can_comment_on_tasks_Valid() const{
    return m_can_comment_on_tasks_isValid;
}

bool OAIProjectMemberDetails::isCanCreateTasks() const {
    return m_can_create_tasks;
}
void OAIProjectMemberDetails::setCanCreateTasks(const bool &can_create_tasks) {
    m_can_create_tasks = can_create_tasks;
    m_can_create_tasks_isSet = true;
}

bool OAIProjectMemberDetails::is_can_create_tasks_Set() const{
    return m_can_create_tasks_isSet;
}

bool OAIProjectMemberDetails::is_can_create_tasks_Valid() const{
    return m_can_create_tasks_isValid;
}

bool OAIProjectMemberDetails::isCanDeleteTasks() const {
    return m_can_delete_tasks;
}
void OAIProjectMemberDetails::setCanDeleteTasks(const bool &can_delete_tasks) {
    m_can_delete_tasks = can_delete_tasks;
    m_can_delete_tasks_isSet = true;
}

bool OAIProjectMemberDetails::is_can_delete_tasks_Set() const{
    return m_can_delete_tasks_isSet;
}

bool OAIProjectMemberDetails::is_can_delete_tasks_Valid() const{
    return m_can_delete_tasks_isValid;
}

bool OAIProjectMemberDetails::isCanUpdateTasks() const {
    return m_can_update_tasks;
}
void OAIProjectMemberDetails::setCanUpdateTasks(const bool &can_update_tasks) {
    m_can_update_tasks = can_update_tasks;
    m_can_update_tasks_isSet = true;
}

bool OAIProjectMemberDetails::is_can_update_tasks_Set() const{
    return m_can_update_tasks_isSet;
}

bool OAIProjectMemberDetails::is_can_update_tasks_Valid() const{
    return m_can_update_tasks_isValid;
}

bool OAIProjectMemberDetails::isIsMemberDisabled() const {
    return m_is_member_disabled;
}
void OAIProjectMemberDetails::setIsMemberDisabled(const bool &is_member_disabled) {
    m_is_member_disabled = is_member_disabled;
    m_is_member_disabled_isSet = true;
}

bool OAIProjectMemberDetails::is_is_member_disabled_Set() const{
    return m_is_member_disabled_isSet;
}

bool OAIProjectMemberDetails::is_is_member_disabled_Valid() const{
    return m_is_member_disabled_isValid;
}

bool OAIProjectMemberDetails::isIsTimesheetAllowed() const {
    return m_is_timesheet_allowed;
}
void OAIProjectMemberDetails::setIsTimesheetAllowed(const bool &is_timesheet_allowed) {
    m_is_timesheet_allowed = is_timesheet_allowed;
    m_is_timesheet_allowed_isSet = true;
}

bool OAIProjectMemberDetails::is_is_timesheet_allowed_Set() const{
    return m_is_timesheet_allowed_isSet;
}

bool OAIProjectMemberDetails::is_is_timesheet_allowed_Valid() const{
    return m_is_timesheet_allowed_isValid;
}

bool OAIProjectMemberDetails::isIsTimesheetApprovalRequired() const {
    return m_is_timesheet_approval_required;
}
void OAIProjectMemberDetails::setIsTimesheetApprovalRequired(const bool &is_timesheet_approval_required) {
    m_is_timesheet_approval_required = is_timesheet_approval_required;
    m_is_timesheet_approval_required_isSet = true;
}

bool OAIProjectMemberDetails::is_is_timesheet_approval_required_Set() const{
    return m_is_timesheet_approval_required_isSet;
}

bool OAIProjectMemberDetails::is_is_timesheet_approval_required_Valid() const{
    return m_is_timesheet_approval_required_isValid;
}

bool OAIProjectMemberDetails::isIsTimesheetApprover() const {
    return m_is_timesheet_approver;
}
void OAIProjectMemberDetails::setIsTimesheetApprover(const bool &is_timesheet_approver) {
    m_is_timesheet_approver = is_timesheet_approver;
    m_is_timesheet_approver_isSet = true;
}

bool OAIProjectMemberDetails::is_is_timesheet_approver_Set() const{
    return m_is_timesheet_approver_isSet;
}

bool OAIProjectMemberDetails::is_is_timesheet_approver_Valid() const{
    return m_is_timesheet_approver_isValid;
}

bool OAIProjectMemberDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_budget_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firstname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fullname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lastname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_comment_on_tasks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_create_tasks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_delete_tasks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_update_tasks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_member_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_timesheet_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_timesheet_approval_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_timesheet_approver_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectMemberDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
