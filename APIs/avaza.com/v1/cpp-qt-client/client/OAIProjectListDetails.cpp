/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectListDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectListDetails::OAIProjectListDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectListDetails::OAIProjectListDetails() {
    this->initializeModel();
}

OAIProjectListDetails::~OAIProjectListDetails() {}

void OAIProjectListDetails::initializeModel() {

    m_company_idfk_isSet = false;
    m_company_idfk_isValid = false;

    m_company_name_isSet = false;
    m_company_name_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_default_account_task_type_idfk_isSet = false;
    m_default_account_task_type_idfk_isValid = false;

    m_default_account_task_type_name_isSet = false;
    m_default_account_task_type_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_project_category_idfk_isSet = false;
    m_project_category_idfk_isValid = false;

    m_project_category_name_isSet = false;
    m_project_category_name_isValid = false;

    m_project_code_isSet = false;
    m_project_code_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_project_owner_user_idfk_isSet = false;
    m_project_owner_user_idfk_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_is_archived_isSet = false;
    m_is_archived_isValid = false;

    m_is_task_required_on_timesheet_isSet = false;
    m_is_task_required_on_timesheet_isValid = false;
}

void OAIProjectListDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectListDetails::fromJsonObject(QJsonObject json) {

    m_company_idfk_isValid = ::OpenAPI::fromJsonValue(m_company_idfk, json[QString("CompanyIDFK")]);
    m_company_idfk_isSet = !json[QString("CompanyIDFK")].isNull() && m_company_idfk_isValid;

    m_company_name_isValid = ::OpenAPI::fromJsonValue(m_company_name, json[QString("CompanyName")]);
    m_company_name_isSet = !json[QString("CompanyName")].isNull() && m_company_name_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("DateCreated")]);
    m_date_created_isSet = !json[QString("DateCreated")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("DateUpdated")]);
    m_date_updated_isSet = !json[QString("DateUpdated")].isNull() && m_date_updated_isValid;

    m_default_account_task_type_idfk_isValid = ::OpenAPI::fromJsonValue(m_default_account_task_type_idfk, json[QString("DefaultAccountTaskTypeIDFK")]);
    m_default_account_task_type_idfk_isSet = !json[QString("DefaultAccountTaskTypeIDFK")].isNull() && m_default_account_task_type_idfk_isValid;

    m_default_account_task_type_name_isValid = ::OpenAPI::fromJsonValue(m_default_account_task_type_name, json[QString("DefaultAccountTaskTypeName")]);
    m_default_account_task_type_name_isSet = !json[QString("DefaultAccountTaskTypeName")].isNull() && m_default_account_task_type_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("Notes")]);
    m_notes_isSet = !json[QString("Notes")].isNull() && m_notes_isValid;

    m_project_category_idfk_isValid = ::OpenAPI::fromJsonValue(m_project_category_idfk, json[QString("ProjectCategoryIDFK")]);
    m_project_category_idfk_isSet = !json[QString("ProjectCategoryIDFK")].isNull() && m_project_category_idfk_isValid;

    m_project_category_name_isValid = ::OpenAPI::fromJsonValue(m_project_category_name, json[QString("ProjectCategoryName")]);
    m_project_category_name_isSet = !json[QString("ProjectCategoryName")].isNull() && m_project_category_name_isValid;

    m_project_code_isValid = ::OpenAPI::fromJsonValue(m_project_code, json[QString("ProjectCode")]);
    m_project_code_isSet = !json[QString("ProjectCode")].isNull() && m_project_code_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("ProjectID")]);
    m_project_id_isSet = !json[QString("ProjectID")].isNull() && m_project_id_isValid;

    m_project_owner_user_idfk_isValid = ::OpenAPI::fromJsonValue(m_project_owner_user_idfk, json[QString("ProjectOwnerUserIDFK")]);
    m_project_owner_user_idfk_isSet = !json[QString("ProjectOwnerUserIDFK")].isNull() && m_project_owner_user_idfk_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_is_archived_isValid = ::OpenAPI::fromJsonValue(m_is_archived, json[QString("isArchived")]);
    m_is_archived_isSet = !json[QString("isArchived")].isNull() && m_is_archived_isValid;

    m_is_task_required_on_timesheet_isValid = ::OpenAPI::fromJsonValue(m_is_task_required_on_timesheet, json[QString("isTaskRequiredOnTimesheet")]);
    m_is_task_required_on_timesheet_isSet = !json[QString("isTaskRequiredOnTimesheet")].isNull() && m_is_task_required_on_timesheet_isValid;
}

QString OAIProjectListDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectListDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_company_idfk_isSet) {
        obj.insert(QString("CompanyIDFK"), ::OpenAPI::toJsonValue(m_company_idfk));
    }
    if (m_company_name_isSet) {
        obj.insert(QString("CompanyName"), ::OpenAPI::toJsonValue(m_company_name));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("DateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("DateUpdated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_default_account_task_type_idfk_isSet) {
        obj.insert(QString("DefaultAccountTaskTypeIDFK"), ::OpenAPI::toJsonValue(m_default_account_task_type_idfk));
    }
    if (m_default_account_task_type_name_isSet) {
        obj.insert(QString("DefaultAccountTaskTypeName"), ::OpenAPI::toJsonValue(m_default_account_task_type_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("Notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_project_category_idfk_isSet) {
        obj.insert(QString("ProjectCategoryIDFK"), ::OpenAPI::toJsonValue(m_project_category_idfk));
    }
    if (m_project_category_name_isSet) {
        obj.insert(QString("ProjectCategoryName"), ::OpenAPI::toJsonValue(m_project_category_name));
    }
    if (m_project_code_isSet) {
        obj.insert(QString("ProjectCode"), ::OpenAPI::toJsonValue(m_project_code));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("ProjectID"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_project_owner_user_idfk_isSet) {
        obj.insert(QString("ProjectOwnerUserIDFK"), ::OpenAPI::toJsonValue(m_project_owner_user_idfk));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_is_archived_isSet) {
        obj.insert(QString("isArchived"), ::OpenAPI::toJsonValue(m_is_archived));
    }
    if (m_is_task_required_on_timesheet_isSet) {
        obj.insert(QString("isTaskRequiredOnTimesheet"), ::OpenAPI::toJsonValue(m_is_task_required_on_timesheet));
    }
    return obj;
}

qint32 OAIProjectListDetails::getCompanyIdfk() const {
    return m_company_idfk;
}
void OAIProjectListDetails::setCompanyIdfk(const qint32 &company_idfk) {
    m_company_idfk = company_idfk;
    m_company_idfk_isSet = true;
}

bool OAIProjectListDetails::is_company_idfk_Set() const{
    return m_company_idfk_isSet;
}

bool OAIProjectListDetails::is_company_idfk_Valid() const{
    return m_company_idfk_isValid;
}

QString OAIProjectListDetails::getCompanyName() const {
    return m_company_name;
}
void OAIProjectListDetails::setCompanyName(const QString &company_name) {
    m_company_name = company_name;
    m_company_name_isSet = true;
}

bool OAIProjectListDetails::is_company_name_Set() const{
    return m_company_name_isSet;
}

bool OAIProjectListDetails::is_company_name_Valid() const{
    return m_company_name_isValid;
}

QDateTime OAIProjectListDetails::getDateCreated() const {
    return m_date_created;
}
void OAIProjectListDetails::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIProjectListDetails::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIProjectListDetails::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIProjectListDetails::getDateUpdated() const {
    return m_date_updated;
}
void OAIProjectListDetails::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIProjectListDetails::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIProjectListDetails::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

qint32 OAIProjectListDetails::getDefaultAccountTaskTypeIdfk() const {
    return m_default_account_task_type_idfk;
}
void OAIProjectListDetails::setDefaultAccountTaskTypeIdfk(const qint32 &default_account_task_type_idfk) {
    m_default_account_task_type_idfk = default_account_task_type_idfk;
    m_default_account_task_type_idfk_isSet = true;
}

bool OAIProjectListDetails::is_default_account_task_type_idfk_Set() const{
    return m_default_account_task_type_idfk_isSet;
}

bool OAIProjectListDetails::is_default_account_task_type_idfk_Valid() const{
    return m_default_account_task_type_idfk_isValid;
}

QString OAIProjectListDetails::getDefaultAccountTaskTypeName() const {
    return m_default_account_task_type_name;
}
void OAIProjectListDetails::setDefaultAccountTaskTypeName(const QString &default_account_task_type_name) {
    m_default_account_task_type_name = default_account_task_type_name;
    m_default_account_task_type_name_isSet = true;
}

bool OAIProjectListDetails::is_default_account_task_type_name_Set() const{
    return m_default_account_task_type_name_isSet;
}

bool OAIProjectListDetails::is_default_account_task_type_name_Valid() const{
    return m_default_account_task_type_name_isValid;
}

QString OAIProjectListDetails::getNotes() const {
    return m_notes;
}
void OAIProjectListDetails::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIProjectListDetails::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIProjectListDetails::is_notes_Valid() const{
    return m_notes_isValid;
}

qint64 OAIProjectListDetails::getProjectCategoryIdfk() const {
    return m_project_category_idfk;
}
void OAIProjectListDetails::setProjectCategoryIdfk(const qint64 &project_category_idfk) {
    m_project_category_idfk = project_category_idfk;
    m_project_category_idfk_isSet = true;
}

bool OAIProjectListDetails::is_project_category_idfk_Set() const{
    return m_project_category_idfk_isSet;
}

bool OAIProjectListDetails::is_project_category_idfk_Valid() const{
    return m_project_category_idfk_isValid;
}

QString OAIProjectListDetails::getProjectCategoryName() const {
    return m_project_category_name;
}
void OAIProjectListDetails::setProjectCategoryName(const QString &project_category_name) {
    m_project_category_name = project_category_name;
    m_project_category_name_isSet = true;
}

bool OAIProjectListDetails::is_project_category_name_Set() const{
    return m_project_category_name_isSet;
}

bool OAIProjectListDetails::is_project_category_name_Valid() const{
    return m_project_category_name_isValid;
}

QString OAIProjectListDetails::getProjectCode() const {
    return m_project_code;
}
void OAIProjectListDetails::setProjectCode(const QString &project_code) {
    m_project_code = project_code;
    m_project_code_isSet = true;
}

bool OAIProjectListDetails::is_project_code_Set() const{
    return m_project_code_isSet;
}

bool OAIProjectListDetails::is_project_code_Valid() const{
    return m_project_code_isValid;
}

qint32 OAIProjectListDetails::getProjectId() const {
    return m_project_id;
}
void OAIProjectListDetails::setProjectId(const qint32 &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIProjectListDetails::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIProjectListDetails::is_project_id_Valid() const{
    return m_project_id_isValid;
}

qint64 OAIProjectListDetails::getProjectOwnerUserIdfk() const {
    return m_project_owner_user_idfk;
}
void OAIProjectListDetails::setProjectOwnerUserIdfk(const qint64 &project_owner_user_idfk) {
    m_project_owner_user_idfk = project_owner_user_idfk;
    m_project_owner_user_idfk_isSet = true;
}

bool OAIProjectListDetails::is_project_owner_user_idfk_Set() const{
    return m_project_owner_user_idfk_isSet;
}

bool OAIProjectListDetails::is_project_owner_user_idfk_Valid() const{
    return m_project_owner_user_idfk_isValid;
}

QString OAIProjectListDetails::getTitle() const {
    return m_title;
}
void OAIProjectListDetails::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIProjectListDetails::is_title_Set() const{
    return m_title_isSet;
}

bool OAIProjectListDetails::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIProjectListDetails::isIsArchived() const {
    return m_is_archived;
}
void OAIProjectListDetails::setIsArchived(const bool &is_archived) {
    m_is_archived = is_archived;
    m_is_archived_isSet = true;
}

bool OAIProjectListDetails::is_is_archived_Set() const{
    return m_is_archived_isSet;
}

bool OAIProjectListDetails::is_is_archived_Valid() const{
    return m_is_archived_isValid;
}

bool OAIProjectListDetails::isIsTaskRequiredOnTimesheet() const {
    return m_is_task_required_on_timesheet;
}
void OAIProjectListDetails::setIsTaskRequiredOnTimesheet(const bool &is_task_required_on_timesheet) {
    m_is_task_required_on_timesheet = is_task_required_on_timesheet;
    m_is_task_required_on_timesheet_isSet = true;
}

bool OAIProjectListDetails::is_is_task_required_on_timesheet_Set() const{
    return m_is_task_required_on_timesheet_isSet;
}

bool OAIProjectListDetails::is_is_task_required_on_timesheet_Valid() const{
    return m_is_task_required_on_timesheet_isValid;
}

bool OAIProjectListDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_company_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_account_task_type_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_account_task_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_category_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_category_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_owner_user_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_task_required_on_timesheet_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectListDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
