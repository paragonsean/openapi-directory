/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpenseSummaryRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpenseSummaryRequest::OAIExpenseSummaryRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpenseSummaryRequest::OAIExpenseSummaryRequest() {
    this->initializeModel();
}

OAIExpenseSummaryRequest::~OAIExpenseSummaryRequest() {}

void OAIExpenseSummaryRequest::initializeModel() {

    m_expense_date_from_isSet = false;
    m_expense_date_from_isValid = false;

    m_expense_date_to_isSet = false;
    m_expense_date_to_isValid = false;

    m_group_by_isSet = false;
    m_group_by_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIExpenseSummaryRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpenseSummaryRequest::fromJsonObject(QJsonObject json) {

    m_expense_date_from_isValid = ::OpenAPI::fromJsonValue(m_expense_date_from, json[QString("ExpenseDateFrom")]);
    m_expense_date_from_isSet = !json[QString("ExpenseDateFrom")].isNull() && m_expense_date_from_isValid;

    m_expense_date_to_isValid = ::OpenAPI::fromJsonValue(m_expense_date_to, json[QString("ExpenseDateTo")]);
    m_expense_date_to_isSet = !json[QString("ExpenseDateTo")].isNull() && m_expense_date_to_isValid;

    m_group_by_isValid = ::OpenAPI::fromJsonValue(m_group_by, json[QString("GroupBy")]);
    m_group_by_isSet = !json[QString("GroupBy")].isNull() && m_group_by_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("ProjectID")]);
    m_project_id_isSet = !json[QString("ProjectID")].isNull() && m_project_id_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("UserID")]);
    m_user_id_isSet = !json[QString("UserID")].isNull() && m_user_id_isValid;
}

QString OAIExpenseSummaryRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpenseSummaryRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_expense_date_from_isSet) {
        obj.insert(QString("ExpenseDateFrom"), ::OpenAPI::toJsonValue(m_expense_date_from));
    }
    if (m_expense_date_to_isSet) {
        obj.insert(QString("ExpenseDateTo"), ::OpenAPI::toJsonValue(m_expense_date_to));
    }
    if (m_group_by.size() > 0) {
        obj.insert(QString("GroupBy"), ::OpenAPI::toJsonValue(m_group_by));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("ProjectID"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_user_id.size() > 0) {
        obj.insert(QString("UserID"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QDateTime OAIExpenseSummaryRequest::getExpenseDateFrom() const {
    return m_expense_date_from;
}
void OAIExpenseSummaryRequest::setExpenseDateFrom(const QDateTime &expense_date_from) {
    m_expense_date_from = expense_date_from;
    m_expense_date_from_isSet = true;
}

bool OAIExpenseSummaryRequest::is_expense_date_from_Set() const{
    return m_expense_date_from_isSet;
}

bool OAIExpenseSummaryRequest::is_expense_date_from_Valid() const{
    return m_expense_date_from_isValid;
}

QDateTime OAIExpenseSummaryRequest::getExpenseDateTo() const {
    return m_expense_date_to;
}
void OAIExpenseSummaryRequest::setExpenseDateTo(const QDateTime &expense_date_to) {
    m_expense_date_to = expense_date_to;
    m_expense_date_to_isSet = true;
}

bool OAIExpenseSummaryRequest::is_expense_date_to_Set() const{
    return m_expense_date_to_isSet;
}

bool OAIExpenseSummaryRequest::is_expense_date_to_Valid() const{
    return m_expense_date_to_isValid;
}

QList<QString> OAIExpenseSummaryRequest::getGroupBy() const {
    return m_group_by;
}
void OAIExpenseSummaryRequest::setGroupBy(const QList<QString> &group_by) {
    m_group_by = group_by;
    m_group_by_isSet = true;
}

bool OAIExpenseSummaryRequest::is_group_by_Set() const{
    return m_group_by_isSet;
}

bool OAIExpenseSummaryRequest::is_group_by_Valid() const{
    return m_group_by_isValid;
}

qint32 OAIExpenseSummaryRequest::getProjectId() const {
    return m_project_id;
}
void OAIExpenseSummaryRequest::setProjectId(const qint32 &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIExpenseSummaryRequest::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIExpenseSummaryRequest::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QList<qint32> OAIExpenseSummaryRequest::getUserId() const {
    return m_user_id;
}
void OAIExpenseSummaryRequest::setUserId(const QList<qint32> &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIExpenseSummaryRequest::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIExpenseSummaryRequest::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIExpenseSummaryRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expense_date_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_date_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_by.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpenseSummaryRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
