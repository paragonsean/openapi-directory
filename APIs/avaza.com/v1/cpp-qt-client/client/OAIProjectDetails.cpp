/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectDetails::OAIProjectDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectDetails::OAIProjectDetails() {
    this->initializeModel();
}

OAIProjectDetails::~OAIProjectDetails() {}

void OAIProjectDetails::initializeModel() {

    m_budget_amount_isSet = false;
    m_budget_amount_isValid = false;

    m_budget_hours_isSet = false;
    m_budget_hours_isValid = false;

    m_company_idfk_isSet = false;
    m_company_idfk_isValid = false;

    m_company_name_isSet = false;
    m_company_name_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_default_account_task_type_idfk_isSet = false;
    m_default_account_task_type_idfk_isValid = false;

    m_default_account_task_type_name_isSet = false;
    m_default_account_task_type_name_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_members_isSet = false;
    m_members_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_project_billable_type_code_isSet = false;
    m_project_billable_type_code_isValid = false;

    m_project_budget_type_code_isSet = false;
    m_project_budget_type_code_isValid = false;

    m_project_category_color_isSet = false;
    m_project_category_color_isValid = false;

    m_project_category_idfk_isSet = false;
    m_project_category_idfk_isValid = false;

    m_project_category_name_isSet = false;
    m_project_category_name_isValid = false;

    m_project_code_isSet = false;
    m_project_code_isValid = false;

    m_project_hourly_rate_isSet = false;
    m_project_hourly_rate_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_project_owner_user_idfk_isSet = false;
    m_project_owner_user_idfk_isValid = false;

    m_project_status_code_isSet = false;
    m_project_status_code_isValid = false;

    m_project_tags_isSet = false;
    m_project_tags_isValid = false;

    m_sections_isSet = false;
    m_sections_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_is_archived_isSet = false;
    m_is_archived_isValid = false;

    m_is_task_required_on_timesheet_isSet = false;
    m_is_task_required_on_timesheet_isValid = false;
}

void OAIProjectDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectDetails::fromJsonObject(QJsonObject json) {

    m_budget_amount_isValid = ::OpenAPI::fromJsonValue(m_budget_amount, json[QString("BudgetAmount")]);
    m_budget_amount_isSet = !json[QString("BudgetAmount")].isNull() && m_budget_amount_isValid;

    m_budget_hours_isValid = ::OpenAPI::fromJsonValue(m_budget_hours, json[QString("BudgetHours")]);
    m_budget_hours_isSet = !json[QString("BudgetHours")].isNull() && m_budget_hours_isValid;

    m_company_idfk_isValid = ::OpenAPI::fromJsonValue(m_company_idfk, json[QString("CompanyIDFK")]);
    m_company_idfk_isSet = !json[QString("CompanyIDFK")].isNull() && m_company_idfk_isValid;

    m_company_name_isValid = ::OpenAPI::fromJsonValue(m_company_name, json[QString("CompanyName")]);
    m_company_name_isSet = !json[QString("CompanyName")].isNull() && m_company_name_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("DateCreated")]);
    m_date_created_isSet = !json[QString("DateCreated")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("DateUpdated")]);
    m_date_updated_isSet = !json[QString("DateUpdated")].isNull() && m_date_updated_isValid;

    m_default_account_task_type_idfk_isValid = ::OpenAPI::fromJsonValue(m_default_account_task_type_idfk, json[QString("DefaultAccountTaskTypeIDFK")]);
    m_default_account_task_type_idfk_isSet = !json[QString("DefaultAccountTaskTypeIDFK")].isNull() && m_default_account_task_type_idfk_isValid;

    m_default_account_task_type_name_isValid = ::OpenAPI::fromJsonValue(m_default_account_task_type_name, json[QString("DefaultAccountTaskTypeName")]);
    m_default_account_task_type_name_isSet = !json[QString("DefaultAccountTaskTypeName")].isNull() && m_default_account_task_type_name_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("EndDate")]);
    m_end_date_isSet = !json[QString("EndDate")].isNull() && m_end_date_isValid;

    m_members_isValid = ::OpenAPI::fromJsonValue(m_members, json[QString("Members")]);
    m_members_isSet = !json[QString("Members")].isNull() && m_members_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("Notes")]);
    m_notes_isSet = !json[QString("Notes")].isNull() && m_notes_isValid;

    m_project_billable_type_code_isValid = ::OpenAPI::fromJsonValue(m_project_billable_type_code, json[QString("ProjectBillableTypeCode")]);
    m_project_billable_type_code_isSet = !json[QString("ProjectBillableTypeCode")].isNull() && m_project_billable_type_code_isValid;

    m_project_budget_type_code_isValid = ::OpenAPI::fromJsonValue(m_project_budget_type_code, json[QString("ProjectBudgetTypeCode")]);
    m_project_budget_type_code_isSet = !json[QString("ProjectBudgetTypeCode")].isNull() && m_project_budget_type_code_isValid;

    m_project_category_color_isValid = ::OpenAPI::fromJsonValue(m_project_category_color, json[QString("ProjectCategoryColor")]);
    m_project_category_color_isSet = !json[QString("ProjectCategoryColor")].isNull() && m_project_category_color_isValid;

    m_project_category_idfk_isValid = ::OpenAPI::fromJsonValue(m_project_category_idfk, json[QString("ProjectCategoryIDFK")]);
    m_project_category_idfk_isSet = !json[QString("ProjectCategoryIDFK")].isNull() && m_project_category_idfk_isValid;

    m_project_category_name_isValid = ::OpenAPI::fromJsonValue(m_project_category_name, json[QString("ProjectCategoryName")]);
    m_project_category_name_isSet = !json[QString("ProjectCategoryName")].isNull() && m_project_category_name_isValid;

    m_project_code_isValid = ::OpenAPI::fromJsonValue(m_project_code, json[QString("ProjectCode")]);
    m_project_code_isSet = !json[QString("ProjectCode")].isNull() && m_project_code_isValid;

    m_project_hourly_rate_isValid = ::OpenAPI::fromJsonValue(m_project_hourly_rate, json[QString("ProjectHourlyRate")]);
    m_project_hourly_rate_isSet = !json[QString("ProjectHourlyRate")].isNull() && m_project_hourly_rate_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("ProjectID")]);
    m_project_id_isSet = !json[QString("ProjectID")].isNull() && m_project_id_isValid;

    m_project_owner_user_idfk_isValid = ::OpenAPI::fromJsonValue(m_project_owner_user_idfk, json[QString("ProjectOwnerUserIDFK")]);
    m_project_owner_user_idfk_isSet = !json[QString("ProjectOwnerUserIDFK")].isNull() && m_project_owner_user_idfk_isValid;

    m_project_status_code_isValid = ::OpenAPI::fromJsonValue(m_project_status_code, json[QString("ProjectStatusCode")]);
    m_project_status_code_isSet = !json[QString("ProjectStatusCode")].isNull() && m_project_status_code_isValid;

    m_project_tags_isValid = ::OpenAPI::fromJsonValue(m_project_tags, json[QString("ProjectTags")]);
    m_project_tags_isSet = !json[QString("ProjectTags")].isNull() && m_project_tags_isValid;

    m_sections_isValid = ::OpenAPI::fromJsonValue(m_sections, json[QString("Sections")]);
    m_sections_isSet = !json[QString("Sections")].isNull() && m_sections_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("StartDate")]);
    m_start_date_isSet = !json[QString("StartDate")].isNull() && m_start_date_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_is_archived_isValid = ::OpenAPI::fromJsonValue(m_is_archived, json[QString("isArchived")]);
    m_is_archived_isSet = !json[QString("isArchived")].isNull() && m_is_archived_isValid;

    m_is_task_required_on_timesheet_isValid = ::OpenAPI::fromJsonValue(m_is_task_required_on_timesheet, json[QString("isTaskRequiredOnTimesheet")]);
    m_is_task_required_on_timesheet_isSet = !json[QString("isTaskRequiredOnTimesheet")].isNull() && m_is_task_required_on_timesheet_isValid;
}

QString OAIProjectDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_budget_amount_isSet) {
        obj.insert(QString("BudgetAmount"), ::OpenAPI::toJsonValue(m_budget_amount));
    }
    if (m_budget_hours_isSet) {
        obj.insert(QString("BudgetHours"), ::OpenAPI::toJsonValue(m_budget_hours));
    }
    if (m_company_idfk_isSet) {
        obj.insert(QString("CompanyIDFK"), ::OpenAPI::toJsonValue(m_company_idfk));
    }
    if (m_company_name_isSet) {
        obj.insert(QString("CompanyName"), ::OpenAPI::toJsonValue(m_company_name));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("DateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("DateUpdated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_default_account_task_type_idfk_isSet) {
        obj.insert(QString("DefaultAccountTaskTypeIDFK"), ::OpenAPI::toJsonValue(m_default_account_task_type_idfk));
    }
    if (m_default_account_task_type_name_isSet) {
        obj.insert(QString("DefaultAccountTaskTypeName"), ::OpenAPI::toJsonValue(m_default_account_task_type_name));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("EndDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_members.size() > 0) {
        obj.insert(QString("Members"), ::OpenAPI::toJsonValue(m_members));
    }
    if (m_notes_isSet) {
        obj.insert(QString("Notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_project_billable_type_code_isSet) {
        obj.insert(QString("ProjectBillableTypeCode"), ::OpenAPI::toJsonValue(m_project_billable_type_code));
    }
    if (m_project_budget_type_code_isSet) {
        obj.insert(QString("ProjectBudgetTypeCode"), ::OpenAPI::toJsonValue(m_project_budget_type_code));
    }
    if (m_project_category_color_isSet) {
        obj.insert(QString("ProjectCategoryColor"), ::OpenAPI::toJsonValue(m_project_category_color));
    }
    if (m_project_category_idfk_isSet) {
        obj.insert(QString("ProjectCategoryIDFK"), ::OpenAPI::toJsonValue(m_project_category_idfk));
    }
    if (m_project_category_name_isSet) {
        obj.insert(QString("ProjectCategoryName"), ::OpenAPI::toJsonValue(m_project_category_name));
    }
    if (m_project_code_isSet) {
        obj.insert(QString("ProjectCode"), ::OpenAPI::toJsonValue(m_project_code));
    }
    if (m_project_hourly_rate_isSet) {
        obj.insert(QString("ProjectHourlyRate"), ::OpenAPI::toJsonValue(m_project_hourly_rate));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("ProjectID"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_project_owner_user_idfk_isSet) {
        obj.insert(QString("ProjectOwnerUserIDFK"), ::OpenAPI::toJsonValue(m_project_owner_user_idfk));
    }
    if (m_project_status_code_isSet) {
        obj.insert(QString("ProjectStatusCode"), ::OpenAPI::toJsonValue(m_project_status_code));
    }
    if (m_project_tags.size() > 0) {
        obj.insert(QString("ProjectTags"), ::OpenAPI::toJsonValue(m_project_tags));
    }
    if (m_sections.size() > 0) {
        obj.insert(QString("Sections"), ::OpenAPI::toJsonValue(m_sections));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("StartDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_is_archived_isSet) {
        obj.insert(QString("isArchived"), ::OpenAPI::toJsonValue(m_is_archived));
    }
    if (m_is_task_required_on_timesheet_isSet) {
        obj.insert(QString("isTaskRequiredOnTimesheet"), ::OpenAPI::toJsonValue(m_is_task_required_on_timesheet));
    }
    return obj;
}

double OAIProjectDetails::getBudgetAmount() const {
    return m_budget_amount;
}
void OAIProjectDetails::setBudgetAmount(const double &budget_amount) {
    m_budget_amount = budget_amount;
    m_budget_amount_isSet = true;
}

bool OAIProjectDetails::is_budget_amount_Set() const{
    return m_budget_amount_isSet;
}

bool OAIProjectDetails::is_budget_amount_Valid() const{
    return m_budget_amount_isValid;
}

double OAIProjectDetails::getBudgetHours() const {
    return m_budget_hours;
}
void OAIProjectDetails::setBudgetHours(const double &budget_hours) {
    m_budget_hours = budget_hours;
    m_budget_hours_isSet = true;
}

bool OAIProjectDetails::is_budget_hours_Set() const{
    return m_budget_hours_isSet;
}

bool OAIProjectDetails::is_budget_hours_Valid() const{
    return m_budget_hours_isValid;
}

qint32 OAIProjectDetails::getCompanyIdfk() const {
    return m_company_idfk;
}
void OAIProjectDetails::setCompanyIdfk(const qint32 &company_idfk) {
    m_company_idfk = company_idfk;
    m_company_idfk_isSet = true;
}

bool OAIProjectDetails::is_company_idfk_Set() const{
    return m_company_idfk_isSet;
}

bool OAIProjectDetails::is_company_idfk_Valid() const{
    return m_company_idfk_isValid;
}

QString OAIProjectDetails::getCompanyName() const {
    return m_company_name;
}
void OAIProjectDetails::setCompanyName(const QString &company_name) {
    m_company_name = company_name;
    m_company_name_isSet = true;
}

bool OAIProjectDetails::is_company_name_Set() const{
    return m_company_name_isSet;
}

bool OAIProjectDetails::is_company_name_Valid() const{
    return m_company_name_isValid;
}

QDateTime OAIProjectDetails::getDateCreated() const {
    return m_date_created;
}
void OAIProjectDetails::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIProjectDetails::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIProjectDetails::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIProjectDetails::getDateUpdated() const {
    return m_date_updated;
}
void OAIProjectDetails::setDateUpdated(const QDateTime &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIProjectDetails::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIProjectDetails::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

qint32 OAIProjectDetails::getDefaultAccountTaskTypeIdfk() const {
    return m_default_account_task_type_idfk;
}
void OAIProjectDetails::setDefaultAccountTaskTypeIdfk(const qint32 &default_account_task_type_idfk) {
    m_default_account_task_type_idfk = default_account_task_type_idfk;
    m_default_account_task_type_idfk_isSet = true;
}

bool OAIProjectDetails::is_default_account_task_type_idfk_Set() const{
    return m_default_account_task_type_idfk_isSet;
}

bool OAIProjectDetails::is_default_account_task_type_idfk_Valid() const{
    return m_default_account_task_type_idfk_isValid;
}

QString OAIProjectDetails::getDefaultAccountTaskTypeName() const {
    return m_default_account_task_type_name;
}
void OAIProjectDetails::setDefaultAccountTaskTypeName(const QString &default_account_task_type_name) {
    m_default_account_task_type_name = default_account_task_type_name;
    m_default_account_task_type_name_isSet = true;
}

bool OAIProjectDetails::is_default_account_task_type_name_Set() const{
    return m_default_account_task_type_name_isSet;
}

bool OAIProjectDetails::is_default_account_task_type_name_Valid() const{
    return m_default_account_task_type_name_isValid;
}

QDateTime OAIProjectDetails::getEndDate() const {
    return m_end_date;
}
void OAIProjectDetails::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIProjectDetails::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIProjectDetails::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QList<OAIProjectMemberDetails> OAIProjectDetails::getMembers() const {
    return m_members;
}
void OAIProjectDetails::setMembers(const QList<OAIProjectMemberDetails> &members) {
    m_members = members;
    m_members_isSet = true;
}

bool OAIProjectDetails::is_members_Set() const{
    return m_members_isSet;
}

bool OAIProjectDetails::is_members_Valid() const{
    return m_members_isValid;
}

QString OAIProjectDetails::getNotes() const {
    return m_notes;
}
void OAIProjectDetails::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIProjectDetails::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIProjectDetails::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIProjectDetails::getProjectBillableTypeCode() const {
    return m_project_billable_type_code;
}
void OAIProjectDetails::setProjectBillableTypeCode(const QString &project_billable_type_code) {
    m_project_billable_type_code = project_billable_type_code;
    m_project_billable_type_code_isSet = true;
}

bool OAIProjectDetails::is_project_billable_type_code_Set() const{
    return m_project_billable_type_code_isSet;
}

bool OAIProjectDetails::is_project_billable_type_code_Valid() const{
    return m_project_billable_type_code_isValid;
}

QString OAIProjectDetails::getProjectBudgetTypeCode() const {
    return m_project_budget_type_code;
}
void OAIProjectDetails::setProjectBudgetTypeCode(const QString &project_budget_type_code) {
    m_project_budget_type_code = project_budget_type_code;
    m_project_budget_type_code_isSet = true;
}

bool OAIProjectDetails::is_project_budget_type_code_Set() const{
    return m_project_budget_type_code_isSet;
}

bool OAIProjectDetails::is_project_budget_type_code_Valid() const{
    return m_project_budget_type_code_isValid;
}

QString OAIProjectDetails::getProjectCategoryColor() const {
    return m_project_category_color;
}
void OAIProjectDetails::setProjectCategoryColor(const QString &project_category_color) {
    m_project_category_color = project_category_color;
    m_project_category_color_isSet = true;
}

bool OAIProjectDetails::is_project_category_color_Set() const{
    return m_project_category_color_isSet;
}

bool OAIProjectDetails::is_project_category_color_Valid() const{
    return m_project_category_color_isValid;
}

qint32 OAIProjectDetails::getProjectCategoryIdfk() const {
    return m_project_category_idfk;
}
void OAIProjectDetails::setProjectCategoryIdfk(const qint32 &project_category_idfk) {
    m_project_category_idfk = project_category_idfk;
    m_project_category_idfk_isSet = true;
}

bool OAIProjectDetails::is_project_category_idfk_Set() const{
    return m_project_category_idfk_isSet;
}

bool OAIProjectDetails::is_project_category_idfk_Valid() const{
    return m_project_category_idfk_isValid;
}

QString OAIProjectDetails::getProjectCategoryName() const {
    return m_project_category_name;
}
void OAIProjectDetails::setProjectCategoryName(const QString &project_category_name) {
    m_project_category_name = project_category_name;
    m_project_category_name_isSet = true;
}

bool OAIProjectDetails::is_project_category_name_Set() const{
    return m_project_category_name_isSet;
}

bool OAIProjectDetails::is_project_category_name_Valid() const{
    return m_project_category_name_isValid;
}

QString OAIProjectDetails::getProjectCode() const {
    return m_project_code;
}
void OAIProjectDetails::setProjectCode(const QString &project_code) {
    m_project_code = project_code;
    m_project_code_isSet = true;
}

bool OAIProjectDetails::is_project_code_Set() const{
    return m_project_code_isSet;
}

bool OAIProjectDetails::is_project_code_Valid() const{
    return m_project_code_isValid;
}

double OAIProjectDetails::getProjectHourlyRate() const {
    return m_project_hourly_rate;
}
void OAIProjectDetails::setProjectHourlyRate(const double &project_hourly_rate) {
    m_project_hourly_rate = project_hourly_rate;
    m_project_hourly_rate_isSet = true;
}

bool OAIProjectDetails::is_project_hourly_rate_Set() const{
    return m_project_hourly_rate_isSet;
}

bool OAIProjectDetails::is_project_hourly_rate_Valid() const{
    return m_project_hourly_rate_isValid;
}

qint32 OAIProjectDetails::getProjectId() const {
    return m_project_id;
}
void OAIProjectDetails::setProjectId(const qint32 &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIProjectDetails::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIProjectDetails::is_project_id_Valid() const{
    return m_project_id_isValid;
}

qint32 OAIProjectDetails::getProjectOwnerUserIdfk() const {
    return m_project_owner_user_idfk;
}
void OAIProjectDetails::setProjectOwnerUserIdfk(const qint32 &project_owner_user_idfk) {
    m_project_owner_user_idfk = project_owner_user_idfk;
    m_project_owner_user_idfk_isSet = true;
}

bool OAIProjectDetails::is_project_owner_user_idfk_Set() const{
    return m_project_owner_user_idfk_isSet;
}

bool OAIProjectDetails::is_project_owner_user_idfk_Valid() const{
    return m_project_owner_user_idfk_isValid;
}

QString OAIProjectDetails::getProjectStatusCode() const {
    return m_project_status_code;
}
void OAIProjectDetails::setProjectStatusCode(const QString &project_status_code) {
    m_project_status_code = project_status_code;
    m_project_status_code_isSet = true;
}

bool OAIProjectDetails::is_project_status_code_Set() const{
    return m_project_status_code_isSet;
}

bool OAIProjectDetails::is_project_status_code_Valid() const{
    return m_project_status_code_isValid;
}

QList<OAIProjectTagItem> OAIProjectDetails::getProjectTags() const {
    return m_project_tags;
}
void OAIProjectDetails::setProjectTags(const QList<OAIProjectTagItem> &project_tags) {
    m_project_tags = project_tags;
    m_project_tags_isSet = true;
}

bool OAIProjectDetails::is_project_tags_Set() const{
    return m_project_tags_isSet;
}

bool OAIProjectDetails::is_project_tags_Valid() const{
    return m_project_tags_isValid;
}

QList<OAIProjectSectionDetails> OAIProjectDetails::getSections() const {
    return m_sections;
}
void OAIProjectDetails::setSections(const QList<OAIProjectSectionDetails> &sections) {
    m_sections = sections;
    m_sections_isSet = true;
}

bool OAIProjectDetails::is_sections_Set() const{
    return m_sections_isSet;
}

bool OAIProjectDetails::is_sections_Valid() const{
    return m_sections_isValid;
}

QDateTime OAIProjectDetails::getStartDate() const {
    return m_start_date;
}
void OAIProjectDetails::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIProjectDetails::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIProjectDetails::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIProjectDetails::getTitle() const {
    return m_title;
}
void OAIProjectDetails::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIProjectDetails::is_title_Set() const{
    return m_title_isSet;
}

bool OAIProjectDetails::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIProjectDetails::isIsArchived() const {
    return m_is_archived;
}
void OAIProjectDetails::setIsArchived(const bool &is_archived) {
    m_is_archived = is_archived;
    m_is_archived_isSet = true;
}

bool OAIProjectDetails::is_is_archived_Set() const{
    return m_is_archived_isSet;
}

bool OAIProjectDetails::is_is_archived_Valid() const{
    return m_is_archived_isValid;
}

bool OAIProjectDetails::isIsTaskRequiredOnTimesheet() const {
    return m_is_task_required_on_timesheet;
}
void OAIProjectDetails::setIsTaskRequiredOnTimesheet(const bool &is_task_required_on_timesheet) {
    m_is_task_required_on_timesheet = is_task_required_on_timesheet;
    m_is_task_required_on_timesheet_isSet = true;
}

bool OAIProjectDetails::is_is_task_required_on_timesheet_Set() const{
    return m_is_task_required_on_timesheet_isSet;
}

bool OAIProjectDetails::is_is_task_required_on_timesheet_Valid() const{
    return m_is_task_required_on_timesheet_isValid;
}

bool OAIProjectDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_budget_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_budget_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_account_task_type_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_account_task_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_billable_type_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_budget_type_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_category_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_category_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_category_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_hourly_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_owner_user_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sections.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_task_required_on_timesheet_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
