/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaxItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaxItem::OAITaxItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaxItem::OAITaxItem() {
    this->initializeModel();
}

OAITaxItem::~OAITaxItem() {}

void OAITaxItem::initializeModel() {

    m_calculated_percent_isSet = false;
    m_calculated_percent_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tax_code_isSet = false;
    m_tax_code_isValid = false;

    m_tax_components_isSet = false;
    m_tax_components_isValid = false;

    m_tax_id_isSet = false;
    m_tax_id_isValid = false;
}

void OAITaxItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaxItem::fromJsonObject(QJsonObject json) {

    m_calculated_percent_isValid = ::OpenAPI::fromJsonValue(m_calculated_percent, json[QString("CalculatedPercent")]);
    m_calculated_percent_isSet = !json[QString("CalculatedPercent")].isNull() && m_calculated_percent_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_tax_code_isValid = ::OpenAPI::fromJsonValue(m_tax_code, json[QString("TaxCode")]);
    m_tax_code_isSet = !json[QString("TaxCode")].isNull() && m_tax_code_isValid;

    m_tax_components_isValid = ::OpenAPI::fromJsonValue(m_tax_components, json[QString("TaxComponents")]);
    m_tax_components_isSet = !json[QString("TaxComponents")].isNull() && m_tax_components_isValid;

    m_tax_id_isValid = ::OpenAPI::fromJsonValue(m_tax_id, json[QString("TaxID")]);
    m_tax_id_isSet = !json[QString("TaxID")].isNull() && m_tax_id_isValid;
}

QString OAITaxItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaxItem::asJsonObject() const {
    QJsonObject obj;
    if (m_calculated_percent_isSet) {
        obj.insert(QString("CalculatedPercent"), ::OpenAPI::toJsonValue(m_calculated_percent));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tax_code_isSet) {
        obj.insert(QString("TaxCode"), ::OpenAPI::toJsonValue(m_tax_code));
    }
    if (m_tax_components.size() > 0) {
        obj.insert(QString("TaxComponents"), ::OpenAPI::toJsonValue(m_tax_components));
    }
    if (m_tax_id_isSet) {
        obj.insert(QString("TaxID"), ::OpenAPI::toJsonValue(m_tax_id));
    }
    return obj;
}

double OAITaxItem::getCalculatedPercent() const {
    return m_calculated_percent;
}
void OAITaxItem::setCalculatedPercent(const double &calculated_percent) {
    m_calculated_percent = calculated_percent;
    m_calculated_percent_isSet = true;
}

bool OAITaxItem::is_calculated_percent_Set() const{
    return m_calculated_percent_isSet;
}

bool OAITaxItem::is_calculated_percent_Valid() const{
    return m_calculated_percent_isValid;
}

QString OAITaxItem::getName() const {
    return m_name;
}
void OAITaxItem::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITaxItem::is_name_Set() const{
    return m_name_isSet;
}

bool OAITaxItem::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITaxItem::getTaxCode() const {
    return m_tax_code;
}
void OAITaxItem::setTaxCode(const QString &tax_code) {
    m_tax_code = tax_code;
    m_tax_code_isSet = true;
}

bool OAITaxItem::is_tax_code_Set() const{
    return m_tax_code_isSet;
}

bool OAITaxItem::is_tax_code_Valid() const{
    return m_tax_code_isValid;
}

QList<OAITaxComponent> OAITaxItem::getTaxComponents() const {
    return m_tax_components;
}
void OAITaxItem::setTaxComponents(const QList<OAITaxComponent> &tax_components) {
    m_tax_components = tax_components;
    m_tax_components_isSet = true;
}

bool OAITaxItem::is_tax_components_Set() const{
    return m_tax_components_isSet;
}

bool OAITaxItem::is_tax_components_Valid() const{
    return m_tax_components_isValid;
}

qint32 OAITaxItem::getTaxId() const {
    return m_tax_id;
}
void OAITaxItem::setTaxId(const qint32 &tax_id) {
    m_tax_id = tax_id;
    m_tax_id_isSet = true;
}

bool OAITaxItem::is_tax_id_Set() const{
    return m_tax_id_isSet;
}

bool OAITaxItem::is_tax_id_Valid() const{
    return m_tax_id_isValid;
}

bool OAITaxItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calculated_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_components.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaxItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
