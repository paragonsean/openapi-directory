/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINewProjectModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINewProjectModel::OAINewProjectModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINewProjectModel::OAINewProjectModel() {
    this->initializeModel();
}

OAINewProjectModel::~OAINewProjectModel() {}

void OAINewProjectModel::initializeModel() {

    m_budget_amount_isSet = false;
    m_budget_amount_isValid = false;

    m_budget_hours_isSet = false;
    m_budget_hours_isValid = false;

    m_company_idfk_isSet = false;
    m_company_idfk_isValid = false;

    m_company_name_isSet = false;
    m_company_name_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_populate_default_project_members_isSet = false;
    m_populate_default_project_members_isValid = false;

    m_project_category_idfk_isSet = false;
    m_project_category_idfk_isValid = false;

    m_project_code_isSet = false;
    m_project_code_isValid = false;

    m_project_notes_isSet = false;
    m_project_notes_isValid = false;

    m_project_status_code_isSet = false;
    m_project_status_code_isValid = false;

    m_project_title_isSet = false;
    m_project_title_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_timesheet_approval_requiredby_default_isSet = false;
    m_timesheet_approval_requiredby_default_isValid = false;

    m_is_task_required_on_timesheet_isSet = false;
    m_is_task_required_on_timesheet_isValid = false;
}

void OAINewProjectModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINewProjectModel::fromJsonObject(QJsonObject json) {

    m_budget_amount_isValid = ::OpenAPI::fromJsonValue(m_budget_amount, json[QString("BudgetAmount")]);
    m_budget_amount_isSet = !json[QString("BudgetAmount")].isNull() && m_budget_amount_isValid;

    m_budget_hours_isValid = ::OpenAPI::fromJsonValue(m_budget_hours, json[QString("BudgetHours")]);
    m_budget_hours_isSet = !json[QString("BudgetHours")].isNull() && m_budget_hours_isValid;

    m_company_idfk_isValid = ::OpenAPI::fromJsonValue(m_company_idfk, json[QString("CompanyIDFK")]);
    m_company_idfk_isSet = !json[QString("CompanyIDFK")].isNull() && m_company_idfk_isValid;

    m_company_name_isValid = ::OpenAPI::fromJsonValue(m_company_name, json[QString("CompanyName")]);
    m_company_name_isSet = !json[QString("CompanyName")].isNull() && m_company_name_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("CurrencyCode")]);
    m_currency_code_isSet = !json[QString("CurrencyCode")].isNull() && m_currency_code_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("EndDate")]);
    m_end_date_isSet = !json[QString("EndDate")].isNull() && m_end_date_isValid;

    m_populate_default_project_members_isValid = ::OpenAPI::fromJsonValue(m_populate_default_project_members, json[QString("PopulateDefaultProjectMembers")]);
    m_populate_default_project_members_isSet = !json[QString("PopulateDefaultProjectMembers")].isNull() && m_populate_default_project_members_isValid;

    m_project_category_idfk_isValid = ::OpenAPI::fromJsonValue(m_project_category_idfk, json[QString("ProjectCategoryIDFK")]);
    m_project_category_idfk_isSet = !json[QString("ProjectCategoryIDFK")].isNull() && m_project_category_idfk_isValid;

    m_project_code_isValid = ::OpenAPI::fromJsonValue(m_project_code, json[QString("ProjectCode")]);
    m_project_code_isSet = !json[QString("ProjectCode")].isNull() && m_project_code_isValid;

    m_project_notes_isValid = ::OpenAPI::fromJsonValue(m_project_notes, json[QString("ProjectNotes")]);
    m_project_notes_isSet = !json[QString("ProjectNotes")].isNull() && m_project_notes_isValid;

    m_project_status_code_isValid = ::OpenAPI::fromJsonValue(m_project_status_code, json[QString("ProjectStatusCode")]);
    m_project_status_code_isSet = !json[QString("ProjectStatusCode")].isNull() && m_project_status_code_isValid;

    m_project_title_isValid = ::OpenAPI::fromJsonValue(m_project_title, json[QString("ProjectTitle")]);
    m_project_title_isSet = !json[QString("ProjectTitle")].isNull() && m_project_title_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("StartDate")]);
    m_start_date_isSet = !json[QString("StartDate")].isNull() && m_start_date_isValid;

    m_timesheet_approval_requiredby_default_isValid = ::OpenAPI::fromJsonValue(m_timesheet_approval_requiredby_default, json[QString("TimesheetApprovalRequiredbyDefault")]);
    m_timesheet_approval_requiredby_default_isSet = !json[QString("TimesheetApprovalRequiredbyDefault")].isNull() && m_timesheet_approval_requiredby_default_isValid;

    m_is_task_required_on_timesheet_isValid = ::OpenAPI::fromJsonValue(m_is_task_required_on_timesheet, json[QString("isTaskRequiredOnTimesheet")]);
    m_is_task_required_on_timesheet_isSet = !json[QString("isTaskRequiredOnTimesheet")].isNull() && m_is_task_required_on_timesheet_isValid;
}

QString OAINewProjectModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINewProjectModel::asJsonObject() const {
    QJsonObject obj;
    if (m_budget_amount_isSet) {
        obj.insert(QString("BudgetAmount"), ::OpenAPI::toJsonValue(m_budget_amount));
    }
    if (m_budget_hours_isSet) {
        obj.insert(QString("BudgetHours"), ::OpenAPI::toJsonValue(m_budget_hours));
    }
    if (m_company_idfk_isSet) {
        obj.insert(QString("CompanyIDFK"), ::OpenAPI::toJsonValue(m_company_idfk));
    }
    if (m_company_name_isSet) {
        obj.insert(QString("CompanyName"), ::OpenAPI::toJsonValue(m_company_name));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("CurrencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("EndDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_populate_default_project_members_isSet) {
        obj.insert(QString("PopulateDefaultProjectMembers"), ::OpenAPI::toJsonValue(m_populate_default_project_members));
    }
    if (m_project_category_idfk_isSet) {
        obj.insert(QString("ProjectCategoryIDFK"), ::OpenAPI::toJsonValue(m_project_category_idfk));
    }
    if (m_project_code_isSet) {
        obj.insert(QString("ProjectCode"), ::OpenAPI::toJsonValue(m_project_code));
    }
    if (m_project_notes_isSet) {
        obj.insert(QString("ProjectNotes"), ::OpenAPI::toJsonValue(m_project_notes));
    }
    if (m_project_status_code_isSet) {
        obj.insert(QString("ProjectStatusCode"), ::OpenAPI::toJsonValue(m_project_status_code));
    }
    if (m_project_title_isSet) {
        obj.insert(QString("ProjectTitle"), ::OpenAPI::toJsonValue(m_project_title));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("StartDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_timesheet_approval_requiredby_default_isSet) {
        obj.insert(QString("TimesheetApprovalRequiredbyDefault"), ::OpenAPI::toJsonValue(m_timesheet_approval_requiredby_default));
    }
    if (m_is_task_required_on_timesheet_isSet) {
        obj.insert(QString("isTaskRequiredOnTimesheet"), ::OpenAPI::toJsonValue(m_is_task_required_on_timesheet));
    }
    return obj;
}

double OAINewProjectModel::getBudgetAmount() const {
    return m_budget_amount;
}
void OAINewProjectModel::setBudgetAmount(const double &budget_amount) {
    m_budget_amount = budget_amount;
    m_budget_amount_isSet = true;
}

bool OAINewProjectModel::is_budget_amount_Set() const{
    return m_budget_amount_isSet;
}

bool OAINewProjectModel::is_budget_amount_Valid() const{
    return m_budget_amount_isValid;
}

double OAINewProjectModel::getBudgetHours() const {
    return m_budget_hours;
}
void OAINewProjectModel::setBudgetHours(const double &budget_hours) {
    m_budget_hours = budget_hours;
    m_budget_hours_isSet = true;
}

bool OAINewProjectModel::is_budget_hours_Set() const{
    return m_budget_hours_isSet;
}

bool OAINewProjectModel::is_budget_hours_Valid() const{
    return m_budget_hours_isValid;
}

qint32 OAINewProjectModel::getCompanyIdfk() const {
    return m_company_idfk;
}
void OAINewProjectModel::setCompanyIdfk(const qint32 &company_idfk) {
    m_company_idfk = company_idfk;
    m_company_idfk_isSet = true;
}

bool OAINewProjectModel::is_company_idfk_Set() const{
    return m_company_idfk_isSet;
}

bool OAINewProjectModel::is_company_idfk_Valid() const{
    return m_company_idfk_isValid;
}

QString OAINewProjectModel::getCompanyName() const {
    return m_company_name;
}
void OAINewProjectModel::setCompanyName(const QString &company_name) {
    m_company_name = company_name;
    m_company_name_isSet = true;
}

bool OAINewProjectModel::is_company_name_Set() const{
    return m_company_name_isSet;
}

bool OAINewProjectModel::is_company_name_Valid() const{
    return m_company_name_isValid;
}

QString OAINewProjectModel::getCurrencyCode() const {
    return m_currency_code;
}
void OAINewProjectModel::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAINewProjectModel::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAINewProjectModel::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QDateTime OAINewProjectModel::getEndDate() const {
    return m_end_date;
}
void OAINewProjectModel::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAINewProjectModel::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAINewProjectModel::is_end_date_Valid() const{
    return m_end_date_isValid;
}

bool OAINewProjectModel::isPopulateDefaultProjectMembers() const {
    return m_populate_default_project_members;
}
void OAINewProjectModel::setPopulateDefaultProjectMembers(const bool &populate_default_project_members) {
    m_populate_default_project_members = populate_default_project_members;
    m_populate_default_project_members_isSet = true;
}

bool OAINewProjectModel::is_populate_default_project_members_Set() const{
    return m_populate_default_project_members_isSet;
}

bool OAINewProjectModel::is_populate_default_project_members_Valid() const{
    return m_populate_default_project_members_isValid;
}

qint32 OAINewProjectModel::getProjectCategoryIdfk() const {
    return m_project_category_idfk;
}
void OAINewProjectModel::setProjectCategoryIdfk(const qint32 &project_category_idfk) {
    m_project_category_idfk = project_category_idfk;
    m_project_category_idfk_isSet = true;
}

bool OAINewProjectModel::is_project_category_idfk_Set() const{
    return m_project_category_idfk_isSet;
}

bool OAINewProjectModel::is_project_category_idfk_Valid() const{
    return m_project_category_idfk_isValid;
}

QString OAINewProjectModel::getProjectCode() const {
    return m_project_code;
}
void OAINewProjectModel::setProjectCode(const QString &project_code) {
    m_project_code = project_code;
    m_project_code_isSet = true;
}

bool OAINewProjectModel::is_project_code_Set() const{
    return m_project_code_isSet;
}

bool OAINewProjectModel::is_project_code_Valid() const{
    return m_project_code_isValid;
}

QString OAINewProjectModel::getProjectNotes() const {
    return m_project_notes;
}
void OAINewProjectModel::setProjectNotes(const QString &project_notes) {
    m_project_notes = project_notes;
    m_project_notes_isSet = true;
}

bool OAINewProjectModel::is_project_notes_Set() const{
    return m_project_notes_isSet;
}

bool OAINewProjectModel::is_project_notes_Valid() const{
    return m_project_notes_isValid;
}

QString OAINewProjectModel::getProjectStatusCode() const {
    return m_project_status_code;
}
void OAINewProjectModel::setProjectStatusCode(const QString &project_status_code) {
    m_project_status_code = project_status_code;
    m_project_status_code_isSet = true;
}

bool OAINewProjectModel::is_project_status_code_Set() const{
    return m_project_status_code_isSet;
}

bool OAINewProjectModel::is_project_status_code_Valid() const{
    return m_project_status_code_isValid;
}

QString OAINewProjectModel::getProjectTitle() const {
    return m_project_title;
}
void OAINewProjectModel::setProjectTitle(const QString &project_title) {
    m_project_title = project_title;
    m_project_title_isSet = true;
}

bool OAINewProjectModel::is_project_title_Set() const{
    return m_project_title_isSet;
}

bool OAINewProjectModel::is_project_title_Valid() const{
    return m_project_title_isValid;
}

QDateTime OAINewProjectModel::getStartDate() const {
    return m_start_date;
}
void OAINewProjectModel::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAINewProjectModel::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAINewProjectModel::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAINewProjectModel::isTimesheetApprovalRequiredbyDefault() const {
    return m_timesheet_approval_requiredby_default;
}
void OAINewProjectModel::setTimesheetApprovalRequiredbyDefault(const bool &timesheet_approval_requiredby_default) {
    m_timesheet_approval_requiredby_default = timesheet_approval_requiredby_default;
    m_timesheet_approval_requiredby_default_isSet = true;
}

bool OAINewProjectModel::is_timesheet_approval_requiredby_default_Set() const{
    return m_timesheet_approval_requiredby_default_isSet;
}

bool OAINewProjectModel::is_timesheet_approval_requiredby_default_Valid() const{
    return m_timesheet_approval_requiredby_default_isValid;
}

bool OAINewProjectModel::isIsTaskRequiredOnTimesheet() const {
    return m_is_task_required_on_timesheet;
}
void OAINewProjectModel::setIsTaskRequiredOnTimesheet(const bool &is_task_required_on_timesheet) {
    m_is_task_required_on_timesheet = is_task_required_on_timesheet;
    m_is_task_required_on_timesheet_isSet = true;
}

bool OAINewProjectModel::is_is_task_required_on_timesheet_Set() const{
    return m_is_task_required_on_timesheet_isSet;
}

bool OAINewProjectModel::is_is_task_required_on_timesheet_Valid() const{
    return m_is_task_required_on_timesheet_isValid;
}

bool OAINewProjectModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_budget_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_budget_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_populate_default_project_members_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_category_idfk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timesheet_approval_requiredby_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_task_required_on_timesheet_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINewProjectModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_project_title_isValid && true;
}

} // namespace OpenAPI
