/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateCompany model module.
 * @module model/UpdateCompany
 * @version v1
 */
class UpdateCompany {
    /**
     * Constructs a new <code>UpdateCompany</code>.
     * @alias module:model/UpdateCompany
     */
    constructor() { 
        
        UpdateCompany.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateCompany</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateCompany} obj Optional instance to populate.
     * @return {module:model/UpdateCompany} The populated <code>UpdateCompany</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateCompany();

            if (data.hasOwnProperty('BillingAddress')) {
                obj['BillingAddress'] = ApiClient.convertToType(data['BillingAddress'], 'String');
            }
            if (data.hasOwnProperty('BillingAddressCity')) {
                obj['BillingAddressCity'] = ApiClient.convertToType(data['BillingAddressCity'], 'String');
            }
            if (data.hasOwnProperty('BillingAddressLine')) {
                obj['BillingAddressLine'] = ApiClient.convertToType(data['BillingAddressLine'], 'String');
            }
            if (data.hasOwnProperty('BillingAddressPostCode')) {
                obj['BillingAddressPostCode'] = ApiClient.convertToType(data['BillingAddressPostCode'], 'String');
            }
            if (data.hasOwnProperty('BillingAddressState')) {
                obj['BillingAddressState'] = ApiClient.convertToType(data['BillingAddressState'], 'String');
            }
            if (data.hasOwnProperty('BillingCountryCode')) {
                obj['BillingCountryCode'] = ApiClient.convertToType(data['BillingCountryCode'], 'String');
            }
            if (data.hasOwnProperty('Comments')) {
                obj['Comments'] = ApiClient.convertToType(data['Comments'], 'String');
            }
            if (data.hasOwnProperty('CompanyID')) {
                obj['CompanyID'] = ApiClient.convertToType(data['CompanyID'], 'Number');
            }
            if (data.hasOwnProperty('CompanyName')) {
                obj['CompanyName'] = ApiClient.convertToType(data['CompanyName'], 'String');
            }
            if (data.hasOwnProperty('Fax')) {
                obj['Fax'] = ApiClient.convertToType(data['Fax'], 'String');
            }
            if (data.hasOwnProperty('FieldsToUpdate')) {
                obj['FieldsToUpdate'] = ApiClient.convertToType(data['FieldsToUpdate'], ['String']);
            }
            if (data.hasOwnProperty('Phone')) {
                obj['Phone'] = ApiClient.convertToType(data['Phone'], 'String');
            }
            if (data.hasOwnProperty('TaxNumber')) {
                obj['TaxNumber'] = ApiClient.convertToType(data['TaxNumber'], 'String');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateCompany</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateCompany</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['BillingAddress'] && !(typeof data['BillingAddress'] === 'string' || data['BillingAddress'] instanceof String)) {
            throw new Error("Expected the field `BillingAddress` to be a primitive type in the JSON string but got " + data['BillingAddress']);
        }
        // ensure the json data is a string
        if (data['BillingAddressCity'] && !(typeof data['BillingAddressCity'] === 'string' || data['BillingAddressCity'] instanceof String)) {
            throw new Error("Expected the field `BillingAddressCity` to be a primitive type in the JSON string but got " + data['BillingAddressCity']);
        }
        // ensure the json data is a string
        if (data['BillingAddressLine'] && !(typeof data['BillingAddressLine'] === 'string' || data['BillingAddressLine'] instanceof String)) {
            throw new Error("Expected the field `BillingAddressLine` to be a primitive type in the JSON string but got " + data['BillingAddressLine']);
        }
        // ensure the json data is a string
        if (data['BillingAddressPostCode'] && !(typeof data['BillingAddressPostCode'] === 'string' || data['BillingAddressPostCode'] instanceof String)) {
            throw new Error("Expected the field `BillingAddressPostCode` to be a primitive type in the JSON string but got " + data['BillingAddressPostCode']);
        }
        // ensure the json data is a string
        if (data['BillingAddressState'] && !(typeof data['BillingAddressState'] === 'string' || data['BillingAddressState'] instanceof String)) {
            throw new Error("Expected the field `BillingAddressState` to be a primitive type in the JSON string but got " + data['BillingAddressState']);
        }
        // ensure the json data is a string
        if (data['BillingCountryCode'] && !(typeof data['BillingCountryCode'] === 'string' || data['BillingCountryCode'] instanceof String)) {
            throw new Error("Expected the field `BillingCountryCode` to be a primitive type in the JSON string but got " + data['BillingCountryCode']);
        }
        // ensure the json data is a string
        if (data['Comments'] && !(typeof data['Comments'] === 'string' || data['Comments'] instanceof String)) {
            throw new Error("Expected the field `Comments` to be a primitive type in the JSON string but got " + data['Comments']);
        }
        // ensure the json data is a string
        if (data['CompanyName'] && !(typeof data['CompanyName'] === 'string' || data['CompanyName'] instanceof String)) {
            throw new Error("Expected the field `CompanyName` to be a primitive type in the JSON string but got " + data['CompanyName']);
        }
        // ensure the json data is a string
        if (data['Fax'] && !(typeof data['Fax'] === 'string' || data['Fax'] instanceof String)) {
            throw new Error("Expected the field `Fax` to be a primitive type in the JSON string but got " + data['Fax']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['FieldsToUpdate'])) {
            throw new Error("Expected the field `FieldsToUpdate` to be an array in the JSON data but got " + data['FieldsToUpdate']);
        }
        // ensure the json data is a string
        if (data['Phone'] && !(typeof data['Phone'] === 'string' || data['Phone'] instanceof String)) {
            throw new Error("Expected the field `Phone` to be a primitive type in the JSON string but got " + data['Phone']);
        }
        // ensure the json data is a string
        if (data['TaxNumber'] && !(typeof data['TaxNumber'] === 'string' || data['TaxNumber'] instanceof String)) {
            throw new Error("Expected the field `TaxNumber` to be a primitive type in the JSON string but got " + data['TaxNumber']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }

        return true;
    }


}



/**
 * @member {String} BillingAddress
 */
UpdateCompany.prototype['BillingAddress'] = undefined;

/**
 * @member {String} BillingAddressCity
 */
UpdateCompany.prototype['BillingAddressCity'] = undefined;

/**
 * @member {String} BillingAddressLine
 */
UpdateCompany.prototype['BillingAddressLine'] = undefined;

/**
 * @member {String} BillingAddressPostCode
 */
UpdateCompany.prototype['BillingAddressPostCode'] = undefined;

/**
 * @member {String} BillingAddressState
 */
UpdateCompany.prototype['BillingAddressState'] = undefined;

/**
 * @member {String} BillingCountryCode
 */
UpdateCompany.prototype['BillingCountryCode'] = undefined;

/**
 * @member {String} Comments
 */
UpdateCompany.prototype['Comments'] = undefined;

/**
 * @member {Number} CompanyID
 */
UpdateCompany.prototype['CompanyID'] = undefined;

/**
 * @member {String} CompanyName
 */
UpdateCompany.prototype['CompanyName'] = undefined;

/**
 * @member {String} Fax
 */
UpdateCompany.prototype['Fax'] = undefined;

/**
 * @member {Array.<String>} FieldsToUpdate
 */
UpdateCompany.prototype['FieldsToUpdate'] = undefined;

/**
 * @member {String} Phone
 */
UpdateCompany.prototype['Phone'] = undefined;

/**
 * @member {String} TaxNumber
 */
UpdateCompany.prototype['TaxNumber'] = undefined;

/**
 * @member {String} website
 */
UpdateCompany.prototype['website'] = undefined;






export default UpdateCompany;

