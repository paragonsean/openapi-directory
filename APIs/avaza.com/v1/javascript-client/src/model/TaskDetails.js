/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AssignedToUser from './AssignedToUser';
import TagItem from './TagItem';

/**
 * The TaskDetails model module.
 * @module model/TaskDetails
 * @version v1
 */
class TaskDetails {
    /**
     * Constructs a new <code>TaskDetails</code>.
     * @alias module:model/TaskDetails
     */
    constructor() { 
        
        TaskDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TaskDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaskDetails} obj Optional instance to populate.
     * @return {module:model/TaskDetails} The populated <code>TaskDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaskDetails();

            if (data.hasOwnProperty('AccountTaskTypeIDFK')) {
                obj['AccountTaskTypeIDFK'] = ApiClient.convertToType(data['AccountTaskTypeIDFK'], 'Number');
            }
            if (data.hasOwnProperty('ActualTime')) {
                obj['ActualTime'] = ApiClient.convertToType(data['ActualTime'], 'Number');
            }
            if (data.hasOwnProperty('AssignedToUsers')) {
                obj['AssignedToUsers'] = ApiClient.convertToType(data['AssignedToUsers'], [AssignedToUser]);
            }
            if (data.hasOwnProperty('DateCompleted')) {
                obj['DateCompleted'] = ApiClient.convertToType(data['DateCompleted'], 'Date');
            }
            if (data.hasOwnProperty('DateCreated')) {
                obj['DateCreated'] = ApiClient.convertToType(data['DateCreated'], 'Date');
            }
            if (data.hasOwnProperty('DateDue')) {
                obj['DateDue'] = ApiClient.convertToType(data['DateDue'], 'Date');
            }
            if (data.hasOwnProperty('DateStart')) {
                obj['DateStart'] = ApiClient.convertToType(data['DateStart'], 'Date');
            }
            if (data.hasOwnProperty('DateUpdated')) {
                obj['DateUpdated'] = ApiClient.convertToType(data['DateUpdated'], 'Date');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('DescriptionNoHTML')) {
                obj['DescriptionNoHTML'] = ApiClient.convertToType(data['DescriptionNoHTML'], 'String');
            }
            if (data.hasOwnProperty('EstimatedEffort')) {
                obj['EstimatedEffort'] = ApiClient.convertToType(data['EstimatedEffort'], 'Number');
            }
            if (data.hasOwnProperty('PercentComplete')) {
                obj['PercentComplete'] = ApiClient.convertToType(data['PercentComplete'], 'Number');
            }
            if (data.hasOwnProperty('ProjectCode')) {
                obj['ProjectCode'] = ApiClient.convertToType(data['ProjectCode'], 'String');
            }
            if (data.hasOwnProperty('ProjectIDFK')) {
                obj['ProjectIDFK'] = ApiClient.convertToType(data['ProjectIDFK'], 'Number');
            }
            if (data.hasOwnProperty('ProjectTitle')) {
                obj['ProjectTitle'] = ApiClient.convertToType(data['ProjectTitle'], 'String');
            }
            if (data.hasOwnProperty('SectionIDFK')) {
                obj['SectionIDFK'] = ApiClient.convertToType(data['SectionIDFK'], 'Number');
            }
            if (data.hasOwnProperty('SectionTitle')) {
                obj['SectionTitle'] = ApiClient.convertToType(data['SectionTitle'], 'String');
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], [TagItem]);
            }
            if (data.hasOwnProperty('TaskID')) {
                obj['TaskID'] = ApiClient.convertToType(data['TaskID'], 'Number');
            }
            if (data.hasOwnProperty('TaskPriorityCode')) {
                obj['TaskPriorityCode'] = ApiClient.convertToType(data['TaskPriorityCode'], 'String');
            }
            if (data.hasOwnProperty('TaskPriorityName')) {
                obj['TaskPriorityName'] = ApiClient.convertToType(data['TaskPriorityName'], 'String');
            }
            if (data.hasOwnProperty('TaskStatusCode')) {
                obj['TaskStatusCode'] = ApiClient.convertToType(data['TaskStatusCode'], 'String');
            }
            if (data.hasOwnProperty('TaskStatusName')) {
                obj['TaskStatusName'] = ApiClient.convertToType(data['TaskStatusName'], 'String');
            }
            if (data.hasOwnProperty('Title')) {
                obj['Title'] = ApiClient.convertToType(data['Title'], 'String');
            }
            if (data.hasOwnProperty('isCompleteStatus')) {
                obj['isCompleteStatus'] = ApiClient.convertToType(data['isCompleteStatus'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaskDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaskDetails</code>.
     */
    static validateJSON(data) {
        if (data['AssignedToUsers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['AssignedToUsers'])) {
                throw new Error("Expected the field `AssignedToUsers` to be an array in the JSON data but got " + data['AssignedToUsers']);
            }
            // validate the optional field `AssignedToUsers` (array)
            for (const item of data['AssignedToUsers']) {
                AssignedToUser.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['DescriptionNoHTML'] && !(typeof data['DescriptionNoHTML'] === 'string' || data['DescriptionNoHTML'] instanceof String)) {
            throw new Error("Expected the field `DescriptionNoHTML` to be a primitive type in the JSON string but got " + data['DescriptionNoHTML']);
        }
        // ensure the json data is a string
        if (data['ProjectCode'] && !(typeof data['ProjectCode'] === 'string' || data['ProjectCode'] instanceof String)) {
            throw new Error("Expected the field `ProjectCode` to be a primitive type in the JSON string but got " + data['ProjectCode']);
        }
        // ensure the json data is a string
        if (data['ProjectTitle'] && !(typeof data['ProjectTitle'] === 'string' || data['ProjectTitle'] instanceof String)) {
            throw new Error("Expected the field `ProjectTitle` to be a primitive type in the JSON string but got " + data['ProjectTitle']);
        }
        // ensure the json data is a string
        if (data['SectionTitle'] && !(typeof data['SectionTitle'] === 'string' || data['SectionTitle'] instanceof String)) {
            throw new Error("Expected the field `SectionTitle` to be a primitive type in the JSON string but got " + data['SectionTitle']);
        }
        if (data['Tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Tags'])) {
                throw new Error("Expected the field `Tags` to be an array in the JSON data but got " + data['Tags']);
            }
            // validate the optional field `Tags` (array)
            for (const item of data['Tags']) {
                TagItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['TaskPriorityCode'] && !(typeof data['TaskPriorityCode'] === 'string' || data['TaskPriorityCode'] instanceof String)) {
            throw new Error("Expected the field `TaskPriorityCode` to be a primitive type in the JSON string but got " + data['TaskPriorityCode']);
        }
        // ensure the json data is a string
        if (data['TaskPriorityName'] && !(typeof data['TaskPriorityName'] === 'string' || data['TaskPriorityName'] instanceof String)) {
            throw new Error("Expected the field `TaskPriorityName` to be a primitive type in the JSON string but got " + data['TaskPriorityName']);
        }
        // ensure the json data is a string
        if (data['TaskStatusCode'] && !(typeof data['TaskStatusCode'] === 'string' || data['TaskStatusCode'] instanceof String)) {
            throw new Error("Expected the field `TaskStatusCode` to be a primitive type in the JSON string but got " + data['TaskStatusCode']);
        }
        // ensure the json data is a string
        if (data['TaskStatusName'] && !(typeof data['TaskStatusName'] === 'string' || data['TaskStatusName'] instanceof String)) {
            throw new Error("Expected the field `TaskStatusName` to be a primitive type in the JSON string but got " + data['TaskStatusName']);
        }
        // ensure the json data is a string
        if (data['Title'] && !(typeof data['Title'] === 'string' || data['Title'] instanceof String)) {
            throw new Error("Expected the field `Title` to be a primitive type in the JSON string but got " + data['Title']);
        }

        return true;
    }


}



/**
 * @member {Number} AccountTaskTypeIDFK
 */
TaskDetails.prototype['AccountTaskTypeIDFK'] = undefined;

/**
 * @member {Number} ActualTime
 */
TaskDetails.prototype['ActualTime'] = undefined;

/**
 * @member {Array.<module:model/AssignedToUser>} AssignedToUsers
 */
TaskDetails.prototype['AssignedToUsers'] = undefined;

/**
 * @member {Date} DateCompleted
 */
TaskDetails.prototype['DateCompleted'] = undefined;

/**
 * @member {Date} DateCreated
 */
TaskDetails.prototype['DateCreated'] = undefined;

/**
 * @member {Date} DateDue
 */
TaskDetails.prototype['DateDue'] = undefined;

/**
 * @member {Date} DateStart
 */
TaskDetails.prototype['DateStart'] = undefined;

/**
 * @member {Date} DateUpdated
 */
TaskDetails.prototype['DateUpdated'] = undefined;

/**
 * @member {String} Description
 */
TaskDetails.prototype['Description'] = undefined;

/**
 * @member {String} DescriptionNoHTML
 */
TaskDetails.prototype['DescriptionNoHTML'] = undefined;

/**
 * @member {Number} EstimatedEffort
 */
TaskDetails.prototype['EstimatedEffort'] = undefined;

/**
 * @member {Number} PercentComplete
 */
TaskDetails.prototype['PercentComplete'] = undefined;

/**
 * @member {String} ProjectCode
 */
TaskDetails.prototype['ProjectCode'] = undefined;

/**
 * @member {Number} ProjectIDFK
 */
TaskDetails.prototype['ProjectIDFK'] = undefined;

/**
 * @member {String} ProjectTitle
 */
TaskDetails.prototype['ProjectTitle'] = undefined;

/**
 * @member {Number} SectionIDFK
 */
TaskDetails.prototype['SectionIDFK'] = undefined;

/**
 * @member {String} SectionTitle
 */
TaskDetails.prototype['SectionTitle'] = undefined;

/**
 * @member {Array.<module:model/TagItem>} Tags
 */
TaskDetails.prototype['Tags'] = undefined;

/**
 * @member {Number} TaskID
 */
TaskDetails.prototype['TaskID'] = undefined;

/**
 * @member {String} TaskPriorityCode
 */
TaskDetails.prototype['TaskPriorityCode'] = undefined;

/**
 * @member {String} TaskPriorityName
 */
TaskDetails.prototype['TaskPriorityName'] = undefined;

/**
 * @member {String} TaskStatusCode
 */
TaskDetails.prototype['TaskStatusCode'] = undefined;

/**
 * @member {String} TaskStatusName
 */
TaskDetails.prototype['TaskStatusName'] = undefined;

/**
 * @member {String} Title
 */
TaskDetails.prototype['Title'] = undefined;

/**
 * @member {Boolean} isCompleteStatus
 */
TaskDetails.prototype['isCompleteStatus'] = undefined;






export default TaskDetails;

