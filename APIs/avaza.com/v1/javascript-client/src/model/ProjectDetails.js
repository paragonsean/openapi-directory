/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProjectMemberDetails from './ProjectMemberDetails';
import ProjectSectionDetails from './ProjectSectionDetails';
import ProjectTagItem from './ProjectTagItem';

/**
 * The ProjectDetails model module.
 * @module model/ProjectDetails
 * @version v1
 */
class ProjectDetails {
    /**
     * Constructs a new <code>ProjectDetails</code>.
     * @alias module:model/ProjectDetails
     */
    constructor() { 
        
        ProjectDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProjectDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProjectDetails} obj Optional instance to populate.
     * @return {module:model/ProjectDetails} The populated <code>ProjectDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProjectDetails();

            if (data.hasOwnProperty('BudgetAmount')) {
                obj['BudgetAmount'] = ApiClient.convertToType(data['BudgetAmount'], 'Number');
            }
            if (data.hasOwnProperty('BudgetHours')) {
                obj['BudgetHours'] = ApiClient.convertToType(data['BudgetHours'], 'Number');
            }
            if (data.hasOwnProperty('CompanyIDFK')) {
                obj['CompanyIDFK'] = ApiClient.convertToType(data['CompanyIDFK'], 'Number');
            }
            if (data.hasOwnProperty('CompanyName')) {
                obj['CompanyName'] = ApiClient.convertToType(data['CompanyName'], 'String');
            }
            if (data.hasOwnProperty('DateCreated')) {
                obj['DateCreated'] = ApiClient.convertToType(data['DateCreated'], 'Date');
            }
            if (data.hasOwnProperty('DateUpdated')) {
                obj['DateUpdated'] = ApiClient.convertToType(data['DateUpdated'], 'Date');
            }
            if (data.hasOwnProperty('DefaultAccountTaskTypeIDFK')) {
                obj['DefaultAccountTaskTypeIDFK'] = ApiClient.convertToType(data['DefaultAccountTaskTypeIDFK'], 'Number');
            }
            if (data.hasOwnProperty('DefaultAccountTaskTypeName')) {
                obj['DefaultAccountTaskTypeName'] = ApiClient.convertToType(data['DefaultAccountTaskTypeName'], 'String');
            }
            if (data.hasOwnProperty('EndDate')) {
                obj['EndDate'] = ApiClient.convertToType(data['EndDate'], 'Date');
            }
            if (data.hasOwnProperty('Members')) {
                obj['Members'] = ApiClient.convertToType(data['Members'], [ProjectMemberDetails]);
            }
            if (data.hasOwnProperty('Notes')) {
                obj['Notes'] = ApiClient.convertToType(data['Notes'], 'String');
            }
            if (data.hasOwnProperty('ProjectBillableTypeCode')) {
                obj['ProjectBillableTypeCode'] = ApiClient.convertToType(data['ProjectBillableTypeCode'], 'String');
            }
            if (data.hasOwnProperty('ProjectBudgetTypeCode')) {
                obj['ProjectBudgetTypeCode'] = ApiClient.convertToType(data['ProjectBudgetTypeCode'], 'String');
            }
            if (data.hasOwnProperty('ProjectCategoryColor')) {
                obj['ProjectCategoryColor'] = ApiClient.convertToType(data['ProjectCategoryColor'], 'String');
            }
            if (data.hasOwnProperty('ProjectCategoryIDFK')) {
                obj['ProjectCategoryIDFK'] = ApiClient.convertToType(data['ProjectCategoryIDFK'], 'Number');
            }
            if (data.hasOwnProperty('ProjectCategoryName')) {
                obj['ProjectCategoryName'] = ApiClient.convertToType(data['ProjectCategoryName'], 'String');
            }
            if (data.hasOwnProperty('ProjectCode')) {
                obj['ProjectCode'] = ApiClient.convertToType(data['ProjectCode'], 'String');
            }
            if (data.hasOwnProperty('ProjectHourlyRate')) {
                obj['ProjectHourlyRate'] = ApiClient.convertToType(data['ProjectHourlyRate'], 'Number');
            }
            if (data.hasOwnProperty('ProjectID')) {
                obj['ProjectID'] = ApiClient.convertToType(data['ProjectID'], 'Number');
            }
            if (data.hasOwnProperty('ProjectOwnerUserIDFK')) {
                obj['ProjectOwnerUserIDFK'] = ApiClient.convertToType(data['ProjectOwnerUserIDFK'], 'Number');
            }
            if (data.hasOwnProperty('ProjectStatusCode')) {
                obj['ProjectStatusCode'] = ApiClient.convertToType(data['ProjectStatusCode'], 'String');
            }
            if (data.hasOwnProperty('ProjectTags')) {
                obj['ProjectTags'] = ApiClient.convertToType(data['ProjectTags'], [ProjectTagItem]);
            }
            if (data.hasOwnProperty('Sections')) {
                obj['Sections'] = ApiClient.convertToType(data['Sections'], [ProjectSectionDetails]);
            }
            if (data.hasOwnProperty('StartDate')) {
                obj['StartDate'] = ApiClient.convertToType(data['StartDate'], 'Date');
            }
            if (data.hasOwnProperty('Title')) {
                obj['Title'] = ApiClient.convertToType(data['Title'], 'String');
            }
            if (data.hasOwnProperty('isArchived')) {
                obj['isArchived'] = ApiClient.convertToType(data['isArchived'], 'Boolean');
            }
            if (data.hasOwnProperty('isTaskRequiredOnTimesheet')) {
                obj['isTaskRequiredOnTimesheet'] = ApiClient.convertToType(data['isTaskRequiredOnTimesheet'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProjectDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProjectDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['CompanyName'] && !(typeof data['CompanyName'] === 'string' || data['CompanyName'] instanceof String)) {
            throw new Error("Expected the field `CompanyName` to be a primitive type in the JSON string but got " + data['CompanyName']);
        }
        // ensure the json data is a string
        if (data['DefaultAccountTaskTypeName'] && !(typeof data['DefaultAccountTaskTypeName'] === 'string' || data['DefaultAccountTaskTypeName'] instanceof String)) {
            throw new Error("Expected the field `DefaultAccountTaskTypeName` to be a primitive type in the JSON string but got " + data['DefaultAccountTaskTypeName']);
        }
        if (data['Members']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Members'])) {
                throw new Error("Expected the field `Members` to be an array in the JSON data but got " + data['Members']);
            }
            // validate the optional field `Members` (array)
            for (const item of data['Members']) {
                ProjectMemberDetails.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Notes'] && !(typeof data['Notes'] === 'string' || data['Notes'] instanceof String)) {
            throw new Error("Expected the field `Notes` to be a primitive type in the JSON string but got " + data['Notes']);
        }
        // ensure the json data is a string
        if (data['ProjectBillableTypeCode'] && !(typeof data['ProjectBillableTypeCode'] === 'string' || data['ProjectBillableTypeCode'] instanceof String)) {
            throw new Error("Expected the field `ProjectBillableTypeCode` to be a primitive type in the JSON string but got " + data['ProjectBillableTypeCode']);
        }
        // ensure the json data is a string
        if (data['ProjectBudgetTypeCode'] && !(typeof data['ProjectBudgetTypeCode'] === 'string' || data['ProjectBudgetTypeCode'] instanceof String)) {
            throw new Error("Expected the field `ProjectBudgetTypeCode` to be a primitive type in the JSON string but got " + data['ProjectBudgetTypeCode']);
        }
        // ensure the json data is a string
        if (data['ProjectCategoryColor'] && !(typeof data['ProjectCategoryColor'] === 'string' || data['ProjectCategoryColor'] instanceof String)) {
            throw new Error("Expected the field `ProjectCategoryColor` to be a primitive type in the JSON string but got " + data['ProjectCategoryColor']);
        }
        // ensure the json data is a string
        if (data['ProjectCategoryName'] && !(typeof data['ProjectCategoryName'] === 'string' || data['ProjectCategoryName'] instanceof String)) {
            throw new Error("Expected the field `ProjectCategoryName` to be a primitive type in the JSON string but got " + data['ProjectCategoryName']);
        }
        // ensure the json data is a string
        if (data['ProjectCode'] && !(typeof data['ProjectCode'] === 'string' || data['ProjectCode'] instanceof String)) {
            throw new Error("Expected the field `ProjectCode` to be a primitive type in the JSON string but got " + data['ProjectCode']);
        }
        // ensure the json data is a string
        if (data['ProjectStatusCode'] && !(typeof data['ProjectStatusCode'] === 'string' || data['ProjectStatusCode'] instanceof String)) {
            throw new Error("Expected the field `ProjectStatusCode` to be a primitive type in the JSON string but got " + data['ProjectStatusCode']);
        }
        if (data['ProjectTags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ProjectTags'])) {
                throw new Error("Expected the field `ProjectTags` to be an array in the JSON data but got " + data['ProjectTags']);
            }
            // validate the optional field `ProjectTags` (array)
            for (const item of data['ProjectTags']) {
                ProjectTagItem.validateJSON(item);
            };
        }
        if (data['Sections']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Sections'])) {
                throw new Error("Expected the field `Sections` to be an array in the JSON data but got " + data['Sections']);
            }
            // validate the optional field `Sections` (array)
            for (const item of data['Sections']) {
                ProjectSectionDetails.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Title'] && !(typeof data['Title'] === 'string' || data['Title'] instanceof String)) {
            throw new Error("Expected the field `Title` to be a primitive type in the JSON string but got " + data['Title']);
        }

        return true;
    }


}



/**
 * @member {Number} BudgetAmount
 */
ProjectDetails.prototype['BudgetAmount'] = undefined;

/**
 * @member {Number} BudgetHours
 */
ProjectDetails.prototype['BudgetHours'] = undefined;

/**
 * @member {Number} CompanyIDFK
 */
ProjectDetails.prototype['CompanyIDFK'] = undefined;

/**
 * @member {String} CompanyName
 */
ProjectDetails.prototype['CompanyName'] = undefined;

/**
 * @member {Date} DateCreated
 */
ProjectDetails.prototype['DateCreated'] = undefined;

/**
 * @member {Date} DateUpdated
 */
ProjectDetails.prototype['DateUpdated'] = undefined;

/**
 * @member {Number} DefaultAccountTaskTypeIDFK
 */
ProjectDetails.prototype['DefaultAccountTaskTypeIDFK'] = undefined;

/**
 * @member {String} DefaultAccountTaskTypeName
 */
ProjectDetails.prototype['DefaultAccountTaskTypeName'] = undefined;

/**
 * @member {Date} EndDate
 */
ProjectDetails.prototype['EndDate'] = undefined;

/**
 * @member {Array.<module:model/ProjectMemberDetails>} Members
 */
ProjectDetails.prototype['Members'] = undefined;

/**
 * @member {String} Notes
 */
ProjectDetails.prototype['Notes'] = undefined;

/**
 * Possible values: CategoryHourly, NoRate, NotBillable, PersonHourly, ProjectHourly
 * @member {String} ProjectBillableTypeCode
 */
ProjectDetails.prototype['ProjectBillableTypeCode'] = undefined;

/**
 * Possible Values: CategoryHours, NoBudget, PersonHours, ProjectFees, ProjectHours
 * @member {String} ProjectBudgetTypeCode
 */
ProjectDetails.prototype['ProjectBudgetTypeCode'] = undefined;

/**
 * Html Hex Color Code starting with #
 * @member {String} ProjectCategoryColor
 */
ProjectDetails.prototype['ProjectCategoryColor'] = undefined;

/**
 * @member {Number} ProjectCategoryIDFK
 */
ProjectDetails.prototype['ProjectCategoryIDFK'] = undefined;

/**
 * @member {String} ProjectCategoryName
 */
ProjectDetails.prototype['ProjectCategoryName'] = undefined;

/**
 * @member {String} ProjectCode
 */
ProjectDetails.prototype['ProjectCode'] = undefined;

/**
 * @member {Number} ProjectHourlyRate
 */
ProjectDetails.prototype['ProjectHourlyRate'] = undefined;

/**
 * @member {Number} ProjectID
 */
ProjectDetails.prototype['ProjectID'] = undefined;

/**
 * @member {Number} ProjectOwnerUserIDFK
 */
ProjectDetails.prototype['ProjectOwnerUserIDFK'] = undefined;

/**
 * Possible values: NotStarted, InProgress, Complete
 * @member {String} ProjectStatusCode
 */
ProjectDetails.prototype['ProjectStatusCode'] = undefined;

/**
 * @member {Array.<module:model/ProjectTagItem>} ProjectTags
 */
ProjectDetails.prototype['ProjectTags'] = undefined;

/**
 * @member {Array.<module:model/ProjectSectionDetails>} Sections
 */
ProjectDetails.prototype['Sections'] = undefined;

/**
 * @member {Date} StartDate
 */
ProjectDetails.prototype['StartDate'] = undefined;

/**
 * @member {String} Title
 */
ProjectDetails.prototype['Title'] = undefined;

/**
 * @member {Boolean} isArchived
 */
ProjectDetails.prototype['isArchived'] = undefined;

/**
 * @member {Boolean} isTaskRequiredOnTimesheet
 */
ProjectDetails.prototype['isTaskRequiredOnTimesheet'] = undefined;






export default ProjectDetails;

