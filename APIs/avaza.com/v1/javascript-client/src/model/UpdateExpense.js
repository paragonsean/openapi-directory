/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateExpense model module.
 * @module model/UpdateExpense
 * @version v1
 */
class UpdateExpense {
    /**
     * Constructs a new <code>UpdateExpense</code>.
     * @alias module:model/UpdateExpense
     * @param expenseID {Number} 
     * @param fieldsToUpdate {Array.<String>} 
     */
    constructor(expenseID, fieldsToUpdate) { 
        
        UpdateExpense.initialize(this, expenseID, fieldsToUpdate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, expenseID, fieldsToUpdate) { 
        obj['ExpenseID'] = expenseID;
        obj['FieldsToUpdate'] = fieldsToUpdate;
    }

    /**
     * Constructs a <code>UpdateExpense</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateExpense} obj Optional instance to populate.
     * @return {module:model/UpdateExpense} The populated <code>UpdateExpense</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateExpense();

            if (data.hasOwnProperty('Amount')) {
                obj['Amount'] = ApiClient.convertToType(data['Amount'], 'Number');
            }
            if (data.hasOwnProperty('CurrencyCode')) {
                obj['CurrencyCode'] = ApiClient.convertToType(data['CurrencyCode'], 'String');
            }
            if (data.hasOwnProperty('CustomerIDFK')) {
                obj['CustomerIDFK'] = ApiClient.convertToType(data['CustomerIDFK'], 'Number');
            }
            if (data.hasOwnProperty('ExchangeRate')) {
                obj['ExchangeRate'] = ApiClient.convertToType(data['ExchangeRate'], 'Number');
            }
            if (data.hasOwnProperty('ExpenseCategoryIDFK')) {
                obj['ExpenseCategoryIDFK'] = ApiClient.convertToType(data['ExpenseCategoryIDFK'], 'Number');
            }
            if (data.hasOwnProperty('ExpenseDate')) {
                obj['ExpenseDate'] = ApiClient.convertToType(data['ExpenseDate'], 'Date');
            }
            if (data.hasOwnProperty('ExpenseID')) {
                obj['ExpenseID'] = ApiClient.convertToType(data['ExpenseID'], 'Number');
            }
            if (data.hasOwnProperty('ExpensePaymentMethodIDFK')) {
                obj['ExpensePaymentMethodIDFK'] = ApiClient.convertToType(data['ExpensePaymentMethodIDFK'], 'Number');
            }
            if (data.hasOwnProperty('FieldsToUpdate')) {
                obj['FieldsToUpdate'] = ApiClient.convertToType(data['FieldsToUpdate'], ['String']);
            }
            if (data.hasOwnProperty('FileAttachmentIDs')) {
                obj['FileAttachmentIDs'] = ApiClient.convertToType(data['FileAttachmentIDs'], ['Number']);
            }
            if (data.hasOwnProperty('GroupTripName')) {
                obj['GroupTripName'] = ApiClient.convertToType(data['GroupTripName'], 'String');
            }
            if (data.hasOwnProperty('Merchant')) {
                obj['Merchant'] = ApiClient.convertToType(data['Merchant'], 'String');
            }
            if (data.hasOwnProperty('MerchantTaxNumber')) {
                obj['MerchantTaxNumber'] = ApiClient.convertToType(data['MerchantTaxNumber'], 'String');
            }
            if (data.hasOwnProperty('Notes')) {
                obj['Notes'] = ApiClient.convertToType(data['Notes'], 'String');
            }
            if (data.hasOwnProperty('ProjectIDFK')) {
                obj['ProjectIDFK'] = ApiClient.convertToType(data['ProjectIDFK'], 'Number');
            }
            if (data.hasOwnProperty('Quantity')) {
                obj['Quantity'] = ApiClient.convertToType(data['Quantity'], 'Number');
            }
            if (data.hasOwnProperty('TaskIDFK')) {
                obj['TaskIDFK'] = ApiClient.convertToType(data['TaskIDFK'], 'Number');
            }
            if (data.hasOwnProperty('TaxIDFK')) {
                obj['TaxIDFK'] = ApiClient.convertToType(data['TaxIDFK'], 'Number');
            }
            if (data.hasOwnProperty('TransactionTaxConfigCode')) {
                obj['TransactionTaxConfigCode'] = ApiClient.convertToType(data['TransactionTaxConfigCode'], 'String');
            }
            if (data.hasOwnProperty('VerifyAndSave')) {
                obj['VerifyAndSave'] = ApiClient.convertToType(data['VerifyAndSave'], 'Boolean');
            }
            if (data.hasOwnProperty('isChargeable')) {
                obj['isChargeable'] = ApiClient.convertToType(data['isChargeable'], 'Boolean');
            }
            if (data.hasOwnProperty('isReimbursable')) {
                obj['isReimbursable'] = ApiClient.convertToType(data['isReimbursable'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateExpense</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateExpense</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateExpense.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['CurrencyCode'] && !(typeof data['CurrencyCode'] === 'string' || data['CurrencyCode'] instanceof String)) {
            throw new Error("Expected the field `CurrencyCode` to be a primitive type in the JSON string but got " + data['CurrencyCode']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['FieldsToUpdate'])) {
            throw new Error("Expected the field `FieldsToUpdate` to be an array in the JSON data but got " + data['FieldsToUpdate']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['FileAttachmentIDs'])) {
            throw new Error("Expected the field `FileAttachmentIDs` to be an array in the JSON data but got " + data['FileAttachmentIDs']);
        }
        // ensure the json data is a string
        if (data['GroupTripName'] && !(typeof data['GroupTripName'] === 'string' || data['GroupTripName'] instanceof String)) {
            throw new Error("Expected the field `GroupTripName` to be a primitive type in the JSON string but got " + data['GroupTripName']);
        }
        // ensure the json data is a string
        if (data['Merchant'] && !(typeof data['Merchant'] === 'string' || data['Merchant'] instanceof String)) {
            throw new Error("Expected the field `Merchant` to be a primitive type in the JSON string but got " + data['Merchant']);
        }
        // ensure the json data is a string
        if (data['MerchantTaxNumber'] && !(typeof data['MerchantTaxNumber'] === 'string' || data['MerchantTaxNumber'] instanceof String)) {
            throw new Error("Expected the field `MerchantTaxNumber` to be a primitive type in the JSON string but got " + data['MerchantTaxNumber']);
        }
        // ensure the json data is a string
        if (data['Notes'] && !(typeof data['Notes'] === 'string' || data['Notes'] instanceof String)) {
            throw new Error("Expected the field `Notes` to be a primitive type in the JSON string but got " + data['Notes']);
        }
        // ensure the json data is a string
        if (data['TransactionTaxConfigCode'] && !(typeof data['TransactionTaxConfigCode'] === 'string' || data['TransactionTaxConfigCode'] instanceof String)) {
            throw new Error("Expected the field `TransactionTaxConfigCode` to be a primitive type in the JSON string but got " + data['TransactionTaxConfigCode']);
        }

        return true;
    }


}

UpdateExpense.RequiredProperties = ["ExpenseID", "FieldsToUpdate"];

/**
 * Expense Amount (Required). Must be &gt;= 0
 * @member {Number} Amount
 */
UpdateExpense.prototype['Amount'] = undefined;

/**
 * A 3-letter ISO CurrencyCode for the expense currency. (e.g. USD). If not provided, defaults to the Account base currency.
 * @member {String} CurrencyCode
 */
UpdateExpense.prototype['CurrencyCode'] = undefined;

/**
 * The Avaza Customer ID to associate the Expense with.
 * @member {Number} CustomerIDFK
 */
UpdateExpense.prototype['CustomerIDFK'] = undefined;

/**
 * Optional (Only relevant if the expense currency is different to your account currency. If not provided we will look up the market exchange rate for you based on the expense date.) Exchange Rate = Expense Currency Amount / Base Currency Amount (e.g. if Expense currency is in AUD, and Base Currency is in USD, Exchange Rate = AUD $140 / USD $100 = 1.4)
 * @member {Number} ExchangeRate
 */
UpdateExpense.prototype['ExchangeRate'] = undefined;

/**
 * The expense category to link the Expense to.
 * @member {Number} ExpenseCategoryIDFK
 */
UpdateExpense.prototype['ExpenseCategoryIDFK'] = undefined;

/**
 * The date of the expense entry
 * @member {Date} ExpenseDate
 */
UpdateExpense.prototype['ExpenseDate'] = undefined;

/**
 * @member {Number} ExpenseID
 */
UpdateExpense.prototype['ExpenseID'] = undefined;

/**
 * (Optional) ID of Expense Payment Method.
 * @member {Number} ExpensePaymentMethodIDFK
 */
UpdateExpense.prototype['ExpensePaymentMethodIDFK'] = undefined;

/**
 * @member {Array.<String>} FieldsToUpdate
 */
UpdateExpense.prototype['FieldsToUpdate'] = undefined;

/**
 * Array of File Attachment IDs to associate with this expense. The files need to have already been uploaded. Currently only accepts a single file.
 * @member {Array.<Number>} FileAttachmentIDs
 */
UpdateExpense.prototype['FileAttachmentIDs'] = undefined;

/**
 * Links the expense to a Grouping/Trip report. If no matching name found, creates a new Group/Trip Report name.
 * @member {String} GroupTripName
 */
UpdateExpense.prototype['GroupTripName'] = undefined;

/**
 * The name of the merchant.
 * @member {String} Merchant
 */
UpdateExpense.prototype['Merchant'] = undefined;

/**
 * A Tax number identifier for the merchant.
 * @member {String} MerchantTaxNumber
 */
UpdateExpense.prototype['MerchantTaxNumber'] = undefined;

/**
 * Expense Notes
 * @member {String} Notes
 */
UpdateExpense.prototype['Notes'] = undefined;

/**
 * The Avaza project ID to associate the Expense with.
 * @member {Number} ProjectIDFK
 */
UpdateExpense.prototype['ProjectIDFK'] = undefined;

/**
 * Conditional - available for expenses that are assigned a unit priced based expense category. e.g Mileage
 * @member {Number} Quantity
 */
UpdateExpense.prototype['Quantity'] = undefined;

/**
 * (optional) TaskID of a Task to link the new Expense to. A Customer and Project must be provided also.
 * @member {Number} TaskIDFK
 */
UpdateExpense.prototype['TaskIDFK'] = undefined;

/**
 * Avaza Tax ID the expense belongs to.
 * @member {Number} TaxIDFK
 */
UpdateExpense.prototype['TaxIDFK'] = undefined;

/**
 * Optional - Enter \"INC\" if the tax amount is included in the expense amount otherwise enter \"EX\" when the amount exlcudes the tax. Defaults to \"Ex\". The tax amount on the expense will be autocalculated.
 * @member {String} TransactionTaxConfigCode
 */
UpdateExpense.prototype['TransactionTaxConfigCode'] = undefined;

/**
 * Pass false if creating a draft expense. True otherwise.
 * @member {Boolean} VerifyAndSave
 */
UpdateExpense.prototype['VerifyAndSave'] = undefined;

/**
 * aka Billable. Defaults to false if not provided. If set to true, a CustomerIDFK or CustomerName must be provided.
 * @member {Boolean} isChargeable
 */
UpdateExpense.prototype['isChargeable'] = undefined;

/**
 * Defaults to false if not provided.
 * @member {Boolean} isReimbursable
 */
UpdateExpense.prototype['isReimbursable'] = undefined;






export default UpdateExpense;

