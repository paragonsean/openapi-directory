/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TaxComponent from './TaxComponent';

/**
 * The TaxItem model module.
 * @module model/TaxItem
 * @version v1
 */
class TaxItem {
    /**
     * Constructs a new <code>TaxItem</code>.
     * @alias module:model/TaxItem
     */
    constructor() { 
        
        TaxItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TaxItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaxItem} obj Optional instance to populate.
     * @return {module:model/TaxItem} The populated <code>TaxItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaxItem();

            if (data.hasOwnProperty('CalculatedPercent')) {
                obj['CalculatedPercent'] = ApiClient.convertToType(data['CalculatedPercent'], 'Number');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('TaxCode')) {
                obj['TaxCode'] = ApiClient.convertToType(data['TaxCode'], 'String');
            }
            if (data.hasOwnProperty('TaxComponents')) {
                obj['TaxComponents'] = ApiClient.convertToType(data['TaxComponents'], [TaxComponent]);
            }
            if (data.hasOwnProperty('TaxID')) {
                obj['TaxID'] = ApiClient.convertToType(data['TaxID'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaxItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaxItem</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['TaxCode'] && !(typeof data['TaxCode'] === 'string' || data['TaxCode'] instanceof String)) {
            throw new Error("Expected the field `TaxCode` to be a primitive type in the JSON string but got " + data['TaxCode']);
        }
        if (data['TaxComponents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['TaxComponents'])) {
                throw new Error("Expected the field `TaxComponents` to be an array in the JSON data but got " + data['TaxComponents']);
            }
            // validate the optional field `TaxComponents` (array)
            for (const item of data['TaxComponents']) {
                TaxComponent.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Number} CalculatedPercent
 */
TaxItem.prototype['CalculatedPercent'] = undefined;

/**
 * @member {String} Name
 */
TaxItem.prototype['Name'] = undefined;

/**
 * @member {String} TaxCode
 */
TaxItem.prototype['TaxCode'] = undefined;

/**
 * @member {Array.<module:model/TaxComponent>} TaxComponents
 */
TaxItem.prototype['TaxComponents'] = undefined;

/**
 * @member {Number} TaxID
 */
TaxItem.prototype['TaxID'] = undefined;






export default TaxItem;

