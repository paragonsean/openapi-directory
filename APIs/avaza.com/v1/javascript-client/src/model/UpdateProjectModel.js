/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateProjectModel model module.
 * @module model/UpdateProjectModel
 * @version v1
 */
class UpdateProjectModel {
    /**
     * Constructs a new <code>UpdateProjectModel</code>.
     * @alias module:model/UpdateProjectModel
     */
    constructor() { 
        
        UpdateProjectModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateProjectModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateProjectModel} obj Optional instance to populate.
     * @return {module:model/UpdateProjectModel} The populated <code>UpdateProjectModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateProjectModel();

            if (data.hasOwnProperty('BudgetAmount')) {
                obj['BudgetAmount'] = ApiClient.convertToType(data['BudgetAmount'], 'Number');
            }
            if (data.hasOwnProperty('BudgetHours')) {
                obj['BudgetHours'] = ApiClient.convertToType(data['BudgetHours'], 'Number');
            }
            if (data.hasOwnProperty('EndDate')) {
                obj['EndDate'] = ApiClient.convertToType(data['EndDate'], 'Date');
            }
            if (data.hasOwnProperty('FieldsToUpdate')) {
                obj['FieldsToUpdate'] = ApiClient.convertToType(data['FieldsToUpdate'], ['String']);
            }
            if (data.hasOwnProperty('ProjectBillableTypeCode')) {
                obj['ProjectBillableTypeCode'] = ApiClient.convertToType(data['ProjectBillableTypeCode'], 'String');
            }
            if (data.hasOwnProperty('ProjectBudgetTypeCode')) {
                obj['ProjectBudgetTypeCode'] = ApiClient.convertToType(data['ProjectBudgetTypeCode'], 'String');
            }
            if (data.hasOwnProperty('ProjectCategoryIDFK')) {
                obj['ProjectCategoryIDFK'] = ApiClient.convertToType(data['ProjectCategoryIDFK'], 'Number');
            }
            if (data.hasOwnProperty('ProjectID')) {
                obj['ProjectID'] = ApiClient.convertToType(data['ProjectID'], 'Number');
            }
            if (data.hasOwnProperty('ProjectNotes')) {
                obj['ProjectNotes'] = ApiClient.convertToType(data['ProjectNotes'], 'String');
            }
            if (data.hasOwnProperty('ProjectStatusCode')) {
                obj['ProjectStatusCode'] = ApiClient.convertToType(data['ProjectStatusCode'], 'String');
            }
            if (data.hasOwnProperty('ProjectTitle')) {
                obj['ProjectTitle'] = ApiClient.convertToType(data['ProjectTitle'], 'String');
            }
            if (data.hasOwnProperty('StartDate')) {
                obj['StartDate'] = ApiClient.convertToType(data['StartDate'], 'Date');
            }
            if (data.hasOwnProperty('TimesheetApprovalRequiredbyDefault')) {
                obj['TimesheetApprovalRequiredbyDefault'] = ApiClient.convertToType(data['TimesheetApprovalRequiredbyDefault'], 'Boolean');
            }
            if (data.hasOwnProperty('isTaskRequiredOnTimesheet')) {
                obj['isTaskRequiredOnTimesheet'] = ApiClient.convertToType(data['isTaskRequiredOnTimesheet'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateProjectModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateProjectModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['FieldsToUpdate'])) {
            throw new Error("Expected the field `FieldsToUpdate` to be an array in the JSON data but got " + data['FieldsToUpdate']);
        }
        // ensure the json data is a string
        if (data['ProjectBillableTypeCode'] && !(typeof data['ProjectBillableTypeCode'] === 'string' || data['ProjectBillableTypeCode'] instanceof String)) {
            throw new Error("Expected the field `ProjectBillableTypeCode` to be a primitive type in the JSON string but got " + data['ProjectBillableTypeCode']);
        }
        // ensure the json data is a string
        if (data['ProjectBudgetTypeCode'] && !(typeof data['ProjectBudgetTypeCode'] === 'string' || data['ProjectBudgetTypeCode'] instanceof String)) {
            throw new Error("Expected the field `ProjectBudgetTypeCode` to be a primitive type in the JSON string but got " + data['ProjectBudgetTypeCode']);
        }
        // ensure the json data is a string
        if (data['ProjectNotes'] && !(typeof data['ProjectNotes'] === 'string' || data['ProjectNotes'] instanceof String)) {
            throw new Error("Expected the field `ProjectNotes` to be a primitive type in the JSON string but got " + data['ProjectNotes']);
        }
        // ensure the json data is a string
        if (data['ProjectStatusCode'] && !(typeof data['ProjectStatusCode'] === 'string' || data['ProjectStatusCode'] instanceof String)) {
            throw new Error("Expected the field `ProjectStatusCode` to be a primitive type in the JSON string but got " + data['ProjectStatusCode']);
        }
        // ensure the json data is a string
        if (data['ProjectTitle'] && !(typeof data['ProjectTitle'] === 'string' || data['ProjectTitle'] instanceof String)) {
            throw new Error("Expected the field `ProjectTitle` to be a primitive type in the JSON string but got " + data['ProjectTitle']);
        }

        return true;
    }


}



/**
 * @member {Number} BudgetAmount
 */
UpdateProjectModel.prototype['BudgetAmount'] = undefined;

/**
 * @member {Number} BudgetHours
 */
UpdateProjectModel.prototype['BudgetHours'] = undefined;

/**
 * @member {Date} EndDate
 */
UpdateProjectModel.prototype['EndDate'] = undefined;

/**
 * 
 * @member {Array.<String>} FieldsToUpdate
 */
UpdateProjectModel.prototype['FieldsToUpdate'] = undefined;

/**
 * The billing method of the project. (string, optional) Possible values: CategoryHourly, NoRate, NotBillable, PersonHourly, ProjectHourly
 * @member {String} ProjectBillableTypeCode
 */
UpdateProjectModel.prototype['ProjectBillableTypeCode'] = undefined;

/**
 * The project budgeting type. (string, optional) Possible values: NoBudget, PersonHours, ProjectFees, ProjectHours, CategoryHours
 * @member {String} ProjectBudgetTypeCode
 */
UpdateProjectModel.prototype['ProjectBudgetTypeCode'] = undefined;

/**
 * @member {Number} ProjectCategoryIDFK
 */
UpdateProjectModel.prototype['ProjectCategoryIDFK'] = undefined;

/**
 * The ID of the Project to update
 * @member {Number} ProjectID
 */
UpdateProjectModel.prototype['ProjectID'] = undefined;

/**
 * (optional) Any descriptive notes about the project. (2000 characters max)
 * @member {String} ProjectNotes
 */
UpdateProjectModel.prototype['ProjectNotes'] = undefined;

/**
 * Update the project status (string, optional): (Possible values: NotStarted, InProgress, Complete, OnHold)
 * @member {String} ProjectStatusCode
 */
UpdateProjectModel.prototype['ProjectStatusCode'] = undefined;

/**
 * (optional) An updated project title. (255 characters max)
 * @member {String} ProjectTitle
 */
UpdateProjectModel.prototype['ProjectTitle'] = undefined;

/**
 * @member {Date} StartDate
 */
UpdateProjectModel.prototype['StartDate'] = undefined;

/**
 * Whether timesheet approval should be required by default for newly added project members.
 * @member {Boolean} TimesheetApprovalRequiredbyDefault
 */
UpdateProjectModel.prototype['TimesheetApprovalRequiredbyDefault'] = undefined;

/**
 * Whether timesheets entered against this project require a task to be selected.
 * @member {Boolean} isTaskRequiredOnTimesheet
 */
UpdateProjectModel.prototype['isTaskRequiredOnTimesheet'] = undefined;






export default UpdateProjectModel;

