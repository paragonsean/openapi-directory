/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NewProjectModel model module.
 * @module model/NewProjectModel
 * @version v1
 */
class NewProjectModel {
    /**
     * Constructs a new <code>NewProjectModel</code>.
     * @alias module:model/NewProjectModel
     * @param projectTitle {String} The title of the new project. (255 characters max)
     */
    constructor(projectTitle) { 
        
        NewProjectModel.initialize(this, projectTitle);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, projectTitle) { 
        obj['ProjectTitle'] = projectTitle;
    }

    /**
     * Constructs a <code>NewProjectModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NewProjectModel} obj Optional instance to populate.
     * @return {module:model/NewProjectModel} The populated <code>NewProjectModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NewProjectModel();

            if (data.hasOwnProperty('BudgetAmount')) {
                obj['BudgetAmount'] = ApiClient.convertToType(data['BudgetAmount'], 'Number');
            }
            if (data.hasOwnProperty('BudgetHours')) {
                obj['BudgetHours'] = ApiClient.convertToType(data['BudgetHours'], 'Number');
            }
            if (data.hasOwnProperty('CompanyIDFK')) {
                obj['CompanyIDFK'] = ApiClient.convertToType(data['CompanyIDFK'], 'Number');
            }
            if (data.hasOwnProperty('CompanyName')) {
                obj['CompanyName'] = ApiClient.convertToType(data['CompanyName'], 'String');
            }
            if (data.hasOwnProperty('CurrencyCode')) {
                obj['CurrencyCode'] = ApiClient.convertToType(data['CurrencyCode'], 'String');
            }
            if (data.hasOwnProperty('EndDate')) {
                obj['EndDate'] = ApiClient.convertToType(data['EndDate'], 'Date');
            }
            if (data.hasOwnProperty('PopulateDefaultProjectMembers')) {
                obj['PopulateDefaultProjectMembers'] = ApiClient.convertToType(data['PopulateDefaultProjectMembers'], 'Boolean');
            }
            if (data.hasOwnProperty('ProjectCategoryIDFK')) {
                obj['ProjectCategoryIDFK'] = ApiClient.convertToType(data['ProjectCategoryIDFK'], 'Number');
            }
            if (data.hasOwnProperty('ProjectCode')) {
                obj['ProjectCode'] = ApiClient.convertToType(data['ProjectCode'], 'String');
            }
            if (data.hasOwnProperty('ProjectNotes')) {
                obj['ProjectNotes'] = ApiClient.convertToType(data['ProjectNotes'], 'String');
            }
            if (data.hasOwnProperty('ProjectStatusCode')) {
                obj['ProjectStatusCode'] = ApiClient.convertToType(data['ProjectStatusCode'], 'String');
            }
            if (data.hasOwnProperty('ProjectTitle')) {
                obj['ProjectTitle'] = ApiClient.convertToType(data['ProjectTitle'], 'String');
            }
            if (data.hasOwnProperty('StartDate')) {
                obj['StartDate'] = ApiClient.convertToType(data['StartDate'], 'Date');
            }
            if (data.hasOwnProperty('TimesheetApprovalRequiredbyDefault')) {
                obj['TimesheetApprovalRequiredbyDefault'] = ApiClient.convertToType(data['TimesheetApprovalRequiredbyDefault'], 'Boolean');
            }
            if (data.hasOwnProperty('isTaskRequiredOnTimesheet')) {
                obj['isTaskRequiredOnTimesheet'] = ApiClient.convertToType(data['isTaskRequiredOnTimesheet'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NewProjectModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NewProjectModel</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NewProjectModel.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['CompanyName'] && !(typeof data['CompanyName'] === 'string' || data['CompanyName'] instanceof String)) {
            throw new Error("Expected the field `CompanyName` to be a primitive type in the JSON string but got " + data['CompanyName']);
        }
        // ensure the json data is a string
        if (data['CurrencyCode'] && !(typeof data['CurrencyCode'] === 'string' || data['CurrencyCode'] instanceof String)) {
            throw new Error("Expected the field `CurrencyCode` to be a primitive type in the JSON string but got " + data['CurrencyCode']);
        }
        // ensure the json data is a string
        if (data['ProjectCode'] && !(typeof data['ProjectCode'] === 'string' || data['ProjectCode'] instanceof String)) {
            throw new Error("Expected the field `ProjectCode` to be a primitive type in the JSON string but got " + data['ProjectCode']);
        }
        // ensure the json data is a string
        if (data['ProjectNotes'] && !(typeof data['ProjectNotes'] === 'string' || data['ProjectNotes'] instanceof String)) {
            throw new Error("Expected the field `ProjectNotes` to be a primitive type in the JSON string but got " + data['ProjectNotes']);
        }
        // ensure the json data is a string
        if (data['ProjectStatusCode'] && !(typeof data['ProjectStatusCode'] === 'string' || data['ProjectStatusCode'] instanceof String)) {
            throw new Error("Expected the field `ProjectStatusCode` to be a primitive type in the JSON string but got " + data['ProjectStatusCode']);
        }
        // ensure the json data is a string
        if (data['ProjectTitle'] && !(typeof data['ProjectTitle'] === 'string' || data['ProjectTitle'] instanceof String)) {
            throw new Error("Expected the field `ProjectTitle` to be a primitive type in the JSON string but got " + data['ProjectTitle']);
        }

        return true;
    }


}

NewProjectModel.RequiredProperties = ["ProjectTitle"];

/**
 * @member {Number} BudgetAmount
 */
NewProjectModel.prototype['BudgetAmount'] = undefined;

/**
 * @member {Number} BudgetHours
 */
NewProjectModel.prototype['BudgetHours'] = undefined;

/**
 * An ID of a company in Avaza to create the Project under. You must provide either a CompanyID, or a CompanyName
 * @member {Number} CompanyIDFK
 */
NewProjectModel.prototype['CompanyIDFK'] = undefined;

/**
 * The name for a Company to create the project under. Will create company unless it matches an existing company name
 * @member {String} CompanyName
 */
NewProjectModel.prototype['CompanyName'] = undefined;

/**
 * The ISO 3 letter currency code to use when creating a new Company. If not provided, the account's default currency will be used.
 * @member {String} CurrencyCode
 */
NewProjectModel.prototype['CurrencyCode'] = undefined;

/**
 * @member {Date} EndDate
 */
NewProjectModel.prototype['EndDate'] = undefined;

/**
 * Defaults to true.
 * @member {Boolean} PopulateDefaultProjectMembers
 */
NewProjectModel.prototype['PopulateDefaultProjectMembers'] = undefined;

/**
 * @member {Number} ProjectCategoryIDFK
 */
NewProjectModel.prototype['ProjectCategoryIDFK'] = undefined;

/**
 * Used when Manual Project Codes are enabled
 * @member {String} ProjectCode
 */
NewProjectModel.prototype['ProjectCode'] = undefined;

/**
 * Any descriptive notes about the project. (2000 characters max)
 * @member {String} ProjectNotes
 */
NewProjectModel.prototype['ProjectNotes'] = undefined;

/**
 * @member {String} ProjectStatusCode
 */
NewProjectModel.prototype['ProjectStatusCode'] = undefined;

/**
 * The title of the new project. (255 characters max)
 * @member {String} ProjectTitle
 */
NewProjectModel.prototype['ProjectTitle'] = undefined;

/**
 * @member {Date} StartDate
 */
NewProjectModel.prototype['StartDate'] = undefined;

/**
 * @member {Boolean} TimesheetApprovalRequiredbyDefault
 */
NewProjectModel.prototype['TimesheetApprovalRequiredbyDefault'] = undefined;

/**
 * @member {Boolean} isTaskRequiredOnTimesheet
 */
NewProjectModel.prototype['isTaskRequiredOnTimesheet'] = undefined;






export default NewProjectModel;

