/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NewCompanyContact model module.
 * @module model/NewCompanyContact
 * @version v1
 */
class NewCompanyContact {
    /**
     * Constructs a new <code>NewCompanyContact</code>.
     * @alias module:model/NewCompanyContact
     * @param contactEmail {String} 
     * @param firstname {String} 
     * @param lastname {String} 
     */
    constructor(contactEmail, firstname, lastname) { 
        
        NewCompanyContact.initialize(this, contactEmail, firstname, lastname);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, contactEmail, firstname, lastname) { 
        obj['ContactEmail'] = contactEmail;
        obj['Firstname'] = firstname;
        obj['Lastname'] = lastname;
    }

    /**
     * Constructs a <code>NewCompanyContact</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NewCompanyContact} obj Optional instance to populate.
     * @return {module:model/NewCompanyContact} The populated <code>NewCompanyContact</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NewCompanyContact();

            if (data.hasOwnProperty('CompanyBillingAddress')) {
                obj['CompanyBillingAddress'] = ApiClient.convertToType(data['CompanyBillingAddress'], 'String');
            }
            if (data.hasOwnProperty('CompanyBillingAddressCity')) {
                obj['CompanyBillingAddressCity'] = ApiClient.convertToType(data['CompanyBillingAddressCity'], 'String');
            }
            if (data.hasOwnProperty('CompanyBillingAddressCountryCode')) {
                obj['CompanyBillingAddressCountryCode'] = ApiClient.convertToType(data['CompanyBillingAddressCountryCode'], 'String');
            }
            if (data.hasOwnProperty('CompanyBillingAddressLine')) {
                obj['CompanyBillingAddressLine'] = ApiClient.convertToType(data['CompanyBillingAddressLine'], 'String');
            }
            if (data.hasOwnProperty('CompanyBillingAddressPostCode')) {
                obj['CompanyBillingAddressPostCode'] = ApiClient.convertToType(data['CompanyBillingAddressPostCode'], 'String');
            }
            if (data.hasOwnProperty('CompanyBillingAddressState')) {
                obj['CompanyBillingAddressState'] = ApiClient.convertToType(data['CompanyBillingAddressState'], 'String');
            }
            if (data.hasOwnProperty('CompanyIDFK')) {
                obj['CompanyIDFK'] = ApiClient.convertToType(data['CompanyIDFK'], 'Number');
            }
            if (data.hasOwnProperty('CompanyName')) {
                obj['CompanyName'] = ApiClient.convertToType(data['CompanyName'], 'String');
            }
            if (data.hasOwnProperty('ContactEmail')) {
                obj['ContactEmail'] = ApiClient.convertToType(data['ContactEmail'], 'String');
            }
            if (data.hasOwnProperty('CurrencyCode')) {
                obj['CurrencyCode'] = ApiClient.convertToType(data['CurrencyCode'], 'String');
            }
            if (data.hasOwnProperty('Firstname')) {
                obj['Firstname'] = ApiClient.convertToType(data['Firstname'], 'String');
            }
            if (data.hasOwnProperty('Lastname')) {
                obj['Lastname'] = ApiClient.convertToType(data['Lastname'], 'String');
            }
            if (data.hasOwnProperty('Mobile')) {
                obj['Mobile'] = ApiClient.convertToType(data['Mobile'], 'String');
            }
            if (data.hasOwnProperty('Phone')) {
                obj['Phone'] = ApiClient.convertToType(data['Phone'], 'String');
            }
            if (data.hasOwnProperty('PositionTitle')) {
                obj['PositionTitle'] = ApiClient.convertToType(data['PositionTitle'], 'String');
            }
            if (data.hasOwnProperty('UpdateExisting')) {
                obj['UpdateExisting'] = ApiClient.convertToType(data['UpdateExisting'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NewCompanyContact</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NewCompanyContact</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NewCompanyContact.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['CompanyBillingAddress'] && !(typeof data['CompanyBillingAddress'] === 'string' || data['CompanyBillingAddress'] instanceof String)) {
            throw new Error("Expected the field `CompanyBillingAddress` to be a primitive type in the JSON string but got " + data['CompanyBillingAddress']);
        }
        // ensure the json data is a string
        if (data['CompanyBillingAddressCity'] && !(typeof data['CompanyBillingAddressCity'] === 'string' || data['CompanyBillingAddressCity'] instanceof String)) {
            throw new Error("Expected the field `CompanyBillingAddressCity` to be a primitive type in the JSON string but got " + data['CompanyBillingAddressCity']);
        }
        // ensure the json data is a string
        if (data['CompanyBillingAddressCountryCode'] && !(typeof data['CompanyBillingAddressCountryCode'] === 'string' || data['CompanyBillingAddressCountryCode'] instanceof String)) {
            throw new Error("Expected the field `CompanyBillingAddressCountryCode` to be a primitive type in the JSON string but got " + data['CompanyBillingAddressCountryCode']);
        }
        // ensure the json data is a string
        if (data['CompanyBillingAddressLine'] && !(typeof data['CompanyBillingAddressLine'] === 'string' || data['CompanyBillingAddressLine'] instanceof String)) {
            throw new Error("Expected the field `CompanyBillingAddressLine` to be a primitive type in the JSON string but got " + data['CompanyBillingAddressLine']);
        }
        // ensure the json data is a string
        if (data['CompanyBillingAddressPostCode'] && !(typeof data['CompanyBillingAddressPostCode'] === 'string' || data['CompanyBillingAddressPostCode'] instanceof String)) {
            throw new Error("Expected the field `CompanyBillingAddressPostCode` to be a primitive type in the JSON string but got " + data['CompanyBillingAddressPostCode']);
        }
        // ensure the json data is a string
        if (data['CompanyBillingAddressState'] && !(typeof data['CompanyBillingAddressState'] === 'string' || data['CompanyBillingAddressState'] instanceof String)) {
            throw new Error("Expected the field `CompanyBillingAddressState` to be a primitive type in the JSON string but got " + data['CompanyBillingAddressState']);
        }
        // ensure the json data is a string
        if (data['CompanyName'] && !(typeof data['CompanyName'] === 'string' || data['CompanyName'] instanceof String)) {
            throw new Error("Expected the field `CompanyName` to be a primitive type in the JSON string but got " + data['CompanyName']);
        }
        // ensure the json data is a string
        if (data['ContactEmail'] && !(typeof data['ContactEmail'] === 'string' || data['ContactEmail'] instanceof String)) {
            throw new Error("Expected the field `ContactEmail` to be a primitive type in the JSON string but got " + data['ContactEmail']);
        }
        // ensure the json data is a string
        if (data['CurrencyCode'] && !(typeof data['CurrencyCode'] === 'string' || data['CurrencyCode'] instanceof String)) {
            throw new Error("Expected the field `CurrencyCode` to be a primitive type in the JSON string but got " + data['CurrencyCode']);
        }
        // ensure the json data is a string
        if (data['Firstname'] && !(typeof data['Firstname'] === 'string' || data['Firstname'] instanceof String)) {
            throw new Error("Expected the field `Firstname` to be a primitive type in the JSON string but got " + data['Firstname']);
        }
        // ensure the json data is a string
        if (data['Lastname'] && !(typeof data['Lastname'] === 'string' || data['Lastname'] instanceof String)) {
            throw new Error("Expected the field `Lastname` to be a primitive type in the JSON string but got " + data['Lastname']);
        }
        // ensure the json data is a string
        if (data['Mobile'] && !(typeof data['Mobile'] === 'string' || data['Mobile'] instanceof String)) {
            throw new Error("Expected the field `Mobile` to be a primitive type in the JSON string but got " + data['Mobile']);
        }
        // ensure the json data is a string
        if (data['Phone'] && !(typeof data['Phone'] === 'string' || data['Phone'] instanceof String)) {
            throw new Error("Expected the field `Phone` to be a primitive type in the JSON string but got " + data['Phone']);
        }
        // ensure the json data is a string
        if (data['PositionTitle'] && !(typeof data['PositionTitle'] === 'string' || data['PositionTitle'] instanceof String)) {
            throw new Error("Expected the field `PositionTitle` to be a primitive type in the JSON string but got " + data['PositionTitle']);
        }

        return true;
    }


}

NewCompanyContact.RequiredProperties = ["ContactEmail", "Firstname", "Lastname"];

/**
 * @member {String} CompanyBillingAddress
 */
NewCompanyContact.prototype['CompanyBillingAddress'] = undefined;

/**
 * @member {String} CompanyBillingAddressCity
 */
NewCompanyContact.prototype['CompanyBillingAddressCity'] = undefined;

/**
 * @member {String} CompanyBillingAddressCountryCode
 */
NewCompanyContact.prototype['CompanyBillingAddressCountryCode'] = undefined;

/**
 * @member {String} CompanyBillingAddressLine
 */
NewCompanyContact.prototype['CompanyBillingAddressLine'] = undefined;

/**
 * @member {String} CompanyBillingAddressPostCode
 */
NewCompanyContact.prototype['CompanyBillingAddressPostCode'] = undefined;

/**
 * @member {String} CompanyBillingAddressState
 */
NewCompanyContact.prototype['CompanyBillingAddressState'] = undefined;

/**
 * @member {Number} CompanyIDFK
 */
NewCompanyContact.prototype['CompanyIDFK'] = undefined;

/**
 * @member {String} CompanyName
 */
NewCompanyContact.prototype['CompanyName'] = undefined;

/**
 * @member {String} ContactEmail
 */
NewCompanyContact.prototype['ContactEmail'] = undefined;

/**
 * @member {String} CurrencyCode
 */
NewCompanyContact.prototype['CurrencyCode'] = undefined;

/**
 * @member {String} Firstname
 */
NewCompanyContact.prototype['Firstname'] = undefined;

/**
 * @member {String} Lastname
 */
NewCompanyContact.prototype['Lastname'] = undefined;

/**
 * @member {String} Mobile
 */
NewCompanyContact.prototype['Mobile'] = undefined;

/**
 * @member {String} Phone
 */
NewCompanyContact.prototype['Phone'] = undefined;

/**
 * @member {String} PositionTitle
 */
NewCompanyContact.prototype['PositionTitle'] = undefined;

/**
 * @member {Boolean} UpdateExisting
 */
NewCompanyContact.prototype['UpdateExisting'] = undefined;






export default NewCompanyContact;

