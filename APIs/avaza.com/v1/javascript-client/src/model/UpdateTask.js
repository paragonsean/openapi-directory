/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NewTag from './NewTag';

/**
 * The UpdateTask model module.
 * @module model/UpdateTask
 * @version v1
 */
class UpdateTask {
    /**
     * Constructs a new <code>UpdateTask</code>.
     * @alias module:model/UpdateTask
     * @param fieldsToUpdate {Array.<String>} 
     * @param taskID {Number} 
     */
    constructor(fieldsToUpdate, taskID) { 
        
        UpdateTask.initialize(this, fieldsToUpdate, taskID);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, fieldsToUpdate, taskID) { 
        obj['FieldsToUpdate'] = fieldsToUpdate;
        obj['TaskID'] = taskID;
    }

    /**
     * Constructs a <code>UpdateTask</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateTask} obj Optional instance to populate.
     * @return {module:model/UpdateTask} The populated <code>UpdateTask</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateTask();

            if (data.hasOwnProperty('AssignedToUserIDFK')) {
                obj['AssignedToUserIDFK'] = ApiClient.convertToType(data['AssignedToUserIDFK'], ['Number']);
            }
            if (data.hasOwnProperty('DateDue')) {
                obj['DateDue'] = ApiClient.convertToType(data['DateDue'], 'Date');
            }
            if (data.hasOwnProperty('DateStart')) {
                obj['DateStart'] = ApiClient.convertToType(data['DateStart'], 'Date');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('EstimatedEffort')) {
                obj['EstimatedEffort'] = ApiClient.convertToType(data['EstimatedEffort'], 'Number');
            }
            if (data.hasOwnProperty('FieldsToUpdate')) {
                obj['FieldsToUpdate'] = ApiClient.convertToType(data['FieldsToUpdate'], ['String']);
            }
            if (data.hasOwnProperty('PercentComplete')) {
                obj['PercentComplete'] = ApiClient.convertToType(data['PercentComplete'], 'Number');
            }
            if (data.hasOwnProperty('SectionIDFK')) {
                obj['SectionIDFK'] = ApiClient.convertToType(data['SectionIDFK'], 'Number');
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], [NewTag]);
            }
            if (data.hasOwnProperty('TaskID')) {
                obj['TaskID'] = ApiClient.convertToType(data['TaskID'], 'Number');
            }
            if (data.hasOwnProperty('TaskPriorityCode')) {
                obj['TaskPriorityCode'] = ApiClient.convertToType(data['TaskPriorityCode'], 'String');
            }
            if (data.hasOwnProperty('TaskStatusCode')) {
                obj['TaskStatusCode'] = ApiClient.convertToType(data['TaskStatusCode'], 'String');
            }
            if (data.hasOwnProperty('Title')) {
                obj['Title'] = ApiClient.convertToType(data['Title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateTask</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateTask</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateTask.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['AssignedToUserIDFK'])) {
            throw new Error("Expected the field `AssignedToUserIDFK` to be an array in the JSON data but got " + data['AssignedToUserIDFK']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['FieldsToUpdate'])) {
            throw new Error("Expected the field `FieldsToUpdate` to be an array in the JSON data but got " + data['FieldsToUpdate']);
        }
        if (data['Tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Tags'])) {
                throw new Error("Expected the field `Tags` to be an array in the JSON data but got " + data['Tags']);
            }
            // validate the optional field `Tags` (array)
            for (const item of data['Tags']) {
                NewTag.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['TaskPriorityCode'] && !(typeof data['TaskPriorityCode'] === 'string' || data['TaskPriorityCode'] instanceof String)) {
            throw new Error("Expected the field `TaskPriorityCode` to be a primitive type in the JSON string but got " + data['TaskPriorityCode']);
        }
        // ensure the json data is a string
        if (data['TaskStatusCode'] && !(typeof data['TaskStatusCode'] === 'string' || data['TaskStatusCode'] instanceof String)) {
            throw new Error("Expected the field `TaskStatusCode` to be a primitive type in the JSON string but got " + data['TaskStatusCode']);
        }
        // ensure the json data is a string
        if (data['Title'] && !(typeof data['Title'] === 'string' || data['Title'] instanceof String)) {
            throw new Error("Expected the field `Title` to be a primitive type in the JSON string but got " + data['Title']);
        }

        return true;
    }


}

UpdateTask.RequiredProperties = ["FieldsToUpdate", "TaskID"];

/**
 * @member {Array.<Number>} AssignedToUserIDFK
 */
UpdateTask.prototype['AssignedToUserIDFK'] = undefined;

/**
 * @member {Date} DateDue
 */
UpdateTask.prototype['DateDue'] = undefined;

/**
 * @member {Date} DateStart
 */
UpdateTask.prototype['DateStart'] = undefined;

/**
 * @member {String} Description
 */
UpdateTask.prototype['Description'] = undefined;

/**
 * Decimal hours
 * @member {Number} EstimatedEffort
 */
UpdateTask.prototype['EstimatedEffort'] = undefined;

/**
 * @member {Array.<String>} FieldsToUpdate
 */
UpdateTask.prototype['FieldsToUpdate'] = undefined;

/**
 * @member {Number} PercentComplete
 */
UpdateTask.prototype['PercentComplete'] = undefined;

/**
 * @member {Number} SectionIDFK
 */
UpdateTask.prototype['SectionIDFK'] = undefined;

/**
 * @member {Array.<module:model/NewTag>} Tags
 */
UpdateTask.prototype['Tags'] = undefined;

/**
 * @member {Number} TaskID
 */
UpdateTask.prototype['TaskID'] = undefined;

/**
 * @member {String} TaskPriorityCode
 */
UpdateTask.prototype['TaskPriorityCode'] = undefined;

/**
 * @member {String} TaskStatusCode
 */
UpdateTask.prototype['TaskStatusCode'] = undefined;

/**
 * @member {String} Title
 */
UpdateTask.prototype['Title'] = undefined;






export default UpdateTask;

