/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AccountDetails model module.
 * @module model/AccountDetails
 * @version v1
 */
class AccountDetails {
    /**
     * Constructs a new <code>AccountDetails</code>.
     * @alias module:model/AccountDetails
     */
    constructor() { 
        
        AccountDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AccountDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountDetails} obj Optional instance to populate.
     * @return {module:model/AccountDetails} The populated <code>AccountDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountDetails();

            if (data.hasOwnProperty('AccountEmail')) {
                obj['AccountEmail'] = ApiClient.convertToType(data['AccountEmail'], 'String');
            }
            if (data.hasOwnProperty('AccountID')) {
                obj['AccountID'] = ApiClient.convertToType(data['AccountID'], 'Number');
            }
            if (data.hasOwnProperty('AllowHidingCompletedTasksOnTimesheet')) {
                obj['AllowHidingCompletedTasksOnTimesheet'] = ApiClient.convertToType(data['AllowHidingCompletedTasksOnTimesheet'], 'Boolean');
            }
            if (data.hasOwnProperty('BrandPrimaryColor')) {
                obj['BrandPrimaryColor'] = ApiClient.convertToType(data['BrandPrimaryColor'], 'String');
            }
            if (data.hasOwnProperty('BrandPrimaryColorLuminance')) {
                obj['BrandPrimaryColorLuminance'] = ApiClient.convertToType(data['BrandPrimaryColorLuminance'], 'String');
            }
            if (data.hasOwnProperty('CompanyName')) {
                obj['CompanyName'] = ApiClient.convertToType(data['CompanyName'], 'String');
            }
            if (data.hasOwnProperty('CurrentServerTimeISO')) {
                obj['CurrentServerTimeISO'] = ApiClient.convertToType(data['CurrentServerTimeISO'], 'String');
            }
            if (data.hasOwnProperty('DefaultCurrencyCode')) {
                obj['DefaultCurrencyCode'] = ApiClient.convertToType(data['DefaultCurrencyCode'], 'String');
            }
            if (data.hasOwnProperty('ExpenseApprovalRequired')) {
                obj['ExpenseApprovalRequired'] = ApiClient.convertToType(data['ExpenseApprovalRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('LockApprovedExpenses')) {
                obj['LockApprovedExpenses'] = ApiClient.convertToType(data['LockApprovedExpenses'], 'Boolean');
            }
            if (data.hasOwnProperty('LockApprovedTimesheets')) {
                obj['LockApprovedTimesheets'] = ApiClient.convertToType(data['LockApprovedTimesheets'], 'Boolean');
            }
            if (data.hasOwnProperty('SC')) {
                obj['SC'] = ApiClient.convertToType(data['SC'], 'String');
            }
            if (data.hasOwnProperty('Subdomain')) {
                obj['Subdomain'] = ApiClient.convertToType(data['Subdomain'], 'String');
            }
            if (data.hasOwnProperty('TimesheetDayOfWeek')) {
                obj['TimesheetDayOfWeek'] = ApiClient.convertToType(data['TimesheetDayOfWeek'], 'Number');
            }
            if (data.hasOwnProperty('TimesheetDisplayFormatCode')) {
                obj['TimesheetDisplayFormatCode'] = ApiClient.convertToType(data['TimesheetDisplayFormatCode'], 'String');
            }
            if (data.hasOwnProperty('WeeklyTimesheetReminder')) {
                obj['WeeklyTimesheetReminder'] = ApiClient.convertToType(data['WeeklyTimesheetReminder'], 'Boolean');
            }
            if (data.hasOwnProperty('has24HourTimesheetFormat')) {
                obj['has24HourTimesheetFormat'] = ApiClient.convertToType(data['has24HourTimesheetFormat'], 'Boolean');
            }
            if (data.hasOwnProperty('hasStartEndTimesheets')) {
                obj['hasStartEndTimesheets'] = ApiClient.convertToType(data['hasStartEndTimesheets'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AccountEmail'] && !(typeof data['AccountEmail'] === 'string' || data['AccountEmail'] instanceof String)) {
            throw new Error("Expected the field `AccountEmail` to be a primitive type in the JSON string but got " + data['AccountEmail']);
        }
        // ensure the json data is a string
        if (data['BrandPrimaryColor'] && !(typeof data['BrandPrimaryColor'] === 'string' || data['BrandPrimaryColor'] instanceof String)) {
            throw new Error("Expected the field `BrandPrimaryColor` to be a primitive type in the JSON string but got " + data['BrandPrimaryColor']);
        }
        // ensure the json data is a string
        if (data['BrandPrimaryColorLuminance'] && !(typeof data['BrandPrimaryColorLuminance'] === 'string' || data['BrandPrimaryColorLuminance'] instanceof String)) {
            throw new Error("Expected the field `BrandPrimaryColorLuminance` to be a primitive type in the JSON string but got " + data['BrandPrimaryColorLuminance']);
        }
        // ensure the json data is a string
        if (data['CompanyName'] && !(typeof data['CompanyName'] === 'string' || data['CompanyName'] instanceof String)) {
            throw new Error("Expected the field `CompanyName` to be a primitive type in the JSON string but got " + data['CompanyName']);
        }
        // ensure the json data is a string
        if (data['CurrentServerTimeISO'] && !(typeof data['CurrentServerTimeISO'] === 'string' || data['CurrentServerTimeISO'] instanceof String)) {
            throw new Error("Expected the field `CurrentServerTimeISO` to be a primitive type in the JSON string but got " + data['CurrentServerTimeISO']);
        }
        // ensure the json data is a string
        if (data['DefaultCurrencyCode'] && !(typeof data['DefaultCurrencyCode'] === 'string' || data['DefaultCurrencyCode'] instanceof String)) {
            throw new Error("Expected the field `DefaultCurrencyCode` to be a primitive type in the JSON string but got " + data['DefaultCurrencyCode']);
        }
        // ensure the json data is a string
        if (data['SC'] && !(typeof data['SC'] === 'string' || data['SC'] instanceof String)) {
            throw new Error("Expected the field `SC` to be a primitive type in the JSON string but got " + data['SC']);
        }
        // ensure the json data is a string
        if (data['Subdomain'] && !(typeof data['Subdomain'] === 'string' || data['Subdomain'] instanceof String)) {
            throw new Error("Expected the field `Subdomain` to be a primitive type in the JSON string but got " + data['Subdomain']);
        }
        // ensure the json data is a string
        if (data['TimesheetDisplayFormatCode'] && !(typeof data['TimesheetDisplayFormatCode'] === 'string' || data['TimesheetDisplayFormatCode'] instanceof String)) {
            throw new Error("Expected the field `TimesheetDisplayFormatCode` to be a primitive type in the JSON string but got " + data['TimesheetDisplayFormatCode']);
        }

        return true;
    }


}



/**
 * @member {String} AccountEmail
 */
AccountDetails.prototype['AccountEmail'] = undefined;

/**
 * @member {Number} AccountID
 */
AccountDetails.prototype['AccountID'] = undefined;

/**
 * @member {Boolean} AllowHidingCompletedTasksOnTimesheet
 */
AccountDetails.prototype['AllowHidingCompletedTasksOnTimesheet'] = undefined;

/**
 * A custom branding color for the account. Available on paid accounts.
 * @member {String} BrandPrimaryColor
 */
AccountDetails.prototype['BrandPrimaryColor'] = undefined;

/**
 * A determination of the luminance of the Brand Primary Color (possible values: 'Dark', 'Medium', 'Light'). This can be used to determine appropriate font colors to sit on top of the brand color.
 * @member {String} BrandPrimaryColorLuminance
 */
AccountDetails.prototype['BrandPrimaryColorLuminance'] = undefined;

/**
 * @member {String} CompanyName
 */
AccountDetails.prototype['CompanyName'] = undefined;

/**
 * Format: ISO \"YYYY-MM-DD HH:mm:ss.SSS\"
 * @member {String} CurrentServerTimeISO
 */
AccountDetails.prototype['CurrentServerTimeISO'] = undefined;

/**
 * ISO 3 letter base Currency Code for the account
 * @member {String} DefaultCurrencyCode
 */
AccountDetails.prototype['DefaultCurrencyCode'] = undefined;

/**
 * Whether the account requires expenses be approved.
 * @member {Boolean} ExpenseApprovalRequired
 */
AccountDetails.prototype['ExpenseApprovalRequired'] = undefined;

/**
 * Approved expenses get locked from subsequent editing by standard expense users.
 * @member {Boolean} LockApprovedExpenses
 */
AccountDetails.prototype['LockApprovedExpenses'] = undefined;

/**
 * @member {Boolean} LockApprovedTimesheets
 */
AccountDetails.prototype['LockApprovedTimesheets'] = undefined;

/**
 * @member {String} SC
 */
AccountDetails.prototype['SC'] = undefined;

/**
 * @member {String} Subdomain
 */
AccountDetails.prototype['Subdomain'] = undefined;

/**
 * @member {Number} TimesheetDayOfWeek
 */
AccountDetails.prototype['TimesheetDayOfWeek'] = undefined;

/**
 * @member {String} TimesheetDisplayFormatCode
 */
AccountDetails.prototype['TimesheetDisplayFormatCode'] = undefined;

/**
 * @member {Boolean} WeeklyTimesheetReminder
 */
AccountDetails.prototype['WeeklyTimesheetReminder'] = undefined;

/**
 * @member {Boolean} has24HourTimesheetFormat
 */
AccountDetails.prototype['has24HourTimesheetFormat'] = undefined;

/**
 * @member {Boolean} hasStartEndTimesheets
 */
AccountDetails.prototype['hasStartEndTimesheets'] = undefined;






export default AccountDetails;

