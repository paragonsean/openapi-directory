/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NewTimesheet model module.
 * @module model/NewTimesheet
 * @version v1
 */
class NewTimesheet {
    /**
     * Constructs a new <code>NewTimesheet</code>.
     * @alias module:model/NewTimesheet
     */
    constructor() { 
        
        NewTimesheet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NewTimesheet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NewTimesheet} obj Optional instance to populate.
     * @return {module:model/NewTimesheet} The populated <code>NewTimesheet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NewTimesheet();

            if (data.hasOwnProperty('CustomMetadata')) {
                obj['CustomMetadata'] = ApiClient.convertToType(data['CustomMetadata'], 'String');
            }
            if (data.hasOwnProperty('Duration')) {
                obj['Duration'] = ApiClient.convertToType(data['Duration'], 'Number');
            }
            if (data.hasOwnProperty('EntryDate')) {
                obj['EntryDate'] = ApiClient.convertToType(data['EntryDate'], 'Date');
            }
            if (data.hasOwnProperty('Notes')) {
                obj['Notes'] = ApiClient.convertToType(data['Notes'], 'String');
            }
            if (data.hasOwnProperty('ProjectIDFK')) {
                obj['ProjectIDFK'] = ApiClient.convertToType(data['ProjectIDFK'], 'Number');
            }
            if (data.hasOwnProperty('TaskIDFK')) {
                obj['TaskIDFK'] = ApiClient.convertToType(data['TaskIDFK'], 'Number');
            }
            if (data.hasOwnProperty('TimesheetCategoryIDFK')) {
                obj['TimesheetCategoryIDFK'] = ApiClient.convertToType(data['TimesheetCategoryIDFK'], 'Number');
            }
            if (data.hasOwnProperty('UserIDFK')) {
                obj['UserIDFK'] = ApiClient.convertToType(data['UserIDFK'], 'Number');
            }
            if (data.hasOwnProperty('hasStartEndTime')) {
                obj['hasStartEndTime'] = ApiClient.convertToType(data['hasStartEndTime'], 'Boolean');
            }
            if (data.hasOwnProperty('isInvoiced')) {
                obj['isInvoiced'] = ApiClient.convertToType(data['isInvoiced'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NewTimesheet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NewTimesheet</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['CustomMetadata'] && !(typeof data['CustomMetadata'] === 'string' || data['CustomMetadata'] instanceof String)) {
            throw new Error("Expected the field `CustomMetadata` to be a primitive type in the JSON string but got " + data['CustomMetadata']);
        }
        // ensure the json data is a string
        if (data['Notes'] && !(typeof data['Notes'] === 'string' || data['Notes'] instanceof String)) {
            throw new Error("Expected the field `Notes` to be a primitive type in the JSON string but got " + data['Notes']);
        }

        return true;
    }


}



/**
 * Optional. free nvarchar field available via Api to store any additional metadata against a timesheet. We suggest you use Json or your preferred serialisation format. 1000 characters max.
 * @member {String} CustomMetadata
 */
NewTimesheet.prototype['CustomMetadata'] = undefined;

/**
 * The duration of the timesheet, in decimal hours. If null or 0, a timer will be started.
 * @member {Number} Duration
 */
NewTimesheet.prototype['Duration'] = undefined;

/**
 * The date of the timesheet entry, with an optional start time component.
 * @member {Date} EntryDate
 */
NewTimesheet.prototype['EntryDate'] = undefined;

/**
 * Timesheet Notes
 * @member {String} Notes
 */
NewTimesheet.prototype['Notes'] = undefined;

/**
 * The project to associate the timesheet with.
 * @member {Number} ProjectIDFK
 */
NewTimesheet.prototype['ProjectIDFK'] = undefined;

/**
 * Optional. Link the timesheet to a specific task
 * @member {Number} TaskIDFK
 */
NewTimesheet.prototype['TaskIDFK'] = undefined;

/**
 * The Project timesheet category to link the timesheet to
 * @member {Number} TimesheetCategoryIDFK
 */
NewTimesheet.prototype['TimesheetCategoryIDFK'] = undefined;

/**
 * UserID for a Timesheet user in Avaza
 * @member {Number} UserIDFK
 */
NewTimesheet.prototype['UserIDFK'] = undefined;

/**
 * If true, the start time will be take from the time component of the Entry Date field, and the end time will be calculated by adding the Duration to the StartDate
 * @member {Boolean} hasStartEndTime
 */
NewTimesheet.prototype['hasStartEndTime'] = undefined;

/**
 * Optional. False by default. Allows you to mark the timesheet as invoiced in an external system.
 * @member {Boolean} isInvoiced
 */
NewTimesheet.prototype['isInvoiced'] = undefined;






export default NewTimesheet;

