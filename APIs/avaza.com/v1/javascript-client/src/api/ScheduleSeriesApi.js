/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateBooking from '../model/CreateBooking';
import CreateLeave from '../model/CreateLeave';
import EditBooking from '../model/EditBooking';
import EditLeave from '../model/EditLeave';
import ScheduleSeriesDetails from '../model/ScheduleSeriesDetails';
import ScheduleSeriesList from '../model/ScheduleSeriesList';

/**
* ScheduleSeries service.
* @module api/ScheduleSeriesApi
* @version v1
*/
export default class ScheduleSeriesApi {

    /**
    * Constructs a new ScheduleSeriesApi. 
    * @alias module:api/ScheduleSeriesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the scheduleSeriesAddBooking operation.
     * @callback module:api/ScheduleSeriesApi~scheduleSeriesAddBookingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleSeriesDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new Schedule Booking
     * @param {module:model/CreateBooking} model 
     * @param {module:api/ScheduleSeriesApi~scheduleSeriesAddBookingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleSeriesDetails}
     */
    scheduleSeriesAddBooking(model, callback) {
      let postBody = model;
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling scheduleSeriesAddBooking");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = ScheduleSeriesDetails;
      return this.apiClient.callApi(
        '/ScheduleSeries/AddBooking', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduleSeriesAddLeave operation.
     * @callback module:api/ScheduleSeriesApi~scheduleSeriesAddLeaveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleSeriesDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new Leave Booking
     * @param {module:model/CreateLeave} model 
     * @param {module:api/ScheduleSeriesApi~scheduleSeriesAddLeaveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleSeriesDetails}
     */
    scheduleSeriesAddLeave(model, callback) {
      let postBody = model;
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling scheduleSeriesAddLeave");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = ScheduleSeriesDetails;
      return this.apiClient.callApi(
        '/ScheduleSeries/AddLeave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduleSeriesEditBooking operation.
     * @callback module:api/ScheduleSeriesApi~scheduleSeriesEditBookingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleSeriesDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit Booking
     * @param {module:model/EditBooking} model 
     * @param {module:api/ScheduleSeriesApi~scheduleSeriesEditBookingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleSeriesDetails}
     */
    scheduleSeriesEditBooking(model, callback) {
      let postBody = model;
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling scheduleSeriesEditBooking");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = ScheduleSeriesDetails;
      return this.apiClient.callApi(
        '/ScheduleSeries/EditBooking', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduleSeriesEditLeave operation.
     * @callback module:api/ScheduleSeriesApi~scheduleSeriesEditLeaveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleSeriesDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit Leave Booking
     * @param {module:model/EditLeave} model 
     * @param {module:api/ScheduleSeriesApi~scheduleSeriesEditLeaveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleSeriesDetails}
     */
    scheduleSeriesEditLeave(model, callback) {
      let postBody = model;
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling scheduleSeriesEditLeave");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = ScheduleSeriesDetails;
      return this.apiClient.callApi(
        '/ScheduleSeries/EditLeave', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduleSeriesGet operation.
     * @callback module:api/ScheduleSeriesApi~scheduleSeriesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleSeriesList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets list of Schedule Series
     * Schedule Series represents a strip of time assigned to a user over a date range, for a certain number of hours per day. They can be for Leave or for project work Bookings.
     * @param {Object} opts Optional parameters
     * @param {Date} [updatedAfter] Limit results to records updated after the specified date
     * @param {Date} [scheduleStartDateFrom] Filter for schedules that start on or after a specific date
     * @param {Date} [scheduleStartDateTo] Filter for schedules that start on or before a specific date
     * @param {Date} [scheduleEndDateFrom] Filter for schedules that end on or after a specific date
     * @param {Date} [scheduleEndDateTo] Filter for schedules that end on or before a specific date
     * @param {Number} [userID] The UserID of a schedule user to filter assignments for. Only api users with Admin role can see all schedules across all users. Users with ScheduleUser role can access their own ScheduleSeries.
     * @param {String} [userEmail] The email of the user who has been scheduled
     * @param {Number} [timeSheetCategoryID] Filter for schedule records linked to a specific timesheeet category
     * @param {String} [timeSheetCategoryName] Filter for schedule records with a specific timesheeet category name (exact string match)
     * @param {Number} [leaveTypeID] Filter to records of a particular leave type
     * @param {Number} [projectID] Filter to only include books linked to a specific project
     * @param {Number} [companyID] Filter to only include records linked to projects, where that project belongs to a specific customer company
     * @param {Number} [pageSize] Number of items per page (max 1000)
     * @param {Number} [pageNumber] Page to display. Starts from 1.
     * @param {String} [sort] Optional sorting instruction. Currently possible values: \"DateUpdated\", \"DateCreated\", \"DateUpdated desc\", \"DateCreated desc\"
     * @param {module:api/ScheduleSeriesApi~scheduleSeriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleSeriesList}
     */
    scheduleSeriesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'UpdatedAfter': opts['updatedAfter'],
        'ScheduleStartDateFrom': opts['scheduleStartDateFrom'],
        'ScheduleStartDateTo': opts['scheduleStartDateTo'],
        'ScheduleEndDateFrom': opts['scheduleEndDateFrom'],
        'ScheduleEndDateTo': opts['scheduleEndDateTo'],
        'UserID': opts['userID'],
        'UserEmail': opts['userEmail'],
        'TimeSheetCategoryID': opts['timeSheetCategoryID'],
        'TimeSheetCategoryName': opts['timeSheetCategoryName'],
        'LeaveTypeID': opts['leaveTypeID'],
        'ProjectID': opts['projectID'],
        'CompanyID': opts['companyID'],
        'pageSize': opts['pageSize'],
        'pageNumber': opts['pageNumber'],
        'Sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = ScheduleSeriesList;
      return this.apiClient.callApi(
        '/api/ScheduleSeries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
