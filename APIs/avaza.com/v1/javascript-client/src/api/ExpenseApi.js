/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExpenseAttachmentRequest from '../model/ExpenseAttachmentRequest';
import ExpenseAttachmentUploadResult from '../model/ExpenseAttachmentUploadResult';
import ExpenseDeleteResultSet from '../model/ExpenseDeleteResultSet';
import ExpenseDetails from '../model/ExpenseDetails';
import ExpenseList from '../model/ExpenseList';
import NewExpense from '../model/NewExpense';
import UpdateExpense from '../model/UpdateExpense';

/**
* Expense service.
* @module api/ExpenseApi
* @version v1
*/
export default class ExpenseApi {

    /**
    * Constructs a new ExpenseApi. 
    * @alias module:api/ExpenseApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the expenseApproval operation.
     * @callback module:api/ExpenseApi~expenseApprovalCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit Expenses for Approval.
     * @param {Array.<Number>} expenseIDs A collection of ExpenseID's that should be submitted for approval. If not provided, submits all verified expenses for approval.
     * @param {Object} opts Optional parameters
     * @param {Number} [userID] The user to submit the Expenses for. Defaults to current user. Only allowed to be different from the current user when the current user has rights to Impersonate other users.
     * @param {Boolean} [sendNotifications] Send email alerts to expense approvers. Defaults to true
     * @param {module:api/ExpenseApi~expenseApprovalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    expenseApproval(expenseIDs, opts, callback) {
      opts = opts || {};
      let postBody = expenseIDs;
      // verify the required parameter 'expenseIDs' is set
      if (expenseIDs === undefined || expenseIDs === null) {
        throw new Error("Missing the required parameter 'expenseIDs' when calling expenseApproval");
      }

      let pathParams = {
      };
      let queryParams = {
        'UserID': opts['userID'],
        'SendNotifications': opts['sendNotifications']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/ExpenseApproval/Submit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expenseAttachment operation.
     * @callback module:api/ExpenseApi~expenseAttachmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpenseAttachmentUploadResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ExpenseAttachmentRequest} expenseAttachmentRequest 
     * @param {module:api/ExpenseApi~expenseAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpenseAttachmentUploadResult}
     */
    expenseAttachment(expenseAttachmentRequest, callback) {
      let postBody = expenseAttachmentRequest;
      // verify the required parameter 'expenseAttachmentRequest' is set
      if (expenseAttachmentRequest === undefined || expenseAttachmentRequest === null) {
        throw new Error("Missing the required parameter 'expenseAttachmentRequest' when calling expenseAttachment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/form-data'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = ExpenseAttachmentUploadResult;
      return this.apiClient.callApi(
        '/api/Expense/Attachment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expenseDelete operation.
     * @callback module:api/ExpenseApi~expenseDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpenseDeleteResultSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Timesheet Entry
     * @param {Array.<Number>} expenseIDs A collection of ExpenseIDs to delete
     * @param {module:api/ExpenseApi~expenseDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpenseDeleteResultSet}
     */
    expenseDelete(expenseIDs, callback) {
      let postBody = expenseIDs;
      // verify the required parameter 'expenseIDs' is set
      if (expenseIDs === undefined || expenseIDs === null) {
        throw new Error("Missing the required parameter 'expenseIDs' when calling expenseDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = ExpenseDeleteResultSet;
      return this.apiClient.callApi(
        '/api/Expense', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expenseGet operation.
     * @callback module:api/ExpenseApi~expenseGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpenseList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets list of Expenses
     * @param {Object} opts Optional parameters
     * @param {Date} [updatedAfter] 
     * @param {Date} [expenseDateFrom] 
     * @param {Date} [expenseDateTo] 
     * @param {String} [userEmail] 
     * @param {Number} [userID] 
     * @param {String} [categoryName] 
     * @param {Number} [customerID] 
     * @param {Number} [projectID] 
     * @param {Boolean} [isChargeable] 
     * @param {Boolean} [isInvoiced] 
     * @param {Number} [expenseReimbursementIDFK] 
     * @param {Number} [expensePaymentMethodIDFK] 
     * @param {String} [expenseApprovalStatusCode] 
     * @param {String} [search] 
     * @param {Number} [pageSize] Number of items per page (max 1000)
     * @param {Number} [pageNumber] Page to display. Starts from 1.
     * @param {String} [sort] 
     * @param {module:api/ExpenseApi~expenseGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpenseList}
     */
    expenseGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'UpdatedAfter': opts['updatedAfter'],
        'ExpenseDateFrom': opts['expenseDateFrom'],
        'ExpenseDateTo': opts['expenseDateTo'],
        'UserEmail': opts['userEmail'],
        'UserID': opts['userID'],
        'CategoryName': opts['categoryName'],
        'CustomerID': opts['customerID'],
        'ProjectID': opts['projectID'],
        'isChargeable': opts['isChargeable'],
        'isInvoiced': opts['isInvoiced'],
        'ExpenseReimbursementIDFK': opts['expenseReimbursementIDFK'],
        'ExpensePaymentMethodIDFK': opts['expensePaymentMethodIDFK'],
        'ExpenseApprovalStatusCode': opts['expenseApprovalStatusCode'],
        'Search': opts['search'],
        'pageSize': opts['pageSize'],
        'pageNumber': opts['pageNumber'],
        'Sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = ExpenseList;
      return this.apiClient.callApi(
        '/api/Expense', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expenseGetByID operation.
     * @callback module:api/ExpenseApi~expenseGetByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpenseDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an Expense Entry by Expense ID
     * @param {Number} id Expense ID number
     * @param {module:api/ExpenseApi~expenseGetByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpenseDetails}
     */
    expenseGetByID(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling expenseGetByID");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = ExpenseDetails;
      return this.apiClient.callApi(
        '/api/Expense/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expensePost operation.
     * @callback module:api/ExpenseApi~expensePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpenseDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Expense
     * Create an Expense
     * @param {module:model/NewExpense} model 
     * @param {module:api/ExpenseApi~expensePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpenseDetails}
     */
    expensePost(model, callback) {
      let postBody = model;
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling expensePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = ExpenseDetails;
      return this.apiClient.callApi(
        '/api/Expense', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expensePut operation.
     * @callback module:api/ExpenseApi~expensePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpenseDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Expense
     * Update an Expense
     * @param {module:model/UpdateExpense} model 
     * @param {module:api/ExpenseApi~expensePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpenseDetails}
     */
    expensePut(model, callback) {
      let postBody = model;
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling expensePut");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = ExpenseDetails;
      return this.apiClient.callApi(
        '/api/Expense', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
