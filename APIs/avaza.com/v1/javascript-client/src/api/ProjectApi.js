/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import NewProjectModel from '../model/NewProjectModel';
import ProjectDetails from '../model/ProjectDetails';
import ProjectDropdownList from '../model/ProjectDropdownList';
import ProjectList from '../model/ProjectList';
import UpdateProjectModel from '../model/UpdateProjectModel';

/**
* Project service.
* @module api/ProjectApi
* @version v1
*/
export default class ProjectApi {

    /**
    * Constructs a new ProjectApi. 
    * @alias module:api/ProjectApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the projectGet operation.
     * @callback module:api/ProjectApi~projectGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets list of Projects
     * @param {Object} opts Optional parameters
     * @param {Date} [updatedAfter] Only show project records updated after a certain date (UTC)
     * @param {Number} [pageSize] Number of items per page (max 1000)
     * @param {Number} [pageNumber] Page to display. Starts from 1.
     * @param {String} [sort] A column to sort on. Current possible values: \"DateUpdated\", \"DateCreated\", \"DateUpdated desc\", \"DateCreated desc\"
     * @param {Number} [timesheetUserID] Filter to the projects that the supplied UserID can add timesheets to
     * @param {Boolean} [includeArchived] Include Archived Projects in the results
     * @param {module:api/ProjectApi~projectGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectList}
     */
    projectGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'UpdatedAfter': opts['updatedAfter'],
        'pageSize': opts['pageSize'],
        'pageNumber': opts['pageNumber'],
        'Sort': opts['sort'],
        'TimesheetUserID': opts['timesheetUserID'],
        'includeArchived': opts['includeArchived']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = ProjectList;
      return this.apiClient.callApi(
        '/api/Project', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectGetByID operation.
     * @callback module:api/ProjectApi~projectGetByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets Project by Project ID
     * @param {Number} id Project ID number
     * @param {module:api/ProjectApi~projectGetByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectDetails}
     */
    projectGetByID(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling projectGetByID");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = ProjectDetails;
      return this.apiClient.callApi(
        '/api/Project/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectLookup operation.
     * @callback module:api/ProjectApi~projectLookupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectDropdownList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets minimal list of active Projects for the current user
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] Number of items per page (max 1000)
     * @param {Number} [pageNumber] Page to display. Starts from 1.
     * @param {Number} [timesheetUserID] Optionally Filter to the projects that the supplied UserID can add timesheets to
     * @param {Number} [companyIDFK] Optionally Filter for a specific Company ID
     * @param {String} [search] Search string to match against Project title and Customer name
     * @param {module:api/ProjectApi~projectLookupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectDropdownList}
     */
    projectLookup(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'pageNumber': opts['pageNumber'],
        'TimesheetUserID': opts['timesheetUserID'],
        'CompanyIDFK': opts['companyIDFK'],
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = ProjectDropdownList;
      return this.apiClient.callApi(
        '/api/Project/Lookup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectPost operation.
     * @callback module:api/ProjectApi~projectPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Project
     * @param {module:model/NewProjectModel} model 
     * @param {module:api/ProjectApi~projectPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectDetails}
     */
    projectPost(model, callback) {
      let postBody = model;
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling projectPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = ProjectDetails;
      return this.apiClient.callApi(
        '/api/Project', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectPut operation.
     * @callback module:api/ProjectApi~projectPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Project
     * Update a Project
     * @param {module:model/UpdateProjectModel} model 
     * @param {module:api/ProjectApi~projectPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectDetails}
     */
    projectPut(model, callback) {
      let postBody = model;
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling projectPut");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = ProjectDetails;
      return this.apiClient.callApi(
        '/api/Project', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
