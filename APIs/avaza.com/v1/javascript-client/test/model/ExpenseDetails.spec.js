/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AvazaApiDocumentation);
  }
}(this, function(expect, AvazaApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AvazaApiDocumentation.ExpenseDetails();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ExpenseDetails', function() {
    it('should create an instance of ExpenseDetails', function() {
      // uncomment below and update the code to test ExpenseDetails
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be.a(AvazaApiDocumentation.ExpenseDetails);
    });

    it('should have the property amount (base name: "Amount")', function() {
      // uncomment below and update the code to test the property amount
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property attachmentPreviewURL (base name: "AttachmentPreviewURL")', function() {
      // uncomment below and update the code to test the property attachmentPreviewURL
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property attachmentURL (base name: "AttachmentURL")', function() {
      // uncomment below and update the code to test the property attachmentURL
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property chargeableStatusCode (base name: "ChargeableStatusCode")', function() {
      // uncomment below and update the code to test the property chargeableStatusCode
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property currencyCode (base name: "CurrencyCode")', function() {
      // uncomment below and update the code to test the property currencyCode
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property customerIDFK (base name: "CustomerIDFK")', function() {
      // uncomment below and update the code to test the property customerIDFK
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property customerName (base name: "CustomerName")', function() {
      // uncomment below and update the code to test the property customerName
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property dateCreated (base name: "DateCreated")', function() {
      // uncomment below and update the code to test the property dateCreated
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property dateUpdated (base name: "DateUpdated")', function() {
      // uncomment below and update the code to test the property dateUpdated
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property email (base name: "Email")', function() {
      // uncomment below and update the code to test the property email
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property exchangeRate (base name: "ExchangeRate")', function() {
      // uncomment below and update the code to test the property exchangeRate
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property expenseApprovalStatusCode (base name: "ExpenseApprovalStatusCode")', function() {
      // uncomment below and update the code to test the property expenseApprovalStatusCode
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property expenseCategoryHasUnitPrice (base name: "ExpenseCategoryHasUnitPrice")', function() {
      // uncomment below and update the code to test the property expenseCategoryHasUnitPrice
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property expenseCategoryIDFK (base name: "ExpenseCategoryIDFK")', function() {
      // uncomment below and update the code to test the property expenseCategoryIDFK
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property expenseCategoryName (base name: "ExpenseCategoryName")', function() {
      // uncomment below and update the code to test the property expenseCategoryName
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property expenseCategoryUnitName (base name: "ExpenseCategoryUnitName")', function() {
      // uncomment below and update the code to test the property expenseCategoryUnitName
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property expenseCategoryUnitPrice (base name: "ExpenseCategoryUnitPrice")', function() {
      // uncomment below and update the code to test the property expenseCategoryUnitPrice
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property expenseDate (base name: "ExpenseDate")', function() {
      // uncomment below and update the code to test the property expenseDate
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property expenseID (base name: "ExpenseID")', function() {
      // uncomment below and update the code to test the property expenseID
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property expensePaymentMethodIDFK (base name: "ExpensePaymentMethodIDFK")', function() {
      // uncomment below and update the code to test the property expensePaymentMethodIDFK
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property expensePaymentMethodName (base name: "ExpensePaymentMethodName")', function() {
      // uncomment below and update the code to test the property expensePaymentMethodName
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property expenseReimbursementIDFK (base name: "ExpenseReimbursementIDFK")', function() {
      // uncomment below and update the code to test the property expenseReimbursementIDFK
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property expenseReimbursementStatusCode (base name: "ExpenseReimbursementStatusCode")', function() {
      // uncomment below and update the code to test the property expenseReimbursementStatusCode
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property expenseReportIDFK (base name: "ExpenseReportIDFK")', function() {
      // uncomment below and update the code to test the property expenseReportIDFK
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property expenseReportName (base name: "ExpenseReportName")', function() {
      // uncomment below and update the code to test the property expenseReportName
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property fileAttachmentIDFK (base name: "FileAttachmentIDFK")', function() {
      // uncomment below and update the code to test the property fileAttachmentIDFK
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property firstname (base name: "Firstname")', function() {
      // uncomment below and update the code to test the property firstname
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property lastname (base name: "Lastname")', function() {
      // uncomment below and update the code to test the property lastname
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property merchant (base name: "Merchant")', function() {
      // uncomment below and update the code to test the property merchant
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property merchantTaxNumber (base name: "MerchantTaxNumber")', function() {
      // uncomment below and update the code to test the property merchantTaxNumber
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property notes (base name: "Notes")', function() {
      // uncomment below and update the code to test the property notes
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property projectCode (base name: "ProjectCode")', function() {
      // uncomment below and update the code to test the property projectCode
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property projectIDFK (base name: "ProjectIDFK")', function() {
      // uncomment below and update the code to test the property projectIDFK
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property projectTitle (base name: "ProjectTitle")', function() {
      // uncomment below and update the code to test the property projectTitle
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property quantity (base name: "Quantity")', function() {
      // uncomment below and update the code to test the property quantity
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property taskIDFK (base name: "TaskIDFK")', function() {
      // uncomment below and update the code to test the property taskIDFK
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property taskTitle (base name: "TaskTitle")', function() {
      // uncomment below and update the code to test the property taskTitle
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property taxAmount (base name: "TaxAmount")', function() {
      // uncomment below and update the code to test the property taxAmount
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property taxIDFK (base name: "TaxIDFK")', function() {
      // uncomment below and update the code to test the property taxIDFK
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property taxName (base name: "TaxName")', function() {
      // uncomment below and update the code to test the property taxName
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property transactionTaxConfigCode (base name: "TransactionTaxConfigCode")', function() {
      // uncomment below and update the code to test the property transactionTaxConfigCode
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property transactionTaxConfigName (base name: "TransactionTaxConfigName")', function() {
      // uncomment below and update the code to test the property transactionTaxConfigName
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property userIDFK (base name: "UserIDFK")', function() {
      // uncomment below and update the code to test the property userIDFK
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property isChargeable (base name: "isChargeable")', function() {
      // uncomment below and update the code to test the property isChargeable
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property isOfficialExchangeRate (base name: "isOfficialExchangeRate")', function() {
      // uncomment below and update the code to test the property isOfficialExchangeRate
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

    it('should have the property isReimbursable (base name: "isReimbursable")', function() {
      // uncomment below and update the code to test the property isReimbursable
      //var instance = new AvazaApiDocumentation.ExpenseDetails();
      //expect(instance).to.be();
    });

  });

}));
