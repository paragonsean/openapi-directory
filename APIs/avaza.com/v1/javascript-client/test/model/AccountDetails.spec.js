/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AvazaApiDocumentation);
  }
}(this, function(expect, AvazaApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AvazaApiDocumentation.AccountDetails();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AccountDetails', function() {
    it('should create an instance of AccountDetails', function() {
      // uncomment below and update the code to test AccountDetails
      //var instance = new AvazaApiDocumentation.AccountDetails();
      //expect(instance).to.be.a(AvazaApiDocumentation.AccountDetails);
    });

    it('should have the property accountEmail (base name: "AccountEmail")', function() {
      // uncomment below and update the code to test the property accountEmail
      //var instance = new AvazaApiDocumentation.AccountDetails();
      //expect(instance).to.be();
    });

    it('should have the property accountID (base name: "AccountID")', function() {
      // uncomment below and update the code to test the property accountID
      //var instance = new AvazaApiDocumentation.AccountDetails();
      //expect(instance).to.be();
    });

    it('should have the property allowHidingCompletedTasksOnTimesheet (base name: "AllowHidingCompletedTasksOnTimesheet")', function() {
      // uncomment below and update the code to test the property allowHidingCompletedTasksOnTimesheet
      //var instance = new AvazaApiDocumentation.AccountDetails();
      //expect(instance).to.be();
    });

    it('should have the property brandPrimaryColor (base name: "BrandPrimaryColor")', function() {
      // uncomment below and update the code to test the property brandPrimaryColor
      //var instance = new AvazaApiDocumentation.AccountDetails();
      //expect(instance).to.be();
    });

    it('should have the property brandPrimaryColorLuminance (base name: "BrandPrimaryColorLuminance")', function() {
      // uncomment below and update the code to test the property brandPrimaryColorLuminance
      //var instance = new AvazaApiDocumentation.AccountDetails();
      //expect(instance).to.be();
    });

    it('should have the property companyName (base name: "CompanyName")', function() {
      // uncomment below and update the code to test the property companyName
      //var instance = new AvazaApiDocumentation.AccountDetails();
      //expect(instance).to.be();
    });

    it('should have the property currentServerTimeISO (base name: "CurrentServerTimeISO")', function() {
      // uncomment below and update the code to test the property currentServerTimeISO
      //var instance = new AvazaApiDocumentation.AccountDetails();
      //expect(instance).to.be();
    });

    it('should have the property defaultCurrencyCode (base name: "DefaultCurrencyCode")', function() {
      // uncomment below and update the code to test the property defaultCurrencyCode
      //var instance = new AvazaApiDocumentation.AccountDetails();
      //expect(instance).to.be();
    });

    it('should have the property expenseApprovalRequired (base name: "ExpenseApprovalRequired")', function() {
      // uncomment below and update the code to test the property expenseApprovalRequired
      //var instance = new AvazaApiDocumentation.AccountDetails();
      //expect(instance).to.be();
    });

    it('should have the property lockApprovedExpenses (base name: "LockApprovedExpenses")', function() {
      // uncomment below and update the code to test the property lockApprovedExpenses
      //var instance = new AvazaApiDocumentation.AccountDetails();
      //expect(instance).to.be();
    });

    it('should have the property lockApprovedTimesheets (base name: "LockApprovedTimesheets")', function() {
      // uncomment below and update the code to test the property lockApprovedTimesheets
      //var instance = new AvazaApiDocumentation.AccountDetails();
      //expect(instance).to.be();
    });

    it('should have the property SC (base name: "SC")', function() {
      // uncomment below and update the code to test the property SC
      //var instance = new AvazaApiDocumentation.AccountDetails();
      //expect(instance).to.be();
    });

    it('should have the property subdomain (base name: "Subdomain")', function() {
      // uncomment below and update the code to test the property subdomain
      //var instance = new AvazaApiDocumentation.AccountDetails();
      //expect(instance).to.be();
    });

    it('should have the property timesheetDayOfWeek (base name: "TimesheetDayOfWeek")', function() {
      // uncomment below and update the code to test the property timesheetDayOfWeek
      //var instance = new AvazaApiDocumentation.AccountDetails();
      //expect(instance).to.be();
    });

    it('should have the property timesheetDisplayFormatCode (base name: "TimesheetDisplayFormatCode")', function() {
      // uncomment below and update the code to test the property timesheetDisplayFormatCode
      //var instance = new AvazaApiDocumentation.AccountDetails();
      //expect(instance).to.be();
    });

    it('should have the property weeklyTimesheetReminder (base name: "WeeklyTimesheetReminder")', function() {
      // uncomment below and update the code to test the property weeklyTimesheetReminder
      //var instance = new AvazaApiDocumentation.AccountDetails();
      //expect(instance).to.be();
    });

    it('should have the property has24HourTimesheetFormat (base name: "has24HourTimesheetFormat")', function() {
      // uncomment below and update the code to test the property has24HourTimesheetFormat
      //var instance = new AvazaApiDocumentation.AccountDetails();
      //expect(instance).to.be();
    });

    it('should have the property hasStartEndTimesheets (base name: "hasStartEndTimesheets")', function() {
      // uncomment below and update the code to test the property hasStartEndTimesheets
      //var instance = new AvazaApiDocumentation.AccountDetails();
      //expect(instance).to.be();
    });

  });

}));
