/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AvazaApiDocumentation);
  }
}(this, function(expect, AvazaApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AvazaApiDocumentation.TimesheetListDetails();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TimesheetListDetails', function() {
    it('should create an instance of TimesheetListDetails', function() {
      // uncomment below and update the code to test TimesheetListDetails
      //var instance = new AvazaApiDocumentation.TimesheetListDetails();
      //expect(instance).to.be.a(AvazaApiDocumentation.TimesheetListDetails);
    });

    it('should have the property approvedBy (base name: "ApprovedBy")', function() {
      // uncomment below and update the code to test the property approvedBy
      //var instance = new AvazaApiDocumentation.TimesheetListDetails();
      //expect(instance).to.be();
    });

    it('should have the property categoryName (base name: "CategoryName")', function() {
      // uncomment below and update the code to test the property categoryName
      //var instance = new AvazaApiDocumentation.TimesheetListDetails();
      //expect(instance).to.be();
    });

    it('should have the property customMetadata (base name: "CustomMetadata")', function() {
      // uncomment below and update the code to test the property customMetadata
      //var instance = new AvazaApiDocumentation.TimesheetListDetails();
      //expect(instance).to.be();
    });

    it('should have the property customerIDFK (base name: "CustomerIDFK")', function() {
      // uncomment below and update the code to test the property customerIDFK
      //var instance = new AvazaApiDocumentation.TimesheetListDetails();
      //expect(instance).to.be();
    });

    it('should have the property customerName (base name: "CustomerName")', function() {
      // uncomment below and update the code to test the property customerName
      //var instance = new AvazaApiDocumentation.TimesheetListDetails();
      //expect(instance).to.be();
    });

    it('should have the property dateApproved (base name: "DateApproved")', function() {
      // uncomment below and update the code to test the property dateApproved
      //var instance = new AvazaApiDocumentation.TimesheetListDetails();
      //expect(instance).to.be();
    });

    it('should have the property dateCreated (base name: "DateCreated")', function() {
      // uncomment below and update the code to test the property dateCreated
      //var instance = new AvazaApiDocumentation.TimesheetListDetails();
      //expect(instance).to.be();
    });

    it('should have the property dateUpdated (base name: "DateUpdated")', function() {
      // uncomment below and update the code to test the property dateUpdated
      //var instance = new AvazaApiDocumentation.TimesheetListDetails();
      //expect(instance).to.be();
    });

    it('should have the property duration (base name: "Duration")', function() {
      // uncomment below and update the code to test the property duration
      //var instance = new AvazaApiDocumentation.TimesheetListDetails();
      //expect(instance).to.be();
    });

    it('should have the property email (base name: "Email")', function() {
      // uncomment below and update the code to test the property email
      //var instance = new AvazaApiDocumentation.TimesheetListDetails();
      //expect(instance).to.be();
    });

    it('should have the property endTimeLocal (base name: "EndTimeLocal")', function() {
      // uncomment below and update the code to test the property endTimeLocal
      //var instance = new AvazaApiDocumentation.TimesheetListDetails();
      //expect(instance).to.be();
    });

    it('should have the property endTimeUTC (base name: "EndTimeUTC")', function() {
      // uncomment below and update the code to test the property endTimeUTC
      //var instance = new AvazaApiDocumentation.TimesheetListDetails();
      //expect(instance).to.be();
    });

    it('should have the property entryDate (base name: "EntryDate")', function() {
      // uncomment below and update the code to test the property entryDate
      //var instance = new AvazaApiDocumentation.TimesheetListDetails();
      //expect(instance).to.be();
    });

    it('should have the property firstname (base name: "Firstname")', function() {
      // uncomment below and update the code to test the property firstname
      //var instance = new AvazaApiDocumentation.TimesheetListDetails();
      //expect(instance).to.be();
    });

    it('should have the property hasTimer (base name: "HasTimer")', function() {
      // uncomment below and update the code to test the property hasTimer
      //var instance = new AvazaApiDocumentation.TimesheetListDetails();
      //expect(instance).to.be();
    });

    it('should have the property invoiceIDFK (base name: "InvoiceIDFK")', function() {
      // uncomment below and update the code to test the property invoiceIDFK
      //var instance = new AvazaApiDocumentation.TimesheetListDetails();
      //expect(instance).to.be();
    });

    it('should have the property invoiceLineItemIDFK (base name: "InvoiceLineItemIDFK")', function() {
      // uncomment below and update the code to test the property invoiceLineItemIDFK
      //var instance = new AvazaApiDocumentation.TimesheetListDetails();
      //expect(instance).to.be();
    });

    it('should have the property lastname (base name: "Lastname")', function() {
      // uncomment below and update the code to test the property lastname
      //var instance = new AvazaApiDocumentation.TimesheetListDetails();
      //expect(instance).to.be();
    });

    it('should have the property notes (base name: "Notes")', function() {
      // uncomment below and update the code to test the property notes
      //var instance = new AvazaApiDocumentation.TimesheetListDetails();
      //expect(instance).to.be();
    });

    it('should have the property projectCode (base name: "ProjectCode")', function() {
      // uncomment below and update the code to test the property projectCode
      //var instance = new AvazaApiDocumentation.TimesheetListDetails();
      //expect(instance).to.be();
    });

    it('should have the property projectIDFK (base name: "ProjectIDFK")', function() {
      // uncomment below and update the code to test the property projectIDFK
      //var instance = new AvazaApiDocumentation.TimesheetListDetails();
      //expect(instance).to.be();
    });

    it('should have the property projectTitle (base name: "ProjectTitle")', function() {
      // uncomment below and update the code to test the property projectTitle
      //var instance = new AvazaApiDocumentation.TimesheetListDetails();
      //expect(instance).to.be();
    });

    it('should have the property startTimeLocal (base name: "StartTimeLocal")', function() {
      // uncomment below and update the code to test the property startTimeLocal
      //var instance = new AvazaApiDocumentation.TimesheetListDetails();
      //expect(instance).to.be();
    });

    it('should have the property startTimeUTC (base name: "StartTimeUTC")', function() {
      // uncomment below and update the code to test the property startTimeUTC
      //var instance = new AvazaApiDocumentation.TimesheetListDetails();
      //expect(instance).to.be();
    });

    it('should have the property taskIDFK (base name: "TaskIDFK")', function() {
      // uncomment below and update the code to test the property taskIDFK
      //var instance = new AvazaApiDocumentation.TimesheetListDetails();
      //expect(instance).to.be();
    });

    it('should have the property taskTitle (base name: "TaskTitle")', function() {
      // uncomment below and update the code to test the property taskTitle
      //var instance = new AvazaApiDocumentation.TimesheetListDetails();
      //expect(instance).to.be();
    });

    it('should have the property timerStartedAtUTC (base name: "TimerStartedAtUTC")', function() {
      // uncomment below and update the code to test the property timerStartedAtUTC
      //var instance = new AvazaApiDocumentation.TimesheetListDetails();
      //expect(instance).to.be();
    });

    it('should have the property timesheetCategoryIDFK (base name: "TimesheetCategoryIDFK")', function() {
      // uncomment below and update the code to test the property timesheetCategoryIDFK
      //var instance = new AvazaApiDocumentation.TimesheetListDetails();
      //expect(instance).to.be();
    });

    it('should have the property timesheetEntryApprovalStatusCode (base name: "TimesheetEntryApprovalStatusCode")', function() {
      // uncomment below and update the code to test the property timesheetEntryApprovalStatusCode
      //var instance = new AvazaApiDocumentation.TimesheetListDetails();
      //expect(instance).to.be();
    });

    it('should have the property timesheetEntryID (base name: "TimesheetEntryID")', function() {
      // uncomment below and update the code to test the property timesheetEntryID
      //var instance = new AvazaApiDocumentation.TimesheetListDetails();
      //expect(instance).to.be();
    });

    it('should have the property timesheetUserTimeZone (base name: "TimesheetUserTimeZone")', function() {
      // uncomment below and update the code to test the property timesheetUserTimeZone
      //var instance = new AvazaApiDocumentation.TimesheetListDetails();
      //expect(instance).to.be();
    });

    it('should have the property userIDFK (base name: "UserIDFK")', function() {
      // uncomment below and update the code to test the property userIDFK
      //var instance = new AvazaApiDocumentation.TimesheetListDetails();
      //expect(instance).to.be();
    });

    it('should have the property isBillable (base name: "isBillable")', function() {
      // uncomment below and update the code to test the property isBillable
      //var instance = new AvazaApiDocumentation.TimesheetListDetails();
      //expect(instance).to.be();
    });

    it('should have the property isInvoiced (base name: "isInvoiced")', function() {
      // uncomment below and update the code to test the property isInvoiced
      //var instance = new AvazaApiDocumentation.TimesheetListDetails();
      //expect(instance).to.be();
    });

  });

}));
