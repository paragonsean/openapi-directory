/**
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AvazaApiDocumentation);
  }
}(this, function(expect, AvazaApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AvazaApiDocumentation.ProjectDetails();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProjectDetails', function() {
    it('should create an instance of ProjectDetails', function() {
      // uncomment below and update the code to test ProjectDetails
      //var instance = new AvazaApiDocumentation.ProjectDetails();
      //expect(instance).to.be.a(AvazaApiDocumentation.ProjectDetails);
    });

    it('should have the property budgetAmount (base name: "BudgetAmount")', function() {
      // uncomment below and update the code to test the property budgetAmount
      //var instance = new AvazaApiDocumentation.ProjectDetails();
      //expect(instance).to.be();
    });

    it('should have the property budgetHours (base name: "BudgetHours")', function() {
      // uncomment below and update the code to test the property budgetHours
      //var instance = new AvazaApiDocumentation.ProjectDetails();
      //expect(instance).to.be();
    });

    it('should have the property companyIDFK (base name: "CompanyIDFK")', function() {
      // uncomment below and update the code to test the property companyIDFK
      //var instance = new AvazaApiDocumentation.ProjectDetails();
      //expect(instance).to.be();
    });

    it('should have the property companyName (base name: "CompanyName")', function() {
      // uncomment below and update the code to test the property companyName
      //var instance = new AvazaApiDocumentation.ProjectDetails();
      //expect(instance).to.be();
    });

    it('should have the property dateCreated (base name: "DateCreated")', function() {
      // uncomment below and update the code to test the property dateCreated
      //var instance = new AvazaApiDocumentation.ProjectDetails();
      //expect(instance).to.be();
    });

    it('should have the property dateUpdated (base name: "DateUpdated")', function() {
      // uncomment below and update the code to test the property dateUpdated
      //var instance = new AvazaApiDocumentation.ProjectDetails();
      //expect(instance).to.be();
    });

    it('should have the property defaultAccountTaskTypeIDFK (base name: "DefaultAccountTaskTypeIDFK")', function() {
      // uncomment below and update the code to test the property defaultAccountTaskTypeIDFK
      //var instance = new AvazaApiDocumentation.ProjectDetails();
      //expect(instance).to.be();
    });

    it('should have the property defaultAccountTaskTypeName (base name: "DefaultAccountTaskTypeName")', function() {
      // uncomment below and update the code to test the property defaultAccountTaskTypeName
      //var instance = new AvazaApiDocumentation.ProjectDetails();
      //expect(instance).to.be();
    });

    it('should have the property endDate (base name: "EndDate")', function() {
      // uncomment below and update the code to test the property endDate
      //var instance = new AvazaApiDocumentation.ProjectDetails();
      //expect(instance).to.be();
    });

    it('should have the property members (base name: "Members")', function() {
      // uncomment below and update the code to test the property members
      //var instance = new AvazaApiDocumentation.ProjectDetails();
      //expect(instance).to.be();
    });

    it('should have the property notes (base name: "Notes")', function() {
      // uncomment below and update the code to test the property notes
      //var instance = new AvazaApiDocumentation.ProjectDetails();
      //expect(instance).to.be();
    });

    it('should have the property projectBillableTypeCode (base name: "ProjectBillableTypeCode")', function() {
      // uncomment below and update the code to test the property projectBillableTypeCode
      //var instance = new AvazaApiDocumentation.ProjectDetails();
      //expect(instance).to.be();
    });

    it('should have the property projectBudgetTypeCode (base name: "ProjectBudgetTypeCode")', function() {
      // uncomment below and update the code to test the property projectBudgetTypeCode
      //var instance = new AvazaApiDocumentation.ProjectDetails();
      //expect(instance).to.be();
    });

    it('should have the property projectCategoryColor (base name: "ProjectCategoryColor")', function() {
      // uncomment below and update the code to test the property projectCategoryColor
      //var instance = new AvazaApiDocumentation.ProjectDetails();
      //expect(instance).to.be();
    });

    it('should have the property projectCategoryIDFK (base name: "ProjectCategoryIDFK")', function() {
      // uncomment below and update the code to test the property projectCategoryIDFK
      //var instance = new AvazaApiDocumentation.ProjectDetails();
      //expect(instance).to.be();
    });

    it('should have the property projectCategoryName (base name: "ProjectCategoryName")', function() {
      // uncomment below and update the code to test the property projectCategoryName
      //var instance = new AvazaApiDocumentation.ProjectDetails();
      //expect(instance).to.be();
    });

    it('should have the property projectCode (base name: "ProjectCode")', function() {
      // uncomment below and update the code to test the property projectCode
      //var instance = new AvazaApiDocumentation.ProjectDetails();
      //expect(instance).to.be();
    });

    it('should have the property projectHourlyRate (base name: "ProjectHourlyRate")', function() {
      // uncomment below and update the code to test the property projectHourlyRate
      //var instance = new AvazaApiDocumentation.ProjectDetails();
      //expect(instance).to.be();
    });

    it('should have the property projectID (base name: "ProjectID")', function() {
      // uncomment below and update the code to test the property projectID
      //var instance = new AvazaApiDocumentation.ProjectDetails();
      //expect(instance).to.be();
    });

    it('should have the property projectOwnerUserIDFK (base name: "ProjectOwnerUserIDFK")', function() {
      // uncomment below and update the code to test the property projectOwnerUserIDFK
      //var instance = new AvazaApiDocumentation.ProjectDetails();
      //expect(instance).to.be();
    });

    it('should have the property projectStatusCode (base name: "ProjectStatusCode")', function() {
      // uncomment below and update the code to test the property projectStatusCode
      //var instance = new AvazaApiDocumentation.ProjectDetails();
      //expect(instance).to.be();
    });

    it('should have the property projectTags (base name: "ProjectTags")', function() {
      // uncomment below and update the code to test the property projectTags
      //var instance = new AvazaApiDocumentation.ProjectDetails();
      //expect(instance).to.be();
    });

    it('should have the property sections (base name: "Sections")', function() {
      // uncomment below and update the code to test the property sections
      //var instance = new AvazaApiDocumentation.ProjectDetails();
      //expect(instance).to.be();
    });

    it('should have the property startDate (base name: "StartDate")', function() {
      // uncomment below and update the code to test the property startDate
      //var instance = new AvazaApiDocumentation.ProjectDetails();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "Title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new AvazaApiDocumentation.ProjectDetails();
      //expect(instance).to.be();
    });

    it('should have the property isArchived (base name: "isArchived")', function() {
      // uncomment below and update the code to test the property isArchived
      //var instance = new AvazaApiDocumentation.ProjectDetails();
      //expect(instance).to.be();
    });

    it('should have the property isTaskRequiredOnTimesheet (base name: "isTaskRequiredOnTimesheet")', function() {
      // uncomment below and update the code to test the property isTaskRequiredOnTimesheet
      //var instance = new AvazaApiDocumentation.ProjectDetails();
      //expect(instance).to.be();
    });

  });

}));
