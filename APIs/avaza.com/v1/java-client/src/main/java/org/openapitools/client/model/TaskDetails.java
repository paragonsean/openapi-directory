/*
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AssignedToUser;
import org.openapitools.client.model.TagItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TaskDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:56.431364-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TaskDetails {
  public static final String SERIALIZED_NAME_ACCOUNT_TASK_TYPE_I_D_F_K = "AccountTaskTypeIDFK";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TASK_TYPE_I_D_F_K)
  private Integer accountTaskTypeIDFK;

  public static final String SERIALIZED_NAME_ACTUAL_TIME = "ActualTime";
  @SerializedName(SERIALIZED_NAME_ACTUAL_TIME)
  private Double actualTime;

  public static final String SERIALIZED_NAME_ASSIGNED_TO_USERS = "AssignedToUsers";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_TO_USERS)
  private List<AssignedToUser> assignedToUsers = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE_COMPLETED = "DateCompleted";
  @SerializedName(SERIALIZED_NAME_DATE_COMPLETED)
  private OffsetDateTime dateCompleted;

  public static final String SERIALIZED_NAME_DATE_CREATED = "DateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_DUE = "DateDue";
  @SerializedName(SERIALIZED_NAME_DATE_DUE)
  private OffsetDateTime dateDue;

  public static final String SERIALIZED_NAME_DATE_START = "DateStart";
  @SerializedName(SERIALIZED_NAME_DATE_START)
  private OffsetDateTime dateStart;

  public static final String SERIALIZED_NAME_DATE_UPDATED = "DateUpdated";
  @SerializedName(SERIALIZED_NAME_DATE_UPDATED)
  private OffsetDateTime dateUpdated;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DESCRIPTION_NO_H_T_M_L = "DescriptionNoHTML";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION_NO_H_T_M_L)
  private String descriptionNoHTML;

  public static final String SERIALIZED_NAME_ESTIMATED_EFFORT = "EstimatedEffort";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_EFFORT)
  private Double estimatedEffort;

  public static final String SERIALIZED_NAME_PERCENT_COMPLETE = "PercentComplete";
  @SerializedName(SERIALIZED_NAME_PERCENT_COMPLETE)
  private Double percentComplete;

  public static final String SERIALIZED_NAME_PROJECT_CODE = "ProjectCode";
  @SerializedName(SERIALIZED_NAME_PROJECT_CODE)
  private String projectCode;

  public static final String SERIALIZED_NAME_PROJECT_I_D_F_K = "ProjectIDFK";
  @SerializedName(SERIALIZED_NAME_PROJECT_I_D_F_K)
  private Integer projectIDFK;

  public static final String SERIALIZED_NAME_PROJECT_TITLE = "ProjectTitle";
  @SerializedName(SERIALIZED_NAME_PROJECT_TITLE)
  private String projectTitle;

  public static final String SERIALIZED_NAME_SECTION_I_D_F_K = "SectionIDFK";
  @SerializedName(SERIALIZED_NAME_SECTION_I_D_F_K)
  private Integer sectionIDFK;

  public static final String SERIALIZED_NAME_SECTION_TITLE = "SectionTitle";
  @SerializedName(SERIALIZED_NAME_SECTION_TITLE)
  private String sectionTitle;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<TagItem> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TASK_I_D = "TaskID";
  @SerializedName(SERIALIZED_NAME_TASK_I_D)
  private Integer taskID;

  public static final String SERIALIZED_NAME_TASK_PRIORITY_CODE = "TaskPriorityCode";
  @SerializedName(SERIALIZED_NAME_TASK_PRIORITY_CODE)
  private String taskPriorityCode;

  public static final String SERIALIZED_NAME_TASK_PRIORITY_NAME = "TaskPriorityName";
  @SerializedName(SERIALIZED_NAME_TASK_PRIORITY_NAME)
  private String taskPriorityName;

  public static final String SERIALIZED_NAME_TASK_STATUS_CODE = "TaskStatusCode";
  @SerializedName(SERIALIZED_NAME_TASK_STATUS_CODE)
  private String taskStatusCode;

  public static final String SERIALIZED_NAME_TASK_STATUS_NAME = "TaskStatusName";
  @SerializedName(SERIALIZED_NAME_TASK_STATUS_NAME)
  private String taskStatusName;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_IS_COMPLETE_STATUS = "isCompleteStatus";
  @SerializedName(SERIALIZED_NAME_IS_COMPLETE_STATUS)
  private Boolean isCompleteStatus;

  public TaskDetails() {
  }

  public TaskDetails accountTaskTypeIDFK(Integer accountTaskTypeIDFK) {
    this.accountTaskTypeIDFK = accountTaskTypeIDFK;
    return this;
  }

  /**
   * Get accountTaskTypeIDFK
   * @return accountTaskTypeIDFK
   */
  @javax.annotation.Nullable
  public Integer getAccountTaskTypeIDFK() {
    return accountTaskTypeIDFK;
  }

  public void setAccountTaskTypeIDFK(Integer accountTaskTypeIDFK) {
    this.accountTaskTypeIDFK = accountTaskTypeIDFK;
  }


  public TaskDetails actualTime(Double actualTime) {
    this.actualTime = actualTime;
    return this;
  }

  /**
   * Get actualTime
   * @return actualTime
   */
  @javax.annotation.Nullable
  public Double getActualTime() {
    return actualTime;
  }

  public void setActualTime(Double actualTime) {
    this.actualTime = actualTime;
  }


  public TaskDetails assignedToUsers(List<AssignedToUser> assignedToUsers) {
    this.assignedToUsers = assignedToUsers;
    return this;
  }

  public TaskDetails addAssignedToUsersItem(AssignedToUser assignedToUsersItem) {
    if (this.assignedToUsers == null) {
      this.assignedToUsers = new ArrayList<>();
    }
    this.assignedToUsers.add(assignedToUsersItem);
    return this;
  }

  /**
   * Get assignedToUsers
   * @return assignedToUsers
   */
  @javax.annotation.Nullable
  public List<AssignedToUser> getAssignedToUsers() {
    return assignedToUsers;
  }

  public void setAssignedToUsers(List<AssignedToUser> assignedToUsers) {
    this.assignedToUsers = assignedToUsers;
  }


  public TaskDetails dateCompleted(OffsetDateTime dateCompleted) {
    this.dateCompleted = dateCompleted;
    return this;
  }

  /**
   * Get dateCompleted
   * @return dateCompleted
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCompleted() {
    return dateCompleted;
  }

  public void setDateCompleted(OffsetDateTime dateCompleted) {
    this.dateCompleted = dateCompleted;
  }


  public TaskDetails dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Get dateCreated
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public TaskDetails dateDue(OffsetDateTime dateDue) {
    this.dateDue = dateDue;
    return this;
  }

  /**
   * Get dateDue
   * @return dateDue
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateDue() {
    return dateDue;
  }

  public void setDateDue(OffsetDateTime dateDue) {
    this.dateDue = dateDue;
  }


  public TaskDetails dateStart(OffsetDateTime dateStart) {
    this.dateStart = dateStart;
    return this;
  }

  /**
   * Get dateStart
   * @return dateStart
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateStart() {
    return dateStart;
  }

  public void setDateStart(OffsetDateTime dateStart) {
    this.dateStart = dateStart;
  }


  public TaskDetails dateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
    return this;
  }

  /**
   * Get dateUpdated
   * @return dateUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateUpdated() {
    return dateUpdated;
  }

  public void setDateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
  }


  public TaskDetails description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public TaskDetails descriptionNoHTML(String descriptionNoHTML) {
    this.descriptionNoHTML = descriptionNoHTML;
    return this;
  }

  /**
   * Get descriptionNoHTML
   * @return descriptionNoHTML
   */
  @javax.annotation.Nullable
  public String getDescriptionNoHTML() {
    return descriptionNoHTML;
  }

  public void setDescriptionNoHTML(String descriptionNoHTML) {
    this.descriptionNoHTML = descriptionNoHTML;
  }


  public TaskDetails estimatedEffort(Double estimatedEffort) {
    this.estimatedEffort = estimatedEffort;
    return this;
  }

  /**
   * Get estimatedEffort
   * @return estimatedEffort
   */
  @javax.annotation.Nullable
  public Double getEstimatedEffort() {
    return estimatedEffort;
  }

  public void setEstimatedEffort(Double estimatedEffort) {
    this.estimatedEffort = estimatedEffort;
  }


  public TaskDetails percentComplete(Double percentComplete) {
    this.percentComplete = percentComplete;
    return this;
  }

  /**
   * Get percentComplete
   * @return percentComplete
   */
  @javax.annotation.Nullable
  public Double getPercentComplete() {
    return percentComplete;
  }

  public void setPercentComplete(Double percentComplete) {
    this.percentComplete = percentComplete;
  }


  public TaskDetails projectCode(String projectCode) {
    this.projectCode = projectCode;
    return this;
  }

  /**
   * Get projectCode
   * @return projectCode
   */
  @javax.annotation.Nullable
  public String getProjectCode() {
    return projectCode;
  }

  public void setProjectCode(String projectCode) {
    this.projectCode = projectCode;
  }


  public TaskDetails projectIDFK(Integer projectIDFK) {
    this.projectIDFK = projectIDFK;
    return this;
  }

  /**
   * Get projectIDFK
   * @return projectIDFK
   */
  @javax.annotation.Nullable
  public Integer getProjectIDFK() {
    return projectIDFK;
  }

  public void setProjectIDFK(Integer projectIDFK) {
    this.projectIDFK = projectIDFK;
  }


  public TaskDetails projectTitle(String projectTitle) {
    this.projectTitle = projectTitle;
    return this;
  }

  /**
   * Get projectTitle
   * @return projectTitle
   */
  @javax.annotation.Nullable
  public String getProjectTitle() {
    return projectTitle;
  }

  public void setProjectTitle(String projectTitle) {
    this.projectTitle = projectTitle;
  }


  public TaskDetails sectionIDFK(Integer sectionIDFK) {
    this.sectionIDFK = sectionIDFK;
    return this;
  }

  /**
   * Get sectionIDFK
   * @return sectionIDFK
   */
  @javax.annotation.Nullable
  public Integer getSectionIDFK() {
    return sectionIDFK;
  }

  public void setSectionIDFK(Integer sectionIDFK) {
    this.sectionIDFK = sectionIDFK;
  }


  public TaskDetails sectionTitle(String sectionTitle) {
    this.sectionTitle = sectionTitle;
    return this;
  }

  /**
   * Get sectionTitle
   * @return sectionTitle
   */
  @javax.annotation.Nullable
  public String getSectionTitle() {
    return sectionTitle;
  }

  public void setSectionTitle(String sectionTitle) {
    this.sectionTitle = sectionTitle;
  }


  public TaskDetails tags(List<TagItem> tags) {
    this.tags = tags;
    return this;
  }

  public TaskDetails addTagsItem(TagItem tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<TagItem> getTags() {
    return tags;
  }

  public void setTags(List<TagItem> tags) {
    this.tags = tags;
  }


  public TaskDetails taskID(Integer taskID) {
    this.taskID = taskID;
    return this;
  }

  /**
   * Get taskID
   * @return taskID
   */
  @javax.annotation.Nullable
  public Integer getTaskID() {
    return taskID;
  }

  public void setTaskID(Integer taskID) {
    this.taskID = taskID;
  }


  public TaskDetails taskPriorityCode(String taskPriorityCode) {
    this.taskPriorityCode = taskPriorityCode;
    return this;
  }

  /**
   * Get taskPriorityCode
   * @return taskPriorityCode
   */
  @javax.annotation.Nullable
  public String getTaskPriorityCode() {
    return taskPriorityCode;
  }

  public void setTaskPriorityCode(String taskPriorityCode) {
    this.taskPriorityCode = taskPriorityCode;
  }


  public TaskDetails taskPriorityName(String taskPriorityName) {
    this.taskPriorityName = taskPriorityName;
    return this;
  }

  /**
   * Get taskPriorityName
   * @return taskPriorityName
   */
  @javax.annotation.Nullable
  public String getTaskPriorityName() {
    return taskPriorityName;
  }

  public void setTaskPriorityName(String taskPriorityName) {
    this.taskPriorityName = taskPriorityName;
  }


  public TaskDetails taskStatusCode(String taskStatusCode) {
    this.taskStatusCode = taskStatusCode;
    return this;
  }

  /**
   * Get taskStatusCode
   * @return taskStatusCode
   */
  @javax.annotation.Nullable
  public String getTaskStatusCode() {
    return taskStatusCode;
  }

  public void setTaskStatusCode(String taskStatusCode) {
    this.taskStatusCode = taskStatusCode;
  }


  public TaskDetails taskStatusName(String taskStatusName) {
    this.taskStatusName = taskStatusName;
    return this;
  }

  /**
   * Get taskStatusName
   * @return taskStatusName
   */
  @javax.annotation.Nullable
  public String getTaskStatusName() {
    return taskStatusName;
  }

  public void setTaskStatusName(String taskStatusName) {
    this.taskStatusName = taskStatusName;
  }


  public TaskDetails title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public TaskDetails isCompleteStatus(Boolean isCompleteStatus) {
    this.isCompleteStatus = isCompleteStatus;
    return this;
  }

  /**
   * Get isCompleteStatus
   * @return isCompleteStatus
   */
  @javax.annotation.Nullable
  public Boolean getIsCompleteStatus() {
    return isCompleteStatus;
  }

  public void setIsCompleteStatus(Boolean isCompleteStatus) {
    this.isCompleteStatus = isCompleteStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskDetails taskDetails = (TaskDetails) o;
    return Objects.equals(this.accountTaskTypeIDFK, taskDetails.accountTaskTypeIDFK) &&
        Objects.equals(this.actualTime, taskDetails.actualTime) &&
        Objects.equals(this.assignedToUsers, taskDetails.assignedToUsers) &&
        Objects.equals(this.dateCompleted, taskDetails.dateCompleted) &&
        Objects.equals(this.dateCreated, taskDetails.dateCreated) &&
        Objects.equals(this.dateDue, taskDetails.dateDue) &&
        Objects.equals(this.dateStart, taskDetails.dateStart) &&
        Objects.equals(this.dateUpdated, taskDetails.dateUpdated) &&
        Objects.equals(this.description, taskDetails.description) &&
        Objects.equals(this.descriptionNoHTML, taskDetails.descriptionNoHTML) &&
        Objects.equals(this.estimatedEffort, taskDetails.estimatedEffort) &&
        Objects.equals(this.percentComplete, taskDetails.percentComplete) &&
        Objects.equals(this.projectCode, taskDetails.projectCode) &&
        Objects.equals(this.projectIDFK, taskDetails.projectIDFK) &&
        Objects.equals(this.projectTitle, taskDetails.projectTitle) &&
        Objects.equals(this.sectionIDFK, taskDetails.sectionIDFK) &&
        Objects.equals(this.sectionTitle, taskDetails.sectionTitle) &&
        Objects.equals(this.tags, taskDetails.tags) &&
        Objects.equals(this.taskID, taskDetails.taskID) &&
        Objects.equals(this.taskPriorityCode, taskDetails.taskPriorityCode) &&
        Objects.equals(this.taskPriorityName, taskDetails.taskPriorityName) &&
        Objects.equals(this.taskStatusCode, taskDetails.taskStatusCode) &&
        Objects.equals(this.taskStatusName, taskDetails.taskStatusName) &&
        Objects.equals(this.title, taskDetails.title) &&
        Objects.equals(this.isCompleteStatus, taskDetails.isCompleteStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountTaskTypeIDFK, actualTime, assignedToUsers, dateCompleted, dateCreated, dateDue, dateStart, dateUpdated, description, descriptionNoHTML, estimatedEffort, percentComplete, projectCode, projectIDFK, projectTitle, sectionIDFK, sectionTitle, tags, taskID, taskPriorityCode, taskPriorityName, taskStatusCode, taskStatusName, title, isCompleteStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskDetails {\n");
    sb.append("    accountTaskTypeIDFK: ").append(toIndentedString(accountTaskTypeIDFK)).append("\n");
    sb.append("    actualTime: ").append(toIndentedString(actualTime)).append("\n");
    sb.append("    assignedToUsers: ").append(toIndentedString(assignedToUsers)).append("\n");
    sb.append("    dateCompleted: ").append(toIndentedString(dateCompleted)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateDue: ").append(toIndentedString(dateDue)).append("\n");
    sb.append("    dateStart: ").append(toIndentedString(dateStart)).append("\n");
    sb.append("    dateUpdated: ").append(toIndentedString(dateUpdated)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    descriptionNoHTML: ").append(toIndentedString(descriptionNoHTML)).append("\n");
    sb.append("    estimatedEffort: ").append(toIndentedString(estimatedEffort)).append("\n");
    sb.append("    percentComplete: ").append(toIndentedString(percentComplete)).append("\n");
    sb.append("    projectCode: ").append(toIndentedString(projectCode)).append("\n");
    sb.append("    projectIDFK: ").append(toIndentedString(projectIDFK)).append("\n");
    sb.append("    projectTitle: ").append(toIndentedString(projectTitle)).append("\n");
    sb.append("    sectionIDFK: ").append(toIndentedString(sectionIDFK)).append("\n");
    sb.append("    sectionTitle: ").append(toIndentedString(sectionTitle)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    taskID: ").append(toIndentedString(taskID)).append("\n");
    sb.append("    taskPriorityCode: ").append(toIndentedString(taskPriorityCode)).append("\n");
    sb.append("    taskPriorityName: ").append(toIndentedString(taskPriorityName)).append("\n");
    sb.append("    taskStatusCode: ").append(toIndentedString(taskStatusCode)).append("\n");
    sb.append("    taskStatusName: ").append(toIndentedString(taskStatusName)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    isCompleteStatus: ").append(toIndentedString(isCompleteStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccountTaskTypeIDFK");
    openapiFields.add("ActualTime");
    openapiFields.add("AssignedToUsers");
    openapiFields.add("DateCompleted");
    openapiFields.add("DateCreated");
    openapiFields.add("DateDue");
    openapiFields.add("DateStart");
    openapiFields.add("DateUpdated");
    openapiFields.add("Description");
    openapiFields.add("DescriptionNoHTML");
    openapiFields.add("EstimatedEffort");
    openapiFields.add("PercentComplete");
    openapiFields.add("ProjectCode");
    openapiFields.add("ProjectIDFK");
    openapiFields.add("ProjectTitle");
    openapiFields.add("SectionIDFK");
    openapiFields.add("SectionTitle");
    openapiFields.add("Tags");
    openapiFields.add("TaskID");
    openapiFields.add("TaskPriorityCode");
    openapiFields.add("TaskPriorityName");
    openapiFields.add("TaskStatusCode");
    openapiFields.add("TaskStatusName");
    openapiFields.add("Title");
    openapiFields.add("isCompleteStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TaskDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TaskDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaskDetails is not found in the empty JSON string", TaskDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TaskDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaskDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("AssignedToUsers") != null && !jsonObj.get("AssignedToUsers").isJsonNull()) {
        JsonArray jsonArrayassignedToUsers = jsonObj.getAsJsonArray("AssignedToUsers");
        if (jsonArrayassignedToUsers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("AssignedToUsers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `AssignedToUsers` to be an array in the JSON string but got `%s`", jsonObj.get("AssignedToUsers").toString()));
          }

          // validate the optional field `AssignedToUsers` (array)
          for (int i = 0; i < jsonArrayassignedToUsers.size(); i++) {
            AssignedToUser.validateJsonElement(jsonArrayassignedToUsers.get(i));
          };
        }
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("DescriptionNoHTML") != null && !jsonObj.get("DescriptionNoHTML").isJsonNull()) && !jsonObj.get("DescriptionNoHTML").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DescriptionNoHTML` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DescriptionNoHTML").toString()));
      }
      if ((jsonObj.get("ProjectCode") != null && !jsonObj.get("ProjectCode").isJsonNull()) && !jsonObj.get("ProjectCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProjectCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProjectCode").toString()));
      }
      if ((jsonObj.get("ProjectTitle") != null && !jsonObj.get("ProjectTitle").isJsonNull()) && !jsonObj.get("ProjectTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProjectTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProjectTitle").toString()));
      }
      if ((jsonObj.get("SectionTitle") != null && !jsonObj.get("SectionTitle").isJsonNull()) && !jsonObj.get("SectionTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SectionTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SectionTitle").toString()));
      }
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("Tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Tags` to be an array in the JSON string but got `%s`", jsonObj.get("Tags").toString()));
          }

          // validate the optional field `Tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            TagItem.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      if ((jsonObj.get("TaskPriorityCode") != null && !jsonObj.get("TaskPriorityCode").isJsonNull()) && !jsonObj.get("TaskPriorityCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TaskPriorityCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TaskPriorityCode").toString()));
      }
      if ((jsonObj.get("TaskPriorityName") != null && !jsonObj.get("TaskPriorityName").isJsonNull()) && !jsonObj.get("TaskPriorityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TaskPriorityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TaskPriorityName").toString()));
      }
      if ((jsonObj.get("TaskStatusCode") != null && !jsonObj.get("TaskStatusCode").isJsonNull()) && !jsonObj.get("TaskStatusCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TaskStatusCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TaskStatusCode").toString()));
      }
      if ((jsonObj.get("TaskStatusName") != null && !jsonObj.get("TaskStatusName").isJsonNull()) && !jsonObj.get("TaskStatusName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TaskStatusName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TaskStatusName").toString()));
      }
      if ((jsonObj.get("Title") != null && !jsonObj.get("Title").isJsonNull()) && !jsonObj.get("Title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaskDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaskDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaskDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaskDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<TaskDetails>() {
           @Override
           public void write(JsonWriter out, TaskDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaskDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TaskDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TaskDetails
   * @throws IOException if the JSON string is invalid with respect to TaskDetails
   */
  public static TaskDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaskDetails.class);
  }

  /**
   * Convert an instance of TaskDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

