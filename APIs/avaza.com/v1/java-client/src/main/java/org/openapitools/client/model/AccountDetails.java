/*
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:56.431364-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountDetails {
  public static final String SERIALIZED_NAME_ACCOUNT_EMAIL = "AccountEmail";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_EMAIL)
  private String accountEmail;

  public static final String SERIALIZED_NAME_ACCOUNT_I_D = "AccountID";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_I_D)
  private Integer accountID;

  public static final String SERIALIZED_NAME_ALLOW_HIDING_COMPLETED_TASKS_ON_TIMESHEET = "AllowHidingCompletedTasksOnTimesheet";
  @SerializedName(SERIALIZED_NAME_ALLOW_HIDING_COMPLETED_TASKS_ON_TIMESHEET)
  private Boolean allowHidingCompletedTasksOnTimesheet;

  public static final String SERIALIZED_NAME_BRAND_PRIMARY_COLOR = "BrandPrimaryColor";
  @SerializedName(SERIALIZED_NAME_BRAND_PRIMARY_COLOR)
  private String brandPrimaryColor;

  public static final String SERIALIZED_NAME_BRAND_PRIMARY_COLOR_LUMINANCE = "BrandPrimaryColorLuminance";
  @SerializedName(SERIALIZED_NAME_BRAND_PRIMARY_COLOR_LUMINANCE)
  private String brandPrimaryColorLuminance;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "CompanyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_CURRENT_SERVER_TIME_I_S_O = "CurrentServerTimeISO";
  @SerializedName(SERIALIZED_NAME_CURRENT_SERVER_TIME_I_S_O)
  private String currentServerTimeISO;

  public static final String SERIALIZED_NAME_DEFAULT_CURRENCY_CODE = "DefaultCurrencyCode";
  @SerializedName(SERIALIZED_NAME_DEFAULT_CURRENCY_CODE)
  private String defaultCurrencyCode;

  public static final String SERIALIZED_NAME_EXPENSE_APPROVAL_REQUIRED = "ExpenseApprovalRequired";
  @SerializedName(SERIALIZED_NAME_EXPENSE_APPROVAL_REQUIRED)
  private Boolean expenseApprovalRequired;

  public static final String SERIALIZED_NAME_LOCK_APPROVED_EXPENSES = "LockApprovedExpenses";
  @SerializedName(SERIALIZED_NAME_LOCK_APPROVED_EXPENSES)
  private Boolean lockApprovedExpenses;

  public static final String SERIALIZED_NAME_LOCK_APPROVED_TIMESHEETS = "LockApprovedTimesheets";
  @SerializedName(SERIALIZED_NAME_LOCK_APPROVED_TIMESHEETS)
  private Boolean lockApprovedTimesheets;

  public static final String SERIALIZED_NAME_S_C = "SC";
  @SerializedName(SERIALIZED_NAME_S_C)
  private String SC;

  public static final String SERIALIZED_NAME_SUBDOMAIN = "Subdomain";
  @SerializedName(SERIALIZED_NAME_SUBDOMAIN)
  private String subdomain;

  public static final String SERIALIZED_NAME_TIMESHEET_DAY_OF_WEEK = "TimesheetDayOfWeek";
  @SerializedName(SERIALIZED_NAME_TIMESHEET_DAY_OF_WEEK)
  private Integer timesheetDayOfWeek;

  public static final String SERIALIZED_NAME_TIMESHEET_DISPLAY_FORMAT_CODE = "TimesheetDisplayFormatCode";
  @SerializedName(SERIALIZED_NAME_TIMESHEET_DISPLAY_FORMAT_CODE)
  private String timesheetDisplayFormatCode;

  public static final String SERIALIZED_NAME_WEEKLY_TIMESHEET_REMINDER = "WeeklyTimesheetReminder";
  @SerializedName(SERIALIZED_NAME_WEEKLY_TIMESHEET_REMINDER)
  private Boolean weeklyTimesheetReminder;

  public static final String SERIALIZED_NAME_HAS24_HOUR_TIMESHEET_FORMAT = "has24HourTimesheetFormat";
  @SerializedName(SERIALIZED_NAME_HAS24_HOUR_TIMESHEET_FORMAT)
  private Boolean has24HourTimesheetFormat;

  public static final String SERIALIZED_NAME_HAS_START_END_TIMESHEETS = "hasStartEndTimesheets";
  @SerializedName(SERIALIZED_NAME_HAS_START_END_TIMESHEETS)
  private Boolean hasStartEndTimesheets;

  public AccountDetails() {
  }

  public AccountDetails accountEmail(String accountEmail) {
    this.accountEmail = accountEmail;
    return this;
  }

  /**
   * Get accountEmail
   * @return accountEmail
   */
  @javax.annotation.Nullable
  public String getAccountEmail() {
    return accountEmail;
  }

  public void setAccountEmail(String accountEmail) {
    this.accountEmail = accountEmail;
  }


  public AccountDetails accountID(Integer accountID) {
    this.accountID = accountID;
    return this;
  }

  /**
   * Get accountID
   * @return accountID
   */
  @javax.annotation.Nullable
  public Integer getAccountID() {
    return accountID;
  }

  public void setAccountID(Integer accountID) {
    this.accountID = accountID;
  }


  public AccountDetails allowHidingCompletedTasksOnTimesheet(Boolean allowHidingCompletedTasksOnTimesheet) {
    this.allowHidingCompletedTasksOnTimesheet = allowHidingCompletedTasksOnTimesheet;
    return this;
  }

  /**
   * Get allowHidingCompletedTasksOnTimesheet
   * @return allowHidingCompletedTasksOnTimesheet
   */
  @javax.annotation.Nullable
  public Boolean getAllowHidingCompletedTasksOnTimesheet() {
    return allowHidingCompletedTasksOnTimesheet;
  }

  public void setAllowHidingCompletedTasksOnTimesheet(Boolean allowHidingCompletedTasksOnTimesheet) {
    this.allowHidingCompletedTasksOnTimesheet = allowHidingCompletedTasksOnTimesheet;
  }


  public AccountDetails brandPrimaryColor(String brandPrimaryColor) {
    this.brandPrimaryColor = brandPrimaryColor;
    return this;
  }

  /**
   * A custom branding color for the account. Available on paid accounts.
   * @return brandPrimaryColor
   */
  @javax.annotation.Nullable
  public String getBrandPrimaryColor() {
    return brandPrimaryColor;
  }

  public void setBrandPrimaryColor(String brandPrimaryColor) {
    this.brandPrimaryColor = brandPrimaryColor;
  }


  public AccountDetails brandPrimaryColorLuminance(String brandPrimaryColorLuminance) {
    this.brandPrimaryColorLuminance = brandPrimaryColorLuminance;
    return this;
  }

  /**
   * A determination of the luminance of the Brand Primary Color (possible values: &#39;Dark&#39;, &#39;Medium&#39;, &#39;Light&#39;). This can be used to determine appropriate font colors to sit on top of the brand color.
   * @return brandPrimaryColorLuminance
   */
  @javax.annotation.Nullable
  public String getBrandPrimaryColorLuminance() {
    return brandPrimaryColorLuminance;
  }

  public void setBrandPrimaryColorLuminance(String brandPrimaryColorLuminance) {
    this.brandPrimaryColorLuminance = brandPrimaryColorLuminance;
  }


  public AccountDetails companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * Get companyName
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public AccountDetails currentServerTimeISO(String currentServerTimeISO) {
    this.currentServerTimeISO = currentServerTimeISO;
    return this;
  }

  /**
   * Format: ISO \&quot;YYYY-MM-DD HH:mm:ss.SSS\&quot;
   * @return currentServerTimeISO
   */
  @javax.annotation.Nullable
  public String getCurrentServerTimeISO() {
    return currentServerTimeISO;
  }

  public void setCurrentServerTimeISO(String currentServerTimeISO) {
    this.currentServerTimeISO = currentServerTimeISO;
  }


  public AccountDetails defaultCurrencyCode(String defaultCurrencyCode) {
    this.defaultCurrencyCode = defaultCurrencyCode;
    return this;
  }

  /**
   * ISO 3 letter base Currency Code for the account
   * @return defaultCurrencyCode
   */
  @javax.annotation.Nullable
  public String getDefaultCurrencyCode() {
    return defaultCurrencyCode;
  }

  public void setDefaultCurrencyCode(String defaultCurrencyCode) {
    this.defaultCurrencyCode = defaultCurrencyCode;
  }


  public AccountDetails expenseApprovalRequired(Boolean expenseApprovalRequired) {
    this.expenseApprovalRequired = expenseApprovalRequired;
    return this;
  }

  /**
   * Whether the account requires expenses be approved.
   * @return expenseApprovalRequired
   */
  @javax.annotation.Nullable
  public Boolean getExpenseApprovalRequired() {
    return expenseApprovalRequired;
  }

  public void setExpenseApprovalRequired(Boolean expenseApprovalRequired) {
    this.expenseApprovalRequired = expenseApprovalRequired;
  }


  public AccountDetails lockApprovedExpenses(Boolean lockApprovedExpenses) {
    this.lockApprovedExpenses = lockApprovedExpenses;
    return this;
  }

  /**
   * Approved expenses get locked from subsequent editing by standard expense users.
   * @return lockApprovedExpenses
   */
  @javax.annotation.Nullable
  public Boolean getLockApprovedExpenses() {
    return lockApprovedExpenses;
  }

  public void setLockApprovedExpenses(Boolean lockApprovedExpenses) {
    this.lockApprovedExpenses = lockApprovedExpenses;
  }


  public AccountDetails lockApprovedTimesheets(Boolean lockApprovedTimesheets) {
    this.lockApprovedTimesheets = lockApprovedTimesheets;
    return this;
  }

  /**
   * Get lockApprovedTimesheets
   * @return lockApprovedTimesheets
   */
  @javax.annotation.Nullable
  public Boolean getLockApprovedTimesheets() {
    return lockApprovedTimesheets;
  }

  public void setLockApprovedTimesheets(Boolean lockApprovedTimesheets) {
    this.lockApprovedTimesheets = lockApprovedTimesheets;
  }


  public AccountDetails SC(String SC) {
    this.SC = SC;
    return this;
  }

  /**
   * Get SC
   * @return SC
   */
  @javax.annotation.Nullable
  public String getSC() {
    return SC;
  }

  public void setSC(String SC) {
    this.SC = SC;
  }


  public AccountDetails subdomain(String subdomain) {
    this.subdomain = subdomain;
    return this;
  }

  /**
   * Get subdomain
   * @return subdomain
   */
  @javax.annotation.Nullable
  public String getSubdomain() {
    return subdomain;
  }

  public void setSubdomain(String subdomain) {
    this.subdomain = subdomain;
  }


  public AccountDetails timesheetDayOfWeek(Integer timesheetDayOfWeek) {
    this.timesheetDayOfWeek = timesheetDayOfWeek;
    return this;
  }

  /**
   * Get timesheetDayOfWeek
   * @return timesheetDayOfWeek
   */
  @javax.annotation.Nullable
  public Integer getTimesheetDayOfWeek() {
    return timesheetDayOfWeek;
  }

  public void setTimesheetDayOfWeek(Integer timesheetDayOfWeek) {
    this.timesheetDayOfWeek = timesheetDayOfWeek;
  }


  public AccountDetails timesheetDisplayFormatCode(String timesheetDisplayFormatCode) {
    this.timesheetDisplayFormatCode = timesheetDisplayFormatCode;
    return this;
  }

  /**
   * Get timesheetDisplayFormatCode
   * @return timesheetDisplayFormatCode
   */
  @javax.annotation.Nullable
  public String getTimesheetDisplayFormatCode() {
    return timesheetDisplayFormatCode;
  }

  public void setTimesheetDisplayFormatCode(String timesheetDisplayFormatCode) {
    this.timesheetDisplayFormatCode = timesheetDisplayFormatCode;
  }


  public AccountDetails weeklyTimesheetReminder(Boolean weeklyTimesheetReminder) {
    this.weeklyTimesheetReminder = weeklyTimesheetReminder;
    return this;
  }

  /**
   * Get weeklyTimesheetReminder
   * @return weeklyTimesheetReminder
   */
  @javax.annotation.Nullable
  public Boolean getWeeklyTimesheetReminder() {
    return weeklyTimesheetReminder;
  }

  public void setWeeklyTimesheetReminder(Boolean weeklyTimesheetReminder) {
    this.weeklyTimesheetReminder = weeklyTimesheetReminder;
  }


  public AccountDetails has24HourTimesheetFormat(Boolean has24HourTimesheetFormat) {
    this.has24HourTimesheetFormat = has24HourTimesheetFormat;
    return this;
  }

  /**
   * Get has24HourTimesheetFormat
   * @return has24HourTimesheetFormat
   */
  @javax.annotation.Nullable
  public Boolean getHas24HourTimesheetFormat() {
    return has24HourTimesheetFormat;
  }

  public void setHas24HourTimesheetFormat(Boolean has24HourTimesheetFormat) {
    this.has24HourTimesheetFormat = has24HourTimesheetFormat;
  }


  public AccountDetails hasStartEndTimesheets(Boolean hasStartEndTimesheets) {
    this.hasStartEndTimesheets = hasStartEndTimesheets;
    return this;
  }

  /**
   * Get hasStartEndTimesheets
   * @return hasStartEndTimesheets
   */
  @javax.annotation.Nullable
  public Boolean getHasStartEndTimesheets() {
    return hasStartEndTimesheets;
  }

  public void setHasStartEndTimesheets(Boolean hasStartEndTimesheets) {
    this.hasStartEndTimesheets = hasStartEndTimesheets;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountDetails accountDetails = (AccountDetails) o;
    return Objects.equals(this.accountEmail, accountDetails.accountEmail) &&
        Objects.equals(this.accountID, accountDetails.accountID) &&
        Objects.equals(this.allowHidingCompletedTasksOnTimesheet, accountDetails.allowHidingCompletedTasksOnTimesheet) &&
        Objects.equals(this.brandPrimaryColor, accountDetails.brandPrimaryColor) &&
        Objects.equals(this.brandPrimaryColorLuminance, accountDetails.brandPrimaryColorLuminance) &&
        Objects.equals(this.companyName, accountDetails.companyName) &&
        Objects.equals(this.currentServerTimeISO, accountDetails.currentServerTimeISO) &&
        Objects.equals(this.defaultCurrencyCode, accountDetails.defaultCurrencyCode) &&
        Objects.equals(this.expenseApprovalRequired, accountDetails.expenseApprovalRequired) &&
        Objects.equals(this.lockApprovedExpenses, accountDetails.lockApprovedExpenses) &&
        Objects.equals(this.lockApprovedTimesheets, accountDetails.lockApprovedTimesheets) &&
        Objects.equals(this.SC, accountDetails.SC) &&
        Objects.equals(this.subdomain, accountDetails.subdomain) &&
        Objects.equals(this.timesheetDayOfWeek, accountDetails.timesheetDayOfWeek) &&
        Objects.equals(this.timesheetDisplayFormatCode, accountDetails.timesheetDisplayFormatCode) &&
        Objects.equals(this.weeklyTimesheetReminder, accountDetails.weeklyTimesheetReminder) &&
        Objects.equals(this.has24HourTimesheetFormat, accountDetails.has24HourTimesheetFormat) &&
        Objects.equals(this.hasStartEndTimesheets, accountDetails.hasStartEndTimesheets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountEmail, accountID, allowHidingCompletedTasksOnTimesheet, brandPrimaryColor, brandPrimaryColorLuminance, companyName, currentServerTimeISO, defaultCurrencyCode, expenseApprovalRequired, lockApprovedExpenses, lockApprovedTimesheets, SC, subdomain, timesheetDayOfWeek, timesheetDisplayFormatCode, weeklyTimesheetReminder, has24HourTimesheetFormat, hasStartEndTimesheets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountDetails {\n");
    sb.append("    accountEmail: ").append(toIndentedString(accountEmail)).append("\n");
    sb.append("    accountID: ").append(toIndentedString(accountID)).append("\n");
    sb.append("    allowHidingCompletedTasksOnTimesheet: ").append(toIndentedString(allowHidingCompletedTasksOnTimesheet)).append("\n");
    sb.append("    brandPrimaryColor: ").append(toIndentedString(brandPrimaryColor)).append("\n");
    sb.append("    brandPrimaryColorLuminance: ").append(toIndentedString(brandPrimaryColorLuminance)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    currentServerTimeISO: ").append(toIndentedString(currentServerTimeISO)).append("\n");
    sb.append("    defaultCurrencyCode: ").append(toIndentedString(defaultCurrencyCode)).append("\n");
    sb.append("    expenseApprovalRequired: ").append(toIndentedString(expenseApprovalRequired)).append("\n");
    sb.append("    lockApprovedExpenses: ").append(toIndentedString(lockApprovedExpenses)).append("\n");
    sb.append("    lockApprovedTimesheets: ").append(toIndentedString(lockApprovedTimesheets)).append("\n");
    sb.append("    SC: ").append(toIndentedString(SC)).append("\n");
    sb.append("    subdomain: ").append(toIndentedString(subdomain)).append("\n");
    sb.append("    timesheetDayOfWeek: ").append(toIndentedString(timesheetDayOfWeek)).append("\n");
    sb.append("    timesheetDisplayFormatCode: ").append(toIndentedString(timesheetDisplayFormatCode)).append("\n");
    sb.append("    weeklyTimesheetReminder: ").append(toIndentedString(weeklyTimesheetReminder)).append("\n");
    sb.append("    has24HourTimesheetFormat: ").append(toIndentedString(has24HourTimesheetFormat)).append("\n");
    sb.append("    hasStartEndTimesheets: ").append(toIndentedString(hasStartEndTimesheets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccountEmail");
    openapiFields.add("AccountID");
    openapiFields.add("AllowHidingCompletedTasksOnTimesheet");
    openapiFields.add("BrandPrimaryColor");
    openapiFields.add("BrandPrimaryColorLuminance");
    openapiFields.add("CompanyName");
    openapiFields.add("CurrentServerTimeISO");
    openapiFields.add("DefaultCurrencyCode");
    openapiFields.add("ExpenseApprovalRequired");
    openapiFields.add("LockApprovedExpenses");
    openapiFields.add("LockApprovedTimesheets");
    openapiFields.add("SC");
    openapiFields.add("Subdomain");
    openapiFields.add("TimesheetDayOfWeek");
    openapiFields.add("TimesheetDisplayFormatCode");
    openapiFields.add("WeeklyTimesheetReminder");
    openapiFields.add("has24HourTimesheetFormat");
    openapiFields.add("hasStartEndTimesheets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountDetails is not found in the empty JSON string", AccountDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AccountEmail") != null && !jsonObj.get("AccountEmail").isJsonNull()) && !jsonObj.get("AccountEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountEmail").toString()));
      }
      if ((jsonObj.get("BrandPrimaryColor") != null && !jsonObj.get("BrandPrimaryColor").isJsonNull()) && !jsonObj.get("BrandPrimaryColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BrandPrimaryColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BrandPrimaryColor").toString()));
      }
      if ((jsonObj.get("BrandPrimaryColorLuminance") != null && !jsonObj.get("BrandPrimaryColorLuminance").isJsonNull()) && !jsonObj.get("BrandPrimaryColorLuminance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BrandPrimaryColorLuminance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BrandPrimaryColorLuminance").toString()));
      }
      if ((jsonObj.get("CompanyName") != null && !jsonObj.get("CompanyName").isJsonNull()) && !jsonObj.get("CompanyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CompanyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CompanyName").toString()));
      }
      if ((jsonObj.get("CurrentServerTimeISO") != null && !jsonObj.get("CurrentServerTimeISO").isJsonNull()) && !jsonObj.get("CurrentServerTimeISO").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrentServerTimeISO` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrentServerTimeISO").toString()));
      }
      if ((jsonObj.get("DefaultCurrencyCode") != null && !jsonObj.get("DefaultCurrencyCode").isJsonNull()) && !jsonObj.get("DefaultCurrencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DefaultCurrencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DefaultCurrencyCode").toString()));
      }
      if ((jsonObj.get("SC") != null && !jsonObj.get("SC").isJsonNull()) && !jsonObj.get("SC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SC").toString()));
      }
      if ((jsonObj.get("Subdomain") != null && !jsonObj.get("Subdomain").isJsonNull()) && !jsonObj.get("Subdomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Subdomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Subdomain").toString()));
      }
      if ((jsonObj.get("TimesheetDisplayFormatCode") != null && !jsonObj.get("TimesheetDisplayFormatCode").isJsonNull()) && !jsonObj.get("TimesheetDisplayFormatCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TimesheetDisplayFormatCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TimesheetDisplayFormatCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountDetails>() {
           @Override
           public void write(JsonWriter out, AccountDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountDetails
   * @throws IOException if the JSON string is invalid with respect to AccountDetails
   */
  public static AccountDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountDetails.class);
  }

  /**
   * Convert an instance of AccountDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

