/*
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TimesheetSummaryGroup
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:56.431364-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TimesheetSummaryGroup {
  public static final String SERIALIZED_NAME_BILLABLE_HOURS = "BillableHours";
  @SerializedName(SERIALIZED_NAME_BILLABLE_HOURS)
  private Double billableHours;

  public static final String SERIALIZED_NAME_GROUP_DATA = "GroupData";
  @SerializedName(SERIALIZED_NAME_GROUP_DATA)
  private List<TimesheetSummaryGroup> groupData = new ArrayList<>();

  public static final String SERIALIZED_NAME_GROUP_I_D = "GroupID";
  @SerializedName(SERIALIZED_NAME_GROUP_I_D)
  private String groupID;

  public static final String SERIALIZED_NAME_GROUP_NAME = "GroupName";
  @SerializedName(SERIALIZED_NAME_GROUP_NAME)
  private String groupName;

  public static final String SERIALIZED_NAME_TOTAL_HOURS = "TotalHours";
  @SerializedName(SERIALIZED_NAME_TOTAL_HOURS)
  private Double totalHours;

  public TimesheetSummaryGroup() {
  }

  public TimesheetSummaryGroup billableHours(Double billableHours) {
    this.billableHours = billableHours;
    return this;
  }

  /**
   * Get billableHours
   * @return billableHours
   */
  @javax.annotation.Nullable
  public Double getBillableHours() {
    return billableHours;
  }

  public void setBillableHours(Double billableHours) {
    this.billableHours = billableHours;
  }


  public TimesheetSummaryGroup groupData(List<TimesheetSummaryGroup> groupData) {
    this.groupData = groupData;
    return this;
  }

  public TimesheetSummaryGroup addGroupDataItem(TimesheetSummaryGroup groupDataItem) {
    if (this.groupData == null) {
      this.groupData = new ArrayList<>();
    }
    this.groupData.add(groupDataItem);
    return this;
  }

  /**
   * Get groupData
   * @return groupData
   */
  @javax.annotation.Nullable
  public List<TimesheetSummaryGroup> getGroupData() {
    return groupData;
  }

  public void setGroupData(List<TimesheetSummaryGroup> groupData) {
    this.groupData = groupData;
  }


  public TimesheetSummaryGroup groupID(String groupID) {
    this.groupID = groupID;
    return this;
  }

  /**
   * Get groupID
   * @return groupID
   */
  @javax.annotation.Nullable
  public String getGroupID() {
    return groupID;
  }

  public void setGroupID(String groupID) {
    this.groupID = groupID;
  }


  public TimesheetSummaryGroup groupName(String groupName) {
    this.groupName = groupName;
    return this;
  }

  /**
   * Get groupName
   * @return groupName
   */
  @javax.annotation.Nullable
  public String getGroupName() {
    return groupName;
  }

  public void setGroupName(String groupName) {
    this.groupName = groupName;
  }


  public TimesheetSummaryGroup totalHours(Double totalHours) {
    this.totalHours = totalHours;
    return this;
  }

  /**
   * Get totalHours
   * @return totalHours
   */
  @javax.annotation.Nullable
  public Double getTotalHours() {
    return totalHours;
  }

  public void setTotalHours(Double totalHours) {
    this.totalHours = totalHours;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimesheetSummaryGroup timesheetSummaryGroup = (TimesheetSummaryGroup) o;
    return Objects.equals(this.billableHours, timesheetSummaryGroup.billableHours) &&
        Objects.equals(this.groupData, timesheetSummaryGroup.groupData) &&
        Objects.equals(this.groupID, timesheetSummaryGroup.groupID) &&
        Objects.equals(this.groupName, timesheetSummaryGroup.groupName) &&
        Objects.equals(this.totalHours, timesheetSummaryGroup.totalHours);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billableHours, groupData, groupID, groupName, totalHours);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimesheetSummaryGroup {\n");
    sb.append("    billableHours: ").append(toIndentedString(billableHours)).append("\n");
    sb.append("    groupData: ").append(toIndentedString(groupData)).append("\n");
    sb.append("    groupID: ").append(toIndentedString(groupID)).append("\n");
    sb.append("    groupName: ").append(toIndentedString(groupName)).append("\n");
    sb.append("    totalHours: ").append(toIndentedString(totalHours)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BillableHours");
    openapiFields.add("GroupData");
    openapiFields.add("GroupID");
    openapiFields.add("GroupName");
    openapiFields.add("TotalHours");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TimesheetSummaryGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TimesheetSummaryGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimesheetSummaryGroup is not found in the empty JSON string", TimesheetSummaryGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TimesheetSummaryGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TimesheetSummaryGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("GroupData") != null && !jsonObj.get("GroupData").isJsonNull()) {
        JsonArray jsonArraygroupData = jsonObj.getAsJsonArray("GroupData");
        if (jsonArraygroupData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("GroupData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `GroupData` to be an array in the JSON string but got `%s`", jsonObj.get("GroupData").toString()));
          }

          // validate the optional field `GroupData` (array)
          for (int i = 0; i < jsonArraygroupData.size(); i++) {
            TimesheetSummaryGroup.validateJsonElement(jsonArraygroupData.get(i));
          };
        }
      }
      if ((jsonObj.get("GroupID") != null && !jsonObj.get("GroupID").isJsonNull()) && !jsonObj.get("GroupID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GroupID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GroupID").toString()));
      }
      if ((jsonObj.get("GroupName") != null && !jsonObj.get("GroupName").isJsonNull()) && !jsonObj.get("GroupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GroupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GroupName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimesheetSummaryGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimesheetSummaryGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimesheetSummaryGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimesheetSummaryGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<TimesheetSummaryGroup>() {
           @Override
           public void write(JsonWriter out, TimesheetSummaryGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TimesheetSummaryGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TimesheetSummaryGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TimesheetSummaryGroup
   * @throws IOException if the JSON string is invalid with respect to TimesheetSummaryGroup
   */
  public static TimesheetSummaryGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimesheetSummaryGroup.class);
  }

  /**
   * Convert an instance of TimesheetSummaryGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

