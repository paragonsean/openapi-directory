/*
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateProjectModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:56.431364-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateProjectModel {
  public static final String SERIALIZED_NAME_BUDGET_AMOUNT = "BudgetAmount";
  @SerializedName(SERIALIZED_NAME_BUDGET_AMOUNT)
  private Double budgetAmount;

  public static final String SERIALIZED_NAME_BUDGET_HOURS = "BudgetHours";
  @SerializedName(SERIALIZED_NAME_BUDGET_HOURS)
  private Double budgetHours;

  public static final String SERIALIZED_NAME_END_DATE = "EndDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_FIELDS_TO_UPDATE = "FieldsToUpdate";
  @SerializedName(SERIALIZED_NAME_FIELDS_TO_UPDATE)
  private List<String> fieldsToUpdate = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROJECT_BILLABLE_TYPE_CODE = "ProjectBillableTypeCode";
  @SerializedName(SERIALIZED_NAME_PROJECT_BILLABLE_TYPE_CODE)
  private String projectBillableTypeCode;

  public static final String SERIALIZED_NAME_PROJECT_BUDGET_TYPE_CODE = "ProjectBudgetTypeCode";
  @SerializedName(SERIALIZED_NAME_PROJECT_BUDGET_TYPE_CODE)
  private String projectBudgetTypeCode;

  public static final String SERIALIZED_NAME_PROJECT_CATEGORY_I_D_F_K = "ProjectCategoryIDFK";
  @SerializedName(SERIALIZED_NAME_PROJECT_CATEGORY_I_D_F_K)
  private Integer projectCategoryIDFK;

  public static final String SERIALIZED_NAME_PROJECT_I_D = "ProjectID";
  @SerializedName(SERIALIZED_NAME_PROJECT_I_D)
  private Integer projectID;

  public static final String SERIALIZED_NAME_PROJECT_NOTES = "ProjectNotes";
  @SerializedName(SERIALIZED_NAME_PROJECT_NOTES)
  private String projectNotes;

  public static final String SERIALIZED_NAME_PROJECT_STATUS_CODE = "ProjectStatusCode";
  @SerializedName(SERIALIZED_NAME_PROJECT_STATUS_CODE)
  private String projectStatusCode;

  public static final String SERIALIZED_NAME_PROJECT_TITLE = "ProjectTitle";
  @SerializedName(SERIALIZED_NAME_PROJECT_TITLE)
  private String projectTitle;

  public static final String SERIALIZED_NAME_START_DATE = "StartDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_TIMESHEET_APPROVAL_REQUIREDBY_DEFAULT = "TimesheetApprovalRequiredbyDefault";
  @SerializedName(SERIALIZED_NAME_TIMESHEET_APPROVAL_REQUIREDBY_DEFAULT)
  private Boolean timesheetApprovalRequiredbyDefault;

  public static final String SERIALIZED_NAME_IS_TASK_REQUIRED_ON_TIMESHEET = "isTaskRequiredOnTimesheet";
  @SerializedName(SERIALIZED_NAME_IS_TASK_REQUIRED_ON_TIMESHEET)
  private Boolean isTaskRequiredOnTimesheet;

  public UpdateProjectModel() {
  }

  public UpdateProjectModel budgetAmount(Double budgetAmount) {
    this.budgetAmount = budgetAmount;
    return this;
  }

  /**
   * Get budgetAmount
   * @return budgetAmount
   */
  @javax.annotation.Nullable
  public Double getBudgetAmount() {
    return budgetAmount;
  }

  public void setBudgetAmount(Double budgetAmount) {
    this.budgetAmount = budgetAmount;
  }


  public UpdateProjectModel budgetHours(Double budgetHours) {
    this.budgetHours = budgetHours;
    return this;
  }

  /**
   * Get budgetHours
   * @return budgetHours
   */
  @javax.annotation.Nullable
  public Double getBudgetHours() {
    return budgetHours;
  }

  public void setBudgetHours(Double budgetHours) {
    this.budgetHours = budgetHours;
  }


  public UpdateProjectModel endDate(OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Get endDate
   * @return endDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public UpdateProjectModel fieldsToUpdate(List<String> fieldsToUpdate) {
    this.fieldsToUpdate = fieldsToUpdate;
    return this;
  }

  public UpdateProjectModel addFieldsToUpdateItem(String fieldsToUpdateItem) {
    if (this.fieldsToUpdate == null) {
      this.fieldsToUpdate = new ArrayList<>();
    }
    this.fieldsToUpdate.add(fieldsToUpdateItem);
    return this;
  }

  /**
   * 
   * @return fieldsToUpdate
   */
  @javax.annotation.Nullable
  public List<String> getFieldsToUpdate() {
    return fieldsToUpdate;
  }

  public void setFieldsToUpdate(List<String> fieldsToUpdate) {
    this.fieldsToUpdate = fieldsToUpdate;
  }


  public UpdateProjectModel projectBillableTypeCode(String projectBillableTypeCode) {
    this.projectBillableTypeCode = projectBillableTypeCode;
    return this;
  }

  /**
   * The billing method of the project. (string, optional) Possible values: CategoryHourly, NoRate, NotBillable, PersonHourly, ProjectHourly
   * @return projectBillableTypeCode
   */
  @javax.annotation.Nullable
  public String getProjectBillableTypeCode() {
    return projectBillableTypeCode;
  }

  public void setProjectBillableTypeCode(String projectBillableTypeCode) {
    this.projectBillableTypeCode = projectBillableTypeCode;
  }


  public UpdateProjectModel projectBudgetTypeCode(String projectBudgetTypeCode) {
    this.projectBudgetTypeCode = projectBudgetTypeCode;
    return this;
  }

  /**
   * The project budgeting type. (string, optional) Possible values: NoBudget, PersonHours, ProjectFees, ProjectHours, CategoryHours
   * @return projectBudgetTypeCode
   */
  @javax.annotation.Nullable
  public String getProjectBudgetTypeCode() {
    return projectBudgetTypeCode;
  }

  public void setProjectBudgetTypeCode(String projectBudgetTypeCode) {
    this.projectBudgetTypeCode = projectBudgetTypeCode;
  }


  public UpdateProjectModel projectCategoryIDFK(Integer projectCategoryIDFK) {
    this.projectCategoryIDFK = projectCategoryIDFK;
    return this;
  }

  /**
   * Get projectCategoryIDFK
   * @return projectCategoryIDFK
   */
  @javax.annotation.Nullable
  public Integer getProjectCategoryIDFK() {
    return projectCategoryIDFK;
  }

  public void setProjectCategoryIDFK(Integer projectCategoryIDFK) {
    this.projectCategoryIDFK = projectCategoryIDFK;
  }


  public UpdateProjectModel projectID(Integer projectID) {
    this.projectID = projectID;
    return this;
  }

  /**
   * The ID of the Project to update
   * @return projectID
   */
  @javax.annotation.Nullable
  public Integer getProjectID() {
    return projectID;
  }

  public void setProjectID(Integer projectID) {
    this.projectID = projectID;
  }


  public UpdateProjectModel projectNotes(String projectNotes) {
    this.projectNotes = projectNotes;
    return this;
  }

  /**
   * (optional) Any descriptive notes about the project. (2000 characters max)
   * @return projectNotes
   */
  @javax.annotation.Nullable
  public String getProjectNotes() {
    return projectNotes;
  }

  public void setProjectNotes(String projectNotes) {
    this.projectNotes = projectNotes;
  }


  public UpdateProjectModel projectStatusCode(String projectStatusCode) {
    this.projectStatusCode = projectStatusCode;
    return this;
  }

  /**
   * Update the project status (string, optional): (Possible values: NotStarted, InProgress, Complete, OnHold)
   * @return projectStatusCode
   */
  @javax.annotation.Nullable
  public String getProjectStatusCode() {
    return projectStatusCode;
  }

  public void setProjectStatusCode(String projectStatusCode) {
    this.projectStatusCode = projectStatusCode;
  }


  public UpdateProjectModel projectTitle(String projectTitle) {
    this.projectTitle = projectTitle;
    return this;
  }

  /**
   * (optional) An updated project title. (255 characters max)
   * @return projectTitle
   */
  @javax.annotation.Nullable
  public String getProjectTitle() {
    return projectTitle;
  }

  public void setProjectTitle(String projectTitle) {
    this.projectTitle = projectTitle;
  }


  public UpdateProjectModel startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public UpdateProjectModel timesheetApprovalRequiredbyDefault(Boolean timesheetApprovalRequiredbyDefault) {
    this.timesheetApprovalRequiredbyDefault = timesheetApprovalRequiredbyDefault;
    return this;
  }

  /**
   * Whether timesheet approval should be required by default for newly added project members.
   * @return timesheetApprovalRequiredbyDefault
   */
  @javax.annotation.Nullable
  public Boolean getTimesheetApprovalRequiredbyDefault() {
    return timesheetApprovalRequiredbyDefault;
  }

  public void setTimesheetApprovalRequiredbyDefault(Boolean timesheetApprovalRequiredbyDefault) {
    this.timesheetApprovalRequiredbyDefault = timesheetApprovalRequiredbyDefault;
  }


  public UpdateProjectModel isTaskRequiredOnTimesheet(Boolean isTaskRequiredOnTimesheet) {
    this.isTaskRequiredOnTimesheet = isTaskRequiredOnTimesheet;
    return this;
  }

  /**
   * Whether timesheets entered against this project require a task to be selected.
   * @return isTaskRequiredOnTimesheet
   */
  @javax.annotation.Nullable
  public Boolean getIsTaskRequiredOnTimesheet() {
    return isTaskRequiredOnTimesheet;
  }

  public void setIsTaskRequiredOnTimesheet(Boolean isTaskRequiredOnTimesheet) {
    this.isTaskRequiredOnTimesheet = isTaskRequiredOnTimesheet;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateProjectModel updateProjectModel = (UpdateProjectModel) o;
    return Objects.equals(this.budgetAmount, updateProjectModel.budgetAmount) &&
        Objects.equals(this.budgetHours, updateProjectModel.budgetHours) &&
        Objects.equals(this.endDate, updateProjectModel.endDate) &&
        Objects.equals(this.fieldsToUpdate, updateProjectModel.fieldsToUpdate) &&
        Objects.equals(this.projectBillableTypeCode, updateProjectModel.projectBillableTypeCode) &&
        Objects.equals(this.projectBudgetTypeCode, updateProjectModel.projectBudgetTypeCode) &&
        Objects.equals(this.projectCategoryIDFK, updateProjectModel.projectCategoryIDFK) &&
        Objects.equals(this.projectID, updateProjectModel.projectID) &&
        Objects.equals(this.projectNotes, updateProjectModel.projectNotes) &&
        Objects.equals(this.projectStatusCode, updateProjectModel.projectStatusCode) &&
        Objects.equals(this.projectTitle, updateProjectModel.projectTitle) &&
        Objects.equals(this.startDate, updateProjectModel.startDate) &&
        Objects.equals(this.timesheetApprovalRequiredbyDefault, updateProjectModel.timesheetApprovalRequiredbyDefault) &&
        Objects.equals(this.isTaskRequiredOnTimesheet, updateProjectModel.isTaskRequiredOnTimesheet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(budgetAmount, budgetHours, endDate, fieldsToUpdate, projectBillableTypeCode, projectBudgetTypeCode, projectCategoryIDFK, projectID, projectNotes, projectStatusCode, projectTitle, startDate, timesheetApprovalRequiredbyDefault, isTaskRequiredOnTimesheet);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateProjectModel {\n");
    sb.append("    budgetAmount: ").append(toIndentedString(budgetAmount)).append("\n");
    sb.append("    budgetHours: ").append(toIndentedString(budgetHours)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    fieldsToUpdate: ").append(toIndentedString(fieldsToUpdate)).append("\n");
    sb.append("    projectBillableTypeCode: ").append(toIndentedString(projectBillableTypeCode)).append("\n");
    sb.append("    projectBudgetTypeCode: ").append(toIndentedString(projectBudgetTypeCode)).append("\n");
    sb.append("    projectCategoryIDFK: ").append(toIndentedString(projectCategoryIDFK)).append("\n");
    sb.append("    projectID: ").append(toIndentedString(projectID)).append("\n");
    sb.append("    projectNotes: ").append(toIndentedString(projectNotes)).append("\n");
    sb.append("    projectStatusCode: ").append(toIndentedString(projectStatusCode)).append("\n");
    sb.append("    projectTitle: ").append(toIndentedString(projectTitle)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    timesheetApprovalRequiredbyDefault: ").append(toIndentedString(timesheetApprovalRequiredbyDefault)).append("\n");
    sb.append("    isTaskRequiredOnTimesheet: ").append(toIndentedString(isTaskRequiredOnTimesheet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BudgetAmount");
    openapiFields.add("BudgetHours");
    openapiFields.add("EndDate");
    openapiFields.add("FieldsToUpdate");
    openapiFields.add("ProjectBillableTypeCode");
    openapiFields.add("ProjectBudgetTypeCode");
    openapiFields.add("ProjectCategoryIDFK");
    openapiFields.add("ProjectID");
    openapiFields.add("ProjectNotes");
    openapiFields.add("ProjectStatusCode");
    openapiFields.add("ProjectTitle");
    openapiFields.add("StartDate");
    openapiFields.add("TimesheetApprovalRequiredbyDefault");
    openapiFields.add("isTaskRequiredOnTimesheet");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateProjectModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateProjectModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateProjectModel is not found in the empty JSON string", UpdateProjectModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateProjectModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateProjectModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("FieldsToUpdate") != null && !jsonObj.get("FieldsToUpdate").isJsonNull() && !jsonObj.get("FieldsToUpdate").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `FieldsToUpdate` to be an array in the JSON string but got `%s`", jsonObj.get("FieldsToUpdate").toString()));
      }
      if ((jsonObj.get("ProjectBillableTypeCode") != null && !jsonObj.get("ProjectBillableTypeCode").isJsonNull()) && !jsonObj.get("ProjectBillableTypeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProjectBillableTypeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProjectBillableTypeCode").toString()));
      }
      if ((jsonObj.get("ProjectBudgetTypeCode") != null && !jsonObj.get("ProjectBudgetTypeCode").isJsonNull()) && !jsonObj.get("ProjectBudgetTypeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProjectBudgetTypeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProjectBudgetTypeCode").toString()));
      }
      if ((jsonObj.get("ProjectNotes") != null && !jsonObj.get("ProjectNotes").isJsonNull()) && !jsonObj.get("ProjectNotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProjectNotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProjectNotes").toString()));
      }
      if ((jsonObj.get("ProjectStatusCode") != null && !jsonObj.get("ProjectStatusCode").isJsonNull()) && !jsonObj.get("ProjectStatusCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProjectStatusCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProjectStatusCode").toString()));
      }
      if ((jsonObj.get("ProjectTitle") != null && !jsonObj.get("ProjectTitle").isJsonNull()) && !jsonObj.get("ProjectTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProjectTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProjectTitle").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateProjectModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateProjectModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateProjectModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateProjectModel.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateProjectModel>() {
           @Override
           public void write(JsonWriter out, UpdateProjectModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateProjectModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateProjectModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateProjectModel
   * @throws IOException if the JSON string is invalid with respect to UpdateProjectModel
   */
  public static UpdateProjectModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateProjectModel.class);
  }

  /**
   * Convert an instance of UpdateProjectModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

