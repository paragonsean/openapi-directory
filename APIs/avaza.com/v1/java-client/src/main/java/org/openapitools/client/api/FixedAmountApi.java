/*
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.FixedAmountList;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FixedAmountApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FixedAmountApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FixedAmountApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for fixedAmountGet
     * @param updatedAfter  (optional)
     * @param entryDateFrom  (optional)
     * @param entryDateTo  (optional)
     * @param projectID (Optional) The ProjectID of a Project to filter Fixed Amounts for (optional)
     * @param taskID (Optional) The TaskID of a Task to filter Fixed Amounts for (optional)
     * @param isInvoiced  (optional)
     * @param pageSize Number of items per page (max 1000) (optional)
     * @param pageNumber Page to display. Starts from 1. (optional)
     * @param sort Optional sorting instruction. Currently possible values: \&quot;DateUpdated\&quot;, \&quot;DateCreated\&quot;, \&quot;DateUpdated desc\&quot;, \&quot;DateCreated desc\&quot;,\&quot;EntryDate\&quot;, \&quot;EntryDate desc\&quot;, \&quot;StartTimeLocal\&quot;,\&quot;StartTimeLocal desc\&quot;, \&quot;TimeSheetEntryID\&quot;, \&quot;TimeSheetEntryID desc\&quot; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fixedAmountGetCall(OffsetDateTime updatedAfter, OffsetDateTime entryDateFrom, OffsetDateTime entryDateTo, Integer projectID, Integer taskID, Boolean isInvoiced, Integer pageSize, Integer pageNumber, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/FixedAmount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updatedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UpdatedAfter", updatedAfter));
        }

        if (entryDateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EntryDateFrom", entryDateFrom));
        }

        if (entryDateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EntryDateTo", entryDateTo));
        }

        if (projectID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ProjectID", projectID));
        }

        if (taskID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TaskID", taskID));
        }

        if (isInvoiced != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isInvoiced", isInvoiced));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fixedAmountGetValidateBeforeCall(OffsetDateTime updatedAfter, OffsetDateTime entryDateFrom, OffsetDateTime entryDateTo, Integer projectID, Integer taskID, Boolean isInvoiced, Integer pageSize, Integer pageNumber, String sort, final ApiCallback _callback) throws ApiException {
        return fixedAmountGetCall(updatedAfter, entryDateFrom, entryDateTo, projectID, taskID, isInvoiced, pageSize, pageNumber, sort, _callback);

    }

    /**
     * Gets list of Fixed Amounts
     * 
     * @param updatedAfter  (optional)
     * @param entryDateFrom  (optional)
     * @param entryDateTo  (optional)
     * @param projectID (Optional) The ProjectID of a Project to filter Fixed Amounts for (optional)
     * @param taskID (Optional) The TaskID of a Task to filter Fixed Amounts for (optional)
     * @param isInvoiced  (optional)
     * @param pageSize Number of items per page (max 1000) (optional)
     * @param pageNumber Page to display. Starts from 1. (optional)
     * @param sort Optional sorting instruction. Currently possible values: \&quot;DateUpdated\&quot;, \&quot;DateCreated\&quot;, \&quot;DateUpdated desc\&quot;, \&quot;DateCreated desc\&quot;,\&quot;EntryDate\&quot;, \&quot;EntryDate desc\&quot;, \&quot;StartTimeLocal\&quot;,\&quot;StartTimeLocal desc\&quot;, \&quot;TimeSheetEntryID\&quot;, \&quot;TimeSheetEntryID desc\&quot; (optional)
     * @return FixedAmountList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public FixedAmountList fixedAmountGet(OffsetDateTime updatedAfter, OffsetDateTime entryDateFrom, OffsetDateTime entryDateTo, Integer projectID, Integer taskID, Boolean isInvoiced, Integer pageSize, Integer pageNumber, String sort) throws ApiException {
        ApiResponse<FixedAmountList> localVarResp = fixedAmountGetWithHttpInfo(updatedAfter, entryDateFrom, entryDateTo, projectID, taskID, isInvoiced, pageSize, pageNumber, sort);
        return localVarResp.getData();
    }

    /**
     * Gets list of Fixed Amounts
     * 
     * @param updatedAfter  (optional)
     * @param entryDateFrom  (optional)
     * @param entryDateTo  (optional)
     * @param projectID (Optional) The ProjectID of a Project to filter Fixed Amounts for (optional)
     * @param taskID (Optional) The TaskID of a Task to filter Fixed Amounts for (optional)
     * @param isInvoiced  (optional)
     * @param pageSize Number of items per page (max 1000) (optional)
     * @param pageNumber Page to display. Starts from 1. (optional)
     * @param sort Optional sorting instruction. Currently possible values: \&quot;DateUpdated\&quot;, \&quot;DateCreated\&quot;, \&quot;DateUpdated desc\&quot;, \&quot;DateCreated desc\&quot;,\&quot;EntryDate\&quot;, \&quot;EntryDate desc\&quot;, \&quot;StartTimeLocal\&quot;,\&quot;StartTimeLocal desc\&quot;, \&quot;TimeSheetEntryID\&quot;, \&quot;TimeSheetEntryID desc\&quot; (optional)
     * @return ApiResponse&lt;FixedAmountList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FixedAmountList> fixedAmountGetWithHttpInfo(OffsetDateTime updatedAfter, OffsetDateTime entryDateFrom, OffsetDateTime entryDateTo, Integer projectID, Integer taskID, Boolean isInvoiced, Integer pageSize, Integer pageNumber, String sort) throws ApiException {
        okhttp3.Call localVarCall = fixedAmountGetValidateBeforeCall(updatedAfter, entryDateFrom, entryDateTo, projectID, taskID, isInvoiced, pageSize, pageNumber, sort, null);
        Type localVarReturnType = new TypeToken<FixedAmountList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets list of Fixed Amounts (asynchronously)
     * 
     * @param updatedAfter  (optional)
     * @param entryDateFrom  (optional)
     * @param entryDateTo  (optional)
     * @param projectID (Optional) The ProjectID of a Project to filter Fixed Amounts for (optional)
     * @param taskID (Optional) The TaskID of a Task to filter Fixed Amounts for (optional)
     * @param isInvoiced  (optional)
     * @param pageSize Number of items per page (max 1000) (optional)
     * @param pageNumber Page to display. Starts from 1. (optional)
     * @param sort Optional sorting instruction. Currently possible values: \&quot;DateUpdated\&quot;, \&quot;DateCreated\&quot;, \&quot;DateUpdated desc\&quot;, \&quot;DateCreated desc\&quot;,\&quot;EntryDate\&quot;, \&quot;EntryDate desc\&quot;, \&quot;StartTimeLocal\&quot;,\&quot;StartTimeLocal desc\&quot;, \&quot;TimeSheetEntryID\&quot;, \&quot;TimeSheetEntryID desc\&quot; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fixedAmountGetAsync(OffsetDateTime updatedAfter, OffsetDateTime entryDateFrom, OffsetDateTime entryDateTo, Integer projectID, Integer taskID, Boolean isInvoiced, Integer pageSize, Integer pageNumber, String sort, final ApiCallback<FixedAmountList> _callback) throws ApiException {

        okhttp3.Call localVarCall = fixedAmountGetValidateBeforeCall(updatedAfter, entryDateFrom, entryDateTo, projectID, taskID, isInvoiced, pageSize, pageNumber, sort, _callback);
        Type localVarReturnType = new TypeToken<FixedAmountList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
