/*
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Line item to be added to new Estimate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:56.431364-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NewEstimateLineItem {
  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISCOUNT = "Discount";
  @SerializedName(SERIALIZED_NAME_DISCOUNT)
  private Double discount;

  public static final String SERIALIZED_NAME_INVENTORY_ITEM_I_D_F_K = "InventoryItemIDFK";
  @SerializedName(SERIALIZED_NAME_INVENTORY_ITEM_I_D_F_K)
  private Integer inventoryItemIDFK;

  public static final String SERIALIZED_NAME_INVENTORY_ITEM_NAME = "InventoryItemName";
  @SerializedName(SERIALIZED_NAME_INVENTORY_ITEM_NAME)
  private String inventoryItemName;

  public static final String SERIALIZED_NAME_QUANTITY = "Quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Double quantity;

  public static final String SERIALIZED_NAME_TAX_I_D_F_K = "TaxIDFK";
  @SerializedName(SERIALIZED_NAME_TAX_I_D_F_K)
  private Integer taxIDFK;

  public static final String SERIALIZED_NAME_TAX_NAME = "TaxName";
  @SerializedName(SERIALIZED_NAME_TAX_NAME)
  private String taxName;

  public static final String SERIALIZED_NAME_TAX_PERCENT = "TaxPercent";
  @SerializedName(SERIALIZED_NAME_TAX_PERCENT)
  private Double taxPercent;

  public static final String SERIALIZED_NAME_UNIT_PRICE = "UnitPrice";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICE)
  private Double unitPrice;

  public NewEstimateLineItem() {
  }

  public NewEstimateLineItem description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Plain UTF8 text. (no HTML)
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public NewEstimateLineItem discount(Double discount) {
    this.discount = discount;
    return this;
  }

  /**
   * Enter 10.5 to give a 10.5% discount
   * @return discount
   */
  @javax.annotation.Nullable
  public Double getDiscount() {
    return discount;
  }

  public void setDiscount(Double discount) {
    this.discount = discount;
  }


  public NewEstimateLineItem inventoryItemIDFK(Integer inventoryItemIDFK) {
    this.inventoryItemIDFK = inventoryItemIDFK;
    return this;
  }

  /**
   * If not specified then Inventory Item Name must be specified.
   * @return inventoryItemIDFK
   */
  @javax.annotation.Nullable
  public Integer getInventoryItemIDFK() {
    return inventoryItemIDFK;
  }

  public void setInventoryItemIDFK(Integer inventoryItemIDFK) {
    this.inventoryItemIDFK = inventoryItemIDFK;
  }


  public NewEstimateLineItem inventoryItemName(String inventoryItemName) {
    this.inventoryItemName = inventoryItemName;
    return this;
  }

  /**
   * If not specified then Inventory item ID must be specified. If specified and not matched to any existing inventory items then a new inventory item will be created. Max 200 characters.
   * @return inventoryItemName
   */
  @javax.annotation.Nullable
  public String getInventoryItemName() {
    return inventoryItemName;
  }

  public void setInventoryItemName(String inventoryItemName) {
    this.inventoryItemName = inventoryItemName;
  }


  public NewEstimateLineItem quantity(Double quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * The quantity for the line item
   * @return quantity
   */
  @javax.annotation.Nonnull
  public Double getQuantity() {
    return quantity;
  }

  public void setQuantity(Double quantity) {
    this.quantity = quantity;
  }


  public NewEstimateLineItem taxIDFK(Integer taxIDFK) {
    this.taxIDFK = taxIDFK;
    return this;
  }

  /**
   * If specified then it must match an existing Tax ID. If not specified then Tax Name and Tax Percent must be specified.
   * @return taxIDFK
   */
  @javax.annotation.Nullable
  public Integer getTaxIDFK() {
    return taxIDFK;
  }

  public void setTaxIDFK(Integer taxIDFK) {
    this.taxIDFK = taxIDFK;
  }


  public NewEstimateLineItem taxName(String taxName) {
    this.taxName = taxName;
    return this;
  }

  /**
   * Must be specified if the Tax ID is blank. If the Tax Name is specified it will be matched to an existing Tax Name or else a new Tax will be created.
   * @return taxName
   */
  @javax.annotation.Nullable
  public String getTaxName() {
    return taxName;
  }

  public void setTaxName(String taxName) {
    this.taxName = taxName;
  }


  public NewEstimateLineItem taxPercent(Double taxPercent) {
    this.taxPercent = taxPercent;
    return this;
  }

  /**
   * The Tax Percent will only be used if a new tax is being created.
   * @return taxPercent
   */
  @javax.annotation.Nullable
  public Double getTaxPercent() {
    return taxPercent;
  }

  public void setTaxPercent(Double taxPercent) {
    this.taxPercent = taxPercent;
  }


  public NewEstimateLineItem unitPrice(Double unitPrice) {
    this.unitPrice = unitPrice;
    return this;
  }

  /**
   * The unit price for the lineitem.
   * @return unitPrice
   */
  @javax.annotation.Nonnull
  public Double getUnitPrice() {
    return unitPrice;
  }

  public void setUnitPrice(Double unitPrice) {
    this.unitPrice = unitPrice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewEstimateLineItem newEstimateLineItem = (NewEstimateLineItem) o;
    return Objects.equals(this.description, newEstimateLineItem.description) &&
        Objects.equals(this.discount, newEstimateLineItem.discount) &&
        Objects.equals(this.inventoryItemIDFK, newEstimateLineItem.inventoryItemIDFK) &&
        Objects.equals(this.inventoryItemName, newEstimateLineItem.inventoryItemName) &&
        Objects.equals(this.quantity, newEstimateLineItem.quantity) &&
        Objects.equals(this.taxIDFK, newEstimateLineItem.taxIDFK) &&
        Objects.equals(this.taxName, newEstimateLineItem.taxName) &&
        Objects.equals(this.taxPercent, newEstimateLineItem.taxPercent) &&
        Objects.equals(this.unitPrice, newEstimateLineItem.unitPrice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, discount, inventoryItemIDFK, inventoryItemName, quantity, taxIDFK, taxName, taxPercent, unitPrice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewEstimateLineItem {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    discount: ").append(toIndentedString(discount)).append("\n");
    sb.append("    inventoryItemIDFK: ").append(toIndentedString(inventoryItemIDFK)).append("\n");
    sb.append("    inventoryItemName: ").append(toIndentedString(inventoryItemName)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    taxIDFK: ").append(toIndentedString(taxIDFK)).append("\n");
    sb.append("    taxName: ").append(toIndentedString(taxName)).append("\n");
    sb.append("    taxPercent: ").append(toIndentedString(taxPercent)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Description");
    openapiFields.add("Discount");
    openapiFields.add("InventoryItemIDFK");
    openapiFields.add("InventoryItemName");
    openapiFields.add("Quantity");
    openapiFields.add("TaxIDFK");
    openapiFields.add("TaxName");
    openapiFields.add("TaxPercent");
    openapiFields.add("UnitPrice");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Quantity");
    openapiRequiredFields.add("UnitPrice");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NewEstimateLineItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NewEstimateLineItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NewEstimateLineItem is not found in the empty JSON string", NewEstimateLineItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NewEstimateLineItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NewEstimateLineItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NewEstimateLineItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("InventoryItemName") != null && !jsonObj.get("InventoryItemName").isJsonNull()) && !jsonObj.get("InventoryItemName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InventoryItemName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InventoryItemName").toString()));
      }
      if ((jsonObj.get("TaxName") != null && !jsonObj.get("TaxName").isJsonNull()) && !jsonObj.get("TaxName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TaxName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TaxName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NewEstimateLineItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NewEstimateLineItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NewEstimateLineItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NewEstimateLineItem.class));

       return (TypeAdapter<T>) new TypeAdapter<NewEstimateLineItem>() {
           @Override
           public void write(JsonWriter out, NewEstimateLineItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NewEstimateLineItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NewEstimateLineItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NewEstimateLineItem
   * @throws IOException if the JSON string is invalid with respect to NewEstimateLineItem
   */
  public static NewEstimateLineItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NewEstimateLineItem.class);
  }

  /**
   * Convert an instance of NewEstimateLineItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

