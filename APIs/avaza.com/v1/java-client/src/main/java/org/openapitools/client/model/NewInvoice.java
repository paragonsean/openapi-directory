/*
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NewInvoiceLineItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * New invoice to be created
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:56.431364-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NewInvoice {
  public static final String SERIALIZED_NAME_COMPANY_I_D_F_K = "CompanyIDFK";
  @SerializedName(SERIALIZED_NAME_COMPANY_I_D_F_K)
  private Integer companyIDFK;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "CompanyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "CurrencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_CUSTOMER_P_O_NUMBER = "CustomerPONumber";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_P_O_NUMBER)
  private String customerPONumber;

  public static final String SERIALIZED_NAME_DATE_ISSUED = "DateIssued";
  @SerializedName(SERIALIZED_NAME_DATE_ISSUED)
  private OffsetDateTime dateIssued;

  public static final String SERIALIZED_NAME_DUE_DATE = "DueDate";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private OffsetDateTime dueDate;

  public static final String SERIALIZED_NAME_EMAIL = "Email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EXCHANGE_RATE = "ExchangeRate";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_RATE)
  private Double exchangeRate;

  public static final String SERIALIZED_NAME_FIRSTNAME = "Firstname";
  @SerializedName(SERIALIZED_NAME_FIRSTNAME)
  private String firstname;

  public static final String SERIALIZED_NAME_INVOICE_NUMBER = "InvoiceNumber";
  @SerializedName(SERIALIZED_NAME_INVOICE_NUMBER)
  private String invoiceNumber;

  public static final String SERIALIZED_NAME_INVOICE_TEMPLATE_I_D_F_K = "InvoiceTemplateIDFK";
  @SerializedName(SERIALIZED_NAME_INVOICE_TEMPLATE_I_D_F_K)
  private Integer invoiceTemplateIDFK;

  public static final String SERIALIZED_NAME_LASTNAME = "Lastname";
  @SerializedName(SERIALIZED_NAME_LASTNAME)
  private String lastname;

  public static final String SERIALIZED_NAME_LINE_ITEMS = "LineItems";
  @SerializedName(SERIALIZED_NAME_LINE_ITEMS)
  private List<NewInvoiceLineItem> lineItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_NOTES = "Notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_PAYMENT_TERMS = "PaymentTerms";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TERMS)
  private Integer paymentTerms;

  public static final String SERIALIZED_NAME_SUBJECT = "Subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_TRANSACTION_PREFIX = "TransactionPrefix";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_PREFIX)
  private String transactionPrefix;

  public static final String SERIALIZED_NAME_TRANSACTION_TAX_CONFIG_CODE = "TransactionTaxConfigCode";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TAX_CONFIG_CODE)
  private String transactionTaxConfigCode;

  public NewInvoice() {
  }

  public NewInvoice companyIDFK(Integer companyIDFK) {
    this.companyIDFK = companyIDFK;
    return this;
  }

  /**
   * If left blank then you must specify Company Name.
   * @return companyIDFK
   */
  @javax.annotation.Nullable
  public Integer getCompanyIDFK() {
    return companyIDFK;
  }

  public void setCompanyIDFK(Integer companyIDFK) {
    this.companyIDFK = companyIDFK;
  }


  public NewInvoice companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * If left blank then you must specify Company ID. Specified Name will be used to match existing customer record. If not matched then it will be used to create a new customer. First Name, Last Name and Email will only be used if it is a new company. If the Company name appears multiple times we will check the email address to find a matching company. If email address doesn&#39;t identify a matching company then the invoice creation will be rejected.
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public NewInvoice currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Expects ISO Standard 3 character currency code. If left blank the currency will default to account&#39;s currency in general setting. For existing companies this field will be ignored and the invoice will use the currency of the customer. For new customers if the currency is not specified then account currency will be used otherwise the specified currency will be used.
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public NewInvoice customerPONumber(String customerPONumber) {
    this.customerPONumber = customerPONumber;
    return this;
  }

  /**
   * Plain UTF8 text. 100 characters max
   * @return customerPONumber
   */
  @javax.annotation.Nullable
  public String getCustomerPONumber() {
    return customerPONumber;
  }

  public void setCustomerPONumber(String customerPONumber) {
    this.customerPONumber = customerPONumber;
  }


  public NewInvoice dateIssued(OffsetDateTime dateIssued) {
    this.dateIssued = dateIssued;
    return this;
  }

  /**
   * If not specified it will use today&#39;s date. The date should be specified as local date.
   * @return dateIssued
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateIssued() {
    return dateIssued;
  }

  public void setDateIssued(OffsetDateTime dateIssued) {
    this.dateIssued = dateIssued;
  }


  public NewInvoice dueDate(OffsetDateTime dueDate) {
    this.dueDate = dueDate;
    return this;
  }

  /**
   * It will be auto calculated based on the payment term and issue date. Due Date must be greater than or equal to Issue Date. If the Due Date is specified then Payment Terms will be set to -1 (Custom)
   * @return dueDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDueDate() {
    return dueDate;
  }

  public void setDueDate(OffsetDateTime dueDate) {
    this.dueDate = dueDate;
  }


  public NewInvoice email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Specified value will be used to create a new customer contact only if a new customer is being created.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public NewInvoice exchangeRate(Double exchangeRate) {
    this.exchangeRate = exchangeRate;
    return this;
  }

  /**
   * Exchange rate is only valid for invoices in currency other than default account currency. If not specified it will get the market rate based on the Date Issued.
   * @return exchangeRate
   */
  @javax.annotation.Nullable
  public Double getExchangeRate() {
    return exchangeRate;
  }

  public void setExchangeRate(Double exchangeRate) {
    this.exchangeRate = exchangeRate;
  }


  public NewInvoice firstname(String firstname) {
    this.firstname = firstname;
    return this;
  }

  /**
   * Specified value will be used to create a new customer contact only if a new customer is being created.
   * @return firstname
   */
  @javax.annotation.Nullable
  public String getFirstname() {
    return firstname;
  }

  public void setFirstname(String firstname) {
    this.firstname = firstname;
  }


  public NewInvoice invoiceNumber(String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
    return this;
  }

  /**
   * Pass any string. If left blank it will use the next number in the auto incrementing sequence. If an integer is passed then the largest integer will be use as the seed to auto generate the next invoice number in the sequence.
   * @return invoiceNumber
   */
  @javax.annotation.Nullable
  public String getInvoiceNumber() {
    return invoiceNumber;
  }

  public void setInvoiceNumber(String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
  }


  public NewInvoice invoiceTemplateIDFK(Integer invoiceTemplateIDFK) {
    this.invoiceTemplateIDFK = invoiceTemplateIDFK;
    return this;
  }

  /**
   * If left blank the account default invoice template will be used.
   * @return invoiceTemplateIDFK
   */
  @javax.annotation.Nullable
  public Integer getInvoiceTemplateIDFK() {
    return invoiceTemplateIDFK;
  }

  public void setInvoiceTemplateIDFK(Integer invoiceTemplateIDFK) {
    this.invoiceTemplateIDFK = invoiceTemplateIDFK;
  }


  public NewInvoice lastname(String lastname) {
    this.lastname = lastname;
    return this;
  }

  /**
   * Specified value will be used to create a new customer contact only if a new customer is being created.
   * @return lastname
   */
  @javax.annotation.Nullable
  public String getLastname() {
    return lastname;
  }

  public void setLastname(String lastname) {
    this.lastname = lastname;
  }


  public NewInvoice lineItems(List<NewInvoiceLineItem> lineItems) {
    this.lineItems = lineItems;
    return this;
  }

  public NewInvoice addLineItemsItem(NewInvoiceLineItem lineItemsItem) {
    if (this.lineItems == null) {
      this.lineItems = new ArrayList<>();
    }
    this.lineItems.add(lineItemsItem);
    return this;
  }

  /**
   * Get lineItems
   * @return lineItems
   */
  @javax.annotation.Nullable
  public List<NewInvoiceLineItem> getLineItems() {
    return lineItems;
  }

  public void setLineItems(List<NewInvoiceLineItem> lineItems) {
    this.lineItems = lineItems;
  }


  public NewInvoice notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Plain UTF8 text. (no HTML). Max 2000 characters
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public NewInvoice paymentTerms(Integer paymentTerms) {
    this.paymentTerms = paymentTerms;
    return this;
  }

  /**
   *  \&quot;If left blank we will set it to customer default. If specified then it must match one of your existing pre configured payment term periods. Your account starts with:  (-1 --- Custom, 0 --- Upon Receipt, 7 --- 7 Days, 15 --- 15 Days, 30 --- 30 Days, 45 --- 45 Days, 60 --- 60 Days)
   * @return paymentTerms
   */
  @javax.annotation.Nullable
  public Integer getPaymentTerms() {
    return paymentTerms;
  }

  public void setPaymentTerms(Integer paymentTerms) {
    this.paymentTerms = paymentTerms;
  }


  public NewInvoice subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Plain UTF8 text. (no HTML). 255 characters max
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public NewInvoice transactionPrefix(String transactionPrefix) {
    this.transactionPrefix = transactionPrefix;
    return this;
  }

  /**
   * A prefix for the Invoice number. e.g. &#39;INV&#39;. If left blank it will be set to the account default. Max length 20 characters.
   * @return transactionPrefix
   */
  @javax.annotation.Nullable
  public String getTransactionPrefix() {
    return transactionPrefix;
  }

  public void setTransactionPrefix(String transactionPrefix) {
    this.transactionPrefix = transactionPrefix;
  }


  public NewInvoice transactionTaxConfigCode(String transactionTaxConfigCode) {
    this.transactionTaxConfigCode = transactionTaxConfigCode;
    return this;
  }

  /**
   * Possible values are (EX --- Tax Exclusive, INC --- Tax Inclusive). If left empty it will use the account default.
   * @return transactionTaxConfigCode
   */
  @javax.annotation.Nullable
  public String getTransactionTaxConfigCode() {
    return transactionTaxConfigCode;
  }

  public void setTransactionTaxConfigCode(String transactionTaxConfigCode) {
    this.transactionTaxConfigCode = transactionTaxConfigCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewInvoice newInvoice = (NewInvoice) o;
    return Objects.equals(this.companyIDFK, newInvoice.companyIDFK) &&
        Objects.equals(this.companyName, newInvoice.companyName) &&
        Objects.equals(this.currencyCode, newInvoice.currencyCode) &&
        Objects.equals(this.customerPONumber, newInvoice.customerPONumber) &&
        Objects.equals(this.dateIssued, newInvoice.dateIssued) &&
        Objects.equals(this.dueDate, newInvoice.dueDate) &&
        Objects.equals(this.email, newInvoice.email) &&
        Objects.equals(this.exchangeRate, newInvoice.exchangeRate) &&
        Objects.equals(this.firstname, newInvoice.firstname) &&
        Objects.equals(this.invoiceNumber, newInvoice.invoiceNumber) &&
        Objects.equals(this.invoiceTemplateIDFK, newInvoice.invoiceTemplateIDFK) &&
        Objects.equals(this.lastname, newInvoice.lastname) &&
        Objects.equals(this.lineItems, newInvoice.lineItems) &&
        Objects.equals(this.notes, newInvoice.notes) &&
        Objects.equals(this.paymentTerms, newInvoice.paymentTerms) &&
        Objects.equals(this.subject, newInvoice.subject) &&
        Objects.equals(this.transactionPrefix, newInvoice.transactionPrefix) &&
        Objects.equals(this.transactionTaxConfigCode, newInvoice.transactionTaxConfigCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(companyIDFK, companyName, currencyCode, customerPONumber, dateIssued, dueDate, email, exchangeRate, firstname, invoiceNumber, invoiceTemplateIDFK, lastname, lineItems, notes, paymentTerms, subject, transactionPrefix, transactionTaxConfigCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewInvoice {\n");
    sb.append("    companyIDFK: ").append(toIndentedString(companyIDFK)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    customerPONumber: ").append(toIndentedString(customerPONumber)).append("\n");
    sb.append("    dateIssued: ").append(toIndentedString(dateIssued)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    exchangeRate: ").append(toIndentedString(exchangeRate)).append("\n");
    sb.append("    firstname: ").append(toIndentedString(firstname)).append("\n");
    sb.append("    invoiceNumber: ").append(toIndentedString(invoiceNumber)).append("\n");
    sb.append("    invoiceTemplateIDFK: ").append(toIndentedString(invoiceTemplateIDFK)).append("\n");
    sb.append("    lastname: ").append(toIndentedString(lastname)).append("\n");
    sb.append("    lineItems: ").append(toIndentedString(lineItems)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    paymentTerms: ").append(toIndentedString(paymentTerms)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    transactionPrefix: ").append(toIndentedString(transactionPrefix)).append("\n");
    sb.append("    transactionTaxConfigCode: ").append(toIndentedString(transactionTaxConfigCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CompanyIDFK");
    openapiFields.add("CompanyName");
    openapiFields.add("CurrencyCode");
    openapiFields.add("CustomerPONumber");
    openapiFields.add("DateIssued");
    openapiFields.add("DueDate");
    openapiFields.add("Email");
    openapiFields.add("ExchangeRate");
    openapiFields.add("Firstname");
    openapiFields.add("InvoiceNumber");
    openapiFields.add("InvoiceTemplateIDFK");
    openapiFields.add("Lastname");
    openapiFields.add("LineItems");
    openapiFields.add("Notes");
    openapiFields.add("PaymentTerms");
    openapiFields.add("Subject");
    openapiFields.add("TransactionPrefix");
    openapiFields.add("TransactionTaxConfigCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NewInvoice
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NewInvoice.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NewInvoice is not found in the empty JSON string", NewInvoice.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NewInvoice.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NewInvoice` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CompanyName") != null && !jsonObj.get("CompanyName").isJsonNull()) && !jsonObj.get("CompanyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CompanyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CompanyName").toString()));
      }
      if ((jsonObj.get("CurrencyCode") != null && !jsonObj.get("CurrencyCode").isJsonNull()) && !jsonObj.get("CurrencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrencyCode").toString()));
      }
      if ((jsonObj.get("CustomerPONumber") != null && !jsonObj.get("CustomerPONumber").isJsonNull()) && !jsonObj.get("CustomerPONumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CustomerPONumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CustomerPONumber").toString()));
      }
      if ((jsonObj.get("Email") != null && !jsonObj.get("Email").isJsonNull()) && !jsonObj.get("Email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Email").toString()));
      }
      if ((jsonObj.get("Firstname") != null && !jsonObj.get("Firstname").isJsonNull()) && !jsonObj.get("Firstname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Firstname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Firstname").toString()));
      }
      if ((jsonObj.get("InvoiceNumber") != null && !jsonObj.get("InvoiceNumber").isJsonNull()) && !jsonObj.get("InvoiceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InvoiceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InvoiceNumber").toString()));
      }
      if ((jsonObj.get("Lastname") != null && !jsonObj.get("Lastname").isJsonNull()) && !jsonObj.get("Lastname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Lastname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Lastname").toString()));
      }
      if (jsonObj.get("LineItems") != null && !jsonObj.get("LineItems").isJsonNull()) {
        JsonArray jsonArraylineItems = jsonObj.getAsJsonArray("LineItems");
        if (jsonArraylineItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("LineItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `LineItems` to be an array in the JSON string but got `%s`", jsonObj.get("LineItems").toString()));
          }

          // validate the optional field `LineItems` (array)
          for (int i = 0; i < jsonArraylineItems.size(); i++) {
            NewInvoiceLineItem.validateJsonElement(jsonArraylineItems.get(i));
          };
        }
      }
      if ((jsonObj.get("Notes") != null && !jsonObj.get("Notes").isJsonNull()) && !jsonObj.get("Notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Notes").toString()));
      }
      if ((jsonObj.get("Subject") != null && !jsonObj.get("Subject").isJsonNull()) && !jsonObj.get("Subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Subject").toString()));
      }
      if ((jsonObj.get("TransactionPrefix") != null && !jsonObj.get("TransactionPrefix").isJsonNull()) && !jsonObj.get("TransactionPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TransactionPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TransactionPrefix").toString()));
      }
      if ((jsonObj.get("TransactionTaxConfigCode") != null && !jsonObj.get("TransactionTaxConfigCode").isJsonNull()) && !jsonObj.get("TransactionTaxConfigCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TransactionTaxConfigCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TransactionTaxConfigCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NewInvoice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NewInvoice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NewInvoice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NewInvoice.class));

       return (TypeAdapter<T>) new TypeAdapter<NewInvoice>() {
           @Override
           public void write(JsonWriter out, NewInvoice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NewInvoice read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NewInvoice given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NewInvoice
   * @throws IOException if the JSON string is invalid with respect to NewInvoice
   */
  public static NewInvoice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NewInvoice.class);
  }

  /**
   * Convert an instance of NewInvoice to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

