/*
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NewProjectModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:56.431364-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NewProjectModel {
  public static final String SERIALIZED_NAME_BUDGET_AMOUNT = "BudgetAmount";
  @SerializedName(SERIALIZED_NAME_BUDGET_AMOUNT)
  private Double budgetAmount;

  public static final String SERIALIZED_NAME_BUDGET_HOURS = "BudgetHours";
  @SerializedName(SERIALIZED_NAME_BUDGET_HOURS)
  private Double budgetHours;

  public static final String SERIALIZED_NAME_COMPANY_I_D_F_K = "CompanyIDFK";
  @SerializedName(SERIALIZED_NAME_COMPANY_I_D_F_K)
  private Integer companyIDFK;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "CompanyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "CurrencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_END_DATE = "EndDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_POPULATE_DEFAULT_PROJECT_MEMBERS = "PopulateDefaultProjectMembers";
  @SerializedName(SERIALIZED_NAME_POPULATE_DEFAULT_PROJECT_MEMBERS)
  private Boolean populateDefaultProjectMembers;

  public static final String SERIALIZED_NAME_PROJECT_CATEGORY_I_D_F_K = "ProjectCategoryIDFK";
  @SerializedName(SERIALIZED_NAME_PROJECT_CATEGORY_I_D_F_K)
  private Integer projectCategoryIDFK;

  public static final String SERIALIZED_NAME_PROJECT_CODE = "ProjectCode";
  @SerializedName(SERIALIZED_NAME_PROJECT_CODE)
  private String projectCode;

  public static final String SERIALIZED_NAME_PROJECT_NOTES = "ProjectNotes";
  @SerializedName(SERIALIZED_NAME_PROJECT_NOTES)
  private String projectNotes;

  public static final String SERIALIZED_NAME_PROJECT_STATUS_CODE = "ProjectStatusCode";
  @SerializedName(SERIALIZED_NAME_PROJECT_STATUS_CODE)
  private String projectStatusCode;

  public static final String SERIALIZED_NAME_PROJECT_TITLE = "ProjectTitle";
  @SerializedName(SERIALIZED_NAME_PROJECT_TITLE)
  private String projectTitle;

  public static final String SERIALIZED_NAME_START_DATE = "StartDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_TIMESHEET_APPROVAL_REQUIREDBY_DEFAULT = "TimesheetApprovalRequiredbyDefault";
  @SerializedName(SERIALIZED_NAME_TIMESHEET_APPROVAL_REQUIREDBY_DEFAULT)
  private Boolean timesheetApprovalRequiredbyDefault;

  public static final String SERIALIZED_NAME_IS_TASK_REQUIRED_ON_TIMESHEET = "isTaskRequiredOnTimesheet";
  @SerializedName(SERIALIZED_NAME_IS_TASK_REQUIRED_ON_TIMESHEET)
  private Boolean isTaskRequiredOnTimesheet;

  public NewProjectModel() {
  }

  public NewProjectModel budgetAmount(Double budgetAmount) {
    this.budgetAmount = budgetAmount;
    return this;
  }

  /**
   * Get budgetAmount
   * @return budgetAmount
   */
  @javax.annotation.Nullable
  public Double getBudgetAmount() {
    return budgetAmount;
  }

  public void setBudgetAmount(Double budgetAmount) {
    this.budgetAmount = budgetAmount;
  }


  public NewProjectModel budgetHours(Double budgetHours) {
    this.budgetHours = budgetHours;
    return this;
  }

  /**
   * Get budgetHours
   * @return budgetHours
   */
  @javax.annotation.Nullable
  public Double getBudgetHours() {
    return budgetHours;
  }

  public void setBudgetHours(Double budgetHours) {
    this.budgetHours = budgetHours;
  }


  public NewProjectModel companyIDFK(Integer companyIDFK) {
    this.companyIDFK = companyIDFK;
    return this;
  }

  /**
   * An ID of a company in Avaza to create the Project under. You must provide either a CompanyID, or a CompanyName
   * @return companyIDFK
   */
  @javax.annotation.Nullable
  public Integer getCompanyIDFK() {
    return companyIDFK;
  }

  public void setCompanyIDFK(Integer companyIDFK) {
    this.companyIDFK = companyIDFK;
  }


  public NewProjectModel companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * The name for a Company to create the project under. Will create company unless it matches an existing company name
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public NewProjectModel currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * The ISO 3 letter currency code to use when creating a new Company. If not provided, the account&#39;s default currency will be used.
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public NewProjectModel endDate(OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Get endDate
   * @return endDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public NewProjectModel populateDefaultProjectMembers(Boolean populateDefaultProjectMembers) {
    this.populateDefaultProjectMembers = populateDefaultProjectMembers;
    return this;
  }

  /**
   * Defaults to true.
   * @return populateDefaultProjectMembers
   */
  @javax.annotation.Nullable
  public Boolean getPopulateDefaultProjectMembers() {
    return populateDefaultProjectMembers;
  }

  public void setPopulateDefaultProjectMembers(Boolean populateDefaultProjectMembers) {
    this.populateDefaultProjectMembers = populateDefaultProjectMembers;
  }


  public NewProjectModel projectCategoryIDFK(Integer projectCategoryIDFK) {
    this.projectCategoryIDFK = projectCategoryIDFK;
    return this;
  }

  /**
   * Get projectCategoryIDFK
   * @return projectCategoryIDFK
   */
  @javax.annotation.Nullable
  public Integer getProjectCategoryIDFK() {
    return projectCategoryIDFK;
  }

  public void setProjectCategoryIDFK(Integer projectCategoryIDFK) {
    this.projectCategoryIDFK = projectCategoryIDFK;
  }


  public NewProjectModel projectCode(String projectCode) {
    this.projectCode = projectCode;
    return this;
  }

  /**
   * Used when Manual Project Codes are enabled
   * @return projectCode
   */
  @javax.annotation.Nullable
  public String getProjectCode() {
    return projectCode;
  }

  public void setProjectCode(String projectCode) {
    this.projectCode = projectCode;
  }


  public NewProjectModel projectNotes(String projectNotes) {
    this.projectNotes = projectNotes;
    return this;
  }

  /**
   * Any descriptive notes about the project. (2000 characters max)
   * @return projectNotes
   */
  @javax.annotation.Nullable
  public String getProjectNotes() {
    return projectNotes;
  }

  public void setProjectNotes(String projectNotes) {
    this.projectNotes = projectNotes;
  }


  public NewProjectModel projectStatusCode(String projectStatusCode) {
    this.projectStatusCode = projectStatusCode;
    return this;
  }

  /**
   * Get projectStatusCode
   * @return projectStatusCode
   */
  @javax.annotation.Nullable
  public String getProjectStatusCode() {
    return projectStatusCode;
  }

  public void setProjectStatusCode(String projectStatusCode) {
    this.projectStatusCode = projectStatusCode;
  }


  public NewProjectModel projectTitle(String projectTitle) {
    this.projectTitle = projectTitle;
    return this;
  }

  /**
   * The title of the new project. (255 characters max)
   * @return projectTitle
   */
  @javax.annotation.Nonnull
  public String getProjectTitle() {
    return projectTitle;
  }

  public void setProjectTitle(String projectTitle) {
    this.projectTitle = projectTitle;
  }


  public NewProjectModel startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public NewProjectModel timesheetApprovalRequiredbyDefault(Boolean timesheetApprovalRequiredbyDefault) {
    this.timesheetApprovalRequiredbyDefault = timesheetApprovalRequiredbyDefault;
    return this;
  }

  /**
   * Get timesheetApprovalRequiredbyDefault
   * @return timesheetApprovalRequiredbyDefault
   */
  @javax.annotation.Nullable
  public Boolean getTimesheetApprovalRequiredbyDefault() {
    return timesheetApprovalRequiredbyDefault;
  }

  public void setTimesheetApprovalRequiredbyDefault(Boolean timesheetApprovalRequiredbyDefault) {
    this.timesheetApprovalRequiredbyDefault = timesheetApprovalRequiredbyDefault;
  }


  public NewProjectModel isTaskRequiredOnTimesheet(Boolean isTaskRequiredOnTimesheet) {
    this.isTaskRequiredOnTimesheet = isTaskRequiredOnTimesheet;
    return this;
  }

  /**
   * Get isTaskRequiredOnTimesheet
   * @return isTaskRequiredOnTimesheet
   */
  @javax.annotation.Nullable
  public Boolean getIsTaskRequiredOnTimesheet() {
    return isTaskRequiredOnTimesheet;
  }

  public void setIsTaskRequiredOnTimesheet(Boolean isTaskRequiredOnTimesheet) {
    this.isTaskRequiredOnTimesheet = isTaskRequiredOnTimesheet;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewProjectModel newProjectModel = (NewProjectModel) o;
    return Objects.equals(this.budgetAmount, newProjectModel.budgetAmount) &&
        Objects.equals(this.budgetHours, newProjectModel.budgetHours) &&
        Objects.equals(this.companyIDFK, newProjectModel.companyIDFK) &&
        Objects.equals(this.companyName, newProjectModel.companyName) &&
        Objects.equals(this.currencyCode, newProjectModel.currencyCode) &&
        Objects.equals(this.endDate, newProjectModel.endDate) &&
        Objects.equals(this.populateDefaultProjectMembers, newProjectModel.populateDefaultProjectMembers) &&
        Objects.equals(this.projectCategoryIDFK, newProjectModel.projectCategoryIDFK) &&
        Objects.equals(this.projectCode, newProjectModel.projectCode) &&
        Objects.equals(this.projectNotes, newProjectModel.projectNotes) &&
        Objects.equals(this.projectStatusCode, newProjectModel.projectStatusCode) &&
        Objects.equals(this.projectTitle, newProjectModel.projectTitle) &&
        Objects.equals(this.startDate, newProjectModel.startDate) &&
        Objects.equals(this.timesheetApprovalRequiredbyDefault, newProjectModel.timesheetApprovalRequiredbyDefault) &&
        Objects.equals(this.isTaskRequiredOnTimesheet, newProjectModel.isTaskRequiredOnTimesheet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(budgetAmount, budgetHours, companyIDFK, companyName, currencyCode, endDate, populateDefaultProjectMembers, projectCategoryIDFK, projectCode, projectNotes, projectStatusCode, projectTitle, startDate, timesheetApprovalRequiredbyDefault, isTaskRequiredOnTimesheet);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewProjectModel {\n");
    sb.append("    budgetAmount: ").append(toIndentedString(budgetAmount)).append("\n");
    sb.append("    budgetHours: ").append(toIndentedString(budgetHours)).append("\n");
    sb.append("    companyIDFK: ").append(toIndentedString(companyIDFK)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    populateDefaultProjectMembers: ").append(toIndentedString(populateDefaultProjectMembers)).append("\n");
    sb.append("    projectCategoryIDFK: ").append(toIndentedString(projectCategoryIDFK)).append("\n");
    sb.append("    projectCode: ").append(toIndentedString(projectCode)).append("\n");
    sb.append("    projectNotes: ").append(toIndentedString(projectNotes)).append("\n");
    sb.append("    projectStatusCode: ").append(toIndentedString(projectStatusCode)).append("\n");
    sb.append("    projectTitle: ").append(toIndentedString(projectTitle)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    timesheetApprovalRequiredbyDefault: ").append(toIndentedString(timesheetApprovalRequiredbyDefault)).append("\n");
    sb.append("    isTaskRequiredOnTimesheet: ").append(toIndentedString(isTaskRequiredOnTimesheet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BudgetAmount");
    openapiFields.add("BudgetHours");
    openapiFields.add("CompanyIDFK");
    openapiFields.add("CompanyName");
    openapiFields.add("CurrencyCode");
    openapiFields.add("EndDate");
    openapiFields.add("PopulateDefaultProjectMembers");
    openapiFields.add("ProjectCategoryIDFK");
    openapiFields.add("ProjectCode");
    openapiFields.add("ProjectNotes");
    openapiFields.add("ProjectStatusCode");
    openapiFields.add("ProjectTitle");
    openapiFields.add("StartDate");
    openapiFields.add("TimesheetApprovalRequiredbyDefault");
    openapiFields.add("isTaskRequiredOnTimesheet");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ProjectTitle");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NewProjectModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NewProjectModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NewProjectModel is not found in the empty JSON string", NewProjectModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NewProjectModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NewProjectModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NewProjectModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CompanyName") != null && !jsonObj.get("CompanyName").isJsonNull()) && !jsonObj.get("CompanyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CompanyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CompanyName").toString()));
      }
      if ((jsonObj.get("CurrencyCode") != null && !jsonObj.get("CurrencyCode").isJsonNull()) && !jsonObj.get("CurrencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrencyCode").toString()));
      }
      if ((jsonObj.get("ProjectCode") != null && !jsonObj.get("ProjectCode").isJsonNull()) && !jsonObj.get("ProjectCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProjectCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProjectCode").toString()));
      }
      if ((jsonObj.get("ProjectNotes") != null && !jsonObj.get("ProjectNotes").isJsonNull()) && !jsonObj.get("ProjectNotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProjectNotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProjectNotes").toString()));
      }
      if ((jsonObj.get("ProjectStatusCode") != null && !jsonObj.get("ProjectStatusCode").isJsonNull()) && !jsonObj.get("ProjectStatusCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProjectStatusCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProjectStatusCode").toString()));
      }
      if (!jsonObj.get("ProjectTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProjectTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProjectTitle").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NewProjectModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NewProjectModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NewProjectModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NewProjectModel.class));

       return (TypeAdapter<T>) new TypeAdapter<NewProjectModel>() {
           @Override
           public void write(JsonWriter out, NewProjectModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NewProjectModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NewProjectModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NewProjectModel
   * @throws IOException if the JSON string is invalid with respect to NewProjectModel
   */
  public static NewProjectModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NewProjectModel.class);
  }

  /**
   * Convert an instance of NewProjectModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

