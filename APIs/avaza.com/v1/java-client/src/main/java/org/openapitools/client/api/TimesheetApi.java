/*
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.NewTimesheet;
import java.time.OffsetDateTime;
import org.openapitools.client.model.TimesheetDetails;
import org.openapitools.client.model.TimesheetList;
import org.openapitools.client.model.UpdateTimesheetModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TimesheetApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TimesheetApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TimesheetApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for timesheetDelete
     * @param id The id of the timesheet entry to be deleted (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timesheetDeleteCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Timesheet/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call timesheetDeleteValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling timesheetDelete(Async)");
        }

        return timesheetDeleteCall(id, _callback);

    }

    /**
     * Delete a Timesheet Entry
     * 
     * @param id The id of the timesheet entry to be deleted (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object timesheetDelete(Long id) throws ApiException {
        ApiResponse<Object> localVarResp = timesheetDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete a Timesheet Entry
     * 
     * @param id The id of the timesheet entry to be deleted (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> timesheetDeleteWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = timesheetDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Timesheet Entry (asynchronously)
     * 
     * @param id The id of the timesheet entry to be deleted (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timesheetDeleteAsync(Long id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = timesheetDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for timesheetGet
     * @param updatedAfter  (optional)
     * @param entryDateFrom  (optional)
     * @param entryDateTo  (optional)
     * @param userID The UserID of a timesheet user to filter timesheets for. Only api users with certain higher roles can see timesheets across multiple users. (optional)
     * @param userEmail  (optional)
     * @param categoryName  (optional)
     * @param projectID  (optional)
     * @param isBillable  (optional)
     * @param isInvoiced  (optional)
     * @param isTimerRunning  (optional)
     * @param pageSize Number of items per page (max 1000) (optional)
     * @param pageNumber Page to display. Starts from 1. (optional)
     * @param includeInvoiceDetails Defaults to false. When true, the InvoiceIDFK value will be included in the response. (optional)
     * @param sort Optional sorting instruction. Currently possible values: \&quot;DateUpdated\&quot;, \&quot;DateCreated\&quot;, \&quot;DateUpdated desc\&quot;, \&quot;DateCreated desc\&quot;,\&quot;EntryDate\&quot;, \&quot;EntryDate desc\&quot;, \&quot;StartTimeLocal\&quot;,\&quot;StartTimeLocal desc\&quot;, \&quot;TimeSheetEntryID\&quot;, \&quot;TimeSheetEntryID desc\&quot; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timesheetGetCall(OffsetDateTime updatedAfter, OffsetDateTime entryDateFrom, OffsetDateTime entryDateTo, Integer userID, String userEmail, String categoryName, Integer projectID, Boolean isBillable, Boolean isInvoiced, Boolean isTimerRunning, Integer pageSize, Integer pageNumber, Boolean includeInvoiceDetails, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Timesheet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updatedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UpdatedAfter", updatedAfter));
        }

        if (entryDateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EntryDateFrom", entryDateFrom));
        }

        if (entryDateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EntryDateTo", entryDateTo));
        }

        if (userID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UserID", userID));
        }

        if (userEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UserEmail", userEmail));
        }

        if (categoryName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CategoryName", categoryName));
        }

        if (projectID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ProjectID", projectID));
        }

        if (isBillable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isBillable", isBillable));
        }

        if (isInvoiced != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isInvoiced", isInvoiced));
        }

        if (isTimerRunning != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isTimerRunning", isTimerRunning));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (includeInvoiceDetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeInvoiceDetails", includeInvoiceDetails));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call timesheetGetValidateBeforeCall(OffsetDateTime updatedAfter, OffsetDateTime entryDateFrom, OffsetDateTime entryDateTo, Integer userID, String userEmail, String categoryName, Integer projectID, Boolean isBillable, Boolean isInvoiced, Boolean isTimerRunning, Integer pageSize, Integer pageNumber, Boolean includeInvoiceDetails, String sort, final ApiCallback _callback) throws ApiException {
        return timesheetGetCall(updatedAfter, entryDateFrom, entryDateTo, userID, userEmail, categoryName, projectID, isBillable, isInvoiced, isTimerRunning, pageSize, pageNumber, includeInvoiceDetails, sort, _callback);

    }

    /**
     * Gets list of Timsheets
     * 
     * @param updatedAfter  (optional)
     * @param entryDateFrom  (optional)
     * @param entryDateTo  (optional)
     * @param userID The UserID of a timesheet user to filter timesheets for. Only api users with certain higher roles can see timesheets across multiple users. (optional)
     * @param userEmail  (optional)
     * @param categoryName  (optional)
     * @param projectID  (optional)
     * @param isBillable  (optional)
     * @param isInvoiced  (optional)
     * @param isTimerRunning  (optional)
     * @param pageSize Number of items per page (max 1000) (optional)
     * @param pageNumber Page to display. Starts from 1. (optional)
     * @param includeInvoiceDetails Defaults to false. When true, the InvoiceIDFK value will be included in the response. (optional)
     * @param sort Optional sorting instruction. Currently possible values: \&quot;DateUpdated\&quot;, \&quot;DateCreated\&quot;, \&quot;DateUpdated desc\&quot;, \&quot;DateCreated desc\&quot;,\&quot;EntryDate\&quot;, \&quot;EntryDate desc\&quot;, \&quot;StartTimeLocal\&quot;,\&quot;StartTimeLocal desc\&quot;, \&quot;TimeSheetEntryID\&quot;, \&quot;TimeSheetEntryID desc\&quot; (optional)
     * @return TimesheetList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public TimesheetList timesheetGet(OffsetDateTime updatedAfter, OffsetDateTime entryDateFrom, OffsetDateTime entryDateTo, Integer userID, String userEmail, String categoryName, Integer projectID, Boolean isBillable, Boolean isInvoiced, Boolean isTimerRunning, Integer pageSize, Integer pageNumber, Boolean includeInvoiceDetails, String sort) throws ApiException {
        ApiResponse<TimesheetList> localVarResp = timesheetGetWithHttpInfo(updatedAfter, entryDateFrom, entryDateTo, userID, userEmail, categoryName, projectID, isBillable, isInvoiced, isTimerRunning, pageSize, pageNumber, includeInvoiceDetails, sort);
        return localVarResp.getData();
    }

    /**
     * Gets list of Timsheets
     * 
     * @param updatedAfter  (optional)
     * @param entryDateFrom  (optional)
     * @param entryDateTo  (optional)
     * @param userID The UserID of a timesheet user to filter timesheets for. Only api users with certain higher roles can see timesheets across multiple users. (optional)
     * @param userEmail  (optional)
     * @param categoryName  (optional)
     * @param projectID  (optional)
     * @param isBillable  (optional)
     * @param isInvoiced  (optional)
     * @param isTimerRunning  (optional)
     * @param pageSize Number of items per page (max 1000) (optional)
     * @param pageNumber Page to display. Starts from 1. (optional)
     * @param includeInvoiceDetails Defaults to false. When true, the InvoiceIDFK value will be included in the response. (optional)
     * @param sort Optional sorting instruction. Currently possible values: \&quot;DateUpdated\&quot;, \&quot;DateCreated\&quot;, \&quot;DateUpdated desc\&quot;, \&quot;DateCreated desc\&quot;,\&quot;EntryDate\&quot;, \&quot;EntryDate desc\&quot;, \&quot;StartTimeLocal\&quot;,\&quot;StartTimeLocal desc\&quot;, \&quot;TimeSheetEntryID\&quot;, \&quot;TimeSheetEntryID desc\&quot; (optional)
     * @return ApiResponse&lt;TimesheetList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TimesheetList> timesheetGetWithHttpInfo(OffsetDateTime updatedAfter, OffsetDateTime entryDateFrom, OffsetDateTime entryDateTo, Integer userID, String userEmail, String categoryName, Integer projectID, Boolean isBillable, Boolean isInvoiced, Boolean isTimerRunning, Integer pageSize, Integer pageNumber, Boolean includeInvoiceDetails, String sort) throws ApiException {
        okhttp3.Call localVarCall = timesheetGetValidateBeforeCall(updatedAfter, entryDateFrom, entryDateTo, userID, userEmail, categoryName, projectID, isBillable, isInvoiced, isTimerRunning, pageSize, pageNumber, includeInvoiceDetails, sort, null);
        Type localVarReturnType = new TypeToken<TimesheetList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets list of Timsheets (asynchronously)
     * 
     * @param updatedAfter  (optional)
     * @param entryDateFrom  (optional)
     * @param entryDateTo  (optional)
     * @param userID The UserID of a timesheet user to filter timesheets for. Only api users with certain higher roles can see timesheets across multiple users. (optional)
     * @param userEmail  (optional)
     * @param categoryName  (optional)
     * @param projectID  (optional)
     * @param isBillable  (optional)
     * @param isInvoiced  (optional)
     * @param isTimerRunning  (optional)
     * @param pageSize Number of items per page (max 1000) (optional)
     * @param pageNumber Page to display. Starts from 1. (optional)
     * @param includeInvoiceDetails Defaults to false. When true, the InvoiceIDFK value will be included in the response. (optional)
     * @param sort Optional sorting instruction. Currently possible values: \&quot;DateUpdated\&quot;, \&quot;DateCreated\&quot;, \&quot;DateUpdated desc\&quot;, \&quot;DateCreated desc\&quot;,\&quot;EntryDate\&quot;, \&quot;EntryDate desc\&quot;, \&quot;StartTimeLocal\&quot;,\&quot;StartTimeLocal desc\&quot;, \&quot;TimeSheetEntryID\&quot;, \&quot;TimeSheetEntryID desc\&quot; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timesheetGetAsync(OffsetDateTime updatedAfter, OffsetDateTime entryDateFrom, OffsetDateTime entryDateTo, Integer userID, String userEmail, String categoryName, Integer projectID, Boolean isBillable, Boolean isInvoiced, Boolean isTimerRunning, Integer pageSize, Integer pageNumber, Boolean includeInvoiceDetails, String sort, final ApiCallback<TimesheetList> _callback) throws ApiException {

        okhttp3.Call localVarCall = timesheetGetValidateBeforeCall(updatedAfter, entryDateFrom, entryDateTo, userID, userEmail, categoryName, projectID, isBillable, isInvoiced, isTimerRunning, pageSize, pageNumber, includeInvoiceDetails, sort, _callback);
        Type localVarReturnType = new TypeToken<TimesheetList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for timesheetGetByID
     * @param id Timesheet ID number (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timesheetGetByIDCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Timesheet/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call timesheetGetByIDValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling timesheetGetByID(Async)");
        }

        return timesheetGetByIDCall(id, _callback);

    }

    /**
     * Gets a Timesheet Entry by Timesheet ID
     * 
     * @param id Timesheet ID number (required)
     * @return TimesheetDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public TimesheetDetails timesheetGetByID(Long id) throws ApiException {
        ApiResponse<TimesheetDetails> localVarResp = timesheetGetByIDWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Gets a Timesheet Entry by Timesheet ID
     * 
     * @param id Timesheet ID number (required)
     * @return ApiResponse&lt;TimesheetDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TimesheetDetails> timesheetGetByIDWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = timesheetGetByIDValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<TimesheetDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a Timesheet Entry by Timesheet ID (asynchronously)
     * 
     * @param id Timesheet ID number (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timesheetGetByIDAsync(Long id, final ApiCallback<TimesheetDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = timesheetGetByIDValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<TimesheetDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for timesheetPost
     * @param model  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timesheetPostCall(NewTimesheet model, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/Timesheet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call timesheetPostValidateBeforeCall(NewTimesheet model, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling timesheetPost(Async)");
        }

        return timesheetPostCall(model, _callback);

    }

    /**
     * Create a new Timesheet Entry
     * 
     * @param model  (required)
     * @return TimesheetDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TimesheetDetails timesheetPost(NewTimesheet model) throws ApiException {
        ApiResponse<TimesheetDetails> localVarResp = timesheetPostWithHttpInfo(model);
        return localVarResp.getData();
    }

    /**
     * Create a new Timesheet Entry
     * 
     * @param model  (required)
     * @return ApiResponse&lt;TimesheetDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TimesheetDetails> timesheetPostWithHttpInfo(NewTimesheet model) throws ApiException {
        okhttp3.Call localVarCall = timesheetPostValidateBeforeCall(model, null);
        Type localVarReturnType = new TypeToken<TimesheetDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Timesheet Entry (asynchronously)
     * 
     * @param model  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timesheetPostAsync(NewTimesheet model, final ApiCallback<TimesheetDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = timesheetPostValidateBeforeCall(model, _callback);
        Type localVarReturnType = new TypeToken<TimesheetDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for timesheetPut
     * @param model  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timesheetPutCall(UpdateTimesheetModel model, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/Timesheet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call timesheetPutValidateBeforeCall(UpdateTimesheetModel model, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling timesheetPut(Async)");
        }

        return timesheetPutCall(model, _callback);

    }

    /**
     * Update a Timesheet
     * The FieldsToUpdate field expects a string array collection of the field names you would like updated. Valid fields to update inlcude \&quot;ProjectIDFK\&quot;, \&quot;TimeSheetCategoryIDFK\&quot;, \&quot;TaskIDFK\&quot;, \&quot;Duration\&quot;, \&quot;EntryDate\&quot;, \&quot;Notes\&quot;, \&quot;hasStartEndTime\&quot;, \&quot;CustomMetadata\&quot;. If you intend to provide start/end times on timesheets, this is achieved by including the start time in the EntryDate field (Iso date format), along with a Duration (decimal format).
     * @param model  (required)
     * @return TimesheetDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TimesheetDetails timesheetPut(UpdateTimesheetModel model) throws ApiException {
        ApiResponse<TimesheetDetails> localVarResp = timesheetPutWithHttpInfo(model);
        return localVarResp.getData();
    }

    /**
     * Update a Timesheet
     * The FieldsToUpdate field expects a string array collection of the field names you would like updated. Valid fields to update inlcude \&quot;ProjectIDFK\&quot;, \&quot;TimeSheetCategoryIDFK\&quot;, \&quot;TaskIDFK\&quot;, \&quot;Duration\&quot;, \&quot;EntryDate\&quot;, \&quot;Notes\&quot;, \&quot;hasStartEndTime\&quot;, \&quot;CustomMetadata\&quot;. If you intend to provide start/end times on timesheets, this is achieved by including the start time in the EntryDate field (Iso date format), along with a Duration (decimal format).
     * @param model  (required)
     * @return ApiResponse&lt;TimesheetDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TimesheetDetails> timesheetPutWithHttpInfo(UpdateTimesheetModel model) throws ApiException {
        okhttp3.Call localVarCall = timesheetPutValidateBeforeCall(model, null);
        Type localVarReturnType = new TypeToken<TimesheetDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Timesheet (asynchronously)
     * The FieldsToUpdate field expects a string array collection of the field names you would like updated. Valid fields to update inlcude \&quot;ProjectIDFK\&quot;, \&quot;TimeSheetCategoryIDFK\&quot;, \&quot;TaskIDFK\&quot;, \&quot;Duration\&quot;, \&quot;EntryDate\&quot;, \&quot;Notes\&quot;, \&quot;hasStartEndTime\&quot;, \&quot;CustomMetadata\&quot;. If you intend to provide start/end times on timesheets, this is achieved by including the start time in the EntryDate field (Iso date format), along with a Duration (decimal format).
     * @param model  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timesheetPutAsync(UpdateTimesheetModel model, final ApiCallback<TimesheetDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = timesheetPutValidateBeforeCall(model, _callback);
        Type localVarReturnType = new TypeToken<TimesheetDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
