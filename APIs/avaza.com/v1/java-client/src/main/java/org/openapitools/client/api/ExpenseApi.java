/*
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ExpenseAttachmentRequest;
import org.openapitools.client.model.ExpenseAttachmentUploadResult;
import org.openapitools.client.model.ExpenseDeleteResultSet;
import org.openapitools.client.model.ExpenseDetails;
import org.openapitools.client.model.ExpenseList;
import org.openapitools.client.model.NewExpense;
import java.time.OffsetDateTime;
import org.openapitools.client.model.UpdateExpense;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExpenseApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExpenseApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExpenseApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for expenseApproval
     * @param expenseIDs A collection of ExpenseID&#39;s that should be submitted for approval. If not provided, submits all verified expenses for approval. (required)
     * @param userID The user to submit the Expenses for. Defaults to current user. Only allowed to be different from the current user when the current user has rights to Impersonate other users. (optional)
     * @param sendNotifications Send email alerts to expense approvers. Defaults to true (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expenseApprovalCall(List<Long> expenseIDs, Integer userID, Boolean sendNotifications, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = expenseIDs;

        // create path and map variables
        String localVarPath = "/api/ExpenseApproval/Submit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UserID", userID));
        }

        if (sendNotifications != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SendNotifications", sendNotifications));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expenseApprovalValidateBeforeCall(List<Long> expenseIDs, Integer userID, Boolean sendNotifications, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'expenseIDs' is set
        if (expenseIDs == null) {
            throw new ApiException("Missing the required parameter 'expenseIDs' when calling expenseApproval(Async)");
        }

        return expenseApprovalCall(expenseIDs, userID, sendNotifications, _callback);

    }

    /**
     * Submit Expenses for Approval.
     * 
     * @param expenseIDs A collection of ExpenseID&#39;s that should be submitted for approval. If not provided, submits all verified expenses for approval. (required)
     * @param userID The user to submit the Expenses for. Defaults to current user. Only allowed to be different from the current user when the current user has rights to Impersonate other users. (optional)
     * @param sendNotifications Send email alerts to expense approvers. Defaults to true (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object expenseApproval(List<Long> expenseIDs, Integer userID, Boolean sendNotifications) throws ApiException {
        ApiResponse<Object> localVarResp = expenseApprovalWithHttpInfo(expenseIDs, userID, sendNotifications);
        return localVarResp.getData();
    }

    /**
     * Submit Expenses for Approval.
     * 
     * @param expenseIDs A collection of ExpenseID&#39;s that should be submitted for approval. If not provided, submits all verified expenses for approval. (required)
     * @param userID The user to submit the Expenses for. Defaults to current user. Only allowed to be different from the current user when the current user has rights to Impersonate other users. (optional)
     * @param sendNotifications Send email alerts to expense approvers. Defaults to true (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> expenseApprovalWithHttpInfo(List<Long> expenseIDs, Integer userID, Boolean sendNotifications) throws ApiException {
        okhttp3.Call localVarCall = expenseApprovalValidateBeforeCall(expenseIDs, userID, sendNotifications, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit Expenses for Approval. (asynchronously)
     * 
     * @param expenseIDs A collection of ExpenseID&#39;s that should be submitted for approval. If not provided, submits all verified expenses for approval. (required)
     * @param userID The user to submit the Expenses for. Defaults to current user. Only allowed to be different from the current user when the current user has rights to Impersonate other users. (optional)
     * @param sendNotifications Send email alerts to expense approvers. Defaults to true (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expenseApprovalAsync(List<Long> expenseIDs, Integer userID, Boolean sendNotifications, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = expenseApprovalValidateBeforeCall(expenseIDs, userID, sendNotifications, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expenseAttachment
     * @param expenseAttachmentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expenseAttachmentCall(ExpenseAttachmentRequest expenseAttachmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = expenseAttachmentRequest;

        // create path and map variables
        String localVarPath = "/api/Expense/Attachment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expenseAttachmentValidateBeforeCall(ExpenseAttachmentRequest expenseAttachmentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'expenseAttachmentRequest' is set
        if (expenseAttachmentRequest == null) {
            throw new ApiException("Missing the required parameter 'expenseAttachmentRequest' when calling expenseAttachment(Async)");
        }

        return expenseAttachmentCall(expenseAttachmentRequest, _callback);

    }

    /**
     * 
     * 
     * @param expenseAttachmentRequest  (required)
     * @return ExpenseAttachmentUploadResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ExpenseAttachmentUploadResult expenseAttachment(ExpenseAttachmentRequest expenseAttachmentRequest) throws ApiException {
        ApiResponse<ExpenseAttachmentUploadResult> localVarResp = expenseAttachmentWithHttpInfo(expenseAttachmentRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param expenseAttachmentRequest  (required)
     * @return ApiResponse&lt;ExpenseAttachmentUploadResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpenseAttachmentUploadResult> expenseAttachmentWithHttpInfo(ExpenseAttachmentRequest expenseAttachmentRequest) throws ApiException {
        okhttp3.Call localVarCall = expenseAttachmentValidateBeforeCall(expenseAttachmentRequest, null);
        Type localVarReturnType = new TypeToken<ExpenseAttachmentUploadResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param expenseAttachmentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expenseAttachmentAsync(ExpenseAttachmentRequest expenseAttachmentRequest, final ApiCallback<ExpenseAttachmentUploadResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = expenseAttachmentValidateBeforeCall(expenseAttachmentRequest, _callback);
        Type localVarReturnType = new TypeToken<ExpenseAttachmentUploadResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expenseDelete
     * @param expenseIDs A collection of ExpenseIDs to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expenseDeleteCall(List<Long> expenseIDs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = expenseIDs;

        // create path and map variables
        String localVarPath = "/api/Expense";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expenseDeleteValidateBeforeCall(List<Long> expenseIDs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'expenseIDs' is set
        if (expenseIDs == null) {
            throw new ApiException("Missing the required parameter 'expenseIDs' when calling expenseDelete(Async)");
        }

        return expenseDeleteCall(expenseIDs, _callback);

    }

    /**
     * Delete a Timesheet Entry
     * 
     * @param expenseIDs A collection of ExpenseIDs to delete (required)
     * @return ExpenseDeleteResultSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ExpenseDeleteResultSet expenseDelete(List<Long> expenseIDs) throws ApiException {
        ApiResponse<ExpenseDeleteResultSet> localVarResp = expenseDeleteWithHttpInfo(expenseIDs);
        return localVarResp.getData();
    }

    /**
     * Delete a Timesheet Entry
     * 
     * @param expenseIDs A collection of ExpenseIDs to delete (required)
     * @return ApiResponse&lt;ExpenseDeleteResultSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpenseDeleteResultSet> expenseDeleteWithHttpInfo(List<Long> expenseIDs) throws ApiException {
        okhttp3.Call localVarCall = expenseDeleteValidateBeforeCall(expenseIDs, null);
        Type localVarReturnType = new TypeToken<ExpenseDeleteResultSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Timesheet Entry (asynchronously)
     * 
     * @param expenseIDs A collection of ExpenseIDs to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expenseDeleteAsync(List<Long> expenseIDs, final ApiCallback<ExpenseDeleteResultSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = expenseDeleteValidateBeforeCall(expenseIDs, _callback);
        Type localVarReturnType = new TypeToken<ExpenseDeleteResultSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expenseGet
     * @param updatedAfter  (optional)
     * @param expenseDateFrom  (optional)
     * @param expenseDateTo  (optional)
     * @param userEmail  (optional)
     * @param userID  (optional)
     * @param categoryName  (optional)
     * @param customerID  (optional)
     * @param projectID  (optional)
     * @param isChargeable  (optional)
     * @param isInvoiced  (optional)
     * @param expenseReimbursementIDFK  (optional)
     * @param expensePaymentMethodIDFK  (optional)
     * @param expenseApprovalStatusCode  (optional)
     * @param search  (optional)
     * @param pageSize Number of items per page (max 1000) (optional)
     * @param pageNumber Page to display. Starts from 1. (optional)
     * @param sort  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expenseGetCall(OffsetDateTime updatedAfter, OffsetDateTime expenseDateFrom, OffsetDateTime expenseDateTo, String userEmail, Integer userID, String categoryName, Integer customerID, Integer projectID, Boolean isChargeable, Boolean isInvoiced, Long expenseReimbursementIDFK, Integer expensePaymentMethodIDFK, String expenseApprovalStatusCode, String search, Integer pageSize, Integer pageNumber, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Expense";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updatedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UpdatedAfter", updatedAfter));
        }

        if (expenseDateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExpenseDateFrom", expenseDateFrom));
        }

        if (expenseDateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExpenseDateTo", expenseDateTo));
        }

        if (userEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UserEmail", userEmail));
        }

        if (userID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UserID", userID));
        }

        if (categoryName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CategoryName", categoryName));
        }

        if (customerID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CustomerID", customerID));
        }

        if (projectID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ProjectID", projectID));
        }

        if (isChargeable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isChargeable", isChargeable));
        }

        if (isInvoiced != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isInvoiced", isInvoiced));
        }

        if (expenseReimbursementIDFK != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExpenseReimbursementIDFK", expenseReimbursementIDFK));
        }

        if (expensePaymentMethodIDFK != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExpensePaymentMethodIDFK", expensePaymentMethodIDFK));
        }

        if (expenseApprovalStatusCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExpenseApprovalStatusCode", expenseApprovalStatusCode));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Search", search));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expenseGetValidateBeforeCall(OffsetDateTime updatedAfter, OffsetDateTime expenseDateFrom, OffsetDateTime expenseDateTo, String userEmail, Integer userID, String categoryName, Integer customerID, Integer projectID, Boolean isChargeable, Boolean isInvoiced, Long expenseReimbursementIDFK, Integer expensePaymentMethodIDFK, String expenseApprovalStatusCode, String search, Integer pageSize, Integer pageNumber, String sort, final ApiCallback _callback) throws ApiException {
        return expenseGetCall(updatedAfter, expenseDateFrom, expenseDateTo, userEmail, userID, categoryName, customerID, projectID, isChargeable, isInvoiced, expenseReimbursementIDFK, expensePaymentMethodIDFK, expenseApprovalStatusCode, search, pageSize, pageNumber, sort, _callback);

    }

    /**
     * Gets list of Expenses
     * 
     * @param updatedAfter  (optional)
     * @param expenseDateFrom  (optional)
     * @param expenseDateTo  (optional)
     * @param userEmail  (optional)
     * @param userID  (optional)
     * @param categoryName  (optional)
     * @param customerID  (optional)
     * @param projectID  (optional)
     * @param isChargeable  (optional)
     * @param isInvoiced  (optional)
     * @param expenseReimbursementIDFK  (optional)
     * @param expensePaymentMethodIDFK  (optional)
     * @param expenseApprovalStatusCode  (optional)
     * @param search  (optional)
     * @param pageSize Number of items per page (max 1000) (optional)
     * @param pageNumber Page to display. Starts from 1. (optional)
     * @param sort  (optional)
     * @return ExpenseList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ExpenseList expenseGet(OffsetDateTime updatedAfter, OffsetDateTime expenseDateFrom, OffsetDateTime expenseDateTo, String userEmail, Integer userID, String categoryName, Integer customerID, Integer projectID, Boolean isChargeable, Boolean isInvoiced, Long expenseReimbursementIDFK, Integer expensePaymentMethodIDFK, String expenseApprovalStatusCode, String search, Integer pageSize, Integer pageNumber, String sort) throws ApiException {
        ApiResponse<ExpenseList> localVarResp = expenseGetWithHttpInfo(updatedAfter, expenseDateFrom, expenseDateTo, userEmail, userID, categoryName, customerID, projectID, isChargeable, isInvoiced, expenseReimbursementIDFK, expensePaymentMethodIDFK, expenseApprovalStatusCode, search, pageSize, pageNumber, sort);
        return localVarResp.getData();
    }

    /**
     * Gets list of Expenses
     * 
     * @param updatedAfter  (optional)
     * @param expenseDateFrom  (optional)
     * @param expenseDateTo  (optional)
     * @param userEmail  (optional)
     * @param userID  (optional)
     * @param categoryName  (optional)
     * @param customerID  (optional)
     * @param projectID  (optional)
     * @param isChargeable  (optional)
     * @param isInvoiced  (optional)
     * @param expenseReimbursementIDFK  (optional)
     * @param expensePaymentMethodIDFK  (optional)
     * @param expenseApprovalStatusCode  (optional)
     * @param search  (optional)
     * @param pageSize Number of items per page (max 1000) (optional)
     * @param pageNumber Page to display. Starts from 1. (optional)
     * @param sort  (optional)
     * @return ApiResponse&lt;ExpenseList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpenseList> expenseGetWithHttpInfo(OffsetDateTime updatedAfter, OffsetDateTime expenseDateFrom, OffsetDateTime expenseDateTo, String userEmail, Integer userID, String categoryName, Integer customerID, Integer projectID, Boolean isChargeable, Boolean isInvoiced, Long expenseReimbursementIDFK, Integer expensePaymentMethodIDFK, String expenseApprovalStatusCode, String search, Integer pageSize, Integer pageNumber, String sort) throws ApiException {
        okhttp3.Call localVarCall = expenseGetValidateBeforeCall(updatedAfter, expenseDateFrom, expenseDateTo, userEmail, userID, categoryName, customerID, projectID, isChargeable, isInvoiced, expenseReimbursementIDFK, expensePaymentMethodIDFK, expenseApprovalStatusCode, search, pageSize, pageNumber, sort, null);
        Type localVarReturnType = new TypeToken<ExpenseList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets list of Expenses (asynchronously)
     * 
     * @param updatedAfter  (optional)
     * @param expenseDateFrom  (optional)
     * @param expenseDateTo  (optional)
     * @param userEmail  (optional)
     * @param userID  (optional)
     * @param categoryName  (optional)
     * @param customerID  (optional)
     * @param projectID  (optional)
     * @param isChargeable  (optional)
     * @param isInvoiced  (optional)
     * @param expenseReimbursementIDFK  (optional)
     * @param expensePaymentMethodIDFK  (optional)
     * @param expenseApprovalStatusCode  (optional)
     * @param search  (optional)
     * @param pageSize Number of items per page (max 1000) (optional)
     * @param pageNumber Page to display. Starts from 1. (optional)
     * @param sort  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expenseGetAsync(OffsetDateTime updatedAfter, OffsetDateTime expenseDateFrom, OffsetDateTime expenseDateTo, String userEmail, Integer userID, String categoryName, Integer customerID, Integer projectID, Boolean isChargeable, Boolean isInvoiced, Long expenseReimbursementIDFK, Integer expensePaymentMethodIDFK, String expenseApprovalStatusCode, String search, Integer pageSize, Integer pageNumber, String sort, final ApiCallback<ExpenseList> _callback) throws ApiException {

        okhttp3.Call localVarCall = expenseGetValidateBeforeCall(updatedAfter, expenseDateFrom, expenseDateTo, userEmail, userID, categoryName, customerID, projectID, isChargeable, isInvoiced, expenseReimbursementIDFK, expensePaymentMethodIDFK, expenseApprovalStatusCode, search, pageSize, pageNumber, sort, _callback);
        Type localVarReturnType = new TypeToken<ExpenseList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expenseGetByID
     * @param id Expense ID number (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expenseGetByIDCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Expense/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expenseGetByIDValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling expenseGetByID(Async)");
        }

        return expenseGetByIDCall(id, _callback);

    }

    /**
     * Gets an Expense Entry by Expense ID
     * 
     * @param id Expense ID number (required)
     * @return ExpenseDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ExpenseDetails expenseGetByID(Long id) throws ApiException {
        ApiResponse<ExpenseDetails> localVarResp = expenseGetByIDWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Gets an Expense Entry by Expense ID
     * 
     * @param id Expense ID number (required)
     * @return ApiResponse&lt;ExpenseDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpenseDetails> expenseGetByIDWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = expenseGetByIDValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ExpenseDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets an Expense Entry by Expense ID (asynchronously)
     * 
     * @param id Expense ID number (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expenseGetByIDAsync(Long id, final ApiCallback<ExpenseDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = expenseGetByIDValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ExpenseDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expensePost
     * @param model  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expensePostCall(NewExpense model, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/Expense";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expensePostValidateBeforeCall(NewExpense model, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling expensePost(Async)");
        }

        return expensePostCall(model, _callback);

    }

    /**
     * Create an Expense
     * Create an Expense
     * @param model  (required)
     * @return ExpenseDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ExpenseDetails expensePost(NewExpense model) throws ApiException {
        ApiResponse<ExpenseDetails> localVarResp = expensePostWithHttpInfo(model);
        return localVarResp.getData();
    }

    /**
     * Create an Expense
     * Create an Expense
     * @param model  (required)
     * @return ApiResponse&lt;ExpenseDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpenseDetails> expensePostWithHttpInfo(NewExpense model) throws ApiException {
        okhttp3.Call localVarCall = expensePostValidateBeforeCall(model, null);
        Type localVarReturnType = new TypeToken<ExpenseDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an Expense (asynchronously)
     * Create an Expense
     * @param model  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expensePostAsync(NewExpense model, final ApiCallback<ExpenseDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = expensePostValidateBeforeCall(model, _callback);
        Type localVarReturnType = new TypeToken<ExpenseDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expensePut
     * @param model  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expensePutCall(UpdateExpense model, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/Expense";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expensePutValidateBeforeCall(UpdateExpense model, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling expensePut(Async)");
        }

        return expensePutCall(model, _callback);

    }

    /**
     * Update an Expense
     * Update an Expense
     * @param model  (required)
     * @return ExpenseDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ExpenseDetails expensePut(UpdateExpense model) throws ApiException {
        ApiResponse<ExpenseDetails> localVarResp = expensePutWithHttpInfo(model);
        return localVarResp.getData();
    }

    /**
     * Update an Expense
     * Update an Expense
     * @param model  (required)
     * @return ApiResponse&lt;ExpenseDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpenseDetails> expensePutWithHttpInfo(UpdateExpense model) throws ApiException {
        okhttp3.Call localVarCall = expensePutValidateBeforeCall(model, null);
        Type localVarReturnType = new TypeToken<ExpenseDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an Expense (asynchronously)
     * Update an Expense
     * @param model  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expensePutAsync(UpdateExpense model, final ApiCallback<ExpenseDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = expensePutValidateBeforeCall(model, _callback);
        Type localVarReturnType = new TypeToken<ExpenseDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
