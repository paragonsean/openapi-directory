/*
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateTimesheetModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:56.431364-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateTimesheetModel {
  public static final String SERIALIZED_NAME_CUSTOM_METADATA = "CustomMetadata";
  @SerializedName(SERIALIZED_NAME_CUSTOM_METADATA)
  private String customMetadata;

  public static final String SERIALIZED_NAME_DURATION = "Duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Double duration;

  public static final String SERIALIZED_NAME_ENTRY_DATE = "EntryDate";
  @SerializedName(SERIALIZED_NAME_ENTRY_DATE)
  private OffsetDateTime entryDate;

  public static final String SERIALIZED_NAME_FIELDS_TO_UPDATE = "FieldsToUpdate";
  @SerializedName(SERIALIZED_NAME_FIELDS_TO_UPDATE)
  private List<String> fieldsToUpdate = new ArrayList<>();

  public static final String SERIALIZED_NAME_NOTES = "Notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_PROJECT_I_D_F_K = "ProjectIDFK";
  @SerializedName(SERIALIZED_NAME_PROJECT_I_D_F_K)
  private Integer projectIDFK;

  public static final String SERIALIZED_NAME_TASK_I_D_F_K = "TaskIDFK";
  @SerializedName(SERIALIZED_NAME_TASK_I_D_F_K)
  private Integer taskIDFK;

  public static final String SERIALIZED_NAME_TIME_SHEET_ENTRY_I_D = "TimeSheetEntryID";
  @SerializedName(SERIALIZED_NAME_TIME_SHEET_ENTRY_I_D)
  private Long timeSheetEntryID;

  public static final String SERIALIZED_NAME_TIMESHEET_CATEGORY_I_D_F_K = "TimesheetCategoryIDFK";
  @SerializedName(SERIALIZED_NAME_TIMESHEET_CATEGORY_I_D_F_K)
  private Integer timesheetCategoryIDFK;

  public static final String SERIALIZED_NAME_HAS_START_END_TIME = "hasStartEndTime";
  @SerializedName(SERIALIZED_NAME_HAS_START_END_TIME)
  private Boolean hasStartEndTime;

  public UpdateTimesheetModel() {
  }

  public UpdateTimesheetModel customMetadata(String customMetadata) {
    this.customMetadata = customMetadata;
    return this;
  }

  /**
   * Optional. free nvarchar field available via Api to store any additional metadata against a timesheet. We suggest you use Json or your preferred serialisation format. 1000 characters max.
   * @return customMetadata
   */
  @javax.annotation.Nullable
  public String getCustomMetadata() {
    return customMetadata;
  }

  public void setCustomMetadata(String customMetadata) {
    this.customMetadata = customMetadata;
  }


  public UpdateTimesheetModel duration(Double duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Get duration
   * @return duration
   */
  @javax.annotation.Nullable
  public Double getDuration() {
    return duration;
  }

  public void setDuration(Double duration) {
    this.duration = duration;
  }


  public UpdateTimesheetModel entryDate(OffsetDateTime entryDate) {
    this.entryDate = entryDate;
    return this;
  }

  /**
   * Get entryDate
   * @return entryDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEntryDate() {
    return entryDate;
  }

  public void setEntryDate(OffsetDateTime entryDate) {
    this.entryDate = entryDate;
  }


  public UpdateTimesheetModel fieldsToUpdate(List<String> fieldsToUpdate) {
    this.fieldsToUpdate = fieldsToUpdate;
    return this;
  }

  public UpdateTimesheetModel addFieldsToUpdateItem(String fieldsToUpdateItem) {
    if (this.fieldsToUpdate == null) {
      this.fieldsToUpdate = new ArrayList<>();
    }
    this.fieldsToUpdate.add(fieldsToUpdateItem);
    return this;
  }

  /**
   * Get fieldsToUpdate
   * @return fieldsToUpdate
   */
  @javax.annotation.Nonnull
  public List<String> getFieldsToUpdate() {
    return fieldsToUpdate;
  }

  public void setFieldsToUpdate(List<String> fieldsToUpdate) {
    this.fieldsToUpdate = fieldsToUpdate;
  }


  public UpdateTimesheetModel notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Get notes
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public UpdateTimesheetModel projectIDFK(Integer projectIDFK) {
    this.projectIDFK = projectIDFK;
    return this;
  }

  /**
   * Get projectIDFK
   * @return projectIDFK
   */
  @javax.annotation.Nonnull
  public Integer getProjectIDFK() {
    return projectIDFK;
  }

  public void setProjectIDFK(Integer projectIDFK) {
    this.projectIDFK = projectIDFK;
  }


  public UpdateTimesheetModel taskIDFK(Integer taskIDFK) {
    this.taskIDFK = taskIDFK;
    return this;
  }

  /**
   * Get taskIDFK
   * @return taskIDFK
   */
  @javax.annotation.Nullable
  public Integer getTaskIDFK() {
    return taskIDFK;
  }

  public void setTaskIDFK(Integer taskIDFK) {
    this.taskIDFK = taskIDFK;
  }


  public UpdateTimesheetModel timeSheetEntryID(Long timeSheetEntryID) {
    this.timeSheetEntryID = timeSheetEntryID;
    return this;
  }

  /**
   * Get timeSheetEntryID
   * @return timeSheetEntryID
   */
  @javax.annotation.Nonnull
  public Long getTimeSheetEntryID() {
    return timeSheetEntryID;
  }

  public void setTimeSheetEntryID(Long timeSheetEntryID) {
    this.timeSheetEntryID = timeSheetEntryID;
  }


  public UpdateTimesheetModel timesheetCategoryIDFK(Integer timesheetCategoryIDFK) {
    this.timesheetCategoryIDFK = timesheetCategoryIDFK;
    return this;
  }

  /**
   * Get timesheetCategoryIDFK
   * @return timesheetCategoryIDFK
   */
  @javax.annotation.Nullable
  public Integer getTimesheetCategoryIDFK() {
    return timesheetCategoryIDFK;
  }

  public void setTimesheetCategoryIDFK(Integer timesheetCategoryIDFK) {
    this.timesheetCategoryIDFK = timesheetCategoryIDFK;
  }


  public UpdateTimesheetModel hasStartEndTime(Boolean hasStartEndTime) {
    this.hasStartEndTime = hasStartEndTime;
    return this;
  }

  /**
   * Get hasStartEndTime
   * @return hasStartEndTime
   */
  @javax.annotation.Nullable
  public Boolean getHasStartEndTime() {
    return hasStartEndTime;
  }

  public void setHasStartEndTime(Boolean hasStartEndTime) {
    this.hasStartEndTime = hasStartEndTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateTimesheetModel updateTimesheetModel = (UpdateTimesheetModel) o;
    return Objects.equals(this.customMetadata, updateTimesheetModel.customMetadata) &&
        Objects.equals(this.duration, updateTimesheetModel.duration) &&
        Objects.equals(this.entryDate, updateTimesheetModel.entryDate) &&
        Objects.equals(this.fieldsToUpdate, updateTimesheetModel.fieldsToUpdate) &&
        Objects.equals(this.notes, updateTimesheetModel.notes) &&
        Objects.equals(this.projectIDFK, updateTimesheetModel.projectIDFK) &&
        Objects.equals(this.taskIDFK, updateTimesheetModel.taskIDFK) &&
        Objects.equals(this.timeSheetEntryID, updateTimesheetModel.timeSheetEntryID) &&
        Objects.equals(this.timesheetCategoryIDFK, updateTimesheetModel.timesheetCategoryIDFK) &&
        Objects.equals(this.hasStartEndTime, updateTimesheetModel.hasStartEndTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customMetadata, duration, entryDate, fieldsToUpdate, notes, projectIDFK, taskIDFK, timeSheetEntryID, timesheetCategoryIDFK, hasStartEndTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateTimesheetModel {\n");
    sb.append("    customMetadata: ").append(toIndentedString(customMetadata)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    entryDate: ").append(toIndentedString(entryDate)).append("\n");
    sb.append("    fieldsToUpdate: ").append(toIndentedString(fieldsToUpdate)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    projectIDFK: ").append(toIndentedString(projectIDFK)).append("\n");
    sb.append("    taskIDFK: ").append(toIndentedString(taskIDFK)).append("\n");
    sb.append("    timeSheetEntryID: ").append(toIndentedString(timeSheetEntryID)).append("\n");
    sb.append("    timesheetCategoryIDFK: ").append(toIndentedString(timesheetCategoryIDFK)).append("\n");
    sb.append("    hasStartEndTime: ").append(toIndentedString(hasStartEndTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CustomMetadata");
    openapiFields.add("Duration");
    openapiFields.add("EntryDate");
    openapiFields.add("FieldsToUpdate");
    openapiFields.add("Notes");
    openapiFields.add("ProjectIDFK");
    openapiFields.add("TaskIDFK");
    openapiFields.add("TimeSheetEntryID");
    openapiFields.add("TimesheetCategoryIDFK");
    openapiFields.add("hasStartEndTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("FieldsToUpdate");
    openapiRequiredFields.add("ProjectIDFK");
    openapiRequiredFields.add("TimeSheetEntryID");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateTimesheetModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateTimesheetModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateTimesheetModel is not found in the empty JSON string", UpdateTimesheetModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateTimesheetModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateTimesheetModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateTimesheetModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CustomMetadata") != null && !jsonObj.get("CustomMetadata").isJsonNull()) && !jsonObj.get("CustomMetadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CustomMetadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CustomMetadata").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("FieldsToUpdate") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("FieldsToUpdate").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `FieldsToUpdate` to be an array in the JSON string but got `%s`", jsonObj.get("FieldsToUpdate").toString()));
      }
      if ((jsonObj.get("Notes") != null && !jsonObj.get("Notes").isJsonNull()) && !jsonObj.get("Notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Notes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateTimesheetModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateTimesheetModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateTimesheetModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateTimesheetModel.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateTimesheetModel>() {
           @Override
           public void write(JsonWriter out, UpdateTimesheetModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateTimesheetModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateTimesheetModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateTimesheetModel
   * @throws IOException if the JSON string is invalid with respect to UpdateTimesheetModel
   */
  public static UpdateTimesheetModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateTimesheetModel.class);
  }

  /**
   * Convert an instance of UpdateTimesheetModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

