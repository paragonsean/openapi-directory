/*
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateBooking;
import org.openapitools.client.model.CreateLeave;
import org.openapitools.client.model.EditBooking;
import org.openapitools.client.model.EditLeave;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ScheduleSeriesDetails;
import org.openapitools.client.model.ScheduleSeriesList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScheduleSeriesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ScheduleSeriesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScheduleSeriesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for scheduleSeriesAddBooking
     * @param model  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleSeriesAddBookingCall(CreateBooking model, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/ScheduleSeries/AddBooking";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduleSeriesAddBookingValidateBeforeCall(CreateBooking model, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling scheduleSeriesAddBooking(Async)");
        }

        return scheduleSeriesAddBookingCall(model, _callback);

    }

    /**
     * Create new Schedule Booking
     * 
     * @param model  (required)
     * @return ScheduleSeriesDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ScheduleSeriesDetails scheduleSeriesAddBooking(CreateBooking model) throws ApiException {
        ApiResponse<ScheduleSeriesDetails> localVarResp = scheduleSeriesAddBookingWithHttpInfo(model);
        return localVarResp.getData();
    }

    /**
     * Create new Schedule Booking
     * 
     * @param model  (required)
     * @return ApiResponse&lt;ScheduleSeriesDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduleSeriesDetails> scheduleSeriesAddBookingWithHttpInfo(CreateBooking model) throws ApiException {
        okhttp3.Call localVarCall = scheduleSeriesAddBookingValidateBeforeCall(model, null);
        Type localVarReturnType = new TypeToken<ScheduleSeriesDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new Schedule Booking (asynchronously)
     * 
     * @param model  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleSeriesAddBookingAsync(CreateBooking model, final ApiCallback<ScheduleSeriesDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduleSeriesAddBookingValidateBeforeCall(model, _callback);
        Type localVarReturnType = new TypeToken<ScheduleSeriesDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduleSeriesAddLeave
     * @param model  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleSeriesAddLeaveCall(CreateLeave model, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/ScheduleSeries/AddLeave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduleSeriesAddLeaveValidateBeforeCall(CreateLeave model, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling scheduleSeriesAddLeave(Async)");
        }

        return scheduleSeriesAddLeaveCall(model, _callback);

    }

    /**
     * Create new Leave Booking
     * 
     * @param model  (required)
     * @return ScheduleSeriesDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ScheduleSeriesDetails scheduleSeriesAddLeave(CreateLeave model) throws ApiException {
        ApiResponse<ScheduleSeriesDetails> localVarResp = scheduleSeriesAddLeaveWithHttpInfo(model);
        return localVarResp.getData();
    }

    /**
     * Create new Leave Booking
     * 
     * @param model  (required)
     * @return ApiResponse&lt;ScheduleSeriesDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduleSeriesDetails> scheduleSeriesAddLeaveWithHttpInfo(CreateLeave model) throws ApiException {
        okhttp3.Call localVarCall = scheduleSeriesAddLeaveValidateBeforeCall(model, null);
        Type localVarReturnType = new TypeToken<ScheduleSeriesDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new Leave Booking (asynchronously)
     * 
     * @param model  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleSeriesAddLeaveAsync(CreateLeave model, final ApiCallback<ScheduleSeriesDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduleSeriesAddLeaveValidateBeforeCall(model, _callback);
        Type localVarReturnType = new TypeToken<ScheduleSeriesDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduleSeriesEditBooking
     * @param model  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleSeriesEditBookingCall(EditBooking model, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/ScheduleSeries/EditBooking";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduleSeriesEditBookingValidateBeforeCall(EditBooking model, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling scheduleSeriesEditBooking(Async)");
        }

        return scheduleSeriesEditBookingCall(model, _callback);

    }

    /**
     * Edit Booking
     * 
     * @param model  (required)
     * @return ScheduleSeriesDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ScheduleSeriesDetails scheduleSeriesEditBooking(EditBooking model) throws ApiException {
        ApiResponse<ScheduleSeriesDetails> localVarResp = scheduleSeriesEditBookingWithHttpInfo(model);
        return localVarResp.getData();
    }

    /**
     * Edit Booking
     * 
     * @param model  (required)
     * @return ApiResponse&lt;ScheduleSeriesDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduleSeriesDetails> scheduleSeriesEditBookingWithHttpInfo(EditBooking model) throws ApiException {
        okhttp3.Call localVarCall = scheduleSeriesEditBookingValidateBeforeCall(model, null);
        Type localVarReturnType = new TypeToken<ScheduleSeriesDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit Booking (asynchronously)
     * 
     * @param model  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleSeriesEditBookingAsync(EditBooking model, final ApiCallback<ScheduleSeriesDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduleSeriesEditBookingValidateBeforeCall(model, _callback);
        Type localVarReturnType = new TypeToken<ScheduleSeriesDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduleSeriesEditLeave
     * @param model  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleSeriesEditLeaveCall(EditLeave model, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/ScheduleSeries/EditLeave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduleSeriesEditLeaveValidateBeforeCall(EditLeave model, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling scheduleSeriesEditLeave(Async)");
        }

        return scheduleSeriesEditLeaveCall(model, _callback);

    }

    /**
     * Edit Leave Booking
     * 
     * @param model  (required)
     * @return ScheduleSeriesDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ScheduleSeriesDetails scheduleSeriesEditLeave(EditLeave model) throws ApiException {
        ApiResponse<ScheduleSeriesDetails> localVarResp = scheduleSeriesEditLeaveWithHttpInfo(model);
        return localVarResp.getData();
    }

    /**
     * Edit Leave Booking
     * 
     * @param model  (required)
     * @return ApiResponse&lt;ScheduleSeriesDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduleSeriesDetails> scheduleSeriesEditLeaveWithHttpInfo(EditLeave model) throws ApiException {
        okhttp3.Call localVarCall = scheduleSeriesEditLeaveValidateBeforeCall(model, null);
        Type localVarReturnType = new TypeToken<ScheduleSeriesDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit Leave Booking (asynchronously)
     * 
     * @param model  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleSeriesEditLeaveAsync(EditLeave model, final ApiCallback<ScheduleSeriesDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduleSeriesEditLeaveValidateBeforeCall(model, _callback);
        Type localVarReturnType = new TypeToken<ScheduleSeriesDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduleSeriesGet
     * @param updatedAfter Limit results to records updated after the specified date (optional)
     * @param scheduleStartDateFrom Filter for schedules that start on or after a specific date (optional)
     * @param scheduleStartDateTo Filter for schedules that start on or before a specific date (optional)
     * @param scheduleEndDateFrom Filter for schedules that end on or after a specific date (optional)
     * @param scheduleEndDateTo Filter for schedules that end on or before a specific date (optional)
     * @param userID The UserID of a schedule user to filter assignments for. Only api users with Admin role can see all schedules across all users. Users with ScheduleUser role can access their own ScheduleSeries. (optional)
     * @param userEmail The email of the user who has been scheduled (optional)
     * @param timeSheetCategoryID Filter for schedule records linked to a specific timesheeet category (optional)
     * @param timeSheetCategoryName Filter for schedule records with a specific timesheeet category name (exact string match) (optional)
     * @param leaveTypeID Filter to records of a particular leave type (optional)
     * @param projectID Filter to only include books linked to a specific project (optional)
     * @param companyID Filter to only include records linked to projects, where that project belongs to a specific customer company (optional)
     * @param pageSize Number of items per page (max 1000) (optional)
     * @param pageNumber Page to display. Starts from 1. (optional)
     * @param sort Optional sorting instruction. Currently possible values: \&quot;DateUpdated\&quot;, \&quot;DateCreated\&quot;, \&quot;DateUpdated desc\&quot;, \&quot;DateCreated desc\&quot; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleSeriesGetCall(OffsetDateTime updatedAfter, OffsetDateTime scheduleStartDateFrom, OffsetDateTime scheduleStartDateTo, OffsetDateTime scheduleEndDateFrom, OffsetDateTime scheduleEndDateTo, Integer userID, String userEmail, Integer timeSheetCategoryID, String timeSheetCategoryName, Integer leaveTypeID, Integer projectID, Integer companyID, Integer pageSize, Integer pageNumber, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/ScheduleSeries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updatedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UpdatedAfter", updatedAfter));
        }

        if (scheduleStartDateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ScheduleStartDateFrom", scheduleStartDateFrom));
        }

        if (scheduleStartDateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ScheduleStartDateTo", scheduleStartDateTo));
        }

        if (scheduleEndDateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ScheduleEndDateFrom", scheduleEndDateFrom));
        }

        if (scheduleEndDateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ScheduleEndDateTo", scheduleEndDateTo));
        }

        if (userID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UserID", userID));
        }

        if (userEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UserEmail", userEmail));
        }

        if (timeSheetCategoryID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TimeSheetCategoryID", timeSheetCategoryID));
        }

        if (timeSheetCategoryName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TimeSheetCategoryName", timeSheetCategoryName));
        }

        if (leaveTypeID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LeaveTypeID", leaveTypeID));
        }

        if (projectID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ProjectID", projectID));
        }

        if (companyID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CompanyID", companyID));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduleSeriesGetValidateBeforeCall(OffsetDateTime updatedAfter, OffsetDateTime scheduleStartDateFrom, OffsetDateTime scheduleStartDateTo, OffsetDateTime scheduleEndDateFrom, OffsetDateTime scheduleEndDateTo, Integer userID, String userEmail, Integer timeSheetCategoryID, String timeSheetCategoryName, Integer leaveTypeID, Integer projectID, Integer companyID, Integer pageSize, Integer pageNumber, String sort, final ApiCallback _callback) throws ApiException {
        return scheduleSeriesGetCall(updatedAfter, scheduleStartDateFrom, scheduleStartDateTo, scheduleEndDateFrom, scheduleEndDateTo, userID, userEmail, timeSheetCategoryID, timeSheetCategoryName, leaveTypeID, projectID, companyID, pageSize, pageNumber, sort, _callback);

    }

    /**
     * Gets list of Schedule Series
     * Schedule Series represents a strip of time assigned to a user over a date range, for a certain number of hours per day. They can be for Leave or for project work Bookings.
     * @param updatedAfter Limit results to records updated after the specified date (optional)
     * @param scheduleStartDateFrom Filter for schedules that start on or after a specific date (optional)
     * @param scheduleStartDateTo Filter for schedules that start on or before a specific date (optional)
     * @param scheduleEndDateFrom Filter for schedules that end on or after a specific date (optional)
     * @param scheduleEndDateTo Filter for schedules that end on or before a specific date (optional)
     * @param userID The UserID of a schedule user to filter assignments for. Only api users with Admin role can see all schedules across all users. Users with ScheduleUser role can access their own ScheduleSeries. (optional)
     * @param userEmail The email of the user who has been scheduled (optional)
     * @param timeSheetCategoryID Filter for schedule records linked to a specific timesheeet category (optional)
     * @param timeSheetCategoryName Filter for schedule records with a specific timesheeet category name (exact string match) (optional)
     * @param leaveTypeID Filter to records of a particular leave type (optional)
     * @param projectID Filter to only include books linked to a specific project (optional)
     * @param companyID Filter to only include records linked to projects, where that project belongs to a specific customer company (optional)
     * @param pageSize Number of items per page (max 1000) (optional)
     * @param pageNumber Page to display. Starts from 1. (optional)
     * @param sort Optional sorting instruction. Currently possible values: \&quot;DateUpdated\&quot;, \&quot;DateCreated\&quot;, \&quot;DateUpdated desc\&quot;, \&quot;DateCreated desc\&quot; (optional)
     * @return ScheduleSeriesList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ScheduleSeriesList scheduleSeriesGet(OffsetDateTime updatedAfter, OffsetDateTime scheduleStartDateFrom, OffsetDateTime scheduleStartDateTo, OffsetDateTime scheduleEndDateFrom, OffsetDateTime scheduleEndDateTo, Integer userID, String userEmail, Integer timeSheetCategoryID, String timeSheetCategoryName, Integer leaveTypeID, Integer projectID, Integer companyID, Integer pageSize, Integer pageNumber, String sort) throws ApiException {
        ApiResponse<ScheduleSeriesList> localVarResp = scheduleSeriesGetWithHttpInfo(updatedAfter, scheduleStartDateFrom, scheduleStartDateTo, scheduleEndDateFrom, scheduleEndDateTo, userID, userEmail, timeSheetCategoryID, timeSheetCategoryName, leaveTypeID, projectID, companyID, pageSize, pageNumber, sort);
        return localVarResp.getData();
    }

    /**
     * Gets list of Schedule Series
     * Schedule Series represents a strip of time assigned to a user over a date range, for a certain number of hours per day. They can be for Leave or for project work Bookings.
     * @param updatedAfter Limit results to records updated after the specified date (optional)
     * @param scheduleStartDateFrom Filter for schedules that start on or after a specific date (optional)
     * @param scheduleStartDateTo Filter for schedules that start on or before a specific date (optional)
     * @param scheduleEndDateFrom Filter for schedules that end on or after a specific date (optional)
     * @param scheduleEndDateTo Filter for schedules that end on or before a specific date (optional)
     * @param userID The UserID of a schedule user to filter assignments for. Only api users with Admin role can see all schedules across all users. Users with ScheduleUser role can access their own ScheduleSeries. (optional)
     * @param userEmail The email of the user who has been scheduled (optional)
     * @param timeSheetCategoryID Filter for schedule records linked to a specific timesheeet category (optional)
     * @param timeSheetCategoryName Filter for schedule records with a specific timesheeet category name (exact string match) (optional)
     * @param leaveTypeID Filter to records of a particular leave type (optional)
     * @param projectID Filter to only include books linked to a specific project (optional)
     * @param companyID Filter to only include records linked to projects, where that project belongs to a specific customer company (optional)
     * @param pageSize Number of items per page (max 1000) (optional)
     * @param pageNumber Page to display. Starts from 1. (optional)
     * @param sort Optional sorting instruction. Currently possible values: \&quot;DateUpdated\&quot;, \&quot;DateCreated\&quot;, \&quot;DateUpdated desc\&quot;, \&quot;DateCreated desc\&quot; (optional)
     * @return ApiResponse&lt;ScheduleSeriesList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduleSeriesList> scheduleSeriesGetWithHttpInfo(OffsetDateTime updatedAfter, OffsetDateTime scheduleStartDateFrom, OffsetDateTime scheduleStartDateTo, OffsetDateTime scheduleEndDateFrom, OffsetDateTime scheduleEndDateTo, Integer userID, String userEmail, Integer timeSheetCategoryID, String timeSheetCategoryName, Integer leaveTypeID, Integer projectID, Integer companyID, Integer pageSize, Integer pageNumber, String sort) throws ApiException {
        okhttp3.Call localVarCall = scheduleSeriesGetValidateBeforeCall(updatedAfter, scheduleStartDateFrom, scheduleStartDateTo, scheduleEndDateFrom, scheduleEndDateTo, userID, userEmail, timeSheetCategoryID, timeSheetCategoryName, leaveTypeID, projectID, companyID, pageSize, pageNumber, sort, null);
        Type localVarReturnType = new TypeToken<ScheduleSeriesList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets list of Schedule Series (asynchronously)
     * Schedule Series represents a strip of time assigned to a user over a date range, for a certain number of hours per day. They can be for Leave or for project work Bookings.
     * @param updatedAfter Limit results to records updated after the specified date (optional)
     * @param scheduleStartDateFrom Filter for schedules that start on or after a specific date (optional)
     * @param scheduleStartDateTo Filter for schedules that start on or before a specific date (optional)
     * @param scheduleEndDateFrom Filter for schedules that end on or after a specific date (optional)
     * @param scheduleEndDateTo Filter for schedules that end on or before a specific date (optional)
     * @param userID The UserID of a schedule user to filter assignments for. Only api users with Admin role can see all schedules across all users. Users with ScheduleUser role can access their own ScheduleSeries. (optional)
     * @param userEmail The email of the user who has been scheduled (optional)
     * @param timeSheetCategoryID Filter for schedule records linked to a specific timesheeet category (optional)
     * @param timeSheetCategoryName Filter for schedule records with a specific timesheeet category name (exact string match) (optional)
     * @param leaveTypeID Filter to records of a particular leave type (optional)
     * @param projectID Filter to only include books linked to a specific project (optional)
     * @param companyID Filter to only include records linked to projects, where that project belongs to a specific customer company (optional)
     * @param pageSize Number of items per page (max 1000) (optional)
     * @param pageNumber Page to display. Starts from 1. (optional)
     * @param sort Optional sorting instruction. Currently possible values: \&quot;DateUpdated\&quot;, \&quot;DateCreated\&quot;, \&quot;DateUpdated desc\&quot;, \&quot;DateCreated desc\&quot; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleSeriesGetAsync(OffsetDateTime updatedAfter, OffsetDateTime scheduleStartDateFrom, OffsetDateTime scheduleStartDateTo, OffsetDateTime scheduleEndDateFrom, OffsetDateTime scheduleEndDateTo, Integer userID, String userEmail, Integer timeSheetCategoryID, String timeSheetCategoryName, Integer leaveTypeID, Integer projectID, Integer companyID, Integer pageSize, Integer pageNumber, String sort, final ApiCallback<ScheduleSeriesList> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduleSeriesGetValidateBeforeCall(updatedAfter, scheduleStartDateFrom, scheduleStartDateTo, scheduleEndDateFrom, scheduleEndDateTo, userID, userEmail, timeSheetCategoryID, timeSheetCategoryName, leaveTypeID, projectID, companyID, pageSize, pageNumber, sort, _callback);
        Type localVarReturnType = new TypeToken<ScheduleSeriesList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
