/*
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExpenseCategoryDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:56.431364-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExpenseCategoryDetails {
  public static final String SERIALIZED_NAME_ENABLED = "Enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_EXPENSE_CATEGORY_I_D = "ExpenseCategoryID";
  @SerializedName(SERIALIZED_NAME_EXPENSE_CATEGORY_I_D)
  private Integer expenseCategoryID;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_UNIT_NAME = "UnitName";
  @SerializedName(SERIALIZED_NAME_UNIT_NAME)
  private String unitName;

  public static final String SERIALIZED_NAME_UNIT_PRICE = "UnitPrice";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICE)
  private Double unitPrice;

  public static final String SERIALIZED_NAME_HAS_UNIT_PRICE = "hasUnitPrice";
  @SerializedName(SERIALIZED_NAME_HAS_UNIT_PRICE)
  private Boolean hasUnitPrice;

  public ExpenseCategoryDetails() {
  }

  public ExpenseCategoryDetails enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public ExpenseCategoryDetails expenseCategoryID(Integer expenseCategoryID) {
    this.expenseCategoryID = expenseCategoryID;
    return this;
  }

  /**
   * Get expenseCategoryID
   * @return expenseCategoryID
   */
  @javax.annotation.Nullable
  public Integer getExpenseCategoryID() {
    return expenseCategoryID;
  }

  public void setExpenseCategoryID(Integer expenseCategoryID) {
    this.expenseCategoryID = expenseCategoryID;
  }


  public ExpenseCategoryDetails name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ExpenseCategoryDetails unitName(String unitName) {
    this.unitName = unitName;
    return this;
  }

  /**
   * Get unitName
   * @return unitName
   */
  @javax.annotation.Nullable
  public String getUnitName() {
    return unitName;
  }

  public void setUnitName(String unitName) {
    this.unitName = unitName;
  }


  public ExpenseCategoryDetails unitPrice(Double unitPrice) {
    this.unitPrice = unitPrice;
    return this;
  }

  /**
   * Get unitPrice
   * @return unitPrice
   */
  @javax.annotation.Nullable
  public Double getUnitPrice() {
    return unitPrice;
  }

  public void setUnitPrice(Double unitPrice) {
    this.unitPrice = unitPrice;
  }


  public ExpenseCategoryDetails hasUnitPrice(Boolean hasUnitPrice) {
    this.hasUnitPrice = hasUnitPrice;
    return this;
  }

  /**
   * Get hasUnitPrice
   * @return hasUnitPrice
   */
  @javax.annotation.Nullable
  public Boolean getHasUnitPrice() {
    return hasUnitPrice;
  }

  public void setHasUnitPrice(Boolean hasUnitPrice) {
    this.hasUnitPrice = hasUnitPrice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExpenseCategoryDetails expenseCategoryDetails = (ExpenseCategoryDetails) o;
    return Objects.equals(this.enabled, expenseCategoryDetails.enabled) &&
        Objects.equals(this.expenseCategoryID, expenseCategoryDetails.expenseCategoryID) &&
        Objects.equals(this.name, expenseCategoryDetails.name) &&
        Objects.equals(this.unitName, expenseCategoryDetails.unitName) &&
        Objects.equals(this.unitPrice, expenseCategoryDetails.unitPrice) &&
        Objects.equals(this.hasUnitPrice, expenseCategoryDetails.hasUnitPrice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, expenseCategoryID, name, unitName, unitPrice, hasUnitPrice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExpenseCategoryDetails {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    expenseCategoryID: ").append(toIndentedString(expenseCategoryID)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    unitName: ").append(toIndentedString(unitName)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("    hasUnitPrice: ").append(toIndentedString(hasUnitPrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Enabled");
    openapiFields.add("ExpenseCategoryID");
    openapiFields.add("Name");
    openapiFields.add("UnitName");
    openapiFields.add("UnitPrice");
    openapiFields.add("hasUnitPrice");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExpenseCategoryDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExpenseCategoryDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExpenseCategoryDetails is not found in the empty JSON string", ExpenseCategoryDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExpenseCategoryDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExpenseCategoryDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("UnitName") != null && !jsonObj.get("UnitName").isJsonNull()) && !jsonObj.get("UnitName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UnitName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UnitName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExpenseCategoryDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExpenseCategoryDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExpenseCategoryDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExpenseCategoryDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ExpenseCategoryDetails>() {
           @Override
           public void write(JsonWriter out, ExpenseCategoryDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExpenseCategoryDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExpenseCategoryDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExpenseCategoryDetails
   * @throws IOException if the JSON string is invalid with respect to ExpenseCategoryDetails
   */
  public static ExpenseCategoryDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExpenseCategoryDetails.class);
  }

  /**
   * Convert an instance of ExpenseCategoryDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

