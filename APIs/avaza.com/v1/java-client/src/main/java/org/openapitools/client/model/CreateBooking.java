/*
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateBooking
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:56.431364-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateBooking {
  public static final String SERIALIZED_NAME_CATEGORY_I_D_F_K = "CategoryIDFK";
  @SerializedName(SERIALIZED_NAME_CATEGORY_I_D_F_K)
  private Integer categoryIDFK;

  public static final String SERIALIZED_NAME_DURATION_TYPE = "DurationType";
  @SerializedName(SERIALIZED_NAME_DURATION_TYPE)
  private String durationType;

  public static final String SERIALIZED_NAME_END_DATE = "EndDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_HOURS_PER_DAY = "HoursPerDay";
  @SerializedName(SERIALIZED_NAME_HOURS_PER_DAY)
  private Double hoursPerDay;

  public static final String SERIALIZED_NAME_NOTES = "Notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_PROJECT_I_D_F_K = "ProjectIDFK";
  @SerializedName(SERIALIZED_NAME_PROJECT_I_D_F_K)
  private Integer projectIDFK;

  public static final String SERIALIZED_NAME_SCHEDULE_ON_DAYS_OFF = "ScheduleOnDaysOff";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_ON_DAYS_OFF)
  private Boolean scheduleOnDaysOff;

  public static final String SERIALIZED_NAME_START_DATE = "StartDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_TASK_I_D_F_K = "TaskIDFK";
  @SerializedName(SERIALIZED_NAME_TASK_I_D_F_K)
  private Integer taskIDFK;

  public static final String SERIALIZED_NAME_TOTAL_DURATION = "TotalDuration";
  @SerializedName(SERIALIZED_NAME_TOTAL_DURATION)
  private Double totalDuration;

  public static final String SERIALIZED_NAME_USER_I_D_F_K = "UserIDFK";
  @SerializedName(SERIALIZED_NAME_USER_I_D_F_K)
  private Integer userIDFK;

  public CreateBooking() {
  }

  public CreateBooking categoryIDFK(Integer categoryIDFK) {
    this.categoryIDFK = categoryIDFK;
    return this;
  }

  /**
   * Get categoryIDFK
   * @return categoryIDFK
   */
  @javax.annotation.Nullable
  public Integer getCategoryIDFK() {
    return categoryIDFK;
  }

  public void setCategoryIDFK(Integer categoryIDFK) {
    this.categoryIDFK = categoryIDFK;
  }


  public CreateBooking durationType(String durationType) {
    this.durationType = durationType;
    return this;
  }

  /**
   * Get durationType
   * @return durationType
   */
  @javax.annotation.Nullable
  public String getDurationType() {
    return durationType;
  }

  public void setDurationType(String durationType) {
    this.durationType = durationType;
  }


  public CreateBooking endDate(OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Get endDate
   * @return endDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public CreateBooking hoursPerDay(Double hoursPerDay) {
    this.hoursPerDay = hoursPerDay;
    return this;
  }

  /**
   * Get hoursPerDay
   * @return hoursPerDay
   */
  @javax.annotation.Nullable
  public Double getHoursPerDay() {
    return hoursPerDay;
  }

  public void setHoursPerDay(Double hoursPerDay) {
    this.hoursPerDay = hoursPerDay;
  }


  public CreateBooking notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Get notes
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public CreateBooking projectIDFK(Integer projectIDFK) {
    this.projectIDFK = projectIDFK;
    return this;
  }

  /**
   * Get projectIDFK
   * @return projectIDFK
   */
  @javax.annotation.Nullable
  public Integer getProjectIDFK() {
    return projectIDFK;
  }

  public void setProjectIDFK(Integer projectIDFK) {
    this.projectIDFK = projectIDFK;
  }


  public CreateBooking scheduleOnDaysOff(Boolean scheduleOnDaysOff) {
    this.scheduleOnDaysOff = scheduleOnDaysOff;
    return this;
  }

  /**
   * Get scheduleOnDaysOff
   * @return scheduleOnDaysOff
   */
  @javax.annotation.Nullable
  public Boolean getScheduleOnDaysOff() {
    return scheduleOnDaysOff;
  }

  public void setScheduleOnDaysOff(Boolean scheduleOnDaysOff) {
    this.scheduleOnDaysOff = scheduleOnDaysOff;
  }


  public CreateBooking startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public CreateBooking taskIDFK(Integer taskIDFK) {
    this.taskIDFK = taskIDFK;
    return this;
  }

  /**
   * Get taskIDFK
   * @return taskIDFK
   */
  @javax.annotation.Nullable
  public Integer getTaskIDFK() {
    return taskIDFK;
  }

  public void setTaskIDFK(Integer taskIDFK) {
    this.taskIDFK = taskIDFK;
  }


  public CreateBooking totalDuration(Double totalDuration) {
    this.totalDuration = totalDuration;
    return this;
  }

  /**
   * Get totalDuration
   * @return totalDuration
   */
  @javax.annotation.Nullable
  public Double getTotalDuration() {
    return totalDuration;
  }

  public void setTotalDuration(Double totalDuration) {
    this.totalDuration = totalDuration;
  }


  public CreateBooking userIDFK(Integer userIDFK) {
    this.userIDFK = userIDFK;
    return this;
  }

  /**
   * Get userIDFK
   * @return userIDFK
   */
  @javax.annotation.Nullable
  public Integer getUserIDFK() {
    return userIDFK;
  }

  public void setUserIDFK(Integer userIDFK) {
    this.userIDFK = userIDFK;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateBooking createBooking = (CreateBooking) o;
    return Objects.equals(this.categoryIDFK, createBooking.categoryIDFK) &&
        Objects.equals(this.durationType, createBooking.durationType) &&
        Objects.equals(this.endDate, createBooking.endDate) &&
        Objects.equals(this.hoursPerDay, createBooking.hoursPerDay) &&
        Objects.equals(this.notes, createBooking.notes) &&
        Objects.equals(this.projectIDFK, createBooking.projectIDFK) &&
        Objects.equals(this.scheduleOnDaysOff, createBooking.scheduleOnDaysOff) &&
        Objects.equals(this.startDate, createBooking.startDate) &&
        Objects.equals(this.taskIDFK, createBooking.taskIDFK) &&
        Objects.equals(this.totalDuration, createBooking.totalDuration) &&
        Objects.equals(this.userIDFK, createBooking.userIDFK);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryIDFK, durationType, endDate, hoursPerDay, notes, projectIDFK, scheduleOnDaysOff, startDate, taskIDFK, totalDuration, userIDFK);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateBooking {\n");
    sb.append("    categoryIDFK: ").append(toIndentedString(categoryIDFK)).append("\n");
    sb.append("    durationType: ").append(toIndentedString(durationType)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    hoursPerDay: ").append(toIndentedString(hoursPerDay)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    projectIDFK: ").append(toIndentedString(projectIDFK)).append("\n");
    sb.append("    scheduleOnDaysOff: ").append(toIndentedString(scheduleOnDaysOff)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    taskIDFK: ").append(toIndentedString(taskIDFK)).append("\n");
    sb.append("    totalDuration: ").append(toIndentedString(totalDuration)).append("\n");
    sb.append("    userIDFK: ").append(toIndentedString(userIDFK)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CategoryIDFK");
    openapiFields.add("DurationType");
    openapiFields.add("EndDate");
    openapiFields.add("HoursPerDay");
    openapiFields.add("Notes");
    openapiFields.add("ProjectIDFK");
    openapiFields.add("ScheduleOnDaysOff");
    openapiFields.add("StartDate");
    openapiFields.add("TaskIDFK");
    openapiFields.add("TotalDuration");
    openapiFields.add("UserIDFK");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateBooking
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateBooking.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateBooking is not found in the empty JSON string", CreateBooking.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateBooking.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateBooking` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("DurationType") != null && !jsonObj.get("DurationType").isJsonNull()) && !jsonObj.get("DurationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DurationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DurationType").toString()));
      }
      if ((jsonObj.get("Notes") != null && !jsonObj.get("Notes").isJsonNull()) && !jsonObj.get("Notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Notes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateBooking.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateBooking' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateBooking> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateBooking.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateBooking>() {
           @Override
           public void write(JsonWriter out, CreateBooking value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateBooking read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateBooking given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateBooking
   * @throws IOException if the JSON string is invalid with respect to CreateBooking
   */
  public static CreateBooking fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateBooking.class);
  }

  /**
   * Convert an instance of CreateBooking to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

