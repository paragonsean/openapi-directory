/*
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TaxComponent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:56.431364-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TaxComponent {
  public static final String SERIALIZED_NAME_COMPONENT_TAX_CODE = "ComponentTaxCode";
  @SerializedName(SERIALIZED_NAME_COMPONENT_TAX_CODE)
  private String componentTaxCode;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PERCENTAGE = "Percentage";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE)
  private Double percentage;

  public static final String SERIALIZED_NAME_TAX_COMPONENT_I_D = "TaxComponentID";
  @SerializedName(SERIALIZED_NAME_TAX_COMPONENT_I_D)
  private Integer taxComponentID;

  public static final String SERIALIZED_NAME_TAX_I_D_F_K = "TaxIDFK";
  @SerializedName(SERIALIZED_NAME_TAX_I_D_F_K)
  private Integer taxIDFK;

  public static final String SERIALIZED_NAME_IS_COMPOUND = "isCompound";
  @SerializedName(SERIALIZED_NAME_IS_COMPOUND)
  private Boolean isCompound;

  public TaxComponent() {
  }

  public TaxComponent componentTaxCode(String componentTaxCode) {
    this.componentTaxCode = componentTaxCode;
    return this;
  }

  /**
   * Get componentTaxCode
   * @return componentTaxCode
   */
  @javax.annotation.Nullable
  public String getComponentTaxCode() {
    return componentTaxCode;
  }

  public void setComponentTaxCode(String componentTaxCode) {
    this.componentTaxCode = componentTaxCode;
  }


  public TaxComponent name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TaxComponent percentage(Double percentage) {
    this.percentage = percentage;
    return this;
  }

  /**
   * Get percentage
   * @return percentage
   */
  @javax.annotation.Nullable
  public Double getPercentage() {
    return percentage;
  }

  public void setPercentage(Double percentage) {
    this.percentage = percentage;
  }


  public TaxComponent taxComponentID(Integer taxComponentID) {
    this.taxComponentID = taxComponentID;
    return this;
  }

  /**
   * Get taxComponentID
   * @return taxComponentID
   */
  @javax.annotation.Nullable
  public Integer getTaxComponentID() {
    return taxComponentID;
  }

  public void setTaxComponentID(Integer taxComponentID) {
    this.taxComponentID = taxComponentID;
  }


  public TaxComponent taxIDFK(Integer taxIDFK) {
    this.taxIDFK = taxIDFK;
    return this;
  }

  /**
   * Get taxIDFK
   * @return taxIDFK
   */
  @javax.annotation.Nullable
  public Integer getTaxIDFK() {
    return taxIDFK;
  }

  public void setTaxIDFK(Integer taxIDFK) {
    this.taxIDFK = taxIDFK;
  }


  public TaxComponent isCompound(Boolean isCompound) {
    this.isCompound = isCompound;
    return this;
  }

  /**
   * Get isCompound
   * @return isCompound
   */
  @javax.annotation.Nullable
  public Boolean getIsCompound() {
    return isCompound;
  }

  public void setIsCompound(Boolean isCompound) {
    this.isCompound = isCompound;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaxComponent taxComponent = (TaxComponent) o;
    return Objects.equals(this.componentTaxCode, taxComponent.componentTaxCode) &&
        Objects.equals(this.name, taxComponent.name) &&
        Objects.equals(this.percentage, taxComponent.percentage) &&
        Objects.equals(this.taxComponentID, taxComponent.taxComponentID) &&
        Objects.equals(this.taxIDFK, taxComponent.taxIDFK) &&
        Objects.equals(this.isCompound, taxComponent.isCompound);
  }

  @Override
  public int hashCode() {
    return Objects.hash(componentTaxCode, name, percentage, taxComponentID, taxIDFK, isCompound);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaxComponent {\n");
    sb.append("    componentTaxCode: ").append(toIndentedString(componentTaxCode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    percentage: ").append(toIndentedString(percentage)).append("\n");
    sb.append("    taxComponentID: ").append(toIndentedString(taxComponentID)).append("\n");
    sb.append("    taxIDFK: ").append(toIndentedString(taxIDFK)).append("\n");
    sb.append("    isCompound: ").append(toIndentedString(isCompound)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ComponentTaxCode");
    openapiFields.add("Name");
    openapiFields.add("Percentage");
    openapiFields.add("TaxComponentID");
    openapiFields.add("TaxIDFK");
    openapiFields.add("isCompound");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TaxComponent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TaxComponent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaxComponent is not found in the empty JSON string", TaxComponent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TaxComponent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaxComponent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ComponentTaxCode") != null && !jsonObj.get("ComponentTaxCode").isJsonNull()) && !jsonObj.get("ComponentTaxCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ComponentTaxCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ComponentTaxCode").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaxComponent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaxComponent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaxComponent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaxComponent.class));

       return (TypeAdapter<T>) new TypeAdapter<TaxComponent>() {
           @Override
           public void write(JsonWriter out, TaxComponent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaxComponent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TaxComponent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TaxComponent
   * @throws IOException if the JSON string is invalid with respect to TaxComponent
   */
  public static TaxComponent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaxComponent.class);
  }

  /**
   * Convert an instance of TaxComponent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

