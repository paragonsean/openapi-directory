/*
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProjectListDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:56.431364-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectListDetails {
  public static final String SERIALIZED_NAME_COMPANY_I_D_F_K = "CompanyIDFK";
  @SerializedName(SERIALIZED_NAME_COMPANY_I_D_F_K)
  private Integer companyIDFK;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "CompanyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_DATE_CREATED = "DateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_UPDATED = "DateUpdated";
  @SerializedName(SERIALIZED_NAME_DATE_UPDATED)
  private OffsetDateTime dateUpdated;

  public static final String SERIALIZED_NAME_DEFAULT_ACCOUNT_TASK_TYPE_I_D_F_K = "DefaultAccountTaskTypeIDFK";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ACCOUNT_TASK_TYPE_I_D_F_K)
  private Integer defaultAccountTaskTypeIDFK;

  public static final String SERIALIZED_NAME_DEFAULT_ACCOUNT_TASK_TYPE_NAME = "DefaultAccountTaskTypeName";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ACCOUNT_TASK_TYPE_NAME)
  private String defaultAccountTaskTypeName;

  public static final String SERIALIZED_NAME_NOTES = "Notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_PROJECT_CATEGORY_I_D_F_K = "ProjectCategoryIDFK";
  @SerializedName(SERIALIZED_NAME_PROJECT_CATEGORY_I_D_F_K)
  private Long projectCategoryIDFK;

  public static final String SERIALIZED_NAME_PROJECT_CATEGORY_NAME = "ProjectCategoryName";
  @SerializedName(SERIALIZED_NAME_PROJECT_CATEGORY_NAME)
  private String projectCategoryName;

  public static final String SERIALIZED_NAME_PROJECT_CODE = "ProjectCode";
  @SerializedName(SERIALIZED_NAME_PROJECT_CODE)
  private String projectCode;

  public static final String SERIALIZED_NAME_PROJECT_I_D = "ProjectID";
  @SerializedName(SERIALIZED_NAME_PROJECT_I_D)
  private Integer projectID;

  public static final String SERIALIZED_NAME_PROJECT_OWNER_USER_I_D_F_K = "ProjectOwnerUserIDFK";
  @SerializedName(SERIALIZED_NAME_PROJECT_OWNER_USER_I_D_F_K)
  private Long projectOwnerUserIDFK;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_IS_ARCHIVED = "isArchived";
  @SerializedName(SERIALIZED_NAME_IS_ARCHIVED)
  private Boolean isArchived;

  public static final String SERIALIZED_NAME_IS_TASK_REQUIRED_ON_TIMESHEET = "isTaskRequiredOnTimesheet";
  @SerializedName(SERIALIZED_NAME_IS_TASK_REQUIRED_ON_TIMESHEET)
  private Boolean isTaskRequiredOnTimesheet;

  public ProjectListDetails() {
  }

  public ProjectListDetails companyIDFK(Integer companyIDFK) {
    this.companyIDFK = companyIDFK;
    return this;
  }

  /**
   * Get companyIDFK
   * @return companyIDFK
   */
  @javax.annotation.Nullable
  public Integer getCompanyIDFK() {
    return companyIDFK;
  }

  public void setCompanyIDFK(Integer companyIDFK) {
    this.companyIDFK = companyIDFK;
  }


  public ProjectListDetails companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * Get companyName
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public ProjectListDetails dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Get dateCreated
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public ProjectListDetails dateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
    return this;
  }

  /**
   * Get dateUpdated
   * @return dateUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateUpdated() {
    return dateUpdated;
  }

  public void setDateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
  }


  public ProjectListDetails defaultAccountTaskTypeIDFK(Integer defaultAccountTaskTypeIDFK) {
    this.defaultAccountTaskTypeIDFK = defaultAccountTaskTypeIDFK;
    return this;
  }

  /**
   * Get defaultAccountTaskTypeIDFK
   * @return defaultAccountTaskTypeIDFK
   */
  @javax.annotation.Nullable
  public Integer getDefaultAccountTaskTypeIDFK() {
    return defaultAccountTaskTypeIDFK;
  }

  public void setDefaultAccountTaskTypeIDFK(Integer defaultAccountTaskTypeIDFK) {
    this.defaultAccountTaskTypeIDFK = defaultAccountTaskTypeIDFK;
  }


  public ProjectListDetails defaultAccountTaskTypeName(String defaultAccountTaskTypeName) {
    this.defaultAccountTaskTypeName = defaultAccountTaskTypeName;
    return this;
  }

  /**
   * Get defaultAccountTaskTypeName
   * @return defaultAccountTaskTypeName
   */
  @javax.annotation.Nullable
  public String getDefaultAccountTaskTypeName() {
    return defaultAccountTaskTypeName;
  }

  public void setDefaultAccountTaskTypeName(String defaultAccountTaskTypeName) {
    this.defaultAccountTaskTypeName = defaultAccountTaskTypeName;
  }


  public ProjectListDetails notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Get notes
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public ProjectListDetails projectCategoryIDFK(Long projectCategoryIDFK) {
    this.projectCategoryIDFK = projectCategoryIDFK;
    return this;
  }

  /**
   * Get projectCategoryIDFK
   * @return projectCategoryIDFK
   */
  @javax.annotation.Nullable
  public Long getProjectCategoryIDFK() {
    return projectCategoryIDFK;
  }

  public void setProjectCategoryIDFK(Long projectCategoryIDFK) {
    this.projectCategoryIDFK = projectCategoryIDFK;
  }


  public ProjectListDetails projectCategoryName(String projectCategoryName) {
    this.projectCategoryName = projectCategoryName;
    return this;
  }

  /**
   * Get projectCategoryName
   * @return projectCategoryName
   */
  @javax.annotation.Nullable
  public String getProjectCategoryName() {
    return projectCategoryName;
  }

  public void setProjectCategoryName(String projectCategoryName) {
    this.projectCategoryName = projectCategoryName;
  }


  public ProjectListDetails projectCode(String projectCode) {
    this.projectCode = projectCode;
    return this;
  }

  /**
   * Get projectCode
   * @return projectCode
   */
  @javax.annotation.Nullable
  public String getProjectCode() {
    return projectCode;
  }

  public void setProjectCode(String projectCode) {
    this.projectCode = projectCode;
  }


  public ProjectListDetails projectID(Integer projectID) {
    this.projectID = projectID;
    return this;
  }

  /**
   * Get projectID
   * @return projectID
   */
  @javax.annotation.Nullable
  public Integer getProjectID() {
    return projectID;
  }

  public void setProjectID(Integer projectID) {
    this.projectID = projectID;
  }


  public ProjectListDetails projectOwnerUserIDFK(Long projectOwnerUserIDFK) {
    this.projectOwnerUserIDFK = projectOwnerUserIDFK;
    return this;
  }

  /**
   * Get projectOwnerUserIDFK
   * @return projectOwnerUserIDFK
   */
  @javax.annotation.Nullable
  public Long getProjectOwnerUserIDFK() {
    return projectOwnerUserIDFK;
  }

  public void setProjectOwnerUserIDFK(Long projectOwnerUserIDFK) {
    this.projectOwnerUserIDFK = projectOwnerUserIDFK;
  }


  public ProjectListDetails title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public ProjectListDetails isArchived(Boolean isArchived) {
    this.isArchived = isArchived;
    return this;
  }

  /**
   * Get isArchived
   * @return isArchived
   */
  @javax.annotation.Nullable
  public Boolean getIsArchived() {
    return isArchived;
  }

  public void setIsArchived(Boolean isArchived) {
    this.isArchived = isArchived;
  }


  public ProjectListDetails isTaskRequiredOnTimesheet(Boolean isTaskRequiredOnTimesheet) {
    this.isTaskRequiredOnTimesheet = isTaskRequiredOnTimesheet;
    return this;
  }

  /**
   * Get isTaskRequiredOnTimesheet
   * @return isTaskRequiredOnTimesheet
   */
  @javax.annotation.Nullable
  public Boolean getIsTaskRequiredOnTimesheet() {
    return isTaskRequiredOnTimesheet;
  }

  public void setIsTaskRequiredOnTimesheet(Boolean isTaskRequiredOnTimesheet) {
    this.isTaskRequiredOnTimesheet = isTaskRequiredOnTimesheet;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectListDetails projectListDetails = (ProjectListDetails) o;
    return Objects.equals(this.companyIDFK, projectListDetails.companyIDFK) &&
        Objects.equals(this.companyName, projectListDetails.companyName) &&
        Objects.equals(this.dateCreated, projectListDetails.dateCreated) &&
        Objects.equals(this.dateUpdated, projectListDetails.dateUpdated) &&
        Objects.equals(this.defaultAccountTaskTypeIDFK, projectListDetails.defaultAccountTaskTypeIDFK) &&
        Objects.equals(this.defaultAccountTaskTypeName, projectListDetails.defaultAccountTaskTypeName) &&
        Objects.equals(this.notes, projectListDetails.notes) &&
        Objects.equals(this.projectCategoryIDFK, projectListDetails.projectCategoryIDFK) &&
        Objects.equals(this.projectCategoryName, projectListDetails.projectCategoryName) &&
        Objects.equals(this.projectCode, projectListDetails.projectCode) &&
        Objects.equals(this.projectID, projectListDetails.projectID) &&
        Objects.equals(this.projectOwnerUserIDFK, projectListDetails.projectOwnerUserIDFK) &&
        Objects.equals(this.title, projectListDetails.title) &&
        Objects.equals(this.isArchived, projectListDetails.isArchived) &&
        Objects.equals(this.isTaskRequiredOnTimesheet, projectListDetails.isTaskRequiredOnTimesheet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(companyIDFK, companyName, dateCreated, dateUpdated, defaultAccountTaskTypeIDFK, defaultAccountTaskTypeName, notes, projectCategoryIDFK, projectCategoryName, projectCode, projectID, projectOwnerUserIDFK, title, isArchived, isTaskRequiredOnTimesheet);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectListDetails {\n");
    sb.append("    companyIDFK: ").append(toIndentedString(companyIDFK)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateUpdated: ").append(toIndentedString(dateUpdated)).append("\n");
    sb.append("    defaultAccountTaskTypeIDFK: ").append(toIndentedString(defaultAccountTaskTypeIDFK)).append("\n");
    sb.append("    defaultAccountTaskTypeName: ").append(toIndentedString(defaultAccountTaskTypeName)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    projectCategoryIDFK: ").append(toIndentedString(projectCategoryIDFK)).append("\n");
    sb.append("    projectCategoryName: ").append(toIndentedString(projectCategoryName)).append("\n");
    sb.append("    projectCode: ").append(toIndentedString(projectCode)).append("\n");
    sb.append("    projectID: ").append(toIndentedString(projectID)).append("\n");
    sb.append("    projectOwnerUserIDFK: ").append(toIndentedString(projectOwnerUserIDFK)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    isArchived: ").append(toIndentedString(isArchived)).append("\n");
    sb.append("    isTaskRequiredOnTimesheet: ").append(toIndentedString(isTaskRequiredOnTimesheet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CompanyIDFK");
    openapiFields.add("CompanyName");
    openapiFields.add("DateCreated");
    openapiFields.add("DateUpdated");
    openapiFields.add("DefaultAccountTaskTypeIDFK");
    openapiFields.add("DefaultAccountTaskTypeName");
    openapiFields.add("Notes");
    openapiFields.add("ProjectCategoryIDFK");
    openapiFields.add("ProjectCategoryName");
    openapiFields.add("ProjectCode");
    openapiFields.add("ProjectID");
    openapiFields.add("ProjectOwnerUserIDFK");
    openapiFields.add("Title");
    openapiFields.add("isArchived");
    openapiFields.add("isTaskRequiredOnTimesheet");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectListDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectListDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectListDetails is not found in the empty JSON string", ProjectListDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectListDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectListDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CompanyName") != null && !jsonObj.get("CompanyName").isJsonNull()) && !jsonObj.get("CompanyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CompanyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CompanyName").toString()));
      }
      if ((jsonObj.get("DefaultAccountTaskTypeName") != null && !jsonObj.get("DefaultAccountTaskTypeName").isJsonNull()) && !jsonObj.get("DefaultAccountTaskTypeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DefaultAccountTaskTypeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DefaultAccountTaskTypeName").toString()));
      }
      if ((jsonObj.get("Notes") != null && !jsonObj.get("Notes").isJsonNull()) && !jsonObj.get("Notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Notes").toString()));
      }
      if ((jsonObj.get("ProjectCategoryName") != null && !jsonObj.get("ProjectCategoryName").isJsonNull()) && !jsonObj.get("ProjectCategoryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProjectCategoryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProjectCategoryName").toString()));
      }
      if ((jsonObj.get("ProjectCode") != null && !jsonObj.get("ProjectCode").isJsonNull()) && !jsonObj.get("ProjectCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProjectCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProjectCode").toString()));
      }
      if ((jsonObj.get("Title") != null && !jsonObj.get("Title").isJsonNull()) && !jsonObj.get("Title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectListDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectListDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectListDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectListDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectListDetails>() {
           @Override
           public void write(JsonWriter out, ProjectListDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectListDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectListDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectListDetails
   * @throws IOException if the JSON string is invalid with respect to ProjectListDetails
   */
  public static ProjectListDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectListDetails.class);
  }

  /**
   * Convert an instance of ProjectListDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

