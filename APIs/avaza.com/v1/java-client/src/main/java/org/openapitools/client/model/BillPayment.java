/*
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BillPaymentAllocation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BillPayment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:56.431364-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BillPayment {
  public static final String SERIALIZED_NAME_ACCOUNT_I_D_F_K = "AccountIDFK";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_I_D_F_K)
  private Integer accountIDFK;

  public static final String SERIALIZED_NAME_BALANCE = "Balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private Double balance;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "CurrencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_DATE_CREATED = "DateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_ISSUED = "DateIssued";
  @SerializedName(SERIALIZED_NAME_DATE_ISSUED)
  private OffsetDateTime dateIssued;

  public static final String SERIALIZED_NAME_DATE_UPDATED = "DateUpdated";
  @SerializedName(SERIALIZED_NAME_DATE_UPDATED)
  private OffsetDateTime dateUpdated;

  public static final String SERIALIZED_NAME_EXCHANGE_RATE = "ExchangeRate";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_RATE)
  private Double exchangeRate;

  public static final String SERIALIZED_NAME_NOTES = "Notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_PAYMENT_ALLOCATIONS = "PaymentAllocations";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ALLOCATIONS)
  private List<BillPaymentAllocation> paymentAllocations = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAYMENT_NUMBER = "PaymentNumber";
  @SerializedName(SERIALIZED_NAME_PAYMENT_NUMBER)
  private String paymentNumber;

  public static final String SERIALIZED_NAME_PAYMENT_PROVIDER_CODE = "PaymentProviderCode";
  @SerializedName(SERIALIZED_NAME_PAYMENT_PROVIDER_CODE)
  private String paymentProviderCode;

  public static final String SERIALIZED_NAME_SUPPLIER_I_D_F_K = "SupplierIDFK";
  @SerializedName(SERIALIZED_NAME_SUPPLIER_I_D_F_K)
  private Integer supplierIDFK;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT = "TotalAmount";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT)
  private Double totalAmount;

  public static final String SERIALIZED_NAME_TRANSACTION_I_D = "TransactionID";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_I_D)
  private Long transactionID;

  public static final String SERIALIZED_NAME_TRANSACTION_PREFIX = "TransactionPrefix";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_PREFIX)
  private String transactionPrefix;

  public static final String SERIALIZED_NAME_TRANSACTION_REFERENCE = "TransactionReference";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_REFERENCE)
  private String transactionReference;

  public static final String SERIALIZED_NAME_TRANSACTION_STATUS_CODE = "TransactionStatusCode";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_STATUS_CODE)
  private String transactionStatusCode;

  public BillPayment() {
  }

  public BillPayment accountIDFK(Integer accountIDFK) {
    this.accountIDFK = accountIDFK;
    return this;
  }

  /**
   * Get accountIDFK
   * @return accountIDFK
   */
  @javax.annotation.Nullable
  public Integer getAccountIDFK() {
    return accountIDFK;
  }

  public void setAccountIDFK(Integer accountIDFK) {
    this.accountIDFK = accountIDFK;
  }


  public BillPayment balance(Double balance) {
    this.balance = balance;
    return this;
  }

  /**
   * Get balance
   * @return balance
   */
  @javax.annotation.Nullable
  public Double getBalance() {
    return balance;
  }

  public void setBalance(Double balance) {
    this.balance = balance;
  }


  public BillPayment currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Get currencyCode
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public BillPayment dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Get dateCreated
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public BillPayment dateIssued(OffsetDateTime dateIssued) {
    this.dateIssued = dateIssued;
    return this;
  }

  /**
   * Get dateIssued
   * @return dateIssued
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateIssued() {
    return dateIssued;
  }

  public void setDateIssued(OffsetDateTime dateIssued) {
    this.dateIssued = dateIssued;
  }


  public BillPayment dateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
    return this;
  }

  /**
   * Get dateUpdated
   * @return dateUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateUpdated() {
    return dateUpdated;
  }

  public void setDateUpdated(OffsetDateTime dateUpdated) {
    this.dateUpdated = dateUpdated;
  }


  public BillPayment exchangeRate(Double exchangeRate) {
    this.exchangeRate = exchangeRate;
    return this;
  }

  /**
   * Get exchangeRate
   * @return exchangeRate
   */
  @javax.annotation.Nullable
  public Double getExchangeRate() {
    return exchangeRate;
  }

  public void setExchangeRate(Double exchangeRate) {
    this.exchangeRate = exchangeRate;
  }


  public BillPayment notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Get notes
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public BillPayment paymentAllocations(List<BillPaymentAllocation> paymentAllocations) {
    this.paymentAllocations = paymentAllocations;
    return this;
  }

  public BillPayment addPaymentAllocationsItem(BillPaymentAllocation paymentAllocationsItem) {
    if (this.paymentAllocations == null) {
      this.paymentAllocations = new ArrayList<>();
    }
    this.paymentAllocations.add(paymentAllocationsItem);
    return this;
  }

  /**
   * Get paymentAllocations
   * @return paymentAllocations
   */
  @javax.annotation.Nullable
  public List<BillPaymentAllocation> getPaymentAllocations() {
    return paymentAllocations;
  }

  public void setPaymentAllocations(List<BillPaymentAllocation> paymentAllocations) {
    this.paymentAllocations = paymentAllocations;
  }


  public BillPayment paymentNumber(String paymentNumber) {
    this.paymentNumber = paymentNumber;
    return this;
  }

  /**
   * Get paymentNumber
   * @return paymentNumber
   */
  @javax.annotation.Nullable
  public String getPaymentNumber() {
    return paymentNumber;
  }

  public void setPaymentNumber(String paymentNumber) {
    this.paymentNumber = paymentNumber;
  }


  public BillPayment paymentProviderCode(String paymentProviderCode) {
    this.paymentProviderCode = paymentProviderCode;
    return this;
  }

  /**
   * Get paymentProviderCode
   * @return paymentProviderCode
   */
  @javax.annotation.Nullable
  public String getPaymentProviderCode() {
    return paymentProviderCode;
  }

  public void setPaymentProviderCode(String paymentProviderCode) {
    this.paymentProviderCode = paymentProviderCode;
  }


  public BillPayment supplierIDFK(Integer supplierIDFK) {
    this.supplierIDFK = supplierIDFK;
    return this;
  }

  /**
   * Get supplierIDFK
   * @return supplierIDFK
   */
  @javax.annotation.Nullable
  public Integer getSupplierIDFK() {
    return supplierIDFK;
  }

  public void setSupplierIDFK(Integer supplierIDFK) {
    this.supplierIDFK = supplierIDFK;
  }


  public BillPayment totalAmount(Double totalAmount) {
    this.totalAmount = totalAmount;
    return this;
  }

  /**
   * Get totalAmount
   * @return totalAmount
   */
  @javax.annotation.Nullable
  public Double getTotalAmount() {
    return totalAmount;
  }

  public void setTotalAmount(Double totalAmount) {
    this.totalAmount = totalAmount;
  }


  public BillPayment transactionID(Long transactionID) {
    this.transactionID = transactionID;
    return this;
  }

  /**
   * Get transactionID
   * @return transactionID
   */
  @javax.annotation.Nullable
  public Long getTransactionID() {
    return transactionID;
  }

  public void setTransactionID(Long transactionID) {
    this.transactionID = transactionID;
  }


  public BillPayment transactionPrefix(String transactionPrefix) {
    this.transactionPrefix = transactionPrefix;
    return this;
  }

  /**
   * Get transactionPrefix
   * @return transactionPrefix
   */
  @javax.annotation.Nullable
  public String getTransactionPrefix() {
    return transactionPrefix;
  }

  public void setTransactionPrefix(String transactionPrefix) {
    this.transactionPrefix = transactionPrefix;
  }


  public BillPayment transactionReference(String transactionReference) {
    this.transactionReference = transactionReference;
    return this;
  }

  /**
   * Get transactionReference
   * @return transactionReference
   */
  @javax.annotation.Nullable
  public String getTransactionReference() {
    return transactionReference;
  }

  public void setTransactionReference(String transactionReference) {
    this.transactionReference = transactionReference;
  }


  public BillPayment transactionStatusCode(String transactionStatusCode) {
    this.transactionStatusCode = transactionStatusCode;
    return this;
  }

  /**
   * Get transactionStatusCode
   * @return transactionStatusCode
   */
  @javax.annotation.Nullable
  public String getTransactionStatusCode() {
    return transactionStatusCode;
  }

  public void setTransactionStatusCode(String transactionStatusCode) {
    this.transactionStatusCode = transactionStatusCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BillPayment billPayment = (BillPayment) o;
    return Objects.equals(this.accountIDFK, billPayment.accountIDFK) &&
        Objects.equals(this.balance, billPayment.balance) &&
        Objects.equals(this.currencyCode, billPayment.currencyCode) &&
        Objects.equals(this.dateCreated, billPayment.dateCreated) &&
        Objects.equals(this.dateIssued, billPayment.dateIssued) &&
        Objects.equals(this.dateUpdated, billPayment.dateUpdated) &&
        Objects.equals(this.exchangeRate, billPayment.exchangeRate) &&
        Objects.equals(this.notes, billPayment.notes) &&
        Objects.equals(this.paymentAllocations, billPayment.paymentAllocations) &&
        Objects.equals(this.paymentNumber, billPayment.paymentNumber) &&
        Objects.equals(this.paymentProviderCode, billPayment.paymentProviderCode) &&
        Objects.equals(this.supplierIDFK, billPayment.supplierIDFK) &&
        Objects.equals(this.totalAmount, billPayment.totalAmount) &&
        Objects.equals(this.transactionID, billPayment.transactionID) &&
        Objects.equals(this.transactionPrefix, billPayment.transactionPrefix) &&
        Objects.equals(this.transactionReference, billPayment.transactionReference) &&
        Objects.equals(this.transactionStatusCode, billPayment.transactionStatusCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountIDFK, balance, currencyCode, dateCreated, dateIssued, dateUpdated, exchangeRate, notes, paymentAllocations, paymentNumber, paymentProviderCode, supplierIDFK, totalAmount, transactionID, transactionPrefix, transactionReference, transactionStatusCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BillPayment {\n");
    sb.append("    accountIDFK: ").append(toIndentedString(accountIDFK)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateIssued: ").append(toIndentedString(dateIssued)).append("\n");
    sb.append("    dateUpdated: ").append(toIndentedString(dateUpdated)).append("\n");
    sb.append("    exchangeRate: ").append(toIndentedString(exchangeRate)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    paymentAllocations: ").append(toIndentedString(paymentAllocations)).append("\n");
    sb.append("    paymentNumber: ").append(toIndentedString(paymentNumber)).append("\n");
    sb.append("    paymentProviderCode: ").append(toIndentedString(paymentProviderCode)).append("\n");
    sb.append("    supplierIDFK: ").append(toIndentedString(supplierIDFK)).append("\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("    transactionID: ").append(toIndentedString(transactionID)).append("\n");
    sb.append("    transactionPrefix: ").append(toIndentedString(transactionPrefix)).append("\n");
    sb.append("    transactionReference: ").append(toIndentedString(transactionReference)).append("\n");
    sb.append("    transactionStatusCode: ").append(toIndentedString(transactionStatusCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccountIDFK");
    openapiFields.add("Balance");
    openapiFields.add("CurrencyCode");
    openapiFields.add("DateCreated");
    openapiFields.add("DateIssued");
    openapiFields.add("DateUpdated");
    openapiFields.add("ExchangeRate");
    openapiFields.add("Notes");
    openapiFields.add("PaymentAllocations");
    openapiFields.add("PaymentNumber");
    openapiFields.add("PaymentProviderCode");
    openapiFields.add("SupplierIDFK");
    openapiFields.add("TotalAmount");
    openapiFields.add("TransactionID");
    openapiFields.add("TransactionPrefix");
    openapiFields.add("TransactionReference");
    openapiFields.add("TransactionStatusCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BillPayment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BillPayment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BillPayment is not found in the empty JSON string", BillPayment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BillPayment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BillPayment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CurrencyCode") != null && !jsonObj.get("CurrencyCode").isJsonNull()) && !jsonObj.get("CurrencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrencyCode").toString()));
      }
      if ((jsonObj.get("Notes") != null && !jsonObj.get("Notes").isJsonNull()) && !jsonObj.get("Notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Notes").toString()));
      }
      if (jsonObj.get("PaymentAllocations") != null && !jsonObj.get("PaymentAllocations").isJsonNull()) {
        JsonArray jsonArraypaymentAllocations = jsonObj.getAsJsonArray("PaymentAllocations");
        if (jsonArraypaymentAllocations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("PaymentAllocations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `PaymentAllocations` to be an array in the JSON string but got `%s`", jsonObj.get("PaymentAllocations").toString()));
          }

          // validate the optional field `PaymentAllocations` (array)
          for (int i = 0; i < jsonArraypaymentAllocations.size(); i++) {
            BillPaymentAllocation.validateJsonElement(jsonArraypaymentAllocations.get(i));
          };
        }
      }
      if ((jsonObj.get("PaymentNumber") != null && !jsonObj.get("PaymentNumber").isJsonNull()) && !jsonObj.get("PaymentNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PaymentNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PaymentNumber").toString()));
      }
      if ((jsonObj.get("PaymentProviderCode") != null && !jsonObj.get("PaymentProviderCode").isJsonNull()) && !jsonObj.get("PaymentProviderCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PaymentProviderCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PaymentProviderCode").toString()));
      }
      if ((jsonObj.get("TransactionPrefix") != null && !jsonObj.get("TransactionPrefix").isJsonNull()) && !jsonObj.get("TransactionPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TransactionPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TransactionPrefix").toString()));
      }
      if ((jsonObj.get("TransactionReference") != null && !jsonObj.get("TransactionReference").isJsonNull()) && !jsonObj.get("TransactionReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TransactionReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TransactionReference").toString()));
      }
      if ((jsonObj.get("TransactionStatusCode") != null && !jsonObj.get("TransactionStatusCode").isJsonNull()) && !jsonObj.get("TransactionStatusCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TransactionStatusCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TransactionStatusCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BillPayment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BillPayment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BillPayment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BillPayment.class));

       return (TypeAdapter<T>) new TypeAdapter<BillPayment>() {
           @Override
           public void write(JsonWriter out, BillPayment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BillPayment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BillPayment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BillPayment
   * @throws IOException if the JSON string is invalid with respect to BillPayment
   */
  public static BillPayment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BillPayment.class);
  }

  /**
   * Convert an instance of BillPayment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

