/*
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateCompany
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:56.431364-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateCompany {
  public static final String SERIALIZED_NAME_BILLING_ADDRESS = "BillingAddress";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS)
  private String billingAddress;

  public static final String SERIALIZED_NAME_BILLING_ADDRESS_CITY = "BillingAddressCity";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS_CITY)
  private String billingAddressCity;

  public static final String SERIALIZED_NAME_BILLING_ADDRESS_LINE = "BillingAddressLine";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS_LINE)
  private String billingAddressLine;

  public static final String SERIALIZED_NAME_BILLING_ADDRESS_POST_CODE = "BillingAddressPostCode";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS_POST_CODE)
  private String billingAddressPostCode;

  public static final String SERIALIZED_NAME_BILLING_ADDRESS_STATE = "BillingAddressState";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS_STATE)
  private String billingAddressState;

  public static final String SERIALIZED_NAME_BILLING_COUNTRY_CODE = "BillingCountryCode";
  @SerializedName(SERIALIZED_NAME_BILLING_COUNTRY_CODE)
  private String billingCountryCode;

  public static final String SERIALIZED_NAME_COMMENTS = "Comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_COMPANY_I_D = "CompanyID";
  @SerializedName(SERIALIZED_NAME_COMPANY_I_D)
  private Integer companyID;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "CompanyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_FAX = "Fax";
  @SerializedName(SERIALIZED_NAME_FAX)
  private String fax;

  public static final String SERIALIZED_NAME_FIELDS_TO_UPDATE = "FieldsToUpdate";
  @SerializedName(SERIALIZED_NAME_FIELDS_TO_UPDATE)
  private List<String> fieldsToUpdate = new ArrayList<>();

  public static final String SERIALIZED_NAME_PHONE = "Phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_TAX_NUMBER = "TaxNumber";
  @SerializedName(SERIALIZED_NAME_TAX_NUMBER)
  private String taxNumber;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public UpdateCompany() {
  }

  public UpdateCompany billingAddress(String billingAddress) {
    this.billingAddress = billingAddress;
    return this;
  }

  /**
   * Get billingAddress
   * @return billingAddress
   */
  @javax.annotation.Nullable
  public String getBillingAddress() {
    return billingAddress;
  }

  public void setBillingAddress(String billingAddress) {
    this.billingAddress = billingAddress;
  }


  public UpdateCompany billingAddressCity(String billingAddressCity) {
    this.billingAddressCity = billingAddressCity;
    return this;
  }

  /**
   * Get billingAddressCity
   * @return billingAddressCity
   */
  @javax.annotation.Nullable
  public String getBillingAddressCity() {
    return billingAddressCity;
  }

  public void setBillingAddressCity(String billingAddressCity) {
    this.billingAddressCity = billingAddressCity;
  }


  public UpdateCompany billingAddressLine(String billingAddressLine) {
    this.billingAddressLine = billingAddressLine;
    return this;
  }

  /**
   * Get billingAddressLine
   * @return billingAddressLine
   */
  @javax.annotation.Nullable
  public String getBillingAddressLine() {
    return billingAddressLine;
  }

  public void setBillingAddressLine(String billingAddressLine) {
    this.billingAddressLine = billingAddressLine;
  }


  public UpdateCompany billingAddressPostCode(String billingAddressPostCode) {
    this.billingAddressPostCode = billingAddressPostCode;
    return this;
  }

  /**
   * Get billingAddressPostCode
   * @return billingAddressPostCode
   */
  @javax.annotation.Nullable
  public String getBillingAddressPostCode() {
    return billingAddressPostCode;
  }

  public void setBillingAddressPostCode(String billingAddressPostCode) {
    this.billingAddressPostCode = billingAddressPostCode;
  }


  public UpdateCompany billingAddressState(String billingAddressState) {
    this.billingAddressState = billingAddressState;
    return this;
  }

  /**
   * Get billingAddressState
   * @return billingAddressState
   */
  @javax.annotation.Nullable
  public String getBillingAddressState() {
    return billingAddressState;
  }

  public void setBillingAddressState(String billingAddressState) {
    this.billingAddressState = billingAddressState;
  }


  public UpdateCompany billingCountryCode(String billingCountryCode) {
    this.billingCountryCode = billingCountryCode;
    return this;
  }

  /**
   * Get billingCountryCode
   * @return billingCountryCode
   */
  @javax.annotation.Nullable
  public String getBillingCountryCode() {
    return billingCountryCode;
  }

  public void setBillingCountryCode(String billingCountryCode) {
    this.billingCountryCode = billingCountryCode;
  }


  public UpdateCompany comments(String comments) {
    this.comments = comments;
    return this;
  }

  /**
   * Get comments
   * @return comments
   */
  @javax.annotation.Nullable
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }


  public UpdateCompany companyID(Integer companyID) {
    this.companyID = companyID;
    return this;
  }

  /**
   * Get companyID
   * @return companyID
   */
  @javax.annotation.Nullable
  public Integer getCompanyID() {
    return companyID;
  }

  public void setCompanyID(Integer companyID) {
    this.companyID = companyID;
  }


  public UpdateCompany companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * Get companyName
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public UpdateCompany fax(String fax) {
    this.fax = fax;
    return this;
  }

  /**
   * Get fax
   * @return fax
   */
  @javax.annotation.Nullable
  public String getFax() {
    return fax;
  }

  public void setFax(String fax) {
    this.fax = fax;
  }


  public UpdateCompany fieldsToUpdate(List<String> fieldsToUpdate) {
    this.fieldsToUpdate = fieldsToUpdate;
    return this;
  }

  public UpdateCompany addFieldsToUpdateItem(String fieldsToUpdateItem) {
    if (this.fieldsToUpdate == null) {
      this.fieldsToUpdate = new ArrayList<>();
    }
    this.fieldsToUpdate.add(fieldsToUpdateItem);
    return this;
  }

  /**
   * Get fieldsToUpdate
   * @return fieldsToUpdate
   */
  @javax.annotation.Nullable
  public List<String> getFieldsToUpdate() {
    return fieldsToUpdate;
  }

  public void setFieldsToUpdate(List<String> fieldsToUpdate) {
    this.fieldsToUpdate = fieldsToUpdate;
  }


  public UpdateCompany phone(String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * Get phone
   * @return phone
   */
  @javax.annotation.Nullable
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }


  public UpdateCompany taxNumber(String taxNumber) {
    this.taxNumber = taxNumber;
    return this;
  }

  /**
   * Get taxNumber
   * @return taxNumber
   */
  @javax.annotation.Nullable
  public String getTaxNumber() {
    return taxNumber;
  }

  public void setTaxNumber(String taxNumber) {
    this.taxNumber = taxNumber;
  }


  public UpdateCompany website(String website) {
    this.website = website;
    return this;
  }

  /**
   * Get website
   * @return website
   */
  @javax.annotation.Nullable
  public String getWebsite() {
    return website;
  }

  public void setWebsite(String website) {
    this.website = website;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateCompany updateCompany = (UpdateCompany) o;
    return Objects.equals(this.billingAddress, updateCompany.billingAddress) &&
        Objects.equals(this.billingAddressCity, updateCompany.billingAddressCity) &&
        Objects.equals(this.billingAddressLine, updateCompany.billingAddressLine) &&
        Objects.equals(this.billingAddressPostCode, updateCompany.billingAddressPostCode) &&
        Objects.equals(this.billingAddressState, updateCompany.billingAddressState) &&
        Objects.equals(this.billingCountryCode, updateCompany.billingCountryCode) &&
        Objects.equals(this.comments, updateCompany.comments) &&
        Objects.equals(this.companyID, updateCompany.companyID) &&
        Objects.equals(this.companyName, updateCompany.companyName) &&
        Objects.equals(this.fax, updateCompany.fax) &&
        Objects.equals(this.fieldsToUpdate, updateCompany.fieldsToUpdate) &&
        Objects.equals(this.phone, updateCompany.phone) &&
        Objects.equals(this.taxNumber, updateCompany.taxNumber) &&
        Objects.equals(this.website, updateCompany.website);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingAddress, billingAddressCity, billingAddressLine, billingAddressPostCode, billingAddressState, billingCountryCode, comments, companyID, companyName, fax, fieldsToUpdate, phone, taxNumber, website);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateCompany {\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    billingAddressCity: ").append(toIndentedString(billingAddressCity)).append("\n");
    sb.append("    billingAddressLine: ").append(toIndentedString(billingAddressLine)).append("\n");
    sb.append("    billingAddressPostCode: ").append(toIndentedString(billingAddressPostCode)).append("\n");
    sb.append("    billingAddressState: ").append(toIndentedString(billingAddressState)).append("\n");
    sb.append("    billingCountryCode: ").append(toIndentedString(billingCountryCode)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    companyID: ").append(toIndentedString(companyID)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    fax: ").append(toIndentedString(fax)).append("\n");
    sb.append("    fieldsToUpdate: ").append(toIndentedString(fieldsToUpdate)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    taxNumber: ").append(toIndentedString(taxNumber)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BillingAddress");
    openapiFields.add("BillingAddressCity");
    openapiFields.add("BillingAddressLine");
    openapiFields.add("BillingAddressPostCode");
    openapiFields.add("BillingAddressState");
    openapiFields.add("BillingCountryCode");
    openapiFields.add("Comments");
    openapiFields.add("CompanyID");
    openapiFields.add("CompanyName");
    openapiFields.add("Fax");
    openapiFields.add("FieldsToUpdate");
    openapiFields.add("Phone");
    openapiFields.add("TaxNumber");
    openapiFields.add("website");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateCompany
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateCompany.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateCompany is not found in the empty JSON string", UpdateCompany.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateCompany.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateCompany` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("BillingAddress") != null && !jsonObj.get("BillingAddress").isJsonNull()) && !jsonObj.get("BillingAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BillingAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BillingAddress").toString()));
      }
      if ((jsonObj.get("BillingAddressCity") != null && !jsonObj.get("BillingAddressCity").isJsonNull()) && !jsonObj.get("BillingAddressCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BillingAddressCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BillingAddressCity").toString()));
      }
      if ((jsonObj.get("BillingAddressLine") != null && !jsonObj.get("BillingAddressLine").isJsonNull()) && !jsonObj.get("BillingAddressLine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BillingAddressLine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BillingAddressLine").toString()));
      }
      if ((jsonObj.get("BillingAddressPostCode") != null && !jsonObj.get("BillingAddressPostCode").isJsonNull()) && !jsonObj.get("BillingAddressPostCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BillingAddressPostCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BillingAddressPostCode").toString()));
      }
      if ((jsonObj.get("BillingAddressState") != null && !jsonObj.get("BillingAddressState").isJsonNull()) && !jsonObj.get("BillingAddressState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BillingAddressState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BillingAddressState").toString()));
      }
      if ((jsonObj.get("BillingCountryCode") != null && !jsonObj.get("BillingCountryCode").isJsonNull()) && !jsonObj.get("BillingCountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BillingCountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BillingCountryCode").toString()));
      }
      if ((jsonObj.get("Comments") != null && !jsonObj.get("Comments").isJsonNull()) && !jsonObj.get("Comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Comments").toString()));
      }
      if ((jsonObj.get("CompanyName") != null && !jsonObj.get("CompanyName").isJsonNull()) && !jsonObj.get("CompanyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CompanyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CompanyName").toString()));
      }
      if ((jsonObj.get("Fax") != null && !jsonObj.get("Fax").isJsonNull()) && !jsonObj.get("Fax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Fax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Fax").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("FieldsToUpdate") != null && !jsonObj.get("FieldsToUpdate").isJsonNull() && !jsonObj.get("FieldsToUpdate").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `FieldsToUpdate` to be an array in the JSON string but got `%s`", jsonObj.get("FieldsToUpdate").toString()));
      }
      if ((jsonObj.get("Phone") != null && !jsonObj.get("Phone").isJsonNull()) && !jsonObj.get("Phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Phone").toString()));
      }
      if ((jsonObj.get("TaxNumber") != null && !jsonObj.get("TaxNumber").isJsonNull()) && !jsonObj.get("TaxNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TaxNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TaxNumber").toString()));
      }
      if ((jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) && !jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateCompany.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateCompany' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateCompany> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateCompany.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateCompany>() {
           @Override
           public void write(JsonWriter out, UpdateCompany value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateCompany read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateCompany given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateCompany
   * @throws IOException if the JSON string is invalid with respect to UpdateCompany
   */
  public static UpdateCompany fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateCompany.class);
  }

  /**
   * Convert an instance of UpdateCompany to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

