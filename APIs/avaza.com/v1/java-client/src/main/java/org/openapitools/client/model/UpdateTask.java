/*
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NewTag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateTask
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:56.431364-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateTask {
  public static final String SERIALIZED_NAME_ASSIGNED_TO_USER_I_D_F_K = "AssignedToUserIDFK";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_TO_USER_I_D_F_K)
  private List<Integer> assignedToUserIDFK = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE_DUE = "DateDue";
  @SerializedName(SERIALIZED_NAME_DATE_DUE)
  private OffsetDateTime dateDue;

  public static final String SERIALIZED_NAME_DATE_START = "DateStart";
  @SerializedName(SERIALIZED_NAME_DATE_START)
  private OffsetDateTime dateStart;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ESTIMATED_EFFORT = "EstimatedEffort";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_EFFORT)
  private Double estimatedEffort;

  public static final String SERIALIZED_NAME_FIELDS_TO_UPDATE = "FieldsToUpdate";
  @SerializedName(SERIALIZED_NAME_FIELDS_TO_UPDATE)
  private List<String> fieldsToUpdate = new ArrayList<>();

  public static final String SERIALIZED_NAME_PERCENT_COMPLETE = "PercentComplete";
  @SerializedName(SERIALIZED_NAME_PERCENT_COMPLETE)
  private Integer percentComplete;

  public static final String SERIALIZED_NAME_SECTION_I_D_F_K = "SectionIDFK";
  @SerializedName(SERIALIZED_NAME_SECTION_I_D_F_K)
  private Integer sectionIDFK;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<NewTag> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TASK_I_D = "TaskID";
  @SerializedName(SERIALIZED_NAME_TASK_I_D)
  private Integer taskID;

  public static final String SERIALIZED_NAME_TASK_PRIORITY_CODE = "TaskPriorityCode";
  @SerializedName(SERIALIZED_NAME_TASK_PRIORITY_CODE)
  private String taskPriorityCode;

  public static final String SERIALIZED_NAME_TASK_STATUS_CODE = "TaskStatusCode";
  @SerializedName(SERIALIZED_NAME_TASK_STATUS_CODE)
  private String taskStatusCode;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public UpdateTask() {
  }

  public UpdateTask assignedToUserIDFK(List<Integer> assignedToUserIDFK) {
    this.assignedToUserIDFK = assignedToUserIDFK;
    return this;
  }

  public UpdateTask addAssignedToUserIDFKItem(Integer assignedToUserIDFKItem) {
    if (this.assignedToUserIDFK == null) {
      this.assignedToUserIDFK = new ArrayList<>();
    }
    this.assignedToUserIDFK.add(assignedToUserIDFKItem);
    return this;
  }

  /**
   * Get assignedToUserIDFK
   * @return assignedToUserIDFK
   */
  @javax.annotation.Nullable
  public List<Integer> getAssignedToUserIDFK() {
    return assignedToUserIDFK;
  }

  public void setAssignedToUserIDFK(List<Integer> assignedToUserIDFK) {
    this.assignedToUserIDFK = assignedToUserIDFK;
  }


  public UpdateTask dateDue(OffsetDateTime dateDue) {
    this.dateDue = dateDue;
    return this;
  }

  /**
   * Get dateDue
   * @return dateDue
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateDue() {
    return dateDue;
  }

  public void setDateDue(OffsetDateTime dateDue) {
    this.dateDue = dateDue;
  }


  public UpdateTask dateStart(OffsetDateTime dateStart) {
    this.dateStart = dateStart;
    return this;
  }

  /**
   * Get dateStart
   * @return dateStart
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateStart() {
    return dateStart;
  }

  public void setDateStart(OffsetDateTime dateStart) {
    this.dateStart = dateStart;
  }


  public UpdateTask description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateTask estimatedEffort(Double estimatedEffort) {
    this.estimatedEffort = estimatedEffort;
    return this;
  }

  /**
   * Decimal hours
   * @return estimatedEffort
   */
  @javax.annotation.Nullable
  public Double getEstimatedEffort() {
    return estimatedEffort;
  }

  public void setEstimatedEffort(Double estimatedEffort) {
    this.estimatedEffort = estimatedEffort;
  }


  public UpdateTask fieldsToUpdate(List<String> fieldsToUpdate) {
    this.fieldsToUpdate = fieldsToUpdate;
    return this;
  }

  public UpdateTask addFieldsToUpdateItem(String fieldsToUpdateItem) {
    if (this.fieldsToUpdate == null) {
      this.fieldsToUpdate = new ArrayList<>();
    }
    this.fieldsToUpdate.add(fieldsToUpdateItem);
    return this;
  }

  /**
   * Get fieldsToUpdate
   * @return fieldsToUpdate
   */
  @javax.annotation.Nonnull
  public List<String> getFieldsToUpdate() {
    return fieldsToUpdate;
  }

  public void setFieldsToUpdate(List<String> fieldsToUpdate) {
    this.fieldsToUpdate = fieldsToUpdate;
  }


  public UpdateTask percentComplete(Integer percentComplete) {
    this.percentComplete = percentComplete;
    return this;
  }

  /**
   * Get percentComplete
   * @return percentComplete
   */
  @javax.annotation.Nullable
  public Integer getPercentComplete() {
    return percentComplete;
  }

  public void setPercentComplete(Integer percentComplete) {
    this.percentComplete = percentComplete;
  }


  public UpdateTask sectionIDFK(Integer sectionIDFK) {
    this.sectionIDFK = sectionIDFK;
    return this;
  }

  /**
   * Get sectionIDFK
   * @return sectionIDFK
   */
  @javax.annotation.Nullable
  public Integer getSectionIDFK() {
    return sectionIDFK;
  }

  public void setSectionIDFK(Integer sectionIDFK) {
    this.sectionIDFK = sectionIDFK;
  }


  public UpdateTask tags(List<NewTag> tags) {
    this.tags = tags;
    return this;
  }

  public UpdateTask addTagsItem(NewTag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<NewTag> getTags() {
    return tags;
  }

  public void setTags(List<NewTag> tags) {
    this.tags = tags;
  }


  public UpdateTask taskID(Integer taskID) {
    this.taskID = taskID;
    return this;
  }

  /**
   * Get taskID
   * @return taskID
   */
  @javax.annotation.Nonnull
  public Integer getTaskID() {
    return taskID;
  }

  public void setTaskID(Integer taskID) {
    this.taskID = taskID;
  }


  public UpdateTask taskPriorityCode(String taskPriorityCode) {
    this.taskPriorityCode = taskPriorityCode;
    return this;
  }

  /**
   * Get taskPriorityCode
   * @return taskPriorityCode
   */
  @javax.annotation.Nullable
  public String getTaskPriorityCode() {
    return taskPriorityCode;
  }

  public void setTaskPriorityCode(String taskPriorityCode) {
    this.taskPriorityCode = taskPriorityCode;
  }


  public UpdateTask taskStatusCode(String taskStatusCode) {
    this.taskStatusCode = taskStatusCode;
    return this;
  }

  /**
   * Get taskStatusCode
   * @return taskStatusCode
   */
  @javax.annotation.Nullable
  public String getTaskStatusCode() {
    return taskStatusCode;
  }

  public void setTaskStatusCode(String taskStatusCode) {
    this.taskStatusCode = taskStatusCode;
  }


  public UpdateTask title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateTask updateTask = (UpdateTask) o;
    return Objects.equals(this.assignedToUserIDFK, updateTask.assignedToUserIDFK) &&
        Objects.equals(this.dateDue, updateTask.dateDue) &&
        Objects.equals(this.dateStart, updateTask.dateStart) &&
        Objects.equals(this.description, updateTask.description) &&
        Objects.equals(this.estimatedEffort, updateTask.estimatedEffort) &&
        Objects.equals(this.fieldsToUpdate, updateTask.fieldsToUpdate) &&
        Objects.equals(this.percentComplete, updateTask.percentComplete) &&
        Objects.equals(this.sectionIDFK, updateTask.sectionIDFK) &&
        Objects.equals(this.tags, updateTask.tags) &&
        Objects.equals(this.taskID, updateTask.taskID) &&
        Objects.equals(this.taskPriorityCode, updateTask.taskPriorityCode) &&
        Objects.equals(this.taskStatusCode, updateTask.taskStatusCode) &&
        Objects.equals(this.title, updateTask.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assignedToUserIDFK, dateDue, dateStart, description, estimatedEffort, fieldsToUpdate, percentComplete, sectionIDFK, tags, taskID, taskPriorityCode, taskStatusCode, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateTask {\n");
    sb.append("    assignedToUserIDFK: ").append(toIndentedString(assignedToUserIDFK)).append("\n");
    sb.append("    dateDue: ").append(toIndentedString(dateDue)).append("\n");
    sb.append("    dateStart: ").append(toIndentedString(dateStart)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    estimatedEffort: ").append(toIndentedString(estimatedEffort)).append("\n");
    sb.append("    fieldsToUpdate: ").append(toIndentedString(fieldsToUpdate)).append("\n");
    sb.append("    percentComplete: ").append(toIndentedString(percentComplete)).append("\n");
    sb.append("    sectionIDFK: ").append(toIndentedString(sectionIDFK)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    taskID: ").append(toIndentedString(taskID)).append("\n");
    sb.append("    taskPriorityCode: ").append(toIndentedString(taskPriorityCode)).append("\n");
    sb.append("    taskStatusCode: ").append(toIndentedString(taskStatusCode)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AssignedToUserIDFK");
    openapiFields.add("DateDue");
    openapiFields.add("DateStart");
    openapiFields.add("Description");
    openapiFields.add("EstimatedEffort");
    openapiFields.add("FieldsToUpdate");
    openapiFields.add("PercentComplete");
    openapiFields.add("SectionIDFK");
    openapiFields.add("Tags");
    openapiFields.add("TaskID");
    openapiFields.add("TaskPriorityCode");
    openapiFields.add("TaskStatusCode");
    openapiFields.add("Title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("FieldsToUpdate");
    openapiRequiredFields.add("TaskID");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateTask
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateTask.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateTask is not found in the empty JSON string", UpdateTask.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateTask.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateTask` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateTask.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("AssignedToUserIDFK") != null && !jsonObj.get("AssignedToUserIDFK").isJsonNull() && !jsonObj.get("AssignedToUserIDFK").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AssignedToUserIDFK` to be an array in the JSON string but got `%s`", jsonObj.get("AssignedToUserIDFK").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("FieldsToUpdate") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("FieldsToUpdate").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `FieldsToUpdate` to be an array in the JSON string but got `%s`", jsonObj.get("FieldsToUpdate").toString()));
      }
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("Tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Tags` to be an array in the JSON string but got `%s`", jsonObj.get("Tags").toString()));
          }

          // validate the optional field `Tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            NewTag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      if ((jsonObj.get("TaskPriorityCode") != null && !jsonObj.get("TaskPriorityCode").isJsonNull()) && !jsonObj.get("TaskPriorityCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TaskPriorityCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TaskPriorityCode").toString()));
      }
      if ((jsonObj.get("TaskStatusCode") != null && !jsonObj.get("TaskStatusCode").isJsonNull()) && !jsonObj.get("TaskStatusCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TaskStatusCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TaskStatusCode").toString()));
      }
      if ((jsonObj.get("Title") != null && !jsonObj.get("Title").isJsonNull()) && !jsonObj.get("Title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateTask.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateTask' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateTask> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateTask.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateTask>() {
           @Override
           public void write(JsonWriter out, UpdateTask value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateTask read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateTask given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateTask
   * @throws IOException if the JSON string is invalid with respect to UpdateTask
   */
  public static UpdateTask fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateTask.class);
  }

  /**
   * Convert an instance of UpdateTask to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

