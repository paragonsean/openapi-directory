/*
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for AccountDetails
 */
public class AccountDetailsTest {
    private final AccountDetails model = new AccountDetails();

    /**
     * Model tests for AccountDetails
     */
    @Test
    public void testAccountDetails() {
        // TODO: test AccountDetails
    }

    /**
     * Test the property 'accountEmail'
     */
    @Test
    public void accountEmailTest() {
        // TODO: test accountEmail
    }

    /**
     * Test the property 'accountID'
     */
    @Test
    public void accountIDTest() {
        // TODO: test accountID
    }

    /**
     * Test the property 'allowHidingCompletedTasksOnTimesheet'
     */
    @Test
    public void allowHidingCompletedTasksOnTimesheetTest() {
        // TODO: test allowHidingCompletedTasksOnTimesheet
    }

    /**
     * Test the property 'brandPrimaryColor'
     */
    @Test
    public void brandPrimaryColorTest() {
        // TODO: test brandPrimaryColor
    }

    /**
     * Test the property 'brandPrimaryColorLuminance'
     */
    @Test
    public void brandPrimaryColorLuminanceTest() {
        // TODO: test brandPrimaryColorLuminance
    }

    /**
     * Test the property 'companyName'
     */
    @Test
    public void companyNameTest() {
        // TODO: test companyName
    }

    /**
     * Test the property 'currentServerTimeISO'
     */
    @Test
    public void currentServerTimeISOTest() {
        // TODO: test currentServerTimeISO
    }

    /**
     * Test the property 'defaultCurrencyCode'
     */
    @Test
    public void defaultCurrencyCodeTest() {
        // TODO: test defaultCurrencyCode
    }

    /**
     * Test the property 'expenseApprovalRequired'
     */
    @Test
    public void expenseApprovalRequiredTest() {
        // TODO: test expenseApprovalRequired
    }

    /**
     * Test the property 'lockApprovedExpenses'
     */
    @Test
    public void lockApprovedExpensesTest() {
        // TODO: test lockApprovedExpenses
    }

    /**
     * Test the property 'lockApprovedTimesheets'
     */
    @Test
    public void lockApprovedTimesheetsTest() {
        // TODO: test lockApprovedTimesheets
    }

    /**
     * Test the property 'SC'
     */
    @Test
    public void SCTest() {
        // TODO: test SC
    }

    /**
     * Test the property 'subdomain'
     */
    @Test
    public void subdomainTest() {
        // TODO: test subdomain
    }

    /**
     * Test the property 'timesheetDayOfWeek'
     */
    @Test
    public void timesheetDayOfWeekTest() {
        // TODO: test timesheetDayOfWeek
    }

    /**
     * Test the property 'timesheetDisplayFormatCode'
     */
    @Test
    public void timesheetDisplayFormatCodeTest() {
        // TODO: test timesheetDisplayFormatCode
    }

    /**
     * Test the property 'weeklyTimesheetReminder'
     */
    @Test
    public void weeklyTimesheetReminderTest() {
        // TODO: test weeklyTimesheetReminder
    }

    /**
     * Test the property 'has24HourTimesheetFormat'
     */
    @Test
    public void has24HourTimesheetFormatTest() {
        // TODO: test has24HourTimesheetFormat
    }

    /**
     * Test the property 'hasStartEndTimesheets'
     */
    @Test
    public void hasStartEndTimesheetsTest() {
        // TODO: test hasStartEndTimesheets
    }

}
