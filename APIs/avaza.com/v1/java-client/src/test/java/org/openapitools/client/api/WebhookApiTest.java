/*
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateSubscription;
import org.openapitools.client.model.SubscribeResult;
import org.openapitools.client.model.WebhookList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WebhookApi
 */
@Disabled
public class WebhookApiTest {

    private final WebhookApi api = new WebhookApi();

    /**
     * Delete Webhook Subscription by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webhookDeleteTest() throws ApiException {
        Integer id = null;
        Object response = api.webhookDelete(id);
        // TODO: test validations
    }

    /**
     * Delete webhook subscription by URL
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webhookDeleteByUrlTest() throws ApiException {
        String targetUrl = null;
        Object response = api.webhookDeleteByUrl(targetUrl);
        // TODO: test validations
    }

    /**
     * Get list of Webhook Subscriptions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webhookGetTest() throws ApiException {
        WebhookList response = api.webhookGet();
        // TODO: test validations
    }

    /**
     * Get Webhook Subscription by SubscriptionID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webhookGetByIDTest() throws ApiException {
        Integer id = null;
        WebhookList response = api.webhookGetByID(id);
        // TODO: test validations
    }

    /**
     * Subscribe to Webhook. On success, returns ID of webhook subscription.
     *
     * When you receive a webhook, you should respond with Http 200 OK Status Code, otherwise we will retry. To create a webhook, you need both the webhook_notifications scope, as well as the scope for the required entity being monitored.  Event values are: \&quot;company_created\&quot;, \&quot;company_deleted\&quot;, \&quot;company_updated\&quot;, \&quot;contact_created\&quot;, \&quot;contact_deleted\&quot;, \&quot;contact_updated\&quot;, \&quot;invoice_created\&quot;, \&quot;invoice_sent\&quot;,\&quot;invoice_updated\&quot;,\&quot;invoice_deleted\&quot;, \&quot;project_created\&quot;, \&quot;project_deleted\&quot;, \&quot;project_updated\&quot;, \&quot;task_created\&quot;, \&quot;task_updated\&quot;,\&quot;task_deleted\&quot;, \&quot;timesheet_created\&quot;, \&quot;timesheet_deleted\&quot;, \&quot;timesheet_updated, \&quot;bill_created\&quot;, \&quot;bill_updated\&quot;.  You can subscribe to any webhook, but you will only receive notifications for data appropriate to the roles of your user account. There is an optional  Secret parameter (string 255 char max). This allows for webhook authentication. If provided, the Secret will be BASE 64 encoded and passed with notications as a basic authentication http header. i.e. Authorization Basic [BASE64 of Secret]\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webhookPostTest() throws ApiException {
        CreateSubscription model = null;
        SubscribeResult response = api.webhookPost(model);
        // TODO: test validations
    }

}
