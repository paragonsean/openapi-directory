/*
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.NewProjectMember;
import org.openapitools.client.model.ProjectMemberDetails;
import org.openapitools.client.model.ProjectMemberList;
import org.openapitools.client.model.UpdateProjectMember;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectMemberApi
 */
@Disabled
public class ProjectMemberApiTest {

    private final ProjectMemberApi api = new ProjectMemberApi();

    /**
     * Gets list of Project Members
     *
     * Include at least one of ProjectID or UserID parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectMemberGetTest() throws ApiException {
        Integer projectID = null;
        Integer userID = null;
        ProjectMemberList response = api.projectMemberGet(projectID, userID);
        // TODO: test validations
    }

    /**
     * Assign a user as a Member of a Project
     *
     * the Amount columns for Cost, Budget, Rates should be specified as a decimal. Financial amounts assume the currency of the Customer company. Budget units depend on the Budget method set on the Project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectMemberPostTest() throws ApiException {
        NewProjectMember model = null;
        ProjectMemberDetails response = api.projectMemberPost(model);
        // TODO: test validations
    }

    /**
     * Update a Member of a Project
     *
     * Fields are only updated if their field name is in the FieldsToUpdate string collection. The Amount columns for Cost, Budget, Rates if specified should be a decimal. Financial amounts assume the currency of the parent Company. Budget units depend on the Budget method set on the Project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectMemberPutTest() throws ApiException {
        UpdateProjectMember model = null;
        ProjectMemberDetails response = api.projectMemberPut(model);
        // TODO: test validations
    }

}
