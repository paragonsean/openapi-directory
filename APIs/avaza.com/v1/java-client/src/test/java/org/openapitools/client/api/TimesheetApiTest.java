/*
 * Avaza API Documentation
 * Welcome to the autogenerated documentation & test tool for Avaza's API. <br/><br/><strong>API Security & Authentication</strong><br/>Authentication options include OAuth2 Implicit and Authorization Code flows, and Personal Access Token. All connections should be encrypted over SSL/TLS <br/><br/>You can set up and manage your api authentication credentials from within your Avaza account. (requires Administrator permissions on your Avaza account).<br/><br/> OAuth2 Authorization endpoint: https://any.avaza.com/oauth2/authorize  <br/>OAuth2 Token endpoint: https://any.avaza.com/oauth2/token<br/>Base URL for subsequent API Requests: https://api.avaza.com/ <br/><br/>Blogpost about authenticating with Avaza's API:  https://www.avaza.com/avaza-api-oauth2-authentication/ <br/>Blogpost on using Avaza's webhooks: https://www.avaza.com/avaza-api-webhook-notifications/<br/>The OAuth flow currently issues Access Tokens that last 1 day, and Refresh tokens that last 180 days<br/>The Api respects the security Roles assigned to the authenticating Avaza user and filters the data return appropriately. <br/><br><strong>Support</strong><br/>For API Support, and to request access please contact Avaza Support Team via our support chat. <br/><br/><strong>User Contributed Libraries:</strong><br/>Graciously contributed by 3rd party users like you. <br/>Note these are not tested or endorsesd by Avaza. We encourage you to review before use, and use at own risk.<br/> <ul><li> - <a target='blank' href='https://packagist.org/packages/debiprasad/oauth2-avaza'>PHP OAuth Client Package for Azava API (by Debiprasad Sahoo)</a></li></ul>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.NewTimesheet;
import java.time.OffsetDateTime;
import org.openapitools.client.model.TimesheetDetails;
import org.openapitools.client.model.TimesheetList;
import org.openapitools.client.model.UpdateTimesheetModel;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TimesheetApi
 */
@Disabled
public class TimesheetApiTest {

    private final TimesheetApi api = new TimesheetApi();

    /**
     * Delete a Timesheet Entry
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void timesheetDeleteTest() throws ApiException {
        Long id = null;
        Object response = api.timesheetDelete(id);
        // TODO: test validations
    }

    /**
     * Gets list of Timsheets
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void timesheetGetTest() throws ApiException {
        OffsetDateTime updatedAfter = null;
        OffsetDateTime entryDateFrom = null;
        OffsetDateTime entryDateTo = null;
        Integer userID = null;
        String userEmail = null;
        String categoryName = null;
        Integer projectID = null;
        Boolean isBillable = null;
        Boolean isInvoiced = null;
        Boolean isTimerRunning = null;
        Integer pageSize = null;
        Integer pageNumber = null;
        Boolean includeInvoiceDetails = null;
        String sort = null;
        TimesheetList response = api.timesheetGet(updatedAfter, entryDateFrom, entryDateTo, userID, userEmail, categoryName, projectID, isBillable, isInvoiced, isTimerRunning, pageSize, pageNumber, includeInvoiceDetails, sort);
        // TODO: test validations
    }

    /**
     * Gets a Timesheet Entry by Timesheet ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void timesheetGetByIDTest() throws ApiException {
        Long id = null;
        TimesheetDetails response = api.timesheetGetByID(id);
        // TODO: test validations
    }

    /**
     * Create a new Timesheet Entry
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void timesheetPostTest() throws ApiException {
        NewTimesheet model = null;
        TimesheetDetails response = api.timesheetPost(model);
        // TODO: test validations
    }

    /**
     * Update a Timesheet
     *
     * The FieldsToUpdate field expects a string array collection of the field names you would like updated. Valid fields to update inlcude \&quot;ProjectIDFK\&quot;, \&quot;TimeSheetCategoryIDFK\&quot;, \&quot;TaskIDFK\&quot;, \&quot;Duration\&quot;, \&quot;EntryDate\&quot;, \&quot;Notes\&quot;, \&quot;hasStartEndTime\&quot;, \&quot;CustomMetadata\&quot;. If you intend to provide start/end times on timesheets, this is achieved by including the start time in the EntryDate field (Iso date format), along with a Duration (decimal format).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void timesheetPutTest() throws ApiException {
        UpdateTimesheetModel model = null;
        TimesheetDetails response = api.timesheetPut(model);
        // TODO: test validations
    }

}
