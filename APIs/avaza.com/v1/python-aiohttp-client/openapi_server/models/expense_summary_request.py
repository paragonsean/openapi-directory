# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExpenseSummaryRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expense_date_from: datetime=None, expense_date_to: datetime=None, group_by: List[str]=None, project_id: int=None, user_id: List[int]=None):
        """ExpenseSummaryRequest - a model defined in OpenAPI

        :param expense_date_from: The expense_date_from of this ExpenseSummaryRequest.
        :param expense_date_to: The expense_date_to of this ExpenseSummaryRequest.
        :param group_by: The group_by of this ExpenseSummaryRequest.
        :param project_id: The project_id of this ExpenseSummaryRequest.
        :param user_id: The user_id of this ExpenseSummaryRequest.
        """
        self.openapi_types = {
            'expense_date_from': datetime,
            'expense_date_to': datetime,
            'group_by': List[str],
            'project_id': int,
            'user_id': List[int]
        }

        self.attribute_map = {
            'expense_date_from': 'ExpenseDateFrom',
            'expense_date_to': 'ExpenseDateTo',
            'group_by': 'GroupBy',
            'project_id': 'ProjectID',
            'user_id': 'UserID'
        }

        self._expense_date_from = expense_date_from
        self._expense_date_to = expense_date_to
        self._group_by = group_by
        self._project_id = project_id
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExpenseSummaryRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExpenseSummaryRequest of this ExpenseSummaryRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expense_date_from(self):
        """Gets the expense_date_from of this ExpenseSummaryRequest.

        (Required) Filter for expenses with expense dates greater or equal to the specified date. e.g. 2019-01-25.

        :return: The expense_date_from of this ExpenseSummaryRequest.
        :rtype: datetime
        """
        return self._expense_date_from

    @expense_date_from.setter
    def expense_date_from(self, expense_date_from):
        """Sets the expense_date_from of this ExpenseSummaryRequest.

        (Required) Filter for expenses with expense dates greater or equal to the specified date. e.g. 2019-01-25.

        :param expense_date_from: The expense_date_from of this ExpenseSummaryRequest.
        :type expense_date_from: datetime
        """

        self._expense_date_from = expense_date_from

    @property
    def expense_date_to(self):
        """Gets the expense_date_to of this ExpenseSummaryRequest.

        (Required) Filter for expenses with an expense date smaller or equal to the specified  date. e.g. 2019-01-25.

        :return: The expense_date_to of this ExpenseSummaryRequest.
        :rtype: datetime
        """
        return self._expense_date_to

    @expense_date_to.setter
    def expense_date_to(self, expense_date_to):
        """Sets the expense_date_to of this ExpenseSummaryRequest.

        (Required) Filter for expenses with an expense date smaller or equal to the specified  date. e.g. 2019-01-25.

        :param expense_date_to: The expense_date_to of this ExpenseSummaryRequest.
        :type expense_date_to: datetime
        """

        self._expense_date_to = expense_date_to

    @property
    def group_by(self):
        """Gets the group_by of this ExpenseSummaryRequest.

        (Optional) Combine one, two or three levels of Grouping. Combine these possible grouping values: \"Category\", \"ChargeableStatus\", \"Merchant\", \"ApprovalStatus\", \"ReimbursementStatus\", \"Customer\", \"Project\", \"User\", \"Task\", \"Year\", \"Month\", \"Day\", \"Week\".

        :return: The group_by of this ExpenseSummaryRequest.
        :rtype: List[str]
        """
        return self._group_by

    @group_by.setter
    def group_by(self, group_by):
        """Sets the group_by of this ExpenseSummaryRequest.

        (Optional) Combine one, two or three levels of Grouping. Combine these possible grouping values: \"Category\", \"ChargeableStatus\", \"Merchant\", \"ApprovalStatus\", \"ReimbursementStatus\", \"Customer\", \"Project\", \"User\", \"Task\", \"Year\", \"Month\", \"Day\", \"Week\".

        :param group_by: The group_by of this ExpenseSummaryRequest.
        :type group_by: List[str]
        """

        self._group_by = group_by

    @property
    def project_id(self):
        """Gets the project_id of this ExpenseSummaryRequest.

        (Optional) Filter by Project

        :return: The project_id of this ExpenseSummaryRequest.
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ExpenseSummaryRequest.

        (Optional) Filter by Project

        :param project_id: The project_id of this ExpenseSummaryRequest.
        :type project_id: int
        """

        self._project_id = project_id

    @property
    def user_id(self):
        """Gets the user_id of this ExpenseSummaryRequest.

        (Optional) Defaults to the current user. Provide one or more UserIDs of Users whose expenses should be retrieved. If the current user doesn't have impersonation rights, then they will only see their own data.

        :return: The user_id of this ExpenseSummaryRequest.
        :rtype: List[int]
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ExpenseSummaryRequest.

        (Optional) Defaults to the current user. Provide one or more UserIDs of Users whose expenses should be retrieved. If the current user doesn't have impersonation rights, then they will only see their own data.

        :param user_id: The user_id of this ExpenseSummaryRequest.
        :type user_id: List[int]
        """

        self._user_id = user_id
