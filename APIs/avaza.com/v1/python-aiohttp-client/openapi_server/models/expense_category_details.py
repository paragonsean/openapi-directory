# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExpenseCategoryDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, expense_category_id: int=None, name: str=None, unit_name: str=None, unit_price: float=None, has_unit_price: bool=None):
        """ExpenseCategoryDetails - a model defined in OpenAPI

        :param enabled: The enabled of this ExpenseCategoryDetails.
        :param expense_category_id: The expense_category_id of this ExpenseCategoryDetails.
        :param name: The name of this ExpenseCategoryDetails.
        :param unit_name: The unit_name of this ExpenseCategoryDetails.
        :param unit_price: The unit_price of this ExpenseCategoryDetails.
        :param has_unit_price: The has_unit_price of this ExpenseCategoryDetails.
        """
        self.openapi_types = {
            'enabled': bool,
            'expense_category_id': int,
            'name': str,
            'unit_name': str,
            'unit_price': float,
            'has_unit_price': bool
        }

        self.attribute_map = {
            'enabled': 'Enabled',
            'expense_category_id': 'ExpenseCategoryID',
            'name': 'Name',
            'unit_name': 'UnitName',
            'unit_price': 'UnitPrice',
            'has_unit_price': 'hasUnitPrice'
        }

        self._enabled = enabled
        self._expense_category_id = expense_category_id
        self._name = name
        self._unit_name = unit_name
        self._unit_price = unit_price
        self._has_unit_price = has_unit_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExpenseCategoryDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExpenseCategoryDetails of this ExpenseCategoryDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this ExpenseCategoryDetails.


        :return: The enabled of this ExpenseCategoryDetails.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ExpenseCategoryDetails.


        :param enabled: The enabled of this ExpenseCategoryDetails.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def expense_category_id(self):
        """Gets the expense_category_id of this ExpenseCategoryDetails.


        :return: The expense_category_id of this ExpenseCategoryDetails.
        :rtype: int
        """
        return self._expense_category_id

    @expense_category_id.setter
    def expense_category_id(self, expense_category_id):
        """Sets the expense_category_id of this ExpenseCategoryDetails.


        :param expense_category_id: The expense_category_id of this ExpenseCategoryDetails.
        :type expense_category_id: int
        """

        self._expense_category_id = expense_category_id

    @property
    def name(self):
        """Gets the name of this ExpenseCategoryDetails.


        :return: The name of this ExpenseCategoryDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExpenseCategoryDetails.


        :param name: The name of this ExpenseCategoryDetails.
        :type name: str
        """

        self._name = name

    @property
    def unit_name(self):
        """Gets the unit_name of this ExpenseCategoryDetails.


        :return: The unit_name of this ExpenseCategoryDetails.
        :rtype: str
        """
        return self._unit_name

    @unit_name.setter
    def unit_name(self, unit_name):
        """Sets the unit_name of this ExpenseCategoryDetails.


        :param unit_name: The unit_name of this ExpenseCategoryDetails.
        :type unit_name: str
        """

        self._unit_name = unit_name

    @property
    def unit_price(self):
        """Gets the unit_price of this ExpenseCategoryDetails.


        :return: The unit_price of this ExpenseCategoryDetails.
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this ExpenseCategoryDetails.


        :param unit_price: The unit_price of this ExpenseCategoryDetails.
        :type unit_price: float
        """

        self._unit_price = unit_price

    @property
    def has_unit_price(self):
        """Gets the has_unit_price of this ExpenseCategoryDetails.


        :return: The has_unit_price of this ExpenseCategoryDetails.
        :rtype: bool
        """
        return self._has_unit_price

    @has_unit_price.setter
    def has_unit_price(self, has_unit_price):
        """Sets the has_unit_price of this ExpenseCategoryDetails.


        :param has_unit_price: The has_unit_price of this ExpenseCategoryDetails.
        :type has_unit_price: bool
        """

        self._has_unit_price = has_unit_price
