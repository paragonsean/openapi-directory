# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NewTimesheet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_metadata: str=None, duration: float=None, entry_date: datetime=None, notes: str=None, project_idfk: int=None, task_idfk: int=None, timesheet_category_idfk: int=None, user_idfk: int=None, has_start_end_time: bool=None, is_invoiced: bool=None):
        """NewTimesheet - a model defined in OpenAPI

        :param custom_metadata: The custom_metadata of this NewTimesheet.
        :param duration: The duration of this NewTimesheet.
        :param entry_date: The entry_date of this NewTimesheet.
        :param notes: The notes of this NewTimesheet.
        :param project_idfk: The project_idfk of this NewTimesheet.
        :param task_idfk: The task_idfk of this NewTimesheet.
        :param timesheet_category_idfk: The timesheet_category_idfk of this NewTimesheet.
        :param user_idfk: The user_idfk of this NewTimesheet.
        :param has_start_end_time: The has_start_end_time of this NewTimesheet.
        :param is_invoiced: The is_invoiced of this NewTimesheet.
        """
        self.openapi_types = {
            'custom_metadata': str,
            'duration': float,
            'entry_date': datetime,
            'notes': str,
            'project_idfk': int,
            'task_idfk': int,
            'timesheet_category_idfk': int,
            'user_idfk': int,
            'has_start_end_time': bool,
            'is_invoiced': bool
        }

        self.attribute_map = {
            'custom_metadata': 'CustomMetadata',
            'duration': 'Duration',
            'entry_date': 'EntryDate',
            'notes': 'Notes',
            'project_idfk': 'ProjectIDFK',
            'task_idfk': 'TaskIDFK',
            'timesheet_category_idfk': 'TimesheetCategoryIDFK',
            'user_idfk': 'UserIDFK',
            'has_start_end_time': 'hasStartEndTime',
            'is_invoiced': 'isInvoiced'
        }

        self._custom_metadata = custom_metadata
        self._duration = duration
        self._entry_date = entry_date
        self._notes = notes
        self._project_idfk = project_idfk
        self._task_idfk = task_idfk
        self._timesheet_category_idfk = timesheet_category_idfk
        self._user_idfk = user_idfk
        self._has_start_end_time = has_start_end_time
        self._is_invoiced = is_invoiced

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewTimesheet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewTimesheet of this NewTimesheet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_metadata(self):
        """Gets the custom_metadata of this NewTimesheet.

        Optional. free nvarchar field available via Api to store any additional metadata against a timesheet. We suggest you use Json or your preferred serialisation format. 1000 characters max.

        :return: The custom_metadata of this NewTimesheet.
        :rtype: str
        """
        return self._custom_metadata

    @custom_metadata.setter
    def custom_metadata(self, custom_metadata):
        """Sets the custom_metadata of this NewTimesheet.

        Optional. free nvarchar field available via Api to store any additional metadata against a timesheet. We suggest you use Json or your preferred serialisation format. 1000 characters max.

        :param custom_metadata: The custom_metadata of this NewTimesheet.
        :type custom_metadata: str
        """

        self._custom_metadata = custom_metadata

    @property
    def duration(self):
        """Gets the duration of this NewTimesheet.

        The duration of the timesheet, in decimal hours. If null or 0, a timer will be started.

        :return: The duration of this NewTimesheet.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this NewTimesheet.

        The duration of the timesheet, in decimal hours. If null or 0, a timer will be started.

        :param duration: The duration of this NewTimesheet.
        :type duration: float
        """

        self._duration = duration

    @property
    def entry_date(self):
        """Gets the entry_date of this NewTimesheet.

        The date of the timesheet entry, with an optional start time component.

        :return: The entry_date of this NewTimesheet.
        :rtype: datetime
        """
        return self._entry_date

    @entry_date.setter
    def entry_date(self, entry_date):
        """Sets the entry_date of this NewTimesheet.

        The date of the timesheet entry, with an optional start time component.

        :param entry_date: The entry_date of this NewTimesheet.
        :type entry_date: datetime
        """

        self._entry_date = entry_date

    @property
    def notes(self):
        """Gets the notes of this NewTimesheet.

        Timesheet Notes

        :return: The notes of this NewTimesheet.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this NewTimesheet.

        Timesheet Notes

        :param notes: The notes of this NewTimesheet.
        :type notes: str
        """

        self._notes = notes

    @property
    def project_idfk(self):
        """Gets the project_idfk of this NewTimesheet.

        The project to associate the timesheet with.

        :return: The project_idfk of this NewTimesheet.
        :rtype: int
        """
        return self._project_idfk

    @project_idfk.setter
    def project_idfk(self, project_idfk):
        """Sets the project_idfk of this NewTimesheet.

        The project to associate the timesheet with.

        :param project_idfk: The project_idfk of this NewTimesheet.
        :type project_idfk: int
        """

        self._project_idfk = project_idfk

    @property
    def task_idfk(self):
        """Gets the task_idfk of this NewTimesheet.

        Optional. Link the timesheet to a specific task

        :return: The task_idfk of this NewTimesheet.
        :rtype: int
        """
        return self._task_idfk

    @task_idfk.setter
    def task_idfk(self, task_idfk):
        """Sets the task_idfk of this NewTimesheet.

        Optional. Link the timesheet to a specific task

        :param task_idfk: The task_idfk of this NewTimesheet.
        :type task_idfk: int
        """

        self._task_idfk = task_idfk

    @property
    def timesheet_category_idfk(self):
        """Gets the timesheet_category_idfk of this NewTimesheet.

        The Project timesheet category to link the timesheet to

        :return: The timesheet_category_idfk of this NewTimesheet.
        :rtype: int
        """
        return self._timesheet_category_idfk

    @timesheet_category_idfk.setter
    def timesheet_category_idfk(self, timesheet_category_idfk):
        """Sets the timesheet_category_idfk of this NewTimesheet.

        The Project timesheet category to link the timesheet to

        :param timesheet_category_idfk: The timesheet_category_idfk of this NewTimesheet.
        :type timesheet_category_idfk: int
        """

        self._timesheet_category_idfk = timesheet_category_idfk

    @property
    def user_idfk(self):
        """Gets the user_idfk of this NewTimesheet.

        UserID for a Timesheet user in Avaza

        :return: The user_idfk of this NewTimesheet.
        :rtype: int
        """
        return self._user_idfk

    @user_idfk.setter
    def user_idfk(self, user_idfk):
        """Sets the user_idfk of this NewTimesheet.

        UserID for a Timesheet user in Avaza

        :param user_idfk: The user_idfk of this NewTimesheet.
        :type user_idfk: int
        """

        self._user_idfk = user_idfk

    @property
    def has_start_end_time(self):
        """Gets the has_start_end_time of this NewTimesheet.

        If true, the start time will be take from the time component of the Entry Date field, and the end time will be calculated by adding the Duration to the StartDate

        :return: The has_start_end_time of this NewTimesheet.
        :rtype: bool
        """
        return self._has_start_end_time

    @has_start_end_time.setter
    def has_start_end_time(self, has_start_end_time):
        """Sets the has_start_end_time of this NewTimesheet.

        If true, the start time will be take from the time component of the Entry Date field, and the end time will be calculated by adding the Duration to the StartDate

        :param has_start_end_time: The has_start_end_time of this NewTimesheet.
        :type has_start_end_time: bool
        """

        self._has_start_end_time = has_start_end_time

    @property
    def is_invoiced(self):
        """Gets the is_invoiced of this NewTimesheet.

        Optional. False by default. Allows you to mark the timesheet as invoiced in an external system.

        :return: The is_invoiced of this NewTimesheet.
        :rtype: bool
        """
        return self._is_invoiced

    @is_invoiced.setter
    def is_invoiced(self, is_invoiced):
        """Sets the is_invoiced of this NewTimesheet.

        Optional. False by default. Allows you to mark the timesheet as invoiced in an external system.

        :param is_invoiced: The is_invoiced of this NewTimesheet.
        :type is_invoiced: bool
        """

        self._is_invoiced = is_invoiced
