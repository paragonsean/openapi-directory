# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TaxComponent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, component_tax_code: str=None, name: str=None, percentage: float=None, tax_component_id: int=None, tax_idfk: int=None, is_compound: bool=None):
        """TaxComponent - a model defined in OpenAPI

        :param component_tax_code: The component_tax_code of this TaxComponent.
        :param name: The name of this TaxComponent.
        :param percentage: The percentage of this TaxComponent.
        :param tax_component_id: The tax_component_id of this TaxComponent.
        :param tax_idfk: The tax_idfk of this TaxComponent.
        :param is_compound: The is_compound of this TaxComponent.
        """
        self.openapi_types = {
            'component_tax_code': str,
            'name': str,
            'percentage': float,
            'tax_component_id': int,
            'tax_idfk': int,
            'is_compound': bool
        }

        self.attribute_map = {
            'component_tax_code': 'ComponentTaxCode',
            'name': 'Name',
            'percentage': 'Percentage',
            'tax_component_id': 'TaxComponentID',
            'tax_idfk': 'TaxIDFK',
            'is_compound': 'isCompound'
        }

        self._component_tax_code = component_tax_code
        self._name = name
        self._percentage = percentage
        self._tax_component_id = tax_component_id
        self._tax_idfk = tax_idfk
        self._is_compound = is_compound

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaxComponent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaxComponent of this TaxComponent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def component_tax_code(self):
        """Gets the component_tax_code of this TaxComponent.


        :return: The component_tax_code of this TaxComponent.
        :rtype: str
        """
        return self._component_tax_code

    @component_tax_code.setter
    def component_tax_code(self, component_tax_code):
        """Sets the component_tax_code of this TaxComponent.


        :param component_tax_code: The component_tax_code of this TaxComponent.
        :type component_tax_code: str
        """

        self._component_tax_code = component_tax_code

    @property
    def name(self):
        """Gets the name of this TaxComponent.


        :return: The name of this TaxComponent.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaxComponent.


        :param name: The name of this TaxComponent.
        :type name: str
        """

        self._name = name

    @property
    def percentage(self):
        """Gets the percentage of this TaxComponent.


        :return: The percentage of this TaxComponent.
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this TaxComponent.


        :param percentage: The percentage of this TaxComponent.
        :type percentage: float
        """

        self._percentage = percentage

    @property
    def tax_component_id(self):
        """Gets the tax_component_id of this TaxComponent.


        :return: The tax_component_id of this TaxComponent.
        :rtype: int
        """
        return self._tax_component_id

    @tax_component_id.setter
    def tax_component_id(self, tax_component_id):
        """Sets the tax_component_id of this TaxComponent.


        :param tax_component_id: The tax_component_id of this TaxComponent.
        :type tax_component_id: int
        """

        self._tax_component_id = tax_component_id

    @property
    def tax_idfk(self):
        """Gets the tax_idfk of this TaxComponent.


        :return: The tax_idfk of this TaxComponent.
        :rtype: int
        """
        return self._tax_idfk

    @tax_idfk.setter
    def tax_idfk(self, tax_idfk):
        """Sets the tax_idfk of this TaxComponent.


        :param tax_idfk: The tax_idfk of this TaxComponent.
        :type tax_idfk: int
        """

        self._tax_idfk = tax_idfk

    @property
    def is_compound(self):
        """Gets the is_compound of this TaxComponent.


        :return: The is_compound of this TaxComponent.
        :rtype: bool
        """
        return self._is_compound

    @is_compound.setter
    def is_compound(self, is_compound):
        """Sets the is_compound of this TaxComponent.


        :param is_compound: The is_compound of this TaxComponent.
        :type is_compound: bool
        """

        self._is_compound = is_compound
