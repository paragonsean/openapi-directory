# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.new_tag import NewTag
from openapi_server import util


class UpdateTask(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assigned_to_user_idfk: List[int]=None, date_due: datetime=None, date_start: datetime=None, description: str=None, estimated_effort: float=None, fields_to_update: List[str]=None, percent_complete: int=None, section_idfk: int=None, tags: List[NewTag]=None, task_id: int=None, task_priority_code: str=None, task_status_code: str=None, title: str=None):
        """UpdateTask - a model defined in OpenAPI

        :param assigned_to_user_idfk: The assigned_to_user_idfk of this UpdateTask.
        :param date_due: The date_due of this UpdateTask.
        :param date_start: The date_start of this UpdateTask.
        :param description: The description of this UpdateTask.
        :param estimated_effort: The estimated_effort of this UpdateTask.
        :param fields_to_update: The fields_to_update of this UpdateTask.
        :param percent_complete: The percent_complete of this UpdateTask.
        :param section_idfk: The section_idfk of this UpdateTask.
        :param tags: The tags of this UpdateTask.
        :param task_id: The task_id of this UpdateTask.
        :param task_priority_code: The task_priority_code of this UpdateTask.
        :param task_status_code: The task_status_code of this UpdateTask.
        :param title: The title of this UpdateTask.
        """
        self.openapi_types = {
            'assigned_to_user_idfk': List[int],
            'date_due': datetime,
            'date_start': datetime,
            'description': str,
            'estimated_effort': float,
            'fields_to_update': List[str],
            'percent_complete': int,
            'section_idfk': int,
            'tags': List[NewTag],
            'task_id': int,
            'task_priority_code': str,
            'task_status_code': str,
            'title': str
        }

        self.attribute_map = {
            'assigned_to_user_idfk': 'AssignedToUserIDFK',
            'date_due': 'DateDue',
            'date_start': 'DateStart',
            'description': 'Description',
            'estimated_effort': 'EstimatedEffort',
            'fields_to_update': 'FieldsToUpdate',
            'percent_complete': 'PercentComplete',
            'section_idfk': 'SectionIDFK',
            'tags': 'Tags',
            'task_id': 'TaskID',
            'task_priority_code': 'TaskPriorityCode',
            'task_status_code': 'TaskStatusCode',
            'title': 'Title'
        }

        self._assigned_to_user_idfk = assigned_to_user_idfk
        self._date_due = date_due
        self._date_start = date_start
        self._description = description
        self._estimated_effort = estimated_effort
        self._fields_to_update = fields_to_update
        self._percent_complete = percent_complete
        self._section_idfk = section_idfk
        self._tags = tags
        self._task_id = task_id
        self._task_priority_code = task_priority_code
        self._task_status_code = task_status_code
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateTask':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateTask of this UpdateTask.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assigned_to_user_idfk(self):
        """Gets the assigned_to_user_idfk of this UpdateTask.


        :return: The assigned_to_user_idfk of this UpdateTask.
        :rtype: List[int]
        """
        return self._assigned_to_user_idfk

    @assigned_to_user_idfk.setter
    def assigned_to_user_idfk(self, assigned_to_user_idfk):
        """Sets the assigned_to_user_idfk of this UpdateTask.


        :param assigned_to_user_idfk: The assigned_to_user_idfk of this UpdateTask.
        :type assigned_to_user_idfk: List[int]
        """

        self._assigned_to_user_idfk = assigned_to_user_idfk

    @property
    def date_due(self):
        """Gets the date_due of this UpdateTask.


        :return: The date_due of this UpdateTask.
        :rtype: datetime
        """
        return self._date_due

    @date_due.setter
    def date_due(self, date_due):
        """Sets the date_due of this UpdateTask.


        :param date_due: The date_due of this UpdateTask.
        :type date_due: datetime
        """

        self._date_due = date_due

    @property
    def date_start(self):
        """Gets the date_start of this UpdateTask.


        :return: The date_start of this UpdateTask.
        :rtype: datetime
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """Sets the date_start of this UpdateTask.


        :param date_start: The date_start of this UpdateTask.
        :type date_start: datetime
        """

        self._date_start = date_start

    @property
    def description(self):
        """Gets the description of this UpdateTask.


        :return: The description of this UpdateTask.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateTask.


        :param description: The description of this UpdateTask.
        :type description: str
        """

        self._description = description

    @property
    def estimated_effort(self):
        """Gets the estimated_effort of this UpdateTask.

        Decimal hours

        :return: The estimated_effort of this UpdateTask.
        :rtype: float
        """
        return self._estimated_effort

    @estimated_effort.setter
    def estimated_effort(self, estimated_effort):
        """Sets the estimated_effort of this UpdateTask.

        Decimal hours

        :param estimated_effort: The estimated_effort of this UpdateTask.
        :type estimated_effort: float
        """

        self._estimated_effort = estimated_effort

    @property
    def fields_to_update(self):
        """Gets the fields_to_update of this UpdateTask.


        :return: The fields_to_update of this UpdateTask.
        :rtype: List[str]
        """
        return self._fields_to_update

    @fields_to_update.setter
    def fields_to_update(self, fields_to_update):
        """Sets the fields_to_update of this UpdateTask.


        :param fields_to_update: The fields_to_update of this UpdateTask.
        :type fields_to_update: List[str]
        """
        if fields_to_update is None:
            raise ValueError("Invalid value for `fields_to_update`, must not be `None`")

        self._fields_to_update = fields_to_update

    @property
    def percent_complete(self):
        """Gets the percent_complete of this UpdateTask.


        :return: The percent_complete of this UpdateTask.
        :rtype: int
        """
        return self._percent_complete

    @percent_complete.setter
    def percent_complete(self, percent_complete):
        """Sets the percent_complete of this UpdateTask.


        :param percent_complete: The percent_complete of this UpdateTask.
        :type percent_complete: int
        """

        self._percent_complete = percent_complete

    @property
    def section_idfk(self):
        """Gets the section_idfk of this UpdateTask.


        :return: The section_idfk of this UpdateTask.
        :rtype: int
        """
        return self._section_idfk

    @section_idfk.setter
    def section_idfk(self, section_idfk):
        """Sets the section_idfk of this UpdateTask.


        :param section_idfk: The section_idfk of this UpdateTask.
        :type section_idfk: int
        """

        self._section_idfk = section_idfk

    @property
    def tags(self):
        """Gets the tags of this UpdateTask.


        :return: The tags of this UpdateTask.
        :rtype: List[NewTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this UpdateTask.


        :param tags: The tags of this UpdateTask.
        :type tags: List[NewTag]
        """

        self._tags = tags

    @property
    def task_id(self):
        """Gets the task_id of this UpdateTask.


        :return: The task_id of this UpdateTask.
        :rtype: int
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this UpdateTask.


        :param task_id: The task_id of this UpdateTask.
        :type task_id: int
        """
        if task_id is None:
            raise ValueError("Invalid value for `task_id`, must not be `None`")

        self._task_id = task_id

    @property
    def task_priority_code(self):
        """Gets the task_priority_code of this UpdateTask.


        :return: The task_priority_code of this UpdateTask.
        :rtype: str
        """
        return self._task_priority_code

    @task_priority_code.setter
    def task_priority_code(self, task_priority_code):
        """Sets the task_priority_code of this UpdateTask.


        :param task_priority_code: The task_priority_code of this UpdateTask.
        :type task_priority_code: str
        """

        self._task_priority_code = task_priority_code

    @property
    def task_status_code(self):
        """Gets the task_status_code of this UpdateTask.


        :return: The task_status_code of this UpdateTask.
        :rtype: str
        """
        return self._task_status_code

    @task_status_code.setter
    def task_status_code(self, task_status_code):
        """Sets the task_status_code of this UpdateTask.


        :param task_status_code: The task_status_code of this UpdateTask.
        :type task_status_code: str
        """

        self._task_status_code = task_status_code

    @property
    def title(self):
        """Gets the title of this UpdateTask.


        :return: The title of this UpdateTask.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this UpdateTask.


        :param title: The title of this UpdateTask.
        :type title: str
        """

        self._title = title
