# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TaskStatusDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_task_type_idfk: int=None, color: str=None, display_order: int=None, name: str=None, task_status_code: str=None, task_type_name: str=None, is_complete: bool=None):
        """TaskStatusDetails - a model defined in OpenAPI

        :param account_task_type_idfk: The account_task_type_idfk of this TaskStatusDetails.
        :param color: The color of this TaskStatusDetails.
        :param display_order: The display_order of this TaskStatusDetails.
        :param name: The name of this TaskStatusDetails.
        :param task_status_code: The task_status_code of this TaskStatusDetails.
        :param task_type_name: The task_type_name of this TaskStatusDetails.
        :param is_complete: The is_complete of this TaskStatusDetails.
        """
        self.openapi_types = {
            'account_task_type_idfk': int,
            'color': str,
            'display_order': int,
            'name': str,
            'task_status_code': str,
            'task_type_name': str,
            'is_complete': bool
        }

        self.attribute_map = {
            'account_task_type_idfk': 'AccountTaskTypeIDFK',
            'color': 'Color',
            'display_order': 'DisplayOrder',
            'name': 'Name',
            'task_status_code': 'TaskStatusCode',
            'task_type_name': 'TaskTypeName',
            'is_complete': 'isComplete'
        }

        self._account_task_type_idfk = account_task_type_idfk
        self._color = color
        self._display_order = display_order
        self._name = name
        self._task_status_code = task_status_code
        self._task_type_name = task_type_name
        self._is_complete = is_complete

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskStatusDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaskStatusDetails of this TaskStatusDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_task_type_idfk(self):
        """Gets the account_task_type_idfk of this TaskStatusDetails.


        :return: The account_task_type_idfk of this TaskStatusDetails.
        :rtype: int
        """
        return self._account_task_type_idfk

    @account_task_type_idfk.setter
    def account_task_type_idfk(self, account_task_type_idfk):
        """Sets the account_task_type_idfk of this TaskStatusDetails.


        :param account_task_type_idfk: The account_task_type_idfk of this TaskStatusDetails.
        :type account_task_type_idfk: int
        """

        self._account_task_type_idfk = account_task_type_idfk

    @property
    def color(self):
        """Gets the color of this TaskStatusDetails.


        :return: The color of this TaskStatusDetails.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this TaskStatusDetails.


        :param color: The color of this TaskStatusDetails.
        :type color: str
        """

        self._color = color

    @property
    def display_order(self):
        """Gets the display_order of this TaskStatusDetails.


        :return: The display_order of this TaskStatusDetails.
        :rtype: int
        """
        return self._display_order

    @display_order.setter
    def display_order(self, display_order):
        """Sets the display_order of this TaskStatusDetails.


        :param display_order: The display_order of this TaskStatusDetails.
        :type display_order: int
        """

        self._display_order = display_order

    @property
    def name(self):
        """Gets the name of this TaskStatusDetails.


        :return: The name of this TaskStatusDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaskStatusDetails.


        :param name: The name of this TaskStatusDetails.
        :type name: str
        """

        self._name = name

    @property
    def task_status_code(self):
        """Gets the task_status_code of this TaskStatusDetails.


        :return: The task_status_code of this TaskStatusDetails.
        :rtype: str
        """
        return self._task_status_code

    @task_status_code.setter
    def task_status_code(self, task_status_code):
        """Sets the task_status_code of this TaskStatusDetails.


        :param task_status_code: The task_status_code of this TaskStatusDetails.
        :type task_status_code: str
        """

        self._task_status_code = task_status_code

    @property
    def task_type_name(self):
        """Gets the task_type_name of this TaskStatusDetails.


        :return: The task_type_name of this TaskStatusDetails.
        :rtype: str
        """
        return self._task_type_name

    @task_type_name.setter
    def task_type_name(self, task_type_name):
        """Sets the task_type_name of this TaskStatusDetails.


        :param task_type_name: The task_type_name of this TaskStatusDetails.
        :type task_type_name: str
        """

        self._task_type_name = task_type_name

    @property
    def is_complete(self):
        """Gets the is_complete of this TaskStatusDetails.


        :return: The is_complete of this TaskStatusDetails.
        :rtype: bool
        """
        return self._is_complete

    @is_complete.setter
    def is_complete(self, is_complete):
        """Sets the is_complete of this TaskStatusDetails.


        :param is_complete: The is_complete of this TaskStatusDetails.
        :type is_complete: bool
        """

        self._is_complete = is_complete
