# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateExpense(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, currency_code: str=None, customer_idfk: int=None, exchange_rate: float=None, expense_category_idfk: int=None, expense_date: datetime=None, expense_id: int=None, expense_payment_method_idfk: int=None, fields_to_update: List[str]=None, file_attachment_ids: List[int]=None, group_trip_name: str=None, merchant: str=None, merchant_tax_number: str=None, notes: str=None, project_idfk: int=None, quantity: float=None, task_idfk: int=None, tax_idfk: int=None, transaction_tax_config_code: str=None, verify_and_save: bool=None, is_chargeable: bool=None, is_reimbursable: bool=None):
        """UpdateExpense - a model defined in OpenAPI

        :param amount: The amount of this UpdateExpense.
        :param currency_code: The currency_code of this UpdateExpense.
        :param customer_idfk: The customer_idfk of this UpdateExpense.
        :param exchange_rate: The exchange_rate of this UpdateExpense.
        :param expense_category_idfk: The expense_category_idfk of this UpdateExpense.
        :param expense_date: The expense_date of this UpdateExpense.
        :param expense_id: The expense_id of this UpdateExpense.
        :param expense_payment_method_idfk: The expense_payment_method_idfk of this UpdateExpense.
        :param fields_to_update: The fields_to_update of this UpdateExpense.
        :param file_attachment_ids: The file_attachment_ids of this UpdateExpense.
        :param group_trip_name: The group_trip_name of this UpdateExpense.
        :param merchant: The merchant of this UpdateExpense.
        :param merchant_tax_number: The merchant_tax_number of this UpdateExpense.
        :param notes: The notes of this UpdateExpense.
        :param project_idfk: The project_idfk of this UpdateExpense.
        :param quantity: The quantity of this UpdateExpense.
        :param task_idfk: The task_idfk of this UpdateExpense.
        :param tax_idfk: The tax_idfk of this UpdateExpense.
        :param transaction_tax_config_code: The transaction_tax_config_code of this UpdateExpense.
        :param verify_and_save: The verify_and_save of this UpdateExpense.
        :param is_chargeable: The is_chargeable of this UpdateExpense.
        :param is_reimbursable: The is_reimbursable of this UpdateExpense.
        """
        self.openapi_types = {
            'amount': float,
            'currency_code': str,
            'customer_idfk': int,
            'exchange_rate': float,
            'expense_category_idfk': int,
            'expense_date': datetime,
            'expense_id': int,
            'expense_payment_method_idfk': int,
            'fields_to_update': List[str],
            'file_attachment_ids': List[int],
            'group_trip_name': str,
            'merchant': str,
            'merchant_tax_number': str,
            'notes': str,
            'project_idfk': int,
            'quantity': float,
            'task_idfk': int,
            'tax_idfk': int,
            'transaction_tax_config_code': str,
            'verify_and_save': bool,
            'is_chargeable': bool,
            'is_reimbursable': bool
        }

        self.attribute_map = {
            'amount': 'Amount',
            'currency_code': 'CurrencyCode',
            'customer_idfk': 'CustomerIDFK',
            'exchange_rate': 'ExchangeRate',
            'expense_category_idfk': 'ExpenseCategoryIDFK',
            'expense_date': 'ExpenseDate',
            'expense_id': 'ExpenseID',
            'expense_payment_method_idfk': 'ExpensePaymentMethodIDFK',
            'fields_to_update': 'FieldsToUpdate',
            'file_attachment_ids': 'FileAttachmentIDs',
            'group_trip_name': 'GroupTripName',
            'merchant': 'Merchant',
            'merchant_tax_number': 'MerchantTaxNumber',
            'notes': 'Notes',
            'project_idfk': 'ProjectIDFK',
            'quantity': 'Quantity',
            'task_idfk': 'TaskIDFK',
            'tax_idfk': 'TaxIDFK',
            'transaction_tax_config_code': 'TransactionTaxConfigCode',
            'verify_and_save': 'VerifyAndSave',
            'is_chargeable': 'isChargeable',
            'is_reimbursable': 'isReimbursable'
        }

        self._amount = amount
        self._currency_code = currency_code
        self._customer_idfk = customer_idfk
        self._exchange_rate = exchange_rate
        self._expense_category_idfk = expense_category_idfk
        self._expense_date = expense_date
        self._expense_id = expense_id
        self._expense_payment_method_idfk = expense_payment_method_idfk
        self._fields_to_update = fields_to_update
        self._file_attachment_ids = file_attachment_ids
        self._group_trip_name = group_trip_name
        self._merchant = merchant
        self._merchant_tax_number = merchant_tax_number
        self._notes = notes
        self._project_idfk = project_idfk
        self._quantity = quantity
        self._task_idfk = task_idfk
        self._tax_idfk = tax_idfk
        self._transaction_tax_config_code = transaction_tax_config_code
        self._verify_and_save = verify_and_save
        self._is_chargeable = is_chargeable
        self._is_reimbursable = is_reimbursable

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateExpense':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateExpense of this UpdateExpense.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this UpdateExpense.

        Expense Amount (Required). Must be &gt;= 0

        :return: The amount of this UpdateExpense.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this UpdateExpense.

        Expense Amount (Required). Must be &gt;= 0

        :param amount: The amount of this UpdateExpense.
        :type amount: float
        """

        self._amount = amount

    @property
    def currency_code(self):
        """Gets the currency_code of this UpdateExpense.

        A 3-letter ISO CurrencyCode for the expense currency. (e.g. USD). If not provided, defaults to the Account base currency.

        :return: The currency_code of this UpdateExpense.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this UpdateExpense.

        A 3-letter ISO CurrencyCode for the expense currency. (e.g. USD). If not provided, defaults to the Account base currency.

        :param currency_code: The currency_code of this UpdateExpense.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def customer_idfk(self):
        """Gets the customer_idfk of this UpdateExpense.

        The Avaza Customer ID to associate the Expense with.

        :return: The customer_idfk of this UpdateExpense.
        :rtype: int
        """
        return self._customer_idfk

    @customer_idfk.setter
    def customer_idfk(self, customer_idfk):
        """Sets the customer_idfk of this UpdateExpense.

        The Avaza Customer ID to associate the Expense with.

        :param customer_idfk: The customer_idfk of this UpdateExpense.
        :type customer_idfk: int
        """

        self._customer_idfk = customer_idfk

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this UpdateExpense.

        Optional (Only relevant if the expense currency is different to your account currency. If not provided we will look up the market exchange rate for you based on the expense date.) Exchange Rate = Expense Currency Amount / Base Currency Amount (e.g. if Expense currency is in AUD, and Base Currency is in USD, Exchange Rate = AUD $140 / USD $100 = 1.4)

        :return: The exchange_rate of this UpdateExpense.
        :rtype: float
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this UpdateExpense.

        Optional (Only relevant if the expense currency is different to your account currency. If not provided we will look up the market exchange rate for you based on the expense date.) Exchange Rate = Expense Currency Amount / Base Currency Amount (e.g. if Expense currency is in AUD, and Base Currency is in USD, Exchange Rate = AUD $140 / USD $100 = 1.4)

        :param exchange_rate: The exchange_rate of this UpdateExpense.
        :type exchange_rate: float
        """

        self._exchange_rate = exchange_rate

    @property
    def expense_category_idfk(self):
        """Gets the expense_category_idfk of this UpdateExpense.

        The expense category to link the Expense to.

        :return: The expense_category_idfk of this UpdateExpense.
        :rtype: int
        """
        return self._expense_category_idfk

    @expense_category_idfk.setter
    def expense_category_idfk(self, expense_category_idfk):
        """Sets the expense_category_idfk of this UpdateExpense.

        The expense category to link the Expense to.

        :param expense_category_idfk: The expense_category_idfk of this UpdateExpense.
        :type expense_category_idfk: int
        """

        self._expense_category_idfk = expense_category_idfk

    @property
    def expense_date(self):
        """Gets the expense_date of this UpdateExpense.

        The date of the expense entry

        :return: The expense_date of this UpdateExpense.
        :rtype: datetime
        """
        return self._expense_date

    @expense_date.setter
    def expense_date(self, expense_date):
        """Sets the expense_date of this UpdateExpense.

        The date of the expense entry

        :param expense_date: The expense_date of this UpdateExpense.
        :type expense_date: datetime
        """

        self._expense_date = expense_date

    @property
    def expense_id(self):
        """Gets the expense_id of this UpdateExpense.


        :return: The expense_id of this UpdateExpense.
        :rtype: int
        """
        return self._expense_id

    @expense_id.setter
    def expense_id(self, expense_id):
        """Sets the expense_id of this UpdateExpense.


        :param expense_id: The expense_id of this UpdateExpense.
        :type expense_id: int
        """
        if expense_id is None:
            raise ValueError("Invalid value for `expense_id`, must not be `None`")

        self._expense_id = expense_id

    @property
    def expense_payment_method_idfk(self):
        """Gets the expense_payment_method_idfk of this UpdateExpense.

        (Optional) ID of Expense Payment Method.

        :return: The expense_payment_method_idfk of this UpdateExpense.
        :rtype: int
        """
        return self._expense_payment_method_idfk

    @expense_payment_method_idfk.setter
    def expense_payment_method_idfk(self, expense_payment_method_idfk):
        """Sets the expense_payment_method_idfk of this UpdateExpense.

        (Optional) ID of Expense Payment Method.

        :param expense_payment_method_idfk: The expense_payment_method_idfk of this UpdateExpense.
        :type expense_payment_method_idfk: int
        """

        self._expense_payment_method_idfk = expense_payment_method_idfk

    @property
    def fields_to_update(self):
        """Gets the fields_to_update of this UpdateExpense.


        :return: The fields_to_update of this UpdateExpense.
        :rtype: List[str]
        """
        return self._fields_to_update

    @fields_to_update.setter
    def fields_to_update(self, fields_to_update):
        """Sets the fields_to_update of this UpdateExpense.


        :param fields_to_update: The fields_to_update of this UpdateExpense.
        :type fields_to_update: List[str]
        """
        if fields_to_update is None:
            raise ValueError("Invalid value for `fields_to_update`, must not be `None`")

        self._fields_to_update = fields_to_update

    @property
    def file_attachment_ids(self):
        """Gets the file_attachment_ids of this UpdateExpense.

        Array of File Attachment IDs to associate with this expense. The files need to have already been uploaded. Currently only accepts a single file.

        :return: The file_attachment_ids of this UpdateExpense.
        :rtype: List[int]
        """
        return self._file_attachment_ids

    @file_attachment_ids.setter
    def file_attachment_ids(self, file_attachment_ids):
        """Sets the file_attachment_ids of this UpdateExpense.

        Array of File Attachment IDs to associate with this expense. The files need to have already been uploaded. Currently only accepts a single file.

        :param file_attachment_ids: The file_attachment_ids of this UpdateExpense.
        :type file_attachment_ids: List[int]
        """

        self._file_attachment_ids = file_attachment_ids

    @property
    def group_trip_name(self):
        """Gets the group_trip_name of this UpdateExpense.

        Links the expense to a Grouping/Trip report. If no matching name found, creates a new Group/Trip Report name.

        :return: The group_trip_name of this UpdateExpense.
        :rtype: str
        """
        return self._group_trip_name

    @group_trip_name.setter
    def group_trip_name(self, group_trip_name):
        """Sets the group_trip_name of this UpdateExpense.

        Links the expense to a Grouping/Trip report. If no matching name found, creates a new Group/Trip Report name.

        :param group_trip_name: The group_trip_name of this UpdateExpense.
        :type group_trip_name: str
        """

        self._group_trip_name = group_trip_name

    @property
    def merchant(self):
        """Gets the merchant of this UpdateExpense.

        The name of the merchant.

        :return: The merchant of this UpdateExpense.
        :rtype: str
        """
        return self._merchant

    @merchant.setter
    def merchant(self, merchant):
        """Sets the merchant of this UpdateExpense.

        The name of the merchant.

        :param merchant: The merchant of this UpdateExpense.
        :type merchant: str
        """

        self._merchant = merchant

    @property
    def merchant_tax_number(self):
        """Gets the merchant_tax_number of this UpdateExpense.

        A Tax number identifier for the merchant.

        :return: The merchant_tax_number of this UpdateExpense.
        :rtype: str
        """
        return self._merchant_tax_number

    @merchant_tax_number.setter
    def merchant_tax_number(self, merchant_tax_number):
        """Sets the merchant_tax_number of this UpdateExpense.

        A Tax number identifier for the merchant.

        :param merchant_tax_number: The merchant_tax_number of this UpdateExpense.
        :type merchant_tax_number: str
        """

        self._merchant_tax_number = merchant_tax_number

    @property
    def notes(self):
        """Gets the notes of this UpdateExpense.

        Expense Notes

        :return: The notes of this UpdateExpense.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this UpdateExpense.

        Expense Notes

        :param notes: The notes of this UpdateExpense.
        :type notes: str
        """

        self._notes = notes

    @property
    def project_idfk(self):
        """Gets the project_idfk of this UpdateExpense.

        The Avaza project ID to associate the Expense with.

        :return: The project_idfk of this UpdateExpense.
        :rtype: int
        """
        return self._project_idfk

    @project_idfk.setter
    def project_idfk(self, project_idfk):
        """Sets the project_idfk of this UpdateExpense.

        The Avaza project ID to associate the Expense with.

        :param project_idfk: The project_idfk of this UpdateExpense.
        :type project_idfk: int
        """

        self._project_idfk = project_idfk

    @property
    def quantity(self):
        """Gets the quantity of this UpdateExpense.

        Conditional - available for expenses that are assigned a unit priced based expense category. e.g Mileage

        :return: The quantity of this UpdateExpense.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this UpdateExpense.

        Conditional - available for expenses that are assigned a unit priced based expense category. e.g Mileage

        :param quantity: The quantity of this UpdateExpense.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def task_idfk(self):
        """Gets the task_idfk of this UpdateExpense.

        (optional) TaskID of a Task to link the new Expense to. A Customer and Project must be provided also.

        :return: The task_idfk of this UpdateExpense.
        :rtype: int
        """
        return self._task_idfk

    @task_idfk.setter
    def task_idfk(self, task_idfk):
        """Sets the task_idfk of this UpdateExpense.

        (optional) TaskID of a Task to link the new Expense to. A Customer and Project must be provided also.

        :param task_idfk: The task_idfk of this UpdateExpense.
        :type task_idfk: int
        """

        self._task_idfk = task_idfk

    @property
    def tax_idfk(self):
        """Gets the tax_idfk of this UpdateExpense.

        Avaza Tax ID the expense belongs to.

        :return: The tax_idfk of this UpdateExpense.
        :rtype: int
        """
        return self._tax_idfk

    @tax_idfk.setter
    def tax_idfk(self, tax_idfk):
        """Sets the tax_idfk of this UpdateExpense.

        Avaza Tax ID the expense belongs to.

        :param tax_idfk: The tax_idfk of this UpdateExpense.
        :type tax_idfk: int
        """

        self._tax_idfk = tax_idfk

    @property
    def transaction_tax_config_code(self):
        """Gets the transaction_tax_config_code of this UpdateExpense.

        Optional - Enter \"INC\" if the tax amount is included in the expense amount otherwise enter \"EX\" when the amount exlcudes the tax. Defaults to \"Ex\". The tax amount on the expense will be autocalculated.

        :return: The transaction_tax_config_code of this UpdateExpense.
        :rtype: str
        """
        return self._transaction_tax_config_code

    @transaction_tax_config_code.setter
    def transaction_tax_config_code(self, transaction_tax_config_code):
        """Sets the transaction_tax_config_code of this UpdateExpense.

        Optional - Enter \"INC\" if the tax amount is included in the expense amount otherwise enter \"EX\" when the amount exlcudes the tax. Defaults to \"Ex\". The tax amount on the expense will be autocalculated.

        :param transaction_tax_config_code: The transaction_tax_config_code of this UpdateExpense.
        :type transaction_tax_config_code: str
        """

        self._transaction_tax_config_code = transaction_tax_config_code

    @property
    def verify_and_save(self):
        """Gets the verify_and_save of this UpdateExpense.

        Pass false if creating a draft expense. True otherwise.

        :return: The verify_and_save of this UpdateExpense.
        :rtype: bool
        """
        return self._verify_and_save

    @verify_and_save.setter
    def verify_and_save(self, verify_and_save):
        """Sets the verify_and_save of this UpdateExpense.

        Pass false if creating a draft expense. True otherwise.

        :param verify_and_save: The verify_and_save of this UpdateExpense.
        :type verify_and_save: bool
        """

        self._verify_and_save = verify_and_save

    @property
    def is_chargeable(self):
        """Gets the is_chargeable of this UpdateExpense.

        aka Billable. Defaults to false if not provided. If set to true, a CustomerIDFK or CustomerName must be provided.

        :return: The is_chargeable of this UpdateExpense.
        :rtype: bool
        """
        return self._is_chargeable

    @is_chargeable.setter
    def is_chargeable(self, is_chargeable):
        """Sets the is_chargeable of this UpdateExpense.

        aka Billable. Defaults to false if not provided. If set to true, a CustomerIDFK or CustomerName must be provided.

        :param is_chargeable: The is_chargeable of this UpdateExpense.
        :type is_chargeable: bool
        """

        self._is_chargeable = is_chargeable

    @property
    def is_reimbursable(self):
        """Gets the is_reimbursable of this UpdateExpense.

        Defaults to false if not provided.

        :return: The is_reimbursable of this UpdateExpense.
        :rtype: bool
        """
        return self._is_reimbursable

    @is_reimbursable.setter
    def is_reimbursable(self, is_reimbursable):
        """Sets the is_reimbursable of this UpdateExpense.

        Defaults to false if not provided.

        :param is_reimbursable: The is_reimbursable of this UpdateExpense.
        :type is_reimbursable: bool
        """

        self._is_reimbursable = is_reimbursable
