# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.new_bill_payment_allocation import NewBillPaymentAllocation
from openapi_server import util


class NewBillPayment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, company_idfk: int=None, currency_code: str=None, date_issued: datetime=None, exchange_rate: float=None, notes: str=None, payment_allocations: List[NewBillPaymentAllocation]=None, payment_number: str=None, payment_provider_code: str=None, transaction_prefix: str=None, transaction_reference: str=None):
        """NewBillPayment - a model defined in OpenAPI

        :param amount: The amount of this NewBillPayment.
        :param company_idfk: The company_idfk of this NewBillPayment.
        :param currency_code: The currency_code of this NewBillPayment.
        :param date_issued: The date_issued of this NewBillPayment.
        :param exchange_rate: The exchange_rate of this NewBillPayment.
        :param notes: The notes of this NewBillPayment.
        :param payment_allocations: The payment_allocations of this NewBillPayment.
        :param payment_number: The payment_number of this NewBillPayment.
        :param payment_provider_code: The payment_provider_code of this NewBillPayment.
        :param transaction_prefix: The transaction_prefix of this NewBillPayment.
        :param transaction_reference: The transaction_reference of this NewBillPayment.
        """
        self.openapi_types = {
            'amount': float,
            'company_idfk': int,
            'currency_code': str,
            'date_issued': datetime,
            'exchange_rate': float,
            'notes': str,
            'payment_allocations': List[NewBillPaymentAllocation],
            'payment_number': str,
            'payment_provider_code': str,
            'transaction_prefix': str,
            'transaction_reference': str
        }

        self.attribute_map = {
            'amount': 'Amount',
            'company_idfk': 'CompanyIDFK',
            'currency_code': 'CurrencyCode',
            'date_issued': 'DateIssued',
            'exchange_rate': 'ExchangeRate',
            'notes': 'Notes',
            'payment_allocations': 'PaymentAllocations',
            'payment_number': 'PaymentNumber',
            'payment_provider_code': 'PaymentProviderCode',
            'transaction_prefix': 'TransactionPrefix',
            'transaction_reference': 'TransactionReference'
        }

        self._amount = amount
        self._company_idfk = company_idfk
        self._currency_code = currency_code
        self._date_issued = date_issued
        self._exchange_rate = exchange_rate
        self._notes = notes
        self._payment_allocations = payment_allocations
        self._payment_number = payment_number
        self._payment_provider_code = payment_provider_code
        self._transaction_prefix = transaction_prefix
        self._transaction_reference = transaction_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewBillPayment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewBillPayment of this NewBillPayment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this NewBillPayment.


        :return: The amount of this NewBillPayment.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this NewBillPayment.


        :param amount: The amount of this NewBillPayment.
        :type amount: float
        """

        self._amount = amount

    @property
    def company_idfk(self):
        """Gets the company_idfk of this NewBillPayment.

        Only required if no invoice allocations specified.

        :return: The company_idfk of this NewBillPayment.
        :rtype: int
        """
        return self._company_idfk

    @company_idfk.setter
    def company_idfk(self, company_idfk):
        """Sets the company_idfk of this NewBillPayment.

        Only required if no invoice allocations specified.

        :param company_idfk: The company_idfk of this NewBillPayment.
        :type company_idfk: int
        """

        self._company_idfk = company_idfk

    @property
    def currency_code(self):
        """Gets the currency_code of this NewBillPayment.

        Optional for specifying the Bill Payment's Currency (3 letter ISO Currency Code).

        :return: The currency_code of this NewBillPayment.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this NewBillPayment.

        Optional for specifying the Bill Payment's Currency (3 letter ISO Currency Code).

        :param currency_code: The currency_code of this NewBillPayment.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def date_issued(self):
        """Gets the date_issued of this NewBillPayment.

        Date of Payment. If not specified, assumes today.

        :return: The date_issued of this NewBillPayment.
        :rtype: datetime
        """
        return self._date_issued

    @date_issued.setter
    def date_issued(self, date_issued):
        """Sets the date_issued of this NewBillPayment.

        Date of Payment. If not specified, assumes today.

        :param date_issued: The date_issued of this NewBillPayment.
        :type date_issued: datetime
        """

        self._date_issued = date_issued

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this NewBillPayment.

        Optional. Only used when the Company's currency is different from the Avaza account's base currency. Specifies the exchange rate that should apply between the Company currency and base currency. If not provided we will obtain an up to date exchange rate for the Payment Issue Date.

        :return: The exchange_rate of this NewBillPayment.
        :rtype: float
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this NewBillPayment.

        Optional. Only used when the Company's currency is different from the Avaza account's base currency. Specifies the exchange rate that should apply between the Company currency and base currency. If not provided we will obtain an up to date exchange rate for the Payment Issue Date.

        :param exchange_rate: The exchange_rate of this NewBillPayment.
        :type exchange_rate: float
        """

        self._exchange_rate = exchange_rate

    @property
    def notes(self):
        """Gets the notes of this NewBillPayment.


        :return: The notes of this NewBillPayment.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this NewBillPayment.


        :param notes: The notes of this NewBillPayment.
        :type notes: str
        """

        self._notes = notes

    @property
    def payment_allocations(self):
        """Gets the payment_allocations of this NewBillPayment.

        List of amounts within this payment that are allocated to invoices. The sum of these be less than or equal to the payment amount.

        :return: The payment_allocations of this NewBillPayment.
        :rtype: List[NewBillPaymentAllocation]
        """
        return self._payment_allocations

    @payment_allocations.setter
    def payment_allocations(self, payment_allocations):
        """Sets the payment_allocations of this NewBillPayment.

        List of amounts within this payment that are allocated to invoices. The sum of these be less than or equal to the payment amount.

        :param payment_allocations: The payment_allocations of this NewBillPayment.
        :type payment_allocations: List[NewBillPaymentAllocation]
        """

        self._payment_allocations = payment_allocations

    @property
    def payment_number(self):
        """Gets the payment_number of this NewBillPayment.

        Optional. If not specified will be automatically generated

        :return: The payment_number of this NewBillPayment.
        :rtype: str
        """
        return self._payment_number

    @payment_number.setter
    def payment_number(self, payment_number):
        """Sets the payment_number of this NewBillPayment.

        Optional. If not specified will be automatically generated

        :param payment_number: The payment_number of this NewBillPayment.
        :type payment_number: str
        """

        self._payment_number = payment_number

    @property
    def payment_provider_code(self):
        """Gets the payment_provider_code of this NewBillPayment.

        Optional for storing the payment provider who was the source of funds.

        :return: The payment_provider_code of this NewBillPayment.
        :rtype: str
        """
        return self._payment_provider_code

    @payment_provider_code.setter
    def payment_provider_code(self, payment_provider_code):
        """Sets the payment_provider_code of this NewBillPayment.

        Optional for storing the payment provider who was the source of funds.

        :param payment_provider_code: The payment_provider_code of this NewBillPayment.
        :type payment_provider_code: str
        """

        self._payment_provider_code = payment_provider_code

    @property
    def transaction_prefix(self):
        """Gets the transaction_prefix of this NewBillPayment.

        Optional to override the default prefix added to Payment Numbers

        :return: The transaction_prefix of this NewBillPayment.
        :rtype: str
        """
        return self._transaction_prefix

    @transaction_prefix.setter
    def transaction_prefix(self, transaction_prefix):
        """Sets the transaction_prefix of this NewBillPayment.

        Optional to override the default prefix added to Payment Numbers

        :param transaction_prefix: The transaction_prefix of this NewBillPayment.
        :type transaction_prefix: str
        """

        self._transaction_prefix = transaction_prefix

    @property
    def transaction_reference(self):
        """Gets the transaction_reference of this NewBillPayment.

        Optional for storing the reference # of the payment method.

        :return: The transaction_reference of this NewBillPayment.
        :rtype: str
        """
        return self._transaction_reference

    @transaction_reference.setter
    def transaction_reference(self, transaction_reference):
        """Sets the transaction_reference of this NewBillPayment.

        Optional for storing the reference # of the payment method.

        :param transaction_reference: The transaction_reference of this NewBillPayment.
        :type transaction_reference: str
        """

        self._transaction_reference = transaction_reference
