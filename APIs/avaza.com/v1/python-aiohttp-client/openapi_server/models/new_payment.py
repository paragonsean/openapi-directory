# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.new_payment_allocation import NewPaymentAllocation
from openapi_server import util


class NewPayment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, customer_idfk: int=None, date_issued: datetime=None, exchange_rate: float=None, notes: str=None, payment_allocations: List[NewPaymentAllocation]=None, payment_number: str=None, payment_provider_code: str=None, transaction_prefix: str=None, transaction_reference: str=None):
        """NewPayment - a model defined in OpenAPI

        :param amount: The amount of this NewPayment.
        :param customer_idfk: The customer_idfk of this NewPayment.
        :param date_issued: The date_issued of this NewPayment.
        :param exchange_rate: The exchange_rate of this NewPayment.
        :param notes: The notes of this NewPayment.
        :param payment_allocations: The payment_allocations of this NewPayment.
        :param payment_number: The payment_number of this NewPayment.
        :param payment_provider_code: The payment_provider_code of this NewPayment.
        :param transaction_prefix: The transaction_prefix of this NewPayment.
        :param transaction_reference: The transaction_reference of this NewPayment.
        """
        self.openapi_types = {
            'amount': float,
            'customer_idfk': int,
            'date_issued': datetime,
            'exchange_rate': float,
            'notes': str,
            'payment_allocations': List[NewPaymentAllocation],
            'payment_number': str,
            'payment_provider_code': str,
            'transaction_prefix': str,
            'transaction_reference': str
        }

        self.attribute_map = {
            'amount': 'Amount',
            'customer_idfk': 'CustomerIDFK',
            'date_issued': 'DateIssued',
            'exchange_rate': 'ExchangeRate',
            'notes': 'Notes',
            'payment_allocations': 'PaymentAllocations',
            'payment_number': 'PaymentNumber',
            'payment_provider_code': 'PaymentProviderCode',
            'transaction_prefix': 'TransactionPrefix',
            'transaction_reference': 'TransactionReference'
        }

        self._amount = amount
        self._customer_idfk = customer_idfk
        self._date_issued = date_issued
        self._exchange_rate = exchange_rate
        self._notes = notes
        self._payment_allocations = payment_allocations
        self._payment_number = payment_number
        self._payment_provider_code = payment_provider_code
        self._transaction_prefix = transaction_prefix
        self._transaction_reference = transaction_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewPayment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewPayment of this NewPayment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this NewPayment.


        :return: The amount of this NewPayment.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this NewPayment.


        :param amount: The amount of this NewPayment.
        :type amount: float
        """

        self._amount = amount

    @property
    def customer_idfk(self):
        """Gets the customer_idfk of this NewPayment.

        Only required if no invoice allocations specified.

        :return: The customer_idfk of this NewPayment.
        :rtype: int
        """
        return self._customer_idfk

    @customer_idfk.setter
    def customer_idfk(self, customer_idfk):
        """Sets the customer_idfk of this NewPayment.

        Only required if no invoice allocations specified.

        :param customer_idfk: The customer_idfk of this NewPayment.
        :type customer_idfk: int
        """

        self._customer_idfk = customer_idfk

    @property
    def date_issued(self):
        """Gets the date_issued of this NewPayment.

        Date of Payment. If not specified, assumes today.

        :return: The date_issued of this NewPayment.
        :rtype: datetime
        """
        return self._date_issued

    @date_issued.setter
    def date_issued(self, date_issued):
        """Sets the date_issued of this NewPayment.

        Date of Payment. If not specified, assumes today.

        :param date_issued: The date_issued of this NewPayment.
        :type date_issued: datetime
        """

        self._date_issued = date_issued

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this NewPayment.

        Optional. Only used when the Customer's currecy is different from the Avaza account's base currency. Specifies the exchange rate that should apply between the customer currency and base currency. If not provided we will obtain an up to date exchange rate for the Payment Issue Date.

        :return: The exchange_rate of this NewPayment.
        :rtype: float
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this NewPayment.

        Optional. Only used when the Customer's currecy is different from the Avaza account's base currency. Specifies the exchange rate that should apply between the customer currency and base currency. If not provided we will obtain an up to date exchange rate for the Payment Issue Date.

        :param exchange_rate: The exchange_rate of this NewPayment.
        :type exchange_rate: float
        """

        self._exchange_rate = exchange_rate

    @property
    def notes(self):
        """Gets the notes of this NewPayment.


        :return: The notes of this NewPayment.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this NewPayment.


        :param notes: The notes of this NewPayment.
        :type notes: str
        """

        self._notes = notes

    @property
    def payment_allocations(self):
        """Gets the payment_allocations of this NewPayment.

        List of amounts within this payment that are allocated to invoices. The sum of these be less than or equal to the payment amount.

        :return: The payment_allocations of this NewPayment.
        :rtype: List[NewPaymentAllocation]
        """
        return self._payment_allocations

    @payment_allocations.setter
    def payment_allocations(self, payment_allocations):
        """Sets the payment_allocations of this NewPayment.

        List of amounts within this payment that are allocated to invoices. The sum of these be less than or equal to the payment amount.

        :param payment_allocations: The payment_allocations of this NewPayment.
        :type payment_allocations: List[NewPaymentAllocation]
        """

        self._payment_allocations = payment_allocations

    @property
    def payment_number(self):
        """Gets the payment_number of this NewPayment.

        Optional. If not specified will be automatically generated

        :return: The payment_number of this NewPayment.
        :rtype: str
        """
        return self._payment_number

    @payment_number.setter
    def payment_number(self, payment_number):
        """Sets the payment_number of this NewPayment.

        Optional. If not specified will be automatically generated

        :param payment_number: The payment_number of this NewPayment.
        :type payment_number: str
        """

        self._payment_number = payment_number

    @property
    def payment_provider_code(self):
        """Gets the payment_provider_code of this NewPayment.

        Optional for storing the payment provider who was the source of funds.

        :return: The payment_provider_code of this NewPayment.
        :rtype: str
        """
        return self._payment_provider_code

    @payment_provider_code.setter
    def payment_provider_code(self, payment_provider_code):
        """Sets the payment_provider_code of this NewPayment.

        Optional for storing the payment provider who was the source of funds.

        :param payment_provider_code: The payment_provider_code of this NewPayment.
        :type payment_provider_code: str
        """

        self._payment_provider_code = payment_provider_code

    @property
    def transaction_prefix(self):
        """Gets the transaction_prefix of this NewPayment.

        Optional to override the default prefix added to Payment Numbers

        :return: The transaction_prefix of this NewPayment.
        :rtype: str
        """
        return self._transaction_prefix

    @transaction_prefix.setter
    def transaction_prefix(self, transaction_prefix):
        """Sets the transaction_prefix of this NewPayment.

        Optional to override the default prefix added to Payment Numbers

        :param transaction_prefix: The transaction_prefix of this NewPayment.
        :type transaction_prefix: str
        """

        self._transaction_prefix = transaction_prefix

    @property
    def transaction_reference(self):
        """Gets the transaction_reference of this NewPayment.

        Optional for storing the reference # of the payment method.

        :return: The transaction_reference of this NewPayment.
        :rtype: str
        """
        return self._transaction_reference

    @transaction_reference.setter
    def transaction_reference(self, transaction_reference):
        """Sets the transaction_reference of this NewPayment.

        Optional for storing the reference # of the payment method.

        :param transaction_reference: The transaction_reference of this NewPayment.
        :type transaction_reference: str
        """

        self._transaction_reference = transaction_reference
