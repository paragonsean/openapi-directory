# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.new_estimate_line_item import NewEstimateLineItem
from openapi_server import util


class NewEstimate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, company_idfk: int=None, company_name: str=None, currency_code: str=None, customer_po_number: str=None, date_issued: datetime=None, due_date: datetime=None, email: str=None, estimate_number: str=None, estimate_prefix: str=None, estimate_tax_config_code: str=None, exchange_rate: float=None, firstname: str=None, invoice_template_idfk: int=None, lastname: str=None, line_items: List[NewEstimateLineItem]=None, notes: str=None, subject: str=None):
        """NewEstimate - a model defined in OpenAPI

        :param company_idfk: The company_idfk of this NewEstimate.
        :param company_name: The company_name of this NewEstimate.
        :param currency_code: The currency_code of this NewEstimate.
        :param customer_po_number: The customer_po_number of this NewEstimate.
        :param date_issued: The date_issued of this NewEstimate.
        :param due_date: The due_date of this NewEstimate.
        :param email: The email of this NewEstimate.
        :param estimate_number: The estimate_number of this NewEstimate.
        :param estimate_prefix: The estimate_prefix of this NewEstimate.
        :param estimate_tax_config_code: The estimate_tax_config_code of this NewEstimate.
        :param exchange_rate: The exchange_rate of this NewEstimate.
        :param firstname: The firstname of this NewEstimate.
        :param invoice_template_idfk: The invoice_template_idfk of this NewEstimate.
        :param lastname: The lastname of this NewEstimate.
        :param line_items: The line_items of this NewEstimate.
        :param notes: The notes of this NewEstimate.
        :param subject: The subject of this NewEstimate.
        """
        self.openapi_types = {
            'company_idfk': int,
            'company_name': str,
            'currency_code': str,
            'customer_po_number': str,
            'date_issued': datetime,
            'due_date': datetime,
            'email': str,
            'estimate_number': str,
            'estimate_prefix': str,
            'estimate_tax_config_code': str,
            'exchange_rate': float,
            'firstname': str,
            'invoice_template_idfk': int,
            'lastname': str,
            'line_items': List[NewEstimateLineItem],
            'notes': str,
            'subject': str
        }

        self.attribute_map = {
            'company_idfk': 'CompanyIDFK',
            'company_name': 'CompanyName',
            'currency_code': 'CurrencyCode',
            'customer_po_number': 'CustomerPONumber',
            'date_issued': 'DateIssued',
            'due_date': 'DueDate',
            'email': 'Email',
            'estimate_number': 'EstimateNumber',
            'estimate_prefix': 'EstimatePrefix',
            'estimate_tax_config_code': 'EstimateTaxConfigCode',
            'exchange_rate': 'ExchangeRate',
            'firstname': 'Firstname',
            'invoice_template_idfk': 'InvoiceTemplateIDFK',
            'lastname': 'Lastname',
            'line_items': 'LineItems',
            'notes': 'Notes',
            'subject': 'Subject'
        }

        self._company_idfk = company_idfk
        self._company_name = company_name
        self._currency_code = currency_code
        self._customer_po_number = customer_po_number
        self._date_issued = date_issued
        self._due_date = due_date
        self._email = email
        self._estimate_number = estimate_number
        self._estimate_prefix = estimate_prefix
        self._estimate_tax_config_code = estimate_tax_config_code
        self._exchange_rate = exchange_rate
        self._firstname = firstname
        self._invoice_template_idfk = invoice_template_idfk
        self._lastname = lastname
        self._line_items = line_items
        self._notes = notes
        self._subject = subject

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewEstimate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewEstimate of this NewEstimate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def company_idfk(self):
        """Gets the company_idfk of this NewEstimate.

        If left blank then you must specify Company Name.

        :return: The company_idfk of this NewEstimate.
        :rtype: int
        """
        return self._company_idfk

    @company_idfk.setter
    def company_idfk(self, company_idfk):
        """Sets the company_idfk of this NewEstimate.

        If left blank then you must specify Company Name.

        :param company_idfk: The company_idfk of this NewEstimate.
        :type company_idfk: int
        """

        self._company_idfk = company_idfk

    @property
    def company_name(self):
        """Gets the company_name of this NewEstimate.

        If left blank then you must specify Company ID. Specified Name will be used to match existing customer record. If not matched then it will be used to create a new customer. First Name, Last Name and Email will only be used if it is a new company. If the Company name appears multiple times we will check the email address to find a matching company. If email address doesn't identify a matching company then the Estimate creation will be rejected.

        :return: The company_name of this NewEstimate.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this NewEstimate.

        If left blank then you must specify Company ID. Specified Name will be used to match existing customer record. If not matched then it will be used to create a new customer. First Name, Last Name and Email will only be used if it is a new company. If the Company name appears multiple times we will check the email address to find a matching company. If email address doesn't identify a matching company then the Estimate creation will be rejected.

        :param company_name: The company_name of this NewEstimate.
        :type company_name: str
        """

        self._company_name = company_name

    @property
    def currency_code(self):
        """Gets the currency_code of this NewEstimate.

        Expects ISO Standard 3 character currency code. If left blank the currency will default to account's currency in general setting. For existing companies this field will be ignored and the Estimate will use the currency of the customer. For new customers if the currency is not specified then account currency will be used otherwise the specified currency will be used.

        :return: The currency_code of this NewEstimate.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this NewEstimate.

        Expects ISO Standard 3 character currency code. If left blank the currency will default to account's currency in general setting. For existing companies this field will be ignored and the Estimate will use the currency of the customer. For new customers if the currency is not specified then account currency will be used otherwise the specified currency will be used.

        :param currency_code: The currency_code of this NewEstimate.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def customer_po_number(self):
        """Gets the customer_po_number of this NewEstimate.

        Plain UTF8 text. 100 characters max

        :return: The customer_po_number of this NewEstimate.
        :rtype: str
        """
        return self._customer_po_number

    @customer_po_number.setter
    def customer_po_number(self, customer_po_number):
        """Sets the customer_po_number of this NewEstimate.

        Plain UTF8 text. 100 characters max

        :param customer_po_number: The customer_po_number of this NewEstimate.
        :type customer_po_number: str
        """

        self._customer_po_number = customer_po_number

    @property
    def date_issued(self):
        """Gets the date_issued of this NewEstimate.

        If not specified it will use today's date. The date should be specified as local date.

        :return: The date_issued of this NewEstimate.
        :rtype: datetime
        """
        return self._date_issued

    @date_issued.setter
    def date_issued(self, date_issued):
        """Sets the date_issued of this NewEstimate.

        If not specified it will use today's date. The date should be specified as local date.

        :param date_issued: The date_issued of this NewEstimate.
        :type date_issued: datetime
        """

        self._date_issued = date_issued

    @property
    def due_date(self):
        """Gets the due_date of this NewEstimate.

        It will be auto calculated based on the payment term and issue date. Due Date must be greater than or equal to Issue Date. If the Due Date is specified then Payment Terms will be set to -1 (Custom)

        :return: The due_date of this NewEstimate.
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this NewEstimate.

        It will be auto calculated based on the payment term and issue date. Due Date must be greater than or equal to Issue Date. If the Due Date is specified then Payment Terms will be set to -1 (Custom)

        :param due_date: The due_date of this NewEstimate.
        :type due_date: datetime
        """

        self._due_date = due_date

    @property
    def email(self):
        """Gets the email of this NewEstimate.

        Specified value will be used to create a new customer contact only if a new customer is being created.

        :return: The email of this NewEstimate.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this NewEstimate.

        Specified value will be used to create a new customer contact only if a new customer is being created.

        :param email: The email of this NewEstimate.
        :type email: str
        """

        self._email = email

    @property
    def estimate_number(self):
        """Gets the estimate_number of this NewEstimate.

        Pass any string. If left blank it will use the next number in the auto incrementing sequence. If an integer is passed then the largest integer will be use as the seed to auto generate the next Estimate number in the sequence.

        :return: The estimate_number of this NewEstimate.
        :rtype: str
        """
        return self._estimate_number

    @estimate_number.setter
    def estimate_number(self, estimate_number):
        """Sets the estimate_number of this NewEstimate.

        Pass any string. If left blank it will use the next number in the auto incrementing sequence. If an integer is passed then the largest integer will be use as the seed to auto generate the next Estimate number in the sequence.

        :param estimate_number: The estimate_number of this NewEstimate.
        :type estimate_number: str
        """

        self._estimate_number = estimate_number

    @property
    def estimate_prefix(self):
        """Gets the estimate_prefix of this NewEstimate.

        A prefix for the Estimate number. e.g. 'INV'. If left blank it will be set to the account default. Max length 20 characters.

        :return: The estimate_prefix of this NewEstimate.
        :rtype: str
        """
        return self._estimate_prefix

    @estimate_prefix.setter
    def estimate_prefix(self, estimate_prefix):
        """Sets the estimate_prefix of this NewEstimate.

        A prefix for the Estimate number. e.g. 'INV'. If left blank it will be set to the account default. Max length 20 characters.

        :param estimate_prefix: The estimate_prefix of this NewEstimate.
        :type estimate_prefix: str
        """

        self._estimate_prefix = estimate_prefix

    @property
    def estimate_tax_config_code(self):
        """Gets the estimate_tax_config_code of this NewEstimate.

        Possible values are (EX --- Tax Exclusive, INC --- Tax Inclusive). If left empty it will use the account default.

        :return: The estimate_tax_config_code of this NewEstimate.
        :rtype: str
        """
        return self._estimate_tax_config_code

    @estimate_tax_config_code.setter
    def estimate_tax_config_code(self, estimate_tax_config_code):
        """Sets the estimate_tax_config_code of this NewEstimate.

        Possible values are (EX --- Tax Exclusive, INC --- Tax Inclusive). If left empty it will use the account default.

        :param estimate_tax_config_code: The estimate_tax_config_code of this NewEstimate.
        :type estimate_tax_config_code: str
        """

        self._estimate_tax_config_code = estimate_tax_config_code

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this NewEstimate.

        Exchange rate is only valid for Estimates in currency other than default account currency. If not specified it will get the market rate based on the Date Issued.

        :return: The exchange_rate of this NewEstimate.
        :rtype: float
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this NewEstimate.

        Exchange rate is only valid for Estimates in currency other than default account currency. If not specified it will get the market rate based on the Date Issued.

        :param exchange_rate: The exchange_rate of this NewEstimate.
        :type exchange_rate: float
        """

        self._exchange_rate = exchange_rate

    @property
    def firstname(self):
        """Gets the firstname of this NewEstimate.

        Specified value will be used to create a new customer contact only if a new customer is being created.

        :return: The firstname of this NewEstimate.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this NewEstimate.

        Specified value will be used to create a new customer contact only if a new customer is being created.

        :param firstname: The firstname of this NewEstimate.
        :type firstname: str
        """

        self._firstname = firstname

    @property
    def invoice_template_idfk(self):
        """Gets the invoice_template_idfk of this NewEstimate.

        If left blank the account default Estimate template will be used.

        :return: The invoice_template_idfk of this NewEstimate.
        :rtype: int
        """
        return self._invoice_template_idfk

    @invoice_template_idfk.setter
    def invoice_template_idfk(self, invoice_template_idfk):
        """Sets the invoice_template_idfk of this NewEstimate.

        If left blank the account default Estimate template will be used.

        :param invoice_template_idfk: The invoice_template_idfk of this NewEstimate.
        :type invoice_template_idfk: int
        """

        self._invoice_template_idfk = invoice_template_idfk

    @property
    def lastname(self):
        """Gets the lastname of this NewEstimate.

        Specified value will be used to create a new customer contact only if a new customer is being created.

        :return: The lastname of this NewEstimate.
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this NewEstimate.

        Specified value will be used to create a new customer contact only if a new customer is being created.

        :param lastname: The lastname of this NewEstimate.
        :type lastname: str
        """

        self._lastname = lastname

    @property
    def line_items(self):
        """Gets the line_items of this NewEstimate.


        :return: The line_items of this NewEstimate.
        :rtype: List[NewEstimateLineItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this NewEstimate.


        :param line_items: The line_items of this NewEstimate.
        :type line_items: List[NewEstimateLineItem]
        """

        self._line_items = line_items

    @property
    def notes(self):
        """Gets the notes of this NewEstimate.

        Plain UTF8 text. (no HTML). Max 2000 characters

        :return: The notes of this NewEstimate.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this NewEstimate.

        Plain UTF8 text. (no HTML). Max 2000 characters

        :param notes: The notes of this NewEstimate.
        :type notes: str
        """

        self._notes = notes

    @property
    def subject(self):
        """Gets the subject of this NewEstimate.

        Plain UTF8 text. (no HTML). 255 characters max

        :return: The subject of this NewEstimate.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this NewEstimate.

        Plain UTF8 text. (no HTML). 255 characters max

        :param subject: The subject of this NewEstimate.
        :type subject: str
        """

        self._subject = subject
