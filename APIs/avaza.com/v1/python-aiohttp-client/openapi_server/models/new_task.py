# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.new_tag import NewTag
from openapi_server import util


class NewTask(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_task_type_idfk: int=None, assigned_to_user_idfks: List[int]=None, date_due: datetime=None, date_start: datetime=None, description: str=None, estimated_effort: float=None, project_idfk: int=None, section_idfk: int=None, tags: List[NewTag]=None, task_priority_code: str=None, title: str=None):
        """NewTask - a model defined in OpenAPI

        :param account_task_type_idfk: The account_task_type_idfk of this NewTask.
        :param assigned_to_user_idfks: The assigned_to_user_idfks of this NewTask.
        :param date_due: The date_due of this NewTask.
        :param date_start: The date_start of this NewTask.
        :param description: The description of this NewTask.
        :param estimated_effort: The estimated_effort of this NewTask.
        :param project_idfk: The project_idfk of this NewTask.
        :param section_idfk: The section_idfk of this NewTask.
        :param tags: The tags of this NewTask.
        :param task_priority_code: The task_priority_code of this NewTask.
        :param title: The title of this NewTask.
        """
        self.openapi_types = {
            'account_task_type_idfk': int,
            'assigned_to_user_idfks': List[int],
            'date_due': datetime,
            'date_start': datetime,
            'description': str,
            'estimated_effort': float,
            'project_idfk': int,
            'section_idfk': int,
            'tags': List[NewTag],
            'task_priority_code': str,
            'title': str
        }

        self.attribute_map = {
            'account_task_type_idfk': 'AccountTaskTypeIDFK',
            'assigned_to_user_idfks': 'AssignedToUserIDFKs',
            'date_due': 'DateDue',
            'date_start': 'DateStart',
            'description': 'Description',
            'estimated_effort': 'EstimatedEffort',
            'project_idfk': 'ProjectIDFK',
            'section_idfk': 'SectionIDFK',
            'tags': 'Tags',
            'task_priority_code': 'TaskPriorityCode',
            'title': 'Title'
        }

        self._account_task_type_idfk = account_task_type_idfk
        self._assigned_to_user_idfks = assigned_to_user_idfks
        self._date_due = date_due
        self._date_start = date_start
        self._description = description
        self._estimated_effort = estimated_effort
        self._project_idfk = project_idfk
        self._section_idfk = section_idfk
        self._tags = tags
        self._task_priority_code = task_priority_code
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewTask':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewTask of this NewTask.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_task_type_idfk(self):
        """Gets the account_task_type_idfk of this NewTask.


        :return: The account_task_type_idfk of this NewTask.
        :rtype: int
        """
        return self._account_task_type_idfk

    @account_task_type_idfk.setter
    def account_task_type_idfk(self, account_task_type_idfk):
        """Sets the account_task_type_idfk of this NewTask.


        :param account_task_type_idfk: The account_task_type_idfk of this NewTask.
        :type account_task_type_idfk: int
        """

        self._account_task_type_idfk = account_task_type_idfk

    @property
    def assigned_to_user_idfks(self):
        """Gets the assigned_to_user_idfks of this NewTask.


        :return: The assigned_to_user_idfks of this NewTask.
        :rtype: List[int]
        """
        return self._assigned_to_user_idfks

    @assigned_to_user_idfks.setter
    def assigned_to_user_idfks(self, assigned_to_user_idfks):
        """Sets the assigned_to_user_idfks of this NewTask.


        :param assigned_to_user_idfks: The assigned_to_user_idfks of this NewTask.
        :type assigned_to_user_idfks: List[int]
        """

        self._assigned_to_user_idfks = assigned_to_user_idfks

    @property
    def date_due(self):
        """Gets the date_due of this NewTask.


        :return: The date_due of this NewTask.
        :rtype: datetime
        """
        return self._date_due

    @date_due.setter
    def date_due(self, date_due):
        """Sets the date_due of this NewTask.


        :param date_due: The date_due of this NewTask.
        :type date_due: datetime
        """

        self._date_due = date_due

    @property
    def date_start(self):
        """Gets the date_start of this NewTask.


        :return: The date_start of this NewTask.
        :rtype: datetime
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """Sets the date_start of this NewTask.


        :param date_start: The date_start of this NewTask.
        :type date_start: datetime
        """

        self._date_start = date_start

    @property
    def description(self):
        """Gets the description of this NewTask.


        :return: The description of this NewTask.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NewTask.


        :param description: The description of this NewTask.
        :type description: str
        """

        self._description = description

    @property
    def estimated_effort(self):
        """Gets the estimated_effort of this NewTask.

        Decimal hours

        :return: The estimated_effort of this NewTask.
        :rtype: float
        """
        return self._estimated_effort

    @estimated_effort.setter
    def estimated_effort(self, estimated_effort):
        """Sets the estimated_effort of this NewTask.

        Decimal hours

        :param estimated_effort: The estimated_effort of this NewTask.
        :type estimated_effort: float
        """

        self._estimated_effort = estimated_effort

    @property
    def project_idfk(self):
        """Gets the project_idfk of this NewTask.


        :return: The project_idfk of this NewTask.
        :rtype: int
        """
        return self._project_idfk

    @project_idfk.setter
    def project_idfk(self, project_idfk):
        """Sets the project_idfk of this NewTask.


        :param project_idfk: The project_idfk of this NewTask.
        :type project_idfk: int
        """
        if project_idfk is None:
            raise ValueError("Invalid value for `project_idfk`, must not be `None`")

        self._project_idfk = project_idfk

    @property
    def section_idfk(self):
        """Gets the section_idfk of this NewTask.


        :return: The section_idfk of this NewTask.
        :rtype: int
        """
        return self._section_idfk

    @section_idfk.setter
    def section_idfk(self, section_idfk):
        """Sets the section_idfk of this NewTask.


        :param section_idfk: The section_idfk of this NewTask.
        :type section_idfk: int
        """
        if section_idfk is None:
            raise ValueError("Invalid value for `section_idfk`, must not be `None`")

        self._section_idfk = section_idfk

    @property
    def tags(self):
        """Gets the tags of this NewTask.

        Collection of tags specifying Name and Color (Hex)

        :return: The tags of this NewTask.
        :rtype: List[NewTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this NewTask.

        Collection of tags specifying Name and Color (Hex)

        :param tags: The tags of this NewTask.
        :type tags: List[NewTag]
        """

        self._tags = tags

    @property
    def task_priority_code(self):
        """Gets the task_priority_code of this NewTask.


        :return: The task_priority_code of this NewTask.
        :rtype: str
        """
        return self._task_priority_code

    @task_priority_code.setter
    def task_priority_code(self, task_priority_code):
        """Sets the task_priority_code of this NewTask.


        :param task_priority_code: The task_priority_code of this NewTask.
        :type task_priority_code: str
        """

        self._task_priority_code = task_priority_code

    @property
    def title(self):
        """Gets the title of this NewTask.


        :return: The title of this NewTask.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this NewTask.


        :param title: The title of this NewTask.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
