# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateSubscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event: str=None, secret: str=None, target_url: str=None):
        """CreateSubscription - a model defined in OpenAPI

        :param event: The event of this CreateSubscription.
        :param secret: The secret of this CreateSubscription.
        :param target_url: The target_url of this CreateSubscription.
        """
        self.openapi_types = {
            'event': str,
            'secret': str,
            'target_url': str
        }

        self.attribute_map = {
            'event': 'event',
            'secret': 'secret',
            'target_url': 'target_url'
        }

        self._event = event
        self._secret = secret
        self._target_url = target_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSubscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSubscription of this CreateSubscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event(self):
        """Gets the event of this CreateSubscription.

        The event code to be notified about. Possible values: company_created, contact_created, invoice_created, invoice_sent, project_created, task_created

        :return: The event of this CreateSubscription.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this CreateSubscription.

        The event code to be notified about. Possible values: company_created, contact_created, invoice_created, invoice_sent, project_created, task_created

        :param event: The event of this CreateSubscription.
        :type event: str
        """
        if event is None:
            raise ValueError("Invalid value for `event`, must not be `None`")

        self._event = event

    @property
    def secret(self):
        """Gets the secret of this CreateSubscription.

        Optional Secret string (255 char max). If provided, the secret will be BASE 64 encoded and used as a basic authentication http header with webhook notifications. i.e. Authorization Basic [BASE64 of Secret]\"

        :return: The secret of this CreateSubscription.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this CreateSubscription.

        Optional Secret string (255 char max). If provided, the secret will be BASE 64 encoded and used as a basic authentication http header with webhook notifications. i.e. Authorization Basic [BASE64 of Secret]\"

        :param secret: The secret of this CreateSubscription.
        :type secret: str
        """

        self._secret = secret

    @property
    def target_url(self):
        """Gets the target_url of this CreateSubscription.

        The URL that should be notified of the event.

        :return: The target_url of this CreateSubscription.
        :rtype: str
        """
        return self._target_url

    @target_url.setter
    def target_url(self, target_url):
        """Sets the target_url of this CreateSubscription.

        The URL that should be notified of the event.

        :param target_url: The target_url of this CreateSubscription.
        :type target_url: str
        """
        if target_url is None:
            raise ValueError("Invalid value for `target_url`, must not be `None`")

        self._target_url = target_url
