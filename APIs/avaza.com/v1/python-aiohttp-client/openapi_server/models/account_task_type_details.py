# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountTaskTypeDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_task_type_id: int=None, icon: str=None, icon_type: str=None, name: str=None, is_default: bool=None):
        """AccountTaskTypeDetails - a model defined in OpenAPI

        :param account_task_type_id: The account_task_type_id of this AccountTaskTypeDetails.
        :param icon: The icon of this AccountTaskTypeDetails.
        :param icon_type: The icon_type of this AccountTaskTypeDetails.
        :param name: The name of this AccountTaskTypeDetails.
        :param is_default: The is_default of this AccountTaskTypeDetails.
        """
        self.openapi_types = {
            'account_task_type_id': int,
            'icon': str,
            'icon_type': str,
            'name': str,
            'is_default': bool
        }

        self.attribute_map = {
            'account_task_type_id': 'AccountTaskTypeID',
            'icon': 'Icon',
            'icon_type': 'IconType',
            'name': 'Name',
            'is_default': 'isDefault'
        }

        self._account_task_type_id = account_task_type_id
        self._icon = icon
        self._icon_type = icon_type
        self._name = name
        self._is_default = is_default

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountTaskTypeDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountTaskTypeDetails of this AccountTaskTypeDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_task_type_id(self):
        """Gets the account_task_type_id of this AccountTaskTypeDetails.


        :return: The account_task_type_id of this AccountTaskTypeDetails.
        :rtype: int
        """
        return self._account_task_type_id

    @account_task_type_id.setter
    def account_task_type_id(self, account_task_type_id):
        """Sets the account_task_type_id of this AccountTaskTypeDetails.


        :param account_task_type_id: The account_task_type_id of this AccountTaskTypeDetails.
        :type account_task_type_id: int
        """

        self._account_task_type_id = account_task_type_id

    @property
    def icon(self):
        """Gets the icon of this AccountTaskTypeDetails.


        :return: The icon of this AccountTaskTypeDetails.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this AccountTaskTypeDetails.


        :param icon: The icon of this AccountTaskTypeDetails.
        :type icon: str
        """

        self._icon = icon

    @property
    def icon_type(self):
        """Gets the icon_type of this AccountTaskTypeDetails.


        :return: The icon_type of this AccountTaskTypeDetails.
        :rtype: str
        """
        return self._icon_type

    @icon_type.setter
    def icon_type(self, icon_type):
        """Sets the icon_type of this AccountTaskTypeDetails.


        :param icon_type: The icon_type of this AccountTaskTypeDetails.
        :type icon_type: str
        """

        self._icon_type = icon_type

    @property
    def name(self):
        """Gets the name of this AccountTaskTypeDetails.


        :return: The name of this AccountTaskTypeDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountTaskTypeDetails.


        :param name: The name of this AccountTaskTypeDetails.
        :type name: str
        """

        self._name = name

    @property
    def is_default(self):
        """Gets the is_default of this AccountTaskTypeDetails.


        :return: The is_default of this AccountTaskTypeDetails.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this AccountTaskTypeDetails.


        :param is_default: The is_default of this AccountTaskTypeDetails.
        :type is_default: bool
        """

        self._is_default = is_default
