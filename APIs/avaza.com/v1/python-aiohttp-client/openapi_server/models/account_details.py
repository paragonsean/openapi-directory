# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_email: str=None, account_id: int=None, allow_hiding_completed_tasks_on_timesheet: bool=None, brand_primary_color: str=None, brand_primary_color_luminance: str=None, company_name: str=None, current_server_time_iso: str=None, default_currency_code: str=None, expense_approval_required: bool=None, lock_approved_expenses: bool=None, lock_approved_timesheets: bool=None, sc: str=None, subdomain: str=None, timesheet_day_of_week: int=None, timesheet_display_format_code: str=None, weekly_timesheet_reminder: bool=None, has24_hour_timesheet_format: bool=None, has_start_end_timesheets: bool=None):
        """AccountDetails - a model defined in OpenAPI

        :param account_email: The account_email of this AccountDetails.
        :param account_id: The account_id of this AccountDetails.
        :param allow_hiding_completed_tasks_on_timesheet: The allow_hiding_completed_tasks_on_timesheet of this AccountDetails.
        :param brand_primary_color: The brand_primary_color of this AccountDetails.
        :param brand_primary_color_luminance: The brand_primary_color_luminance of this AccountDetails.
        :param company_name: The company_name of this AccountDetails.
        :param current_server_time_iso: The current_server_time_iso of this AccountDetails.
        :param default_currency_code: The default_currency_code of this AccountDetails.
        :param expense_approval_required: The expense_approval_required of this AccountDetails.
        :param lock_approved_expenses: The lock_approved_expenses of this AccountDetails.
        :param lock_approved_timesheets: The lock_approved_timesheets of this AccountDetails.
        :param sc: The sc of this AccountDetails.
        :param subdomain: The subdomain of this AccountDetails.
        :param timesheet_day_of_week: The timesheet_day_of_week of this AccountDetails.
        :param timesheet_display_format_code: The timesheet_display_format_code of this AccountDetails.
        :param weekly_timesheet_reminder: The weekly_timesheet_reminder of this AccountDetails.
        :param has24_hour_timesheet_format: The has24_hour_timesheet_format of this AccountDetails.
        :param has_start_end_timesheets: The has_start_end_timesheets of this AccountDetails.
        """
        self.openapi_types = {
            'account_email': str,
            'account_id': int,
            'allow_hiding_completed_tasks_on_timesheet': bool,
            'brand_primary_color': str,
            'brand_primary_color_luminance': str,
            'company_name': str,
            'current_server_time_iso': str,
            'default_currency_code': str,
            'expense_approval_required': bool,
            'lock_approved_expenses': bool,
            'lock_approved_timesheets': bool,
            'sc': str,
            'subdomain': str,
            'timesheet_day_of_week': int,
            'timesheet_display_format_code': str,
            'weekly_timesheet_reminder': bool,
            'has24_hour_timesheet_format': bool,
            'has_start_end_timesheets': bool
        }

        self.attribute_map = {
            'account_email': 'AccountEmail',
            'account_id': 'AccountID',
            'allow_hiding_completed_tasks_on_timesheet': 'AllowHidingCompletedTasksOnTimesheet',
            'brand_primary_color': 'BrandPrimaryColor',
            'brand_primary_color_luminance': 'BrandPrimaryColorLuminance',
            'company_name': 'CompanyName',
            'current_server_time_iso': 'CurrentServerTimeISO',
            'default_currency_code': 'DefaultCurrencyCode',
            'expense_approval_required': 'ExpenseApprovalRequired',
            'lock_approved_expenses': 'LockApprovedExpenses',
            'lock_approved_timesheets': 'LockApprovedTimesheets',
            'sc': 'SC',
            'subdomain': 'Subdomain',
            'timesheet_day_of_week': 'TimesheetDayOfWeek',
            'timesheet_display_format_code': 'TimesheetDisplayFormatCode',
            'weekly_timesheet_reminder': 'WeeklyTimesheetReminder',
            'has24_hour_timesheet_format': 'has24HourTimesheetFormat',
            'has_start_end_timesheets': 'hasStartEndTimesheets'
        }

        self._account_email = account_email
        self._account_id = account_id
        self._allow_hiding_completed_tasks_on_timesheet = allow_hiding_completed_tasks_on_timesheet
        self._brand_primary_color = brand_primary_color
        self._brand_primary_color_luminance = brand_primary_color_luminance
        self._company_name = company_name
        self._current_server_time_iso = current_server_time_iso
        self._default_currency_code = default_currency_code
        self._expense_approval_required = expense_approval_required
        self._lock_approved_expenses = lock_approved_expenses
        self._lock_approved_timesheets = lock_approved_timesheets
        self._sc = sc
        self._subdomain = subdomain
        self._timesheet_day_of_week = timesheet_day_of_week
        self._timesheet_display_format_code = timesheet_display_format_code
        self._weekly_timesheet_reminder = weekly_timesheet_reminder
        self._has24_hour_timesheet_format = has24_hour_timesheet_format
        self._has_start_end_timesheets = has_start_end_timesheets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountDetails of this AccountDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_email(self):
        """Gets the account_email of this AccountDetails.


        :return: The account_email of this AccountDetails.
        :rtype: str
        """
        return self._account_email

    @account_email.setter
    def account_email(self, account_email):
        """Sets the account_email of this AccountDetails.


        :param account_email: The account_email of this AccountDetails.
        :type account_email: str
        """

        self._account_email = account_email

    @property
    def account_id(self):
        """Gets the account_id of this AccountDetails.


        :return: The account_id of this AccountDetails.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AccountDetails.


        :param account_id: The account_id of this AccountDetails.
        :type account_id: int
        """

        self._account_id = account_id

    @property
    def allow_hiding_completed_tasks_on_timesheet(self):
        """Gets the allow_hiding_completed_tasks_on_timesheet of this AccountDetails.


        :return: The allow_hiding_completed_tasks_on_timesheet of this AccountDetails.
        :rtype: bool
        """
        return self._allow_hiding_completed_tasks_on_timesheet

    @allow_hiding_completed_tasks_on_timesheet.setter
    def allow_hiding_completed_tasks_on_timesheet(self, allow_hiding_completed_tasks_on_timesheet):
        """Sets the allow_hiding_completed_tasks_on_timesheet of this AccountDetails.


        :param allow_hiding_completed_tasks_on_timesheet: The allow_hiding_completed_tasks_on_timesheet of this AccountDetails.
        :type allow_hiding_completed_tasks_on_timesheet: bool
        """

        self._allow_hiding_completed_tasks_on_timesheet = allow_hiding_completed_tasks_on_timesheet

    @property
    def brand_primary_color(self):
        """Gets the brand_primary_color of this AccountDetails.

        A custom branding color for the account. Available on paid accounts.

        :return: The brand_primary_color of this AccountDetails.
        :rtype: str
        """
        return self._brand_primary_color

    @brand_primary_color.setter
    def brand_primary_color(self, brand_primary_color):
        """Sets the brand_primary_color of this AccountDetails.

        A custom branding color for the account. Available on paid accounts.

        :param brand_primary_color: The brand_primary_color of this AccountDetails.
        :type brand_primary_color: str
        """

        self._brand_primary_color = brand_primary_color

    @property
    def brand_primary_color_luminance(self):
        """Gets the brand_primary_color_luminance of this AccountDetails.

        A determination of the luminance of the Brand Primary Color (possible values: 'Dark', 'Medium', 'Light'). This can be used to determine appropriate font colors to sit on top of the brand color.

        :return: The brand_primary_color_luminance of this AccountDetails.
        :rtype: str
        """
        return self._brand_primary_color_luminance

    @brand_primary_color_luminance.setter
    def brand_primary_color_luminance(self, brand_primary_color_luminance):
        """Sets the brand_primary_color_luminance of this AccountDetails.

        A determination of the luminance of the Brand Primary Color (possible values: 'Dark', 'Medium', 'Light'). This can be used to determine appropriate font colors to sit on top of the brand color.

        :param brand_primary_color_luminance: The brand_primary_color_luminance of this AccountDetails.
        :type brand_primary_color_luminance: str
        """

        self._brand_primary_color_luminance = brand_primary_color_luminance

    @property
    def company_name(self):
        """Gets the company_name of this AccountDetails.


        :return: The company_name of this AccountDetails.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this AccountDetails.


        :param company_name: The company_name of this AccountDetails.
        :type company_name: str
        """

        self._company_name = company_name

    @property
    def current_server_time_iso(self):
        """Gets the current_server_time_iso of this AccountDetails.

        Format: ISO \"YYYY-MM-DD HH:mm:ss.SSS\"

        :return: The current_server_time_iso of this AccountDetails.
        :rtype: str
        """
        return self._current_server_time_iso

    @current_server_time_iso.setter
    def current_server_time_iso(self, current_server_time_iso):
        """Sets the current_server_time_iso of this AccountDetails.

        Format: ISO \"YYYY-MM-DD HH:mm:ss.SSS\"

        :param current_server_time_iso: The current_server_time_iso of this AccountDetails.
        :type current_server_time_iso: str
        """

        self._current_server_time_iso = current_server_time_iso

    @property
    def default_currency_code(self):
        """Gets the default_currency_code of this AccountDetails.

        ISO 3 letter base Currency Code for the account

        :return: The default_currency_code of this AccountDetails.
        :rtype: str
        """
        return self._default_currency_code

    @default_currency_code.setter
    def default_currency_code(self, default_currency_code):
        """Sets the default_currency_code of this AccountDetails.

        ISO 3 letter base Currency Code for the account

        :param default_currency_code: The default_currency_code of this AccountDetails.
        :type default_currency_code: str
        """

        self._default_currency_code = default_currency_code

    @property
    def expense_approval_required(self):
        """Gets the expense_approval_required of this AccountDetails.

        Whether the account requires expenses be approved.

        :return: The expense_approval_required of this AccountDetails.
        :rtype: bool
        """
        return self._expense_approval_required

    @expense_approval_required.setter
    def expense_approval_required(self, expense_approval_required):
        """Sets the expense_approval_required of this AccountDetails.

        Whether the account requires expenses be approved.

        :param expense_approval_required: The expense_approval_required of this AccountDetails.
        :type expense_approval_required: bool
        """

        self._expense_approval_required = expense_approval_required

    @property
    def lock_approved_expenses(self):
        """Gets the lock_approved_expenses of this AccountDetails.

        Approved expenses get locked from subsequent editing by standard expense users.

        :return: The lock_approved_expenses of this AccountDetails.
        :rtype: bool
        """
        return self._lock_approved_expenses

    @lock_approved_expenses.setter
    def lock_approved_expenses(self, lock_approved_expenses):
        """Sets the lock_approved_expenses of this AccountDetails.

        Approved expenses get locked from subsequent editing by standard expense users.

        :param lock_approved_expenses: The lock_approved_expenses of this AccountDetails.
        :type lock_approved_expenses: bool
        """

        self._lock_approved_expenses = lock_approved_expenses

    @property
    def lock_approved_timesheets(self):
        """Gets the lock_approved_timesheets of this AccountDetails.


        :return: The lock_approved_timesheets of this AccountDetails.
        :rtype: bool
        """
        return self._lock_approved_timesheets

    @lock_approved_timesheets.setter
    def lock_approved_timesheets(self, lock_approved_timesheets):
        """Sets the lock_approved_timesheets of this AccountDetails.


        :param lock_approved_timesheets: The lock_approved_timesheets of this AccountDetails.
        :type lock_approved_timesheets: bool
        """

        self._lock_approved_timesheets = lock_approved_timesheets

    @property
    def sc(self):
        """Gets the sc of this AccountDetails.


        :return: The sc of this AccountDetails.
        :rtype: str
        """
        return self._sc

    @sc.setter
    def sc(self, sc):
        """Sets the sc of this AccountDetails.


        :param sc: The sc of this AccountDetails.
        :type sc: str
        """

        self._sc = sc

    @property
    def subdomain(self):
        """Gets the subdomain of this AccountDetails.


        :return: The subdomain of this AccountDetails.
        :rtype: str
        """
        return self._subdomain

    @subdomain.setter
    def subdomain(self, subdomain):
        """Sets the subdomain of this AccountDetails.


        :param subdomain: The subdomain of this AccountDetails.
        :type subdomain: str
        """

        self._subdomain = subdomain

    @property
    def timesheet_day_of_week(self):
        """Gets the timesheet_day_of_week of this AccountDetails.


        :return: The timesheet_day_of_week of this AccountDetails.
        :rtype: int
        """
        return self._timesheet_day_of_week

    @timesheet_day_of_week.setter
    def timesheet_day_of_week(self, timesheet_day_of_week):
        """Sets the timesheet_day_of_week of this AccountDetails.


        :param timesheet_day_of_week: The timesheet_day_of_week of this AccountDetails.
        :type timesheet_day_of_week: int
        """

        self._timesheet_day_of_week = timesheet_day_of_week

    @property
    def timesheet_display_format_code(self):
        """Gets the timesheet_display_format_code of this AccountDetails.


        :return: The timesheet_display_format_code of this AccountDetails.
        :rtype: str
        """
        return self._timesheet_display_format_code

    @timesheet_display_format_code.setter
    def timesheet_display_format_code(self, timesheet_display_format_code):
        """Sets the timesheet_display_format_code of this AccountDetails.


        :param timesheet_display_format_code: The timesheet_display_format_code of this AccountDetails.
        :type timesheet_display_format_code: str
        """

        self._timesheet_display_format_code = timesheet_display_format_code

    @property
    def weekly_timesheet_reminder(self):
        """Gets the weekly_timesheet_reminder of this AccountDetails.


        :return: The weekly_timesheet_reminder of this AccountDetails.
        :rtype: bool
        """
        return self._weekly_timesheet_reminder

    @weekly_timesheet_reminder.setter
    def weekly_timesheet_reminder(self, weekly_timesheet_reminder):
        """Sets the weekly_timesheet_reminder of this AccountDetails.


        :param weekly_timesheet_reminder: The weekly_timesheet_reminder of this AccountDetails.
        :type weekly_timesheet_reminder: bool
        """

        self._weekly_timesheet_reminder = weekly_timesheet_reminder

    @property
    def has24_hour_timesheet_format(self):
        """Gets the has24_hour_timesheet_format of this AccountDetails.


        :return: The has24_hour_timesheet_format of this AccountDetails.
        :rtype: bool
        """
        return self._has24_hour_timesheet_format

    @has24_hour_timesheet_format.setter
    def has24_hour_timesheet_format(self, has24_hour_timesheet_format):
        """Sets the has24_hour_timesheet_format of this AccountDetails.


        :param has24_hour_timesheet_format: The has24_hour_timesheet_format of this AccountDetails.
        :type has24_hour_timesheet_format: bool
        """

        self._has24_hour_timesheet_format = has24_hour_timesheet_format

    @property
    def has_start_end_timesheets(self):
        """Gets the has_start_end_timesheets of this AccountDetails.


        :return: The has_start_end_timesheets of this AccountDetails.
        :rtype: bool
        """
        return self._has_start_end_timesheets

    @has_start_end_timesheets.setter
    def has_start_end_timesheets(self, has_start_end_timesheets):
        """Sets the has_start_end_timesheets of this AccountDetails.


        :param has_start_end_timesheets: The has_start_end_timesheets of this AccountDetails.
        :type has_start_end_timesheets: bool
        """

        self._has_start_end_timesheets = has_start_end_timesheets
