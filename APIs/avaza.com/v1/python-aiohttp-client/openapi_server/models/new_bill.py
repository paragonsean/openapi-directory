# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.new_bill_line_item import NewBillLineItem
from openapi_server import util


class NewBill(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bill_number: str=None, bill_template_idfk: int=None, company_idfk: int=None, company_name: str=None, currency_code: str=None, date_issued: datetime=None, due_date: datetime=None, email: str=None, exchange_rate: float=None, firstname: str=None, lastname: str=None, line_items: List[NewBillLineItem]=None, notes: str=None, payment_terms: int=None, subject: str=None, supplier_po_number: str=None, transaction_prefix: str=None, transaction_tax_config_code: str=None):
        """NewBill - a model defined in OpenAPI

        :param bill_number: The bill_number of this NewBill.
        :param bill_template_idfk: The bill_template_idfk of this NewBill.
        :param company_idfk: The company_idfk of this NewBill.
        :param company_name: The company_name of this NewBill.
        :param currency_code: The currency_code of this NewBill.
        :param date_issued: The date_issued of this NewBill.
        :param due_date: The due_date of this NewBill.
        :param email: The email of this NewBill.
        :param exchange_rate: The exchange_rate of this NewBill.
        :param firstname: The firstname of this NewBill.
        :param lastname: The lastname of this NewBill.
        :param line_items: The line_items of this NewBill.
        :param notes: The notes of this NewBill.
        :param payment_terms: The payment_terms of this NewBill.
        :param subject: The subject of this NewBill.
        :param supplier_po_number: The supplier_po_number of this NewBill.
        :param transaction_prefix: The transaction_prefix of this NewBill.
        :param transaction_tax_config_code: The transaction_tax_config_code of this NewBill.
        """
        self.openapi_types = {
            'bill_number': str,
            'bill_template_idfk': int,
            'company_idfk': int,
            'company_name': str,
            'currency_code': str,
            'date_issued': datetime,
            'due_date': datetime,
            'email': str,
            'exchange_rate': float,
            'firstname': str,
            'lastname': str,
            'line_items': List[NewBillLineItem],
            'notes': str,
            'payment_terms': int,
            'subject': str,
            'supplier_po_number': str,
            'transaction_prefix': str,
            'transaction_tax_config_code': str
        }

        self.attribute_map = {
            'bill_number': 'BillNumber',
            'bill_template_idfk': 'BillTemplateIDFK',
            'company_idfk': 'CompanyIDFK',
            'company_name': 'CompanyName',
            'currency_code': 'CurrencyCode',
            'date_issued': 'DateIssued',
            'due_date': 'DueDate',
            'email': 'Email',
            'exchange_rate': 'ExchangeRate',
            'firstname': 'Firstname',
            'lastname': 'Lastname',
            'line_items': 'LineItems',
            'notes': 'Notes',
            'payment_terms': 'PaymentTerms',
            'subject': 'Subject',
            'supplier_po_number': 'SupplierPONumber',
            'transaction_prefix': 'TransactionPrefix',
            'transaction_tax_config_code': 'TransactionTaxConfigCode'
        }

        self._bill_number = bill_number
        self._bill_template_idfk = bill_template_idfk
        self._company_idfk = company_idfk
        self._company_name = company_name
        self._currency_code = currency_code
        self._date_issued = date_issued
        self._due_date = due_date
        self._email = email
        self._exchange_rate = exchange_rate
        self._firstname = firstname
        self._lastname = lastname
        self._line_items = line_items
        self._notes = notes
        self._payment_terms = payment_terms
        self._subject = subject
        self._supplier_po_number = supplier_po_number
        self._transaction_prefix = transaction_prefix
        self._transaction_tax_config_code = transaction_tax_config_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewBill':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewBill of this NewBill.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bill_number(self):
        """Gets the bill_number of this NewBill.

        Pass any string. If left blank it will use the next number in the auto incrementing sequence. If an integer is passed then the largest integer will be use as the seed to auto generate the next invoice number in the sequence.

        :return: The bill_number of this NewBill.
        :rtype: str
        """
        return self._bill_number

    @bill_number.setter
    def bill_number(self, bill_number):
        """Sets the bill_number of this NewBill.

        Pass any string. If left blank it will use the next number in the auto incrementing sequence. If an integer is passed then the largest integer will be use as the seed to auto generate the next invoice number in the sequence.

        :param bill_number: The bill_number of this NewBill.
        :type bill_number: str
        """

        self._bill_number = bill_number

    @property
    def bill_template_idfk(self):
        """Gets the bill_template_idfk of this NewBill.

        If left blank the account default invoice template will be used.

        :return: The bill_template_idfk of this NewBill.
        :rtype: int
        """
        return self._bill_template_idfk

    @bill_template_idfk.setter
    def bill_template_idfk(self, bill_template_idfk):
        """Sets the bill_template_idfk of this NewBill.

        If left blank the account default invoice template will be used.

        :param bill_template_idfk: The bill_template_idfk of this NewBill.
        :type bill_template_idfk: int
        """

        self._bill_template_idfk = bill_template_idfk

    @property
    def company_idfk(self):
        """Gets the company_idfk of this NewBill.

        If left blank then you must specify Company Name.

        :return: The company_idfk of this NewBill.
        :rtype: int
        """
        return self._company_idfk

    @company_idfk.setter
    def company_idfk(self, company_idfk):
        """Sets the company_idfk of this NewBill.

        If left blank then you must specify Company Name.

        :param company_idfk: The company_idfk of this NewBill.
        :type company_idfk: int
        """

        self._company_idfk = company_idfk

    @property
    def company_name(self):
        """Gets the company_name of this NewBill.

        If left blank then you must specify Company ID. Specified Name will be used to match existing customer record. If not matched then it will be used to create a new customer. First Name, Last Name and Email will only be used if it is a new company. If the Company name appears multiple times we will check the email address to find a matching company. If email address doesn't identify a matching company then the invoice creation will be rejected.

        :return: The company_name of this NewBill.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this NewBill.

        If left blank then you must specify Company ID. Specified Name will be used to match existing customer record. If not matched then it will be used to create a new customer. First Name, Last Name and Email will only be used if it is a new company. If the Company name appears multiple times we will check the email address to find a matching company. If email address doesn't identify a matching company then the invoice creation will be rejected.

        :param company_name: The company_name of this NewBill.
        :type company_name: str
        """

        self._company_name = company_name

    @property
    def currency_code(self):
        """Gets the currency_code of this NewBill.

        Expects ISO Standard 3 character currency code. If left blank the currency will default to account's currency in general setting. For existing companies this field will be ignored and the invoice will use the currency of the customer. For new customers if the currency is not specified then account currency will be used otherwise the specified currency will be used.

        :return: The currency_code of this NewBill.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this NewBill.

        Expects ISO Standard 3 character currency code. If left blank the currency will default to account's currency in general setting. For existing companies this field will be ignored and the invoice will use the currency of the customer. For new customers if the currency is not specified then account currency will be used otherwise the specified currency will be used.

        :param currency_code: The currency_code of this NewBill.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def date_issued(self):
        """Gets the date_issued of this NewBill.

        If not specified it will use today's date. The date should be specified as local date.

        :return: The date_issued of this NewBill.
        :rtype: datetime
        """
        return self._date_issued

    @date_issued.setter
    def date_issued(self, date_issued):
        """Sets the date_issued of this NewBill.

        If not specified it will use today's date. The date should be specified as local date.

        :param date_issued: The date_issued of this NewBill.
        :type date_issued: datetime
        """

        self._date_issued = date_issued

    @property
    def due_date(self):
        """Gets the due_date of this NewBill.

        It will be auto calculated based on the payment term and issue date. Due Date must be greater than or equal to Issue Date. If the Due Date is specified then Payment Terms will be set to -1 (Custom)

        :return: The due_date of this NewBill.
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this NewBill.

        It will be auto calculated based on the payment term and issue date. Due Date must be greater than or equal to Issue Date. If the Due Date is specified then Payment Terms will be set to -1 (Custom)

        :param due_date: The due_date of this NewBill.
        :type due_date: datetime
        """

        self._due_date = due_date

    @property
    def email(self):
        """Gets the email of this NewBill.

        Specified value will be used to create a new customer contact only if a new customer is being created.

        :return: The email of this NewBill.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this NewBill.

        Specified value will be used to create a new customer contact only if a new customer is being created.

        :param email: The email of this NewBill.
        :type email: str
        """

        self._email = email

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this NewBill.

        Exchange rate is only valid for invoices in currency other than default account currency. If not specified it will get the market rate based on the Date Issued.

        :return: The exchange_rate of this NewBill.
        :rtype: float
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this NewBill.

        Exchange rate is only valid for invoices in currency other than default account currency. If not specified it will get the market rate based on the Date Issued.

        :param exchange_rate: The exchange_rate of this NewBill.
        :type exchange_rate: float
        """

        self._exchange_rate = exchange_rate

    @property
    def firstname(self):
        """Gets the firstname of this NewBill.

        Specified value will be used to create a new customer contact only if a new customer is being created.

        :return: The firstname of this NewBill.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this NewBill.

        Specified value will be used to create a new customer contact only if a new customer is being created.

        :param firstname: The firstname of this NewBill.
        :type firstname: str
        """

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this NewBill.

        Specified value will be used to create a new customer contact only if a new customer is being created.

        :return: The lastname of this NewBill.
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this NewBill.

        Specified value will be used to create a new customer contact only if a new customer is being created.

        :param lastname: The lastname of this NewBill.
        :type lastname: str
        """

        self._lastname = lastname

    @property
    def line_items(self):
        """Gets the line_items of this NewBill.


        :return: The line_items of this NewBill.
        :rtype: List[NewBillLineItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this NewBill.


        :param line_items: The line_items of this NewBill.
        :type line_items: List[NewBillLineItem]
        """

        self._line_items = line_items

    @property
    def notes(self):
        """Gets the notes of this NewBill.

        Plain UTF8 text. (no HTML). Max 2000 characters

        :return: The notes of this NewBill.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this NewBill.

        Plain UTF8 text. (no HTML). Max 2000 characters

        :param notes: The notes of this NewBill.
        :type notes: str
        """

        self._notes = notes

    @property
    def payment_terms(self):
        """Gets the payment_terms of this NewBill.

         \"If left blank we will set it to customer default. If specified then it must match one of your existing pre configured payment term periods. Your account starts with:  (-1 --- Custom, 0 --- Upon Receipt, 7 --- 7 Days, 15 --- 15 Days, 30 --- 30 Days, 45 --- 45 Days, 60 --- 60 Days)

        :return: The payment_terms of this NewBill.
        :rtype: int
        """
        return self._payment_terms

    @payment_terms.setter
    def payment_terms(self, payment_terms):
        """Sets the payment_terms of this NewBill.

         \"If left blank we will set it to customer default. If specified then it must match one of your existing pre configured payment term periods. Your account starts with:  (-1 --- Custom, 0 --- Upon Receipt, 7 --- 7 Days, 15 --- 15 Days, 30 --- 30 Days, 45 --- 45 Days, 60 --- 60 Days)

        :param payment_terms: The payment_terms of this NewBill.
        :type payment_terms: int
        """

        self._payment_terms = payment_terms

    @property
    def subject(self):
        """Gets the subject of this NewBill.

        Plain UTF8 text. (no HTML). 255 characters max

        :return: The subject of this NewBill.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this NewBill.

        Plain UTF8 text. (no HTML). 255 characters max

        :param subject: The subject of this NewBill.
        :type subject: str
        """

        self._subject = subject

    @property
    def supplier_po_number(self):
        """Gets the supplier_po_number of this NewBill.

        Plain UTF8 text. 100 characters max

        :return: The supplier_po_number of this NewBill.
        :rtype: str
        """
        return self._supplier_po_number

    @supplier_po_number.setter
    def supplier_po_number(self, supplier_po_number):
        """Sets the supplier_po_number of this NewBill.

        Plain UTF8 text. 100 characters max

        :param supplier_po_number: The supplier_po_number of this NewBill.
        :type supplier_po_number: str
        """

        self._supplier_po_number = supplier_po_number

    @property
    def transaction_prefix(self):
        """Gets the transaction_prefix of this NewBill.

        A prefix for the Invoice number. e.g. 'INV'. If left blank it will be set to the account default. Max length 20 characters.

        :return: The transaction_prefix of this NewBill.
        :rtype: str
        """
        return self._transaction_prefix

    @transaction_prefix.setter
    def transaction_prefix(self, transaction_prefix):
        """Sets the transaction_prefix of this NewBill.

        A prefix for the Invoice number. e.g. 'INV'. If left blank it will be set to the account default. Max length 20 characters.

        :param transaction_prefix: The transaction_prefix of this NewBill.
        :type transaction_prefix: str
        """

        self._transaction_prefix = transaction_prefix

    @property
    def transaction_tax_config_code(self):
        """Gets the transaction_tax_config_code of this NewBill.

        Possible values are (EX --- Tax Exclusive, INC --- Tax Inclusive). If left empty it will use the account default.

        :return: The transaction_tax_config_code of this NewBill.
        :rtype: str
        """
        return self._transaction_tax_config_code

    @transaction_tax_config_code.setter
    def transaction_tax_config_code(self, transaction_tax_config_code):
        """Sets the transaction_tax_config_code of this NewBill.

        Possible values are (EX --- Tax Exclusive, INC --- Tax Inclusive). If left empty it will use the account default.

        :param transaction_tax_config_code: The transaction_tax_config_code of this NewBill.
        :type transaction_tax_config_code: str
        """

        self._transaction_tax_config_code = transaction_tax_config_code
