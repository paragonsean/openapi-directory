# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Currency(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency_code: str=None, decimal_places: int=None, name: str=None, symbol: str=None, symbol2: str=None):
        """Currency - a model defined in OpenAPI

        :param currency_code: The currency_code of this Currency.
        :param decimal_places: The decimal_places of this Currency.
        :param name: The name of this Currency.
        :param symbol: The symbol of this Currency.
        :param symbol2: The symbol2 of this Currency.
        """
        self.openapi_types = {
            'currency_code': str,
            'decimal_places': int,
            'name': str,
            'symbol': str,
            'symbol2': str
        }

        self.attribute_map = {
            'currency_code': 'CurrencyCode',
            'decimal_places': 'DecimalPlaces',
            'name': 'Name',
            'symbol': 'Symbol',
            'symbol2': 'Symbol2'
        }

        self._currency_code = currency_code
        self._decimal_places = decimal_places
        self._name = name
        self._symbol = symbol
        self._symbol2 = symbol2

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Currency':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Currency of this Currency.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency_code(self):
        """Gets the currency_code of this Currency.


        :return: The currency_code of this Currency.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Currency.


        :param currency_code: The currency_code of this Currency.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def decimal_places(self):
        """Gets the decimal_places of this Currency.


        :return: The decimal_places of this Currency.
        :rtype: int
        """
        return self._decimal_places

    @decimal_places.setter
    def decimal_places(self, decimal_places):
        """Sets the decimal_places of this Currency.


        :param decimal_places: The decimal_places of this Currency.
        :type decimal_places: int
        """

        self._decimal_places = decimal_places

    @property
    def name(self):
        """Gets the name of this Currency.


        :return: The name of this Currency.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Currency.


        :param name: The name of this Currency.
        :type name: str
        """

        self._name = name

    @property
    def symbol(self):
        """Gets the symbol of this Currency.


        :return: The symbol of this Currency.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Currency.


        :param symbol: The symbol of this Currency.
        :type symbol: str
        """

        self._symbol = symbol

    @property
    def symbol2(self):
        """Gets the symbol2 of this Currency.


        :return: The symbol2 of this Currency.
        :rtype: str
        """
        return self._symbol2

    @symbol2.setter
    def symbol2(self, symbol2):
        """Sets the symbol2 of this Currency.


        :param symbol2: The symbol2 of this Currency.
        :type symbol2: str
        """

        self._symbol2 = symbol2
