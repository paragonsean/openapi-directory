# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NewExpense(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, currency_code: str=None, customer_idfk: int=None, customer_name: str=None, exchange_rate: float=None, expense_category_idfk: int=None, expense_category_name: str=None, expense_date: datetime=None, expense_payment_method_idfk: int=None, file_attachment_ids: List[int]=None, group_trip_name: str=None, merchant: str=None, merchant_tax_number: str=None, notes: str=None, project_idfk: int=None, project_name: str=None, quantity: float=None, task_idfk: int=None, tax_idfk: int=None, tax_name: str=None, transaction_tax_config_code: str=None, user_email: str=None, user_idfk: int=None, verify_and_save: bool=None, is_chargeable: bool=None, is_reimbursable: bool=None):
        """NewExpense - a model defined in OpenAPI

        :param amount: The amount of this NewExpense.
        :param currency_code: The currency_code of this NewExpense.
        :param customer_idfk: The customer_idfk of this NewExpense.
        :param customer_name: The customer_name of this NewExpense.
        :param exchange_rate: The exchange_rate of this NewExpense.
        :param expense_category_idfk: The expense_category_idfk of this NewExpense.
        :param expense_category_name: The expense_category_name of this NewExpense.
        :param expense_date: The expense_date of this NewExpense.
        :param expense_payment_method_idfk: The expense_payment_method_idfk of this NewExpense.
        :param file_attachment_ids: The file_attachment_ids of this NewExpense.
        :param group_trip_name: The group_trip_name of this NewExpense.
        :param merchant: The merchant of this NewExpense.
        :param merchant_tax_number: The merchant_tax_number of this NewExpense.
        :param notes: The notes of this NewExpense.
        :param project_idfk: The project_idfk of this NewExpense.
        :param project_name: The project_name of this NewExpense.
        :param quantity: The quantity of this NewExpense.
        :param task_idfk: The task_idfk of this NewExpense.
        :param tax_idfk: The tax_idfk of this NewExpense.
        :param tax_name: The tax_name of this NewExpense.
        :param transaction_tax_config_code: The transaction_tax_config_code of this NewExpense.
        :param user_email: The user_email of this NewExpense.
        :param user_idfk: The user_idfk of this NewExpense.
        :param verify_and_save: The verify_and_save of this NewExpense.
        :param is_chargeable: The is_chargeable of this NewExpense.
        :param is_reimbursable: The is_reimbursable of this NewExpense.
        """
        self.openapi_types = {
            'amount': float,
            'currency_code': str,
            'customer_idfk': int,
            'customer_name': str,
            'exchange_rate': float,
            'expense_category_idfk': int,
            'expense_category_name': str,
            'expense_date': datetime,
            'expense_payment_method_idfk': int,
            'file_attachment_ids': List[int],
            'group_trip_name': str,
            'merchant': str,
            'merchant_tax_number': str,
            'notes': str,
            'project_idfk': int,
            'project_name': str,
            'quantity': float,
            'task_idfk': int,
            'tax_idfk': int,
            'tax_name': str,
            'transaction_tax_config_code': str,
            'user_email': str,
            'user_idfk': int,
            'verify_and_save': bool,
            'is_chargeable': bool,
            'is_reimbursable': bool
        }

        self.attribute_map = {
            'amount': 'Amount',
            'currency_code': 'CurrencyCode',
            'customer_idfk': 'CustomerIDFK',
            'customer_name': 'CustomerName',
            'exchange_rate': 'ExchangeRate',
            'expense_category_idfk': 'ExpenseCategoryIDFK',
            'expense_category_name': 'ExpenseCategoryName',
            'expense_date': 'ExpenseDate',
            'expense_payment_method_idfk': 'ExpensePaymentMethodIDFK',
            'file_attachment_ids': 'FileAttachmentIDs',
            'group_trip_name': 'GroupTripName',
            'merchant': 'Merchant',
            'merchant_tax_number': 'MerchantTaxNumber',
            'notes': 'Notes',
            'project_idfk': 'ProjectIDFK',
            'project_name': 'ProjectName',
            'quantity': 'Quantity',
            'task_idfk': 'TaskIDFK',
            'tax_idfk': 'TaxIDFK',
            'tax_name': 'TaxName',
            'transaction_tax_config_code': 'TransactionTaxConfigCode',
            'user_email': 'UserEmail',
            'user_idfk': 'UserIDFK',
            'verify_and_save': 'VerifyAndSave',
            'is_chargeable': 'isChargeable',
            'is_reimbursable': 'isReimbursable'
        }

        self._amount = amount
        self._currency_code = currency_code
        self._customer_idfk = customer_idfk
        self._customer_name = customer_name
        self._exchange_rate = exchange_rate
        self._expense_category_idfk = expense_category_idfk
        self._expense_category_name = expense_category_name
        self._expense_date = expense_date
        self._expense_payment_method_idfk = expense_payment_method_idfk
        self._file_attachment_ids = file_attachment_ids
        self._group_trip_name = group_trip_name
        self._merchant = merchant
        self._merchant_tax_number = merchant_tax_number
        self._notes = notes
        self._project_idfk = project_idfk
        self._project_name = project_name
        self._quantity = quantity
        self._task_idfk = task_idfk
        self._tax_idfk = tax_idfk
        self._tax_name = tax_name
        self._transaction_tax_config_code = transaction_tax_config_code
        self._user_email = user_email
        self._user_idfk = user_idfk
        self._verify_and_save = verify_and_save
        self._is_chargeable = is_chargeable
        self._is_reimbursable = is_reimbursable

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewExpense':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewExpense of this NewExpense.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this NewExpense.

        Expense Amount (Required). Must be &gt;= 0

        :return: The amount of this NewExpense.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this NewExpense.

        Expense Amount (Required). Must be &gt;= 0

        :param amount: The amount of this NewExpense.
        :type amount: float
        """

        self._amount = amount

    @property
    def currency_code(self):
        """Gets the currency_code of this NewExpense.

        A 3-letter ISO CurrencyCode for the expense currency. (e.g. USD). If not provided, defaults to the Account base currency.

        :return: The currency_code of this NewExpense.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this NewExpense.

        A 3-letter ISO CurrencyCode for the expense currency. (e.g. USD). If not provided, defaults to the Account base currency.

        :param currency_code: The currency_code of this NewExpense.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def customer_idfk(self):
        """Gets the customer_idfk of this NewExpense.

        The Avaza Customer ID to associate the Expense with. Either this field or CustomerName can be provided.

        :return: The customer_idfk of this NewExpense.
        :rtype: int
        """
        return self._customer_idfk

    @customer_idfk.setter
    def customer_idfk(self, customer_idfk):
        """Sets the customer_idfk of this NewExpense.

        The Avaza Customer ID to associate the Expense with. Either this field or CustomerName can be provided.

        :param customer_idfk: The customer_idfk of this NewExpense.
        :type customer_idfk: int
        """

        self._customer_idfk = customer_idfk

    @property
    def customer_name(self):
        """Gets the customer_name of this NewExpense.

        The name of an existing customer in Avaza. Must be an exact (case insensitive) match.

        :return: The customer_name of this NewExpense.
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """Sets the customer_name of this NewExpense.

        The name of an existing customer in Avaza. Must be an exact (case insensitive) match.

        :param customer_name: The customer_name of this NewExpense.
        :type customer_name: str
        """

        self._customer_name = customer_name

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this NewExpense.

        Optional (Only relevant if the expense currency is different to your account currency. If not provided we will look up the market exchange rate for you based on the expense date.) Exchange Rate = Expense Currency Amount / Base Currency Amount (e.g. if Expense currency is in AUD, and Base Currency is in USD, Exchange Rate = AUD $140 / USD $100 = 1.4)

        :return: The exchange_rate of this NewExpense.
        :rtype: float
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this NewExpense.

        Optional (Only relevant if the expense currency is different to your account currency. If not provided we will look up the market exchange rate for you based on the expense date.) Exchange Rate = Expense Currency Amount / Base Currency Amount (e.g. if Expense currency is in AUD, and Base Currency is in USD, Exchange Rate = AUD $140 / USD $100 = 1.4)

        :param exchange_rate: The exchange_rate of this NewExpense.
        :type exchange_rate: float
        """

        self._exchange_rate = exchange_rate

    @property
    def expense_category_idfk(self):
        """Gets the expense_category_idfk of this NewExpense.

        The expense category to link the Expense to. If not provided, ExpenseCategoryName must be provided

        :return: The expense_category_idfk of this NewExpense.
        :rtype: int
        """
        return self._expense_category_idfk

    @expense_category_idfk.setter
    def expense_category_idfk(self, expense_category_idfk):
        """Sets the expense_category_idfk of this NewExpense.

        The expense category to link the Expense to. If not provided, ExpenseCategoryName must be provided

        :param expense_category_idfk: The expense_category_idfk of this NewExpense.
        :type expense_category_idfk: int
        """

        self._expense_category_idfk = expense_category_idfk

    @property
    def expense_category_name(self):
        """Gets the expense_category_name of this NewExpense.

        Must match an existing expense category name otherwise a new category will be created. If left blank Expense Category ID must be provided.

        :return: The expense_category_name of this NewExpense.
        :rtype: str
        """
        return self._expense_category_name

    @expense_category_name.setter
    def expense_category_name(self, expense_category_name):
        """Sets the expense_category_name of this NewExpense.

        Must match an existing expense category name otherwise a new category will be created. If left blank Expense Category ID must be provided.

        :param expense_category_name: The expense_category_name of this NewExpense.
        :type expense_category_name: str
        """

        self._expense_category_name = expense_category_name

    @property
    def expense_date(self):
        """Gets the expense_date of this NewExpense.

        The date of the expense entry (Required)

        :return: The expense_date of this NewExpense.
        :rtype: datetime
        """
        return self._expense_date

    @expense_date.setter
    def expense_date(self, expense_date):
        """Sets the expense_date of this NewExpense.

        The date of the expense entry (Required)

        :param expense_date: The expense_date of this NewExpense.
        :type expense_date: datetime
        """

        self._expense_date = expense_date

    @property
    def expense_payment_method_idfk(self):
        """Gets the expense_payment_method_idfk of this NewExpense.

        (Optional) ID of Expense Payment Method.

        :return: The expense_payment_method_idfk of this NewExpense.
        :rtype: int
        """
        return self._expense_payment_method_idfk

    @expense_payment_method_idfk.setter
    def expense_payment_method_idfk(self, expense_payment_method_idfk):
        """Sets the expense_payment_method_idfk of this NewExpense.

        (Optional) ID of Expense Payment Method.

        :param expense_payment_method_idfk: The expense_payment_method_idfk of this NewExpense.
        :type expense_payment_method_idfk: int
        """

        self._expense_payment_method_idfk = expense_payment_method_idfk

    @property
    def file_attachment_ids(self):
        """Gets the file_attachment_ids of this NewExpense.

        Array of File Attachment IDs to associate with this expense. The files need to have already been uploaded. Currently only accepts a single file.

        :return: The file_attachment_ids of this NewExpense.
        :rtype: List[int]
        """
        return self._file_attachment_ids

    @file_attachment_ids.setter
    def file_attachment_ids(self, file_attachment_ids):
        """Sets the file_attachment_ids of this NewExpense.

        Array of File Attachment IDs to associate with this expense. The files need to have already been uploaded. Currently only accepts a single file.

        :param file_attachment_ids: The file_attachment_ids of this NewExpense.
        :type file_attachment_ids: List[int]
        """

        self._file_attachment_ids = file_attachment_ids

    @property
    def group_trip_name(self):
        """Gets the group_trip_name of this NewExpense.

        Links the expense to a Grouping/Trip report. If no matching name found, creates a new Group/Trip Report name.

        :return: The group_trip_name of this NewExpense.
        :rtype: str
        """
        return self._group_trip_name

    @group_trip_name.setter
    def group_trip_name(self, group_trip_name):
        """Sets the group_trip_name of this NewExpense.

        Links the expense to a Grouping/Trip report. If no matching name found, creates a new Group/Trip Report name.

        :param group_trip_name: The group_trip_name of this NewExpense.
        :type group_trip_name: str
        """

        self._group_trip_name = group_trip_name

    @property
    def merchant(self):
        """Gets the merchant of this NewExpense.

        The name of the merchant.

        :return: The merchant of this NewExpense.
        :rtype: str
        """
        return self._merchant

    @merchant.setter
    def merchant(self, merchant):
        """Sets the merchant of this NewExpense.

        The name of the merchant.

        :param merchant: The merchant of this NewExpense.
        :type merchant: str
        """

        self._merchant = merchant

    @property
    def merchant_tax_number(self):
        """Gets the merchant_tax_number of this NewExpense.

        A Tax number identifier for the merchant.

        :return: The merchant_tax_number of this NewExpense.
        :rtype: str
        """
        return self._merchant_tax_number

    @merchant_tax_number.setter
    def merchant_tax_number(self, merchant_tax_number):
        """Sets the merchant_tax_number of this NewExpense.

        A Tax number identifier for the merchant.

        :param merchant_tax_number: The merchant_tax_number of this NewExpense.
        :type merchant_tax_number: str
        """

        self._merchant_tax_number = merchant_tax_number

    @property
    def notes(self):
        """Gets the notes of this NewExpense.

        Expense Notes

        :return: The notes of this NewExpense.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this NewExpense.

        Expense Notes

        :param notes: The notes of this NewExpense.
        :type notes: str
        """

        self._notes = notes

    @property
    def project_idfk(self):
        """Gets the project_idfk of this NewExpense.

        The Avaza project ID to associate the Expense with.

        :return: The project_idfk of this NewExpense.
        :rtype: int
        """
        return self._project_idfk

    @project_idfk.setter
    def project_idfk(self, project_idfk):
        """Sets the project_idfk of this NewExpense.

        The Avaza project ID to associate the Expense with.

        :param project_idfk: The project_idfk of this NewExpense.
        :type project_idfk: int
        """

        self._project_idfk = project_idfk

    @property
    def project_name(self):
        """Gets the project_name of this NewExpense.

        Can work for matching an expense to a project, but only if it's an exact match for a single project under the customer.

        :return: The project_name of this NewExpense.
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this NewExpense.

        Can work for matching an expense to a project, but only if it's an exact match for a single project under the customer.

        :param project_name: The project_name of this NewExpense.
        :type project_name: str
        """

        self._project_name = project_name

    @property
    def quantity(self):
        """Gets the quantity of this NewExpense.

        Conditional - available for expenses that are assigned a unit priced based expense category. e.g Mileage

        :return: The quantity of this NewExpense.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this NewExpense.

        Conditional - available for expenses that are assigned a unit priced based expense category. e.g Mileage

        :param quantity: The quantity of this NewExpense.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def task_idfk(self):
        """Gets the task_idfk of this NewExpense.

        (optional) TaskID of a Task to link the new Expense to. A Customer and Project must be provided also.

        :return: The task_idfk of this NewExpense.
        :rtype: int
        """
        return self._task_idfk

    @task_idfk.setter
    def task_idfk(self, task_idfk):
        """Sets the task_idfk of this NewExpense.

        (optional) TaskID of a Task to link the new Expense to. A Customer and Project must be provided also.

        :param task_idfk: The task_idfk of this NewExpense.
        :type task_idfk: int
        """

        self._task_idfk = task_idfk

    @property
    def tax_idfk(self):
        """Gets the tax_idfk of this NewExpense.

        Avaza Tax ID the expense belongs to. If left blank then Tax Name must be provided.

        :return: The tax_idfk of this NewExpense.
        :rtype: int
        """
        return self._tax_idfk

    @tax_idfk.setter
    def tax_idfk(self, tax_idfk):
        """Sets the tax_idfk of this NewExpense.

        Avaza Tax ID the expense belongs to. If left blank then Tax Name must be provided.

        :param tax_idfk: The tax_idfk of this NewExpense.
        :type tax_idfk: int
        """

        self._tax_idfk = tax_idfk

    @property
    def tax_name(self):
        """Gets the tax_name of this NewExpense.

        Must exactly match an existing Tax Name that you have configured in Avaza Tax settings. If left blank then Tax ID must be provided.

        :return: The tax_name of this NewExpense.
        :rtype: str
        """
        return self._tax_name

    @tax_name.setter
    def tax_name(self, tax_name):
        """Sets the tax_name of this NewExpense.

        Must exactly match an existing Tax Name that you have configured in Avaza Tax settings. If left blank then Tax ID must be provided.

        :param tax_name: The tax_name of this NewExpense.
        :type tax_name: str
        """

        self._tax_name = tax_name

    @property
    def transaction_tax_config_code(self):
        """Gets the transaction_tax_config_code of this NewExpense.

        Optional - Enter \"INC\" if the tax amount is included in the expense amount otherwise enter \"EX\" when the amount exlcudes the tax. Defaults to \"Ex\". The tax amount on the expense will be autocalculated.

        :return: The transaction_tax_config_code of this NewExpense.
        :rtype: str
        """
        return self._transaction_tax_config_code

    @transaction_tax_config_code.setter
    def transaction_tax_config_code(self, transaction_tax_config_code):
        """Sets the transaction_tax_config_code of this NewExpense.

        Optional - Enter \"INC\" if the tax amount is included in the expense amount otherwise enter \"EX\" when the amount exlcudes the tax. Defaults to \"Ex\". The tax amount on the expense will be autocalculated.

        :param transaction_tax_config_code: The transaction_tax_config_code of this NewExpense.
        :type transaction_tax_config_code: str
        """

        self._transaction_tax_config_code = transaction_tax_config_code

    @property
    def user_email(self):
        """Gets the user_email of this NewExpense.

        The email address of a Timesheet/Expense user in Avaza. If not provided, UserIDFK field must be provided.

        :return: The user_email of this NewExpense.
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this NewExpense.

        The email address of a Timesheet/Expense user in Avaza. If not provided, UserIDFK field must be provided.

        :param user_email: The user_email of this NewExpense.
        :type user_email: str
        """

        self._user_email = user_email

    @property
    def user_idfk(self):
        """Gets the user_idfk of this NewExpense.

        UserID for a Timesheet/Expense user in Avaza. If not provided, UserEmail field must be provided

        :return: The user_idfk of this NewExpense.
        :rtype: int
        """
        return self._user_idfk

    @user_idfk.setter
    def user_idfk(self, user_idfk):
        """Sets the user_idfk of this NewExpense.

        UserID for a Timesheet/Expense user in Avaza. If not provided, UserEmail field must be provided

        :param user_idfk: The user_idfk of this NewExpense.
        :type user_idfk: int
        """

        self._user_idfk = user_idfk

    @property
    def verify_and_save(self):
        """Gets the verify_and_save of this NewExpense.

        Pass false if creating a draft expense. True otherwise.

        :return: The verify_and_save of this NewExpense.
        :rtype: bool
        """
        return self._verify_and_save

    @verify_and_save.setter
    def verify_and_save(self, verify_and_save):
        """Sets the verify_and_save of this NewExpense.

        Pass false if creating a draft expense. True otherwise.

        :param verify_and_save: The verify_and_save of this NewExpense.
        :type verify_and_save: bool
        """

        self._verify_and_save = verify_and_save

    @property
    def is_chargeable(self):
        """Gets the is_chargeable of this NewExpense.

        aka Billable. Defaults to false if not provided. If set to true, a CustomerIDFK or CustomerName must be provided.

        :return: The is_chargeable of this NewExpense.
        :rtype: bool
        """
        return self._is_chargeable

    @is_chargeable.setter
    def is_chargeable(self, is_chargeable):
        """Sets the is_chargeable of this NewExpense.

        aka Billable. Defaults to false if not provided. If set to true, a CustomerIDFK or CustomerName must be provided.

        :param is_chargeable: The is_chargeable of this NewExpense.
        :type is_chargeable: bool
        """

        self._is_chargeable = is_chargeable

    @property
    def is_reimbursable(self):
        """Gets the is_reimbursable of this NewExpense.

        Defaults to false if not provided.

        :return: The is_reimbursable of this NewExpense.
        :rtype: bool
        """
        return self._is_reimbursable

    @is_reimbursable.setter
    def is_reimbursable(self, is_reimbursable):
        """Sets the is_reimbursable of this NewExpense.

        Defaults to false if not provided.

        :param is_reimbursable: The is_reimbursable of this NewExpense.
        :type is_reimbursable: bool
        """

        self._is_reimbursable = is_reimbursable
