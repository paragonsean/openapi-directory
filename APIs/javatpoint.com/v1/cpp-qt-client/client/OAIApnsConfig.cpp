/**
 * Firebase Cloud Messaging API
 * FCM send API that provides a cross-platform messaging solution to reliably deliver messages at no cost.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApnsConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApnsConfig::OAIApnsConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApnsConfig::OAIApnsConfig() {
    this->initializeModel();
}

OAIApnsConfig::~OAIApnsConfig() {}

void OAIApnsConfig::initializeModel() {

    m_fcm_options_isSet = false;
    m_fcm_options_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_payload_isSet = false;
    m_payload_isValid = false;
}

void OAIApnsConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApnsConfig::fromJsonObject(QJsonObject json) {

    m_fcm_options_isValid = ::OpenAPI::fromJsonValue(m_fcm_options, json[QString("fcmOptions")]);
    m_fcm_options_isSet = !json[QString("fcmOptions")].isNull() && m_fcm_options_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;
}

QString OAIApnsConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApnsConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_fcm_options.isSet()) {
        obj.insert(QString("fcmOptions"), ::OpenAPI::toJsonValue(m_fcm_options));
    }
    if (m_headers.size() > 0) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_payload.size() > 0) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    return obj;
}

OAIApnsFcmOptions OAIApnsConfig::getFcmOptions() const {
    return m_fcm_options;
}
void OAIApnsConfig::setFcmOptions(const OAIApnsFcmOptions &fcm_options) {
    m_fcm_options = fcm_options;
    m_fcm_options_isSet = true;
}

bool OAIApnsConfig::is_fcm_options_Set() const{
    return m_fcm_options_isSet;
}

bool OAIApnsConfig::is_fcm_options_Valid() const{
    return m_fcm_options_isValid;
}

QMap<QString, QString> OAIApnsConfig::getHeaders() const {
    return m_headers;
}
void OAIApnsConfig::setHeaders(const QMap<QString, QString> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIApnsConfig::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIApnsConfig::is_headers_Valid() const{
    return m_headers_isValid;
}

QMap<QString, QJsonValue> OAIApnsConfig::getPayload() const {
    return m_payload;
}
void OAIApnsConfig::setPayload(const QMap<QString, QJsonValue> &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAIApnsConfig::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIApnsConfig::is_payload_Valid() const{
    return m_payload_isValid;
}

bool OAIApnsConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fcm_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApnsConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
