/**
 * Firebase Cloud Messaging API
 * FCM send API that provides a cross-platform messaging solution to reliably deliver messages at no cost.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAndroidNotification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAndroidNotification::OAIAndroidNotification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAndroidNotification::OAIAndroidNotification() {
    this->initializeModel();
}

OAIAndroidNotification::~OAIAndroidNotification() {}

void OAIAndroidNotification::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_body_loc_args_isSet = false;
    m_body_loc_args_isValid = false;

    m_body_loc_key_isSet = false;
    m_body_loc_key_isValid = false;

    m_bypass_proxy_notification_isSet = false;
    m_bypass_proxy_notification_isValid = false;

    m_channel_id_isSet = false;
    m_channel_id_isValid = false;

    m_click_action_isSet = false;
    m_click_action_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_default_light_settings_isSet = false;
    m_default_light_settings_isValid = false;

    m_default_sound_isSet = false;
    m_default_sound_isValid = false;

    m_default_vibrate_timings_isSet = false;
    m_default_vibrate_timings_isValid = false;

    m_event_time_isSet = false;
    m_event_time_isValid = false;

    m_icon_isSet = false;
    m_icon_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_light_settings_isSet = false;
    m_light_settings_isValid = false;

    m_local_only_isSet = false;
    m_local_only_isValid = false;

    m_notification_count_isSet = false;
    m_notification_count_isValid = false;

    m_notification_priority_isSet = false;
    m_notification_priority_isValid = false;

    m_sound_isSet = false;
    m_sound_isValid = false;

    m_sticky_isSet = false;
    m_sticky_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;

    m_ticker_isSet = false;
    m_ticker_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_title_loc_args_isSet = false;
    m_title_loc_args_isValid = false;

    m_title_loc_key_isSet = false;
    m_title_loc_key_isValid = false;

    m_vibrate_timings_isSet = false;
    m_vibrate_timings_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAIAndroidNotification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAndroidNotification::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_body_loc_args_isValid = ::OpenAPI::fromJsonValue(m_body_loc_args, json[QString("bodyLocArgs")]);
    m_body_loc_args_isSet = !json[QString("bodyLocArgs")].isNull() && m_body_loc_args_isValid;

    m_body_loc_key_isValid = ::OpenAPI::fromJsonValue(m_body_loc_key, json[QString("bodyLocKey")]);
    m_body_loc_key_isSet = !json[QString("bodyLocKey")].isNull() && m_body_loc_key_isValid;

    m_bypass_proxy_notification_isValid = ::OpenAPI::fromJsonValue(m_bypass_proxy_notification, json[QString("bypassProxyNotification")]);
    m_bypass_proxy_notification_isSet = !json[QString("bypassProxyNotification")].isNull() && m_bypass_proxy_notification_isValid;

    m_channel_id_isValid = ::OpenAPI::fromJsonValue(m_channel_id, json[QString("channelId")]);
    m_channel_id_isSet = !json[QString("channelId")].isNull() && m_channel_id_isValid;

    m_click_action_isValid = ::OpenAPI::fromJsonValue(m_click_action, json[QString("clickAction")]);
    m_click_action_isSet = !json[QString("clickAction")].isNull() && m_click_action_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_default_light_settings_isValid = ::OpenAPI::fromJsonValue(m_default_light_settings, json[QString("defaultLightSettings")]);
    m_default_light_settings_isSet = !json[QString("defaultLightSettings")].isNull() && m_default_light_settings_isValid;

    m_default_sound_isValid = ::OpenAPI::fromJsonValue(m_default_sound, json[QString("defaultSound")]);
    m_default_sound_isSet = !json[QString("defaultSound")].isNull() && m_default_sound_isValid;

    m_default_vibrate_timings_isValid = ::OpenAPI::fromJsonValue(m_default_vibrate_timings, json[QString("defaultVibrateTimings")]);
    m_default_vibrate_timings_isSet = !json[QString("defaultVibrateTimings")].isNull() && m_default_vibrate_timings_isValid;

    m_event_time_isValid = ::OpenAPI::fromJsonValue(m_event_time, json[QString("eventTime")]);
    m_event_time_isSet = !json[QString("eventTime")].isNull() && m_event_time_isValid;

    m_icon_isValid = ::OpenAPI::fromJsonValue(m_icon, json[QString("icon")]);
    m_icon_isSet = !json[QString("icon")].isNull() && m_icon_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_light_settings_isValid = ::OpenAPI::fromJsonValue(m_light_settings, json[QString("lightSettings")]);
    m_light_settings_isSet = !json[QString("lightSettings")].isNull() && m_light_settings_isValid;

    m_local_only_isValid = ::OpenAPI::fromJsonValue(m_local_only, json[QString("localOnly")]);
    m_local_only_isSet = !json[QString("localOnly")].isNull() && m_local_only_isValid;

    m_notification_count_isValid = ::OpenAPI::fromJsonValue(m_notification_count, json[QString("notificationCount")]);
    m_notification_count_isSet = !json[QString("notificationCount")].isNull() && m_notification_count_isValid;

    m_notification_priority_isValid = ::OpenAPI::fromJsonValue(m_notification_priority, json[QString("notificationPriority")]);
    m_notification_priority_isSet = !json[QString("notificationPriority")].isNull() && m_notification_priority_isValid;

    m_sound_isValid = ::OpenAPI::fromJsonValue(m_sound, json[QString("sound")]);
    m_sound_isSet = !json[QString("sound")].isNull() && m_sound_isValid;

    m_sticky_isValid = ::OpenAPI::fromJsonValue(m_sticky, json[QString("sticky")]);
    m_sticky_isSet = !json[QString("sticky")].isNull() && m_sticky_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;

    m_ticker_isValid = ::OpenAPI::fromJsonValue(m_ticker, json[QString("ticker")]);
    m_ticker_isSet = !json[QString("ticker")].isNull() && m_ticker_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_title_loc_args_isValid = ::OpenAPI::fromJsonValue(m_title_loc_args, json[QString("titleLocArgs")]);
    m_title_loc_args_isSet = !json[QString("titleLocArgs")].isNull() && m_title_loc_args_isValid;

    m_title_loc_key_isValid = ::OpenAPI::fromJsonValue(m_title_loc_key, json[QString("titleLocKey")]);
    m_title_loc_key_isSet = !json[QString("titleLocKey")].isNull() && m_title_loc_key_isValid;

    m_vibrate_timings_isValid = ::OpenAPI::fromJsonValue(m_vibrate_timings, json[QString("vibrateTimings")]);
    m_vibrate_timings_isSet = !json[QString("vibrateTimings")].isNull() && m_vibrate_timings_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAIAndroidNotification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAndroidNotification::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_body_loc_args.size() > 0) {
        obj.insert(QString("bodyLocArgs"), ::OpenAPI::toJsonValue(m_body_loc_args));
    }
    if (m_body_loc_key_isSet) {
        obj.insert(QString("bodyLocKey"), ::OpenAPI::toJsonValue(m_body_loc_key));
    }
    if (m_bypass_proxy_notification_isSet) {
        obj.insert(QString("bypassProxyNotification"), ::OpenAPI::toJsonValue(m_bypass_proxy_notification));
    }
    if (m_channel_id_isSet) {
        obj.insert(QString("channelId"), ::OpenAPI::toJsonValue(m_channel_id));
    }
    if (m_click_action_isSet) {
        obj.insert(QString("clickAction"), ::OpenAPI::toJsonValue(m_click_action));
    }
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_default_light_settings_isSet) {
        obj.insert(QString("defaultLightSettings"), ::OpenAPI::toJsonValue(m_default_light_settings));
    }
    if (m_default_sound_isSet) {
        obj.insert(QString("defaultSound"), ::OpenAPI::toJsonValue(m_default_sound));
    }
    if (m_default_vibrate_timings_isSet) {
        obj.insert(QString("defaultVibrateTimings"), ::OpenAPI::toJsonValue(m_default_vibrate_timings));
    }
    if (m_event_time_isSet) {
        obj.insert(QString("eventTime"), ::OpenAPI::toJsonValue(m_event_time));
    }
    if (m_icon_isSet) {
        obj.insert(QString("icon"), ::OpenAPI::toJsonValue(m_icon));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_light_settings.isSet()) {
        obj.insert(QString("lightSettings"), ::OpenAPI::toJsonValue(m_light_settings));
    }
    if (m_local_only_isSet) {
        obj.insert(QString("localOnly"), ::OpenAPI::toJsonValue(m_local_only));
    }
    if (m_notification_count_isSet) {
        obj.insert(QString("notificationCount"), ::OpenAPI::toJsonValue(m_notification_count));
    }
    if (m_notification_priority_isSet) {
        obj.insert(QString("notificationPriority"), ::OpenAPI::toJsonValue(m_notification_priority));
    }
    if (m_sound_isSet) {
        obj.insert(QString("sound"), ::OpenAPI::toJsonValue(m_sound));
    }
    if (m_sticky_isSet) {
        obj.insert(QString("sticky"), ::OpenAPI::toJsonValue(m_sticky));
    }
    if (m_tag_isSet) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    if (m_ticker_isSet) {
        obj.insert(QString("ticker"), ::OpenAPI::toJsonValue(m_ticker));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_title_loc_args.size() > 0) {
        obj.insert(QString("titleLocArgs"), ::OpenAPI::toJsonValue(m_title_loc_args));
    }
    if (m_title_loc_key_isSet) {
        obj.insert(QString("titleLocKey"), ::OpenAPI::toJsonValue(m_title_loc_key));
    }
    if (m_vibrate_timings.size() > 0) {
        obj.insert(QString("vibrateTimings"), ::OpenAPI::toJsonValue(m_vibrate_timings));
    }
    if (m_visibility_isSet) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

QString OAIAndroidNotification::getBody() const {
    return m_body;
}
void OAIAndroidNotification::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIAndroidNotification::is_body_Set() const{
    return m_body_isSet;
}

bool OAIAndroidNotification::is_body_Valid() const{
    return m_body_isValid;
}

QList<QString> OAIAndroidNotification::getBodyLocArgs() const {
    return m_body_loc_args;
}
void OAIAndroidNotification::setBodyLocArgs(const QList<QString> &body_loc_args) {
    m_body_loc_args = body_loc_args;
    m_body_loc_args_isSet = true;
}

bool OAIAndroidNotification::is_body_loc_args_Set() const{
    return m_body_loc_args_isSet;
}

bool OAIAndroidNotification::is_body_loc_args_Valid() const{
    return m_body_loc_args_isValid;
}

QString OAIAndroidNotification::getBodyLocKey() const {
    return m_body_loc_key;
}
void OAIAndroidNotification::setBodyLocKey(const QString &body_loc_key) {
    m_body_loc_key = body_loc_key;
    m_body_loc_key_isSet = true;
}

bool OAIAndroidNotification::is_body_loc_key_Set() const{
    return m_body_loc_key_isSet;
}

bool OAIAndroidNotification::is_body_loc_key_Valid() const{
    return m_body_loc_key_isValid;
}

bool OAIAndroidNotification::isBypassProxyNotification() const {
    return m_bypass_proxy_notification;
}
void OAIAndroidNotification::setBypassProxyNotification(const bool &bypass_proxy_notification) {
    m_bypass_proxy_notification = bypass_proxy_notification;
    m_bypass_proxy_notification_isSet = true;
}

bool OAIAndroidNotification::is_bypass_proxy_notification_Set() const{
    return m_bypass_proxy_notification_isSet;
}

bool OAIAndroidNotification::is_bypass_proxy_notification_Valid() const{
    return m_bypass_proxy_notification_isValid;
}

QString OAIAndroidNotification::getChannelId() const {
    return m_channel_id;
}
void OAIAndroidNotification::setChannelId(const QString &channel_id) {
    m_channel_id = channel_id;
    m_channel_id_isSet = true;
}

bool OAIAndroidNotification::is_channel_id_Set() const{
    return m_channel_id_isSet;
}

bool OAIAndroidNotification::is_channel_id_Valid() const{
    return m_channel_id_isValid;
}

QString OAIAndroidNotification::getClickAction() const {
    return m_click_action;
}
void OAIAndroidNotification::setClickAction(const QString &click_action) {
    m_click_action = click_action;
    m_click_action_isSet = true;
}

bool OAIAndroidNotification::is_click_action_Set() const{
    return m_click_action_isSet;
}

bool OAIAndroidNotification::is_click_action_Valid() const{
    return m_click_action_isValid;
}

QString OAIAndroidNotification::getColor() const {
    return m_color;
}
void OAIAndroidNotification::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIAndroidNotification::is_color_Set() const{
    return m_color_isSet;
}

bool OAIAndroidNotification::is_color_Valid() const{
    return m_color_isValid;
}

bool OAIAndroidNotification::isDefaultLightSettings() const {
    return m_default_light_settings;
}
void OAIAndroidNotification::setDefaultLightSettings(const bool &default_light_settings) {
    m_default_light_settings = default_light_settings;
    m_default_light_settings_isSet = true;
}

bool OAIAndroidNotification::is_default_light_settings_Set() const{
    return m_default_light_settings_isSet;
}

bool OAIAndroidNotification::is_default_light_settings_Valid() const{
    return m_default_light_settings_isValid;
}

bool OAIAndroidNotification::isDefaultSound() const {
    return m_default_sound;
}
void OAIAndroidNotification::setDefaultSound(const bool &default_sound) {
    m_default_sound = default_sound;
    m_default_sound_isSet = true;
}

bool OAIAndroidNotification::is_default_sound_Set() const{
    return m_default_sound_isSet;
}

bool OAIAndroidNotification::is_default_sound_Valid() const{
    return m_default_sound_isValid;
}

bool OAIAndroidNotification::isDefaultVibrateTimings() const {
    return m_default_vibrate_timings;
}
void OAIAndroidNotification::setDefaultVibrateTimings(const bool &default_vibrate_timings) {
    m_default_vibrate_timings = default_vibrate_timings;
    m_default_vibrate_timings_isSet = true;
}

bool OAIAndroidNotification::is_default_vibrate_timings_Set() const{
    return m_default_vibrate_timings_isSet;
}

bool OAIAndroidNotification::is_default_vibrate_timings_Valid() const{
    return m_default_vibrate_timings_isValid;
}

QString OAIAndroidNotification::getEventTime() const {
    return m_event_time;
}
void OAIAndroidNotification::setEventTime(const QString &event_time) {
    m_event_time = event_time;
    m_event_time_isSet = true;
}

bool OAIAndroidNotification::is_event_time_Set() const{
    return m_event_time_isSet;
}

bool OAIAndroidNotification::is_event_time_Valid() const{
    return m_event_time_isValid;
}

QString OAIAndroidNotification::getIcon() const {
    return m_icon;
}
void OAIAndroidNotification::setIcon(const QString &icon) {
    m_icon = icon;
    m_icon_isSet = true;
}

bool OAIAndroidNotification::is_icon_Set() const{
    return m_icon_isSet;
}

bool OAIAndroidNotification::is_icon_Valid() const{
    return m_icon_isValid;
}

QString OAIAndroidNotification::getImage() const {
    return m_image;
}
void OAIAndroidNotification::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIAndroidNotification::is_image_Set() const{
    return m_image_isSet;
}

bool OAIAndroidNotification::is_image_Valid() const{
    return m_image_isValid;
}

OAILightSettings OAIAndroidNotification::getLightSettings() const {
    return m_light_settings;
}
void OAIAndroidNotification::setLightSettings(const OAILightSettings &light_settings) {
    m_light_settings = light_settings;
    m_light_settings_isSet = true;
}

bool OAIAndroidNotification::is_light_settings_Set() const{
    return m_light_settings_isSet;
}

bool OAIAndroidNotification::is_light_settings_Valid() const{
    return m_light_settings_isValid;
}

bool OAIAndroidNotification::isLocalOnly() const {
    return m_local_only;
}
void OAIAndroidNotification::setLocalOnly(const bool &local_only) {
    m_local_only = local_only;
    m_local_only_isSet = true;
}

bool OAIAndroidNotification::is_local_only_Set() const{
    return m_local_only_isSet;
}

bool OAIAndroidNotification::is_local_only_Valid() const{
    return m_local_only_isValid;
}

qint32 OAIAndroidNotification::getNotificationCount() const {
    return m_notification_count;
}
void OAIAndroidNotification::setNotificationCount(const qint32 &notification_count) {
    m_notification_count = notification_count;
    m_notification_count_isSet = true;
}

bool OAIAndroidNotification::is_notification_count_Set() const{
    return m_notification_count_isSet;
}

bool OAIAndroidNotification::is_notification_count_Valid() const{
    return m_notification_count_isValid;
}

QString OAIAndroidNotification::getNotificationPriority() const {
    return m_notification_priority;
}
void OAIAndroidNotification::setNotificationPriority(const QString &notification_priority) {
    m_notification_priority = notification_priority;
    m_notification_priority_isSet = true;
}

bool OAIAndroidNotification::is_notification_priority_Set() const{
    return m_notification_priority_isSet;
}

bool OAIAndroidNotification::is_notification_priority_Valid() const{
    return m_notification_priority_isValid;
}

QString OAIAndroidNotification::getSound() const {
    return m_sound;
}
void OAIAndroidNotification::setSound(const QString &sound) {
    m_sound = sound;
    m_sound_isSet = true;
}

bool OAIAndroidNotification::is_sound_Set() const{
    return m_sound_isSet;
}

bool OAIAndroidNotification::is_sound_Valid() const{
    return m_sound_isValid;
}

bool OAIAndroidNotification::isSticky() const {
    return m_sticky;
}
void OAIAndroidNotification::setSticky(const bool &sticky) {
    m_sticky = sticky;
    m_sticky_isSet = true;
}

bool OAIAndroidNotification::is_sticky_Set() const{
    return m_sticky_isSet;
}

bool OAIAndroidNotification::is_sticky_Valid() const{
    return m_sticky_isValid;
}

QString OAIAndroidNotification::getTag() const {
    return m_tag;
}
void OAIAndroidNotification::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIAndroidNotification::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIAndroidNotification::is_tag_Valid() const{
    return m_tag_isValid;
}

QString OAIAndroidNotification::getTicker() const {
    return m_ticker;
}
void OAIAndroidNotification::setTicker(const QString &ticker) {
    m_ticker = ticker;
    m_ticker_isSet = true;
}

bool OAIAndroidNotification::is_ticker_Set() const{
    return m_ticker_isSet;
}

bool OAIAndroidNotification::is_ticker_Valid() const{
    return m_ticker_isValid;
}

QString OAIAndroidNotification::getTitle() const {
    return m_title;
}
void OAIAndroidNotification::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAndroidNotification::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAndroidNotification::is_title_Valid() const{
    return m_title_isValid;
}

QList<QString> OAIAndroidNotification::getTitleLocArgs() const {
    return m_title_loc_args;
}
void OAIAndroidNotification::setTitleLocArgs(const QList<QString> &title_loc_args) {
    m_title_loc_args = title_loc_args;
    m_title_loc_args_isSet = true;
}

bool OAIAndroidNotification::is_title_loc_args_Set() const{
    return m_title_loc_args_isSet;
}

bool OAIAndroidNotification::is_title_loc_args_Valid() const{
    return m_title_loc_args_isValid;
}

QString OAIAndroidNotification::getTitleLocKey() const {
    return m_title_loc_key;
}
void OAIAndroidNotification::setTitleLocKey(const QString &title_loc_key) {
    m_title_loc_key = title_loc_key;
    m_title_loc_key_isSet = true;
}

bool OAIAndroidNotification::is_title_loc_key_Set() const{
    return m_title_loc_key_isSet;
}

bool OAIAndroidNotification::is_title_loc_key_Valid() const{
    return m_title_loc_key_isValid;
}

QList<QString> OAIAndroidNotification::getVibrateTimings() const {
    return m_vibrate_timings;
}
void OAIAndroidNotification::setVibrateTimings(const QList<QString> &vibrate_timings) {
    m_vibrate_timings = vibrate_timings;
    m_vibrate_timings_isSet = true;
}

bool OAIAndroidNotification::is_vibrate_timings_Set() const{
    return m_vibrate_timings_isSet;
}

bool OAIAndroidNotification::is_vibrate_timings_Valid() const{
    return m_vibrate_timings_isValid;
}

QString OAIAndroidNotification::getVisibility() const {
    return m_visibility;
}
void OAIAndroidNotification::setVisibility(const QString &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIAndroidNotification::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIAndroidNotification::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAIAndroidNotification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_loc_args.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_loc_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bypass_proxy_notification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_click_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_light_settings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_sound_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_vibrate_timings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_light_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sound_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sticky_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ticker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_loc_args.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_loc_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vibrate_timings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAndroidNotification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
