/**
 * Firebase Cloud Messaging API
 * FCM send API that provides a cross-platform messaging solution to reliably deliver messages at no cost.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendMessageRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendMessageRequest::OAISendMessageRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendMessageRequest::OAISendMessageRequest() {
    this->initializeModel();
}

OAISendMessageRequest::~OAISendMessageRequest() {}

void OAISendMessageRequest::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;

    m_validate_only_isSet = false;
    m_validate_only_isValid = false;
}

void OAISendMessageRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendMessageRequest::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_validate_only_isValid = ::OpenAPI::fromJsonValue(m_validate_only, json[QString("validateOnly")]);
    m_validate_only_isSet = !json[QString("validateOnly")].isNull() && m_validate_only_isValid;
}

QString OAISendMessageRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendMessageRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_message.isSet()) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_validate_only_isSet) {
        obj.insert(QString("validateOnly"), ::OpenAPI::toJsonValue(m_validate_only));
    }
    return obj;
}

OAIMessage OAISendMessageRequest::getMessage() const {
    return m_message;
}
void OAISendMessageRequest::setMessage(const OAIMessage &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAISendMessageRequest::is_message_Set() const{
    return m_message_isSet;
}

bool OAISendMessageRequest::is_message_Valid() const{
    return m_message_isValid;
}

bool OAISendMessageRequest::isValidateOnly() const {
    return m_validate_only;
}
void OAISendMessageRequest::setValidateOnly(const bool &validate_only) {
    m_validate_only = validate_only;
    m_validate_only_isSet = true;
}

bool OAISendMessageRequest::is_validate_only_Set() const{
    return m_validate_only_isSet;
}

bool OAISendMessageRequest::is_validate_only_Valid() const{
    return m_validate_only_isValid;
}

bool OAISendMessageRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate_only_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendMessageRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
