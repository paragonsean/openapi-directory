/**
 * Firebase Cloud Messaging API
 * FCM send API that provides a cross-platform messaging solution to reliably deliver messages at no cost.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAndroidNotification.h
 *
 * Notification to send to android devices.
 */

#ifndef OAIAndroidNotification_H
#define OAIAndroidNotification_H

#include <QJsonObject>

#include "OAILightSettings.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILightSettings;

class OAIAndroidNotification : public OAIObject {
public:
    OAIAndroidNotification();
    OAIAndroidNotification(QString json);
    ~OAIAndroidNotification() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBody() const;
    void setBody(const QString &body);
    bool is_body_Set() const;
    bool is_body_Valid() const;

    QList<QString> getBodyLocArgs() const;
    void setBodyLocArgs(const QList<QString> &body_loc_args);
    bool is_body_loc_args_Set() const;
    bool is_body_loc_args_Valid() const;

    QString getBodyLocKey() const;
    void setBodyLocKey(const QString &body_loc_key);
    bool is_body_loc_key_Set() const;
    bool is_body_loc_key_Valid() const;

    bool isBypassProxyNotification() const;
    void setBypassProxyNotification(const bool &bypass_proxy_notification);
    bool is_bypass_proxy_notification_Set() const;
    bool is_bypass_proxy_notification_Valid() const;

    QString getChannelId() const;
    void setChannelId(const QString &channel_id);
    bool is_channel_id_Set() const;
    bool is_channel_id_Valid() const;

    QString getClickAction() const;
    void setClickAction(const QString &click_action);
    bool is_click_action_Set() const;
    bool is_click_action_Valid() const;

    QString getColor() const;
    void setColor(const QString &color);
    bool is_color_Set() const;
    bool is_color_Valid() const;

    bool isDefaultLightSettings() const;
    void setDefaultLightSettings(const bool &default_light_settings);
    bool is_default_light_settings_Set() const;
    bool is_default_light_settings_Valid() const;

    bool isDefaultSound() const;
    void setDefaultSound(const bool &default_sound);
    bool is_default_sound_Set() const;
    bool is_default_sound_Valid() const;

    bool isDefaultVibrateTimings() const;
    void setDefaultVibrateTimings(const bool &default_vibrate_timings);
    bool is_default_vibrate_timings_Set() const;
    bool is_default_vibrate_timings_Valid() const;

    QString getEventTime() const;
    void setEventTime(const QString &event_time);
    bool is_event_time_Set() const;
    bool is_event_time_Valid() const;

    QString getIcon() const;
    void setIcon(const QString &icon);
    bool is_icon_Set() const;
    bool is_icon_Valid() const;

    QString getImage() const;
    void setImage(const QString &image);
    bool is_image_Set() const;
    bool is_image_Valid() const;

    OAILightSettings getLightSettings() const;
    void setLightSettings(const OAILightSettings &light_settings);
    bool is_light_settings_Set() const;
    bool is_light_settings_Valid() const;

    bool isLocalOnly() const;
    void setLocalOnly(const bool &local_only);
    bool is_local_only_Set() const;
    bool is_local_only_Valid() const;

    qint32 getNotificationCount() const;
    void setNotificationCount(const qint32 &notification_count);
    bool is_notification_count_Set() const;
    bool is_notification_count_Valid() const;

    QString getNotificationPriority() const;
    void setNotificationPriority(const QString &notification_priority);
    bool is_notification_priority_Set() const;
    bool is_notification_priority_Valid() const;

    QString getSound() const;
    void setSound(const QString &sound);
    bool is_sound_Set() const;
    bool is_sound_Valid() const;

    bool isSticky() const;
    void setSticky(const bool &sticky);
    bool is_sticky_Set() const;
    bool is_sticky_Valid() const;

    QString getTag() const;
    void setTag(const QString &tag);
    bool is_tag_Set() const;
    bool is_tag_Valid() const;

    QString getTicker() const;
    void setTicker(const QString &ticker);
    bool is_ticker_Set() const;
    bool is_ticker_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QList<QString> getTitleLocArgs() const;
    void setTitleLocArgs(const QList<QString> &title_loc_args);
    bool is_title_loc_args_Set() const;
    bool is_title_loc_args_Valid() const;

    QString getTitleLocKey() const;
    void setTitleLocKey(const QString &title_loc_key);
    bool is_title_loc_key_Set() const;
    bool is_title_loc_key_Valid() const;

    QList<QString> getVibrateTimings() const;
    void setVibrateTimings(const QList<QString> &vibrate_timings);
    bool is_vibrate_timings_Set() const;
    bool is_vibrate_timings_Valid() const;

    QString getVisibility() const;
    void setVisibility(const QString &visibility);
    bool is_visibility_Set() const;
    bool is_visibility_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_body;
    bool m_body_isSet;
    bool m_body_isValid;

    QList<QString> m_body_loc_args;
    bool m_body_loc_args_isSet;
    bool m_body_loc_args_isValid;

    QString m_body_loc_key;
    bool m_body_loc_key_isSet;
    bool m_body_loc_key_isValid;

    bool m_bypass_proxy_notification;
    bool m_bypass_proxy_notification_isSet;
    bool m_bypass_proxy_notification_isValid;

    QString m_channel_id;
    bool m_channel_id_isSet;
    bool m_channel_id_isValid;

    QString m_click_action;
    bool m_click_action_isSet;
    bool m_click_action_isValid;

    QString m_color;
    bool m_color_isSet;
    bool m_color_isValid;

    bool m_default_light_settings;
    bool m_default_light_settings_isSet;
    bool m_default_light_settings_isValid;

    bool m_default_sound;
    bool m_default_sound_isSet;
    bool m_default_sound_isValid;

    bool m_default_vibrate_timings;
    bool m_default_vibrate_timings_isSet;
    bool m_default_vibrate_timings_isValid;

    QString m_event_time;
    bool m_event_time_isSet;
    bool m_event_time_isValid;

    QString m_icon;
    bool m_icon_isSet;
    bool m_icon_isValid;

    QString m_image;
    bool m_image_isSet;
    bool m_image_isValid;

    OAILightSettings m_light_settings;
    bool m_light_settings_isSet;
    bool m_light_settings_isValid;

    bool m_local_only;
    bool m_local_only_isSet;
    bool m_local_only_isValid;

    qint32 m_notification_count;
    bool m_notification_count_isSet;
    bool m_notification_count_isValid;

    QString m_notification_priority;
    bool m_notification_priority_isSet;
    bool m_notification_priority_isValid;

    QString m_sound;
    bool m_sound_isSet;
    bool m_sound_isValid;

    bool m_sticky;
    bool m_sticky_isSet;
    bool m_sticky_isValid;

    QString m_tag;
    bool m_tag_isSet;
    bool m_tag_isValid;

    QString m_ticker;
    bool m_ticker_isSet;
    bool m_ticker_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QList<QString> m_title_loc_args;
    bool m_title_loc_args_isSet;
    bool m_title_loc_args_isValid;

    QString m_title_loc_key;
    bool m_title_loc_key_isSet;
    bool m_title_loc_key_isValid;

    QList<QString> m_vibrate_timings;
    bool m_vibrate_timings_isSet;
    bool m_vibrate_timings_isValid;

    QString m_visibility;
    bool m_visibility_isSet;
    bool m_visibility_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAndroidNotification)

#endif // OAIAndroidNotification_H
