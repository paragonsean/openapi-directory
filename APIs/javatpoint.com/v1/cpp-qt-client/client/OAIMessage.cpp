/**
 * Firebase Cloud Messaging API
 * FCM send API that provides a cross-platform messaging solution to reliably deliver messages at no cost.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessage::OAIMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessage::OAIMessage() {
    this->initializeModel();
}

OAIMessage::~OAIMessage() {}

void OAIMessage::initializeModel() {

    m_android_isSet = false;
    m_android_isValid = false;

    m_apns_isSet = false;
    m_apns_isValid = false;

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_fcm_options_isSet = false;
    m_fcm_options_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notification_isSet = false;
    m_notification_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_topic_isSet = false;
    m_topic_isValid = false;

    m_webpush_isSet = false;
    m_webpush_isValid = false;
}

void OAIMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessage::fromJsonObject(QJsonObject json) {

    m_android_isValid = ::OpenAPI::fromJsonValue(m_android, json[QString("android")]);
    m_android_isSet = !json[QString("android")].isNull() && m_android_isValid;

    m_apns_isValid = ::OpenAPI::fromJsonValue(m_apns, json[QString("apns")]);
    m_apns_isSet = !json[QString("apns")].isNull() && m_apns_isValid;

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_fcm_options_isValid = ::OpenAPI::fromJsonValue(m_fcm_options, json[QString("fcmOptions")]);
    m_fcm_options_isSet = !json[QString("fcmOptions")].isNull() && m_fcm_options_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notification_isValid = ::OpenAPI::fromJsonValue(m_notification, json[QString("notification")]);
    m_notification_isSet = !json[QString("notification")].isNull() && m_notification_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_topic_isValid = ::OpenAPI::fromJsonValue(m_topic, json[QString("topic")]);
    m_topic_isSet = !json[QString("topic")].isNull() && m_topic_isValid;

    m_webpush_isValid = ::OpenAPI::fromJsonValue(m_webpush, json[QString("webpush")]);
    m_webpush_isSet = !json[QString("webpush")].isNull() && m_webpush_isValid;
}

QString OAIMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_android.isSet()) {
        obj.insert(QString("android"), ::OpenAPI::toJsonValue(m_android));
    }
    if (m_apns.isSet()) {
        obj.insert(QString("apns"), ::OpenAPI::toJsonValue(m_apns));
    }
    if (m_condition_isSet) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_fcm_options.isSet()) {
        obj.insert(QString("fcmOptions"), ::OpenAPI::toJsonValue(m_fcm_options));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notification.isSet()) {
        obj.insert(QString("notification"), ::OpenAPI::toJsonValue(m_notification));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_topic_isSet) {
        obj.insert(QString("topic"), ::OpenAPI::toJsonValue(m_topic));
    }
    if (m_webpush.isSet()) {
        obj.insert(QString("webpush"), ::OpenAPI::toJsonValue(m_webpush));
    }
    return obj;
}

OAIAndroidConfig OAIMessage::getAndroid() const {
    return m_android;
}
void OAIMessage::setAndroid(const OAIAndroidConfig &android) {
    m_android = android;
    m_android_isSet = true;
}

bool OAIMessage::is_android_Set() const{
    return m_android_isSet;
}

bool OAIMessage::is_android_Valid() const{
    return m_android_isValid;
}

OAIApnsConfig OAIMessage::getApns() const {
    return m_apns;
}
void OAIMessage::setApns(const OAIApnsConfig &apns) {
    m_apns = apns;
    m_apns_isSet = true;
}

bool OAIMessage::is_apns_Set() const{
    return m_apns_isSet;
}

bool OAIMessage::is_apns_Valid() const{
    return m_apns_isValid;
}

QString OAIMessage::getCondition() const {
    return m_condition;
}
void OAIMessage::setCondition(const QString &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIMessage::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIMessage::is_condition_Valid() const{
    return m_condition_isValid;
}

QMap<QString, QString> OAIMessage::getData() const {
    return m_data;
}
void OAIMessage::setData(const QMap<QString, QString> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIMessage::is_data_Set() const{
    return m_data_isSet;
}

bool OAIMessage::is_data_Valid() const{
    return m_data_isValid;
}

OAIFcmOptions OAIMessage::getFcmOptions() const {
    return m_fcm_options;
}
void OAIMessage::setFcmOptions(const OAIFcmOptions &fcm_options) {
    m_fcm_options = fcm_options;
    m_fcm_options_isSet = true;
}

bool OAIMessage::is_fcm_options_Set() const{
    return m_fcm_options_isSet;
}

bool OAIMessage::is_fcm_options_Valid() const{
    return m_fcm_options_isValid;
}

QString OAIMessage::getName() const {
    return m_name;
}
void OAIMessage::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMessage::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMessage::is_name_Valid() const{
    return m_name_isValid;
}

OAINotification OAIMessage::getNotification() const {
    return m_notification;
}
void OAIMessage::setNotification(const OAINotification &notification) {
    m_notification = notification;
    m_notification_isSet = true;
}

bool OAIMessage::is_notification_Set() const{
    return m_notification_isSet;
}

bool OAIMessage::is_notification_Valid() const{
    return m_notification_isValid;
}

QString OAIMessage::getToken() const {
    return m_token;
}
void OAIMessage::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIMessage::is_token_Set() const{
    return m_token_isSet;
}

bool OAIMessage::is_token_Valid() const{
    return m_token_isValid;
}

QString OAIMessage::getTopic() const {
    return m_topic;
}
void OAIMessage::setTopic(const QString &topic) {
    m_topic = topic;
    m_topic_isSet = true;
}

bool OAIMessage::is_topic_Set() const{
    return m_topic_isSet;
}

bool OAIMessage::is_topic_Valid() const{
    return m_topic_isValid;
}

OAIWebpushConfig OAIMessage::getWebpush() const {
    return m_webpush;
}
void OAIMessage::setWebpush(const OAIWebpushConfig &webpush) {
    m_webpush = webpush;
    m_webpush_isSet = true;
}

bool OAIMessage::is_webpush_Set() const{
    return m_webpush_isSet;
}

bool OAIMessage::is_webpush_Valid() const{
    return m_webpush_isValid;
}

bool OAIMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_android.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_apns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fcm_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webpush.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
