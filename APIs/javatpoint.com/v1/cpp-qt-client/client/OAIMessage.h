/**
 * Firebase Cloud Messaging API
 * FCM send API that provides a cross-platform messaging solution to reliably deliver messages at no cost.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMessage.h
 *
 * Message to send by Firebase Cloud Messaging Service.
 */

#ifndef OAIMessage_H
#define OAIMessage_H

#include <QJsonObject>

#include "OAIAndroidConfig.h"
#include "OAIApnsConfig.h"
#include "OAIFcmOptions.h"
#include "OAINotification.h"
#include "OAIWebpushConfig.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAndroidConfig;
class OAIApnsConfig;
class OAIFcmOptions;
class OAINotification;
class OAIWebpushConfig;

class OAIMessage : public OAIObject {
public:
    OAIMessage();
    OAIMessage(QString json);
    ~OAIMessage() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAndroidConfig getAndroid() const;
    void setAndroid(const OAIAndroidConfig &android);
    bool is_android_Set() const;
    bool is_android_Valid() const;

    OAIApnsConfig getApns() const;
    void setApns(const OAIApnsConfig &apns);
    bool is_apns_Set() const;
    bool is_apns_Valid() const;

    QString getCondition() const;
    void setCondition(const QString &condition);
    bool is_condition_Set() const;
    bool is_condition_Valid() const;

    QMap<QString, QString> getData() const;
    void setData(const QMap<QString, QString> &data);
    bool is_data_Set() const;
    bool is_data_Valid() const;

    OAIFcmOptions getFcmOptions() const;
    void setFcmOptions(const OAIFcmOptions &fcm_options);
    bool is_fcm_options_Set() const;
    bool is_fcm_options_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAINotification getNotification() const;
    void setNotification(const OAINotification &notification);
    bool is_notification_Set() const;
    bool is_notification_Valid() const;

    QString getToken() const;
    void setToken(const QString &token);
    bool is_token_Set() const;
    bool is_token_Valid() const;

    QString getTopic() const;
    void setTopic(const QString &topic);
    bool is_topic_Set() const;
    bool is_topic_Valid() const;

    OAIWebpushConfig getWebpush() const;
    void setWebpush(const OAIWebpushConfig &webpush);
    bool is_webpush_Set() const;
    bool is_webpush_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAndroidConfig m_android;
    bool m_android_isSet;
    bool m_android_isValid;

    OAIApnsConfig m_apns;
    bool m_apns_isSet;
    bool m_apns_isValid;

    QString m_condition;
    bool m_condition_isSet;
    bool m_condition_isValid;

    QMap<QString, QString> m_data;
    bool m_data_isSet;
    bool m_data_isValid;

    OAIFcmOptions m_fcm_options;
    bool m_fcm_options_isSet;
    bool m_fcm_options_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAINotification m_notification;
    bool m_notification_isSet;
    bool m_notification_isValid;

    QString m_token;
    bool m_token_isSet;
    bool m_token_isValid;

    QString m_topic;
    bool m_topic_isSet;
    bool m_topic_isValid;

    OAIWebpushConfig m_webpush;
    bool m_webpush_isSet;
    bool m_webpush_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMessage)

#endif // OAIMessage_H
