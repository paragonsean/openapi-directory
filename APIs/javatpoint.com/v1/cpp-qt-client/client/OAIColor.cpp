/**
 * Firebase Cloud Messaging API
 * FCM send API that provides a cross-platform messaging solution to reliably deliver messages at no cost.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIColor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIColor::OAIColor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIColor::OAIColor() {
    this->initializeModel();
}

OAIColor::~OAIColor() {}

void OAIColor::initializeModel() {

    m_alpha_isSet = false;
    m_alpha_isValid = false;

    m_blue_isSet = false;
    m_blue_isValid = false;

    m_green_isSet = false;
    m_green_isValid = false;

    m_red_isSet = false;
    m_red_isValid = false;
}

void OAIColor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIColor::fromJsonObject(QJsonObject json) {

    m_alpha_isValid = ::OpenAPI::fromJsonValue(m_alpha, json[QString("alpha")]);
    m_alpha_isSet = !json[QString("alpha")].isNull() && m_alpha_isValid;

    m_blue_isValid = ::OpenAPI::fromJsonValue(m_blue, json[QString("blue")]);
    m_blue_isSet = !json[QString("blue")].isNull() && m_blue_isValid;

    m_green_isValid = ::OpenAPI::fromJsonValue(m_green, json[QString("green")]);
    m_green_isSet = !json[QString("green")].isNull() && m_green_isValid;

    m_red_isValid = ::OpenAPI::fromJsonValue(m_red, json[QString("red")]);
    m_red_isSet = !json[QString("red")].isNull() && m_red_isValid;
}

QString OAIColor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIColor::asJsonObject() const {
    QJsonObject obj;
    if (m_alpha_isSet) {
        obj.insert(QString("alpha"), ::OpenAPI::toJsonValue(m_alpha));
    }
    if (m_blue_isSet) {
        obj.insert(QString("blue"), ::OpenAPI::toJsonValue(m_blue));
    }
    if (m_green_isSet) {
        obj.insert(QString("green"), ::OpenAPI::toJsonValue(m_green));
    }
    if (m_red_isSet) {
        obj.insert(QString("red"), ::OpenAPI::toJsonValue(m_red));
    }
    return obj;
}

float OAIColor::getAlpha() const {
    return m_alpha;
}
void OAIColor::setAlpha(const float &alpha) {
    m_alpha = alpha;
    m_alpha_isSet = true;
}

bool OAIColor::is_alpha_Set() const{
    return m_alpha_isSet;
}

bool OAIColor::is_alpha_Valid() const{
    return m_alpha_isValid;
}

float OAIColor::getBlue() const {
    return m_blue;
}
void OAIColor::setBlue(const float &blue) {
    m_blue = blue;
    m_blue_isSet = true;
}

bool OAIColor::is_blue_Set() const{
    return m_blue_isSet;
}

bool OAIColor::is_blue_Valid() const{
    return m_blue_isValid;
}

float OAIColor::getGreen() const {
    return m_green;
}
void OAIColor::setGreen(const float &green) {
    m_green = green;
    m_green_isSet = true;
}

bool OAIColor::is_green_Set() const{
    return m_green_isSet;
}

bool OAIColor::is_green_Valid() const{
    return m_green_isValid;
}

float OAIColor::getRed() const {
    return m_red;
}
void OAIColor::setRed(const float &red) {
    m_red = red;
    m_red_isSet = true;
}

bool OAIColor::is_red_Set() const{
    return m_red_isSet;
}

bool OAIColor::is_red_Valid() const{
    return m_red_isValid;
}

bool OAIColor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alpha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_green_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_red_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIColor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
