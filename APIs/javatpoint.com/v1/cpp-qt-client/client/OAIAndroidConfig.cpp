/**
 * Firebase Cloud Messaging API
 * FCM send API that provides a cross-platform messaging solution to reliably deliver messages at no cost.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAndroidConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAndroidConfig::OAIAndroidConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAndroidConfig::OAIAndroidConfig() {
    this->initializeModel();
}

OAIAndroidConfig::~OAIAndroidConfig() {}

void OAIAndroidConfig::initializeModel() {

    m_collapse_key_isSet = false;
    m_collapse_key_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_direct_boot_ok_isSet = false;
    m_direct_boot_ok_isValid = false;

    m_fcm_options_isSet = false;
    m_fcm_options_isValid = false;

    m_notification_isSet = false;
    m_notification_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_restricted_package_name_isSet = false;
    m_restricted_package_name_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;
}

void OAIAndroidConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAndroidConfig::fromJsonObject(QJsonObject json) {

    m_collapse_key_isValid = ::OpenAPI::fromJsonValue(m_collapse_key, json[QString("collapseKey")]);
    m_collapse_key_isSet = !json[QString("collapseKey")].isNull() && m_collapse_key_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_direct_boot_ok_isValid = ::OpenAPI::fromJsonValue(m_direct_boot_ok, json[QString("directBootOk")]);
    m_direct_boot_ok_isSet = !json[QString("directBootOk")].isNull() && m_direct_boot_ok_isValid;

    m_fcm_options_isValid = ::OpenAPI::fromJsonValue(m_fcm_options, json[QString("fcmOptions")]);
    m_fcm_options_isSet = !json[QString("fcmOptions")].isNull() && m_fcm_options_isValid;

    m_notification_isValid = ::OpenAPI::fromJsonValue(m_notification, json[QString("notification")]);
    m_notification_isSet = !json[QString("notification")].isNull() && m_notification_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_restricted_package_name_isValid = ::OpenAPI::fromJsonValue(m_restricted_package_name, json[QString("restrictedPackageName")]);
    m_restricted_package_name_isSet = !json[QString("restrictedPackageName")].isNull() && m_restricted_package_name_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("ttl")]);
    m_ttl_isSet = !json[QString("ttl")].isNull() && m_ttl_isValid;
}

QString OAIAndroidConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAndroidConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_collapse_key_isSet) {
        obj.insert(QString("collapseKey"), ::OpenAPI::toJsonValue(m_collapse_key));
    }
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_direct_boot_ok_isSet) {
        obj.insert(QString("directBootOk"), ::OpenAPI::toJsonValue(m_direct_boot_ok));
    }
    if (m_fcm_options.isSet()) {
        obj.insert(QString("fcmOptions"), ::OpenAPI::toJsonValue(m_fcm_options));
    }
    if (m_notification.isSet()) {
        obj.insert(QString("notification"), ::OpenAPI::toJsonValue(m_notification));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_restricted_package_name_isSet) {
        obj.insert(QString("restrictedPackageName"), ::OpenAPI::toJsonValue(m_restricted_package_name));
    }
    if (m_ttl_isSet) {
        obj.insert(QString("ttl"), ::OpenAPI::toJsonValue(m_ttl));
    }
    return obj;
}

QString OAIAndroidConfig::getCollapseKey() const {
    return m_collapse_key;
}
void OAIAndroidConfig::setCollapseKey(const QString &collapse_key) {
    m_collapse_key = collapse_key;
    m_collapse_key_isSet = true;
}

bool OAIAndroidConfig::is_collapse_key_Set() const{
    return m_collapse_key_isSet;
}

bool OAIAndroidConfig::is_collapse_key_Valid() const{
    return m_collapse_key_isValid;
}

QMap<QString, QString> OAIAndroidConfig::getData() const {
    return m_data;
}
void OAIAndroidConfig::setData(const QMap<QString, QString> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIAndroidConfig::is_data_Set() const{
    return m_data_isSet;
}

bool OAIAndroidConfig::is_data_Valid() const{
    return m_data_isValid;
}

bool OAIAndroidConfig::isDirectBootOk() const {
    return m_direct_boot_ok;
}
void OAIAndroidConfig::setDirectBootOk(const bool &direct_boot_ok) {
    m_direct_boot_ok = direct_boot_ok;
    m_direct_boot_ok_isSet = true;
}

bool OAIAndroidConfig::is_direct_boot_ok_Set() const{
    return m_direct_boot_ok_isSet;
}

bool OAIAndroidConfig::is_direct_boot_ok_Valid() const{
    return m_direct_boot_ok_isValid;
}

OAIAndroidFcmOptions OAIAndroidConfig::getFcmOptions() const {
    return m_fcm_options;
}
void OAIAndroidConfig::setFcmOptions(const OAIAndroidFcmOptions &fcm_options) {
    m_fcm_options = fcm_options;
    m_fcm_options_isSet = true;
}

bool OAIAndroidConfig::is_fcm_options_Set() const{
    return m_fcm_options_isSet;
}

bool OAIAndroidConfig::is_fcm_options_Valid() const{
    return m_fcm_options_isValid;
}

OAIAndroidNotification OAIAndroidConfig::getNotification() const {
    return m_notification;
}
void OAIAndroidConfig::setNotification(const OAIAndroidNotification &notification) {
    m_notification = notification;
    m_notification_isSet = true;
}

bool OAIAndroidConfig::is_notification_Set() const{
    return m_notification_isSet;
}

bool OAIAndroidConfig::is_notification_Valid() const{
    return m_notification_isValid;
}

QString OAIAndroidConfig::getPriority() const {
    return m_priority;
}
void OAIAndroidConfig::setPriority(const QString &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIAndroidConfig::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIAndroidConfig::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAIAndroidConfig::getRestrictedPackageName() const {
    return m_restricted_package_name;
}
void OAIAndroidConfig::setRestrictedPackageName(const QString &restricted_package_name) {
    m_restricted_package_name = restricted_package_name;
    m_restricted_package_name_isSet = true;
}

bool OAIAndroidConfig::is_restricted_package_name_Set() const{
    return m_restricted_package_name_isSet;
}

bool OAIAndroidConfig::is_restricted_package_name_Valid() const{
    return m_restricted_package_name_isValid;
}

QString OAIAndroidConfig::getTtl() const {
    return m_ttl;
}
void OAIAndroidConfig::setTtl(const QString &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAIAndroidConfig::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAIAndroidConfig::is_ttl_Valid() const{
    return m_ttl_isValid;
}

bool OAIAndroidConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collapse_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_boot_ok_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fcm_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restricted_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAndroidConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
