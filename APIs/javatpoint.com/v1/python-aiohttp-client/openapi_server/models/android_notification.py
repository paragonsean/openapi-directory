# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.light_settings import LightSettings
from openapi_server import util


class AndroidNotification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, body_loc_args: List[str]=None, body_loc_key: str=None, bypass_proxy_notification: bool=None, channel_id: str=None, click_action: str=None, color: str=None, default_light_settings: bool=None, default_sound: bool=None, default_vibrate_timings: bool=None, event_time: str=None, icon: str=None, image: str=None, light_settings: LightSettings=None, local_only: bool=None, notification_count: int=None, notification_priority: str=None, sound: str=None, sticky: bool=None, tag: str=None, ticker: str=None, title: str=None, title_loc_args: List[str]=None, title_loc_key: str=None, vibrate_timings: List[str]=None, visibility: str=None):
        """AndroidNotification - a model defined in OpenAPI

        :param body: The body of this AndroidNotification.
        :param body_loc_args: The body_loc_args of this AndroidNotification.
        :param body_loc_key: The body_loc_key of this AndroidNotification.
        :param bypass_proxy_notification: The bypass_proxy_notification of this AndroidNotification.
        :param channel_id: The channel_id of this AndroidNotification.
        :param click_action: The click_action of this AndroidNotification.
        :param color: The color of this AndroidNotification.
        :param default_light_settings: The default_light_settings of this AndroidNotification.
        :param default_sound: The default_sound of this AndroidNotification.
        :param default_vibrate_timings: The default_vibrate_timings of this AndroidNotification.
        :param event_time: The event_time of this AndroidNotification.
        :param icon: The icon of this AndroidNotification.
        :param image: The image of this AndroidNotification.
        :param light_settings: The light_settings of this AndroidNotification.
        :param local_only: The local_only of this AndroidNotification.
        :param notification_count: The notification_count of this AndroidNotification.
        :param notification_priority: The notification_priority of this AndroidNotification.
        :param sound: The sound of this AndroidNotification.
        :param sticky: The sticky of this AndroidNotification.
        :param tag: The tag of this AndroidNotification.
        :param ticker: The ticker of this AndroidNotification.
        :param title: The title of this AndroidNotification.
        :param title_loc_args: The title_loc_args of this AndroidNotification.
        :param title_loc_key: The title_loc_key of this AndroidNotification.
        :param vibrate_timings: The vibrate_timings of this AndroidNotification.
        :param visibility: The visibility of this AndroidNotification.
        """
        self.openapi_types = {
            'body': str,
            'body_loc_args': List[str],
            'body_loc_key': str,
            'bypass_proxy_notification': bool,
            'channel_id': str,
            'click_action': str,
            'color': str,
            'default_light_settings': bool,
            'default_sound': bool,
            'default_vibrate_timings': bool,
            'event_time': str,
            'icon': str,
            'image': str,
            'light_settings': LightSettings,
            'local_only': bool,
            'notification_count': int,
            'notification_priority': str,
            'sound': str,
            'sticky': bool,
            'tag': str,
            'ticker': str,
            'title': str,
            'title_loc_args': List[str],
            'title_loc_key': str,
            'vibrate_timings': List[str],
            'visibility': str
        }

        self.attribute_map = {
            'body': 'body',
            'body_loc_args': 'bodyLocArgs',
            'body_loc_key': 'bodyLocKey',
            'bypass_proxy_notification': 'bypassProxyNotification',
            'channel_id': 'channelId',
            'click_action': 'clickAction',
            'color': 'color',
            'default_light_settings': 'defaultLightSettings',
            'default_sound': 'defaultSound',
            'default_vibrate_timings': 'defaultVibrateTimings',
            'event_time': 'eventTime',
            'icon': 'icon',
            'image': 'image',
            'light_settings': 'lightSettings',
            'local_only': 'localOnly',
            'notification_count': 'notificationCount',
            'notification_priority': 'notificationPriority',
            'sound': 'sound',
            'sticky': 'sticky',
            'tag': 'tag',
            'ticker': 'ticker',
            'title': 'title',
            'title_loc_args': 'titleLocArgs',
            'title_loc_key': 'titleLocKey',
            'vibrate_timings': 'vibrateTimings',
            'visibility': 'visibility'
        }

        self._body = body
        self._body_loc_args = body_loc_args
        self._body_loc_key = body_loc_key
        self._bypass_proxy_notification = bypass_proxy_notification
        self._channel_id = channel_id
        self._click_action = click_action
        self._color = color
        self._default_light_settings = default_light_settings
        self._default_sound = default_sound
        self._default_vibrate_timings = default_vibrate_timings
        self._event_time = event_time
        self._icon = icon
        self._image = image
        self._light_settings = light_settings
        self._local_only = local_only
        self._notification_count = notification_count
        self._notification_priority = notification_priority
        self._sound = sound
        self._sticky = sticky
        self._tag = tag
        self._ticker = ticker
        self._title = title
        self._title_loc_args = title_loc_args
        self._title_loc_key = title_loc_key
        self._vibrate_timings = vibrate_timings
        self._visibility = visibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AndroidNotification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AndroidNotification of this AndroidNotification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this AndroidNotification.

        The notification's body text. If present, it will override google.firebase.fcm.v1.Notification.body.

        :return: The body of this AndroidNotification.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this AndroidNotification.

        The notification's body text. If present, it will override google.firebase.fcm.v1.Notification.body.

        :param body: The body of this AndroidNotification.
        :type body: str
        """

        self._body = body

    @property
    def body_loc_args(self):
        """Gets the body_loc_args of this AndroidNotification.

        Variable string values to be used in place of the format specifiers in body_loc_key to use to localize the body text to the user's current localization. See [Formatting and Styling](https://goo.gl/MalYE3) for more information.

        :return: The body_loc_args of this AndroidNotification.
        :rtype: List[str]
        """
        return self._body_loc_args

    @body_loc_args.setter
    def body_loc_args(self, body_loc_args):
        """Sets the body_loc_args of this AndroidNotification.

        Variable string values to be used in place of the format specifiers in body_loc_key to use to localize the body text to the user's current localization. See [Formatting and Styling](https://goo.gl/MalYE3) for more information.

        :param body_loc_args: The body_loc_args of this AndroidNotification.
        :type body_loc_args: List[str]
        """

        self._body_loc_args = body_loc_args

    @property
    def body_loc_key(self):
        """Gets the body_loc_key of this AndroidNotification.

        The key to the body string in the app's string resources to use to localize the body text to the user's current localization. See [String Resources](https://goo.gl/NdFZGI) for more information.

        :return: The body_loc_key of this AndroidNotification.
        :rtype: str
        """
        return self._body_loc_key

    @body_loc_key.setter
    def body_loc_key(self, body_loc_key):
        """Sets the body_loc_key of this AndroidNotification.

        The key to the body string in the app's string resources to use to localize the body text to the user's current localization. See [String Resources](https://goo.gl/NdFZGI) for more information.

        :param body_loc_key: The body_loc_key of this AndroidNotification.
        :type body_loc_key: str
        """

        self._body_loc_key = body_loc_key

    @property
    def bypass_proxy_notification(self):
        """Gets the bypass_proxy_notification of this AndroidNotification.

        If set, display notifications delivered to the device will be handled by the app instead of the proxy.

        :return: The bypass_proxy_notification of this AndroidNotification.
        :rtype: bool
        """
        return self._bypass_proxy_notification

    @bypass_proxy_notification.setter
    def bypass_proxy_notification(self, bypass_proxy_notification):
        """Sets the bypass_proxy_notification of this AndroidNotification.

        If set, display notifications delivered to the device will be handled by the app instead of the proxy.

        :param bypass_proxy_notification: The bypass_proxy_notification of this AndroidNotification.
        :type bypass_proxy_notification: bool
        """

        self._bypass_proxy_notification = bypass_proxy_notification

    @property
    def channel_id(self):
        """Gets the channel_id of this AndroidNotification.

        The [notification's channel id](https://developer.android.com/guide/topics/ui/notifiers/notifications#ManageChannels) (new in Android O). The app must create a channel with this channel ID before any notification with this channel ID is received. If you don't send this channel ID in the request, or if the channel ID provided has not yet been created by the app, FCM uses the channel ID specified in the app manifest.

        :return: The channel_id of this AndroidNotification.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this AndroidNotification.

        The [notification's channel id](https://developer.android.com/guide/topics/ui/notifiers/notifications#ManageChannels) (new in Android O). The app must create a channel with this channel ID before any notification with this channel ID is received. If you don't send this channel ID in the request, or if the channel ID provided has not yet been created by the app, FCM uses the channel ID specified in the app manifest.

        :param channel_id: The channel_id of this AndroidNotification.
        :type channel_id: str
        """

        self._channel_id = channel_id

    @property
    def click_action(self):
        """Gets the click_action of this AndroidNotification.

        The action associated with a user click on the notification. If specified, an activity with a matching intent filter is launched when a user clicks on the notification.

        :return: The click_action of this AndroidNotification.
        :rtype: str
        """
        return self._click_action

    @click_action.setter
    def click_action(self, click_action):
        """Sets the click_action of this AndroidNotification.

        The action associated with a user click on the notification. If specified, an activity with a matching intent filter is launched when a user clicks on the notification.

        :param click_action: The click_action of this AndroidNotification.
        :type click_action: str
        """

        self._click_action = click_action

    @property
    def color(self):
        """Gets the color of this AndroidNotification.

        The notification's icon color, expressed in #rrggbb format.

        :return: The color of this AndroidNotification.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this AndroidNotification.

        The notification's icon color, expressed in #rrggbb format.

        :param color: The color of this AndroidNotification.
        :type color: str
        """

        self._color = color

    @property
    def default_light_settings(self):
        """Gets the default_light_settings of this AndroidNotification.

        If set to true, use the Android framework's default LED light settings for the notification. Default values are specified in [config.xml](https://android.googlesource.com/platform/frameworks/base/+/master/core/res/res/values/config.xml). If `default_light_settings` is set to true and `light_settings` is also set, the user-specified `light_settings` is used instead of the default value.

        :return: The default_light_settings of this AndroidNotification.
        :rtype: bool
        """
        return self._default_light_settings

    @default_light_settings.setter
    def default_light_settings(self, default_light_settings):
        """Sets the default_light_settings of this AndroidNotification.

        If set to true, use the Android framework's default LED light settings for the notification. Default values are specified in [config.xml](https://android.googlesource.com/platform/frameworks/base/+/master/core/res/res/values/config.xml). If `default_light_settings` is set to true and `light_settings` is also set, the user-specified `light_settings` is used instead of the default value.

        :param default_light_settings: The default_light_settings of this AndroidNotification.
        :type default_light_settings: bool
        """

        self._default_light_settings = default_light_settings

    @property
    def default_sound(self):
        """Gets the default_sound of this AndroidNotification.

        If set to true, use the Android framework's default sound for the notification. Default values are specified in [config.xml](https://android.googlesource.com/platform/frameworks/base/+/master/core/res/res/values/config.xml).

        :return: The default_sound of this AndroidNotification.
        :rtype: bool
        """
        return self._default_sound

    @default_sound.setter
    def default_sound(self, default_sound):
        """Sets the default_sound of this AndroidNotification.

        If set to true, use the Android framework's default sound for the notification. Default values are specified in [config.xml](https://android.googlesource.com/platform/frameworks/base/+/master/core/res/res/values/config.xml).

        :param default_sound: The default_sound of this AndroidNotification.
        :type default_sound: bool
        """

        self._default_sound = default_sound

    @property
    def default_vibrate_timings(self):
        """Gets the default_vibrate_timings of this AndroidNotification.

        If set to true, use the Android framework's default vibrate pattern for the notification. Default values are specified in [config.xml](https://android.googlesource.com/platform/frameworks/base/+/master/core/res/res/values/config.xml). If `default_vibrate_timings` is set to true and `vibrate_timings` is also set, the default value is used instead of the user-specified `vibrate_timings`.

        :return: The default_vibrate_timings of this AndroidNotification.
        :rtype: bool
        """
        return self._default_vibrate_timings

    @default_vibrate_timings.setter
    def default_vibrate_timings(self, default_vibrate_timings):
        """Sets the default_vibrate_timings of this AndroidNotification.

        If set to true, use the Android framework's default vibrate pattern for the notification. Default values are specified in [config.xml](https://android.googlesource.com/platform/frameworks/base/+/master/core/res/res/values/config.xml). If `default_vibrate_timings` is set to true and `vibrate_timings` is also set, the default value is used instead of the user-specified `vibrate_timings`.

        :param default_vibrate_timings: The default_vibrate_timings of this AndroidNotification.
        :type default_vibrate_timings: bool
        """

        self._default_vibrate_timings = default_vibrate_timings

    @property
    def event_time(self):
        """Gets the event_time of this AndroidNotification.

        Set the time that the event in the notification occurred. Notifications in the panel are sorted by this time. A point in time is represented using [protobuf.Timestamp](https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/Timestamp).

        :return: The event_time of this AndroidNotification.
        :rtype: str
        """
        return self._event_time

    @event_time.setter
    def event_time(self, event_time):
        """Sets the event_time of this AndroidNotification.

        Set the time that the event in the notification occurred. Notifications in the panel are sorted by this time. A point in time is represented using [protobuf.Timestamp](https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/Timestamp).

        :param event_time: The event_time of this AndroidNotification.
        :type event_time: str
        """

        self._event_time = event_time

    @property
    def icon(self):
        """Gets the icon of this AndroidNotification.

        The notification's icon. Sets the notification icon to myicon for drawable resource myicon. If you don't send this key in the request, FCM displays the launcher icon specified in your app manifest.

        :return: The icon of this AndroidNotification.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this AndroidNotification.

        The notification's icon. Sets the notification icon to myicon for drawable resource myicon. If you don't send this key in the request, FCM displays the launcher icon specified in your app manifest.

        :param icon: The icon of this AndroidNotification.
        :type icon: str
        """

        self._icon = icon

    @property
    def image(self):
        """Gets the image of this AndroidNotification.

        Contains the URL of an image that is going to be displayed in a notification. If present, it will override google.firebase.fcm.v1.Notification.image.

        :return: The image of this AndroidNotification.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this AndroidNotification.

        Contains the URL of an image that is going to be displayed in a notification. If present, it will override google.firebase.fcm.v1.Notification.image.

        :param image: The image of this AndroidNotification.
        :type image: str
        """

        self._image = image

    @property
    def light_settings(self):
        """Gets the light_settings of this AndroidNotification.


        :return: The light_settings of this AndroidNotification.
        :rtype: LightSettings
        """
        return self._light_settings

    @light_settings.setter
    def light_settings(self, light_settings):
        """Sets the light_settings of this AndroidNotification.


        :param light_settings: The light_settings of this AndroidNotification.
        :type light_settings: LightSettings
        """

        self._light_settings = light_settings

    @property
    def local_only(self):
        """Gets the local_only of this AndroidNotification.

        Set whether or not this notification is relevant only to the current device. Some notifications can be bridged to other devices for remote display, such as a Wear OS watch. This hint can be set to recommend this notification not be bridged. See [Wear OS guides](https://developer.android.com/training/wearables/notifications/bridger#existing-method-of-preventing-bridging)

        :return: The local_only of this AndroidNotification.
        :rtype: bool
        """
        return self._local_only

    @local_only.setter
    def local_only(self, local_only):
        """Sets the local_only of this AndroidNotification.

        Set whether or not this notification is relevant only to the current device. Some notifications can be bridged to other devices for remote display, such as a Wear OS watch. This hint can be set to recommend this notification not be bridged. See [Wear OS guides](https://developer.android.com/training/wearables/notifications/bridger#existing-method-of-preventing-bridging)

        :param local_only: The local_only of this AndroidNotification.
        :type local_only: bool
        """

        self._local_only = local_only

    @property
    def notification_count(self):
        """Gets the notification_count of this AndroidNotification.

        Sets the number of items this notification represents. May be displayed as a badge count for launchers that support badging.See [Notification Badge](https://developer.android.com/training/notify-user/badges). For example, this might be useful if you're using just one notification to represent multiple new messages but you want the count here to represent the number of total new messages. If zero or unspecified, systems that support badging use the default, which is to increment a number displayed on the long-press menu each time a new notification arrives.

        :return: The notification_count of this AndroidNotification.
        :rtype: int
        """
        return self._notification_count

    @notification_count.setter
    def notification_count(self, notification_count):
        """Sets the notification_count of this AndroidNotification.

        Sets the number of items this notification represents. May be displayed as a badge count for launchers that support badging.See [Notification Badge](https://developer.android.com/training/notify-user/badges). For example, this might be useful if you're using just one notification to represent multiple new messages but you want the count here to represent the number of total new messages. If zero or unspecified, systems that support badging use the default, which is to increment a number displayed on the long-press menu each time a new notification arrives.

        :param notification_count: The notification_count of this AndroidNotification.
        :type notification_count: int
        """

        self._notification_count = notification_count

    @property
    def notification_priority(self):
        """Gets the notification_priority of this AndroidNotification.

        Set the relative priority for this notification. Priority is an indication of how much of the user's attention should be consumed by this notification. Low-priority notifications may be hidden from the user in certain situations, while the user might be interrupted for a higher-priority notification. The effect of setting the same priorities may differ slightly on different platforms. Note this priority differs from `AndroidMessagePriority`. This priority is processed by the client after the message has been delivered, whereas [AndroidMessagePriority](https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#androidmessagepriority) is an FCM concept that controls when the message is delivered.

        :return: The notification_priority of this AndroidNotification.
        :rtype: str
        """
        return self._notification_priority

    @notification_priority.setter
    def notification_priority(self, notification_priority):
        """Sets the notification_priority of this AndroidNotification.

        Set the relative priority for this notification. Priority is an indication of how much of the user's attention should be consumed by this notification. Low-priority notifications may be hidden from the user in certain situations, while the user might be interrupted for a higher-priority notification. The effect of setting the same priorities may differ slightly on different platforms. Note this priority differs from `AndroidMessagePriority`. This priority is processed by the client after the message has been delivered, whereas [AndroidMessagePriority](https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#androidmessagepriority) is an FCM concept that controls when the message is delivered.

        :param notification_priority: The notification_priority of this AndroidNotification.
        :type notification_priority: str
        """
        allowed_values = ["PRIORITY_UNSPECIFIED", "PRIORITY_MIN", "PRIORITY_LOW", "PRIORITY_DEFAULT", "PRIORITY_HIGH", "PRIORITY_MAX"]  # noqa: E501
        if notification_priority not in allowed_values:
            raise ValueError(
                "Invalid value for `notification_priority` ({0}), must be one of {1}"
                .format(notification_priority, allowed_values)
            )

        self._notification_priority = notification_priority

    @property
    def sound(self):
        """Gets the sound of this AndroidNotification.

        The sound to play when the device receives the notification. Supports \"default\" or the filename of a sound resource bundled in the app. Sound files must reside in /res/raw/.

        :return: The sound of this AndroidNotification.
        :rtype: str
        """
        return self._sound

    @sound.setter
    def sound(self, sound):
        """Sets the sound of this AndroidNotification.

        The sound to play when the device receives the notification. Supports \"default\" or the filename of a sound resource bundled in the app. Sound files must reside in /res/raw/.

        :param sound: The sound of this AndroidNotification.
        :type sound: str
        """

        self._sound = sound

    @property
    def sticky(self):
        """Gets the sticky of this AndroidNotification.

        When set to false or unset, the notification is automatically dismissed when the user clicks it in the panel. When set to true, the notification persists even when the user clicks it.

        :return: The sticky of this AndroidNotification.
        :rtype: bool
        """
        return self._sticky

    @sticky.setter
    def sticky(self, sticky):
        """Sets the sticky of this AndroidNotification.

        When set to false or unset, the notification is automatically dismissed when the user clicks it in the panel. When set to true, the notification persists even when the user clicks it.

        :param sticky: The sticky of this AndroidNotification.
        :type sticky: bool
        """

        self._sticky = sticky

    @property
    def tag(self):
        """Gets the tag of this AndroidNotification.

        Identifier used to replace existing notifications in the notification drawer. If not specified, each request creates a new notification. If specified and a notification with the same tag is already being shown, the new notification replaces the existing one in the notification drawer.

        :return: The tag of this AndroidNotification.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this AndroidNotification.

        Identifier used to replace existing notifications in the notification drawer. If not specified, each request creates a new notification. If specified and a notification with the same tag is already being shown, the new notification replaces the existing one in the notification drawer.

        :param tag: The tag of this AndroidNotification.
        :type tag: str
        """

        self._tag = tag

    @property
    def ticker(self):
        """Gets the ticker of this AndroidNotification.

        Sets the \"ticker\" text, which is sent to accessibility services. Prior to API level 21 (`Lollipop`), sets the text that is displayed in the status bar when the notification first arrives.

        :return: The ticker of this AndroidNotification.
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this AndroidNotification.

        Sets the \"ticker\" text, which is sent to accessibility services. Prior to API level 21 (`Lollipop`), sets the text that is displayed in the status bar when the notification first arrives.

        :param ticker: The ticker of this AndroidNotification.
        :type ticker: str
        """

        self._ticker = ticker

    @property
    def title(self):
        """Gets the title of this AndroidNotification.

        The notification's title. If present, it will override google.firebase.fcm.v1.Notification.title.

        :return: The title of this AndroidNotification.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AndroidNotification.

        The notification's title. If present, it will override google.firebase.fcm.v1.Notification.title.

        :param title: The title of this AndroidNotification.
        :type title: str
        """

        self._title = title

    @property
    def title_loc_args(self):
        """Gets the title_loc_args of this AndroidNotification.

        Variable string values to be used in place of the format specifiers in title_loc_key to use to localize the title text to the user's current localization. See [Formatting and Styling](https://goo.gl/MalYE3) for more information.

        :return: The title_loc_args of this AndroidNotification.
        :rtype: List[str]
        """
        return self._title_loc_args

    @title_loc_args.setter
    def title_loc_args(self, title_loc_args):
        """Sets the title_loc_args of this AndroidNotification.

        Variable string values to be used in place of the format specifiers in title_loc_key to use to localize the title text to the user's current localization. See [Formatting and Styling](https://goo.gl/MalYE3) for more information.

        :param title_loc_args: The title_loc_args of this AndroidNotification.
        :type title_loc_args: List[str]
        """

        self._title_loc_args = title_loc_args

    @property
    def title_loc_key(self):
        """Gets the title_loc_key of this AndroidNotification.

        The key to the title string in the app's string resources to use to localize the title text to the user's current localization. See [String Resources](https://goo.gl/NdFZGI) for more information.

        :return: The title_loc_key of this AndroidNotification.
        :rtype: str
        """
        return self._title_loc_key

    @title_loc_key.setter
    def title_loc_key(self, title_loc_key):
        """Sets the title_loc_key of this AndroidNotification.

        The key to the title string in the app's string resources to use to localize the title text to the user's current localization. See [String Resources](https://goo.gl/NdFZGI) for more information.

        :param title_loc_key: The title_loc_key of this AndroidNotification.
        :type title_loc_key: str
        """

        self._title_loc_key = title_loc_key

    @property
    def vibrate_timings(self):
        """Gets the vibrate_timings of this AndroidNotification.

        Set the vibration pattern to use. Pass in an array of [protobuf.Duration](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Duration) to turn on or off the vibrator. The first value indicates the `Duration` to wait before turning the vibrator on. The next value indicates the `Duration` to keep the vibrator on. Subsequent values alternate between `Duration` to turn the vibrator off and to turn the vibrator on. If `vibrate_timings` is set and `default_vibrate_timings` is set to `true`, the default value is used instead of the user-specified `vibrate_timings`.

        :return: The vibrate_timings of this AndroidNotification.
        :rtype: List[str]
        """
        return self._vibrate_timings

    @vibrate_timings.setter
    def vibrate_timings(self, vibrate_timings):
        """Sets the vibrate_timings of this AndroidNotification.

        Set the vibration pattern to use. Pass in an array of [protobuf.Duration](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Duration) to turn on or off the vibrator. The first value indicates the `Duration` to wait before turning the vibrator on. The next value indicates the `Duration` to keep the vibrator on. Subsequent values alternate between `Duration` to turn the vibrator off and to turn the vibrator on. If `vibrate_timings` is set and `default_vibrate_timings` is set to `true`, the default value is used instead of the user-specified `vibrate_timings`.

        :param vibrate_timings: The vibrate_timings of this AndroidNotification.
        :type vibrate_timings: List[str]
        """

        self._vibrate_timings = vibrate_timings

    @property
    def visibility(self):
        """Gets the visibility of this AndroidNotification.

        Set the [Notification.visibility](https://developer.android.com/reference/android/app/Notification.html#visibility) of the notification.

        :return: The visibility of this AndroidNotification.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this AndroidNotification.

        Set the [Notification.visibility](https://developer.android.com/reference/android/app/Notification.html#visibility) of the notification.

        :param visibility: The visibility of this AndroidNotification.
        :type visibility: str
        """
        allowed_values = ["VISIBILITY_UNSPECIFIED", "PRIVATE", "PUBLIC", "SECRET"]  # noqa: E501
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"
                .format(visibility, allowed_values)
            )

        self._visibility = visibility
