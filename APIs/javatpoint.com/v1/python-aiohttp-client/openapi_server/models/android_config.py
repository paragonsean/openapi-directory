# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.android_fcm_options import AndroidFcmOptions
from openapi_server.models.android_notification import AndroidNotification
from openapi_server import util


class AndroidConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collapse_key: str=None, data: Dict[str, str]=None, direct_boot_ok: bool=None, fcm_options: AndroidFcmOptions=None, notification: AndroidNotification=None, priority: str=None, restricted_package_name: str=None, ttl: str=None):
        """AndroidConfig - a model defined in OpenAPI

        :param collapse_key: The collapse_key of this AndroidConfig.
        :param data: The data of this AndroidConfig.
        :param direct_boot_ok: The direct_boot_ok of this AndroidConfig.
        :param fcm_options: The fcm_options of this AndroidConfig.
        :param notification: The notification of this AndroidConfig.
        :param priority: The priority of this AndroidConfig.
        :param restricted_package_name: The restricted_package_name of this AndroidConfig.
        :param ttl: The ttl of this AndroidConfig.
        """
        self.openapi_types = {
            'collapse_key': str,
            'data': Dict[str, str],
            'direct_boot_ok': bool,
            'fcm_options': AndroidFcmOptions,
            'notification': AndroidNotification,
            'priority': str,
            'restricted_package_name': str,
            'ttl': str
        }

        self.attribute_map = {
            'collapse_key': 'collapseKey',
            'data': 'data',
            'direct_boot_ok': 'directBootOk',
            'fcm_options': 'fcmOptions',
            'notification': 'notification',
            'priority': 'priority',
            'restricted_package_name': 'restrictedPackageName',
            'ttl': 'ttl'
        }

        self._collapse_key = collapse_key
        self._data = data
        self._direct_boot_ok = direct_boot_ok
        self._fcm_options = fcm_options
        self._notification = notification
        self._priority = priority
        self._restricted_package_name = restricted_package_name
        self._ttl = ttl

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AndroidConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AndroidConfig of this AndroidConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collapse_key(self):
        """Gets the collapse_key of this AndroidConfig.

        An identifier of a group of messages that can be collapsed, so that only the last message gets sent when delivery can be resumed. A maximum of 4 different collapse keys is allowed at any given time.

        :return: The collapse_key of this AndroidConfig.
        :rtype: str
        """
        return self._collapse_key

    @collapse_key.setter
    def collapse_key(self, collapse_key):
        """Sets the collapse_key of this AndroidConfig.

        An identifier of a group of messages that can be collapsed, so that only the last message gets sent when delivery can be resumed. A maximum of 4 different collapse keys is allowed at any given time.

        :param collapse_key: The collapse_key of this AndroidConfig.
        :type collapse_key: str
        """

        self._collapse_key = collapse_key

    @property
    def data(self):
        """Gets the data of this AndroidConfig.

        Arbitrary key/value payload. If present, it will override google.firebase.fcm.v1.Message.data.

        :return: The data of this AndroidConfig.
        :rtype: Dict[str, str]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this AndroidConfig.

        Arbitrary key/value payload. If present, it will override google.firebase.fcm.v1.Message.data.

        :param data: The data of this AndroidConfig.
        :type data: Dict[str, str]
        """

        self._data = data

    @property
    def direct_boot_ok(self):
        """Gets the direct_boot_ok of this AndroidConfig.

        If set to true, messages will be allowed to be delivered to the app while the device is in direct boot mode. See [Support Direct Boot mode](https://developer.android.com/training/articles/direct-boot).

        :return: The direct_boot_ok of this AndroidConfig.
        :rtype: bool
        """
        return self._direct_boot_ok

    @direct_boot_ok.setter
    def direct_boot_ok(self, direct_boot_ok):
        """Sets the direct_boot_ok of this AndroidConfig.

        If set to true, messages will be allowed to be delivered to the app while the device is in direct boot mode. See [Support Direct Boot mode](https://developer.android.com/training/articles/direct-boot).

        :param direct_boot_ok: The direct_boot_ok of this AndroidConfig.
        :type direct_boot_ok: bool
        """

        self._direct_boot_ok = direct_boot_ok

    @property
    def fcm_options(self):
        """Gets the fcm_options of this AndroidConfig.


        :return: The fcm_options of this AndroidConfig.
        :rtype: AndroidFcmOptions
        """
        return self._fcm_options

    @fcm_options.setter
    def fcm_options(self, fcm_options):
        """Sets the fcm_options of this AndroidConfig.


        :param fcm_options: The fcm_options of this AndroidConfig.
        :type fcm_options: AndroidFcmOptions
        """

        self._fcm_options = fcm_options

    @property
    def notification(self):
        """Gets the notification of this AndroidConfig.


        :return: The notification of this AndroidConfig.
        :rtype: AndroidNotification
        """
        return self._notification

    @notification.setter
    def notification(self, notification):
        """Sets the notification of this AndroidConfig.


        :param notification: The notification of this AndroidConfig.
        :type notification: AndroidNotification
        """

        self._notification = notification

    @property
    def priority(self):
        """Gets the priority of this AndroidConfig.

        Message priority. Can take \"normal\" and \"high\" values. For more information, see [Setting the priority of a message](https://goo.gl/GjONJv).

        :return: The priority of this AndroidConfig.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this AndroidConfig.

        Message priority. Can take \"normal\" and \"high\" values. For more information, see [Setting the priority of a message](https://goo.gl/GjONJv).

        :param priority: The priority of this AndroidConfig.
        :type priority: str
        """
        allowed_values = ["NORMAL", "HIGH"]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def restricted_package_name(self):
        """Gets the restricted_package_name of this AndroidConfig.

        Package name of the application where the registration token must match in order to receive the message.

        :return: The restricted_package_name of this AndroidConfig.
        :rtype: str
        """
        return self._restricted_package_name

    @restricted_package_name.setter
    def restricted_package_name(self, restricted_package_name):
        """Sets the restricted_package_name of this AndroidConfig.

        Package name of the application where the registration token must match in order to receive the message.

        :param restricted_package_name: The restricted_package_name of this AndroidConfig.
        :type restricted_package_name: str
        """

        self._restricted_package_name = restricted_package_name

    @property
    def ttl(self):
        """Gets the ttl of this AndroidConfig.

        How long (in seconds) the message should be kept in FCM storage if the device is offline. The maximum time to live supported is 4 weeks, and the default value is 4 weeks if not set. Set it to 0 if want to send the message immediately. In JSON format, the Duration type is encoded as a string rather than an object, where the string ends in the suffix \"s\" (indicating seconds) and is preceded by the number of seconds, with nanoseconds expressed as fractional seconds. For example, 3 seconds with 0 nanoseconds should be encoded in JSON format as \"3s\", while 3 seconds and 1 nanosecond should be expressed in JSON format as \"3.000000001s\". The ttl will be rounded down to the nearest second.

        :return: The ttl of this AndroidConfig.
        :rtype: str
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this AndroidConfig.

        How long (in seconds) the message should be kept in FCM storage if the device is offline. The maximum time to live supported is 4 weeks, and the default value is 4 weeks if not set. Set it to 0 if want to send the message immediately. In JSON format, the Duration type is encoded as a string rather than an object, where the string ends in the suffix \"s\" (indicating seconds) and is preceded by the number of seconds, with nanoseconds expressed as fractional seconds. For example, 3 seconds with 0 nanoseconds should be encoded in JSON format as \"3s\", while 3 seconds and 1 nanosecond should be expressed in JSON format as \"3.000000001s\". The ttl will be rounded down to the nearest second.

        :param ttl: The ttl of this AndroidConfig.
        :type ttl: str
        """

        self._ttl = ttl
