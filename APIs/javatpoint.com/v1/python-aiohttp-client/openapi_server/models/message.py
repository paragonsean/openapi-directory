# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.android_config import AndroidConfig
from openapi_server.models.apns_config import ApnsConfig
from openapi_server.models.fcm_options import FcmOptions
from openapi_server.models.notification import Notification
from openapi_server.models.webpush_config import WebpushConfig
from openapi_server import util


class Message(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, android: AndroidConfig=None, apns: ApnsConfig=None, condition: str=None, data: Dict[str, str]=None, fcm_options: FcmOptions=None, name: str=None, notification: Notification=None, token: str=None, topic: str=None, webpush: WebpushConfig=None):
        """Message - a model defined in OpenAPI

        :param android: The android of this Message.
        :param apns: The apns of this Message.
        :param condition: The condition of this Message.
        :param data: The data of this Message.
        :param fcm_options: The fcm_options of this Message.
        :param name: The name of this Message.
        :param notification: The notification of this Message.
        :param token: The token of this Message.
        :param topic: The topic of this Message.
        :param webpush: The webpush of this Message.
        """
        self.openapi_types = {
            'android': AndroidConfig,
            'apns': ApnsConfig,
            'condition': str,
            'data': Dict[str, str],
            'fcm_options': FcmOptions,
            'name': str,
            'notification': Notification,
            'token': str,
            'topic': str,
            'webpush': WebpushConfig
        }

        self.attribute_map = {
            'android': 'android',
            'apns': 'apns',
            'condition': 'condition',
            'data': 'data',
            'fcm_options': 'fcmOptions',
            'name': 'name',
            'notification': 'notification',
            'token': 'token',
            'topic': 'topic',
            'webpush': 'webpush'
        }

        self._android = android
        self._apns = apns
        self._condition = condition
        self._data = data
        self._fcm_options = fcm_options
        self._name = name
        self._notification = notification
        self._token = token
        self._topic = topic
        self._webpush = webpush

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Message':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Message of this Message.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def android(self):
        """Gets the android of this Message.


        :return: The android of this Message.
        :rtype: AndroidConfig
        """
        return self._android

    @android.setter
    def android(self, android):
        """Sets the android of this Message.


        :param android: The android of this Message.
        :type android: AndroidConfig
        """

        self._android = android

    @property
    def apns(self):
        """Gets the apns of this Message.


        :return: The apns of this Message.
        :rtype: ApnsConfig
        """
        return self._apns

    @apns.setter
    def apns(self, apns):
        """Sets the apns of this Message.


        :param apns: The apns of this Message.
        :type apns: ApnsConfig
        """

        self._apns = apns

    @property
    def condition(self):
        """Gets the condition of this Message.

        Condition to send a message to, e.g. \"'foo' in topics && 'bar' in topics\".

        :return: The condition of this Message.
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this Message.

        Condition to send a message to, e.g. \"'foo' in topics && 'bar' in topics\".

        :param condition: The condition of this Message.
        :type condition: str
        """

        self._condition = condition

    @property
    def data(self):
        """Gets the data of this Message.

        Input only. Arbitrary key/value payload, which must be UTF-8 encoded. The key should not be a reserved word (\"from\", \"message_type\", or any word starting with \"google\" or \"gcm\"). When sending payloads containing only data fields to iOS devices, only normal priority (`\"apns-priority\": \"5\"`) is allowed in [`ApnsConfig`](/docs/reference/fcm/rest/v1/projects.messages#apnsconfig).

        :return: The data of this Message.
        :rtype: Dict[str, str]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Message.

        Input only. Arbitrary key/value payload, which must be UTF-8 encoded. The key should not be a reserved word (\"from\", \"message_type\", or any word starting with \"google\" or \"gcm\"). When sending payloads containing only data fields to iOS devices, only normal priority (`\"apns-priority\": \"5\"`) is allowed in [`ApnsConfig`](/docs/reference/fcm/rest/v1/projects.messages#apnsconfig).

        :param data: The data of this Message.
        :type data: Dict[str, str]
        """

        self._data = data

    @property
    def fcm_options(self):
        """Gets the fcm_options of this Message.


        :return: The fcm_options of this Message.
        :rtype: FcmOptions
        """
        return self._fcm_options

    @fcm_options.setter
    def fcm_options(self, fcm_options):
        """Sets the fcm_options of this Message.


        :param fcm_options: The fcm_options of this Message.
        :type fcm_options: FcmOptions
        """

        self._fcm_options = fcm_options

    @property
    def name(self):
        """Gets the name of this Message.

        Output Only. The identifier of the message sent, in the format of `projects/*/messages/{message_id}`.

        :return: The name of this Message.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Message.

        Output Only. The identifier of the message sent, in the format of `projects/*/messages/{message_id}`.

        :param name: The name of this Message.
        :type name: str
        """

        self._name = name

    @property
    def notification(self):
        """Gets the notification of this Message.


        :return: The notification of this Message.
        :rtype: Notification
        """
        return self._notification

    @notification.setter
    def notification(self, notification):
        """Sets the notification of this Message.


        :param notification: The notification of this Message.
        :type notification: Notification
        """

        self._notification = notification

    @property
    def token(self):
        """Gets the token of this Message.

        Registration token to send a message to.

        :return: The token of this Message.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Message.

        Registration token to send a message to.

        :param token: The token of this Message.
        :type token: str
        """

        self._token = token

    @property
    def topic(self):
        """Gets the topic of this Message.

        Topic name to send a message to, e.g. \"weather\". Note: \"/topics/\" prefix should not be provided.

        :return: The topic of this Message.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this Message.

        Topic name to send a message to, e.g. \"weather\". Note: \"/topics/\" prefix should not be provided.

        :param topic: The topic of this Message.
        :type topic: str
        """

        self._topic = topic

    @property
    def webpush(self):
        """Gets the webpush of this Message.


        :return: The webpush of this Message.
        :rtype: WebpushConfig
        """
        return self._webpush

    @webpush.setter
    def webpush(self, webpush):
        """Sets the webpush of this Message.


        :param webpush: The webpush of this Message.
        :type webpush: WebpushConfig
        """

        self._webpush = webpush
