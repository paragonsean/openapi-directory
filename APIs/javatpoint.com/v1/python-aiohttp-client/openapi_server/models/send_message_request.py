# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message import Message
from openapi_server import util


class SendMessageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: Message=None, validate_only: bool=None):
        """SendMessageRequest - a model defined in OpenAPI

        :param message: The message of this SendMessageRequest.
        :param validate_only: The validate_only of this SendMessageRequest.
        """
        self.openapi_types = {
            'message': Message,
            'validate_only': bool
        }

        self.attribute_map = {
            'message': 'message',
            'validate_only': 'validateOnly'
        }

        self._message = message
        self._validate_only = validate_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendMessageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SendMessageRequest of this SendMessageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this SendMessageRequest.


        :return: The message of this SendMessageRequest.
        :rtype: Message
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this SendMessageRequest.


        :param message: The message of this SendMessageRequest.
        :type message: Message
        """

        self._message = message

    @property
    def validate_only(self):
        """Gets the validate_only of this SendMessageRequest.

        Flag for testing the request without actually delivering the message.

        :return: The validate_only of this SendMessageRequest.
        :rtype: bool
        """
        return self._validate_only

    @validate_only.setter
    def validate_only(self, validate_only):
        """Sets the validate_only of this SendMessageRequest.

        Flag for testing the request without actually delivering the message.

        :param validate_only: The validate_only of this SendMessageRequest.
        :type validate_only: bool
        """

        self._validate_only = validate_only
