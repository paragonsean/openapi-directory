/*
 * Firebase Cloud Messaging API
 * FCM send API that provides a cross-platform messaging solution to reliably deliver messages at no cost.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.AndroidFcmOptions;
import org.openapitools.client.model.AndroidNotification;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Android specific options for messages sent through [FCM connection server](https://goo.gl/4GLdUl).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:18.469964-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AndroidConfig {
  public static final String SERIALIZED_NAME_COLLAPSE_KEY = "collapseKey";
  @SerializedName(SERIALIZED_NAME_COLLAPSE_KEY)
  private String collapseKey;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Map<String, String> data = new HashMap<>();

  public static final String SERIALIZED_NAME_DIRECT_BOOT_OK = "directBootOk";
  @SerializedName(SERIALIZED_NAME_DIRECT_BOOT_OK)
  private Boolean directBootOk;

  public static final String SERIALIZED_NAME_FCM_OPTIONS = "fcmOptions";
  @SerializedName(SERIALIZED_NAME_FCM_OPTIONS)
  private AndroidFcmOptions fcmOptions;

  public static final String SERIALIZED_NAME_NOTIFICATION = "notification";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION)
  private AndroidNotification notification;

  /**
   * Message priority. Can take \&quot;normal\&quot; and \&quot;high\&quot; values. For more information, see [Setting the priority of a message](https://goo.gl/GjONJv).
   */
  @JsonAdapter(PriorityEnum.Adapter.class)
  public enum PriorityEnum {
    NORMAL("NORMAL"),
    
    HIGH("HIGH");

    private String value;

    PriorityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PriorityEnum fromValue(String value) {
      for (PriorityEnum b : PriorityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PriorityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PriorityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PriorityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PriorityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PriorityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private PriorityEnum priority;

  public static final String SERIALIZED_NAME_RESTRICTED_PACKAGE_NAME = "restrictedPackageName";
  @SerializedName(SERIALIZED_NAME_RESTRICTED_PACKAGE_NAME)
  private String restrictedPackageName;

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  private String ttl;

  public AndroidConfig() {
  }

  public AndroidConfig collapseKey(String collapseKey) {
    this.collapseKey = collapseKey;
    return this;
  }

  /**
   * An identifier of a group of messages that can be collapsed, so that only the last message gets sent when delivery can be resumed. A maximum of 4 different collapse keys is allowed at any given time.
   * @return collapseKey
   */
  @javax.annotation.Nullable
  public String getCollapseKey() {
    return collapseKey;
  }

  public void setCollapseKey(String collapseKey) {
    this.collapseKey = collapseKey;
  }


  public AndroidConfig data(Map<String, String> data) {
    this.data = data;
    return this;
  }

  public AndroidConfig putDataItem(String key, String dataItem) {
    if (this.data == null) {
      this.data = new HashMap<>();
    }
    this.data.put(key, dataItem);
    return this;
  }

  /**
   * Arbitrary key/value payload. If present, it will override google.firebase.fcm.v1.Message.data.
   * @return data
   */
  @javax.annotation.Nullable
  public Map<String, String> getData() {
    return data;
  }

  public void setData(Map<String, String> data) {
    this.data = data;
  }


  public AndroidConfig directBootOk(Boolean directBootOk) {
    this.directBootOk = directBootOk;
    return this;
  }

  /**
   * If set to true, messages will be allowed to be delivered to the app while the device is in direct boot mode. See [Support Direct Boot mode](https://developer.android.com/training/articles/direct-boot).
   * @return directBootOk
   */
  @javax.annotation.Nullable
  public Boolean getDirectBootOk() {
    return directBootOk;
  }

  public void setDirectBootOk(Boolean directBootOk) {
    this.directBootOk = directBootOk;
  }


  public AndroidConfig fcmOptions(AndroidFcmOptions fcmOptions) {
    this.fcmOptions = fcmOptions;
    return this;
  }

  /**
   * Get fcmOptions
   * @return fcmOptions
   */
  @javax.annotation.Nullable
  public AndroidFcmOptions getFcmOptions() {
    return fcmOptions;
  }

  public void setFcmOptions(AndroidFcmOptions fcmOptions) {
    this.fcmOptions = fcmOptions;
  }


  public AndroidConfig notification(AndroidNotification notification) {
    this.notification = notification;
    return this;
  }

  /**
   * Get notification
   * @return notification
   */
  @javax.annotation.Nullable
  public AndroidNotification getNotification() {
    return notification;
  }

  public void setNotification(AndroidNotification notification) {
    this.notification = notification;
  }


  public AndroidConfig priority(PriorityEnum priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Message priority. Can take \&quot;normal\&quot; and \&quot;high\&quot; values. For more information, see [Setting the priority of a message](https://goo.gl/GjONJv).
   * @return priority
   */
  @javax.annotation.Nullable
  public PriorityEnum getPriority() {
    return priority;
  }

  public void setPriority(PriorityEnum priority) {
    this.priority = priority;
  }


  public AndroidConfig restrictedPackageName(String restrictedPackageName) {
    this.restrictedPackageName = restrictedPackageName;
    return this;
  }

  /**
   * Package name of the application where the registration token must match in order to receive the message.
   * @return restrictedPackageName
   */
  @javax.annotation.Nullable
  public String getRestrictedPackageName() {
    return restrictedPackageName;
  }

  public void setRestrictedPackageName(String restrictedPackageName) {
    this.restrictedPackageName = restrictedPackageName;
  }


  public AndroidConfig ttl(String ttl) {
    this.ttl = ttl;
    return this;
  }

  /**
   * How long (in seconds) the message should be kept in FCM storage if the device is offline. The maximum time to live supported is 4 weeks, and the default value is 4 weeks if not set. Set it to 0 if want to send the message immediately. In JSON format, the Duration type is encoded as a string rather than an object, where the string ends in the suffix \&quot;s\&quot; (indicating seconds) and is preceded by the number of seconds, with nanoseconds expressed as fractional seconds. For example, 3 seconds with 0 nanoseconds should be encoded in JSON format as \&quot;3s\&quot;, while 3 seconds and 1 nanosecond should be expressed in JSON format as \&quot;3.000000001s\&quot;. The ttl will be rounded down to the nearest second.
   * @return ttl
   */
  @javax.annotation.Nullable
  public String getTtl() {
    return ttl;
  }

  public void setTtl(String ttl) {
    this.ttl = ttl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AndroidConfig androidConfig = (AndroidConfig) o;
    return Objects.equals(this.collapseKey, androidConfig.collapseKey) &&
        Objects.equals(this.data, androidConfig.data) &&
        Objects.equals(this.directBootOk, androidConfig.directBootOk) &&
        Objects.equals(this.fcmOptions, androidConfig.fcmOptions) &&
        Objects.equals(this.notification, androidConfig.notification) &&
        Objects.equals(this.priority, androidConfig.priority) &&
        Objects.equals(this.restrictedPackageName, androidConfig.restrictedPackageName) &&
        Objects.equals(this.ttl, androidConfig.ttl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collapseKey, data, directBootOk, fcmOptions, notification, priority, restrictedPackageName, ttl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AndroidConfig {\n");
    sb.append("    collapseKey: ").append(toIndentedString(collapseKey)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    directBootOk: ").append(toIndentedString(directBootOk)).append("\n");
    sb.append("    fcmOptions: ").append(toIndentedString(fcmOptions)).append("\n");
    sb.append("    notification: ").append(toIndentedString(notification)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    restrictedPackageName: ").append(toIndentedString(restrictedPackageName)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("collapseKey");
    openapiFields.add("data");
    openapiFields.add("directBootOk");
    openapiFields.add("fcmOptions");
    openapiFields.add("notification");
    openapiFields.add("priority");
    openapiFields.add("restrictedPackageName");
    openapiFields.add("ttl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AndroidConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AndroidConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AndroidConfig is not found in the empty JSON string", AndroidConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AndroidConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AndroidConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("collapseKey") != null && !jsonObj.get("collapseKey").isJsonNull()) && !jsonObj.get("collapseKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collapseKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collapseKey").toString()));
      }
      // validate the optional field `fcmOptions`
      if (jsonObj.get("fcmOptions") != null && !jsonObj.get("fcmOptions").isJsonNull()) {
        AndroidFcmOptions.validateJsonElement(jsonObj.get("fcmOptions"));
      }
      // validate the optional field `notification`
      if (jsonObj.get("notification") != null && !jsonObj.get("notification").isJsonNull()) {
        AndroidNotification.validateJsonElement(jsonObj.get("notification"));
      }
      if ((jsonObj.get("priority") != null && !jsonObj.get("priority").isJsonNull()) && !jsonObj.get("priority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priority").toString()));
      }
      // validate the optional field `priority`
      if (jsonObj.get("priority") != null && !jsonObj.get("priority").isJsonNull()) {
        PriorityEnum.validateJsonElement(jsonObj.get("priority"));
      }
      if ((jsonObj.get("restrictedPackageName") != null && !jsonObj.get("restrictedPackageName").isJsonNull()) && !jsonObj.get("restrictedPackageName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `restrictedPackageName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("restrictedPackageName").toString()));
      }
      if ((jsonObj.get("ttl") != null && !jsonObj.get("ttl").isJsonNull()) && !jsonObj.get("ttl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ttl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ttl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AndroidConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AndroidConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AndroidConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AndroidConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<AndroidConfig>() {
           @Override
           public void write(JsonWriter out, AndroidConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AndroidConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AndroidConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AndroidConfig
   * @throws IOException if the JSON string is invalid with respect to AndroidConfig
   */
  public static AndroidConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AndroidConfig.class);
  }

  /**
   * Convert an instance of AndroidConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

