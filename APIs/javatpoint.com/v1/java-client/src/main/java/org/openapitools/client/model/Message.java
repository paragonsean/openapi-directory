/*
 * Firebase Cloud Messaging API
 * FCM send API that provides a cross-platform messaging solution to reliably deliver messages at no cost.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.AndroidConfig;
import org.openapitools.client.model.ApnsConfig;
import org.openapitools.client.model.FcmOptions;
import org.openapitools.client.model.Notification;
import org.openapitools.client.model.WebpushConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Message to send by Firebase Cloud Messaging Service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:18.469964-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Message {
  public static final String SERIALIZED_NAME_ANDROID = "android";
  @SerializedName(SERIALIZED_NAME_ANDROID)
  private AndroidConfig android;

  public static final String SERIALIZED_NAME_APNS = "apns";
  @SerializedName(SERIALIZED_NAME_APNS)
  private ApnsConfig apns;

  public static final String SERIALIZED_NAME_CONDITION = "condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  private String condition;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Map<String, String> data = new HashMap<>();

  public static final String SERIALIZED_NAME_FCM_OPTIONS = "fcmOptions";
  @SerializedName(SERIALIZED_NAME_FCM_OPTIONS)
  private FcmOptions fcmOptions;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTIFICATION = "notification";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION)
  private Notification notification;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_TOPIC = "topic";
  @SerializedName(SERIALIZED_NAME_TOPIC)
  private String topic;

  public static final String SERIALIZED_NAME_WEBPUSH = "webpush";
  @SerializedName(SERIALIZED_NAME_WEBPUSH)
  private WebpushConfig webpush;

  public Message() {
  }

  public Message android(AndroidConfig android) {
    this.android = android;
    return this;
  }

  /**
   * Get android
   * @return android
   */
  @javax.annotation.Nullable
  public AndroidConfig getAndroid() {
    return android;
  }

  public void setAndroid(AndroidConfig android) {
    this.android = android;
  }


  public Message apns(ApnsConfig apns) {
    this.apns = apns;
    return this;
  }

  /**
   * Get apns
   * @return apns
   */
  @javax.annotation.Nullable
  public ApnsConfig getApns() {
    return apns;
  }

  public void setApns(ApnsConfig apns) {
    this.apns = apns;
  }


  public Message condition(String condition) {
    this.condition = condition;
    return this;
  }

  /**
   * Condition to send a message to, e.g. \&quot;&#39;foo&#39; in topics &amp;&amp; &#39;bar&#39; in topics\&quot;.
   * @return condition
   */
  @javax.annotation.Nullable
  public String getCondition() {
    return condition;
  }

  public void setCondition(String condition) {
    this.condition = condition;
  }


  public Message data(Map<String, String> data) {
    this.data = data;
    return this;
  }

  public Message putDataItem(String key, String dataItem) {
    if (this.data == null) {
      this.data = new HashMap<>();
    }
    this.data.put(key, dataItem);
    return this;
  }

  /**
   * Input only. Arbitrary key/value payload, which must be UTF-8 encoded. The key should not be a reserved word (\&quot;from\&quot;, \&quot;message_type\&quot;, or any word starting with \&quot;google\&quot; or \&quot;gcm\&quot;). When sending payloads containing only data fields to iOS devices, only normal priority (&#x60;\&quot;apns-priority\&quot;: \&quot;5\&quot;&#x60;) is allowed in [&#x60;ApnsConfig&#x60;](/docs/reference/fcm/rest/v1/projects.messages#apnsconfig).
   * @return data
   */
  @javax.annotation.Nullable
  public Map<String, String> getData() {
    return data;
  }

  public void setData(Map<String, String> data) {
    this.data = data;
  }


  public Message fcmOptions(FcmOptions fcmOptions) {
    this.fcmOptions = fcmOptions;
    return this;
  }

  /**
   * Get fcmOptions
   * @return fcmOptions
   */
  @javax.annotation.Nullable
  public FcmOptions getFcmOptions() {
    return fcmOptions;
  }

  public void setFcmOptions(FcmOptions fcmOptions) {
    this.fcmOptions = fcmOptions;
  }


  public Message name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Output Only. The identifier of the message sent, in the format of &#x60;projects/_*_/messages/{message_id}&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Message notification(Notification notification) {
    this.notification = notification;
    return this;
  }

  /**
   * Get notification
   * @return notification
   */
  @javax.annotation.Nullable
  public Notification getNotification() {
    return notification;
  }

  public void setNotification(Notification notification) {
    this.notification = notification;
  }


  public Message token(String token) {
    this.token = token;
    return this;
  }

  /**
   * Registration token to send a message to.
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }


  public Message topic(String topic) {
    this.topic = topic;
    return this;
  }

  /**
   * Topic name to send a message to, e.g. \&quot;weather\&quot;. Note: \&quot;/topics/\&quot; prefix should not be provided.
   * @return topic
   */
  @javax.annotation.Nullable
  public String getTopic() {
    return topic;
  }

  public void setTopic(String topic) {
    this.topic = topic;
  }


  public Message webpush(WebpushConfig webpush) {
    this.webpush = webpush;
    return this;
  }

  /**
   * Get webpush
   * @return webpush
   */
  @javax.annotation.Nullable
  public WebpushConfig getWebpush() {
    return webpush;
  }

  public void setWebpush(WebpushConfig webpush) {
    this.webpush = webpush;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Message message = (Message) o;
    return Objects.equals(this.android, message.android) &&
        Objects.equals(this.apns, message.apns) &&
        Objects.equals(this.condition, message.condition) &&
        Objects.equals(this.data, message.data) &&
        Objects.equals(this.fcmOptions, message.fcmOptions) &&
        Objects.equals(this.name, message.name) &&
        Objects.equals(this.notification, message.notification) &&
        Objects.equals(this.token, message.token) &&
        Objects.equals(this.topic, message.topic) &&
        Objects.equals(this.webpush, message.webpush);
  }

  @Override
  public int hashCode() {
    return Objects.hash(android, apns, condition, data, fcmOptions, name, notification, token, topic, webpush);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Message {\n");
    sb.append("    android: ").append(toIndentedString(android)).append("\n");
    sb.append("    apns: ").append(toIndentedString(apns)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    fcmOptions: ").append(toIndentedString(fcmOptions)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notification: ").append(toIndentedString(notification)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    topic: ").append(toIndentedString(topic)).append("\n");
    sb.append("    webpush: ").append(toIndentedString(webpush)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("android");
    openapiFields.add("apns");
    openapiFields.add("condition");
    openapiFields.add("data");
    openapiFields.add("fcmOptions");
    openapiFields.add("name");
    openapiFields.add("notification");
    openapiFields.add("token");
    openapiFields.add("topic");
    openapiFields.add("webpush");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Message
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Message.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Message is not found in the empty JSON string", Message.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Message.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Message` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `android`
      if (jsonObj.get("android") != null && !jsonObj.get("android").isJsonNull()) {
        AndroidConfig.validateJsonElement(jsonObj.get("android"));
      }
      // validate the optional field `apns`
      if (jsonObj.get("apns") != null && !jsonObj.get("apns").isJsonNull()) {
        ApnsConfig.validateJsonElement(jsonObj.get("apns"));
      }
      if ((jsonObj.get("condition") != null && !jsonObj.get("condition").isJsonNull()) && !jsonObj.get("condition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `condition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("condition").toString()));
      }
      // validate the optional field `fcmOptions`
      if (jsonObj.get("fcmOptions") != null && !jsonObj.get("fcmOptions").isJsonNull()) {
        FcmOptions.validateJsonElement(jsonObj.get("fcmOptions"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `notification`
      if (jsonObj.get("notification") != null && !jsonObj.get("notification").isJsonNull()) {
        Notification.validateJsonElement(jsonObj.get("notification"));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("topic") != null && !jsonObj.get("topic").isJsonNull()) && !jsonObj.get("topic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic").toString()));
      }
      // validate the optional field `webpush`
      if (jsonObj.get("webpush") != null && !jsonObj.get("webpush").isJsonNull()) {
        WebpushConfig.validateJsonElement(jsonObj.get("webpush"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Message.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Message' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Message> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Message.class));

       return (TypeAdapter<T>) new TypeAdapter<Message>() {
           @Override
           public void write(JsonWriter out, Message value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Message read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Message given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Message
   * @throws IOException if the JSON string is invalid with respect to Message
   */
  public static Message fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Message.class);
  }

  /**
   * Convert an instance of Message to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

