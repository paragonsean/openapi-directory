/*
 * Firebase Cloud Messaging API
 * FCM send API that provides a cross-platform messaging solution to reliably deliver messages at no cost.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.WebpushFcmOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * [Webpush protocol](https://tools.ietf.org/html/rfc8030) options.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:18.469964-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WebpushConfig {
  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Map<String, String> data = new HashMap<>();

  public static final String SERIALIZED_NAME_FCM_OPTIONS = "fcmOptions";
  @SerializedName(SERIALIZED_NAME_FCM_OPTIONS)
  private WebpushFcmOptions fcmOptions;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private Map<String, String> headers = new HashMap<>();

  public static final String SERIALIZED_NAME_NOTIFICATION = "notification";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION)
  private Map<String, Object> notification = new HashMap<>();

  public WebpushConfig() {
  }

  public WebpushConfig data(Map<String, String> data) {
    this.data = data;
    return this;
  }

  public WebpushConfig putDataItem(String key, String dataItem) {
    if (this.data == null) {
      this.data = new HashMap<>();
    }
    this.data.put(key, dataItem);
    return this;
  }

  /**
   * Arbitrary key/value payload. If present, it will override google.firebase.fcm.v1.Message.data.
   * @return data
   */
  @javax.annotation.Nullable
  public Map<String, String> getData() {
    return data;
  }

  public void setData(Map<String, String> data) {
    this.data = data;
  }


  public WebpushConfig fcmOptions(WebpushFcmOptions fcmOptions) {
    this.fcmOptions = fcmOptions;
    return this;
  }

  /**
   * Get fcmOptions
   * @return fcmOptions
   */
  @javax.annotation.Nullable
  public WebpushFcmOptions getFcmOptions() {
    return fcmOptions;
  }

  public void setFcmOptions(WebpushFcmOptions fcmOptions) {
    this.fcmOptions = fcmOptions;
  }


  public WebpushConfig headers(Map<String, String> headers) {
    this.headers = headers;
    return this;
  }

  public WebpushConfig putHeadersItem(String key, String headersItem) {
    if (this.headers == null) {
      this.headers = new HashMap<>();
    }
    this.headers.put(key, headersItem);
    return this;
  }

  /**
   * HTTP headers defined in webpush protocol. Refer to [Webpush protocol](https://tools.ietf.org/html/rfc8030#section-5) for supported headers, e.g. \&quot;TTL\&quot;: \&quot;15\&quot;.
   * @return headers
   */
  @javax.annotation.Nullable
  public Map<String, String> getHeaders() {
    return headers;
  }

  public void setHeaders(Map<String, String> headers) {
    this.headers = headers;
  }


  public WebpushConfig notification(Map<String, Object> notification) {
    this.notification = notification;
    return this;
  }

  public WebpushConfig putNotificationItem(String key, Object notificationItem) {
    if (this.notification == null) {
      this.notification = new HashMap<>();
    }
    this.notification.put(key, notificationItem);
    return this;
  }

  /**
   * Web Notification options as a JSON object. Supports Notification instance properties as defined in [Web Notification API](https://developer.mozilla.org/en-US/docs/Web/API/Notification). If present, \&quot;title\&quot; and \&quot;body\&quot; fields override [google.firebase.fcm.v1.Notification.title] and [google.firebase.fcm.v1.Notification.body].
   * @return notification
   */
  @javax.annotation.Nullable
  public Map<String, Object> getNotification() {
    return notification;
  }

  public void setNotification(Map<String, Object> notification) {
    this.notification = notification;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebpushConfig webpushConfig = (WebpushConfig) o;
    return Objects.equals(this.data, webpushConfig.data) &&
        Objects.equals(this.fcmOptions, webpushConfig.fcmOptions) &&
        Objects.equals(this.headers, webpushConfig.headers) &&
        Objects.equals(this.notification, webpushConfig.notification);
  }

  @Override
  public int hashCode() {
    return Objects.hash(data, fcmOptions, headers, notification);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebpushConfig {\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    fcmOptions: ").append(toIndentedString(fcmOptions)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    notification: ").append(toIndentedString(notification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("data");
    openapiFields.add("fcmOptions");
    openapiFields.add("headers");
    openapiFields.add("notification");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebpushConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebpushConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebpushConfig is not found in the empty JSON string", WebpushConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebpushConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebpushConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `fcmOptions`
      if (jsonObj.get("fcmOptions") != null && !jsonObj.get("fcmOptions").isJsonNull()) {
        WebpushFcmOptions.validateJsonElement(jsonObj.get("fcmOptions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebpushConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebpushConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebpushConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebpushConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<WebpushConfig>() {
           @Override
           public void write(JsonWriter out, WebpushConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebpushConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebpushConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebpushConfig
   * @throws IOException if the JSON string is invalid with respect to WebpushConfig
   */
  public static WebpushConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebpushConfig.class);
  }

  /**
   * Convert an instance of WebpushConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

