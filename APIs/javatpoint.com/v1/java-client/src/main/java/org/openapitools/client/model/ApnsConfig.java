/*
 * Firebase Cloud Messaging API
 * FCM send API that provides a cross-platform messaging solution to reliably deliver messages at no cost.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ApnsFcmOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * [Apple Push Notification Service](https://goo.gl/MXRTPa) specific options.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:18.469964-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApnsConfig {
  public static final String SERIALIZED_NAME_FCM_OPTIONS = "fcmOptions";
  @SerializedName(SERIALIZED_NAME_FCM_OPTIONS)
  private ApnsFcmOptions fcmOptions;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private Map<String, String> headers = new HashMap<>();

  public static final String SERIALIZED_NAME_PAYLOAD = "payload";
  @SerializedName(SERIALIZED_NAME_PAYLOAD)
  private Map<String, Object> payload = new HashMap<>();

  public ApnsConfig() {
  }

  public ApnsConfig fcmOptions(ApnsFcmOptions fcmOptions) {
    this.fcmOptions = fcmOptions;
    return this;
  }

  /**
   * Get fcmOptions
   * @return fcmOptions
   */
  @javax.annotation.Nullable
  public ApnsFcmOptions getFcmOptions() {
    return fcmOptions;
  }

  public void setFcmOptions(ApnsFcmOptions fcmOptions) {
    this.fcmOptions = fcmOptions;
  }


  public ApnsConfig headers(Map<String, String> headers) {
    this.headers = headers;
    return this;
  }

  public ApnsConfig putHeadersItem(String key, String headersItem) {
    if (this.headers == null) {
      this.headers = new HashMap<>();
    }
    this.headers.put(key, headersItem);
    return this;
  }

  /**
   * HTTP request headers defined in Apple Push Notification Service. Refer to [APNs request headers](https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/sending_notification_requests_to_apns) for supported headers such as &#x60;apns-expiration&#x60; and &#x60;apns-priority&#x60;. The backend sets a default value for &#x60;apns-expiration&#x60; of 30 days and a default value for &#x60;apns-priority&#x60; of 10 if not explicitly set.
   * @return headers
   */
  @javax.annotation.Nullable
  public Map<String, String> getHeaders() {
    return headers;
  }

  public void setHeaders(Map<String, String> headers) {
    this.headers = headers;
  }


  public ApnsConfig payload(Map<String, Object> payload) {
    this.payload = payload;
    return this;
  }

  public ApnsConfig putPayloadItem(String key, Object payloadItem) {
    if (this.payload == null) {
      this.payload = new HashMap<>();
    }
    this.payload.put(key, payloadItem);
    return this;
  }

  /**
   * APNs payload as a JSON object, including both &#x60;aps&#x60; dictionary and custom payload. See [Payload Key Reference](https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/generating_a_remote_notification). If present, it overrides google.firebase.fcm.v1.Notification.title and google.firebase.fcm.v1.Notification.body.
   * @return payload
   */
  @javax.annotation.Nullable
  public Map<String, Object> getPayload() {
    return payload;
  }

  public void setPayload(Map<String, Object> payload) {
    this.payload = payload;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApnsConfig apnsConfig = (ApnsConfig) o;
    return Objects.equals(this.fcmOptions, apnsConfig.fcmOptions) &&
        Objects.equals(this.headers, apnsConfig.headers) &&
        Objects.equals(this.payload, apnsConfig.payload);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fcmOptions, headers, payload);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApnsConfig {\n");
    sb.append("    fcmOptions: ").append(toIndentedString(fcmOptions)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fcmOptions");
    openapiFields.add("headers");
    openapiFields.add("payload");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApnsConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApnsConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApnsConfig is not found in the empty JSON string", ApnsConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApnsConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApnsConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `fcmOptions`
      if (jsonObj.get("fcmOptions") != null && !jsonObj.get("fcmOptions").isJsonNull()) {
        ApnsFcmOptions.validateJsonElement(jsonObj.get("fcmOptions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApnsConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApnsConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApnsConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApnsConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<ApnsConfig>() {
           @Override
           public void write(JsonWriter out, ApnsConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApnsConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApnsConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApnsConfig
   * @throws IOException if the JSON string is invalid with respect to ApnsConfig
   */
  public static ApnsConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApnsConfig.class);
  }

  /**
   * Convert an instance of ApnsConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

