/*
 * Firebase Cloud Messaging API
 * FCM send API that provides a cross-platform messaging solution to reliably deliver messages at no cost.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LightSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Notification to send to android devices.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:18.469964-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AndroidNotification {
  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_BODY_LOC_ARGS = "bodyLocArgs";
  @SerializedName(SERIALIZED_NAME_BODY_LOC_ARGS)
  private List<String> bodyLocArgs = new ArrayList<>();

  public static final String SERIALIZED_NAME_BODY_LOC_KEY = "bodyLocKey";
  @SerializedName(SERIALIZED_NAME_BODY_LOC_KEY)
  private String bodyLocKey;

  public static final String SERIALIZED_NAME_BYPASS_PROXY_NOTIFICATION = "bypassProxyNotification";
  @SerializedName(SERIALIZED_NAME_BYPASS_PROXY_NOTIFICATION)
  private Boolean bypassProxyNotification;

  public static final String SERIALIZED_NAME_CHANNEL_ID = "channelId";
  @SerializedName(SERIALIZED_NAME_CHANNEL_ID)
  private String channelId;

  public static final String SERIALIZED_NAME_CLICK_ACTION = "clickAction";
  @SerializedName(SERIALIZED_NAME_CLICK_ACTION)
  private String clickAction;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public static final String SERIALIZED_NAME_DEFAULT_LIGHT_SETTINGS = "defaultLightSettings";
  @SerializedName(SERIALIZED_NAME_DEFAULT_LIGHT_SETTINGS)
  private Boolean defaultLightSettings;

  public static final String SERIALIZED_NAME_DEFAULT_SOUND = "defaultSound";
  @SerializedName(SERIALIZED_NAME_DEFAULT_SOUND)
  private Boolean defaultSound;

  public static final String SERIALIZED_NAME_DEFAULT_VIBRATE_TIMINGS = "defaultVibrateTimings";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VIBRATE_TIMINGS)
  private Boolean defaultVibrateTimings;

  public static final String SERIALIZED_NAME_EVENT_TIME = "eventTime";
  @SerializedName(SERIALIZED_NAME_EVENT_TIME)
  private String eventTime;

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private String icon;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_LIGHT_SETTINGS = "lightSettings";
  @SerializedName(SERIALIZED_NAME_LIGHT_SETTINGS)
  private LightSettings lightSettings;

  public static final String SERIALIZED_NAME_LOCAL_ONLY = "localOnly";
  @SerializedName(SERIALIZED_NAME_LOCAL_ONLY)
  private Boolean localOnly;

  public static final String SERIALIZED_NAME_NOTIFICATION_COUNT = "notificationCount";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_COUNT)
  private Integer notificationCount;

  /**
   * Set the relative priority for this notification. Priority is an indication of how much of the user&#39;s attention should be consumed by this notification. Low-priority notifications may be hidden from the user in certain situations, while the user might be interrupted for a higher-priority notification. The effect of setting the same priorities may differ slightly on different platforms. Note this priority differs from &#x60;AndroidMessagePriority&#x60;. This priority is processed by the client after the message has been delivered, whereas [AndroidMessagePriority](https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#androidmessagepriority) is an FCM concept that controls when the message is delivered.
   */
  @JsonAdapter(NotificationPriorityEnum.Adapter.class)
  public enum NotificationPriorityEnum {
    UNSPECIFIED("PRIORITY_UNSPECIFIED"),
    
    MIN("PRIORITY_MIN"),
    
    LOW("PRIORITY_LOW"),
    
    DEFAULT("PRIORITY_DEFAULT"),
    
    HIGH("PRIORITY_HIGH"),
    
    MAX("PRIORITY_MAX");

    private String value;

    NotificationPriorityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NotificationPriorityEnum fromValue(String value) {
      for (NotificationPriorityEnum b : NotificationPriorityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NotificationPriorityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NotificationPriorityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NotificationPriorityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NotificationPriorityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NotificationPriorityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NOTIFICATION_PRIORITY = "notificationPriority";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_PRIORITY)
  private NotificationPriorityEnum notificationPriority;

  public static final String SERIALIZED_NAME_SOUND = "sound";
  @SerializedName(SERIALIZED_NAME_SOUND)
  private String sound;

  public static final String SERIALIZED_NAME_STICKY = "sticky";
  @SerializedName(SERIALIZED_NAME_STICKY)
  private Boolean sticky;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;

  public static final String SERIALIZED_NAME_TICKER = "ticker";
  @SerializedName(SERIALIZED_NAME_TICKER)
  private String ticker;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TITLE_LOC_ARGS = "titleLocArgs";
  @SerializedName(SERIALIZED_NAME_TITLE_LOC_ARGS)
  private List<String> titleLocArgs = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE_LOC_KEY = "titleLocKey";
  @SerializedName(SERIALIZED_NAME_TITLE_LOC_KEY)
  private String titleLocKey;

  public static final String SERIALIZED_NAME_VIBRATE_TIMINGS = "vibrateTimings";
  @SerializedName(SERIALIZED_NAME_VIBRATE_TIMINGS)
  private List<String> vibrateTimings = new ArrayList<>();

  /**
   * Set the [Notification.visibility](https://developer.android.com/reference/android/app/Notification.html#visibility) of the notification.
   */
  @JsonAdapter(VisibilityEnum.Adapter.class)
  public enum VisibilityEnum {
    VISIBILITY_UNSPECIFIED("VISIBILITY_UNSPECIFIED"),
    
    PRIVATE("PRIVATE"),
    
    PUBLIC("PUBLIC"),
    
    SECRET("SECRET");

    private String value;

    VisibilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VisibilityEnum fromValue(String value) {
      for (VisibilityEnum b : VisibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VisibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VisibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VisibilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VisibilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VisibilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VISIBILITY = "visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  private VisibilityEnum visibility;

  public AndroidNotification() {
  }

  public AndroidNotification body(String body) {
    this.body = body;
    return this;
  }

  /**
   * The notification&#39;s body text. If present, it will override google.firebase.fcm.v1.Notification.body.
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public AndroidNotification bodyLocArgs(List<String> bodyLocArgs) {
    this.bodyLocArgs = bodyLocArgs;
    return this;
  }

  public AndroidNotification addBodyLocArgsItem(String bodyLocArgsItem) {
    if (this.bodyLocArgs == null) {
      this.bodyLocArgs = new ArrayList<>();
    }
    this.bodyLocArgs.add(bodyLocArgsItem);
    return this;
  }

  /**
   * Variable string values to be used in place of the format specifiers in body_loc_key to use to localize the body text to the user&#39;s current localization. See [Formatting and Styling](https://goo.gl/MalYE3) for more information.
   * @return bodyLocArgs
   */
  @javax.annotation.Nullable
  public List<String> getBodyLocArgs() {
    return bodyLocArgs;
  }

  public void setBodyLocArgs(List<String> bodyLocArgs) {
    this.bodyLocArgs = bodyLocArgs;
  }


  public AndroidNotification bodyLocKey(String bodyLocKey) {
    this.bodyLocKey = bodyLocKey;
    return this;
  }

  /**
   * The key to the body string in the app&#39;s string resources to use to localize the body text to the user&#39;s current localization. See [String Resources](https://goo.gl/NdFZGI) for more information.
   * @return bodyLocKey
   */
  @javax.annotation.Nullable
  public String getBodyLocKey() {
    return bodyLocKey;
  }

  public void setBodyLocKey(String bodyLocKey) {
    this.bodyLocKey = bodyLocKey;
  }


  public AndroidNotification bypassProxyNotification(Boolean bypassProxyNotification) {
    this.bypassProxyNotification = bypassProxyNotification;
    return this;
  }

  /**
   * If set, display notifications delivered to the device will be handled by the app instead of the proxy.
   * @return bypassProxyNotification
   */
  @javax.annotation.Nullable
  public Boolean getBypassProxyNotification() {
    return bypassProxyNotification;
  }

  public void setBypassProxyNotification(Boolean bypassProxyNotification) {
    this.bypassProxyNotification = bypassProxyNotification;
  }


  public AndroidNotification channelId(String channelId) {
    this.channelId = channelId;
    return this;
  }

  /**
   * The [notification&#39;s channel id](https://developer.android.com/guide/topics/ui/notifiers/notifications#ManageChannels) (new in Android O). The app must create a channel with this channel ID before any notification with this channel ID is received. If you don&#39;t send this channel ID in the request, or if the channel ID provided has not yet been created by the app, FCM uses the channel ID specified in the app manifest.
   * @return channelId
   */
  @javax.annotation.Nullable
  public String getChannelId() {
    return channelId;
  }

  public void setChannelId(String channelId) {
    this.channelId = channelId;
  }


  public AndroidNotification clickAction(String clickAction) {
    this.clickAction = clickAction;
    return this;
  }

  /**
   * The action associated with a user click on the notification. If specified, an activity with a matching intent filter is launched when a user clicks on the notification.
   * @return clickAction
   */
  @javax.annotation.Nullable
  public String getClickAction() {
    return clickAction;
  }

  public void setClickAction(String clickAction) {
    this.clickAction = clickAction;
  }


  public AndroidNotification color(String color) {
    this.color = color;
    return this;
  }

  /**
   * The notification&#39;s icon color, expressed in #rrggbb format.
   * @return color
   */
  @javax.annotation.Nullable
  public String getColor() {
    return color;
  }

  public void setColor(String color) {
    this.color = color;
  }


  public AndroidNotification defaultLightSettings(Boolean defaultLightSettings) {
    this.defaultLightSettings = defaultLightSettings;
    return this;
  }

  /**
   * If set to true, use the Android framework&#39;s default LED light settings for the notification. Default values are specified in [config.xml](https://android.googlesource.com/platform/frameworks/base/+/master/core/res/res/values/config.xml). If &#x60;default_light_settings&#x60; is set to true and &#x60;light_settings&#x60; is also set, the user-specified &#x60;light_settings&#x60; is used instead of the default value.
   * @return defaultLightSettings
   */
  @javax.annotation.Nullable
  public Boolean getDefaultLightSettings() {
    return defaultLightSettings;
  }

  public void setDefaultLightSettings(Boolean defaultLightSettings) {
    this.defaultLightSettings = defaultLightSettings;
  }


  public AndroidNotification defaultSound(Boolean defaultSound) {
    this.defaultSound = defaultSound;
    return this;
  }

  /**
   * If set to true, use the Android framework&#39;s default sound for the notification. Default values are specified in [config.xml](https://android.googlesource.com/platform/frameworks/base/+/master/core/res/res/values/config.xml).
   * @return defaultSound
   */
  @javax.annotation.Nullable
  public Boolean getDefaultSound() {
    return defaultSound;
  }

  public void setDefaultSound(Boolean defaultSound) {
    this.defaultSound = defaultSound;
  }


  public AndroidNotification defaultVibrateTimings(Boolean defaultVibrateTimings) {
    this.defaultVibrateTimings = defaultVibrateTimings;
    return this;
  }

  /**
   * If set to true, use the Android framework&#39;s default vibrate pattern for the notification. Default values are specified in [config.xml](https://android.googlesource.com/platform/frameworks/base/+/master/core/res/res/values/config.xml). If &#x60;default_vibrate_timings&#x60; is set to true and &#x60;vibrate_timings&#x60; is also set, the default value is used instead of the user-specified &#x60;vibrate_timings&#x60;.
   * @return defaultVibrateTimings
   */
  @javax.annotation.Nullable
  public Boolean getDefaultVibrateTimings() {
    return defaultVibrateTimings;
  }

  public void setDefaultVibrateTimings(Boolean defaultVibrateTimings) {
    this.defaultVibrateTimings = defaultVibrateTimings;
  }


  public AndroidNotification eventTime(String eventTime) {
    this.eventTime = eventTime;
    return this;
  }

  /**
   * Set the time that the event in the notification occurred. Notifications in the panel are sorted by this time. A point in time is represented using [protobuf.Timestamp](https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/Timestamp).
   * @return eventTime
   */
  @javax.annotation.Nullable
  public String getEventTime() {
    return eventTime;
  }

  public void setEventTime(String eventTime) {
    this.eventTime = eventTime;
  }


  public AndroidNotification icon(String icon) {
    this.icon = icon;
    return this;
  }

  /**
   * The notification&#39;s icon. Sets the notification icon to myicon for drawable resource myicon. If you don&#39;t send this key in the request, FCM displays the launcher icon specified in your app manifest.
   * @return icon
   */
  @javax.annotation.Nullable
  public String getIcon() {
    return icon;
  }

  public void setIcon(String icon) {
    this.icon = icon;
  }


  public AndroidNotification image(String image) {
    this.image = image;
    return this;
  }

  /**
   * Contains the URL of an image that is going to be displayed in a notification. If present, it will override google.firebase.fcm.v1.Notification.image.
   * @return image
   */
  @javax.annotation.Nullable
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public AndroidNotification lightSettings(LightSettings lightSettings) {
    this.lightSettings = lightSettings;
    return this;
  }

  /**
   * Get lightSettings
   * @return lightSettings
   */
  @javax.annotation.Nullable
  public LightSettings getLightSettings() {
    return lightSettings;
  }

  public void setLightSettings(LightSettings lightSettings) {
    this.lightSettings = lightSettings;
  }


  public AndroidNotification localOnly(Boolean localOnly) {
    this.localOnly = localOnly;
    return this;
  }

  /**
   * Set whether or not this notification is relevant only to the current device. Some notifications can be bridged to other devices for remote display, such as a Wear OS watch. This hint can be set to recommend this notification not be bridged. See [Wear OS guides](https://developer.android.com/training/wearables/notifications/bridger#existing-method-of-preventing-bridging)
   * @return localOnly
   */
  @javax.annotation.Nullable
  public Boolean getLocalOnly() {
    return localOnly;
  }

  public void setLocalOnly(Boolean localOnly) {
    this.localOnly = localOnly;
  }


  public AndroidNotification notificationCount(Integer notificationCount) {
    this.notificationCount = notificationCount;
    return this;
  }

  /**
   * Sets the number of items this notification represents. May be displayed as a badge count for launchers that support badging.See [Notification Badge](https://developer.android.com/training/notify-user/badges). For example, this might be useful if you&#39;re using just one notification to represent multiple new messages but you want the count here to represent the number of total new messages. If zero or unspecified, systems that support badging use the default, which is to increment a number displayed on the long-press menu each time a new notification arrives.
   * @return notificationCount
   */
  @javax.annotation.Nullable
  public Integer getNotificationCount() {
    return notificationCount;
  }

  public void setNotificationCount(Integer notificationCount) {
    this.notificationCount = notificationCount;
  }


  public AndroidNotification notificationPriority(NotificationPriorityEnum notificationPriority) {
    this.notificationPriority = notificationPriority;
    return this;
  }

  /**
   * Set the relative priority for this notification. Priority is an indication of how much of the user&#39;s attention should be consumed by this notification. Low-priority notifications may be hidden from the user in certain situations, while the user might be interrupted for a higher-priority notification. The effect of setting the same priorities may differ slightly on different platforms. Note this priority differs from &#x60;AndroidMessagePriority&#x60;. This priority is processed by the client after the message has been delivered, whereas [AndroidMessagePriority](https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#androidmessagepriority) is an FCM concept that controls when the message is delivered.
   * @return notificationPriority
   */
  @javax.annotation.Nullable
  public NotificationPriorityEnum getNotificationPriority() {
    return notificationPriority;
  }

  public void setNotificationPriority(NotificationPriorityEnum notificationPriority) {
    this.notificationPriority = notificationPriority;
  }


  public AndroidNotification sound(String sound) {
    this.sound = sound;
    return this;
  }

  /**
   * The sound to play when the device receives the notification. Supports \&quot;default\&quot; or the filename of a sound resource bundled in the app. Sound files must reside in /res/raw/.
   * @return sound
   */
  @javax.annotation.Nullable
  public String getSound() {
    return sound;
  }

  public void setSound(String sound) {
    this.sound = sound;
  }


  public AndroidNotification sticky(Boolean sticky) {
    this.sticky = sticky;
    return this;
  }

  /**
   * When set to false or unset, the notification is automatically dismissed when the user clicks it in the panel. When set to true, the notification persists even when the user clicks it.
   * @return sticky
   */
  @javax.annotation.Nullable
  public Boolean getSticky() {
    return sticky;
  }

  public void setSticky(Boolean sticky) {
    this.sticky = sticky;
  }


  public AndroidNotification tag(String tag) {
    this.tag = tag;
    return this;
  }

  /**
   * Identifier used to replace existing notifications in the notification drawer. If not specified, each request creates a new notification. If specified and a notification with the same tag is already being shown, the new notification replaces the existing one in the notification drawer.
   * @return tag
   */
  @javax.annotation.Nullable
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }


  public AndroidNotification ticker(String ticker) {
    this.ticker = ticker;
    return this;
  }

  /**
   * Sets the \&quot;ticker\&quot; text, which is sent to accessibility services. Prior to API level 21 (&#x60;Lollipop&#x60;), sets the text that is displayed in the status bar when the notification first arrives.
   * @return ticker
   */
  @javax.annotation.Nullable
  public String getTicker() {
    return ticker;
  }

  public void setTicker(String ticker) {
    this.ticker = ticker;
  }


  public AndroidNotification title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The notification&#39;s title. If present, it will override google.firebase.fcm.v1.Notification.title.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public AndroidNotification titleLocArgs(List<String> titleLocArgs) {
    this.titleLocArgs = titleLocArgs;
    return this;
  }

  public AndroidNotification addTitleLocArgsItem(String titleLocArgsItem) {
    if (this.titleLocArgs == null) {
      this.titleLocArgs = new ArrayList<>();
    }
    this.titleLocArgs.add(titleLocArgsItem);
    return this;
  }

  /**
   * Variable string values to be used in place of the format specifiers in title_loc_key to use to localize the title text to the user&#39;s current localization. See [Formatting and Styling](https://goo.gl/MalYE3) for more information.
   * @return titleLocArgs
   */
  @javax.annotation.Nullable
  public List<String> getTitleLocArgs() {
    return titleLocArgs;
  }

  public void setTitleLocArgs(List<String> titleLocArgs) {
    this.titleLocArgs = titleLocArgs;
  }


  public AndroidNotification titleLocKey(String titleLocKey) {
    this.titleLocKey = titleLocKey;
    return this;
  }

  /**
   * The key to the title string in the app&#39;s string resources to use to localize the title text to the user&#39;s current localization. See [String Resources](https://goo.gl/NdFZGI) for more information.
   * @return titleLocKey
   */
  @javax.annotation.Nullable
  public String getTitleLocKey() {
    return titleLocKey;
  }

  public void setTitleLocKey(String titleLocKey) {
    this.titleLocKey = titleLocKey;
  }


  public AndroidNotification vibrateTimings(List<String> vibrateTimings) {
    this.vibrateTimings = vibrateTimings;
    return this;
  }

  public AndroidNotification addVibrateTimingsItem(String vibrateTimingsItem) {
    if (this.vibrateTimings == null) {
      this.vibrateTimings = new ArrayList<>();
    }
    this.vibrateTimings.add(vibrateTimingsItem);
    return this;
  }

  /**
   * Set the vibration pattern to use. Pass in an array of [protobuf.Duration](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Duration) to turn on or off the vibrator. The first value indicates the &#x60;Duration&#x60; to wait before turning the vibrator on. The next value indicates the &#x60;Duration&#x60; to keep the vibrator on. Subsequent values alternate between &#x60;Duration&#x60; to turn the vibrator off and to turn the vibrator on. If &#x60;vibrate_timings&#x60; is set and &#x60;default_vibrate_timings&#x60; is set to &#x60;true&#x60;, the default value is used instead of the user-specified &#x60;vibrate_timings&#x60;.
   * @return vibrateTimings
   */
  @javax.annotation.Nullable
  public List<String> getVibrateTimings() {
    return vibrateTimings;
  }

  public void setVibrateTimings(List<String> vibrateTimings) {
    this.vibrateTimings = vibrateTimings;
  }


  public AndroidNotification visibility(VisibilityEnum visibility) {
    this.visibility = visibility;
    return this;
  }

  /**
   * Set the [Notification.visibility](https://developer.android.com/reference/android/app/Notification.html#visibility) of the notification.
   * @return visibility
   */
  @javax.annotation.Nullable
  public VisibilityEnum getVisibility() {
    return visibility;
  }

  public void setVisibility(VisibilityEnum visibility) {
    this.visibility = visibility;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AndroidNotification androidNotification = (AndroidNotification) o;
    return Objects.equals(this.body, androidNotification.body) &&
        Objects.equals(this.bodyLocArgs, androidNotification.bodyLocArgs) &&
        Objects.equals(this.bodyLocKey, androidNotification.bodyLocKey) &&
        Objects.equals(this.bypassProxyNotification, androidNotification.bypassProxyNotification) &&
        Objects.equals(this.channelId, androidNotification.channelId) &&
        Objects.equals(this.clickAction, androidNotification.clickAction) &&
        Objects.equals(this.color, androidNotification.color) &&
        Objects.equals(this.defaultLightSettings, androidNotification.defaultLightSettings) &&
        Objects.equals(this.defaultSound, androidNotification.defaultSound) &&
        Objects.equals(this.defaultVibrateTimings, androidNotification.defaultVibrateTimings) &&
        Objects.equals(this.eventTime, androidNotification.eventTime) &&
        Objects.equals(this.icon, androidNotification.icon) &&
        Objects.equals(this.image, androidNotification.image) &&
        Objects.equals(this.lightSettings, androidNotification.lightSettings) &&
        Objects.equals(this.localOnly, androidNotification.localOnly) &&
        Objects.equals(this.notificationCount, androidNotification.notificationCount) &&
        Objects.equals(this.notificationPriority, androidNotification.notificationPriority) &&
        Objects.equals(this.sound, androidNotification.sound) &&
        Objects.equals(this.sticky, androidNotification.sticky) &&
        Objects.equals(this.tag, androidNotification.tag) &&
        Objects.equals(this.ticker, androidNotification.ticker) &&
        Objects.equals(this.title, androidNotification.title) &&
        Objects.equals(this.titleLocArgs, androidNotification.titleLocArgs) &&
        Objects.equals(this.titleLocKey, androidNotification.titleLocKey) &&
        Objects.equals(this.vibrateTimings, androidNotification.vibrateTimings) &&
        Objects.equals(this.visibility, androidNotification.visibility);
  }

  @Override
  public int hashCode() {
    return Objects.hash(body, bodyLocArgs, bodyLocKey, bypassProxyNotification, channelId, clickAction, color, defaultLightSettings, defaultSound, defaultVibrateTimings, eventTime, icon, image, lightSettings, localOnly, notificationCount, notificationPriority, sound, sticky, tag, ticker, title, titleLocArgs, titleLocKey, vibrateTimings, visibility);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AndroidNotification {\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    bodyLocArgs: ").append(toIndentedString(bodyLocArgs)).append("\n");
    sb.append("    bodyLocKey: ").append(toIndentedString(bodyLocKey)).append("\n");
    sb.append("    bypassProxyNotification: ").append(toIndentedString(bypassProxyNotification)).append("\n");
    sb.append("    channelId: ").append(toIndentedString(channelId)).append("\n");
    sb.append("    clickAction: ").append(toIndentedString(clickAction)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    defaultLightSettings: ").append(toIndentedString(defaultLightSettings)).append("\n");
    sb.append("    defaultSound: ").append(toIndentedString(defaultSound)).append("\n");
    sb.append("    defaultVibrateTimings: ").append(toIndentedString(defaultVibrateTimings)).append("\n");
    sb.append("    eventTime: ").append(toIndentedString(eventTime)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    lightSettings: ").append(toIndentedString(lightSettings)).append("\n");
    sb.append("    localOnly: ").append(toIndentedString(localOnly)).append("\n");
    sb.append("    notificationCount: ").append(toIndentedString(notificationCount)).append("\n");
    sb.append("    notificationPriority: ").append(toIndentedString(notificationPriority)).append("\n");
    sb.append("    sound: ").append(toIndentedString(sound)).append("\n");
    sb.append("    sticky: ").append(toIndentedString(sticky)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    ticker: ").append(toIndentedString(ticker)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    titleLocArgs: ").append(toIndentedString(titleLocArgs)).append("\n");
    sb.append("    titleLocKey: ").append(toIndentedString(titleLocKey)).append("\n");
    sb.append("    vibrateTimings: ").append(toIndentedString(vibrateTimings)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body");
    openapiFields.add("bodyLocArgs");
    openapiFields.add("bodyLocKey");
    openapiFields.add("bypassProxyNotification");
    openapiFields.add("channelId");
    openapiFields.add("clickAction");
    openapiFields.add("color");
    openapiFields.add("defaultLightSettings");
    openapiFields.add("defaultSound");
    openapiFields.add("defaultVibrateTimings");
    openapiFields.add("eventTime");
    openapiFields.add("icon");
    openapiFields.add("image");
    openapiFields.add("lightSettings");
    openapiFields.add("localOnly");
    openapiFields.add("notificationCount");
    openapiFields.add("notificationPriority");
    openapiFields.add("sound");
    openapiFields.add("sticky");
    openapiFields.add("tag");
    openapiFields.add("ticker");
    openapiFields.add("title");
    openapiFields.add("titleLocArgs");
    openapiFields.add("titleLocKey");
    openapiFields.add("vibrateTimings");
    openapiFields.add("visibility");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AndroidNotification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AndroidNotification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AndroidNotification is not found in the empty JSON string", AndroidNotification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AndroidNotification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AndroidNotification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bodyLocArgs") != null && !jsonObj.get("bodyLocArgs").isJsonNull() && !jsonObj.get("bodyLocArgs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bodyLocArgs` to be an array in the JSON string but got `%s`", jsonObj.get("bodyLocArgs").toString()));
      }
      if ((jsonObj.get("bodyLocKey") != null && !jsonObj.get("bodyLocKey").isJsonNull()) && !jsonObj.get("bodyLocKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bodyLocKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bodyLocKey").toString()));
      }
      if ((jsonObj.get("channelId") != null && !jsonObj.get("channelId").isJsonNull()) && !jsonObj.get("channelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelId").toString()));
      }
      if ((jsonObj.get("clickAction") != null && !jsonObj.get("clickAction").isJsonNull()) && !jsonObj.get("clickAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clickAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clickAction").toString()));
      }
      if ((jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) && !jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      if ((jsonObj.get("eventTime") != null && !jsonObj.get("eventTime").isJsonNull()) && !jsonObj.get("eventTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventTime").toString()));
      }
      if ((jsonObj.get("icon") != null && !jsonObj.get("icon").isJsonNull()) && !jsonObj.get("icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon").toString()));
      }
      if ((jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) && !jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      // validate the optional field `lightSettings`
      if (jsonObj.get("lightSettings") != null && !jsonObj.get("lightSettings").isJsonNull()) {
        LightSettings.validateJsonElement(jsonObj.get("lightSettings"));
      }
      if ((jsonObj.get("notificationPriority") != null && !jsonObj.get("notificationPriority").isJsonNull()) && !jsonObj.get("notificationPriority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationPriority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notificationPriority").toString()));
      }
      // validate the optional field `notificationPriority`
      if (jsonObj.get("notificationPriority") != null && !jsonObj.get("notificationPriority").isJsonNull()) {
        NotificationPriorityEnum.validateJsonElement(jsonObj.get("notificationPriority"));
      }
      if ((jsonObj.get("sound") != null && !jsonObj.get("sound").isJsonNull()) && !jsonObj.get("sound").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sound` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sound").toString()));
      }
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
      if ((jsonObj.get("ticker") != null && !jsonObj.get("ticker").isJsonNull()) && !jsonObj.get("ticker").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ticker` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ticker").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("titleLocArgs") != null && !jsonObj.get("titleLocArgs").isJsonNull() && !jsonObj.get("titleLocArgs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `titleLocArgs` to be an array in the JSON string but got `%s`", jsonObj.get("titleLocArgs").toString()));
      }
      if ((jsonObj.get("titleLocKey") != null && !jsonObj.get("titleLocKey").isJsonNull()) && !jsonObj.get("titleLocKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `titleLocKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("titleLocKey").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("vibrateTimings") != null && !jsonObj.get("vibrateTimings").isJsonNull() && !jsonObj.get("vibrateTimings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `vibrateTimings` to be an array in the JSON string but got `%s`", jsonObj.get("vibrateTimings").toString()));
      }
      if ((jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonNull()) && !jsonObj.get("visibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visibility").toString()));
      }
      // validate the optional field `visibility`
      if (jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonNull()) {
        VisibilityEnum.validateJsonElement(jsonObj.get("visibility"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AndroidNotification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AndroidNotification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AndroidNotification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AndroidNotification.class));

       return (TypeAdapter<T>) new TypeAdapter<AndroidNotification>() {
           @Override
           public void write(JsonWriter out, AndroidNotification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AndroidNotification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AndroidNotification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AndroidNotification
   * @throws IOException if the JSON string is invalid with respect to AndroidNotification
   */
  public static AndroidNotification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AndroidNotification.class);
  }

  /**
   * Convert an instance of AndroidNotification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

