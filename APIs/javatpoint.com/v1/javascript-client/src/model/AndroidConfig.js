/**
 * Firebase Cloud Messaging API
 * FCM send API that provides a cross-platform messaging solution to reliably deliver messages at no cost.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AndroidFcmOptions from './AndroidFcmOptions';
import AndroidNotification from './AndroidNotification';

/**
 * The AndroidConfig model module.
 * @module model/AndroidConfig
 * @version v1
 */
class AndroidConfig {
    /**
     * Constructs a new <code>AndroidConfig</code>.
     * Android specific options for messages sent through [FCM connection server](https://goo.gl/4GLdUl).
     * @alias module:model/AndroidConfig
     */
    constructor() { 
        
        AndroidConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AndroidConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AndroidConfig} obj Optional instance to populate.
     * @return {module:model/AndroidConfig} The populated <code>AndroidConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AndroidConfig();

            if (data.hasOwnProperty('collapseKey')) {
                obj['collapseKey'] = ApiClient.convertToType(data['collapseKey'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], {'String': 'String'});
            }
            if (data.hasOwnProperty('directBootOk')) {
                obj['directBootOk'] = ApiClient.convertToType(data['directBootOk'], 'Boolean');
            }
            if (data.hasOwnProperty('fcmOptions')) {
                obj['fcmOptions'] = AndroidFcmOptions.constructFromObject(data['fcmOptions']);
            }
            if (data.hasOwnProperty('notification')) {
                obj['notification'] = AndroidNotification.constructFromObject(data['notification']);
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'String');
            }
            if (data.hasOwnProperty('restrictedPackageName')) {
                obj['restrictedPackageName'] = ApiClient.convertToType(data['restrictedPackageName'], 'String');
            }
            if (data.hasOwnProperty('ttl')) {
                obj['ttl'] = ApiClient.convertToType(data['ttl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AndroidConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AndroidConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['collapseKey'] && !(typeof data['collapseKey'] === 'string' || data['collapseKey'] instanceof String)) {
            throw new Error("Expected the field `collapseKey` to be a primitive type in the JSON string but got " + data['collapseKey']);
        }
        // validate the optional field `fcmOptions`
        if (data['fcmOptions']) { // data not null
          AndroidFcmOptions.validateJSON(data['fcmOptions']);
        }
        // validate the optional field `notification`
        if (data['notification']) { // data not null
          AndroidNotification.validateJSON(data['notification']);
        }
        // ensure the json data is a string
        if (data['priority'] && !(typeof data['priority'] === 'string' || data['priority'] instanceof String)) {
            throw new Error("Expected the field `priority` to be a primitive type in the JSON string but got " + data['priority']);
        }
        // ensure the json data is a string
        if (data['restrictedPackageName'] && !(typeof data['restrictedPackageName'] === 'string' || data['restrictedPackageName'] instanceof String)) {
            throw new Error("Expected the field `restrictedPackageName` to be a primitive type in the JSON string but got " + data['restrictedPackageName']);
        }
        // ensure the json data is a string
        if (data['ttl'] && !(typeof data['ttl'] === 'string' || data['ttl'] instanceof String)) {
            throw new Error("Expected the field `ttl` to be a primitive type in the JSON string but got " + data['ttl']);
        }

        return true;
    }


}



/**
 * An identifier of a group of messages that can be collapsed, so that only the last message gets sent when delivery can be resumed. A maximum of 4 different collapse keys is allowed at any given time.
 * @member {String} collapseKey
 */
AndroidConfig.prototype['collapseKey'] = undefined;

/**
 * Arbitrary key/value payload. If present, it will override google.firebase.fcm.v1.Message.data.
 * @member {Object.<String, String>} data
 */
AndroidConfig.prototype['data'] = undefined;

/**
 * If set to true, messages will be allowed to be delivered to the app while the device is in direct boot mode. See [Support Direct Boot mode](https://developer.android.com/training/articles/direct-boot).
 * @member {Boolean} directBootOk
 */
AndroidConfig.prototype['directBootOk'] = undefined;

/**
 * @member {module:model/AndroidFcmOptions} fcmOptions
 */
AndroidConfig.prototype['fcmOptions'] = undefined;

/**
 * @member {module:model/AndroidNotification} notification
 */
AndroidConfig.prototype['notification'] = undefined;

/**
 * Message priority. Can take \"normal\" and \"high\" values. For more information, see [Setting the priority of a message](https://goo.gl/GjONJv).
 * @member {module:model/AndroidConfig.PriorityEnum} priority
 */
AndroidConfig.prototype['priority'] = undefined;

/**
 * Package name of the application where the registration token must match in order to receive the message.
 * @member {String} restrictedPackageName
 */
AndroidConfig.prototype['restrictedPackageName'] = undefined;

/**
 * How long (in seconds) the message should be kept in FCM storage if the device is offline. The maximum time to live supported is 4 weeks, and the default value is 4 weeks if not set. Set it to 0 if want to send the message immediately. In JSON format, the Duration type is encoded as a string rather than an object, where the string ends in the suffix \"s\" (indicating seconds) and is preceded by the number of seconds, with nanoseconds expressed as fractional seconds. For example, 3 seconds with 0 nanoseconds should be encoded in JSON format as \"3s\", while 3 seconds and 1 nanosecond should be expressed in JSON format as \"3.000000001s\". The ttl will be rounded down to the nearest second.
 * @member {String} ttl
 */
AndroidConfig.prototype['ttl'] = undefined;





/**
 * Allowed values for the <code>priority</code> property.
 * @enum {String}
 * @readonly
 */
AndroidConfig['PriorityEnum'] = {

    /**
     * value: "NORMAL"
     * @const
     */
    "NORMAL": "NORMAL",

    /**
     * value: "HIGH"
     * @const
     */
    "HIGH": "HIGH"
};



export default AndroidConfig;

