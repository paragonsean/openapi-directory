/**
 * Firebase Cloud Messaging API
 * FCM send API that provides a cross-platform messaging solution to reliably deliver messages at no cost.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Color from './Color';

/**
 * The LightSettings model module.
 * @module model/LightSettings
 * @version v1
 */
class LightSettings {
    /**
     * Constructs a new <code>LightSettings</code>.
     * Settings to control notification LED.
     * @alias module:model/LightSettings
     */
    constructor() { 
        
        LightSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LightSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LightSettings} obj Optional instance to populate.
     * @return {module:model/LightSettings} The populated <code>LightSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LightSettings();

            if (data.hasOwnProperty('color')) {
                obj['color'] = Color.constructFromObject(data['color']);
            }
            if (data.hasOwnProperty('lightOffDuration')) {
                obj['lightOffDuration'] = ApiClient.convertToType(data['lightOffDuration'], 'String');
            }
            if (data.hasOwnProperty('lightOnDuration')) {
                obj['lightOnDuration'] = ApiClient.convertToType(data['lightOnDuration'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LightSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LightSettings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `color`
        if (data['color']) { // data not null
          Color.validateJSON(data['color']);
        }
        // ensure the json data is a string
        if (data['lightOffDuration'] && !(typeof data['lightOffDuration'] === 'string' || data['lightOffDuration'] instanceof String)) {
            throw new Error("Expected the field `lightOffDuration` to be a primitive type in the JSON string but got " + data['lightOffDuration']);
        }
        // ensure the json data is a string
        if (data['lightOnDuration'] && !(typeof data['lightOnDuration'] === 'string' || data['lightOnDuration'] instanceof String)) {
            throw new Error("Expected the field `lightOnDuration` to be a primitive type in the JSON string but got " + data['lightOnDuration']);
        }

        return true;
    }


}



/**
 * @member {module:model/Color} color
 */
LightSettings.prototype['color'] = undefined;

/**
 * Required. Along with `light_on_duration `, define the blink rate of LED flashes. Resolution defined by [proto.Duration](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Duration)
 * @member {String} lightOffDuration
 */
LightSettings.prototype['lightOffDuration'] = undefined;

/**
 * Required. Along with `light_off_duration`, define the blink rate of LED flashes. Resolution defined by [proto.Duration](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Duration)
 * @member {String} lightOnDuration
 */
LightSettings.prototype['lightOnDuration'] = undefined;






export default LightSettings;

