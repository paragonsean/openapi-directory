/**
 * Firebase Cloud Messaging API
 * FCM send API that provides a cross-platform messaging solution to reliably deliver messages at no cost.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AndroidConfig from './AndroidConfig';
import ApnsConfig from './ApnsConfig';
import FcmOptions from './FcmOptions';
import Notification from './Notification';
import WebpushConfig from './WebpushConfig';

/**
 * The Message model module.
 * @module model/Message
 * @version v1
 */
class Message {
    /**
     * Constructs a new <code>Message</code>.
     * Message to send by Firebase Cloud Messaging Service.
     * @alias module:model/Message
     */
    constructor() { 
        
        Message.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Message</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Message} obj Optional instance to populate.
     * @return {module:model/Message} The populated <code>Message</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Message();

            if (data.hasOwnProperty('android')) {
                obj['android'] = AndroidConfig.constructFromObject(data['android']);
            }
            if (data.hasOwnProperty('apns')) {
                obj['apns'] = ApnsConfig.constructFromObject(data['apns']);
            }
            if (data.hasOwnProperty('condition')) {
                obj['condition'] = ApiClient.convertToType(data['condition'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], {'String': 'String'});
            }
            if (data.hasOwnProperty('fcmOptions')) {
                obj['fcmOptions'] = FcmOptions.constructFromObject(data['fcmOptions']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notification')) {
                obj['notification'] = Notification.constructFromObject(data['notification']);
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('topic')) {
                obj['topic'] = ApiClient.convertToType(data['topic'], 'String');
            }
            if (data.hasOwnProperty('webpush')) {
                obj['webpush'] = WebpushConfig.constructFromObject(data['webpush']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Message</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Message</code>.
     */
    static validateJSON(data) {
        // validate the optional field `android`
        if (data['android']) { // data not null
          AndroidConfig.validateJSON(data['android']);
        }
        // validate the optional field `apns`
        if (data['apns']) { // data not null
          ApnsConfig.validateJSON(data['apns']);
        }
        // ensure the json data is a string
        if (data['condition'] && !(typeof data['condition'] === 'string' || data['condition'] instanceof String)) {
            throw new Error("Expected the field `condition` to be a primitive type in the JSON string but got " + data['condition']);
        }
        // validate the optional field `fcmOptions`
        if (data['fcmOptions']) { // data not null
          FcmOptions.validateJSON(data['fcmOptions']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `notification`
        if (data['notification']) { // data not null
          Notification.validateJSON(data['notification']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }
        // ensure the json data is a string
        if (data['topic'] && !(typeof data['topic'] === 'string' || data['topic'] instanceof String)) {
            throw new Error("Expected the field `topic` to be a primitive type in the JSON string but got " + data['topic']);
        }
        // validate the optional field `webpush`
        if (data['webpush']) { // data not null
          WebpushConfig.validateJSON(data['webpush']);
        }

        return true;
    }


}



/**
 * @member {module:model/AndroidConfig} android
 */
Message.prototype['android'] = undefined;

/**
 * @member {module:model/ApnsConfig} apns
 */
Message.prototype['apns'] = undefined;

/**
 * Condition to send a message to, e.g. \"'foo' in topics && 'bar' in topics\".
 * @member {String} condition
 */
Message.prototype['condition'] = undefined;

/**
 * Input only. Arbitrary key/value payload, which must be UTF-8 encoded. The key should not be a reserved word (\"from\", \"message_type\", or any word starting with \"google\" or \"gcm\"). When sending payloads containing only data fields to iOS devices, only normal priority (`\"apns-priority\": \"5\"`) is allowed in [`ApnsConfig`](/docs/reference/fcm/rest/v1/projects.messages#apnsconfig).
 * @member {Object.<String, String>} data
 */
Message.prototype['data'] = undefined;

/**
 * @member {module:model/FcmOptions} fcmOptions
 */
Message.prototype['fcmOptions'] = undefined;

/**
 * Output Only. The identifier of the message sent, in the format of `projects/_*_/messages/{message_id}`.
 * @member {String} name
 */
Message.prototype['name'] = undefined;

/**
 * @member {module:model/Notification} notification
 */
Message.prototype['notification'] = undefined;

/**
 * Registration token to send a message to.
 * @member {String} token
 */
Message.prototype['token'] = undefined;

/**
 * Topic name to send a message to, e.g. \"weather\". Note: \"/topics/\" prefix should not be provided.
 * @member {String} topic
 */
Message.prototype['topic'] = undefined;

/**
 * @member {module:model/WebpushConfig} webpush
 */
Message.prototype['webpush'] = undefined;






export default Message;

