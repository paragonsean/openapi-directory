# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContentProCompany(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, company_name: str=None, description: str=None, employee: str=None, industry: str=None, linkedin: str=None, twitter: str=None, website: str=None):
        """ContentProCompany - a model defined in OpenAPI

        :param company_name: The company_name of this ContentProCompany.
        :param description: The description of this ContentProCompany.
        :param employee: The employee of this ContentProCompany.
        :param industry: The industry of this ContentProCompany.
        :param linkedin: The linkedin of this ContentProCompany.
        :param twitter: The twitter of this ContentProCompany.
        :param website: The website of this ContentProCompany.
        """
        self.openapi_types = {
            'company_name': str,
            'description': str,
            'employee': str,
            'industry': str,
            'linkedin': str,
            'twitter': str,
            'website': str
        }

        self.attribute_map = {
            'company_name': 'companyName',
            'description': 'description',
            'employee': 'employee',
            'industry': 'industry',
            'linkedin': 'linkedin',
            'twitter': 'twitter',
            'website': 'website'
        }

        self._company_name = company_name
        self._description = description
        self._employee = employee
        self._industry = industry
        self._linkedin = linkedin
        self._twitter = twitter
        self._website = website

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContentProCompany':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContentProCompany of this ContentProCompany.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def company_name(self):
        """Gets the company_name of this ContentProCompany.


        :return: The company_name of this ContentProCompany.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this ContentProCompany.


        :param company_name: The company_name of this ContentProCompany.
        :type company_name: str
        """

        self._company_name = company_name

    @property
    def description(self):
        """Gets the description of this ContentProCompany.


        :return: The description of this ContentProCompany.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ContentProCompany.


        :param description: The description of this ContentProCompany.
        :type description: str
        """

        self._description = description

    @property
    def employee(self):
        """Gets the employee of this ContentProCompany.


        :return: The employee of this ContentProCompany.
        :rtype: str
        """
        return self._employee

    @employee.setter
    def employee(self, employee):
        """Sets the employee of this ContentProCompany.


        :param employee: The employee of this ContentProCompany.
        :type employee: str
        """

        self._employee = employee

    @property
    def industry(self):
        """Gets the industry of this ContentProCompany.


        :return: The industry of this ContentProCompany.
        :rtype: str
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this ContentProCompany.


        :param industry: The industry of this ContentProCompany.
        :type industry: str
        """

        self._industry = industry

    @property
    def linkedin(self):
        """Gets the linkedin of this ContentProCompany.


        :return: The linkedin of this ContentProCompany.
        :rtype: str
        """
        return self._linkedin

    @linkedin.setter
    def linkedin(self, linkedin):
        """Sets the linkedin of this ContentProCompany.


        :param linkedin: The linkedin of this ContentProCompany.
        :type linkedin: str
        """

        self._linkedin = linkedin

    @property
    def twitter(self):
        """Gets the twitter of this ContentProCompany.


        :return: The twitter of this ContentProCompany.
        :rtype: str
        """
        return self._twitter

    @twitter.setter
    def twitter(self, twitter):
        """Sets the twitter of this ContentProCompany.


        :param twitter: The twitter of this ContentProCompany.
        :type twitter: str
        """

        self._twitter = twitter

    @property
    def website(self):
        """Gets the website of this ContentProCompany.


        :return: The website of this ContentProCompany.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this ContentProCompany.


        :param website: The website of this ContentProCompany.
        :type website: str
        """

        self._website = website
