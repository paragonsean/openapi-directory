/**
 * Automata Market Intelligence API
 * This document provides the documentation for the Market Intelligence API by Automata. Get your API Key at https://apis.byautomata.io and check out our <a href='https://www.getpostman.com/collections/d182a1c78d4491d55e19'>Postman Collection</a>.<br><br>The root API endpoint is https://api.byautomata.io. Please refer to the code samples for examples of how to call the Market Intelligence API. The ContentPro endpoints (/contentpro-search and /contentpro-similar-text) are not included in the standard Market Intelligence API plans. Please contact support@byautomata.io for access.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@byautomata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Snippet from './Snippet';

/**
 * The SimilarCompanySearch model module.
 * @module model/SimilarCompanySearch
 * @version 1.0.1
 */
class SimilarCompanySearch {
    /**
     * Constructs a new <code>SimilarCompanySearch</code>.
     * @alias module:model/SimilarCompanySearch
     */
    constructor() { 
        
        SimilarCompanySearch.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SimilarCompanySearch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SimilarCompanySearch} obj Optional instance to populate.
     * @return {module:model/SimilarCompanySearch} The populated <code>SimilarCompanySearch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SimilarCompanySearch();

            if (data.hasOwnProperty('companyName')) {
                obj['companyName'] = ApiClient.convertToType(data['companyName'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('employee')) {
                obj['employee'] = ApiClient.convertToType(data['employee'], 'String');
            }
            if (data.hasOwnProperty('industry')) {
                obj['industry'] = ApiClient.convertToType(data['industry'], 'String');
            }
            if (data.hasOwnProperty('linkedin')) {
                obj['linkedin'] = ApiClient.convertToType(data['linkedin'], 'String');
            }
            if (data.hasOwnProperty('snippets')) {
                obj['snippets'] = ApiClient.convertToType(data['snippets'], [Snippet]);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('twitter')) {
                obj['twitter'] = ApiClient.convertToType(data['twitter'], 'String');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SimilarCompanySearch</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SimilarCompanySearch</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['companyName'] && !(typeof data['companyName'] === 'string' || data['companyName'] instanceof String)) {
            throw new Error("Expected the field `companyName` to be a primitive type in the JSON string but got " + data['companyName']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['employee'] && !(typeof data['employee'] === 'string' || data['employee'] instanceof String)) {
            throw new Error("Expected the field `employee` to be a primitive type in the JSON string but got " + data['employee']);
        }
        // ensure the json data is a string
        if (data['industry'] && !(typeof data['industry'] === 'string' || data['industry'] instanceof String)) {
            throw new Error("Expected the field `industry` to be a primitive type in the JSON string but got " + data['industry']);
        }
        // ensure the json data is a string
        if (data['linkedin'] && !(typeof data['linkedin'] === 'string' || data['linkedin'] instanceof String)) {
            throw new Error("Expected the field `linkedin` to be a primitive type in the JSON string but got " + data['linkedin']);
        }
        if (data['snippets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['snippets'])) {
                throw new Error("Expected the field `snippets` to be an array in the JSON data but got " + data['snippets']);
            }
            // validate the optional field `snippets` (array)
            for (const item of data['snippets']) {
                Snippet.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['twitter'] && !(typeof data['twitter'] === 'string' || data['twitter'] instanceof String)) {
            throw new Error("Expected the field `twitter` to be a primitive type in the JSON string but got " + data['twitter']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }

        return true;
    }


}



/**
 * @member {String} companyName
 */
SimilarCompanySearch.prototype['companyName'] = undefined;

/**
 * @member {String} description
 */
SimilarCompanySearch.prototype['description'] = undefined;

/**
 * @member {String} employee
 */
SimilarCompanySearch.prototype['employee'] = undefined;

/**
 * @member {String} industry
 */
SimilarCompanySearch.prototype['industry'] = undefined;

/**
 * @member {String} linkedin
 */
SimilarCompanySearch.prototype['linkedin'] = undefined;

/**
 * @member {Array.<module:model/Snippet>} snippets
 */
SimilarCompanySearch.prototype['snippets'] = undefined;

/**
 * @member {String} title
 */
SimilarCompanySearch.prototype['title'] = undefined;

/**
 * @member {String} twitter
 */
SimilarCompanySearch.prototype['twitter'] = undefined;

/**
 * @member {String} website
 */
SimilarCompanySearch.prototype['website'] = undefined;






export default SimilarCompanySearch;

