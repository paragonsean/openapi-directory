/*
 * Automata Market Intelligence API
 * This document provides the documentation for the Market Intelligence API by Automata. Get your API Key at https://apis.byautomata.io and check out our <a href='https://www.getpostman.com/collections/d182a1c78d4491d55e19'>Postman Collection</a>.<br><br>The root API endpoint is https://api.byautomata.io. Please refer to the code samples for examples of how to call the Market Intelligence API. The ContentPro endpoints (/contentpro-search and /contentpro-similar-text) are not included in the standard Market Intelligence API plans. Please contact support@byautomata.io for access.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@byautomata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContentproSearchGet200ResponseDataInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ContentproSearchGet200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:54.723311-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContentproSearchGet200Response {
  public static final String SERIALIZED_NAME_CALLS_PER_MONTH = "calls_per_month";
  @SerializedName(SERIALIZED_NAME_CALLS_PER_MONTH)
  private String callsPerMonth;

  public static final String SERIALIZED_NAME_COUNT_REMAINING = "count_remaining";
  @SerializedName(SERIALIZED_NAME_COUNT_REMAINING)
  private String countRemaining;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private List<ContentproSearchGet200ResponseDataInner> data = new ArrayList<>();

  public static final String SERIALIZED_NAME_RENEWAL_DATE = "renewal_date";
  @SerializedName(SERIALIZED_NAME_RENEWAL_DATE)
  private String renewalDate;

  public ContentproSearchGet200Response() {
  }

  public ContentproSearchGet200Response callsPerMonth(String callsPerMonth) {
    this.callsPerMonth = callsPerMonth;
    return this;
  }

  /**
   * Get callsPerMonth
   * @return callsPerMonth
   */
  @javax.annotation.Nullable
  public String getCallsPerMonth() {
    return callsPerMonth;
  }

  public void setCallsPerMonth(String callsPerMonth) {
    this.callsPerMonth = callsPerMonth;
  }


  public ContentproSearchGet200Response countRemaining(String countRemaining) {
    this.countRemaining = countRemaining;
    return this;
  }

  /**
   * Get countRemaining
   * @return countRemaining
   */
  @javax.annotation.Nullable
  public String getCountRemaining() {
    return countRemaining;
  }

  public void setCountRemaining(String countRemaining) {
    this.countRemaining = countRemaining;
  }


  public ContentproSearchGet200Response data(List<ContentproSearchGet200ResponseDataInner> data) {
    this.data = data;
    return this;
  }

  public ContentproSearchGet200Response addDataItem(ContentproSearchGet200ResponseDataInner dataItem) {
    if (this.data == null) {
      this.data = new ArrayList<>();
    }
    this.data.add(dataItem);
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @javax.annotation.Nullable
  public List<ContentproSearchGet200ResponseDataInner> getData() {
    return data;
  }

  public void setData(List<ContentproSearchGet200ResponseDataInner> data) {
    this.data = data;
  }


  public ContentproSearchGet200Response renewalDate(String renewalDate) {
    this.renewalDate = renewalDate;
    return this;
  }

  /**
   * Get renewalDate
   * @return renewalDate
   */
  @javax.annotation.Nullable
  public String getRenewalDate() {
    return renewalDate;
  }

  public void setRenewalDate(String renewalDate) {
    this.renewalDate = renewalDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentproSearchGet200Response contentproSearchGet200Response = (ContentproSearchGet200Response) o;
    return Objects.equals(this.callsPerMonth, contentproSearchGet200Response.callsPerMonth) &&
        Objects.equals(this.countRemaining, contentproSearchGet200Response.countRemaining) &&
        Objects.equals(this.data, contentproSearchGet200Response.data) &&
        Objects.equals(this.renewalDate, contentproSearchGet200Response.renewalDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callsPerMonth, countRemaining, data, renewalDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentproSearchGet200Response {\n");
    sb.append("    callsPerMonth: ").append(toIndentedString(callsPerMonth)).append("\n");
    sb.append("    countRemaining: ").append(toIndentedString(countRemaining)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    renewalDate: ").append(toIndentedString(renewalDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("calls_per_month");
    openapiFields.add("count_remaining");
    openapiFields.add("data");
    openapiFields.add("renewal_date");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContentproSearchGet200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContentproSearchGet200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContentproSearchGet200Response is not found in the empty JSON string", ContentproSearchGet200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContentproSearchGet200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContentproSearchGet200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("calls_per_month") != null && !jsonObj.get("calls_per_month").isJsonNull()) && !jsonObj.get("calls_per_month").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `calls_per_month` to be a primitive type in the JSON string but got `%s`", jsonObj.get("calls_per_month").toString()));
      }
      if ((jsonObj.get("count_remaining") != null && !jsonObj.get("count_remaining").isJsonNull()) && !jsonObj.get("count_remaining").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `count_remaining` to be a primitive type in the JSON string but got `%s`", jsonObj.get("count_remaining").toString()));
      }
      if (jsonObj.get("data") != null && !jsonObj.get("data").isJsonNull()) {
        JsonArray jsonArraydata = jsonObj.getAsJsonArray("data");
        if (jsonArraydata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("data").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `data` to be an array in the JSON string but got `%s`", jsonObj.get("data").toString()));
          }

          // validate the optional field `data` (array)
          for (int i = 0; i < jsonArraydata.size(); i++) {
            ContentproSearchGet200ResponseDataInner.validateJsonElement(jsonArraydata.get(i));
          };
        }
      }
      if ((jsonObj.get("renewal_date") != null && !jsonObj.get("renewal_date").isJsonNull()) && !jsonObj.get("renewal_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `renewal_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("renewal_date").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContentproSearchGet200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContentproSearchGet200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContentproSearchGet200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContentproSearchGet200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<ContentproSearchGet200Response>() {
           @Override
           public void write(JsonWriter out, ContentproSearchGet200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContentproSearchGet200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContentproSearchGet200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContentproSearchGet200Response
   * @throws IOException if the JSON string is invalid with respect to ContentproSearchGet200Response
   */
  public static ContentproSearchGet200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContentproSearchGet200Response.class);
  }

  /**
   * Convert an instance of ContentproSearchGet200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

