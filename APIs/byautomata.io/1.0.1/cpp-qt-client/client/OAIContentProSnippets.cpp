/**
 * Automata Market Intelligence API
 * This document provides the documentation for the Market Intelligence API by Automata. Get your API Key at https://apis.byautomata.io and check out our <a href='https://www.getpostman.com/collections/d182a1c78d4491d55e19'>Postman Collection</a>.<br><br>The root API endpoint is https://api.byautomata.io. Please refer to the code samples for examples of how to call the Market Intelligence API. The ContentPro endpoints (/contentpro-search and /contentpro-similar-text) are not included in the standard Market Intelligence API plans. Please contact support@byautomata.io for access.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@byautomata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContentProSnippets.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContentProSnippets::OAIContentProSnippets(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContentProSnippets::OAIContentProSnippets() {
    this->initializeModel();
}

OAIContentProSnippets::~OAIContentProSnippets() {}

void OAIContentProSnippets::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIContentProSnippets::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContentProSnippets::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIContentProSnippets::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContentProSnippets::asJsonObject() const {
    QJsonObject obj;
    if (m_description.size() > 0) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_text.size() > 0) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_title.size() > 0) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QList<QString> OAIContentProSnippets::getDescription() const {
    return m_description;
}
void OAIContentProSnippets::setDescription(const QList<QString> &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIContentProSnippets::is_description_Set() const{
    return m_description_isSet;
}

bool OAIContentProSnippets::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAIContentProSnippets::getText() const {
    return m_text;
}
void OAIContentProSnippets::setText(const QList<QString> &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIContentProSnippets::is_text_Set() const{
    return m_text_isSet;
}

bool OAIContentProSnippets::is_text_Valid() const{
    return m_text_isValid;
}

QList<QString> OAIContentProSnippets::getTitle() const {
    return m_title;
}
void OAIContentProSnippets::setTitle(const QList<QString> &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIContentProSnippets::is_title_Set() const{
    return m_title_isSet;
}

bool OAIContentProSnippets::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIContentProSnippets::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_text.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContentProSnippets::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
