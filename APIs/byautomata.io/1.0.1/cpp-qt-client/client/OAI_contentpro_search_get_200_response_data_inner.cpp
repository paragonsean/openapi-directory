/**
 * Automata Market Intelligence API
 * This document provides the documentation for the Market Intelligence API by Automata. Get your API Key at https://apis.byautomata.io and check out our <a href='https://www.getpostman.com/collections/d182a1c78d4491d55e19'>Postman Collection</a>.<br><br>The root API endpoint is https://api.byautomata.io. Please refer to the code samples for examples of how to call the Market Intelligence API. The ContentPro endpoints (/contentpro-search and /contentpro-similar-text) are not included in the standard Market Intelligence API plans. Please contact support@byautomata.io for access.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@byautomata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_contentpro_search_get_200_response_data_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_contentpro_search_get_200_response_data_inner::OAI_contentpro_search_get_200_response_data_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_contentpro_search_get_200_response_data_inner::OAI_contentpro_search_get_200_response_data_inner() {
    this->initializeModel();
}

OAI_contentpro_search_get_200_response_data_inner::~OAI_contentpro_search_get_200_response_data_inner() {}

void OAI_contentpro_search_get_200_response_data_inner::initializeModel() {

    m_article_isSet = false;
    m_article_isValid = false;

    m_company_isSet = false;
    m_company_isValid = false;

    m_snippets_isSet = false;
    m_snippets_isValid = false;
}

void OAI_contentpro_search_get_200_response_data_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_contentpro_search_get_200_response_data_inner::fromJsonObject(QJsonObject json) {

    m_article_isValid = ::OpenAPI::fromJsonValue(m_article, json[QString("article")]);
    m_article_isSet = !json[QString("article")].isNull() && m_article_isValid;

    m_company_isValid = ::OpenAPI::fromJsonValue(m_company, json[QString("company")]);
    m_company_isSet = !json[QString("company")].isNull() && m_company_isValid;

    m_snippets_isValid = ::OpenAPI::fromJsonValue(m_snippets, json[QString("snippets")]);
    m_snippets_isSet = !json[QString("snippets")].isNull() && m_snippets_isValid;
}

QString OAI_contentpro_search_get_200_response_data_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_contentpro_search_get_200_response_data_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_article.isSet()) {
        obj.insert(QString("article"), ::OpenAPI::toJsonValue(m_article));
    }
    if (m_company.isSet()) {
        obj.insert(QString("company"), ::OpenAPI::toJsonValue(m_company));
    }
    if (m_snippets.isSet()) {
        obj.insert(QString("snippets"), ::OpenAPI::toJsonValue(m_snippets));
    }
    return obj;
}

OAIArticle OAI_contentpro_search_get_200_response_data_inner::getArticle() const {
    return m_article;
}
void OAI_contentpro_search_get_200_response_data_inner::setArticle(const OAIArticle &article) {
    m_article = article;
    m_article_isSet = true;
}

bool OAI_contentpro_search_get_200_response_data_inner::is_article_Set() const{
    return m_article_isSet;
}

bool OAI_contentpro_search_get_200_response_data_inner::is_article_Valid() const{
    return m_article_isValid;
}

OAIContentProCompany OAI_contentpro_search_get_200_response_data_inner::getCompany() const {
    return m_company;
}
void OAI_contentpro_search_get_200_response_data_inner::setCompany(const OAIContentProCompany &company) {
    m_company = company;
    m_company_isSet = true;
}

bool OAI_contentpro_search_get_200_response_data_inner::is_company_Set() const{
    return m_company_isSet;
}

bool OAI_contentpro_search_get_200_response_data_inner::is_company_Valid() const{
    return m_company_isValid;
}

OAIContentProSnippets OAI_contentpro_search_get_200_response_data_inner::getSnippets() const {
    return m_snippets;
}
void OAI_contentpro_search_get_200_response_data_inner::setSnippets(const OAIContentProSnippets &snippets) {
    m_snippets = snippets;
    m_snippets_isSet = true;
}

bool OAI_contentpro_search_get_200_response_data_inner::is_snippets_Set() const{
    return m_snippets_isSet;
}

bool OAI_contentpro_search_get_200_response_data_inner::is_snippets_Valid() const{
    return m_snippets_isValid;
}

bool OAI_contentpro_search_get_200_response_data_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_article.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_company.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_snippets.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_contentpro_search_get_200_response_data_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
