/**
 * Automata Market Intelligence API
 * This document provides the documentation for the Market Intelligence API by Automata. Get your API Key at https://apis.byautomata.io and check out our <a href='https://www.getpostman.com/collections/d182a1c78d4491d55e19'>Postman Collection</a>.<br><br>The root API endpoint is https://api.byautomata.io. Please refer to the code samples for examples of how to call the Market Intelligence API. The ContentPro endpoints (/contentpro-search and /contentpro-similar-text) are not included in the standard Market Intelligence API plans. Please contact support@byautomata.io for access.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@byautomata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_similar_get_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_similar_get_200_response::OAI_similar_get_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_similar_get_200_response::OAI_similar_get_200_response() {
    this->initializeModel();
}

OAI_similar_get_200_response::~OAI_similar_get_200_response() {}

void OAI_similar_get_200_response::initializeModel() {

    m_calls_per_month_isSet = false;
    m_calls_per_month_isValid = false;

    m_companies_isSet = false;
    m_companies_isValid = false;

    m_count_remaining_isSet = false;
    m_count_remaining_isValid = false;

    m_input_company_isSet = false;
    m_input_company_isValid = false;

    m_renewal_date_isSet = false;
    m_renewal_date_isValid = false;
}

void OAI_similar_get_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_similar_get_200_response::fromJsonObject(QJsonObject json) {

    m_calls_per_month_isValid = ::OpenAPI::fromJsonValue(m_calls_per_month, json[QString("calls_per_month")]);
    m_calls_per_month_isSet = !json[QString("calls_per_month")].isNull() && m_calls_per_month_isValid;

    m_companies_isValid = ::OpenAPI::fromJsonValue(m_companies, json[QString("companies")]);
    m_companies_isSet = !json[QString("companies")].isNull() && m_companies_isValid;

    m_count_remaining_isValid = ::OpenAPI::fromJsonValue(m_count_remaining, json[QString("count_remaining")]);
    m_count_remaining_isSet = !json[QString("count_remaining")].isNull() && m_count_remaining_isValid;

    m_input_company_isValid = ::OpenAPI::fromJsonValue(m_input_company, json[QString("input_company")]);
    m_input_company_isSet = !json[QString("input_company")].isNull() && m_input_company_isValid;

    m_renewal_date_isValid = ::OpenAPI::fromJsonValue(m_renewal_date, json[QString("renewal_date")]);
    m_renewal_date_isSet = !json[QString("renewal_date")].isNull() && m_renewal_date_isValid;
}

QString OAI_similar_get_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_similar_get_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_calls_per_month_isSet) {
        obj.insert(QString("calls_per_month"), ::OpenAPI::toJsonValue(m_calls_per_month));
    }
    if (m_companies.size() > 0) {
        obj.insert(QString("companies"), ::OpenAPI::toJsonValue(m_companies));
    }
    if (m_count_remaining_isSet) {
        obj.insert(QString("count_remaining"), ::OpenAPI::toJsonValue(m_count_remaining));
    }
    if (m_input_company.isSet()) {
        obj.insert(QString("input_company"), ::OpenAPI::toJsonValue(m_input_company));
    }
    if (m_renewal_date_isSet) {
        obj.insert(QString("renewal_date"), ::OpenAPI::toJsonValue(m_renewal_date));
    }
    return obj;
}

QString OAI_similar_get_200_response::getCallsPerMonth() const {
    return m_calls_per_month;
}
void OAI_similar_get_200_response::setCallsPerMonth(const QString &calls_per_month) {
    m_calls_per_month = calls_per_month;
    m_calls_per_month_isSet = true;
}

bool OAI_similar_get_200_response::is_calls_per_month_Set() const{
    return m_calls_per_month_isSet;
}

bool OAI_similar_get_200_response::is_calls_per_month_Valid() const{
    return m_calls_per_month_isValid;
}

QList<OAISimilarCompany> OAI_similar_get_200_response::getCompanies() const {
    return m_companies;
}
void OAI_similar_get_200_response::setCompanies(const QList<OAISimilarCompany> &companies) {
    m_companies = companies;
    m_companies_isSet = true;
}

bool OAI_similar_get_200_response::is_companies_Set() const{
    return m_companies_isSet;
}

bool OAI_similar_get_200_response::is_companies_Valid() const{
    return m_companies_isValid;
}

QString OAI_similar_get_200_response::getCountRemaining() const {
    return m_count_remaining;
}
void OAI_similar_get_200_response::setCountRemaining(const QString &count_remaining) {
    m_count_remaining = count_remaining;
    m_count_remaining_isSet = true;
}

bool OAI_similar_get_200_response::is_count_remaining_Set() const{
    return m_count_remaining_isSet;
}

bool OAI_similar_get_200_response::is_count_remaining_Valid() const{
    return m_count_remaining_isValid;
}

OAIInputCompany OAI_similar_get_200_response::getInputCompany() const {
    return m_input_company;
}
void OAI_similar_get_200_response::setInputCompany(const OAIInputCompany &input_company) {
    m_input_company = input_company;
    m_input_company_isSet = true;
}

bool OAI_similar_get_200_response::is_input_company_Set() const{
    return m_input_company_isSet;
}

bool OAI_similar_get_200_response::is_input_company_Valid() const{
    return m_input_company_isValid;
}

QString OAI_similar_get_200_response::getRenewalDate() const {
    return m_renewal_date;
}
void OAI_similar_get_200_response::setRenewalDate(const QString &renewal_date) {
    m_renewal_date = renewal_date;
    m_renewal_date_isSet = true;
}

bool OAI_similar_get_200_response::is_renewal_date_Set() const{
    return m_renewal_date_isSet;
}

bool OAI_similar_get_200_response::is_renewal_date_Valid() const{
    return m_renewal_date_isValid;
}

bool OAI_similar_get_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calls_per_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_companies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_remaining_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_company.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_renewal_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_similar_get_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
