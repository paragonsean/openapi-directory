/**
 * Automata Market Intelligence API
 * This document provides the documentation for the Market Intelligence API by Automata. Get your API Key at https://apis.byautomata.io and check out our <a href='https://www.getpostman.com/collections/d182a1c78d4491d55e19'>Postman Collection</a>.<br><br>The root API endpoint is https://api.byautomata.io. Please refer to the code samples for examples of how to call the Market Intelligence API. The ContentPro endpoints (/contentpro-search and /contentpro-similar-text) are not included in the standard Market Intelligence API plans. Please contact support@byautomata.io for access.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@byautomata.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISimilarCompanySearch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISimilarCompanySearch::OAISimilarCompanySearch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISimilarCompanySearch::OAISimilarCompanySearch() {
    this->initializeModel();
}

OAISimilarCompanySearch::~OAISimilarCompanySearch() {}

void OAISimilarCompanySearch::initializeModel() {

    m_company_name_isSet = false;
    m_company_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_employee_isSet = false;
    m_employee_isValid = false;

    m_industry_isSet = false;
    m_industry_isValid = false;

    m_linkedin_isSet = false;
    m_linkedin_isValid = false;

    m_snippets_isSet = false;
    m_snippets_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_twitter_isSet = false;
    m_twitter_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAISimilarCompanySearch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISimilarCompanySearch::fromJsonObject(QJsonObject json) {

    m_company_name_isValid = ::OpenAPI::fromJsonValue(m_company_name, json[QString("companyName")]);
    m_company_name_isSet = !json[QString("companyName")].isNull() && m_company_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_employee_isValid = ::OpenAPI::fromJsonValue(m_employee, json[QString("employee")]);
    m_employee_isSet = !json[QString("employee")].isNull() && m_employee_isValid;

    m_industry_isValid = ::OpenAPI::fromJsonValue(m_industry, json[QString("industry")]);
    m_industry_isSet = !json[QString("industry")].isNull() && m_industry_isValid;

    m_linkedin_isValid = ::OpenAPI::fromJsonValue(m_linkedin, json[QString("linkedin")]);
    m_linkedin_isSet = !json[QString("linkedin")].isNull() && m_linkedin_isValid;

    m_snippets_isValid = ::OpenAPI::fromJsonValue(m_snippets, json[QString("snippets")]);
    m_snippets_isSet = !json[QString("snippets")].isNull() && m_snippets_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_twitter_isValid = ::OpenAPI::fromJsonValue(m_twitter, json[QString("twitter")]);
    m_twitter_isSet = !json[QString("twitter")].isNull() && m_twitter_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAISimilarCompanySearch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISimilarCompanySearch::asJsonObject() const {
    QJsonObject obj;
    if (m_company_name_isSet) {
        obj.insert(QString("companyName"), ::OpenAPI::toJsonValue(m_company_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_employee_isSet) {
        obj.insert(QString("employee"), ::OpenAPI::toJsonValue(m_employee));
    }
    if (m_industry_isSet) {
        obj.insert(QString("industry"), ::OpenAPI::toJsonValue(m_industry));
    }
    if (m_linkedin_isSet) {
        obj.insert(QString("linkedin"), ::OpenAPI::toJsonValue(m_linkedin));
    }
    if (m_snippets.size() > 0) {
        obj.insert(QString("snippets"), ::OpenAPI::toJsonValue(m_snippets));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_twitter_isSet) {
        obj.insert(QString("twitter"), ::OpenAPI::toJsonValue(m_twitter));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

QString OAISimilarCompanySearch::getCompanyName() const {
    return m_company_name;
}
void OAISimilarCompanySearch::setCompanyName(const QString &company_name) {
    m_company_name = company_name;
    m_company_name_isSet = true;
}

bool OAISimilarCompanySearch::is_company_name_Set() const{
    return m_company_name_isSet;
}

bool OAISimilarCompanySearch::is_company_name_Valid() const{
    return m_company_name_isValid;
}

QString OAISimilarCompanySearch::getDescription() const {
    return m_description;
}
void OAISimilarCompanySearch::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISimilarCompanySearch::is_description_Set() const{
    return m_description_isSet;
}

bool OAISimilarCompanySearch::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISimilarCompanySearch::getEmployee() const {
    return m_employee;
}
void OAISimilarCompanySearch::setEmployee(const QString &employee) {
    m_employee = employee;
    m_employee_isSet = true;
}

bool OAISimilarCompanySearch::is_employee_Set() const{
    return m_employee_isSet;
}

bool OAISimilarCompanySearch::is_employee_Valid() const{
    return m_employee_isValid;
}

QString OAISimilarCompanySearch::getIndustry() const {
    return m_industry;
}
void OAISimilarCompanySearch::setIndustry(const QString &industry) {
    m_industry = industry;
    m_industry_isSet = true;
}

bool OAISimilarCompanySearch::is_industry_Set() const{
    return m_industry_isSet;
}

bool OAISimilarCompanySearch::is_industry_Valid() const{
    return m_industry_isValid;
}

QString OAISimilarCompanySearch::getLinkedin() const {
    return m_linkedin;
}
void OAISimilarCompanySearch::setLinkedin(const QString &linkedin) {
    m_linkedin = linkedin;
    m_linkedin_isSet = true;
}

bool OAISimilarCompanySearch::is_linkedin_Set() const{
    return m_linkedin_isSet;
}

bool OAISimilarCompanySearch::is_linkedin_Valid() const{
    return m_linkedin_isValid;
}

QList<OAISnippet> OAISimilarCompanySearch::getSnippets() const {
    return m_snippets;
}
void OAISimilarCompanySearch::setSnippets(const QList<OAISnippet> &snippets) {
    m_snippets = snippets;
    m_snippets_isSet = true;
}

bool OAISimilarCompanySearch::is_snippets_Set() const{
    return m_snippets_isSet;
}

bool OAISimilarCompanySearch::is_snippets_Valid() const{
    return m_snippets_isValid;
}

QString OAISimilarCompanySearch::getTitle() const {
    return m_title;
}
void OAISimilarCompanySearch::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISimilarCompanySearch::is_title_Set() const{
    return m_title_isSet;
}

bool OAISimilarCompanySearch::is_title_Valid() const{
    return m_title_isValid;
}

QString OAISimilarCompanySearch::getTwitter() const {
    return m_twitter;
}
void OAISimilarCompanySearch::setTwitter(const QString &twitter) {
    m_twitter = twitter;
    m_twitter_isSet = true;
}

bool OAISimilarCompanySearch::is_twitter_Set() const{
    return m_twitter_isSet;
}

bool OAISimilarCompanySearch::is_twitter_Valid() const{
    return m_twitter_isValid;
}

QString OAISimilarCompanySearch::getWebsite() const {
    return m_website;
}
void OAISimilarCompanySearch::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAISimilarCompanySearch::is_website_Set() const{
    return m_website_isSet;
}

bool OAISimilarCompanySearch::is_website_Valid() const{
    return m_website_isValid;
}

bool OAISimilarCompanySearch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_company_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_industry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linkedin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snippets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_twitter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISimilarCompanySearch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
