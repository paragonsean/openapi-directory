/**
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GsiDispatch200Response from '../model/GsiDispatch200Response';

/**
* DispatchGreenEnergyDistributionAPI service.
* @module api/DispatchGreenEnergyDistributionAPIApi
* @version 2.0.0
*/
export default class DispatchGreenEnergyDistributionAPIApi {

    /**
    * Constructs a new DispatchGreenEnergyDistributionAPIApi. 
    * @alias module:api/DispatchGreenEnergyDistributionAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the gsiDispatch_0 operation.
     * @callback module:api/DispatchGreenEnergyDistributionAPIApi~gsiDispatch_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GsiDispatch200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dispatch (Green Energy Distribution Schedule)
     * Dispatch of green energy has two aspects to consider:   - Availability of gerneration facility (depends on weather and installed capacity)   - Demand of energy Using the green power index (Gr√ºnstromIndex) we have received a tool to automate distribution of energy in order to prevent redispatch situations. Doing this alows to opimize resource usage (tactical) and leverage data for investment planning (strategic). 
     * @param {Object} opts Optional parameters
     * @param {String} [zip] Zipcode (Postleitzahl) of a city in Germany.
     * @param {String} [key] Any valid Stromkonto account (address).
     * @param {module:api/DispatchGreenEnergyDistributionAPIApi~gsiDispatch_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GsiDispatch200Response}
     */
    gsiDispatch_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'zip': opts['zip'],
        'key': opts['key']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GsiDispatch200Response;
      return this.apiClient.callApi(
        '/gsi/dispatch', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
