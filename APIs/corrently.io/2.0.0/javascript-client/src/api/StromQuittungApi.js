/**
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import QuittungComitRequest from '../model/QuittungComitRequest';
import QuittungCreateRequest from '../model/QuittungCreateRequest';
import QuittungTSE200Response from '../model/QuittungTSE200Response';

/**
* StromQuittung service.
* @module api/StromQuittungApi
* @version 2.0.0
*/
export default class StromQuittungApi {

    /**
    * Constructs a new StromQuittungApi. 
    * @alias module:api/StromQuittungApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the quittungComit operation.
     * @callback module:api/StromQuittungApi~quittungComitCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finishs a collection of data and finalizes receipt. Use this method after collecting all data via quittung/prepare
     * Uses collected fields or provided fields to create a final receipt (Strom-Quittung). 
     * @param {Object} opts Optional parameters
     * @param {module:model/QuittungComitRequest} [quittungComitRequest] 
     * @param {module:api/StromQuittungApi~quittungComitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    quittungComit(opts, callback) {
      opts = opts || {};
      let postBody = opts['quittungComitRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/quittung/commit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quittungCreate operation.
     * @callback module:api/StromQuittungApi~quittungCreateCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a receipt for an energy delivery (only valid in Germany).
     * Creates a full featured receipt (Quittung) for an energy delivery as it appears on a charging session or similar events. Allows to embed receipt generation directly into external services. 
     * @param {module:model/QuittungCreateRequest} quittungCreateRequest 
     * @param {module:api/StromQuittungApi~quittungCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    quittungCreate(quittungCreateRequest, callback) {
      let postBody = quittungCreateRequest;
      // verify the required parameter 'quittungCreateRequest' is set
      if (quittungCreateRequest === undefined || quittungCreateRequest === null) {
        throw new Error("Missing the required parameter 'quittungCreateRequest' when calling quittungCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/quittung/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quittungPrepare operation.
     * @callback module:api/StromQuittungApi~quittungPrepareCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows to collect data with several requests (or a single) for a receipt.
     * During the first call an account parameter will be returned within the result object. Any other parameter will be set inside the preperation. If account is put into body/request in following requests, the existing collection will be extended/updated with the provided body parameters/values. 
     * @param {Object} opts Optional parameters
     * @param {module:model/QuittungComitRequest} [quittungComitRequest] 
     * @param {module:api/StromQuittungApi~quittungPrepareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    quittungPrepare(opts, callback) {
      opts = opts || {};
      let postBody = opts['quittungComitRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/quittung/prepare', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quittungTSE operation.
     * @callback module:api/StromQuittungApi~quittungTSECallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuittungTSE200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve TSE (Technische Sicherheitseinrichtung) Data for a given receipt (Strom-Quittung).
     * Allows to retrieve all relevant data assiciated to a TSE service call. E.q. Input parameters, public key and signature. 
     * @param {Object} opts Optional parameters
     * @param {String} [account] Quittung Identifier  (serialnumber generated during receipt generation process)
     * @param {module:api/StromQuittungApi~quittungTSECallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuittungTSE200Response}
     */
    quittungTSE(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'account': opts['account']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QuittungTSE200Response;
      return this.apiClient.callApi(
        '/quittung/tse', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quittungTSEData operation.
     * @callback module:api/StromQuittungApi~quittungTSEDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve TSE (Technische Sicherheitseinrichtung) raw data  only for a given receipt (Strom-Quittung).
     * Allows to retrieve input string for a signing process. 
     * @param {Object} opts Optional parameters
     * @param {String} [account] Quittung Identifier  (serialnumber generated during receipt generation process)
     * @param {module:api/StromQuittungApi~quittungTSEDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quittungTSEData(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'account': opts['account']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/quittung/tsedata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quittungTSEsignature operation.
     * @callback module:api/StromQuittungApi~quittungTSEsignatureCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve TSE (Technische Sicherheitseinrichtung) Signature only for a given receipt (Strom-Quittung).
     * Allows to retrieve digital signature for a given receipt. 
     * @param {Object} opts Optional parameters
     * @param {String} [account] Quittung Identifier  (serialnumber generated during receipt generation process)
     * @param {module:api/StromQuittungApi~quittungTSEsignatureCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quittungTSEsignature(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'account': opts['account']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/quittung/tsesignature', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quittungZugferd operation.
     * @callback module:api/StromQuittungApi~quittungZugferdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Zugferd XML for a given receipt (Strom-Quittung).
     * Allows to retrieve XML of the zugferd invoice. 
     * @param {Object} opts Optional parameters
     * @param {String} [account] Quittung Identifier  (serialnumber generated during receipt generation process)
     * @param {module:api/StromQuittungApi~quittungZugferdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quittungZugferd(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'account': opts['account']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/quittung/zugferd', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
