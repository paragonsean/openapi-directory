/**
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Ommeters model module.
 * @module model/Ommeters
 * @version 2.0.0
 */
class Ommeters {
    /**
     * Constructs a new <code>Ommeters</code>.
     * @alias module:model/Ommeters
     */
    constructor() { 
        
        Ommeters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Ommeters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Ommeters} obj Optional instance to populate.
     * @return {module:model/Ommeters} The populated <code>Ommeters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Ommeters();

            if (data.hasOwnProperty('currentScalingFactor')) {
                obj['currentScalingFactor'] = ApiClient.convertToType(data['currentScalingFactor'], 'Number');
            }
            if (data.hasOwnProperty('loadProfileType')) {
                obj['loadProfileType'] = ApiClient.convertToType(data['loadProfileType'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('manufacturerId')) {
                obj['manufacturerId'] = ApiClient.convertToType(data['manufacturerId'], 'String');
            }
            if (data.hasOwnProperty('measurementType')) {
                obj['measurementType'] = ApiClient.convertToType(data['measurementType'], 'String');
            }
            if (data.hasOwnProperty('meta')) {
                obj['meta'] = ApiClient.convertToType(data['meta'], 'String');
            }
            if (data.hasOwnProperty('meterId')) {
                obj['meterId'] = ApiClient.convertToType(data['meterId'], 'String');
            }
            if (data.hasOwnProperty('scalingFactor')) {
                obj['scalingFactor'] = ApiClient.convertToType(data['scalingFactor'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('voltageScalingFactor')) {
                obj['voltageScalingFactor'] = ApiClient.convertToType(data['voltageScalingFactor'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Ommeters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Ommeters</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['loadProfileType'] && !(typeof data['loadProfileType'] === 'string' || data['loadProfileType'] instanceof String)) {
            throw new Error("Expected the field `loadProfileType` to be a primitive type in the JSON string but got " + data['loadProfileType']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['manufacturerId'] && !(typeof data['manufacturerId'] === 'string' || data['manufacturerId'] instanceof String)) {
            throw new Error("Expected the field `manufacturerId` to be a primitive type in the JSON string but got " + data['manufacturerId']);
        }
        // ensure the json data is a string
        if (data['measurementType'] && !(typeof data['measurementType'] === 'string' || data['measurementType'] instanceof String)) {
            throw new Error("Expected the field `measurementType` to be a primitive type in the JSON string but got " + data['measurementType']);
        }
        // ensure the json data is a string
        if (data['meta'] && !(typeof data['meta'] === 'string' || data['meta'] instanceof String)) {
            throw new Error("Expected the field `meta` to be a primitive type in the JSON string but got " + data['meta']);
        }
        // ensure the json data is a string
        if (data['meterId'] && !(typeof data['meterId'] === 'string' || data['meterId'] instanceof String)) {
            throw new Error("Expected the field `meterId` to be a primitive type in the JSON string but got " + data['meterId']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Factor imposed on metered current by a transducer
 * @member {Number} currentScalingFactor
 */
Ommeters.prototype['currentScalingFactor'] = undefined;

/**
 * Metering load profile type associated with the meter
 * @member {String} loadProfileType
 */
Ommeters.prototype['loadProfileType'] = undefined;

/**
 * Basic address information for geo coding
 * @member {String} location
 */
Ommeters.prototype['location'] = undefined;

/**
 * DLMS manufacturerId
 * @member {String} manufacturerId
 */
Ommeters.prototype['manufacturerId'] = undefined;

/**
 * Physical quantity being measured by the meter
 * @member {String} measurementType
 */
Ommeters.prototype['measurementType'] = undefined;

/**
 * Statistical metadata for this household
 * @member {String} meta
 */
Ommeters.prototype['meta'] = undefined;

/**
 * identifier to be used in other methods like readings or activities.
 * @member {String} meterId
 */
Ommeters.prototype['meterId'] = undefined;

/**
 * Factor imposed on metered current AND voltage by a transducer
 * @member {Number} scalingFactor
 */
Ommeters.prototype['scalingFactor'] = undefined;

/**
 * Device type of the meter
 * @member {String} type
 */
Ommeters.prototype['type'] = undefined;

/**
 * Factor imposed on metered voltage by a transducer
 * @member {Number} voltageScalingFactor
 */
Ommeters.prototype['voltageScalingFactor'] = undefined;






export default Ommeters;

