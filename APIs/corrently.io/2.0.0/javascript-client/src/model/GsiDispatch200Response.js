/**
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DispatchLocation from './DispatchLocation';
import GsiDispatch200ResponseTimeframe from './GsiDispatch200ResponseTimeframe';

/**
 * The GsiDispatch200Response model module.
 * @module model/GsiDispatch200Response
 * @version 2.0.0
 */
class GsiDispatch200Response {
    /**
     * Constructs a new <code>GsiDispatch200Response</code>.
     * @alias module:model/GsiDispatch200Response
     */
    constructor() { 
        
        GsiDispatch200Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GsiDispatch200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GsiDispatch200Response} obj Optional instance to populate.
     * @return {module:model/GsiDispatch200Response} The populated <code>GsiDispatch200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GsiDispatch200Response();

            if (data.hasOwnProperty('avg_distance_km')) {
                obj['avg_distance_km'] = ApiClient.convertToType(data['avg_distance_km'], 'Number');
            }
            if (data.hasOwnProperty('dispatch_from')) {
                obj['dispatch_from'] = ApiClient.convertToType(data['dispatch_from'], [DispatchLocation]);
            }
            if (data.hasOwnProperty('dispatch_target')) {
                obj['dispatch_target'] = ApiClient.convertToType(data['dispatch_target'], [DispatchLocation]);
            }
            if (data.hasOwnProperty('postmix')) {
                obj['postmix'] = ApiClient.convertToType(data['postmix'], Object);
            }
            if (data.hasOwnProperty('premix')) {
                obj['premix'] = ApiClient.convertToType(data['premix'], Object);
            }
            if (data.hasOwnProperty('timeframe')) {
                obj['timeframe'] = GsiDispatch200ResponseTimeframe.constructFromObject(data['timeframe']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GsiDispatch200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GsiDispatch200Response</code>.
     */
    static validateJSON(data) {
        if (data['dispatch_from']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dispatch_from'])) {
                throw new Error("Expected the field `dispatch_from` to be an array in the JSON data but got " + data['dispatch_from']);
            }
            // validate the optional field `dispatch_from` (array)
            for (const item of data['dispatch_from']) {
                DispatchLocation.validateJSON(item);
            };
        }
        if (data['dispatch_target']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dispatch_target'])) {
                throw new Error("Expected the field `dispatch_target` to be an array in the JSON data but got " + data['dispatch_target']);
            }
            // validate the optional field `dispatch_target` (array)
            for (const item of data['dispatch_target']) {
                DispatchLocation.validateJSON(item);
            };
        }
        // validate the optional field `timeframe`
        if (data['timeframe']) { // data not null
          GsiDispatch200ResponseTimeframe.validateJSON(data['timeframe']);
        }

        return true;
    }


}



/**
 * Averaged geospatial distance in kilometers between energy generation and usage at requested location.
 * @member {Number} avg_distance_km
 */
GsiDispatch200Response.prototype['avg_distance_km'] = undefined;

/**
 * List of current sources of green energy (into requested location)
 * @member {Array.<module:model/DispatchLocation>} dispatch_from
 */
GsiDispatch200Response.prototype['dispatch_from'] = undefined;

/**
 * List of current targets of green energy (out of requested location)
 * @member {Array.<module:model/DispatchLocation>} dispatch_target
 */
GsiDispatch200Response.prototype['dispatch_target'] = undefined;

/**
 * Green Energy Mix after dispatch of given city
 * @member {Object} postmix
 */
GsiDispatch200Response.prototype['postmix'] = undefined;

/**
 * Green Energy Mix prior to dispatch of given city
 * @member {Object} premix
 */
GsiDispatch200Response.prototype['premix'] = undefined;

/**
 * @member {module:model/GsiDispatch200ResponseTimeframe} timeframe
 */
GsiDispatch200Response.prototype['timeframe'] = undefined;






export default GsiDispatch200Response;

