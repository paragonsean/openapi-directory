/**
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Transactions model module.
 * @module model/Transactions
 * @version 2.0.0
 */
class Transactions {
    /**
     * Constructs a new <code>Transactions</code>.
     * @alias module:model/Transactions
     */
    constructor() { 
        
        Transactions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Transactions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Transactions} obj Optional instance to populate.
     * @return {module:model/Transactions} The populated <code>Transactions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Transactions();

            if (data.hasOwnProperty('cashier')) {
                obj['cashier'] = ApiClient.convertToType(data['cashier'], 'String');
            }
            if (data.hasOwnProperty('timeStamp')) {
                obj['timeStamp'] = ApiClient.convertToType(data['timeStamp'], 'Number');
            }
            if (data.hasOwnProperty('txid')) {
                obj['txid'] = ApiClient.convertToType(data['txid'], 'String');
            }
            if (data.hasOwnProperty('txtype')) {
                obj['txtype'] = ApiClient.convertToType(data['txtype'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Transactions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Transactions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cashier'] && !(typeof data['cashier'] === 'string' || data['cashier'] instanceof String)) {
            throw new Error("Expected the field `cashier` to be a primitive type in the JSON string but got " + data['cashier']);
        }
        // ensure the json data is a string
        if (data['txid'] && !(typeof data['txid'] === 'string' || data['txid'] instanceof String)) {
            throw new Error("Expected the field `txid` to be a primitive type in the JSON string but got " + data['txid']);
        }
        // ensure the json data is a string
        if (data['txtype'] && !(typeof data['txtype'] === 'string' || data['txtype'] instanceof String)) {
            throw new Error("Expected the field `txtype` to be a primitive type in the JSON string but got " + data['txtype']);
        }

        return true;
    }


}



/**
 * Pretty print of counter signing party
 * @member {String} cashier
 */
Transactions.prototype['cashier'] = undefined;

/**
 * Cross signed timestamp of transaction
 * @member {Number} timeStamp
 */
Transactions.prototype['timeStamp'] = undefined;

/**
 * Unique hash of this transaction as provided by counter signing party
 * @member {String} txid
 */
Transactions.prototype['txid'] = undefined;

/**
 * Type of transaction per cashier implementation and schema
 * @member {String} txtype
 */
Transactions.prototype['txtype'] = undefined;

/**
 * Amount covered by transaction
 * @member {Number} value
 */
Transactions.prototype['value'] = undefined;






export default Transactions;

