/**
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ForecastItem model module.
 * @module model/ForecastItem
 * @version 2.0.0
 */
class ForecastItem {
    /**
     * Constructs a new <code>ForecastItem</code>.
     * @alias module:model/ForecastItem
     */
    constructor() { 
        
        ForecastItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ForecastItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ForecastItem} obj Optional instance to populate.
     * @return {module:model/ForecastItem} The populated <code>ForecastItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ForecastItem();

            if (data.hasOwnProperty('co2_g_oekostrom')) {
                obj['co2_g_oekostrom'] = ApiClient.convertToType(data['co2_g_oekostrom'], 'Number');
            }
            if (data.hasOwnProperty('energyprice')) {
                obj['energyprice'] = ApiClient.convertToType(data['energyprice'], 'Number');
            }
            if (data.hasOwnProperty('epochtime')) {
                obj['epochtime'] = ApiClient.convertToType(data['epochtime'], 'Number');
            }
            if (data.hasOwnProperty('gsi')) {
                obj['gsi'] = ApiClient.convertToType(data['gsi'], 'Number');
            }
            if (data.hasOwnProperty('scaled')) {
                obj['scaled'] = ApiClient.convertToType(data['scaled'], 'Boolean');
            }
            if (data.hasOwnProperty('sci')) {
                obj['sci'] = ApiClient.convertToType(data['sci'], 'Number');
            }
            if (data.hasOwnProperty('timeStamp')) {
                obj['timeStamp'] = ApiClient.convertToType(data['timeStamp'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ForecastItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ForecastItem</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * CO2 footprint in Gramm per kwh (only Green Power)
 * @member {Number} co2_g_oekostrom
 */
ForecastItem.prototype['co2_g_oekostrom'] = undefined;

/**
 * Local/regional energyprice modification (cent per kWh or euro per MWh).
 * @member {Number} energyprice
 */
ForecastItem.prototype['energyprice'] = undefined;

/**
 * Timestamps in Seconds
 * @member {Number} epochtime
 */
ForecastItem.prototype['epochtime'] = undefined;

/**
 * Actual GreenPowerIndex for given Timestamp (between 0-100)
 * @member {Number} gsi
 */
ForecastItem.prototype['gsi'] = undefined;

/**
 * Indicates if scaling is in operation to predict values
 * @member {Boolean} scaled
 */
ForecastItem.prototype['scaled'] = undefined;

/**
 * Subindex just for Solar Energy
 * @member {Number} sci
 */
ForecastItem.prototype['sci'] = undefined;

/**
 * Timestamp in Standard Milliseconds
 * @member {Number} timeStamp
 */
ForecastItem.prototype['timeStamp'] = undefined;






export default ForecastItem;

