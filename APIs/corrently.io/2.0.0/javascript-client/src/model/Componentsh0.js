/**
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Componentsh0 model module.
 * @module model/Componentsh0
 * @version 2.0.0
 */
class Componentsh0 {
    /**
     * Constructs a new <code>Componentsh0</code>.
     * @alias module:model/Componentsh0
     */
    constructor() { 
        
        Componentsh0.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Componentsh0</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Componentsh0} obj Optional instance to populate.
     * @return {module:model/Componentsh0} The populated <code>Componentsh0</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Componentsh0();

            if (data.hasOwnProperty('components')) {
                obj['components'] = ApiClient.convertToType(data['components'], [Componentsh0]);
            }
            if (data.hasOwnProperty('describtion')) {
                obj['describtion'] = ApiClient.convertToType(data['describtion'], 'String');
            }
            if (data.hasOwnProperty('mutlityplier')) {
                obj['mutlityplier'] = ApiClient.convertToType(data['mutlityplier'], 'String');
            }
            if (data.hasOwnProperty('per')) {
                obj['per'] = ApiClient.convertToType(data['per'], 'Number');
            }
            if (data.hasOwnProperty('sum')) {
                obj['sum'] = ApiClient.convertToType(data['sum'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Componentsh0</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Componentsh0</code>.
     */
    static validateJSON(data) {
        if (data['components']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['components'])) {
                throw new Error("Expected the field `components` to be an array in the JSON data but got " + data['components']);
            }
            // validate the optional field `components` (array)
            for (const item of data['components']) {
                Componentsh0.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['describtion'] && !(typeof data['describtion'] === 'string' || data['describtion'] instanceof String)) {
            throw new Error("Expected the field `describtion` to be a primitive type in the JSON string but got " + data['describtion']);
        }
        // ensure the json data is a string
        if (data['mutlityplier'] && !(typeof data['mutlityplier'] === 'string' || data['mutlityplier'] instanceof String)) {
            throw new Error("Expected the field `mutlityplier` to be a primitive type in the JSON string but got " + data['mutlityplier']);
        }

        return true;
    }


}



/**
 * Sub components of this price
 * @member {Array.<module:model/Componentsh0>} components
 */
Componentsh0.prototype['components'] = undefined;

/**
 * What is this price component about
 * @member {String} describtion
 */
Componentsh0.prototype['describtion'] = undefined;

/**
 * Frequency/dependency of component
 * @member {String} mutlityplier
 */
Componentsh0.prototype['mutlityplier'] = undefined;

/**
 * Single unit price multiyplier is based on
 * @member {Number} per
 */
Componentsh0.prototype['per'] = undefined;

/**
 * Total sum in Euro for this price component.
 * @member {Number} sum
 */
Componentsh0.prototype['sum'] = undefined;






export default Componentsh0;

