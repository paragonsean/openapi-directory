/**
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CorrentlyIo);
  }
}(this, function(expect, CorrentlyIo) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CorrentlyIo.Ommeters();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Ommeters', function() {
    it('should create an instance of Ommeters', function() {
      // uncomment below and update the code to test Ommeters
      //var instance = new CorrentlyIo.Ommeters();
      //expect(instance).to.be.a(CorrentlyIo.Ommeters);
    });

    it('should have the property currentScalingFactor (base name: "currentScalingFactor")', function() {
      // uncomment below and update the code to test the property currentScalingFactor
      //var instance = new CorrentlyIo.Ommeters();
      //expect(instance).to.be();
    });

    it('should have the property loadProfileType (base name: "loadProfileType")', function() {
      // uncomment below and update the code to test the property loadProfileType
      //var instance = new CorrentlyIo.Ommeters();
      //expect(instance).to.be();
    });

    it('should have the property location (base name: "location")', function() {
      // uncomment below and update the code to test the property location
      //var instance = new CorrentlyIo.Ommeters();
      //expect(instance).to.be();
    });

    it('should have the property manufacturerId (base name: "manufacturerId")', function() {
      // uncomment below and update the code to test the property manufacturerId
      //var instance = new CorrentlyIo.Ommeters();
      //expect(instance).to.be();
    });

    it('should have the property measurementType (base name: "measurementType")', function() {
      // uncomment below and update the code to test the property measurementType
      //var instance = new CorrentlyIo.Ommeters();
      //expect(instance).to.be();
    });

    it('should have the property meta (base name: "meta")', function() {
      // uncomment below and update the code to test the property meta
      //var instance = new CorrentlyIo.Ommeters();
      //expect(instance).to.be();
    });

    it('should have the property meterId (base name: "meterId")', function() {
      // uncomment below and update the code to test the property meterId
      //var instance = new CorrentlyIo.Ommeters();
      //expect(instance).to.be();
    });

    it('should have the property scalingFactor (base name: "scalingFactor")', function() {
      // uncomment below and update the code to test the property scalingFactor
      //var instance = new CorrentlyIo.Ommeters();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new CorrentlyIo.Ommeters();
      //expect(instance).to.be();
    });

    it('should have the property voltageScalingFactor (base name: "voltageScalingFactor")', function() {
      // uncomment below and update the code to test the property voltageScalingFactor
      //var instance = new CorrentlyIo.Ommeters();
      //expect(instance).to.be();
    });

  });

}));
