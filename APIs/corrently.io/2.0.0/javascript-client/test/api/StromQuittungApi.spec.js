/**
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CorrentlyIo);
  }
}(this, function(expect, CorrentlyIo) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CorrentlyIo.StromQuittungApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('StromQuittungApi', function() {
    describe('quittungComit', function() {
      it('should call quittungComit successfully', function(done) {
        //uncomment below and update the code to test quittungComit
        //instance.quittungComit(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('quittungCreate', function() {
      it('should call quittungCreate successfully', function(done) {
        //uncomment below and update the code to test quittungCreate
        //instance.quittungCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('quittungPrepare', function() {
      it('should call quittungPrepare successfully', function(done) {
        //uncomment below and update the code to test quittungPrepare
        //instance.quittungPrepare(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('quittungTSE', function() {
      it('should call quittungTSE successfully', function(done) {
        //uncomment below and update the code to test quittungTSE
        //instance.quittungTSE(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('quittungTSEData', function() {
      it('should call quittungTSEData successfully', function(done) {
        //uncomment below and update the code to test quittungTSEData
        //instance.quittungTSEData(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('quittungTSEsignature', function() {
      it('should call quittungTSEsignature successfully', function(done) {
        //uncomment below and update the code to test quittungTSEsignature
        //instance.quittungTSEsignature(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('quittungZugferd', function() {
      it('should call quittungZugferd successfully', function(done) {
        //uncomment below and update the code to test quittungZugferd
        //instance.quittungZugferd(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
