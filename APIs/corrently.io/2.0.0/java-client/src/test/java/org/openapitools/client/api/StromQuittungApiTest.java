/*
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.QuittungComitRequest;
import org.openapitools.client.model.QuittungCreateRequest;
import org.openapitools.client.model.QuittungTSE200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StromQuittungApi
 */
@Disabled
public class StromQuittungApiTest {

    private final StromQuittungApi api = new StromQuittungApi();

    /**
     * Finishs a collection of data and finalizes receipt. Use this method after collecting all data via quittung/prepare
     *
     * Uses collected fields or provided fields to create a final receipt (Strom-Quittung). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void quittungComitTest() throws ApiException {
        QuittungComitRequest quittungComitRequest = null;
        String response = api.quittungComit(quittungComitRequest);
        // TODO: test validations
    }

    /**
     * Create a receipt for an energy delivery (only valid in Germany).
     *
     * Creates a full featured receipt (Quittung) for an energy delivery as it appears on a charging session or similar events. Allows to embed receipt generation directly into external services. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void quittungCreateTest() throws ApiException {
        QuittungCreateRequest quittungCreateRequest = null;
        String response = api.quittungCreate(quittungCreateRequest);
        // TODO: test validations
    }

    /**
     * Allows to collect data with several requests (or a single) for a receipt.
     *
     * During the first call an account parameter will be returned within the result object. Any other parameter will be set inside the preperation. If account is put into body/request in following requests, the existing collection will be extended/updated with the provided body parameters/values. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void quittungPrepareTest() throws ApiException {
        QuittungComitRequest quittungComitRequest = null;
        String response = api.quittungPrepare(quittungComitRequest);
        // TODO: test validations
    }

    /**
     * Retrieve TSE (Technische Sicherheitseinrichtung) Data for a given receipt (Strom-Quittung).
     *
     * Allows to retrieve all relevant data assiciated to a TSE service call. E.q. Input parameters, public key and signature. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void quittungTSETest() throws ApiException {
        String account = null;
        QuittungTSE200Response response = api.quittungTSE(account);
        // TODO: test validations
    }

    /**
     * Retrieve TSE (Technische Sicherheitseinrichtung) raw data  only for a given receipt (Strom-Quittung).
     *
     * Allows to retrieve input string for a signing process. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void quittungTSEDataTest() throws ApiException {
        String account = null;
        api.quittungTSEData(account);
        // TODO: test validations
    }

    /**
     * Retrieve TSE (Technische Sicherheitseinrichtung) Signature only for a given receipt (Strom-Quittung).
     *
     * Allows to retrieve digital signature for a given receipt. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void quittungTSEsignatureTest() throws ApiException {
        String account = null;
        api.quittungTSEsignature(account);
        // TODO: test validations
    }

    /**
     * Retrieve Zugferd XML for a given receipt (Strom-Quittung).
     *
     * Allows to retrieve XML of the zugferd invoice. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void quittungZugferdTest() throws ApiException {
        String account = null;
        api.quittungZugferd(account);
        // TODO: test validations
    }

}
