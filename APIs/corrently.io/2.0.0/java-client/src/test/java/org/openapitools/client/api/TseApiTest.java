/*
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.QuittungTSE200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TseApi
 */
@Disabled
public class TseApiTest {

    private final TseApi api = new TseApi();

    /**
     * Retrieve TSE (Technische Sicherheitseinrichtung) raw data  only for a given receipt (Strom-Quittung).
     *
     * Allows to retrieve input string for a signing process. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void quittungTSEData_0Test() throws ApiException {
        String account = null;
        api.quittungTSEData_0(account);
        // TODO: test validations
    }

    /**
     * Retrieve TSE (Technische Sicherheitseinrichtung) Data for a given receipt (Strom-Quittung).
     *
     * Allows to retrieve all relevant data assiciated to a TSE service call. E.q. Input parameters, public key and signature. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void quittungTSE_0Test() throws ApiException {
        String account = null;
        QuittungTSE200Response response = api.quittungTSE_0(account);
        // TODO: test validations
    }

    /**
     * Retrieve TSE (Technische Sicherheitseinrichtung) Signature only for a given receipt (Strom-Quittung).
     *
     * Allows to retrieve digital signature for a given receipt. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void quittungTSEsignature_0Test() throws ApiException {
        String account = null;
        api.quittungTSEsignature_0(account);
        // TODO: test validations
    }

    /**
     * Retrieve Zugferd XML for a given receipt (Strom-Quittung).
     *
     * Allows to retrieve XML of the zugferd invoice. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void quittungZugferd_0Test() throws ApiException {
        String account = null;
        api.quittungZugferd_0(account);
        // TODO: test validations
    }

}
