/*
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Transactions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:09.156290-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Transactions {
  public static final String SERIALIZED_NAME_CASHIER = "cashier";
  @SerializedName(SERIALIZED_NAME_CASHIER)
  private String cashier;

  public static final String SERIALIZED_NAME_TIME_STAMP = "timeStamp";
  @SerializedName(SERIALIZED_NAME_TIME_STAMP)
  private Integer timeStamp;

  public static final String SERIALIZED_NAME_TXID = "txid";
  @SerializedName(SERIALIZED_NAME_TXID)
  private String txid;

  public static final String SERIALIZED_NAME_TXTYPE = "txtype";
  @SerializedName(SERIALIZED_NAME_TXTYPE)
  private String txtype;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Integer value;

  public Transactions() {
  }

  public Transactions cashier(String cashier) {
    this.cashier = cashier;
    return this;
  }

  /**
   * Pretty print of counter signing party
   * @return cashier
   */
  @javax.annotation.Nullable
  public String getCashier() {
    return cashier;
  }

  public void setCashier(String cashier) {
    this.cashier = cashier;
  }


  public Transactions timeStamp(Integer timeStamp) {
    this.timeStamp = timeStamp;
    return this;
  }

  /**
   * Cross signed timestamp of transaction
   * @return timeStamp
   */
  @javax.annotation.Nullable
  public Integer getTimeStamp() {
    return timeStamp;
  }

  public void setTimeStamp(Integer timeStamp) {
    this.timeStamp = timeStamp;
  }


  public Transactions txid(String txid) {
    this.txid = txid;
    return this;
  }

  /**
   * Unique hash of this transaction as provided by counter signing party
   * @return txid
   */
  @javax.annotation.Nullable
  public String getTxid() {
    return txid;
  }

  public void setTxid(String txid) {
    this.txid = txid;
  }


  public Transactions txtype(String txtype) {
    this.txtype = txtype;
    return this;
  }

  /**
   * Type of transaction per cashier implementation and schema
   * @return txtype
   */
  @javax.annotation.Nullable
  public String getTxtype() {
    return txtype;
  }

  public void setTxtype(String txtype) {
    this.txtype = txtype;
  }


  public Transactions value(Integer value) {
    this.value = value;
    return this;
  }

  /**
   * Amount covered by transaction
   * @return value
   */
  @javax.annotation.Nullable
  public Integer getValue() {
    return value;
  }

  public void setValue(Integer value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transactions transactions = (Transactions) o;
    return Objects.equals(this.cashier, transactions.cashier) &&
        Objects.equals(this.timeStamp, transactions.timeStamp) &&
        Objects.equals(this.txid, transactions.txid) &&
        Objects.equals(this.txtype, transactions.txtype) &&
        Objects.equals(this.value, transactions.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cashier, timeStamp, txid, txtype, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transactions {\n");
    sb.append("    cashier: ").append(toIndentedString(cashier)).append("\n");
    sb.append("    timeStamp: ").append(toIndentedString(timeStamp)).append("\n");
    sb.append("    txid: ").append(toIndentedString(txid)).append("\n");
    sb.append("    txtype: ").append(toIndentedString(txtype)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cashier");
    openapiFields.add("timeStamp");
    openapiFields.add("txid");
    openapiFields.add("txtype");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Transactions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Transactions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Transactions is not found in the empty JSON string", Transactions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Transactions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Transactions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cashier") != null && !jsonObj.get("cashier").isJsonNull()) && !jsonObj.get("cashier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cashier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cashier").toString()));
      }
      if ((jsonObj.get("txid") != null && !jsonObj.get("txid").isJsonNull()) && !jsonObj.get("txid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `txid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("txid").toString()));
      }
      if ((jsonObj.get("txtype") != null && !jsonObj.get("txtype").isJsonNull()) && !jsonObj.get("txtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `txtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("txtype").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Transactions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Transactions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Transactions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Transactions.class));

       return (TypeAdapter<T>) new TypeAdapter<Transactions>() {
           @Override
           public void write(JsonWriter out, Transactions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Transactions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Transactions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Transactions
   * @throws IOException if the JSON string is invalid with respect to Transactions
   */
  public static Transactions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Transactions.class);
  }

  /**
   * Convert an instance of Transactions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

