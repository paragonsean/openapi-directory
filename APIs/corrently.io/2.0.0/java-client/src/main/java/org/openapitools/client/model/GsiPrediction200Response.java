/*
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ForecastItem;
import org.openapitools.client.model.GsiPrediction200ResponseLocation;
import org.openapitools.client.model.GsiPrediction200ResponseMatrix;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GsiPrediction200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:09.156290-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GsiPrediction200Response {
  public static final String SERIALIZED_NAME_FORECAST = "forecast";
  @SerializedName(SERIALIZED_NAME_FORECAST)
  private List<ForecastItem> forecast = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private GsiPrediction200ResponseLocation location;

  public static final String SERIALIZED_NAME_MATRIX = "matrix";
  @SerializedName(SERIALIZED_NAME_MATRIX)
  private GsiPrediction200ResponseMatrix matrix;

  public GsiPrediction200Response() {
  }

  public GsiPrediction200Response forecast(List<ForecastItem> forecast) {
    this.forecast = forecast;
    return this;
  }

  public GsiPrediction200Response addForecastItem(ForecastItem forecastItem) {
    if (this.forecast == null) {
      this.forecast = new ArrayList<>();
    }
    this.forecast.add(forecastItem);
    return this;
  }

  /**
   * Prediction for the upcomming hours
   * @return forecast
   */
  @javax.annotation.Nullable
  public List<ForecastItem> getForecast() {
    return forecast;
  }

  public void setForecast(List<ForecastItem> forecast) {
    this.forecast = forecast;
  }


  public GsiPrediction200Response location(GsiPrediction200ResponseLocation location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public GsiPrediction200ResponseLocation getLocation() {
    return location;
  }

  public void setLocation(GsiPrediction200ResponseLocation location) {
    this.location = location;
  }


  public GsiPrediction200Response matrix(GsiPrediction200ResponseMatrix matrix) {
    this.matrix = matrix;
    return this;
  }

  /**
   * Get matrix
   * @return matrix
   */
  @javax.annotation.Nullable
  public GsiPrediction200ResponseMatrix getMatrix() {
    return matrix;
  }

  public void setMatrix(GsiPrediction200ResponseMatrix matrix) {
    this.matrix = matrix;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GsiPrediction200Response gsiPrediction200Response = (GsiPrediction200Response) o;
    return Objects.equals(this.forecast, gsiPrediction200Response.forecast) &&
        Objects.equals(this.location, gsiPrediction200Response.location) &&
        Objects.equals(this.matrix, gsiPrediction200Response.matrix);
  }

  @Override
  public int hashCode() {
    return Objects.hash(forecast, location, matrix);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GsiPrediction200Response {\n");
    sb.append("    forecast: ").append(toIndentedString(forecast)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    matrix: ").append(toIndentedString(matrix)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("forecast");
    openapiFields.add("location");
    openapiFields.add("matrix");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GsiPrediction200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GsiPrediction200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GsiPrediction200Response is not found in the empty JSON string", GsiPrediction200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GsiPrediction200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GsiPrediction200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("forecast") != null && !jsonObj.get("forecast").isJsonNull()) {
        JsonArray jsonArrayforecast = jsonObj.getAsJsonArray("forecast");
        if (jsonArrayforecast != null) {
          // ensure the json data is an array
          if (!jsonObj.get("forecast").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `forecast` to be an array in the JSON string but got `%s`", jsonObj.get("forecast").toString()));
          }

          // validate the optional field `forecast` (array)
          for (int i = 0; i < jsonArrayforecast.size(); i++) {
            ForecastItem.validateJsonElement(jsonArrayforecast.get(i));
          };
        }
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        GsiPrediction200ResponseLocation.validateJsonElement(jsonObj.get("location"));
      }
      // validate the optional field `matrix`
      if (jsonObj.get("matrix") != null && !jsonObj.get("matrix").isJsonNull()) {
        GsiPrediction200ResponseMatrix.validateJsonElement(jsonObj.get("matrix"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GsiPrediction200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GsiPrediction200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GsiPrediction200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GsiPrediction200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GsiPrediction200Response>() {
           @Override
           public void write(JsonWriter out, GsiPrediction200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GsiPrediction200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GsiPrediction200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GsiPrediction200Response
   * @throws IOException if the JSON string is invalid with respect to GsiPrediction200Response
   */
  public static GsiPrediction200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GsiPrediction200Response.class);
  }

  /**
   * Convert an instance of GsiPrediction200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

