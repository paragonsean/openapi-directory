/*
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Ommeters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:09.156290-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Ommeters {
  public static final String SERIALIZED_NAME_CURRENT_SCALING_FACTOR = "currentScalingFactor";
  @SerializedName(SERIALIZED_NAME_CURRENT_SCALING_FACTOR)
  private Integer currentScalingFactor;

  public static final String SERIALIZED_NAME_LOAD_PROFILE_TYPE = "loadProfileType";
  @SerializedName(SERIALIZED_NAME_LOAD_PROFILE_TYPE)
  private String loadProfileType;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_MANUFACTURER_ID = "manufacturerId";
  @SerializedName(SERIALIZED_NAME_MANUFACTURER_ID)
  private String manufacturerId;

  public static final String SERIALIZED_NAME_MEASUREMENT_TYPE = "measurementType";
  @SerializedName(SERIALIZED_NAME_MEASUREMENT_TYPE)
  private String measurementType;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private String meta;

  public static final String SERIALIZED_NAME_METER_ID = "meterId";
  @SerializedName(SERIALIZED_NAME_METER_ID)
  private String meterId;

  public static final String SERIALIZED_NAME_SCALING_FACTOR = "scalingFactor";
  @SerializedName(SERIALIZED_NAME_SCALING_FACTOR)
  private Integer scalingFactor;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VOLTAGE_SCALING_FACTOR = "voltageScalingFactor";
  @SerializedName(SERIALIZED_NAME_VOLTAGE_SCALING_FACTOR)
  private Integer voltageScalingFactor;

  public Ommeters() {
  }

  public Ommeters currentScalingFactor(Integer currentScalingFactor) {
    this.currentScalingFactor = currentScalingFactor;
    return this;
  }

  /**
   * Factor imposed on metered current by a transducer
   * @return currentScalingFactor
   */
  @javax.annotation.Nullable
  public Integer getCurrentScalingFactor() {
    return currentScalingFactor;
  }

  public void setCurrentScalingFactor(Integer currentScalingFactor) {
    this.currentScalingFactor = currentScalingFactor;
  }


  public Ommeters loadProfileType(String loadProfileType) {
    this.loadProfileType = loadProfileType;
    return this;
  }

  /**
   * Metering load profile type associated with the meter
   * @return loadProfileType
   */
  @javax.annotation.Nullable
  public String getLoadProfileType() {
    return loadProfileType;
  }

  public void setLoadProfileType(String loadProfileType) {
    this.loadProfileType = loadProfileType;
  }


  public Ommeters location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Basic address information for geo coding
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public Ommeters manufacturerId(String manufacturerId) {
    this.manufacturerId = manufacturerId;
    return this;
  }

  /**
   * DLMS manufacturerId
   * @return manufacturerId
   */
  @javax.annotation.Nullable
  public String getManufacturerId() {
    return manufacturerId;
  }

  public void setManufacturerId(String manufacturerId) {
    this.manufacturerId = manufacturerId;
  }


  public Ommeters measurementType(String measurementType) {
    this.measurementType = measurementType;
    return this;
  }

  /**
   * Physical quantity being measured by the meter
   * @return measurementType
   */
  @javax.annotation.Nullable
  public String getMeasurementType() {
    return measurementType;
  }

  public void setMeasurementType(String measurementType) {
    this.measurementType = measurementType;
  }


  public Ommeters meta(String meta) {
    this.meta = meta;
    return this;
  }

  /**
   * Statistical metadata for this household
   * @return meta
   */
  @javax.annotation.Nullable
  public String getMeta() {
    return meta;
  }

  public void setMeta(String meta) {
    this.meta = meta;
  }


  public Ommeters meterId(String meterId) {
    this.meterId = meterId;
    return this;
  }

  /**
   * identifier to be used in other methods like readings or activities.
   * @return meterId
   */
  @javax.annotation.Nullable
  public String getMeterId() {
    return meterId;
  }

  public void setMeterId(String meterId) {
    this.meterId = meterId;
  }


  public Ommeters scalingFactor(Integer scalingFactor) {
    this.scalingFactor = scalingFactor;
    return this;
  }

  /**
   * Factor imposed on metered current AND voltage by a transducer
   * @return scalingFactor
   */
  @javax.annotation.Nullable
  public Integer getScalingFactor() {
    return scalingFactor;
  }

  public void setScalingFactor(Integer scalingFactor) {
    this.scalingFactor = scalingFactor;
  }


  public Ommeters type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Device type of the meter
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Ommeters voltageScalingFactor(Integer voltageScalingFactor) {
    this.voltageScalingFactor = voltageScalingFactor;
    return this;
  }

  /**
   * Factor imposed on metered voltage by a transducer
   * @return voltageScalingFactor
   */
  @javax.annotation.Nullable
  public Integer getVoltageScalingFactor() {
    return voltageScalingFactor;
  }

  public void setVoltageScalingFactor(Integer voltageScalingFactor) {
    this.voltageScalingFactor = voltageScalingFactor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Ommeters ommeters = (Ommeters) o;
    return Objects.equals(this.currentScalingFactor, ommeters.currentScalingFactor) &&
        Objects.equals(this.loadProfileType, ommeters.loadProfileType) &&
        Objects.equals(this.location, ommeters.location) &&
        Objects.equals(this.manufacturerId, ommeters.manufacturerId) &&
        Objects.equals(this.measurementType, ommeters.measurementType) &&
        Objects.equals(this.meta, ommeters.meta) &&
        Objects.equals(this.meterId, ommeters.meterId) &&
        Objects.equals(this.scalingFactor, ommeters.scalingFactor) &&
        Objects.equals(this.type, ommeters.type) &&
        Objects.equals(this.voltageScalingFactor, ommeters.voltageScalingFactor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentScalingFactor, loadProfileType, location, manufacturerId, measurementType, meta, meterId, scalingFactor, type, voltageScalingFactor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Ommeters {\n");
    sb.append("    currentScalingFactor: ").append(toIndentedString(currentScalingFactor)).append("\n");
    sb.append("    loadProfileType: ").append(toIndentedString(loadProfileType)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    manufacturerId: ").append(toIndentedString(manufacturerId)).append("\n");
    sb.append("    measurementType: ").append(toIndentedString(measurementType)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    meterId: ").append(toIndentedString(meterId)).append("\n");
    sb.append("    scalingFactor: ").append(toIndentedString(scalingFactor)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    voltageScalingFactor: ").append(toIndentedString(voltageScalingFactor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currentScalingFactor");
    openapiFields.add("loadProfileType");
    openapiFields.add("location");
    openapiFields.add("manufacturerId");
    openapiFields.add("measurementType");
    openapiFields.add("meta");
    openapiFields.add("meterId");
    openapiFields.add("scalingFactor");
    openapiFields.add("type");
    openapiFields.add("voltageScalingFactor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Ommeters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Ommeters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Ommeters is not found in the empty JSON string", Ommeters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Ommeters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Ommeters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("loadProfileType") != null && !jsonObj.get("loadProfileType").isJsonNull()) && !jsonObj.get("loadProfileType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loadProfileType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loadProfileType").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("manufacturerId") != null && !jsonObj.get("manufacturerId").isJsonNull()) && !jsonObj.get("manufacturerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manufacturerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manufacturerId").toString()));
      }
      if ((jsonObj.get("measurementType") != null && !jsonObj.get("measurementType").isJsonNull()) && !jsonObj.get("measurementType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `measurementType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("measurementType").toString()));
      }
      if ((jsonObj.get("meta") != null && !jsonObj.get("meta").isJsonNull()) && !jsonObj.get("meta").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meta` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meta").toString()));
      }
      if ((jsonObj.get("meterId") != null && !jsonObj.get("meterId").isJsonNull()) && !jsonObj.get("meterId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meterId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meterId").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Ommeters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Ommeters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Ommeters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Ommeters.class));

       return (TypeAdapter<T>) new TypeAdapter<Ommeters>() {
           @Override
           public void write(JsonWriter out, Ommeters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Ommeters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Ommeters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Ommeters
   * @throws IOException if the JSON string is invalid with respect to Ommeters
   */
  public static Ommeters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Ommeters.class);
  }

  /**
   * Convert an instance of Ommeters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

