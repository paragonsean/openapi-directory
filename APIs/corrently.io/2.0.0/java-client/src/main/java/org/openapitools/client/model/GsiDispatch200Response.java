/*
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DispatchLocation;
import org.openapitools.client.model.GsiDispatch200ResponseTimeframe;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GsiDispatch200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:09.156290-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GsiDispatch200Response {
  public static final String SERIALIZED_NAME_AVG_DISTANCE_KM = "avg_distance_km";
  @SerializedName(SERIALIZED_NAME_AVG_DISTANCE_KM)
  private BigDecimal avgDistanceKm;

  public static final String SERIALIZED_NAME_DISPATCH_FROM = "dispatch_from";
  @SerializedName(SERIALIZED_NAME_DISPATCH_FROM)
  private List<DispatchLocation> dispatchFrom = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPATCH_TARGET = "dispatch_target";
  @SerializedName(SERIALIZED_NAME_DISPATCH_TARGET)
  private List<DispatchLocation> dispatchTarget = new ArrayList<>();

  public static final String SERIALIZED_NAME_POSTMIX = "postmix";
  @SerializedName(SERIALIZED_NAME_POSTMIX)
  private Object postmix;

  public static final String SERIALIZED_NAME_PREMIX = "premix";
  @SerializedName(SERIALIZED_NAME_PREMIX)
  private Object premix;

  public static final String SERIALIZED_NAME_TIMEFRAME = "timeframe";
  @SerializedName(SERIALIZED_NAME_TIMEFRAME)
  private GsiDispatch200ResponseTimeframe timeframe;

  public GsiDispatch200Response() {
  }

  public GsiDispatch200Response avgDistanceKm(BigDecimal avgDistanceKm) {
    this.avgDistanceKm = avgDistanceKm;
    return this;
  }

  /**
   * Averaged geospatial distance in kilometers between energy generation and usage at requested location.
   * @return avgDistanceKm
   */
  @javax.annotation.Nullable
  public BigDecimal getAvgDistanceKm() {
    return avgDistanceKm;
  }

  public void setAvgDistanceKm(BigDecimal avgDistanceKm) {
    this.avgDistanceKm = avgDistanceKm;
  }


  public GsiDispatch200Response dispatchFrom(List<DispatchLocation> dispatchFrom) {
    this.dispatchFrom = dispatchFrom;
    return this;
  }

  public GsiDispatch200Response addDispatchFromItem(DispatchLocation dispatchFromItem) {
    if (this.dispatchFrom == null) {
      this.dispatchFrom = new ArrayList<>();
    }
    this.dispatchFrom.add(dispatchFromItem);
    return this;
  }

  /**
   * List of current sources of green energy (into requested location)
   * @return dispatchFrom
   */
  @javax.annotation.Nullable
  public List<DispatchLocation> getDispatchFrom() {
    return dispatchFrom;
  }

  public void setDispatchFrom(List<DispatchLocation> dispatchFrom) {
    this.dispatchFrom = dispatchFrom;
  }


  public GsiDispatch200Response dispatchTarget(List<DispatchLocation> dispatchTarget) {
    this.dispatchTarget = dispatchTarget;
    return this;
  }

  public GsiDispatch200Response addDispatchTargetItem(DispatchLocation dispatchTargetItem) {
    if (this.dispatchTarget == null) {
      this.dispatchTarget = new ArrayList<>();
    }
    this.dispatchTarget.add(dispatchTargetItem);
    return this;
  }

  /**
   * List of current targets of green energy (out of requested location)
   * @return dispatchTarget
   */
  @javax.annotation.Nullable
  public List<DispatchLocation> getDispatchTarget() {
    return dispatchTarget;
  }

  public void setDispatchTarget(List<DispatchLocation> dispatchTarget) {
    this.dispatchTarget = dispatchTarget;
  }


  public GsiDispatch200Response postmix(Object postmix) {
    this.postmix = postmix;
    return this;
  }

  /**
   * Green Energy Mix after dispatch of given city
   * @return postmix
   */
  @javax.annotation.Nullable
  public Object getPostmix() {
    return postmix;
  }

  public void setPostmix(Object postmix) {
    this.postmix = postmix;
  }


  public GsiDispatch200Response premix(Object premix) {
    this.premix = premix;
    return this;
  }

  /**
   * Green Energy Mix prior to dispatch of given city
   * @return premix
   */
  @javax.annotation.Nullable
  public Object getPremix() {
    return premix;
  }

  public void setPremix(Object premix) {
    this.premix = premix;
  }


  public GsiDispatch200Response timeframe(GsiDispatch200ResponseTimeframe timeframe) {
    this.timeframe = timeframe;
    return this;
  }

  /**
   * Get timeframe
   * @return timeframe
   */
  @javax.annotation.Nullable
  public GsiDispatch200ResponseTimeframe getTimeframe() {
    return timeframe;
  }

  public void setTimeframe(GsiDispatch200ResponseTimeframe timeframe) {
    this.timeframe = timeframe;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GsiDispatch200Response gsiDispatch200Response = (GsiDispatch200Response) o;
    return Objects.equals(this.avgDistanceKm, gsiDispatch200Response.avgDistanceKm) &&
        Objects.equals(this.dispatchFrom, gsiDispatch200Response.dispatchFrom) &&
        Objects.equals(this.dispatchTarget, gsiDispatch200Response.dispatchTarget) &&
        Objects.equals(this.postmix, gsiDispatch200Response.postmix) &&
        Objects.equals(this.premix, gsiDispatch200Response.premix) &&
        Objects.equals(this.timeframe, gsiDispatch200Response.timeframe);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avgDistanceKm, dispatchFrom, dispatchTarget, postmix, premix, timeframe);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GsiDispatch200Response {\n");
    sb.append("    avgDistanceKm: ").append(toIndentedString(avgDistanceKm)).append("\n");
    sb.append("    dispatchFrom: ").append(toIndentedString(dispatchFrom)).append("\n");
    sb.append("    dispatchTarget: ").append(toIndentedString(dispatchTarget)).append("\n");
    sb.append("    postmix: ").append(toIndentedString(postmix)).append("\n");
    sb.append("    premix: ").append(toIndentedString(premix)).append("\n");
    sb.append("    timeframe: ").append(toIndentedString(timeframe)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avg_distance_km");
    openapiFields.add("dispatch_from");
    openapiFields.add("dispatch_target");
    openapiFields.add("postmix");
    openapiFields.add("premix");
    openapiFields.add("timeframe");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GsiDispatch200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GsiDispatch200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GsiDispatch200Response is not found in the empty JSON string", GsiDispatch200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GsiDispatch200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GsiDispatch200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("dispatch_from") != null && !jsonObj.get("dispatch_from").isJsonNull()) {
        JsonArray jsonArraydispatchFrom = jsonObj.getAsJsonArray("dispatch_from");
        if (jsonArraydispatchFrom != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dispatch_from").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dispatch_from` to be an array in the JSON string but got `%s`", jsonObj.get("dispatch_from").toString()));
          }

          // validate the optional field `dispatch_from` (array)
          for (int i = 0; i < jsonArraydispatchFrom.size(); i++) {
            DispatchLocation.validateJsonElement(jsonArraydispatchFrom.get(i));
          };
        }
      }
      if (jsonObj.get("dispatch_target") != null && !jsonObj.get("dispatch_target").isJsonNull()) {
        JsonArray jsonArraydispatchTarget = jsonObj.getAsJsonArray("dispatch_target");
        if (jsonArraydispatchTarget != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dispatch_target").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dispatch_target` to be an array in the JSON string but got `%s`", jsonObj.get("dispatch_target").toString()));
          }

          // validate the optional field `dispatch_target` (array)
          for (int i = 0; i < jsonArraydispatchTarget.size(); i++) {
            DispatchLocation.validateJsonElement(jsonArraydispatchTarget.get(i));
          };
        }
      }
      // validate the optional field `timeframe`
      if (jsonObj.get("timeframe") != null && !jsonObj.get("timeframe").isJsonNull()) {
        GsiDispatch200ResponseTimeframe.validateJsonElement(jsonObj.get("timeframe"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GsiDispatch200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GsiDispatch200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GsiDispatch200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GsiDispatch200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GsiDispatch200Response>() {
           @Override
           public void write(JsonWriter out, GsiDispatch200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GsiDispatch200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GsiDispatch200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GsiDispatch200Response
   * @throws IOException if the JSON string is invalid with respect to GsiDispatch200Response
   */
  public static GsiDispatch200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GsiDispatch200Response.class);
  }

  /**
   * Convert an instance of GsiDispatch200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

