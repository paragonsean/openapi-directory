/*
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MeteringPost200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:09.156290-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MeteringPost200Response {
  public static final String SERIALIZED_NAME_180 = "1.8.0";
  @SerializedName(SERIALIZED_NAME_180)
  private Integer _1_8_0;

  public static final String SERIALIZED_NAME_181 = "1.8.1";
  @SerializedName(SERIALIZED_NAME_181)
  private Integer _1_8_1;

  public static final String SERIALIZED_NAME_182 = "1.8.2";
  @SerializedName(SERIALIZED_NAME_182)
  private Integer _1_8_2;

  public static final String SERIALIZED_NAME_PROCESSING_TIME = "_processingTime";
  @SerializedName(SERIALIZED_NAME_PROCESSING_TIME)
  private Integer processingTime;

  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private String account;

  public static final String SERIALIZED_NAME_CO2_G_OEKOSTROM = "co2_g_oekostrom";
  @SerializedName(SERIALIZED_NAME_CO2_G_OEKOSTROM)
  private Integer co2GOekostrom;

  public static final String SERIALIZED_NAME_CO2_G_STANDARD = "co2_g_standard";
  @SerializedName(SERIALIZED_NAME_CO2_G_STANDARD)
  private Integer co2GStandard;

  public static final String SERIALIZED_NAME_TIME_STAMP = "timeStamp";
  @SerializedName(SERIALIZED_NAME_TIME_STAMP)
  private Integer timeStamp;

  public MeteringPost200Response() {
  }

  public MeteringPost200Response _1_8_0(Integer _1_8_0) {
    this._1_8_0 = _1_8_0;
    return this;
  }

  /**
   * Reading as provided as input in Wh
   * @return _1_8_0
   */
  @javax.annotation.Nullable
  public Integer get180() {
    return _1_8_0;
  }

  public void set180(Integer _1_8_0) {
    this._1_8_0 = _1_8_0;
  }


  public MeteringPost200Response _1_8_1(Integer _1_8_1) {
    this._1_8_1 = _1_8_1;
    return this;
  }

  /**
   * Green energy calculated using Green Power Index (GrünstromIndex) in Wh
   * @return _1_8_1
   */
  @javax.annotation.Nullable
  public Integer get181() {
    return _1_8_1;
  }

  public void set181(Integer _1_8_1) {
    this._1_8_1 = _1_8_1;
  }


  public MeteringPost200Response _1_8_2(Integer _1_8_2) {
    this._1_8_2 = _1_8_2;
    return this;
  }

  /**
   * Grey energy calculated using Green Power Index (GrünstromIndex) in Wh
   * @return _1_8_2
   */
  @javax.annotation.Nullable
  public Integer get182() {
    return _1_8_2;
  }

  public void set182(Integer _1_8_2) {
    this._1_8_2 = _1_8_2;
  }


  public MeteringPost200Response processingTime(Integer processingTime) {
    this.processingTime = processingTime;
    return this;
  }

  /**
   * Time this reading got imported into consensus (e.q. signed timestamp).
   * @return processingTime
   */
  @javax.annotation.Nullable
  public Integer getProcessingTime() {
    return processingTime;
  }

  public void setProcessingTime(Integer processingTime) {
    this.processingTime = processingTime;
  }


  public MeteringPost200Response account(String account) {
    this.account = account;
    return this;
  }

  /**
   * Stromkonto/Metering address allocated (this is not the MELOID!)
   * @return account
   */
  @javax.annotation.Nullable
  public String getAccount() {
    return account;
  }

  public void setAccount(String account) {
    this.account = account;
  }


  public MeteringPost200Response co2GOekostrom(Integer co2GOekostrom) {
    this.co2GOekostrom = co2GOekostrom;
    return this;
  }

  /**
   * CO2 Emission of metered energy in a green energy mix (e.q. Ökostromtarif)
   * @return co2GOekostrom
   */
  @javax.annotation.Nullable
  public Integer getCo2GOekostrom() {
    return co2GOekostrom;
  }

  public void setCo2GOekostrom(Integer co2GOekostrom) {
    this.co2GOekostrom = co2GOekostrom;
  }


  public MeteringPost200Response co2GStandard(Integer co2GStandard) {
    this.co2GStandard = co2GStandard;
    return this;
  }

  /**
   * CO2 Emission of metered energy in a standard mix
   * @return co2GStandard
   */
  @javax.annotation.Nullable
  public Integer getCo2GStandard() {
    return co2GStandard;
  }

  public void setCo2GStandard(Integer co2GStandard) {
    this.co2GStandard = co2GStandard;
  }


  public MeteringPost200Response timeStamp(Integer timeStamp) {
    this.timeStamp = timeStamp;
    return this;
  }

  /**
   * API Consensus time this reading was fully received
   * @return timeStamp
   */
  @javax.annotation.Nullable
  public Integer getTimeStamp() {
    return timeStamp;
  }

  public void setTimeStamp(Integer timeStamp) {
    this.timeStamp = timeStamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MeteringPost200Response meteringPost200Response = (MeteringPost200Response) o;
    return Objects.equals(this._1_8_0, meteringPost200Response._1_8_0) &&
        Objects.equals(this._1_8_1, meteringPost200Response._1_8_1) &&
        Objects.equals(this._1_8_2, meteringPost200Response._1_8_2) &&
        Objects.equals(this.processingTime, meteringPost200Response.processingTime) &&
        Objects.equals(this.account, meteringPost200Response.account) &&
        Objects.equals(this.co2GOekostrom, meteringPost200Response.co2GOekostrom) &&
        Objects.equals(this.co2GStandard, meteringPost200Response.co2GStandard) &&
        Objects.equals(this.timeStamp, meteringPost200Response.timeStamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_1_8_0, _1_8_1, _1_8_2, processingTime, account, co2GOekostrom, co2GStandard, timeStamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MeteringPost200Response {\n");
    sb.append("    _1_8_0: ").append(toIndentedString(_1_8_0)).append("\n");
    sb.append("    _1_8_1: ").append(toIndentedString(_1_8_1)).append("\n");
    sb.append("    _1_8_2: ").append(toIndentedString(_1_8_2)).append("\n");
    sb.append("    processingTime: ").append(toIndentedString(processingTime)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    co2GOekostrom: ").append(toIndentedString(co2GOekostrom)).append("\n");
    sb.append("    co2GStandard: ").append(toIndentedString(co2GStandard)).append("\n");
    sb.append("    timeStamp: ").append(toIndentedString(timeStamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("1.8.0");
    openapiFields.add("1.8.1");
    openapiFields.add("1.8.2");
    openapiFields.add("_processingTime");
    openapiFields.add("account");
    openapiFields.add("co2_g_oekostrom");
    openapiFields.add("co2_g_standard");
    openapiFields.add("timeStamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MeteringPost200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MeteringPost200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MeteringPost200Response is not found in the empty JSON string", MeteringPost200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MeteringPost200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MeteringPost200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) && !jsonObj.get("account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MeteringPost200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MeteringPost200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MeteringPost200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MeteringPost200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<MeteringPost200Response>() {
           @Override
           public void write(JsonWriter out, MeteringPost200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MeteringPost200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MeteringPost200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MeteringPost200Response
   * @throws IOException if the JSON string is invalid with respect to MeteringPost200Response
   */
  public static MeteringPost200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MeteringPost200Response.class);
  }

  /**
   * Convert an instance of MeteringPost200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

