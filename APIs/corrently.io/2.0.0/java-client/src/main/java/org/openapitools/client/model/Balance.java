/*
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Transactions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Balance
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:09.156290-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Balance {
  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private Integer balance;

  public static final String SERIALIZED_NAME_HABEN = "haben";
  @SerializedName(SERIALIZED_NAME_HABEN)
  private Integer haben;

  public static final String SERIALIZED_NAME_SOLL = "soll";
  @SerializedName(SERIALIZED_NAME_SOLL)
  private Integer soll;

  public static final String SERIALIZED_NAME_TXS = "txs";
  @SerializedName(SERIALIZED_NAME_TXS)
  private List<Transactions> txs = new ArrayList<>();

  /**
   * Type of subbalance (sub account)
   */
  @JsonAdapter(VariationEnum.Adapter.class)
  public enum VariationEnum {
    GSB("gsb"),
    
    ERZEUGUNG("erzeugung"),
    
    EIGENSTROM("eigenstrom"),
    
    CO2("co2"),
    
    BAEUME("baeume");

    private String value;

    VariationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VariationEnum fromValue(String value) {
      for (VariationEnum b : VariationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VariationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VariationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VariationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VariationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VariationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VARIATION = "variation";
  @SerializedName(SERIALIZED_NAME_VARIATION)
  private VariationEnum variation;

  public Balance() {
  }

  public Balance balance(Integer balance) {
    this.balance = balance;
    return this;
  }

  /**
   * Sum owned - sum due by account
   * @return balance
   */
  @javax.annotation.Nullable
  public Integer getBalance() {
    return balance;
  }

  public void setBalance(Integer balance) {
    this.balance = balance;
  }


  public Balance haben(Integer haben) {
    this.haben = haben;
    return this;
  }

  /**
   * Sum owned by account
   * @return haben
   */
  @javax.annotation.Nullable
  public Integer getHaben() {
    return haben;
  }

  public void setHaben(Integer haben) {
    this.haben = haben;
  }


  public Balance soll(Integer soll) {
    this.soll = soll;
    return this;
  }

  /**
   * Sum due by account
   * @return soll
   */
  @javax.annotation.Nullable
  public Integer getSoll() {
    return soll;
  }

  public void setSoll(Integer soll) {
    this.soll = soll;
  }


  public Balance txs(List<Transactions> txs) {
    this.txs = txs;
    return this;
  }

  public Balance addTxsItem(Transactions txsItem) {
    if (this.txs == null) {
      this.txs = new ArrayList<>();
    }
    this.txs.add(txsItem);
    return this;
  }

  /**
   * Get txs
   * @return txs
   */
  @javax.annotation.Nullable
  public List<Transactions> getTxs() {
    return txs;
  }

  public void setTxs(List<Transactions> txs) {
    this.txs = txs;
  }


  public Balance variation(VariationEnum variation) {
    this.variation = variation;
    return this;
  }

  /**
   * Type of subbalance (sub account)
   * @return variation
   */
  @javax.annotation.Nullable
  public VariationEnum getVariation() {
    return variation;
  }

  public void setVariation(VariationEnum variation) {
    this.variation = variation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Balance balance = (Balance) o;
    return Objects.equals(this.balance, balance.balance) &&
        Objects.equals(this.haben, balance.haben) &&
        Objects.equals(this.soll, balance.soll) &&
        Objects.equals(this.txs, balance.txs) &&
        Objects.equals(this.variation, balance.variation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(balance, haben, soll, txs, variation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Balance {\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    haben: ").append(toIndentedString(haben)).append("\n");
    sb.append("    soll: ").append(toIndentedString(soll)).append("\n");
    sb.append("    txs: ").append(toIndentedString(txs)).append("\n");
    sb.append("    variation: ").append(toIndentedString(variation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("balance");
    openapiFields.add("haben");
    openapiFields.add("soll");
    openapiFields.add("txs");
    openapiFields.add("variation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Balance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Balance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Balance is not found in the empty JSON string", Balance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Balance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Balance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("txs") != null && !jsonObj.get("txs").isJsonNull()) {
        JsonArray jsonArraytxs = jsonObj.getAsJsonArray("txs");
        if (jsonArraytxs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("txs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `txs` to be an array in the JSON string but got `%s`", jsonObj.get("txs").toString()));
          }

          // validate the optional field `txs` (array)
          for (int i = 0; i < jsonArraytxs.size(); i++) {
            Transactions.validateJsonElement(jsonArraytxs.get(i));
          };
        }
      }
      if ((jsonObj.get("variation") != null && !jsonObj.get("variation").isJsonNull()) && !jsonObj.get("variation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variation").toString()));
      }
      // validate the optional field `variation`
      if (jsonObj.get("variation") != null && !jsonObj.get("variation").isJsonNull()) {
        VariationEnum.validateJsonElement(jsonObj.get("variation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Balance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Balance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Balance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Balance.class));

       return (TypeAdapter<T>) new TypeAdapter<Balance>() {
           @Override
           public void write(JsonWriter out, Balance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Balance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Balance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Balance
   * @throws IOException if the JSON string is invalid with respect to Balance
   */
  public static Balance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Balance.class);
  }

  /**
   * Convert an instance of Balance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

