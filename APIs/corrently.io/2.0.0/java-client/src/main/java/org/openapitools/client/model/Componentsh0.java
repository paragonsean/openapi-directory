/*
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Componentsh0
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:09.156290-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Componentsh0 {
  public static final String SERIALIZED_NAME_COMPONENTS = "components";
  @SerializedName(SERIALIZED_NAME_COMPONENTS)
  private List<Componentsh0> components = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIBTION = "describtion";
  @SerializedName(SERIALIZED_NAME_DESCRIBTION)
  private String describtion;

  public static final String SERIALIZED_NAME_MUTLITYPLIER = "mutlityplier";
  @SerializedName(SERIALIZED_NAME_MUTLITYPLIER)
  private String mutlityplier;

  public static final String SERIALIZED_NAME_PER = "per";
  @SerializedName(SERIALIZED_NAME_PER)
  private Double per;

  public static final String SERIALIZED_NAME_SUM = "sum";
  @SerializedName(SERIALIZED_NAME_SUM)
  private Double sum;

  public Componentsh0() {
  }

  public Componentsh0 components(List<Componentsh0> components) {
    this.components = components;
    return this;
  }

  public Componentsh0 addComponentsItem(Componentsh0 componentsItem) {
    if (this.components == null) {
      this.components = new ArrayList<>();
    }
    this.components.add(componentsItem);
    return this;
  }

  /**
   * Sub components of this price
   * @return components
   */
  @javax.annotation.Nullable
  public List<Componentsh0> getComponents() {
    return components;
  }

  public void setComponents(List<Componentsh0> components) {
    this.components = components;
  }


  public Componentsh0 describtion(String describtion) {
    this.describtion = describtion;
    return this;
  }

  /**
   * What is this price component about
   * @return describtion
   */
  @javax.annotation.Nullable
  public String getDescribtion() {
    return describtion;
  }

  public void setDescribtion(String describtion) {
    this.describtion = describtion;
  }


  public Componentsh0 mutlityplier(String mutlityplier) {
    this.mutlityplier = mutlityplier;
    return this;
  }

  /**
   * Frequency/dependency of component
   * @return mutlityplier
   */
  @javax.annotation.Nullable
  public String getMutlityplier() {
    return mutlityplier;
  }

  public void setMutlityplier(String mutlityplier) {
    this.mutlityplier = mutlityplier;
  }


  public Componentsh0 per(Double per) {
    this.per = per;
    return this;
  }

  /**
   * Single unit price multiyplier is based on
   * @return per
   */
  @javax.annotation.Nullable
  public Double getPer() {
    return per;
  }

  public void setPer(Double per) {
    this.per = per;
  }


  public Componentsh0 sum(Double sum) {
    this.sum = sum;
    return this;
  }

  /**
   * Total sum in Euro for this price component.
   * @return sum
   */
  @javax.annotation.Nullable
  public Double getSum() {
    return sum;
  }

  public void setSum(Double sum) {
    this.sum = sum;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Componentsh0 componentsh0 = (Componentsh0) o;
    return Objects.equals(this.components, componentsh0.components) &&
        Objects.equals(this.describtion, componentsh0.describtion) &&
        Objects.equals(this.mutlityplier, componentsh0.mutlityplier) &&
        Objects.equals(this.per, componentsh0.per) &&
        Objects.equals(this.sum, componentsh0.sum);
  }

  @Override
  public int hashCode() {
    return Objects.hash(components, describtion, mutlityplier, per, sum);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Componentsh0 {\n");
    sb.append("    components: ").append(toIndentedString(components)).append("\n");
    sb.append("    describtion: ").append(toIndentedString(describtion)).append("\n");
    sb.append("    mutlityplier: ").append(toIndentedString(mutlityplier)).append("\n");
    sb.append("    per: ").append(toIndentedString(per)).append("\n");
    sb.append("    sum: ").append(toIndentedString(sum)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("components");
    openapiFields.add("describtion");
    openapiFields.add("mutlityplier");
    openapiFields.add("per");
    openapiFields.add("sum");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Componentsh0
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Componentsh0.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Componentsh0 is not found in the empty JSON string", Componentsh0.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Componentsh0.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Componentsh0` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("components") != null && !jsonObj.get("components").isJsonNull()) {
        JsonArray jsonArraycomponents = jsonObj.getAsJsonArray("components");
        if (jsonArraycomponents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("components").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `components` to be an array in the JSON string but got `%s`", jsonObj.get("components").toString()));
          }

          // validate the optional field `components` (array)
          for (int i = 0; i < jsonArraycomponents.size(); i++) {
            Componentsh0.validateJsonElement(jsonArraycomponents.get(i));
          };
        }
      }
      if ((jsonObj.get("describtion") != null && !jsonObj.get("describtion").isJsonNull()) && !jsonObj.get("describtion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `describtion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("describtion").toString()));
      }
      if ((jsonObj.get("mutlityplier") != null && !jsonObj.get("mutlityplier").isJsonNull()) && !jsonObj.get("mutlityplier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mutlityplier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mutlityplier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Componentsh0.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Componentsh0' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Componentsh0> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Componentsh0.class));

       return (TypeAdapter<T>) new TypeAdapter<Componentsh0>() {
           @Override
           public void write(JsonWriter out, Componentsh0 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Componentsh0 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Componentsh0 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Componentsh0
   * @throws IOException if the JSON string is invalid with respect to Componentsh0
   */
  public static Componentsh0 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Componentsh0.class);
  }

  /**
   * Convert an instance of Componentsh0 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

