/*
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Componentsh0;
import org.openapitools.client.model.Tariffh0;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TariffPriceApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TariffPriceApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TariffPriceApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for tariffSLPH0
     * @param zipcode Zipcode (Postzleitzahl) of a city in Germany. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tariffSLPH0Call(String zipcode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tariff/slph0";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zipcode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zipcode", zipcode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tariffSLPH0ValidateBeforeCall(String zipcode, final ApiCallback _callback) throws ApiException {
        return tariffSLPH0Call(zipcode, _callback);

    }

    /**
     * Energy Tariff information
     * Provides pricing data for private households with standard load profiles (Standardlastprofil H0). 
     * @param zipcode Zipcode (Postzleitzahl) of a city in Germany. (optional)
     * @return List&lt;Tariffh0&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<Tariffh0> tariffSLPH0(String zipcode) throws ApiException {
        ApiResponse<List<Tariffh0>> localVarResp = tariffSLPH0WithHttpInfo(zipcode);
        return localVarResp.getData();
    }

    /**
     * Energy Tariff information
     * Provides pricing data for private households with standard load profiles (Standardlastprofil H0). 
     * @param zipcode Zipcode (Postzleitzahl) of a city in Germany. (optional)
     * @return ApiResponse&lt;List&lt;Tariffh0&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Tariffh0>> tariffSLPH0WithHttpInfo(String zipcode) throws ApiException {
        okhttp3.Call localVarCall = tariffSLPH0ValidateBeforeCall(zipcode, null);
        Type localVarReturnType = new TypeToken<List<Tariffh0>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Energy Tariff information (asynchronously)
     * Provides pricing data for private households with standard load profiles (Standardlastprofil H0). 
     * @param zipcode Zipcode (Postzleitzahl) of a city in Germany. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tariffSLPH0Async(String zipcode, final ApiCallback<List<Tariffh0>> _callback) throws ApiException {

        okhttp3.Call localVarCall = tariffSLPH0ValidateBeforeCall(zipcode, _callback);
        Type localVarReturnType = new TypeToken<List<Tariffh0>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tariffcomponents
     * @param zipcode Zipcode (Postzleitzahl) of a city in Germany. (optional)
     * @param email Valid email address to assign request to (pre offer generation). Ensure GDPR (DSGVO) at any time (optional)
     * @param kwha Total amount of energy in kilo-watt-hours per year. (sample 2100) (optional)
     * @param milliseconds If provided all results will be scaled to this timeframe (optional)
     * @param wh If provided together with milliseconds, a cost component stament for a particular event (like charging a car) will be created. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tariffcomponentsCall(String zipcode, String email, Integer kwha, Integer milliseconds, Integer wh, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tariff/components";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zipcode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zipcode", zipcode));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (kwha != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("kwha", kwha));
        }

        if (milliseconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("milliseconds", milliseconds));
        }

        if (wh != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wh", wh));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tariffcomponentsValidateBeforeCall(String zipcode, String email, Integer kwha, Integer milliseconds, Integer wh, final ApiCallback _callback) throws ApiException {
        return tariffcomponentsCall(zipcode, email, kwha, milliseconds, wh, _callback);

    }

    /**
     * Energy Tariff price components
     * Provides insides into the different cost components of energy for a private household. Sample Request: https://api.corrently.io/v2.0/tariff/components?email&#x3D;demo%40corrently.io&amp;zip&#x3D;69168&amp;kwha&#x3D;3300 
     * @param zipcode Zipcode (Postzleitzahl) of a city in Germany. (optional)
     * @param email Valid email address to assign request to (pre offer generation). Ensure GDPR (DSGVO) at any time (optional)
     * @param kwha Total amount of energy in kilo-watt-hours per year. (sample 2100) (optional)
     * @param milliseconds If provided all results will be scaled to this timeframe (optional)
     * @param wh If provided together with milliseconds, a cost component stament for a particular event (like charging a car) will be created. (optional)
     * @return Componentsh0
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Componentsh0 tariffcomponents(String zipcode, String email, Integer kwha, Integer milliseconds, Integer wh) throws ApiException {
        ApiResponse<Componentsh0> localVarResp = tariffcomponentsWithHttpInfo(zipcode, email, kwha, milliseconds, wh);
        return localVarResp.getData();
    }

    /**
     * Energy Tariff price components
     * Provides insides into the different cost components of energy for a private household. Sample Request: https://api.corrently.io/v2.0/tariff/components?email&#x3D;demo%40corrently.io&amp;zip&#x3D;69168&amp;kwha&#x3D;3300 
     * @param zipcode Zipcode (Postzleitzahl) of a city in Germany. (optional)
     * @param email Valid email address to assign request to (pre offer generation). Ensure GDPR (DSGVO) at any time (optional)
     * @param kwha Total amount of energy in kilo-watt-hours per year. (sample 2100) (optional)
     * @param milliseconds If provided all results will be scaled to this timeframe (optional)
     * @param wh If provided together with milliseconds, a cost component stament for a particular event (like charging a car) will be created. (optional)
     * @return ApiResponse&lt;Componentsh0&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Componentsh0> tariffcomponentsWithHttpInfo(String zipcode, String email, Integer kwha, Integer milliseconds, Integer wh) throws ApiException {
        okhttp3.Call localVarCall = tariffcomponentsValidateBeforeCall(zipcode, email, kwha, milliseconds, wh, null);
        Type localVarReturnType = new TypeToken<Componentsh0>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Energy Tariff price components (asynchronously)
     * Provides insides into the different cost components of energy for a private household. Sample Request: https://api.corrently.io/v2.0/tariff/components?email&#x3D;demo%40corrently.io&amp;zip&#x3D;69168&amp;kwha&#x3D;3300 
     * @param zipcode Zipcode (Postzleitzahl) of a city in Germany. (optional)
     * @param email Valid email address to assign request to (pre offer generation). Ensure GDPR (DSGVO) at any time (optional)
     * @param kwha Total amount of energy in kilo-watt-hours per year. (sample 2100) (optional)
     * @param milliseconds If provided all results will be scaled to this timeframe (optional)
     * @param wh If provided together with milliseconds, a cost component stament for a particular event (like charging a car) will be created. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tariffcomponentsAsync(String zipcode, String email, Integer kwha, Integer milliseconds, Integer wh, final ApiCallback<Componentsh0> _callback) throws ApiException {

        okhttp3.Call localVarCall = tariffcomponentsValidateBeforeCall(zipcode, email, kwha, milliseconds, wh, _callback);
        Type localVarReturnType = new TypeToken<Componentsh0>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
