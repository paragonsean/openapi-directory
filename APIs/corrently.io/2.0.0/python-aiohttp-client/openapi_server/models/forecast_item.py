# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ForecastItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, co2_g_oekostrom: int=None, energyprice: float=None, epochtime: int=None, gsi: int=None, scaled: bool=None, sci: int=None, time_stamp: int=None):
        """ForecastItem - a model defined in OpenAPI

        :param co2_g_oekostrom: The co2_g_oekostrom of this ForecastItem.
        :param energyprice: The energyprice of this ForecastItem.
        :param epochtime: The epochtime of this ForecastItem.
        :param gsi: The gsi of this ForecastItem.
        :param scaled: The scaled of this ForecastItem.
        :param sci: The sci of this ForecastItem.
        :param time_stamp: The time_stamp of this ForecastItem.
        """
        self.openapi_types = {
            'co2_g_oekostrom': int,
            'energyprice': float,
            'epochtime': int,
            'gsi': int,
            'scaled': bool,
            'sci': int,
            'time_stamp': int
        }

        self.attribute_map = {
            'co2_g_oekostrom': 'co2_g_oekostrom',
            'energyprice': 'energyprice',
            'epochtime': 'epochtime',
            'gsi': 'gsi',
            'scaled': 'scaled',
            'sci': 'sci',
            'time_stamp': 'timeStamp'
        }

        self._co2_g_oekostrom = co2_g_oekostrom
        self._energyprice = energyprice
        self._epochtime = epochtime
        self._gsi = gsi
        self._scaled = scaled
        self._sci = sci
        self._time_stamp = time_stamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ForecastItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ForecastItem of this ForecastItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def co2_g_oekostrom(self):
        """Gets the co2_g_oekostrom of this ForecastItem.

        CO2 footprint in Gramm per kwh (only Green Power)

        :return: The co2_g_oekostrom of this ForecastItem.
        :rtype: int
        """
        return self._co2_g_oekostrom

    @co2_g_oekostrom.setter
    def co2_g_oekostrom(self, co2_g_oekostrom):
        """Sets the co2_g_oekostrom of this ForecastItem.

        CO2 footprint in Gramm per kwh (only Green Power)

        :param co2_g_oekostrom: The co2_g_oekostrom of this ForecastItem.
        :type co2_g_oekostrom: int
        """

        self._co2_g_oekostrom = co2_g_oekostrom

    @property
    def energyprice(self):
        """Gets the energyprice of this ForecastItem.

        Local/regional energyprice modification (cent per kWh or euro per MWh).

        :return: The energyprice of this ForecastItem.
        :rtype: float
        """
        return self._energyprice

    @energyprice.setter
    def energyprice(self, energyprice):
        """Sets the energyprice of this ForecastItem.

        Local/regional energyprice modification (cent per kWh or euro per MWh).

        :param energyprice: The energyprice of this ForecastItem.
        :type energyprice: float
        """

        self._energyprice = energyprice

    @property
    def epochtime(self):
        """Gets the epochtime of this ForecastItem.

        Timestamps in Seconds

        :return: The epochtime of this ForecastItem.
        :rtype: int
        """
        return self._epochtime

    @epochtime.setter
    def epochtime(self, epochtime):
        """Sets the epochtime of this ForecastItem.

        Timestamps in Seconds

        :param epochtime: The epochtime of this ForecastItem.
        :type epochtime: int
        """

        self._epochtime = epochtime

    @property
    def gsi(self):
        """Gets the gsi of this ForecastItem.

        Actual GreenPowerIndex for given Timestamp (between 0-100)

        :return: The gsi of this ForecastItem.
        :rtype: int
        """
        return self._gsi

    @gsi.setter
    def gsi(self, gsi):
        """Sets the gsi of this ForecastItem.

        Actual GreenPowerIndex for given Timestamp (between 0-100)

        :param gsi: The gsi of this ForecastItem.
        :type gsi: int
        """

        self._gsi = gsi

    @property
    def scaled(self):
        """Gets the scaled of this ForecastItem.

        Indicates if scaling is in operation to predict values

        :return: The scaled of this ForecastItem.
        :rtype: bool
        """
        return self._scaled

    @scaled.setter
    def scaled(self, scaled):
        """Sets the scaled of this ForecastItem.

        Indicates if scaling is in operation to predict values

        :param scaled: The scaled of this ForecastItem.
        :type scaled: bool
        """

        self._scaled = scaled

    @property
    def sci(self):
        """Gets the sci of this ForecastItem.

        Subindex just for Solar Energy

        :return: The sci of this ForecastItem.
        :rtype: int
        """
        return self._sci

    @sci.setter
    def sci(self, sci):
        """Sets the sci of this ForecastItem.

        Subindex just for Solar Energy

        :param sci: The sci of this ForecastItem.
        :type sci: int
        """

        self._sci = sci

    @property
    def time_stamp(self):
        """Gets the time_stamp of this ForecastItem.

        Timestamp in Standard Milliseconds

        :return: The time_stamp of this ForecastItem.
        :rtype: int
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this ForecastItem.

        Timestamp in Standard Milliseconds

        :param time_stamp: The time_stamp of this ForecastItem.
        :type time_stamp: int
        """

        self._time_stamp = time_stamp
