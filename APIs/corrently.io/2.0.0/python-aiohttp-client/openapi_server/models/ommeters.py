# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Ommeters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_scaling_factor: int=None, load_profile_type: str=None, location: str=None, manufacturer_id: str=None, measurement_type: str=None, meta: str=None, meter_id: str=None, scaling_factor: int=None, type: str=None, voltage_scaling_factor: int=None):
        """Ommeters - a model defined in OpenAPI

        :param current_scaling_factor: The current_scaling_factor of this Ommeters.
        :param load_profile_type: The load_profile_type of this Ommeters.
        :param location: The location of this Ommeters.
        :param manufacturer_id: The manufacturer_id of this Ommeters.
        :param measurement_type: The measurement_type of this Ommeters.
        :param meta: The meta of this Ommeters.
        :param meter_id: The meter_id of this Ommeters.
        :param scaling_factor: The scaling_factor of this Ommeters.
        :param type: The type of this Ommeters.
        :param voltage_scaling_factor: The voltage_scaling_factor of this Ommeters.
        """
        self.openapi_types = {
            'current_scaling_factor': int,
            'load_profile_type': str,
            'location': str,
            'manufacturer_id': str,
            'measurement_type': str,
            'meta': str,
            'meter_id': str,
            'scaling_factor': int,
            'type': str,
            'voltage_scaling_factor': int
        }

        self.attribute_map = {
            'current_scaling_factor': 'currentScalingFactor',
            'load_profile_type': 'loadProfileType',
            'location': 'location',
            'manufacturer_id': 'manufacturerId',
            'measurement_type': 'measurementType',
            'meta': 'meta',
            'meter_id': 'meterId',
            'scaling_factor': 'scalingFactor',
            'type': 'type',
            'voltage_scaling_factor': 'voltageScalingFactor'
        }

        self._current_scaling_factor = current_scaling_factor
        self._load_profile_type = load_profile_type
        self._location = location
        self._manufacturer_id = manufacturer_id
        self._measurement_type = measurement_type
        self._meta = meta
        self._meter_id = meter_id
        self._scaling_factor = scaling_factor
        self._type = type
        self._voltage_scaling_factor = voltage_scaling_factor

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Ommeters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ommeters of this Ommeters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_scaling_factor(self):
        """Gets the current_scaling_factor of this Ommeters.

        Factor imposed on metered current by a transducer

        :return: The current_scaling_factor of this Ommeters.
        :rtype: int
        """
        return self._current_scaling_factor

    @current_scaling_factor.setter
    def current_scaling_factor(self, current_scaling_factor):
        """Sets the current_scaling_factor of this Ommeters.

        Factor imposed on metered current by a transducer

        :param current_scaling_factor: The current_scaling_factor of this Ommeters.
        :type current_scaling_factor: int
        """

        self._current_scaling_factor = current_scaling_factor

    @property
    def load_profile_type(self):
        """Gets the load_profile_type of this Ommeters.

        Metering load profile type associated with the meter

        :return: The load_profile_type of this Ommeters.
        :rtype: str
        """
        return self._load_profile_type

    @load_profile_type.setter
    def load_profile_type(self, load_profile_type):
        """Sets the load_profile_type of this Ommeters.

        Metering load profile type associated with the meter

        :param load_profile_type: The load_profile_type of this Ommeters.
        :type load_profile_type: str
        """

        self._load_profile_type = load_profile_type

    @property
    def location(self):
        """Gets the location of this Ommeters.

        Basic address information for geo coding

        :return: The location of this Ommeters.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Ommeters.

        Basic address information for geo coding

        :param location: The location of this Ommeters.
        :type location: str
        """

        self._location = location

    @property
    def manufacturer_id(self):
        """Gets the manufacturer_id of this Ommeters.

        DLMS manufacturerId

        :return: The manufacturer_id of this Ommeters.
        :rtype: str
        """
        return self._manufacturer_id

    @manufacturer_id.setter
    def manufacturer_id(self, manufacturer_id):
        """Sets the manufacturer_id of this Ommeters.

        DLMS manufacturerId

        :param manufacturer_id: The manufacturer_id of this Ommeters.
        :type manufacturer_id: str
        """

        self._manufacturer_id = manufacturer_id

    @property
    def measurement_type(self):
        """Gets the measurement_type of this Ommeters.

        Physical quantity being measured by the meter

        :return: The measurement_type of this Ommeters.
        :rtype: str
        """
        return self._measurement_type

    @measurement_type.setter
    def measurement_type(self, measurement_type):
        """Sets the measurement_type of this Ommeters.

        Physical quantity being measured by the meter

        :param measurement_type: The measurement_type of this Ommeters.
        :type measurement_type: str
        """

        self._measurement_type = measurement_type

    @property
    def meta(self):
        """Gets the meta of this Ommeters.

        Statistical metadata for this household

        :return: The meta of this Ommeters.
        :rtype: str
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this Ommeters.

        Statistical metadata for this household

        :param meta: The meta of this Ommeters.
        :type meta: str
        """

        self._meta = meta

    @property
    def meter_id(self):
        """Gets the meter_id of this Ommeters.

        identifier to be used in other methods like readings or activities.

        :return: The meter_id of this Ommeters.
        :rtype: str
        """
        return self._meter_id

    @meter_id.setter
    def meter_id(self, meter_id):
        """Sets the meter_id of this Ommeters.

        identifier to be used in other methods like readings or activities.

        :param meter_id: The meter_id of this Ommeters.
        :type meter_id: str
        """

        self._meter_id = meter_id

    @property
    def scaling_factor(self):
        """Gets the scaling_factor of this Ommeters.

        Factor imposed on metered current AND voltage by a transducer

        :return: The scaling_factor of this Ommeters.
        :rtype: int
        """
        return self._scaling_factor

    @scaling_factor.setter
    def scaling_factor(self, scaling_factor):
        """Sets the scaling_factor of this Ommeters.

        Factor imposed on metered current AND voltage by a transducer

        :param scaling_factor: The scaling_factor of this Ommeters.
        :type scaling_factor: int
        """

        self._scaling_factor = scaling_factor

    @property
    def type(self):
        """Gets the type of this Ommeters.

        Device type of the meter

        :return: The type of this Ommeters.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Ommeters.

        Device type of the meter

        :param type: The type of this Ommeters.
        :type type: str
        """

        self._type = type

    @property
    def voltage_scaling_factor(self):
        """Gets the voltage_scaling_factor of this Ommeters.

        Factor imposed on metered voltage by a transducer

        :return: The voltage_scaling_factor of this Ommeters.
        :rtype: int
        """
        return self._voltage_scaling_factor

    @voltage_scaling_factor.setter
    def voltage_scaling_factor(self, voltage_scaling_factor):
        """Sets the voltage_scaling_factor of this Ommeters.

        Factor imposed on metered voltage by a transducer

        :param voltage_scaling_factor: The voltage_scaling_factor of this Ommeters.
        :type voltage_scaling_factor: int
        """

        self._voltage_scaling_factor = voltage_scaling_factor
