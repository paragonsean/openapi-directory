# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DispatchLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, energy: float=None, location: object=None):
        """DispatchLocation - a model defined in OpenAPI

        :param energy: The energy of this DispatchLocation.
        :param location: The location of this DispatchLocation.
        """
        self.openapi_types = {
            'energy': float,
            'location': object
        }

        self.attribute_map = {
            'energy': 'energy',
            'location': 'location'
        }

        self._energy = energy
        self._location = location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DispatchLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DispatchLocation of this DispatchLocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def energy(self):
        """Gets the energy of this DispatchLocation.

        Percentage of energy

        :return: The energy of this DispatchLocation.
        :rtype: float
        """
        return self._energy

    @energy.setter
    def energy(self, energy):
        """Sets the energy of this DispatchLocation.

        Percentage of energy

        :param energy: The energy of this DispatchLocation.
        :type energy: float
        """

        self._energy = energy

    @property
    def location(self):
        """Gets the location of this DispatchLocation.

        GeoJSON encoded location of target or source of green energy.

        :return: The location of this DispatchLocation.
        :rtype: object
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this DispatchLocation.

        GeoJSON encoded location of target or source of green energy.

        :param location: The location of this DispatchLocation.
        :type location: object
        """

        self._location = location
