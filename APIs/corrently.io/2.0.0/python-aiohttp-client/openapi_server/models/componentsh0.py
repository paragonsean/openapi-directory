# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Componentsh0(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, components: List[Componentsh0]=None, describtion: str=None, mutlityplier: str=None, per: float=None, sum: float=None):
        """Componentsh0 - a model defined in OpenAPI

        :param components: The components of this Componentsh0.
        :param describtion: The describtion of this Componentsh0.
        :param mutlityplier: The mutlityplier of this Componentsh0.
        :param per: The per of this Componentsh0.
        :param sum: The sum of this Componentsh0.
        """
        self.openapi_types = {
            'components': List[Componentsh0],
            'describtion': str,
            'mutlityplier': str,
            'per': float,
            'sum': float
        }

        self.attribute_map = {
            'components': 'components',
            'describtion': 'describtion',
            'mutlityplier': 'mutlityplier',
            'per': 'per',
            'sum': 'sum'
        }

        self._components = components
        self._describtion = describtion
        self._mutlityplier = mutlityplier
        self._per = per
        self._sum = sum

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Componentsh0':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The componentsh0 of this Componentsh0.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def components(self):
        """Gets the components of this Componentsh0.

        Sub components of this price

        :return: The components of this Componentsh0.
        :rtype: List[Componentsh0]
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this Componentsh0.

        Sub components of this price

        :param components: The components of this Componentsh0.
        :type components: List[Componentsh0]
        """

        self._components = components

    @property
    def describtion(self):
        """Gets the describtion of this Componentsh0.

        What is this price component about

        :return: The describtion of this Componentsh0.
        :rtype: str
        """
        return self._describtion

    @describtion.setter
    def describtion(self, describtion):
        """Sets the describtion of this Componentsh0.

        What is this price component about

        :param describtion: The describtion of this Componentsh0.
        :type describtion: str
        """

        self._describtion = describtion

    @property
    def mutlityplier(self):
        """Gets the mutlityplier of this Componentsh0.

        Frequency/dependency of component

        :return: The mutlityplier of this Componentsh0.
        :rtype: str
        """
        return self._mutlityplier

    @mutlityplier.setter
    def mutlityplier(self, mutlityplier):
        """Sets the mutlityplier of this Componentsh0.

        Frequency/dependency of component

        :param mutlityplier: The mutlityplier of this Componentsh0.
        :type mutlityplier: str
        """

        self._mutlityplier = mutlityplier

    @property
    def per(self):
        """Gets the per of this Componentsh0.

        Single unit price multiyplier is based on

        :return: The per of this Componentsh0.
        :rtype: float
        """
        return self._per

    @per.setter
    def per(self, per):
        """Sets the per of this Componentsh0.

        Single unit price multiyplier is based on

        :param per: The per of this Componentsh0.
        :type per: float
        """

        self._per = per

    @property
    def sum(self):
        """Gets the sum of this Componentsh0.

        Total sum in Euro for this price component.

        :return: The sum of this Componentsh0.
        :rtype: float
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """Sets the sum of this Componentsh0.

        Total sum in Euro for this price component.

        :param sum: The sum of this Componentsh0.
        :type sum: float
        """

        self._sum = sum
