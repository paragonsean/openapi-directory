# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dispatch_location import DispatchLocation
from openapi_server.models.gsi_dispatch200_response_timeframe import GsiDispatch200ResponseTimeframe
from openapi_server import util


class GsiDispatch200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avg_distance_km: float=None, dispatch_from: List[DispatchLocation]=None, dispatch_target: List[DispatchLocation]=None, postmix: object=None, premix: object=None, timeframe: GsiDispatch200ResponseTimeframe=None):
        """GsiDispatch200Response - a model defined in OpenAPI

        :param avg_distance_km: The avg_distance_km of this GsiDispatch200Response.
        :param dispatch_from: The dispatch_from of this GsiDispatch200Response.
        :param dispatch_target: The dispatch_target of this GsiDispatch200Response.
        :param postmix: The postmix of this GsiDispatch200Response.
        :param premix: The premix of this GsiDispatch200Response.
        :param timeframe: The timeframe of this GsiDispatch200Response.
        """
        self.openapi_types = {
            'avg_distance_km': float,
            'dispatch_from': List[DispatchLocation],
            'dispatch_target': List[DispatchLocation],
            'postmix': object,
            'premix': object,
            'timeframe': GsiDispatch200ResponseTimeframe
        }

        self.attribute_map = {
            'avg_distance_km': 'avg_distance_km',
            'dispatch_from': 'dispatch_from',
            'dispatch_target': 'dispatch_target',
            'postmix': 'postmix',
            'premix': 'premix',
            'timeframe': 'timeframe'
        }

        self._avg_distance_km = avg_distance_km
        self._dispatch_from = dispatch_from
        self._dispatch_target = dispatch_target
        self._postmix = postmix
        self._premix = premix
        self._timeframe = timeframe

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GsiDispatch200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The gsiDispatch_200_response of this GsiDispatch200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avg_distance_km(self):
        """Gets the avg_distance_km of this GsiDispatch200Response.

        Averaged geospatial distance in kilometers between energy generation and usage at requested location.

        :return: The avg_distance_km of this GsiDispatch200Response.
        :rtype: float
        """
        return self._avg_distance_km

    @avg_distance_km.setter
    def avg_distance_km(self, avg_distance_km):
        """Sets the avg_distance_km of this GsiDispatch200Response.

        Averaged geospatial distance in kilometers between energy generation and usage at requested location.

        :param avg_distance_km: The avg_distance_km of this GsiDispatch200Response.
        :type avg_distance_km: float
        """

        self._avg_distance_km = avg_distance_km

    @property
    def dispatch_from(self):
        """Gets the dispatch_from of this GsiDispatch200Response.

        List of current sources of green energy (into requested location)

        :return: The dispatch_from of this GsiDispatch200Response.
        :rtype: List[DispatchLocation]
        """
        return self._dispatch_from

    @dispatch_from.setter
    def dispatch_from(self, dispatch_from):
        """Sets the dispatch_from of this GsiDispatch200Response.

        List of current sources of green energy (into requested location)

        :param dispatch_from: The dispatch_from of this GsiDispatch200Response.
        :type dispatch_from: List[DispatchLocation]
        """

        self._dispatch_from = dispatch_from

    @property
    def dispatch_target(self):
        """Gets the dispatch_target of this GsiDispatch200Response.

        List of current targets of green energy (out of requested location)

        :return: The dispatch_target of this GsiDispatch200Response.
        :rtype: List[DispatchLocation]
        """
        return self._dispatch_target

    @dispatch_target.setter
    def dispatch_target(self, dispatch_target):
        """Sets the dispatch_target of this GsiDispatch200Response.

        List of current targets of green energy (out of requested location)

        :param dispatch_target: The dispatch_target of this GsiDispatch200Response.
        :type dispatch_target: List[DispatchLocation]
        """

        self._dispatch_target = dispatch_target

    @property
    def postmix(self):
        """Gets the postmix of this GsiDispatch200Response.

        Green Energy Mix after dispatch of given city

        :return: The postmix of this GsiDispatch200Response.
        :rtype: object
        """
        return self._postmix

    @postmix.setter
    def postmix(self, postmix):
        """Sets the postmix of this GsiDispatch200Response.

        Green Energy Mix after dispatch of given city

        :param postmix: The postmix of this GsiDispatch200Response.
        :type postmix: object
        """

        self._postmix = postmix

    @property
    def premix(self):
        """Gets the premix of this GsiDispatch200Response.

        Green Energy Mix prior to dispatch of given city

        :return: The premix of this GsiDispatch200Response.
        :rtype: object
        """
        return self._premix

    @premix.setter
    def premix(self, premix):
        """Sets the premix of this GsiDispatch200Response.

        Green Energy Mix prior to dispatch of given city

        :param premix: The premix of this GsiDispatch200Response.
        :type premix: object
        """

        self._premix = premix

    @property
    def timeframe(self):
        """Gets the timeframe of this GsiDispatch200Response.


        :return: The timeframe of this GsiDispatch200Response.
        :rtype: GsiDispatch200ResponseTimeframe
        """
        return self._timeframe

    @timeframe.setter
    def timeframe(self, timeframe):
        """Sets the timeframe of this GsiDispatch200Response.


        :param timeframe: The timeframe of this GsiDispatch200Response.
        :type timeframe: GsiDispatch200ResponseTimeframe
        """

        self._timeframe = timeframe
