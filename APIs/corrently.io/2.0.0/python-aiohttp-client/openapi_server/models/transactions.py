# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Transactions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cashier: str=None, time_stamp: int=None, txid: str=None, txtype: str=None, value: int=None):
        """Transactions - a model defined in OpenAPI

        :param cashier: The cashier of this Transactions.
        :param time_stamp: The time_stamp of this Transactions.
        :param txid: The txid of this Transactions.
        :param txtype: The txtype of this Transactions.
        :param value: The value of this Transactions.
        """
        self.openapi_types = {
            'cashier': str,
            'time_stamp': int,
            'txid': str,
            'txtype': str,
            'value': int
        }

        self.attribute_map = {
            'cashier': 'cashier',
            'time_stamp': 'timeStamp',
            'txid': 'txid',
            'txtype': 'txtype',
            'value': 'value'
        }

        self._cashier = cashier
        self._time_stamp = time_stamp
        self._txid = txid
        self._txtype = txtype
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Transactions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Transactions of this Transactions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cashier(self):
        """Gets the cashier of this Transactions.

        Pretty print of counter signing party

        :return: The cashier of this Transactions.
        :rtype: str
        """
        return self._cashier

    @cashier.setter
    def cashier(self, cashier):
        """Sets the cashier of this Transactions.

        Pretty print of counter signing party

        :param cashier: The cashier of this Transactions.
        :type cashier: str
        """

        self._cashier = cashier

    @property
    def time_stamp(self):
        """Gets the time_stamp of this Transactions.

        Cross signed timestamp of transaction

        :return: The time_stamp of this Transactions.
        :rtype: int
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this Transactions.

        Cross signed timestamp of transaction

        :param time_stamp: The time_stamp of this Transactions.
        :type time_stamp: int
        """

        self._time_stamp = time_stamp

    @property
    def txid(self):
        """Gets the txid of this Transactions.

        Unique hash of this transaction as provided by counter signing party

        :return: The txid of this Transactions.
        :rtype: str
        """
        return self._txid

    @txid.setter
    def txid(self, txid):
        """Sets the txid of this Transactions.

        Unique hash of this transaction as provided by counter signing party

        :param txid: The txid of this Transactions.
        :type txid: str
        """

        self._txid = txid

    @property
    def txtype(self):
        """Gets the txtype of this Transactions.

        Type of transaction per cashier implementation and schema

        :return: The txtype of this Transactions.
        :rtype: str
        """
        return self._txtype

    @txtype.setter
    def txtype(self, txtype):
        """Sets the txtype of this Transactions.

        Type of transaction per cashier implementation and schema

        :param txtype: The txtype of this Transactions.
        :type txtype: str
        """

        self._txtype = txtype

    @property
    def value(self):
        """Gets the value of this Transactions.

        Amount covered by transaction

        :return: The value of this Transactions.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Transactions.

        Amount covered by transaction

        :param value: The value of this Transactions.
        :type value: int
        """

        self._value = value
