# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MeteringPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _1_8_0: int=None, account: str=None, energy: int=None, secret: str=None, value: int=None, zip: str=None):
        """MeteringPostRequest - a model defined in OpenAPI

        :param _1_8_0: The _1_8_0 of this MeteringPostRequest.
        :param account: The account of this MeteringPostRequest.
        :param energy: The energy of this MeteringPostRequest.
        :param secret: The secret of this MeteringPostRequest.
        :param value: The value of this MeteringPostRequest.
        :param zip: The zip of this MeteringPostRequest.
        """
        self.openapi_types = {
            '_1_8_0': int,
            'account': str,
            'energy': int,
            'secret': str,
            'value': int,
            'zip': str
        }

        self.attribute_map = {
            '_1_8_0': '1.8.0',
            'account': 'account',
            'energy': 'energy',
            'secret': 'secret',
            'value': 'value',
            'zip': 'zip'
        }

        self.__1_8_0 = _1_8_0
        self._account = account
        self._energy = energy
        self._secret = secret
        self._value = value
        self._zip = zip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MeteringPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The meteringPost_request of this MeteringPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _1_8_0(self):
        """Gets the _1_8_0 of this MeteringPostRequest.

        Meter Reading (prefered in Wh)

        :return: The _1_8_0 of this MeteringPostRequest.
        :rtype: int
        """
        return self.__1_8_0

    @_1_8_0.setter
    def _1_8_0(self, _1_8_0):
        """Sets the _1_8_0 of this MeteringPostRequest.

        Meter Reading (prefered in Wh)

        :param _1_8_0: The _1_8_0 of this MeteringPostRequest.
        :type _1_8_0: int
        """

        self.__1_8_0 = _1_8_0

    @property
    def account(self):
        """Gets the account of this MeteringPostRequest.

        Stromkonto account (address) associated with this metering.

        :return: The account of this MeteringPostRequest.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this MeteringPostRequest.

        Stromkonto account (address) associated with this metering.

        :param account: The account of this MeteringPostRequest.
        :type account: str
        """

        self._account = account

    @property
    def energy(self):
        """Gets the energy of this MeteringPostRequest.

        Alias for 1.8.0

        :return: The energy of this MeteringPostRequest.
        :rtype: int
        """
        return self._energy

    @energy.setter
    def energy(self, energy):
        """Sets the energy of this MeteringPostRequest.

        Alias for 1.8.0

        :param energy: The energy of this MeteringPostRequest.
        :type energy: int
        """

        self._energy = energy

    @property
    def secret(self):
        """Gets the secret of this MeteringPostRequest.

        Some private password you might choose on first update. However you need to use the same secret on every further posts.

        :return: The secret of this MeteringPostRequest.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this MeteringPostRequest.

        Some private password you might choose on first update. However you need to use the same secret on every further posts.

        :param secret: The secret of this MeteringPostRequest.
        :type secret: str
        """

        self._secret = secret

    @property
    def value(self):
        """Gets the value of this MeteringPostRequest.

        Alias for 1.8.0

        :return: The value of this MeteringPostRequest.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this MeteringPostRequest.

        Alias for 1.8.0

        :param value: The value of this MeteringPostRequest.
        :type value: int
        """

        self._value = value

    @property
    def zip(self):
        """Gets the zip of this MeteringPostRequest.

        Zipcode (Postleitzahl) of metered location

        :return: The zip of this MeteringPostRequest.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this MeteringPostRequest.

        Zipcode (Postleitzahl) of metered location

        :param zip: The zip of this MeteringPostRequest.
        :type zip: str
        """

        self._zip = zip
