# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MeteringPost200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _1_8_0: int=None, _1_8_1: int=None, _1_8_2: int=None, processing_time: int=None, account: str=None, co2_g_oekostrom: int=None, co2_g_standard: int=None, time_stamp: int=None):
        """MeteringPost200Response - a model defined in OpenAPI

        :param _1_8_0: The _1_8_0 of this MeteringPost200Response.
        :param _1_8_1: The _1_8_1 of this MeteringPost200Response.
        :param _1_8_2: The _1_8_2 of this MeteringPost200Response.
        :param processing_time: The processing_time of this MeteringPost200Response.
        :param account: The account of this MeteringPost200Response.
        :param co2_g_oekostrom: The co2_g_oekostrom of this MeteringPost200Response.
        :param co2_g_standard: The co2_g_standard of this MeteringPost200Response.
        :param time_stamp: The time_stamp of this MeteringPost200Response.
        """
        self.openapi_types = {
            '_1_8_0': int,
            '_1_8_1': int,
            '_1_8_2': int,
            'processing_time': int,
            'account': str,
            'co2_g_oekostrom': int,
            'co2_g_standard': int,
            'time_stamp': int
        }

        self.attribute_map = {
            '_1_8_0': '1.8.0',
            '_1_8_1': '1.8.1',
            '_1_8_2': '1.8.2',
            'processing_time': '_processingTime',
            'account': 'account',
            'co2_g_oekostrom': 'co2_g_oekostrom',
            'co2_g_standard': 'co2_g_standard',
            'time_stamp': 'timeStamp'
        }

        self.__1_8_0 = _1_8_0
        self.__1_8_1 = _1_8_1
        self.__1_8_2 = _1_8_2
        self._processing_time = processing_time
        self._account = account
        self._co2_g_oekostrom = co2_g_oekostrom
        self._co2_g_standard = co2_g_standard
        self._time_stamp = time_stamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MeteringPost200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The meteringPost_200_response of this MeteringPost200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _1_8_0(self):
        """Gets the _1_8_0 of this MeteringPost200Response.

        Reading as provided as input in Wh

        :return: The _1_8_0 of this MeteringPost200Response.
        :rtype: int
        """
        return self.__1_8_0

    @_1_8_0.setter
    def _1_8_0(self, _1_8_0):
        """Sets the _1_8_0 of this MeteringPost200Response.

        Reading as provided as input in Wh

        :param _1_8_0: The _1_8_0 of this MeteringPost200Response.
        :type _1_8_0: int
        """

        self.__1_8_0 = _1_8_0

    @property
    def _1_8_1(self):
        """Gets the _1_8_1 of this MeteringPost200Response.

        Green energy calculated using Green Power Index (GrünstromIndex) in Wh

        :return: The _1_8_1 of this MeteringPost200Response.
        :rtype: int
        """
        return self.__1_8_1

    @_1_8_1.setter
    def _1_8_1(self, _1_8_1):
        """Sets the _1_8_1 of this MeteringPost200Response.

        Green energy calculated using Green Power Index (GrünstromIndex) in Wh

        :param _1_8_1: The _1_8_1 of this MeteringPost200Response.
        :type _1_8_1: int
        """

        self.__1_8_1 = _1_8_1

    @property
    def _1_8_2(self):
        """Gets the _1_8_2 of this MeteringPost200Response.

        Grey energy calculated using Green Power Index (GrünstromIndex) in Wh

        :return: The _1_8_2 of this MeteringPost200Response.
        :rtype: int
        """
        return self.__1_8_2

    @_1_8_2.setter
    def _1_8_2(self, _1_8_2):
        """Sets the _1_8_2 of this MeteringPost200Response.

        Grey energy calculated using Green Power Index (GrünstromIndex) in Wh

        :param _1_8_2: The _1_8_2 of this MeteringPost200Response.
        :type _1_8_2: int
        """

        self.__1_8_2 = _1_8_2

    @property
    def processing_time(self):
        """Gets the processing_time of this MeteringPost200Response.

        Time this reading got imported into consensus (e.q. signed timestamp).

        :return: The processing_time of this MeteringPost200Response.
        :rtype: int
        """
        return self._processing_time

    @processing_time.setter
    def processing_time(self, processing_time):
        """Sets the processing_time of this MeteringPost200Response.

        Time this reading got imported into consensus (e.q. signed timestamp).

        :param processing_time: The processing_time of this MeteringPost200Response.
        :type processing_time: int
        """

        self._processing_time = processing_time

    @property
    def account(self):
        """Gets the account of this MeteringPost200Response.

        Stromkonto/Metering address allocated (this is not the MELOID!)

        :return: The account of this MeteringPost200Response.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this MeteringPost200Response.

        Stromkonto/Metering address allocated (this is not the MELOID!)

        :param account: The account of this MeteringPost200Response.
        :type account: str
        """

        self._account = account

    @property
    def co2_g_oekostrom(self):
        """Gets the co2_g_oekostrom of this MeteringPost200Response.

        CO2 Emission of metered energy in a green energy mix (e.q. Ökostromtarif)

        :return: The co2_g_oekostrom of this MeteringPost200Response.
        :rtype: int
        """
        return self._co2_g_oekostrom

    @co2_g_oekostrom.setter
    def co2_g_oekostrom(self, co2_g_oekostrom):
        """Sets the co2_g_oekostrom of this MeteringPost200Response.

        CO2 Emission of metered energy in a green energy mix (e.q. Ökostromtarif)

        :param co2_g_oekostrom: The co2_g_oekostrom of this MeteringPost200Response.
        :type co2_g_oekostrom: int
        """

        self._co2_g_oekostrom = co2_g_oekostrom

    @property
    def co2_g_standard(self):
        """Gets the co2_g_standard of this MeteringPost200Response.

        CO2 Emission of metered energy in a standard mix

        :return: The co2_g_standard of this MeteringPost200Response.
        :rtype: int
        """
        return self._co2_g_standard

    @co2_g_standard.setter
    def co2_g_standard(self, co2_g_standard):
        """Sets the co2_g_standard of this MeteringPost200Response.

        CO2 Emission of metered energy in a standard mix

        :param co2_g_standard: The co2_g_standard of this MeteringPost200Response.
        :type co2_g_standard: int
        """

        self._co2_g_standard = co2_g_standard

    @property
    def time_stamp(self):
        """Gets the time_stamp of this MeteringPost200Response.

        API Consensus time this reading was fully received

        :return: The time_stamp of this MeteringPost200Response.
        :rtype: int
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this MeteringPost200Response.

        API Consensus time this reading was fully received

        :param time_stamp: The time_stamp of this MeteringPost200Response.
        :type time_stamp: int
        """

        self._time_stamp = time_stamp
