# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PrepareTransactionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: str=None, signature: str=None, to: str=None, value: int=None, variation: str=None):
        """PrepareTransactionRequest - a model defined in OpenAPI

        :param account: The account of this PrepareTransactionRequest.
        :param signature: The signature of this PrepareTransactionRequest.
        :param to: The to of this PrepareTransactionRequest.
        :param value: The value of this PrepareTransactionRequest.
        :param variation: The variation of this PrepareTransactionRequest.
        """
        self.openapi_types = {
            'account': str,
            'signature': str,
            'to': str,
            'value': int,
            'variation': str
        }

        self.attribute_map = {
            'account': 'account',
            'signature': 'signature',
            'to': 'to',
            'value': 'value',
            'variation': 'variation'
        }

        self._account = account
        self._signature = signature
        self._to = to
        self._value = value
        self._variation = variation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrepareTransactionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The prepareTransaction_request of this PrepareTransactionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this PrepareTransactionRequest.

        Stromkonto account address of sender

        :return: The account of this PrepareTransactionRequest.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this PrepareTransactionRequest.

        Stromkonto account address of sender

        :param account: The account of this PrepareTransactionRequest.
        :type account: str
        """

        self._account = account

    @property
    def signature(self):
        """Gets the signature of this PrepareTransactionRequest.

        Signature per Stromkonto setting (might be simple email confirmation link)

        :return: The signature of this PrepareTransactionRequest.
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this PrepareTransactionRequest.

        Signature per Stromkonto setting (might be simple email confirmation link)

        :param signature: The signature of this PrepareTransactionRequest.
        :type signature: str
        """

        self._signature = signature

    @property
    def to(self):
        """Gets the to of this PrepareTransactionRequest.

        Stromkonto account address of reciever

        :return: The to of this PrepareTransactionRequest.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this PrepareTransactionRequest.

        Stromkonto account address of reciever

        :param to: The to of this PrepareTransactionRequest.
        :type to: str
        """

        self._to = to

    @property
    def value(self):
        """Gets the value of this PrepareTransactionRequest.

        Amount to transfer (in Watthours for electricity, or pcs for trees)

        :return: The value of this PrepareTransactionRequest.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PrepareTransactionRequest.

        Amount to transfer (in Watthours for electricity, or pcs for trees)

        :param value: The value of this PrepareTransactionRequest.
        :type value: int
        """

        self._value = value

    @property
    def variation(self):
        """Gets the variation of this PrepareTransactionRequest.


        :return: The variation of this PrepareTransactionRequest.
        :rtype: str
        """
        return self._variation

    @variation.setter
    def variation(self, variation):
        """Sets the variation of this PrepareTransactionRequest.


        :param variation: The variation of this PrepareTransactionRequest.
        :type variation: str
        """
        allowed_values = ["gsb", "erzeugung", "eigenstrom", "co2", "baeume"]  # noqa: E501
        if variation not in allowed_values:
            raise ValueError(
                "Invalid value for `variation` ({0}), must be one of {1}"
                .format(variation, allowed_values)
            )

        self._variation = variation
