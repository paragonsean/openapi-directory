# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transactions import Transactions
from openapi_server import util


class Balance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, balance: int=None, haben: int=None, soll: int=None, txs: List[Transactions]=None, variation: str=None):
        """Balance - a model defined in OpenAPI

        :param balance: The balance of this Balance.
        :param haben: The haben of this Balance.
        :param soll: The soll of this Balance.
        :param txs: The txs of this Balance.
        :param variation: The variation of this Balance.
        """
        self.openapi_types = {
            'balance': int,
            'haben': int,
            'soll': int,
            'txs': List[Transactions],
            'variation': str
        }

        self.attribute_map = {
            'balance': 'balance',
            'haben': 'haben',
            'soll': 'soll',
            'txs': 'txs',
            'variation': 'variation'
        }

        self._balance = balance
        self._haben = haben
        self._soll = soll
        self._txs = txs
        self._variation = variation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Balance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Balance of this Balance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def balance(self):
        """Gets the balance of this Balance.

        Sum owned - sum due by account

        :return: The balance of this Balance.
        :rtype: int
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this Balance.

        Sum owned - sum due by account

        :param balance: The balance of this Balance.
        :type balance: int
        """

        self._balance = balance

    @property
    def haben(self):
        """Gets the haben of this Balance.

        Sum owned by account

        :return: The haben of this Balance.
        :rtype: int
        """
        return self._haben

    @haben.setter
    def haben(self, haben):
        """Sets the haben of this Balance.

        Sum owned by account

        :param haben: The haben of this Balance.
        :type haben: int
        """

        self._haben = haben

    @property
    def soll(self):
        """Gets the soll of this Balance.

        Sum due by account

        :return: The soll of this Balance.
        :rtype: int
        """
        return self._soll

    @soll.setter
    def soll(self, soll):
        """Sets the soll of this Balance.

        Sum due by account

        :param soll: The soll of this Balance.
        :type soll: int
        """

        self._soll = soll

    @property
    def txs(self):
        """Gets the txs of this Balance.


        :return: The txs of this Balance.
        :rtype: List[Transactions]
        """
        return self._txs

    @txs.setter
    def txs(self, txs):
        """Sets the txs of this Balance.


        :param txs: The txs of this Balance.
        :type txs: List[Transactions]
        """

        self._txs = txs

    @property
    def variation(self):
        """Gets the variation of this Balance.

        Type of subbalance (sub account)

        :return: The variation of this Balance.
        :rtype: str
        """
        return self._variation

    @variation.setter
    def variation(self, variation):
        """Sets the variation of this Balance.

        Type of subbalance (sub account)

        :param variation: The variation of this Balance.
        :type variation: str
        """
        allowed_values = ["gsb", "erzeugung", "eigenstrom", "co2", "baeume"]  # noqa: E501
        if variation not in allowed_values:
            raise ValueError(
                "Invalid value for `variation` ({0}), must be one of {1}"
                .format(variation, allowed_values)
            )

        self._variation = variation
