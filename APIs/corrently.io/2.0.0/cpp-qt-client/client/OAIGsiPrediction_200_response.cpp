/**
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGsiPrediction_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGsiPrediction_200_response::OAIGsiPrediction_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGsiPrediction_200_response::OAIGsiPrediction_200_response() {
    this->initializeModel();
}

OAIGsiPrediction_200_response::~OAIGsiPrediction_200_response() {}

void OAIGsiPrediction_200_response::initializeModel() {

    m_forecast_isSet = false;
    m_forecast_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_matrix_isSet = false;
    m_matrix_isValid = false;
}

void OAIGsiPrediction_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGsiPrediction_200_response::fromJsonObject(QJsonObject json) {

    m_forecast_isValid = ::OpenAPI::fromJsonValue(m_forecast, json[QString("forecast")]);
    m_forecast_isSet = !json[QString("forecast")].isNull() && m_forecast_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_matrix_isValid = ::OpenAPI::fromJsonValue(m_matrix, json[QString("matrix")]);
    m_matrix_isSet = !json[QString("matrix")].isNull() && m_matrix_isValid;
}

QString OAIGsiPrediction_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGsiPrediction_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_forecast.size() > 0) {
        obj.insert(QString("forecast"), ::OpenAPI::toJsonValue(m_forecast));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_matrix.isSet()) {
        obj.insert(QString("matrix"), ::OpenAPI::toJsonValue(m_matrix));
    }
    return obj;
}

QList<OAIForecastItem> OAIGsiPrediction_200_response::getForecast() const {
    return m_forecast;
}
void OAIGsiPrediction_200_response::setForecast(const QList<OAIForecastItem> &forecast) {
    m_forecast = forecast;
    m_forecast_isSet = true;
}

bool OAIGsiPrediction_200_response::is_forecast_Set() const{
    return m_forecast_isSet;
}

bool OAIGsiPrediction_200_response::is_forecast_Valid() const{
    return m_forecast_isValid;
}

OAIGsiPrediction_200_response_location OAIGsiPrediction_200_response::getLocation() const {
    return m_location;
}
void OAIGsiPrediction_200_response::setLocation(const OAIGsiPrediction_200_response_location &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIGsiPrediction_200_response::is_location_Set() const{
    return m_location_isSet;
}

bool OAIGsiPrediction_200_response::is_location_Valid() const{
    return m_location_isValid;
}

OAIGsiPrediction_200_response_matrix OAIGsiPrediction_200_response::getMatrix() const {
    return m_matrix;
}
void OAIGsiPrediction_200_response::setMatrix(const OAIGsiPrediction_200_response_matrix &matrix) {
    m_matrix = matrix;
    m_matrix_isSet = true;
}

bool OAIGsiPrediction_200_response::is_matrix_Set() const{
    return m_matrix_isSet;
}

bool OAIGsiPrediction_200_response::is_matrix_Valid() const{
    return m_matrix_isValid;
}

bool OAIGsiPrediction_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_forecast.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_matrix.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGsiPrediction_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
