/**
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOmmeters.h
 *
 * 
 */

#ifndef OAIOmmeters_H
#define OAIOmmeters_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIOmmeters : public OAIObject {
public:
    OAIOmmeters();
    OAIOmmeters(QString json);
    ~OAIOmmeters() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCurrentScalingFactor() const;
    void setCurrentScalingFactor(const qint32 &current_scaling_factor);
    bool is_current_scaling_factor_Set() const;
    bool is_current_scaling_factor_Valid() const;

    QString getLoadProfileType() const;
    void setLoadProfileType(const QString &load_profile_type);
    bool is_load_profile_type_Set() const;
    bool is_load_profile_type_Valid() const;

    QString getLocation() const;
    void setLocation(const QString &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    QString getManufacturerId() const;
    void setManufacturerId(const QString &manufacturer_id);
    bool is_manufacturer_id_Set() const;
    bool is_manufacturer_id_Valid() const;

    QString getMeasurementType() const;
    void setMeasurementType(const QString &measurement_type);
    bool is_measurement_type_Set() const;
    bool is_measurement_type_Valid() const;

    QString getMeta() const;
    void setMeta(const QString &meta);
    bool is_meta_Set() const;
    bool is_meta_Valid() const;

    QString getMeterId() const;
    void setMeterId(const QString &meter_id);
    bool is_meter_id_Set() const;
    bool is_meter_id_Valid() const;

    qint32 getScalingFactor() const;
    void setScalingFactor(const qint32 &scaling_factor);
    bool is_scaling_factor_Set() const;
    bool is_scaling_factor_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    qint32 getVoltageScalingFactor() const;
    void setVoltageScalingFactor(const qint32 &voltage_scaling_factor);
    bool is_voltage_scaling_factor_Set() const;
    bool is_voltage_scaling_factor_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_current_scaling_factor;
    bool m_current_scaling_factor_isSet;
    bool m_current_scaling_factor_isValid;

    QString m_load_profile_type;
    bool m_load_profile_type_isSet;
    bool m_load_profile_type_isValid;

    QString m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    QString m_manufacturer_id;
    bool m_manufacturer_id_isSet;
    bool m_manufacturer_id_isValid;

    QString m_measurement_type;
    bool m_measurement_type_isSet;
    bool m_measurement_type_isValid;

    QString m_meta;
    bool m_meta_isSet;
    bool m_meta_isValid;

    QString m_meter_id;
    bool m_meter_id_isSet;
    bool m_meter_id_isValid;

    qint32 m_scaling_factor;
    bool m_scaling_factor_isSet;
    bool m_scaling_factor_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    qint32 m_voltage_scaling_factor;
    bool m_voltage_scaling_factor_isSet;
    bool m_voltage_scaling_factor_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOmmeters)

#endif // OAIOmmeters_H
