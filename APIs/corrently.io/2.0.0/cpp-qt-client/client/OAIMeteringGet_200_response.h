/**
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMeteringGet_200_response.h
 *
 * 
 */

#ifndef OAIMeteringGet_200_response_H
#define OAIMeteringGet_200_response_H

#include <QJsonObject>

#include <QJsonValue>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMeteringGet_200_response : public OAIObject {
public:
    OAIMeteringGet_200_response();
    OAIMeteringGet_200_response(QString json);
    ~OAIMeteringGet_200_response() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getR180() const;
    void setR180(const qint32 &r_1_8_0);
    bool is_r_1_8_0_Set() const;
    bool is_r_1_8_0_Valid() const;

    qint32 getR181() const;
    void setR181(const qint32 &r_1_8_1);
    bool is_r_1_8_1_Set() const;
    bool is_r_1_8_1_Valid() const;

    qint32 getR182() const;
    void setR182(const qint32 &r_1_8_2);
    bool is_r_1_8_2_Set() const;
    bool is_r_1_8_2_Valid() const;

    qint32 getProcessingTime() const;
    void setProcessingTime(const qint32 &_processing_time);
    bool is__processing_time_Set() const;
    bool is__processing_time_Valid() const;

    QString getAccount() const;
    void setAccount(const QString &account);
    bool is_account_Set() const;
    bool is_account_Valid() const;

    qint32 getCo2GOekostrom() const;
    void setCo2GOekostrom(const qint32 &co2_g_oekostrom);
    bool is_co2_g_oekostrom_Set() const;
    bool is_co2_g_oekostrom_Valid() const;

    qint32 getCo2GStandard() const;
    void setCo2GStandard(const qint32 &co2_g_standard);
    bool is_co2_g_standard_Set() const;
    bool is_co2_g_standard_Valid() const;

    QJsonValue getCredits() const;
    void setCredits(const QJsonValue &credits);
    bool is_credits_Set() const;
    bool is_credits_Valid() const;

    qint32 getTimeStamp() const;
    void setTimeStamp(const qint32 &time_stamp);
    bool is_time_stamp_Set() const;
    bool is_time_stamp_Valid() const;

    qint32 getTtl() const;
    void setTtl(const qint32 &ttl);
    bool is_ttl_Set() const;
    bool is_ttl_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_r_1_8_0;
    bool m_r_1_8_0_isSet;
    bool m_r_1_8_0_isValid;

    qint32 m_r_1_8_1;
    bool m_r_1_8_1_isSet;
    bool m_r_1_8_1_isValid;

    qint32 m_r_1_8_2;
    bool m_r_1_8_2_isSet;
    bool m_r_1_8_2_isValid;

    qint32 m__processing_time;
    bool m__processing_time_isSet;
    bool m__processing_time_isValid;

    QString m_account;
    bool m_account_isSet;
    bool m_account_isValid;

    qint32 m_co2_g_oekostrom;
    bool m_co2_g_oekostrom_isSet;
    bool m_co2_g_oekostrom_isValid;

    qint32 m_co2_g_standard;
    bool m_co2_g_standard_isSet;
    bool m_co2_g_standard_isValid;

    QJsonValue m_credits;
    bool m_credits_isSet;
    bool m_credits_isValid;

    qint32 m_time_stamp;
    bool m_time_stamp_isSet;
    bool m_time_stamp_isValid;

    qint32 m_ttl;
    bool m_ttl_isSet;
    bool m_ttl_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMeteringGet_200_response)

#endif // OAIMeteringGet_200_response_H
