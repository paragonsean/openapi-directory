/**
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITariffh0.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITariffh0::OAITariffh0(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITariffh0::OAITariffh0() {
    this->initializeModel();
}

OAITariffh0::~OAITariffh0() {}

void OAITariffh0::initializeModel() {

    m_ap_isSet = false;
    m_ap_isValid = false;

    m_gp_isSet = false;
    m_gp_isValid = false;
}

void OAITariffh0::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITariffh0::fromJsonObject(QJsonObject json) {

    m_ap_isValid = ::OpenAPI::fromJsonValue(m_ap, json[QString("ap")]);
    m_ap_isSet = !json[QString("ap")].isNull() && m_ap_isValid;

    m_gp_isValid = ::OpenAPI::fromJsonValue(m_gp, json[QString("gp")]);
    m_gp_isSet = !json[QString("gp")].isNull() && m_gp_isValid;
}

QString OAITariffh0::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITariffh0::asJsonObject() const {
    QJsonObject obj;
    if (m_ap_isSet) {
        obj.insert(QString("ap"), ::OpenAPI::toJsonValue(m_ap));
    }
    if (m_gp_isSet) {
        obj.insert(QString("gp"), ::OpenAPI::toJsonValue(m_gp));
    }
    return obj;
}

qint32 OAITariffh0::getAp() const {
    return m_ap;
}
void OAITariffh0::setAp(const qint32 &ap) {
    m_ap = ap;
    m_ap_isSet = true;
}

bool OAITariffh0::is_ap_Set() const{
    return m_ap_isSet;
}

bool OAITariffh0::is_ap_Valid() const{
    return m_ap_isValid;
}

qint32 OAITariffh0::getGp() const {
    return m_gp;
}
void OAITariffh0::setGp(const qint32 &gp) {
    m_gp = gp;
    m_gp_isSet = true;
}

bool OAITariffh0::is_gp_Set() const{
    return m_gp_isSet;
}

bool OAITariffh0::is_gp_Valid() const{
    return m_gp_isValid;
}

bool OAITariffh0::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITariffh0::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
