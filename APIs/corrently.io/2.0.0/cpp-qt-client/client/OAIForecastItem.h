/**
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIForecastItem.h
 *
 * 
 */

#ifndef OAIForecastItem_H
#define OAIForecastItem_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIForecastItem : public OAIObject {
public:
    OAIForecastItem();
    OAIForecastItem(QString json);
    ~OAIForecastItem() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCo2GOekostrom() const;
    void setCo2GOekostrom(const qint32 &co2_g_oekostrom);
    bool is_co2_g_oekostrom_Set() const;
    bool is_co2_g_oekostrom_Valid() const;

    double getEnergyprice() const;
    void setEnergyprice(const double &energyprice);
    bool is_energyprice_Set() const;
    bool is_energyprice_Valid() const;

    qint32 getEpochtime() const;
    void setEpochtime(const qint32 &epochtime);
    bool is_epochtime_Set() const;
    bool is_epochtime_Valid() const;

    qint32 getGsi() const;
    void setGsi(const qint32 &gsi);
    bool is_gsi_Set() const;
    bool is_gsi_Valid() const;

    bool isScaled() const;
    void setScaled(const bool &scaled);
    bool is_scaled_Set() const;
    bool is_scaled_Valid() const;

    qint32 getSci() const;
    void setSci(const qint32 &sci);
    bool is_sci_Set() const;
    bool is_sci_Valid() const;

    qint32 getTimeStamp() const;
    void setTimeStamp(const qint32 &time_stamp);
    bool is_time_stamp_Set() const;
    bool is_time_stamp_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_co2_g_oekostrom;
    bool m_co2_g_oekostrom_isSet;
    bool m_co2_g_oekostrom_isValid;

    double m_energyprice;
    bool m_energyprice_isSet;
    bool m_energyprice_isValid;

    qint32 m_epochtime;
    bool m_epochtime_isSet;
    bool m_epochtime_isValid;

    qint32 m_gsi;
    bool m_gsi_isSet;
    bool m_gsi_isValid;

    bool m_scaled;
    bool m_scaled_isSet;
    bool m_scaled_isValid;

    qint32 m_sci;
    bool m_sci_isSet;
    bool m_sci_isValid;

    qint32 m_time_stamp;
    bool m_time_stamp_isSet;
    bool m_time_stamp_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIForecastItem)

#endif // OAIForecastItem_H
