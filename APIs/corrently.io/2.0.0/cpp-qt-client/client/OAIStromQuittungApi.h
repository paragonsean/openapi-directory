/**
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStromQuittungApi_H
#define OAI_OAIStromQuittungApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIQuittungComit_request.h"
#include "OAIQuittungCreate_request.h"
#include "OAIQuittungTSE_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStromQuittungApi : public QObject {
    Q_OBJECT

public:
    OAIStromQuittungApi(const int timeOut = 0);
    ~OAIStromQuittungApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_quittung_comit_request OAIQuittungComit_request [optional]
    */
    virtual void quittungComit(const ::OpenAPI::OptionalParam<OAIQuittungComit_request> &oai_quittung_comit_request = ::OpenAPI::OptionalParam<OAIQuittungComit_request>());

    /**
    * @param[in]  oai_quittung_create_request OAIQuittungCreate_request [required]
    */
    virtual void quittungCreate(const OAIQuittungCreate_request &oai_quittung_create_request);

    /**
    * @param[in]  oai_quittung_comit_request OAIQuittungComit_request [optional]
    */
    virtual void quittungPrepare(const ::OpenAPI::OptionalParam<OAIQuittungComit_request> &oai_quittung_comit_request = ::OpenAPI::OptionalParam<OAIQuittungComit_request>());

    /**
    * @param[in]  account QString [optional]
    */
    virtual void quittungTSE(const ::OpenAPI::OptionalParam<QString> &account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account QString [optional]
    */
    virtual void quittungTSEData(const ::OpenAPI::OptionalParam<QString> &account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account QString [optional]
    */
    virtual void quittungTSEsignature(const ::OpenAPI::OptionalParam<QString> &account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account QString [optional]
    */
    virtual void quittungZugferd(const ::OpenAPI::OptionalParam<QString> &account = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void quittungComitCallback(OAIHttpRequestWorker *worker);
    void quittungCreateCallback(OAIHttpRequestWorker *worker);
    void quittungPrepareCallback(OAIHttpRequestWorker *worker);
    void quittungTSECallback(OAIHttpRequestWorker *worker);
    void quittungTSEDataCallback(OAIHttpRequestWorker *worker);
    void quittungTSEsignatureCallback(OAIHttpRequestWorker *worker);
    void quittungZugferdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void quittungComitSignal(QString summary);
    void quittungCreateSignal(QString summary);
    void quittungPrepareSignal(QString summary);
    void quittungTSESignal(OAIQuittungTSE_200_response summary);
    void quittungTSEDataSignal();
    void quittungTSEsignatureSignal();
    void quittungZugferdSignal();


    void quittungComitSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void quittungCreateSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void quittungPrepareSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void quittungTSESignalFull(OAIHttpRequestWorker *worker, OAIQuittungTSE_200_response summary);
    void quittungTSEDataSignalFull(OAIHttpRequestWorker *worker);
    void quittungTSEsignatureSignalFull(OAIHttpRequestWorker *worker);
    void quittungZugferdSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use quittungComitSignalError() instead")
    void quittungComitSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void quittungComitSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quittungCreateSignalError() instead")
    void quittungCreateSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void quittungCreateSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quittungPrepareSignalError() instead")
    void quittungPrepareSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void quittungPrepareSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quittungTSESignalError() instead")
    void quittungTSESignalE(OAIQuittungTSE_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void quittungTSESignalError(OAIQuittungTSE_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quittungTSEDataSignalError() instead")
    void quittungTSEDataSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void quittungTSEDataSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quittungTSEsignatureSignalError() instead")
    void quittungTSEsignatureSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void quittungTSEsignatureSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quittungZugferdSignalError() instead")
    void quittungZugferdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void quittungZugferdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use quittungComitSignalErrorFull() instead")
    void quittungComitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quittungComitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quittungCreateSignalErrorFull() instead")
    void quittungCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quittungCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quittungPrepareSignalErrorFull() instead")
    void quittungPrepareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quittungPrepareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quittungTSESignalErrorFull() instead")
    void quittungTSESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quittungTSESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quittungTSEDataSignalErrorFull() instead")
    void quittungTSEDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quittungTSEDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quittungTSEsignatureSignalErrorFull() instead")
    void quittungTSEsignatureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quittungTSEsignatureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quittungZugferdSignalErrorFull() instead")
    void quittungZugferdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quittungZugferdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
