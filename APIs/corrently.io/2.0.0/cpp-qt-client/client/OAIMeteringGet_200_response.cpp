/**
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeteringGet_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMeteringGet_200_response::OAIMeteringGet_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMeteringGet_200_response::OAIMeteringGet_200_response() {
    this->initializeModel();
}

OAIMeteringGet_200_response::~OAIMeteringGet_200_response() {}

void OAIMeteringGet_200_response::initializeModel() {

    m_r_1_8_0_isSet = false;
    m_r_1_8_0_isValid = false;

    m_r_1_8_1_isSet = false;
    m_r_1_8_1_isValid = false;

    m_r_1_8_2_isSet = false;
    m_r_1_8_2_isValid = false;

    m__processing_time_isSet = false;
    m__processing_time_isValid = false;

    m_account_isSet = false;
    m_account_isValid = false;

    m_co2_g_oekostrom_isSet = false;
    m_co2_g_oekostrom_isValid = false;

    m_co2_g_standard_isSet = false;
    m_co2_g_standard_isValid = false;

    m_credits_isSet = false;
    m_credits_isValid = false;

    m_time_stamp_isSet = false;
    m_time_stamp_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;
}

void OAIMeteringGet_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMeteringGet_200_response::fromJsonObject(QJsonObject json) {

    m_r_1_8_0_isValid = ::OpenAPI::fromJsonValue(m_r_1_8_0, json[QString("1.8.0")]);
    m_r_1_8_0_isSet = !json[QString("1.8.0")].isNull() && m_r_1_8_0_isValid;

    m_r_1_8_1_isValid = ::OpenAPI::fromJsonValue(m_r_1_8_1, json[QString("1.8.1")]);
    m_r_1_8_1_isSet = !json[QString("1.8.1")].isNull() && m_r_1_8_1_isValid;

    m_r_1_8_2_isValid = ::OpenAPI::fromJsonValue(m_r_1_8_2, json[QString("1.8.2")]);
    m_r_1_8_2_isSet = !json[QString("1.8.2")].isNull() && m_r_1_8_2_isValid;

    m__processing_time_isValid = ::OpenAPI::fromJsonValue(m__processing_time, json[QString("_processingTime")]);
    m__processing_time_isSet = !json[QString("_processingTime")].isNull() && m__processing_time_isValid;

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_co2_g_oekostrom_isValid = ::OpenAPI::fromJsonValue(m_co2_g_oekostrom, json[QString("co2_g_oekostrom")]);
    m_co2_g_oekostrom_isSet = !json[QString("co2_g_oekostrom")].isNull() && m_co2_g_oekostrom_isValid;

    m_co2_g_standard_isValid = ::OpenAPI::fromJsonValue(m_co2_g_standard, json[QString("co2_g_standard")]);
    m_co2_g_standard_isSet = !json[QString("co2_g_standard")].isNull() && m_co2_g_standard_isValid;

    m_credits_isValid = ::OpenAPI::fromJsonValue(m_credits, json[QString("credits")]);
    m_credits_isSet = !json[QString("credits")].isNull() && m_credits_isValid;

    m_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_time_stamp, json[QString("timeStamp")]);
    m_time_stamp_isSet = !json[QString("timeStamp")].isNull() && m_time_stamp_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("ttl")]);
    m_ttl_isSet = !json[QString("ttl")].isNull() && m_ttl_isValid;
}

QString OAIMeteringGet_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMeteringGet_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_r_1_8_0_isSet) {
        obj.insert(QString("1.8.0"), ::OpenAPI::toJsonValue(m_r_1_8_0));
    }
    if (m_r_1_8_1_isSet) {
        obj.insert(QString("1.8.1"), ::OpenAPI::toJsonValue(m_r_1_8_1));
    }
    if (m_r_1_8_2_isSet) {
        obj.insert(QString("1.8.2"), ::OpenAPI::toJsonValue(m_r_1_8_2));
    }
    if (m__processing_time_isSet) {
        obj.insert(QString("_processingTime"), ::OpenAPI::toJsonValue(m__processing_time));
    }
    if (m_account_isSet) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_co2_g_oekostrom_isSet) {
        obj.insert(QString("co2_g_oekostrom"), ::OpenAPI::toJsonValue(m_co2_g_oekostrom));
    }
    if (m_co2_g_standard_isSet) {
        obj.insert(QString("co2_g_standard"), ::OpenAPI::toJsonValue(m_co2_g_standard));
    }
    if (m_credits_isSet) {
        obj.insert(QString("credits"), ::OpenAPI::toJsonValue(m_credits));
    }
    if (m_time_stamp_isSet) {
        obj.insert(QString("timeStamp"), ::OpenAPI::toJsonValue(m_time_stamp));
    }
    if (m_ttl_isSet) {
        obj.insert(QString("ttl"), ::OpenAPI::toJsonValue(m_ttl));
    }
    return obj;
}

qint32 OAIMeteringGet_200_response::getR180() const {
    return m_r_1_8_0;
}
void OAIMeteringGet_200_response::setR180(const qint32 &r_1_8_0) {
    m_r_1_8_0 = r_1_8_0;
    m_r_1_8_0_isSet = true;
}

bool OAIMeteringGet_200_response::is_r_1_8_0_Set() const{
    return m_r_1_8_0_isSet;
}

bool OAIMeteringGet_200_response::is_r_1_8_0_Valid() const{
    return m_r_1_8_0_isValid;
}

qint32 OAIMeteringGet_200_response::getR181() const {
    return m_r_1_8_1;
}
void OAIMeteringGet_200_response::setR181(const qint32 &r_1_8_1) {
    m_r_1_8_1 = r_1_8_1;
    m_r_1_8_1_isSet = true;
}

bool OAIMeteringGet_200_response::is_r_1_8_1_Set() const{
    return m_r_1_8_1_isSet;
}

bool OAIMeteringGet_200_response::is_r_1_8_1_Valid() const{
    return m_r_1_8_1_isValid;
}

qint32 OAIMeteringGet_200_response::getR182() const {
    return m_r_1_8_2;
}
void OAIMeteringGet_200_response::setR182(const qint32 &r_1_8_2) {
    m_r_1_8_2 = r_1_8_2;
    m_r_1_8_2_isSet = true;
}

bool OAIMeteringGet_200_response::is_r_1_8_2_Set() const{
    return m_r_1_8_2_isSet;
}

bool OAIMeteringGet_200_response::is_r_1_8_2_Valid() const{
    return m_r_1_8_2_isValid;
}

qint32 OAIMeteringGet_200_response::getProcessingTime() const {
    return m__processing_time;
}
void OAIMeteringGet_200_response::setProcessingTime(const qint32 &_processing_time) {
    m__processing_time = _processing_time;
    m__processing_time_isSet = true;
}

bool OAIMeteringGet_200_response::is__processing_time_Set() const{
    return m__processing_time_isSet;
}

bool OAIMeteringGet_200_response::is__processing_time_Valid() const{
    return m__processing_time_isValid;
}

QString OAIMeteringGet_200_response::getAccount() const {
    return m_account;
}
void OAIMeteringGet_200_response::setAccount(const QString &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIMeteringGet_200_response::is_account_Set() const{
    return m_account_isSet;
}

bool OAIMeteringGet_200_response::is_account_Valid() const{
    return m_account_isValid;
}

qint32 OAIMeteringGet_200_response::getCo2GOekostrom() const {
    return m_co2_g_oekostrom;
}
void OAIMeteringGet_200_response::setCo2GOekostrom(const qint32 &co2_g_oekostrom) {
    m_co2_g_oekostrom = co2_g_oekostrom;
    m_co2_g_oekostrom_isSet = true;
}

bool OAIMeteringGet_200_response::is_co2_g_oekostrom_Set() const{
    return m_co2_g_oekostrom_isSet;
}

bool OAIMeteringGet_200_response::is_co2_g_oekostrom_Valid() const{
    return m_co2_g_oekostrom_isValid;
}

qint32 OAIMeteringGet_200_response::getCo2GStandard() const {
    return m_co2_g_standard;
}
void OAIMeteringGet_200_response::setCo2GStandard(const qint32 &co2_g_standard) {
    m_co2_g_standard = co2_g_standard;
    m_co2_g_standard_isSet = true;
}

bool OAIMeteringGet_200_response::is_co2_g_standard_Set() const{
    return m_co2_g_standard_isSet;
}

bool OAIMeteringGet_200_response::is_co2_g_standard_Valid() const{
    return m_co2_g_standard_isValid;
}

QJsonValue OAIMeteringGet_200_response::getCredits() const {
    return m_credits;
}
void OAIMeteringGet_200_response::setCredits(const QJsonValue &credits) {
    m_credits = credits;
    m_credits_isSet = true;
}

bool OAIMeteringGet_200_response::is_credits_Set() const{
    return m_credits_isSet;
}

bool OAIMeteringGet_200_response::is_credits_Valid() const{
    return m_credits_isValid;
}

qint32 OAIMeteringGet_200_response::getTimeStamp() const {
    return m_time_stamp;
}
void OAIMeteringGet_200_response::setTimeStamp(const qint32 &time_stamp) {
    m_time_stamp = time_stamp;
    m_time_stamp_isSet = true;
}

bool OAIMeteringGet_200_response::is_time_stamp_Set() const{
    return m_time_stamp_isSet;
}

bool OAIMeteringGet_200_response::is_time_stamp_Valid() const{
    return m_time_stamp_isValid;
}

qint32 OAIMeteringGet_200_response::getTtl() const {
    return m_ttl;
}
void OAIMeteringGet_200_response::setTtl(const qint32 &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAIMeteringGet_200_response::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAIMeteringGet_200_response::is_ttl_Valid() const{
    return m_ttl_isValid;
}

bool OAIMeteringGet_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_1_8_0_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_1_8_1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_1_8_2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__processing_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_co2_g_oekostrom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_co2_g_standard_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMeteringGet_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
