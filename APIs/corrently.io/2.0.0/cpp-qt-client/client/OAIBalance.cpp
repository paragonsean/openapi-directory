/**
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBalance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBalance::OAIBalance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBalance::OAIBalance() {
    this->initializeModel();
}

OAIBalance::~OAIBalance() {}

void OAIBalance::initializeModel() {

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_haben_isSet = false;
    m_haben_isValid = false;

    m_soll_isSet = false;
    m_soll_isValid = false;

    m_txs_isSet = false;
    m_txs_isValid = false;

    m_variation_isSet = false;
    m_variation_isValid = false;
}

void OAIBalance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBalance::fromJsonObject(QJsonObject json) {

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_haben_isValid = ::OpenAPI::fromJsonValue(m_haben, json[QString("haben")]);
    m_haben_isSet = !json[QString("haben")].isNull() && m_haben_isValid;

    m_soll_isValid = ::OpenAPI::fromJsonValue(m_soll, json[QString("soll")]);
    m_soll_isSet = !json[QString("soll")].isNull() && m_soll_isValid;

    m_txs_isValid = ::OpenAPI::fromJsonValue(m_txs, json[QString("txs")]);
    m_txs_isSet = !json[QString("txs")].isNull() && m_txs_isValid;

    m_variation_isValid = ::OpenAPI::fromJsonValue(m_variation, json[QString("variation")]);
    m_variation_isSet = !json[QString("variation")].isNull() && m_variation_isValid;
}

QString OAIBalance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBalance::asJsonObject() const {
    QJsonObject obj;
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_haben_isSet) {
        obj.insert(QString("haben"), ::OpenAPI::toJsonValue(m_haben));
    }
    if (m_soll_isSet) {
        obj.insert(QString("soll"), ::OpenAPI::toJsonValue(m_soll));
    }
    if (m_txs.size() > 0) {
        obj.insert(QString("txs"), ::OpenAPI::toJsonValue(m_txs));
    }
    if (m_variation_isSet) {
        obj.insert(QString("variation"), ::OpenAPI::toJsonValue(m_variation));
    }
    return obj;
}

qint32 OAIBalance::getBalance() const {
    return m_balance;
}
void OAIBalance::setBalance(const qint32 &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAIBalance::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAIBalance::is_balance_Valid() const{
    return m_balance_isValid;
}

qint32 OAIBalance::getHaben() const {
    return m_haben;
}
void OAIBalance::setHaben(const qint32 &haben) {
    m_haben = haben;
    m_haben_isSet = true;
}

bool OAIBalance::is_haben_Set() const{
    return m_haben_isSet;
}

bool OAIBalance::is_haben_Valid() const{
    return m_haben_isValid;
}

qint32 OAIBalance::getSoll() const {
    return m_soll;
}
void OAIBalance::setSoll(const qint32 &soll) {
    m_soll = soll;
    m_soll_isSet = true;
}

bool OAIBalance::is_soll_Set() const{
    return m_soll_isSet;
}

bool OAIBalance::is_soll_Valid() const{
    return m_soll_isValid;
}

QList<OAITransactions> OAIBalance::getTxs() const {
    return m_txs;
}
void OAIBalance::setTxs(const QList<OAITransactions> &txs) {
    m_txs = txs;
    m_txs_isSet = true;
}

bool OAIBalance::is_txs_Set() const{
    return m_txs_isSet;
}

bool OAIBalance::is_txs_Valid() const{
    return m_txs_isValid;
}

QString OAIBalance::getVariation() const {
    return m_variation;
}
void OAIBalance::setVariation(const QString &variation) {
    m_variation = variation;
    m_variation_isSet = true;
}

bool OAIBalance::is_variation_Set() const{
    return m_variation_isSet;
}

bool OAIBalance::is_variation_Valid() const{
    return m_variation_isValid;
}

bool OAIBalance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_haben_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_soll_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_txs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_variation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBalance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
