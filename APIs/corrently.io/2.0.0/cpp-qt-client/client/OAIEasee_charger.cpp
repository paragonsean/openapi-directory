/**
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEasee_charger.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEasee_charger::OAIEasee_charger(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEasee_charger::OAIEasee_charger() {
    this->initializeModel();
}

OAIEasee_charger::~OAIEasee_charger() {}

void OAIEasee_charger::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_session_isSet = false;
    m_last_session_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIEasee_charger::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEasee_charger::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_session_isValid = ::OpenAPI::fromJsonValue(m_last_session, json[QString("lastSession")]);
    m_last_session_isSet = !json[QString("lastSession")].isNull() && m_last_session_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIEasee_charger::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEasee_charger::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_session_isSet) {
        obj.insert(QString("lastSession"), ::OpenAPI::toJsonValue(m_last_session));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIEasee_charger::getId() const {
    return m_id;
}
void OAIEasee_charger::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEasee_charger::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEasee_charger::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIEasee_charger::getLastSession() const {
    return m_last_session;
}
void OAIEasee_charger::setLastSession(const QString &last_session) {
    m_last_session = last_session;
    m_last_session_isSet = true;
}

bool OAIEasee_charger::is_last_session_Set() const{
    return m_last_session_isSet;
}

bool OAIEasee_charger::is_last_session_Valid() const{
    return m_last_session_isValid;
}

QString OAIEasee_charger::getName() const {
    return m_name;
}
void OAIEasee_charger::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEasee_charger::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEasee_charger::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIEasee_charger::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_session_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEasee_charger::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
