/**
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGsiDispatch_200_response_timeframe.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGsiDispatch_200_response_timeframe::OAIGsiDispatch_200_response_timeframe(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGsiDispatch_200_response_timeframe::OAIGsiDispatch_200_response_timeframe() {
    this->initializeModel();
}

OAIGsiDispatch_200_response_timeframe::~OAIGsiDispatch_200_response_timeframe() {}

void OAIGsiDispatch_200_response_timeframe::initializeModel() {

    m_end_isSet = false;
    m_end_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;
}

void OAIGsiDispatch_200_response_timeframe::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGsiDispatch_200_response_timeframe::fromJsonObject(QJsonObject json) {

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;
}

QString OAIGsiDispatch_200_response_timeframe::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGsiDispatch_200_response_timeframe::asJsonObject() const {
    QJsonObject obj;
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    return obj;
}

qint32 OAIGsiDispatch_200_response_timeframe::getEnd() const {
    return m_end;
}
void OAIGsiDispatch_200_response_timeframe::setEnd(const qint32 &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIGsiDispatch_200_response_timeframe::is_end_Set() const{
    return m_end_isSet;
}

bool OAIGsiDispatch_200_response_timeframe::is_end_Valid() const{
    return m_end_isValid;
}

qint32 OAIGsiDispatch_200_response_timeframe::getStart() const {
    return m_start;
}
void OAIGsiDispatch_200_response_timeframe::setStart(const qint32 &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIGsiDispatch_200_response_timeframe::is_start_Set() const{
    return m_start_isSet;
}

bool OAIGsiDispatch_200_response_timeframe::is_start_Valid() const{
    return m_start_isValid;
}

bool OAIGsiDispatch_200_response_timeframe::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGsiDispatch_200_response_timeframe::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
