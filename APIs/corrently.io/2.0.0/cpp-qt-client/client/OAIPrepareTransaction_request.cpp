/**
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrepareTransaction_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrepareTransaction_request::OAIPrepareTransaction_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrepareTransaction_request::OAIPrepareTransaction_request() {
    this->initializeModel();
}

OAIPrepareTransaction_request::~OAIPrepareTransaction_request() {}

void OAIPrepareTransaction_request::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_signature_isSet = false;
    m_signature_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_variation_isSet = false;
    m_variation_isValid = false;
}

void OAIPrepareTransaction_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrepareTransaction_request::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_signature_isValid = ::OpenAPI::fromJsonValue(m_signature, json[QString("signature")]);
    m_signature_isSet = !json[QString("signature")].isNull() && m_signature_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_variation_isValid = ::OpenAPI::fromJsonValue(m_variation, json[QString("variation")]);
    m_variation_isSet = !json[QString("variation")].isNull() && m_variation_isValid;
}

QString OAIPrepareTransaction_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrepareTransaction_request::asJsonObject() const {
    QJsonObject obj;
    if (m_account_isSet) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_signature_isSet) {
        obj.insert(QString("signature"), ::OpenAPI::toJsonValue(m_signature));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_variation_isSet) {
        obj.insert(QString("variation"), ::OpenAPI::toJsonValue(m_variation));
    }
    return obj;
}

QString OAIPrepareTransaction_request::getAccount() const {
    return m_account;
}
void OAIPrepareTransaction_request::setAccount(const QString &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIPrepareTransaction_request::is_account_Set() const{
    return m_account_isSet;
}

bool OAIPrepareTransaction_request::is_account_Valid() const{
    return m_account_isValid;
}

QString OAIPrepareTransaction_request::getSignature() const {
    return m_signature;
}
void OAIPrepareTransaction_request::setSignature(const QString &signature) {
    m_signature = signature;
    m_signature_isSet = true;
}

bool OAIPrepareTransaction_request::is_signature_Set() const{
    return m_signature_isSet;
}

bool OAIPrepareTransaction_request::is_signature_Valid() const{
    return m_signature_isValid;
}

QString OAIPrepareTransaction_request::getTo() const {
    return m_to;
}
void OAIPrepareTransaction_request::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIPrepareTransaction_request::is_to_Set() const{
    return m_to_isSet;
}

bool OAIPrepareTransaction_request::is_to_Valid() const{
    return m_to_isValid;
}

qint32 OAIPrepareTransaction_request::getValue() const {
    return m_value;
}
void OAIPrepareTransaction_request::setValue(const qint32 &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIPrepareTransaction_request::is_value_Set() const{
    return m_value_isSet;
}

bool OAIPrepareTransaction_request::is_value_Valid() const{
    return m_value_isValid;
}

QString OAIPrepareTransaction_request::getVariation() const {
    return m_variation;
}
void OAIPrepareTransaction_request::setVariation(const QString &variation) {
    m_variation = variation;
    m_variation_isSet = true;
}

bool OAIPrepareTransaction_request::is_variation_Set() const{
    return m_variation_isSet;
}

bool OAIPrepareTransaction_request::is_variation_Valid() const{
    return m_variation_isValid;
}

bool OAIPrepareTransaction_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrepareTransaction_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
