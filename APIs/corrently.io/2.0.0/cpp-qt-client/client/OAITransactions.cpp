/**
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransactions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransactions::OAITransactions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransactions::OAITransactions() {
    this->initializeModel();
}

OAITransactions::~OAITransactions() {}

void OAITransactions::initializeModel() {

    m_cashier_isSet = false;
    m_cashier_isValid = false;

    m_time_stamp_isSet = false;
    m_time_stamp_isValid = false;

    m_txid_isSet = false;
    m_txid_isValid = false;

    m_txtype_isSet = false;
    m_txtype_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAITransactions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransactions::fromJsonObject(QJsonObject json) {

    m_cashier_isValid = ::OpenAPI::fromJsonValue(m_cashier, json[QString("cashier")]);
    m_cashier_isSet = !json[QString("cashier")].isNull() && m_cashier_isValid;

    m_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_time_stamp, json[QString("timeStamp")]);
    m_time_stamp_isSet = !json[QString("timeStamp")].isNull() && m_time_stamp_isValid;

    m_txid_isValid = ::OpenAPI::fromJsonValue(m_txid, json[QString("txid")]);
    m_txid_isSet = !json[QString("txid")].isNull() && m_txid_isValid;

    m_txtype_isValid = ::OpenAPI::fromJsonValue(m_txtype, json[QString("txtype")]);
    m_txtype_isSet = !json[QString("txtype")].isNull() && m_txtype_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAITransactions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransactions::asJsonObject() const {
    QJsonObject obj;
    if (m_cashier_isSet) {
        obj.insert(QString("cashier"), ::OpenAPI::toJsonValue(m_cashier));
    }
    if (m_time_stamp_isSet) {
        obj.insert(QString("timeStamp"), ::OpenAPI::toJsonValue(m_time_stamp));
    }
    if (m_txid_isSet) {
        obj.insert(QString("txid"), ::OpenAPI::toJsonValue(m_txid));
    }
    if (m_txtype_isSet) {
        obj.insert(QString("txtype"), ::OpenAPI::toJsonValue(m_txtype));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAITransactions::getCashier() const {
    return m_cashier;
}
void OAITransactions::setCashier(const QString &cashier) {
    m_cashier = cashier;
    m_cashier_isSet = true;
}

bool OAITransactions::is_cashier_Set() const{
    return m_cashier_isSet;
}

bool OAITransactions::is_cashier_Valid() const{
    return m_cashier_isValid;
}

qint32 OAITransactions::getTimeStamp() const {
    return m_time_stamp;
}
void OAITransactions::setTimeStamp(const qint32 &time_stamp) {
    m_time_stamp = time_stamp;
    m_time_stamp_isSet = true;
}

bool OAITransactions::is_time_stamp_Set() const{
    return m_time_stamp_isSet;
}

bool OAITransactions::is_time_stamp_Valid() const{
    return m_time_stamp_isValid;
}

QString OAITransactions::getTxid() const {
    return m_txid;
}
void OAITransactions::setTxid(const QString &txid) {
    m_txid = txid;
    m_txid_isSet = true;
}

bool OAITransactions::is_txid_Set() const{
    return m_txid_isSet;
}

bool OAITransactions::is_txid_Valid() const{
    return m_txid_isValid;
}

QString OAITransactions::getTxtype() const {
    return m_txtype;
}
void OAITransactions::setTxtype(const QString &txtype) {
    m_txtype = txtype;
    m_txtype_isSet = true;
}

bool OAITransactions::is_txtype_Set() const{
    return m_txtype_isSet;
}

bool OAITransactions::is_txtype_Valid() const{
    return m_txtype_isValid;
}

qint32 OAITransactions::getValue() const {
    return m_value;
}
void OAITransactions::setValue(const qint32 &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAITransactions::is_value_Set() const{
    return m_value_isSet;
}

bool OAITransactions::is_value_Valid() const{
    return m_value_isValid;
}

bool OAITransactions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cashier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_txid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_txtype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransactions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
