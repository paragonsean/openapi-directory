/**
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGsiPrediction_200_response_location.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGsiPrediction_200_response_location::OAIGsiPrediction_200_response_location(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGsiPrediction_200_response_location::OAIGsiPrediction_200_response_location() {
    this->initializeModel();
}

OAIGsiPrediction_200_response_location::~OAIGsiPrediction_200_response_location() {}

void OAIGsiPrediction_200_response_location::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_zip_isSet = false;
    m_zip_isValid = false;
}

void OAIGsiPrediction_200_response_location::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGsiPrediction_200_response_location::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_zip_isValid = ::OpenAPI::fromJsonValue(m_zip, json[QString("zip")]);
    m_zip_isSet = !json[QString("zip")].isNull() && m_zip_isValid;
}

QString OAIGsiPrediction_200_response_location::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGsiPrediction_200_response_location::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_zip_isSet) {
        obj.insert(QString("zip"), ::OpenAPI::toJsonValue(m_zip));
    }
    return obj;
}

QString OAIGsiPrediction_200_response_location::getCity() const {
    return m_city;
}
void OAIGsiPrediction_200_response_location::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIGsiPrediction_200_response_location::is_city_Set() const{
    return m_city_isSet;
}

bool OAIGsiPrediction_200_response_location::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIGsiPrediction_200_response_location::getZip() const {
    return m_zip;
}
void OAIGsiPrediction_200_response_location::setZip(const QString &zip) {
    m_zip = zip;
    m_zip_isSet = true;
}

bool OAIGsiPrediction_200_response_location::is_zip_Set() const{
    return m_zip_isSet;
}

bool OAIGsiPrediction_200_response_location::is_zip_Valid() const{
    return m_zip_isValid;
}

bool OAIGsiPrediction_200_response_location::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGsiPrediction_200_response_location::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
