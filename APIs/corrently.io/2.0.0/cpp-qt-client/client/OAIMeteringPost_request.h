/**
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMeteringPost_request.h
 *
 * 
 */

#ifndef OAIMeteringPost_request_H
#define OAIMeteringPost_request_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMeteringPost_request : public OAIObject {
public:
    OAIMeteringPost_request();
    OAIMeteringPost_request(QString json);
    ~OAIMeteringPost_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getR180() const;
    void setR180(const qint32 &r_1_8_0);
    bool is_r_1_8_0_Set() const;
    bool is_r_1_8_0_Valid() const;

    QString getAccount() const;
    void setAccount(const QString &account);
    bool is_account_Set() const;
    bool is_account_Valid() const;

    qint32 getEnergy() const;
    void setEnergy(const qint32 &energy);
    bool is_energy_Set() const;
    bool is_energy_Valid() const;

    QString getSecret() const;
    void setSecret(const QString &secret);
    bool is_secret_Set() const;
    bool is_secret_Valid() const;

    qint32 getValue() const;
    void setValue(const qint32 &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    QString getZip() const;
    void setZip(const QString &zip);
    bool is_zip_Set() const;
    bool is_zip_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_r_1_8_0;
    bool m_r_1_8_0_isSet;
    bool m_r_1_8_0_isValid;

    QString m_account;
    bool m_account_isSet;
    bool m_account_isValid;

    qint32 m_energy;
    bool m_energy_isSet;
    bool m_energy_isValid;

    QString m_secret;
    bool m_secret_isSet;
    bool m_secret_isValid;

    qint32 m_value;
    bool m_value_isSet;
    bool m_value_isValid;

    QString m_zip;
    bool m_zip_isSet;
    bool m_zip_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMeteringPost_request)

#endif // OAIMeteringPost_request_H
