/**
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOmmeters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOmmeters::OAIOmmeters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOmmeters::OAIOmmeters() {
    this->initializeModel();
}

OAIOmmeters::~OAIOmmeters() {}

void OAIOmmeters::initializeModel() {

    m_current_scaling_factor_isSet = false;
    m_current_scaling_factor_isValid = false;

    m_load_profile_type_isSet = false;
    m_load_profile_type_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_manufacturer_id_isSet = false;
    m_manufacturer_id_isValid = false;

    m_measurement_type_isSet = false;
    m_measurement_type_isValid = false;

    m_meta_isSet = false;
    m_meta_isValid = false;

    m_meter_id_isSet = false;
    m_meter_id_isValid = false;

    m_scaling_factor_isSet = false;
    m_scaling_factor_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_voltage_scaling_factor_isSet = false;
    m_voltage_scaling_factor_isValid = false;
}

void OAIOmmeters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOmmeters::fromJsonObject(QJsonObject json) {

    m_current_scaling_factor_isValid = ::OpenAPI::fromJsonValue(m_current_scaling_factor, json[QString("currentScalingFactor")]);
    m_current_scaling_factor_isSet = !json[QString("currentScalingFactor")].isNull() && m_current_scaling_factor_isValid;

    m_load_profile_type_isValid = ::OpenAPI::fromJsonValue(m_load_profile_type, json[QString("loadProfileType")]);
    m_load_profile_type_isSet = !json[QString("loadProfileType")].isNull() && m_load_profile_type_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_manufacturer_id_isValid = ::OpenAPI::fromJsonValue(m_manufacturer_id, json[QString("manufacturerId")]);
    m_manufacturer_id_isSet = !json[QString("manufacturerId")].isNull() && m_manufacturer_id_isValid;

    m_measurement_type_isValid = ::OpenAPI::fromJsonValue(m_measurement_type, json[QString("measurementType")]);
    m_measurement_type_isSet = !json[QString("measurementType")].isNull() && m_measurement_type_isValid;

    m_meta_isValid = ::OpenAPI::fromJsonValue(m_meta, json[QString("meta")]);
    m_meta_isSet = !json[QString("meta")].isNull() && m_meta_isValid;

    m_meter_id_isValid = ::OpenAPI::fromJsonValue(m_meter_id, json[QString("meterId")]);
    m_meter_id_isSet = !json[QString("meterId")].isNull() && m_meter_id_isValid;

    m_scaling_factor_isValid = ::OpenAPI::fromJsonValue(m_scaling_factor, json[QString("scalingFactor")]);
    m_scaling_factor_isSet = !json[QString("scalingFactor")].isNull() && m_scaling_factor_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_voltage_scaling_factor_isValid = ::OpenAPI::fromJsonValue(m_voltage_scaling_factor, json[QString("voltageScalingFactor")]);
    m_voltage_scaling_factor_isSet = !json[QString("voltageScalingFactor")].isNull() && m_voltage_scaling_factor_isValid;
}

QString OAIOmmeters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOmmeters::asJsonObject() const {
    QJsonObject obj;
    if (m_current_scaling_factor_isSet) {
        obj.insert(QString("currentScalingFactor"), ::OpenAPI::toJsonValue(m_current_scaling_factor));
    }
    if (m_load_profile_type_isSet) {
        obj.insert(QString("loadProfileType"), ::OpenAPI::toJsonValue(m_load_profile_type));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_manufacturer_id_isSet) {
        obj.insert(QString("manufacturerId"), ::OpenAPI::toJsonValue(m_manufacturer_id));
    }
    if (m_measurement_type_isSet) {
        obj.insert(QString("measurementType"), ::OpenAPI::toJsonValue(m_measurement_type));
    }
    if (m_meta_isSet) {
        obj.insert(QString("meta"), ::OpenAPI::toJsonValue(m_meta));
    }
    if (m_meter_id_isSet) {
        obj.insert(QString("meterId"), ::OpenAPI::toJsonValue(m_meter_id));
    }
    if (m_scaling_factor_isSet) {
        obj.insert(QString("scalingFactor"), ::OpenAPI::toJsonValue(m_scaling_factor));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_voltage_scaling_factor_isSet) {
        obj.insert(QString("voltageScalingFactor"), ::OpenAPI::toJsonValue(m_voltage_scaling_factor));
    }
    return obj;
}

qint32 OAIOmmeters::getCurrentScalingFactor() const {
    return m_current_scaling_factor;
}
void OAIOmmeters::setCurrentScalingFactor(const qint32 &current_scaling_factor) {
    m_current_scaling_factor = current_scaling_factor;
    m_current_scaling_factor_isSet = true;
}

bool OAIOmmeters::is_current_scaling_factor_Set() const{
    return m_current_scaling_factor_isSet;
}

bool OAIOmmeters::is_current_scaling_factor_Valid() const{
    return m_current_scaling_factor_isValid;
}

QString OAIOmmeters::getLoadProfileType() const {
    return m_load_profile_type;
}
void OAIOmmeters::setLoadProfileType(const QString &load_profile_type) {
    m_load_profile_type = load_profile_type;
    m_load_profile_type_isSet = true;
}

bool OAIOmmeters::is_load_profile_type_Set() const{
    return m_load_profile_type_isSet;
}

bool OAIOmmeters::is_load_profile_type_Valid() const{
    return m_load_profile_type_isValid;
}

QString OAIOmmeters::getLocation() const {
    return m_location;
}
void OAIOmmeters::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIOmmeters::is_location_Set() const{
    return m_location_isSet;
}

bool OAIOmmeters::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIOmmeters::getManufacturerId() const {
    return m_manufacturer_id;
}
void OAIOmmeters::setManufacturerId(const QString &manufacturer_id) {
    m_manufacturer_id = manufacturer_id;
    m_manufacturer_id_isSet = true;
}

bool OAIOmmeters::is_manufacturer_id_Set() const{
    return m_manufacturer_id_isSet;
}

bool OAIOmmeters::is_manufacturer_id_Valid() const{
    return m_manufacturer_id_isValid;
}

QString OAIOmmeters::getMeasurementType() const {
    return m_measurement_type;
}
void OAIOmmeters::setMeasurementType(const QString &measurement_type) {
    m_measurement_type = measurement_type;
    m_measurement_type_isSet = true;
}

bool OAIOmmeters::is_measurement_type_Set() const{
    return m_measurement_type_isSet;
}

bool OAIOmmeters::is_measurement_type_Valid() const{
    return m_measurement_type_isValid;
}

QString OAIOmmeters::getMeta() const {
    return m_meta;
}
void OAIOmmeters::setMeta(const QString &meta) {
    m_meta = meta;
    m_meta_isSet = true;
}

bool OAIOmmeters::is_meta_Set() const{
    return m_meta_isSet;
}

bool OAIOmmeters::is_meta_Valid() const{
    return m_meta_isValid;
}

QString OAIOmmeters::getMeterId() const {
    return m_meter_id;
}
void OAIOmmeters::setMeterId(const QString &meter_id) {
    m_meter_id = meter_id;
    m_meter_id_isSet = true;
}

bool OAIOmmeters::is_meter_id_Set() const{
    return m_meter_id_isSet;
}

bool OAIOmmeters::is_meter_id_Valid() const{
    return m_meter_id_isValid;
}

qint32 OAIOmmeters::getScalingFactor() const {
    return m_scaling_factor;
}
void OAIOmmeters::setScalingFactor(const qint32 &scaling_factor) {
    m_scaling_factor = scaling_factor;
    m_scaling_factor_isSet = true;
}

bool OAIOmmeters::is_scaling_factor_Set() const{
    return m_scaling_factor_isSet;
}

bool OAIOmmeters::is_scaling_factor_Valid() const{
    return m_scaling_factor_isValid;
}

QString OAIOmmeters::getType() const {
    return m_type;
}
void OAIOmmeters::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOmmeters::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOmmeters::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIOmmeters::getVoltageScalingFactor() const {
    return m_voltage_scaling_factor;
}
void OAIOmmeters::setVoltageScalingFactor(const qint32 &voltage_scaling_factor) {
    m_voltage_scaling_factor = voltage_scaling_factor;
    m_voltage_scaling_factor_isSet = true;
}

bool OAIOmmeters::is_voltage_scaling_factor_Set() const{
    return m_voltage_scaling_factor_isSet;
}

bool OAIOmmeters::is_voltage_scaling_factor_Valid() const{
    return m_voltage_scaling_factor_isValid;
}

bool OAIOmmeters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_scaling_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_profile_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manufacturer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measurement_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meter_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scaling_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voltage_scaling_factor_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOmmeters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
