/**
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComponentsh0.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComponentsh0::OAIComponentsh0(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComponentsh0::OAIComponentsh0() {
    this->initializeModel();
}

OAIComponentsh0::~OAIComponentsh0() {}

void OAIComponentsh0::initializeModel() {

    m_components_isSet = false;
    m_components_isValid = false;

    m_describtion_isSet = false;
    m_describtion_isValid = false;

    m_mutlityplier_isSet = false;
    m_mutlityplier_isValid = false;

    m_per_isSet = false;
    m_per_isValid = false;

    m_sum_isSet = false;
    m_sum_isValid = false;
}

void OAIComponentsh0::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComponentsh0::fromJsonObject(QJsonObject json) {

    m_components_isValid = ::OpenAPI::fromJsonValue(m_components, json[QString("components")]);
    m_components_isSet = !json[QString("components")].isNull() && m_components_isValid;

    m_describtion_isValid = ::OpenAPI::fromJsonValue(m_describtion, json[QString("describtion")]);
    m_describtion_isSet = !json[QString("describtion")].isNull() && m_describtion_isValid;

    m_mutlityplier_isValid = ::OpenAPI::fromJsonValue(m_mutlityplier, json[QString("mutlityplier")]);
    m_mutlityplier_isSet = !json[QString("mutlityplier")].isNull() && m_mutlityplier_isValid;

    m_per_isValid = ::OpenAPI::fromJsonValue(m_per, json[QString("per")]);
    m_per_isSet = !json[QString("per")].isNull() && m_per_isValid;

    m_sum_isValid = ::OpenAPI::fromJsonValue(m_sum, json[QString("sum")]);
    m_sum_isSet = !json[QString("sum")].isNull() && m_sum_isValid;
}

QString OAIComponentsh0::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComponentsh0::asJsonObject() const {
    QJsonObject obj;
    if (m_components.size() > 0) {
        obj.insert(QString("components"), ::OpenAPI::toJsonValue(m_components));
    }
    if (m_describtion_isSet) {
        obj.insert(QString("describtion"), ::OpenAPI::toJsonValue(m_describtion));
    }
    if (m_mutlityplier_isSet) {
        obj.insert(QString("mutlityplier"), ::OpenAPI::toJsonValue(m_mutlityplier));
    }
    if (m_per_isSet) {
        obj.insert(QString("per"), ::OpenAPI::toJsonValue(m_per));
    }
    if (m_sum_isSet) {
        obj.insert(QString("sum"), ::OpenAPI::toJsonValue(m_sum));
    }
    return obj;
}

QList<OAIComponentsh0> OAIComponentsh0::getComponents() const {
    return m_components;
}
void OAIComponentsh0::setComponents(const QList<OAIComponentsh0> &components) {
    m_components = components;
    m_components_isSet = true;
}

bool OAIComponentsh0::is_components_Set() const{
    return m_components_isSet;
}

bool OAIComponentsh0::is_components_Valid() const{
    return m_components_isValid;
}

QString OAIComponentsh0::getDescribtion() const {
    return m_describtion;
}
void OAIComponentsh0::setDescribtion(const QString &describtion) {
    m_describtion = describtion;
    m_describtion_isSet = true;
}

bool OAIComponentsh0::is_describtion_Set() const{
    return m_describtion_isSet;
}

bool OAIComponentsh0::is_describtion_Valid() const{
    return m_describtion_isValid;
}

QString OAIComponentsh0::getMutlityplier() const {
    return m_mutlityplier;
}
void OAIComponentsh0::setMutlityplier(const QString &mutlityplier) {
    m_mutlityplier = mutlityplier;
    m_mutlityplier_isSet = true;
}

bool OAIComponentsh0::is_mutlityplier_Set() const{
    return m_mutlityplier_isSet;
}

bool OAIComponentsh0::is_mutlityplier_Valid() const{
    return m_mutlityplier_isValid;
}

double OAIComponentsh0::getPer() const {
    return m_per;
}
void OAIComponentsh0::setPer(const double &per) {
    m_per = per;
    m_per_isSet = true;
}

bool OAIComponentsh0::is_per_Set() const{
    return m_per_isSet;
}

bool OAIComponentsh0::is_per_Valid() const{
    return m_per_isValid;
}

double OAIComponentsh0::getSum() const {
    return m_sum;
}
void OAIComponentsh0::setSum(const double &sum) {
    m_sum = sum;
    m_sum_isSet = true;
}

bool OAIComponentsh0::is_sum_Set() const{
    return m_sum_isSet;
}

bool OAIComponentsh0::is_sum_Valid() const{
    return m_sum_isValid;
}

bool OAIComponentsh0::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_components.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_describtion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mutlityplier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sum_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComponentsh0::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
