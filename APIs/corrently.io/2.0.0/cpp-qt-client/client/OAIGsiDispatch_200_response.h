/**
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGsiDispatch_200_response.h
 *
 * 
 */

#ifndef OAIGsiDispatch_200_response_H
#define OAIGsiDispatch_200_response_H

#include <QJsonObject>

#include "OAIDispatchLocation.h"
#include "OAIGsiDispatch_200_response_timeframe.h"
#include "OAIObject.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDispatchLocation;
class OAIGsiDispatch_200_response_timeframe;

class OAIGsiDispatch_200_response : public OAIObject {
public:
    OAIGsiDispatch_200_response();
    OAIGsiDispatch_200_response(QString json);
    ~OAIGsiDispatch_200_response() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAvgDistanceKm() const;
    void setAvgDistanceKm(const double &avg_distance_km);
    bool is_avg_distance_km_Set() const;
    bool is_avg_distance_km_Valid() const;

    QList<OAIDispatchLocation> getDispatchFrom() const;
    void setDispatchFrom(const QList<OAIDispatchLocation> &dispatch_from);
    bool is_dispatch_from_Set() const;
    bool is_dispatch_from_Valid() const;

    QList<OAIDispatchLocation> getDispatchTarget() const;
    void setDispatchTarget(const QList<OAIDispatchLocation> &dispatch_target);
    bool is_dispatch_target_Set() const;
    bool is_dispatch_target_Valid() const;

    OAIObject getPostmix() const;
    void setPostmix(const OAIObject &postmix);
    bool is_postmix_Set() const;
    bool is_postmix_Valid() const;

    OAIObject getPremix() const;
    void setPremix(const OAIObject &premix);
    bool is_premix_Set() const;
    bool is_premix_Valid() const;

    OAIGsiDispatch_200_response_timeframe getTimeframe() const;
    void setTimeframe(const OAIGsiDispatch_200_response_timeframe &timeframe);
    bool is_timeframe_Set() const;
    bool is_timeframe_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_avg_distance_km;
    bool m_avg_distance_km_isSet;
    bool m_avg_distance_km_isValid;

    QList<OAIDispatchLocation> m_dispatch_from;
    bool m_dispatch_from_isSet;
    bool m_dispatch_from_isValid;

    QList<OAIDispatchLocation> m_dispatch_target;
    bool m_dispatch_target_isSet;
    bool m_dispatch_target_isValid;

    OAIObject m_postmix;
    bool m_postmix_isSet;
    bool m_postmix_isValid;

    OAIObject m_premix;
    bool m_premix_isSet;
    bool m_premix_isValid;

    OAIGsiDispatch_200_response_timeframe m_timeframe;
    bool m_timeframe_isSet;
    bool m_timeframe_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGsiDispatch_200_response)

#endif // OAIGsiDispatch_200_response_H
