/**
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGsiDispatch_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGsiDispatch_200_response::OAIGsiDispatch_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGsiDispatch_200_response::OAIGsiDispatch_200_response() {
    this->initializeModel();
}

OAIGsiDispatch_200_response::~OAIGsiDispatch_200_response() {}

void OAIGsiDispatch_200_response::initializeModel() {

    m_avg_distance_km_isSet = false;
    m_avg_distance_km_isValid = false;

    m_dispatch_from_isSet = false;
    m_dispatch_from_isValid = false;

    m_dispatch_target_isSet = false;
    m_dispatch_target_isValid = false;

    m_postmix_isSet = false;
    m_postmix_isValid = false;

    m_premix_isSet = false;
    m_premix_isValid = false;

    m_timeframe_isSet = false;
    m_timeframe_isValid = false;
}

void OAIGsiDispatch_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGsiDispatch_200_response::fromJsonObject(QJsonObject json) {

    m_avg_distance_km_isValid = ::OpenAPI::fromJsonValue(m_avg_distance_km, json[QString("avg_distance_km")]);
    m_avg_distance_km_isSet = !json[QString("avg_distance_km")].isNull() && m_avg_distance_km_isValid;

    m_dispatch_from_isValid = ::OpenAPI::fromJsonValue(m_dispatch_from, json[QString("dispatch_from")]);
    m_dispatch_from_isSet = !json[QString("dispatch_from")].isNull() && m_dispatch_from_isValid;

    m_dispatch_target_isValid = ::OpenAPI::fromJsonValue(m_dispatch_target, json[QString("dispatch_target")]);
    m_dispatch_target_isSet = !json[QString("dispatch_target")].isNull() && m_dispatch_target_isValid;

    m_postmix_isValid = ::OpenAPI::fromJsonValue(m_postmix, json[QString("postmix")]);
    m_postmix_isSet = !json[QString("postmix")].isNull() && m_postmix_isValid;

    m_premix_isValid = ::OpenAPI::fromJsonValue(m_premix, json[QString("premix")]);
    m_premix_isSet = !json[QString("premix")].isNull() && m_premix_isValid;

    m_timeframe_isValid = ::OpenAPI::fromJsonValue(m_timeframe, json[QString("timeframe")]);
    m_timeframe_isSet = !json[QString("timeframe")].isNull() && m_timeframe_isValid;
}

QString OAIGsiDispatch_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGsiDispatch_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_avg_distance_km_isSet) {
        obj.insert(QString("avg_distance_km"), ::OpenAPI::toJsonValue(m_avg_distance_km));
    }
    if (m_dispatch_from.size() > 0) {
        obj.insert(QString("dispatch_from"), ::OpenAPI::toJsonValue(m_dispatch_from));
    }
    if (m_dispatch_target.size() > 0) {
        obj.insert(QString("dispatch_target"), ::OpenAPI::toJsonValue(m_dispatch_target));
    }
    if (m_postmix_isSet) {
        obj.insert(QString("postmix"), ::OpenAPI::toJsonValue(m_postmix));
    }
    if (m_premix_isSet) {
        obj.insert(QString("premix"), ::OpenAPI::toJsonValue(m_premix));
    }
    if (m_timeframe.isSet()) {
        obj.insert(QString("timeframe"), ::OpenAPI::toJsonValue(m_timeframe));
    }
    return obj;
}

double OAIGsiDispatch_200_response::getAvgDistanceKm() const {
    return m_avg_distance_km;
}
void OAIGsiDispatch_200_response::setAvgDistanceKm(const double &avg_distance_km) {
    m_avg_distance_km = avg_distance_km;
    m_avg_distance_km_isSet = true;
}

bool OAIGsiDispatch_200_response::is_avg_distance_km_Set() const{
    return m_avg_distance_km_isSet;
}

bool OAIGsiDispatch_200_response::is_avg_distance_km_Valid() const{
    return m_avg_distance_km_isValid;
}

QList<OAIDispatchLocation> OAIGsiDispatch_200_response::getDispatchFrom() const {
    return m_dispatch_from;
}
void OAIGsiDispatch_200_response::setDispatchFrom(const QList<OAIDispatchLocation> &dispatch_from) {
    m_dispatch_from = dispatch_from;
    m_dispatch_from_isSet = true;
}

bool OAIGsiDispatch_200_response::is_dispatch_from_Set() const{
    return m_dispatch_from_isSet;
}

bool OAIGsiDispatch_200_response::is_dispatch_from_Valid() const{
    return m_dispatch_from_isValid;
}

QList<OAIDispatchLocation> OAIGsiDispatch_200_response::getDispatchTarget() const {
    return m_dispatch_target;
}
void OAIGsiDispatch_200_response::setDispatchTarget(const QList<OAIDispatchLocation> &dispatch_target) {
    m_dispatch_target = dispatch_target;
    m_dispatch_target_isSet = true;
}

bool OAIGsiDispatch_200_response::is_dispatch_target_Set() const{
    return m_dispatch_target_isSet;
}

bool OAIGsiDispatch_200_response::is_dispatch_target_Valid() const{
    return m_dispatch_target_isValid;
}

OAIObject OAIGsiDispatch_200_response::getPostmix() const {
    return m_postmix;
}
void OAIGsiDispatch_200_response::setPostmix(const OAIObject &postmix) {
    m_postmix = postmix;
    m_postmix_isSet = true;
}

bool OAIGsiDispatch_200_response::is_postmix_Set() const{
    return m_postmix_isSet;
}

bool OAIGsiDispatch_200_response::is_postmix_Valid() const{
    return m_postmix_isValid;
}

OAIObject OAIGsiDispatch_200_response::getPremix() const {
    return m_premix;
}
void OAIGsiDispatch_200_response::setPremix(const OAIObject &premix) {
    m_premix = premix;
    m_premix_isSet = true;
}

bool OAIGsiDispatch_200_response::is_premix_Set() const{
    return m_premix_isSet;
}

bool OAIGsiDispatch_200_response::is_premix_Valid() const{
    return m_premix_isValid;
}

OAIGsiDispatch_200_response_timeframe OAIGsiDispatch_200_response::getTimeframe() const {
    return m_timeframe;
}
void OAIGsiDispatch_200_response::setTimeframe(const OAIGsiDispatch_200_response_timeframe &timeframe) {
    m_timeframe = timeframe;
    m_timeframe_isSet = true;
}

bool OAIGsiDispatch_200_response::is_timeframe_Set() const{
    return m_timeframe_isSet;
}

bool OAIGsiDispatch_200_response::is_timeframe_Valid() const{
    return m_timeframe_isValid;
}

bool OAIGsiDispatch_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avg_distance_km_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dispatch_from.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dispatch_target.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_postmix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_premix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeframe.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGsiDispatch_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
