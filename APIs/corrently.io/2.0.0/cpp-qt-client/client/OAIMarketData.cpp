/**
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMarketData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMarketData::OAIMarketData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMarketData::OAIMarketData() {
    this->initializeModel();
}

OAIMarketData::~OAIMarketData() {}

void OAIMarketData::initializeModel() {

    m_end_timestamp_isSet = false;
    m_end_timestamp_isValid = false;

    m_marketprice_isSet = false;
    m_marketprice_isValid = false;

    m_start_timestamp_isSet = false;
    m_start_timestamp_isValid = false;
}

void OAIMarketData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMarketData::fromJsonObject(QJsonObject json) {

    m_end_timestamp_isValid = ::OpenAPI::fromJsonValue(m_end_timestamp, json[QString("end_timestamp")]);
    m_end_timestamp_isSet = !json[QString("end_timestamp")].isNull() && m_end_timestamp_isValid;

    m_marketprice_isValid = ::OpenAPI::fromJsonValue(m_marketprice, json[QString("marketprice")]);
    m_marketprice_isSet = !json[QString("marketprice")].isNull() && m_marketprice_isValid;

    m_start_timestamp_isValid = ::OpenAPI::fromJsonValue(m_start_timestamp, json[QString("start_timestamp")]);
    m_start_timestamp_isSet = !json[QString("start_timestamp")].isNull() && m_start_timestamp_isValid;
}

QString OAIMarketData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMarketData::asJsonObject() const {
    QJsonObject obj;
    if (m_end_timestamp_isSet) {
        obj.insert(QString("end_timestamp"), ::OpenAPI::toJsonValue(m_end_timestamp));
    }
    if (m_marketprice_isSet) {
        obj.insert(QString("marketprice"), ::OpenAPI::toJsonValue(m_marketprice));
    }
    if (m_start_timestamp_isSet) {
        obj.insert(QString("start_timestamp"), ::OpenAPI::toJsonValue(m_start_timestamp));
    }
    return obj;
}

qint32 OAIMarketData::getEndTimestamp() const {
    return m_end_timestamp;
}
void OAIMarketData::setEndTimestamp(const qint32 &end_timestamp) {
    m_end_timestamp = end_timestamp;
    m_end_timestamp_isSet = true;
}

bool OAIMarketData::is_end_timestamp_Set() const{
    return m_end_timestamp_isSet;
}

bool OAIMarketData::is_end_timestamp_Valid() const{
    return m_end_timestamp_isValid;
}

double OAIMarketData::getMarketprice() const {
    return m_marketprice;
}
void OAIMarketData::setMarketprice(const double &marketprice) {
    m_marketprice = marketprice;
    m_marketprice_isSet = true;
}

bool OAIMarketData::is_marketprice_Set() const{
    return m_marketprice_isSet;
}

bool OAIMarketData::is_marketprice_Valid() const{
    return m_marketprice_isValid;
}

qint32 OAIMarketData::getStartTimestamp() const {
    return m_start_timestamp;
}
void OAIMarketData::setStartTimestamp(const qint32 &start_timestamp) {
    m_start_timestamp = start_timestamp;
    m_start_timestamp_isSet = true;
}

bool OAIMarketData::is_start_timestamp_Set() const{
    return m_start_timestamp_isSet;
}

bool OAIMarketData::is_start_timestamp_Valid() const{
    return m_start_timestamp_isValid;
}

bool OAIMarketData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketprice_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMarketData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
