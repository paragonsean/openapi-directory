/**
 * Corrently.io
 * *Corrently - from italian corrente, which is energy* # Introduction The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management. As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding. [Released SKDs for Download](https://github.com/energychain/corrently-api/releases) 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: dev@stromdao.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIForecastItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIForecastItem::OAIForecastItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIForecastItem::OAIForecastItem() {
    this->initializeModel();
}

OAIForecastItem::~OAIForecastItem() {}

void OAIForecastItem::initializeModel() {

    m_co2_g_oekostrom_isSet = false;
    m_co2_g_oekostrom_isValid = false;

    m_energyprice_isSet = false;
    m_energyprice_isValid = false;

    m_epochtime_isSet = false;
    m_epochtime_isValid = false;

    m_gsi_isSet = false;
    m_gsi_isValid = false;

    m_scaled_isSet = false;
    m_scaled_isValid = false;

    m_sci_isSet = false;
    m_sci_isValid = false;

    m_time_stamp_isSet = false;
    m_time_stamp_isValid = false;
}

void OAIForecastItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIForecastItem::fromJsonObject(QJsonObject json) {

    m_co2_g_oekostrom_isValid = ::OpenAPI::fromJsonValue(m_co2_g_oekostrom, json[QString("co2_g_oekostrom")]);
    m_co2_g_oekostrom_isSet = !json[QString("co2_g_oekostrom")].isNull() && m_co2_g_oekostrom_isValid;

    m_energyprice_isValid = ::OpenAPI::fromJsonValue(m_energyprice, json[QString("energyprice")]);
    m_energyprice_isSet = !json[QString("energyprice")].isNull() && m_energyprice_isValid;

    m_epochtime_isValid = ::OpenAPI::fromJsonValue(m_epochtime, json[QString("epochtime")]);
    m_epochtime_isSet = !json[QString("epochtime")].isNull() && m_epochtime_isValid;

    m_gsi_isValid = ::OpenAPI::fromJsonValue(m_gsi, json[QString("gsi")]);
    m_gsi_isSet = !json[QString("gsi")].isNull() && m_gsi_isValid;

    m_scaled_isValid = ::OpenAPI::fromJsonValue(m_scaled, json[QString("scaled")]);
    m_scaled_isSet = !json[QString("scaled")].isNull() && m_scaled_isValid;

    m_sci_isValid = ::OpenAPI::fromJsonValue(m_sci, json[QString("sci")]);
    m_sci_isSet = !json[QString("sci")].isNull() && m_sci_isValid;

    m_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_time_stamp, json[QString("timeStamp")]);
    m_time_stamp_isSet = !json[QString("timeStamp")].isNull() && m_time_stamp_isValid;
}

QString OAIForecastItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIForecastItem::asJsonObject() const {
    QJsonObject obj;
    if (m_co2_g_oekostrom_isSet) {
        obj.insert(QString("co2_g_oekostrom"), ::OpenAPI::toJsonValue(m_co2_g_oekostrom));
    }
    if (m_energyprice_isSet) {
        obj.insert(QString("energyprice"), ::OpenAPI::toJsonValue(m_energyprice));
    }
    if (m_epochtime_isSet) {
        obj.insert(QString("epochtime"), ::OpenAPI::toJsonValue(m_epochtime));
    }
    if (m_gsi_isSet) {
        obj.insert(QString("gsi"), ::OpenAPI::toJsonValue(m_gsi));
    }
    if (m_scaled_isSet) {
        obj.insert(QString("scaled"), ::OpenAPI::toJsonValue(m_scaled));
    }
    if (m_sci_isSet) {
        obj.insert(QString("sci"), ::OpenAPI::toJsonValue(m_sci));
    }
    if (m_time_stamp_isSet) {
        obj.insert(QString("timeStamp"), ::OpenAPI::toJsonValue(m_time_stamp));
    }
    return obj;
}

qint32 OAIForecastItem::getCo2GOekostrom() const {
    return m_co2_g_oekostrom;
}
void OAIForecastItem::setCo2GOekostrom(const qint32 &co2_g_oekostrom) {
    m_co2_g_oekostrom = co2_g_oekostrom;
    m_co2_g_oekostrom_isSet = true;
}

bool OAIForecastItem::is_co2_g_oekostrom_Set() const{
    return m_co2_g_oekostrom_isSet;
}

bool OAIForecastItem::is_co2_g_oekostrom_Valid() const{
    return m_co2_g_oekostrom_isValid;
}

double OAIForecastItem::getEnergyprice() const {
    return m_energyprice;
}
void OAIForecastItem::setEnergyprice(const double &energyprice) {
    m_energyprice = energyprice;
    m_energyprice_isSet = true;
}

bool OAIForecastItem::is_energyprice_Set() const{
    return m_energyprice_isSet;
}

bool OAIForecastItem::is_energyprice_Valid() const{
    return m_energyprice_isValid;
}

qint32 OAIForecastItem::getEpochtime() const {
    return m_epochtime;
}
void OAIForecastItem::setEpochtime(const qint32 &epochtime) {
    m_epochtime = epochtime;
    m_epochtime_isSet = true;
}

bool OAIForecastItem::is_epochtime_Set() const{
    return m_epochtime_isSet;
}

bool OAIForecastItem::is_epochtime_Valid() const{
    return m_epochtime_isValid;
}

qint32 OAIForecastItem::getGsi() const {
    return m_gsi;
}
void OAIForecastItem::setGsi(const qint32 &gsi) {
    m_gsi = gsi;
    m_gsi_isSet = true;
}

bool OAIForecastItem::is_gsi_Set() const{
    return m_gsi_isSet;
}

bool OAIForecastItem::is_gsi_Valid() const{
    return m_gsi_isValid;
}

bool OAIForecastItem::isScaled() const {
    return m_scaled;
}
void OAIForecastItem::setScaled(const bool &scaled) {
    m_scaled = scaled;
    m_scaled_isSet = true;
}

bool OAIForecastItem::is_scaled_Set() const{
    return m_scaled_isSet;
}

bool OAIForecastItem::is_scaled_Valid() const{
    return m_scaled_isValid;
}

qint32 OAIForecastItem::getSci() const {
    return m_sci;
}
void OAIForecastItem::setSci(const qint32 &sci) {
    m_sci = sci;
    m_sci_isSet = true;
}

bool OAIForecastItem::is_sci_Set() const{
    return m_sci_isSet;
}

bool OAIForecastItem::is_sci_Valid() const{
    return m_sci_isValid;
}

qint32 OAIForecastItem::getTimeStamp() const {
    return m_time_stamp;
}
void OAIForecastItem::setTimeStamp(const qint32 &time_stamp) {
    m_time_stamp = time_stamp;
    m_time_stamp_isSet = true;
}

bool OAIForecastItem::is_time_stamp_Set() const{
    return m_time_stamp_isSet;
}

bool OAIForecastItem::is_time_stamp_Valid() const{
    return m_time_stamp_isValid;
}

bool OAIForecastItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_co2_g_oekostrom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_energyprice_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_epochtime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gsi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scaled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sci_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIForecastItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
