/*
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInnerLabels;
import org.openapitools.client.model.AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInnerValidations;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:41.357707-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  /**
   * Column data type
   */
  @JsonAdapter(DataTypeEnum.Adapter.class)
  public enum DataTypeEnum {
    SELECT("select"),
    
    TEXT("text"),
    
    NUMBER("number"),
    
    BOOLEAN("boolean");

    private String value;

    DataTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataTypeEnum fromValue(String value) {
      for (DataTypeEnum b : DataTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_TYPE = "data_type";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE)
  private DataTypeEnum dataType;

  public static final String SERIALIZED_NAME_IS_REQUIRED_FOR_COMPLETENESS = "is_required_for_completeness";
  @SerializedName(SERIALIZED_NAME_IS_REQUIRED_FOR_COMPLETENESS)
  private Boolean isRequiredForCompleteness = false;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInnerLabels labels;

  public static final String SERIALIZED_NAME_VALIDATIONS = "validations";
  @SerializedName(SERIALIZED_NAME_VALIDATIONS)
  private AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInnerValidations validations;

  public AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner() {
  }

  public AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Column code
   * @return code
   */
  @javax.annotation.Nonnull
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner dataType(DataTypeEnum dataType) {
    this.dataType = dataType;
    return this;
  }

  /**
   * Column data type
   * @return dataType
   */
  @javax.annotation.Nonnull
  public DataTypeEnum getDataType() {
    return dataType;
  }

  public void setDataType(DataTypeEnum dataType) {
    this.dataType = dataType;
  }


  public AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner isRequiredForCompleteness(Boolean isRequiredForCompleteness) {
    this.isRequiredForCompleteness = isRequiredForCompleteness;
    return this;
  }

  /**
   * Defines if the column should be entirely filled for the attribute to be considered complete
   * @return isRequiredForCompleteness
   */
  @javax.annotation.Nullable
  public Boolean getIsRequiredForCompleteness() {
    return isRequiredForCompleteness;
  }

  public void setIsRequiredForCompleteness(Boolean isRequiredForCompleteness) {
    this.isRequiredForCompleteness = isRequiredForCompleteness;
  }


  public AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner labels(AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInnerLabels labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable
  public AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInnerLabels getLabels() {
    return labels;
  }

  public void setLabels(AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInnerLabels labels) {
    this.labels = labels;
  }


  public AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner validations(AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInnerValidations validations) {
    this.validations = validations;
    return this;
  }

  /**
   * Get validations
   * @return validations
   */
  @javax.annotation.Nullable
  public AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInnerValidations getValidations() {
    return validations;
  }

  public void setValidations(AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInnerValidations validations) {
    this.validations = validations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner attributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner = (AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner) o;
    return Objects.equals(this.code, attributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.code) &&
        Objects.equals(this.dataType, attributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.dataType) &&
        Objects.equals(this.isRequiredForCompleteness, attributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.isRequiredForCompleteness) &&
        Objects.equals(this.labels, attributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.labels) &&
        Objects.equals(this.validations, attributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.validations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, dataType, isRequiredForCompleteness, labels, validations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    isRequiredForCompleteness: ").append(toIndentedString(isRequiredForCompleteness)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    validations: ").append(toIndentedString(validations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("data_type");
    openapiFields.add("is_required_for_completeness");
    openapiFields.add("labels");
    openapiFields.add("validations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("data_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner is not found in the empty JSON string", AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if (!jsonObj.get("data_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data_type").toString()));
      }
      // validate the required field `data_type`
      DataTypeEnum.validateJsonElement(jsonObj.get("data_type"));
      // validate the optional field `labels`
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull()) {
        AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInnerLabels.validateJsonElement(jsonObj.get("labels"));
      }
      // validate the optional field `validations`
      if (jsonObj.get("validations") != null && !jsonObj.get("validations").isJsonNull()) {
        AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInnerValidations.validateJsonElement(jsonObj.get("validations"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.class));

       return (TypeAdapter<T>) new TypeAdapter<AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner>() {
           @Override
           public void write(JsonWriter out, AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner
   * @throws IOException if the JSON string is invalid with respect to AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner
   */
  public static AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.class);
  }

  /**
   * Convert an instance of AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

