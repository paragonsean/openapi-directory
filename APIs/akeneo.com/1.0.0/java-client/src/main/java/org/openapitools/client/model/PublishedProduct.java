/*
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PublishedProductsAllOfEmbeddedItemsInnerAllOfAssociations;
import org.openapitools.client.model.PublishedProductsAllOfEmbeddedItemsInnerAllOfValues;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PublishedProduct
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:41.357707-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PublishedProduct {
  public static final String SERIALIZED_NAME_ASSOCIATIONS = "associations";
  @SerializedName(SERIALIZED_NAME_ASSOCIATIONS)
  private PublishedProductsAllOfEmbeddedItemsInnerAllOfAssociations associations;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<String> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled = true;

  public static final String SERIALIZED_NAME_FAMILY = "family";
  @SerializedName(SERIALIZED_NAME_FAMILY)
  private String family = "null";

  public static final String SERIALIZED_NAME_GROUPS = "groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  private List<String> groups = new ArrayList<>();

  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private String identifier;

  public static final String SERIALIZED_NAME_QUANTIFIED_ASSOCIATIONS = "quantified_associations";
  @SerializedName(SERIALIZED_NAME_QUANTIFIED_ASSOCIATIONS)
  private Object quantifiedAssociations;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private PublishedProductsAllOfEmbeddedItemsInnerAllOfValues values;

  public PublishedProduct() {
  }

  public PublishedProduct associations(PublishedProductsAllOfEmbeddedItemsInnerAllOfAssociations associations) {
    this.associations = associations;
    return this;
  }

  /**
   * Get associations
   * @return associations
   */
  @javax.annotation.Nullable
  public PublishedProductsAllOfEmbeddedItemsInnerAllOfAssociations getAssociations() {
    return associations;
  }

  public void setAssociations(PublishedProductsAllOfEmbeddedItemsInnerAllOfAssociations associations) {
    this.associations = associations;
  }


  public PublishedProduct categories(List<String> categories) {
    this.categories = categories;
    return this;
  }

  public PublishedProduct addCategoriesItem(String categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * Codes of the &lt;a href&#x3D;&#39;api-reference.html#Category&#39;&gt;categories&lt;/a&gt; in which the published product is classified
   * @return categories
   */
  @javax.annotation.Nullable
  public List<String> getCategories() {
    return categories;
  }

  public void setCategories(List<String> categories) {
    this.categories = categories;
  }


  public PublishedProduct created(String created) {
    this.created = created;
    return this;
  }

  /**
   * Date of creation
   * @return created
   */
  @javax.annotation.Nullable
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }


  public PublishedProduct enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Whether the published product is enable
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public PublishedProduct family(String family) {
    this.family = family;
    return this;
  }

  /**
   * &lt;a href&#x3D;&#39;api-reference.html#Family&#39;&gt;Family&lt;/a&gt; code from which the published product inherits its attributes and attributes requirements
   * @return family
   */
  @javax.annotation.Nullable
  public String getFamily() {
    return family;
  }

  public void setFamily(String family) {
    this.family = family;
  }


  public PublishedProduct groups(List<String> groups) {
    this.groups = groups;
    return this;
  }

  public PublishedProduct addGroupsItem(String groupsItem) {
    if (this.groups == null) {
      this.groups = new ArrayList<>();
    }
    this.groups.add(groupsItem);
    return this;
  }

  /**
   * Codes of the groups to which the published product belong
   * @return groups
   */
  @javax.annotation.Nullable
  public List<String> getGroups() {
    return groups;
  }

  public void setGroups(List<String> groups) {
    this.groups = groups;
  }


  public PublishedProduct identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

  /**
   * Published product identifier, i.e. the value of the only &#x60;pim_catalog_identifier&#x60; attribute
   * @return identifier
   */
  @javax.annotation.Nonnull
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }


  public PublishedProduct quantifiedAssociations(Object quantifiedAssociations) {
    this.quantifiedAssociations = quantifiedAssociations;
    return this;
  }

  /**
   * Warning: associations with quantities are not compatible with the published products. The response will always be empty.
   * @return quantifiedAssociations
   */
  @javax.annotation.Nullable
  public Object getQuantifiedAssociations() {
    return quantifiedAssociations;
  }

  public void setQuantifiedAssociations(Object quantifiedAssociations) {
    this.quantifiedAssociations = quantifiedAssociations;
  }


  public PublishedProduct updated(String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Date of the last update
   * @return updated
   */
  @javax.annotation.Nullable
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(String updated) {
    this.updated = updated;
  }


  public PublishedProduct values(PublishedProductsAllOfEmbeddedItemsInnerAllOfValues values) {
    this.values = values;
    return this;
  }

  /**
   * Get values
   * @return values
   */
  @javax.annotation.Nullable
  public PublishedProductsAllOfEmbeddedItemsInnerAllOfValues getValues() {
    return values;
  }

  public void setValues(PublishedProductsAllOfEmbeddedItemsInnerAllOfValues values) {
    this.values = values;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublishedProduct publishedProduct = (PublishedProduct) o;
    return Objects.equals(this.associations, publishedProduct.associations) &&
        Objects.equals(this.categories, publishedProduct.categories) &&
        Objects.equals(this.created, publishedProduct.created) &&
        Objects.equals(this.enabled, publishedProduct.enabled) &&
        Objects.equals(this.family, publishedProduct.family) &&
        Objects.equals(this.groups, publishedProduct.groups) &&
        Objects.equals(this.identifier, publishedProduct.identifier) &&
        Objects.equals(this.quantifiedAssociations, publishedProduct.quantifiedAssociations) &&
        Objects.equals(this.updated, publishedProduct.updated) &&
        Objects.equals(this.values, publishedProduct.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(associations, categories, created, enabled, family, groups, identifier, quantifiedAssociations, updated, values);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublishedProduct {\n");
    sb.append("    associations: ").append(toIndentedString(associations)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    family: ").append(toIndentedString(family)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    quantifiedAssociations: ").append(toIndentedString(quantifiedAssociations)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("associations");
    openapiFields.add("categories");
    openapiFields.add("created");
    openapiFields.add("enabled");
    openapiFields.add("family");
    openapiFields.add("groups");
    openapiFields.add("identifier");
    openapiFields.add("quantified_associations");
    openapiFields.add("updated");
    openapiFields.add("values");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("identifier");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PublishedProduct
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PublishedProduct.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PublishedProduct is not found in the empty JSON string", PublishedProduct.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PublishedProduct.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PublishedProduct` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PublishedProduct.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `associations`
      if (jsonObj.get("associations") != null && !jsonObj.get("associations").isJsonNull()) {
        PublishedProductsAllOfEmbeddedItemsInnerAllOfAssociations.validateJsonElement(jsonObj.get("associations"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull() && !jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
      }
      if ((jsonObj.get("created") != null && !jsonObj.get("created").isJsonNull()) && !jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      if ((jsonObj.get("family") != null && !jsonObj.get("family").isJsonNull()) && !jsonObj.get("family").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `family` to be a primitive type in the JSON string but got `%s`", jsonObj.get("family").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("groups") != null && !jsonObj.get("groups").isJsonNull() && !jsonObj.get("groups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `groups` to be an array in the JSON string but got `%s`", jsonObj.get("groups").toString()));
      }
      if (!jsonObj.get("identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifier").toString()));
      }
      if ((jsonObj.get("updated") != null && !jsonObj.get("updated").isJsonNull()) && !jsonObj.get("updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated").toString()));
      }
      // validate the optional field `values`
      if (jsonObj.get("values") != null && !jsonObj.get("values").isJsonNull()) {
        PublishedProductsAllOfEmbeddedItemsInnerAllOfValues.validateJsonElement(jsonObj.get("values"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PublishedProduct.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PublishedProduct' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PublishedProduct> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PublishedProduct.class));

       return (TypeAdapter<T>) new TypeAdapter<PublishedProduct>() {
           @Override
           public void write(JsonWriter out, PublishedProduct value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PublishedProduct read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PublishedProduct given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PublishedProduct
   * @throws IOException if the JSON string is invalid with respect to PublishedProduct
   */
  public static PublishedProduct fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PublishedProduct.class);
  }

  /**
   * Convert an instance of PublishedProduct to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

