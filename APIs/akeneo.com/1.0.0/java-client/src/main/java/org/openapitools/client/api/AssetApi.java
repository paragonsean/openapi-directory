/*
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Asset;
import org.openapitools.client.model.PatchAssets200ResponseInner;
import org.openapitools.client.model.PatchAssetsRequestInner;
import org.openapitools.client.model.PostToken400Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AssetApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AssetApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AssetApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteAssetsCode
     * @param assetFamilyCode Code of the asset family (required)
     * @param code Code of the resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content to return </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAssetsCodeCall(String assetFamilyCode, String code, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/asset-families/{asset_family_code}/assets/{code}"
            .replace("{" + "asset_family_code" + "}", localVarApiClient.escapeString(assetFamilyCode.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "code",
            "message"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAssetsCodeValidateBeforeCall(String assetFamilyCode, String code, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetFamilyCode' is set
        if (assetFamilyCode == null) {
            throw new ApiException("Missing the required parameter 'assetFamilyCode' when calling deleteAssetsCode(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deleteAssetsCode(Async)");
        }

        return deleteAssetsCodeCall(assetFamilyCode, code, _callback);

    }

    /**
     * Delete an asset
     * This endpoint allows you to delete a given asset. This endpoint is case sensitive on the asset family code.
     * @param assetFamilyCode Code of the asset family (required)
     * @param code Code of the resource (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content to return </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAssetsCode(String assetFamilyCode, String code) throws ApiException {
        deleteAssetsCodeWithHttpInfo(assetFamilyCode, code);
    }

    /**
     * Delete an asset
     * This endpoint allows you to delete a given asset. This endpoint is case sensitive on the asset family code.
     * @param assetFamilyCode Code of the asset family (required)
     * @param code Code of the resource (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content to return </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAssetsCodeWithHttpInfo(String assetFamilyCode, String code) throws ApiException {
        okhttp3.Call localVarCall = deleteAssetsCodeValidateBeforeCall(assetFamilyCode, code, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an asset (asynchronously)
     * This endpoint allows you to delete a given asset. This endpoint is case sensitive on the asset family code.
     * @param assetFamilyCode Code of the asset family (required)
     * @param code Code of the resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content to return </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAssetsCodeAsync(String assetFamilyCode, String code, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAssetsCodeValidateBeforeCall(assetFamilyCode, code, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAssets
     * @param assetFamilyCode Code of the asset family (required)
     * @param search Filter assets, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-assets\&quot;&gt;Asset filters&lt;/a&gt; section (optional)
     * @param channel Filter asset values to return scopable asset attributes for the given channel as well as the non localizable/non scopable asset attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#asset-values-by-channel\&quot;&gt;Filter asset values by channel&lt;/a&gt; section (optional)
     * @param locales Filter asset values to return localizable attributes for the given locales as well as the non localizable/non scopable asset attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#asset-values-by-locale\&quot;&gt;Filter asset values by locale&lt;/a&gt; section (optional)
     * @param searchAfter Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section (optional, default to cursor to the first page)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return the assets of the given asset family paginated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssetsCall(String assetFamilyCode, String search, String channel, String locales, String searchAfter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/asset-families/{asset_family_code}/assets"
            .replace("{" + "asset_family_code" + "}", localVarApiClient.escapeString(assetFamilyCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        if (locales != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locales", locales));
        }

        if (searchAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_after", searchAfter));
        }

        final String[] localVarAccepts = {
            "application/json",
            "_embedded",
            "_links",
            "code",
            "message"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssetsValidateBeforeCall(String assetFamilyCode, String search, String channel, String locales, String searchAfter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetFamilyCode' is set
        if (assetFamilyCode == null) {
            throw new ApiException("Missing the required parameter 'assetFamilyCode' when calling getAssets(Async)");
        }

        return getAssetsCall(assetFamilyCode, search, channel, locales, searchAfter, _callback);

    }

    /**
     * Get the list of the assets of a given asset family
     * This endpoint allows you to get a list of assets of a given asset family. Assets are paginated. This endpoint is case sensitive on the asset family code.
     * @param assetFamilyCode Code of the asset family (required)
     * @param search Filter assets, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-assets\&quot;&gt;Asset filters&lt;/a&gt; section (optional)
     * @param channel Filter asset values to return scopable asset attributes for the given channel as well as the non localizable/non scopable asset attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#asset-values-by-channel\&quot;&gt;Filter asset values by channel&lt;/a&gt; section (optional)
     * @param locales Filter asset values to return localizable attributes for the given locales as well as the non localizable/non scopable asset attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#asset-values-by-locale\&quot;&gt;Filter asset values by locale&lt;/a&gt; section (optional)
     * @param searchAfter Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section (optional, default to cursor to the first page)
     * @return Asset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return the assets of the given asset family paginated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public Asset getAssets(String assetFamilyCode, String search, String channel, String locales, String searchAfter) throws ApiException {
        ApiResponse<Asset> localVarResp = getAssetsWithHttpInfo(assetFamilyCode, search, channel, locales, searchAfter);
        return localVarResp.getData();
    }

    /**
     * Get the list of the assets of a given asset family
     * This endpoint allows you to get a list of assets of a given asset family. Assets are paginated. This endpoint is case sensitive on the asset family code.
     * @param assetFamilyCode Code of the asset family (required)
     * @param search Filter assets, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-assets\&quot;&gt;Asset filters&lt;/a&gt; section (optional)
     * @param channel Filter asset values to return scopable asset attributes for the given channel as well as the non localizable/non scopable asset attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#asset-values-by-channel\&quot;&gt;Filter asset values by channel&lt;/a&gt; section (optional)
     * @param locales Filter asset values to return localizable attributes for the given locales as well as the non localizable/non scopable asset attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#asset-values-by-locale\&quot;&gt;Filter asset values by locale&lt;/a&gt; section (optional)
     * @param searchAfter Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section (optional, default to cursor to the first page)
     * @return ApiResponse&lt;Asset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return the assets of the given asset family paginated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Asset> getAssetsWithHttpInfo(String assetFamilyCode, String search, String channel, String locales, String searchAfter) throws ApiException {
        okhttp3.Call localVarCall = getAssetsValidateBeforeCall(assetFamilyCode, search, channel, locales, searchAfter, null);
        Type localVarReturnType = new TypeToken<Asset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of the assets of a given asset family (asynchronously)
     * This endpoint allows you to get a list of assets of a given asset family. Assets are paginated. This endpoint is case sensitive on the asset family code.
     * @param assetFamilyCode Code of the asset family (required)
     * @param search Filter assets, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#filter-assets\&quot;&gt;Asset filters&lt;/a&gt; section (optional)
     * @param channel Filter asset values to return scopable asset attributes for the given channel as well as the non localizable/non scopable asset attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#asset-values-by-channel\&quot;&gt;Filter asset values by channel&lt;/a&gt; section (optional)
     * @param locales Filter asset values to return localizable attributes for the given locales as well as the non localizable/non scopable asset attributes, for more details see the &lt;a href&#x3D;\&quot;/documentation/filter.html#asset-values-by-locale\&quot;&gt;Filter asset values by locale&lt;/a&gt; section (optional)
     * @param searchAfter Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section (optional, default to cursor to the first page)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return the assets of the given asset family paginated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssetsAsync(String assetFamilyCode, String search, String channel, String locales, String searchAfter, final ApiCallback<Asset> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssetsValidateBeforeCall(assetFamilyCode, search, channel, locales, searchAfter, _callback);
        Type localVarReturnType = new TypeToken<Asset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAssetsCode
     * @param assetFamilyCode Code of the asset family (required)
     * @param code Code of the resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssetsCodeCall(String assetFamilyCode, String code, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/asset-families/{asset_family_code}/assets/{code}"
            .replace("{" + "asset_family_code" + "}", localVarApiClient.escapeString(assetFamilyCode.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "code",
            "message"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssetsCodeValidateBeforeCall(String assetFamilyCode, String code, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetFamilyCode' is set
        if (assetFamilyCode == null) {
            throw new ApiException("Missing the required parameter 'assetFamilyCode' when calling getAssetsCode(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getAssetsCode(Async)");
        }

        return getAssetsCodeCall(assetFamilyCode, code, _callback);

    }

    /**
     * Get an asset of a given asset family
     * This endpoint allows you to get the information about a given asset for a given asset family. This endpoint is case sensitive on the asset family code.
     * @param assetFamilyCode Code of the asset family (required)
     * @param code Code of the resource (required)
     * @return PatchAssetsRequestInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public PatchAssetsRequestInner getAssetsCode(String assetFamilyCode, String code) throws ApiException {
        ApiResponse<PatchAssetsRequestInner> localVarResp = getAssetsCodeWithHttpInfo(assetFamilyCode, code);
        return localVarResp.getData();
    }

    /**
     * Get an asset of a given asset family
     * This endpoint allows you to get the information about a given asset for a given asset family. This endpoint is case sensitive on the asset family code.
     * @param assetFamilyCode Code of the asset family (required)
     * @param code Code of the resource (required)
     * @return ApiResponse&lt;PatchAssetsRequestInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PatchAssetsRequestInner> getAssetsCodeWithHttpInfo(String assetFamilyCode, String code) throws ApiException {
        okhttp3.Call localVarCall = getAssetsCodeValidateBeforeCall(assetFamilyCode, code, null);
        Type localVarReturnType = new TypeToken<PatchAssetsRequestInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an asset of a given asset family (asynchronously)
     * This endpoint allows you to get the information about a given asset for a given asset family. This endpoint is case sensitive on the asset family code.
     * @param assetFamilyCode Code of the asset family (required)
     * @param code Code of the resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssetsCodeAsync(String assetFamilyCode, String code, final ApiCallback<PatchAssetsRequestInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssetsCodeValidateBeforeCall(assetFamilyCode, code, _callback);
        Type localVarReturnType = new TypeToken<PatchAssetsRequestInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchAssetCode
     * @param assetFamilyCode Code of the asset family (required)
     * @param code Code of the resource (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Location - URI of the created resource <br>  </td></tr>
        <tr><td> 204 </td><td> No content to return </td><td>  * Location - URI of the created resource <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media type </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchAssetCodeCall(String assetFamilyCode, String code, PatchAssetsRequestInner body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/rest/v1/asset-families/{asset_family_code}/assets/{code}"
            .replace("{" + "asset_family_code" + "}", localVarApiClient.escapeString(assetFamilyCode.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "code",
            "message",
            "_links"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchAssetCodeValidateBeforeCall(String assetFamilyCode, String code, PatchAssetsRequestInner body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetFamilyCode' is set
        if (assetFamilyCode == null) {
            throw new ApiException("Missing the required parameter 'assetFamilyCode' when calling patchAssetCode(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling patchAssetCode(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling patchAssetCode(Async)");
        }

        return patchAssetCodeCall(assetFamilyCode, code, body, _callback);

    }

    /**
     * Update/create an asset
     * This endpoint allows you to update a given asset of a given asset family. Learn more about the &lt;a href&#x3D;\&quot;/documentation/update.html#patch-asset-attribute-values\&quot;&gt;Update behavior&lt;/a&gt;. Note that if the asset does not already exist for the given asset family, it creates it. This endpoint is case sensitive on the asset family code.
     * @param assetFamilyCode Code of the asset family (required)
     * @param code Code of the resource (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Location - URI of the created resource <br>  </td></tr>
        <tr><td> 204 </td><td> No content to return </td><td>  * Location - URI of the created resource <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media type </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public void patchAssetCode(String assetFamilyCode, String code, PatchAssetsRequestInner body) throws ApiException {
        patchAssetCodeWithHttpInfo(assetFamilyCode, code, body);
    }

    /**
     * Update/create an asset
     * This endpoint allows you to update a given asset of a given asset family. Learn more about the &lt;a href&#x3D;\&quot;/documentation/update.html#patch-asset-attribute-values\&quot;&gt;Update behavior&lt;/a&gt;. Note that if the asset does not already exist for the given asset family, it creates it. This endpoint is case sensitive on the asset family code.
     * @param assetFamilyCode Code of the asset family (required)
     * @param code Code of the resource (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Location - URI of the created resource <br>  </td></tr>
        <tr><td> 204 </td><td> No content to return </td><td>  * Location - URI of the created resource <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media type </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> patchAssetCodeWithHttpInfo(String assetFamilyCode, String code, PatchAssetsRequestInner body) throws ApiException {
        okhttp3.Call localVarCall = patchAssetCodeValidateBeforeCall(assetFamilyCode, code, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update/create an asset (asynchronously)
     * This endpoint allows you to update a given asset of a given asset family. Learn more about the &lt;a href&#x3D;\&quot;/documentation/update.html#patch-asset-attribute-values\&quot;&gt;Update behavior&lt;/a&gt;. Note that if the asset does not already exist for the given asset family, it creates it. This endpoint is case sensitive on the asset family code.
     * @param assetFamilyCode Code of the asset family (required)
     * @param code Code of the resource (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Location - URI of the created resource <br>  </td></tr>
        <tr><td> 204 </td><td> No content to return </td><td>  * Location - URI of the created resource <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media type </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchAssetCodeAsync(String assetFamilyCode, String code, PatchAssetsRequestInner body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchAssetCodeValidateBeforeCall(assetFamilyCode, code, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchAssets
     * @param assetFamilyCode Code of the asset family (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Request Entity Too Large </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media type </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchAssetsCall(String assetFamilyCode, List<PatchAssetsRequestInner> body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/rest/v1/asset-families/{asset_family_code}/assets"
            .replace("{" + "asset_family_code" + "}", localVarApiClient.escapeString(assetFamilyCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "code",
            "message"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchAssetsValidateBeforeCall(String assetFamilyCode, List<PatchAssetsRequestInner> body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetFamilyCode' is set
        if (assetFamilyCode == null) {
            throw new ApiException("Missing the required parameter 'assetFamilyCode' when calling patchAssets(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling patchAssets(Async)");
        }

        return patchAssetsCall(assetFamilyCode, body, _callback);

    }

    /**
     * Update/create several assets
     * This endpoint allows you to update and/or create several assets of one given asset family at once. Learn more about the &lt;a href&#x3D;\&quot;/documentation/update.html#patch-asset-attribute-values\&quot;&gt;Update behavior&lt;/a&gt;. Note that if the asset does not already exist for the given asset family, it creates it. This endpoint is case sensitive on the asset family code.
     * @param assetFamilyCode Code of the asset family (required)
     * @param body  (required)
     * @return List&lt;PatchAssets200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Request Entity Too Large </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media type </td><td>  -  </td></tr>
     </table>
     */
    public List<PatchAssets200ResponseInner> patchAssets(String assetFamilyCode, List<PatchAssetsRequestInner> body) throws ApiException {
        ApiResponse<List<PatchAssets200ResponseInner>> localVarResp = patchAssetsWithHttpInfo(assetFamilyCode, body);
        return localVarResp.getData();
    }

    /**
     * Update/create several assets
     * This endpoint allows you to update and/or create several assets of one given asset family at once. Learn more about the &lt;a href&#x3D;\&quot;/documentation/update.html#patch-asset-attribute-values\&quot;&gt;Update behavior&lt;/a&gt;. Note that if the asset does not already exist for the given asset family, it creates it. This endpoint is case sensitive on the asset family code.
     * @param assetFamilyCode Code of the asset family (required)
     * @param body  (required)
     * @return ApiResponse&lt;List&lt;PatchAssets200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Request Entity Too Large </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media type </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PatchAssets200ResponseInner>> patchAssetsWithHttpInfo(String assetFamilyCode, List<PatchAssetsRequestInner> body) throws ApiException {
        okhttp3.Call localVarCall = patchAssetsValidateBeforeCall(assetFamilyCode, body, null);
        Type localVarReturnType = new TypeToken<List<PatchAssets200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update/create several assets (asynchronously)
     * This endpoint allows you to update and/or create several assets of one given asset family at once. Learn more about the &lt;a href&#x3D;\&quot;/documentation/update.html#patch-asset-attribute-values\&quot;&gt;Update behavior&lt;/a&gt;. Note that if the asset does not already exist for the given asset family, it creates it. This endpoint is case sensitive on the asset family code.
     * @param assetFamilyCode Code of the asset family (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Request Entity Too Large </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media type </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchAssetsAsync(String assetFamilyCode, List<PatchAssetsRequestInner> body, final ApiCallback<List<PatchAssets200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchAssetsValidateBeforeCall(assetFamilyCode, body, _callback);
        Type localVarReturnType = new TypeToken<List<PatchAssets200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
