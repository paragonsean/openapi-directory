/*
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import org.openapitools.client.model.PostToken400Response;
import org.openapitools.client.model.ProductUuids;
import org.openapitools.client.model.Products;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CatalogProductsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CatalogProductsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CatalogProductsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAppCatalogMappedProducts
     * @param id Catalog ID (required)
     * @param searchAfter Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section (optional, default to cursor to the first page)
     * @param limit Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section (optional, default to 100)
     * @param updatedBefore Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints) (optional)
     * @param updatedAfter Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return the paginated **mapped** products </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Catalog not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAppCatalogMappedProductsCall(UUID id, String searchAfter, Integer limit, LocalDate updatedBefore, LocalDate updatedAfter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/catalogs/{id}/mapped-products"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (searchAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_after", searchAfter));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (updatedBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated_before", updatedBefore));
        }

        if (updatedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated_after", updatedAfter));
        }

        final String[] localVarAccepts = {
            "application/json",
            "code",
            "message"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAppCatalogMappedProductsValidateBeforeCall(UUID id, String searchAfter, Integer limit, LocalDate updatedBefore, LocalDate updatedAfter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAppCatalogMappedProducts(Async)");
        }

        return getAppCatalogMappedProductsCall(id, searchAfter, limit, updatedBefore, updatedAfter, _callback);

    }

    /**
     * Get the list of mapped products related to a catalog
     * This endpoint allows you to get the list of products related to a catalog when the mapping is enabled. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the &lt;a href&#x3D;\&quot;apps/catalogs.html#troubleshooting\&quot;&gt;App Catalog&lt;/a&gt; section.
     * @param id Catalog ID (required)
     * @param searchAfter Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section (optional, default to cursor to the first page)
     * @param limit Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section (optional, default to 100)
     * @param updatedBefore Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints) (optional)
     * @param updatedAfter Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints) (optional)
     * @return Products
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return the paginated **mapped** products </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Catalog not found </td><td>  -  </td></tr>
     </table>
     */
    public Products getAppCatalogMappedProducts(UUID id, String searchAfter, Integer limit, LocalDate updatedBefore, LocalDate updatedAfter) throws ApiException {
        ApiResponse<Products> localVarResp = getAppCatalogMappedProductsWithHttpInfo(id, searchAfter, limit, updatedBefore, updatedAfter);
        return localVarResp.getData();
    }

    /**
     * Get the list of mapped products related to a catalog
     * This endpoint allows you to get the list of products related to a catalog when the mapping is enabled. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the &lt;a href&#x3D;\&quot;apps/catalogs.html#troubleshooting\&quot;&gt;App Catalog&lt;/a&gt; section.
     * @param id Catalog ID (required)
     * @param searchAfter Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section (optional, default to cursor to the first page)
     * @param limit Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section (optional, default to 100)
     * @param updatedBefore Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints) (optional)
     * @param updatedAfter Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints) (optional)
     * @return ApiResponse&lt;Products&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return the paginated **mapped** products </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Catalog not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Products> getAppCatalogMappedProductsWithHttpInfo(UUID id, String searchAfter, Integer limit, LocalDate updatedBefore, LocalDate updatedAfter) throws ApiException {
        okhttp3.Call localVarCall = getAppCatalogMappedProductsValidateBeforeCall(id, searchAfter, limit, updatedBefore, updatedAfter, null);
        Type localVarReturnType = new TypeToken<Products>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of mapped products related to a catalog (asynchronously)
     * This endpoint allows you to get the list of products related to a catalog when the mapping is enabled. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the &lt;a href&#x3D;\&quot;apps/catalogs.html#troubleshooting\&quot;&gt;App Catalog&lt;/a&gt; section.
     * @param id Catalog ID (required)
     * @param searchAfter Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section (optional, default to cursor to the first page)
     * @param limit Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section (optional, default to 100)
     * @param updatedBefore Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints) (optional)
     * @param updatedAfter Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return the paginated **mapped** products </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Catalog not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAppCatalogMappedProductsAsync(UUID id, String searchAfter, Integer limit, LocalDate updatedBefore, LocalDate updatedAfter, final ApiCallback<Products> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAppCatalogMappedProductsValidateBeforeCall(id, searchAfter, limit, updatedBefore, updatedAfter, _callback);
        Type localVarReturnType = new TypeToken<Products>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAppCatalogProductUuids
     * @param id Id of the catalog (required)
     * @param searchAfter Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section (optional, default to cursor to the first page)
     * @param limit Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section (optional, default to 100)
     * @param updatedBefore Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints) (optional)
     * @param updatedAfter Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return the paginated product uuids </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Catalog not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAppCatalogProductUuidsCall(UUID id, String searchAfter, Integer limit, LocalDate updatedBefore, LocalDate updatedAfter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/catalogs/{id}/product-uuids"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (searchAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_after", searchAfter));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (updatedBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated_before", updatedBefore));
        }

        if (updatedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated_after", updatedAfter));
        }

        final String[] localVarAccepts = {
            "application/json",
            "code",
            "message"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAppCatalogProductUuidsValidateBeforeCall(UUID id, String searchAfter, Integer limit, LocalDate updatedBefore, LocalDate updatedAfter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAppCatalogProductUuids(Async)");
        }

        return getAppCatalogProductUuidsCall(id, searchAfter, limit, updatedBefore, updatedAfter, _callback);

    }

    /**
     * Get the list of product uuids
     * This endpoint allows you to get the list of uuids of products contained in a catalog. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the &lt;a href&#x3D;\&quot;apps/catalogs.html#troubleshooting\&quot;&gt;App Catalog&lt;/a&gt; section.
     * @param id Id of the catalog (required)
     * @param searchAfter Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section (optional, default to cursor to the first page)
     * @param limit Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section (optional, default to 100)
     * @param updatedBefore Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints) (optional)
     * @param updatedAfter Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints) (optional)
     * @return ProductUuids
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return the paginated product uuids </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Catalog not found </td><td>  -  </td></tr>
     </table>
     */
    public ProductUuids getAppCatalogProductUuids(UUID id, String searchAfter, Integer limit, LocalDate updatedBefore, LocalDate updatedAfter) throws ApiException {
        ApiResponse<ProductUuids> localVarResp = getAppCatalogProductUuidsWithHttpInfo(id, searchAfter, limit, updatedBefore, updatedAfter);
        return localVarResp.getData();
    }

    /**
     * Get the list of product uuids
     * This endpoint allows you to get the list of uuids of products contained in a catalog. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the &lt;a href&#x3D;\&quot;apps/catalogs.html#troubleshooting\&quot;&gt;App Catalog&lt;/a&gt; section.
     * @param id Id of the catalog (required)
     * @param searchAfter Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section (optional, default to cursor to the first page)
     * @param limit Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section (optional, default to 100)
     * @param updatedBefore Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints) (optional)
     * @param updatedAfter Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints) (optional)
     * @return ApiResponse&lt;ProductUuids&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return the paginated product uuids </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Catalog not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductUuids> getAppCatalogProductUuidsWithHttpInfo(UUID id, String searchAfter, Integer limit, LocalDate updatedBefore, LocalDate updatedAfter) throws ApiException {
        okhttp3.Call localVarCall = getAppCatalogProductUuidsValidateBeforeCall(id, searchAfter, limit, updatedBefore, updatedAfter, null);
        Type localVarReturnType = new TypeToken<ProductUuids>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of product uuids (asynchronously)
     * This endpoint allows you to get the list of uuids of products contained in a catalog. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the &lt;a href&#x3D;\&quot;apps/catalogs.html#troubleshooting\&quot;&gt;App Catalog&lt;/a&gt; section.
     * @param id Id of the catalog (required)
     * @param searchAfter Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section (optional, default to cursor to the first page)
     * @param limit Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section (optional, default to 100)
     * @param updatedBefore Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints) (optional)
     * @param updatedAfter Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return the paginated product uuids </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Catalog not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAppCatalogProductUuidsAsync(UUID id, String searchAfter, Integer limit, LocalDate updatedBefore, LocalDate updatedAfter, final ApiCallback<ProductUuids> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAppCatalogProductUuidsValidateBeforeCall(id, searchAfter, limit, updatedBefore, updatedAfter, _callback);
        Type localVarReturnType = new TypeToken<ProductUuids>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAppCatalogProducts
     * @param id Catalog ID (required)
     * @param searchAfter Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section (optional, default to cursor to the first page)
     * @param limit Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section (optional, default to 100)
     * @param updatedBefore Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints) (optional)
     * @param updatedAfter Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return the paginated products </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Catalog not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAppCatalogProductsCall(UUID id, String searchAfter, Integer limit, LocalDate updatedBefore, LocalDate updatedAfter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/catalogs/{id}/products"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (searchAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_after", searchAfter));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (updatedBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated_before", updatedBefore));
        }

        if (updatedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated_after", updatedAfter));
        }

        final String[] localVarAccepts = {
            "application/json",
            "code",
            "message"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAppCatalogProductsValidateBeforeCall(UUID id, String searchAfter, Integer limit, LocalDate updatedBefore, LocalDate updatedAfter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAppCatalogProducts(Async)");
        }

        return getAppCatalogProductsCall(id, searchAfter, limit, updatedBefore, updatedAfter, _callback);

    }

    /**
     * Get the list of products related to a catalog
     * This endpoint allows you to get the list of products related to a catalog. Products are paginated and they can be filtered. In the Enterprise Edition, permissions based on your app settings are applied to the set of products you request. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the &lt;a href&#x3D;\&quot;apps/catalogs.html#troubleshooting\&quot;&gt;App Catalog&lt;/a&gt; section.
     * @param id Catalog ID (required)
     * @param searchAfter Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section (optional, default to cursor to the first page)
     * @param limit Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section (optional, default to 100)
     * @param updatedBefore Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints) (optional)
     * @param updatedAfter Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints) (optional)
     * @return Products
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return the paginated products </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Catalog not found </td><td>  -  </td></tr>
     </table>
     */
    public Products getAppCatalogProducts(UUID id, String searchAfter, Integer limit, LocalDate updatedBefore, LocalDate updatedAfter) throws ApiException {
        ApiResponse<Products> localVarResp = getAppCatalogProductsWithHttpInfo(id, searchAfter, limit, updatedBefore, updatedAfter);
        return localVarResp.getData();
    }

    /**
     * Get the list of products related to a catalog
     * This endpoint allows you to get the list of products related to a catalog. Products are paginated and they can be filtered. In the Enterprise Edition, permissions based on your app settings are applied to the set of products you request. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the &lt;a href&#x3D;\&quot;apps/catalogs.html#troubleshooting\&quot;&gt;App Catalog&lt;/a&gt; section.
     * @param id Catalog ID (required)
     * @param searchAfter Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section (optional, default to cursor to the first page)
     * @param limit Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section (optional, default to 100)
     * @param updatedBefore Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints) (optional)
     * @param updatedAfter Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints) (optional)
     * @return ApiResponse&lt;Products&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return the paginated products </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Catalog not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Products> getAppCatalogProductsWithHttpInfo(UUID id, String searchAfter, Integer limit, LocalDate updatedBefore, LocalDate updatedAfter) throws ApiException {
        okhttp3.Call localVarCall = getAppCatalogProductsValidateBeforeCall(id, searchAfter, limit, updatedBefore, updatedAfter, null);
        Type localVarReturnType = new TypeToken<Products>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of products related to a catalog (asynchronously)
     * This endpoint allows you to get the list of products related to a catalog. Products are paginated and they can be filtered. In the Enterprise Edition, permissions based on your app settings are applied to the set of products you request. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the &lt;a href&#x3D;\&quot;apps/catalogs.html#troubleshooting\&quot;&gt;App Catalog&lt;/a&gt; section.
     * @param id Catalog ID (required)
     * @param searchAfter Cursor when using the &#x60;search_after&#x60; pagination method type. &lt;strong&gt;Should never be set manually&lt;/strong&gt;, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section (optional, default to cursor to the first page)
     * @param limit Number of results by page, see &lt;a href&#x3D;\&quot;/documentation/pagination.html\&quot;&gt;Pagination&lt;/a&gt; section (optional, default to 100)
     * @param updatedBefore Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints) (optional)
     * @param updatedAfter Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return the paginated products </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Catalog not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAppCatalogProductsAsync(UUID id, String searchAfter, Integer limit, LocalDate updatedBefore, LocalDate updatedAfter, final ApiCallback<Products> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAppCatalogProductsValidateBeforeCall(id, searchAfter, limit, updatedBefore, updatedAfter, _callback);
        Type localVarReturnType = new TypeToken<Products>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAppCatalogProductsUuid
     * @param id Catalog ID (required)
     * @param uuid Product UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return the product </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Catalog not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAppCatalogProductsUuidCall(UUID id, UUID uuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/catalogs/{id}/products/{uuid}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "code",
            "message"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAppCatalogProductsUuidValidateBeforeCall(UUID id, UUID uuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAppCatalogProductsUuid(Async)");
        }

        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getAppCatalogProductsUuid(Async)");
        }

        return getAppCatalogProductsUuidCall(id, uuid, _callback);

    }

    /**
     * Get a product related to a catalog
     * This endpoint allows you to get a specific product related to a catalog. In the Enterprise Edition, permissions based on your app settings are applied on the product you request. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the &lt;a href&#x3D;\&quot;apps/catalogs.html#troubleshooting\&quot;&gt;App Catalog&lt;/a&gt; section.
     * @param id Catalog ID (required)
     * @param uuid Product UUID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return the product </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Catalog not found </td><td>  -  </td></tr>
     </table>
     */
    public void getAppCatalogProductsUuid(UUID id, UUID uuid) throws ApiException {
        getAppCatalogProductsUuidWithHttpInfo(id, uuid);
    }

    /**
     * Get a product related to a catalog
     * This endpoint allows you to get a specific product related to a catalog. In the Enterprise Edition, permissions based on your app settings are applied on the product you request. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the &lt;a href&#x3D;\&quot;apps/catalogs.html#troubleshooting\&quot;&gt;App Catalog&lt;/a&gt; section.
     * @param id Catalog ID (required)
     * @param uuid Product UUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return the product </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Catalog not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getAppCatalogProductsUuidWithHttpInfo(UUID id, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = getAppCatalogProductsUuidValidateBeforeCall(id, uuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get a product related to a catalog (asynchronously)
     * This endpoint allows you to get a specific product related to a catalog. In the Enterprise Edition, permissions based on your app settings are applied on the product you request. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the &lt;a href&#x3D;\&quot;apps/catalogs.html#troubleshooting\&quot;&gt;App Catalog&lt;/a&gt; section.
     * @param id Catalog ID (required)
     * @param uuid Product UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return the product </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Catalog not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAppCatalogProductsUuidAsync(UUID id, UUID uuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAppCatalogProductsUuidValidateBeforeCall(id, uuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
