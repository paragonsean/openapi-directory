/*
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MeasurementFamiliesGetList200ResponseUnitsUnitCodeConvertFromStandardInner;
import org.openapitools.client.model.MeasurementFamiliesGetList200ResponseUnitsUnitCodeLabels;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MeasurementFamiliesGetList200ResponseUnitsUnitCode
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:41.357707-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MeasurementFamiliesGetList200ResponseUnitsUnitCode {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_CONVERT_FROM_STANDARD = "convert_from_standard";
  @SerializedName(SERIALIZED_NAME_CONVERT_FROM_STANDARD)
  private List<MeasurementFamiliesGetList200ResponseUnitsUnitCodeConvertFromStandardInner> convertFromStandard = new ArrayList<>();

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private MeasurementFamiliesGetList200ResponseUnitsUnitCodeLabels labels;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private String symbol;

  public MeasurementFamiliesGetList200ResponseUnitsUnitCode() {
  }

  public MeasurementFamiliesGetList200ResponseUnitsUnitCode code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Measurement unit code. More details &lt;a href&#x3D;&#39;/concepts/target-market-settings.html#focus-on-the-units&#39;&gt;here&lt;/a&gt;.
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public MeasurementFamiliesGetList200ResponseUnitsUnitCode convertFromStandard(List<MeasurementFamiliesGetList200ResponseUnitsUnitCodeConvertFromStandardInner> convertFromStandard) {
    this.convertFromStandard = convertFromStandard;
    return this;
  }

  public MeasurementFamiliesGetList200ResponseUnitsUnitCode addConvertFromStandardItem(MeasurementFamiliesGetList200ResponseUnitsUnitCodeConvertFromStandardInner convertFromStandardItem) {
    if (this.convertFromStandard == null) {
      this.convertFromStandard = new ArrayList<>();
    }
    this.convertFromStandard.add(convertFromStandardItem);
    return this;
  }

  /**
   * Calculation to convert the unit from the standard unit. More details &lt;a href&#x3D;&#39;/concepts/target-market-settings.html#focus-on-the-units&#39;&gt;here&lt;/a&gt;.
   * @return convertFromStandard
   */
  @javax.annotation.Nullable
  public List<MeasurementFamiliesGetList200ResponseUnitsUnitCodeConvertFromStandardInner> getConvertFromStandard() {
    return convertFromStandard;
  }

  public void setConvertFromStandard(List<MeasurementFamiliesGetList200ResponseUnitsUnitCodeConvertFromStandardInner> convertFromStandard) {
    this.convertFromStandard = convertFromStandard;
  }


  public MeasurementFamiliesGetList200ResponseUnitsUnitCode labels(MeasurementFamiliesGetList200ResponseUnitsUnitCodeLabels labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable
  public MeasurementFamiliesGetList200ResponseUnitsUnitCodeLabels getLabels() {
    return labels;
  }

  public void setLabels(MeasurementFamiliesGetList200ResponseUnitsUnitCodeLabels labels) {
    this.labels = labels;
  }


  public MeasurementFamiliesGetList200ResponseUnitsUnitCode symbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

  /**
   * Measurement unit symbol. More details &lt;a href&#x3D;&#39;/concepts/target-market-settings.html#focus-on-the-units&#39;&gt;here&lt;/a&gt;.
   * @return symbol
   */
  @javax.annotation.Nullable
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MeasurementFamiliesGetList200ResponseUnitsUnitCode measurementFamiliesGetList200ResponseUnitsUnitCode = (MeasurementFamiliesGetList200ResponseUnitsUnitCode) o;
    return Objects.equals(this.code, measurementFamiliesGetList200ResponseUnitsUnitCode.code) &&
        Objects.equals(this.convertFromStandard, measurementFamiliesGetList200ResponseUnitsUnitCode.convertFromStandard) &&
        Objects.equals(this.labels, measurementFamiliesGetList200ResponseUnitsUnitCode.labels) &&
        Objects.equals(this.symbol, measurementFamiliesGetList200ResponseUnitsUnitCode.symbol);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, convertFromStandard, labels, symbol);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MeasurementFamiliesGetList200ResponseUnitsUnitCode {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    convertFromStandard: ").append(toIndentedString(convertFromStandard)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("convert_from_standard");
    openapiFields.add("labels");
    openapiFields.add("symbol");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MeasurementFamiliesGetList200ResponseUnitsUnitCode
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MeasurementFamiliesGetList200ResponseUnitsUnitCode.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MeasurementFamiliesGetList200ResponseUnitsUnitCode is not found in the empty JSON string", MeasurementFamiliesGetList200ResponseUnitsUnitCode.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MeasurementFamiliesGetList200ResponseUnitsUnitCode.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MeasurementFamiliesGetList200ResponseUnitsUnitCode` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if (jsonObj.get("convert_from_standard") != null && !jsonObj.get("convert_from_standard").isJsonNull()) {
        JsonArray jsonArrayconvertFromStandard = jsonObj.getAsJsonArray("convert_from_standard");
        if (jsonArrayconvertFromStandard != null) {
          // ensure the json data is an array
          if (!jsonObj.get("convert_from_standard").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `convert_from_standard` to be an array in the JSON string but got `%s`", jsonObj.get("convert_from_standard").toString()));
          }

          // validate the optional field `convert_from_standard` (array)
          for (int i = 0; i < jsonArrayconvertFromStandard.size(); i++) {
            MeasurementFamiliesGetList200ResponseUnitsUnitCodeConvertFromStandardInner.validateJsonElement(jsonArrayconvertFromStandard.get(i));
          };
        }
      }
      // validate the optional field `labels`
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull()) {
        MeasurementFamiliesGetList200ResponseUnitsUnitCodeLabels.validateJsonElement(jsonObj.get("labels"));
      }
      if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull()) && !jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MeasurementFamiliesGetList200ResponseUnitsUnitCode.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MeasurementFamiliesGetList200ResponseUnitsUnitCode' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MeasurementFamiliesGetList200ResponseUnitsUnitCode> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MeasurementFamiliesGetList200ResponseUnitsUnitCode.class));

       return (TypeAdapter<T>) new TypeAdapter<MeasurementFamiliesGetList200ResponseUnitsUnitCode>() {
           @Override
           public void write(JsonWriter out, MeasurementFamiliesGetList200ResponseUnitsUnitCode value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MeasurementFamiliesGetList200ResponseUnitsUnitCode read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MeasurementFamiliesGetList200ResponseUnitsUnitCode given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MeasurementFamiliesGetList200ResponseUnitsUnitCode
   * @throws IOException if the JSON string is invalid with respect to MeasurementFamiliesGetList200ResponseUnitsUnitCode
   */
  public static MeasurementFamiliesGetList200ResponseUnitsUnitCode fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MeasurementFamiliesGetList200ResponseUnitsUnitCode.class);
  }

  /**
   * Convert an instance of MeasurementFamiliesGetList200ResponseUnitsUnitCode to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

