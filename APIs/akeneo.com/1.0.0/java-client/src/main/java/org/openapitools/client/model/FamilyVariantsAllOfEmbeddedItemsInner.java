/*
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FamilyVariantsAllOfEmbeddedItemsInnerAllOfLabels;
import org.openapitools.client.model.FamilyVariantsAllOfEmbeddedItemsInnerAllOfVariantAttributeSetsInner;
import org.openapitools.client.model.PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FamilyVariantsAllOfEmbeddedItemsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:41.357707-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FamilyVariantsAllOfEmbeddedItemsInner {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks links;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private FamilyVariantsAllOfEmbeddedItemsInnerAllOfLabels labels;

  public static final String SERIALIZED_NAME_VARIANT_ATTRIBUTE_SETS = "variant_attribute_sets";
  @SerializedName(SERIALIZED_NAME_VARIANT_ATTRIBUTE_SETS)
  private List<FamilyVariantsAllOfEmbeddedItemsInnerAllOfVariantAttributeSetsInner> variantAttributeSets = new ArrayList<>();

  public FamilyVariantsAllOfEmbeddedItemsInner() {
  }

  public FamilyVariantsAllOfEmbeddedItemsInner links(PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks getLinks() {
    return links;
  }

  public void setLinks(PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks links) {
    this.links = links;
  }


  public FamilyVariantsAllOfEmbeddedItemsInner code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Family variant code
   * @return code
   */
  @javax.annotation.Nonnull
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public FamilyVariantsAllOfEmbeddedItemsInner labels(FamilyVariantsAllOfEmbeddedItemsInnerAllOfLabels labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable
  public FamilyVariantsAllOfEmbeddedItemsInnerAllOfLabels getLabels() {
    return labels;
  }

  public void setLabels(FamilyVariantsAllOfEmbeddedItemsInnerAllOfLabels labels) {
    this.labels = labels;
  }


  public FamilyVariantsAllOfEmbeddedItemsInner variantAttributeSets(List<FamilyVariantsAllOfEmbeddedItemsInnerAllOfVariantAttributeSetsInner> variantAttributeSets) {
    this.variantAttributeSets = variantAttributeSets;
    return this;
  }

  public FamilyVariantsAllOfEmbeddedItemsInner addVariantAttributeSetsItem(FamilyVariantsAllOfEmbeddedItemsInnerAllOfVariantAttributeSetsInner variantAttributeSetsItem) {
    if (this.variantAttributeSets == null) {
      this.variantAttributeSets = new ArrayList<>();
    }
    this.variantAttributeSets.add(variantAttributeSetsItem);
    return this;
  }

  /**
   * Attributes distribution according to the enrichment level
   * @return variantAttributeSets
   */
  @javax.annotation.Nonnull
  public List<FamilyVariantsAllOfEmbeddedItemsInnerAllOfVariantAttributeSetsInner> getVariantAttributeSets() {
    return variantAttributeSets;
  }

  public void setVariantAttributeSets(List<FamilyVariantsAllOfEmbeddedItemsInnerAllOfVariantAttributeSetsInner> variantAttributeSets) {
    this.variantAttributeSets = variantAttributeSets;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FamilyVariantsAllOfEmbeddedItemsInner familyVariantsAllOfEmbeddedItemsInner = (FamilyVariantsAllOfEmbeddedItemsInner) o;
    return Objects.equals(this.links, familyVariantsAllOfEmbeddedItemsInner.links) &&
        Objects.equals(this.code, familyVariantsAllOfEmbeddedItemsInner.code) &&
        Objects.equals(this.labels, familyVariantsAllOfEmbeddedItemsInner.labels) &&
        Objects.equals(this.variantAttributeSets, familyVariantsAllOfEmbeddedItemsInner.variantAttributeSets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, code, labels, variantAttributeSets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FamilyVariantsAllOfEmbeddedItemsInner {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    variantAttributeSets: ").append(toIndentedString(variantAttributeSets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("code");
    openapiFields.add("labels");
    openapiFields.add("variant_attribute_sets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("variant_attribute_sets");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FamilyVariantsAllOfEmbeddedItemsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FamilyVariantsAllOfEmbeddedItemsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FamilyVariantsAllOfEmbeddedItemsInner is not found in the empty JSON string", FamilyVariantsAllOfEmbeddedItemsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FamilyVariantsAllOfEmbeddedItemsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FamilyVariantsAllOfEmbeddedItemsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FamilyVariantsAllOfEmbeddedItemsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `_links`
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks.validateJsonElement(jsonObj.get("_links"));
      }
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // validate the optional field `labels`
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull()) {
        FamilyVariantsAllOfEmbeddedItemsInnerAllOfLabels.validateJsonElement(jsonObj.get("labels"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("variant_attribute_sets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `variant_attribute_sets` to be an array in the JSON string but got `%s`", jsonObj.get("variant_attribute_sets").toString()));
      }

      JsonArray jsonArrayvariantAttributeSets = jsonObj.getAsJsonArray("variant_attribute_sets");
      // validate the required field `variant_attribute_sets` (array)
      for (int i = 0; i < jsonArrayvariantAttributeSets.size(); i++) {
        FamilyVariantsAllOfEmbeddedItemsInnerAllOfVariantAttributeSetsInner.validateJsonElement(jsonArrayvariantAttributeSets.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FamilyVariantsAllOfEmbeddedItemsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FamilyVariantsAllOfEmbeddedItemsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FamilyVariantsAllOfEmbeddedItemsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FamilyVariantsAllOfEmbeddedItemsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<FamilyVariantsAllOfEmbeddedItemsInner>() {
           @Override
           public void write(JsonWriter out, FamilyVariantsAllOfEmbeddedItemsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FamilyVariantsAllOfEmbeddedItemsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FamilyVariantsAllOfEmbeddedItemsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FamilyVariantsAllOfEmbeddedItemsInner
   * @throws IOException if the JSON string is invalid with respect to FamilyVariantsAllOfEmbeddedItemsInner
   */
  public static FamilyVariantsAllOfEmbeddedItemsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FamilyVariantsAllOfEmbeddedItemsInner.class);
  }

  /**
   * Convert an instance of FamilyVariantsAllOfEmbeddedItemsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

