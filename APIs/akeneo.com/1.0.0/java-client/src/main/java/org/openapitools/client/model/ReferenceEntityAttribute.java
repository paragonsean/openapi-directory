/*
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetAssetFamiliesCodeAttributes200ResponseInnerLabels;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReferenceEntityAttribute
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:41.357707-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReferenceEntityAttribute {
  public static final String SERIALIZED_NAME_ALLOWED_EXTENSIONS = "allowed_extensions";
  @SerializedName(SERIALIZED_NAME_ALLOWED_EXTENSIONS)
  private List<String> allowedExtensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_DECIMALS_ALLOWED = "decimals_allowed";
  @SerializedName(SERIALIZED_NAME_DECIMALS_ALLOWED)
  private Boolean decimalsAllowed = false;

  public static final String SERIALIZED_NAME_IS_REQUIRED_FOR_COMPLETENESS = "is_required_for_completeness";
  @SerializedName(SERIALIZED_NAME_IS_REQUIRED_FOR_COMPLETENESS)
  private Boolean isRequiredForCompleteness = false;

  public static final String SERIALIZED_NAME_IS_RICH_TEXT_EDITOR = "is_rich_text_editor";
  @SerializedName(SERIALIZED_NAME_IS_RICH_TEXT_EDITOR)
  private Boolean isRichTextEditor;

  public static final String SERIALIZED_NAME_IS_TEXTAREA = "is_textarea";
  @SerializedName(SERIALIZED_NAME_IS_TEXTAREA)
  private Boolean isTextarea = false;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private GetAssetFamiliesCodeAttributes200ResponseInnerLabels labels;

  public static final String SERIALIZED_NAME_MAX_CHARACTERS = "max_characters";
  @SerializedName(SERIALIZED_NAME_MAX_CHARACTERS)
  private Integer maxCharacters;

  public static final String SERIALIZED_NAME_MAX_FILE_SIZE = "max_file_size";
  @SerializedName(SERIALIZED_NAME_MAX_FILE_SIZE)
  private String maxFileSize;

  public static final String SERIALIZED_NAME_MAX_VALUE = "max_value";
  @SerializedName(SERIALIZED_NAME_MAX_VALUE)
  private String maxValue;

  public static final String SERIALIZED_NAME_MIN_VALUE = "min_value";
  @SerializedName(SERIALIZED_NAME_MIN_VALUE)
  private String minValue;

  public static final String SERIALIZED_NAME_REFERENCE_ENTITY_CODE = "reference_entity_code";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ENTITY_CODE)
  private String referenceEntityCode;

  /**
   * Attribute type. See &lt;a href&#x3D;&#39;/concepts/reference-entities.html#reference-entity-attribute&#39;&gt;type&lt;/a&gt; section for more details.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TEXT("text"),
    
    IMAGE("image"),
    
    NUMBER("number"),
    
    SINGLE_OPTION("single_option"),
    
    MULTIPLE_OPTIONS("multiple_options"),
    
    REFERENCE_ENTITY_SINGLE_LINK("reference_entity_single_link"),
    
    REFERENCE_ENTITY_MULTIPLE_LINKS("reference_entity_multiple_links");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VALIDATION_REGEXP = "validation_regexp";
  @SerializedName(SERIALIZED_NAME_VALIDATION_REGEXP)
  private String validationRegexp;

  /**
   * Validation rule type used to validate the attribute value when the attribute type is &#x60;text&#x60;
   */
  @JsonAdapter(ValidationRuleEnum.Adapter.class)
  public enum ValidationRuleEnum {
    EMAIL("email"),
    
    URL("url"),
    
    REGEXP("regexp"),
    
    NONE("none");

    private String value;

    ValidationRuleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ValidationRuleEnum fromValue(String value) {
      for (ValidationRuleEnum b : ValidationRuleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ValidationRuleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ValidationRuleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ValidationRuleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ValidationRuleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ValidationRuleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VALIDATION_RULE = "validation_rule";
  @SerializedName(SERIALIZED_NAME_VALIDATION_RULE)
  private ValidationRuleEnum validationRule = ValidationRuleEnum.NONE;

  public static final String SERIALIZED_NAME_VALUE_PER_CHANNEL = "value_per_channel";
  @SerializedName(SERIALIZED_NAME_VALUE_PER_CHANNEL)
  private Boolean valuePerChannel = false;

  public static final String SERIALIZED_NAME_VALUE_PER_LOCALE = "value_per_locale";
  @SerializedName(SERIALIZED_NAME_VALUE_PER_LOCALE)
  private Boolean valuePerLocale = false;

  public ReferenceEntityAttribute() {
  }

  public ReferenceEntityAttribute allowedExtensions(List<String> allowedExtensions) {
    this.allowedExtensions = allowedExtensions;
    return this;
  }

  public ReferenceEntityAttribute addAllowedExtensionsItem(String allowedExtensionsItem) {
    if (this.allowedExtensions == null) {
      this.allowedExtensions = new ArrayList<>();
    }
    this.allowedExtensions.add(allowedExtensionsItem);
    return this;
  }

  /**
   * Extensions allowed when the attribute type is &#x60;image&#x60;
   * @return allowedExtensions
   */
  @javax.annotation.Nullable
  public List<String> getAllowedExtensions() {
    return allowedExtensions;
  }

  public void setAllowedExtensions(List<String> allowedExtensions) {
    this.allowedExtensions = allowedExtensions;
  }


  public ReferenceEntityAttribute code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Attribute code
   * @return code
   */
  @javax.annotation.Nonnull
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public ReferenceEntityAttribute decimalsAllowed(Boolean decimalsAllowed) {
    this.decimalsAllowed = decimalsAllowed;
    return this;
  }

  /**
   * Whether decimals are allowed when the attribute type is &#x60;number&#x60;
   * @return decimalsAllowed
   */
  @javax.annotation.Nullable
  public Boolean getDecimalsAllowed() {
    return decimalsAllowed;
  }

  public void setDecimalsAllowed(Boolean decimalsAllowed) {
    this.decimalsAllowed = decimalsAllowed;
  }


  public ReferenceEntityAttribute isRequiredForCompleteness(Boolean isRequiredForCompleteness) {
    this.isRequiredForCompleteness = isRequiredForCompleteness;
    return this;
  }

  /**
   * Whether the attribute should be part of the record&#39;s completeness calculation
   * @return isRequiredForCompleteness
   */
  @javax.annotation.Nullable
  public Boolean getIsRequiredForCompleteness() {
    return isRequiredForCompleteness;
  }

  public void setIsRequiredForCompleteness(Boolean isRequiredForCompleteness) {
    this.isRequiredForCompleteness = isRequiredForCompleteness;
  }


  public ReferenceEntityAttribute isRichTextEditor(Boolean isRichTextEditor) {
    this.isRichTextEditor = isRichTextEditor;
    return this;
  }

  /**
   * Whether the UI should display a rich text editor instead of a simple text area when the attribute type is &#x60;text&#x60;
   * @return isRichTextEditor
   */
  @javax.annotation.Nullable
  public Boolean getIsRichTextEditor() {
    return isRichTextEditor;
  }

  public void setIsRichTextEditor(Boolean isRichTextEditor) {
    this.isRichTextEditor = isRichTextEditor;
  }


  public ReferenceEntityAttribute isTextarea(Boolean isTextarea) {
    this.isTextarea = isTextarea;
    return this;
  }

  /**
   * Whether the UI should display a text area instead of a simple field when the attribute type is &#x60;text&#x60;
   * @return isTextarea
   */
  @javax.annotation.Nullable
  public Boolean getIsTextarea() {
    return isTextarea;
  }

  public void setIsTextarea(Boolean isTextarea) {
    this.isTextarea = isTextarea;
  }


  public ReferenceEntityAttribute labels(GetAssetFamiliesCodeAttributes200ResponseInnerLabels labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable
  public GetAssetFamiliesCodeAttributes200ResponseInnerLabels getLabels() {
    return labels;
  }

  public void setLabels(GetAssetFamiliesCodeAttributes200ResponseInnerLabels labels) {
    this.labels = labels;
  }


  public ReferenceEntityAttribute maxCharacters(Integer maxCharacters) {
    this.maxCharacters = maxCharacters;
    return this;
  }

  /**
   * Maximum number of characters allowed for the value of the attribute when the attribute type is &#x60;text&#x60;
   * @return maxCharacters
   */
  @javax.annotation.Nullable
  public Integer getMaxCharacters() {
    return maxCharacters;
  }

  public void setMaxCharacters(Integer maxCharacters) {
    this.maxCharacters = maxCharacters;
  }


  public ReferenceEntityAttribute maxFileSize(String maxFileSize) {
    this.maxFileSize = maxFileSize;
    return this;
  }

  /**
   * Max file size in MB when the attribute type is &#x60;image&#x60;
   * @return maxFileSize
   */
  @javax.annotation.Nullable
  public String getMaxFileSize() {
    return maxFileSize;
  }

  public void setMaxFileSize(String maxFileSize) {
    this.maxFileSize = maxFileSize;
  }


  public ReferenceEntityAttribute maxValue(String maxValue) {
    this.maxValue = maxValue;
    return this;
  }

  /**
   * Maximum value allowed when the attribute type is &#x60;number&#x60;
   * @return maxValue
   */
  @javax.annotation.Nullable
  public String getMaxValue() {
    return maxValue;
  }

  public void setMaxValue(String maxValue) {
    this.maxValue = maxValue;
  }


  public ReferenceEntityAttribute minValue(String minValue) {
    this.minValue = minValue;
    return this;
  }

  /**
   * Minimum value allowed when the attribute type is &#x60;number&#x60;
   * @return minValue
   */
  @javax.annotation.Nullable
  public String getMinValue() {
    return minValue;
  }

  public void setMinValue(String minValue) {
    this.minValue = minValue;
  }


  public ReferenceEntityAttribute referenceEntityCode(String referenceEntityCode) {
    this.referenceEntityCode = referenceEntityCode;
    return this;
  }

  /**
   * Code of the linked reference entity when the attribute type is &#x60;reference_entity_single_link&#x60; or &#x60;reference_entity_multiple_links&#x60;
   * @return referenceEntityCode
   */
  @javax.annotation.Nullable
  public String getReferenceEntityCode() {
    return referenceEntityCode;
  }

  public void setReferenceEntityCode(String referenceEntityCode) {
    this.referenceEntityCode = referenceEntityCode;
  }


  public ReferenceEntityAttribute type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Attribute type. See &lt;a href&#x3D;&#39;/concepts/reference-entities.html#reference-entity-attribute&#39;&gt;type&lt;/a&gt; section for more details.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public ReferenceEntityAttribute validationRegexp(String validationRegexp) {
    this.validationRegexp = validationRegexp;
    return this;
  }

  /**
   * Regexp expression used to validate the attribute value when the attribute type is &#x60;text&#x60;
   * @return validationRegexp
   */
  @javax.annotation.Nullable
  public String getValidationRegexp() {
    return validationRegexp;
  }

  public void setValidationRegexp(String validationRegexp) {
    this.validationRegexp = validationRegexp;
  }


  public ReferenceEntityAttribute validationRule(ValidationRuleEnum validationRule) {
    this.validationRule = validationRule;
    return this;
  }

  /**
   * Validation rule type used to validate the attribute value when the attribute type is &#x60;text&#x60;
   * @return validationRule
   */
  @javax.annotation.Nullable
  public ValidationRuleEnum getValidationRule() {
    return validationRule;
  }

  public void setValidationRule(ValidationRuleEnum validationRule) {
    this.validationRule = validationRule;
  }


  public ReferenceEntityAttribute valuePerChannel(Boolean valuePerChannel) {
    this.valuePerChannel = valuePerChannel;
    return this;
  }

  /**
   * Whether the attribute is scopable, i.e. can have one value by channel
   * @return valuePerChannel
   */
  @javax.annotation.Nullable
  public Boolean getValuePerChannel() {
    return valuePerChannel;
  }

  public void setValuePerChannel(Boolean valuePerChannel) {
    this.valuePerChannel = valuePerChannel;
  }


  public ReferenceEntityAttribute valuePerLocale(Boolean valuePerLocale) {
    this.valuePerLocale = valuePerLocale;
    return this;
  }

  /**
   * Whether the attribute is localizable, i.e. can have one value by locale
   * @return valuePerLocale
   */
  @javax.annotation.Nullable
  public Boolean getValuePerLocale() {
    return valuePerLocale;
  }

  public void setValuePerLocale(Boolean valuePerLocale) {
    this.valuePerLocale = valuePerLocale;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReferenceEntityAttribute referenceEntityAttribute = (ReferenceEntityAttribute) o;
    return Objects.equals(this.allowedExtensions, referenceEntityAttribute.allowedExtensions) &&
        Objects.equals(this.code, referenceEntityAttribute.code) &&
        Objects.equals(this.decimalsAllowed, referenceEntityAttribute.decimalsAllowed) &&
        Objects.equals(this.isRequiredForCompleteness, referenceEntityAttribute.isRequiredForCompleteness) &&
        Objects.equals(this.isRichTextEditor, referenceEntityAttribute.isRichTextEditor) &&
        Objects.equals(this.isTextarea, referenceEntityAttribute.isTextarea) &&
        Objects.equals(this.labels, referenceEntityAttribute.labels) &&
        Objects.equals(this.maxCharacters, referenceEntityAttribute.maxCharacters) &&
        Objects.equals(this.maxFileSize, referenceEntityAttribute.maxFileSize) &&
        Objects.equals(this.maxValue, referenceEntityAttribute.maxValue) &&
        Objects.equals(this.minValue, referenceEntityAttribute.minValue) &&
        Objects.equals(this.referenceEntityCode, referenceEntityAttribute.referenceEntityCode) &&
        Objects.equals(this.type, referenceEntityAttribute.type) &&
        Objects.equals(this.validationRegexp, referenceEntityAttribute.validationRegexp) &&
        Objects.equals(this.validationRule, referenceEntityAttribute.validationRule) &&
        Objects.equals(this.valuePerChannel, referenceEntityAttribute.valuePerChannel) &&
        Objects.equals(this.valuePerLocale, referenceEntityAttribute.valuePerLocale);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedExtensions, code, decimalsAllowed, isRequiredForCompleteness, isRichTextEditor, isTextarea, labels, maxCharacters, maxFileSize, maxValue, minValue, referenceEntityCode, type, validationRegexp, validationRule, valuePerChannel, valuePerLocale);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReferenceEntityAttribute {\n");
    sb.append("    allowedExtensions: ").append(toIndentedString(allowedExtensions)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    decimalsAllowed: ").append(toIndentedString(decimalsAllowed)).append("\n");
    sb.append("    isRequiredForCompleteness: ").append(toIndentedString(isRequiredForCompleteness)).append("\n");
    sb.append("    isRichTextEditor: ").append(toIndentedString(isRichTextEditor)).append("\n");
    sb.append("    isTextarea: ").append(toIndentedString(isTextarea)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    maxCharacters: ").append(toIndentedString(maxCharacters)).append("\n");
    sb.append("    maxFileSize: ").append(toIndentedString(maxFileSize)).append("\n");
    sb.append("    maxValue: ").append(toIndentedString(maxValue)).append("\n");
    sb.append("    minValue: ").append(toIndentedString(minValue)).append("\n");
    sb.append("    referenceEntityCode: ").append(toIndentedString(referenceEntityCode)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    validationRegexp: ").append(toIndentedString(validationRegexp)).append("\n");
    sb.append("    validationRule: ").append(toIndentedString(validationRule)).append("\n");
    sb.append("    valuePerChannel: ").append(toIndentedString(valuePerChannel)).append("\n");
    sb.append("    valuePerLocale: ").append(toIndentedString(valuePerLocale)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowed_extensions");
    openapiFields.add("code");
    openapiFields.add("decimals_allowed");
    openapiFields.add("is_required_for_completeness");
    openapiFields.add("is_rich_text_editor");
    openapiFields.add("is_textarea");
    openapiFields.add("labels");
    openapiFields.add("max_characters");
    openapiFields.add("max_file_size");
    openapiFields.add("max_value");
    openapiFields.add("min_value");
    openapiFields.add("reference_entity_code");
    openapiFields.add("type");
    openapiFields.add("validation_regexp");
    openapiFields.add("validation_rule");
    openapiFields.add("value_per_channel");
    openapiFields.add("value_per_locale");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReferenceEntityAttribute
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReferenceEntityAttribute.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReferenceEntityAttribute is not found in the empty JSON string", ReferenceEntityAttribute.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReferenceEntityAttribute.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReferenceEntityAttribute` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReferenceEntityAttribute.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowed_extensions") != null && !jsonObj.get("allowed_extensions").isJsonNull() && !jsonObj.get("allowed_extensions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_extensions` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_extensions").toString()));
      }
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // validate the optional field `labels`
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull()) {
        GetAssetFamiliesCodeAttributes200ResponseInnerLabels.validateJsonElement(jsonObj.get("labels"));
      }
      if ((jsonObj.get("max_file_size") != null && !jsonObj.get("max_file_size").isJsonNull()) && !jsonObj.get("max_file_size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `max_file_size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("max_file_size").toString()));
      }
      if ((jsonObj.get("max_value") != null && !jsonObj.get("max_value").isJsonNull()) && !jsonObj.get("max_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `max_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("max_value").toString()));
      }
      if ((jsonObj.get("min_value") != null && !jsonObj.get("min_value").isJsonNull()) && !jsonObj.get("min_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `min_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("min_value").toString()));
      }
      if ((jsonObj.get("reference_entity_code") != null && !jsonObj.get("reference_entity_code").isJsonNull()) && !jsonObj.get("reference_entity_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference_entity_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference_entity_code").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if ((jsonObj.get("validation_regexp") != null && !jsonObj.get("validation_regexp").isJsonNull()) && !jsonObj.get("validation_regexp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validation_regexp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validation_regexp").toString()));
      }
      if ((jsonObj.get("validation_rule") != null && !jsonObj.get("validation_rule").isJsonNull()) && !jsonObj.get("validation_rule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validation_rule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validation_rule").toString()));
      }
      // validate the optional field `validation_rule`
      if (jsonObj.get("validation_rule") != null && !jsonObj.get("validation_rule").isJsonNull()) {
        ValidationRuleEnum.validateJsonElement(jsonObj.get("validation_rule"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReferenceEntityAttribute.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReferenceEntityAttribute' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReferenceEntityAttribute> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReferenceEntityAttribute.class));

       return (TypeAdapter<T>) new TypeAdapter<ReferenceEntityAttribute>() {
           @Override
           public void write(JsonWriter out, ReferenceEntityAttribute value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReferenceEntityAttribute read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReferenceEntityAttribute given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReferenceEntityAttribute
   * @throws IOException if the JSON string is invalid with respect to ReferenceEntityAttribute
   */
  public static ReferenceEntityAttribute fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReferenceEntityAttribute.class);
  }

  /**
   * Convert an instance of ReferenceEntityAttribute to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

