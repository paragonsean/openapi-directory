/*
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FamiliesAllOfEmbeddedItemsInnerAllOfAttributeRequirements;
import org.openapitools.client.model.FamiliesAllOfEmbeddedItemsInnerAllOfLabels;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PatchFamiliesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:41.357707-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PatchFamiliesRequest {
  public static final String SERIALIZED_NAME_ATTRIBUTE_AS_IMAGE = "attribute_as_image";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_AS_IMAGE)
  private String attributeAsImage = "null";

  public static final String SERIALIZED_NAME_ATTRIBUTE_AS_LABEL = "attribute_as_label";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_AS_LABEL)
  private String attributeAsLabel;

  public static final String SERIALIZED_NAME_ATTRIBUTE_REQUIREMENTS = "attribute_requirements";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_REQUIREMENTS)
  private FamiliesAllOfEmbeddedItemsInnerAllOfAttributeRequirements attributeRequirements;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<String> attributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private FamiliesAllOfEmbeddedItemsInnerAllOfLabels labels;

  public PatchFamiliesRequest() {
  }

  public PatchFamiliesRequest attributeAsImage(String attributeAsImage) {
    this.attributeAsImage = attributeAsImage;
    return this;
  }

  /**
   * Attribute code used as the main picture in the user interface (only since v2.0)
   * @return attributeAsImage
   */
  @javax.annotation.Nullable
  public String getAttributeAsImage() {
    return attributeAsImage;
  }

  public void setAttributeAsImage(String attributeAsImage) {
    this.attributeAsImage = attributeAsImage;
  }


  public PatchFamiliesRequest attributeAsLabel(String attributeAsLabel) {
    this.attributeAsLabel = attributeAsLabel;
    return this;
  }

  /**
   * Attribute code used as label
   * @return attributeAsLabel
   */
  @javax.annotation.Nonnull
  public String getAttributeAsLabel() {
    return attributeAsLabel;
  }

  public void setAttributeAsLabel(String attributeAsLabel) {
    this.attributeAsLabel = attributeAsLabel;
  }


  public PatchFamiliesRequest attributeRequirements(FamiliesAllOfEmbeddedItemsInnerAllOfAttributeRequirements attributeRequirements) {
    this.attributeRequirements = attributeRequirements;
    return this;
  }

  /**
   * Get attributeRequirements
   * @return attributeRequirements
   */
  @javax.annotation.Nullable
  public FamiliesAllOfEmbeddedItemsInnerAllOfAttributeRequirements getAttributeRequirements() {
    return attributeRequirements;
  }

  public void setAttributeRequirements(FamiliesAllOfEmbeddedItemsInnerAllOfAttributeRequirements attributeRequirements) {
    this.attributeRequirements = attributeRequirements;
  }


  public PatchFamiliesRequest attributes(List<String> attributes) {
    this.attributes = attributes;
    return this;
  }

  public PatchFamiliesRequest addAttributesItem(String attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

  /**
   * Attributes codes that compose the family
   * @return attributes
   */
  @javax.annotation.Nullable
  public List<String> getAttributes() {
    return attributes;
  }

  public void setAttributes(List<String> attributes) {
    this.attributes = attributes;
  }


  public PatchFamiliesRequest code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Family code
   * @return code
   */
  @javax.annotation.Nonnull
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public PatchFamiliesRequest labels(FamiliesAllOfEmbeddedItemsInnerAllOfLabels labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable
  public FamiliesAllOfEmbeddedItemsInnerAllOfLabels getLabels() {
    return labels;
  }

  public void setLabels(FamiliesAllOfEmbeddedItemsInnerAllOfLabels labels) {
    this.labels = labels;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatchFamiliesRequest patchFamiliesRequest = (PatchFamiliesRequest) o;
    return Objects.equals(this.attributeAsImage, patchFamiliesRequest.attributeAsImage) &&
        Objects.equals(this.attributeAsLabel, patchFamiliesRequest.attributeAsLabel) &&
        Objects.equals(this.attributeRequirements, patchFamiliesRequest.attributeRequirements) &&
        Objects.equals(this.attributes, patchFamiliesRequest.attributes) &&
        Objects.equals(this.code, patchFamiliesRequest.code) &&
        Objects.equals(this.labels, patchFamiliesRequest.labels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributeAsImage, attributeAsLabel, attributeRequirements, attributes, code, labels);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatchFamiliesRequest {\n");
    sb.append("    attributeAsImage: ").append(toIndentedString(attributeAsImage)).append("\n");
    sb.append("    attributeAsLabel: ").append(toIndentedString(attributeAsLabel)).append("\n");
    sb.append("    attributeRequirements: ").append(toIndentedString(attributeRequirements)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attribute_as_image");
    openapiFields.add("attribute_as_label");
    openapiFields.add("attribute_requirements");
    openapiFields.add("attributes");
    openapiFields.add("code");
    openapiFields.add("labels");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("attribute_as_label");
    openapiRequiredFields.add("code");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PatchFamiliesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PatchFamiliesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatchFamiliesRequest is not found in the empty JSON string", PatchFamiliesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PatchFamiliesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PatchFamiliesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PatchFamiliesRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("attribute_as_image") != null && !jsonObj.get("attribute_as_image").isJsonNull()) && !jsonObj.get("attribute_as_image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attribute_as_image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attribute_as_image").toString()));
      }
      if (!jsonObj.get("attribute_as_label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attribute_as_label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attribute_as_label").toString()));
      }
      // validate the optional field `attribute_requirements`
      if (jsonObj.get("attribute_requirements") != null && !jsonObj.get("attribute_requirements").isJsonNull()) {
        FamiliesAllOfEmbeddedItemsInnerAllOfAttributeRequirements.validateJsonElement(jsonObj.get("attribute_requirements"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull() && !jsonObj.get("attributes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributes` to be an array in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
      }
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // validate the optional field `labels`
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull()) {
        FamiliesAllOfEmbeddedItemsInnerAllOfLabels.validateJsonElement(jsonObj.get("labels"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatchFamiliesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatchFamiliesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatchFamiliesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatchFamiliesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PatchFamiliesRequest>() {
           @Override
           public void write(JsonWriter out, PatchFamiliesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PatchFamiliesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PatchFamiliesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PatchFamiliesRequest
   * @throws IOException if the JSON string is invalid with respect to PatchFamiliesRequest
   */
  public static PatchFamiliesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatchFamiliesRequest.class);
  }

  /**
   * Convert an instance of PatchFamiliesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

