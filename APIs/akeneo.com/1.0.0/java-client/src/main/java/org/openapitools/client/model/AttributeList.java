/*
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AttributesAllOfEmbeddedItemsInnerAllOfGroupLabels;
import org.openapitools.client.model.AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner;
import org.openapitools.client.model.GetAssetFamiliesCodeAttributes200ResponseInnerLabels;
import org.openapitools.client.model.PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AttributeList
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:41.357707-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AttributeList {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks links;

  public static final String SERIALIZED_NAME_ALLOWED_EXTENSIONS = "allowed_extensions";
  @SerializedName(SERIALIZED_NAME_ALLOWED_EXTENSIONS)
  private List<String> allowedExtensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_AVAILABLE_LOCALES = "available_locales";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_LOCALES)
  private List<String> availableLocales = new ArrayList<>();

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_DATE_MAX = "date_max";
  @SerializedName(SERIALIZED_NAME_DATE_MAX)
  private OffsetDateTime dateMax;

  public static final String SERIALIZED_NAME_DATE_MIN = "date_min";
  @SerializedName(SERIALIZED_NAME_DATE_MIN)
  private OffsetDateTime dateMin;

  public static final String SERIALIZED_NAME_DECIMALS_ALLOWED = "decimals_allowed";
  @SerializedName(SERIALIZED_NAME_DECIMALS_ALLOWED)
  private Boolean decimalsAllowed;

  public static final String SERIALIZED_NAME_DEFAULT_METRIC_UNIT = "default_metric_unit";
  @SerializedName(SERIALIZED_NAME_DEFAULT_METRIC_UNIT)
  private String defaultMetricUnit;

  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "default_value";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  private Boolean defaultValue;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private String group;

  public static final String SERIALIZED_NAME_GROUP_LABELS = "group_labels";
  @SerializedName(SERIALIZED_NAME_GROUP_LABELS)
  private AttributesAllOfEmbeddedItemsInnerAllOfGroupLabels groupLabels;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private GetAssetFamiliesCodeAttributes200ResponseInnerLabels labels;

  public static final String SERIALIZED_NAME_LOCALIZABLE = "localizable";
  @SerializedName(SERIALIZED_NAME_LOCALIZABLE)
  private Boolean localizable = false;

  public static final String SERIALIZED_NAME_MAX_CHARACTERS = "max_characters";
  @SerializedName(SERIALIZED_NAME_MAX_CHARACTERS)
  private Integer maxCharacters;

  public static final String SERIALIZED_NAME_MAX_FILE_SIZE = "max_file_size";
  @SerializedName(SERIALIZED_NAME_MAX_FILE_SIZE)
  private String maxFileSize;

  public static final String SERIALIZED_NAME_METRIC_FAMILY = "metric_family";
  @SerializedName(SERIALIZED_NAME_METRIC_FAMILY)
  private String metricFamily;

  public static final String SERIALIZED_NAME_NEGATIVE_ALLOWED = "negative_allowed";
  @SerializedName(SERIALIZED_NAME_NEGATIVE_ALLOWED)
  private Boolean negativeAllowed;

  public static final String SERIALIZED_NAME_NUMBER_MAX = "number_max";
  @SerializedName(SERIALIZED_NAME_NUMBER_MAX)
  private String numberMax;

  public static final String SERIALIZED_NAME_NUMBER_MIN = "number_min";
  @SerializedName(SERIALIZED_NAME_NUMBER_MIN)
  private String numberMin;

  public static final String SERIALIZED_NAME_REFERENCE_DATA_NAME = "reference_data_name";
  @SerializedName(SERIALIZED_NAME_REFERENCE_DATA_NAME)
  private String referenceDataName;

  public static final String SERIALIZED_NAME_SCOPABLE = "scopable";
  @SerializedName(SERIALIZED_NAME_SCOPABLE)
  private Boolean scopable = false;

  public static final String SERIALIZED_NAME_SORT_ORDER = "sort_order";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  private Integer sortOrder;

  public static final String SERIALIZED_NAME_TABLE_CONFIGURATION = "table_configuration";
  @SerializedName(SERIALIZED_NAME_TABLE_CONFIGURATION)
  private List<AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner> tableConfiguration = new ArrayList<>();

  /**
   * Attribute type. See &lt;a href&#x3D;&#39;/concepts/catalog-structure.html#attribute&#39;&gt;type&lt;/a&gt; section for more details.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PIM_CATALOG_IDENTIFIER("pim_catalog_identifier"),
    
    PIM_CATALOG_METRIC("pim_catalog_metric"),
    
    PIM_CATALOG_NUMBER("pim_catalog_number"),
    
    PIM_CATALOG_REFERENCE_DATA_MULTI_SELECT("pim_catalog_reference_data_multi_select"),
    
    PIM_CATALOG_REFERENCE_DATA_SIMPLE_SELECT("pim_catalog_reference_data_simple_select"),
    
    PIM_CATALOG_SIMPLESELECT("pim_catalog_simpleselect"),
    
    PIM_CATALOG_MULTISELECT("pim_catalog_multiselect"),
    
    PIM_CATALOG_DATE("pim_catalog_date"),
    
    PIM_CATALOG_TEXTAREA("pim_catalog_textarea"),
    
    PIM_CATALOG_TEXT("pim_catalog_text"),
    
    PIM_CATALOG_FILE("pim_catalog_file"),
    
    PIM_CATALOG_IMAGE("pim_catalog_image"),
    
    PIM_CATALOG_PRICE_COLLECTION("pim_catalog_price_collection"),
    
    PIM_CATALOG_BOOLEAN("pim_catalog_boolean"),
    
    AKENEO_REFERENCE_ENTITY("akeneo_reference_entity"),
    
    AKENEO_REFERENCE_ENTITY_COLLECTION("akeneo_reference_entity_collection"),
    
    PIM_CATALOG_ASSET_COLLECTION("pim_catalog_asset_collection");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UNIQUE = "unique";
  @SerializedName(SERIALIZED_NAME_UNIQUE)
  private Boolean unique;

  public static final String SERIALIZED_NAME_USEABLE_AS_GRID_FILTER = "useable_as_grid_filter";
  @SerializedName(SERIALIZED_NAME_USEABLE_AS_GRID_FILTER)
  private Boolean useableAsGridFilter;

  public static final String SERIALIZED_NAME_VALIDATION_REGEXP = "validation_regexp";
  @SerializedName(SERIALIZED_NAME_VALIDATION_REGEXP)
  private String validationRegexp;

  public static final String SERIALIZED_NAME_VALIDATION_RULE = "validation_rule";
  @SerializedName(SERIALIZED_NAME_VALIDATION_RULE)
  private String validationRule;

  public static final String SERIALIZED_NAME_WYSIWYG_ENABLED = "wysiwyg_enabled";
  @SerializedName(SERIALIZED_NAME_WYSIWYG_ENABLED)
  private Boolean wysiwygEnabled;

  public AttributeList() {
  }

  public AttributeList links(PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks getLinks() {
    return links;
  }

  public void setLinks(PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks links) {
    this.links = links;
  }


  public AttributeList allowedExtensions(List<String> allowedExtensions) {
    this.allowedExtensions = allowedExtensions;
    return this;
  }

  public AttributeList addAllowedExtensionsItem(String allowedExtensionsItem) {
    if (this.allowedExtensions == null) {
      this.allowedExtensions = new ArrayList<>();
    }
    this.allowedExtensions.add(allowedExtensionsItem);
    return this;
  }

  /**
   * Extensions allowed when the attribute type is &#x60;pim_catalog_file&#x60; or &#x60;pim_catalog_image&#x60;
   * @return allowedExtensions
   */
  @javax.annotation.Nullable
  public List<String> getAllowedExtensions() {
    return allowedExtensions;
  }

  public void setAllowedExtensions(List<String> allowedExtensions) {
    this.allowedExtensions = allowedExtensions;
  }


  public AttributeList availableLocales(List<String> availableLocales) {
    this.availableLocales = availableLocales;
    return this;
  }

  public AttributeList addAvailableLocalesItem(String availableLocalesItem) {
    if (this.availableLocales == null) {
      this.availableLocales = new ArrayList<>();
    }
    this.availableLocales.add(availableLocalesItem);
    return this;
  }

  /**
   * To make the attribute locale specfic, specify here for which locales it is specific
   * @return availableLocales
   */
  @javax.annotation.Nullable
  public List<String> getAvailableLocales() {
    return availableLocales;
  }

  public void setAvailableLocales(List<String> availableLocales) {
    this.availableLocales = availableLocales;
  }


  public AttributeList code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Attribute code
   * @return code
   */
  @javax.annotation.Nonnull
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public AttributeList dateMax(OffsetDateTime dateMax) {
    this.dateMax = dateMax;
    return this;
  }

  /**
   * Maximum date allowed when the attribute type is &#x60;pim_catalog_date&#x60;
   * @return dateMax
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateMax() {
    return dateMax;
  }

  public void setDateMax(OffsetDateTime dateMax) {
    this.dateMax = dateMax;
  }


  public AttributeList dateMin(OffsetDateTime dateMin) {
    this.dateMin = dateMin;
    return this;
  }

  /**
   * Minimum date allowed when the attribute type is &#x60;pim_catalog_date&#x60;
   * @return dateMin
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateMin() {
    return dateMin;
  }

  public void setDateMin(OffsetDateTime dateMin) {
    this.dateMin = dateMin;
  }


  public AttributeList decimalsAllowed(Boolean decimalsAllowed) {
    this.decimalsAllowed = decimalsAllowed;
    return this;
  }

  /**
   * Whether decimals are allowed when the attribute type is &#x60;pim_catalog_metric&#x60;, &#x60;pim_catalog_price&#x60; or &#x60;pim_catalog_number&#x60;
   * @return decimalsAllowed
   */
  @javax.annotation.Nullable
  public Boolean getDecimalsAllowed() {
    return decimalsAllowed;
  }

  public void setDecimalsAllowed(Boolean decimalsAllowed) {
    this.decimalsAllowed = decimalsAllowed;
  }


  public AttributeList defaultMetricUnit(String defaultMetricUnit) {
    this.defaultMetricUnit = defaultMetricUnit;
    return this;
  }

  /**
   * Default metric unit when the attribute type is &#x60;pim_catalog_metric&#x60;
   * @return defaultMetricUnit
   */
  @javax.annotation.Nullable
  public String getDefaultMetricUnit() {
    return defaultMetricUnit;
  }

  public void setDefaultMetricUnit(String defaultMetricUnit) {
    this.defaultMetricUnit = defaultMetricUnit;
  }


  public AttributeList defaultValue(Boolean defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

  /**
   * Default value for a Yes/No attribute, applied when creating a new product or product model (only available since the 5.0)
   * @return defaultValue
   */
  @javax.annotation.Nullable
  public Boolean getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(Boolean defaultValue) {
    this.defaultValue = defaultValue;
  }


  public AttributeList group(String group) {
    this.group = group;
    return this;
  }

  /**
   * Attribute group
   * @return group
   */
  @javax.annotation.Nonnull
  public String getGroup() {
    return group;
  }

  public void setGroup(String group) {
    this.group = group;
  }


  public AttributeList groupLabels(AttributesAllOfEmbeddedItemsInnerAllOfGroupLabels groupLabels) {
    this.groupLabels = groupLabels;
    return this;
  }

  /**
   * Get groupLabels
   * @return groupLabels
   */
  @javax.annotation.Nullable
  public AttributesAllOfEmbeddedItemsInnerAllOfGroupLabels getGroupLabels() {
    return groupLabels;
  }

  public void setGroupLabels(AttributesAllOfEmbeddedItemsInnerAllOfGroupLabels groupLabels) {
    this.groupLabels = groupLabels;
  }


  public AttributeList labels(GetAssetFamiliesCodeAttributes200ResponseInnerLabels labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable
  public GetAssetFamiliesCodeAttributes200ResponseInnerLabels getLabels() {
    return labels;
  }

  public void setLabels(GetAssetFamiliesCodeAttributes200ResponseInnerLabels labels) {
    this.labels = labels;
  }


  public AttributeList localizable(Boolean localizable) {
    this.localizable = localizable;
    return this;
  }

  /**
   * Whether the attribute is localizable, i.e. can have one value by locale
   * @return localizable
   */
  @javax.annotation.Nullable
  public Boolean getLocalizable() {
    return localizable;
  }

  public void setLocalizable(Boolean localizable) {
    this.localizable = localizable;
  }


  public AttributeList maxCharacters(Integer maxCharacters) {
    this.maxCharacters = maxCharacters;
    return this;
  }

  /**
   * Number maximum of characters allowed for the value of the attribute when the attribute type is &#x60;pim_catalog_text&#x60;, &#x60;pim_catalog_textarea&#x60; or &#x60;pim_catalog_identifier&#x60;
   * @return maxCharacters
   */
  @javax.annotation.Nullable
  public Integer getMaxCharacters() {
    return maxCharacters;
  }

  public void setMaxCharacters(Integer maxCharacters) {
    this.maxCharacters = maxCharacters;
  }


  public AttributeList maxFileSize(String maxFileSize) {
    this.maxFileSize = maxFileSize;
    return this;
  }

  /**
   * Max file size in MB when the attribute type is &#x60;pim_catalog_file&#x60; or &#x60;pim_catalog_image&#x60;
   * @return maxFileSize
   */
  @javax.annotation.Nullable
  public String getMaxFileSize() {
    return maxFileSize;
  }

  public void setMaxFileSize(String maxFileSize) {
    this.maxFileSize = maxFileSize;
  }


  public AttributeList metricFamily(String metricFamily) {
    this.metricFamily = metricFamily;
    return this;
  }

  /**
   * Metric family when the attribute type is &#x60;pim_catalog_metric&#x60;
   * @return metricFamily
   */
  @javax.annotation.Nullable
  public String getMetricFamily() {
    return metricFamily;
  }

  public void setMetricFamily(String metricFamily) {
    this.metricFamily = metricFamily;
  }


  public AttributeList negativeAllowed(Boolean negativeAllowed) {
    this.negativeAllowed = negativeAllowed;
    return this;
  }

  /**
   * Whether negative values are allowed when the attribute type is &#x60;pim_catalog_metric&#x60; or &#x60;pim_catalog_number&#x60;
   * @return negativeAllowed
   */
  @javax.annotation.Nullable
  public Boolean getNegativeAllowed() {
    return negativeAllowed;
  }

  public void setNegativeAllowed(Boolean negativeAllowed) {
    this.negativeAllowed = negativeAllowed;
  }


  public AttributeList numberMax(String numberMax) {
    this.numberMax = numberMax;
    return this;
  }

  /**
   * Maximum integer value allowed when the attribute type is &#x60;pim_catalog_metric&#x60;, &#x60;pim_catalog_price&#x60; or &#x60;pim_catalog_number&#x60;
   * @return numberMax
   */
  @javax.annotation.Nullable
  public String getNumberMax() {
    return numberMax;
  }

  public void setNumberMax(String numberMax) {
    this.numberMax = numberMax;
  }


  public AttributeList numberMin(String numberMin) {
    this.numberMin = numberMin;
    return this;
  }

  /**
   * Minimum integer value allowed when the attribute type is &#x60;pim_catalog_metric&#x60;, &#x60;pim_catalog_price&#x60; or &#x60;pim_catalog_number&#x60;
   * @return numberMin
   */
  @javax.annotation.Nullable
  public String getNumberMin() {
    return numberMin;
  }

  public void setNumberMin(String numberMin) {
    this.numberMin = numberMin;
  }


  public AttributeList referenceDataName(String referenceDataName) {
    this.referenceDataName = referenceDataName;
    return this;
  }

  /**
   * Reference entity code when the attribute type is &#x60;akeneo_reference_entity&#x60; or &#x60;akeneo_reference_entity_collection&#x60; OR Asset family code when the attribute type is &#x60;pim_catalog_asset_collection&#x60;
   * @return referenceDataName
   */
  @javax.annotation.Nullable
  public String getReferenceDataName() {
    return referenceDataName;
  }

  public void setReferenceDataName(String referenceDataName) {
    this.referenceDataName = referenceDataName;
  }


  public AttributeList scopable(Boolean scopable) {
    this.scopable = scopable;
    return this;
  }

  /**
   * Whether the attribute is scopable, i.e. can have one value by channel
   * @return scopable
   */
  @javax.annotation.Nullable
  public Boolean getScopable() {
    return scopable;
  }

  public void setScopable(Boolean scopable) {
    this.scopable = scopable;
  }


  public AttributeList sortOrder(Integer sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

  /**
   * Order of the attribute in its group
   * @return sortOrder
   */
  @javax.annotation.Nullable
  public Integer getSortOrder() {
    return sortOrder;
  }

  public void setSortOrder(Integer sortOrder) {
    this.sortOrder = sortOrder;
  }


  public AttributeList tableConfiguration(List<AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner> tableConfiguration) {
    this.tableConfiguration = tableConfiguration;
    return this;
  }

  public AttributeList addTableConfigurationItem(AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner tableConfigurationItem) {
    if (this.tableConfiguration == null) {
      this.tableConfiguration = new ArrayList<>();
    }
    this.tableConfiguration.add(tableConfigurationItem);
    return this;
  }

  /**
   * Configuration of the Table attribute (columns)
   * @return tableConfiguration
   */
  @javax.annotation.Nullable
  public List<AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner> getTableConfiguration() {
    return tableConfiguration;
  }

  public void setTableConfiguration(List<AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner> tableConfiguration) {
    this.tableConfiguration = tableConfiguration;
  }


  public AttributeList type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Attribute type. See &lt;a href&#x3D;&#39;/concepts/catalog-structure.html#attribute&#39;&gt;type&lt;/a&gt; section for more details.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public AttributeList unique(Boolean unique) {
    this.unique = unique;
    return this;
  }

  /**
   * Whether two values for the attribute cannot be the same
   * @return unique
   */
  @javax.annotation.Nullable
  public Boolean getUnique() {
    return unique;
  }

  public void setUnique(Boolean unique) {
    this.unique = unique;
  }


  public AttributeList useableAsGridFilter(Boolean useableAsGridFilter) {
    this.useableAsGridFilter = useableAsGridFilter;
    return this;
  }

  /**
   * Whether the attribute can be used as a filter for the product grid in the PIM user interface
   * @return useableAsGridFilter
   */
  @javax.annotation.Nullable
  public Boolean getUseableAsGridFilter() {
    return useableAsGridFilter;
  }

  public void setUseableAsGridFilter(Boolean useableAsGridFilter) {
    this.useableAsGridFilter = useableAsGridFilter;
  }


  public AttributeList validationRegexp(String validationRegexp) {
    this.validationRegexp = validationRegexp;
    return this;
  }

  /**
   * Regexp expression used to validate any attribute value when the attribute type is &#x60;pim_catalog_text&#x60; or &#x60;pim_catalog_identifier&#x60;
   * @return validationRegexp
   */
  @javax.annotation.Nullable
  public String getValidationRegexp() {
    return validationRegexp;
  }

  public void setValidationRegexp(String validationRegexp) {
    this.validationRegexp = validationRegexp;
  }


  public AttributeList validationRule(String validationRule) {
    this.validationRule = validationRule;
    return this;
  }

  /**
   * Validation rule type used to validate any attribute value when the attribute type is &#x60;pim_catalog_text&#x60; or &#x60;pim_catalog_identifier&#x60;
   * @return validationRule
   */
  @javax.annotation.Nullable
  public String getValidationRule() {
    return validationRule;
  }

  public void setValidationRule(String validationRule) {
    this.validationRule = validationRule;
  }


  public AttributeList wysiwygEnabled(Boolean wysiwygEnabled) {
    this.wysiwygEnabled = wysiwygEnabled;
    return this;
  }

  /**
   * Whether the WYSIWYG interface is shown when the attribute type is &#x60;pim_catalog_textarea&#x60;
   * @return wysiwygEnabled
   */
  @javax.annotation.Nullable
  public Boolean getWysiwygEnabled() {
    return wysiwygEnabled;
  }

  public void setWysiwygEnabled(Boolean wysiwygEnabled) {
    this.wysiwygEnabled = wysiwygEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttributeList attributeList = (AttributeList) o;
    return Objects.equals(this.links, attributeList.links) &&
        Objects.equals(this.allowedExtensions, attributeList.allowedExtensions) &&
        Objects.equals(this.availableLocales, attributeList.availableLocales) &&
        Objects.equals(this.code, attributeList.code) &&
        Objects.equals(this.dateMax, attributeList.dateMax) &&
        Objects.equals(this.dateMin, attributeList.dateMin) &&
        Objects.equals(this.decimalsAllowed, attributeList.decimalsAllowed) &&
        Objects.equals(this.defaultMetricUnit, attributeList.defaultMetricUnit) &&
        Objects.equals(this.defaultValue, attributeList.defaultValue) &&
        Objects.equals(this.group, attributeList.group) &&
        Objects.equals(this.groupLabels, attributeList.groupLabels) &&
        Objects.equals(this.labels, attributeList.labels) &&
        Objects.equals(this.localizable, attributeList.localizable) &&
        Objects.equals(this.maxCharacters, attributeList.maxCharacters) &&
        Objects.equals(this.maxFileSize, attributeList.maxFileSize) &&
        Objects.equals(this.metricFamily, attributeList.metricFamily) &&
        Objects.equals(this.negativeAllowed, attributeList.negativeAllowed) &&
        Objects.equals(this.numberMax, attributeList.numberMax) &&
        Objects.equals(this.numberMin, attributeList.numberMin) &&
        Objects.equals(this.referenceDataName, attributeList.referenceDataName) &&
        Objects.equals(this.scopable, attributeList.scopable) &&
        Objects.equals(this.sortOrder, attributeList.sortOrder) &&
        Objects.equals(this.tableConfiguration, attributeList.tableConfiguration) &&
        Objects.equals(this.type, attributeList.type) &&
        Objects.equals(this.unique, attributeList.unique) &&
        Objects.equals(this.useableAsGridFilter, attributeList.useableAsGridFilter) &&
        Objects.equals(this.validationRegexp, attributeList.validationRegexp) &&
        Objects.equals(this.validationRule, attributeList.validationRule) &&
        Objects.equals(this.wysiwygEnabled, attributeList.wysiwygEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, allowedExtensions, availableLocales, code, dateMax, dateMin, decimalsAllowed, defaultMetricUnit, defaultValue, group, groupLabels, labels, localizable, maxCharacters, maxFileSize, metricFamily, negativeAllowed, numberMax, numberMin, referenceDataName, scopable, sortOrder, tableConfiguration, type, unique, useableAsGridFilter, validationRegexp, validationRule, wysiwygEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttributeList {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    allowedExtensions: ").append(toIndentedString(allowedExtensions)).append("\n");
    sb.append("    availableLocales: ").append(toIndentedString(availableLocales)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    dateMax: ").append(toIndentedString(dateMax)).append("\n");
    sb.append("    dateMin: ").append(toIndentedString(dateMin)).append("\n");
    sb.append("    decimalsAllowed: ").append(toIndentedString(decimalsAllowed)).append("\n");
    sb.append("    defaultMetricUnit: ").append(toIndentedString(defaultMetricUnit)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    groupLabels: ").append(toIndentedString(groupLabels)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    localizable: ").append(toIndentedString(localizable)).append("\n");
    sb.append("    maxCharacters: ").append(toIndentedString(maxCharacters)).append("\n");
    sb.append("    maxFileSize: ").append(toIndentedString(maxFileSize)).append("\n");
    sb.append("    metricFamily: ").append(toIndentedString(metricFamily)).append("\n");
    sb.append("    negativeAllowed: ").append(toIndentedString(negativeAllowed)).append("\n");
    sb.append("    numberMax: ").append(toIndentedString(numberMax)).append("\n");
    sb.append("    numberMin: ").append(toIndentedString(numberMin)).append("\n");
    sb.append("    referenceDataName: ").append(toIndentedString(referenceDataName)).append("\n");
    sb.append("    scopable: ").append(toIndentedString(scopable)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("    tableConfiguration: ").append(toIndentedString(tableConfiguration)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    unique: ").append(toIndentedString(unique)).append("\n");
    sb.append("    useableAsGridFilter: ").append(toIndentedString(useableAsGridFilter)).append("\n");
    sb.append("    validationRegexp: ").append(toIndentedString(validationRegexp)).append("\n");
    sb.append("    validationRule: ").append(toIndentedString(validationRule)).append("\n");
    sb.append("    wysiwygEnabled: ").append(toIndentedString(wysiwygEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("allowed_extensions");
    openapiFields.add("available_locales");
    openapiFields.add("code");
    openapiFields.add("date_max");
    openapiFields.add("date_min");
    openapiFields.add("decimals_allowed");
    openapiFields.add("default_metric_unit");
    openapiFields.add("default_value");
    openapiFields.add("group");
    openapiFields.add("group_labels");
    openapiFields.add("labels");
    openapiFields.add("localizable");
    openapiFields.add("max_characters");
    openapiFields.add("max_file_size");
    openapiFields.add("metric_family");
    openapiFields.add("negative_allowed");
    openapiFields.add("number_max");
    openapiFields.add("number_min");
    openapiFields.add("reference_data_name");
    openapiFields.add("scopable");
    openapiFields.add("sort_order");
    openapiFields.add("table_configuration");
    openapiFields.add("type");
    openapiFields.add("unique");
    openapiFields.add("useable_as_grid_filter");
    openapiFields.add("validation_regexp");
    openapiFields.add("validation_rule");
    openapiFields.add("wysiwyg_enabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("group");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AttributeList
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AttributeList.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AttributeList is not found in the empty JSON string", AttributeList.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AttributeList.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AttributeList` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AttributeList.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `_links`
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks.validateJsonElement(jsonObj.get("_links"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowed_extensions") != null && !jsonObj.get("allowed_extensions").isJsonNull() && !jsonObj.get("allowed_extensions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_extensions` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_extensions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("available_locales") != null && !jsonObj.get("available_locales").isJsonNull() && !jsonObj.get("available_locales").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `available_locales` to be an array in the JSON string but got `%s`", jsonObj.get("available_locales").toString()));
      }
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("default_metric_unit") != null && !jsonObj.get("default_metric_unit").isJsonNull()) && !jsonObj.get("default_metric_unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_metric_unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_metric_unit").toString()));
      }
      if (!jsonObj.get("group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group").toString()));
      }
      // validate the optional field `group_labels`
      if (jsonObj.get("group_labels") != null && !jsonObj.get("group_labels").isJsonNull()) {
        AttributesAllOfEmbeddedItemsInnerAllOfGroupLabels.validateJsonElement(jsonObj.get("group_labels"));
      }
      // validate the optional field `labels`
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull()) {
        GetAssetFamiliesCodeAttributes200ResponseInnerLabels.validateJsonElement(jsonObj.get("labels"));
      }
      if ((jsonObj.get("max_file_size") != null && !jsonObj.get("max_file_size").isJsonNull()) && !jsonObj.get("max_file_size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `max_file_size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("max_file_size").toString()));
      }
      if ((jsonObj.get("metric_family") != null && !jsonObj.get("metric_family").isJsonNull()) && !jsonObj.get("metric_family").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metric_family` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metric_family").toString()));
      }
      if ((jsonObj.get("number_max") != null && !jsonObj.get("number_max").isJsonNull()) && !jsonObj.get("number_max").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number_max` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number_max").toString()));
      }
      if ((jsonObj.get("number_min") != null && !jsonObj.get("number_min").isJsonNull()) && !jsonObj.get("number_min").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number_min` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number_min").toString()));
      }
      if ((jsonObj.get("reference_data_name") != null && !jsonObj.get("reference_data_name").isJsonNull()) && !jsonObj.get("reference_data_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference_data_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference_data_name").toString()));
      }
      if (jsonObj.get("table_configuration") != null && !jsonObj.get("table_configuration").isJsonNull()) {
        JsonArray jsonArraytableConfiguration = jsonObj.getAsJsonArray("table_configuration");
        if (jsonArraytableConfiguration != null) {
          // ensure the json data is an array
          if (!jsonObj.get("table_configuration").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `table_configuration` to be an array in the JSON string but got `%s`", jsonObj.get("table_configuration").toString()));
          }

          // validate the optional field `table_configuration` (array)
          for (int i = 0; i < jsonArraytableConfiguration.size(); i++) {
            AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.validateJsonElement(jsonArraytableConfiguration.get(i));
          };
        }
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if ((jsonObj.get("validation_regexp") != null && !jsonObj.get("validation_regexp").isJsonNull()) && !jsonObj.get("validation_regexp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validation_regexp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validation_regexp").toString()));
      }
      if ((jsonObj.get("validation_rule") != null && !jsonObj.get("validation_rule").isJsonNull()) && !jsonObj.get("validation_rule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validation_rule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validation_rule").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AttributeList.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AttributeList' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AttributeList> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AttributeList.class));

       return (TypeAdapter<T>) new TypeAdapter<AttributeList>() {
           @Override
           public void write(JsonWriter out, AttributeList value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AttributeList read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AttributeList given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AttributeList
   * @throws IOException if the JSON string is invalid with respect to AttributeList
   */
  public static AttributeList fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AttributeList.class);
  }

  /**
   * Convert an instance of AttributeList to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

