/*
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MediaFilesAllOfEmbeddedItemsInnerAllOfLinks;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MediaFilesAllOfEmbeddedItemsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:41.357707-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MediaFilesAllOfEmbeddedItemsInner {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private MediaFilesAllOfEmbeddedItemsInnerAllOfLinks links;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_EXTENSION = "extension";
  @SerializedName(SERIALIZED_NAME_EXTENSION)
  private String extension;

  public static final String SERIALIZED_NAME_MIME_TYPE = "mime_type";
  @SerializedName(SERIALIZED_NAME_MIME_TYPE)
  private String mimeType;

  public static final String SERIALIZED_NAME_ORIGINAL_FILENAME = "original_filename";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_FILENAME)
  private String originalFilename;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Integer size;

  public MediaFilesAllOfEmbeddedItemsInner() {
  }

  public MediaFilesAllOfEmbeddedItemsInner links(MediaFilesAllOfEmbeddedItemsInnerAllOfLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public MediaFilesAllOfEmbeddedItemsInnerAllOfLinks getLinks() {
    return links;
  }

  public void setLinks(MediaFilesAllOfEmbeddedItemsInnerAllOfLinks links) {
    this.links = links;
  }


  public MediaFilesAllOfEmbeddedItemsInner code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Media file code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public MediaFilesAllOfEmbeddedItemsInner extension(String extension) {
    this.extension = extension;
    return this;
  }

  /**
   * Extension of the media file
   * @return extension
   */
  @javax.annotation.Nullable
  public String getExtension() {
    return extension;
  }

  public void setExtension(String extension) {
    this.extension = extension;
  }


  public MediaFilesAllOfEmbeddedItemsInner mimeType(String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

  /**
   * Mime type of the media file
   * @return mimeType
   */
  @javax.annotation.Nullable
  public String getMimeType() {
    return mimeType;
  }

  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }


  public MediaFilesAllOfEmbeddedItemsInner originalFilename(String originalFilename) {
    this.originalFilename = originalFilename;
    return this;
  }

  /**
   * Original filename of the media file
   * @return originalFilename
   */
  @javax.annotation.Nullable
  public String getOriginalFilename() {
    return originalFilename;
  }

  public void setOriginalFilename(String originalFilename) {
    this.originalFilename = originalFilename;
  }


  public MediaFilesAllOfEmbeddedItemsInner size(Integer size) {
    this.size = size;
    return this;
  }

  /**
   * Size of the media file
   * @return size
   */
  @javax.annotation.Nullable
  public Integer getSize() {
    return size;
  }

  public void setSize(Integer size) {
    this.size = size;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MediaFilesAllOfEmbeddedItemsInner mediaFilesAllOfEmbeddedItemsInner = (MediaFilesAllOfEmbeddedItemsInner) o;
    return Objects.equals(this.links, mediaFilesAllOfEmbeddedItemsInner.links) &&
        Objects.equals(this.code, mediaFilesAllOfEmbeddedItemsInner.code) &&
        Objects.equals(this.extension, mediaFilesAllOfEmbeddedItemsInner.extension) &&
        Objects.equals(this.mimeType, mediaFilesAllOfEmbeddedItemsInner.mimeType) &&
        Objects.equals(this.originalFilename, mediaFilesAllOfEmbeddedItemsInner.originalFilename) &&
        Objects.equals(this.size, mediaFilesAllOfEmbeddedItemsInner.size);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, code, extension, mimeType, originalFilename, size);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MediaFilesAllOfEmbeddedItemsInner {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    extension: ").append(toIndentedString(extension)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    originalFilename: ").append(toIndentedString(originalFilename)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("code");
    openapiFields.add("extension");
    openapiFields.add("mime_type");
    openapiFields.add("original_filename");
    openapiFields.add("size");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MediaFilesAllOfEmbeddedItemsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MediaFilesAllOfEmbeddedItemsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MediaFilesAllOfEmbeddedItemsInner is not found in the empty JSON string", MediaFilesAllOfEmbeddedItemsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MediaFilesAllOfEmbeddedItemsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MediaFilesAllOfEmbeddedItemsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `_links`
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        MediaFilesAllOfEmbeddedItemsInnerAllOfLinks.validateJsonElement(jsonObj.get("_links"));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("extension") != null && !jsonObj.get("extension").isJsonNull()) && !jsonObj.get("extension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extension").toString()));
      }
      if ((jsonObj.get("mime_type") != null && !jsonObj.get("mime_type").isJsonNull()) && !jsonObj.get("mime_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mime_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mime_type").toString()));
      }
      if ((jsonObj.get("original_filename") != null && !jsonObj.get("original_filename").isJsonNull()) && !jsonObj.get("original_filename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `original_filename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("original_filename").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MediaFilesAllOfEmbeddedItemsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MediaFilesAllOfEmbeddedItemsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MediaFilesAllOfEmbeddedItemsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MediaFilesAllOfEmbeddedItemsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<MediaFilesAllOfEmbeddedItemsInner>() {
           @Override
           public void write(JsonWriter out, MediaFilesAllOfEmbeddedItemsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MediaFilesAllOfEmbeddedItemsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MediaFilesAllOfEmbeddedItemsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MediaFilesAllOfEmbeddedItemsInner
   * @throws IOException if the JSON string is invalid with respect to MediaFilesAllOfEmbeddedItemsInner
   */
  public static MediaFilesAllOfEmbeddedItemsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MediaFilesAllOfEmbeddedItemsInner.class);
  }

  /**
   * Convert an instance of MediaFilesAllOfEmbeddedItemsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

