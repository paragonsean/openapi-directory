/*
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ChannelsAllOfEmbeddedItemsInnerAllOfConversionUnits;
import org.openapitools.client.model.ChannelsAllOfEmbeddedItemsInnerAllOfLabels;
import org.openapitools.client.model.PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChannelList
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:41.357707-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChannelList {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks links;

  public static final String SERIALIZED_NAME_CATEGORY_TREE = "category_tree";
  @SerializedName(SERIALIZED_NAME_CATEGORY_TREE)
  private String categoryTree;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_CONVERSION_UNITS = "conversion_units";
  @SerializedName(SERIALIZED_NAME_CONVERSION_UNITS)
  private ChannelsAllOfEmbeddedItemsInnerAllOfConversionUnits conversionUnits;

  public static final String SERIALIZED_NAME_CURRENCIES = "currencies";
  @SerializedName(SERIALIZED_NAME_CURRENCIES)
  private List<String> currencies = new ArrayList<>();

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private ChannelsAllOfEmbeddedItemsInnerAllOfLabels labels;

  public static final String SERIALIZED_NAME_LOCALES = "locales";
  @SerializedName(SERIALIZED_NAME_LOCALES)
  private List<String> locales = new ArrayList<>();

  public ChannelList() {
  }

  public ChannelList links(PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks getLinks() {
    return links;
  }

  public void setLinks(PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks links) {
    this.links = links;
  }


  public ChannelList categoryTree(String categoryTree) {
    this.categoryTree = categoryTree;
    return this;
  }

  /**
   * Code of the category tree linked to the channel
   * @return categoryTree
   */
  @javax.annotation.Nonnull
  public String getCategoryTree() {
    return categoryTree;
  }

  public void setCategoryTree(String categoryTree) {
    this.categoryTree = categoryTree;
  }


  public ChannelList code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Channel code
   * @return code
   */
  @javax.annotation.Nonnull
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public ChannelList conversionUnits(ChannelsAllOfEmbeddedItemsInnerAllOfConversionUnits conversionUnits) {
    this.conversionUnits = conversionUnits;
    return this;
  }

  /**
   * Get conversionUnits
   * @return conversionUnits
   */
  @javax.annotation.Nullable
  public ChannelsAllOfEmbeddedItemsInnerAllOfConversionUnits getConversionUnits() {
    return conversionUnits;
  }

  public void setConversionUnits(ChannelsAllOfEmbeddedItemsInnerAllOfConversionUnits conversionUnits) {
    this.conversionUnits = conversionUnits;
  }


  public ChannelList currencies(List<String> currencies) {
    this.currencies = currencies;
    return this;
  }

  public ChannelList addCurrenciesItem(String currenciesItem) {
    if (this.currencies == null) {
      this.currencies = new ArrayList<>();
    }
    this.currencies.add(currenciesItem);
    return this;
  }

  /**
   * Codes of activated currencies for the channel
   * @return currencies
   */
  @javax.annotation.Nonnull
  public List<String> getCurrencies() {
    return currencies;
  }

  public void setCurrencies(List<String> currencies) {
    this.currencies = currencies;
  }


  public ChannelList labels(ChannelsAllOfEmbeddedItemsInnerAllOfLabels labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable
  public ChannelsAllOfEmbeddedItemsInnerAllOfLabels getLabels() {
    return labels;
  }

  public void setLabels(ChannelsAllOfEmbeddedItemsInnerAllOfLabels labels) {
    this.labels = labels;
  }


  public ChannelList locales(List<String> locales) {
    this.locales = locales;
    return this;
  }

  public ChannelList addLocalesItem(String localesItem) {
    if (this.locales == null) {
      this.locales = new ArrayList<>();
    }
    this.locales.add(localesItem);
    return this;
  }

  /**
   * Codes of activated locales for the channel
   * @return locales
   */
  @javax.annotation.Nonnull
  public List<String> getLocales() {
    return locales;
  }

  public void setLocales(List<String> locales) {
    this.locales = locales;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChannelList channelList = (ChannelList) o;
    return Objects.equals(this.links, channelList.links) &&
        Objects.equals(this.categoryTree, channelList.categoryTree) &&
        Objects.equals(this.code, channelList.code) &&
        Objects.equals(this.conversionUnits, channelList.conversionUnits) &&
        Objects.equals(this.currencies, channelList.currencies) &&
        Objects.equals(this.labels, channelList.labels) &&
        Objects.equals(this.locales, channelList.locales);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, categoryTree, code, conversionUnits, currencies, labels, locales);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChannelList {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    categoryTree: ").append(toIndentedString(categoryTree)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    conversionUnits: ").append(toIndentedString(conversionUnits)).append("\n");
    sb.append("    currencies: ").append(toIndentedString(currencies)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    locales: ").append(toIndentedString(locales)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("category_tree");
    openapiFields.add("code");
    openapiFields.add("conversion_units");
    openapiFields.add("currencies");
    openapiFields.add("labels");
    openapiFields.add("locales");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("category_tree");
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("currencies");
    openapiRequiredFields.add("locales");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChannelList
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChannelList.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChannelList is not found in the empty JSON string", ChannelList.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChannelList.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChannelList` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ChannelList.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `_links`
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks.validateJsonElement(jsonObj.get("_links"));
      }
      if (!jsonObj.get("category_tree").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category_tree` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category_tree").toString()));
      }
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // validate the optional field `conversion_units`
      if (jsonObj.get("conversion_units") != null && !jsonObj.get("conversion_units").isJsonNull()) {
        ChannelsAllOfEmbeddedItemsInnerAllOfConversionUnits.validateJsonElement(jsonObj.get("conversion_units"));
      }
      // ensure the required json array is present
      if (jsonObj.get("currencies") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("currencies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencies` to be an array in the JSON string but got `%s`", jsonObj.get("currencies").toString()));
      }
      // validate the optional field `labels`
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull()) {
        ChannelsAllOfEmbeddedItemsInnerAllOfLabels.validateJsonElement(jsonObj.get("labels"));
      }
      // ensure the required json array is present
      if (jsonObj.get("locales") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("locales").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `locales` to be an array in the JSON string but got `%s`", jsonObj.get("locales").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChannelList.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChannelList' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChannelList> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChannelList.class));

       return (TypeAdapter<T>) new TypeAdapter<ChannelList>() {
           @Override
           public void write(JsonWriter out, ChannelList value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChannelList read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChannelList given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChannelList
   * @throws IOException if the JSON string is invalid with respect to ChannelList
   */
  public static ChannelList fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChannelList.class);
  }

  /**
   * Convert an instance of ChannelList to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

