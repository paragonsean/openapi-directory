/*
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetVariationFilesChannelCodeLocaleCode200Response;
import org.openapitools.client.model.PostReferenceFilesLocaleCodeRequest;
import org.openapitools.client.model.PostToken400Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PamAssetVariationFileApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PamAssetVariationFileApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PamAssetVariationFileApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getVariationFilesChannelCodeLocaleCode
     * @param assetCode Code of the asset (required)
     * @param channelCode Code of the channel (required)
     * @param localeCode Code of the locale if the asset is localizable or equal to &#x60;no-locale&#x60; if the asset is not localizable (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariationFilesChannelCodeLocaleCodeCall(String assetCode, String channelCode, String localeCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/assets/{asset_code}/variation-files/{channel_code}/{locale_code}"
            .replace("{" + "asset_code" + "}", localVarApiClient.escapeString(assetCode.toString()))
            .replace("{" + "channel_code" + "}", localVarApiClient.escapeString(channelCode.toString()))
            .replace("{" + "locale_code" + "}", localVarApiClient.escapeString(localeCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "code",
            "message"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVariationFilesChannelCodeLocaleCodeValidateBeforeCall(String assetCode, String channelCode, String localeCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetCode' is set
        if (assetCode == null) {
            throw new ApiException("Missing the required parameter 'assetCode' when calling getVariationFilesChannelCodeLocaleCode(Async)");
        }

        // verify the required parameter 'channelCode' is set
        if (channelCode == null) {
            throw new ApiException("Missing the required parameter 'channelCode' when calling getVariationFilesChannelCodeLocaleCode(Async)");
        }

        // verify the required parameter 'localeCode' is set
        if (localeCode == null) {
            throw new ApiException("Missing the required parameter 'localeCode' when calling getVariationFilesChannelCodeLocaleCode(Async)");
        }

        return getVariationFilesChannelCodeLocaleCodeCall(assetCode, channelCode, localeCode, _callback);

    }

    /**
     * Get a variation file
     * This endpoint allows you to get the information about a variation file of a given PAM asset.
     * @param assetCode Code of the asset (required)
     * @param channelCode Code of the channel (required)
     * @param localeCode Code of the locale if the asset is localizable or equal to &#x60;no-locale&#x60; if the asset is not localizable (required)
     * @return GetVariationFilesChannelCodeLocaleCode200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public GetVariationFilesChannelCodeLocaleCode200Response getVariationFilesChannelCodeLocaleCode(String assetCode, String channelCode, String localeCode) throws ApiException {
        ApiResponse<GetVariationFilesChannelCodeLocaleCode200Response> localVarResp = getVariationFilesChannelCodeLocaleCodeWithHttpInfo(assetCode, channelCode, localeCode);
        return localVarResp.getData();
    }

    /**
     * Get a variation file
     * This endpoint allows you to get the information about a variation file of a given PAM asset.
     * @param assetCode Code of the asset (required)
     * @param channelCode Code of the channel (required)
     * @param localeCode Code of the locale if the asset is localizable or equal to &#x60;no-locale&#x60; if the asset is not localizable (required)
     * @return ApiResponse&lt;GetVariationFilesChannelCodeLocaleCode200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetVariationFilesChannelCodeLocaleCode200Response> getVariationFilesChannelCodeLocaleCodeWithHttpInfo(String assetCode, String channelCode, String localeCode) throws ApiException {
        okhttp3.Call localVarCall = getVariationFilesChannelCodeLocaleCodeValidateBeforeCall(assetCode, channelCode, localeCode, null);
        Type localVarReturnType = new TypeToken<GetVariationFilesChannelCodeLocaleCode200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a variation file (asynchronously)
     * This endpoint allows you to get the information about a variation file of a given PAM asset.
     * @param assetCode Code of the asset (required)
     * @param channelCode Code of the channel (required)
     * @param localeCode Code of the locale if the asset is localizable or equal to &#x60;no-locale&#x60; if the asset is not localizable (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariationFilesChannelCodeLocaleCodeAsync(String assetCode, String channelCode, String localeCode, final ApiCallback<GetVariationFilesChannelCodeLocaleCode200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVariationFilesChannelCodeLocaleCodeValidateBeforeCall(assetCode, channelCode, localeCode, _callback);
        Type localVarReturnType = new TypeToken<GetVariationFilesChannelCodeLocaleCode200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVariationFilesChannelCodeLocaleCodeDownload
     * @param assetCode Code of the asset (required)
     * @param channelCode Code of the channel (required)
     * @param localeCode Code of the locale if the asset is localizable or equal to &#x60;no-locale&#x60; if the asset is not localizable (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariationFilesChannelCodeLocaleCodeDownloadCall(String assetCode, String channelCode, String localeCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rest/v1/assets/{asset_code}/variation-files/{channel_code}/{locale_code}/download"
            .replace("{" + "asset_code" + "}", localVarApiClient.escapeString(assetCode.toString()))
            .replace("{" + "channel_code" + "}", localVarApiClient.escapeString(channelCode.toString()))
            .replace("{" + "locale_code" + "}", localVarApiClient.escapeString(localeCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "code",
            "message"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVariationFilesChannelCodeLocaleCodeDownloadValidateBeforeCall(String assetCode, String channelCode, String localeCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetCode' is set
        if (assetCode == null) {
            throw new ApiException("Missing the required parameter 'assetCode' when calling getVariationFilesChannelCodeLocaleCodeDownload(Async)");
        }

        // verify the required parameter 'channelCode' is set
        if (channelCode == null) {
            throw new ApiException("Missing the required parameter 'channelCode' when calling getVariationFilesChannelCodeLocaleCodeDownload(Async)");
        }

        // verify the required parameter 'localeCode' is set
        if (localeCode == null) {
            throw new ApiException("Missing the required parameter 'localeCode' when calling getVariationFilesChannelCodeLocaleCodeDownload(Async)");
        }

        return getVariationFilesChannelCodeLocaleCodeDownloadCall(assetCode, channelCode, localeCode, _callback);

    }

    /**
     * Download a variation file
     * This endpoint allows you to download a given variation file.
     * @param assetCode Code of the asset (required)
     * @param channelCode Code of the channel (required)
     * @param localeCode Code of the locale if the asset is localizable or equal to &#x60;no-locale&#x60; if the asset is not localizable (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public void getVariationFilesChannelCodeLocaleCodeDownload(String assetCode, String channelCode, String localeCode) throws ApiException {
        getVariationFilesChannelCodeLocaleCodeDownloadWithHttpInfo(assetCode, channelCode, localeCode);
    }

    /**
     * Download a variation file
     * This endpoint allows you to download a given variation file.
     * @param assetCode Code of the asset (required)
     * @param channelCode Code of the channel (required)
     * @param localeCode Code of the locale if the asset is localizable or equal to &#x60;no-locale&#x60; if the asset is not localizable (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getVariationFilesChannelCodeLocaleCodeDownloadWithHttpInfo(String assetCode, String channelCode, String localeCode) throws ApiException {
        okhttp3.Call localVarCall = getVariationFilesChannelCodeLocaleCodeDownloadValidateBeforeCall(assetCode, channelCode, localeCode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download a variation file (asynchronously)
     * This endpoint allows you to download a given variation file.
     * @param assetCode Code of the asset (required)
     * @param channelCode Code of the channel (required)
     * @param localeCode Code of the locale if the asset is localizable or equal to &#x60;no-locale&#x60; if the asset is not localizable (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariationFilesChannelCodeLocaleCodeDownloadAsync(String assetCode, String channelCode, String localeCode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVariationFilesChannelCodeLocaleCodeDownloadValidateBeforeCall(assetCode, channelCode, localeCode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postVariationFilesChannelCodeLocaleCode
     * @param assetCode Code of the asset (required)
     * @param channelCode Code of the channel (required)
     * @param localeCode Code of the locale if the asset is localizable or equal to &#x60;no-locale&#x60; if the asset is not localizable (required)
     * @param contentType Equal to &#39;multipart/form-data&#39;, no other value allowed (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Location - URI of the created resource <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media type </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postVariationFilesChannelCodeLocaleCodeCall(String assetCode, String channelCode, String localeCode, String contentType, PostReferenceFilesLocaleCodeRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/rest/v1/assets/{asset_code}/variation-files/{channel_code}/{locale_code}"
            .replace("{" + "asset_code" + "}", localVarApiClient.escapeString(assetCode.toString()))
            .replace("{" + "channel_code" + "}", localVarApiClient.escapeString(channelCode.toString()))
            .replace("{" + "locale_code" + "}", localVarApiClient.escapeString(localeCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "code",
            "message",
            "_links"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postVariationFilesChannelCodeLocaleCodeValidateBeforeCall(String assetCode, String channelCode, String localeCode, String contentType, PostReferenceFilesLocaleCodeRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetCode' is set
        if (assetCode == null) {
            throw new ApiException("Missing the required parameter 'assetCode' when calling postVariationFilesChannelCodeLocaleCode(Async)");
        }

        // verify the required parameter 'channelCode' is set
        if (channelCode == null) {
            throw new ApiException("Missing the required parameter 'channelCode' when calling postVariationFilesChannelCodeLocaleCode(Async)");
        }

        // verify the required parameter 'localeCode' is set
        if (localeCode == null) {
            throw new ApiException("Missing the required parameter 'localeCode' when calling postVariationFilesChannelCodeLocaleCode(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling postVariationFilesChannelCodeLocaleCode(Async)");
        }

        return postVariationFilesChannelCodeLocaleCodeCall(assetCode, channelCode, localeCode, contentType, body, _callback);

    }

    /**
     * Upload a new variation file
     * This endpoint allows you to upload a new variation file for a given PAM asset, channel and locale.
     * @param assetCode Code of the asset (required)
     * @param channelCode Code of the channel (required)
     * @param localeCode Code of the locale if the asset is localizable or equal to &#x60;no-locale&#x60; if the asset is not localizable (required)
     * @param contentType Equal to &#39;multipart/form-data&#39;, no other value allowed (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Location - URI of the created resource <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media type </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public void postVariationFilesChannelCodeLocaleCode(String assetCode, String channelCode, String localeCode, String contentType, PostReferenceFilesLocaleCodeRequest body) throws ApiException {
        postVariationFilesChannelCodeLocaleCodeWithHttpInfo(assetCode, channelCode, localeCode, contentType, body);
    }

    /**
     * Upload a new variation file
     * This endpoint allows you to upload a new variation file for a given PAM asset, channel and locale.
     * @param assetCode Code of the asset (required)
     * @param channelCode Code of the channel (required)
     * @param localeCode Code of the locale if the asset is localizable or equal to &#x60;no-locale&#x60; if the asset is not localizable (required)
     * @param contentType Equal to &#39;multipart/form-data&#39;, no other value allowed (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Location - URI of the created resource <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media type </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postVariationFilesChannelCodeLocaleCodeWithHttpInfo(String assetCode, String channelCode, String localeCode, String contentType, PostReferenceFilesLocaleCodeRequest body) throws ApiException {
        okhttp3.Call localVarCall = postVariationFilesChannelCodeLocaleCodeValidateBeforeCall(assetCode, channelCode, localeCode, contentType, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Upload a new variation file (asynchronously)
     * This endpoint allows you to upload a new variation file for a given PAM asset, channel and locale.
     * @param assetCode Code of the asset (required)
     * @param channelCode Code of the channel (required)
     * @param localeCode Code of the locale if the asset is localizable or equal to &#x60;no-locale&#x60; if the asset is not localizable (required)
     * @param contentType Equal to &#39;multipart/form-data&#39;, no other value allowed (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Location - URI of the created resource <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media type </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postVariationFilesChannelCodeLocaleCodeAsync(String assetCode, String channelCode, String localeCode, String contentType, PostReferenceFilesLocaleCodeRequest body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postVariationFilesChannelCodeLocaleCodeValidateBeforeCall(assetCode, channelCode, localeCode, contentType, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
