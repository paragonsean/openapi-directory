/*
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The naming convention ran over the asset code or the main media filename upon each asset creation, in order to automatically set several values in asset attributes. To learn more and see the format of this property, take a look at &lt;a href&#x3D;&#39;/concepts/asset-manager.html#focus-on-the-naming-convention&#39;&gt;here&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:41.357707-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssetFamilyListAllOfNamingConvention {
  public static final String SERIALIZED_NAME_ABORT_ASSET_CREATION_ON_ERROR = "abort_asset_creation_on_error";
  @SerializedName(SERIALIZED_NAME_ABORT_ASSET_CREATION_ON_ERROR)
  private Boolean abortAssetCreationOnError;

  public static final String SERIALIZED_NAME_PATTERN = "pattern";
  @SerializedName(SERIALIZED_NAME_PATTERN)
  private String pattern;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private Object source;

  public AssetFamilyListAllOfNamingConvention() {
  }

  public AssetFamilyListAllOfNamingConvention abortAssetCreationOnError(Boolean abortAssetCreationOnError) {
    this.abortAssetCreationOnError = abortAssetCreationOnError;
    return this;
  }

  /**
   * Whether the asset should be created if the naming convention failed to apply. More details &lt;a href&#x3D;&#39;/concepts/asset-manager.html#abort-asset-creation-on-error&#39;&gt;here&lt;/a&gt;.
   * @return abortAssetCreationOnError
   */
  @javax.annotation.Nullable
  public Boolean getAbortAssetCreationOnError() {
    return abortAssetCreationOnError;
  }

  public void setAbortAssetCreationOnError(Boolean abortAssetCreationOnError) {
    this.abortAssetCreationOnError = abortAssetCreationOnError;
  }


  public AssetFamilyListAllOfNamingConvention pattern(String pattern) {
    this.pattern = pattern;
    return this;
  }

  /**
   * The regular expression that should be applied on the source. More details &lt;a href&#x3D;&#39;/concepts/asset-manager.html#pattern&#39;&gt;here&lt;/a&gt;.
   * @return pattern
   */
  @javax.annotation.Nullable
  public String getPattern() {
    return pattern;
  }

  public void setPattern(String pattern) {
    this.pattern = pattern;
  }


  public AssetFamilyListAllOfNamingConvention source(Object source) {
    this.source = source;
    return this;
  }

  /**
   * The string on which the naming convention should be applied. More details &lt;a href&#x3D;&#39;/concepts/asset-manager.html#source&#39;&gt;here&lt;/a&gt;.
   * @return source
   */
  @javax.annotation.Nullable
  public Object getSource() {
    return source;
  }

  public void setSource(Object source) {
    this.source = source;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssetFamilyListAllOfNamingConvention assetFamilyListAllOfNamingConvention = (AssetFamilyListAllOfNamingConvention) o;
    return Objects.equals(this.abortAssetCreationOnError, assetFamilyListAllOfNamingConvention.abortAssetCreationOnError) &&
        Objects.equals(this.pattern, assetFamilyListAllOfNamingConvention.pattern) &&
        Objects.equals(this.source, assetFamilyListAllOfNamingConvention.source);
  }

  @Override
  public int hashCode() {
    return Objects.hash(abortAssetCreationOnError, pattern, source);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssetFamilyListAllOfNamingConvention {\n");
    sb.append("    abortAssetCreationOnError: ").append(toIndentedString(abortAssetCreationOnError)).append("\n");
    sb.append("    pattern: ").append(toIndentedString(pattern)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("abort_asset_creation_on_error");
    openapiFields.add("pattern");
    openapiFields.add("source");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssetFamilyListAllOfNamingConvention
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssetFamilyListAllOfNamingConvention.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssetFamilyListAllOfNamingConvention is not found in the empty JSON string", AssetFamilyListAllOfNamingConvention.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssetFamilyListAllOfNamingConvention.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssetFamilyListAllOfNamingConvention` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("pattern") != null && !jsonObj.get("pattern").isJsonNull()) && !jsonObj.get("pattern").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pattern` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pattern").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssetFamilyListAllOfNamingConvention.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssetFamilyListAllOfNamingConvention' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssetFamilyListAllOfNamingConvention> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssetFamilyListAllOfNamingConvention.class));

       return (TypeAdapter<T>) new TypeAdapter<AssetFamilyListAllOfNamingConvention>() {
           @Override
           public void write(JsonWriter out, AssetFamilyListAllOfNamingConvention value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssetFamilyListAllOfNamingConvention read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssetFamilyListAllOfNamingConvention given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssetFamilyListAllOfNamingConvention
   * @throws IOException if the JSON string is invalid with respect to AssetFamilyListAllOfNamingConvention
   */
  public static AssetFamilyListAllOfNamingConvention fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssetFamilyListAllOfNamingConvention.class);
  }

  /**
   * Convert an instance of AssetFamilyListAllOfNamingConvention to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

