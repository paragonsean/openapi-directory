/*
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PAMAssetsAllOfEmbeddedItemsInnerAllOfReferenceFilesInner;
import org.openapitools.client.model.PAMAssetsAllOfEmbeddedItemsInnerAllOfVariationFilesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeprecatedAsset
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:41.357707-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeprecatedAsset {
  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<String> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_END_OF_USE = "end_of_use";
  @SerializedName(SERIALIZED_NAME_END_OF_USE)
  private String endOfUse;

  public static final String SERIALIZED_NAME_LOCALIZABLE = "localizable";
  @SerializedName(SERIALIZED_NAME_LOCALIZABLE)
  private Boolean localizable = false;

  public static final String SERIALIZED_NAME_REFERENCE_FILES = "reference_files";
  @SerializedName(SERIALIZED_NAME_REFERENCE_FILES)
  private List<PAMAssetsAllOfEmbeddedItemsInnerAllOfReferenceFilesInner> referenceFiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_VARIATION_FILES = "variation_files";
  @SerializedName(SERIALIZED_NAME_VARIATION_FILES)
  private List<PAMAssetsAllOfEmbeddedItemsInnerAllOfVariationFilesInner> variationFiles = new ArrayList<>();

  public DeprecatedAsset() {
  }

  public DeprecatedAsset categories(List<String> categories) {
    this.categories = categories;
    return this;
  }

  public DeprecatedAsset addCategoriesItem(String categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * Codes of the PAM asset categories in which the asset is classified
   * @return categories
   */
  @javax.annotation.Nullable
  public List<String> getCategories() {
    return categories;
  }

  public void setCategories(List<String> categories) {
    this.categories = categories;
  }


  public DeprecatedAsset code(String code) {
    this.code = code;
    return this;
  }

  /**
   * PAM asset code
   * @return code
   */
  @javax.annotation.Nonnull
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public DeprecatedAsset description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the PAM asset
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DeprecatedAsset endOfUse(String endOfUse) {
    this.endOfUse = endOfUse;
    return this;
  }

  /**
   * Date on which the PAM asset expire
   * @return endOfUse
   */
  @javax.annotation.Nullable
  public String getEndOfUse() {
    return endOfUse;
  }

  public void setEndOfUse(String endOfUse) {
    this.endOfUse = endOfUse;
  }


  public DeprecatedAsset localizable(Boolean localizable) {
    this.localizable = localizable;
    return this;
  }

  /**
   * Whether the asset is localized or not, meaning if you want to have different reference files for each of your locale
   * @return localizable
   */
  @javax.annotation.Nullable
  public Boolean getLocalizable() {
    return localizable;
  }

  public void setLocalizable(Boolean localizable) {
    this.localizable = localizable;
  }


  public DeprecatedAsset referenceFiles(List<PAMAssetsAllOfEmbeddedItemsInnerAllOfReferenceFilesInner> referenceFiles) {
    this.referenceFiles = referenceFiles;
    return this;
  }

  public DeprecatedAsset addReferenceFilesItem(PAMAssetsAllOfEmbeddedItemsInnerAllOfReferenceFilesInner referenceFilesItem) {
    if (this.referenceFiles == null) {
      this.referenceFiles = new ArrayList<>();
    }
    this.referenceFiles.add(referenceFilesItem);
    return this;
  }

  /**
   * Reference files of the PAM asset
   * @return referenceFiles
   */
  @javax.annotation.Nullable
  public List<PAMAssetsAllOfEmbeddedItemsInnerAllOfReferenceFilesInner> getReferenceFiles() {
    return referenceFiles;
  }

  public void setReferenceFiles(List<PAMAssetsAllOfEmbeddedItemsInnerAllOfReferenceFilesInner> referenceFiles) {
    this.referenceFiles = referenceFiles;
  }


  public DeprecatedAsset tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public DeprecatedAsset addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Tags of the PAM asset
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public DeprecatedAsset variationFiles(List<PAMAssetsAllOfEmbeddedItemsInnerAllOfVariationFilesInner> variationFiles) {
    this.variationFiles = variationFiles;
    return this;
  }

  public DeprecatedAsset addVariationFilesItem(PAMAssetsAllOfEmbeddedItemsInnerAllOfVariationFilesInner variationFilesItem) {
    if (this.variationFiles == null) {
      this.variationFiles = new ArrayList<>();
    }
    this.variationFiles.add(variationFilesItem);
    return this;
  }

  /**
   * Variations of the PAM asset
   * @return variationFiles
   */
  @javax.annotation.Nullable
  public List<PAMAssetsAllOfEmbeddedItemsInnerAllOfVariationFilesInner> getVariationFiles() {
    return variationFiles;
  }

  public void setVariationFiles(List<PAMAssetsAllOfEmbeddedItemsInnerAllOfVariationFilesInner> variationFiles) {
    this.variationFiles = variationFiles;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeprecatedAsset deprecatedAsset = (DeprecatedAsset) o;
    return Objects.equals(this.categories, deprecatedAsset.categories) &&
        Objects.equals(this.code, deprecatedAsset.code) &&
        Objects.equals(this.description, deprecatedAsset.description) &&
        Objects.equals(this.endOfUse, deprecatedAsset.endOfUse) &&
        Objects.equals(this.localizable, deprecatedAsset.localizable) &&
        Objects.equals(this.referenceFiles, deprecatedAsset.referenceFiles) &&
        Objects.equals(this.tags, deprecatedAsset.tags) &&
        Objects.equals(this.variationFiles, deprecatedAsset.variationFiles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categories, code, description, endOfUse, localizable, referenceFiles, tags, variationFiles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeprecatedAsset {\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    endOfUse: ").append(toIndentedString(endOfUse)).append("\n");
    sb.append("    localizable: ").append(toIndentedString(localizable)).append("\n");
    sb.append("    referenceFiles: ").append(toIndentedString(referenceFiles)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    variationFiles: ").append(toIndentedString(variationFiles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categories");
    openapiFields.add("code");
    openapiFields.add("description");
    openapiFields.add("end_of_use");
    openapiFields.add("localizable");
    openapiFields.add("reference_files");
    openapiFields.add("tags");
    openapiFields.add("variation_files");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("code");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeprecatedAsset
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeprecatedAsset.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeprecatedAsset is not found in the empty JSON string", DeprecatedAsset.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeprecatedAsset.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeprecatedAsset` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeprecatedAsset.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull() && !jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
      }
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("end_of_use") != null && !jsonObj.get("end_of_use").isJsonNull()) && !jsonObj.get("end_of_use").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end_of_use` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end_of_use").toString()));
      }
      if (jsonObj.get("reference_files") != null && !jsonObj.get("reference_files").isJsonNull()) {
        JsonArray jsonArrayreferenceFiles = jsonObj.getAsJsonArray("reference_files");
        if (jsonArrayreferenceFiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reference_files").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reference_files` to be an array in the JSON string but got `%s`", jsonObj.get("reference_files").toString()));
          }

          // validate the optional field `reference_files` (array)
          for (int i = 0; i < jsonArrayreferenceFiles.size(); i++) {
            PAMAssetsAllOfEmbeddedItemsInnerAllOfReferenceFilesInner.validateJsonElement(jsonArrayreferenceFiles.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if (jsonObj.get("variation_files") != null && !jsonObj.get("variation_files").isJsonNull()) {
        JsonArray jsonArrayvariationFiles = jsonObj.getAsJsonArray("variation_files");
        if (jsonArrayvariationFiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("variation_files").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `variation_files` to be an array in the JSON string but got `%s`", jsonObj.get("variation_files").toString()));
          }

          // validate the optional field `variation_files` (array)
          for (int i = 0; i < jsonArrayvariationFiles.size(); i++) {
            PAMAssetsAllOfEmbeddedItemsInnerAllOfVariationFilesInner.validateJsonElement(jsonArrayvariationFiles.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeprecatedAsset.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeprecatedAsset' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeprecatedAsset> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeprecatedAsset.class));

       return (TypeAdapter<T>) new TypeAdapter<DeprecatedAsset>() {
           @Override
           public void write(JsonWriter out, DeprecatedAsset value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeprecatedAsset read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeprecatedAsset given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeprecatedAsset
   * @throws IOException if the JSON string is invalid with respect to DeprecatedAsset
   */
  public static DeprecatedAsset fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeprecatedAsset.class);
  }

  /**
   * Convert an instance of DeprecatedAsset to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

