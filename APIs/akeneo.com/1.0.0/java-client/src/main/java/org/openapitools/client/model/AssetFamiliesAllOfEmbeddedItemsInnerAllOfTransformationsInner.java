/*
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperations;
import org.openapitools.client.model.AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerSource;
import org.openapitools.client.model.AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerTarget;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:41.357707-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner {
  public static final String SERIALIZED_NAME_FILENAME_PREFIX = "filename_prefix";
  @SerializedName(SERIALIZED_NAME_FILENAME_PREFIX)
  private String filenamePrefix;

  public static final String SERIALIZED_NAME_FILENAME_SUFFIX = "filename_suffix";
  @SerializedName(SERIALIZED_NAME_FILENAME_SUFFIX)
  private String filenameSuffix;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_OPERATIONS = "operations";
  @SerializedName(SERIALIZED_NAME_OPERATIONS)
  private AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperations operations;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerSource source;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerTarget target;

  public AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner() {
  }

  public AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner filenamePrefix(String filenamePrefix) {
    this.filenamePrefix = filenamePrefix;
    return this;
  }

  /**
   * The prefix that will be prepended to the source filename to generate the target filename. More details &lt;a href&#x3D;&#39;/concepts/asset-manager.html#target-filename&#39;&gt;here&lt;/a&gt;.
   * @return filenamePrefix
   */
  @javax.annotation.Nullable
  public String getFilenamePrefix() {
    return filenamePrefix;
  }

  public void setFilenamePrefix(String filenamePrefix) {
    this.filenamePrefix = filenamePrefix;
  }


  public AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner filenameSuffix(String filenameSuffix) {
    this.filenameSuffix = filenameSuffix;
    return this;
  }

  /**
   * The suffix that will be appended to the source filename to generate the target filename. More details &lt;a href&#x3D;&#39;/concepts/asset-manager.html#target-filename&#39;&gt;here&lt;/a&gt;.
   * @return filenameSuffix
   */
  @javax.annotation.Nullable
  public String getFilenameSuffix() {
    return filenameSuffix;
  }

  public void setFilenameSuffix(String filenameSuffix) {
    this.filenameSuffix = filenameSuffix;
  }


  public AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner label(String label) {
    this.label = label;
    return this;
  }

  /**
   * The name of the transformation
   * @return label
   */
  @javax.annotation.Nonnull
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner operations(AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperations operations) {
    this.operations = operations;
    return this;
  }

  /**
   * Get operations
   * @return operations
   */
  @javax.annotation.Nonnull
  public AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperations getOperations() {
    return operations;
  }

  public void setOperations(AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperations operations) {
    this.operations = operations;
  }


  public AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner source(AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerSource source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nonnull
  public AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerSource getSource() {
    return source;
  }

  public void setSource(AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerSource source) {
    this.source = source;
  }


  public AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner target(AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerTarget target) {
    this.target = target;
    return this;
  }

  /**
   * Get target
   * @return target
   */
  @javax.annotation.Nonnull
  public AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerTarget getTarget() {
    return target;
  }

  public void setTarget(AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerTarget target) {
    this.target = target;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner assetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner = (AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner) o;
    return Objects.equals(this.filenamePrefix, assetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.filenamePrefix) &&
        Objects.equals(this.filenameSuffix, assetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.filenameSuffix) &&
        Objects.equals(this.label, assetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.label) &&
        Objects.equals(this.operations, assetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.operations) &&
        Objects.equals(this.source, assetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.source) &&
        Objects.equals(this.target, assetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.target);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filenamePrefix, filenameSuffix, label, operations, source, target);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner {\n");
    sb.append("    filenamePrefix: ").append(toIndentedString(filenamePrefix)).append("\n");
    sb.append("    filenameSuffix: ").append(toIndentedString(filenameSuffix)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    operations: ").append(toIndentedString(operations)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("filename_prefix");
    openapiFields.add("filename_suffix");
    openapiFields.add("label");
    openapiFields.add("operations");
    openapiFields.add("source");
    openapiFields.add("target");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("label");
    openapiRequiredFields.add("operations");
    openapiRequiredFields.add("source");
    openapiRequiredFields.add("target");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner is not found in the empty JSON string", AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("filename_prefix") != null && !jsonObj.get("filename_prefix").isJsonNull()) && !jsonObj.get("filename_prefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filename_prefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filename_prefix").toString()));
      }
      if ((jsonObj.get("filename_suffix") != null && !jsonObj.get("filename_suffix").isJsonNull()) && !jsonObj.get("filename_suffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filename_suffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filename_suffix").toString()));
      }
      if (!jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      // validate the required field `operations`
      AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperations.validateJsonElement(jsonObj.get("operations"));
      // validate the required field `source`
      AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerSource.validateJsonElement(jsonObj.get("source"));
      // validate the required field `target`
      AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerTarget.validateJsonElement(jsonObj.get("target"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner>() {
           @Override
           public void write(JsonWriter out, AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner
   * @throws IOException if the JSON string is invalid with respect to AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner
   */
  public static AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.class);
  }

  /**
   * Convert an instance of AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

