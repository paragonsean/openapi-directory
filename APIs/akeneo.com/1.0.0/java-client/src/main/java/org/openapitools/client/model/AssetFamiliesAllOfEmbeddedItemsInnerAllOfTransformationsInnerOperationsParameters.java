/*
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:41.357707-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters {
  public static final String SERIALIZED_NAME_COLORSPACE = "colorspace";
  @SerializedName(SERIALIZED_NAME_COLORSPACE)
  private String colorspace;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height;

  public static final String SERIALIZED_NAME_QUALITY = "quality";
  @SerializedName(SERIALIZED_NAME_QUALITY)
  private Integer quality;

  public static final String SERIALIZED_NAME_RATIO = "ratio";
  @SerializedName(SERIALIZED_NAME_RATIO)
  private Integer ratio;

  public static final String SERIALIZED_NAME_RESOLUTION_UNIT = "resolution-unit";
  @SerializedName(SERIALIZED_NAME_RESOLUTION_UNIT)
  private String resolutionUnit;

  public static final String SERIALIZED_NAME_RESOLUTION_X = "resolution-x";
  @SerializedName(SERIALIZED_NAME_RESOLUTION_X)
  private Integer resolutionX;

  public static final String SERIALIZED_NAME_RESOLUTION_Y = "resolution-y";
  @SerializedName(SERIALIZED_NAME_RESOLUTION_Y)
  private Integer resolutionY;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Integer width;

  public AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters() {
  }

  public AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters colorspace(String colorspace) {
    this.colorspace = colorspace;
    return this;
  }

  /**
   * Get colorspace
   * @return colorspace
   */
  @javax.annotation.Nullable
  public String getColorspace() {
    return colorspace;
  }

  public void setColorspace(String colorspace) {
    this.colorspace = colorspace;
  }


  public AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters height(Integer height) {
    this.height = height;
    return this;
  }

  /**
   * Get height
   * @return height
   */
  @javax.annotation.Nullable
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }


  public AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters quality(Integer quality) {
    this.quality = quality;
    return this;
  }

  /**
   * Get quality
   * @return quality
   */
  @javax.annotation.Nullable
  public Integer getQuality() {
    return quality;
  }

  public void setQuality(Integer quality) {
    this.quality = quality;
  }


  public AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters ratio(Integer ratio) {
    this.ratio = ratio;
    return this;
  }

  /**
   * Get ratio
   * @return ratio
   */
  @javax.annotation.Nullable
  public Integer getRatio() {
    return ratio;
  }

  public void setRatio(Integer ratio) {
    this.ratio = ratio;
  }


  public AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters resolutionUnit(String resolutionUnit) {
    this.resolutionUnit = resolutionUnit;
    return this;
  }

  /**
   * Get resolutionUnit
   * @return resolutionUnit
   */
  @javax.annotation.Nullable
  public String getResolutionUnit() {
    return resolutionUnit;
  }

  public void setResolutionUnit(String resolutionUnit) {
    this.resolutionUnit = resolutionUnit;
  }


  public AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters resolutionX(Integer resolutionX) {
    this.resolutionX = resolutionX;
    return this;
  }

  /**
   * Get resolutionX
   * @return resolutionX
   */
  @javax.annotation.Nullable
  public Integer getResolutionX() {
    return resolutionX;
  }

  public void setResolutionX(Integer resolutionX) {
    this.resolutionX = resolutionX;
  }


  public AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters resolutionY(Integer resolutionY) {
    this.resolutionY = resolutionY;
    return this;
  }

  /**
   * Get resolutionY
   * @return resolutionY
   */
  @javax.annotation.Nullable
  public Integer getResolutionY() {
    return resolutionY;
  }

  public void setResolutionY(Integer resolutionY) {
    this.resolutionY = resolutionY;
  }


  public AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters width(Integer width) {
    this.width = width;
    return this;
  }

  /**
   * Get width
   * @return width
   */
  @javax.annotation.Nullable
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters assetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters = (AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters) o;
    return Objects.equals(this.colorspace, assetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters.colorspace) &&
        Objects.equals(this.height, assetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters.height) &&
        Objects.equals(this.quality, assetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters.quality) &&
        Objects.equals(this.ratio, assetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters.ratio) &&
        Objects.equals(this.resolutionUnit, assetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters.resolutionUnit) &&
        Objects.equals(this.resolutionX, assetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters.resolutionX) &&
        Objects.equals(this.resolutionY, assetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters.resolutionY) &&
        Objects.equals(this.width, assetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(colorspace, height, quality, ratio, resolutionUnit, resolutionX, resolutionY, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters {\n");
    sb.append("    colorspace: ").append(toIndentedString(colorspace)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    quality: ").append(toIndentedString(quality)).append("\n");
    sb.append("    ratio: ").append(toIndentedString(ratio)).append("\n");
    sb.append("    resolutionUnit: ").append(toIndentedString(resolutionUnit)).append("\n");
    sb.append("    resolutionX: ").append(toIndentedString(resolutionX)).append("\n");
    sb.append("    resolutionY: ").append(toIndentedString(resolutionY)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("colorspace");
    openapiFields.add("height");
    openapiFields.add("quality");
    openapiFields.add("ratio");
    openapiFields.add("resolution-unit");
    openapiFields.add("resolution-x");
    openapiFields.add("resolution-y");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters is not found in the empty JSON string", AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("colorspace") != null && !jsonObj.get("colorspace").isJsonNull()) && !jsonObj.get("colorspace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `colorspace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("colorspace").toString()));
      }
      if ((jsonObj.get("resolution-unit") != null && !jsonObj.get("resolution-unit").isJsonNull()) && !jsonObj.get("resolution-unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resolution-unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resolution-unit").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters>() {
           @Override
           public void write(JsonWriter out, AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters
   * @throws IOException if the JSON string is invalid with respect to AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters
   */
  public static AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters.class);
  }

  /**
   * Convert an instance of AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperationsParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

