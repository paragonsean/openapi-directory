/*
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AssetFamiliesAllOfEmbeddedItemsInnerAllOfLabels;
import org.openapitools.client.model.AssetFamiliesAllOfEmbeddedItemsInnerAllOfNamingConvention;
import org.openapitools.client.model.AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInner;
import org.openapitools.client.model.AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner;
import org.openapitools.client.model.PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AssetFamiliesAllOfEmbeddedItemsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:41.357707-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssetFamiliesAllOfEmbeddedItemsInner {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks links;

  public static final String SERIALIZED_NAME_ATTRIBUTE_AS_MAIN_MEDIA = "attribute_as_main_media";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_AS_MAIN_MEDIA)
  private String attributeAsMainMedia = "First media file or media link attribute that was created";

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private AssetFamiliesAllOfEmbeddedItemsInnerAllOfLabels labels;

  public static final String SERIALIZED_NAME_NAMING_CONVENTION = "naming_convention";
  @SerializedName(SERIALIZED_NAME_NAMING_CONVENTION)
  private AssetFamiliesAllOfEmbeddedItemsInnerAllOfNamingConvention namingConvention;

  public static final String SERIALIZED_NAME_PRODUCT_LINK_RULES = "product_link_rules";
  @SerializedName(SERIALIZED_NAME_PRODUCT_LINK_RULES)
  private List<AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInner> productLinkRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSFORMATIONS = "transformations";
  @SerializedName(SERIALIZED_NAME_TRANSFORMATIONS)
  private List<AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner> transformations = new ArrayList<>();

  public AssetFamiliesAllOfEmbeddedItemsInner() {
  }

  public AssetFamiliesAllOfEmbeddedItemsInner links(PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks getLinks() {
    return links;
  }

  public void setLinks(PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks links) {
    this.links = links;
  }


  public AssetFamiliesAllOfEmbeddedItemsInner attributeAsMainMedia(String attributeAsMainMedia) {
    this.attributeAsMainMedia = attributeAsMainMedia;
    return this;
  }

  /**
   * Attribute code that is used as the main media of the asset family.
   * @return attributeAsMainMedia
   */
  @javax.annotation.Nullable
  public String getAttributeAsMainMedia() {
    return attributeAsMainMedia;
  }

  public void setAttributeAsMainMedia(String attributeAsMainMedia) {
    this.attributeAsMainMedia = attributeAsMainMedia;
  }


  public AssetFamiliesAllOfEmbeddedItemsInner code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Asset family code
   * @return code
   */
  @javax.annotation.Nonnull
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public AssetFamiliesAllOfEmbeddedItemsInner labels(AssetFamiliesAllOfEmbeddedItemsInnerAllOfLabels labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable
  public AssetFamiliesAllOfEmbeddedItemsInnerAllOfLabels getLabels() {
    return labels;
  }

  public void setLabels(AssetFamiliesAllOfEmbeddedItemsInnerAllOfLabels labels) {
    this.labels = labels;
  }


  public AssetFamiliesAllOfEmbeddedItemsInner namingConvention(AssetFamiliesAllOfEmbeddedItemsInnerAllOfNamingConvention namingConvention) {
    this.namingConvention = namingConvention;
    return this;
  }

  /**
   * Get namingConvention
   * @return namingConvention
   */
  @javax.annotation.Nullable
  public AssetFamiliesAllOfEmbeddedItemsInnerAllOfNamingConvention getNamingConvention() {
    return namingConvention;
  }

  public void setNamingConvention(AssetFamiliesAllOfEmbeddedItemsInnerAllOfNamingConvention namingConvention) {
    this.namingConvention = namingConvention;
  }


  public AssetFamiliesAllOfEmbeddedItemsInner productLinkRules(List<AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInner> productLinkRules) {
    this.productLinkRules = productLinkRules;
    return this;
  }

  public AssetFamiliesAllOfEmbeddedItemsInner addProductLinkRulesItem(AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInner productLinkRulesItem) {
    if (this.productLinkRules == null) {
      this.productLinkRules = new ArrayList<>();
    }
    this.productLinkRules.add(productLinkRulesItem);
    return this;
  }

  /**
   * The rules that will be run after the asset creation, in order to automatically link the assets of this family to a set of products. To understand the format of this property, see &lt;a href&#x3D;&#39;/concepts/asset-manager.html#focus-on-the-product-link-rule&#39;&gt;here&lt;/a&gt;.
   * @return productLinkRules
   */
  @javax.annotation.Nullable
  public List<AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInner> getProductLinkRules() {
    return productLinkRules;
  }

  public void setProductLinkRules(List<AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInner> productLinkRules) {
    this.productLinkRules = productLinkRules;
  }


  public AssetFamiliesAllOfEmbeddedItemsInner transformations(List<AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner> transformations) {
    this.transformations = transformations;
    return this;
  }

  public AssetFamiliesAllOfEmbeddedItemsInner addTransformationsItem(AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner transformationsItem) {
    if (this.transformations == null) {
      this.transformations = new ArrayList<>();
    }
    this.transformations.add(transformationsItem);
    return this;
  }

  /**
   * The transformations to perform on source files in order to generate new files into your asset attributes (only available since v4.0). To understand the format of this property, see &lt;a href&#x3D;&#39;/concepts/asset-manager.html#focus-on-the-transformations&#39;&gt;here&lt;/a&gt;.
   * @return transformations
   */
  @javax.annotation.Nullable
  public List<AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner> getTransformations() {
    return transformations;
  }

  public void setTransformations(List<AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner> transformations) {
    this.transformations = transformations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssetFamiliesAllOfEmbeddedItemsInner assetFamiliesAllOfEmbeddedItemsInner = (AssetFamiliesAllOfEmbeddedItemsInner) o;
    return Objects.equals(this.links, assetFamiliesAllOfEmbeddedItemsInner.links) &&
        Objects.equals(this.attributeAsMainMedia, assetFamiliesAllOfEmbeddedItemsInner.attributeAsMainMedia) &&
        Objects.equals(this.code, assetFamiliesAllOfEmbeddedItemsInner.code) &&
        Objects.equals(this.labels, assetFamiliesAllOfEmbeddedItemsInner.labels) &&
        Objects.equals(this.namingConvention, assetFamiliesAllOfEmbeddedItemsInner.namingConvention) &&
        Objects.equals(this.productLinkRules, assetFamiliesAllOfEmbeddedItemsInner.productLinkRules) &&
        Objects.equals(this.transformations, assetFamiliesAllOfEmbeddedItemsInner.transformations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, attributeAsMainMedia, code, labels, namingConvention, productLinkRules, transformations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssetFamiliesAllOfEmbeddedItemsInner {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    attributeAsMainMedia: ").append(toIndentedString(attributeAsMainMedia)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    namingConvention: ").append(toIndentedString(namingConvention)).append("\n");
    sb.append("    productLinkRules: ").append(toIndentedString(productLinkRules)).append("\n");
    sb.append("    transformations: ").append(toIndentedString(transformations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("attribute_as_main_media");
    openapiFields.add("code");
    openapiFields.add("labels");
    openapiFields.add("naming_convention");
    openapiFields.add("product_link_rules");
    openapiFields.add("transformations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("code");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssetFamiliesAllOfEmbeddedItemsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssetFamiliesAllOfEmbeddedItemsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssetFamiliesAllOfEmbeddedItemsInner is not found in the empty JSON string", AssetFamiliesAllOfEmbeddedItemsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssetFamiliesAllOfEmbeddedItemsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssetFamiliesAllOfEmbeddedItemsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AssetFamiliesAllOfEmbeddedItemsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `_links`
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks.validateJsonElement(jsonObj.get("_links"));
      }
      if ((jsonObj.get("attribute_as_main_media") != null && !jsonObj.get("attribute_as_main_media").isJsonNull()) && !jsonObj.get("attribute_as_main_media").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attribute_as_main_media` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attribute_as_main_media").toString()));
      }
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // validate the optional field `labels`
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull()) {
        AssetFamiliesAllOfEmbeddedItemsInnerAllOfLabels.validateJsonElement(jsonObj.get("labels"));
      }
      // validate the optional field `naming_convention`
      if (jsonObj.get("naming_convention") != null && !jsonObj.get("naming_convention").isJsonNull()) {
        AssetFamiliesAllOfEmbeddedItemsInnerAllOfNamingConvention.validateJsonElement(jsonObj.get("naming_convention"));
      }
      if (jsonObj.get("product_link_rules") != null && !jsonObj.get("product_link_rules").isJsonNull()) {
        JsonArray jsonArrayproductLinkRules = jsonObj.getAsJsonArray("product_link_rules");
        if (jsonArrayproductLinkRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("product_link_rules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `product_link_rules` to be an array in the JSON string but got `%s`", jsonObj.get("product_link_rules").toString()));
          }

          // validate the optional field `product_link_rules` (array)
          for (int i = 0; i < jsonArrayproductLinkRules.size(); i++) {
            AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInner.validateJsonElement(jsonArrayproductLinkRules.get(i));
          };
        }
      }
      if (jsonObj.get("transformations") != null && !jsonObj.get("transformations").isJsonNull()) {
        JsonArray jsonArraytransformations = jsonObj.getAsJsonArray("transformations");
        if (jsonArraytransformations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transformations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transformations` to be an array in the JSON string but got `%s`", jsonObj.get("transformations").toString()));
          }

          // validate the optional field `transformations` (array)
          for (int i = 0; i < jsonArraytransformations.size(); i++) {
            AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.validateJsonElement(jsonArraytransformations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssetFamiliesAllOfEmbeddedItemsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssetFamiliesAllOfEmbeddedItemsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssetFamiliesAllOfEmbeddedItemsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssetFamiliesAllOfEmbeddedItemsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<AssetFamiliesAllOfEmbeddedItemsInner>() {
           @Override
           public void write(JsonWriter out, AssetFamiliesAllOfEmbeddedItemsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssetFamiliesAllOfEmbeddedItemsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssetFamiliesAllOfEmbeddedItemsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssetFamiliesAllOfEmbeddedItemsInner
   * @throws IOException if the JSON string is invalid with respect to AssetFamiliesAllOfEmbeddedItemsInner
   */
  public static AssetFamiliesAllOfEmbeddedItemsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssetFamiliesAllOfEmbeddedItemsInner.class);
  }

  /**
   * Convert an instance of AssetFamiliesAllOfEmbeddedItemsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

