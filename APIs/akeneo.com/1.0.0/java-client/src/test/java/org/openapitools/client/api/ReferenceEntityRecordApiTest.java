/*
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.PatchAssets200ResponseInner;
import org.openapitools.client.model.PatchReferenceEntityRecordsCodeRequest;
import org.openapitools.client.model.PatchReferenceEntityRecordsRequestInner;
import org.openapitools.client.model.PostToken400Response;
import org.openapitools.client.model.ReferenceEntityRecord;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReferenceEntityRecordApi
 */
@Disabled
public class ReferenceEntityRecordApiTest {

    private final ReferenceEntityRecordApi api = new ReferenceEntityRecordApi();

    /**
     * Get the list of the records of a reference entity
     *
     * This endpoint allows you to get a list of records of a given reference entity. Records are paginated and can be filtered.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReferenceEntityRecordsTest() throws ApiException {
        String referenceEntityCode = null;
        String search = null;
        String channel = null;
        String locales = null;
        String searchAfter = null;
        ReferenceEntityRecord response = api.getReferenceEntityRecords(referenceEntityCode, search, channel, locales, searchAfter);
        // TODO: test validations
    }

    /**
     * Get a record of a given reference entity
     *
     * This endpoint allows you to get the information about a given record for a given reference entity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReferenceEntityRecordsCodeTest() throws ApiException {
        String referenceEntityCode = null;
        String code = null;
        PatchReferenceEntityRecordsRequestInner response = api.getReferenceEntityRecordsCode(referenceEntityCode, code);
        // TODO: test validations
    }

    /**
     * Update/create several reference entity records
     *
     * This endpoint allows you to update and/or create several records of one given reference entity at once. Learn more about &lt;a href&#x3D;\&quot;/documentation/update.html#patch-reference-entity-record-values\&quot;&gt;Update behavior&lt;/a&gt;. Note that if the record does not already exist for the given reference entity, it creates it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchReferenceEntityRecordsTest() throws ApiException {
        String referenceEntityCode = null;
        List<PatchReferenceEntityRecordsRequestInner> body = null;
        List<PatchAssets200ResponseInner> response = api.patchReferenceEntityRecords(referenceEntityCode, body);
        // TODO: test validations
    }

    /**
     * Update/create a record of a given reference entity
     *
     * This endpoint allows you to update a given record of a given renference entity. Learn more about &lt;a href&#x3D;\&quot;/documentation/update.html#patch-reference-entity-record-values\&quot;&gt;Update behavior&lt;/a&gt;. Note that if the record does not already exist for the given reference entity, it creates it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchReferenceEntityRecordsCodeTest() throws ApiException {
        String referenceEntityCode = null;
        String code = null;
        PatchReferenceEntityRecordsCodeRequest body = null;
        api.patchReferenceEntityRecordsCode(referenceEntityCode, code, body);
        // TODO: test validations
    }

}
