/*
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.PatchAssetCategories200Response;
import org.openapitools.client.model.PatchProductsRequest;
import org.openapitools.client.model.PostProductsRequest;
import org.openapitools.client.model.PostToken400Response;
import org.openapitools.client.model.Products1;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductIdentifierApi
 */
@Disabled
public class ProductIdentifierApiTest {

    private final ProductIdentifierApi api = new ProductIdentifierApi();

    /**
     * Delete a product
     *
     * This endpoint allows you to delete a given product. In the Enterprise Edition, since the 2.0, permissions based on your user groups are applied to the product you try to delete.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProductsCodeTest() throws ApiException {
        String code = null;
        api.deleteProductsCode(code);
        // TODO: test validations
    }

    /**
     * Get a draft
     *
     * This endpoint allows you to get the information about a given draft.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDraftCodeTest() throws ApiException {
        String code = null;
        PostProductsRequest response = api.getDraftCode(code);
        // TODO: test validations
    }

    /**
     * Get list of products
     *
     * This endpoint allows you to get a list of products. Products are paginated and they can be filtered. In the Enterprise Edition, since the 2.0, permissions based on your user groups are applied to the set of products you request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductsTest() throws ApiException {
        String search = null;
        String scope = null;
        String locales = null;
        String attributes = null;
        String paginationType = null;
        Integer page = null;
        String searchAfter = null;
        Integer limit = null;
        Boolean withCount = null;
        Boolean withAttributeOptions = null;
        Boolean withQualityScores = null;
        Boolean withCompletenesses = null;
        Products1 response = api.getProducts(search, scope, locales, attributes, paginationType, page, searchAfter, limit, withCount, withAttributeOptions, withQualityScores, withCompletenesses);
        // TODO: test validations
    }

    /**
     * Get a product
     *
     * This endpoint allows you to get the information about a given product. In the Entreprise Edition, since the v2.0, permissions based on your user groups are applied to the product you request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductsCodeTest() throws ApiException {
        String code = null;
        Boolean withAttributeOptions = null;
        Boolean withQualityScores = null;
        Boolean withCompletenesses = null;
        PostProductsRequest response = api.getProductsCode(code, withAttributeOptions, withQualityScores, withCompletenesses);
        // TODO: test validations
    }

    /**
     * Update/create several products
     *
     * This endpoint allows you to update and/or create several products at once. Learn more about &lt;a href&#x3D;\&quot;/documentation/update.html#update-behavior\&quot;&gt;Update behavior&lt;/a&gt;. Note that if no product exists for the given identifier, it creates it. In the Enterprise Edition, since the v2.0, permissions based on your user groups are applied to the products you try to update. It may result in the creation of drafts if you only have edit rights through the product&#39;s categories.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchProductsTest() throws ApiException {
        PatchProductsRequest body = null;
        PatchAssetCategories200Response response = api.patchProducts(body);
        // TODO: test validations
    }

    /**
     * Update/create a product
     *
     * This endpoint allows you to update a given product. Learn more about &lt;a href&#x3D;\&quot;/documentation/update.html#update-behavior\&quot;&gt;Update behavior&lt;/a&gt;. Note that if no product exists for the given identifier, it creates it. In the Entreprise Edition, since the v2.0, permissions based on your user groups are applied to the product you try to update. It may result in the creation of a draft if you only have edit rights through the product&#39;s categories.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchProductsCodeTest() throws ApiException {
        String code = null;
        PostProductsRequest body = null;
        api.patchProductsCode(code, body);
        // TODO: test validations
    }

    /**
     * Create a new product
     *
     * This endpoint allows you to create a new product. In the Enterprise Edition, since the v2.0, permissions based on your user groups are applied to the product you try to create.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postProductsTest() throws ApiException {
        PostProductsRequest body = null;
        api.postProducts(body);
        // TODO: test validations
    }

    /**
     * Submit a draft for approval
     *
     * This endpoint allows you to submit a draft for approval.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postProposalTest() throws ApiException {
        String code = null;
        api.postProposal(code);
        // TODO: test validations
    }

}
