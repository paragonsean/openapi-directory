/*
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.PatchProductsUuid200Response;
import org.openapitools.client.model.PatchProductsUuidRequest;
import org.openapitools.client.model.PostProductsUuidRequest;
import org.openapitools.client.model.PostToken400Response;
import org.openapitools.client.model.Products2;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductUuidApi
 */
@Disabled
public class ProductUuidApiTest {

    private final ProductUuidApi api = new ProductUuidApi();

    /**
     * Delete a product
     *
     * This endpoint allows you to delete a given product. In the Enterprise Edition, permissions based on your user groups are applied to the product you try to delete.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProductsUuidUuidTest() throws ApiException {
        String uuid = null;
        api.deleteProductsUuidUuid(uuid);
        // TODO: test validations
    }

    /**
     * Get a draft
     *
     * This endpoint allows you to get the information about a given draft.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDraftUuidUuidTest() throws ApiException {
        String uuid = null;
        PostProductsUuidRequest response = api.getDraftUuidUuid(uuid);
        // TODO: test validations
    }

    /**
     * Get list of products
     *
     * This endpoint allows you to get a list of products. Products are paginated and they can be filtered. In the Enterprise Edition, permissions based on your user groups are applied to the set of products you request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductsUuidTest() throws ApiException {
        String search = null;
        String scope = null;
        String locales = null;
        String attributes = null;
        String paginationType = null;
        Integer page = null;
        String searchAfter = null;
        Integer limit = null;
        Boolean withCount = null;
        Boolean withAttributeOptions = null;
        Boolean withQualityScores = null;
        Boolean withCompletenesses = null;
        Products2 response = api.getProductsUuid(search, scope, locales, attributes, paginationType, page, searchAfter, limit, withCount, withAttributeOptions, withQualityScores, withCompletenesses);
        // TODO: test validations
    }

    /**
     * Get a product
     *
     * This endpoint allows you to get the information about a given product. In the Entreprise Edition, permissions based on your user groups are applied to the product you request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductsUuidUuidTest() throws ApiException {
        String uuid = null;
        Boolean withAttributeOptions = null;
        Boolean withQualityScores = null;
        Boolean withCompletenesses = null;
        PostProductsUuidRequest response = api.getProductsUuidUuid(uuid, withAttributeOptions, withQualityScores, withCompletenesses);
        // TODO: test validations
    }

    /**
     * Update/create several products
     *
     * This endpoint allows you to update and/or create several products at once. Learn more about &lt;a href&#x3D;\&quot;/documentation/update.html#update-behavior\&quot;&gt;Update behavior&lt;/a&gt;. Note that if no product exists for the given uuid, it creates it. In the Enterprise Edition, permissions based on your user groups are applied to the products you try to update. It may result in the creation of drafts if you only have edit rights through the product&#39;s categories.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchProductsUuidTest() throws ApiException {
        PatchProductsUuidRequest body = null;
        PatchProductsUuid200Response response = api.patchProductsUuid(body);
        // TODO: test validations
    }

    /**
     * Update/create a product
     *
     * This endpoint allows you to update a given product. Learn more about &lt;a href&#x3D;\&quot;/documentation/update.html#update-behavior\&quot;&gt;Update behavior&lt;/a&gt;. Note that if no product exists for the given uuid, it creates it. In the Entreprise Edition, permissions based on your user groups are applied to the product you try to update. It may result in the creation of a draft if you only have edit rights through the product&#39;s categories.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchProductsUuidUuidTest() throws ApiException {
        String uuid = null;
        PostProductsUuidRequest body = null;
        api.patchProductsUuidUuid(uuid, body);
        // TODO: test validations
    }

    /**
     * Create a new product
     *
     * This endpoint allows you to create a new product. In the Enterprise Edition, permissions based on your user groups are applied to the product you try to create. If no uuid is provided, the PIM will generate one for you.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postProductsUuidTest() throws ApiException {
        PostProductsUuidRequest body = null;
        api.postProductsUuid(body);
        // TODO: test validations
    }

    /**
     * Submit a draft for approval
     *
     * This endpoint allows you to submit a draft for approval.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postProposalUuidTest() throws ApiException {
        String uuid = null;
        api.postProposalUuid(uuid);
        // TODO: test validations
    }

}
