/*
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GetReferenceEntitiesCode200Response;
import org.openapitools.client.model.PatchReferenceEntityCodeRequest;
import org.openapitools.client.model.PostToken400Response;
import org.openapitools.client.model.ReferenceEntities;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReferenceEntityApi
 */
@Disabled
public class ReferenceEntityApiTest {

    private final ReferenceEntityApi api = new ReferenceEntityApi();

    /**
     * Get list of reference entities
     *
     * This endpoint allows you to get a list of reference entities. Reference entities are paginated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReferenceEntitiesTest() throws ApiException {
        String searchAfter = null;
        ReferenceEntities response = api.getReferenceEntities(searchAfter);
        // TODO: test validations
    }

    /**
     * Get a reference entity
     *
     * This endpoint allows you to get the information about a given reference entity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReferenceEntitiesCodeTest() throws ApiException {
        String code = null;
        GetReferenceEntitiesCode200Response response = api.getReferenceEntitiesCode(code);
        // TODO: test validations
    }

    /**
     * Update/create a reference entity
     *
     * This endpoint allows you to update a given reference entity. Note that if the reference entity does not already exist, it creates it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchReferenceEntityCodeTest() throws ApiException {
        String code = null;
        PatchReferenceEntityCodeRequest body = null;
        api.patchReferenceEntityCode(code, body);
        // TODO: test validations
    }

}
