# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_asset_families_code_attributes200_response_inner_labels import GetAssetFamiliesCodeAttributes200ResponseInnerLabels
from openapi_server import util


class GetReferenceEntitiesCodeAttributes200ResponseInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_extensions: List[str]=None, code: str=None, decimals_allowed: bool=False, is_required_for_completeness: bool=False, is_rich_text_editor: bool=None, is_textarea: bool=False, labels: GetAssetFamiliesCodeAttributes200ResponseInnerLabels=None, max_characters: int=None, max_file_size: str=None, max_value: str=None, min_value: str=None, reference_entity_code: str=None, type: str=None, validation_regexp: str=None, validation_rule: str='none', value_per_channel: bool=False, value_per_locale: bool=False):
        """GetReferenceEntitiesCodeAttributes200ResponseInner - a model defined in OpenAPI

        :param allowed_extensions: The allowed_extensions of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :param code: The code of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :param decimals_allowed: The decimals_allowed of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :param is_required_for_completeness: The is_required_for_completeness of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :param is_rich_text_editor: The is_rich_text_editor of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :param is_textarea: The is_textarea of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :param labels: The labels of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :param max_characters: The max_characters of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :param max_file_size: The max_file_size of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :param max_value: The max_value of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :param min_value: The min_value of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :param reference_entity_code: The reference_entity_code of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :param type: The type of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :param validation_regexp: The validation_regexp of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :param validation_rule: The validation_rule of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :param value_per_channel: The value_per_channel of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :param value_per_locale: The value_per_locale of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        """
        self.openapi_types = {
            'allowed_extensions': List[str],
            'code': str,
            'decimals_allowed': bool,
            'is_required_for_completeness': bool,
            'is_rich_text_editor': bool,
            'is_textarea': bool,
            'labels': GetAssetFamiliesCodeAttributes200ResponseInnerLabels,
            'max_characters': int,
            'max_file_size': str,
            'max_value': str,
            'min_value': str,
            'reference_entity_code': str,
            'type': str,
            'validation_regexp': str,
            'validation_rule': str,
            'value_per_channel': bool,
            'value_per_locale': bool
        }

        self.attribute_map = {
            'allowed_extensions': 'allowed_extensions',
            'code': 'code',
            'decimals_allowed': 'decimals_allowed',
            'is_required_for_completeness': 'is_required_for_completeness',
            'is_rich_text_editor': 'is_rich_text_editor',
            'is_textarea': 'is_textarea',
            'labels': 'labels',
            'max_characters': 'max_characters',
            'max_file_size': 'max_file_size',
            'max_value': 'max_value',
            'min_value': 'min_value',
            'reference_entity_code': 'reference_entity_code',
            'type': 'type',
            'validation_regexp': 'validation_regexp',
            'validation_rule': 'validation_rule',
            'value_per_channel': 'value_per_channel',
            'value_per_locale': 'value_per_locale'
        }

        self._allowed_extensions = allowed_extensions
        self._code = code
        self._decimals_allowed = decimals_allowed
        self._is_required_for_completeness = is_required_for_completeness
        self._is_rich_text_editor = is_rich_text_editor
        self._is_textarea = is_textarea
        self._labels = labels
        self._max_characters = max_characters
        self._max_file_size = max_file_size
        self._max_value = max_value
        self._min_value = min_value
        self._reference_entity_code = reference_entity_code
        self._type = type
        self._validation_regexp = validation_regexp
        self._validation_rule = validation_rule
        self._value_per_channel = value_per_channel
        self._value_per_locale = value_per_locale

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetReferenceEntitiesCodeAttributes200ResponseInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_reference_entities__code__attributes_200_response_inner of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_extensions(self):
        """Gets the allowed_extensions of this GetReferenceEntitiesCodeAttributes200ResponseInner.

        Extensions allowed when the attribute type is `image`

        :return: The allowed_extensions of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :rtype: List[str]
        """
        return self._allowed_extensions

    @allowed_extensions.setter
    def allowed_extensions(self, allowed_extensions):
        """Sets the allowed_extensions of this GetReferenceEntitiesCodeAttributes200ResponseInner.

        Extensions allowed when the attribute type is `image`

        :param allowed_extensions: The allowed_extensions of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :type allowed_extensions: List[str]
        """

        self._allowed_extensions = allowed_extensions

    @property
    def code(self):
        """Gets the code of this GetReferenceEntitiesCodeAttributes200ResponseInner.

        Attribute code

        :return: The code of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this GetReferenceEntitiesCodeAttributes200ResponseInner.

        Attribute code

        :param code: The code of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def decimals_allowed(self):
        """Gets the decimals_allowed of this GetReferenceEntitiesCodeAttributes200ResponseInner.

        Whether decimals are allowed when the attribute type is `number`

        :return: The decimals_allowed of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :rtype: bool
        """
        return self._decimals_allowed

    @decimals_allowed.setter
    def decimals_allowed(self, decimals_allowed):
        """Sets the decimals_allowed of this GetReferenceEntitiesCodeAttributes200ResponseInner.

        Whether decimals are allowed when the attribute type is `number`

        :param decimals_allowed: The decimals_allowed of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :type decimals_allowed: bool
        """

        self._decimals_allowed = decimals_allowed

    @property
    def is_required_for_completeness(self):
        """Gets the is_required_for_completeness of this GetReferenceEntitiesCodeAttributes200ResponseInner.

        Whether the attribute should be part of the record's completeness calculation

        :return: The is_required_for_completeness of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :rtype: bool
        """
        return self._is_required_for_completeness

    @is_required_for_completeness.setter
    def is_required_for_completeness(self, is_required_for_completeness):
        """Sets the is_required_for_completeness of this GetReferenceEntitiesCodeAttributes200ResponseInner.

        Whether the attribute should be part of the record's completeness calculation

        :param is_required_for_completeness: The is_required_for_completeness of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :type is_required_for_completeness: bool
        """

        self._is_required_for_completeness = is_required_for_completeness

    @property
    def is_rich_text_editor(self):
        """Gets the is_rich_text_editor of this GetReferenceEntitiesCodeAttributes200ResponseInner.

        Whether the UI should display a rich text editor instead of a simple text area when the attribute type is `text`

        :return: The is_rich_text_editor of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :rtype: bool
        """
        return self._is_rich_text_editor

    @is_rich_text_editor.setter
    def is_rich_text_editor(self, is_rich_text_editor):
        """Sets the is_rich_text_editor of this GetReferenceEntitiesCodeAttributes200ResponseInner.

        Whether the UI should display a rich text editor instead of a simple text area when the attribute type is `text`

        :param is_rich_text_editor: The is_rich_text_editor of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :type is_rich_text_editor: bool
        """

        self._is_rich_text_editor = is_rich_text_editor

    @property
    def is_textarea(self):
        """Gets the is_textarea of this GetReferenceEntitiesCodeAttributes200ResponseInner.

        Whether the UI should display a text area instead of a simple field when the attribute type is `text`

        :return: The is_textarea of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :rtype: bool
        """
        return self._is_textarea

    @is_textarea.setter
    def is_textarea(self, is_textarea):
        """Sets the is_textarea of this GetReferenceEntitiesCodeAttributes200ResponseInner.

        Whether the UI should display a text area instead of a simple field when the attribute type is `text`

        :param is_textarea: The is_textarea of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :type is_textarea: bool
        """

        self._is_textarea = is_textarea

    @property
    def labels(self):
        """Gets the labels of this GetReferenceEntitiesCodeAttributes200ResponseInner.


        :return: The labels of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :rtype: GetAssetFamiliesCodeAttributes200ResponseInnerLabels
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GetReferenceEntitiesCodeAttributes200ResponseInner.


        :param labels: The labels of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :type labels: GetAssetFamiliesCodeAttributes200ResponseInnerLabels
        """

        self._labels = labels

    @property
    def max_characters(self):
        """Gets the max_characters of this GetReferenceEntitiesCodeAttributes200ResponseInner.

        Maximum number of characters allowed for the value of the attribute when the attribute type is `text`

        :return: The max_characters of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :rtype: int
        """
        return self._max_characters

    @max_characters.setter
    def max_characters(self, max_characters):
        """Sets the max_characters of this GetReferenceEntitiesCodeAttributes200ResponseInner.

        Maximum number of characters allowed for the value of the attribute when the attribute type is `text`

        :param max_characters: The max_characters of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :type max_characters: int
        """

        self._max_characters = max_characters

    @property
    def max_file_size(self):
        """Gets the max_file_size of this GetReferenceEntitiesCodeAttributes200ResponseInner.

        Max file size in MB when the attribute type is `image`

        :return: The max_file_size of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :rtype: str
        """
        return self._max_file_size

    @max_file_size.setter
    def max_file_size(self, max_file_size):
        """Sets the max_file_size of this GetReferenceEntitiesCodeAttributes200ResponseInner.

        Max file size in MB when the attribute type is `image`

        :param max_file_size: The max_file_size of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :type max_file_size: str
        """

        self._max_file_size = max_file_size

    @property
    def max_value(self):
        """Gets the max_value of this GetReferenceEntitiesCodeAttributes200ResponseInner.

        Maximum value allowed when the attribute type is `number`

        :return: The max_value of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :rtype: str
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this GetReferenceEntitiesCodeAttributes200ResponseInner.

        Maximum value allowed when the attribute type is `number`

        :param max_value: The max_value of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :type max_value: str
        """

        self._max_value = max_value

    @property
    def min_value(self):
        """Gets the min_value of this GetReferenceEntitiesCodeAttributes200ResponseInner.

        Minimum value allowed when the attribute type is `number`

        :return: The min_value of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :rtype: str
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this GetReferenceEntitiesCodeAttributes200ResponseInner.

        Minimum value allowed when the attribute type is `number`

        :param min_value: The min_value of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :type min_value: str
        """

        self._min_value = min_value

    @property
    def reference_entity_code(self):
        """Gets the reference_entity_code of this GetReferenceEntitiesCodeAttributes200ResponseInner.

        Code of the linked reference entity when the attribute type is `reference_entity_single_link` or `reference_entity_multiple_links`

        :return: The reference_entity_code of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :rtype: str
        """
        return self._reference_entity_code

    @reference_entity_code.setter
    def reference_entity_code(self, reference_entity_code):
        """Sets the reference_entity_code of this GetReferenceEntitiesCodeAttributes200ResponseInner.

        Code of the linked reference entity when the attribute type is `reference_entity_single_link` or `reference_entity_multiple_links`

        :param reference_entity_code: The reference_entity_code of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :type reference_entity_code: str
        """

        self._reference_entity_code = reference_entity_code

    @property
    def type(self):
        """Gets the type of this GetReferenceEntitiesCodeAttributes200ResponseInner.

        Attribute type. See <a href='/concepts/reference-entities.html#reference-entity-attribute'>type</a> section for more details.

        :return: The type of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetReferenceEntitiesCodeAttributes200ResponseInner.

        Attribute type. See <a href='/concepts/reference-entities.html#reference-entity-attribute'>type</a> section for more details.

        :param type: The type of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :type type: str
        """
        allowed_values = ["text", "image", "number", "single_option", "multiple_options", "reference_entity_single_link", "reference_entity_multiple_links"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def validation_regexp(self):
        """Gets the validation_regexp of this GetReferenceEntitiesCodeAttributes200ResponseInner.

        Regexp expression used to validate the attribute value when the attribute type is `text`

        :return: The validation_regexp of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :rtype: str
        """
        return self._validation_regexp

    @validation_regexp.setter
    def validation_regexp(self, validation_regexp):
        """Sets the validation_regexp of this GetReferenceEntitiesCodeAttributes200ResponseInner.

        Regexp expression used to validate the attribute value when the attribute type is `text`

        :param validation_regexp: The validation_regexp of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :type validation_regexp: str
        """

        self._validation_regexp = validation_regexp

    @property
    def validation_rule(self):
        """Gets the validation_rule of this GetReferenceEntitiesCodeAttributes200ResponseInner.

        Validation rule type used to validate the attribute value when the attribute type is `text`

        :return: The validation_rule of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :rtype: str
        """
        return self._validation_rule

    @validation_rule.setter
    def validation_rule(self, validation_rule):
        """Sets the validation_rule of this GetReferenceEntitiesCodeAttributes200ResponseInner.

        Validation rule type used to validate the attribute value when the attribute type is `text`

        :param validation_rule: The validation_rule of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :type validation_rule: str
        """
        allowed_values = ["email", "url", "regexp", "none"]  # noqa: E501
        if validation_rule not in allowed_values:
            raise ValueError(
                "Invalid value for `validation_rule` ({0}), must be one of {1}"
                .format(validation_rule, allowed_values)
            )

        self._validation_rule = validation_rule

    @property
    def value_per_channel(self):
        """Gets the value_per_channel of this GetReferenceEntitiesCodeAttributes200ResponseInner.

        Whether the attribute is scopable, i.e. can have one value by channel

        :return: The value_per_channel of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :rtype: bool
        """
        return self._value_per_channel

    @value_per_channel.setter
    def value_per_channel(self, value_per_channel):
        """Sets the value_per_channel of this GetReferenceEntitiesCodeAttributes200ResponseInner.

        Whether the attribute is scopable, i.e. can have one value by channel

        :param value_per_channel: The value_per_channel of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :type value_per_channel: bool
        """

        self._value_per_channel = value_per_channel

    @property
    def value_per_locale(self):
        """Gets the value_per_locale of this GetReferenceEntitiesCodeAttributes200ResponseInner.

        Whether the attribute is localizable, i.e. can have one value by locale

        :return: The value_per_locale of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :rtype: bool
        """
        return self._value_per_locale

    @value_per_locale.setter
    def value_per_locale(self, value_per_locale):
        """Sets the value_per_locale of this GetReferenceEntitiesCodeAttributes200ResponseInner.

        Whether the attribute is localizable, i.e. can have one value by locale

        :param value_per_locale: The value_per_locale of this GetReferenceEntitiesCodeAttributes200ResponseInner.
        :type value_per_locale: bool
        """

        self._value_per_locale = value_per_locale
