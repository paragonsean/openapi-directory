# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInnerProductSelectionsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel: str=None, _field: str=None, locale: str=None, operator: str=None, value: str=None):
        """AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInnerProductSelectionsInner - a model defined in OpenAPI

        :param channel: The channel of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInnerProductSelectionsInner.
        :param _field: The _field of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInnerProductSelectionsInner.
        :param locale: The locale of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInnerProductSelectionsInner.
        :param operator: The operator of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInnerProductSelectionsInner.
        :param value: The value of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInnerProductSelectionsInner.
        """
        self.openapi_types = {
            'channel': str,
            '_field': str,
            'locale': str,
            'operator': str,
            'value': str
        }

        self.attribute_map = {
            'channel': 'channel',
            '_field': 'field',
            'locale': 'locale',
            'operator': 'operator',
            'value': 'value'
        }

        self._channel = channel
        self.__field = _field
        self._locale = locale
        self._operator = operator
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInnerProductSelectionsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Asset_families_allOf__embedded_items_inner_allOf_product_link_rules_inner_product_selections_inner of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInnerProductSelectionsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel(self):
        """Gets the channel of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInnerProductSelectionsInner.


        :return: The channel of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInnerProductSelectionsInner.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInnerProductSelectionsInner.


        :param channel: The channel of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInnerProductSelectionsInner.
        :type channel: str
        """

        self._channel = channel

    @property
    def _field(self):
        """Gets the _field of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInnerProductSelectionsInner.


        :return: The _field of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInnerProductSelectionsInner.
        :rtype: str
        """
        return self.__field

    @_field.setter
    def _field(self, _field):
        """Sets the _field of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInnerProductSelectionsInner.


        :param _field: The _field of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInnerProductSelectionsInner.
        :type _field: str
        """
        if _field is None:
            raise ValueError("Invalid value for `_field`, must not be `None`")

        self.__field = _field

    @property
    def locale(self):
        """Gets the locale of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInnerProductSelectionsInner.


        :return: The locale of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInnerProductSelectionsInner.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInnerProductSelectionsInner.


        :param locale: The locale of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInnerProductSelectionsInner.
        :type locale: str
        """

        self._locale = locale

    @property
    def operator(self):
        """Gets the operator of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInnerProductSelectionsInner.


        :return: The operator of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInnerProductSelectionsInner.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInnerProductSelectionsInner.


        :param operator: The operator of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInnerProductSelectionsInner.
        :type operator: str
        """
        if operator is None:
            raise ValueError("Invalid value for `operator`, must not be `None`")

        self._operator = operator

    @property
    def value(self):
        """Gets the value of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInnerProductSelectionsInner.


        :return: The value of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInnerProductSelectionsInner.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInnerProductSelectionsInner.


        :param value: The value of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInnerProductSelectionsInner.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
