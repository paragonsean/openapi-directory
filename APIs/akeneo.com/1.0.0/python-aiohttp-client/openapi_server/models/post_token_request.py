# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostTokenRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, grant_type: str=None, password: str=None, username: str=None):
        """PostTokenRequest - a model defined in OpenAPI

        :param grant_type: The grant_type of this PostTokenRequest.
        :param password: The password of this PostTokenRequest.
        :param username: The username of this PostTokenRequest.
        """
        self.openapi_types = {
            'grant_type': str,
            'password': str,
            'username': str
        }

        self.attribute_map = {
            'grant_type': 'grant_type',
            'password': 'password',
            'username': 'username'
        }

        self._grant_type = grant_type
        self._password = password
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostTokenRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The post_token_request of this PostTokenRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def grant_type(self):
        """Gets the grant_type of this PostTokenRequest.

        Always equal to \"password\"

        :return: The grant_type of this PostTokenRequest.
        :rtype: str
        """
        return self._grant_type

    @grant_type.setter
    def grant_type(self, grant_type):
        """Sets the grant_type of this PostTokenRequest.

        Always equal to \"password\"

        :param grant_type: The grant_type of this PostTokenRequest.
        :type grant_type: str
        """
        if grant_type is None:
            raise ValueError("Invalid value for `grant_type`, must not be `None`")

        self._grant_type = grant_type

    @property
    def password(self):
        """Gets the password of this PostTokenRequest.

        Your PIM password

        :return: The password of this PostTokenRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this PostTokenRequest.

        Your PIM password

        :param password: The password of this PostTokenRequest.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def username(self):
        """Gets the username of this PostTokenRequest.

        Your PIM username

        :return: The username of this PostTokenRequest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this PostTokenRequest.

        Your PIM username

        :param username: The username of this PostTokenRequest.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username
