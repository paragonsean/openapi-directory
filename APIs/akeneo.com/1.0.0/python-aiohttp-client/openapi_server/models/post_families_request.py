# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.families_all_of_embedded_items_inner_all_of_attribute_requirements import FamiliesAllOfEmbeddedItemsInnerAllOfAttributeRequirements
from openapi_server.models.families_all_of_embedded_items_inner_all_of_labels import FamiliesAllOfEmbeddedItemsInnerAllOfLabels
from openapi_server import util


class PostFamiliesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute_as_image: str='null', attribute_as_label: str=None, attribute_requirements: FamiliesAllOfEmbeddedItemsInnerAllOfAttributeRequirements=None, attributes: List[str]=None, code: str=None, labels: FamiliesAllOfEmbeddedItemsInnerAllOfLabels=None):
        """PostFamiliesRequest - a model defined in OpenAPI

        :param attribute_as_image: The attribute_as_image of this PostFamiliesRequest.
        :param attribute_as_label: The attribute_as_label of this PostFamiliesRequest.
        :param attribute_requirements: The attribute_requirements of this PostFamiliesRequest.
        :param attributes: The attributes of this PostFamiliesRequest.
        :param code: The code of this PostFamiliesRequest.
        :param labels: The labels of this PostFamiliesRequest.
        """
        self.openapi_types = {
            'attribute_as_image': str,
            'attribute_as_label': str,
            'attribute_requirements': FamiliesAllOfEmbeddedItemsInnerAllOfAttributeRequirements,
            'attributes': List[str],
            'code': str,
            'labels': FamiliesAllOfEmbeddedItemsInnerAllOfLabels
        }

        self.attribute_map = {
            'attribute_as_image': 'attribute_as_image',
            'attribute_as_label': 'attribute_as_label',
            'attribute_requirements': 'attribute_requirements',
            'attributes': 'attributes',
            'code': 'code',
            'labels': 'labels'
        }

        self._attribute_as_image = attribute_as_image
        self._attribute_as_label = attribute_as_label
        self._attribute_requirements = attribute_requirements
        self._attributes = attributes
        self._code = code
        self._labels = labels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostFamiliesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The post_families_request of this PostFamiliesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute_as_image(self):
        """Gets the attribute_as_image of this PostFamiliesRequest.

        Attribute code used as the main picture in the user interface (only since v2.0)

        :return: The attribute_as_image of this PostFamiliesRequest.
        :rtype: str
        """
        return self._attribute_as_image

    @attribute_as_image.setter
    def attribute_as_image(self, attribute_as_image):
        """Sets the attribute_as_image of this PostFamiliesRequest.

        Attribute code used as the main picture in the user interface (only since v2.0)

        :param attribute_as_image: The attribute_as_image of this PostFamiliesRequest.
        :type attribute_as_image: str
        """

        self._attribute_as_image = attribute_as_image

    @property
    def attribute_as_label(self):
        """Gets the attribute_as_label of this PostFamiliesRequest.

        Attribute code used as label

        :return: The attribute_as_label of this PostFamiliesRequest.
        :rtype: str
        """
        return self._attribute_as_label

    @attribute_as_label.setter
    def attribute_as_label(self, attribute_as_label):
        """Sets the attribute_as_label of this PostFamiliesRequest.

        Attribute code used as label

        :param attribute_as_label: The attribute_as_label of this PostFamiliesRequest.
        :type attribute_as_label: str
        """
        if attribute_as_label is None:
            raise ValueError("Invalid value for `attribute_as_label`, must not be `None`")

        self._attribute_as_label = attribute_as_label

    @property
    def attribute_requirements(self):
        """Gets the attribute_requirements of this PostFamiliesRequest.


        :return: The attribute_requirements of this PostFamiliesRequest.
        :rtype: FamiliesAllOfEmbeddedItemsInnerAllOfAttributeRequirements
        """
        return self._attribute_requirements

    @attribute_requirements.setter
    def attribute_requirements(self, attribute_requirements):
        """Sets the attribute_requirements of this PostFamiliesRequest.


        :param attribute_requirements: The attribute_requirements of this PostFamiliesRequest.
        :type attribute_requirements: FamiliesAllOfEmbeddedItemsInnerAllOfAttributeRequirements
        """

        self._attribute_requirements = attribute_requirements

    @property
    def attributes(self):
        """Gets the attributes of this PostFamiliesRequest.

        Attributes codes that compose the family

        :return: The attributes of this PostFamiliesRequest.
        :rtype: List[str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this PostFamiliesRequest.

        Attributes codes that compose the family

        :param attributes: The attributes of this PostFamiliesRequest.
        :type attributes: List[str]
        """

        self._attributes = attributes

    @property
    def code(self):
        """Gets the code of this PostFamiliesRequest.

        Family code

        :return: The code of this PostFamiliesRequest.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this PostFamiliesRequest.

        Family code

        :param code: The code of this PostFamiliesRequest.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def labels(self):
        """Gets the labels of this PostFamiliesRequest.


        :return: The labels of this PostFamiliesRequest.
        :rtype: FamiliesAllOfEmbeddedItemsInnerAllOfLabels
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this PostFamiliesRequest.


        :param labels: The labels of this PostFamiliesRequest.
        :type labels: FamiliesAllOfEmbeddedItemsInnerAllOfLabels
        """

        self._labels = labels
