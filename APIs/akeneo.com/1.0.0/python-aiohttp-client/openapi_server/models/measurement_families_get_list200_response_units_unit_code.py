# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.measurement_families_get_list200_response_units_unit_code_convert_from_standard_inner import MeasurementFamiliesGetList200ResponseUnitsUnitCodeConvertFromStandardInner
from openapi_server.models.measurement_families_get_list200_response_units_unit_code_labels import MeasurementFamiliesGetList200ResponseUnitsUnitCodeLabels
from openapi_server import util


class MeasurementFamiliesGetList200ResponseUnitsUnitCode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, convert_from_standard: List[MeasurementFamiliesGetList200ResponseUnitsUnitCodeConvertFromStandardInner]=None, labels: MeasurementFamiliesGetList200ResponseUnitsUnitCodeLabels=None, symbol: str=None):
        """MeasurementFamiliesGetList200ResponseUnitsUnitCode - a model defined in OpenAPI

        :param code: The code of this MeasurementFamiliesGetList200ResponseUnitsUnitCode.
        :param convert_from_standard: The convert_from_standard of this MeasurementFamiliesGetList200ResponseUnitsUnitCode.
        :param labels: The labels of this MeasurementFamiliesGetList200ResponseUnitsUnitCode.
        :param symbol: The symbol of this MeasurementFamiliesGetList200ResponseUnitsUnitCode.
        """
        self.openapi_types = {
            'code': str,
            'convert_from_standard': List[MeasurementFamiliesGetList200ResponseUnitsUnitCodeConvertFromStandardInner],
            'labels': MeasurementFamiliesGetList200ResponseUnitsUnitCodeLabels,
            'symbol': str
        }

        self.attribute_map = {
            'code': 'code',
            'convert_from_standard': 'convert_from_standard',
            'labels': 'labels',
            'symbol': 'symbol'
        }

        self._code = code
        self._convert_from_standard = convert_from_standard
        self._labels = labels
        self._symbol = symbol

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MeasurementFamiliesGetList200ResponseUnitsUnitCode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The measurement_families_get_list_200_response_units_unitCode of this MeasurementFamiliesGetList200ResponseUnitsUnitCode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this MeasurementFamiliesGetList200ResponseUnitsUnitCode.

        Measurement unit code. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.

        :return: The code of this MeasurementFamiliesGetList200ResponseUnitsUnitCode.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this MeasurementFamiliesGetList200ResponseUnitsUnitCode.

        Measurement unit code. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.

        :param code: The code of this MeasurementFamiliesGetList200ResponseUnitsUnitCode.
        :type code: str
        """

        self._code = code

    @property
    def convert_from_standard(self):
        """Gets the convert_from_standard of this MeasurementFamiliesGetList200ResponseUnitsUnitCode.

        Calculation to convert the unit from the standard unit. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.

        :return: The convert_from_standard of this MeasurementFamiliesGetList200ResponseUnitsUnitCode.
        :rtype: List[MeasurementFamiliesGetList200ResponseUnitsUnitCodeConvertFromStandardInner]
        """
        return self._convert_from_standard

    @convert_from_standard.setter
    def convert_from_standard(self, convert_from_standard):
        """Sets the convert_from_standard of this MeasurementFamiliesGetList200ResponseUnitsUnitCode.

        Calculation to convert the unit from the standard unit. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.

        :param convert_from_standard: The convert_from_standard of this MeasurementFamiliesGetList200ResponseUnitsUnitCode.
        :type convert_from_standard: List[MeasurementFamiliesGetList200ResponseUnitsUnitCodeConvertFromStandardInner]
        """

        self._convert_from_standard = convert_from_standard

    @property
    def labels(self):
        """Gets the labels of this MeasurementFamiliesGetList200ResponseUnitsUnitCode.


        :return: The labels of this MeasurementFamiliesGetList200ResponseUnitsUnitCode.
        :rtype: MeasurementFamiliesGetList200ResponseUnitsUnitCodeLabels
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this MeasurementFamiliesGetList200ResponseUnitsUnitCode.


        :param labels: The labels of this MeasurementFamiliesGetList200ResponseUnitsUnitCode.
        :type labels: MeasurementFamiliesGetList200ResponseUnitsUnitCodeLabels
        """

        self._labels = labels

    @property
    def symbol(self):
        """Gets the symbol of this MeasurementFamiliesGetList200ResponseUnitsUnitCode.

        Measurement unit symbol. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.

        :return: The symbol of this MeasurementFamiliesGetList200ResponseUnitsUnitCode.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this MeasurementFamiliesGetList200ResponseUnitsUnitCode.

        Measurement unit symbol. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.

        :param symbol: The symbol of this MeasurementFamiliesGetList200ResponseUnitsUnitCode.
        :type symbol: str
        """

        self._symbol = symbol
