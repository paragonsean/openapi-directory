# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.association_types_all_of_embedded_items_inner_all_of_labels import AssociationTypesAllOfEmbeddedItemsInnerAllOfLabels
from openapi_server import util


class AssociationType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, is_quantified: bool=False, is_two_way: bool=False, labels: AssociationTypesAllOfEmbeddedItemsInnerAllOfLabels=None):
        """AssociationType - a model defined in OpenAPI

        :param code: The code of this AssociationType.
        :param is_quantified: The is_quantified of this AssociationType.
        :param is_two_way: The is_two_way of this AssociationType.
        :param labels: The labels of this AssociationType.
        """
        self.openapi_types = {
            'code': str,
            'is_quantified': bool,
            'is_two_way': bool,
            'labels': AssociationTypesAllOfEmbeddedItemsInnerAllOfLabels
        }

        self.attribute_map = {
            'code': 'code',
            'is_quantified': 'is_quantified',
            'is_two_way': 'is_two_way',
            'labels': 'labels'
        }

        self._code = code
        self._is_quantified = is_quantified
        self._is_two_way = is_two_way
        self._labels = labels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociationType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssociationType of this AssociationType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this AssociationType.

        Association type code

        :return: The code of this AssociationType.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this AssociationType.

        Association type code

        :param code: The code of this AssociationType.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def is_quantified(self):
        """Gets the is_quantified of this AssociationType.

        When true, the association is a quantified association (Only available in the PIM Serenity version.)

        :return: The is_quantified of this AssociationType.
        :rtype: bool
        """
        return self._is_quantified

    @is_quantified.setter
    def is_quantified(self, is_quantified):
        """Sets the is_quantified of this AssociationType.

        When true, the association is a quantified association (Only available in the PIM Serenity version.)

        :param is_quantified: The is_quantified of this AssociationType.
        :type is_quantified: bool
        """

        self._is_quantified = is_quantified

    @property
    def is_two_way(self):
        """Gets the is_two_way of this AssociationType.

        When true, the association is a two-way association (Only available in the PIM Serenity version.)

        :return: The is_two_way of this AssociationType.
        :rtype: bool
        """
        return self._is_two_way

    @is_two_way.setter
    def is_two_way(self, is_two_way):
        """Sets the is_two_way of this AssociationType.

        When true, the association is a two-way association (Only available in the PIM Serenity version.)

        :param is_two_way: The is_two_way of this AssociationType.
        :type is_two_way: bool
        """

        self._is_two_way = is_two_way

    @property
    def labels(self):
        """Gets the labels of this AssociationType.


        :return: The labels of this AssociationType.
        :rtype: AssociationTypesAllOfEmbeddedItemsInnerAllOfLabels
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this AssociationType.


        :param labels: The labels of this AssociationType.
        :type labels: AssociationTypesAllOfEmbeddedItemsInnerAllOfLabels
        """

        self._labels = labels
