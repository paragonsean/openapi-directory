# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product_models_all_of_embedded_items_inner_all_of_quantified_associations_quantified_association_type_code_product_models_inner import ProductModelsAllOfEmbeddedItemsInnerAllOfQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsInner
from openapi_server.models.product_models_all_of_embedded_items_inner_all_of_quantified_associations_quantified_association_type_code_products_inner import ProductModelsAllOfEmbeddedItemsInnerAllOfQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsInner
from openapi_server import util


class Products1AllOfEmbeddedItemsInnerAllOfQuantifiedAssociationsQuantifiedAssociationTypeCode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, product_models: List[ProductModelsAllOfEmbeddedItemsInnerAllOfQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsInner]=None, products: List[ProductModelsAllOfEmbeddedItemsInnerAllOfQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsInner]=None):
        """Products1AllOfEmbeddedItemsInnerAllOfQuantifiedAssociationsQuantifiedAssociationTypeCode - a model defined in OpenAPI

        :param product_models: The product_models of this Products1AllOfEmbeddedItemsInnerAllOfQuantifiedAssociationsQuantifiedAssociationTypeCode.
        :param products: The products of this Products1AllOfEmbeddedItemsInnerAllOfQuantifiedAssociationsQuantifiedAssociationTypeCode.
        """
        self.openapi_types = {
            'product_models': List[ProductModelsAllOfEmbeddedItemsInnerAllOfQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsInner],
            'products': List[ProductModelsAllOfEmbeddedItemsInnerAllOfQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsInner]
        }

        self.attribute_map = {
            'product_models': 'product_models',
            'products': 'products'
        }

        self._product_models = product_models
        self._products = products

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Products1AllOfEmbeddedItemsInnerAllOfQuantifiedAssociationsQuantifiedAssociationTypeCode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Products_1_allOf__embedded_items_inner_allOf_quantified_associations_quantifiedAssociationTypeCode of this Products1AllOfEmbeddedItemsInnerAllOfQuantifiedAssociationsQuantifiedAssociationTypeCode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def product_models(self):
        """Gets the product_models of this Products1AllOfEmbeddedItemsInnerAllOfQuantifiedAssociationsQuantifiedAssociationTypeCode.

        Array of objects containing product model codes and quantities with which the product is in relation

        :return: The product_models of this Products1AllOfEmbeddedItemsInnerAllOfQuantifiedAssociationsQuantifiedAssociationTypeCode.
        :rtype: List[ProductModelsAllOfEmbeddedItemsInnerAllOfQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsInner]
        """
        return self._product_models

    @product_models.setter
    def product_models(self, product_models):
        """Sets the product_models of this Products1AllOfEmbeddedItemsInnerAllOfQuantifiedAssociationsQuantifiedAssociationTypeCode.

        Array of objects containing product model codes and quantities with which the product is in relation

        :param product_models: The product_models of this Products1AllOfEmbeddedItemsInnerAllOfQuantifiedAssociationsQuantifiedAssociationTypeCode.
        :type product_models: List[ProductModelsAllOfEmbeddedItemsInnerAllOfQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsInner]
        """

        self._product_models = product_models

    @property
    def products(self):
        """Gets the products of this Products1AllOfEmbeddedItemsInnerAllOfQuantifiedAssociationsQuantifiedAssociationTypeCode.

        Array of objects containing product identifiers and quantities with which the product is in relation

        :return: The products of this Products1AllOfEmbeddedItemsInnerAllOfQuantifiedAssociationsQuantifiedAssociationTypeCode.
        :rtype: List[ProductModelsAllOfEmbeddedItemsInnerAllOfQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsInner]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this Products1AllOfEmbeddedItemsInnerAllOfQuantifiedAssociationsQuantifiedAssociationTypeCode.

        Array of objects containing product identifiers and quantities with which the product is in relation

        :param products: The products of this Products1AllOfEmbeddedItemsInnerAllOfQuantifiedAssociationsQuantifiedAssociationTypeCode.
        :type products: List[ProductModelsAllOfEmbeddedItemsInnerAllOfQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsInner]
        """

        self._products = products
