# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MeasureFamiliesAllOfEmbeddedItemsInnerAllOfUnitsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, convert: object=None, symbol: str=None):
        """MeasureFamiliesAllOfEmbeddedItemsInnerAllOfUnitsInner - a model defined in OpenAPI

        :param code: The code of this MeasureFamiliesAllOfEmbeddedItemsInnerAllOfUnitsInner.
        :param convert: The convert of this MeasureFamiliesAllOfEmbeddedItemsInnerAllOfUnitsInner.
        :param symbol: The symbol of this MeasureFamiliesAllOfEmbeddedItemsInnerAllOfUnitsInner.
        """
        self.openapi_types = {
            'code': str,
            'convert': object,
            'symbol': str
        }

        self.attribute_map = {
            'code': 'code',
            'convert': 'convert',
            'symbol': 'symbol'
        }

        self._code = code
        self._convert = convert
        self._symbol = symbol

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MeasureFamiliesAllOfEmbeddedItemsInnerAllOfUnitsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Measure_Families_allOf__embedded_items_inner_allOf_units_inner of this MeasureFamiliesAllOfEmbeddedItemsInnerAllOfUnitsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this MeasureFamiliesAllOfEmbeddedItemsInnerAllOfUnitsInner.

        Measure code

        :return: The code of this MeasureFamiliesAllOfEmbeddedItemsInnerAllOfUnitsInner.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this MeasureFamiliesAllOfEmbeddedItemsInnerAllOfUnitsInner.

        Measure code

        :param code: The code of this MeasureFamiliesAllOfEmbeddedItemsInnerAllOfUnitsInner.
        :type code: str
        """

        self._code = code

    @property
    def convert(self):
        """Gets the convert of this MeasureFamiliesAllOfEmbeddedItemsInnerAllOfUnitsInner.

        Mathematic operation to convert the unit into the standard unit

        :return: The convert of this MeasureFamiliesAllOfEmbeddedItemsInnerAllOfUnitsInner.
        :rtype: object
        """
        return self._convert

    @convert.setter
    def convert(self, convert):
        """Sets the convert of this MeasureFamiliesAllOfEmbeddedItemsInnerAllOfUnitsInner.

        Mathematic operation to convert the unit into the standard unit

        :param convert: The convert of this MeasureFamiliesAllOfEmbeddedItemsInnerAllOfUnitsInner.
        :type convert: object
        """

        self._convert = convert

    @property
    def symbol(self):
        """Gets the symbol of this MeasureFamiliesAllOfEmbeddedItemsInnerAllOfUnitsInner.

        Measure symbol

        :return: The symbol of this MeasureFamiliesAllOfEmbeddedItemsInnerAllOfUnitsInner.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this MeasureFamiliesAllOfEmbeddedItemsInnerAllOfUnitsInner.

        Measure symbol

        :param symbol: The symbol of this MeasureFamiliesAllOfEmbeddedItemsInnerAllOfUnitsInner.
        :type symbol: str
        """

        self._symbol = symbol
