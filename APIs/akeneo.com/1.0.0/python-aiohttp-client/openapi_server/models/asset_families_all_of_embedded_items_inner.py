# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.asset_families_all_of_embedded_items_inner_all_of_labels import AssetFamiliesAllOfEmbeddedItemsInnerAllOfLabels
from openapi_server.models.asset_families_all_of_embedded_items_inner_all_of_naming_convention import AssetFamiliesAllOfEmbeddedItemsInnerAllOfNamingConvention
from openapi_server.models.asset_families_all_of_embedded_items_inner_all_of_product_link_rules_inner import AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInner
from openapi_server.models.asset_families_all_of_embedded_items_inner_all_of_transformations_inner import AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner
from openapi_server.models.pam_asset_categories_all_of_embedded_items_inner_all_of_links import PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks
from openapi_server import util


class AssetFamiliesAllOfEmbeddedItemsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks=None, attribute_as_main_media: str='First media file or media link attribute that was created', code: str=None, labels: AssetFamiliesAllOfEmbeddedItemsInnerAllOfLabels=None, naming_convention: AssetFamiliesAllOfEmbeddedItemsInnerAllOfNamingConvention=None, product_link_rules: List[AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInner]=None, transformations: List[AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner]=None):
        """AssetFamiliesAllOfEmbeddedItemsInner - a model defined in OpenAPI

        :param links: The links of this AssetFamiliesAllOfEmbeddedItemsInner.
        :param attribute_as_main_media: The attribute_as_main_media of this AssetFamiliesAllOfEmbeddedItemsInner.
        :param code: The code of this AssetFamiliesAllOfEmbeddedItemsInner.
        :param labels: The labels of this AssetFamiliesAllOfEmbeddedItemsInner.
        :param naming_convention: The naming_convention of this AssetFamiliesAllOfEmbeddedItemsInner.
        :param product_link_rules: The product_link_rules of this AssetFamiliesAllOfEmbeddedItemsInner.
        :param transformations: The transformations of this AssetFamiliesAllOfEmbeddedItemsInner.
        """
        self.openapi_types = {
            'links': PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks,
            'attribute_as_main_media': str,
            'code': str,
            'labels': AssetFamiliesAllOfEmbeddedItemsInnerAllOfLabels,
            'naming_convention': AssetFamiliesAllOfEmbeddedItemsInnerAllOfNamingConvention,
            'product_link_rules': List[AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInner],
            'transformations': List[AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner]
        }

        self.attribute_map = {
            'links': '_links',
            'attribute_as_main_media': 'attribute_as_main_media',
            'code': 'code',
            'labels': 'labels',
            'naming_convention': 'naming_convention',
            'product_link_rules': 'product_link_rules',
            'transformations': 'transformations'
        }

        self._links = links
        self._attribute_as_main_media = attribute_as_main_media
        self._code = code
        self._labels = labels
        self._naming_convention = naming_convention
        self._product_link_rules = product_link_rules
        self._transformations = transformations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssetFamiliesAllOfEmbeddedItemsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Asset_families_allOf__embedded_items_inner of this AssetFamiliesAllOfEmbeddedItemsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this AssetFamiliesAllOfEmbeddedItemsInner.


        :return: The links of this AssetFamiliesAllOfEmbeddedItemsInner.
        :rtype: PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AssetFamiliesAllOfEmbeddedItemsInner.


        :param links: The links of this AssetFamiliesAllOfEmbeddedItemsInner.
        :type links: PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks
        """

        self._links = links

    @property
    def attribute_as_main_media(self):
        """Gets the attribute_as_main_media of this AssetFamiliesAllOfEmbeddedItemsInner.

        Attribute code that is used as the main media of the asset family.

        :return: The attribute_as_main_media of this AssetFamiliesAllOfEmbeddedItemsInner.
        :rtype: str
        """
        return self._attribute_as_main_media

    @attribute_as_main_media.setter
    def attribute_as_main_media(self, attribute_as_main_media):
        """Sets the attribute_as_main_media of this AssetFamiliesAllOfEmbeddedItemsInner.

        Attribute code that is used as the main media of the asset family.

        :param attribute_as_main_media: The attribute_as_main_media of this AssetFamiliesAllOfEmbeddedItemsInner.
        :type attribute_as_main_media: str
        """

        self._attribute_as_main_media = attribute_as_main_media

    @property
    def code(self):
        """Gets the code of this AssetFamiliesAllOfEmbeddedItemsInner.

        Asset family code

        :return: The code of this AssetFamiliesAllOfEmbeddedItemsInner.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this AssetFamiliesAllOfEmbeddedItemsInner.

        Asset family code

        :param code: The code of this AssetFamiliesAllOfEmbeddedItemsInner.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def labels(self):
        """Gets the labels of this AssetFamiliesAllOfEmbeddedItemsInner.


        :return: The labels of this AssetFamiliesAllOfEmbeddedItemsInner.
        :rtype: AssetFamiliesAllOfEmbeddedItemsInnerAllOfLabels
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this AssetFamiliesAllOfEmbeddedItemsInner.


        :param labels: The labels of this AssetFamiliesAllOfEmbeddedItemsInner.
        :type labels: AssetFamiliesAllOfEmbeddedItemsInnerAllOfLabels
        """

        self._labels = labels

    @property
    def naming_convention(self):
        """Gets the naming_convention of this AssetFamiliesAllOfEmbeddedItemsInner.


        :return: The naming_convention of this AssetFamiliesAllOfEmbeddedItemsInner.
        :rtype: AssetFamiliesAllOfEmbeddedItemsInnerAllOfNamingConvention
        """
        return self._naming_convention

    @naming_convention.setter
    def naming_convention(self, naming_convention):
        """Sets the naming_convention of this AssetFamiliesAllOfEmbeddedItemsInner.


        :param naming_convention: The naming_convention of this AssetFamiliesAllOfEmbeddedItemsInner.
        :type naming_convention: AssetFamiliesAllOfEmbeddedItemsInnerAllOfNamingConvention
        """

        self._naming_convention = naming_convention

    @property
    def product_link_rules(self):
        """Gets the product_link_rules of this AssetFamiliesAllOfEmbeddedItemsInner.

        The rules that will be run after the asset creation, in order to automatically link the assets of this family to a set of products. To understand the format of this property, see <a href='/concepts/asset-manager.html#focus-on-the-product-link-rule'>here</a>.

        :return: The product_link_rules of this AssetFamiliesAllOfEmbeddedItemsInner.
        :rtype: List[AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInner]
        """
        return self._product_link_rules

    @product_link_rules.setter
    def product_link_rules(self, product_link_rules):
        """Sets the product_link_rules of this AssetFamiliesAllOfEmbeddedItemsInner.

        The rules that will be run after the asset creation, in order to automatically link the assets of this family to a set of products. To understand the format of this property, see <a href='/concepts/asset-manager.html#focus-on-the-product-link-rule'>here</a>.

        :param product_link_rules: The product_link_rules of this AssetFamiliesAllOfEmbeddedItemsInner.
        :type product_link_rules: List[AssetFamiliesAllOfEmbeddedItemsInnerAllOfProductLinkRulesInner]
        """

        self._product_link_rules = product_link_rules

    @property
    def transformations(self):
        """Gets the transformations of this AssetFamiliesAllOfEmbeddedItemsInner.

        The transformations to perform on source files in order to generate new files into your asset attributes (only available since v4.0). To understand the format of this property, see <a href='/concepts/asset-manager.html#focus-on-the-transformations'>here</a>.

        :return: The transformations of this AssetFamiliesAllOfEmbeddedItemsInner.
        :rtype: List[AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner]
        """
        return self._transformations

    @transformations.setter
    def transformations(self, transformations):
        """Sets the transformations of this AssetFamiliesAllOfEmbeddedItemsInner.

        The transformations to perform on source files in order to generate new files into your asset attributes (only available since v4.0). To understand the format of this property, see <a href='/concepts/asset-manager.html#focus-on-the-transformations'>here</a>.

        :param transformations: The transformations of this AssetFamiliesAllOfEmbeddedItemsInner.
        :type transformations: List[AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner]
        """

        self._transformations = transformations
