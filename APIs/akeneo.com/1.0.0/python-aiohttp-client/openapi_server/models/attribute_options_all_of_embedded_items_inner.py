# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attribute_options_all_of_embedded_items_inner_all_of_labels import AttributeOptionsAllOfEmbeddedItemsInnerAllOfLabels
from openapi_server.models.pam_asset_categories_all_of_embedded_items_inner_all_of_links import PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks
from openapi_server import util


class AttributeOptionsAllOfEmbeddedItemsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks=None, attribute: str=None, code: str=None, labels: AttributeOptionsAllOfEmbeddedItemsInnerAllOfLabels=None, sort_order: int=None):
        """AttributeOptionsAllOfEmbeddedItemsInner - a model defined in OpenAPI

        :param links: The links of this AttributeOptionsAllOfEmbeddedItemsInner.
        :param attribute: The attribute of this AttributeOptionsAllOfEmbeddedItemsInner.
        :param code: The code of this AttributeOptionsAllOfEmbeddedItemsInner.
        :param labels: The labels of this AttributeOptionsAllOfEmbeddedItemsInner.
        :param sort_order: The sort_order of this AttributeOptionsAllOfEmbeddedItemsInner.
        """
        self.openapi_types = {
            'links': PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks,
            'attribute': str,
            'code': str,
            'labels': AttributeOptionsAllOfEmbeddedItemsInnerAllOfLabels,
            'sort_order': int
        }

        self.attribute_map = {
            'links': '_links',
            'attribute': 'attribute',
            'code': 'code',
            'labels': 'labels',
            'sort_order': 'sort_order'
        }

        self._links = links
        self._attribute = attribute
        self._code = code
        self._labels = labels
        self._sort_order = sort_order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttributeOptionsAllOfEmbeddedItemsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attribute_Options_allOf__embedded_items_inner of this AttributeOptionsAllOfEmbeddedItemsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this AttributeOptionsAllOfEmbeddedItemsInner.


        :return: The links of this AttributeOptionsAllOfEmbeddedItemsInner.
        :rtype: PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AttributeOptionsAllOfEmbeddedItemsInner.


        :param links: The links of this AttributeOptionsAllOfEmbeddedItemsInner.
        :type links: PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks
        """

        self._links = links

    @property
    def attribute(self):
        """Gets the attribute of this AttributeOptionsAllOfEmbeddedItemsInner.

        Code of attribute related to the attribute option

        :return: The attribute of this AttributeOptionsAllOfEmbeddedItemsInner.
        :rtype: str
        """
        return self._attribute

    @attribute.setter
    def attribute(self, attribute):
        """Sets the attribute of this AttributeOptionsAllOfEmbeddedItemsInner.

        Code of attribute related to the attribute option

        :param attribute: The attribute of this AttributeOptionsAllOfEmbeddedItemsInner.
        :type attribute: str
        """

        self._attribute = attribute

    @property
    def code(self):
        """Gets the code of this AttributeOptionsAllOfEmbeddedItemsInner.

        Code of option

        :return: The code of this AttributeOptionsAllOfEmbeddedItemsInner.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this AttributeOptionsAllOfEmbeddedItemsInner.

        Code of option

        :param code: The code of this AttributeOptionsAllOfEmbeddedItemsInner.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def labels(self):
        """Gets the labels of this AttributeOptionsAllOfEmbeddedItemsInner.


        :return: The labels of this AttributeOptionsAllOfEmbeddedItemsInner.
        :rtype: AttributeOptionsAllOfEmbeddedItemsInnerAllOfLabels
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this AttributeOptionsAllOfEmbeddedItemsInner.


        :param labels: The labels of this AttributeOptionsAllOfEmbeddedItemsInner.
        :type labels: AttributeOptionsAllOfEmbeddedItemsInnerAllOfLabels
        """

        self._labels = labels

    @property
    def sort_order(self):
        """Gets the sort_order of this AttributeOptionsAllOfEmbeddedItemsInner.

        Order of attribute option

        :return: The sort_order of this AttributeOptionsAllOfEmbeddedItemsInner.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this AttributeOptionsAllOfEmbeddedItemsInner.

        Order of attribute option

        :param sort_order: The sort_order of this AttributeOptionsAllOfEmbeddedItemsInner.
        :type sort_order: int
        """

        self._sort_order = sort_order
