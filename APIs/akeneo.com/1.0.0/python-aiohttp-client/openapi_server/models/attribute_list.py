# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attributes_all_of_embedded_items_inner_all_of_group_labels import AttributesAllOfEmbeddedItemsInnerAllOfGroupLabels
from openapi_server.models.attributes_all_of_embedded_items_inner_all_of_table_configuration_inner import AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner
from openapi_server.models.get_asset_families_code_attributes200_response_inner_labels import GetAssetFamiliesCodeAttributes200ResponseInnerLabels
from openapi_server.models.pam_asset_categories_all_of_embedded_items_inner_all_of_links import PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks
from openapi_server import util


class AttributeList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks=None, allowed_extensions: List[str]=None, available_locales: List[str]=None, code: str=None, date_max: datetime=None, date_min: datetime=None, decimals_allowed: bool=None, default_metric_unit: str=None, default_value: bool=None, group: str=None, group_labels: AttributesAllOfEmbeddedItemsInnerAllOfGroupLabels=None, labels: GetAssetFamiliesCodeAttributes200ResponseInnerLabels=None, localizable: bool=False, max_characters: int=None, max_file_size: str=None, metric_family: str=None, negative_allowed: bool=None, number_max: str=None, number_min: str=None, reference_data_name: str=None, scopable: bool=False, sort_order: int=None, table_configuration: List[AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner]=None, type: str=None, unique: bool=None, useable_as_grid_filter: bool=None, validation_regexp: str=None, validation_rule: str=None, wysiwyg_enabled: bool=None):
        """AttributeList - a model defined in OpenAPI

        :param links: The links of this AttributeList.
        :param allowed_extensions: The allowed_extensions of this AttributeList.
        :param available_locales: The available_locales of this AttributeList.
        :param code: The code of this AttributeList.
        :param date_max: The date_max of this AttributeList.
        :param date_min: The date_min of this AttributeList.
        :param decimals_allowed: The decimals_allowed of this AttributeList.
        :param default_metric_unit: The default_metric_unit of this AttributeList.
        :param default_value: The default_value of this AttributeList.
        :param group: The group of this AttributeList.
        :param group_labels: The group_labels of this AttributeList.
        :param labels: The labels of this AttributeList.
        :param localizable: The localizable of this AttributeList.
        :param max_characters: The max_characters of this AttributeList.
        :param max_file_size: The max_file_size of this AttributeList.
        :param metric_family: The metric_family of this AttributeList.
        :param negative_allowed: The negative_allowed of this AttributeList.
        :param number_max: The number_max of this AttributeList.
        :param number_min: The number_min of this AttributeList.
        :param reference_data_name: The reference_data_name of this AttributeList.
        :param scopable: The scopable of this AttributeList.
        :param sort_order: The sort_order of this AttributeList.
        :param table_configuration: The table_configuration of this AttributeList.
        :param type: The type of this AttributeList.
        :param unique: The unique of this AttributeList.
        :param useable_as_grid_filter: The useable_as_grid_filter of this AttributeList.
        :param validation_regexp: The validation_regexp of this AttributeList.
        :param validation_rule: The validation_rule of this AttributeList.
        :param wysiwyg_enabled: The wysiwyg_enabled of this AttributeList.
        """
        self.openapi_types = {
            'links': PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks,
            'allowed_extensions': List[str],
            'available_locales': List[str],
            'code': str,
            'date_max': datetime,
            'date_min': datetime,
            'decimals_allowed': bool,
            'default_metric_unit': str,
            'default_value': bool,
            'group': str,
            'group_labels': AttributesAllOfEmbeddedItemsInnerAllOfGroupLabels,
            'labels': GetAssetFamiliesCodeAttributes200ResponseInnerLabels,
            'localizable': bool,
            'max_characters': int,
            'max_file_size': str,
            'metric_family': str,
            'negative_allowed': bool,
            'number_max': str,
            'number_min': str,
            'reference_data_name': str,
            'scopable': bool,
            'sort_order': int,
            'table_configuration': List[AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner],
            'type': str,
            'unique': bool,
            'useable_as_grid_filter': bool,
            'validation_regexp': str,
            'validation_rule': str,
            'wysiwyg_enabled': bool
        }

        self.attribute_map = {
            'links': '_links',
            'allowed_extensions': 'allowed_extensions',
            'available_locales': 'available_locales',
            'code': 'code',
            'date_max': 'date_max',
            'date_min': 'date_min',
            'decimals_allowed': 'decimals_allowed',
            'default_metric_unit': 'default_metric_unit',
            'default_value': 'default_value',
            'group': 'group',
            'group_labels': 'group_labels',
            'labels': 'labels',
            'localizable': 'localizable',
            'max_characters': 'max_characters',
            'max_file_size': 'max_file_size',
            'metric_family': 'metric_family',
            'negative_allowed': 'negative_allowed',
            'number_max': 'number_max',
            'number_min': 'number_min',
            'reference_data_name': 'reference_data_name',
            'scopable': 'scopable',
            'sort_order': 'sort_order',
            'table_configuration': 'table_configuration',
            'type': 'type',
            'unique': 'unique',
            'useable_as_grid_filter': 'useable_as_grid_filter',
            'validation_regexp': 'validation_regexp',
            'validation_rule': 'validation_rule',
            'wysiwyg_enabled': 'wysiwyg_enabled'
        }

        self._links = links
        self._allowed_extensions = allowed_extensions
        self._available_locales = available_locales
        self._code = code
        self._date_max = date_max
        self._date_min = date_min
        self._decimals_allowed = decimals_allowed
        self._default_metric_unit = default_metric_unit
        self._default_value = default_value
        self._group = group
        self._group_labels = group_labels
        self._labels = labels
        self._localizable = localizable
        self._max_characters = max_characters
        self._max_file_size = max_file_size
        self._metric_family = metric_family
        self._negative_allowed = negative_allowed
        self._number_max = number_max
        self._number_min = number_min
        self._reference_data_name = reference_data_name
        self._scopable = scopable
        self._sort_order = sort_order
        self._table_configuration = table_configuration
        self._type = type
        self._unique = unique
        self._useable_as_grid_filter = useable_as_grid_filter
        self._validation_regexp = validation_regexp
        self._validation_rule = validation_rule
        self._wysiwyg_enabled = wysiwyg_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttributeList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttributeList of this AttributeList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this AttributeList.


        :return: The links of this AttributeList.
        :rtype: PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AttributeList.


        :param links: The links of this AttributeList.
        :type links: PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks
        """

        self._links = links

    @property
    def allowed_extensions(self):
        """Gets the allowed_extensions of this AttributeList.

        Extensions allowed when the attribute type is `pim_catalog_file` or `pim_catalog_image`

        :return: The allowed_extensions of this AttributeList.
        :rtype: List[str]
        """
        return self._allowed_extensions

    @allowed_extensions.setter
    def allowed_extensions(self, allowed_extensions):
        """Sets the allowed_extensions of this AttributeList.

        Extensions allowed when the attribute type is `pim_catalog_file` or `pim_catalog_image`

        :param allowed_extensions: The allowed_extensions of this AttributeList.
        :type allowed_extensions: List[str]
        """

        self._allowed_extensions = allowed_extensions

    @property
    def available_locales(self):
        """Gets the available_locales of this AttributeList.

        To make the attribute locale specfic, specify here for which locales it is specific

        :return: The available_locales of this AttributeList.
        :rtype: List[str]
        """
        return self._available_locales

    @available_locales.setter
    def available_locales(self, available_locales):
        """Sets the available_locales of this AttributeList.

        To make the attribute locale specfic, specify here for which locales it is specific

        :param available_locales: The available_locales of this AttributeList.
        :type available_locales: List[str]
        """

        self._available_locales = available_locales

    @property
    def code(self):
        """Gets the code of this AttributeList.

        Attribute code

        :return: The code of this AttributeList.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this AttributeList.

        Attribute code

        :param code: The code of this AttributeList.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def date_max(self):
        """Gets the date_max of this AttributeList.

        Maximum date allowed when the attribute type is `pim_catalog_date`

        :return: The date_max of this AttributeList.
        :rtype: datetime
        """
        return self._date_max

    @date_max.setter
    def date_max(self, date_max):
        """Sets the date_max of this AttributeList.

        Maximum date allowed when the attribute type is `pim_catalog_date`

        :param date_max: The date_max of this AttributeList.
        :type date_max: datetime
        """

        self._date_max = date_max

    @property
    def date_min(self):
        """Gets the date_min of this AttributeList.

        Minimum date allowed when the attribute type is `pim_catalog_date`

        :return: The date_min of this AttributeList.
        :rtype: datetime
        """
        return self._date_min

    @date_min.setter
    def date_min(self, date_min):
        """Sets the date_min of this AttributeList.

        Minimum date allowed when the attribute type is `pim_catalog_date`

        :param date_min: The date_min of this AttributeList.
        :type date_min: datetime
        """

        self._date_min = date_min

    @property
    def decimals_allowed(self):
        """Gets the decimals_allowed of this AttributeList.

        Whether decimals are allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`

        :return: The decimals_allowed of this AttributeList.
        :rtype: bool
        """
        return self._decimals_allowed

    @decimals_allowed.setter
    def decimals_allowed(self, decimals_allowed):
        """Sets the decimals_allowed of this AttributeList.

        Whether decimals are allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`

        :param decimals_allowed: The decimals_allowed of this AttributeList.
        :type decimals_allowed: bool
        """

        self._decimals_allowed = decimals_allowed

    @property
    def default_metric_unit(self):
        """Gets the default_metric_unit of this AttributeList.

        Default metric unit when the attribute type is `pim_catalog_metric`

        :return: The default_metric_unit of this AttributeList.
        :rtype: str
        """
        return self._default_metric_unit

    @default_metric_unit.setter
    def default_metric_unit(self, default_metric_unit):
        """Sets the default_metric_unit of this AttributeList.

        Default metric unit when the attribute type is `pim_catalog_metric`

        :param default_metric_unit: The default_metric_unit of this AttributeList.
        :type default_metric_unit: str
        """

        self._default_metric_unit = default_metric_unit

    @property
    def default_value(self):
        """Gets the default_value of this AttributeList.

        Default value for a Yes/No attribute, applied when creating a new product or product model (only available since the 5.0)

        :return: The default_value of this AttributeList.
        :rtype: bool
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this AttributeList.

        Default value for a Yes/No attribute, applied when creating a new product or product model (only available since the 5.0)

        :param default_value: The default_value of this AttributeList.
        :type default_value: bool
        """

        self._default_value = default_value

    @property
    def group(self):
        """Gets the group of this AttributeList.

        Attribute group

        :return: The group of this AttributeList.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this AttributeList.

        Attribute group

        :param group: The group of this AttributeList.
        :type group: str
        """
        if group is None:
            raise ValueError("Invalid value for `group`, must not be `None`")

        self._group = group

    @property
    def group_labels(self):
        """Gets the group_labels of this AttributeList.


        :return: The group_labels of this AttributeList.
        :rtype: AttributesAllOfEmbeddedItemsInnerAllOfGroupLabels
        """
        return self._group_labels

    @group_labels.setter
    def group_labels(self, group_labels):
        """Sets the group_labels of this AttributeList.


        :param group_labels: The group_labels of this AttributeList.
        :type group_labels: AttributesAllOfEmbeddedItemsInnerAllOfGroupLabels
        """

        self._group_labels = group_labels

    @property
    def labels(self):
        """Gets the labels of this AttributeList.


        :return: The labels of this AttributeList.
        :rtype: GetAssetFamiliesCodeAttributes200ResponseInnerLabels
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this AttributeList.


        :param labels: The labels of this AttributeList.
        :type labels: GetAssetFamiliesCodeAttributes200ResponseInnerLabels
        """

        self._labels = labels

    @property
    def localizable(self):
        """Gets the localizable of this AttributeList.

        Whether the attribute is localizable, i.e. can have one value by locale

        :return: The localizable of this AttributeList.
        :rtype: bool
        """
        return self._localizable

    @localizable.setter
    def localizable(self, localizable):
        """Sets the localizable of this AttributeList.

        Whether the attribute is localizable, i.e. can have one value by locale

        :param localizable: The localizable of this AttributeList.
        :type localizable: bool
        """

        self._localizable = localizable

    @property
    def max_characters(self):
        """Gets the max_characters of this AttributeList.

        Number maximum of characters allowed for the value of the attribute when the attribute type is `pim_catalog_text`, `pim_catalog_textarea` or `pim_catalog_identifier`

        :return: The max_characters of this AttributeList.
        :rtype: int
        """
        return self._max_characters

    @max_characters.setter
    def max_characters(self, max_characters):
        """Sets the max_characters of this AttributeList.

        Number maximum of characters allowed for the value of the attribute when the attribute type is `pim_catalog_text`, `pim_catalog_textarea` or `pim_catalog_identifier`

        :param max_characters: The max_characters of this AttributeList.
        :type max_characters: int
        """

        self._max_characters = max_characters

    @property
    def max_file_size(self):
        """Gets the max_file_size of this AttributeList.

        Max file size in MB when the attribute type is `pim_catalog_file` or `pim_catalog_image`

        :return: The max_file_size of this AttributeList.
        :rtype: str
        """
        return self._max_file_size

    @max_file_size.setter
    def max_file_size(self, max_file_size):
        """Sets the max_file_size of this AttributeList.

        Max file size in MB when the attribute type is `pim_catalog_file` or `pim_catalog_image`

        :param max_file_size: The max_file_size of this AttributeList.
        :type max_file_size: str
        """

        self._max_file_size = max_file_size

    @property
    def metric_family(self):
        """Gets the metric_family of this AttributeList.

        Metric family when the attribute type is `pim_catalog_metric`

        :return: The metric_family of this AttributeList.
        :rtype: str
        """
        return self._metric_family

    @metric_family.setter
    def metric_family(self, metric_family):
        """Sets the metric_family of this AttributeList.

        Metric family when the attribute type is `pim_catalog_metric`

        :param metric_family: The metric_family of this AttributeList.
        :type metric_family: str
        """

        self._metric_family = metric_family

    @property
    def negative_allowed(self):
        """Gets the negative_allowed of this AttributeList.

        Whether negative values are allowed when the attribute type is `pim_catalog_metric` or `pim_catalog_number`

        :return: The negative_allowed of this AttributeList.
        :rtype: bool
        """
        return self._negative_allowed

    @negative_allowed.setter
    def negative_allowed(self, negative_allowed):
        """Sets the negative_allowed of this AttributeList.

        Whether negative values are allowed when the attribute type is `pim_catalog_metric` or `pim_catalog_number`

        :param negative_allowed: The negative_allowed of this AttributeList.
        :type negative_allowed: bool
        """

        self._negative_allowed = negative_allowed

    @property
    def number_max(self):
        """Gets the number_max of this AttributeList.

        Maximum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`

        :return: The number_max of this AttributeList.
        :rtype: str
        """
        return self._number_max

    @number_max.setter
    def number_max(self, number_max):
        """Sets the number_max of this AttributeList.

        Maximum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`

        :param number_max: The number_max of this AttributeList.
        :type number_max: str
        """

        self._number_max = number_max

    @property
    def number_min(self):
        """Gets the number_min of this AttributeList.

        Minimum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`

        :return: The number_min of this AttributeList.
        :rtype: str
        """
        return self._number_min

    @number_min.setter
    def number_min(self, number_min):
        """Sets the number_min of this AttributeList.

        Minimum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`

        :param number_min: The number_min of this AttributeList.
        :type number_min: str
        """

        self._number_min = number_min

    @property
    def reference_data_name(self):
        """Gets the reference_data_name of this AttributeList.

        Reference entity code when the attribute type is `akeneo_reference_entity` or `akeneo_reference_entity_collection` OR Asset family code when the attribute type is `pim_catalog_asset_collection`

        :return: The reference_data_name of this AttributeList.
        :rtype: str
        """
        return self._reference_data_name

    @reference_data_name.setter
    def reference_data_name(self, reference_data_name):
        """Sets the reference_data_name of this AttributeList.

        Reference entity code when the attribute type is `akeneo_reference_entity` or `akeneo_reference_entity_collection` OR Asset family code when the attribute type is `pim_catalog_asset_collection`

        :param reference_data_name: The reference_data_name of this AttributeList.
        :type reference_data_name: str
        """

        self._reference_data_name = reference_data_name

    @property
    def scopable(self):
        """Gets the scopable of this AttributeList.

        Whether the attribute is scopable, i.e. can have one value by channel

        :return: The scopable of this AttributeList.
        :rtype: bool
        """
        return self._scopable

    @scopable.setter
    def scopable(self, scopable):
        """Sets the scopable of this AttributeList.

        Whether the attribute is scopable, i.e. can have one value by channel

        :param scopable: The scopable of this AttributeList.
        :type scopable: bool
        """

        self._scopable = scopable

    @property
    def sort_order(self):
        """Gets the sort_order of this AttributeList.

        Order of the attribute in its group

        :return: The sort_order of this AttributeList.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this AttributeList.

        Order of the attribute in its group

        :param sort_order: The sort_order of this AttributeList.
        :type sort_order: int
        """

        self._sort_order = sort_order

    @property
    def table_configuration(self):
        """Gets the table_configuration of this AttributeList.

        Configuration of the Table attribute (columns)

        :return: The table_configuration of this AttributeList.
        :rtype: List[AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner]
        """
        return self._table_configuration

    @table_configuration.setter
    def table_configuration(self, table_configuration):
        """Sets the table_configuration of this AttributeList.

        Configuration of the Table attribute (columns)

        :param table_configuration: The table_configuration of this AttributeList.
        :type table_configuration: List[AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner]
        """

        self._table_configuration = table_configuration

    @property
    def type(self):
        """Gets the type of this AttributeList.

        Attribute type. See <a href='/concepts/catalog-structure.html#attribute'>type</a> section for more details.

        :return: The type of this AttributeList.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AttributeList.

        Attribute type. See <a href='/concepts/catalog-structure.html#attribute'>type</a> section for more details.

        :param type: The type of this AttributeList.
        :type type: str
        """
        allowed_values = ["pim_catalog_identifier", "pim_catalog_metric", "pim_catalog_number", "pim_catalog_reference_data_multi_select", "pim_catalog_reference_data_simple_select", "pim_catalog_simpleselect", "pim_catalog_multiselect", "pim_catalog_date", "pim_catalog_textarea", "pim_catalog_text", "pim_catalog_file", "pim_catalog_image", "pim_catalog_price_collection", "pim_catalog_boolean", "akeneo_reference_entity", "akeneo_reference_entity_collection", "pim_catalog_asset_collection"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def unique(self):
        """Gets the unique of this AttributeList.

        Whether two values for the attribute cannot be the same

        :return: The unique of this AttributeList.
        :rtype: bool
        """
        return self._unique

    @unique.setter
    def unique(self, unique):
        """Sets the unique of this AttributeList.

        Whether two values for the attribute cannot be the same

        :param unique: The unique of this AttributeList.
        :type unique: bool
        """

        self._unique = unique

    @property
    def useable_as_grid_filter(self):
        """Gets the useable_as_grid_filter of this AttributeList.

        Whether the attribute can be used as a filter for the product grid in the PIM user interface

        :return: The useable_as_grid_filter of this AttributeList.
        :rtype: bool
        """
        return self._useable_as_grid_filter

    @useable_as_grid_filter.setter
    def useable_as_grid_filter(self, useable_as_grid_filter):
        """Sets the useable_as_grid_filter of this AttributeList.

        Whether the attribute can be used as a filter for the product grid in the PIM user interface

        :param useable_as_grid_filter: The useable_as_grid_filter of this AttributeList.
        :type useable_as_grid_filter: bool
        """

        self._useable_as_grid_filter = useable_as_grid_filter

    @property
    def validation_regexp(self):
        """Gets the validation_regexp of this AttributeList.

        Regexp expression used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`

        :return: The validation_regexp of this AttributeList.
        :rtype: str
        """
        return self._validation_regexp

    @validation_regexp.setter
    def validation_regexp(self, validation_regexp):
        """Sets the validation_regexp of this AttributeList.

        Regexp expression used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`

        :param validation_regexp: The validation_regexp of this AttributeList.
        :type validation_regexp: str
        """

        self._validation_regexp = validation_regexp

    @property
    def validation_rule(self):
        """Gets the validation_rule of this AttributeList.

        Validation rule type used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`

        :return: The validation_rule of this AttributeList.
        :rtype: str
        """
        return self._validation_rule

    @validation_rule.setter
    def validation_rule(self, validation_rule):
        """Sets the validation_rule of this AttributeList.

        Validation rule type used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`

        :param validation_rule: The validation_rule of this AttributeList.
        :type validation_rule: str
        """

        self._validation_rule = validation_rule

    @property
    def wysiwyg_enabled(self):
        """Gets the wysiwyg_enabled of this AttributeList.

        Whether the WYSIWYG interface is shown when the attribute type is `pim_catalog_textarea`

        :return: The wysiwyg_enabled of this AttributeList.
        :rtype: bool
        """
        return self._wysiwyg_enabled

    @wysiwyg_enabled.setter
    def wysiwyg_enabled(self, wysiwyg_enabled):
        """Sets the wysiwyg_enabled of this AttributeList.

        Whether the WYSIWYG interface is shown when the attribute type is `pim_catalog_textarea`

        :param wysiwyg_enabled: The wysiwyg_enabled of this AttributeList.
        :type wysiwyg_enabled: bool
        """

        self._wysiwyg_enabled = wysiwyg_enabled
