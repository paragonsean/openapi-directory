# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pam_asset_categories_all_of_embedded_items_inner_all_of_links import PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks
from openapi_server.models.products1_all_of_embedded_items_inner_all_of_completenesses_inner import Products1AllOfEmbeddedItemsInnerAllOfCompletenessesInner
from openapi_server.models.products1_all_of_embedded_items_inner_all_of_metadata import Products1AllOfEmbeddedItemsInnerAllOfMetadata
from openapi_server.models.products1_all_of_embedded_items_inner_all_of_values import Products1AllOfEmbeddedItemsInnerAllOfValues
from openapi_server.models.products2_all_of_embedded_items_inner_all_of_associations import Products2AllOfEmbeddedItemsInnerAllOfAssociations
from openapi_server.models.products2_all_of_embedded_items_inner_all_of_quantified_associations import Products2AllOfEmbeddedItemsInnerAllOfQuantifiedAssociations
from openapi_server import util


class Products2AllOfEmbeddedItemsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks=None, associations: Products2AllOfEmbeddedItemsInnerAllOfAssociations=None, categories: List[str]=None, completenesses: List[Products1AllOfEmbeddedItemsInnerAllOfCompletenessesInner]=None, created: str=None, enabled: bool=True, family: str='null only in the case of a non variant product', groups: List[str]=None, metadata: Products1AllOfEmbeddedItemsInnerAllOfMetadata=None, parent: str='null', quality_scores: object=None, quantified_associations: Products2AllOfEmbeddedItemsInnerAllOfQuantifiedAssociations=None, updated: str=None, uuid: str=None, values: Products1AllOfEmbeddedItemsInnerAllOfValues=None):
        """Products2AllOfEmbeddedItemsInner - a model defined in OpenAPI

        :param links: The links of this Products2AllOfEmbeddedItemsInner.
        :param associations: The associations of this Products2AllOfEmbeddedItemsInner.
        :param categories: The categories of this Products2AllOfEmbeddedItemsInner.
        :param completenesses: The completenesses of this Products2AllOfEmbeddedItemsInner.
        :param created: The created of this Products2AllOfEmbeddedItemsInner.
        :param enabled: The enabled of this Products2AllOfEmbeddedItemsInner.
        :param family: The family of this Products2AllOfEmbeddedItemsInner.
        :param groups: The groups of this Products2AllOfEmbeddedItemsInner.
        :param metadata: The metadata of this Products2AllOfEmbeddedItemsInner.
        :param parent: The parent of this Products2AllOfEmbeddedItemsInner.
        :param quality_scores: The quality_scores of this Products2AllOfEmbeddedItemsInner.
        :param quantified_associations: The quantified_associations of this Products2AllOfEmbeddedItemsInner.
        :param updated: The updated of this Products2AllOfEmbeddedItemsInner.
        :param uuid: The uuid of this Products2AllOfEmbeddedItemsInner.
        :param values: The values of this Products2AllOfEmbeddedItemsInner.
        """
        self.openapi_types = {
            'links': PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks,
            'associations': Products2AllOfEmbeddedItemsInnerAllOfAssociations,
            'categories': List[str],
            'completenesses': List[Products1AllOfEmbeddedItemsInnerAllOfCompletenessesInner],
            'created': str,
            'enabled': bool,
            'family': str,
            'groups': List[str],
            'metadata': Products1AllOfEmbeddedItemsInnerAllOfMetadata,
            'parent': str,
            'quality_scores': object,
            'quantified_associations': Products2AllOfEmbeddedItemsInnerAllOfQuantifiedAssociations,
            'updated': str,
            'uuid': str,
            'values': Products1AllOfEmbeddedItemsInnerAllOfValues
        }

        self.attribute_map = {
            'links': '_links',
            'associations': 'associations',
            'categories': 'categories',
            'completenesses': 'completenesses',
            'created': 'created',
            'enabled': 'enabled',
            'family': 'family',
            'groups': 'groups',
            'metadata': 'metadata',
            'parent': 'parent',
            'quality_scores': 'quality_scores',
            'quantified_associations': 'quantified_associations',
            'updated': 'updated',
            'uuid': 'uuid',
            'values': 'values'
        }

        self._links = links
        self._associations = associations
        self._categories = categories
        self._completenesses = completenesses
        self._created = created
        self._enabled = enabled
        self._family = family
        self._groups = groups
        self._metadata = metadata
        self._parent = parent
        self._quality_scores = quality_scores
        self._quantified_associations = quantified_associations
        self._updated = updated
        self._uuid = uuid
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Products2AllOfEmbeddedItemsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Products_2_allOf__embedded_items_inner of this Products2AllOfEmbeddedItemsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this Products2AllOfEmbeddedItemsInner.


        :return: The links of this Products2AllOfEmbeddedItemsInner.
        :rtype: PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Products2AllOfEmbeddedItemsInner.


        :param links: The links of this Products2AllOfEmbeddedItemsInner.
        :type links: PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks
        """

        self._links = links

    @property
    def associations(self):
        """Gets the associations of this Products2AllOfEmbeddedItemsInner.


        :return: The associations of this Products2AllOfEmbeddedItemsInner.
        :rtype: Products2AllOfEmbeddedItemsInnerAllOfAssociations
        """
        return self._associations

    @associations.setter
    def associations(self, associations):
        """Sets the associations of this Products2AllOfEmbeddedItemsInner.


        :param associations: The associations of this Products2AllOfEmbeddedItemsInner.
        :type associations: Products2AllOfEmbeddedItemsInnerAllOfAssociations
        """

        self._associations = associations

    @property
    def categories(self):
        """Gets the categories of this Products2AllOfEmbeddedItemsInner.

        Codes of the <a href='api-reference.html#Category'>categories</a> in which the product is classified

        :return: The categories of this Products2AllOfEmbeddedItemsInner.
        :rtype: List[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this Products2AllOfEmbeddedItemsInner.

        Codes of the <a href='api-reference.html#Category'>categories</a> in which the product is classified

        :param categories: The categories of this Products2AllOfEmbeddedItemsInner.
        :type categories: List[str]
        """

        self._categories = categories

    @property
    def completenesses(self):
        """Gets the completenesses of this Products2AllOfEmbeddedItemsInner.

        Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the \"with_completenesses\" query parameter is set to \"true\")

        :return: The completenesses of this Products2AllOfEmbeddedItemsInner.
        :rtype: List[Products1AllOfEmbeddedItemsInnerAllOfCompletenessesInner]
        """
        return self._completenesses

    @completenesses.setter
    def completenesses(self, completenesses):
        """Sets the completenesses of this Products2AllOfEmbeddedItemsInner.

        Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the \"with_completenesses\" query parameter is set to \"true\")

        :param completenesses: The completenesses of this Products2AllOfEmbeddedItemsInner.
        :type completenesses: List[Products1AllOfEmbeddedItemsInnerAllOfCompletenessesInner]
        """

        self._completenesses = completenesses

    @property
    def created(self):
        """Gets the created of this Products2AllOfEmbeddedItemsInner.

        Date of creation

        :return: The created of this Products2AllOfEmbeddedItemsInner.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Products2AllOfEmbeddedItemsInner.

        Date of creation

        :param created: The created of this Products2AllOfEmbeddedItemsInner.
        :type created: str
        """

        self._created = created

    @property
    def enabled(self):
        """Gets the enabled of this Products2AllOfEmbeddedItemsInner.

        Whether the product is enabled

        :return: The enabled of this Products2AllOfEmbeddedItemsInner.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Products2AllOfEmbeddedItemsInner.

        Whether the product is enabled

        :param enabled: The enabled of this Products2AllOfEmbeddedItemsInner.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def family(self):
        """Gets the family of this Products2AllOfEmbeddedItemsInner.

        <a href='api-reference.html#Family'>Family</a> code from which the product inherits its attributes and attributes requirements.

        :return: The family of this Products2AllOfEmbeddedItemsInner.
        :rtype: str
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this Products2AllOfEmbeddedItemsInner.

        <a href='api-reference.html#Family'>Family</a> code from which the product inherits its attributes and attributes requirements.

        :param family: The family of this Products2AllOfEmbeddedItemsInner.
        :type family: str
        """

        self._family = family

    @property
    def groups(self):
        """Gets the groups of this Products2AllOfEmbeddedItemsInner.

        Codes of the groups to which the product belong

        :return: The groups of this Products2AllOfEmbeddedItemsInner.
        :rtype: List[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this Products2AllOfEmbeddedItemsInner.

        Codes of the groups to which the product belong

        :param groups: The groups of this Products2AllOfEmbeddedItemsInner.
        :type groups: List[str]
        """

        self._groups = groups

    @property
    def metadata(self):
        """Gets the metadata of this Products2AllOfEmbeddedItemsInner.


        :return: The metadata of this Products2AllOfEmbeddedItemsInner.
        :rtype: Products1AllOfEmbeddedItemsInnerAllOfMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Products2AllOfEmbeddedItemsInner.


        :param metadata: The metadata of this Products2AllOfEmbeddedItemsInner.
        :type metadata: Products1AllOfEmbeddedItemsInnerAllOfMetadata
        """

        self._metadata = metadata

    @property
    def parent(self):
        """Gets the parent of this Products2AllOfEmbeddedItemsInner.

        Code of the parent <a href='api-reference.html#Productmodel'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.

        :return: The parent of this Products2AllOfEmbeddedItemsInner.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Products2AllOfEmbeddedItemsInner.

        Code of the parent <a href='api-reference.html#Productmodel'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.

        :param parent: The parent of this Products2AllOfEmbeddedItemsInner.
        :type parent: str
        """

        self._parent = parent

    @property
    def quality_scores(self):
        """Gets the quality_scores of this Products2AllOfEmbeddedItemsInner.

        Product quality scores for each channel/locale combination (only available since the 5.0 and when the \"with_quality_scores\" query parameter is set to \"true\")

        :return: The quality_scores of this Products2AllOfEmbeddedItemsInner.
        :rtype: object
        """
        return self._quality_scores

    @quality_scores.setter
    def quality_scores(self, quality_scores):
        """Sets the quality_scores of this Products2AllOfEmbeddedItemsInner.

        Product quality scores for each channel/locale combination (only available since the 5.0 and when the \"with_quality_scores\" query parameter is set to \"true\")

        :param quality_scores: The quality_scores of this Products2AllOfEmbeddedItemsInner.
        :type quality_scores: object
        """

        self._quality_scores = quality_scores

    @property
    def quantified_associations(self):
        """Gets the quantified_associations of this Products2AllOfEmbeddedItemsInner.


        :return: The quantified_associations of this Products2AllOfEmbeddedItemsInner.
        :rtype: Products2AllOfEmbeddedItemsInnerAllOfQuantifiedAssociations
        """
        return self._quantified_associations

    @quantified_associations.setter
    def quantified_associations(self, quantified_associations):
        """Sets the quantified_associations of this Products2AllOfEmbeddedItemsInner.


        :param quantified_associations: The quantified_associations of this Products2AllOfEmbeddedItemsInner.
        :type quantified_associations: Products2AllOfEmbeddedItemsInnerAllOfQuantifiedAssociations
        """

        self._quantified_associations = quantified_associations

    @property
    def updated(self):
        """Gets the updated of this Products2AllOfEmbeddedItemsInner.

        Date of the last update

        :return: The updated of this Products2AllOfEmbeddedItemsInner.
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Products2AllOfEmbeddedItemsInner.

        Date of the last update

        :param updated: The updated of this Products2AllOfEmbeddedItemsInner.
        :type updated: str
        """

        self._updated = updated

    @property
    def uuid(self):
        """Gets the uuid of this Products2AllOfEmbeddedItemsInner.

        Product uuid

        :return: The uuid of this Products2AllOfEmbeddedItemsInner.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Products2AllOfEmbeddedItemsInner.

        Product uuid

        :param uuid: The uuid of this Products2AllOfEmbeddedItemsInner.
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def values(self):
        """Gets the values of this Products2AllOfEmbeddedItemsInner.


        :return: The values of this Products2AllOfEmbeddedItemsInner.
        :rtype: Products1AllOfEmbeddedItemsInnerAllOfValues
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this Products2AllOfEmbeddedItemsInner.


        :param values: The values of this Products2AllOfEmbeddedItemsInner.
        :type values: Products1AllOfEmbeddedItemsInnerAllOfValues
        """

        self._values = values
