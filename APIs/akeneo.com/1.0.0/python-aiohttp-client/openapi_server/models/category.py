# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.categories_all_of_embedded_items_inner_all_of_labels import CategoriesAllOfEmbeddedItemsInnerAllOfLabels
from openapi_server.models.categories_all_of_embedded_items_inner_all_of_values import CategoriesAllOfEmbeddedItemsInnerAllOfValues
from openapi_server import util


class Category(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, labels: CategoriesAllOfEmbeddedItemsInnerAllOfLabels=None, parent: str='null', position: int=None, updated: str=None, values: CategoriesAllOfEmbeddedItemsInnerAllOfValues=None):
        """Category - a model defined in OpenAPI

        :param code: The code of this Category.
        :param labels: The labels of this Category.
        :param parent: The parent of this Category.
        :param position: The position of this Category.
        :param updated: The updated of this Category.
        :param values: The values of this Category.
        """
        self.openapi_types = {
            'code': str,
            'labels': CategoriesAllOfEmbeddedItemsInnerAllOfLabels,
            'parent': str,
            'position': int,
            'updated': str,
            'values': CategoriesAllOfEmbeddedItemsInnerAllOfValues
        }

        self.attribute_map = {
            'code': 'code',
            'labels': 'labels',
            'parent': 'parent',
            'position': 'position',
            'updated': 'updated',
            'values': 'values'
        }

        self._code = code
        self._labels = labels
        self._parent = parent
        self._position = position
        self._updated = updated
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Category':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Category of this Category.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Category.

        Category code

        :return: The code of this Category.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Category.

        Category code

        :param code: The code of this Category.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def labels(self):
        """Gets the labels of this Category.


        :return: The labels of this Category.
        :rtype: CategoriesAllOfEmbeddedItemsInnerAllOfLabels
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Category.


        :param labels: The labels of this Category.
        :type labels: CategoriesAllOfEmbeddedItemsInnerAllOfLabels
        """

        self._labels = labels

    @property
    def parent(self):
        """Gets the parent of this Category.

        Category code of the parent's category

        :return: The parent of this Category.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Category.

        Category code of the parent's category

        :param parent: The parent of this Category.
        :type parent: str
        """

        self._parent = parent

    @property
    def position(self):
        """Gets the position of this Category.

        Position of the category in its level, start from 1 (only available since the 7.0 version and when query parameter \"with_position\" is set to \"true\")

        :return: The position of this Category.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Category.

        Position of the category in its level, start from 1 (only available since the 7.0 version and when query parameter \"with_position\" is set to \"true\")

        :param position: The position of this Category.
        :type position: int
        """

        self._position = position

    @property
    def updated(self):
        """Gets the updated of this Category.

        Date of the last update

        :return: The updated of this Category.
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Category.

        Date of the last update

        :param updated: The updated of this Category.
        :type updated: str
        """

        self._updated = updated

    @property
    def values(self):
        """Gets the values of this Category.


        :return: The values of this Category.
        :rtype: CategoriesAllOfEmbeddedItemsInnerAllOfValues
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this Category.


        :param values: The values of this Category.
        :type values: CategoriesAllOfEmbeddedItemsInnerAllOfValues
        """

        self._values = values
