# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.media_files_all_of_embedded_items_inner_all_of_links import MediaFilesAllOfEmbeddedItemsInnerAllOfLinks
from openapi_server import util


class MediaFilesAllOfEmbeddedItemsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: MediaFilesAllOfEmbeddedItemsInnerAllOfLinks=None, code: str=None, extension: str=None, mime_type: str=None, original_filename: str=None, size: int=None):
        """MediaFilesAllOfEmbeddedItemsInner - a model defined in OpenAPI

        :param links: The links of this MediaFilesAllOfEmbeddedItemsInner.
        :param code: The code of this MediaFilesAllOfEmbeddedItemsInner.
        :param extension: The extension of this MediaFilesAllOfEmbeddedItemsInner.
        :param mime_type: The mime_type of this MediaFilesAllOfEmbeddedItemsInner.
        :param original_filename: The original_filename of this MediaFilesAllOfEmbeddedItemsInner.
        :param size: The size of this MediaFilesAllOfEmbeddedItemsInner.
        """
        self.openapi_types = {
            'links': MediaFilesAllOfEmbeddedItemsInnerAllOfLinks,
            'code': str,
            'extension': str,
            'mime_type': str,
            'original_filename': str,
            'size': int
        }

        self.attribute_map = {
            'links': '_links',
            'code': 'code',
            'extension': 'extension',
            'mime_type': 'mime_type',
            'original_filename': 'original_filename',
            'size': 'size'
        }

        self._links = links
        self._code = code
        self._extension = extension
        self._mime_type = mime_type
        self._original_filename = original_filename
        self._size = size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MediaFilesAllOfEmbeddedItemsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MediaFiles_allOf__embedded_items_inner of this MediaFilesAllOfEmbeddedItemsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this MediaFilesAllOfEmbeddedItemsInner.


        :return: The links of this MediaFilesAllOfEmbeddedItemsInner.
        :rtype: MediaFilesAllOfEmbeddedItemsInnerAllOfLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this MediaFilesAllOfEmbeddedItemsInner.


        :param links: The links of this MediaFilesAllOfEmbeddedItemsInner.
        :type links: MediaFilesAllOfEmbeddedItemsInnerAllOfLinks
        """

        self._links = links

    @property
    def code(self):
        """Gets the code of this MediaFilesAllOfEmbeddedItemsInner.

        Media file code

        :return: The code of this MediaFilesAllOfEmbeddedItemsInner.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this MediaFilesAllOfEmbeddedItemsInner.

        Media file code

        :param code: The code of this MediaFilesAllOfEmbeddedItemsInner.
        :type code: str
        """

        self._code = code

    @property
    def extension(self):
        """Gets the extension of this MediaFilesAllOfEmbeddedItemsInner.

        Extension of the media file

        :return: The extension of this MediaFilesAllOfEmbeddedItemsInner.
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this MediaFilesAllOfEmbeddedItemsInner.

        Extension of the media file

        :param extension: The extension of this MediaFilesAllOfEmbeddedItemsInner.
        :type extension: str
        """

        self._extension = extension

    @property
    def mime_type(self):
        """Gets the mime_type of this MediaFilesAllOfEmbeddedItemsInner.

        Mime type of the media file

        :return: The mime_type of this MediaFilesAllOfEmbeddedItemsInner.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this MediaFilesAllOfEmbeddedItemsInner.

        Mime type of the media file

        :param mime_type: The mime_type of this MediaFilesAllOfEmbeddedItemsInner.
        :type mime_type: str
        """

        self._mime_type = mime_type

    @property
    def original_filename(self):
        """Gets the original_filename of this MediaFilesAllOfEmbeddedItemsInner.

        Original filename of the media file

        :return: The original_filename of this MediaFilesAllOfEmbeddedItemsInner.
        :rtype: str
        """
        return self._original_filename

    @original_filename.setter
    def original_filename(self, original_filename):
        """Sets the original_filename of this MediaFilesAllOfEmbeddedItemsInner.

        Original filename of the media file

        :param original_filename: The original_filename of this MediaFilesAllOfEmbeddedItemsInner.
        :type original_filename: str
        """

        self._original_filename = original_filename

    @property
    def size(self):
        """Gets the size of this MediaFilesAllOfEmbeddedItemsInner.

        Size of the media file

        :return: The size of this MediaFilesAllOfEmbeddedItemsInner.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this MediaFilesAllOfEmbeddedItemsInner.

        Size of the media file

        :param size: The size of this MediaFilesAllOfEmbeddedItemsInner.
        :type size: int
        """

        self._size = size
