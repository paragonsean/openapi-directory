# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.reference_entities_all_of_embedded_items_inner_all_of_labels import ReferenceEntitiesAllOfEmbeddedItemsInnerAllOfLabels
from openapi_server import util


class PatchReferenceEntityCodeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, image: str=None, labels: ReferenceEntitiesAllOfEmbeddedItemsInnerAllOfLabels=None):
        """PatchReferenceEntityCodeRequest - a model defined in OpenAPI

        :param code: The code of this PatchReferenceEntityCodeRequest.
        :param image: The image of this PatchReferenceEntityCodeRequest.
        :param labels: The labels of this PatchReferenceEntityCodeRequest.
        """
        self.openapi_types = {
            'code': str,
            'image': str,
            'labels': ReferenceEntitiesAllOfEmbeddedItemsInnerAllOfLabels
        }

        self.attribute_map = {
            'code': 'code',
            'image': 'image',
            'labels': 'labels'
        }

        self._code = code
        self._image = image
        self._labels = labels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchReferenceEntityCodeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The patch_reference_entity__code__request of this PatchReferenceEntityCodeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this PatchReferenceEntityCodeRequest.

        Reference entity code

        :return: The code of this PatchReferenceEntityCodeRequest.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this PatchReferenceEntityCodeRequest.

        Reference entity code

        :param code: The code of this PatchReferenceEntityCodeRequest.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def image(self):
        """Gets the image of this PatchReferenceEntityCodeRequest.

        Code of the reference entity image

        :return: The image of this PatchReferenceEntityCodeRequest.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this PatchReferenceEntityCodeRequest.

        Code of the reference entity image

        :param image: The image of this PatchReferenceEntityCodeRequest.
        :type image: str
        """

        self._image = image

    @property
    def labels(self):
        """Gets the labels of this PatchReferenceEntityCodeRequest.


        :return: The labels of this PatchReferenceEntityCodeRequest.
        :rtype: ReferenceEntitiesAllOfEmbeddedItemsInnerAllOfLabels
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this PatchReferenceEntityCodeRequest.


        :param labels: The labels of this PatchReferenceEntityCodeRequest.
        :type labels: ReferenceEntitiesAllOfEmbeddedItemsInnerAllOfLabels
        """

        self._labels = labels
