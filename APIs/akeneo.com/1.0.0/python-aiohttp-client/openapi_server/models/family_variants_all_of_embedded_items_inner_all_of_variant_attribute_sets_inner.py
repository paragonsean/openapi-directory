# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FamilyVariantsAllOfEmbeddedItemsInnerAllOfVariantAttributeSetsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: List[str]=None, axes: List[str]=None, level: int=None):
        """FamilyVariantsAllOfEmbeddedItemsInnerAllOfVariantAttributeSetsInner - a model defined in OpenAPI

        :param attributes: The attributes of this FamilyVariantsAllOfEmbeddedItemsInnerAllOfVariantAttributeSetsInner.
        :param axes: The axes of this FamilyVariantsAllOfEmbeddedItemsInnerAllOfVariantAttributeSetsInner.
        :param level: The level of this FamilyVariantsAllOfEmbeddedItemsInnerAllOfVariantAttributeSetsInner.
        """
        self.openapi_types = {
            'attributes': List[str],
            'axes': List[str],
            'level': int
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'axes': 'axes',
            'level': 'level'
        }

        self._attributes = attributes
        self._axes = axes
        self._level = level

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FamilyVariantsAllOfEmbeddedItemsInnerAllOfVariantAttributeSetsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Family_Variants_allOf__embedded_items_inner_allOf_variant_attribute_sets_inner of this FamilyVariantsAllOfEmbeddedItemsInnerAllOfVariantAttributeSetsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this FamilyVariantsAllOfEmbeddedItemsInnerAllOfVariantAttributeSetsInner.

        Codes of attributes bind to this enrichment level

        :return: The attributes of this FamilyVariantsAllOfEmbeddedItemsInnerAllOfVariantAttributeSetsInner.
        :rtype: List[str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this FamilyVariantsAllOfEmbeddedItemsInnerAllOfVariantAttributeSetsInner.

        Codes of attributes bind to this enrichment level

        :param attributes: The attributes of this FamilyVariantsAllOfEmbeddedItemsInnerAllOfVariantAttributeSetsInner.
        :type attributes: List[str]
        """

        self._attributes = attributes

    @property
    def axes(self):
        """Gets the axes of this FamilyVariantsAllOfEmbeddedItemsInnerAllOfVariantAttributeSetsInner.

        Codes of attributes used as variant axes

        :return: The axes of this FamilyVariantsAllOfEmbeddedItemsInnerAllOfVariantAttributeSetsInner.
        :rtype: List[str]
        """
        return self._axes

    @axes.setter
    def axes(self, axes):
        """Sets the axes of this FamilyVariantsAllOfEmbeddedItemsInnerAllOfVariantAttributeSetsInner.

        Codes of attributes used as variant axes

        :param axes: The axes of this FamilyVariantsAllOfEmbeddedItemsInnerAllOfVariantAttributeSetsInner.
        :type axes: List[str]
        """
        if axes is None:
            raise ValueError("Invalid value for `axes`, must not be `None`")

        self._axes = axes

    @property
    def level(self):
        """Gets the level of this FamilyVariantsAllOfEmbeddedItemsInnerAllOfVariantAttributeSetsInner.

        Enrichment level

        :return: The level of this FamilyVariantsAllOfEmbeddedItemsInnerAllOfVariantAttributeSetsInner.
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this FamilyVariantsAllOfEmbeddedItemsInnerAllOfVariantAttributeSetsInner.

        Enrichment level

        :param level: The level of this FamilyVariantsAllOfEmbeddedItemsInnerAllOfVariantAttributeSetsInner.
        :type level: int
        """
        if level is None:
            raise ValueError("Invalid value for `level`, must not be `None`")

        self._level = level
