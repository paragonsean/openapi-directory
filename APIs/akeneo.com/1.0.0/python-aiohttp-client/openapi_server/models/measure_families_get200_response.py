# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.measure_families_all_of_embedded_items_inner_all_of_units_inner import MeasureFamiliesAllOfEmbeddedItemsInnerAllOfUnitsInner
from openapi_server import util


class MeasureFamiliesGet200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, standard: str=None, units: List[MeasureFamiliesAllOfEmbeddedItemsInnerAllOfUnitsInner]=None):
        """MeasureFamiliesGet200Response - a model defined in OpenAPI

        :param code: The code of this MeasureFamiliesGet200Response.
        :param standard: The standard of this MeasureFamiliesGet200Response.
        :param units: The units of this MeasureFamiliesGet200Response.
        """
        self.openapi_types = {
            'code': str,
            'standard': str,
            'units': List[MeasureFamiliesAllOfEmbeddedItemsInnerAllOfUnitsInner]
        }

        self.attribute_map = {
            'code': 'code',
            'standard': 'standard',
            'units': 'units'
        }

        self._code = code
        self._standard = standard
        self._units = units

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MeasureFamiliesGet200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The measure_families_get_200_response of this MeasureFamiliesGet200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this MeasureFamiliesGet200Response.

        Measure family code

        :return: The code of this MeasureFamiliesGet200Response.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this MeasureFamiliesGet200Response.

        Measure family code

        :param code: The code of this MeasureFamiliesGet200Response.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def standard(self):
        """Gets the standard of this MeasureFamiliesGet200Response.

        Measure family standard

        :return: The standard of this MeasureFamiliesGet200Response.
        :rtype: str
        """
        return self._standard

    @standard.setter
    def standard(self, standard):
        """Sets the standard of this MeasureFamiliesGet200Response.

        Measure family standard

        :param standard: The standard of this MeasureFamiliesGet200Response.
        :type standard: str
        """

        self._standard = standard

    @property
    def units(self):
        """Gets the units of this MeasureFamiliesGet200Response.

        Family units

        :return: The units of this MeasureFamiliesGet200Response.
        :rtype: List[MeasureFamiliesAllOfEmbeddedItemsInnerAllOfUnitsInner]
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this MeasureFamiliesGet200Response.

        Family units

        :param units: The units of this MeasureFamiliesGet200Response.
        :type units: List[MeasureFamiliesAllOfEmbeddedItemsInnerAllOfUnitsInner]
        """

        self._units = units
