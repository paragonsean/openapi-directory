# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProductModelsAllOfEmbeddedItemsInnerAllOfMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, workflow_status: str=None):
        """ProductModelsAllOfEmbeddedItemsInnerAllOfMetadata - a model defined in OpenAPI

        :param workflow_status: The workflow_status of this ProductModelsAllOfEmbeddedItemsInnerAllOfMetadata.
        """
        self.openapi_types = {
            'workflow_status': str
        }

        self.attribute_map = {
            'workflow_status': 'workflow_status'
        }

        self._workflow_status = workflow_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductModelsAllOfEmbeddedItemsInnerAllOfMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Product_Models_allOf__embedded_items_inner_allOf_metadata of this ProductModelsAllOfEmbeddedItemsInnerAllOfMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def workflow_status(self):
        """Gets the workflow_status of this ProductModelsAllOfEmbeddedItemsInnerAllOfMetadata.

        Status of the product model regarding the user permissions

        :return: The workflow_status of this ProductModelsAllOfEmbeddedItemsInnerAllOfMetadata.
        :rtype: str
        """
        return self._workflow_status

    @workflow_status.setter
    def workflow_status(self, workflow_status):
        """Sets the workflow_status of this ProductModelsAllOfEmbeddedItemsInnerAllOfMetadata.

        Status of the product model regarding the user permissions

        :param workflow_status: The workflow_status of this ProductModelsAllOfEmbeddedItemsInnerAllOfMetadata.
        :type workflow_status: str
        """
        allowed_values = ["read_only", "draft_in_progress", "proposal_waiting_for_approval", "working_copy"]  # noqa: E501
        if workflow_status not in allowed_values:
            raise ValueError(
                "Invalid value for `workflow_status` ({0}), must be one of {1}"
                .format(workflow_status, allowed_values)
            )

        self._workflow_status = workflow_status
