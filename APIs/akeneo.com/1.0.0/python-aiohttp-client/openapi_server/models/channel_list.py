# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channels_all_of_embedded_items_inner_all_of_conversion_units import ChannelsAllOfEmbeddedItemsInnerAllOfConversionUnits
from openapi_server.models.channels_all_of_embedded_items_inner_all_of_labels import ChannelsAllOfEmbeddedItemsInnerAllOfLabels
from openapi_server.models.pam_asset_categories_all_of_embedded_items_inner_all_of_links import PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks
from openapi_server import util


class ChannelList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks=None, category_tree: str=None, code: str=None, conversion_units: ChannelsAllOfEmbeddedItemsInnerAllOfConversionUnits=None, currencies: List[str]=None, labels: ChannelsAllOfEmbeddedItemsInnerAllOfLabels=None, locales: List[str]=None):
        """ChannelList - a model defined in OpenAPI

        :param links: The links of this ChannelList.
        :param category_tree: The category_tree of this ChannelList.
        :param code: The code of this ChannelList.
        :param conversion_units: The conversion_units of this ChannelList.
        :param currencies: The currencies of this ChannelList.
        :param labels: The labels of this ChannelList.
        :param locales: The locales of this ChannelList.
        """
        self.openapi_types = {
            'links': PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks,
            'category_tree': str,
            'code': str,
            'conversion_units': ChannelsAllOfEmbeddedItemsInnerAllOfConversionUnits,
            'currencies': List[str],
            'labels': ChannelsAllOfEmbeddedItemsInnerAllOfLabels,
            'locales': List[str]
        }

        self.attribute_map = {
            'links': '_links',
            'category_tree': 'category_tree',
            'code': 'code',
            'conversion_units': 'conversion_units',
            'currencies': 'currencies',
            'labels': 'labels',
            'locales': 'locales'
        }

        self._links = links
        self._category_tree = category_tree
        self._code = code
        self._conversion_units = conversion_units
        self._currencies = currencies
        self._labels = labels
        self._locales = locales

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChannelList of this ChannelList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this ChannelList.


        :return: The links of this ChannelList.
        :rtype: PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ChannelList.


        :param links: The links of this ChannelList.
        :type links: PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks
        """

        self._links = links

    @property
    def category_tree(self):
        """Gets the category_tree of this ChannelList.

        Code of the category tree linked to the channel

        :return: The category_tree of this ChannelList.
        :rtype: str
        """
        return self._category_tree

    @category_tree.setter
    def category_tree(self, category_tree):
        """Sets the category_tree of this ChannelList.

        Code of the category tree linked to the channel

        :param category_tree: The category_tree of this ChannelList.
        :type category_tree: str
        """
        if category_tree is None:
            raise ValueError("Invalid value for `category_tree`, must not be `None`")

        self._category_tree = category_tree

    @property
    def code(self):
        """Gets the code of this ChannelList.

        Channel code

        :return: The code of this ChannelList.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ChannelList.

        Channel code

        :param code: The code of this ChannelList.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def conversion_units(self):
        """Gets the conversion_units of this ChannelList.


        :return: The conversion_units of this ChannelList.
        :rtype: ChannelsAllOfEmbeddedItemsInnerAllOfConversionUnits
        """
        return self._conversion_units

    @conversion_units.setter
    def conversion_units(self, conversion_units):
        """Sets the conversion_units of this ChannelList.


        :param conversion_units: The conversion_units of this ChannelList.
        :type conversion_units: ChannelsAllOfEmbeddedItemsInnerAllOfConversionUnits
        """

        self._conversion_units = conversion_units

    @property
    def currencies(self):
        """Gets the currencies of this ChannelList.

        Codes of activated currencies for the channel

        :return: The currencies of this ChannelList.
        :rtype: List[str]
        """
        return self._currencies

    @currencies.setter
    def currencies(self, currencies):
        """Sets the currencies of this ChannelList.

        Codes of activated currencies for the channel

        :param currencies: The currencies of this ChannelList.
        :type currencies: List[str]
        """
        if currencies is None:
            raise ValueError("Invalid value for `currencies`, must not be `None`")

        self._currencies = currencies

    @property
    def labels(self):
        """Gets the labels of this ChannelList.


        :return: The labels of this ChannelList.
        :rtype: ChannelsAllOfEmbeddedItemsInnerAllOfLabels
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ChannelList.


        :param labels: The labels of this ChannelList.
        :type labels: ChannelsAllOfEmbeddedItemsInnerAllOfLabels
        """

        self._labels = labels

    @property
    def locales(self):
        """Gets the locales of this ChannelList.

        Codes of activated locales for the channel

        :return: The locales of this ChannelList.
        :rtype: List[str]
        """
        return self._locales

    @locales.setter
    def locales(self, locales):
        """Sets the locales of this ChannelList.

        Codes of activated locales for the channel

        :param locales: The locales of this ChannelList.
        :type locales: List[str]
        """
        if locales is None:
            raise ValueError("Invalid value for `locales`, must not be `None`")

        self._locales = locales
