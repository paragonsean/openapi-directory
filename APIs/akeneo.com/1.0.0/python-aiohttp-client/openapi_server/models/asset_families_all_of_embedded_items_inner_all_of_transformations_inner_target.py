# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute: str=None, channel: str=None, locale: str=None):
        """AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerTarget - a model defined in OpenAPI

        :param attribute: The attribute of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerTarget.
        :param channel: The channel of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerTarget.
        :param locale: The locale of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerTarget.
        """
        self.openapi_types = {
            'attribute': str,
            'channel': str,
            'locale': str
        }

        self.attribute_map = {
            'attribute': 'attribute',
            'channel': 'channel',
            'locale': 'locale'
        }

        self._attribute = attribute
        self._channel = channel
        self._locale = locale

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Asset_families_allOf__embedded_items_inner_allOf_transformations_inner_target of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerTarget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute(self):
        """Gets the attribute of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerTarget.


        :return: The attribute of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerTarget.
        :rtype: str
        """
        return self._attribute

    @attribute.setter
    def attribute(self, attribute):
        """Sets the attribute of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerTarget.


        :param attribute: The attribute of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerTarget.
        :type attribute: str
        """
        if attribute is None:
            raise ValueError("Invalid value for `attribute`, must not be `None`")

        self._attribute = attribute

    @property
    def channel(self):
        """Gets the channel of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerTarget.


        :return: The channel of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerTarget.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerTarget.


        :param channel: The channel of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerTarget.
        :type channel: str
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")

        self._channel = channel

    @property
    def locale(self):
        """Gets the locale of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerTarget.


        :return: The locale of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerTarget.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerTarget.


        :param locale: The locale of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerTarget.
        :type locale: str
        """
        if locale is None:
            raise ValueError("Invalid value for `locale`, must not be `None`")

        self._locale = locale
