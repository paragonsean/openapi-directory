# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.asset_families_all_of_embedded_items_inner_all_of_transformations_inner_operations import AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperations
from openapi_server.models.asset_families_all_of_embedded_items_inner_all_of_transformations_inner_source import AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerSource
from openapi_server.models.asset_families_all_of_embedded_items_inner_all_of_transformations_inner_target import AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerTarget
from openapi_server import util


class AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filename_prefix: str=None, filename_suffix: str=None, label: str=None, operations: AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperations=None, source: AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerSource=None, target: AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerTarget=None):
        """AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner - a model defined in OpenAPI

        :param filename_prefix: The filename_prefix of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.
        :param filename_suffix: The filename_suffix of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.
        :param label: The label of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.
        :param operations: The operations of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.
        :param source: The source of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.
        :param target: The target of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.
        """
        self.openapi_types = {
            'filename_prefix': str,
            'filename_suffix': str,
            'label': str,
            'operations': AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperations,
            'source': AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerSource,
            'target': AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerTarget
        }

        self.attribute_map = {
            'filename_prefix': 'filename_prefix',
            'filename_suffix': 'filename_suffix',
            'label': 'label',
            'operations': 'operations',
            'source': 'source',
            'target': 'target'
        }

        self._filename_prefix = filename_prefix
        self._filename_suffix = filename_suffix
        self._label = label
        self._operations = operations
        self._source = source
        self._target = target

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Asset_families_allOf__embedded_items_inner_allOf_transformations_inner of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filename_prefix(self):
        """Gets the filename_prefix of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.

        The prefix that will be prepended to the source filename to generate the target filename. More details <a href='/concepts/asset-manager.html#target-filename'>here</a>.

        :return: The filename_prefix of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.
        :rtype: str
        """
        return self._filename_prefix

    @filename_prefix.setter
    def filename_prefix(self, filename_prefix):
        """Sets the filename_prefix of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.

        The prefix that will be prepended to the source filename to generate the target filename. More details <a href='/concepts/asset-manager.html#target-filename'>here</a>.

        :param filename_prefix: The filename_prefix of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.
        :type filename_prefix: str
        """

        self._filename_prefix = filename_prefix

    @property
    def filename_suffix(self):
        """Gets the filename_suffix of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.

        The suffix that will be appended to the source filename to generate the target filename. More details <a href='/concepts/asset-manager.html#target-filename'>here</a>.

        :return: The filename_suffix of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.
        :rtype: str
        """
        return self._filename_suffix

    @filename_suffix.setter
    def filename_suffix(self, filename_suffix):
        """Sets the filename_suffix of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.

        The suffix that will be appended to the source filename to generate the target filename. More details <a href='/concepts/asset-manager.html#target-filename'>here</a>.

        :param filename_suffix: The filename_suffix of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.
        :type filename_suffix: str
        """

        self._filename_suffix = filename_suffix

    @property
    def label(self):
        """Gets the label of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.

        The name of the transformation

        :return: The label of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.

        The name of the transformation

        :param label: The label of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def operations(self):
        """Gets the operations of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.


        :return: The operations of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.
        :rtype: AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperations
        """
        return self._operations

    @operations.setter
    def operations(self, operations):
        """Sets the operations of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.


        :param operations: The operations of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.
        :type operations: AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerOperations
        """
        if operations is None:
            raise ValueError("Invalid value for `operations`, must not be `None`")

        self._operations = operations

    @property
    def source(self):
        """Gets the source of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.


        :return: The source of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.
        :rtype: AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.


        :param source: The source of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.
        :type source: AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerSource
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def target(self):
        """Gets the target of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.


        :return: The target of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.
        :rtype: AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerTarget
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.


        :param target: The target of this AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInner.
        :type target: AssetFamiliesAllOfEmbeddedItemsInnerAllOfTransformationsInnerTarget
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")

        self._target = target
