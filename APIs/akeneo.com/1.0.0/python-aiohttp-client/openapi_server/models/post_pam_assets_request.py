# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pam_assets_all_of_embedded_items_inner_all_of_reference_files_inner import PAMAssetsAllOfEmbeddedItemsInnerAllOfReferenceFilesInner
from openapi_server.models.pam_assets_all_of_embedded_items_inner_all_of_variation_files_inner import PAMAssetsAllOfEmbeddedItemsInnerAllOfVariationFilesInner
from openapi_server import util


class PostPamAssetsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, categories: List[str]=None, code: str=None, description: str=None, end_of_use: str=None, localizable: bool=False, reference_files: List[PAMAssetsAllOfEmbeddedItemsInnerAllOfReferenceFilesInner]=None, tags: List[str]=None, variation_files: List[PAMAssetsAllOfEmbeddedItemsInnerAllOfVariationFilesInner]=None):
        """PostPamAssetsRequest - a model defined in OpenAPI

        :param categories: The categories of this PostPamAssetsRequest.
        :param code: The code of this PostPamAssetsRequest.
        :param description: The description of this PostPamAssetsRequest.
        :param end_of_use: The end_of_use of this PostPamAssetsRequest.
        :param localizable: The localizable of this PostPamAssetsRequest.
        :param reference_files: The reference_files of this PostPamAssetsRequest.
        :param tags: The tags of this PostPamAssetsRequest.
        :param variation_files: The variation_files of this PostPamAssetsRequest.
        """
        self.openapi_types = {
            'categories': List[str],
            'code': str,
            'description': str,
            'end_of_use': str,
            'localizable': bool,
            'reference_files': List[PAMAssetsAllOfEmbeddedItemsInnerAllOfReferenceFilesInner],
            'tags': List[str],
            'variation_files': List[PAMAssetsAllOfEmbeddedItemsInnerAllOfVariationFilesInner]
        }

        self.attribute_map = {
            'categories': 'categories',
            'code': 'code',
            'description': 'description',
            'end_of_use': 'end_of_use',
            'localizable': 'localizable',
            'reference_files': 'reference_files',
            'tags': 'tags',
            'variation_files': 'variation_files'
        }

        self._categories = categories
        self._code = code
        self._description = description
        self._end_of_use = end_of_use
        self._localizable = localizable
        self._reference_files = reference_files
        self._tags = tags
        self._variation_files = variation_files

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostPamAssetsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The post_pam_assets_request of this PostPamAssetsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def categories(self):
        """Gets the categories of this PostPamAssetsRequest.

        Codes of the PAM asset categories in which the asset is classified

        :return: The categories of this PostPamAssetsRequest.
        :rtype: List[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this PostPamAssetsRequest.

        Codes of the PAM asset categories in which the asset is classified

        :param categories: The categories of this PostPamAssetsRequest.
        :type categories: List[str]
        """

        self._categories = categories

    @property
    def code(self):
        """Gets the code of this PostPamAssetsRequest.

        PAM asset code

        :return: The code of this PostPamAssetsRequest.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this PostPamAssetsRequest.

        PAM asset code

        :param code: The code of this PostPamAssetsRequest.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def description(self):
        """Gets the description of this PostPamAssetsRequest.

        Description of the PAM asset

        :return: The description of this PostPamAssetsRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PostPamAssetsRequest.

        Description of the PAM asset

        :param description: The description of this PostPamAssetsRequest.
        :type description: str
        """

        self._description = description

    @property
    def end_of_use(self):
        """Gets the end_of_use of this PostPamAssetsRequest.

        Date on which the PAM asset expire

        :return: The end_of_use of this PostPamAssetsRequest.
        :rtype: str
        """
        return self._end_of_use

    @end_of_use.setter
    def end_of_use(self, end_of_use):
        """Sets the end_of_use of this PostPamAssetsRequest.

        Date on which the PAM asset expire

        :param end_of_use: The end_of_use of this PostPamAssetsRequest.
        :type end_of_use: str
        """

        self._end_of_use = end_of_use

    @property
    def localizable(self):
        """Gets the localizable of this PostPamAssetsRequest.

        Whether the asset is localized or not, meaning if you want to have different reference files for each of your locale

        :return: The localizable of this PostPamAssetsRequest.
        :rtype: bool
        """
        return self._localizable

    @localizable.setter
    def localizable(self, localizable):
        """Sets the localizable of this PostPamAssetsRequest.

        Whether the asset is localized or not, meaning if you want to have different reference files for each of your locale

        :param localizable: The localizable of this PostPamAssetsRequest.
        :type localizable: bool
        """

        self._localizable = localizable

    @property
    def reference_files(self):
        """Gets the reference_files of this PostPamAssetsRequest.

        Reference files of the PAM asset

        :return: The reference_files of this PostPamAssetsRequest.
        :rtype: List[PAMAssetsAllOfEmbeddedItemsInnerAllOfReferenceFilesInner]
        """
        return self._reference_files

    @reference_files.setter
    def reference_files(self, reference_files):
        """Sets the reference_files of this PostPamAssetsRequest.

        Reference files of the PAM asset

        :param reference_files: The reference_files of this PostPamAssetsRequest.
        :type reference_files: List[PAMAssetsAllOfEmbeddedItemsInnerAllOfReferenceFilesInner]
        """

        self._reference_files = reference_files

    @property
    def tags(self):
        """Gets the tags of this PostPamAssetsRequest.

        Tags of the PAM asset

        :return: The tags of this PostPamAssetsRequest.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PostPamAssetsRequest.

        Tags of the PAM asset

        :param tags: The tags of this PostPamAssetsRequest.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def variation_files(self):
        """Gets the variation_files of this PostPamAssetsRequest.

        Variations of the PAM asset

        :return: The variation_files of this PostPamAssetsRequest.
        :rtype: List[PAMAssetsAllOfEmbeddedItemsInnerAllOfVariationFilesInner]
        """
        return self._variation_files

    @variation_files.setter
    def variation_files(self, variation_files):
        """Sets the variation_files of this PostPamAssetsRequest.

        Variations of the PAM asset

        :param variation_files: The variation_files of this PostPamAssetsRequest.
        :type variation_files: List[PAMAssetsAllOfEmbeddedItemsInnerAllOfVariationFilesInner]
        """

        self._variation_files = variation_files
