# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.family_variants_all_of_embedded_items_inner_all_of_labels import FamilyVariantsAllOfEmbeddedItemsInnerAllOfLabels
from openapi_server.models.family_variants_all_of_embedded_items_inner_all_of_variant_attribute_sets_inner import FamilyVariantsAllOfEmbeddedItemsInnerAllOfVariantAttributeSetsInner
from openapi_server.models.pam_asset_categories_all_of_embedded_items_inner_all_of_links import PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks
from openapi_server import util


class FamilyVariantList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks=None, code: str=None, labels: FamilyVariantsAllOfEmbeddedItemsInnerAllOfLabels=None, variant_attribute_sets: List[FamilyVariantsAllOfEmbeddedItemsInnerAllOfVariantAttributeSetsInner]=None):
        """FamilyVariantList - a model defined in OpenAPI

        :param links: The links of this FamilyVariantList.
        :param code: The code of this FamilyVariantList.
        :param labels: The labels of this FamilyVariantList.
        :param variant_attribute_sets: The variant_attribute_sets of this FamilyVariantList.
        """
        self.openapi_types = {
            'links': PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks,
            'code': str,
            'labels': FamilyVariantsAllOfEmbeddedItemsInnerAllOfLabels,
            'variant_attribute_sets': List[FamilyVariantsAllOfEmbeddedItemsInnerAllOfVariantAttributeSetsInner]
        }

        self.attribute_map = {
            'links': '_links',
            'code': 'code',
            'labels': 'labels',
            'variant_attribute_sets': 'variant_attribute_sets'
        }

        self._links = links
        self._code = code
        self._labels = labels
        self._variant_attribute_sets = variant_attribute_sets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FamilyVariantList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FamilyVariantList of this FamilyVariantList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this FamilyVariantList.


        :return: The links of this FamilyVariantList.
        :rtype: PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this FamilyVariantList.


        :param links: The links of this FamilyVariantList.
        :type links: PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks
        """

        self._links = links

    @property
    def code(self):
        """Gets the code of this FamilyVariantList.

        Family variant code

        :return: The code of this FamilyVariantList.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this FamilyVariantList.

        Family variant code

        :param code: The code of this FamilyVariantList.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def labels(self):
        """Gets the labels of this FamilyVariantList.


        :return: The labels of this FamilyVariantList.
        :rtype: FamilyVariantsAllOfEmbeddedItemsInnerAllOfLabels
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this FamilyVariantList.


        :param labels: The labels of this FamilyVariantList.
        :type labels: FamilyVariantsAllOfEmbeddedItemsInnerAllOfLabels
        """

        self._labels = labels

    @property
    def variant_attribute_sets(self):
        """Gets the variant_attribute_sets of this FamilyVariantList.

        Attributes distribution according to the enrichment level

        :return: The variant_attribute_sets of this FamilyVariantList.
        :rtype: List[FamilyVariantsAllOfEmbeddedItemsInnerAllOfVariantAttributeSetsInner]
        """
        return self._variant_attribute_sets

    @variant_attribute_sets.setter
    def variant_attribute_sets(self, variant_attribute_sets):
        """Sets the variant_attribute_sets of this FamilyVariantList.

        Attributes distribution according to the enrichment level

        :param variant_attribute_sets: The variant_attribute_sets of this FamilyVariantList.
        :type variant_attribute_sets: List[FamilyVariantsAllOfEmbeddedItemsInnerAllOfVariantAttributeSetsInner]
        """
        if variant_attribute_sets is None:
            raise ValueError("Invalid value for `variant_attribute_sets`, must not be `None`")

        self._variant_attribute_sets = variant_attribute_sets
