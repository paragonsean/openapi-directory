# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetAppCatalogsMappingSchemaProduct200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment: str=None, id: str=None, _schema: str=None, description: str=None, properties: object=None, title: str=None, type: str=None):
        """GetAppCatalogsMappingSchemaProduct200Response - a model defined in OpenAPI

        :param comment: The comment of this GetAppCatalogsMappingSchemaProduct200Response.
        :param id: The id of this GetAppCatalogsMappingSchemaProduct200Response.
        :param _schema: The _schema of this GetAppCatalogsMappingSchemaProduct200Response.
        :param description: The description of this GetAppCatalogsMappingSchemaProduct200Response.
        :param properties: The properties of this GetAppCatalogsMappingSchemaProduct200Response.
        :param title: The title of this GetAppCatalogsMappingSchemaProduct200Response.
        :param type: The type of this GetAppCatalogsMappingSchemaProduct200Response.
        """
        self.openapi_types = {
            'comment': str,
            'id': str,
            '_schema': str,
            'description': str,
            'properties': object,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'comment': '$comment',
            'id': '$id',
            '_schema': '$schema',
            'description': 'description',
            'properties': 'properties',
            'title': 'title',
            'type': 'type'
        }

        self._comment = comment
        self._id = id
        self.__schema = _schema
        self._description = description
        self._properties = properties
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetAppCatalogsMappingSchemaProduct200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_app_catalogs_mapping_schema_product_200_response of this GetAppCatalogsMappingSchemaProduct200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment(self):
        """Gets the comment of this GetAppCatalogsMappingSchemaProduct200Response.

        allows you to add a comment

        :return: The comment of this GetAppCatalogsMappingSchemaProduct200Response.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this GetAppCatalogsMappingSchemaProduct200Response.

        allows you to add a comment

        :param comment: The comment of this GetAppCatalogsMappingSchemaProduct200Response.
        :type comment: str
        """

        self._comment = comment

    @property
    def id(self):
        """Gets the id of this GetAppCatalogsMappingSchemaProduct200Response.

        id of your schema

        :return: The id of this GetAppCatalogsMappingSchemaProduct200Response.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetAppCatalogsMappingSchemaProduct200Response.

        id of your schema

        :param id: The id of this GetAppCatalogsMappingSchemaProduct200Response.
        :type id: str
        """

        self._id = id

    @property
    def _schema(self):
        """Gets the _schema of this GetAppCatalogsMappingSchemaProduct200Response.

        $schema indicates which product mapping schema version your app uses

        :return: The _schema of this GetAppCatalogsMappingSchemaProduct200Response.
        :rtype: str
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this GetAppCatalogsMappingSchemaProduct200Response.

        $schema indicates which product mapping schema version your app uses

        :param _schema: The _schema of this GetAppCatalogsMappingSchemaProduct200Response.
        :type _schema: str
        """
        if _schema is None:
            raise ValueError("Invalid value for `_schema`, must not be `None`")

        self.__schema = _schema

    @property
    def description(self):
        """Gets the description of this GetAppCatalogsMappingSchemaProduct200Response.

        allows you to add a description of your mapping schema

        :return: The description of this GetAppCatalogsMappingSchemaProduct200Response.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetAppCatalogsMappingSchemaProduct200Response.

        allows you to add a description of your mapping schema

        :param description: The description of this GetAppCatalogsMappingSchemaProduct200Response.
        :type description: str
        """

        self._description = description

    @property
    def properties(self):
        """Gets the properties of this GetAppCatalogsMappingSchemaProduct200Response.

        list and describe the targets your app expects

        :return: The properties of this GetAppCatalogsMappingSchemaProduct200Response.
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this GetAppCatalogsMappingSchemaProduct200Response.

        list and describe the targets your app expects

        :param properties: The properties of this GetAppCatalogsMappingSchemaProduct200Response.
        :type properties: object
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")

        self._properties = properties

    @property
    def title(self):
        """Gets the title of this GetAppCatalogsMappingSchemaProduct200Response.

        allows you to add a title to your mapping schema

        :return: The title of this GetAppCatalogsMappingSchemaProduct200Response.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GetAppCatalogsMappingSchemaProduct200Response.

        allows you to add a title to your mapping schema

        :param title: The title of this GetAppCatalogsMappingSchemaProduct200Response.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this GetAppCatalogsMappingSchemaProduct200Response.

        should always be \"object\"

        :return: The type of this GetAppCatalogsMappingSchemaProduct200Response.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetAppCatalogsMappingSchemaProduct200Response.

        should always be \"object\"

        :param type: The type of this GetAppCatalogsMappingSchemaProduct200Response.
        :type type: str
        """

        self._type = type
