# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.measurement_families_get_list200_response_labels import MeasurementFamiliesGetList200ResponseLabels
from openapi_server.models.measurement_families_get_list200_response_units import MeasurementFamiliesGetList200ResponseUnits
from openapi_server import util


class MeasurementFamiliesGetList200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, labels: MeasurementFamiliesGetList200ResponseLabels=None, standard_unit_code: str=None, units: MeasurementFamiliesGetList200ResponseUnits=None):
        """MeasurementFamiliesGetList200Response - a model defined in OpenAPI

        :param code: The code of this MeasurementFamiliesGetList200Response.
        :param labels: The labels of this MeasurementFamiliesGetList200Response.
        :param standard_unit_code: The standard_unit_code of this MeasurementFamiliesGetList200Response.
        :param units: The units of this MeasurementFamiliesGetList200Response.
        """
        self.openapi_types = {
            'code': str,
            'labels': MeasurementFamiliesGetList200ResponseLabels,
            'standard_unit_code': str,
            'units': MeasurementFamiliesGetList200ResponseUnits
        }

        self.attribute_map = {
            'code': 'code',
            'labels': 'labels',
            'standard_unit_code': 'standard_unit_code',
            'units': 'units'
        }

        self._code = code
        self._labels = labels
        self._standard_unit_code = standard_unit_code
        self._units = units

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MeasurementFamiliesGetList200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The measurement_families_get_list_200_response of this MeasurementFamiliesGetList200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this MeasurementFamiliesGetList200Response.

        Measurement family code

        :return: The code of this MeasurementFamiliesGetList200Response.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this MeasurementFamiliesGetList200Response.

        Measurement family code

        :param code: The code of this MeasurementFamiliesGetList200Response.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def labels(self):
        """Gets the labels of this MeasurementFamiliesGetList200Response.


        :return: The labels of this MeasurementFamiliesGetList200Response.
        :rtype: MeasurementFamiliesGetList200ResponseLabels
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this MeasurementFamiliesGetList200Response.


        :param labels: The labels of this MeasurementFamiliesGetList200Response.
        :type labels: MeasurementFamiliesGetList200ResponseLabels
        """

        self._labels = labels

    @property
    def standard_unit_code(self):
        """Gets the standard_unit_code of this MeasurementFamiliesGetList200Response.

        Unit code used as the standard unit for this measurement family

        :return: The standard_unit_code of this MeasurementFamiliesGetList200Response.
        :rtype: str
        """
        return self._standard_unit_code

    @standard_unit_code.setter
    def standard_unit_code(self, standard_unit_code):
        """Sets the standard_unit_code of this MeasurementFamiliesGetList200Response.

        Unit code used as the standard unit for this measurement family

        :param standard_unit_code: The standard_unit_code of this MeasurementFamiliesGetList200Response.
        :type standard_unit_code: str
        """
        if standard_unit_code is None:
            raise ValueError("Invalid value for `standard_unit_code`, must not be `None`")

        self._standard_unit_code = standard_unit_code

    @property
    def units(self):
        """Gets the units of this MeasurementFamiliesGetList200Response.


        :return: The units of this MeasurementFamiliesGetList200Response.
        :rtype: MeasurementFamiliesGetList200ResponseUnits
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this MeasurementFamiliesGetList200Response.


        :param units: The units of this MeasurementFamiliesGetList200Response.
        :type units: MeasurementFamiliesGetList200ResponseUnits
        """
        if units is None:
            raise ValueError("Invalid value for `units`, must not be `None`")

        self._units = units
