# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.asset_families_all_of_embedded import AssetFamiliesAllOfEmbedded
from openapi_server.models.asset_families_all_of_links import AssetFamiliesAllOfLinks
from openapi_server import util


class AssetFamilies(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: AssetFamiliesAllOfLinks=None, embedded: AssetFamiliesAllOfEmbedded=None):
        """AssetFamilies - a model defined in OpenAPI

        :param links: The links of this AssetFamilies.
        :param embedded: The embedded of this AssetFamilies.
        """
        self.openapi_types = {
            'links': AssetFamiliesAllOfLinks,
            'embedded': AssetFamiliesAllOfEmbedded
        }

        self.attribute_map = {
            'links': '_links',
            'embedded': '_embedded'
        }

        self._links = links
        self._embedded = embedded

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssetFamilies':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Asset_families of this AssetFamilies.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this AssetFamilies.


        :return: The links of this AssetFamilies.
        :rtype: AssetFamiliesAllOfLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AssetFamilies.


        :param links: The links of this AssetFamilies.
        :type links: AssetFamiliesAllOfLinks
        """

        self._links = links

    @property
    def embedded(self):
        """Gets the embedded of this AssetFamilies.


        :return: The embedded of this AssetFamilies.
        :rtype: AssetFamiliesAllOfEmbedded
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this AssetFamilies.


        :param embedded: The embedded of this AssetFamilies.
        :type embedded: AssetFamiliesAllOfEmbedded
        """

        self._embedded = embedded
