# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pam_asset_categories_all_of_embedded_items_inner_all_of_links import PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks
from openapi_server import util


class CurrencyList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks=None, code: str=None, enabled: bool=None):
        """CurrencyList - a model defined in OpenAPI

        :param links: The links of this CurrencyList.
        :param code: The code of this CurrencyList.
        :param enabled: The enabled of this CurrencyList.
        """
        self.openapi_types = {
            'links': PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks,
            'code': str,
            'enabled': bool
        }

        self.attribute_map = {
            'links': '_links',
            'code': 'code',
            'enabled': 'enabled'
        }

        self._links = links
        self._code = code
        self._enabled = enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CurrencyList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CurrencyList of this CurrencyList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this CurrencyList.


        :return: The links of this CurrencyList.
        :rtype: PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this CurrencyList.


        :param links: The links of this CurrencyList.
        :type links: PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks
        """

        self._links = links

    @property
    def code(self):
        """Gets the code of this CurrencyList.

        Currency code

        :return: The code of this CurrencyList.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CurrencyList.

        Currency code

        :param code: The code of this CurrencyList.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def enabled(self):
        """Gets the enabled of this CurrencyList.

        Whether the currency is enabled

        :return: The enabled of this CurrencyList.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CurrencyList.

        Whether the currency is enabled

        :param enabled: The enabled of this CurrencyList.
        :type enabled: bool
        """

        self._enabled = enabled
