# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attributes_all_of_embedded_items_inner_all_of_table_configuration_inner_labels import AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInnerLabels
from openapi_server.models.attributes_all_of_embedded_items_inner_all_of_table_configuration_inner_validations import AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInnerValidations
from openapi_server import util


class AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, data_type: str=None, is_required_for_completeness: bool=False, labels: AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInnerLabels=None, validations: AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInnerValidations=None):
        """AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner - a model defined in OpenAPI

        :param code: The code of this AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.
        :param data_type: The data_type of this AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.
        :param is_required_for_completeness: The is_required_for_completeness of this AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.
        :param labels: The labels of this AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.
        :param validations: The validations of this AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.
        """
        self.openapi_types = {
            'code': str,
            'data_type': str,
            'is_required_for_completeness': bool,
            'labels': AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInnerLabels,
            'validations': AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInnerValidations
        }

        self.attribute_map = {
            'code': 'code',
            'data_type': 'data_type',
            'is_required_for_completeness': 'is_required_for_completeness',
            'labels': 'labels',
            'validations': 'validations'
        }

        self._code = code
        self._data_type = data_type
        self._is_required_for_completeness = is_required_for_completeness
        self._labels = labels
        self._validations = validations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attributes_allOf__embedded_items_inner_allOf_table_configuration_inner of this AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.

        Column code

        :return: The code of this AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.

        Column code

        :param code: The code of this AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def data_type(self):
        """Gets the data_type of this AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.

        Column data type

        :return: The data_type of this AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.

        Column data type

        :param data_type: The data_type of this AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.
        :type data_type: str
        """
        allowed_values = ["select", "text", "number", "boolean"]  # noqa: E501
        if data_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_type` ({0}), must be one of {1}"
                .format(data_type, allowed_values)
            )

        self._data_type = data_type

    @property
    def is_required_for_completeness(self):
        """Gets the is_required_for_completeness of this AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.

        Defines if the column should be entirely filled for the attribute to be considered complete

        :return: The is_required_for_completeness of this AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.
        :rtype: bool
        """
        return self._is_required_for_completeness

    @is_required_for_completeness.setter
    def is_required_for_completeness(self, is_required_for_completeness):
        """Sets the is_required_for_completeness of this AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.

        Defines if the column should be entirely filled for the attribute to be considered complete

        :param is_required_for_completeness: The is_required_for_completeness of this AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.
        :type is_required_for_completeness: bool
        """

        self._is_required_for_completeness = is_required_for_completeness

    @property
    def labels(self):
        """Gets the labels of this AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.


        :return: The labels of this AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.
        :rtype: AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInnerLabels
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.


        :param labels: The labels of this AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.
        :type labels: AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInnerLabels
        """

        self._labels = labels

    @property
    def validations(self):
        """Gets the validations of this AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.


        :return: The validations of this AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.
        :rtype: AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInnerValidations
        """
        return self._validations

    @validations.setter
    def validations(self, validations):
        """Sets the validations of this AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.


        :param validations: The validations of this AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.
        :type validations: AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInnerValidations
        """

        self._validations = validations
