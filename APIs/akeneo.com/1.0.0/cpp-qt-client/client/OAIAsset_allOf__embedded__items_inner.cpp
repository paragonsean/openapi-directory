/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAsset_allOf__embedded__items_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAsset_allOf__embedded__items_inner::OAIAsset_allOf__embedded__items_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAsset_allOf__embedded__items_inner::OAIAsset_allOf__embedded__items_inner() {
    this->initializeModel();
}

OAIAsset_allOf__embedded__items_inner::~OAIAsset_allOf__embedded__items_inner() {}

void OAIAsset_allOf__embedded__items_inner::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIAsset_allOf__embedded__items_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAsset_allOf__embedded__items_inner::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAIAsset_allOf__embedded__items_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAsset_allOf__embedded__items_inner::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_values.isSet()) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

OAIPAM_Asset_Categories_allOf__embedded_items_inner_allOf__links OAIAsset_allOf__embedded__items_inner::getLinks() const {
    return m__links;
}
void OAIAsset_allOf__embedded__items_inner::setLinks(const OAIPAM_Asset_Categories_allOf__embedded_items_inner_allOf__links &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIAsset_allOf__embedded__items_inner::is__links_Set() const{
    return m__links_isSet;
}

bool OAIAsset_allOf__embedded__items_inner::is__links_Valid() const{
    return m__links_isValid;
}

QString OAIAsset_allOf__embedded__items_inner::getCode() const {
    return m_code;
}
void OAIAsset_allOf__embedded__items_inner::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIAsset_allOf__embedded__items_inner::is_code_Set() const{
    return m_code_isSet;
}

bool OAIAsset_allOf__embedded__items_inner::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIAsset_allOf__embedded__items_inner::getCreated() const {
    return m_created;
}
void OAIAsset_allOf__embedded__items_inner::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIAsset_allOf__embedded__items_inner::is_created_Set() const{
    return m_created_isSet;
}

bool OAIAsset_allOf__embedded__items_inner::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIAsset_allOf__embedded__items_inner::getUpdated() const {
    return m_updated;
}
void OAIAsset_allOf__embedded__items_inner::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIAsset_allOf__embedded__items_inner::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIAsset_allOf__embedded__items_inner::is_updated_Valid() const{
    return m_updated_isValid;
}

OAIAsset_allOf__embedded__items_inner_allOf_values OAIAsset_allOf__embedded__items_inner::getValues() const {
    return m_values;
}
void OAIAsset_allOf__embedded__items_inner::setValues(const OAIAsset_allOf__embedded__items_inner_allOf_values &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIAsset_allOf__embedded__items_inner::is_values_Set() const{
    return m_values_isSet;
}

bool OAIAsset_allOf__embedded__items_inner::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIAsset_allOf__embedded__items_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAsset_allOf__embedded__items_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && true;
}

} // namespace OpenAPI
