/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAssociationTypeApi_H
#define OAI_OAIAssociationTypeApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAssociation_types.h"
#include "OAIAssociation_types_post_request.h"
#include "OAIPatch_asset_categories_200_response.h"
#include "OAIPost_token_400_response.h"
#include "OAISeveral_association_types_patch_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAssociationTypeApi : public QObject {
    Q_OBJECT

public:
    OAIAssociationTypeApi(const int timeOut = 0);
    ~OAIAssociationTypeApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  code QString [required]
    */
    virtual void associationTypesGet(const QString &code);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  with_count bool [optional]
    */
    virtual void associationTypesGetList(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &with_count = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  code QString [required]
    * @param[in]  body OAIAssociation_types_post_request [required]
    */
    virtual void associationTypesPatch(const QString &code, const OAIAssociation_types_post_request &body);

    /**
    * @param[in]  body OAIAssociation_types_post_request [optional]
    */
    virtual void associationTypesPost(const ::OpenAPI::OptionalParam<OAIAssociation_types_post_request> &body = ::OpenAPI::OptionalParam<OAIAssociation_types_post_request>());

    /**
    * @param[in]  body OAISeveral_association_types_patch_request [optional]
    */
    virtual void severalAssociationTypesPatch(const ::OpenAPI::OptionalParam<OAISeveral_association_types_patch_request> &body = ::OpenAPI::OptionalParam<OAISeveral_association_types_patch_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void associationTypesGetCallback(OAIHttpRequestWorker *worker);
    void associationTypesGetListCallback(OAIHttpRequestWorker *worker);
    void associationTypesPatchCallback(OAIHttpRequestWorker *worker);
    void associationTypesPostCallback(OAIHttpRequestWorker *worker);
    void severalAssociationTypesPatchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void associationTypesGetSignal(OAIAssociation_types_post_request summary);
    void associationTypesGetListSignal(OAIAssociation_types summary);
    void associationTypesPatchSignal();
    void associationTypesPostSignal();
    void severalAssociationTypesPatchSignal(OAIPatch_asset_categories_200_response summary);


    void associationTypesGetSignalFull(OAIHttpRequestWorker *worker, OAIAssociation_types_post_request summary);
    void associationTypesGetListSignalFull(OAIHttpRequestWorker *worker, OAIAssociation_types summary);
    void associationTypesPatchSignalFull(OAIHttpRequestWorker *worker);
    void associationTypesPostSignalFull(OAIHttpRequestWorker *worker);
    void severalAssociationTypesPatchSignalFull(OAIHttpRequestWorker *worker, OAIPatch_asset_categories_200_response summary);

    Q_DECL_DEPRECATED_X("Use associationTypesGetSignalError() instead")
    void associationTypesGetSignalE(OAIAssociation_types_post_request summary, QNetworkReply::NetworkError error_type, QString error_str);
    void associationTypesGetSignalError(OAIAssociation_types_post_request summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associationTypesGetListSignalError() instead")
    void associationTypesGetListSignalE(OAIAssociation_types summary, QNetworkReply::NetworkError error_type, QString error_str);
    void associationTypesGetListSignalError(OAIAssociation_types summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associationTypesPatchSignalError() instead")
    void associationTypesPatchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void associationTypesPatchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associationTypesPostSignalError() instead")
    void associationTypesPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void associationTypesPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use severalAssociationTypesPatchSignalError() instead")
    void severalAssociationTypesPatchSignalE(OAIPatch_asset_categories_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void severalAssociationTypesPatchSignalError(OAIPatch_asset_categories_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use associationTypesGetSignalErrorFull() instead")
    void associationTypesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void associationTypesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associationTypesGetListSignalErrorFull() instead")
    void associationTypesGetListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void associationTypesGetListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associationTypesPatchSignalErrorFull() instead")
    void associationTypesPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void associationTypesPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associationTypesPostSignalErrorFull() instead")
    void associationTypesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void associationTypesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use severalAssociationTypesPatchSignalErrorFull() instead")
    void severalAssociationTypesPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void severalAssociationTypesPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
