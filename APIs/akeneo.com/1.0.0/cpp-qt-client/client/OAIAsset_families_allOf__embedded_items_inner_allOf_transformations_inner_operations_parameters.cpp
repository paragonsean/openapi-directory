/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters() {
    this->initializeModel();
}

OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::~OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters() {}

void OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::initializeModel() {

    m_colorspace_isSet = false;
    m_colorspace_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_quality_isSet = false;
    m_quality_isValid = false;

    m_ratio_isSet = false;
    m_ratio_isValid = false;

    m_resolution_unit_isSet = false;
    m_resolution_unit_isValid = false;

    m_resolution_x_isSet = false;
    m_resolution_x_isValid = false;

    m_resolution_y_isSet = false;
    m_resolution_y_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::fromJsonObject(QJsonObject json) {

    m_colorspace_isValid = ::OpenAPI::fromJsonValue(m_colorspace, json[QString("colorspace")]);
    m_colorspace_isSet = !json[QString("colorspace")].isNull() && m_colorspace_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_quality_isValid = ::OpenAPI::fromJsonValue(m_quality, json[QString("quality")]);
    m_quality_isSet = !json[QString("quality")].isNull() && m_quality_isValid;

    m_ratio_isValid = ::OpenAPI::fromJsonValue(m_ratio, json[QString("ratio")]);
    m_ratio_isSet = !json[QString("ratio")].isNull() && m_ratio_isValid;

    m_resolution_unit_isValid = ::OpenAPI::fromJsonValue(m_resolution_unit, json[QString("resolution-unit")]);
    m_resolution_unit_isSet = !json[QString("resolution-unit")].isNull() && m_resolution_unit_isValid;

    m_resolution_x_isValid = ::OpenAPI::fromJsonValue(m_resolution_x, json[QString("resolution-x")]);
    m_resolution_x_isSet = !json[QString("resolution-x")].isNull() && m_resolution_x_isValid;

    m_resolution_y_isValid = ::OpenAPI::fromJsonValue(m_resolution_y, json[QString("resolution-y")]);
    m_resolution_y_isSet = !json[QString("resolution-y")].isNull() && m_resolution_y_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::asJsonObject() const {
    QJsonObject obj;
    if (m_colorspace_isSet) {
        obj.insert(QString("colorspace"), ::OpenAPI::toJsonValue(m_colorspace));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_quality_isSet) {
        obj.insert(QString("quality"), ::OpenAPI::toJsonValue(m_quality));
    }
    if (m_ratio_isSet) {
        obj.insert(QString("ratio"), ::OpenAPI::toJsonValue(m_ratio));
    }
    if (m_resolution_unit_isSet) {
        obj.insert(QString("resolution-unit"), ::OpenAPI::toJsonValue(m_resolution_unit));
    }
    if (m_resolution_x_isSet) {
        obj.insert(QString("resolution-x"), ::OpenAPI::toJsonValue(m_resolution_x));
    }
    if (m_resolution_y_isSet) {
        obj.insert(QString("resolution-y"), ::OpenAPI::toJsonValue(m_resolution_y));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QString OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::getColorspace() const {
    return m_colorspace;
}
void OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::setColorspace(const QString &colorspace) {
    m_colorspace = colorspace;
    m_colorspace_isSet = true;
}

bool OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::is_colorspace_Set() const{
    return m_colorspace_isSet;
}

bool OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::is_colorspace_Valid() const{
    return m_colorspace_isValid;
}

qint32 OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::getHeight() const {
    return m_height;
}
void OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::is_height_Set() const{
    return m_height_isSet;
}

bool OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::is_height_Valid() const{
    return m_height_isValid;
}

qint32 OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::getQuality() const {
    return m_quality;
}
void OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::setQuality(const qint32 &quality) {
    m_quality = quality;
    m_quality_isSet = true;
}

bool OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::is_quality_Set() const{
    return m_quality_isSet;
}

bool OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::is_quality_Valid() const{
    return m_quality_isValid;
}

qint32 OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::getRatio() const {
    return m_ratio;
}
void OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::setRatio(const qint32 &ratio) {
    m_ratio = ratio;
    m_ratio_isSet = true;
}

bool OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::is_ratio_Set() const{
    return m_ratio_isSet;
}

bool OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::is_ratio_Valid() const{
    return m_ratio_isValid;
}

QString OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::getResolutionUnit() const {
    return m_resolution_unit;
}
void OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::setResolutionUnit(const QString &resolution_unit) {
    m_resolution_unit = resolution_unit;
    m_resolution_unit_isSet = true;
}

bool OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::is_resolution_unit_Set() const{
    return m_resolution_unit_isSet;
}

bool OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::is_resolution_unit_Valid() const{
    return m_resolution_unit_isValid;
}

qint32 OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::getResolutionX() const {
    return m_resolution_x;
}
void OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::setResolutionX(const qint32 &resolution_x) {
    m_resolution_x = resolution_x;
    m_resolution_x_isSet = true;
}

bool OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::is_resolution_x_Set() const{
    return m_resolution_x_isSet;
}

bool OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::is_resolution_x_Valid() const{
    return m_resolution_x_isValid;
}

qint32 OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::getResolutionY() const {
    return m_resolution_y;
}
void OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::setResolutionY(const qint32 &resolution_y) {
    m_resolution_y = resolution_y;
    m_resolution_y_isSet = true;
}

bool OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::is_resolution_y_Set() const{
    return m_resolution_y_isSet;
}

bool OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::is_resolution_y_Valid() const{
    return m_resolution_y_isValid;
}

qint32 OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::getWidth() const {
    return m_width;
}
void OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::is_width_Set() const{
    return m_width_isSet;
}

bool OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_colorspace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_y_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
