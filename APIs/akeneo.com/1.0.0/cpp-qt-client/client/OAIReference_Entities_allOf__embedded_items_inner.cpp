/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReference_Entities_allOf__embedded_items_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReference_Entities_allOf__embedded_items_inner::OAIReference_Entities_allOf__embedded_items_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReference_Entities_allOf__embedded_items_inner::OAIReference_Entities_allOf__embedded_items_inner() {
    this->initializeModel();
}

OAIReference_Entities_allOf__embedded_items_inner::~OAIReference_Entities_allOf__embedded_items_inner() {}

void OAIReference_Entities_allOf__embedded_items_inner::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;
}

void OAIReference_Entities_allOf__embedded_items_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReference_Entities_allOf__embedded_items_inner::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;
}

QString OAIReference_Entities_allOf__embedded_items_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReference_Entities_allOf__embedded_items_inner::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_labels.isSet()) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    return obj;
}

OAIReference_Entities_allOf__embedded_items_inner_allOf__links OAIReference_Entities_allOf__embedded_items_inner::getLinks() const {
    return m__links;
}
void OAIReference_Entities_allOf__embedded_items_inner::setLinks(const OAIReference_Entities_allOf__embedded_items_inner_allOf__links &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIReference_Entities_allOf__embedded_items_inner::is__links_Set() const{
    return m__links_isSet;
}

bool OAIReference_Entities_allOf__embedded_items_inner::is__links_Valid() const{
    return m__links_isValid;
}

QString OAIReference_Entities_allOf__embedded_items_inner::getCode() const {
    return m_code;
}
void OAIReference_Entities_allOf__embedded_items_inner::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIReference_Entities_allOf__embedded_items_inner::is_code_Set() const{
    return m_code_isSet;
}

bool OAIReference_Entities_allOf__embedded_items_inner::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIReference_Entities_allOf__embedded_items_inner::getImage() const {
    return m_image;
}
void OAIReference_Entities_allOf__embedded_items_inner::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIReference_Entities_allOf__embedded_items_inner::is_image_Set() const{
    return m_image_isSet;
}

bool OAIReference_Entities_allOf__embedded_items_inner::is_image_Valid() const{
    return m_image_isValid;
}

OAIReference_Entities_allOf__embedded_items_inner_allOf_labels OAIReference_Entities_allOf__embedded_items_inner::getLabels() const {
    return m_labels;
}
void OAIReference_Entities_allOf__embedded_items_inner::setLabels(const OAIReference_Entities_allOf__embedded_items_inner_allOf_labels &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIReference_Entities_allOf__embedded_items_inner::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIReference_Entities_allOf__embedded_items_inner::is_labels_Valid() const{
    return m_labels_isValid;
}

bool OAIReference_Entities_allOf__embedded_items_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReference_Entities_allOf__embedded_items_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && true;
}

} // namespace OpenAPI
