/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_asset_family__code__200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_asset_family__code__200_response::OAIGet_asset_family__code__200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_asset_family__code__200_response::OAIGet_asset_family__code__200_response() {
    this->initializeModel();
}

OAIGet_asset_family__code__200_response::~OAIGet_asset_family__code__200_response() {}

void OAIGet_asset_family__code__200_response::initializeModel() {

    m_attribute_as_main_media_isSet = false;
    m_attribute_as_main_media_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_naming_convention_isSet = false;
    m_naming_convention_isValid = false;

    m_product_link_rules_isSet = false;
    m_product_link_rules_isValid = false;

    m_transformations_isSet = false;
    m_transformations_isValid = false;
}

void OAIGet_asset_family__code__200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_asset_family__code__200_response::fromJsonObject(QJsonObject json) {

    m_attribute_as_main_media_isValid = ::OpenAPI::fromJsonValue(m_attribute_as_main_media, json[QString("attribute_as_main_media")]);
    m_attribute_as_main_media_isSet = !json[QString("attribute_as_main_media")].isNull() && m_attribute_as_main_media_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_naming_convention_isValid = ::OpenAPI::fromJsonValue(m_naming_convention, json[QString("naming_convention")]);
    m_naming_convention_isSet = !json[QString("naming_convention")].isNull() && m_naming_convention_isValid;

    m_product_link_rules_isValid = ::OpenAPI::fromJsonValue(m_product_link_rules, json[QString("product_link_rules")]);
    m_product_link_rules_isSet = !json[QString("product_link_rules")].isNull() && m_product_link_rules_isValid;

    m_transformations_isValid = ::OpenAPI::fromJsonValue(m_transformations, json[QString("transformations")]);
    m_transformations_isSet = !json[QString("transformations")].isNull() && m_transformations_isValid;
}

QString OAIGet_asset_family__code__200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_asset_family__code__200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute_as_main_media_isSet) {
        obj.insert(QString("attribute_as_main_media"), ::OpenAPI::toJsonValue(m_attribute_as_main_media));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_labels.isSet()) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_naming_convention.isSet()) {
        obj.insert(QString("naming_convention"), ::OpenAPI::toJsonValue(m_naming_convention));
    }
    if (m_product_link_rules.size() > 0) {
        obj.insert(QString("product_link_rules"), ::OpenAPI::toJsonValue(m_product_link_rules));
    }
    if (m_transformations.size() > 0) {
        obj.insert(QString("transformations"), ::OpenAPI::toJsonValue(m_transformations));
    }
    return obj;
}

QString OAIGet_asset_family__code__200_response::getAttributeAsMainMedia() const {
    return m_attribute_as_main_media;
}
void OAIGet_asset_family__code__200_response::setAttributeAsMainMedia(const QString &attribute_as_main_media) {
    m_attribute_as_main_media = attribute_as_main_media;
    m_attribute_as_main_media_isSet = true;
}

bool OAIGet_asset_family__code__200_response::is_attribute_as_main_media_Set() const{
    return m_attribute_as_main_media_isSet;
}

bool OAIGet_asset_family__code__200_response::is_attribute_as_main_media_Valid() const{
    return m_attribute_as_main_media_isValid;
}

QString OAIGet_asset_family__code__200_response::getCode() const {
    return m_code;
}
void OAIGet_asset_family__code__200_response::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIGet_asset_family__code__200_response::is_code_Set() const{
    return m_code_isSet;
}

bool OAIGet_asset_family__code__200_response::is_code_Valid() const{
    return m_code_isValid;
}

OAIAsset_families_allOf__embedded_items_inner_allOf_labels OAIGet_asset_family__code__200_response::getLabels() const {
    return m_labels;
}
void OAIGet_asset_family__code__200_response::setLabels(const OAIAsset_families_allOf__embedded_items_inner_allOf_labels &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIGet_asset_family__code__200_response::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIGet_asset_family__code__200_response::is_labels_Valid() const{
    return m_labels_isValid;
}

OAIAsset_families_allOf__embedded_items_inner_allOf_naming_convention OAIGet_asset_family__code__200_response::getNamingConvention() const {
    return m_naming_convention;
}
void OAIGet_asset_family__code__200_response::setNamingConvention(const OAIAsset_families_allOf__embedded_items_inner_allOf_naming_convention &naming_convention) {
    m_naming_convention = naming_convention;
    m_naming_convention_isSet = true;
}

bool OAIGet_asset_family__code__200_response::is_naming_convention_Set() const{
    return m_naming_convention_isSet;
}

bool OAIGet_asset_family__code__200_response::is_naming_convention_Valid() const{
    return m_naming_convention_isValid;
}

QList<OAIAsset_families_allOf__embedded_items_inner_allOf_product_link_rules_inner> OAIGet_asset_family__code__200_response::getProductLinkRules() const {
    return m_product_link_rules;
}
void OAIGet_asset_family__code__200_response::setProductLinkRules(const QList<OAIAsset_families_allOf__embedded_items_inner_allOf_product_link_rules_inner> &product_link_rules) {
    m_product_link_rules = product_link_rules;
    m_product_link_rules_isSet = true;
}

bool OAIGet_asset_family__code__200_response::is_product_link_rules_Set() const{
    return m_product_link_rules_isSet;
}

bool OAIGet_asset_family__code__200_response::is_product_link_rules_Valid() const{
    return m_product_link_rules_isValid;
}

QList<OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner> OAIGet_asset_family__code__200_response::getTransformations() const {
    return m_transformations;
}
void OAIGet_asset_family__code__200_response::setTransformations(const QList<OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner> &transformations) {
    m_transformations = transformations;
    m_transformations_isSet = true;
}

bool OAIGet_asset_family__code__200_response::is_transformations_Set() const{
    return m_transformations_isSet;
}

bool OAIGet_asset_family__code__200_response::is_transformations_Valid() const{
    return m_transformations_isValid;
}

bool OAIGet_asset_family__code__200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute_as_main_media_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_naming_convention.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_link_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transformations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_asset_family__code__200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && true;
}

} // namespace OpenAPI
