/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFamilies_allOf__embedded_items_inner_allOf_attribute_requirements.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFamilies_allOf__embedded_items_inner_allOf_attribute_requirements::OAIFamilies_allOf__embedded_items_inner_allOf_attribute_requirements(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFamilies_allOf__embedded_items_inner_allOf_attribute_requirements::OAIFamilies_allOf__embedded_items_inner_allOf_attribute_requirements() {
    this->initializeModel();
}

OAIFamilies_allOf__embedded_items_inner_allOf_attribute_requirements::~OAIFamilies_allOf__embedded_items_inner_allOf_attribute_requirements() {}

void OAIFamilies_allOf__embedded_items_inner_allOf_attribute_requirements::initializeModel() {

    m_channel_code_isSet = false;
    m_channel_code_isValid = false;
}

void OAIFamilies_allOf__embedded_items_inner_allOf_attribute_requirements::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFamilies_allOf__embedded_items_inner_allOf_attribute_requirements::fromJsonObject(QJsonObject json) {

    m_channel_code_isValid = ::OpenAPI::fromJsonValue(m_channel_code, json[QString("channelCode")]);
    m_channel_code_isSet = !json[QString("channelCode")].isNull() && m_channel_code_isValid;
}

QString OAIFamilies_allOf__embedded_items_inner_allOf_attribute_requirements::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFamilies_allOf__embedded_items_inner_allOf_attribute_requirements::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_code.size() > 0) {
        obj.insert(QString("channelCode"), ::OpenAPI::toJsonValue(m_channel_code));
    }
    return obj;
}

QList<QString> OAIFamilies_allOf__embedded_items_inner_allOf_attribute_requirements::getChannelCode() const {
    return m_channel_code;
}
void OAIFamilies_allOf__embedded_items_inner_allOf_attribute_requirements::setChannelCode(const QList<QString> &channel_code) {
    m_channel_code = channel_code;
    m_channel_code_isSet = true;
}

bool OAIFamilies_allOf__embedded_items_inner_allOf_attribute_requirements::is_channel_code_Set() const{
    return m_channel_code_isSet;
}

bool OAIFamilies_allOf__embedded_items_inner_allOf_attribute_requirements::is_channel_code_Valid() const{
    return m_channel_code_isValid;
}

bool OAIFamilies_allOf__embedded_items_inner_allOf_attribute_requirements::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_code.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFamilies_allOf__embedded_items_inner_allOf_attribute_requirements::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
