/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeasurement_families_get_list_200_response_units_unitCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMeasurement_families_get_list_200_response_units_unitCode::OAIMeasurement_families_get_list_200_response_units_unitCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMeasurement_families_get_list_200_response_units_unitCode::OAIMeasurement_families_get_list_200_response_units_unitCode() {
    this->initializeModel();
}

OAIMeasurement_families_get_list_200_response_units_unitCode::~OAIMeasurement_families_get_list_200_response_units_unitCode() {}

void OAIMeasurement_families_get_list_200_response_units_unitCode::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_convert_from_standard_isSet = false;
    m_convert_from_standard_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_symbol_isSet = false;
    m_symbol_isValid = false;
}

void OAIMeasurement_families_get_list_200_response_units_unitCode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMeasurement_families_get_list_200_response_units_unitCode::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_convert_from_standard_isValid = ::OpenAPI::fromJsonValue(m_convert_from_standard, json[QString("convert_from_standard")]);
    m_convert_from_standard_isSet = !json[QString("convert_from_standard")].isNull() && m_convert_from_standard_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_symbol_isValid = ::OpenAPI::fromJsonValue(m_symbol, json[QString("symbol")]);
    m_symbol_isSet = !json[QString("symbol")].isNull() && m_symbol_isValid;
}

QString OAIMeasurement_families_get_list_200_response_units_unitCode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMeasurement_families_get_list_200_response_units_unitCode::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_convert_from_standard.size() > 0) {
        obj.insert(QString("convert_from_standard"), ::OpenAPI::toJsonValue(m_convert_from_standard));
    }
    if (m_labels.isSet()) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_symbol_isSet) {
        obj.insert(QString("symbol"), ::OpenAPI::toJsonValue(m_symbol));
    }
    return obj;
}

QString OAIMeasurement_families_get_list_200_response_units_unitCode::getCode() const {
    return m_code;
}
void OAIMeasurement_families_get_list_200_response_units_unitCode::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIMeasurement_families_get_list_200_response_units_unitCode::is_code_Set() const{
    return m_code_isSet;
}

bool OAIMeasurement_families_get_list_200_response_units_unitCode::is_code_Valid() const{
    return m_code_isValid;
}

QList<OAIMeasurement_families_get_list_200_response_units_unitCode_convert_from_standard_inner> OAIMeasurement_families_get_list_200_response_units_unitCode::getConvertFromStandard() const {
    return m_convert_from_standard;
}
void OAIMeasurement_families_get_list_200_response_units_unitCode::setConvertFromStandard(const QList<OAIMeasurement_families_get_list_200_response_units_unitCode_convert_from_standard_inner> &convert_from_standard) {
    m_convert_from_standard = convert_from_standard;
    m_convert_from_standard_isSet = true;
}

bool OAIMeasurement_families_get_list_200_response_units_unitCode::is_convert_from_standard_Set() const{
    return m_convert_from_standard_isSet;
}

bool OAIMeasurement_families_get_list_200_response_units_unitCode::is_convert_from_standard_Valid() const{
    return m_convert_from_standard_isValid;
}

OAIMeasurement_families_get_list_200_response_units_unitCode_labels OAIMeasurement_families_get_list_200_response_units_unitCode::getLabels() const {
    return m_labels;
}
void OAIMeasurement_families_get_list_200_response_units_unitCode::setLabels(const OAIMeasurement_families_get_list_200_response_units_unitCode_labels &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIMeasurement_families_get_list_200_response_units_unitCode::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIMeasurement_families_get_list_200_response_units_unitCode::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIMeasurement_families_get_list_200_response_units_unitCode::getSymbol() const {
    return m_symbol;
}
void OAIMeasurement_families_get_list_200_response_units_unitCode::setSymbol(const QString &symbol) {
    m_symbol = symbol;
    m_symbol_isSet = true;
}

bool OAIMeasurement_families_get_list_200_response_units_unitCode::is_symbol_Set() const{
    return m_symbol_isSet;
}

bool OAIMeasurement_families_get_list_200_response_units_unitCode::is_symbol_Valid() const{
    return m_symbol_isValid;
}

bool OAIMeasurement_families_get_list_200_response_units_unitCode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_convert_from_standard.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMeasurement_families_get_list_200_response_units_unitCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
