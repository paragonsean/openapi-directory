/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProductUuidApi_H
#define OAI_OAIProductUuidApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPatch_products_uuid_200_response.h"
#include "OAIPatch_products_uuid_request.h"
#include "OAIPost_products_uuid_request.h"
#include "OAIPost_token_400_response.h"
#include "OAIProducts_2.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProductUuidApi : public QObject {
    Q_OBJECT

public:
    OAIProductUuidApi(const int timeOut = 0);
    ~OAIProductUuidApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  uuid QString [required]
    */
    virtual void deleteProductsUuidUuid(const QString &uuid);

    /**
    * @param[in]  uuid QString [required]
    */
    virtual void getDraftUuidUuid(const QString &uuid);

    /**
    * @param[in]  search QString [optional]
    * @param[in]  scope QString [optional]
    * @param[in]  locales QString [optional]
    * @param[in]  attributes QString [optional]
    * @param[in]  pagination_type QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  search_after QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  with_count bool [optional]
    * @param[in]  with_attribute_options bool [optional]
    * @param[in]  with_quality_scores bool [optional]
    * @param[in]  with_completenesses bool [optional]
    */
    virtual void getProductsUuid(const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &scope = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &locales = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pagination_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &search_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &with_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &with_attribute_options = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &with_quality_scores = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &with_completenesses = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  uuid QString [required]
    * @param[in]  with_attribute_options bool [optional]
    * @param[in]  with_quality_scores bool [optional]
    * @param[in]  with_completenesses bool [optional]
    */
    virtual void getProductsUuidUuid(const QString &uuid, const ::OpenAPI::OptionalParam<bool> &with_attribute_options = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &with_quality_scores = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &with_completenesses = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  body OAIPatch_products_uuid_request [optional]
    */
    virtual void patchProductsUuid(const ::OpenAPI::OptionalParam<OAIPatch_products_uuid_request> &body = ::OpenAPI::OptionalParam<OAIPatch_products_uuid_request>());

    /**
    * @param[in]  uuid QString [required]
    * @param[in]  body OAIPost_products_uuid_request [required]
    */
    virtual void patchProductsUuidUuid(const QString &uuid, const OAIPost_products_uuid_request &body);

    /**
    * @param[in]  body OAIPost_products_uuid_request [optional]
    */
    virtual void postProductsUuid(const ::OpenAPI::OptionalParam<OAIPost_products_uuid_request> &body = ::OpenAPI::OptionalParam<OAIPost_products_uuid_request>());

    /**
    * @param[in]  uuid QString [required]
    */
    virtual void postProposalUuid(const QString &uuid);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteProductsUuidUuidCallback(OAIHttpRequestWorker *worker);
    void getDraftUuidUuidCallback(OAIHttpRequestWorker *worker);
    void getProductsUuidCallback(OAIHttpRequestWorker *worker);
    void getProductsUuidUuidCallback(OAIHttpRequestWorker *worker);
    void patchProductsUuidCallback(OAIHttpRequestWorker *worker);
    void patchProductsUuidUuidCallback(OAIHttpRequestWorker *worker);
    void postProductsUuidCallback(OAIHttpRequestWorker *worker);
    void postProposalUuidCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteProductsUuidUuidSignal();
    void getDraftUuidUuidSignal(OAIPost_products_uuid_request summary);
    void getProductsUuidSignal(OAIProducts_2 summary);
    void getProductsUuidUuidSignal(OAIPost_products_uuid_request summary);
    void patchProductsUuidSignal(OAIPatch_products_uuid_200_response summary);
    void patchProductsUuidUuidSignal();
    void postProductsUuidSignal();
    void postProposalUuidSignal();


    void deleteProductsUuidUuidSignalFull(OAIHttpRequestWorker *worker);
    void getDraftUuidUuidSignalFull(OAIHttpRequestWorker *worker, OAIPost_products_uuid_request summary);
    void getProductsUuidSignalFull(OAIHttpRequestWorker *worker, OAIProducts_2 summary);
    void getProductsUuidUuidSignalFull(OAIHttpRequestWorker *worker, OAIPost_products_uuid_request summary);
    void patchProductsUuidSignalFull(OAIHttpRequestWorker *worker, OAIPatch_products_uuid_200_response summary);
    void patchProductsUuidUuidSignalFull(OAIHttpRequestWorker *worker);
    void postProductsUuidSignalFull(OAIHttpRequestWorker *worker);
    void postProposalUuidSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use deleteProductsUuidUuidSignalError() instead")
    void deleteProductsUuidUuidSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProductsUuidUuidSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDraftUuidUuidSignalError() instead")
    void getDraftUuidUuidSignalE(OAIPost_products_uuid_request summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDraftUuidUuidSignalError(OAIPost_products_uuid_request summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductsUuidSignalError() instead")
    void getProductsUuidSignalE(OAIProducts_2 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductsUuidSignalError(OAIProducts_2 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductsUuidUuidSignalError() instead")
    void getProductsUuidUuidSignalE(OAIPost_products_uuid_request summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductsUuidUuidSignalError(OAIPost_products_uuid_request summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchProductsUuidSignalError() instead")
    void patchProductsUuidSignalE(OAIPatch_products_uuid_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchProductsUuidSignalError(OAIPatch_products_uuid_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchProductsUuidUuidSignalError() instead")
    void patchProductsUuidUuidSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void patchProductsUuidUuidSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postProductsUuidSignalError() instead")
    void postProductsUuidSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postProductsUuidSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postProposalUuidSignalError() instead")
    void postProposalUuidSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postProposalUuidSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteProductsUuidUuidSignalErrorFull() instead")
    void deleteProductsUuidUuidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProductsUuidUuidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDraftUuidUuidSignalErrorFull() instead")
    void getDraftUuidUuidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDraftUuidUuidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductsUuidSignalErrorFull() instead")
    void getProductsUuidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductsUuidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductsUuidUuidSignalErrorFull() instead")
    void getProductsUuidUuidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductsUuidUuidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchProductsUuidSignalErrorFull() instead")
    void patchProductsUuidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchProductsUuidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchProductsUuidUuidSignalErrorFull() instead")
    void patchProductsUuidUuidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchProductsUuidUuidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postProductsUuidSignalErrorFull() instead")
    void postProductsUuidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postProductsUuidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postProposalUuidSignalErrorFull() instead")
    void postProposalUuidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postProposalUuidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
