/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttributeList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttributeList::OAIAttributeList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttributeList::OAIAttributeList() {
    this->initializeModel();
}

OAIAttributeList::~OAIAttributeList() {}

void OAIAttributeList::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_allowed_extensions_isSet = false;
    m_allowed_extensions_isValid = false;

    m_available_locales_isSet = false;
    m_available_locales_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_date_max_isSet = false;
    m_date_max_isValid = false;

    m_date_min_isSet = false;
    m_date_min_isValid = false;

    m_decimals_allowed_isSet = false;
    m_decimals_allowed_isValid = false;

    m_default_metric_unit_isSet = false;
    m_default_metric_unit_isValid = false;

    m_default_value_isSet = false;
    m_default_value_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_group_labels_isSet = false;
    m_group_labels_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_localizable_isSet = false;
    m_localizable_isValid = false;

    m_max_characters_isSet = false;
    m_max_characters_isValid = false;

    m_max_file_size_isSet = false;
    m_max_file_size_isValid = false;

    m_metric_family_isSet = false;
    m_metric_family_isValid = false;

    m_negative_allowed_isSet = false;
    m_negative_allowed_isValid = false;

    m_number_max_isSet = false;
    m_number_max_isValid = false;

    m_number_min_isSet = false;
    m_number_min_isValid = false;

    m_reference_data_name_isSet = false;
    m_reference_data_name_isValid = false;

    m_scopable_isSet = false;
    m_scopable_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_table_configuration_isSet = false;
    m_table_configuration_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_unique_isSet = false;
    m_unique_isValid = false;

    m_useable_as_grid_filter_isSet = false;
    m_useable_as_grid_filter_isValid = false;

    m_validation_regexp_isSet = false;
    m_validation_regexp_isValid = false;

    m_validation_rule_isSet = false;
    m_validation_rule_isValid = false;

    m_wysiwyg_enabled_isSet = false;
    m_wysiwyg_enabled_isValid = false;
}

void OAIAttributeList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttributeList::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_allowed_extensions_isValid = ::OpenAPI::fromJsonValue(m_allowed_extensions, json[QString("allowed_extensions")]);
    m_allowed_extensions_isSet = !json[QString("allowed_extensions")].isNull() && m_allowed_extensions_isValid;

    m_available_locales_isValid = ::OpenAPI::fromJsonValue(m_available_locales, json[QString("available_locales")]);
    m_available_locales_isSet = !json[QString("available_locales")].isNull() && m_available_locales_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_date_max_isValid = ::OpenAPI::fromJsonValue(m_date_max, json[QString("date_max")]);
    m_date_max_isSet = !json[QString("date_max")].isNull() && m_date_max_isValid;

    m_date_min_isValid = ::OpenAPI::fromJsonValue(m_date_min, json[QString("date_min")]);
    m_date_min_isSet = !json[QString("date_min")].isNull() && m_date_min_isValid;

    m_decimals_allowed_isValid = ::OpenAPI::fromJsonValue(m_decimals_allowed, json[QString("decimals_allowed")]);
    m_decimals_allowed_isSet = !json[QString("decimals_allowed")].isNull() && m_decimals_allowed_isValid;

    m_default_metric_unit_isValid = ::OpenAPI::fromJsonValue(m_default_metric_unit, json[QString("default_metric_unit")]);
    m_default_metric_unit_isSet = !json[QString("default_metric_unit")].isNull() && m_default_metric_unit_isValid;

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("default_value")]);
    m_default_value_isSet = !json[QString("default_value")].isNull() && m_default_value_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_group_labels_isValid = ::OpenAPI::fromJsonValue(m_group_labels, json[QString("group_labels")]);
    m_group_labels_isSet = !json[QString("group_labels")].isNull() && m_group_labels_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_localizable_isValid = ::OpenAPI::fromJsonValue(m_localizable, json[QString("localizable")]);
    m_localizable_isSet = !json[QString("localizable")].isNull() && m_localizable_isValid;

    m_max_characters_isValid = ::OpenAPI::fromJsonValue(m_max_characters, json[QString("max_characters")]);
    m_max_characters_isSet = !json[QString("max_characters")].isNull() && m_max_characters_isValid;

    m_max_file_size_isValid = ::OpenAPI::fromJsonValue(m_max_file_size, json[QString("max_file_size")]);
    m_max_file_size_isSet = !json[QString("max_file_size")].isNull() && m_max_file_size_isValid;

    m_metric_family_isValid = ::OpenAPI::fromJsonValue(m_metric_family, json[QString("metric_family")]);
    m_metric_family_isSet = !json[QString("metric_family")].isNull() && m_metric_family_isValid;

    m_negative_allowed_isValid = ::OpenAPI::fromJsonValue(m_negative_allowed, json[QString("negative_allowed")]);
    m_negative_allowed_isSet = !json[QString("negative_allowed")].isNull() && m_negative_allowed_isValid;

    m_number_max_isValid = ::OpenAPI::fromJsonValue(m_number_max, json[QString("number_max")]);
    m_number_max_isSet = !json[QString("number_max")].isNull() && m_number_max_isValid;

    m_number_min_isValid = ::OpenAPI::fromJsonValue(m_number_min, json[QString("number_min")]);
    m_number_min_isSet = !json[QString("number_min")].isNull() && m_number_min_isValid;

    m_reference_data_name_isValid = ::OpenAPI::fromJsonValue(m_reference_data_name, json[QString("reference_data_name")]);
    m_reference_data_name_isSet = !json[QString("reference_data_name")].isNull() && m_reference_data_name_isValid;

    m_scopable_isValid = ::OpenAPI::fromJsonValue(m_scopable, json[QString("scopable")]);
    m_scopable_isSet = !json[QString("scopable")].isNull() && m_scopable_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sort_order")]);
    m_sort_order_isSet = !json[QString("sort_order")].isNull() && m_sort_order_isValid;

    m_table_configuration_isValid = ::OpenAPI::fromJsonValue(m_table_configuration, json[QString("table_configuration")]);
    m_table_configuration_isSet = !json[QString("table_configuration")].isNull() && m_table_configuration_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_unique_isValid = ::OpenAPI::fromJsonValue(m_unique, json[QString("unique")]);
    m_unique_isSet = !json[QString("unique")].isNull() && m_unique_isValid;

    m_useable_as_grid_filter_isValid = ::OpenAPI::fromJsonValue(m_useable_as_grid_filter, json[QString("useable_as_grid_filter")]);
    m_useable_as_grid_filter_isSet = !json[QString("useable_as_grid_filter")].isNull() && m_useable_as_grid_filter_isValid;

    m_validation_regexp_isValid = ::OpenAPI::fromJsonValue(m_validation_regexp, json[QString("validation_regexp")]);
    m_validation_regexp_isSet = !json[QString("validation_regexp")].isNull() && m_validation_regexp_isValid;

    m_validation_rule_isValid = ::OpenAPI::fromJsonValue(m_validation_rule, json[QString("validation_rule")]);
    m_validation_rule_isSet = !json[QString("validation_rule")].isNull() && m_validation_rule_isValid;

    m_wysiwyg_enabled_isValid = ::OpenAPI::fromJsonValue(m_wysiwyg_enabled, json[QString("wysiwyg_enabled")]);
    m_wysiwyg_enabled_isSet = !json[QString("wysiwyg_enabled")].isNull() && m_wysiwyg_enabled_isValid;
}

QString OAIAttributeList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttributeList::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_allowed_extensions.size() > 0) {
        obj.insert(QString("allowed_extensions"), ::OpenAPI::toJsonValue(m_allowed_extensions));
    }
    if (m_available_locales.size() > 0) {
        obj.insert(QString("available_locales"), ::OpenAPI::toJsonValue(m_available_locales));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_date_max_isSet) {
        obj.insert(QString("date_max"), ::OpenAPI::toJsonValue(m_date_max));
    }
    if (m_date_min_isSet) {
        obj.insert(QString("date_min"), ::OpenAPI::toJsonValue(m_date_min));
    }
    if (m_decimals_allowed_isSet) {
        obj.insert(QString("decimals_allowed"), ::OpenAPI::toJsonValue(m_decimals_allowed));
    }
    if (m_default_metric_unit_isSet) {
        obj.insert(QString("default_metric_unit"), ::OpenAPI::toJsonValue(m_default_metric_unit));
    }
    if (m_default_value_isSet) {
        obj.insert(QString("default_value"), ::OpenAPI::toJsonValue(m_default_value));
    }
    if (m_group_isSet) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_group_labels.isSet()) {
        obj.insert(QString("group_labels"), ::OpenAPI::toJsonValue(m_group_labels));
    }
    if (m_labels.isSet()) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_localizable_isSet) {
        obj.insert(QString("localizable"), ::OpenAPI::toJsonValue(m_localizable));
    }
    if (m_max_characters_isSet) {
        obj.insert(QString("max_characters"), ::OpenAPI::toJsonValue(m_max_characters));
    }
    if (m_max_file_size_isSet) {
        obj.insert(QString("max_file_size"), ::OpenAPI::toJsonValue(m_max_file_size));
    }
    if (m_metric_family_isSet) {
        obj.insert(QString("metric_family"), ::OpenAPI::toJsonValue(m_metric_family));
    }
    if (m_negative_allowed_isSet) {
        obj.insert(QString("negative_allowed"), ::OpenAPI::toJsonValue(m_negative_allowed));
    }
    if (m_number_max_isSet) {
        obj.insert(QString("number_max"), ::OpenAPI::toJsonValue(m_number_max));
    }
    if (m_number_min_isSet) {
        obj.insert(QString("number_min"), ::OpenAPI::toJsonValue(m_number_min));
    }
    if (m_reference_data_name_isSet) {
        obj.insert(QString("reference_data_name"), ::OpenAPI::toJsonValue(m_reference_data_name));
    }
    if (m_scopable_isSet) {
        obj.insert(QString("scopable"), ::OpenAPI::toJsonValue(m_scopable));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sort_order"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_table_configuration.size() > 0) {
        obj.insert(QString("table_configuration"), ::OpenAPI::toJsonValue(m_table_configuration));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_unique_isSet) {
        obj.insert(QString("unique"), ::OpenAPI::toJsonValue(m_unique));
    }
    if (m_useable_as_grid_filter_isSet) {
        obj.insert(QString("useable_as_grid_filter"), ::OpenAPI::toJsonValue(m_useable_as_grid_filter));
    }
    if (m_validation_regexp_isSet) {
        obj.insert(QString("validation_regexp"), ::OpenAPI::toJsonValue(m_validation_regexp));
    }
    if (m_validation_rule_isSet) {
        obj.insert(QString("validation_rule"), ::OpenAPI::toJsonValue(m_validation_rule));
    }
    if (m_wysiwyg_enabled_isSet) {
        obj.insert(QString("wysiwyg_enabled"), ::OpenAPI::toJsonValue(m_wysiwyg_enabled));
    }
    return obj;
}

OAIPAM_Asset_Categories_allOf__embedded_items_inner_allOf__links OAIAttributeList::getLinks() const {
    return m__links;
}
void OAIAttributeList::setLinks(const OAIPAM_Asset_Categories_allOf__embedded_items_inner_allOf__links &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIAttributeList::is__links_Set() const{
    return m__links_isSet;
}

bool OAIAttributeList::is__links_Valid() const{
    return m__links_isValid;
}

QList<QString> OAIAttributeList::getAllowedExtensions() const {
    return m_allowed_extensions;
}
void OAIAttributeList::setAllowedExtensions(const QList<QString> &allowed_extensions) {
    m_allowed_extensions = allowed_extensions;
    m_allowed_extensions_isSet = true;
}

bool OAIAttributeList::is_allowed_extensions_Set() const{
    return m_allowed_extensions_isSet;
}

bool OAIAttributeList::is_allowed_extensions_Valid() const{
    return m_allowed_extensions_isValid;
}

QList<QString> OAIAttributeList::getAvailableLocales() const {
    return m_available_locales;
}
void OAIAttributeList::setAvailableLocales(const QList<QString> &available_locales) {
    m_available_locales = available_locales;
    m_available_locales_isSet = true;
}

bool OAIAttributeList::is_available_locales_Set() const{
    return m_available_locales_isSet;
}

bool OAIAttributeList::is_available_locales_Valid() const{
    return m_available_locales_isValid;
}

QString OAIAttributeList::getCode() const {
    return m_code;
}
void OAIAttributeList::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIAttributeList::is_code_Set() const{
    return m_code_isSet;
}

bool OAIAttributeList::is_code_Valid() const{
    return m_code_isValid;
}

QDateTime OAIAttributeList::getDateMax() const {
    return m_date_max;
}
void OAIAttributeList::setDateMax(const QDateTime &date_max) {
    m_date_max = date_max;
    m_date_max_isSet = true;
}

bool OAIAttributeList::is_date_max_Set() const{
    return m_date_max_isSet;
}

bool OAIAttributeList::is_date_max_Valid() const{
    return m_date_max_isValid;
}

QDateTime OAIAttributeList::getDateMin() const {
    return m_date_min;
}
void OAIAttributeList::setDateMin(const QDateTime &date_min) {
    m_date_min = date_min;
    m_date_min_isSet = true;
}

bool OAIAttributeList::is_date_min_Set() const{
    return m_date_min_isSet;
}

bool OAIAttributeList::is_date_min_Valid() const{
    return m_date_min_isValid;
}

bool OAIAttributeList::isDecimalsAllowed() const {
    return m_decimals_allowed;
}
void OAIAttributeList::setDecimalsAllowed(const bool &decimals_allowed) {
    m_decimals_allowed = decimals_allowed;
    m_decimals_allowed_isSet = true;
}

bool OAIAttributeList::is_decimals_allowed_Set() const{
    return m_decimals_allowed_isSet;
}

bool OAIAttributeList::is_decimals_allowed_Valid() const{
    return m_decimals_allowed_isValid;
}

QString OAIAttributeList::getDefaultMetricUnit() const {
    return m_default_metric_unit;
}
void OAIAttributeList::setDefaultMetricUnit(const QString &default_metric_unit) {
    m_default_metric_unit = default_metric_unit;
    m_default_metric_unit_isSet = true;
}

bool OAIAttributeList::is_default_metric_unit_Set() const{
    return m_default_metric_unit_isSet;
}

bool OAIAttributeList::is_default_metric_unit_Valid() const{
    return m_default_metric_unit_isValid;
}

bool OAIAttributeList::isDefaultValue() const {
    return m_default_value;
}
void OAIAttributeList::setDefaultValue(const bool &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAIAttributeList::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAIAttributeList::is_default_value_Valid() const{
    return m_default_value_isValid;
}

QString OAIAttributeList::getGroup() const {
    return m_group;
}
void OAIAttributeList::setGroup(const QString &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIAttributeList::is_group_Set() const{
    return m_group_isSet;
}

bool OAIAttributeList::is_group_Valid() const{
    return m_group_isValid;
}

OAIAttributes_allOf__embedded_items_inner_allOf_group_labels OAIAttributeList::getGroupLabels() const {
    return m_group_labels;
}
void OAIAttributeList::setGroupLabels(const OAIAttributes_allOf__embedded_items_inner_allOf_group_labels &group_labels) {
    m_group_labels = group_labels;
    m_group_labels_isSet = true;
}

bool OAIAttributeList::is_group_labels_Set() const{
    return m_group_labels_isSet;
}

bool OAIAttributeList::is_group_labels_Valid() const{
    return m_group_labels_isValid;
}

OAIGet_asset_families__code__attributes_200_response_inner_labels OAIAttributeList::getLabels() const {
    return m_labels;
}
void OAIAttributeList::setLabels(const OAIGet_asset_families__code__attributes_200_response_inner_labels &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIAttributeList::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIAttributeList::is_labels_Valid() const{
    return m_labels_isValid;
}

bool OAIAttributeList::isLocalizable() const {
    return m_localizable;
}
void OAIAttributeList::setLocalizable(const bool &localizable) {
    m_localizable = localizable;
    m_localizable_isSet = true;
}

bool OAIAttributeList::is_localizable_Set() const{
    return m_localizable_isSet;
}

bool OAIAttributeList::is_localizable_Valid() const{
    return m_localizable_isValid;
}

qint32 OAIAttributeList::getMaxCharacters() const {
    return m_max_characters;
}
void OAIAttributeList::setMaxCharacters(const qint32 &max_characters) {
    m_max_characters = max_characters;
    m_max_characters_isSet = true;
}

bool OAIAttributeList::is_max_characters_Set() const{
    return m_max_characters_isSet;
}

bool OAIAttributeList::is_max_characters_Valid() const{
    return m_max_characters_isValid;
}

QString OAIAttributeList::getMaxFileSize() const {
    return m_max_file_size;
}
void OAIAttributeList::setMaxFileSize(const QString &max_file_size) {
    m_max_file_size = max_file_size;
    m_max_file_size_isSet = true;
}

bool OAIAttributeList::is_max_file_size_Set() const{
    return m_max_file_size_isSet;
}

bool OAIAttributeList::is_max_file_size_Valid() const{
    return m_max_file_size_isValid;
}

QString OAIAttributeList::getMetricFamily() const {
    return m_metric_family;
}
void OAIAttributeList::setMetricFamily(const QString &metric_family) {
    m_metric_family = metric_family;
    m_metric_family_isSet = true;
}

bool OAIAttributeList::is_metric_family_Set() const{
    return m_metric_family_isSet;
}

bool OAIAttributeList::is_metric_family_Valid() const{
    return m_metric_family_isValid;
}

bool OAIAttributeList::isNegativeAllowed() const {
    return m_negative_allowed;
}
void OAIAttributeList::setNegativeAllowed(const bool &negative_allowed) {
    m_negative_allowed = negative_allowed;
    m_negative_allowed_isSet = true;
}

bool OAIAttributeList::is_negative_allowed_Set() const{
    return m_negative_allowed_isSet;
}

bool OAIAttributeList::is_negative_allowed_Valid() const{
    return m_negative_allowed_isValid;
}

QString OAIAttributeList::getNumberMax() const {
    return m_number_max;
}
void OAIAttributeList::setNumberMax(const QString &number_max) {
    m_number_max = number_max;
    m_number_max_isSet = true;
}

bool OAIAttributeList::is_number_max_Set() const{
    return m_number_max_isSet;
}

bool OAIAttributeList::is_number_max_Valid() const{
    return m_number_max_isValid;
}

QString OAIAttributeList::getNumberMin() const {
    return m_number_min;
}
void OAIAttributeList::setNumberMin(const QString &number_min) {
    m_number_min = number_min;
    m_number_min_isSet = true;
}

bool OAIAttributeList::is_number_min_Set() const{
    return m_number_min_isSet;
}

bool OAIAttributeList::is_number_min_Valid() const{
    return m_number_min_isValid;
}

QString OAIAttributeList::getReferenceDataName() const {
    return m_reference_data_name;
}
void OAIAttributeList::setReferenceDataName(const QString &reference_data_name) {
    m_reference_data_name = reference_data_name;
    m_reference_data_name_isSet = true;
}

bool OAIAttributeList::is_reference_data_name_Set() const{
    return m_reference_data_name_isSet;
}

bool OAIAttributeList::is_reference_data_name_Valid() const{
    return m_reference_data_name_isValid;
}

bool OAIAttributeList::isScopable() const {
    return m_scopable;
}
void OAIAttributeList::setScopable(const bool &scopable) {
    m_scopable = scopable;
    m_scopable_isSet = true;
}

bool OAIAttributeList::is_scopable_Set() const{
    return m_scopable_isSet;
}

bool OAIAttributeList::is_scopable_Valid() const{
    return m_scopable_isValid;
}

qint32 OAIAttributeList::getSortOrder() const {
    return m_sort_order;
}
void OAIAttributeList::setSortOrder(const qint32 &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIAttributeList::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIAttributeList::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

QList<OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner> OAIAttributeList::getTableConfiguration() const {
    return m_table_configuration;
}
void OAIAttributeList::setTableConfiguration(const QList<OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner> &table_configuration) {
    m_table_configuration = table_configuration;
    m_table_configuration_isSet = true;
}

bool OAIAttributeList::is_table_configuration_Set() const{
    return m_table_configuration_isSet;
}

bool OAIAttributeList::is_table_configuration_Valid() const{
    return m_table_configuration_isValid;
}

QString OAIAttributeList::getType() const {
    return m_type;
}
void OAIAttributeList::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAttributeList::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAttributeList::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAttributeList::isUnique() const {
    return m_unique;
}
void OAIAttributeList::setUnique(const bool &unique) {
    m_unique = unique;
    m_unique_isSet = true;
}

bool OAIAttributeList::is_unique_Set() const{
    return m_unique_isSet;
}

bool OAIAttributeList::is_unique_Valid() const{
    return m_unique_isValid;
}

bool OAIAttributeList::isUseableAsGridFilter() const {
    return m_useable_as_grid_filter;
}
void OAIAttributeList::setUseableAsGridFilter(const bool &useable_as_grid_filter) {
    m_useable_as_grid_filter = useable_as_grid_filter;
    m_useable_as_grid_filter_isSet = true;
}

bool OAIAttributeList::is_useable_as_grid_filter_Set() const{
    return m_useable_as_grid_filter_isSet;
}

bool OAIAttributeList::is_useable_as_grid_filter_Valid() const{
    return m_useable_as_grid_filter_isValid;
}

QString OAIAttributeList::getValidationRegexp() const {
    return m_validation_regexp;
}
void OAIAttributeList::setValidationRegexp(const QString &validation_regexp) {
    m_validation_regexp = validation_regexp;
    m_validation_regexp_isSet = true;
}

bool OAIAttributeList::is_validation_regexp_Set() const{
    return m_validation_regexp_isSet;
}

bool OAIAttributeList::is_validation_regexp_Valid() const{
    return m_validation_regexp_isValid;
}

QString OAIAttributeList::getValidationRule() const {
    return m_validation_rule;
}
void OAIAttributeList::setValidationRule(const QString &validation_rule) {
    m_validation_rule = validation_rule;
    m_validation_rule_isSet = true;
}

bool OAIAttributeList::is_validation_rule_Set() const{
    return m_validation_rule_isSet;
}

bool OAIAttributeList::is_validation_rule_Valid() const{
    return m_validation_rule_isValid;
}

bool OAIAttributeList::isWysiwygEnabled() const {
    return m_wysiwyg_enabled;
}
void OAIAttributeList::setWysiwygEnabled(const bool &wysiwyg_enabled) {
    m_wysiwyg_enabled = wysiwyg_enabled;
    m_wysiwyg_enabled_isSet = true;
}

bool OAIAttributeList::is_wysiwyg_enabled_Set() const{
    return m_wysiwyg_enabled_isSet;
}

bool OAIAttributeList::is_wysiwyg_enabled_Valid() const{
    return m_wysiwyg_enabled_isValid;
}

bool OAIAttributeList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_extensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_locales.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decimals_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_metric_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_localizable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_characters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_file_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_negative_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_data_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_configuration.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_useable_as_grid_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_regexp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_rule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wysiwyg_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttributeList::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_group_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
