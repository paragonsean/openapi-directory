/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters.h
 *
 * 
 */

#ifndef OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters_H
#define OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters : public OAIObject {
public:
    OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters();
    OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters(QString json);
    ~OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getColorspace() const;
    void setColorspace(const QString &colorspace);
    bool is_colorspace_Set() const;
    bool is_colorspace_Valid() const;

    qint32 getHeight() const;
    void setHeight(const qint32 &height);
    bool is_height_Set() const;
    bool is_height_Valid() const;

    qint32 getQuality() const;
    void setQuality(const qint32 &quality);
    bool is_quality_Set() const;
    bool is_quality_Valid() const;

    qint32 getRatio() const;
    void setRatio(const qint32 &ratio);
    bool is_ratio_Set() const;
    bool is_ratio_Valid() const;

    QString getResolutionUnit() const;
    void setResolutionUnit(const QString &resolution_unit);
    bool is_resolution_unit_Set() const;
    bool is_resolution_unit_Valid() const;

    qint32 getResolutionX() const;
    void setResolutionX(const qint32 &resolution_x);
    bool is_resolution_x_Set() const;
    bool is_resolution_x_Valid() const;

    qint32 getResolutionY() const;
    void setResolutionY(const qint32 &resolution_y);
    bool is_resolution_y_Set() const;
    bool is_resolution_y_Valid() const;

    qint32 getWidth() const;
    void setWidth(const qint32 &width);
    bool is_width_Set() const;
    bool is_width_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_colorspace;
    bool m_colorspace_isSet;
    bool m_colorspace_isValid;

    qint32 m_height;
    bool m_height_isSet;
    bool m_height_isValid;

    qint32 m_quality;
    bool m_quality_isSet;
    bool m_quality_isValid;

    qint32 m_ratio;
    bool m_ratio_isSet;
    bool m_ratio_isValid;

    QString m_resolution_unit;
    bool m_resolution_unit_isSet;
    bool m_resolution_unit_isValid;

    qint32 m_resolution_x;
    bool m_resolution_x_isSet;
    bool m_resolution_x_isValid;

    qint32 m_resolution_y;
    bool m_resolution_y_isSet;
    bool m_resolution_y_isValid;

    qint32 m_width;
    bool m_width_isSet;
    bool m_width_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters)

#endif // OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations_parameters_H
