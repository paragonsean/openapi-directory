/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeasurementFamily.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMeasurementFamily::OAIMeasurementFamily(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMeasurementFamily::OAIMeasurementFamily() {
    this->initializeModel();
}

OAIMeasurementFamily::~OAIMeasurementFamily() {}

void OAIMeasurementFamily::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_standard_unit_code_isSet = false;
    m_standard_unit_code_isValid = false;

    m_units_isSet = false;
    m_units_isValid = false;
}

void OAIMeasurementFamily::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMeasurementFamily::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_standard_unit_code_isValid = ::OpenAPI::fromJsonValue(m_standard_unit_code, json[QString("standard_unit_code")]);
    m_standard_unit_code_isSet = !json[QString("standard_unit_code")].isNull() && m_standard_unit_code_isValid;

    m_units_isValid = ::OpenAPI::fromJsonValue(m_units, json[QString("units")]);
    m_units_isSet = !json[QString("units")].isNull() && m_units_isValid;
}

QString OAIMeasurementFamily::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMeasurementFamily::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_labels.isSet()) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_standard_unit_code_isSet) {
        obj.insert(QString("standard_unit_code"), ::OpenAPI::toJsonValue(m_standard_unit_code));
    }
    if (m_units.isSet()) {
        obj.insert(QString("units"), ::OpenAPI::toJsonValue(m_units));
    }
    return obj;
}

QString OAIMeasurementFamily::getCode() const {
    return m_code;
}
void OAIMeasurementFamily::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIMeasurementFamily::is_code_Set() const{
    return m_code_isSet;
}

bool OAIMeasurementFamily::is_code_Valid() const{
    return m_code_isValid;
}

OAIMeasurement_families_get_list_200_response_labels OAIMeasurementFamily::getLabels() const {
    return m_labels;
}
void OAIMeasurementFamily::setLabels(const OAIMeasurement_families_get_list_200_response_labels &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIMeasurementFamily::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIMeasurementFamily::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIMeasurementFamily::getStandardUnitCode() const {
    return m_standard_unit_code;
}
void OAIMeasurementFamily::setStandardUnitCode(const QString &standard_unit_code) {
    m_standard_unit_code = standard_unit_code;
    m_standard_unit_code_isSet = true;
}

bool OAIMeasurementFamily::is_standard_unit_code_Set() const{
    return m_standard_unit_code_isSet;
}

bool OAIMeasurementFamily::is_standard_unit_code_Valid() const{
    return m_standard_unit_code_isValid;
}

OAIMeasurement_families_get_list_200_response_units OAIMeasurementFamily::getUnits() const {
    return m_units;
}
void OAIMeasurementFamily::setUnits(const OAIMeasurement_families_get_list_200_response_units &units) {
    m_units = units;
    m_units_isSet = true;
}

bool OAIMeasurementFamily::is_units_Set() const{
    return m_units_isSet;
}

bool OAIMeasurementFamily::is_units_Valid() const{
    return m_units_isValid;
}

bool OAIMeasurementFamily::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard_unit_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_units.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMeasurementFamily::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_standard_unit_code_isValid && m_units_isValid && true;
}

} // namespace OpenAPI
