/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPost_product_models_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPost_product_models_request::OAIPost_product_models_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPost_product_models_request::OAIPost_product_models_request() {
    this->initializeModel();
}

OAIPost_product_models_request::~OAIPost_product_models_request() {}

void OAIPost_product_models_request::initializeModel() {

    m_associations_isSet = false;
    m_associations_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_family_isSet = false;
    m_family_isValid = false;

    m_family_variant_isSet = false;
    m_family_variant_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_quality_scores_isSet = false;
    m_quality_scores_isValid = false;

    m_quantified_associations_isSet = false;
    m_quantified_associations_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIPost_product_models_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPost_product_models_request::fromJsonObject(QJsonObject json) {

    m_associations_isValid = ::OpenAPI::fromJsonValue(m_associations, json[QString("associations")]);
    m_associations_isSet = !json[QString("associations")].isNull() && m_associations_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_family_isValid = ::OpenAPI::fromJsonValue(m_family, json[QString("family")]);
    m_family_isSet = !json[QString("family")].isNull() && m_family_isValid;

    m_family_variant_isValid = ::OpenAPI::fromJsonValue(m_family_variant, json[QString("family_variant")]);
    m_family_variant_isSet = !json[QString("family_variant")].isNull() && m_family_variant_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_quality_scores_isValid = ::OpenAPI::fromJsonValue(m_quality_scores, json[QString("quality_scores")]);
    m_quality_scores_isSet = !json[QString("quality_scores")].isNull() && m_quality_scores_isValid;

    m_quantified_associations_isValid = ::OpenAPI::fromJsonValue(m_quantified_associations, json[QString("quantified_associations")]);
    m_quantified_associations_isSet = !json[QString("quantified_associations")].isNull() && m_quantified_associations_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAIPost_product_models_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPost_product_models_request::asJsonObject() const {
    QJsonObject obj;
    if (m_associations.isSet()) {
        obj.insert(QString("associations"), ::OpenAPI::toJsonValue(m_associations));
    }
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_family_isSet) {
        obj.insert(QString("family"), ::OpenAPI::toJsonValue(m_family));
    }
    if (m_family_variant_isSet) {
        obj.insert(QString("family_variant"), ::OpenAPI::toJsonValue(m_family_variant));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_parent_isSet) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_quality_scores_isSet) {
        obj.insert(QString("quality_scores"), ::OpenAPI::toJsonValue(m_quality_scores));
    }
    if (m_quantified_associations.isSet()) {
        obj.insert(QString("quantified_associations"), ::OpenAPI::toJsonValue(m_quantified_associations));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_values.isSet()) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

OAIProduct_Models_allOf__embedded_items_inner_allOf_associations OAIPost_product_models_request::getAssociations() const {
    return m_associations;
}
void OAIPost_product_models_request::setAssociations(const OAIProduct_Models_allOf__embedded_items_inner_allOf_associations &associations) {
    m_associations = associations;
    m_associations_isSet = true;
}

bool OAIPost_product_models_request::is_associations_Set() const{
    return m_associations_isSet;
}

bool OAIPost_product_models_request::is_associations_Valid() const{
    return m_associations_isValid;
}

QList<QString> OAIPost_product_models_request::getCategories() const {
    return m_categories;
}
void OAIPost_product_models_request::setCategories(const QList<QString> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIPost_product_models_request::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIPost_product_models_request::is_categories_Valid() const{
    return m_categories_isValid;
}

QString OAIPost_product_models_request::getCode() const {
    return m_code;
}
void OAIPost_product_models_request::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIPost_product_models_request::is_code_Set() const{
    return m_code_isSet;
}

bool OAIPost_product_models_request::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIPost_product_models_request::getCreated() const {
    return m_created;
}
void OAIPost_product_models_request::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIPost_product_models_request::is_created_Set() const{
    return m_created_isSet;
}

bool OAIPost_product_models_request::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIPost_product_models_request::getFamily() const {
    return m_family;
}
void OAIPost_product_models_request::setFamily(const QString &family) {
    m_family = family;
    m_family_isSet = true;
}

bool OAIPost_product_models_request::is_family_Set() const{
    return m_family_isSet;
}

bool OAIPost_product_models_request::is_family_Valid() const{
    return m_family_isValid;
}

QString OAIPost_product_models_request::getFamilyVariant() const {
    return m_family_variant;
}
void OAIPost_product_models_request::setFamilyVariant(const QString &family_variant) {
    m_family_variant = family_variant;
    m_family_variant_isSet = true;
}

bool OAIPost_product_models_request::is_family_variant_Set() const{
    return m_family_variant_isSet;
}

bool OAIPost_product_models_request::is_family_variant_Valid() const{
    return m_family_variant_isValid;
}

OAIProduct_Models_allOf__embedded_items_inner_allOf_metadata OAIPost_product_models_request::getMetadata() const {
    return m_metadata;
}
void OAIPost_product_models_request::setMetadata(const OAIProduct_Models_allOf__embedded_items_inner_allOf_metadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIPost_product_models_request::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIPost_product_models_request::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIPost_product_models_request::getParent() const {
    return m_parent;
}
void OAIPost_product_models_request::setParent(const QString &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIPost_product_models_request::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIPost_product_models_request::is_parent_Valid() const{
    return m_parent_isValid;
}

OAIObject OAIPost_product_models_request::getQualityScores() const {
    return m_quality_scores;
}
void OAIPost_product_models_request::setQualityScores(const OAIObject &quality_scores) {
    m_quality_scores = quality_scores;
    m_quality_scores_isSet = true;
}

bool OAIPost_product_models_request::is_quality_scores_Set() const{
    return m_quality_scores_isSet;
}

bool OAIPost_product_models_request::is_quality_scores_Valid() const{
    return m_quality_scores_isValid;
}

OAIProduct_Models_allOf__embedded_items_inner_allOf_quantified_associations OAIPost_product_models_request::getQuantifiedAssociations() const {
    return m_quantified_associations;
}
void OAIPost_product_models_request::setQuantifiedAssociations(const OAIProduct_Models_allOf__embedded_items_inner_allOf_quantified_associations &quantified_associations) {
    m_quantified_associations = quantified_associations;
    m_quantified_associations_isSet = true;
}

bool OAIPost_product_models_request::is_quantified_associations_Set() const{
    return m_quantified_associations_isSet;
}

bool OAIPost_product_models_request::is_quantified_associations_Valid() const{
    return m_quantified_associations_isValid;
}

QString OAIPost_product_models_request::getUpdated() const {
    return m_updated;
}
void OAIPost_product_models_request::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIPost_product_models_request::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIPost_product_models_request::is_updated_Valid() const{
    return m_updated_isValid;
}

OAIProduct_Models_allOf__embedded_items_inner_allOf_values OAIPost_product_models_request::getValues() const {
    return m_values;
}
void OAIPost_product_models_request::setValues(const OAIProduct_Models_allOf__embedded_items_inner_allOf_values &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIPost_product_models_request::is_values_Set() const{
    return m_values_isSet;
}

bool OAIPost_product_models_request::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIPost_product_models_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_associations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_family_variant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quality_scores_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantified_associations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPost_product_models_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_family_variant_isValid && true;
}

} // namespace OpenAPI
