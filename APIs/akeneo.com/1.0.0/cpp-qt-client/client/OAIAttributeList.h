/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAttributeList.h
 *
 * 
 */

#ifndef OAIAttributeList_H
#define OAIAttributeList_H

#include <QJsonObject>

#include "OAIAttributes_allOf__embedded_items_inner_allOf_group_labels.h"
#include "OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner.h"
#include "OAIGet_asset_families__code__attributes_200_response_inner_labels.h"
#include "OAIPAM_Asset_Categories_allOf__embedded_items_inner_allOf__links.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPAM_Asset_Categories_allOf__embedded_items_inner_allOf__links;
class OAIAttributes_allOf__embedded_items_inner_allOf_group_labels;
class OAIGet_asset_families__code__attributes_200_response_inner_labels;
class OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner;

class OAIAttributeList : public OAIObject {
public:
    OAIAttributeList();
    OAIAttributeList(QString json);
    ~OAIAttributeList() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIPAM_Asset_Categories_allOf__embedded_items_inner_allOf__links getLinks() const;
    void setLinks(const OAIPAM_Asset_Categories_allOf__embedded_items_inner_allOf__links &_links);
    bool is__links_Set() const;
    bool is__links_Valid() const;

    QList<QString> getAllowedExtensions() const;
    void setAllowedExtensions(const QList<QString> &allowed_extensions);
    bool is_allowed_extensions_Set() const;
    bool is_allowed_extensions_Valid() const;

    QList<QString> getAvailableLocales() const;
    void setAvailableLocales(const QList<QString> &available_locales);
    bool is_available_locales_Set() const;
    bool is_available_locales_Valid() const;

    QString getCode() const;
    void setCode(const QString &code);
    bool is_code_Set() const;
    bool is_code_Valid() const;

    QDateTime getDateMax() const;
    void setDateMax(const QDateTime &date_max);
    bool is_date_max_Set() const;
    bool is_date_max_Valid() const;

    QDateTime getDateMin() const;
    void setDateMin(const QDateTime &date_min);
    bool is_date_min_Set() const;
    bool is_date_min_Valid() const;

    bool isDecimalsAllowed() const;
    void setDecimalsAllowed(const bool &decimals_allowed);
    bool is_decimals_allowed_Set() const;
    bool is_decimals_allowed_Valid() const;

    QString getDefaultMetricUnit() const;
    void setDefaultMetricUnit(const QString &default_metric_unit);
    bool is_default_metric_unit_Set() const;
    bool is_default_metric_unit_Valid() const;

    bool isDefaultValue() const;
    void setDefaultValue(const bool &default_value);
    bool is_default_value_Set() const;
    bool is_default_value_Valid() const;

    QString getGroup() const;
    void setGroup(const QString &group);
    bool is_group_Set() const;
    bool is_group_Valid() const;

    OAIAttributes_allOf__embedded_items_inner_allOf_group_labels getGroupLabels() const;
    void setGroupLabels(const OAIAttributes_allOf__embedded_items_inner_allOf_group_labels &group_labels);
    bool is_group_labels_Set() const;
    bool is_group_labels_Valid() const;

    OAIGet_asset_families__code__attributes_200_response_inner_labels getLabels() const;
    void setLabels(const OAIGet_asset_families__code__attributes_200_response_inner_labels &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    bool isLocalizable() const;
    void setLocalizable(const bool &localizable);
    bool is_localizable_Set() const;
    bool is_localizable_Valid() const;

    qint32 getMaxCharacters() const;
    void setMaxCharacters(const qint32 &max_characters);
    bool is_max_characters_Set() const;
    bool is_max_characters_Valid() const;

    QString getMaxFileSize() const;
    void setMaxFileSize(const QString &max_file_size);
    bool is_max_file_size_Set() const;
    bool is_max_file_size_Valid() const;

    QString getMetricFamily() const;
    void setMetricFamily(const QString &metric_family);
    bool is_metric_family_Set() const;
    bool is_metric_family_Valid() const;

    bool isNegativeAllowed() const;
    void setNegativeAllowed(const bool &negative_allowed);
    bool is_negative_allowed_Set() const;
    bool is_negative_allowed_Valid() const;

    QString getNumberMax() const;
    void setNumberMax(const QString &number_max);
    bool is_number_max_Set() const;
    bool is_number_max_Valid() const;

    QString getNumberMin() const;
    void setNumberMin(const QString &number_min);
    bool is_number_min_Set() const;
    bool is_number_min_Valid() const;

    QString getReferenceDataName() const;
    void setReferenceDataName(const QString &reference_data_name);
    bool is_reference_data_name_Set() const;
    bool is_reference_data_name_Valid() const;

    bool isScopable() const;
    void setScopable(const bool &scopable);
    bool is_scopable_Set() const;
    bool is_scopable_Valid() const;

    qint32 getSortOrder() const;
    void setSortOrder(const qint32 &sort_order);
    bool is_sort_order_Set() const;
    bool is_sort_order_Valid() const;

    QList<OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner> getTableConfiguration() const;
    void setTableConfiguration(const QList<OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner> &table_configuration);
    bool is_table_configuration_Set() const;
    bool is_table_configuration_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    bool isUnique() const;
    void setUnique(const bool &unique);
    bool is_unique_Set() const;
    bool is_unique_Valid() const;

    bool isUseableAsGridFilter() const;
    void setUseableAsGridFilter(const bool &useable_as_grid_filter);
    bool is_useable_as_grid_filter_Set() const;
    bool is_useable_as_grid_filter_Valid() const;

    QString getValidationRegexp() const;
    void setValidationRegexp(const QString &validation_regexp);
    bool is_validation_regexp_Set() const;
    bool is_validation_regexp_Valid() const;

    QString getValidationRule() const;
    void setValidationRule(const QString &validation_rule);
    bool is_validation_rule_Set() const;
    bool is_validation_rule_Valid() const;

    bool isWysiwygEnabled() const;
    void setWysiwygEnabled(const bool &wysiwyg_enabled);
    bool is_wysiwyg_enabled_Set() const;
    bool is_wysiwyg_enabled_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIPAM_Asset_Categories_allOf__embedded_items_inner_allOf__links m__links;
    bool m__links_isSet;
    bool m__links_isValid;

    QList<QString> m_allowed_extensions;
    bool m_allowed_extensions_isSet;
    bool m_allowed_extensions_isValid;

    QList<QString> m_available_locales;
    bool m_available_locales_isSet;
    bool m_available_locales_isValid;

    QString m_code;
    bool m_code_isSet;
    bool m_code_isValid;

    QDateTime m_date_max;
    bool m_date_max_isSet;
    bool m_date_max_isValid;

    QDateTime m_date_min;
    bool m_date_min_isSet;
    bool m_date_min_isValid;

    bool m_decimals_allowed;
    bool m_decimals_allowed_isSet;
    bool m_decimals_allowed_isValid;

    QString m_default_metric_unit;
    bool m_default_metric_unit_isSet;
    bool m_default_metric_unit_isValid;

    bool m_default_value;
    bool m_default_value_isSet;
    bool m_default_value_isValid;

    QString m_group;
    bool m_group_isSet;
    bool m_group_isValid;

    OAIAttributes_allOf__embedded_items_inner_allOf_group_labels m_group_labels;
    bool m_group_labels_isSet;
    bool m_group_labels_isValid;

    OAIGet_asset_families__code__attributes_200_response_inner_labels m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    bool m_localizable;
    bool m_localizable_isSet;
    bool m_localizable_isValid;

    qint32 m_max_characters;
    bool m_max_characters_isSet;
    bool m_max_characters_isValid;

    QString m_max_file_size;
    bool m_max_file_size_isSet;
    bool m_max_file_size_isValid;

    QString m_metric_family;
    bool m_metric_family_isSet;
    bool m_metric_family_isValid;

    bool m_negative_allowed;
    bool m_negative_allowed_isSet;
    bool m_negative_allowed_isValid;

    QString m_number_max;
    bool m_number_max_isSet;
    bool m_number_max_isValid;

    QString m_number_min;
    bool m_number_min_isSet;
    bool m_number_min_isValid;

    QString m_reference_data_name;
    bool m_reference_data_name_isSet;
    bool m_reference_data_name_isValid;

    bool m_scopable;
    bool m_scopable_isSet;
    bool m_scopable_isValid;

    qint32 m_sort_order;
    bool m_sort_order_isSet;
    bool m_sort_order_isValid;

    QList<OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner> m_table_configuration;
    bool m_table_configuration_isSet;
    bool m_table_configuration_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    bool m_unique;
    bool m_unique_isSet;
    bool m_unique_isValid;

    bool m_useable_as_grid_filter;
    bool m_useable_as_grid_filter_isSet;
    bool m_useable_as_grid_filter_isValid;

    QString m_validation_regexp;
    bool m_validation_regexp_isSet;
    bool m_validation_regexp_isValid;

    QString m_validation_rule;
    bool m_validation_rule_isSet;
    bool m_validation_rule_isValid;

    bool m_wysiwyg_enabled;
    bool m_wysiwyg_enabled_isSet;
    bool m_wysiwyg_enabled_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAttributeList)

#endif // OAIAttributeList_H
