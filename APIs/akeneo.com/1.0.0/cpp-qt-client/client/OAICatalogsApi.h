/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICatalogsApi_H
#define OAI_OAICatalogsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICatalogs.h"
#include "OAIPost_app_catalog_201_response.h"
#include "OAIPost_app_catalog_request.h"
#include "OAIPost_token_400_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICatalogsApi : public QObject {
    Q_OBJECT

public:
    OAICatalogsApi(const int timeOut = 0);
    ~OAICatalogsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteAppCatalog(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getAppCatalog(const QString &id);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getAppCatalogs(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  body OAIPost_app_catalog_request [optional]
    */
    virtual void patchAppCatalog(const QString &id, const ::OpenAPI::OptionalParam<OAIPost_app_catalog_request> &body = ::OpenAPI::OptionalParam<OAIPost_app_catalog_request>());

    /**
    * @param[in]  body OAIPost_app_catalog_request [optional]
    */
    virtual void postAppCatalog(const ::OpenAPI::OptionalParam<OAIPost_app_catalog_request> &body = ::OpenAPI::OptionalParam<OAIPost_app_catalog_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteAppCatalogCallback(OAIHttpRequestWorker *worker);
    void getAppCatalogCallback(OAIHttpRequestWorker *worker);
    void getAppCatalogsCallback(OAIHttpRequestWorker *worker);
    void patchAppCatalogCallback(OAIHttpRequestWorker *worker);
    void postAppCatalogCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteAppCatalogSignal();
    void getAppCatalogSignal(OAIPost_app_catalog_201_response summary);
    void getAppCatalogsSignal(OAICatalogs summary);
    void patchAppCatalogSignal(OAIPost_app_catalog_201_response summary);
    void postAppCatalogSignal(OAIPost_app_catalog_201_response summary);


    void deleteAppCatalogSignalFull(OAIHttpRequestWorker *worker);
    void getAppCatalogSignalFull(OAIHttpRequestWorker *worker, OAIPost_app_catalog_201_response summary);
    void getAppCatalogsSignalFull(OAIHttpRequestWorker *worker, OAICatalogs summary);
    void patchAppCatalogSignalFull(OAIHttpRequestWorker *worker, OAIPost_app_catalog_201_response summary);
    void postAppCatalogSignalFull(OAIHttpRequestWorker *worker, OAIPost_app_catalog_201_response summary);

    Q_DECL_DEPRECATED_X("Use deleteAppCatalogSignalError() instead")
    void deleteAppCatalogSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAppCatalogSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAppCatalogSignalError() instead")
    void getAppCatalogSignalE(OAIPost_app_catalog_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAppCatalogSignalError(OAIPost_app_catalog_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAppCatalogsSignalError() instead")
    void getAppCatalogsSignalE(OAICatalogs summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAppCatalogsSignalError(OAICatalogs summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchAppCatalogSignalError() instead")
    void patchAppCatalogSignalE(OAIPost_app_catalog_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchAppCatalogSignalError(OAIPost_app_catalog_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAppCatalogSignalError() instead")
    void postAppCatalogSignalE(OAIPost_app_catalog_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postAppCatalogSignalError(OAIPost_app_catalog_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteAppCatalogSignalErrorFull() instead")
    void deleteAppCatalogSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAppCatalogSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAppCatalogSignalErrorFull() instead")
    void getAppCatalogSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAppCatalogSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAppCatalogsSignalErrorFull() instead")
    void getAppCatalogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAppCatalogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchAppCatalogSignalErrorFull() instead")
    void patchAppCatalogSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchAppCatalogSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAppCatalogSignalErrorFull() instead")
    void postAppCatalogSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postAppCatalogSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
