/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAttributeApi_H
#define OAI_OAIAttributeApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAttributes.h"
#include "OAIPatch_asset_categories_200_response.h"
#include "OAIPatch_attributes_request.h"
#include "OAIPost_attributes_request.h"
#include "OAIPost_token_400_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAttributeApi : public QObject {
    Q_OBJECT

public:
    OAIAttributeApi(const int timeOut = 0);
    ~OAIAttributeApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  search QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  with_count bool [optional]
    * @param[in]  with_table_select_options bool [optional]
    */
    virtual void getAttributes(const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &with_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &with_table_select_options = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  code QString [required]
    * @param[in]  with_table_select_options bool [optional]
    */
    virtual void getAttributesCode(const QString &code, const ::OpenAPI::OptionalParam<bool> &with_table_select_options = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  body OAIPatch_attributes_request [optional]
    */
    virtual void patchAttributes(const ::OpenAPI::OptionalParam<OAIPatch_attributes_request> &body = ::OpenAPI::OptionalParam<OAIPatch_attributes_request>());

    /**
    * @param[in]  code QString [required]
    * @param[in]  body OAIPost_attributes_request [required]
    */
    virtual void patchAttributesCode(const QString &code, const OAIPost_attributes_request &body);

    /**
    * @param[in]  body OAIPost_attributes_request [optional]
    */
    virtual void postAttributes(const ::OpenAPI::OptionalParam<OAIPost_attributes_request> &body = ::OpenAPI::OptionalParam<OAIPost_attributes_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAttributesCallback(OAIHttpRequestWorker *worker);
    void getAttributesCodeCallback(OAIHttpRequestWorker *worker);
    void patchAttributesCallback(OAIHttpRequestWorker *worker);
    void patchAttributesCodeCallback(OAIHttpRequestWorker *worker);
    void postAttributesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAttributesSignal(OAIAttributes summary);
    void getAttributesCodeSignal(OAIPost_attributes_request summary);
    void patchAttributesSignal(OAIPatch_asset_categories_200_response summary);
    void patchAttributesCodeSignal();
    void postAttributesSignal();


    void getAttributesSignalFull(OAIHttpRequestWorker *worker, OAIAttributes summary);
    void getAttributesCodeSignalFull(OAIHttpRequestWorker *worker, OAIPost_attributes_request summary);
    void patchAttributesSignalFull(OAIHttpRequestWorker *worker, OAIPatch_asset_categories_200_response summary);
    void patchAttributesCodeSignalFull(OAIHttpRequestWorker *worker);
    void postAttributesSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getAttributesSignalError() instead")
    void getAttributesSignalE(OAIAttributes summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttributesSignalError(OAIAttributes summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttributesCodeSignalError() instead")
    void getAttributesCodeSignalE(OAIPost_attributes_request summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttributesCodeSignalError(OAIPost_attributes_request summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchAttributesSignalError() instead")
    void patchAttributesSignalE(OAIPatch_asset_categories_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchAttributesSignalError(OAIPatch_asset_categories_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchAttributesCodeSignalError() instead")
    void patchAttributesCodeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void patchAttributesCodeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAttributesSignalError() instead")
    void postAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAttributesSignalErrorFull() instead")
    void getAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttributesCodeSignalErrorFull() instead")
    void getAttributesCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttributesCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchAttributesSignalErrorFull() instead")
    void patchAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchAttributesCodeSignalErrorFull() instead")
    void patchAttributesCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchAttributesCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAttributesSignalErrorFull() instead")
    void postAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
