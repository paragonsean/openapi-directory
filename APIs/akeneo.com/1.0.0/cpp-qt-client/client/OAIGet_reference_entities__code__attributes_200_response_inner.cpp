/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_reference_entities__code__attributes_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_reference_entities__code__attributes_200_response_inner::OAIGet_reference_entities__code__attributes_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_reference_entities__code__attributes_200_response_inner::OAIGet_reference_entities__code__attributes_200_response_inner() {
    this->initializeModel();
}

OAIGet_reference_entities__code__attributes_200_response_inner::~OAIGet_reference_entities__code__attributes_200_response_inner() {}

void OAIGet_reference_entities__code__attributes_200_response_inner::initializeModel() {

    m_allowed_extensions_isSet = false;
    m_allowed_extensions_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_decimals_allowed_isSet = false;
    m_decimals_allowed_isValid = false;

    m_is_required_for_completeness_isSet = false;
    m_is_required_for_completeness_isValid = false;

    m_is_rich_text_editor_isSet = false;
    m_is_rich_text_editor_isValid = false;

    m_is_textarea_isSet = false;
    m_is_textarea_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_max_characters_isSet = false;
    m_max_characters_isValid = false;

    m_max_file_size_isSet = false;
    m_max_file_size_isValid = false;

    m_max_value_isSet = false;
    m_max_value_isValid = false;

    m_min_value_isSet = false;
    m_min_value_isValid = false;

    m_reference_entity_code_isSet = false;
    m_reference_entity_code_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_validation_regexp_isSet = false;
    m_validation_regexp_isValid = false;

    m_validation_rule_isSet = false;
    m_validation_rule_isValid = false;

    m_value_per_channel_isSet = false;
    m_value_per_channel_isValid = false;

    m_value_per_locale_isSet = false;
    m_value_per_locale_isValid = false;
}

void OAIGet_reference_entities__code__attributes_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_reference_entities__code__attributes_200_response_inner::fromJsonObject(QJsonObject json) {

    m_allowed_extensions_isValid = ::OpenAPI::fromJsonValue(m_allowed_extensions, json[QString("allowed_extensions")]);
    m_allowed_extensions_isSet = !json[QString("allowed_extensions")].isNull() && m_allowed_extensions_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_decimals_allowed_isValid = ::OpenAPI::fromJsonValue(m_decimals_allowed, json[QString("decimals_allowed")]);
    m_decimals_allowed_isSet = !json[QString("decimals_allowed")].isNull() && m_decimals_allowed_isValid;

    m_is_required_for_completeness_isValid = ::OpenAPI::fromJsonValue(m_is_required_for_completeness, json[QString("is_required_for_completeness")]);
    m_is_required_for_completeness_isSet = !json[QString("is_required_for_completeness")].isNull() && m_is_required_for_completeness_isValid;

    m_is_rich_text_editor_isValid = ::OpenAPI::fromJsonValue(m_is_rich_text_editor, json[QString("is_rich_text_editor")]);
    m_is_rich_text_editor_isSet = !json[QString("is_rich_text_editor")].isNull() && m_is_rich_text_editor_isValid;

    m_is_textarea_isValid = ::OpenAPI::fromJsonValue(m_is_textarea, json[QString("is_textarea")]);
    m_is_textarea_isSet = !json[QString("is_textarea")].isNull() && m_is_textarea_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_max_characters_isValid = ::OpenAPI::fromJsonValue(m_max_characters, json[QString("max_characters")]);
    m_max_characters_isSet = !json[QString("max_characters")].isNull() && m_max_characters_isValid;

    m_max_file_size_isValid = ::OpenAPI::fromJsonValue(m_max_file_size, json[QString("max_file_size")]);
    m_max_file_size_isSet = !json[QString("max_file_size")].isNull() && m_max_file_size_isValid;

    m_max_value_isValid = ::OpenAPI::fromJsonValue(m_max_value, json[QString("max_value")]);
    m_max_value_isSet = !json[QString("max_value")].isNull() && m_max_value_isValid;

    m_min_value_isValid = ::OpenAPI::fromJsonValue(m_min_value, json[QString("min_value")]);
    m_min_value_isSet = !json[QString("min_value")].isNull() && m_min_value_isValid;

    m_reference_entity_code_isValid = ::OpenAPI::fromJsonValue(m_reference_entity_code, json[QString("reference_entity_code")]);
    m_reference_entity_code_isSet = !json[QString("reference_entity_code")].isNull() && m_reference_entity_code_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_validation_regexp_isValid = ::OpenAPI::fromJsonValue(m_validation_regexp, json[QString("validation_regexp")]);
    m_validation_regexp_isSet = !json[QString("validation_regexp")].isNull() && m_validation_regexp_isValid;

    m_validation_rule_isValid = ::OpenAPI::fromJsonValue(m_validation_rule, json[QString("validation_rule")]);
    m_validation_rule_isSet = !json[QString("validation_rule")].isNull() && m_validation_rule_isValid;

    m_value_per_channel_isValid = ::OpenAPI::fromJsonValue(m_value_per_channel, json[QString("value_per_channel")]);
    m_value_per_channel_isSet = !json[QString("value_per_channel")].isNull() && m_value_per_channel_isValid;

    m_value_per_locale_isValid = ::OpenAPI::fromJsonValue(m_value_per_locale, json[QString("value_per_locale")]);
    m_value_per_locale_isSet = !json[QString("value_per_locale")].isNull() && m_value_per_locale_isValid;
}

QString OAIGet_reference_entities__code__attributes_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_reference_entities__code__attributes_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_extensions.size() > 0) {
        obj.insert(QString("allowed_extensions"), ::OpenAPI::toJsonValue(m_allowed_extensions));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_decimals_allowed_isSet) {
        obj.insert(QString("decimals_allowed"), ::OpenAPI::toJsonValue(m_decimals_allowed));
    }
    if (m_is_required_for_completeness_isSet) {
        obj.insert(QString("is_required_for_completeness"), ::OpenAPI::toJsonValue(m_is_required_for_completeness));
    }
    if (m_is_rich_text_editor_isSet) {
        obj.insert(QString("is_rich_text_editor"), ::OpenAPI::toJsonValue(m_is_rich_text_editor));
    }
    if (m_is_textarea_isSet) {
        obj.insert(QString("is_textarea"), ::OpenAPI::toJsonValue(m_is_textarea));
    }
    if (m_labels.isSet()) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_max_characters_isSet) {
        obj.insert(QString("max_characters"), ::OpenAPI::toJsonValue(m_max_characters));
    }
    if (m_max_file_size_isSet) {
        obj.insert(QString("max_file_size"), ::OpenAPI::toJsonValue(m_max_file_size));
    }
    if (m_max_value_isSet) {
        obj.insert(QString("max_value"), ::OpenAPI::toJsonValue(m_max_value));
    }
    if (m_min_value_isSet) {
        obj.insert(QString("min_value"), ::OpenAPI::toJsonValue(m_min_value));
    }
    if (m_reference_entity_code_isSet) {
        obj.insert(QString("reference_entity_code"), ::OpenAPI::toJsonValue(m_reference_entity_code));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_validation_regexp_isSet) {
        obj.insert(QString("validation_regexp"), ::OpenAPI::toJsonValue(m_validation_regexp));
    }
    if (m_validation_rule_isSet) {
        obj.insert(QString("validation_rule"), ::OpenAPI::toJsonValue(m_validation_rule));
    }
    if (m_value_per_channel_isSet) {
        obj.insert(QString("value_per_channel"), ::OpenAPI::toJsonValue(m_value_per_channel));
    }
    if (m_value_per_locale_isSet) {
        obj.insert(QString("value_per_locale"), ::OpenAPI::toJsonValue(m_value_per_locale));
    }
    return obj;
}

QList<QString> OAIGet_reference_entities__code__attributes_200_response_inner::getAllowedExtensions() const {
    return m_allowed_extensions;
}
void OAIGet_reference_entities__code__attributes_200_response_inner::setAllowedExtensions(const QList<QString> &allowed_extensions) {
    m_allowed_extensions = allowed_extensions;
    m_allowed_extensions_isSet = true;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::is_allowed_extensions_Set() const{
    return m_allowed_extensions_isSet;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::is_allowed_extensions_Valid() const{
    return m_allowed_extensions_isValid;
}

QString OAIGet_reference_entities__code__attributes_200_response_inner::getCode() const {
    return m_code;
}
void OAIGet_reference_entities__code__attributes_200_response_inner::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::is_code_Set() const{
    return m_code_isSet;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::is_code_Valid() const{
    return m_code_isValid;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::isDecimalsAllowed() const {
    return m_decimals_allowed;
}
void OAIGet_reference_entities__code__attributes_200_response_inner::setDecimalsAllowed(const bool &decimals_allowed) {
    m_decimals_allowed = decimals_allowed;
    m_decimals_allowed_isSet = true;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::is_decimals_allowed_Set() const{
    return m_decimals_allowed_isSet;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::is_decimals_allowed_Valid() const{
    return m_decimals_allowed_isValid;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::isIsRequiredForCompleteness() const {
    return m_is_required_for_completeness;
}
void OAIGet_reference_entities__code__attributes_200_response_inner::setIsRequiredForCompleteness(const bool &is_required_for_completeness) {
    m_is_required_for_completeness = is_required_for_completeness;
    m_is_required_for_completeness_isSet = true;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::is_is_required_for_completeness_Set() const{
    return m_is_required_for_completeness_isSet;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::is_is_required_for_completeness_Valid() const{
    return m_is_required_for_completeness_isValid;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::isIsRichTextEditor() const {
    return m_is_rich_text_editor;
}
void OAIGet_reference_entities__code__attributes_200_response_inner::setIsRichTextEditor(const bool &is_rich_text_editor) {
    m_is_rich_text_editor = is_rich_text_editor;
    m_is_rich_text_editor_isSet = true;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::is_is_rich_text_editor_Set() const{
    return m_is_rich_text_editor_isSet;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::is_is_rich_text_editor_Valid() const{
    return m_is_rich_text_editor_isValid;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::isIsTextarea() const {
    return m_is_textarea;
}
void OAIGet_reference_entities__code__attributes_200_response_inner::setIsTextarea(const bool &is_textarea) {
    m_is_textarea = is_textarea;
    m_is_textarea_isSet = true;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::is_is_textarea_Set() const{
    return m_is_textarea_isSet;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::is_is_textarea_Valid() const{
    return m_is_textarea_isValid;
}

OAIGet_asset_families__code__attributes_200_response_inner_labels OAIGet_reference_entities__code__attributes_200_response_inner::getLabels() const {
    return m_labels;
}
void OAIGet_reference_entities__code__attributes_200_response_inner::setLabels(const OAIGet_asset_families__code__attributes_200_response_inner_labels &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::is_labels_Valid() const{
    return m_labels_isValid;
}

qint32 OAIGet_reference_entities__code__attributes_200_response_inner::getMaxCharacters() const {
    return m_max_characters;
}
void OAIGet_reference_entities__code__attributes_200_response_inner::setMaxCharacters(const qint32 &max_characters) {
    m_max_characters = max_characters;
    m_max_characters_isSet = true;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::is_max_characters_Set() const{
    return m_max_characters_isSet;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::is_max_characters_Valid() const{
    return m_max_characters_isValid;
}

QString OAIGet_reference_entities__code__attributes_200_response_inner::getMaxFileSize() const {
    return m_max_file_size;
}
void OAIGet_reference_entities__code__attributes_200_response_inner::setMaxFileSize(const QString &max_file_size) {
    m_max_file_size = max_file_size;
    m_max_file_size_isSet = true;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::is_max_file_size_Set() const{
    return m_max_file_size_isSet;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::is_max_file_size_Valid() const{
    return m_max_file_size_isValid;
}

QString OAIGet_reference_entities__code__attributes_200_response_inner::getMaxValue() const {
    return m_max_value;
}
void OAIGet_reference_entities__code__attributes_200_response_inner::setMaxValue(const QString &max_value) {
    m_max_value = max_value;
    m_max_value_isSet = true;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::is_max_value_Set() const{
    return m_max_value_isSet;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::is_max_value_Valid() const{
    return m_max_value_isValid;
}

QString OAIGet_reference_entities__code__attributes_200_response_inner::getMinValue() const {
    return m_min_value;
}
void OAIGet_reference_entities__code__attributes_200_response_inner::setMinValue(const QString &min_value) {
    m_min_value = min_value;
    m_min_value_isSet = true;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::is_min_value_Set() const{
    return m_min_value_isSet;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::is_min_value_Valid() const{
    return m_min_value_isValid;
}

QString OAIGet_reference_entities__code__attributes_200_response_inner::getReferenceEntityCode() const {
    return m_reference_entity_code;
}
void OAIGet_reference_entities__code__attributes_200_response_inner::setReferenceEntityCode(const QString &reference_entity_code) {
    m_reference_entity_code = reference_entity_code;
    m_reference_entity_code_isSet = true;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::is_reference_entity_code_Set() const{
    return m_reference_entity_code_isSet;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::is_reference_entity_code_Valid() const{
    return m_reference_entity_code_isValid;
}

QString OAIGet_reference_entities__code__attributes_200_response_inner::getType() const {
    return m_type;
}
void OAIGet_reference_entities__code__attributes_200_response_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIGet_reference_entities__code__attributes_200_response_inner::getValidationRegexp() const {
    return m_validation_regexp;
}
void OAIGet_reference_entities__code__attributes_200_response_inner::setValidationRegexp(const QString &validation_regexp) {
    m_validation_regexp = validation_regexp;
    m_validation_regexp_isSet = true;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::is_validation_regexp_Set() const{
    return m_validation_regexp_isSet;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::is_validation_regexp_Valid() const{
    return m_validation_regexp_isValid;
}

QString OAIGet_reference_entities__code__attributes_200_response_inner::getValidationRule() const {
    return m_validation_rule;
}
void OAIGet_reference_entities__code__attributes_200_response_inner::setValidationRule(const QString &validation_rule) {
    m_validation_rule = validation_rule;
    m_validation_rule_isSet = true;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::is_validation_rule_Set() const{
    return m_validation_rule_isSet;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::is_validation_rule_Valid() const{
    return m_validation_rule_isValid;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::isValuePerChannel() const {
    return m_value_per_channel;
}
void OAIGet_reference_entities__code__attributes_200_response_inner::setValuePerChannel(const bool &value_per_channel) {
    m_value_per_channel = value_per_channel;
    m_value_per_channel_isSet = true;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::is_value_per_channel_Set() const{
    return m_value_per_channel_isSet;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::is_value_per_channel_Valid() const{
    return m_value_per_channel_isValid;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::isValuePerLocale() const {
    return m_value_per_locale;
}
void OAIGet_reference_entities__code__attributes_200_response_inner::setValuePerLocale(const bool &value_per_locale) {
    m_value_per_locale = value_per_locale;
    m_value_per_locale_isSet = true;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::is_value_per_locale_Set() const{
    return m_value_per_locale_isSet;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::is_value_per_locale_Valid() const{
    return m_value_per_locale_isValid;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_extensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decimals_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_required_for_completeness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_rich_text_editor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_textarea_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_characters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_file_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_entity_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_regexp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_rule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_per_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_per_locale_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_reference_entities__code__attributes_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
