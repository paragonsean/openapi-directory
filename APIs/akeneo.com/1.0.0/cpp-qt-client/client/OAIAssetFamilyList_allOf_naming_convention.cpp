/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssetFamilyList_allOf_naming_convention.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssetFamilyList_allOf_naming_convention::OAIAssetFamilyList_allOf_naming_convention(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssetFamilyList_allOf_naming_convention::OAIAssetFamilyList_allOf_naming_convention() {
    this->initializeModel();
}

OAIAssetFamilyList_allOf_naming_convention::~OAIAssetFamilyList_allOf_naming_convention() {}

void OAIAssetFamilyList_allOf_naming_convention::initializeModel() {

    m_abort_asset_creation_on_error_isSet = false;
    m_abort_asset_creation_on_error_isValid = false;

    m_pattern_isSet = false;
    m_pattern_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAIAssetFamilyList_allOf_naming_convention::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssetFamilyList_allOf_naming_convention::fromJsonObject(QJsonObject json) {

    m_abort_asset_creation_on_error_isValid = ::OpenAPI::fromJsonValue(m_abort_asset_creation_on_error, json[QString("abort_asset_creation_on_error")]);
    m_abort_asset_creation_on_error_isSet = !json[QString("abort_asset_creation_on_error")].isNull() && m_abort_asset_creation_on_error_isValid;

    m_pattern_isValid = ::OpenAPI::fromJsonValue(m_pattern, json[QString("pattern")]);
    m_pattern_isSet = !json[QString("pattern")].isNull() && m_pattern_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAIAssetFamilyList_allOf_naming_convention::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssetFamilyList_allOf_naming_convention::asJsonObject() const {
    QJsonObject obj;
    if (m_abort_asset_creation_on_error_isSet) {
        obj.insert(QString("abort_asset_creation_on_error"), ::OpenAPI::toJsonValue(m_abort_asset_creation_on_error));
    }
    if (m_pattern_isSet) {
        obj.insert(QString("pattern"), ::OpenAPI::toJsonValue(m_pattern));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

bool OAIAssetFamilyList_allOf_naming_convention::isAbortAssetCreationOnError() const {
    return m_abort_asset_creation_on_error;
}
void OAIAssetFamilyList_allOf_naming_convention::setAbortAssetCreationOnError(const bool &abort_asset_creation_on_error) {
    m_abort_asset_creation_on_error = abort_asset_creation_on_error;
    m_abort_asset_creation_on_error_isSet = true;
}

bool OAIAssetFamilyList_allOf_naming_convention::is_abort_asset_creation_on_error_Set() const{
    return m_abort_asset_creation_on_error_isSet;
}

bool OAIAssetFamilyList_allOf_naming_convention::is_abort_asset_creation_on_error_Valid() const{
    return m_abort_asset_creation_on_error_isValid;
}

QString OAIAssetFamilyList_allOf_naming_convention::getPattern() const {
    return m_pattern;
}
void OAIAssetFamilyList_allOf_naming_convention::setPattern(const QString &pattern) {
    m_pattern = pattern;
    m_pattern_isSet = true;
}

bool OAIAssetFamilyList_allOf_naming_convention::is_pattern_Set() const{
    return m_pattern_isSet;
}

bool OAIAssetFamilyList_allOf_naming_convention::is_pattern_Valid() const{
    return m_pattern_isValid;
}

OAIObject OAIAssetFamilyList_allOf_naming_convention::getSource() const {
    return m_source;
}
void OAIAssetFamilyList_allOf_naming_convention::setSource(const OAIObject &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIAssetFamilyList_allOf_naming_convention::is_source_Set() const{
    return m_source_isSet;
}

bool OAIAssetFamilyList_allOf_naming_convention::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIAssetFamilyList_allOf_naming_convention::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_abort_asset_creation_on_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssetFamilyList_allOf_naming_convention::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
