/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner::OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner::OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner() {
    this->initializeModel();
}

OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner::~OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner() {}

void OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner::initializeModel() {

    m_filename_prefix_isSet = false;
    m_filename_prefix_isValid = false;

    m_filename_suffix_isSet = false;
    m_filename_suffix_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_operations_isSet = false;
    m_operations_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;
}

void OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner::fromJsonObject(QJsonObject json) {

    m_filename_prefix_isValid = ::OpenAPI::fromJsonValue(m_filename_prefix, json[QString("filename_prefix")]);
    m_filename_prefix_isSet = !json[QString("filename_prefix")].isNull() && m_filename_prefix_isValid;

    m_filename_suffix_isValid = ::OpenAPI::fromJsonValue(m_filename_suffix, json[QString("filename_suffix")]);
    m_filename_suffix_isSet = !json[QString("filename_suffix")].isNull() && m_filename_suffix_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_operations_isValid = ::OpenAPI::fromJsonValue(m_operations, json[QString("operations")]);
    m_operations_isSet = !json[QString("operations")].isNull() && m_operations_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;
}

QString OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_filename_prefix_isSet) {
        obj.insert(QString("filename_prefix"), ::OpenAPI::toJsonValue(m_filename_prefix));
    }
    if (m_filename_suffix_isSet) {
        obj.insert(QString("filename_suffix"), ::OpenAPI::toJsonValue(m_filename_suffix));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_operations.isSet()) {
        obj.insert(QString("operations"), ::OpenAPI::toJsonValue(m_operations));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_target.isSet()) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    return obj;
}

QString OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner::getFilenamePrefix() const {
    return m_filename_prefix;
}
void OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner::setFilenamePrefix(const QString &filename_prefix) {
    m_filename_prefix = filename_prefix;
    m_filename_prefix_isSet = true;
}

bool OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner::is_filename_prefix_Set() const{
    return m_filename_prefix_isSet;
}

bool OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner::is_filename_prefix_Valid() const{
    return m_filename_prefix_isValid;
}

QString OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner::getFilenameSuffix() const {
    return m_filename_suffix;
}
void OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner::setFilenameSuffix(const QString &filename_suffix) {
    m_filename_suffix = filename_suffix;
    m_filename_suffix_isSet = true;
}

bool OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner::is_filename_suffix_Set() const{
    return m_filename_suffix_isSet;
}

bool OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner::is_filename_suffix_Valid() const{
    return m_filename_suffix_isValid;
}

QString OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner::getLabel() const {
    return m_label;
}
void OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner::is_label_Set() const{
    return m_label_isSet;
}

bool OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner::is_label_Valid() const{
    return m_label_isValid;
}

OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner::getOperations() const {
    return m_operations;
}
void OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner::setOperations(const OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_operations &operations) {
    m_operations = operations;
    m_operations_isSet = true;
}

bool OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner::is_operations_Set() const{
    return m_operations_isSet;
}

bool OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner::is_operations_Valid() const{
    return m_operations_isValid;
}

OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_source OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner::getSource() const {
    return m_source;
}
void OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner::setSource(const OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_source &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner::is_source_Set() const{
    return m_source_isSet;
}

bool OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner::is_source_Valid() const{
    return m_source_isValid;
}

OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_target OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner::getTarget() const {
    return m_target;
}
void OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner::setTarget(const OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner_target &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner::is_target_Set() const{
    return m_target_isSet;
}

bool OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner::is_target_Valid() const{
    return m_target_isValid;
}

bool OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filename_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filename_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAsset_families_allOf__embedded_items_inner_allOf_transformations_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_label_isValid && m_operations_isValid && m_source_isValid && m_target_isValid && true;
}

} // namespace OpenAPI
