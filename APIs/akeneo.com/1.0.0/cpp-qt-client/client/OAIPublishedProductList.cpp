/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublishedProductList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPublishedProductList::OAIPublishedProductList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPublishedProductList::OAIPublishedProductList() {
    this->initializeModel();
}

OAIPublishedProductList::~OAIPublishedProductList() {}

void OAIPublishedProductList::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_associations_isSet = false;
    m_associations_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_family_isSet = false;
    m_family_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_quantified_associations_isSet = false;
    m_quantified_associations_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIPublishedProductList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPublishedProductList::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_associations_isValid = ::OpenAPI::fromJsonValue(m_associations, json[QString("associations")]);
    m_associations_isSet = !json[QString("associations")].isNull() && m_associations_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_family_isValid = ::OpenAPI::fromJsonValue(m_family, json[QString("family")]);
    m_family_isSet = !json[QString("family")].isNull() && m_family_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_quantified_associations_isValid = ::OpenAPI::fromJsonValue(m_quantified_associations, json[QString("quantified_associations")]);
    m_quantified_associations_isSet = !json[QString("quantified_associations")].isNull() && m_quantified_associations_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAIPublishedProductList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPublishedProductList::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_associations.isSet()) {
        obj.insert(QString("associations"), ::OpenAPI::toJsonValue(m_associations));
    }
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_family_isSet) {
        obj.insert(QString("family"), ::OpenAPI::toJsonValue(m_family));
    }
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_quantified_associations_isSet) {
        obj.insert(QString("quantified_associations"), ::OpenAPI::toJsonValue(m_quantified_associations));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_values.isSet()) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

OAIPAM_Asset_Categories_allOf__embedded_items_inner_allOf__links OAIPublishedProductList::getLinks() const {
    return m__links;
}
void OAIPublishedProductList::setLinks(const OAIPAM_Asset_Categories_allOf__embedded_items_inner_allOf__links &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIPublishedProductList::is__links_Set() const{
    return m__links_isSet;
}

bool OAIPublishedProductList::is__links_Valid() const{
    return m__links_isValid;
}

OAIPublished_products_allOf__embedded_items_inner_allOf_associations OAIPublishedProductList::getAssociations() const {
    return m_associations;
}
void OAIPublishedProductList::setAssociations(const OAIPublished_products_allOf__embedded_items_inner_allOf_associations &associations) {
    m_associations = associations;
    m_associations_isSet = true;
}

bool OAIPublishedProductList::is_associations_Set() const{
    return m_associations_isSet;
}

bool OAIPublishedProductList::is_associations_Valid() const{
    return m_associations_isValid;
}

QList<QString> OAIPublishedProductList::getCategories() const {
    return m_categories;
}
void OAIPublishedProductList::setCategories(const QList<QString> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIPublishedProductList::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIPublishedProductList::is_categories_Valid() const{
    return m_categories_isValid;
}

QString OAIPublishedProductList::getCreated() const {
    return m_created;
}
void OAIPublishedProductList::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIPublishedProductList::is_created_Set() const{
    return m_created_isSet;
}

bool OAIPublishedProductList::is_created_Valid() const{
    return m_created_isValid;
}

bool OAIPublishedProductList::isEnabled() const {
    return m_enabled;
}
void OAIPublishedProductList::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIPublishedProductList::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIPublishedProductList::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIPublishedProductList::getFamily() const {
    return m_family;
}
void OAIPublishedProductList::setFamily(const QString &family) {
    m_family = family;
    m_family_isSet = true;
}

bool OAIPublishedProductList::is_family_Set() const{
    return m_family_isSet;
}

bool OAIPublishedProductList::is_family_Valid() const{
    return m_family_isValid;
}

QList<QString> OAIPublishedProductList::getGroups() const {
    return m_groups;
}
void OAIPublishedProductList::setGroups(const QList<QString> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIPublishedProductList::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIPublishedProductList::is_groups_Valid() const{
    return m_groups_isValid;
}

QString OAIPublishedProductList::getIdentifier() const {
    return m_identifier;
}
void OAIPublishedProductList::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIPublishedProductList::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIPublishedProductList::is_identifier_Valid() const{
    return m_identifier_isValid;
}

OAIObject OAIPublishedProductList::getQuantifiedAssociations() const {
    return m_quantified_associations;
}
void OAIPublishedProductList::setQuantifiedAssociations(const OAIObject &quantified_associations) {
    m_quantified_associations = quantified_associations;
    m_quantified_associations_isSet = true;
}

bool OAIPublishedProductList::is_quantified_associations_Set() const{
    return m_quantified_associations_isSet;
}

bool OAIPublishedProductList::is_quantified_associations_Valid() const{
    return m_quantified_associations_isValid;
}

QString OAIPublishedProductList::getUpdated() const {
    return m_updated;
}
void OAIPublishedProductList::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIPublishedProductList::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIPublishedProductList::is_updated_Valid() const{
    return m_updated_isValid;
}

OAIPublishedProductList_allOf_values OAIPublishedProductList::getValues() const {
    return m_values;
}
void OAIPublishedProductList::setValues(const OAIPublishedProductList_allOf_values &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIPublishedProductList::is_values_Set() const{
    return m_values_isSet;
}

bool OAIPublishedProductList::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIPublishedProductList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_associations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantified_associations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPublishedProductList::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_identifier_isValid && true;
}

} // namespace OpenAPI
