/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProductIdentifierApi_H
#define OAI_OAIProductIdentifierApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPatch_asset_categories_200_response.h"
#include "OAIPatch_products_request.h"
#include "OAIPost_products_request.h"
#include "OAIPost_token_400_response.h"
#include "OAIProducts_1.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProductIdentifierApi : public QObject {
    Q_OBJECT

public:
    OAIProductIdentifierApi(const int timeOut = 0);
    ~OAIProductIdentifierApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  code QString [required]
    */
    virtual void deleteProductsCode(const QString &code);

    /**
    * @param[in]  code QString [required]
    */
    virtual void getDraftCode(const QString &code);

    /**
    * @param[in]  search QString [optional]
    * @param[in]  scope QString [optional]
    * @param[in]  locales QString [optional]
    * @param[in]  attributes QString [optional]
    * @param[in]  pagination_type QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  search_after QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  with_count bool [optional]
    * @param[in]  with_attribute_options bool [optional]
    * @param[in]  with_quality_scores bool [optional]
    * @param[in]  with_completenesses bool [optional]
    */
    virtual void getProducts(const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &scope = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &locales = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pagination_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &search_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &with_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &with_attribute_options = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &with_quality_scores = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &with_completenesses = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  code QString [required]
    * @param[in]  with_attribute_options bool [optional]
    * @param[in]  with_quality_scores bool [optional]
    * @param[in]  with_completenesses bool [optional]
    */
    virtual void getProductsCode(const QString &code, const ::OpenAPI::OptionalParam<bool> &with_attribute_options = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &with_quality_scores = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &with_completenesses = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  body OAIPatch_products_request [optional]
    */
    virtual void patchProducts(const ::OpenAPI::OptionalParam<OAIPatch_products_request> &body = ::OpenAPI::OptionalParam<OAIPatch_products_request>());

    /**
    * @param[in]  code QString [required]
    * @param[in]  body OAIPost_products_request [required]
    */
    virtual void patchProductsCode(const QString &code, const OAIPost_products_request &body);

    /**
    * @param[in]  body OAIPost_products_request [optional]
    */
    virtual void postProducts(const ::OpenAPI::OptionalParam<OAIPost_products_request> &body = ::OpenAPI::OptionalParam<OAIPost_products_request>());

    /**
    * @param[in]  code QString [required]
    */
    virtual void postProposal(const QString &code);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteProductsCodeCallback(OAIHttpRequestWorker *worker);
    void getDraftCodeCallback(OAIHttpRequestWorker *worker);
    void getProductsCallback(OAIHttpRequestWorker *worker);
    void getProductsCodeCallback(OAIHttpRequestWorker *worker);
    void patchProductsCallback(OAIHttpRequestWorker *worker);
    void patchProductsCodeCallback(OAIHttpRequestWorker *worker);
    void postProductsCallback(OAIHttpRequestWorker *worker);
    void postProposalCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteProductsCodeSignal();
    void getDraftCodeSignal(OAIPost_products_request summary);
    void getProductsSignal(OAIProducts_1 summary);
    void getProductsCodeSignal(OAIPost_products_request summary);
    void patchProductsSignal(OAIPatch_asset_categories_200_response summary);
    void patchProductsCodeSignal();
    void postProductsSignal();
    void postProposalSignal();


    void deleteProductsCodeSignalFull(OAIHttpRequestWorker *worker);
    void getDraftCodeSignalFull(OAIHttpRequestWorker *worker, OAIPost_products_request summary);
    void getProductsSignalFull(OAIHttpRequestWorker *worker, OAIProducts_1 summary);
    void getProductsCodeSignalFull(OAIHttpRequestWorker *worker, OAIPost_products_request summary);
    void patchProductsSignalFull(OAIHttpRequestWorker *worker, OAIPatch_asset_categories_200_response summary);
    void patchProductsCodeSignalFull(OAIHttpRequestWorker *worker);
    void postProductsSignalFull(OAIHttpRequestWorker *worker);
    void postProposalSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use deleteProductsCodeSignalError() instead")
    void deleteProductsCodeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProductsCodeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDraftCodeSignalError() instead")
    void getDraftCodeSignalE(OAIPost_products_request summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDraftCodeSignalError(OAIPost_products_request summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductsSignalError() instead")
    void getProductsSignalE(OAIProducts_1 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductsSignalError(OAIProducts_1 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductsCodeSignalError() instead")
    void getProductsCodeSignalE(OAIPost_products_request summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductsCodeSignalError(OAIPost_products_request summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchProductsSignalError() instead")
    void patchProductsSignalE(OAIPatch_asset_categories_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchProductsSignalError(OAIPatch_asset_categories_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchProductsCodeSignalError() instead")
    void patchProductsCodeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void patchProductsCodeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postProductsSignalError() instead")
    void postProductsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postProductsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postProposalSignalError() instead")
    void postProposalSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postProposalSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteProductsCodeSignalErrorFull() instead")
    void deleteProductsCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProductsCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDraftCodeSignalErrorFull() instead")
    void getDraftCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDraftCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductsSignalErrorFull() instead")
    void getProductsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductsCodeSignalErrorFull() instead")
    void getProductsCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductsCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchProductsSignalErrorFull() instead")
    void patchProductsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchProductsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchProductsCodeSignalErrorFull() instead")
    void patchProductsCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchProductsCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postProductsSignalErrorFull() instead")
    void postProductsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postProductsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postProposalSignalErrorFull() instead")
    void postProposalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postProposalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
