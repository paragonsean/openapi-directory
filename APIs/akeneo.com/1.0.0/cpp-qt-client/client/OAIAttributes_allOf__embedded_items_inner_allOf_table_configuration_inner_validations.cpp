/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner_validations.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner_validations::OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner_validations(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner_validations::OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner_validations() {
    this->initializeModel();
}

OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner_validations::~OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner_validations() {}

void OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner_validations::initializeModel() {

    m_decimals_allowed_isSet = false;
    m_decimals_allowed_isValid = false;

    m_max_isSet = false;
    m_max_isValid = false;

    m_max_length_isSet = false;
    m_max_length_isValid = false;

    m_min_isSet = false;
    m_min_isValid = false;
}

void OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner_validations::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner_validations::fromJsonObject(QJsonObject json) {

    m_decimals_allowed_isValid = ::OpenAPI::fromJsonValue(m_decimals_allowed, json[QString("decimals_allowed")]);
    m_decimals_allowed_isSet = !json[QString("decimals_allowed")].isNull() && m_decimals_allowed_isValid;

    m_max_isValid = ::OpenAPI::fromJsonValue(m_max, json[QString("max")]);
    m_max_isSet = !json[QString("max")].isNull() && m_max_isValid;

    m_max_length_isValid = ::OpenAPI::fromJsonValue(m_max_length, json[QString("max_length")]);
    m_max_length_isSet = !json[QString("max_length")].isNull() && m_max_length_isValid;

    m_min_isValid = ::OpenAPI::fromJsonValue(m_min, json[QString("min")]);
    m_min_isSet = !json[QString("min")].isNull() && m_min_isValid;
}

QString OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner_validations::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner_validations::asJsonObject() const {
    QJsonObject obj;
    if (m_decimals_allowed_isSet) {
        obj.insert(QString("decimals_allowed"), ::OpenAPI::toJsonValue(m_decimals_allowed));
    }
    if (m_max_isSet) {
        obj.insert(QString("max"), ::OpenAPI::toJsonValue(m_max));
    }
    if (m_max_length_isSet) {
        obj.insert(QString("max_length"), ::OpenAPI::toJsonValue(m_max_length));
    }
    if (m_min_isSet) {
        obj.insert(QString("min"), ::OpenAPI::toJsonValue(m_min));
    }
    return obj;
}

bool OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner_validations::isDecimalsAllowed() const {
    return m_decimals_allowed;
}
void OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner_validations::setDecimalsAllowed(const bool &decimals_allowed) {
    m_decimals_allowed = decimals_allowed;
    m_decimals_allowed_isSet = true;
}

bool OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner_validations::is_decimals_allowed_Set() const{
    return m_decimals_allowed_isSet;
}

bool OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner_validations::is_decimals_allowed_Valid() const{
    return m_decimals_allowed_isValid;
}

double OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner_validations::getMax() const {
    return m_max;
}
void OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner_validations::setMax(const double &max) {
    m_max = max;
    m_max_isSet = true;
}

bool OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner_validations::is_max_Set() const{
    return m_max_isSet;
}

bool OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner_validations::is_max_Valid() const{
    return m_max_isValid;
}

double OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner_validations::getMaxLength() const {
    return m_max_length;
}
void OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner_validations::setMaxLength(const double &max_length) {
    m_max_length = max_length;
    m_max_length_isSet = true;
}

bool OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner_validations::is_max_length_Set() const{
    return m_max_length_isSet;
}

bool OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner_validations::is_max_length_Valid() const{
    return m_max_length_isValid;
}

double OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner_validations::getMin() const {
    return m_min;
}
void OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner_validations::setMin(const double &min) {
    m_min = min;
    m_min_isSet = true;
}

bool OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner_validations::is_min_Set() const{
    return m_min_isSet;
}

bool OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner_validations::is_min_Valid() const{
    return m_min_isValid;
}

bool OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner_validations::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_decimals_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner_validations::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
