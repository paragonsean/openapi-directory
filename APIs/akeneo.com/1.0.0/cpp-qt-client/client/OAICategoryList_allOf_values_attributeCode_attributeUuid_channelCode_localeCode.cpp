/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategoryList_allOf_values_attributeCode_attributeUuid_channelCode_localeCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategoryList_allOf_values_attributeCode_attributeUuid_channelCode_localeCode::OAICategoryList_allOf_values_attributeCode_attributeUuid_channelCode_localeCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategoryList_allOf_values_attributeCode_attributeUuid_channelCode_localeCode::OAICategoryList_allOf_values_attributeCode_attributeUuid_channelCode_localeCode() {
    this->initializeModel();
}

OAICategoryList_allOf_values_attributeCode_attributeUuid_channelCode_localeCode::~OAICategoryList_allOf_values_attributeCode_attributeUuid_channelCode_localeCode() {}

void OAICategoryList_allOf_values_attributeCode_attributeUuid_channelCode_localeCode::initializeModel() {

    m_attribute_code_isSet = false;
    m_attribute_code_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICategoryList_allOf_values_attributeCode_attributeUuid_channelCode_localeCode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICategoryList_allOf_values_attributeCode_attributeUuid_channelCode_localeCode::fromJsonObject(QJsonObject json) {

    m_attribute_code_isValid = ::OpenAPI::fromJsonValue(m_attribute_code, json[QString("attribute_code")]);
    m_attribute_code_isSet = !json[QString("attribute_code")].isNull() && m_attribute_code_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICategoryList_allOf_values_attributeCode_attributeUuid_channelCode_localeCode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICategoryList_allOf_values_attributeCode_attributeUuid_channelCode_localeCode::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute_code_isSet) {
        obj.insert(QString("attribute_code"), ::OpenAPI::toJsonValue(m_attribute_code));
    }
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAICategoryList_allOf_values_attributeCode_attributeUuid_channelCode_localeCode::getAttributeCode() const {
    return m_attribute_code;
}
void OAICategoryList_allOf_values_attributeCode_attributeUuid_channelCode_localeCode::setAttributeCode(const QString &attribute_code) {
    m_attribute_code = attribute_code;
    m_attribute_code_isSet = true;
}

bool OAICategoryList_allOf_values_attributeCode_attributeUuid_channelCode_localeCode::is_attribute_code_Set() const{
    return m_attribute_code_isSet;
}

bool OAICategoryList_allOf_values_attributeCode_attributeUuid_channelCode_localeCode::is_attribute_code_Valid() const{
    return m_attribute_code_isValid;
}

QString OAICategoryList_allOf_values_attributeCode_attributeUuid_channelCode_localeCode::getChannel() const {
    return m_channel;
}
void OAICategoryList_allOf_values_attributeCode_attributeUuid_channelCode_localeCode::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAICategoryList_allOf_values_attributeCode_attributeUuid_channelCode_localeCode::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAICategoryList_allOf_values_attributeCode_attributeUuid_channelCode_localeCode::is_channel_Valid() const{
    return m_channel_isValid;
}

OAIObject OAICategoryList_allOf_values_attributeCode_attributeUuid_channelCode_localeCode::getData() const {
    return m_data;
}
void OAICategoryList_allOf_values_attributeCode_attributeUuid_channelCode_localeCode::setData(const OAIObject &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAICategoryList_allOf_values_attributeCode_attributeUuid_channelCode_localeCode::is_data_Set() const{
    return m_data_isSet;
}

bool OAICategoryList_allOf_values_attributeCode_attributeUuid_channelCode_localeCode::is_data_Valid() const{
    return m_data_isValid;
}

QString OAICategoryList_allOf_values_attributeCode_attributeUuid_channelCode_localeCode::getLocale() const {
    return m_locale;
}
void OAICategoryList_allOf_values_attributeCode_attributeUuid_channelCode_localeCode::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAICategoryList_allOf_values_attributeCode_attributeUuid_channelCode_localeCode::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAICategoryList_allOf_values_attributeCode_attributeUuid_channelCode_localeCode::is_locale_Valid() const{
    return m_locale_isValid;
}

QString OAICategoryList_allOf_values_attributeCode_attributeUuid_channelCode_localeCode::getType() const {
    return m_type;
}
void OAICategoryList_allOf_values_attributeCode_attributeUuid_channelCode_localeCode::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICategoryList_allOf_values_attributeCode_attributeUuid_channelCode_localeCode::is_type_Set() const{
    return m_type_isSet;
}

bool OAICategoryList_allOf_values_attributeCode_attributeUuid_channelCode_localeCode::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICategoryList_allOf_values_attributeCode_attributeUuid_channelCode_localeCode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICategoryList_allOf_values_attributeCode_attributeUuid_channelCode_localeCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
