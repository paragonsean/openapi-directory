/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_media_files__code__200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_media_files__code__200_response::OAIGet_media_files__code__200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_media_files__code__200_response::OAIGet_media_files__code__200_response() {
    this->initializeModel();
}

OAIGet_media_files__code__200_response::~OAIGet_media_files__code__200_response() {}

void OAIGet_media_files__code__200_response::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_extension_isSet = false;
    m_extension_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_original_filename_isSet = false;
    m_original_filename_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;
}

void OAIGet_media_files__code__200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_media_files__code__200_response::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_extension_isValid = ::OpenAPI::fromJsonValue(m_extension, json[QString("extension")]);
    m_extension_isSet = !json[QString("extension")].isNull() && m_extension_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mime_type")]);
    m_mime_type_isSet = !json[QString("mime_type")].isNull() && m_mime_type_isValid;

    m_original_filename_isValid = ::OpenAPI::fromJsonValue(m_original_filename, json[QString("original_filename")]);
    m_original_filename_isSet = !json[QString("original_filename")].isNull() && m_original_filename_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;
}

QString OAIGet_media_files__code__200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_media_files__code__200_response::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_extension_isSet) {
        obj.insert(QString("extension"), ::OpenAPI::toJsonValue(m_extension));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mime_type"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_original_filename_isSet) {
        obj.insert(QString("original_filename"), ::OpenAPI::toJsonValue(m_original_filename));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    return obj;
}

OAIGet_media_files__code__200_response_allOf__links OAIGet_media_files__code__200_response::getLinks() const {
    return m__links;
}
void OAIGet_media_files__code__200_response::setLinks(const OAIGet_media_files__code__200_response_allOf__links &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIGet_media_files__code__200_response::is__links_Set() const{
    return m__links_isSet;
}

bool OAIGet_media_files__code__200_response::is__links_Valid() const{
    return m__links_isValid;
}

QString OAIGet_media_files__code__200_response::getCode() const {
    return m_code;
}
void OAIGet_media_files__code__200_response::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIGet_media_files__code__200_response::is_code_Set() const{
    return m_code_isSet;
}

bool OAIGet_media_files__code__200_response::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIGet_media_files__code__200_response::getExtension() const {
    return m_extension;
}
void OAIGet_media_files__code__200_response::setExtension(const QString &extension) {
    m_extension = extension;
    m_extension_isSet = true;
}

bool OAIGet_media_files__code__200_response::is_extension_Set() const{
    return m_extension_isSet;
}

bool OAIGet_media_files__code__200_response::is_extension_Valid() const{
    return m_extension_isValid;
}

QString OAIGet_media_files__code__200_response::getMimeType() const {
    return m_mime_type;
}
void OAIGet_media_files__code__200_response::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIGet_media_files__code__200_response::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIGet_media_files__code__200_response::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

QString OAIGet_media_files__code__200_response::getOriginalFilename() const {
    return m_original_filename;
}
void OAIGet_media_files__code__200_response::setOriginalFilename(const QString &original_filename) {
    m_original_filename = original_filename;
    m_original_filename_isSet = true;
}

bool OAIGet_media_files__code__200_response::is_original_filename_Set() const{
    return m_original_filename_isSet;
}

bool OAIGet_media_files__code__200_response::is_original_filename_Valid() const{
    return m_original_filename_isValid;
}

qint32 OAIGet_media_files__code__200_response::getSize() const {
    return m_size;
}
void OAIGet_media_files__code__200_response::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIGet_media_files__code__200_response::is_size_Set() const{
    return m_size_isSet;
}

bool OAIGet_media_files__code__200_response::is_size_Valid() const{
    return m_size_isValid;
}

bool OAIGet_media_files__code__200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_media_files__code__200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
