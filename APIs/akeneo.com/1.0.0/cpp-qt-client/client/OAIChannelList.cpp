/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelList::OAIChannelList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelList::OAIChannelList() {
    this->initializeModel();
}

OAIChannelList::~OAIChannelList() {}

void OAIChannelList::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_category_tree_isSet = false;
    m_category_tree_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_conversion_units_isSet = false;
    m_conversion_units_isValid = false;

    m_currencies_isSet = false;
    m_currencies_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_locales_isSet = false;
    m_locales_isValid = false;
}

void OAIChannelList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelList::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_category_tree_isValid = ::OpenAPI::fromJsonValue(m_category_tree, json[QString("category_tree")]);
    m_category_tree_isSet = !json[QString("category_tree")].isNull() && m_category_tree_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_conversion_units_isValid = ::OpenAPI::fromJsonValue(m_conversion_units, json[QString("conversion_units")]);
    m_conversion_units_isSet = !json[QString("conversion_units")].isNull() && m_conversion_units_isValid;

    m_currencies_isValid = ::OpenAPI::fromJsonValue(m_currencies, json[QString("currencies")]);
    m_currencies_isSet = !json[QString("currencies")].isNull() && m_currencies_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_locales_isValid = ::OpenAPI::fromJsonValue(m_locales, json[QString("locales")]);
    m_locales_isSet = !json[QString("locales")].isNull() && m_locales_isValid;
}

QString OAIChannelList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelList::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_category_tree_isSet) {
        obj.insert(QString("category_tree"), ::OpenAPI::toJsonValue(m_category_tree));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_conversion_units.isSet()) {
        obj.insert(QString("conversion_units"), ::OpenAPI::toJsonValue(m_conversion_units));
    }
    if (m_currencies.size() > 0) {
        obj.insert(QString("currencies"), ::OpenAPI::toJsonValue(m_currencies));
    }
    if (m_labels.isSet()) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_locales.size() > 0) {
        obj.insert(QString("locales"), ::OpenAPI::toJsonValue(m_locales));
    }
    return obj;
}

OAIPAM_Asset_Categories_allOf__embedded_items_inner_allOf__links OAIChannelList::getLinks() const {
    return m__links;
}
void OAIChannelList::setLinks(const OAIPAM_Asset_Categories_allOf__embedded_items_inner_allOf__links &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIChannelList::is__links_Set() const{
    return m__links_isSet;
}

bool OAIChannelList::is__links_Valid() const{
    return m__links_isValid;
}

QString OAIChannelList::getCategoryTree() const {
    return m_category_tree;
}
void OAIChannelList::setCategoryTree(const QString &category_tree) {
    m_category_tree = category_tree;
    m_category_tree_isSet = true;
}

bool OAIChannelList::is_category_tree_Set() const{
    return m_category_tree_isSet;
}

bool OAIChannelList::is_category_tree_Valid() const{
    return m_category_tree_isValid;
}

QString OAIChannelList::getCode() const {
    return m_code;
}
void OAIChannelList::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIChannelList::is_code_Set() const{
    return m_code_isSet;
}

bool OAIChannelList::is_code_Valid() const{
    return m_code_isValid;
}

OAIChannels_allOf__embedded_items_inner_allOf_conversion_units OAIChannelList::getConversionUnits() const {
    return m_conversion_units;
}
void OAIChannelList::setConversionUnits(const OAIChannels_allOf__embedded_items_inner_allOf_conversion_units &conversion_units) {
    m_conversion_units = conversion_units;
    m_conversion_units_isSet = true;
}

bool OAIChannelList::is_conversion_units_Set() const{
    return m_conversion_units_isSet;
}

bool OAIChannelList::is_conversion_units_Valid() const{
    return m_conversion_units_isValid;
}

QList<QString> OAIChannelList::getCurrencies() const {
    return m_currencies;
}
void OAIChannelList::setCurrencies(const QList<QString> &currencies) {
    m_currencies = currencies;
    m_currencies_isSet = true;
}

bool OAIChannelList::is_currencies_Set() const{
    return m_currencies_isSet;
}

bool OAIChannelList::is_currencies_Valid() const{
    return m_currencies_isValid;
}

OAIChannels_allOf__embedded_items_inner_allOf_labels OAIChannelList::getLabels() const {
    return m_labels;
}
void OAIChannelList::setLabels(const OAIChannels_allOf__embedded_items_inner_allOf_labels &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIChannelList::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIChannelList::is_labels_Valid() const{
    return m_labels_isValid;
}

QList<QString> OAIChannelList::getLocales() const {
    return m_locales;
}
void OAIChannelList::setLocales(const QList<QString> &locales) {
    m_locales = locales;
    m_locales_isSet = true;
}

bool OAIChannelList::is_locales_Set() const{
    return m_locales_isSet;
}

bool OAIChannelList::is_locales_Valid() const{
    return m_locales_isValid;
}

bool OAIChannelList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_tree_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversion_units.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currencies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_locales.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelList::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_category_tree_isValid && m_code_isValid && m_currencies_isValid && m_locales_isValid && true;
}

} // namespace OpenAPI
