/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_app_catalogs_mapping_schema_product_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_app_catalogs_mapping_schema_product_200_response::OAIGet_app_catalogs_mapping_schema_product_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_app_catalogs_mapping_schema_product_200_response::OAIGet_app_catalogs_mapping_schema_product_200_response() {
    this->initializeModel();
}

OAIGet_app_catalogs_mapping_schema_product_200_response::~OAIGet_app_catalogs_mapping_schema_product_200_response() {}

void OAIGet_app_catalogs_mapping_schema_product_200_response::initializeModel() {

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGet_app_catalogs_mapping_schema_product_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_app_catalogs_mapping_schema_product_200_response::fromJsonObject(QJsonObject json) {

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("$comment")]);
    m_comment_isSet = !json[QString("$comment")].isNull() && m_comment_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("$id")]);
    m_id_isSet = !json[QString("$id")].isNull() && m_id_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("$schema")]);
    m_schema_isSet = !json[QString("$schema")].isNull() && m_schema_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGet_app_catalogs_mapping_schema_product_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_app_catalogs_mapping_schema_product_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_comment_isSet) {
        obj.insert(QString("$comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_id_isSet) {
        obj.insert(QString("$id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_schema_isSet) {
        obj.insert(QString("$schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_properties_isSet) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIGet_app_catalogs_mapping_schema_product_200_response::getComment() const {
    return m_comment;
}
void OAIGet_app_catalogs_mapping_schema_product_200_response::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIGet_app_catalogs_mapping_schema_product_200_response::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIGet_app_catalogs_mapping_schema_product_200_response::is_comment_Valid() const{
    return m_comment_isValid;
}

QString OAIGet_app_catalogs_mapping_schema_product_200_response::getId() const {
    return m_id;
}
void OAIGet_app_catalogs_mapping_schema_product_200_response::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGet_app_catalogs_mapping_schema_product_200_response::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGet_app_catalogs_mapping_schema_product_200_response::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGet_app_catalogs_mapping_schema_product_200_response::getSchema() const {
    return m_schema;
}
void OAIGet_app_catalogs_mapping_schema_product_200_response::setSchema(const QString &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIGet_app_catalogs_mapping_schema_product_200_response::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIGet_app_catalogs_mapping_schema_product_200_response::is_schema_Valid() const{
    return m_schema_isValid;
}

QString OAIGet_app_catalogs_mapping_schema_product_200_response::getDescription() const {
    return m_description;
}
void OAIGet_app_catalogs_mapping_schema_product_200_response::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGet_app_catalogs_mapping_schema_product_200_response::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGet_app_catalogs_mapping_schema_product_200_response::is_description_Valid() const{
    return m_description_isValid;
}

OAIObject OAIGet_app_catalogs_mapping_schema_product_200_response::getProperties() const {
    return m_properties;
}
void OAIGet_app_catalogs_mapping_schema_product_200_response::setProperties(const OAIObject &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIGet_app_catalogs_mapping_schema_product_200_response::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIGet_app_catalogs_mapping_schema_product_200_response::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAIGet_app_catalogs_mapping_schema_product_200_response::getTitle() const {
    return m_title;
}
void OAIGet_app_catalogs_mapping_schema_product_200_response::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIGet_app_catalogs_mapping_schema_product_200_response::is_title_Set() const{
    return m_title_isSet;
}

bool OAIGet_app_catalogs_mapping_schema_product_200_response::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIGet_app_catalogs_mapping_schema_product_200_response::getType() const {
    return m_type;
}
void OAIGet_app_catalogs_mapping_schema_product_200_response::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGet_app_catalogs_mapping_schema_product_200_response::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGet_app_catalogs_mapping_schema_product_200_response::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGet_app_catalogs_mapping_schema_product_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_app_catalogs_mapping_schema_product_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_schema_isValid && m_properties_isValid && true;
}

} // namespace OpenAPI
