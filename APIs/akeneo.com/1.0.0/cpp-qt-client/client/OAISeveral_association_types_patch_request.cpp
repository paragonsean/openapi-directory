/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISeveral_association_types_patch_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISeveral_association_types_patch_request::OAISeveral_association_types_patch_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISeveral_association_types_patch_request::OAISeveral_association_types_patch_request() {
    this->initializeModel();
}

OAISeveral_association_types_patch_request::~OAISeveral_association_types_patch_request() {}

void OAISeveral_association_types_patch_request::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_is_quantified_isSet = false;
    m_is_quantified_isValid = false;

    m_is_two_way_isSet = false;
    m_is_two_way_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;
}

void OAISeveral_association_types_patch_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISeveral_association_types_patch_request::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_is_quantified_isValid = ::OpenAPI::fromJsonValue(m_is_quantified, json[QString("is_quantified")]);
    m_is_quantified_isSet = !json[QString("is_quantified")].isNull() && m_is_quantified_isValid;

    m_is_two_way_isValid = ::OpenAPI::fromJsonValue(m_is_two_way, json[QString("is_two_way")]);
    m_is_two_way_isSet = !json[QString("is_two_way")].isNull() && m_is_two_way_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;
}

QString OAISeveral_association_types_patch_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISeveral_association_types_patch_request::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_is_quantified_isSet) {
        obj.insert(QString("is_quantified"), ::OpenAPI::toJsonValue(m_is_quantified));
    }
    if (m_is_two_way_isSet) {
        obj.insert(QString("is_two_way"), ::OpenAPI::toJsonValue(m_is_two_way));
    }
    if (m_labels.isSet()) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    return obj;
}

QString OAISeveral_association_types_patch_request::getCode() const {
    return m_code;
}
void OAISeveral_association_types_patch_request::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAISeveral_association_types_patch_request::is_code_Set() const{
    return m_code_isSet;
}

bool OAISeveral_association_types_patch_request::is_code_Valid() const{
    return m_code_isValid;
}

bool OAISeveral_association_types_patch_request::isIsQuantified() const {
    return m_is_quantified;
}
void OAISeveral_association_types_patch_request::setIsQuantified(const bool &is_quantified) {
    m_is_quantified = is_quantified;
    m_is_quantified_isSet = true;
}

bool OAISeveral_association_types_patch_request::is_is_quantified_Set() const{
    return m_is_quantified_isSet;
}

bool OAISeveral_association_types_patch_request::is_is_quantified_Valid() const{
    return m_is_quantified_isValid;
}

bool OAISeveral_association_types_patch_request::isIsTwoWay() const {
    return m_is_two_way;
}
void OAISeveral_association_types_patch_request::setIsTwoWay(const bool &is_two_way) {
    m_is_two_way = is_two_way;
    m_is_two_way_isSet = true;
}

bool OAISeveral_association_types_patch_request::is_is_two_way_Set() const{
    return m_is_two_way_isSet;
}

bool OAISeveral_association_types_patch_request::is_is_two_way_Valid() const{
    return m_is_two_way_isValid;
}

OAIAssociation_types_allOf__embedded_items_inner_allOf_labels OAISeveral_association_types_patch_request::getLabels() const {
    return m_labels;
}
void OAISeveral_association_types_patch_request::setLabels(const OAIAssociation_types_allOf__embedded_items_inner_allOf_labels &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAISeveral_association_types_patch_request::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAISeveral_association_types_patch_request::is_labels_Valid() const{
    return m_labels_isValid;
}

bool OAISeveral_association_types_patch_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_quantified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_two_way_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISeveral_association_types_patch_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && true;
}

} // namespace OpenAPI
