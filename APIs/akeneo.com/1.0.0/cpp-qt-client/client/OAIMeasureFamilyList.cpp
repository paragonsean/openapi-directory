/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeasureFamilyList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMeasureFamilyList::OAIMeasureFamilyList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMeasureFamilyList::OAIMeasureFamilyList() {
    this->initializeModel();
}

OAIMeasureFamilyList::~OAIMeasureFamilyList() {}

void OAIMeasureFamilyList::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_standard_isSet = false;
    m_standard_isValid = false;

    m_units_isSet = false;
    m_units_isValid = false;
}

void OAIMeasureFamilyList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMeasureFamilyList::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_standard_isValid = ::OpenAPI::fromJsonValue(m_standard, json[QString("standard")]);
    m_standard_isSet = !json[QString("standard")].isNull() && m_standard_isValid;

    m_units_isValid = ::OpenAPI::fromJsonValue(m_units, json[QString("units")]);
    m_units_isSet = !json[QString("units")].isNull() && m_units_isValid;
}

QString OAIMeasureFamilyList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMeasureFamilyList::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_standard_isSet) {
        obj.insert(QString("standard"), ::OpenAPI::toJsonValue(m_standard));
    }
    if (m_units.size() > 0) {
        obj.insert(QString("units"), ::OpenAPI::toJsonValue(m_units));
    }
    return obj;
}

OAIPAM_Asset_Categories_allOf__embedded_items_inner_allOf__links OAIMeasureFamilyList::getLinks() const {
    return m__links;
}
void OAIMeasureFamilyList::setLinks(const OAIPAM_Asset_Categories_allOf__embedded_items_inner_allOf__links &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIMeasureFamilyList::is__links_Set() const{
    return m__links_isSet;
}

bool OAIMeasureFamilyList::is__links_Valid() const{
    return m__links_isValid;
}

QString OAIMeasureFamilyList::getCode() const {
    return m_code;
}
void OAIMeasureFamilyList::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIMeasureFamilyList::is_code_Set() const{
    return m_code_isSet;
}

bool OAIMeasureFamilyList::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIMeasureFamilyList::getStandard() const {
    return m_standard;
}
void OAIMeasureFamilyList::setStandard(const QString &standard) {
    m_standard = standard;
    m_standard_isSet = true;
}

bool OAIMeasureFamilyList::is_standard_Set() const{
    return m_standard_isSet;
}

bool OAIMeasureFamilyList::is_standard_Valid() const{
    return m_standard_isValid;
}

QList<OAIMeasureFamilyList_allOf_units> OAIMeasureFamilyList::getUnits() const {
    return m_units;
}
void OAIMeasureFamilyList::setUnits(const QList<OAIMeasureFamilyList_allOf_units> &units) {
    m_units = units;
    m_units_isSet = true;
}

bool OAIMeasureFamilyList::is_units_Set() const{
    return m_units_isSet;
}

bool OAIMeasureFamilyList::is_units_Valid() const{
    return m_units_isValid;
}

bool OAIMeasureFamilyList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_units.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMeasureFamilyList::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && true;
}

} // namespace OpenAPI
