/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGet_reference_entities__code__attributes_200_response_inner.h
 *
 * 
 */

#ifndef OAIGet_reference_entities__code__attributes_200_response_inner_H
#define OAIGet_reference_entities__code__attributes_200_response_inner_H

#include <QJsonObject>

#include "OAIGet_asset_families__code__attributes_200_response_inner_labels.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGet_asset_families__code__attributes_200_response_inner_labels;

class OAIGet_reference_entities__code__attributes_200_response_inner : public OAIObject {
public:
    OAIGet_reference_entities__code__attributes_200_response_inner();
    OAIGet_reference_entities__code__attributes_200_response_inner(QString json);
    ~OAIGet_reference_entities__code__attributes_200_response_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAllowedExtensions() const;
    void setAllowedExtensions(const QList<QString> &allowed_extensions);
    bool is_allowed_extensions_Set() const;
    bool is_allowed_extensions_Valid() const;

    QString getCode() const;
    void setCode(const QString &code);
    bool is_code_Set() const;
    bool is_code_Valid() const;

    bool isDecimalsAllowed() const;
    void setDecimalsAllowed(const bool &decimals_allowed);
    bool is_decimals_allowed_Set() const;
    bool is_decimals_allowed_Valid() const;

    bool isIsRequiredForCompleteness() const;
    void setIsRequiredForCompleteness(const bool &is_required_for_completeness);
    bool is_is_required_for_completeness_Set() const;
    bool is_is_required_for_completeness_Valid() const;

    bool isIsRichTextEditor() const;
    void setIsRichTextEditor(const bool &is_rich_text_editor);
    bool is_is_rich_text_editor_Set() const;
    bool is_is_rich_text_editor_Valid() const;

    bool isIsTextarea() const;
    void setIsTextarea(const bool &is_textarea);
    bool is_is_textarea_Set() const;
    bool is_is_textarea_Valid() const;

    OAIGet_asset_families__code__attributes_200_response_inner_labels getLabels() const;
    void setLabels(const OAIGet_asset_families__code__attributes_200_response_inner_labels &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    qint32 getMaxCharacters() const;
    void setMaxCharacters(const qint32 &max_characters);
    bool is_max_characters_Set() const;
    bool is_max_characters_Valid() const;

    QString getMaxFileSize() const;
    void setMaxFileSize(const QString &max_file_size);
    bool is_max_file_size_Set() const;
    bool is_max_file_size_Valid() const;

    QString getMaxValue() const;
    void setMaxValue(const QString &max_value);
    bool is_max_value_Set() const;
    bool is_max_value_Valid() const;

    QString getMinValue() const;
    void setMinValue(const QString &min_value);
    bool is_min_value_Set() const;
    bool is_min_value_Valid() const;

    QString getReferenceEntityCode() const;
    void setReferenceEntityCode(const QString &reference_entity_code);
    bool is_reference_entity_code_Set() const;
    bool is_reference_entity_code_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getValidationRegexp() const;
    void setValidationRegexp(const QString &validation_regexp);
    bool is_validation_regexp_Set() const;
    bool is_validation_regexp_Valid() const;

    QString getValidationRule() const;
    void setValidationRule(const QString &validation_rule);
    bool is_validation_rule_Set() const;
    bool is_validation_rule_Valid() const;

    bool isValuePerChannel() const;
    void setValuePerChannel(const bool &value_per_channel);
    bool is_value_per_channel_Set() const;
    bool is_value_per_channel_Valid() const;

    bool isValuePerLocale() const;
    void setValuePerLocale(const bool &value_per_locale);
    bool is_value_per_locale_Set() const;
    bool is_value_per_locale_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_allowed_extensions;
    bool m_allowed_extensions_isSet;
    bool m_allowed_extensions_isValid;

    QString m_code;
    bool m_code_isSet;
    bool m_code_isValid;

    bool m_decimals_allowed;
    bool m_decimals_allowed_isSet;
    bool m_decimals_allowed_isValid;

    bool m_is_required_for_completeness;
    bool m_is_required_for_completeness_isSet;
    bool m_is_required_for_completeness_isValid;

    bool m_is_rich_text_editor;
    bool m_is_rich_text_editor_isSet;
    bool m_is_rich_text_editor_isValid;

    bool m_is_textarea;
    bool m_is_textarea_isSet;
    bool m_is_textarea_isValid;

    OAIGet_asset_families__code__attributes_200_response_inner_labels m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    qint32 m_max_characters;
    bool m_max_characters_isSet;
    bool m_max_characters_isValid;

    QString m_max_file_size;
    bool m_max_file_size_isSet;
    bool m_max_file_size_isValid;

    QString m_max_value;
    bool m_max_value_isSet;
    bool m_max_value_isValid;

    QString m_min_value;
    bool m_min_value_isSet;
    bool m_min_value_isValid;

    QString m_reference_entity_code;
    bool m_reference_entity_code_isSet;
    bool m_reference_entity_code_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_validation_regexp;
    bool m_validation_regexp_isSet;
    bool m_validation_regexp_isValid;

    QString m_validation_rule;
    bool m_validation_rule_isSet;
    bool m_validation_rule_isValid;

    bool m_value_per_channel;
    bool m_value_per_channel_isSet;
    bool m_value_per_channel_isValid;

    bool m_value_per_locale;
    bool m_value_per_locale_isSet;
    bool m_value_per_locale_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGet_reference_entities__code__attributes_200_response_inner)

#endif // OAIGet_reference_entities__code__attributes_200_response_inner_H
