/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner::OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner::OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner() {
    this->initializeModel();
}

OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner::~OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner() {}

void OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_data_type_isSet = false;
    m_data_type_isValid = false;

    m_is_required_for_completeness_isSet = false;
    m_is_required_for_completeness_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_validations_isSet = false;
    m_validations_isValid = false;
}

void OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_data_type_isValid = ::OpenAPI::fromJsonValue(m_data_type, json[QString("data_type")]);
    m_data_type_isSet = !json[QString("data_type")].isNull() && m_data_type_isValid;

    m_is_required_for_completeness_isValid = ::OpenAPI::fromJsonValue(m_is_required_for_completeness, json[QString("is_required_for_completeness")]);
    m_is_required_for_completeness_isSet = !json[QString("is_required_for_completeness")].isNull() && m_is_required_for_completeness_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_validations_isValid = ::OpenAPI::fromJsonValue(m_validations, json[QString("validations")]);
    m_validations_isSet = !json[QString("validations")].isNull() && m_validations_isValid;
}

QString OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_data_type_isSet) {
        obj.insert(QString("data_type"), ::OpenAPI::toJsonValue(m_data_type));
    }
    if (m_is_required_for_completeness_isSet) {
        obj.insert(QString("is_required_for_completeness"), ::OpenAPI::toJsonValue(m_is_required_for_completeness));
    }
    if (m_labels.isSet()) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_validations.isSet()) {
        obj.insert(QString("validations"), ::OpenAPI::toJsonValue(m_validations));
    }
    return obj;
}

QString OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner::getCode() const {
    return m_code;
}
void OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner::is_code_Set() const{
    return m_code_isSet;
}

bool OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner::getDataType() const {
    return m_data_type;
}
void OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner::setDataType(const QString &data_type) {
    m_data_type = data_type;
    m_data_type_isSet = true;
}

bool OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner::is_data_type_Set() const{
    return m_data_type_isSet;
}

bool OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner::is_data_type_Valid() const{
    return m_data_type_isValid;
}

bool OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner::isIsRequiredForCompleteness() const {
    return m_is_required_for_completeness;
}
void OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner::setIsRequiredForCompleteness(const bool &is_required_for_completeness) {
    m_is_required_for_completeness = is_required_for_completeness;
    m_is_required_for_completeness_isSet = true;
}

bool OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner::is_is_required_for_completeness_Set() const{
    return m_is_required_for_completeness_isSet;
}

bool OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner::is_is_required_for_completeness_Valid() const{
    return m_is_required_for_completeness_isValid;
}

OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner_labels OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner::getLabels() const {
    return m_labels;
}
void OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner::setLabels(const OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner_labels &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner::is_labels_Valid() const{
    return m_labels_isValid;
}

OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner_validations OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner::getValidations() const {
    return m_validations;
}
void OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner::setValidations(const OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner_validations &validations) {
    m_validations = validations;
    m_validations_isSet = true;
}

bool OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner::is_validations_Set() const{
    return m_validations_isSet;
}

bool OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner::is_validations_Valid() const{
    return m_validations_isValid;
}

bool OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_required_for_completeness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_validations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttributes_allOf__embedded_items_inner_allOf_table_configuration_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_data_type_isValid && true;
}

} // namespace OpenAPI
