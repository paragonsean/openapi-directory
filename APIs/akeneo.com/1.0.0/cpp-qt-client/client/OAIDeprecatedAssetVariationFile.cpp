/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeprecatedAssetVariationFile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeprecatedAssetVariationFile::OAIDeprecatedAssetVariationFile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeprecatedAssetVariationFile::OAIDeprecatedAssetVariationFile() {
    this->initializeModel();
}

OAIDeprecatedAssetVariationFile::~OAIDeprecatedAssetVariationFile() {}

void OAIDeprecatedAssetVariationFile::initializeModel() {

    m__link_isSet = false;
    m__link_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;
}

void OAIDeprecatedAssetVariationFile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeprecatedAssetVariationFile::fromJsonObject(QJsonObject json) {

    m__link_isValid = ::OpenAPI::fromJsonValue(m__link, json[QString("_link")]);
    m__link_isSet = !json[QString("_link")].isNull() && m__link_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;
}

QString OAIDeprecatedAssetVariationFile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeprecatedAssetVariationFile::asJsonObject() const {
    QJsonObject obj;
    if (m__link.isSet()) {
        obj.insert(QString("_link"), ::OpenAPI::toJsonValue(m__link));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    return obj;
}

OAIGet_variation_files__channel_code__locale_code_200_response__link OAIDeprecatedAssetVariationFile::getLink() const {
    return m__link;
}
void OAIDeprecatedAssetVariationFile::setLink(const OAIGet_variation_files__channel_code__locale_code_200_response__link &_link) {
    m__link = _link;
    m__link_isSet = true;
}

bool OAIDeprecatedAssetVariationFile::is__link_Set() const{
    return m__link_isSet;
}

bool OAIDeprecatedAssetVariationFile::is__link_Valid() const{
    return m__link_isValid;
}

QString OAIDeprecatedAssetVariationFile::getCode() const {
    return m_code;
}
void OAIDeprecatedAssetVariationFile::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIDeprecatedAssetVariationFile::is_code_Set() const{
    return m_code_isSet;
}

bool OAIDeprecatedAssetVariationFile::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIDeprecatedAssetVariationFile::getLocale() const {
    return m_locale;
}
void OAIDeprecatedAssetVariationFile::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIDeprecatedAssetVariationFile::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIDeprecatedAssetVariationFile::is_locale_Valid() const{
    return m_locale_isValid;
}

QString OAIDeprecatedAssetVariationFile::getScope() const {
    return m_scope;
}
void OAIDeprecatedAssetVariationFile::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIDeprecatedAssetVariationFile::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIDeprecatedAssetVariationFile::is_scope_Valid() const{
    return m_scope_isValid;
}

bool OAIDeprecatedAssetVariationFile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeprecatedAssetVariationFile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
