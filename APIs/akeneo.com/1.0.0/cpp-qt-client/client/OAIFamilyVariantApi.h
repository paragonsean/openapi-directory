/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFamilyVariantApi_H
#define OAI_OAIFamilyVariantApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFamily_Variants.h"
#include "OAIPatch_asset_categories_200_response.h"
#include "OAIPatch_families__family_code__variants_request.h"
#include "OAIPost_families__family_code__variants_request.h"
#include "OAIPost_token_400_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFamilyVariantApi : public QObject {
    Q_OBJECT

public:
    OAIFamilyVariantApi(const int timeOut = 0);
    ~OAIFamilyVariantApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  family_code QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  with_count bool [optional]
    */
    virtual void getFamiliesFamilyCodeVariants(const QString &family_code, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &with_count = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  family_code QString [required]
    * @param[in]  code QString [required]
    */
    virtual void getFamiliesFamilyCodeVariantsCode(const QString &family_code, const QString &code);

    /**
    * @param[in]  family_code QString [required]
    * @param[in]  body OAIPatch_families__family_code__variants_request [optional]
    */
    virtual void patchFamiliesFamilyCodeVariants(const QString &family_code, const ::OpenAPI::OptionalParam<OAIPatch_families__family_code__variants_request> &body = ::OpenAPI::OptionalParam<OAIPatch_families__family_code__variants_request>());

    /**
    * @param[in]  family_code QString [required]
    * @param[in]  code QString [required]
    * @param[in]  body OAIPost_families__family_code__variants_request [required]
    */
    virtual void patchFamiliesFamilyCodeVariantsCode(const QString &family_code, const QString &code, const OAIPost_families__family_code__variants_request &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getFamiliesFamilyCodeVariantsCallback(OAIHttpRequestWorker *worker);
    void getFamiliesFamilyCodeVariantsCodeCallback(OAIHttpRequestWorker *worker);
    void patchFamiliesFamilyCodeVariantsCallback(OAIHttpRequestWorker *worker);
    void patchFamiliesFamilyCodeVariantsCodeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getFamiliesFamilyCodeVariantsSignal(OAIFamily_Variants summary);
    void getFamiliesFamilyCodeVariantsCodeSignal(OAIPost_families__family_code__variants_request summary);
    void patchFamiliesFamilyCodeVariantsSignal(OAIPatch_asset_categories_200_response summary);
    void patchFamiliesFamilyCodeVariantsCodeSignal();


    void getFamiliesFamilyCodeVariantsSignalFull(OAIHttpRequestWorker *worker, OAIFamily_Variants summary);
    void getFamiliesFamilyCodeVariantsCodeSignalFull(OAIHttpRequestWorker *worker, OAIPost_families__family_code__variants_request summary);
    void patchFamiliesFamilyCodeVariantsSignalFull(OAIHttpRequestWorker *worker, OAIPatch_asset_categories_200_response summary);
    void patchFamiliesFamilyCodeVariantsCodeSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getFamiliesFamilyCodeVariantsSignalError() instead")
    void getFamiliesFamilyCodeVariantsSignalE(OAIFamily_Variants summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFamiliesFamilyCodeVariantsSignalError(OAIFamily_Variants summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFamiliesFamilyCodeVariantsCodeSignalError() instead")
    void getFamiliesFamilyCodeVariantsCodeSignalE(OAIPost_families__family_code__variants_request summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFamiliesFamilyCodeVariantsCodeSignalError(OAIPost_families__family_code__variants_request summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchFamiliesFamilyCodeVariantsSignalError() instead")
    void patchFamiliesFamilyCodeVariantsSignalE(OAIPatch_asset_categories_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchFamiliesFamilyCodeVariantsSignalError(OAIPatch_asset_categories_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchFamiliesFamilyCodeVariantsCodeSignalError() instead")
    void patchFamiliesFamilyCodeVariantsCodeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void patchFamiliesFamilyCodeVariantsCodeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getFamiliesFamilyCodeVariantsSignalErrorFull() instead")
    void getFamiliesFamilyCodeVariantsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFamiliesFamilyCodeVariantsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFamiliesFamilyCodeVariantsCodeSignalErrorFull() instead")
    void getFamiliesFamilyCodeVariantsCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFamiliesFamilyCodeVariantsCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchFamiliesFamilyCodeVariantsSignalErrorFull() instead")
    void patchFamiliesFamilyCodeVariantsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchFamiliesFamilyCodeVariantsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchFamiliesFamilyCodeVariantsCodeSignalErrorFull() instead")
    void patchFamiliesFamilyCodeVariantsCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchFamiliesFamilyCodeVariantsCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
