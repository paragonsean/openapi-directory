/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeprecatedAsset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeprecatedAsset::OAIDeprecatedAsset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeprecatedAsset::OAIDeprecatedAsset() {
    this->initializeModel();
}

OAIDeprecatedAsset::~OAIDeprecatedAsset() {}

void OAIDeprecatedAsset::initializeModel() {

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_end_of_use_isSet = false;
    m_end_of_use_isValid = false;

    m_localizable_isSet = false;
    m_localizable_isValid = false;

    m_reference_files_isSet = false;
    m_reference_files_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_variation_files_isSet = false;
    m_variation_files_isValid = false;
}

void OAIDeprecatedAsset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeprecatedAsset::fromJsonObject(QJsonObject json) {

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_end_of_use_isValid = ::OpenAPI::fromJsonValue(m_end_of_use, json[QString("end_of_use")]);
    m_end_of_use_isSet = !json[QString("end_of_use")].isNull() && m_end_of_use_isValid;

    m_localizable_isValid = ::OpenAPI::fromJsonValue(m_localizable, json[QString("localizable")]);
    m_localizable_isSet = !json[QString("localizable")].isNull() && m_localizable_isValid;

    m_reference_files_isValid = ::OpenAPI::fromJsonValue(m_reference_files, json[QString("reference_files")]);
    m_reference_files_isSet = !json[QString("reference_files")].isNull() && m_reference_files_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_variation_files_isValid = ::OpenAPI::fromJsonValue(m_variation_files, json[QString("variation_files")]);
    m_variation_files_isSet = !json[QString("variation_files")].isNull() && m_variation_files_isValid;
}

QString OAIDeprecatedAsset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeprecatedAsset::asJsonObject() const {
    QJsonObject obj;
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_end_of_use_isSet) {
        obj.insert(QString("end_of_use"), ::OpenAPI::toJsonValue(m_end_of_use));
    }
    if (m_localizable_isSet) {
        obj.insert(QString("localizable"), ::OpenAPI::toJsonValue(m_localizable));
    }
    if (m_reference_files.size() > 0) {
        obj.insert(QString("reference_files"), ::OpenAPI::toJsonValue(m_reference_files));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_variation_files.size() > 0) {
        obj.insert(QString("variation_files"), ::OpenAPI::toJsonValue(m_variation_files));
    }
    return obj;
}

QList<QString> OAIDeprecatedAsset::getCategories() const {
    return m_categories;
}
void OAIDeprecatedAsset::setCategories(const QList<QString> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIDeprecatedAsset::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIDeprecatedAsset::is_categories_Valid() const{
    return m_categories_isValid;
}

QString OAIDeprecatedAsset::getCode() const {
    return m_code;
}
void OAIDeprecatedAsset::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIDeprecatedAsset::is_code_Set() const{
    return m_code_isSet;
}

bool OAIDeprecatedAsset::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIDeprecatedAsset::getDescription() const {
    return m_description;
}
void OAIDeprecatedAsset::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDeprecatedAsset::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDeprecatedAsset::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDeprecatedAsset::getEndOfUse() const {
    return m_end_of_use;
}
void OAIDeprecatedAsset::setEndOfUse(const QString &end_of_use) {
    m_end_of_use = end_of_use;
    m_end_of_use_isSet = true;
}

bool OAIDeprecatedAsset::is_end_of_use_Set() const{
    return m_end_of_use_isSet;
}

bool OAIDeprecatedAsset::is_end_of_use_Valid() const{
    return m_end_of_use_isValid;
}

bool OAIDeprecatedAsset::isLocalizable() const {
    return m_localizable;
}
void OAIDeprecatedAsset::setLocalizable(const bool &localizable) {
    m_localizable = localizable;
    m_localizable_isSet = true;
}

bool OAIDeprecatedAsset::is_localizable_Set() const{
    return m_localizable_isSet;
}

bool OAIDeprecatedAsset::is_localizable_Valid() const{
    return m_localizable_isValid;
}

QList<OAIPAM_Assets_allOf__embedded_items_inner_allOf_reference_files_inner> OAIDeprecatedAsset::getReferenceFiles() const {
    return m_reference_files;
}
void OAIDeprecatedAsset::setReferenceFiles(const QList<OAIPAM_Assets_allOf__embedded_items_inner_allOf_reference_files_inner> &reference_files) {
    m_reference_files = reference_files;
    m_reference_files_isSet = true;
}

bool OAIDeprecatedAsset::is_reference_files_Set() const{
    return m_reference_files_isSet;
}

bool OAIDeprecatedAsset::is_reference_files_Valid() const{
    return m_reference_files_isValid;
}

QList<QString> OAIDeprecatedAsset::getTags() const {
    return m_tags;
}
void OAIDeprecatedAsset::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDeprecatedAsset::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDeprecatedAsset::is_tags_Valid() const{
    return m_tags_isValid;
}

QList<OAIPAM_Assets_allOf__embedded_items_inner_allOf_variation_files_inner> OAIDeprecatedAsset::getVariationFiles() const {
    return m_variation_files;
}
void OAIDeprecatedAsset::setVariationFiles(const QList<OAIPAM_Assets_allOf__embedded_items_inner_allOf_variation_files_inner> &variation_files) {
    m_variation_files = variation_files;
    m_variation_files_isSet = true;
}

bool OAIDeprecatedAsset::is_variation_files_Set() const{
    return m_variation_files_isSet;
}

bool OAIDeprecatedAsset::is_variation_files_Valid() const{
    return m_variation_files_isValid;
}

bool OAIDeprecatedAsset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_of_use_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_localizable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_variation_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeprecatedAsset::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && true;
}

} // namespace OpenAPI
