/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFamily.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFamily::OAIFamily(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFamily::OAIFamily() {
    this->initializeModel();
}

OAIFamily::~OAIFamily() {}

void OAIFamily::initializeModel() {

    m_attribute_as_image_isSet = false;
    m_attribute_as_image_isValid = false;

    m_attribute_as_label_isSet = false;
    m_attribute_as_label_isValid = false;

    m_attribute_requirements_isSet = false;
    m_attribute_requirements_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;
}

void OAIFamily::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFamily::fromJsonObject(QJsonObject json) {

    m_attribute_as_image_isValid = ::OpenAPI::fromJsonValue(m_attribute_as_image, json[QString("attribute_as_image")]);
    m_attribute_as_image_isSet = !json[QString("attribute_as_image")].isNull() && m_attribute_as_image_isValid;

    m_attribute_as_label_isValid = ::OpenAPI::fromJsonValue(m_attribute_as_label, json[QString("attribute_as_label")]);
    m_attribute_as_label_isSet = !json[QString("attribute_as_label")].isNull() && m_attribute_as_label_isValid;

    m_attribute_requirements_isValid = ::OpenAPI::fromJsonValue(m_attribute_requirements, json[QString("attribute_requirements")]);
    m_attribute_requirements_isSet = !json[QString("attribute_requirements")].isNull() && m_attribute_requirements_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;
}

QString OAIFamily::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFamily::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute_as_image_isSet) {
        obj.insert(QString("attribute_as_image"), ::OpenAPI::toJsonValue(m_attribute_as_image));
    }
    if (m_attribute_as_label_isSet) {
        obj.insert(QString("attribute_as_label"), ::OpenAPI::toJsonValue(m_attribute_as_label));
    }
    if (m_attribute_requirements.isSet()) {
        obj.insert(QString("attribute_requirements"), ::OpenAPI::toJsonValue(m_attribute_requirements));
    }
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_labels.isSet()) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    return obj;
}

QString OAIFamily::getAttributeAsImage() const {
    return m_attribute_as_image;
}
void OAIFamily::setAttributeAsImage(const QString &attribute_as_image) {
    m_attribute_as_image = attribute_as_image;
    m_attribute_as_image_isSet = true;
}

bool OAIFamily::is_attribute_as_image_Set() const{
    return m_attribute_as_image_isSet;
}

bool OAIFamily::is_attribute_as_image_Valid() const{
    return m_attribute_as_image_isValid;
}

QString OAIFamily::getAttributeAsLabel() const {
    return m_attribute_as_label;
}
void OAIFamily::setAttributeAsLabel(const QString &attribute_as_label) {
    m_attribute_as_label = attribute_as_label;
    m_attribute_as_label_isSet = true;
}

bool OAIFamily::is_attribute_as_label_Set() const{
    return m_attribute_as_label_isSet;
}

bool OAIFamily::is_attribute_as_label_Valid() const{
    return m_attribute_as_label_isValid;
}

OAIFamilies_allOf__embedded_items_inner_allOf_attribute_requirements OAIFamily::getAttributeRequirements() const {
    return m_attribute_requirements;
}
void OAIFamily::setAttributeRequirements(const OAIFamilies_allOf__embedded_items_inner_allOf_attribute_requirements &attribute_requirements) {
    m_attribute_requirements = attribute_requirements;
    m_attribute_requirements_isSet = true;
}

bool OAIFamily::is_attribute_requirements_Set() const{
    return m_attribute_requirements_isSet;
}

bool OAIFamily::is_attribute_requirements_Valid() const{
    return m_attribute_requirements_isValid;
}

QList<QString> OAIFamily::getAttributes() const {
    return m_attributes;
}
void OAIFamily::setAttributes(const QList<QString> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIFamily::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIFamily::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIFamily::getCode() const {
    return m_code;
}
void OAIFamily::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIFamily::is_code_Set() const{
    return m_code_isSet;
}

bool OAIFamily::is_code_Valid() const{
    return m_code_isValid;
}

OAIFamilies_allOf__embedded_items_inner_allOf_labels OAIFamily::getLabels() const {
    return m_labels;
}
void OAIFamily::setLabels(const OAIFamilies_allOf__embedded_items_inner_allOf_labels &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIFamily::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIFamily::is_labels_Valid() const{
    return m_labels_isValid;
}

bool OAIFamily::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute_as_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_as_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_requirements.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFamily::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attribute_as_label_isValid && m_code_isValid && true;
}

} // namespace OpenAPI
