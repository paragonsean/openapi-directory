/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProductModelApi_H
#define OAI_OAIProductModelApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPatch_asset_categories_200_response.h"
#include "OAIPatch_product_models_request.h"
#include "OAIPost_product_models_request.h"
#include "OAIPost_token_400_response.h"
#include "OAIProduct_Models.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProductModelApi : public QObject {
    Q_OBJECT

public:
    OAIProductModelApi(const int timeOut = 0);
    ~OAIProductModelApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  code QString [required]
    */
    virtual void deleteProductModelsCode(const QString &code);

    /**
    * @param[in]  code QString [required]
    */
    virtual void getProductModelDraftCode(const QString &code);

    /**
    * @param[in]  search QString [optional]
    * @param[in]  scope QString [optional]
    * @param[in]  locales QString [optional]
    * @param[in]  attributes QString [optional]
    * @param[in]  pagination_type QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  search_after QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  with_count bool [optional]
    * @param[in]  with_quality_scores bool [optional]
    */
    virtual void getProductModels(const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &scope = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &locales = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pagination_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &search_after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &with_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &with_quality_scores = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  code QString [required]
    * @param[in]  with_quality_scores bool [optional]
    */
    virtual void getProductModelsCode(const QString &code, const ::OpenAPI::OptionalParam<bool> &with_quality_scores = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  body OAIPatch_product_models_request [optional]
    */
    virtual void patchProductModels(const ::OpenAPI::OptionalParam<OAIPatch_product_models_request> &body = ::OpenAPI::OptionalParam<OAIPatch_product_models_request>());

    /**
    * @param[in]  code QString [required]
    * @param[in]  body OAIPost_product_models_request [required]
    */
    virtual void patchProductModelsCode(const QString &code, const OAIPost_product_models_request &body);

    /**
    * @param[in]  code QString [required]
    */
    virtual void postProductModelProposal(const QString &code);

    /**
    * @param[in]  body OAIPost_product_models_request [optional]
    */
    virtual void postProductModels(const ::OpenAPI::OptionalParam<OAIPost_product_models_request> &body = ::OpenAPI::OptionalParam<OAIPost_product_models_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteProductModelsCodeCallback(OAIHttpRequestWorker *worker);
    void getProductModelDraftCodeCallback(OAIHttpRequestWorker *worker);
    void getProductModelsCallback(OAIHttpRequestWorker *worker);
    void getProductModelsCodeCallback(OAIHttpRequestWorker *worker);
    void patchProductModelsCallback(OAIHttpRequestWorker *worker);
    void patchProductModelsCodeCallback(OAIHttpRequestWorker *worker);
    void postProductModelProposalCallback(OAIHttpRequestWorker *worker);
    void postProductModelsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteProductModelsCodeSignal();
    void getProductModelDraftCodeSignal(OAIPost_product_models_request summary);
    void getProductModelsSignal(OAIProduct_Models summary);
    void getProductModelsCodeSignal(OAIPost_product_models_request summary);
    void patchProductModelsSignal(OAIPatch_asset_categories_200_response summary);
    void patchProductModelsCodeSignal();
    void postProductModelProposalSignal();
    void postProductModelsSignal();


    void deleteProductModelsCodeSignalFull(OAIHttpRequestWorker *worker);
    void getProductModelDraftCodeSignalFull(OAIHttpRequestWorker *worker, OAIPost_product_models_request summary);
    void getProductModelsSignalFull(OAIHttpRequestWorker *worker, OAIProduct_Models summary);
    void getProductModelsCodeSignalFull(OAIHttpRequestWorker *worker, OAIPost_product_models_request summary);
    void patchProductModelsSignalFull(OAIHttpRequestWorker *worker, OAIPatch_asset_categories_200_response summary);
    void patchProductModelsCodeSignalFull(OAIHttpRequestWorker *worker);
    void postProductModelProposalSignalFull(OAIHttpRequestWorker *worker);
    void postProductModelsSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use deleteProductModelsCodeSignalError() instead")
    void deleteProductModelsCodeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProductModelsCodeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductModelDraftCodeSignalError() instead")
    void getProductModelDraftCodeSignalE(OAIPost_product_models_request summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductModelDraftCodeSignalError(OAIPost_product_models_request summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductModelsSignalError() instead")
    void getProductModelsSignalE(OAIProduct_Models summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductModelsSignalError(OAIProduct_Models summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductModelsCodeSignalError() instead")
    void getProductModelsCodeSignalE(OAIPost_product_models_request summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductModelsCodeSignalError(OAIPost_product_models_request summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchProductModelsSignalError() instead")
    void patchProductModelsSignalE(OAIPatch_asset_categories_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchProductModelsSignalError(OAIPatch_asset_categories_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchProductModelsCodeSignalError() instead")
    void patchProductModelsCodeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void patchProductModelsCodeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postProductModelProposalSignalError() instead")
    void postProductModelProposalSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postProductModelProposalSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postProductModelsSignalError() instead")
    void postProductModelsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postProductModelsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteProductModelsCodeSignalErrorFull() instead")
    void deleteProductModelsCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProductModelsCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductModelDraftCodeSignalErrorFull() instead")
    void getProductModelDraftCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductModelDraftCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductModelsSignalErrorFull() instead")
    void getProductModelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductModelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductModelsCodeSignalErrorFull() instead")
    void getProductModelsCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductModelsCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchProductModelsSignalErrorFull() instead")
    void patchProductModelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchProductModelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchProductModelsCodeSignalErrorFull() instead")
    void patchProductModelsCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchProductModelsCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postProductModelProposalSignalErrorFull() instead")
    void postProductModelProposalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postProductModelProposalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postProductModelsSignalErrorFull() instead")
    void postProductModelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postProductModelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
