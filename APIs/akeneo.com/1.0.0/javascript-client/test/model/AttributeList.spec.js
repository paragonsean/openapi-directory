/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AkeneoPimRestApi);
  }
}(this, function(expect, AkeneoPimRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AkeneoPimRestApi.AttributeList();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AttributeList', function() {
    it('should create an instance of AttributeList', function() {
      // uncomment below and update the code to test AttributeList
      //var instance = new AkeneoPimRestApi.AttributeList();
      //expect(instance).to.be.a(AkeneoPimRestApi.AttributeList);
    });

    it('should have the property links (base name: "_links")', function() {
      // uncomment below and update the code to test the property links
      //var instance = new AkeneoPimRestApi.AttributeList();
      //expect(instance).to.be();
    });

    it('should have the property allowedExtensions (base name: "allowed_extensions")', function() {
      // uncomment below and update the code to test the property allowedExtensions
      //var instance = new AkeneoPimRestApi.AttributeList();
      //expect(instance).to.be();
    });

    it('should have the property availableLocales (base name: "available_locales")', function() {
      // uncomment below and update the code to test the property availableLocales
      //var instance = new AkeneoPimRestApi.AttributeList();
      //expect(instance).to.be();
    });

    it('should have the property code (base name: "code")', function() {
      // uncomment below and update the code to test the property code
      //var instance = new AkeneoPimRestApi.AttributeList();
      //expect(instance).to.be();
    });

    it('should have the property dateMax (base name: "date_max")', function() {
      // uncomment below and update the code to test the property dateMax
      //var instance = new AkeneoPimRestApi.AttributeList();
      //expect(instance).to.be();
    });

    it('should have the property dateMin (base name: "date_min")', function() {
      // uncomment below and update the code to test the property dateMin
      //var instance = new AkeneoPimRestApi.AttributeList();
      //expect(instance).to.be();
    });

    it('should have the property decimalsAllowed (base name: "decimals_allowed")', function() {
      // uncomment below and update the code to test the property decimalsAllowed
      //var instance = new AkeneoPimRestApi.AttributeList();
      //expect(instance).to.be();
    });

    it('should have the property defaultMetricUnit (base name: "default_metric_unit")', function() {
      // uncomment below and update the code to test the property defaultMetricUnit
      //var instance = new AkeneoPimRestApi.AttributeList();
      //expect(instance).to.be();
    });

    it('should have the property defaultValue (base name: "default_value")', function() {
      // uncomment below and update the code to test the property defaultValue
      //var instance = new AkeneoPimRestApi.AttributeList();
      //expect(instance).to.be();
    });

    it('should have the property group (base name: "group")', function() {
      // uncomment below and update the code to test the property group
      //var instance = new AkeneoPimRestApi.AttributeList();
      //expect(instance).to.be();
    });

    it('should have the property groupLabels (base name: "group_labels")', function() {
      // uncomment below and update the code to test the property groupLabels
      //var instance = new AkeneoPimRestApi.AttributeList();
      //expect(instance).to.be();
    });

    it('should have the property labels (base name: "labels")', function() {
      // uncomment below and update the code to test the property labels
      //var instance = new AkeneoPimRestApi.AttributeList();
      //expect(instance).to.be();
    });

    it('should have the property localizable (base name: "localizable")', function() {
      // uncomment below and update the code to test the property localizable
      //var instance = new AkeneoPimRestApi.AttributeList();
      //expect(instance).to.be();
    });

    it('should have the property maxCharacters (base name: "max_characters")', function() {
      // uncomment below and update the code to test the property maxCharacters
      //var instance = new AkeneoPimRestApi.AttributeList();
      //expect(instance).to.be();
    });

    it('should have the property maxFileSize (base name: "max_file_size")', function() {
      // uncomment below and update the code to test the property maxFileSize
      //var instance = new AkeneoPimRestApi.AttributeList();
      //expect(instance).to.be();
    });

    it('should have the property metricFamily (base name: "metric_family")', function() {
      // uncomment below and update the code to test the property metricFamily
      //var instance = new AkeneoPimRestApi.AttributeList();
      //expect(instance).to.be();
    });

    it('should have the property negativeAllowed (base name: "negative_allowed")', function() {
      // uncomment below and update the code to test the property negativeAllowed
      //var instance = new AkeneoPimRestApi.AttributeList();
      //expect(instance).to.be();
    });

    it('should have the property numberMax (base name: "number_max")', function() {
      // uncomment below and update the code to test the property numberMax
      //var instance = new AkeneoPimRestApi.AttributeList();
      //expect(instance).to.be();
    });

    it('should have the property numberMin (base name: "number_min")', function() {
      // uncomment below and update the code to test the property numberMin
      //var instance = new AkeneoPimRestApi.AttributeList();
      //expect(instance).to.be();
    });

    it('should have the property referenceDataName (base name: "reference_data_name")', function() {
      // uncomment below and update the code to test the property referenceDataName
      //var instance = new AkeneoPimRestApi.AttributeList();
      //expect(instance).to.be();
    });

    it('should have the property scopable (base name: "scopable")', function() {
      // uncomment below and update the code to test the property scopable
      //var instance = new AkeneoPimRestApi.AttributeList();
      //expect(instance).to.be();
    });

    it('should have the property sortOrder (base name: "sort_order")', function() {
      // uncomment below and update the code to test the property sortOrder
      //var instance = new AkeneoPimRestApi.AttributeList();
      //expect(instance).to.be();
    });

    it('should have the property tableConfiguration (base name: "table_configuration")', function() {
      // uncomment below and update the code to test the property tableConfiguration
      //var instance = new AkeneoPimRestApi.AttributeList();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new AkeneoPimRestApi.AttributeList();
      //expect(instance).to.be();
    });

    it('should have the property unique (base name: "unique")', function() {
      // uncomment below and update the code to test the property unique
      //var instance = new AkeneoPimRestApi.AttributeList();
      //expect(instance).to.be();
    });

    it('should have the property useableAsGridFilter (base name: "useable_as_grid_filter")', function() {
      // uncomment below and update the code to test the property useableAsGridFilter
      //var instance = new AkeneoPimRestApi.AttributeList();
      //expect(instance).to.be();
    });

    it('should have the property validationRegexp (base name: "validation_regexp")', function() {
      // uncomment below and update the code to test the property validationRegexp
      //var instance = new AkeneoPimRestApi.AttributeList();
      //expect(instance).to.be();
    });

    it('should have the property validationRule (base name: "validation_rule")', function() {
      // uncomment below and update the code to test the property validationRule
      //var instance = new AkeneoPimRestApi.AttributeList();
      //expect(instance).to.be();
    });

    it('should have the property wysiwygEnabled (base name: "wysiwyg_enabled")', function() {
      // uncomment below and update the code to test the property wysiwygEnabled
      //var instance = new AkeneoPimRestApi.AttributeList();
      //expect(instance).to.be();
    });

  });

}));
