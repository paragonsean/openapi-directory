/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AkeneoPimRestApi);
  }
}(this, function(expect, AkeneoPimRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AkeneoPimRestApi.GetAssetFamiliesCodeAttributes200ResponseInner();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetAssetFamiliesCodeAttributes200ResponseInner', function() {
    it('should create an instance of GetAssetFamiliesCodeAttributes200ResponseInner', function() {
      // uncomment below and update the code to test GetAssetFamiliesCodeAttributes200ResponseInner
      //var instance = new AkeneoPimRestApi.GetAssetFamiliesCodeAttributes200ResponseInner();
      //expect(instance).to.be.a(AkeneoPimRestApi.GetAssetFamiliesCodeAttributes200ResponseInner);
    });

    it('should have the property allowedExtensions (base name: "allowed_extensions")', function() {
      // uncomment below and update the code to test the property allowedExtensions
      //var instance = new AkeneoPimRestApi.GetAssetFamiliesCodeAttributes200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property code (base name: "code")', function() {
      // uncomment below and update the code to test the property code
      //var instance = new AkeneoPimRestApi.GetAssetFamiliesCodeAttributes200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property decimalsAllowed (base name: "decimals_allowed")', function() {
      // uncomment below and update the code to test the property decimalsAllowed
      //var instance = new AkeneoPimRestApi.GetAssetFamiliesCodeAttributes200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property isReadOnly (base name: "is_read_only")', function() {
      // uncomment below and update the code to test the property isReadOnly
      //var instance = new AkeneoPimRestApi.GetAssetFamiliesCodeAttributes200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property isRequiredForCompleteness (base name: "is_required_for_completeness")', function() {
      // uncomment below and update the code to test the property isRequiredForCompleteness
      //var instance = new AkeneoPimRestApi.GetAssetFamiliesCodeAttributes200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property isRichTextEditor (base name: "is_rich_text_editor")', function() {
      // uncomment below and update the code to test the property isRichTextEditor
      //var instance = new AkeneoPimRestApi.GetAssetFamiliesCodeAttributes200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property isTextarea (base name: "is_textarea")', function() {
      // uncomment below and update the code to test the property isTextarea
      //var instance = new AkeneoPimRestApi.GetAssetFamiliesCodeAttributes200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property labels (base name: "labels")', function() {
      // uncomment below and update the code to test the property labels
      //var instance = new AkeneoPimRestApi.GetAssetFamiliesCodeAttributes200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property maxCharacters (base name: "max_characters")', function() {
      // uncomment below and update the code to test the property maxCharacters
      //var instance = new AkeneoPimRestApi.GetAssetFamiliesCodeAttributes200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property maxFileSize (base name: "max_file_size")', function() {
      // uncomment below and update the code to test the property maxFileSize
      //var instance = new AkeneoPimRestApi.GetAssetFamiliesCodeAttributes200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property maxValue (base name: "max_value")', function() {
      // uncomment below and update the code to test the property maxValue
      //var instance = new AkeneoPimRestApi.GetAssetFamiliesCodeAttributes200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property mediaType (base name: "media_type")', function() {
      // uncomment below and update the code to test the property mediaType
      //var instance = new AkeneoPimRestApi.GetAssetFamiliesCodeAttributes200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property minValue (base name: "min_value")', function() {
      // uncomment below and update the code to test the property minValue
      //var instance = new AkeneoPimRestApi.GetAssetFamiliesCodeAttributes200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property prefix (base name: "prefix")', function() {
      // uncomment below and update the code to test the property prefix
      //var instance = new AkeneoPimRestApi.GetAssetFamiliesCodeAttributes200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property suffix (base name: "suffix")', function() {
      // uncomment below and update the code to test the property suffix
      //var instance = new AkeneoPimRestApi.GetAssetFamiliesCodeAttributes200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new AkeneoPimRestApi.GetAssetFamiliesCodeAttributes200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property validationRegexp (base name: "validation_regexp")', function() {
      // uncomment below and update the code to test the property validationRegexp
      //var instance = new AkeneoPimRestApi.GetAssetFamiliesCodeAttributes200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property validationRule (base name: "validation_rule")', function() {
      // uncomment below and update the code to test the property validationRule
      //var instance = new AkeneoPimRestApi.GetAssetFamiliesCodeAttributes200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property valuePerChannel (base name: "value_per_channel")', function() {
      // uncomment below and update the code to test the property valuePerChannel
      //var instance = new AkeneoPimRestApi.GetAssetFamiliesCodeAttributes200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property valuePerLocale (base name: "value_per_locale")', function() {
      // uncomment below and update the code to test the property valuePerLocale
      //var instance = new AkeneoPimRestApi.GetAssetFamiliesCodeAttributes200ResponseInner();
      //expect(instance).to.be();
    });

  });

}));
