/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FamiliesAllOfEmbeddedItemsInnerAllOfAttributeRequirements from './FamiliesAllOfEmbeddedItemsInnerAllOfAttributeRequirements';
import FamiliesAllOfEmbeddedItemsInnerAllOfLabels from './FamiliesAllOfEmbeddedItemsInnerAllOfLabels';

/**
 * The Family model module.
 * @module model/Family
 * @version 1.0.0
 */
class Family {
    /**
     * Constructs a new <code>Family</code>.
     * @alias module:model/Family
     * @param attributeAsLabel {String} Attribute code used as label
     * @param code {String} Family code
     */
    constructor(attributeAsLabel, code) { 
        
        Family.initialize(this, attributeAsLabel, code);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, attributeAsLabel, code) { 
        obj['attribute_as_image'] = 'null';
        obj['attribute_as_label'] = attributeAsLabel;
        obj['code'] = code;
    }

    /**
     * Constructs a <code>Family</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Family} obj Optional instance to populate.
     * @return {module:model/Family} The populated <code>Family</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Family();

            if (data.hasOwnProperty('attribute_as_image')) {
                obj['attribute_as_image'] = ApiClient.convertToType(data['attribute_as_image'], 'String');
            }
            if (data.hasOwnProperty('attribute_as_label')) {
                obj['attribute_as_label'] = ApiClient.convertToType(data['attribute_as_label'], 'String');
            }
            if (data.hasOwnProperty('attribute_requirements')) {
                obj['attribute_requirements'] = FamiliesAllOfEmbeddedItemsInnerAllOfAttributeRequirements.constructFromObject(data['attribute_requirements']);
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], ['String']);
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = FamiliesAllOfEmbeddedItemsInnerAllOfLabels.constructFromObject(data['labels']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Family</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Family</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Family.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['attribute_as_image'] && !(typeof data['attribute_as_image'] === 'string' || data['attribute_as_image'] instanceof String)) {
            throw new Error("Expected the field `attribute_as_image` to be a primitive type in the JSON string but got " + data['attribute_as_image']);
        }
        // ensure the json data is a string
        if (data['attribute_as_label'] && !(typeof data['attribute_as_label'] === 'string' || data['attribute_as_label'] instanceof String)) {
            throw new Error("Expected the field `attribute_as_label` to be a primitive type in the JSON string but got " + data['attribute_as_label']);
        }
        // validate the optional field `attribute_requirements`
        if (data['attribute_requirements']) { // data not null
          FamiliesAllOfEmbeddedItemsInnerAllOfAttributeRequirements.validateJSON(data['attribute_requirements']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['attributes'])) {
            throw new Error("Expected the field `attributes` to be an array in the JSON data but got " + data['attributes']);
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // validate the optional field `labels`
        if (data['labels']) { // data not null
          FamiliesAllOfEmbeddedItemsInnerAllOfLabels.validateJSON(data['labels']);
        }

        return true;
    }


}

Family.RequiredProperties = ["attribute_as_label", "code"];

/**
 * Attribute code used as the main picture in the user interface (only since v2.0)
 * @member {String} attribute_as_image
 * @default 'null'
 */
Family.prototype['attribute_as_image'] = 'null';

/**
 * Attribute code used as label
 * @member {String} attribute_as_label
 */
Family.prototype['attribute_as_label'] = undefined;

/**
 * @member {module:model/FamiliesAllOfEmbeddedItemsInnerAllOfAttributeRequirements} attribute_requirements
 */
Family.prototype['attribute_requirements'] = undefined;

/**
 * Attributes codes that compose the family
 * @member {Array.<String>} attributes
 */
Family.prototype['attributes'] = undefined;

/**
 * Family code
 * @member {String} code
 */
Family.prototype['code'] = undefined;

/**
 * @member {module:model/FamiliesAllOfEmbeddedItemsInnerAllOfLabels} labels
 */
Family.prototype['labels'] = undefined;






export default Family;

