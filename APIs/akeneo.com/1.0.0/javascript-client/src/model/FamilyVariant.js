/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FamilyVariantsAllOfEmbeddedItemsInnerAllOfLabels from './FamilyVariantsAllOfEmbeddedItemsInnerAllOfLabels';
import FamilyVariantsAllOfEmbeddedItemsInnerAllOfVariantAttributeSetsInner from './FamilyVariantsAllOfEmbeddedItemsInnerAllOfVariantAttributeSetsInner';

/**
 * The FamilyVariant model module.
 * @module model/FamilyVariant
 * @version 1.0.0
 */
class FamilyVariant {
    /**
     * Constructs a new <code>FamilyVariant</code>.
     * @alias module:model/FamilyVariant
     * @param code {String} Family variant code
     * @param variantAttributeSets {Array.<module:model/FamilyVariantsAllOfEmbeddedItemsInnerAllOfVariantAttributeSetsInner>} Attributes distribution according to the enrichment level
     */
    constructor(code, variantAttributeSets) { 
        
        FamilyVariant.initialize(this, code, variantAttributeSets);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, code, variantAttributeSets) { 
        obj['code'] = code;
        obj['variant_attribute_sets'] = variantAttributeSets;
    }

    /**
     * Constructs a <code>FamilyVariant</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FamilyVariant} obj Optional instance to populate.
     * @return {module:model/FamilyVariant} The populated <code>FamilyVariant</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FamilyVariant();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = FamilyVariantsAllOfEmbeddedItemsInnerAllOfLabels.constructFromObject(data['labels']);
            }
            if (data.hasOwnProperty('variant_attribute_sets')) {
                obj['variant_attribute_sets'] = ApiClient.convertToType(data['variant_attribute_sets'], [FamilyVariantsAllOfEmbeddedItemsInnerAllOfVariantAttributeSetsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FamilyVariant</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FamilyVariant</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FamilyVariant.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // validate the optional field `labels`
        if (data['labels']) { // data not null
          FamilyVariantsAllOfEmbeddedItemsInnerAllOfLabels.validateJSON(data['labels']);
        }
        if (data['variant_attribute_sets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['variant_attribute_sets'])) {
                throw new Error("Expected the field `variant_attribute_sets` to be an array in the JSON data but got " + data['variant_attribute_sets']);
            }
            // validate the optional field `variant_attribute_sets` (array)
            for (const item of data['variant_attribute_sets']) {
                FamilyVariantsAllOfEmbeddedItemsInnerAllOfVariantAttributeSetsInner.validateJSON(item);
            };
        }

        return true;
    }


}

FamilyVariant.RequiredProperties = ["code", "variant_attribute_sets"];

/**
 * Family variant code
 * @member {String} code
 */
FamilyVariant.prototype['code'] = undefined;

/**
 * @member {module:model/FamilyVariantsAllOfEmbeddedItemsInnerAllOfLabels} labels
 */
FamilyVariant.prototype['labels'] = undefined;

/**
 * Attributes distribution according to the enrichment level
 * @member {Array.<module:model/FamilyVariantsAllOfEmbeddedItemsInnerAllOfVariantAttributeSetsInner>} variant_attribute_sets
 */
FamilyVariant.prototype['variant_attribute_sets'] = undefined;






export default FamilyVariant;

