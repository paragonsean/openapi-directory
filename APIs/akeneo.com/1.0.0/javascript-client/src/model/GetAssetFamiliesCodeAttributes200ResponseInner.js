/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetAssetFamiliesCodeAttributes200ResponseInnerLabels from './GetAssetFamiliesCodeAttributes200ResponseInnerLabels';

/**
 * The GetAssetFamiliesCodeAttributes200ResponseInner model module.
 * @module model/GetAssetFamiliesCodeAttributes200ResponseInner
 * @version 1.0.0
 */
class GetAssetFamiliesCodeAttributes200ResponseInner {
    /**
     * Constructs a new <code>GetAssetFamiliesCodeAttributes200ResponseInner</code>.
     * @alias module:model/GetAssetFamiliesCodeAttributes200ResponseInner
     * @param code {String} Attribute code
     * @param mediaType {module:model/GetAssetFamiliesCodeAttributes200ResponseInner.MediaTypeEnum} For the `media_link` attribute type, it is the type of the media behind the url, to allow its preview in the PIM. For the `media_file` attribute type, it is the type of the file.
     * @param type {module:model/GetAssetFamiliesCodeAttributes200ResponseInner.TypeEnum} Attribute type. See <a href='/concepts/asset-manager.html#asset-attribute'>type</a> section for more details.
     */
    constructor(code, mediaType, type) { 
        
        GetAssetFamiliesCodeAttributes200ResponseInner.initialize(this, code, mediaType, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, code, mediaType, type) { 
        obj['code'] = code;
        obj['decimals_allowed'] = false;
        obj['is_read_only'] = false;
        obj['is_required_for_completeness'] = false;
        obj['is_textarea'] = false;
        obj['media_type'] = mediaType;
        obj['type'] = type;
        obj['validation_rule'] = 'none';
        obj['value_per_channel'] = false;
        obj['value_per_locale'] = false;
    }

    /**
     * Constructs a <code>GetAssetFamiliesCodeAttributes200ResponseInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetAssetFamiliesCodeAttributes200ResponseInner} obj Optional instance to populate.
     * @return {module:model/GetAssetFamiliesCodeAttributes200ResponseInner} The populated <code>GetAssetFamiliesCodeAttributes200ResponseInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetAssetFamiliesCodeAttributes200ResponseInner();

            if (data.hasOwnProperty('allowed_extensions')) {
                obj['allowed_extensions'] = ApiClient.convertToType(data['allowed_extensions'], ['String']);
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('decimals_allowed')) {
                obj['decimals_allowed'] = ApiClient.convertToType(data['decimals_allowed'], 'Boolean');
            }
            if (data.hasOwnProperty('is_read_only')) {
                obj['is_read_only'] = ApiClient.convertToType(data['is_read_only'], 'Boolean');
            }
            if (data.hasOwnProperty('is_required_for_completeness')) {
                obj['is_required_for_completeness'] = ApiClient.convertToType(data['is_required_for_completeness'], 'Boolean');
            }
            if (data.hasOwnProperty('is_rich_text_editor')) {
                obj['is_rich_text_editor'] = ApiClient.convertToType(data['is_rich_text_editor'], 'Boolean');
            }
            if (data.hasOwnProperty('is_textarea')) {
                obj['is_textarea'] = ApiClient.convertToType(data['is_textarea'], 'Boolean');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = GetAssetFamiliesCodeAttributes200ResponseInnerLabels.constructFromObject(data['labels']);
            }
            if (data.hasOwnProperty('max_characters')) {
                obj['max_characters'] = ApiClient.convertToType(data['max_characters'], 'Number');
            }
            if (data.hasOwnProperty('max_file_size')) {
                obj['max_file_size'] = ApiClient.convertToType(data['max_file_size'], 'String');
            }
            if (data.hasOwnProperty('max_value')) {
                obj['max_value'] = ApiClient.convertToType(data['max_value'], 'String');
            }
            if (data.hasOwnProperty('media_type')) {
                obj['media_type'] = ApiClient.convertToType(data['media_type'], 'String');
            }
            if (data.hasOwnProperty('min_value')) {
                obj['min_value'] = ApiClient.convertToType(data['min_value'], 'String');
            }
            if (data.hasOwnProperty('prefix')) {
                obj['prefix'] = ApiClient.convertToType(data['prefix'], 'String');
            }
            if (data.hasOwnProperty('suffix')) {
                obj['suffix'] = ApiClient.convertToType(data['suffix'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('validation_regexp')) {
                obj['validation_regexp'] = ApiClient.convertToType(data['validation_regexp'], 'String');
            }
            if (data.hasOwnProperty('validation_rule')) {
                obj['validation_rule'] = ApiClient.convertToType(data['validation_rule'], 'String');
            }
            if (data.hasOwnProperty('value_per_channel')) {
                obj['value_per_channel'] = ApiClient.convertToType(data['value_per_channel'], 'Boolean');
            }
            if (data.hasOwnProperty('value_per_locale')) {
                obj['value_per_locale'] = ApiClient.convertToType(data['value_per_locale'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetAssetFamiliesCodeAttributes200ResponseInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetAssetFamiliesCodeAttributes200ResponseInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GetAssetFamiliesCodeAttributes200ResponseInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['allowed_extensions'])) {
            throw new Error("Expected the field `allowed_extensions` to be an array in the JSON data but got " + data['allowed_extensions']);
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // validate the optional field `labels`
        if (data['labels']) { // data not null
          GetAssetFamiliesCodeAttributes200ResponseInnerLabels.validateJSON(data['labels']);
        }
        // ensure the json data is a string
        if (data['max_file_size'] && !(typeof data['max_file_size'] === 'string' || data['max_file_size'] instanceof String)) {
            throw new Error("Expected the field `max_file_size` to be a primitive type in the JSON string but got " + data['max_file_size']);
        }
        // ensure the json data is a string
        if (data['max_value'] && !(typeof data['max_value'] === 'string' || data['max_value'] instanceof String)) {
            throw new Error("Expected the field `max_value` to be a primitive type in the JSON string but got " + data['max_value']);
        }
        // ensure the json data is a string
        if (data['media_type'] && !(typeof data['media_type'] === 'string' || data['media_type'] instanceof String)) {
            throw new Error("Expected the field `media_type` to be a primitive type in the JSON string but got " + data['media_type']);
        }
        // ensure the json data is a string
        if (data['min_value'] && !(typeof data['min_value'] === 'string' || data['min_value'] instanceof String)) {
            throw new Error("Expected the field `min_value` to be a primitive type in the JSON string but got " + data['min_value']);
        }
        // ensure the json data is a string
        if (data['prefix'] && !(typeof data['prefix'] === 'string' || data['prefix'] instanceof String)) {
            throw new Error("Expected the field `prefix` to be a primitive type in the JSON string but got " + data['prefix']);
        }
        // ensure the json data is a string
        if (data['suffix'] && !(typeof data['suffix'] === 'string' || data['suffix'] instanceof String)) {
            throw new Error("Expected the field `suffix` to be a primitive type in the JSON string but got " + data['suffix']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['validation_regexp'] && !(typeof data['validation_regexp'] === 'string' || data['validation_regexp'] instanceof String)) {
            throw new Error("Expected the field `validation_regexp` to be a primitive type in the JSON string but got " + data['validation_regexp']);
        }
        // ensure the json data is a string
        if (data['validation_rule'] && !(typeof data['validation_rule'] === 'string' || data['validation_rule'] instanceof String)) {
            throw new Error("Expected the field `validation_rule` to be a primitive type in the JSON string but got " + data['validation_rule']);
        }

        return true;
    }


}

GetAssetFamiliesCodeAttributes200ResponseInner.RequiredProperties = ["code", "media_type", "type"];

/**
 * Extensions allowed when the attribute type is `media_file`
 * @member {Array.<String>} allowed_extensions
 */
GetAssetFamiliesCodeAttributes200ResponseInner.prototype['allowed_extensions'] = undefined;

/**
 * Attribute code
 * @member {String} code
 */
GetAssetFamiliesCodeAttributes200ResponseInner.prototype['code'] = undefined;

/**
 * Whether decimals are allowed when the attribute type is `number`
 * @member {Boolean} decimals_allowed
 * @default false
 */
GetAssetFamiliesCodeAttributes200ResponseInner.prototype['decimals_allowed'] = false;

/**
 * Whether the attribute should be in read only mode only in the UI, but you can still update it with the API
 * @member {Boolean} is_read_only
 * @default false
 */
GetAssetFamiliesCodeAttributes200ResponseInner.prototype['is_read_only'] = false;

/**
 * Whether the attribute should be part of the record's completeness calculation
 * @member {Boolean} is_required_for_completeness
 * @default false
 */
GetAssetFamiliesCodeAttributes200ResponseInner.prototype['is_required_for_completeness'] = false;

/**
 * Whether the UI should display a rich text editor instead of a simple text area when the attribute type is `text`
 * @member {Boolean} is_rich_text_editor
 */
GetAssetFamiliesCodeAttributes200ResponseInner.prototype['is_rich_text_editor'] = undefined;

/**
 * Whether the UI should display a text area instead of a simple field when the attribute type is `text`
 * @member {Boolean} is_textarea
 * @default false
 */
GetAssetFamiliesCodeAttributes200ResponseInner.prototype['is_textarea'] = false;

/**
 * @member {module:model/GetAssetFamiliesCodeAttributes200ResponseInnerLabels} labels
 */
GetAssetFamiliesCodeAttributes200ResponseInner.prototype['labels'] = undefined;

/**
 * Maximum number of characters allowed for the value of the attribute when the attribute type is `text`
 * @member {Number} max_characters
 */
GetAssetFamiliesCodeAttributes200ResponseInner.prototype['max_characters'] = undefined;

/**
 * Max file size in MB when the attribute type is `media_file`
 * @member {String} max_file_size
 */
GetAssetFamiliesCodeAttributes200ResponseInner.prototype['max_file_size'] = undefined;

/**
 * Maximum value allowed when the attribute type is `number`
 * @member {String} max_value
 */
GetAssetFamiliesCodeAttributes200ResponseInner.prototype['max_value'] = undefined;

/**
 * For the `media_link` attribute type, it is the type of the media behind the url, to allow its preview in the PIM. For the `media_file` attribute type, it is the type of the file.
 * @member {module:model/GetAssetFamiliesCodeAttributes200ResponseInner.MediaTypeEnum} media_type
 */
GetAssetFamiliesCodeAttributes200ResponseInner.prototype['media_type'] = undefined;

/**
 * Minimum value allowed when the attribute type is `number`
 * @member {String} min_value
 */
GetAssetFamiliesCodeAttributes200ResponseInner.prototype['min_value'] = undefined;

/**
 * Prefix of the `media_link` attribute type. The common url root that prefixes the link to the media
 * @member {String} prefix
 */
GetAssetFamiliesCodeAttributes200ResponseInner.prototype['prefix'] = undefined;

/**
 * Suffix of the `media_link` attribute type. The common url suffix for the media
 * @member {String} suffix
 */
GetAssetFamiliesCodeAttributes200ResponseInner.prototype['suffix'] = undefined;

/**
 * Attribute type. See <a href='/concepts/asset-manager.html#asset-attribute'>type</a> section for more details.
 * @member {module:model/GetAssetFamiliesCodeAttributes200ResponseInner.TypeEnum} type
 */
GetAssetFamiliesCodeAttributes200ResponseInner.prototype['type'] = undefined;

/**
 * Regexp expression used to validate the attribute value when the attribute type is `text`
 * @member {String} validation_regexp
 */
GetAssetFamiliesCodeAttributes200ResponseInner.prototype['validation_regexp'] = undefined;

/**
 * Validation rule type used to validate the attribute value when the attribute type is `text`
 * @member {module:model/GetAssetFamiliesCodeAttributes200ResponseInner.ValidationRuleEnum} validation_rule
 * @default 'none'
 */
GetAssetFamiliesCodeAttributes200ResponseInner.prototype['validation_rule'] = 'none';

/**
 * Whether the attribute is scopable, i.e. can have one value by channel
 * @member {Boolean} value_per_channel
 * @default false
 */
GetAssetFamiliesCodeAttributes200ResponseInner.prototype['value_per_channel'] = false;

/**
 * Whether the attribute is localizable, i.e. can have one value by locale
 * @member {Boolean} value_per_locale
 * @default false
 */
GetAssetFamiliesCodeAttributes200ResponseInner.prototype['value_per_locale'] = false;





/**
 * Allowed values for the <code>media_type</code> property.
 * @enum {String}
 * @readonly
 */
GetAssetFamiliesCodeAttributes200ResponseInner['MediaTypeEnum'] = {

    /**
     * value: "image"
     * @const
     */
    "image": "image",

    /**
     * value: "pdf"
     * @const
     */
    "pdf": "pdf",

    /**
     * value: "youtube"
     * @const
     */
    "youtube": "youtube",

    /**
     * value: "vimeo"
     * @const
     */
    "vimeo": "vimeo",

    /**
     * value: "other"
     * @const
     */
    "other": "other"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
GetAssetFamiliesCodeAttributes200ResponseInner['TypeEnum'] = {

    /**
     * value: "text"
     * @const
     */
    "text": "text",

    /**
     * value: "media_link"
     * @const
     */
    "media_link": "media_link",

    /**
     * value: "number"
     * @const
     */
    "number": "number",

    /**
     * value: "media_file"
     * @const
     */
    "media_file": "media_file",

    /**
     * value: "single_option"
     * @const
     */
    "single_option": "single_option",

    /**
     * value: "multiple_options"
     * @const
     */
    "multiple_options": "multiple_options",

    /**
     * value: "reference_entity_single_link"
     * @const
     */
    "reference_entity_single_link": "reference_entity_single_link",

    /**
     * value: "reference_entity_multiple_links"
     * @const
     */
    "reference_entity_multiple_links": "reference_entity_multiple_links",

    /**
     * value: "boolean"
     * @const
     */
    "boolean": "boolean"
};


/**
 * Allowed values for the <code>validation_rule</code> property.
 * @enum {String}
 * @readonly
 */
GetAssetFamiliesCodeAttributes200ResponseInner['ValidationRuleEnum'] = {

    /**
     * value: "email"
     * @const
     */
    "email": "email",

    /**
     * value: "url"
     * @const
     */
    "url": "url",

    /**
     * value: "regexp"
     * @const
     */
    "regexp": "regexp",

    /**
     * value: "none"
     * @const
     */
    "none": "none"
};



export default GetAssetFamiliesCodeAttributes200ResponseInner;

