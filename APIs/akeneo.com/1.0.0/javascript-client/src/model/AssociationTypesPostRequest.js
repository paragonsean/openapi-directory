/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AssociationTypesAllOfEmbeddedItemsInnerAllOfLabels from './AssociationTypesAllOfEmbeddedItemsInnerAllOfLabels';

/**
 * The AssociationTypesPostRequest model module.
 * @module model/AssociationTypesPostRequest
 * @version 1.0.0
 */
class AssociationTypesPostRequest {
    /**
     * Constructs a new <code>AssociationTypesPostRequest</code>.
     * @alias module:model/AssociationTypesPostRequest
     * @param code {String} Association type code
     */
    constructor(code) { 
        
        AssociationTypesPostRequest.initialize(this, code);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, code) { 
        obj['code'] = code;
        obj['is_quantified'] = false;
        obj['is_two_way'] = false;
    }

    /**
     * Constructs a <code>AssociationTypesPostRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssociationTypesPostRequest} obj Optional instance to populate.
     * @return {module:model/AssociationTypesPostRequest} The populated <code>AssociationTypesPostRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AssociationTypesPostRequest();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('is_quantified')) {
                obj['is_quantified'] = ApiClient.convertToType(data['is_quantified'], 'Boolean');
            }
            if (data.hasOwnProperty('is_two_way')) {
                obj['is_two_way'] = ApiClient.convertToType(data['is_two_way'], 'Boolean');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = AssociationTypesAllOfEmbeddedItemsInnerAllOfLabels.constructFromObject(data['labels']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AssociationTypesPostRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AssociationTypesPostRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AssociationTypesPostRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // validate the optional field `labels`
        if (data['labels']) { // data not null
          AssociationTypesAllOfEmbeddedItemsInnerAllOfLabels.validateJSON(data['labels']);
        }

        return true;
    }


}

AssociationTypesPostRequest.RequiredProperties = ["code"];

/**
 * Association type code
 * @member {String} code
 */
AssociationTypesPostRequest.prototype['code'] = undefined;

/**
 * When true, the association is a quantified association (Only available in the PIM Serenity version.)
 * @member {Boolean} is_quantified
 * @default false
 */
AssociationTypesPostRequest.prototype['is_quantified'] = false;

/**
 * When true, the association is a two-way association (Only available in the PIM Serenity version.)
 * @member {Boolean} is_two_way
 * @default false
 */
AssociationTypesPostRequest.prototype['is_two_way'] = false;

/**
 * @member {module:model/AssociationTypesAllOfEmbeddedItemsInnerAllOfLabels} labels
 */
AssociationTypesPostRequest.prototype['labels'] = undefined;






export default AssociationTypesPostRequest;

