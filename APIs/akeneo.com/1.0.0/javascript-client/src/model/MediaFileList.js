/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MediaFilesAllOfEmbeddedItemsInnerAllOfLinks from './MediaFilesAllOfEmbeddedItemsInnerAllOfLinks';

/**
 * The MediaFileList model module.
 * @module model/MediaFileList
 * @version 1.0.0
 */
class MediaFileList {
    /**
     * Constructs a new <code>MediaFileList</code>.
     * @alias module:model/MediaFileList
     */
    constructor() { 
        
        MediaFileList.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MediaFileList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MediaFileList} obj Optional instance to populate.
     * @return {module:model/MediaFileList} The populated <code>MediaFileList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MediaFileList();

            if (data.hasOwnProperty('_links')) {
                obj['_links'] = MediaFilesAllOfEmbeddedItemsInnerAllOfLinks.constructFromObject(data['_links']);
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('extension')) {
                obj['extension'] = ApiClient.convertToType(data['extension'], 'String');
            }
            if (data.hasOwnProperty('mime_type')) {
                obj['mime_type'] = ApiClient.convertToType(data['mime_type'], 'String');
            }
            if (data.hasOwnProperty('original_filename')) {
                obj['original_filename'] = ApiClient.convertToType(data['original_filename'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MediaFileList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MediaFileList</code>.
     */
    static validateJSON(data) {
        // validate the optional field `_links`
        if (data['_links']) { // data not null
          MediaFilesAllOfEmbeddedItemsInnerAllOfLinks.validateJSON(data['_links']);
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['extension'] && !(typeof data['extension'] === 'string' || data['extension'] instanceof String)) {
            throw new Error("Expected the field `extension` to be a primitive type in the JSON string but got " + data['extension']);
        }
        // ensure the json data is a string
        if (data['mime_type'] && !(typeof data['mime_type'] === 'string' || data['mime_type'] instanceof String)) {
            throw new Error("Expected the field `mime_type` to be a primitive type in the JSON string but got " + data['mime_type']);
        }
        // ensure the json data is a string
        if (data['original_filename'] && !(typeof data['original_filename'] === 'string' || data['original_filename'] instanceof String)) {
            throw new Error("Expected the field `original_filename` to be a primitive type in the JSON string but got " + data['original_filename']);
        }

        return true;
    }


}



/**
 * @member {module:model/MediaFilesAllOfEmbeddedItemsInnerAllOfLinks} _links
 */
MediaFileList.prototype['_links'] = undefined;

/**
 * Media file code
 * @member {String} code
 */
MediaFileList.prototype['code'] = undefined;

/**
 * Extension of the media file
 * @member {String} extension
 */
MediaFileList.prototype['extension'] = undefined;

/**
 * Mime type of the media file
 * @member {String} mime_type
 */
MediaFileList.prototype['mime_type'] = undefined;

/**
 * Original filename of the media file
 * @member {String} original_filename
 */
MediaFileList.prototype['original_filename'] = undefined;

/**
 * Size of the media file
 * @member {Number} size
 */
MediaFileList.prototype['size'] = undefined;






export default MediaFileList;

