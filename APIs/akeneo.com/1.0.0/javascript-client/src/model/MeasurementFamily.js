/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MeasurementFamiliesGetList200ResponseLabels from './MeasurementFamiliesGetList200ResponseLabels';
import MeasurementFamiliesGetList200ResponseUnits from './MeasurementFamiliesGetList200ResponseUnits';

/**
 * The MeasurementFamily model module.
 * @module model/MeasurementFamily
 * @version 1.0.0
 */
class MeasurementFamily {
    /**
     * Constructs a new <code>MeasurementFamily</code>.
     * @alias module:model/MeasurementFamily
     * @param code {String} Measurement family code
     * @param standardUnitCode {String} Unit code used as the standard unit for this measurement family
     * @param units {module:model/MeasurementFamiliesGetList200ResponseUnits} 
     */
    constructor(code, standardUnitCode, units) { 
        
        MeasurementFamily.initialize(this, code, standardUnitCode, units);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, code, standardUnitCode, units) { 
        obj['code'] = code;
        obj['standard_unit_code'] = standardUnitCode;
        obj['units'] = units;
    }

    /**
     * Constructs a <code>MeasurementFamily</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MeasurementFamily} obj Optional instance to populate.
     * @return {module:model/MeasurementFamily} The populated <code>MeasurementFamily</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MeasurementFamily();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = MeasurementFamiliesGetList200ResponseLabels.constructFromObject(data['labels']);
            }
            if (data.hasOwnProperty('standard_unit_code')) {
                obj['standard_unit_code'] = ApiClient.convertToType(data['standard_unit_code'], 'String');
            }
            if (data.hasOwnProperty('units')) {
                obj['units'] = MeasurementFamiliesGetList200ResponseUnits.constructFromObject(data['units']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MeasurementFamily</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MeasurementFamily</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MeasurementFamily.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // validate the optional field `labels`
        if (data['labels']) { // data not null
          MeasurementFamiliesGetList200ResponseLabels.validateJSON(data['labels']);
        }
        // ensure the json data is a string
        if (data['standard_unit_code'] && !(typeof data['standard_unit_code'] === 'string' || data['standard_unit_code'] instanceof String)) {
            throw new Error("Expected the field `standard_unit_code` to be a primitive type in the JSON string but got " + data['standard_unit_code']);
        }
        // validate the optional field `units`
        if (data['units']) { // data not null
          MeasurementFamiliesGetList200ResponseUnits.validateJSON(data['units']);
        }

        return true;
    }


}

MeasurementFamily.RequiredProperties = ["code", "standard_unit_code", "units"];

/**
 * Measurement family code
 * @member {String} code
 */
MeasurementFamily.prototype['code'] = undefined;

/**
 * @member {module:model/MeasurementFamiliesGetList200ResponseLabels} labels
 */
MeasurementFamily.prototype['labels'] = undefined;

/**
 * Unit code used as the standard unit for this measurement family
 * @member {String} standard_unit_code
 */
MeasurementFamily.prototype['standard_unit_code'] = undefined;

/**
 * @member {module:model/MeasurementFamiliesGetList200ResponseUnits} units
 */
MeasurementFamily.prototype['units'] = undefined;






export default MeasurementFamily;

