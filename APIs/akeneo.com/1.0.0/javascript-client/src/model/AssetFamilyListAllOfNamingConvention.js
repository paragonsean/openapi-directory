/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AssetFamilyListAllOfNamingConvention model module.
 * @module model/AssetFamilyListAllOfNamingConvention
 * @version 1.0.0
 */
class AssetFamilyListAllOfNamingConvention {
    /**
     * Constructs a new <code>AssetFamilyListAllOfNamingConvention</code>.
     * The naming convention ran over the asset code or the main media filename upon each asset creation, in order to automatically set several values in asset attributes. To learn more and see the format of this property, take a look at &lt;a href&#x3D;&#39;/concepts/asset-manager.html#focus-on-the-naming-convention&#39;&gt;here&lt;/a&gt;.
     * @alias module:model/AssetFamilyListAllOfNamingConvention
     */
    constructor() { 
        
        AssetFamilyListAllOfNamingConvention.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AssetFamilyListAllOfNamingConvention</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssetFamilyListAllOfNamingConvention} obj Optional instance to populate.
     * @return {module:model/AssetFamilyListAllOfNamingConvention} The populated <code>AssetFamilyListAllOfNamingConvention</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AssetFamilyListAllOfNamingConvention();

            if (data.hasOwnProperty('abort_asset_creation_on_error')) {
                obj['abort_asset_creation_on_error'] = ApiClient.convertToType(data['abort_asset_creation_on_error'], 'Boolean');
            }
            if (data.hasOwnProperty('pattern')) {
                obj['pattern'] = ApiClient.convertToType(data['pattern'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AssetFamilyListAllOfNamingConvention</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AssetFamilyListAllOfNamingConvention</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['pattern'] && !(typeof data['pattern'] === 'string' || data['pattern'] instanceof String)) {
            throw new Error("Expected the field `pattern` to be a primitive type in the JSON string but got " + data['pattern']);
        }

        return true;
    }


}



/**
 * Whether the asset should be created if the naming convention failed to apply. More details <a href='/concepts/asset-manager.html#abort-asset-creation-on-error'>here</a>.
 * @member {Boolean} abort_asset_creation_on_error
 */
AssetFamilyListAllOfNamingConvention.prototype['abort_asset_creation_on_error'] = undefined;

/**
 * The regular expression that should be applied on the source. More details <a href='/concepts/asset-manager.html#pattern'>here</a>.
 * @member {String} pattern
 */
AssetFamilyListAllOfNamingConvention.prototype['pattern'] = undefined;

/**
 * The string on which the naming convention should be applied. More details <a href='/concepts/asset-manager.html#source'>here</a>.
 * @member {Object} source
 */
AssetFamilyListAllOfNamingConvention.prototype['source'] = undefined;






export default AssetFamilyListAllOfNamingConvention;

