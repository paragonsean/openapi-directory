/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks from './PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks';
import PAMAssetsAllOfEmbeddedItemsInnerAllOfReferenceFilesInner from './PAMAssetsAllOfEmbeddedItemsInnerAllOfReferenceFilesInner';
import PAMAssetsAllOfEmbeddedItemsInnerAllOfVariationFilesInner from './PAMAssetsAllOfEmbeddedItemsInnerAllOfVariationFilesInner';

/**
 * The PAMAssetsAllOfEmbeddedItemsInner model module.
 * @module model/PAMAssetsAllOfEmbeddedItemsInner
 * @version 1.0.0
 */
class PAMAssetsAllOfEmbeddedItemsInner {
    /**
     * Constructs a new <code>PAMAssetsAllOfEmbeddedItemsInner</code>.
     * @alias module:model/PAMAssetsAllOfEmbeddedItemsInner
     * @param code {String} PAM asset code
     */
    constructor(code) { 
        
        PAMAssetsAllOfEmbeddedItemsInner.initialize(this, code);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, code) { 
        obj['code'] = code;
        obj['localizable'] = false;
    }

    /**
     * Constructs a <code>PAMAssetsAllOfEmbeddedItemsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PAMAssetsAllOfEmbeddedItemsInner} obj Optional instance to populate.
     * @return {module:model/PAMAssetsAllOfEmbeddedItemsInner} The populated <code>PAMAssetsAllOfEmbeddedItemsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PAMAssetsAllOfEmbeddedItemsInner();

            if (data.hasOwnProperty('_links')) {
                obj['_links'] = PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks.constructFromObject(data['_links']);
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], ['String']);
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('end_of_use')) {
                obj['end_of_use'] = ApiClient.convertToType(data['end_of_use'], 'String');
            }
            if (data.hasOwnProperty('localizable')) {
                obj['localizable'] = ApiClient.convertToType(data['localizable'], 'Boolean');
            }
            if (data.hasOwnProperty('reference_files')) {
                obj['reference_files'] = ApiClient.convertToType(data['reference_files'], [PAMAssetsAllOfEmbeddedItemsInnerAllOfReferenceFilesInner]);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('variation_files')) {
                obj['variation_files'] = ApiClient.convertToType(data['variation_files'], [PAMAssetsAllOfEmbeddedItemsInnerAllOfVariationFilesInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PAMAssetsAllOfEmbeddedItemsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PAMAssetsAllOfEmbeddedItemsInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PAMAssetsAllOfEmbeddedItemsInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `_links`
        if (data['_links']) { // data not null
          PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks.validateJSON(data['_links']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['categories'])) {
            throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['end_of_use'] && !(typeof data['end_of_use'] === 'string' || data['end_of_use'] instanceof String)) {
            throw new Error("Expected the field `end_of_use` to be a primitive type in the JSON string but got " + data['end_of_use']);
        }
        if (data['reference_files']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['reference_files'])) {
                throw new Error("Expected the field `reference_files` to be an array in the JSON data but got " + data['reference_files']);
            }
            // validate the optional field `reference_files` (array)
            for (const item of data['reference_files']) {
                PAMAssetsAllOfEmbeddedItemsInnerAllOfReferenceFilesInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        if (data['variation_files']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['variation_files'])) {
                throw new Error("Expected the field `variation_files` to be an array in the JSON data but got " + data['variation_files']);
            }
            // validate the optional field `variation_files` (array)
            for (const item of data['variation_files']) {
                PAMAssetsAllOfEmbeddedItemsInnerAllOfVariationFilesInner.validateJSON(item);
            };
        }

        return true;
    }


}

PAMAssetsAllOfEmbeddedItemsInner.RequiredProperties = ["code"];

/**
 * @member {module:model/PAMAssetCategoriesAllOfEmbeddedItemsInnerAllOfLinks} _links
 */
PAMAssetsAllOfEmbeddedItemsInner.prototype['_links'] = undefined;

/**
 * Codes of the PAM asset categories in which the asset is classified
 * @member {Array.<String>} categories
 */
PAMAssetsAllOfEmbeddedItemsInner.prototype['categories'] = undefined;

/**
 * PAM asset code
 * @member {String} code
 */
PAMAssetsAllOfEmbeddedItemsInner.prototype['code'] = undefined;

/**
 * Description of the PAM asset
 * @member {String} description
 */
PAMAssetsAllOfEmbeddedItemsInner.prototype['description'] = undefined;

/**
 * Date on which the PAM asset expire
 * @member {String} end_of_use
 */
PAMAssetsAllOfEmbeddedItemsInner.prototype['end_of_use'] = undefined;

/**
 * Whether the asset is localized or not, meaning if you want to have different reference files for each of your locale
 * @member {Boolean} localizable
 * @default false
 */
PAMAssetsAllOfEmbeddedItemsInner.prototype['localizable'] = false;

/**
 * Reference files of the PAM asset
 * @member {Array.<module:model/PAMAssetsAllOfEmbeddedItemsInnerAllOfReferenceFilesInner>} reference_files
 */
PAMAssetsAllOfEmbeddedItemsInner.prototype['reference_files'] = undefined;

/**
 * Tags of the PAM asset
 * @member {Array.<String>} tags
 */
PAMAssetsAllOfEmbeddedItemsInner.prototype['tags'] = undefined;

/**
 * Variations of the PAM asset
 * @member {Array.<module:model/PAMAssetsAllOfEmbeddedItemsInnerAllOfVariationFilesInner>} variation_files
 */
PAMAssetsAllOfEmbeddedItemsInner.prototype['variation_files'] = undefined;






export default PAMAssetsAllOfEmbeddedItemsInner;

