/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Products1AllOfEmbeddedItemsInnerAllOfCompletenessesInner from './Products1AllOfEmbeddedItemsInnerAllOfCompletenessesInner';
import Products1AllOfEmbeddedItemsInnerAllOfMetadata from './Products1AllOfEmbeddedItemsInnerAllOfMetadata';
import Products1AllOfEmbeddedItemsInnerAllOfValues from './Products1AllOfEmbeddedItemsInnerAllOfValues';
import Products2AllOfEmbeddedItemsInnerAllOfAssociations from './Products2AllOfEmbeddedItemsInnerAllOfAssociations';
import Products2AllOfEmbeddedItemsInnerAllOfQuantifiedAssociations from './Products2AllOfEmbeddedItemsInnerAllOfQuantifiedAssociations';

/**
 * The PatchProductsUuidRequest model module.
 * @module model/PatchProductsUuidRequest
 * @version 1.0.0
 */
class PatchProductsUuidRequest {
    /**
     * Constructs a new <code>PatchProductsUuidRequest</code>.
     * @alias module:model/PatchProductsUuidRequest
     * @param uuid {String} Product uuid
     */
    constructor(uuid) { 
        
        PatchProductsUuidRequest.initialize(this, uuid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, uuid) { 
        obj['enabled'] = true;
        obj['family'] = 'null only in the case of a non variant product';
        obj['parent'] = 'null';
        obj['uuid'] = uuid;
    }

    /**
     * Constructs a <code>PatchProductsUuidRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PatchProductsUuidRequest} obj Optional instance to populate.
     * @return {module:model/PatchProductsUuidRequest} The populated <code>PatchProductsUuidRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PatchProductsUuidRequest();

            if (data.hasOwnProperty('associations')) {
                obj['associations'] = Products2AllOfEmbeddedItemsInnerAllOfAssociations.constructFromObject(data['associations']);
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], ['String']);
            }
            if (data.hasOwnProperty('completenesses')) {
                obj['completenesses'] = ApiClient.convertToType(data['completenesses'], [Products1AllOfEmbeddedItemsInnerAllOfCompletenessesInner]);
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('family')) {
                obj['family'] = ApiClient.convertToType(data['family'], 'String');
            }
            if (data.hasOwnProperty('groups')) {
                obj['groups'] = ApiClient.convertToType(data['groups'], ['String']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = Products1AllOfEmbeddedItemsInnerAllOfMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('parent')) {
                obj['parent'] = ApiClient.convertToType(data['parent'], 'String');
            }
            if (data.hasOwnProperty('quality_scores')) {
                obj['quality_scores'] = ApiClient.convertToType(data['quality_scores'], Object);
            }
            if (data.hasOwnProperty('quantified_associations')) {
                obj['quantified_associations'] = Products2AllOfEmbeddedItemsInnerAllOfQuantifiedAssociations.constructFromObject(data['quantified_associations']);
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'String');
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = Products1AllOfEmbeddedItemsInnerAllOfValues.constructFromObject(data['values']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PatchProductsUuidRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PatchProductsUuidRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PatchProductsUuidRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `associations`
        if (data['associations']) { // data not null
          Products2AllOfEmbeddedItemsInnerAllOfAssociations.validateJSON(data['associations']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['categories'])) {
            throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
        }
        if (data['completenesses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['completenesses'])) {
                throw new Error("Expected the field `completenesses` to be an array in the JSON data but got " + data['completenesses']);
            }
            // validate the optional field `completenesses` (array)
            for (const item of data['completenesses']) {
                Products1AllOfEmbeddedItemsInnerAllOfCompletenessesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['created'] && !(typeof data['created'] === 'string' || data['created'] instanceof String)) {
            throw new Error("Expected the field `created` to be a primitive type in the JSON string but got " + data['created']);
        }
        // ensure the json data is a string
        if (data['family'] && !(typeof data['family'] === 'string' || data['family'] instanceof String)) {
            throw new Error("Expected the field `family` to be a primitive type in the JSON string but got " + data['family']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['groups'])) {
            throw new Error("Expected the field `groups` to be an array in the JSON data but got " + data['groups']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          Products1AllOfEmbeddedItemsInnerAllOfMetadata.validateJSON(data['metadata']);
        }
        // ensure the json data is a string
        if (data['parent'] && !(typeof data['parent'] === 'string' || data['parent'] instanceof String)) {
            throw new Error("Expected the field `parent` to be a primitive type in the JSON string but got " + data['parent']);
        }
        // validate the optional field `quantified_associations`
        if (data['quantified_associations']) { // data not null
          Products2AllOfEmbeddedItemsInnerAllOfQuantifiedAssociations.validateJSON(data['quantified_associations']);
        }
        // ensure the json data is a string
        if (data['updated'] && !(typeof data['updated'] === 'string' || data['updated'] instanceof String)) {
            throw new Error("Expected the field `updated` to be a primitive type in the JSON string but got " + data['updated']);
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }
        // validate the optional field `values`
        if (data['values']) { // data not null
          Products1AllOfEmbeddedItemsInnerAllOfValues.validateJSON(data['values']);
        }

        return true;
    }


}

PatchProductsUuidRequest.RequiredProperties = ["uuid"];

/**
 * @member {module:model/Products2AllOfEmbeddedItemsInnerAllOfAssociations} associations
 */
PatchProductsUuidRequest.prototype['associations'] = undefined;

/**
 * Codes of the <a href='api-reference.html#Category'>categories</a> in which the product is classified
 * @member {Array.<String>} categories
 */
PatchProductsUuidRequest.prototype['categories'] = undefined;

/**
 * Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the \"with_completenesses\" query parameter is set to \"true\")
 * @member {Array.<module:model/Products1AllOfEmbeddedItemsInnerAllOfCompletenessesInner>} completenesses
 */
PatchProductsUuidRequest.prototype['completenesses'] = undefined;

/**
 * Date of creation
 * @member {String} created
 */
PatchProductsUuidRequest.prototype['created'] = undefined;

/**
 * Whether the product is enabled
 * @member {Boolean} enabled
 * @default true
 */
PatchProductsUuidRequest.prototype['enabled'] = true;

/**
 * <a href='api-reference.html#Family'>Family</a> code from which the product inherits its attributes and attributes requirements.
 * @member {String} family
 * @default 'null only in the case of a non variant product'
 */
PatchProductsUuidRequest.prototype['family'] = 'null only in the case of a non variant product';

/**
 * Codes of the groups to which the product belong
 * @member {Array.<String>} groups
 */
PatchProductsUuidRequest.prototype['groups'] = undefined;

/**
 * @member {module:model/Products1AllOfEmbeddedItemsInnerAllOfMetadata} metadata
 */
PatchProductsUuidRequest.prototype['metadata'] = undefined;

/**
 * Code of the parent <a href='api-reference.html#Productmodel'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.
 * @member {String} parent
 * @default 'null'
 */
PatchProductsUuidRequest.prototype['parent'] = 'null';

/**
 * Product quality scores for each channel/locale combination (only available since the 5.0 and when the \"with_quality_scores\" query parameter is set to \"true\")
 * @member {Object} quality_scores
 */
PatchProductsUuidRequest.prototype['quality_scores'] = undefined;

/**
 * @member {module:model/Products2AllOfEmbeddedItemsInnerAllOfQuantifiedAssociations} quantified_associations
 */
PatchProductsUuidRequest.prototype['quantified_associations'] = undefined;

/**
 * Date of the last update
 * @member {String} updated
 */
PatchProductsUuidRequest.prototype['updated'] = undefined;

/**
 * Product uuid
 * @member {String} uuid
 */
PatchProductsUuidRequest.prototype['uuid'] = undefined;

/**
 * @member {module:model/Products1AllOfEmbeddedItemsInnerAllOfValues} values
 */
PatchProductsUuidRequest.prototype['values'] = undefined;






export default PatchProductsUuidRequest;

