/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInnerLabels from './AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInnerLabels';
import AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInnerValidations from './AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInnerValidations';

/**
 * The AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner model module.
 * @module model/AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner
 * @version 1.0.0
 */
class AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner {
    /**
     * Constructs a new <code>AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner</code>.
     * @alias module:model/AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner
     * @param code {String} Column code
     * @param dataType {module:model/AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.DataTypeEnum} Column data type
     */
    constructor(code, dataType) { 
        
        AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.initialize(this, code, dataType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, code, dataType) { 
        obj['code'] = code;
        obj['data_type'] = dataType;
        obj['is_required_for_completeness'] = false;
    }

    /**
     * Constructs a <code>AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner} obj Optional instance to populate.
     * @return {module:model/AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner} The populated <code>AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('data_type')) {
                obj['data_type'] = ApiClient.convertToType(data['data_type'], 'String');
            }
            if (data.hasOwnProperty('is_required_for_completeness')) {
                obj['is_required_for_completeness'] = ApiClient.convertToType(data['is_required_for_completeness'], 'Boolean');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInnerLabels.constructFromObject(data['labels']);
            }
            if (data.hasOwnProperty('validations')) {
                obj['validations'] = AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInnerValidations.constructFromObject(data['validations']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['data_type'] && !(typeof data['data_type'] === 'string' || data['data_type'] instanceof String)) {
            throw new Error("Expected the field `data_type` to be a primitive type in the JSON string but got " + data['data_type']);
        }
        // validate the optional field `labels`
        if (data['labels']) { // data not null
          AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInnerLabels.validateJSON(data['labels']);
        }
        // validate the optional field `validations`
        if (data['validations']) { // data not null
          AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInnerValidations.validateJSON(data['validations']);
        }

        return true;
    }


}

AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.RequiredProperties = ["code", "data_type"];

/**
 * Column code
 * @member {String} code
 */
AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.prototype['code'] = undefined;

/**
 * Column data type
 * @member {module:model/AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.DataTypeEnum} data_type
 */
AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.prototype['data_type'] = undefined;

/**
 * Defines if the column should be entirely filled for the attribute to be considered complete
 * @member {Boolean} is_required_for_completeness
 * @default false
 */
AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.prototype['is_required_for_completeness'] = false;

/**
 * @member {module:model/AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInnerLabels} labels
 */
AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.prototype['labels'] = undefined;

/**
 * @member {module:model/AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInnerValidations} validations
 */
AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner.prototype['validations'] = undefined;





/**
 * Allowed values for the <code>data_type</code> property.
 * @enum {String}
 * @readonly
 */
AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner['DataTypeEnum'] = {

    /**
     * value: "select"
     * @const
     */
    "select": "select",

    /**
     * value: "text"
     * @const
     */
    "text": "text",

    /**
     * value: "number"
     * @const
     */
    "number": "number",

    /**
     * value: "boolean"
     * @const
     */
    "boolean": "boolean"
};



export default AttributesAllOfEmbeddedItemsInnerAllOfTableConfigurationInner;

