/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PostToken400Response from '../model/PostToken400Response';
import ProductUuids from '../model/ProductUuids';
import Products from '../model/Products';

/**
* CatalogProducts service.
* @module api/CatalogProductsApi
* @version 1.0.0
*/
export default class CatalogProductsApi {

    /**
    * Constructs a new CatalogProductsApi. 
    * @alias module:api/CatalogProductsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAppCatalogMappedProducts operation.
     * @callback module:api/CatalogProductsApi~getAppCatalogMappedProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Products} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of mapped products related to a catalog
     * This endpoint allows you to get the list of products related to a catalog when the mapping is enabled. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href=\"apps/catalogs.html#troubleshooting\">App Catalog</a> section.
     * @param {String} id Catalog ID
     * @param {Object} opts Optional parameters
     * @param {String} [searchAfter = 'cursor to the first page')] Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href=\"/documentation/pagination.html\">Pagination</a> section
     * @param {Number} [limit = 100)] Number of results by page, see <a href=\"/documentation/pagination.html\">Pagination</a> section
     * @param {Date} [updatedBefore] Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints)
     * @param {Date} [updatedAfter] Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints)
     * @param {module:api/CatalogProductsApi~getAppCatalogMappedProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Products}
     */
    getAppCatalogMappedProducts(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAppCatalogMappedProducts");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'search_after': opts['searchAfter'],
        'limit': opts['limit'],
        'updated_before': opts['updatedBefore'],
        'updated_after': opts['updatedAfter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message'];
      let returnType = Products;
      return this.apiClient.callApi(
        '/api/rest/v1/catalogs/{id}/mapped-products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAppCatalogProductUuids operation.
     * @callback module:api/CatalogProductsApi~getAppCatalogProductUuidsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductUuids} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of product uuids
     * This endpoint allows you to get the list of uuids of products contained in a catalog. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href=\"apps/catalogs.html#troubleshooting\">App Catalog</a> section.
     * @param {String} id Id of the catalog
     * @param {Object} opts Optional parameters
     * @param {String} [searchAfter = 'cursor to the first page')] Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href=\"/documentation/pagination.html\">Pagination</a> section
     * @param {Number} [limit = 100)] Number of results by page, see <a href=\"/documentation/pagination.html\">Pagination</a> section
     * @param {Date} [updatedBefore] Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints)
     * @param {Date} [updatedAfter] Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints)
     * @param {module:api/CatalogProductsApi~getAppCatalogProductUuidsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductUuids}
     */
    getAppCatalogProductUuids(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAppCatalogProductUuids");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'search_after': opts['searchAfter'],
        'limit': opts['limit'],
        'updated_before': opts['updatedBefore'],
        'updated_after': opts['updatedAfter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message'];
      let returnType = ProductUuids;
      return this.apiClient.callApi(
        '/api/rest/v1/catalogs/{id}/product-uuids', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAppCatalogProducts operation.
     * @callback module:api/CatalogProductsApi~getAppCatalogProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Products} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of products related to a catalog
     * This endpoint allows you to get the list of products related to a catalog. Products are paginated and they can be filtered. In the Enterprise Edition, permissions based on your app settings are applied to the set of products you request. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href=\"apps/catalogs.html#troubleshooting\">App Catalog</a> section.
     * @param {String} id Catalog ID
     * @param {Object} opts Optional parameters
     * @param {String} [searchAfter = 'cursor to the first page')] Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href=\"/documentation/pagination.html\">Pagination</a> section
     * @param {Number} [limit = 100)] Number of results by page, see <a href=\"/documentation/pagination.html\">Pagination</a> section
     * @param {Date} [updatedBefore] Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints)
     * @param {Date} [updatedAfter] Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints)
     * @param {module:api/CatalogProductsApi~getAppCatalogProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Products}
     */
    getAppCatalogProducts(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAppCatalogProducts");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'search_after': opts['searchAfter'],
        'limit': opts['limit'],
        'updated_before': opts['updatedBefore'],
        'updated_after': opts['updatedAfter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message'];
      let returnType = Products;
      return this.apiClient.callApi(
        '/api/rest/v1/catalogs/{id}/products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAppCatalogProductsUuid operation.
     * @callback module:api/CatalogProductsApi~getAppCatalogProductsUuidCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a product related to a catalog
     * This endpoint allows you to get a specific product related to a catalog. In the Enterprise Edition, permissions based on your app settings are applied on the product you request. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href=\"apps/catalogs.html#troubleshooting\">App Catalog</a> section.
     * @param {String} id Catalog ID
     * @param {String} uuid Product UUID
     * @param {module:api/CatalogProductsApi~getAppCatalogProductsUuidCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAppCatalogProductsUuid(id, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAppCatalogProductsUuid");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getAppCatalogProductsUuid");
      }

      let pathParams = {
        'id': id,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rest/v1/catalogs/{id}/products/{uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
