/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PatchAssetCategories200Response from '../model/PatchAssetCategories200Response';
import PatchProductsRequest from '../model/PatchProductsRequest';
import PostProductsRequest from '../model/PostProductsRequest';
import PostToken400Response from '../model/PostToken400Response';
import Products1 from '../model/Products1';

/**
* ProductIdentifier service.
* @module api/ProductIdentifierApi
* @version 1.0.0
*/
export default class ProductIdentifierApi {

    /**
    * Constructs a new ProductIdentifierApi. 
    * @alias module:api/ProductIdentifierApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteProductsCode operation.
     * @callback module:api/ProductIdentifierApi~deleteProductsCodeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a product
     * This endpoint allows you to delete a given product. In the Enterprise Edition, since the 2.0, permissions based on your user groups are applied to the product you try to delete.
     * @param {String} code Code of the resource
     * @param {module:api/ProductIdentifierApi~deleteProductsCodeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProductsCode(code, callback) {
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling deleteProductsCode");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rest/v1/products/{code}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDraftCode operation.
     * @callback module:api/ProductIdentifierApi~getDraftCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostProductsRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a draft
     * This endpoint allows you to get the information about a given draft.
     * @param {String} code Code of the resource
     * @param {module:api/ProductIdentifierApi~getDraftCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostProductsRequest}
     */
    getDraftCode(code, callback) {
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling getDraftCode");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message'];
      let returnType = PostProductsRequest;
      return this.apiClient.callApi(
        '/api/rest/v1/products/{code}/draft', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProducts operation.
     * @callback module:api/ProductIdentifierApi~getProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Products1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of products
     * This endpoint allows you to get a list of products. Products are paginated and they can be filtered. In the Enterprise Edition, since the 2.0, permissions based on your user groups are applied to the set of products you request.
     * @param {Object} opts Optional parameters
     * @param {String} [search] Filter products, for more details see the <a href=\"/documentation/filter.html\">Filters</a> section
     * @param {String} [scope] Filter product values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the <a href=\"/documentation/filter.html#via-channel\">Filter product values via channel</a> section
     * @param {String} [locales] Filter product values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the <a href=\"/documentation/filter.html#via-locale\">Filter product values via locale</a> section
     * @param {String} [attributes] Filter product values to only return those concerning the given attributes, for more details see the <a href=\"/documentation/filter.html#filter-product-values\">Filter on product values</a> section
     * @param {module:model/String} [paginationType = 'page')] Pagination method type, see <a href=\"/documentation/pagination.html\">Pagination</a> section
     * @param {Number} [page = 1)] Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href=\"/documentation/pagination.html#pagination\">Pagination</a> section
     * @param {String} [searchAfter = 'cursor to the first page')] Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href=\"/documentation/pagination.html\">Pagination</a> section
     * @param {Number} [limit = 10)] Number of results by page, see <a href=\"/documentation/pagination.html\">Pagination</a> section
     * @param {Boolean} [withCount = false)] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     * @param {Boolean} [withAttributeOptions = false)] Return labels of attribute options in the response. (Only available since the 5.0 version)
     * @param {Boolean} [withQualityScores = false)] Return product quality scores in the response. (Only available since the 5.0 version)
     * @param {Boolean} [withCompletenesses = false)] Return product completenesses in the response. (Only available since the 6.0 version)
     * @param {module:api/ProductIdentifierApi~getProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Products1}
     */
    getProducts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'search': opts['search'],
        'scope': opts['scope'],
        'locales': opts['locales'],
        'attributes': opts['attributes'],
        'pagination_type': opts['paginationType'],
        'page': opts['page'],
        'search_after': opts['searchAfter'],
        'limit': opts['limit'],
        'with_count': opts['withCount'],
        'with_attribute_options': opts['withAttributeOptions'],
        'with_quality_scores': opts['withQualityScores'],
        'with_completenesses': opts['withCompletenesses']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message', '_links'];
      let returnType = Products1;
      return this.apiClient.callApi(
        '/api/rest/v1/products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsCode operation.
     * @callback module:api/ProductIdentifierApi~getProductsCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostProductsRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a product
     * This endpoint allows you to get the information about a given product. In the Entreprise Edition, since the v2.0, permissions based on your user groups are applied to the product you request.
     * @param {String} code Code of the resource
     * @param {Object} opts Optional parameters
     * @param {Boolean} [withAttributeOptions = false)] Return labels of attribute options in the response. (Only available since the 5.0 version)
     * @param {Boolean} [withQualityScores = false)] Return product quality scores in the response. (Only available since the 5.0 version)
     * @param {Boolean} [withCompletenesses = false)] Return product completenesses in the response. (Only available since the 6.0 version)
     * @param {module:api/ProductIdentifierApi~getProductsCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostProductsRequest}
     */
    getProductsCode(code, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling getProductsCode");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
        'with_attribute_options': opts['withAttributeOptions'],
        'with_quality_scores': opts['withQualityScores'],
        'with_completenesses': opts['withCompletenesses']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message'];
      let returnType = PostProductsRequest;
      return this.apiClient.callApi(
        '/api/rest/v1/products/{code}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchProducts operation.
     * @callback module:api/ProductIdentifierApi~patchProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PatchAssetCategories200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update/create several products
     * This endpoint allows you to update and/or create several products at once. Learn more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no product exists for the given identifier, it creates it. In the Enterprise Edition, since the v2.0, permissions based on your user groups are applied to the products you try to update. It may result in the creation of drafts if you only have edit rights through the product's categories.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchProductsRequest} [body] 
     * @param {module:api/ProductIdentifierApi~patchProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PatchAssetCategories200Response}
     */
    patchProducts(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'x-example-1', 'x-example-2', 'x-example-3', 'code', 'message'];
      let returnType = PatchAssetCategories200Response;
      return this.apiClient.callApi(
        '/api/rest/v1/products', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchProductsCode operation.
     * @callback module:api/ProductIdentifierApi~patchProductsCodeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update/create a product
     * This endpoint allows you to update a given product. Learn more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no product exists for the given identifier, it creates it. In the Entreprise Edition, since the v2.0, permissions based on your user groups are applied to the product you try to update. It may result in the creation of a draft if you only have edit rights through the product's categories.
     * @param {String} code Code of the resource
     * @param {module:model/PostProductsRequest} body 
     * @param {module:api/ProductIdentifierApi~patchProductsCodeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    patchProductsCode(code, body, callback) {
      let postBody = body;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling patchProductsCode");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchProductsCode");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message', '_links'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rest/v1/products/{code}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postProducts operation.
     * @callback module:api/ProductIdentifierApi~postProductsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new product
     * This endpoint allows you to create a new product. In the Enterprise Edition, since the v2.0, permissions based on your user groups are applied to the product you try to create.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostProductsRequest} [body] 
     * @param {module:api/ProductIdentifierApi~postProductsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postProducts(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message', '_links'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rest/v1/products', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postProposal operation.
     * @callback module:api/ProductIdentifierApi~postProposalCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit a draft for approval
     * This endpoint allows you to submit a draft for approval.
     * @param {String} code Code of the resource
     * @param {module:api/ProductIdentifierApi~postProposalCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postProposal(code, callback) {
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling postProposal");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message', '_links'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rest/v1/products/{code}/proposal', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
