/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PatchAssets200ResponseInner from '../model/PatchAssets200ResponseInner';
import PatchReferenceEntityRecordsCodeRequest from '../model/PatchReferenceEntityRecordsCodeRequest';
import PatchReferenceEntityRecordsRequestInner from '../model/PatchReferenceEntityRecordsRequestInner';
import PostToken400Response from '../model/PostToken400Response';
import ReferenceEntityRecord from '../model/ReferenceEntityRecord';

/**
* ReferenceEntityRecord service.
* @module api/ReferenceEntityRecordApi
* @version 1.0.0
*/
export default class ReferenceEntityRecordApi {

    /**
    * Constructs a new ReferenceEntityRecordApi. 
    * @alias module:api/ReferenceEntityRecordApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getReferenceEntityRecords operation.
     * @callback module:api/ReferenceEntityRecordApi~getReferenceEntityRecordsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReferenceEntityRecord} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of the records of a reference entity
     * This endpoint allows you to get a list of records of a given reference entity. Records are paginated and can be filtered.
     * @param {String} referenceEntityCode Code of the reference entity
     * @param {Object} opts Optional parameters
     * @param {String} [search] Filter records of the reference entity, for more details see the <a href=\"/documentation/filter.html#filter-reference-entity-records\">Filters</a> section
     * @param {String} [channel] Filter attribute values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the <a href=\"/documentation/filter.html#record-values-by-channel\">Filter attribute values by channel</a> section
     * @param {String} [locales] Filter attribute values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the <a href=\"/documentation/filter.html#record-values-by-locale\">Filter attribute values by locale</a> section
     * @param {String} [searchAfter = 'cursor to the first page')] Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href=\"/documentation/pagination.html\">Pagination</a> section
     * @param {module:api/ReferenceEntityRecordApi~getReferenceEntityRecordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReferenceEntityRecord}
     */
    getReferenceEntityRecords(referenceEntityCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'referenceEntityCode' is set
      if (referenceEntityCode === undefined || referenceEntityCode === null) {
        throw new Error("Missing the required parameter 'referenceEntityCode' when calling getReferenceEntityRecords");
      }

      let pathParams = {
        'reference_entity_code': referenceEntityCode
      };
      let queryParams = {
        'search': opts['search'],
        'channel': opts['channel'],
        'locales': opts['locales'],
        'search_after': opts['searchAfter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', '_embedded', '_links', 'code', 'message'];
      let returnType = ReferenceEntityRecord;
      return this.apiClient.callApi(
        '/api/rest/v1/reference-entities/{reference_entity_code}/records', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReferenceEntityRecordsCode operation.
     * @callback module:api/ReferenceEntityRecordApi~getReferenceEntityRecordsCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PatchReferenceEntityRecordsRequestInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a record of a given reference entity
     * This endpoint allows you to get the information about a given record for a given reference entity.
     * @param {String} referenceEntityCode Code of the reference entity
     * @param {String} code Code of the resource
     * @param {module:api/ReferenceEntityRecordApi~getReferenceEntityRecordsCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PatchReferenceEntityRecordsRequestInner}
     */
    getReferenceEntityRecordsCode(referenceEntityCode, code, callback) {
      let postBody = null;
      // verify the required parameter 'referenceEntityCode' is set
      if (referenceEntityCode === undefined || referenceEntityCode === null) {
        throw new Error("Missing the required parameter 'referenceEntityCode' when calling getReferenceEntityRecordsCode");
      }
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling getReferenceEntityRecordsCode");
      }

      let pathParams = {
        'reference_entity_code': referenceEntityCode,
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message'];
      let returnType = PatchReferenceEntityRecordsRequestInner;
      return this.apiClient.callApi(
        '/api/rest/v1/reference-entities/{reference_entity_code}/records/{code}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchReferenceEntityRecords operation.
     * @callback module:api/ReferenceEntityRecordApi~patchReferenceEntityRecordsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PatchAssets200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update/create several reference entity records
     * This endpoint allows you to update and/or create several records of one given reference entity at once. Learn more about <a href=\"/documentation/update.html#patch-reference-entity-record-values\">Update behavior</a>. Note that if the record does not already exist for the given reference entity, it creates it.
     * @param {String} referenceEntityCode Code of the reference entity
     * @param {Array.<module:model/PatchReferenceEntityRecordsRequestInner>} body 
     * @param {module:api/ReferenceEntityRecordApi~patchReferenceEntityRecordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PatchAssets200ResponseInner>}
     */
    patchReferenceEntityRecords(referenceEntityCode, body, callback) {
      let postBody = body;
      // verify the required parameter 'referenceEntityCode' is set
      if (referenceEntityCode === undefined || referenceEntityCode === null) {
        throw new Error("Missing the required parameter 'referenceEntityCode' when calling patchReferenceEntityRecords");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchReferenceEntityRecords");
      }

      let pathParams = {
        'reference_entity_code': referenceEntityCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message'];
      let returnType = [PatchAssets200ResponseInner];
      return this.apiClient.callApi(
        '/api/rest/v1/reference-entities/{reference_entity_code}/records', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchReferenceEntityRecordsCode operation.
     * @callback module:api/ReferenceEntityRecordApi~patchReferenceEntityRecordsCodeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update/create a record of a given reference entity
     * This endpoint allows you to update a given record of a given renference entity. Learn more about <a href=\"/documentation/update.html#patch-reference-entity-record-values\">Update behavior</a>. Note that if the record does not already exist for the given reference entity, it creates it.
     * @param {String} referenceEntityCode Code of the reference entity
     * @param {String} code Code of the resource
     * @param {module:model/PatchReferenceEntityRecordsCodeRequest} body 
     * @param {module:api/ReferenceEntityRecordApi~patchReferenceEntityRecordsCodeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    patchReferenceEntityRecordsCode(referenceEntityCode, code, body, callback) {
      let postBody = body;
      // verify the required parameter 'referenceEntityCode' is set
      if (referenceEntityCode === undefined || referenceEntityCode === null) {
        throw new Error("Missing the required parameter 'referenceEntityCode' when calling patchReferenceEntityRecordsCode");
      }
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling patchReferenceEntityRecordsCode");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchReferenceEntityRecordsCode");
      }

      let pathParams = {
        'reference_entity_code': referenceEntityCode,
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message', '_links'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rest/v1/reference-entities/{reference_entity_code}/records/{code}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
