/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Categories from '../model/Categories';
import PatchAssetCategories200Response from '../model/PatchAssetCategories200Response';
import PatchCategoriesRequest from '../model/PatchCategoriesRequest';
import PostCategoriesRequest from '../model/PostCategoriesRequest';
import PostToken400Response from '../model/PostToken400Response';

/**
* Category service.
* @module api/CategoryApi
* @version 1.0.0
*/
export default class CategoryApi {

    /**
    * Constructs a new CategoryApi. 
    * @alias module:api/CategoryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getCategories operation.
     * @callback module:api/CategoryApi~getCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Categories} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of categories
     * This endpoint allows you to get a list of categories. Categories are paginated and sorted by `root/left`.
     * @param {Object} opts Optional parameters
     * @param {String} [search] Filter categories, for more details see the <a href=\"/documentation/filter.html#filter-categories\">Filters</a> section.
     * @param {Number} [page = 1)] Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href=\"/documentation/pagination.html#pagination\">Pagination</a> section
     * @param {Number} [limit = 10)] Number of results by page, see <a href=\"/documentation/pagination.html\">Pagination</a> section
     * @param {Boolean} [withCount = false)] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     * @param {Boolean} [withPosition] Return information about category position into its category tree (only available since the 7.0 version)
     * @param {Boolean} [withEnrichedAttributes] Return attribute values of the category (only available on SaaS platforms)
     * @param {module:api/CategoryApi~getCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Categories}
     */
    getCategories(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'search': opts['search'],
        'page': opts['page'],
        'limit': opts['limit'],
        'with_count': opts['withCount'],
        'with_position': opts['withPosition'],
        'with_enriched_attributes': opts['withEnrichedAttributes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', '_embedded', '_links', 'current_page', 'code', 'message'];
      let returnType = Categories;
      return this.apiClient.callApi(
        '/api/rest/v1/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCategoriesCode operation.
     * @callback module:api/CategoryApi~getCategoriesCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostCategoriesRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a category
     * This endpoint allows you to get the information about a given category.
     * @param {String} code Code of the resource
     * @param {Object} opts Optional parameters
     * @param {Boolean} [withPosition] Return information about category position into its category tree (only available since the 7.0 version)
     * @param {Boolean} [withEnrichedAttributes] Return attribute values of the category (only available on SaaS platforms)
     * @param {module:api/CategoryApi~getCategoriesCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostCategoriesRequest}
     */
    getCategoriesCode(code, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling getCategoriesCode");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
        'with_position': opts['withPosition'],
        'with_enriched_attributes': opts['withEnrichedAttributes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message'];
      let returnType = PostCategoriesRequest;
      return this.apiClient.callApi(
        '/api/rest/v1/categories/{code}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCategoryMediaFilesCodeDownload operation.
     * @callback module:api/CategoryApi~getCategoryMediaFilesCodeDownloadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download a category media file
     * This endpoint allows you to download a given media file that is used as an attribute value of a enriched category.
     * @param {String} code Code of the resource
     * @param {module:api/CategoryApi~getCategoryMediaFilesCodeDownloadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCategoryMediaFilesCodeDownload(code, callback) {
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling getCategoryMediaFilesCodeDownload");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rest/v1/category-media-files/{code}/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCategories operation.
     * @callback module:api/CategoryApi~patchCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PatchAssetCategories200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update/create several categories
     * This endpoint allows you to update several categories at once.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchCategoriesRequest} [body] 
     * @param {module:api/CategoryApi~patchCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PatchAssetCategories200Response}
     */
    patchCategories(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'x-example-1', 'x-example-2', 'x-example-3', 'code', 'message'];
      let returnType = PatchAssetCategories200Response;
      return this.apiClient.callApi(
        '/api/rest/v1/categories', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCategoriesCode operation.
     * @callback module:api/CategoryApi~patchCategoriesCodeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update/create a category
     * This endpoint allows you to update a given category. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no category exists for the given code, it creates it.
     * @param {String} code Code of the resource
     * @param {module:model/PostCategoriesRequest} body 
     * @param {module:api/CategoryApi~patchCategoriesCodeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    patchCategoriesCode(code, body, callback) {
      let postBody = body;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling patchCategoriesCode");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchCategoriesCode");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message', '_links'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rest/v1/categories/{code}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCategories operation.
     * @callback module:api/CategoryApi~postCategoriesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new category
     * This endpoint allows you to create a new category.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostCategoriesRequest} [body] 
     * @param {module:api/CategoryApi~postCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postCategories(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message', '_links'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rest/v1/categories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
