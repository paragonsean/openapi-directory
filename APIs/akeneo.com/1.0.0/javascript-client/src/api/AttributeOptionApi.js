/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AttributeOptions from '../model/AttributeOptions';
import PatchAssetCategories200Response from '../model/PatchAssetCategories200Response';
import PatchAttributesAttributeCodeOptionsRequest from '../model/PatchAttributesAttributeCodeOptionsRequest';
import PostAttributesAttributeCodeOptionsRequest from '../model/PostAttributesAttributeCodeOptionsRequest';
import PostToken400Response from '../model/PostToken400Response';

/**
* AttributeOption service.
* @module api/AttributeOptionApi
* @version 1.0.0
*/
export default class AttributeOptionApi {

    /**
    * Constructs a new AttributeOptionApi. 
    * @alias module:api/AttributeOptionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAttributesAttributeCodeOptions operation.
     * @callback module:api/AttributeOptionApi~getAttributesAttributeCodeOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeOptions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of attribute options
     * This endpoint allows you to get a list of attribute options. Attribute options are paginated and sorted by code.
     * @param {String} attributeCode Code of the attribute
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href=\"/documentation/pagination.html#pagination\">Pagination</a> section
     * @param {Number} [limit = 10)] Number of results by page, see <a href=\"/documentation/pagination.html\">Pagination</a> section
     * @param {Boolean} [withCount = false)] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     * @param {module:api/AttributeOptionApi~getAttributesAttributeCodeOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeOptions}
     */
    getAttributesAttributeCodeOptions(attributeCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'attributeCode' is set
      if (attributeCode === undefined || attributeCode === null) {
        throw new Error("Missing the required parameter 'attributeCode' when calling getAttributesAttributeCodeOptions");
      }

      let pathParams = {
        'attribute_code': attributeCode
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'with_count': opts['withCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', '_embedded', '_links', 'current_page', 'code', 'message'];
      let returnType = AttributeOptions;
      return this.apiClient.callApi(
        '/api/rest/v1/attributes/{attribute_code}/options', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAttributesAttributeCodeOptionsCode operation.
     * @callback module:api/AttributeOptionApi~getAttributesAttributeCodeOptionsCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostAttributesAttributeCodeOptionsRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an attribute option
     * This endpoint allows you to get the information about a given attribute option.
     * @param {String} attributeCode Code of the attribute
     * @param {String} code Code of the resource
     * @param {module:api/AttributeOptionApi~getAttributesAttributeCodeOptionsCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostAttributesAttributeCodeOptionsRequest}
     */
    getAttributesAttributeCodeOptionsCode(attributeCode, code, callback) {
      let postBody = null;
      // verify the required parameter 'attributeCode' is set
      if (attributeCode === undefined || attributeCode === null) {
        throw new Error("Missing the required parameter 'attributeCode' when calling getAttributesAttributeCodeOptionsCode");
      }
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling getAttributesAttributeCodeOptionsCode");
      }

      let pathParams = {
        'attribute_code': attributeCode,
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message'];
      let returnType = PostAttributesAttributeCodeOptionsRequest;
      return this.apiClient.callApi(
        '/api/rest/v1/attributes/{attribute_code}/options/{code}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchAttributesAttributeCodeOptions operation.
     * @callback module:api/AttributeOptionApi~patchAttributesAttributeCodeOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PatchAssetCategories200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update/create several attribute options
     * This endpoint allows you to update several attribute options at once.
     * @param {String} attributeCode Code of the attribute
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchAttributesAttributeCodeOptionsRequest} [body] 
     * @param {module:api/AttributeOptionApi~patchAttributesAttributeCodeOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PatchAssetCategories200Response}
     */
    patchAttributesAttributeCodeOptions(attributeCode, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'attributeCode' is set
      if (attributeCode === undefined || attributeCode === null) {
        throw new Error("Missing the required parameter 'attributeCode' when calling patchAttributesAttributeCodeOptions");
      }

      let pathParams = {
        'attribute_code': attributeCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'x-example-1', 'x-example-2', 'x-example-3', 'code', 'message'];
      let returnType = PatchAssetCategories200Response;
      return this.apiClient.callApi(
        '/api/rest/v1/attributes/{attribute_code}/options', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchAttributesAttributeCodeOptionsCode operation.
     * @callback module:api/AttributeOptionApi~patchAttributesAttributeCodeOptionsCodeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update/create an attribute option
     * This endpoint allows you to update a given attribute option. Know more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no attribute option exists for the given code, it creates it.
     * @param {String} attributeCode Code of the attribute
     * @param {String} code Code of the resource
     * @param {module:model/PostAttributesAttributeCodeOptionsRequest} body 
     * @param {module:api/AttributeOptionApi~patchAttributesAttributeCodeOptionsCodeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    patchAttributesAttributeCodeOptionsCode(attributeCode, code, body, callback) {
      let postBody = body;
      // verify the required parameter 'attributeCode' is set
      if (attributeCode === undefined || attributeCode === null) {
        throw new Error("Missing the required parameter 'attributeCode' when calling patchAttributesAttributeCodeOptionsCode");
      }
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling patchAttributesAttributeCodeOptionsCode");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchAttributesAttributeCodeOptionsCode");
      }

      let pathParams = {
        'attribute_code': attributeCode,
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message', '_links'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rest/v1/attributes/{attribute_code}/options/{code}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postAttributesAttributeCodeOptions operation.
     * @callback module:api/AttributeOptionApi~postAttributesAttributeCodeOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new attribute option
     * This endpoint allows you to create a new attribute option.
     * @param {String} attributeCode Code of the attribute
     * @param {Object} opts Optional parameters
     * @param {module:model/PostAttributesAttributeCodeOptionsRequest} [body] 
     * @param {module:api/AttributeOptionApi~postAttributesAttributeCodeOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postAttributesAttributeCodeOptions(attributeCode, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'attributeCode' is set
      if (attributeCode === undefined || attributeCode === null) {
        throw new Error("Missing the required parameter 'attributeCode' when calling postAttributesAttributeCodeOptions");
      }

      let pathParams = {
        'attribute_code': attributeCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message', '_links'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rest/v1/attributes/{attribute_code}/options', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
