/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Catalogs from '../model/Catalogs';
import PostAppCatalog201Response from '../model/PostAppCatalog201Response';
import PostAppCatalogRequest from '../model/PostAppCatalogRequest';
import PostToken400Response from '../model/PostToken400Response';

/**
* Catalogs service.
* @module api/CatalogsApi
* @version 1.0.0
*/
export default class CatalogsApi {

    /**
    * Constructs a new CatalogsApi. 
    * @alias module:api/CatalogsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteAppCatalog operation.
     * @callback module:api/CatalogsApi~deleteAppCatalogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a catalog
     * This endpoint allows you to delete a catalog.
     * @param {String} id Catalog ID
     * @param {module:api/CatalogsApi~deleteAppCatalogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAppCatalog(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAppCatalog");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rest/v1/catalogs/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAppCatalog operation.
     * @callback module:api/CatalogsApi~getAppCatalogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostAppCatalog201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a catalog
     * This endpoint allows you to get the information about a catalog.
     * @param {String} id Catalog ID
     * @param {module:api/CatalogsApi~getAppCatalogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostAppCatalog201Response}
     */
    getAppCatalog(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAppCatalog");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message'];
      let returnType = PostAppCatalog201Response;
      return this.apiClient.callApi(
        '/api/rest/v1/catalogs/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAppCatalogs operation.
     * @callback module:api/CatalogsApi~getAppCatalogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Catalogs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of owned catalogs
     * This endpoint allows you to get the list of catalogs you owned.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href=\"/documentation/pagination.html#pagination\">Pagination</a> section
     * @param {Number} [limit = 100)] Number of results by page, see <a href=\"/documentation/pagination.html\">Pagination</a> section
     * @param {module:api/CatalogsApi~getAppCatalogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Catalogs}
     */
    getAppCatalogs(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message'];
      let returnType = Catalogs;
      return this.apiClient.callApi(
        '/api/rest/v1/catalogs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchAppCatalog operation.
     * @callback module:api/CatalogsApi~patchAppCatalogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostAppCatalog201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a catalog
     * This endpoint allows you to update a catalog.
     * @param {String} id Catalog ID
     * @param {Object} opts Optional parameters
     * @param {module:model/PostAppCatalogRequest} [body] 
     * @param {module:api/CatalogsApi~patchAppCatalogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostAppCatalog201Response}
     */
    patchAppCatalog(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchAppCatalog");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message'];
      let returnType = PostAppCatalog201Response;
      return this.apiClient.callApi(
        '/api/rest/v1/catalogs/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postAppCatalog operation.
     * @callback module:api/CatalogsApi~postAppCatalogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostAppCatalog201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new catalog
     * This endpoint allows you to create a new catalog.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostAppCatalogRequest} [body] 
     * @param {module:api/CatalogsApi~postAppCatalogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostAppCatalog201Response}
     */
    postAppCatalog(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message'];
      let returnType = PostAppCatalog201Response;
      return this.apiClient.callApi(
        '/api/rest/v1/catalogs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
