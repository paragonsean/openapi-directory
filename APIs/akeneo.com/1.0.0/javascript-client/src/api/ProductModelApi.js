/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PatchAssetCategories200Response from '../model/PatchAssetCategories200Response';
import PatchProductModelsRequest from '../model/PatchProductModelsRequest';
import PostProductModelsRequest from '../model/PostProductModelsRequest';
import PostToken400Response from '../model/PostToken400Response';
import ProductModels from '../model/ProductModels';

/**
* ProductModel service.
* @module api/ProductModelApi
* @version 1.0.0
*/
export default class ProductModelApi {

    /**
    * Constructs a new ProductModelApi. 
    * @alias module:api/ProductModelApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteProductModelsCode operation.
     * @callback module:api/ProductModelApi~deleteProductModelsCodeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a product model
     * This endpoint allows you to delete a given product model. All its children, product models and variant products, will be also deleted. In the Enterprise Edition, the permissions based on your connection user group are applied to the product model you try to delete.
     * @param {String} code Code of the resource
     * @param {module:api/ProductModelApi~deleteProductModelsCodeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProductModelsCode(code, callback) {
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling deleteProductModelsCode");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rest/v1/product-models/{code}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductModelDraftCode operation.
     * @callback module:api/ProductModelApi~getProductModelDraftCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostProductModelsRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a draft
     * This endpoint allows you to get the information about a given product model draft.
     * @param {String} code Code of the resource
     * @param {module:api/ProductModelApi~getProductModelDraftCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostProductModelsRequest}
     */
    getProductModelDraftCode(code, callback) {
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling getProductModelDraftCode");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message'];
      let returnType = PostProductModelsRequest;
      return this.apiClient.callApi(
        '/api/rest/v1/product-models/{code}/draft', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductModels operation.
     * @callback module:api/ProductModelApi~getProductModelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductModels} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of product models
     * This endpoint allows you to get a list of product models. Product models are paginated. In the Enterprise Edition, since the 2.0, permissions based on your user groups are applied to the set of products you request.
     * @param {Object} opts Optional parameters
     * @param {String} [search] Filter product models, for more details see the <a href=\"/documentation/filter.html\">Filters</a> section
     * @param {String} [scope] Filter product values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the <a href=\"/documentation/filter.html#via-channel\">Filter product values via channel</a> section
     * @param {String} [locales] Filter product values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the <a href=\"/documentation/filter.html#via-locale\">Filter product values via locale</a> section
     * @param {String} [attributes] Filter product values to only return those concerning the given attributes, for more details see the <a href=\"/documentation/filter.html#filter-product-values\">Filter on product values</a> section and the <a href=\"/documentation/filter.html#filter-on-product-model-properties\">Filter on product model properties</a> section
     * @param {module:model/String} [paginationType = 'page')] Pagination method type, see <a href=\"/documentation/pagination.html\">Pagination</a> section
     * @param {Number} [page = 1)] Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href=\"/documentation/pagination.html#pagination\">Pagination</a> section
     * @param {String} [searchAfter = 'cursor to the first page')] Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href=\"/documentation/pagination.html\">Pagination</a> section
     * @param {Number} [limit = 10)] Number of results by page, see <a href=\"/documentation/pagination.html\">Pagination</a> section
     * @param {Boolean} [withCount = false)] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     * @param {Boolean} [withQualityScores] Return product model quality scores in the response. <strong>(Only available since the 6.0 version)</strong>
     * @param {module:api/ProductModelApi~getProductModelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductModels}
     */
    getProductModels(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'search': opts['search'],
        'scope': opts['scope'],
        'locales': opts['locales'],
        'attributes': opts['attributes'],
        'pagination_type': opts['paginationType'],
        'page': opts['page'],
        'search_after': opts['searchAfter'],
        'limit': opts['limit'],
        'with_count': opts['withCount'],
        'with_quality_scores': opts['withQualityScores']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', '_embedded', '_links', 'code', 'message'];
      let returnType = ProductModels;
      return this.apiClient.callApi(
        '/api/rest/v1/product-models', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductModelsCode operation.
     * @callback module:api/ProductModelApi~getProductModelsCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostProductModelsRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a product model
     * This endpoint allows you to get the information about a given product model. In the Entreprise Edition, since the v2.0, permissions based on your user groups are applied to the product model you request.
     * @param {String} code Code of the resource
     * @param {Object} opts Optional parameters
     * @param {Boolean} [withQualityScores] Return product model quality scores in the response. <strong>(Only available since the 6.0 version)</strong>
     * @param {module:api/ProductModelApi~getProductModelsCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostProductModelsRequest}
     */
    getProductModelsCode(code, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling getProductModelsCode");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
        'with_quality_scores': opts['withQualityScores']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message'];
      let returnType = PostProductModelsRequest;
      return this.apiClient.callApi(
        '/api/rest/v1/product-models/{code}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchProductModels operation.
     * @callback module:api/ProductModelApi~patchProductModelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PatchAssetCategories200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update/create several product models
     * This endpoint allows you to update and/or create several product models at once. Learn more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no product models exists for the given code, it creates it. In the Enterprise Edition, since the v2.3, permissions based on your user groups are applied to the product models you try to update. It may result in the creation of drafts if you only have edit rights through the product model's categories.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchProductModelsRequest} [body] 
     * @param {module:api/ProductModelApi~patchProductModelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PatchAssetCategories200Response}
     */
    patchProductModels(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'x-example-1', 'x-example-2', 'x-example-3', 'code', 'message'];
      let returnType = PatchAssetCategories200Response;
      return this.apiClient.callApi(
        '/api/rest/v1/product-models', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchProductModelsCode operation.
     * @callback module:api/ProductModelApi~patchProductModelsCodeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update/create a product model
     * This endpoint allows you to update a given product model. Learn more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no product model exists for the given code, it creates it. In the Enterprise Edition PIM since the 2.3, permissions based on your user groups are applied to the product model you try to update. It may result in the creation of a draft if you only have edit rights through the product model's categories.
     * @param {String} code Code of the resource
     * @param {module:model/PostProductModelsRequest} body 
     * @param {module:api/ProductModelApi~patchProductModelsCodeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    patchProductModelsCode(code, body, callback) {
      let postBody = body;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling patchProductModelsCode");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchProductModelsCode");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message', '_links'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rest/v1/product-models/{code}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postProductModelProposal operation.
     * @callback module:api/ProductModelApi~postProductModelProposalCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit a draft for approval
     * This endpoint allows you to submit a product model draft for approval.
     * @param {String} code Code of the resource
     * @param {module:api/ProductModelApi~postProductModelProposalCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postProductModelProposal(code, callback) {
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling postProductModelProposal");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message', '_links'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rest/v1/product-models/{code}/proposal', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postProductModels operation.
     * @callback module:api/ProductModelApi~postProductModelsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new product model
     * This endpoint allows you to create a new product model. In the Enterprise Edition, since the v2.3, permissions based on your user groups are applied to the product model you try to create.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostProductModelsRequest} [body] 
     * @param {module:api/ProductModelApi~postProductModelsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postProductModels(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message', '_links'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rest/v1/product-models', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
