/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetMediaFilesCode200Response from '../model/GetMediaFilesCode200Response';
import MediaFiles from '../model/MediaFiles';
import PostMediaFilesRequest from '../model/PostMediaFilesRequest';
import PostToken400Response from '../model/PostToken400Response';

/**
* ProductMediaFile service.
* @module api/ProductMediaFileApi
* @version 1.0.0
*/
export default class ProductMediaFileApi {

    /**
    * Constructs a new ProductMediaFileApi. 
    * @alias module:api/ProductMediaFileApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getMediaFiles operation.
     * @callback module:api/ProductMediaFileApi~getMediaFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MediaFiles} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of product media files
     * This endpoint allows you to get a list of media files that are used as attribute values in products or product models.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href=\"/documentation/pagination.html#pagination\">Pagination</a> section
     * @param {Number} [limit = 10)] Number of results by page, see <a href=\"/documentation/pagination.html\">Pagination</a> section
     * @param {Boolean} [withCount = false)] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     * @param {module:api/ProductMediaFileApi~getMediaFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MediaFiles}
     */
    getMediaFiles(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'with_count': opts['withCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', '_embedded', '_links', 'current_page', 'code', 'message'];
      let returnType = MediaFiles;
      return this.apiClient.callApi(
        '/api/rest/v1/media-files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMediaFilesCode operation.
     * @callback module:api/ProductMediaFileApi~getMediaFilesCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMediaFilesCode200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a product media file
     * This endpoint allows you to get the information about a given media file that is used as an attribute value of a product or a product model.
     * @param {String} code Code of the resource
     * @param {module:api/ProductMediaFileApi~getMediaFilesCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMediaFilesCode200Response}
     */
    getMediaFilesCode(code, callback) {
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling getMediaFilesCode");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message'];
      let returnType = GetMediaFilesCode200Response;
      return this.apiClient.callApi(
        '/api/rest/v1/media-files/{code}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMediaFilesCodeDownload operation.
     * @callback module:api/ProductMediaFileApi~getMediaFilesCodeDownloadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download a product media file
     * This endpoint allows you to download a given media file that is used as an attribute value of a product or a product model.
     * @param {String} code Code of the resource
     * @param {module:api/ProductMediaFileApi~getMediaFilesCodeDownloadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMediaFilesCodeDownload(code, callback) {
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling getMediaFilesCodeDownload");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rest/v1/media-files/{code}/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postMediaFiles operation.
     * @callback module:api/ProductMediaFileApi~postMediaFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new product media file
     * This endpoint allows you to create a new media file and associate it to an attribute value of a given product or product model.
     * @param {String} contentType Equal to 'multipart/form-data', no other value allowed
     * @param {Object} opts Optional parameters
     * @param {module:model/PostMediaFilesRequest} [body] 
     * @param {module:api/ProductMediaFileApi~postMediaFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postMediaFiles(contentType, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling postMediaFiles");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message', '_links'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rest/v1/media-files', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
