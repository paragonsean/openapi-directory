/**
 * Akeneo PIM REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PatchProductsUuid200Response from '../model/PatchProductsUuid200Response';
import PatchProductsUuidRequest from '../model/PatchProductsUuidRequest';
import PostProductsUuidRequest from '../model/PostProductsUuidRequest';
import PostToken400Response from '../model/PostToken400Response';
import Products2 from '../model/Products2';

/**
* ProductUuid service.
* @module api/ProductUuidApi
* @version 1.0.0
*/
export default class ProductUuidApi {

    /**
    * Constructs a new ProductUuidApi. 
    * @alias module:api/ProductUuidApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteProductsUuidUuid operation.
     * @callback module:api/ProductUuidApi~deleteProductsUuidUuidCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a product
     * This endpoint allows you to delete a given product. In the Enterprise Edition, permissions based on your user groups are applied to the product you try to delete.
     * @param {String} uuid Uuid of the resource
     * @param {module:api/ProductUuidApi~deleteProductsUuidUuidCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProductsUuidUuid(uuid, callback) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling deleteProductsUuidUuid");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rest/v1/products-uuid/{uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDraftUuidUuid operation.
     * @callback module:api/ProductUuidApi~getDraftUuidUuidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostProductsUuidRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a draft
     * This endpoint allows you to get the information about a given draft.
     * @param {String} uuid Uuid of the resource
     * @param {module:api/ProductUuidApi~getDraftUuidUuidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostProductsUuidRequest}
     */
    getDraftUuidUuid(uuid, callback) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getDraftUuidUuid");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message'];
      let returnType = PostProductsUuidRequest;
      return this.apiClient.callApi(
        '/api/rest/v1/products-uuid/{uuid}/draft', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsUuid operation.
     * @callback module:api/ProductUuidApi~getProductsUuidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Products2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of products
     * This endpoint allows you to get a list of products. Products are paginated and they can be filtered. In the Enterprise Edition, permissions based on your user groups are applied to the set of products you request.
     * @param {Object} opts Optional parameters
     * @param {String} [search] Filter products, for more details see the <a href=\"/documentation/filter.html\">Filters</a> section
     * @param {String} [scope] Filter product values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the <a href=\"/documentation/filter.html#via-channel\">Filter product values via channel</a> section
     * @param {String} [locales] Filter product values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the <a href=\"/documentation/filter.html#via-locale\">Filter product values via locale</a> section
     * @param {String} [attributes] Filter product values to only return those concerning the given attributes, for more details see the <a href=\"/documentation/filter.html#filter-product-values\">Filter on product values</a> section
     * @param {module:model/String} [paginationType = 'page')] Pagination method type, see <a href=\"/documentation/pagination.html\">Pagination</a> section
     * @param {Number} [page = 1)] Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href=\"/documentation/pagination.html#pagination\">Pagination</a> section
     * @param {String} [searchAfter = 'cursor to the first page')] Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href=\"/documentation/pagination.html\">Pagination</a> section
     * @param {Number} [limit = 10)] Number of results by page, see <a href=\"/documentation/pagination.html\">Pagination</a> section
     * @param {Boolean} [withCount = false)] Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     * @param {Boolean} [withAttributeOptions = false)] Return labels of attribute options in the response. (Only available since the 5.0 version)
     * @param {Boolean} [withQualityScores = false)] Return product quality scores in the response. (Only available since the 5.0 version)
     * @param {Boolean} [withCompletenesses = false)] Return product completenesses in the response. (Only available since the 6.0 version)
     * @param {module:api/ProductUuidApi~getProductsUuidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Products2}
     */
    getProductsUuid(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'search': opts['search'],
        'scope': opts['scope'],
        'locales': opts['locales'],
        'attributes': opts['attributes'],
        'pagination_type': opts['paginationType'],
        'page': opts['page'],
        'search_after': opts['searchAfter'],
        'limit': opts['limit'],
        'with_count': opts['withCount'],
        'with_attribute_options': opts['withAttributeOptions'],
        'with_quality_scores': opts['withQualityScores'],
        'with_completenesses': opts['withCompletenesses']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message', '_links'];
      let returnType = Products2;
      return this.apiClient.callApi(
        '/api/rest/v1/products-uuid', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsUuidUuid operation.
     * @callback module:api/ProductUuidApi~getProductsUuidUuidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostProductsUuidRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a product
     * This endpoint allows you to get the information about a given product. In the Entreprise Edition, permissions based on your user groups are applied to the product you request.
     * @param {String} uuid Uuid of the resource
     * @param {Object} opts Optional parameters
     * @param {Boolean} [withAttributeOptions = false)] Return labels of attribute options in the response. (Only available since the 5.0 version)
     * @param {Boolean} [withQualityScores = false)] Return product quality scores in the response. (Only available since the 5.0 version)
     * @param {Boolean} [withCompletenesses = false)] Return product completenesses in the response. (Only available since the 6.0 version)
     * @param {module:api/ProductUuidApi~getProductsUuidUuidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostProductsUuidRequest}
     */
    getProductsUuidUuid(uuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getProductsUuidUuid");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
        'with_attribute_options': opts['withAttributeOptions'],
        'with_quality_scores': opts['withQualityScores'],
        'with_completenesses': opts['withCompletenesses']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message'];
      let returnType = PostProductsUuidRequest;
      return this.apiClient.callApi(
        '/api/rest/v1/products-uuid/{uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchProductsUuid operation.
     * @callback module:api/ProductUuidApi~patchProductsUuidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PatchProductsUuid200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update/create several products
     * This endpoint allows you to update and/or create several products at once. Learn more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no product exists for the given uuid, it creates it. In the Enterprise Edition, permissions based on your user groups are applied to the products you try to update. It may result in the creation of drafts if you only have edit rights through the product's categories.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchProductsUuidRequest} [body] 
     * @param {module:api/ProductUuidApi~patchProductsUuidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PatchProductsUuid200Response}
     */
    patchProductsUuid(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'x-example-1', 'x-example-2', 'x-example-3', 'code', 'message', '_links'];
      let returnType = PatchProductsUuid200Response;
      return this.apiClient.callApi(
        '/api/rest/v1/products-uuid', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchProductsUuidUuid operation.
     * @callback module:api/ProductUuidApi~patchProductsUuidUuidCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update/create a product
     * This endpoint allows you to update a given product. Learn more about <a href=\"/documentation/update.html#update-behavior\">Update behavior</a>. Note that if no product exists for the given uuid, it creates it. In the Entreprise Edition, permissions based on your user groups are applied to the product you try to update. It may result in the creation of a draft if you only have edit rights through the product's categories.
     * @param {String} uuid Uuid of the resource
     * @param {module:model/PostProductsUuidRequest} body 
     * @param {module:api/ProductUuidApi~patchProductsUuidUuidCallback} callback The callback function, accepting three arguments: error, data, response
     */
    patchProductsUuidUuid(uuid, body, callback) {
      let postBody = body;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling patchProductsUuidUuid");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchProductsUuidUuid");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message', '_links'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rest/v1/products-uuid/{uuid}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postProductsUuid operation.
     * @callback module:api/ProductUuidApi~postProductsUuidCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new product
     * This endpoint allows you to create a new product. In the Enterprise Edition, permissions based on your user groups are applied to the product you try to create. If no uuid is provided, the PIM will generate one for you.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostProductsUuidRequest} [body] 
     * @param {module:api/ProductUuidApi~postProductsUuidCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postProductsUuid(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message', '_links'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rest/v1/products-uuid', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postProposalUuid operation.
     * @callback module:api/ProductUuidApi~postProposalUuidCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit a draft for approval
     * This endpoint allows you to submit a draft for approval.
     * @param {String} uuid Uuid of the resource
     * @param {module:api/ProductUuidApi~postProposalUuidCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postProposalUuid(uuid, callback) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling postProposalUuid");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'code', 'message', '_links'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rest/v1/products-uuid/{uuid}/proposal', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
