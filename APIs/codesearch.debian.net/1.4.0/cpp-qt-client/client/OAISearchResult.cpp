/**
 * Debian Code Search
 * OpenAPI for https://codesearch.debian.net/
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: stapelberg@debian.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchResult::OAISearchResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchResult::OAISearchResult() {
    this->initializeModel();
}

OAISearchResult::~OAISearchResult() {}

void OAISearchResult::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_context_after_isSet = false;
    m_context_after_isValid = false;

    m_context_before_isSet = false;
    m_context_before_isValid = false;

    m_line_isSet = false;
    m_line_isValid = false;

    m_package_isSet = false;
    m_package_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;
}

void OAISearchResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchResult::fromJsonObject(QJsonObject json) {

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_context_after_isValid = ::OpenAPI::fromJsonValue(m_context_after, json[QString("context_after")]);
    m_context_after_isSet = !json[QString("context_after")].isNull() && m_context_after_isValid;

    m_context_before_isValid = ::OpenAPI::fromJsonValue(m_context_before, json[QString("context_before")]);
    m_context_before_isSet = !json[QString("context_before")].isNull() && m_context_before_isValid;

    m_line_isValid = ::OpenAPI::fromJsonValue(m_line, json[QString("line")]);
    m_line_isSet = !json[QString("line")].isNull() && m_line_isValid;

    m_package_isValid = ::OpenAPI::fromJsonValue(m_package, json[QString("package")]);
    m_package_isSet = !json[QString("package")].isNull() && m_package_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;
}

QString OAISearchResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchResult::asJsonObject() const {
    QJsonObject obj;
    if (m_context_isSet) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_context_after.size() > 0) {
        obj.insert(QString("context_after"), ::OpenAPI::toJsonValue(m_context_after));
    }
    if (m_context_before.size() > 0) {
        obj.insert(QString("context_before"), ::OpenAPI::toJsonValue(m_context_before));
    }
    if (m_line_isSet) {
        obj.insert(QString("line"), ::OpenAPI::toJsonValue(m_line));
    }
    if (m_package_isSet) {
        obj.insert(QString("package"), ::OpenAPI::toJsonValue(m_package));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    return obj;
}

QString OAISearchResult::getContext() const {
    return m_context;
}
void OAISearchResult::setContext(const QString &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAISearchResult::is_context_Set() const{
    return m_context_isSet;
}

bool OAISearchResult::is_context_Valid() const{
    return m_context_isValid;
}

QList<QString> OAISearchResult::getContextAfter() const {
    return m_context_after;
}
void OAISearchResult::setContextAfter(const QList<QString> &context_after) {
    m_context_after = context_after;
    m_context_after_isSet = true;
}

bool OAISearchResult::is_context_after_Set() const{
    return m_context_after_isSet;
}

bool OAISearchResult::is_context_after_Valid() const{
    return m_context_after_isValid;
}

QList<QString> OAISearchResult::getContextBefore() const {
    return m_context_before;
}
void OAISearchResult::setContextBefore(const QList<QString> &context_before) {
    m_context_before = context_before;
    m_context_before_isSet = true;
}

bool OAISearchResult::is_context_before_Set() const{
    return m_context_before_isSet;
}

bool OAISearchResult::is_context_before_Valid() const{
    return m_context_before_isValid;
}

qint32 OAISearchResult::getLine() const {
    return m_line;
}
void OAISearchResult::setLine(const qint32 &line) {
    m_line = line;
    m_line_isSet = true;
}

bool OAISearchResult::is_line_Set() const{
    return m_line_isSet;
}

bool OAISearchResult::is_line_Valid() const{
    return m_line_isValid;
}

QString OAISearchResult::getPackage() const {
    return m_package;
}
void OAISearchResult::setPackage(const QString &package) {
    m_package = package;
    m_package_isSet = true;
}

bool OAISearchResult::is_package_Set() const{
    return m_package_isSet;
}

bool OAISearchResult::is_package_Valid() const{
    return m_package_isValid;
}

QString OAISearchResult::getPath() const {
    return m_path;
}
void OAISearchResult::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAISearchResult::is_path_Set() const{
    return m_path_isSet;
}

bool OAISearchResult::is_path_Valid() const{
    return m_path_isValid;
}

bool OAISearchResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_after.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_before.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_context_isValid && m_line_isValid && m_package_isValid && m_path_isValid && true;
}

} // namespace OpenAPI
