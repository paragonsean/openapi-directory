/**
 * Debian Code Search
 * OpenAPI for https://codesearch.debian.net/
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: stapelberg@debian.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPackageSearchResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPackageSearchResult::OAIPackageSearchResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPackageSearchResult::OAIPackageSearchResult() {
    this->initializeModel();
}

OAIPackageSearchResult::~OAIPackageSearchResult() {}

void OAIPackageSearchResult::initializeModel() {

    m_package_isSet = false;
    m_package_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;
}

void OAIPackageSearchResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPackageSearchResult::fromJsonObject(QJsonObject json) {

    m_package_isValid = ::OpenAPI::fromJsonValue(m_package, json[QString("package")]);
    m_package_isSet = !json[QString("package")].isNull() && m_package_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;
}

QString OAIPackageSearchResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPackageSearchResult::asJsonObject() const {
    QJsonObject obj;
    if (m_package_isSet) {
        obj.insert(QString("package"), ::OpenAPI::toJsonValue(m_package));
    }
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    return obj;
}

QString OAIPackageSearchResult::getPackage() const {
    return m_package;
}
void OAIPackageSearchResult::setPackage(const QString &package) {
    m_package = package;
    m_package_isSet = true;
}

bool OAIPackageSearchResult::is_package_Set() const{
    return m_package_isSet;
}

bool OAIPackageSearchResult::is_package_Valid() const{
    return m_package_isValid;
}

QList<OAISearchResult> OAIPackageSearchResult::getResults() const {
    return m_results;
}
void OAIPackageSearchResult::setResults(const QList<OAISearchResult> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAIPackageSearchResult::is_results_Set() const{
    return m_results_isSet;
}

bool OAIPackageSearchResult::is_results_Valid() const{
    return m_results_isValid;
}

bool OAIPackageSearchResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_package_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPackageSearchResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_package_isValid && m_results_isValid && true;
}

} // namespace OpenAPI
