# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context: str=None, context_after: List[str]=None, context_before: List[str]=None, line: int=None, package: str=None, path: str=None):
        """SearchResult - a model defined in OpenAPI

        :param context: The context of this SearchResult.
        :param context_after: The context_after of this SearchResult.
        :param context_before: The context_before of this SearchResult.
        :param line: The line of this SearchResult.
        :param package: The package of this SearchResult.
        :param path: The path of this SearchResult.
        """
        self.openapi_types = {
            'context': str,
            'context_after': List[str],
            'context_before': List[str],
            'line': int,
            'package': str,
            'path': str
        }

        self.attribute_map = {
            'context': 'context',
            'context_after': 'context_after',
            'context_before': 'context_before',
            'line': 'line',
            'package': 'package',
            'path': 'path'
        }

        self._context = context
        self._context_after = context_after
        self._context_before = context_before
        self._line = line
        self._package = package
        self._path = path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchResult of this SearchResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self):
        """Gets the context of this SearchResult.

        The full line containing the search result.

        :return: The context of this SearchResult.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this SearchResult.

        The full line containing the search result.

        :param context: The context of this SearchResult.
        :type context: str
        """
        if context is None:
            raise ValueError("Invalid value for `context`, must not be `None`")

        self._context = context

    @property
    def context_after(self):
        """Gets the context_after of this SearchResult.

        Up to 2 full lines after the search result (see `context`).

        :return: The context_after of this SearchResult.
        :rtype: List[str]
        """
        return self._context_after

    @context_after.setter
    def context_after(self, context_after):
        """Sets the context_after of this SearchResult.

        Up to 2 full lines after the search result (see `context`).

        :param context_after: The context_after of this SearchResult.
        :type context_after: List[str]
        """

        self._context_after = context_after

    @property
    def context_before(self):
        """Gets the context_before of this SearchResult.

        Up to 2 full lines before the search result (see `context`).

        :return: The context_before of this SearchResult.
        :rtype: List[str]
        """
        return self._context_before

    @context_before.setter
    def context_before(self, context_before):
        """Sets the context_before of this SearchResult.

        Up to 2 full lines before the search result (see `context`).

        :param context_before: The context_before of this SearchResult.
        :type context_before: List[str]
        """

        self._context_before = context_before

    @property
    def line(self):
        """Gets the line of this SearchResult.

        Line number containing the search result.

        :return: The line of this SearchResult.
        :rtype: int
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this SearchResult.

        Line number containing the search result.

        :param line: The line of this SearchResult.
        :type line: int
        """
        if line is None:
            raise ValueError("Invalid value for `line`, must not be `None`")

        self._line = line

    @property
    def package(self):
        """Gets the package of this SearchResult.

        The Debian source package containing this search result, including the full Debian version number.

        :return: The package of this SearchResult.
        :rtype: str
        """
        return self._package

    @package.setter
    def package(self, package):
        """Sets the package of this SearchResult.

        The Debian source package containing this search result, including the full Debian version number.

        :param package: The package of this SearchResult.
        :type package: str
        """
        if package is None:
            raise ValueError("Invalid value for `package`, must not be `None`")

        self._package = package

    @property
    def path(self):
        """Gets the path of this SearchResult.

        Path to the file containing the this search result, starting with `package`.

        :return: The path of this SearchResult.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this SearchResult.

        Path to the file containing the this search result, starting with `package`.

        :param path: The path of this SearchResult.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path
