# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.search_result import SearchResult
from openapi_server import util


class PackageSearchResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, package: str=None, results: List[SearchResult]=None):
        """PackageSearchResult - a model defined in OpenAPI

        :param package: The package of this PackageSearchResult.
        :param results: The results of this PackageSearchResult.
        """
        self.openapi_types = {
            'package': str,
            'results': List[SearchResult]
        }

        self.attribute_map = {
            'package': 'package',
            'results': 'results'
        }

        self._package = package
        self._results = results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PackageSearchResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PackageSearchResult of this PackageSearchResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def package(self):
        """Gets the package of this PackageSearchResult.

        The Debian source package for which up to 2 search results have been aggregated in `results`.

        :return: The package of this PackageSearchResult.
        :rtype: str
        """
        return self._package

    @package.setter
    def package(self, package):
        """Sets the package of this PackageSearchResult.

        The Debian source package for which up to 2 search results have been aggregated in `results`.

        :param package: The package of this PackageSearchResult.
        :type package: str
        """
        if package is None:
            raise ValueError("Invalid value for `package`, must not be `None`")

        self._package = package

    @property
    def results(self):
        """Gets the results of this PackageSearchResult.


        :return: The results of this PackageSearchResult.
        :rtype: List[SearchResult]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this PackageSearchResult.


        :param results: The results of this PackageSearchResult.
        :type results: List[SearchResult]
        """
        if results is None:
            raise ValueError("Invalid value for `results`, must not be `None`")

        self._results = results
