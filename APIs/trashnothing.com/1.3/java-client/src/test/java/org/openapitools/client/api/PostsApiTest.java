/*
 * trash nothing
 * This is the REST API for [trashnothing.com](https://trashnothing.com).  To learn more about the API or to register your app for use with the API visit the [trash nothing Developer page](https://trashnothing.com/developer).  NOTE: All date-time values are [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) and are in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) (eg. 2019-02-03T01:23:53). 
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.GetAllPosts200Response;
import org.openapitools.client.model.GetAllPostsChanges200Response;
import org.openapitools.client.model.GetPostAndRelatedData200Response;
import org.openapitools.client.model.GetPosts200Response;
import org.openapitools.client.model.GetPostsByIds200Response;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Post;
import org.openapitools.client.model.SearchPosts200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PostsApi
 */
@Disabled
public class PostsApiTest {

    private final PostsApi api = new PostsApi();

    /**
     * List all posts
     *
     * This endpoint provides an easy way to get a feed of all the publicly published posts on trash nothing. It provides access to all publicly published offer and wanted posts from the last 30 days. The posts are sorted by date (newest first). &lt;br /&gt;&lt;br /&gt; There are fewer options for filtering, sorting and searching posts with this endpoint but there is no 1,000 post limit and posts that are crossposted to multiple groups are not merged together in the response.  In most cases, crossposted posts are easy to detect because they have the same user_id, title and content. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllPostsTest() throws ApiException {
        String types = null;
        OffsetDateTime dateMin = null;
        OffsetDateTime dateMax = null;
        Integer perPage = null;
        Integer page = null;
        BigDecimal devicePixelRatio = null;
        GetAllPosts200Response response = api.getAllPosts(types, dateMin, dateMax, perPage, page, devicePixelRatio);
        // TODO: test validations
    }

    /**
     * List all post changes
     *
     * This endpoint provides an easy way to get a feed of all the changes that have been made to publicly published posts on trash nothing.  Similar to the /posts/all endpoint, only data from the last 30 days is available and the changes are sorted by date (newest first).  Every change includes the date of the change, the post_id of the post that was changed and the type of change. &lt;br /&gt;&lt;br /&gt; The different types of changes that are returned are listed below. &lt;br /&gt;&lt;br /&gt; - deleted&lt;br /&gt; - undeleted&lt;br /&gt; - satisfied&lt;br /&gt; - promised&lt;br /&gt; - unpromised&lt;br /&gt; - withdrawn&lt;br /&gt; - edited&lt;br /&gt; &lt;br /&gt; For edited changes, clients can use the retrieve post API endpoint to get the edits that have been made to the post. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllPostsChangesTest() throws ApiException {
        OffsetDateTime dateMin = null;
        OffsetDateTime dateMax = null;
        Integer perPage = null;
        Integer page = null;
        GetAllPostsChanges200Response response = api.getAllPostsChanges(dateMin, dateMax, perPage, page);
        // TODO: test validations
    }

    /**
     * Retrieve a post
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPostTest() throws ApiException {
        String postId = null;
        Post response = api.getPost(postId);
        // TODO: test validations
    }

    /**
     * Retrieve post display data
     *
     * Retrieve a post and other data related to the post that is useful for displaying the post such as data about the user who posted the post and the groups the post was posted on. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPostAndRelatedDataTest() throws ApiException {
        String postId = null;
        GetPostAndRelatedData200Response response = api.getPostAndRelatedData(postId);
        // TODO: test validations
    }

    /**
     * List posts
     *
     * NOTE: When paging through the posts returned by this endpoint, there will be at most 1,000 posts that can be returned (eg. 50 pages worth of posts with the default per_page value of 20).  In areas where there are more than 1,000 posts, clients can use more specific query parameters to adjust which posts are returned. NOTE: Passing the latitude, longitude and radius parameters filters all posts by their location and so these parameters will temporarily override the current users&#39; location preferences. When latitude, longitude and radius are not specified, public posts will be filtered by the current users&#39; location preferences. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPostsTest() throws ApiException {
        String types = null;
        String sources = null;
        String sortBy = null;
        String groupIds = null;
        Integer perPage = null;
        Integer page = null;
        BigDecimal devicePixelRatio = null;
        BigDecimal latitude = null;
        BigDecimal longitude = null;
        BigDecimal radius = null;
        OffsetDateTime dateMin = null;
        OffsetDateTime dateMax = null;
        String outcomes = null;
        String userState = null;
        Integer includeReposts = null;
        GetPosts200Response response = api.getPosts(types, sources, sortBy, groupIds, perPage, page, devicePixelRatio, latitude, longitude, radius, dateMin, dateMax, outcomes, userState, includeReposts);
        // TODO: test validations
    }

    /**
     * Retrieve multiple posts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPostsByIdsTest() throws ApiException {
        String postIds = null;
        GetPostsByIds200Response response = api.getPostsByIds(postIds);
        // TODO: test validations
    }

    /**
     * Search posts
     *
     * Searching posts takes the same arguments as listing posts except for the addition of the search and sort_by parameters. NOTE: When paging through the posts returned by this endpoint, there will be at most 1,000 posts that can be returned (eg. 50 pages worth of posts with the default per_page value of 20).  In areas where there are more than 1,000 posts, clients can use more specific query parameters to adjust which posts are returned. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchPostsTest() throws ApiException {
        String search = null;
        String types = null;
        String sources = null;
        String sortBy = null;
        String groupIds = null;
        Integer perPage = null;
        Integer page = null;
        BigDecimal devicePixelRatio = null;
        BigDecimal latitude = null;
        BigDecimal longitude = null;
        BigDecimal radius = null;
        OffsetDateTime dateMin = null;
        OffsetDateTime dateMax = null;
        String outcomes = null;
        String userState = null;
        Integer includeReposts = null;
        SearchPosts200Response response = api.searchPosts(search, types, sources, sortBy, groupIds, perPage, page, devicePixelRatio, latitude, longitude, radius, dateMin, dateMax, outcomes, userState, includeReposts);
        // TODO: test validations
    }

}
