/*
 * trash nothing
 * This is the REST API for [trashnothing.com](https://trashnothing.com).  To learn more about the API or to register your app for use with the API visit the [trash nothing Developer page](https://trashnothing.com/developer).  NOTE: All date-time values are [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) and are in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) (eg. 2019-02-03T01:23:53). 
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.GetPosts200Response;
import java.time.OffsetDateTime;
import org.openapitools.client.model.SearchPosts200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getUserPosts
     * @param userId The user ID of the user whose posts will be retrieved. Using &#39;me&#39; as the user_id will return the posts for the current user.  (required)
     * @param types A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin  (required)
     * @param sources A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or all the open archive groups the requested user has posted to if latitude, longitude and radius aren&#39;t passed). &lt;br /&gt;&lt;br /&gt; NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required.  (required)
     * @param sortBy How to sort the posts that are returned.  One of: date, active, distance &lt;br /&gt;&lt;br /&gt; Date sorting will sort posts from newest to oldest. Active sorting will sort active posts before satisfied, withdrawn and expired posts and then sort by date. Distance sorting will sort the closest posts first.  (optional, default to date)
     * @param groupIds A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the &#39;groups&#39; source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). &lt;br /&gt;&lt;br /&gt; NOTE: For requests using an api key instead of oauth, this field is required if the &#39;groups&#39; source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). &lt;br /&gt;&lt;br/&gt; *To determine which group IDs were used and which were discarded, use the group_ids field in the response.  (optional, default to The group IDs of every group the current user is a member of.)
     * @param perPage The number of posts to return per page (must be &gt;&#x3D; 1 and &lt;&#x3D; 100). (optional, default to 20)
     * @param page The page of posts to return. (optional, default to 1)
     * @param devicePixelRatio Client device pixel ratio used to determine thumbnail size (default 1.0). (optional, default to 1)
     * @param latitude The latitude of a point around which to return posts.  (optional)
     * @param longitude The longitude of a point around which to return posts.  (optional)
     * @param radius The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned.  (optional)
     * @param dateMin Only posts newer than or equal to this UTC date and time will be returned.  (optional)
     * @param dateMax Only posts older than this UTC date and time will be returned. (optional)
     * @param outcomes A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn &lt;br /&gt;&lt;br /&gt; There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn and not expired are returned. If set to &#39;all&#39;, all posts will be returned no matter what outcome the posts have. If set to &#39;not-promised&#39;, only posts that are not satisfied ant not withdrawn and not expired and not promised are returned.  (optional, default to )
     * @param includeReposts If set to 1 (the default), posts that are reposts will be included. If set to 0, reposts will be excluded. See the repost_count field of post objects for details about how reposts are identified.  (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The posts and paging data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserPostsCall(String userId, String types, String sources, String sortBy, String groupIds, Integer perPage, Integer page, BigDecimal devicePixelRatio, BigDecimal latitude, BigDecimal longitude, BigDecimal radius, OffsetDateTime dateMin, OffsetDateTime dateMax, String outcomes, Integer includeReposts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/posts"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (types != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("types", types));
        }

        if (sources != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sources", sources));
        }

        if (groupIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_ids", groupIds));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (devicePixelRatio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_pixel_ratio", devicePixelRatio));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (dateMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_min", dateMin));
        }

        if (dateMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_max", dateMax));
        }

        if (outcomes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outcomes", outcomes));
        }

        if (includeReposts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_reposts", includeReposts));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserPostsValidateBeforeCall(String userId, String types, String sources, String sortBy, String groupIds, Integer perPage, Integer page, BigDecimal devicePixelRatio, BigDecimal latitude, BigDecimal longitude, BigDecimal radius, OffsetDateTime dateMin, OffsetDateTime dateMax, String outcomes, Integer includeReposts, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserPosts(Async)");
        }

        // verify the required parameter 'types' is set
        if (types == null) {
            throw new ApiException("Missing the required parameter 'types' when calling getUserPosts(Async)");
        }

        // verify the required parameter 'sources' is set
        if (sources == null) {
            throw new ApiException("Missing the required parameter 'sources' when calling getUserPosts(Async)");
        }

        return getUserPostsCall(userId, types, sources, sortBy, groupIds, perPage, page, devicePixelRatio, latitude, longitude, radius, dateMin, dateMax, outcomes, includeReposts, _callback);

    }

    /**
     * List posts by a user
     * 
     * @param userId The user ID of the user whose posts will be retrieved. Using &#39;me&#39; as the user_id will return the posts for the current user.  (required)
     * @param types A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin  (required)
     * @param sources A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or all the open archive groups the requested user has posted to if latitude, longitude and radius aren&#39;t passed). &lt;br /&gt;&lt;br /&gt; NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required.  (required)
     * @param sortBy How to sort the posts that are returned.  One of: date, active, distance &lt;br /&gt;&lt;br /&gt; Date sorting will sort posts from newest to oldest. Active sorting will sort active posts before satisfied, withdrawn and expired posts and then sort by date. Distance sorting will sort the closest posts first.  (optional, default to date)
     * @param groupIds A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the &#39;groups&#39; source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). &lt;br /&gt;&lt;br /&gt; NOTE: For requests using an api key instead of oauth, this field is required if the &#39;groups&#39; source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). &lt;br /&gt;&lt;br/&gt; *To determine which group IDs were used and which were discarded, use the group_ids field in the response.  (optional, default to The group IDs of every group the current user is a member of.)
     * @param perPage The number of posts to return per page (must be &gt;&#x3D; 1 and &lt;&#x3D; 100). (optional, default to 20)
     * @param page The page of posts to return. (optional, default to 1)
     * @param devicePixelRatio Client device pixel ratio used to determine thumbnail size (default 1.0). (optional, default to 1)
     * @param latitude The latitude of a point around which to return posts.  (optional)
     * @param longitude The longitude of a point around which to return posts.  (optional)
     * @param radius The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned.  (optional)
     * @param dateMin Only posts newer than or equal to this UTC date and time will be returned.  (optional)
     * @param dateMax Only posts older than this UTC date and time will be returned. (optional)
     * @param outcomes A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn &lt;br /&gt;&lt;br /&gt; There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn and not expired are returned. If set to &#39;all&#39;, all posts will be returned no matter what outcome the posts have. If set to &#39;not-promised&#39;, only posts that are not satisfied ant not withdrawn and not expired and not promised are returned.  (optional, default to )
     * @param includeReposts If set to 1 (the default), posts that are reposts will be included. If set to 0, reposts will be excluded. See the repost_count field of post objects for details about how reposts are identified.  (optional, default to 1)
     * @return GetPosts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The posts and paging data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public GetPosts200Response getUserPosts(String userId, String types, String sources, String sortBy, String groupIds, Integer perPage, Integer page, BigDecimal devicePixelRatio, BigDecimal latitude, BigDecimal longitude, BigDecimal radius, OffsetDateTime dateMin, OffsetDateTime dateMax, String outcomes, Integer includeReposts) throws ApiException {
        ApiResponse<GetPosts200Response> localVarResp = getUserPostsWithHttpInfo(userId, types, sources, sortBy, groupIds, perPage, page, devicePixelRatio, latitude, longitude, radius, dateMin, dateMax, outcomes, includeReposts);
        return localVarResp.getData();
    }

    /**
     * List posts by a user
     * 
     * @param userId The user ID of the user whose posts will be retrieved. Using &#39;me&#39; as the user_id will return the posts for the current user.  (required)
     * @param types A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin  (required)
     * @param sources A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or all the open archive groups the requested user has posted to if latitude, longitude and radius aren&#39;t passed). &lt;br /&gt;&lt;br /&gt; NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required.  (required)
     * @param sortBy How to sort the posts that are returned.  One of: date, active, distance &lt;br /&gt;&lt;br /&gt; Date sorting will sort posts from newest to oldest. Active sorting will sort active posts before satisfied, withdrawn and expired posts and then sort by date. Distance sorting will sort the closest posts first.  (optional, default to date)
     * @param groupIds A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the &#39;groups&#39; source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). &lt;br /&gt;&lt;br /&gt; NOTE: For requests using an api key instead of oauth, this field is required if the &#39;groups&#39; source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). &lt;br /&gt;&lt;br/&gt; *To determine which group IDs were used and which were discarded, use the group_ids field in the response.  (optional, default to The group IDs of every group the current user is a member of.)
     * @param perPage The number of posts to return per page (must be &gt;&#x3D; 1 and &lt;&#x3D; 100). (optional, default to 20)
     * @param page The page of posts to return. (optional, default to 1)
     * @param devicePixelRatio Client device pixel ratio used to determine thumbnail size (default 1.0). (optional, default to 1)
     * @param latitude The latitude of a point around which to return posts.  (optional)
     * @param longitude The longitude of a point around which to return posts.  (optional)
     * @param radius The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned.  (optional)
     * @param dateMin Only posts newer than or equal to this UTC date and time will be returned.  (optional)
     * @param dateMax Only posts older than this UTC date and time will be returned. (optional)
     * @param outcomes A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn &lt;br /&gt;&lt;br /&gt; There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn and not expired are returned. If set to &#39;all&#39;, all posts will be returned no matter what outcome the posts have. If set to &#39;not-promised&#39;, only posts that are not satisfied ant not withdrawn and not expired and not promised are returned.  (optional, default to )
     * @param includeReposts If set to 1 (the default), posts that are reposts will be included. If set to 0, reposts will be excluded. See the repost_count field of post objects for details about how reposts are identified.  (optional, default to 1)
     * @return ApiResponse&lt;GetPosts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The posts and paging data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPosts200Response> getUserPostsWithHttpInfo(String userId, String types, String sources, String sortBy, String groupIds, Integer perPage, Integer page, BigDecimal devicePixelRatio, BigDecimal latitude, BigDecimal longitude, BigDecimal radius, OffsetDateTime dateMin, OffsetDateTime dateMax, String outcomes, Integer includeReposts) throws ApiException {
        okhttp3.Call localVarCall = getUserPostsValidateBeforeCall(userId, types, sources, sortBy, groupIds, perPage, page, devicePixelRatio, latitude, longitude, radius, dateMin, dateMax, outcomes, includeReposts, null);
        Type localVarReturnType = new TypeToken<GetPosts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List posts by a user (asynchronously)
     * 
     * @param userId The user ID of the user whose posts will be retrieved. Using &#39;me&#39; as the user_id will return the posts for the current user.  (required)
     * @param types A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin  (required)
     * @param sources A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or all the open archive groups the requested user has posted to if latitude, longitude and radius aren&#39;t passed). &lt;br /&gt;&lt;br /&gt; NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required.  (required)
     * @param sortBy How to sort the posts that are returned.  One of: date, active, distance &lt;br /&gt;&lt;br /&gt; Date sorting will sort posts from newest to oldest. Active sorting will sort active posts before satisfied, withdrawn and expired posts and then sort by date. Distance sorting will sort the closest posts first.  (optional, default to date)
     * @param groupIds A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the &#39;groups&#39; source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). &lt;br /&gt;&lt;br /&gt; NOTE: For requests using an api key instead of oauth, this field is required if the &#39;groups&#39; source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). &lt;br /&gt;&lt;br/&gt; *To determine which group IDs were used and which were discarded, use the group_ids field in the response.  (optional, default to The group IDs of every group the current user is a member of.)
     * @param perPage The number of posts to return per page (must be &gt;&#x3D; 1 and &lt;&#x3D; 100). (optional, default to 20)
     * @param page The page of posts to return. (optional, default to 1)
     * @param devicePixelRatio Client device pixel ratio used to determine thumbnail size (default 1.0). (optional, default to 1)
     * @param latitude The latitude of a point around which to return posts.  (optional)
     * @param longitude The longitude of a point around which to return posts.  (optional)
     * @param radius The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned.  (optional)
     * @param dateMin Only posts newer than or equal to this UTC date and time will be returned.  (optional)
     * @param dateMax Only posts older than this UTC date and time will be returned. (optional)
     * @param outcomes A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn &lt;br /&gt;&lt;br /&gt; There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn and not expired are returned. If set to &#39;all&#39;, all posts will be returned no matter what outcome the posts have. If set to &#39;not-promised&#39;, only posts that are not satisfied ant not withdrawn and not expired and not promised are returned.  (optional, default to )
     * @param includeReposts If set to 1 (the default), posts that are reposts will be included. If set to 0, reposts will be excluded. See the repost_count field of post objects for details about how reposts are identified.  (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The posts and paging data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserPostsAsync(String userId, String types, String sources, String sortBy, String groupIds, Integer perPage, Integer page, BigDecimal devicePixelRatio, BigDecimal latitude, BigDecimal longitude, BigDecimal radius, OffsetDateTime dateMin, OffsetDateTime dateMax, String outcomes, Integer includeReposts, final ApiCallback<GetPosts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserPostsValidateBeforeCall(userId, types, sources, sortBy, groupIds, perPage, page, devicePixelRatio, latitude, longitude, radius, dateMin, dateMax, outcomes, includeReposts, _callback);
        Type localVarReturnType = new TypeToken<GetPosts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchUserPosts
     * @param userId The user ID of the user whose posts will be retrieved. Using &#39;me&#39; as the user_id will return the posts for the current user.  (required)
     * @param search The search query used to find posts. (required)
     * @param types A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin  (required)
     * @param sources A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or all the open archive groups the requested user has posted to if latitude, longitude and radius aren&#39;t passed). &lt;br /&gt;&lt;br /&gt; NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required.  (required)
     * @param sortBy How to sort the posts that are returned.  One of: relevance, date, active, distance &lt;br /&gt;&lt;br /&gt; Relevance sorting will sort the posts that best match the search query first. Date sorting will sort posts from newest to oldest. Active sorting will sort active posts before satisfied, withdrawn and expired posts and then sort by date. Distance sorting will sort the closest posts first.  (optional, default to relevance)
     * @param groupIds A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the &#39;groups&#39; source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). &lt;br /&gt;&lt;br /&gt; NOTE: For requests using an api key instead of oauth, this field is required if the &#39;groups&#39; source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). &lt;br /&gt;&lt;br/&gt; *To determine which group IDs were used and which were discarded, use the group_ids field in the response.  (optional, default to The group IDs of every group the current user is a member of.)
     * @param perPage The number of posts to return per page (must be &gt;&#x3D; 1 and &lt;&#x3D; 100). (optional, default to 20)
     * @param page The page of posts to return. (optional, default to 1)
     * @param devicePixelRatio Client device pixel ratio used to determine thumbnail size (default 1.0). (optional, default to 1)
     * @param latitude The latitude of a point around which to return posts.  (optional)
     * @param longitude The longitude of a point around which to return posts.  (optional)
     * @param radius The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned.  (optional)
     * @param dateMin Only posts newer than or equal to this UTC date and time will be returned.  (optional)
     * @param dateMax Only posts older than this UTC date and time will be returned. (optional)
     * @param outcomes A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn &lt;br /&gt;&lt;br /&gt; There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn and not expired are returned. If set to &#39;all&#39;, all posts will be returned no matter what outcome the posts have. If set to &#39;not-promised&#39;, only posts that are not satisfied ant not withdrawn and not expired and not promised are returned.  (optional, default to )
     * @param includeReposts If set to 1 (the default), posts that are reposts will be included. If set to 0, reposts will be excluded. See the repost_count field of post objects for details about how reposts are identified.  (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The posts and paging data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchUserPostsCall(String userId, String search, String types, String sources, String sortBy, String groupIds, Integer perPage, Integer page, BigDecimal devicePixelRatio, BigDecimal latitude, BigDecimal longitude, BigDecimal radius, OffsetDateTime dateMin, OffsetDateTime dateMax, String outcomes, Integer includeReposts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/posts/search"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (types != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("types", types));
        }

        if (sources != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sources", sources));
        }

        if (groupIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_ids", groupIds));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (devicePixelRatio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_pixel_ratio", devicePixelRatio));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (dateMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_min", dateMin));
        }

        if (dateMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_max", dateMax));
        }

        if (outcomes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outcomes", outcomes));
        }

        if (includeReposts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_reposts", includeReposts));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchUserPostsValidateBeforeCall(String userId, String search, String types, String sources, String sortBy, String groupIds, Integer perPage, Integer page, BigDecimal devicePixelRatio, BigDecimal latitude, BigDecimal longitude, BigDecimal radius, OffsetDateTime dateMin, OffsetDateTime dateMax, String outcomes, Integer includeReposts, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling searchUserPosts(Async)");
        }

        // verify the required parameter 'search' is set
        if (search == null) {
            throw new ApiException("Missing the required parameter 'search' when calling searchUserPosts(Async)");
        }

        // verify the required parameter 'types' is set
        if (types == null) {
            throw new ApiException("Missing the required parameter 'types' when calling searchUserPosts(Async)");
        }

        // verify the required parameter 'sources' is set
        if (sources == null) {
            throw new ApiException("Missing the required parameter 'sources' when calling searchUserPosts(Async)");
        }

        return searchUserPostsCall(userId, search, types, sources, sortBy, groupIds, perPage, page, devicePixelRatio, latitude, longitude, radius, dateMin, dateMax, outcomes, includeReposts, _callback);

    }

    /**
     * Search posts by a user
     * Searching posts takes the same arguments as listing posts except for the addition of the search and sort_by parameters. 
     * @param userId The user ID of the user whose posts will be retrieved. Using &#39;me&#39; as the user_id will return the posts for the current user.  (required)
     * @param search The search query used to find posts. (required)
     * @param types A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin  (required)
     * @param sources A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or all the open archive groups the requested user has posted to if latitude, longitude and radius aren&#39;t passed). &lt;br /&gt;&lt;br /&gt; NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required.  (required)
     * @param sortBy How to sort the posts that are returned.  One of: relevance, date, active, distance &lt;br /&gt;&lt;br /&gt; Relevance sorting will sort the posts that best match the search query first. Date sorting will sort posts from newest to oldest. Active sorting will sort active posts before satisfied, withdrawn and expired posts and then sort by date. Distance sorting will sort the closest posts first.  (optional, default to relevance)
     * @param groupIds A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the &#39;groups&#39; source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). &lt;br /&gt;&lt;br /&gt; NOTE: For requests using an api key instead of oauth, this field is required if the &#39;groups&#39; source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). &lt;br /&gt;&lt;br/&gt; *To determine which group IDs were used and which were discarded, use the group_ids field in the response.  (optional, default to The group IDs of every group the current user is a member of.)
     * @param perPage The number of posts to return per page (must be &gt;&#x3D; 1 and &lt;&#x3D; 100). (optional, default to 20)
     * @param page The page of posts to return. (optional, default to 1)
     * @param devicePixelRatio Client device pixel ratio used to determine thumbnail size (default 1.0). (optional, default to 1)
     * @param latitude The latitude of a point around which to return posts.  (optional)
     * @param longitude The longitude of a point around which to return posts.  (optional)
     * @param radius The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned.  (optional)
     * @param dateMin Only posts newer than or equal to this UTC date and time will be returned.  (optional)
     * @param dateMax Only posts older than this UTC date and time will be returned. (optional)
     * @param outcomes A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn &lt;br /&gt;&lt;br /&gt; There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn and not expired are returned. If set to &#39;all&#39;, all posts will be returned no matter what outcome the posts have. If set to &#39;not-promised&#39;, only posts that are not satisfied ant not withdrawn and not expired and not promised are returned.  (optional, default to )
     * @param includeReposts If set to 1 (the default), posts that are reposts will be included. If set to 0, reposts will be excluded. See the repost_count field of post objects for details about how reposts are identified.  (optional, default to 1)
     * @return SearchPosts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The posts and paging data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public SearchPosts200Response searchUserPosts(String userId, String search, String types, String sources, String sortBy, String groupIds, Integer perPage, Integer page, BigDecimal devicePixelRatio, BigDecimal latitude, BigDecimal longitude, BigDecimal radius, OffsetDateTime dateMin, OffsetDateTime dateMax, String outcomes, Integer includeReposts) throws ApiException {
        ApiResponse<SearchPosts200Response> localVarResp = searchUserPostsWithHttpInfo(userId, search, types, sources, sortBy, groupIds, perPage, page, devicePixelRatio, latitude, longitude, radius, dateMin, dateMax, outcomes, includeReposts);
        return localVarResp.getData();
    }

    /**
     * Search posts by a user
     * Searching posts takes the same arguments as listing posts except for the addition of the search and sort_by parameters. 
     * @param userId The user ID of the user whose posts will be retrieved. Using &#39;me&#39; as the user_id will return the posts for the current user.  (required)
     * @param search The search query used to find posts. (required)
     * @param types A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin  (required)
     * @param sources A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or all the open archive groups the requested user has posted to if latitude, longitude and radius aren&#39;t passed). &lt;br /&gt;&lt;br /&gt; NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required.  (required)
     * @param sortBy How to sort the posts that are returned.  One of: relevance, date, active, distance &lt;br /&gt;&lt;br /&gt; Relevance sorting will sort the posts that best match the search query first. Date sorting will sort posts from newest to oldest. Active sorting will sort active posts before satisfied, withdrawn and expired posts and then sort by date. Distance sorting will sort the closest posts first.  (optional, default to relevance)
     * @param groupIds A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the &#39;groups&#39; source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). &lt;br /&gt;&lt;br /&gt; NOTE: For requests using an api key instead of oauth, this field is required if the &#39;groups&#39; source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). &lt;br /&gt;&lt;br/&gt; *To determine which group IDs were used and which were discarded, use the group_ids field in the response.  (optional, default to The group IDs of every group the current user is a member of.)
     * @param perPage The number of posts to return per page (must be &gt;&#x3D; 1 and &lt;&#x3D; 100). (optional, default to 20)
     * @param page The page of posts to return. (optional, default to 1)
     * @param devicePixelRatio Client device pixel ratio used to determine thumbnail size (default 1.0). (optional, default to 1)
     * @param latitude The latitude of a point around which to return posts.  (optional)
     * @param longitude The longitude of a point around which to return posts.  (optional)
     * @param radius The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned.  (optional)
     * @param dateMin Only posts newer than or equal to this UTC date and time will be returned.  (optional)
     * @param dateMax Only posts older than this UTC date and time will be returned. (optional)
     * @param outcomes A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn &lt;br /&gt;&lt;br /&gt; There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn and not expired are returned. If set to &#39;all&#39;, all posts will be returned no matter what outcome the posts have. If set to &#39;not-promised&#39;, only posts that are not satisfied ant not withdrawn and not expired and not promised are returned.  (optional, default to )
     * @param includeReposts If set to 1 (the default), posts that are reposts will be included. If set to 0, reposts will be excluded. See the repost_count field of post objects for details about how reposts are identified.  (optional, default to 1)
     * @return ApiResponse&lt;SearchPosts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The posts and paging data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchPosts200Response> searchUserPostsWithHttpInfo(String userId, String search, String types, String sources, String sortBy, String groupIds, Integer perPage, Integer page, BigDecimal devicePixelRatio, BigDecimal latitude, BigDecimal longitude, BigDecimal radius, OffsetDateTime dateMin, OffsetDateTime dateMax, String outcomes, Integer includeReposts) throws ApiException {
        okhttp3.Call localVarCall = searchUserPostsValidateBeforeCall(userId, search, types, sources, sortBy, groupIds, perPage, page, devicePixelRatio, latitude, longitude, radius, dateMin, dateMax, outcomes, includeReposts, null);
        Type localVarReturnType = new TypeToken<SearchPosts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search posts by a user (asynchronously)
     * Searching posts takes the same arguments as listing posts except for the addition of the search and sort_by parameters. 
     * @param userId The user ID of the user whose posts will be retrieved. Using &#39;me&#39; as the user_id will return the posts for the current user.  (required)
     * @param search The search query used to find posts. (required)
     * @param types A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin  (required)
     * @param sources A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or all the open archive groups the requested user has posted to if latitude, longitude and radius aren&#39;t passed). &lt;br /&gt;&lt;br /&gt; NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required.  (required)
     * @param sortBy How to sort the posts that are returned.  One of: relevance, date, active, distance &lt;br /&gt;&lt;br /&gt; Relevance sorting will sort the posts that best match the search query first. Date sorting will sort posts from newest to oldest. Active sorting will sort active posts before satisfied, withdrawn and expired posts and then sort by date. Distance sorting will sort the closest posts first.  (optional, default to relevance)
     * @param groupIds A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the &#39;groups&#39; source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). &lt;br /&gt;&lt;br /&gt; NOTE: For requests using an api key instead of oauth, this field is required if the &#39;groups&#39; source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). &lt;br /&gt;&lt;br/&gt; *To determine which group IDs were used and which were discarded, use the group_ids field in the response.  (optional, default to The group IDs of every group the current user is a member of.)
     * @param perPage The number of posts to return per page (must be &gt;&#x3D; 1 and &lt;&#x3D; 100). (optional, default to 20)
     * @param page The page of posts to return. (optional, default to 1)
     * @param devicePixelRatio Client device pixel ratio used to determine thumbnail size (default 1.0). (optional, default to 1)
     * @param latitude The latitude of a point around which to return posts.  (optional)
     * @param longitude The longitude of a point around which to return posts.  (optional)
     * @param radius The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned.  (optional)
     * @param dateMin Only posts newer than or equal to this UTC date and time will be returned.  (optional)
     * @param dateMax Only posts older than this UTC date and time will be returned. (optional)
     * @param outcomes A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn &lt;br /&gt;&lt;br /&gt; There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn and not expired are returned. If set to &#39;all&#39;, all posts will be returned no matter what outcome the posts have. If set to &#39;not-promised&#39;, only posts that are not satisfied ant not withdrawn and not expired and not promised are returned.  (optional, default to )
     * @param includeReposts If set to 1 (the default), posts that are reposts will be included. If set to 0, reposts will be excluded. See the repost_count field of post objects for details about how reposts are identified.  (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The posts and paging data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchUserPostsAsync(String userId, String search, String types, String sources, String sortBy, String groupIds, Integer perPage, Integer page, BigDecimal devicePixelRatio, BigDecimal latitude, BigDecimal longitude, BigDecimal radius, OffsetDateTime dateMin, OffsetDateTime dateMax, String outcomes, Integer includeReposts, final ApiCallback<SearchPosts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchUserPostsValidateBeforeCall(userId, search, types, sources, sortBy, groupIds, perPage, page, devicePixelRatio, latitude, longitude, radius, dateMin, dateMax, outcomes, includeReposts, _callback);
        Type localVarReturnType = new TypeToken<SearchPosts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
