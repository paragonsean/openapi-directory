/*
 * trash nothing
 * This is the REST API for [trashnothing.com](https://trashnothing.com).  To learn more about the API or to register your app for use with the API visit the [trash nothing Developer page](https://trashnothing.com/developer).  NOTE: All date-time values are [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) and are in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) (eg. 2019-02-03T01:23:53). 
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PostSearchResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SearchPosts200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:54.729444-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchPosts200Response {
  public static final String SERIALIZED_NAME_END_INDEX = "end_index";
  @SerializedName(SERIALIZED_NAME_END_INDEX)
  private Integer endIndex;

  public static final String SERIALIZED_NAME_GROUP_IDS = "group_ids";
  @SerializedName(SERIALIZED_NAME_GROUP_IDS)
  private List<String> groupIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_NUM_PAGES = "num_pages";
  @SerializedName(SERIALIZED_NAME_NUM_PAGES)
  private Integer numPages;

  public static final String SERIALIZED_NAME_NUM_POSTS = "num_posts";
  @SerializedName(SERIALIZED_NAME_NUM_POSTS)
  private Integer numPosts;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private Integer page;

  public static final String SERIALIZED_NAME_PER_PAGE = "per_page";
  @SerializedName(SERIALIZED_NAME_PER_PAGE)
  private Integer perPage;

  public static final String SERIALIZED_NAME_POSTS = "posts";
  @SerializedName(SERIALIZED_NAME_POSTS)
  private List<PostSearchResult> posts = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_INDEX = "start_index";
  @SerializedName(SERIALIZED_NAME_START_INDEX)
  private Integer startIndex;

  public SearchPosts200Response() {
  }

  public SearchPosts200Response endIndex(Integer endIndex) {
    this.endIndex = endIndex;
    return this;
  }

  /**
   * The index of the last post being returned (an integer between start_index and num_posts).
   * @return endIndex
   */
  @javax.annotation.Nullable
  public Integer getEndIndex() {
    return endIndex;
  }

  public void setEndIndex(Integer endIndex) {
    this.endIndex = endIndex;
  }


  public SearchPosts200Response groupIds(List<String> groupIds) {
    this.groupIds = groupIds;
    return this;
  }

  public SearchPosts200Response addGroupIdsItem(String groupIdsItem) {
    if (this.groupIds == null) {
      this.groupIds = new ArrayList<>();
    }
    this.groupIds.add(groupIdsItem);
    return this;
  }

  /**
   * The IDs of the groups that the posts were retrieved from (will be null when no group IDs were used). These IDs may be a subset of the requested group IDs when a request includes group IDs for groups that are not open archives and that the current user is not a member of.  If the open_archive_groups source is used, these IDs may include the IDs of open archive groups that weren&#39;t present in the group_ids parameter of the request. 
   * @return groupIds
   */
  @javax.annotation.Nullable
  public List<String> getGroupIds() {
    return groupIds;
  }

  public void setGroupIds(List<String> groupIds) {
    this.groupIds = groupIds;
  }


  public SearchPosts200Response numPages(Integer numPages) {
    this.numPages = numPages;
    return this;
  }

  /**
   * The total number of pages available.
   * @return numPages
   */
  @javax.annotation.Nullable
  public Integer getNumPages() {
    return numPages;
  }

  public void setNumPages(Integer numPages) {
    this.numPages = numPages;
  }


  public SearchPosts200Response numPosts(Integer numPosts) {
    this.numPosts = numPosts;
    return this;
  }

  /**
   * The total number of posts available.
   * @return numPosts
   */
  @javax.annotation.Nullable
  public Integer getNumPosts() {
    return numPosts;
  }

  public void setNumPosts(Integer numPosts) {
    this.numPosts = numPosts;
  }


  public SearchPosts200Response page(Integer page) {
    this.page = page;
    return this;
  }

  /**
   * The page number of the posts being returned.
   * @return page
   */
  @javax.annotation.Nullable
  public Integer getPage() {
    return page;
  }

  public void setPage(Integer page) {
    this.page = page;
  }


  public SearchPosts200Response perPage(Integer perPage) {
    this.perPage = perPage;
    return this;
  }

  /**
   * The number of posts being returned per page.
   * @return perPage
   */
  @javax.annotation.Nullable
  public Integer getPerPage() {
    return perPage;
  }

  public void setPerPage(Integer perPage) {
    this.perPage = perPage;
  }


  public SearchPosts200Response posts(List<PostSearchResult> posts) {
    this.posts = posts;
    return this;
  }

  public SearchPosts200Response addPostsItem(PostSearchResult postsItem) {
    if (this.posts == null) {
      this.posts = new ArrayList<>();
    }
    this.posts.add(postsItem);
    return this;
  }

  /**
   * Get posts
   * @return posts
   */
  @javax.annotation.Nullable
  public List<PostSearchResult> getPosts() {
    return posts;
  }

  public void setPosts(List<PostSearchResult> posts) {
    this.posts = posts;
  }


  public SearchPosts200Response startIndex(Integer startIndex) {
    this.startIndex = startIndex;
    return this;
  }

  /**
   * The index of the first post being returned (an integer between 1 and num_posts).
   * @return startIndex
   */
  @javax.annotation.Nullable
  public Integer getStartIndex() {
    return startIndex;
  }

  public void setStartIndex(Integer startIndex) {
    this.startIndex = startIndex;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchPosts200Response searchPosts200Response = (SearchPosts200Response) o;
    return Objects.equals(this.endIndex, searchPosts200Response.endIndex) &&
        Objects.equals(this.groupIds, searchPosts200Response.groupIds) &&
        Objects.equals(this.numPages, searchPosts200Response.numPages) &&
        Objects.equals(this.numPosts, searchPosts200Response.numPosts) &&
        Objects.equals(this.page, searchPosts200Response.page) &&
        Objects.equals(this.perPage, searchPosts200Response.perPage) &&
        Objects.equals(this.posts, searchPosts200Response.posts) &&
        Objects.equals(this.startIndex, searchPosts200Response.startIndex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endIndex, groupIds, numPages, numPosts, page, perPage, posts, startIndex);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchPosts200Response {\n");
    sb.append("    endIndex: ").append(toIndentedString(endIndex)).append("\n");
    sb.append("    groupIds: ").append(toIndentedString(groupIds)).append("\n");
    sb.append("    numPages: ").append(toIndentedString(numPages)).append("\n");
    sb.append("    numPosts: ").append(toIndentedString(numPosts)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    perPage: ").append(toIndentedString(perPage)).append("\n");
    sb.append("    posts: ").append(toIndentedString(posts)).append("\n");
    sb.append("    startIndex: ").append(toIndentedString(startIndex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("end_index");
    openapiFields.add("group_ids");
    openapiFields.add("num_pages");
    openapiFields.add("num_posts");
    openapiFields.add("page");
    openapiFields.add("per_page");
    openapiFields.add("posts");
    openapiFields.add("start_index");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchPosts200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchPosts200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchPosts200Response is not found in the empty JSON string", SearchPosts200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchPosts200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchPosts200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("group_ids") != null && !jsonObj.get("group_ids").isJsonNull() && !jsonObj.get("group_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_ids` to be an array in the JSON string but got `%s`", jsonObj.get("group_ids").toString()));
      }
      if (jsonObj.get("posts") != null && !jsonObj.get("posts").isJsonNull()) {
        JsonArray jsonArrayposts = jsonObj.getAsJsonArray("posts");
        if (jsonArrayposts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("posts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `posts` to be an array in the JSON string but got `%s`", jsonObj.get("posts").toString()));
          }

          // validate the optional field `posts` (array)
          for (int i = 0; i < jsonArrayposts.size(); i++) {
            PostSearchResult.validateJsonElement(jsonArrayposts.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchPosts200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchPosts200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchPosts200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchPosts200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchPosts200Response>() {
           @Override
           public void write(JsonWriter out, SearchPosts200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchPosts200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchPosts200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchPosts200Response
   * @throws IOException if the JSON string is invalid with respect to SearchPosts200Response
   */
  public static SearchPosts200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchPosts200Response.class);
  }

  /**
   * Convert an instance of SearchPosts200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

