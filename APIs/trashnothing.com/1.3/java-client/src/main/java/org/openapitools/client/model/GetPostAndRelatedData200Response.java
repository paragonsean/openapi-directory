/*
 * trash nothing
 * This is the REST API for [trashnothing.com](https://trashnothing.com).  To learn more about the API or to register your app for use with the API visit the [trash nothing Developer page](https://trashnothing.com/developer).  NOTE: All date-time values are [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) and are in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) (eg. 2019-02-03T01:23:53). 
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Feedback;
import org.openapitools.client.model.Group;
import org.openapitools.client.model.Post;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetPostAndRelatedData200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:54.729444-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetPostAndRelatedData200Response {
  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private User author;

  public static final String SERIALIZED_NAME_AUTHOR_OFFER_COUNT = "author_offer_count";
  @SerializedName(SERIALIZED_NAME_AUTHOR_OFFER_COUNT)
  private Integer authorOfferCount;

  public static final String SERIALIZED_NAME_AUTHOR_POSTS = "author_posts";
  @SerializedName(SERIALIZED_NAME_AUTHOR_POSTS)
  private List<Post> authorPosts = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTHOR_WANTED_COUNT = "author_wanted_count";
  @SerializedName(SERIALIZED_NAME_AUTHOR_WANTED_COUNT)
  private Integer authorWantedCount;

  public static final String SERIALIZED_NAME_BOOKMARKED = "bookmarked";
  @SerializedName(SERIALIZED_NAME_BOOKMARKED)
  private Boolean bookmarked;

  public static final String SERIALIZED_NAME_FEEDBACK = "feedback";
  @SerializedName(SERIALIZED_NAME_FEEDBACK)
  private List<Feedback> feedback = new ArrayList<>();

  public static final String SERIALIZED_NAME_GROUPS = "groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  private List<Group> groups = new ArrayList<>();

  public static final String SERIALIZED_NAME_POST = "post";
  @SerializedName(SERIALIZED_NAME_POST)
  private Post post;

  public static final String SERIALIZED_NAME_REPLIED = "replied";
  @SerializedName(SERIALIZED_NAME_REPLIED)
  private Boolean replied;

  public static final String SERIALIZED_NAME_USER_CAN_REPLY = "user_can_reply";
  @SerializedName(SERIALIZED_NAME_USER_CAN_REPLY)
  private Boolean userCanReply;

  public static final String SERIALIZED_NAME_VIEWED = "viewed";
  @SerializedName(SERIALIZED_NAME_VIEWED)
  private Boolean viewed;

  public GetPostAndRelatedData200Response() {
  }

  public GetPostAndRelatedData200Response author(User author) {
    this.author = author;
    return this;
  }

  /**
   * Get author
   * @return author
   */
  @javax.annotation.Nullable
  public User getAuthor() {
    return author;
  }

  public void setAuthor(User author) {
    this.author = author;
  }


  public GetPostAndRelatedData200Response authorOfferCount(Integer authorOfferCount) {
    this.authorOfferCount = authorOfferCount;
    return this;
  }

  /**
   * Count of offer posts made by the post author in the last 90 days.
   * @return authorOfferCount
   */
  @javax.annotation.Nullable
  public Integer getAuthorOfferCount() {
    return authorOfferCount;
  }

  public void setAuthorOfferCount(Integer authorOfferCount) {
    this.authorOfferCount = authorOfferCount;
  }


  public GetPostAndRelatedData200Response authorPosts(List<Post> authorPosts) {
    this.authorPosts = authorPosts;
    return this;
  }

  public GetPostAndRelatedData200Response addAuthorPostsItem(Post authorPostsItem) {
    if (this.authorPosts == null) {
      this.authorPosts = new ArrayList<>();
    }
    this.authorPosts.add(authorPostsItem);
    return this;
  }

  /**
   * Other active posts from the post author in the last 90 days. A maximum of 30 posts will be returned. 
   * @return authorPosts
   */
  @javax.annotation.Nullable
  public List<Post> getAuthorPosts() {
    return authorPosts;
  }

  public void setAuthorPosts(List<Post> authorPosts) {
    this.authorPosts = authorPosts;
  }


  public GetPostAndRelatedData200Response authorWantedCount(Integer authorWantedCount) {
    this.authorWantedCount = authorWantedCount;
    return this;
  }

  /**
   * Count of wanted posts made by the post author in the last 90 days.
   * @return authorWantedCount
   */
  @javax.annotation.Nullable
  public Integer getAuthorWantedCount() {
    return authorWantedCount;
  }

  public void setAuthorWantedCount(Integer authorWantedCount) {
    this.authorWantedCount = authorWantedCount;
  }


  public GetPostAndRelatedData200Response bookmarked(Boolean bookmarked) {
    this.bookmarked = bookmarked;
    return this;
  }

  /**
   * Whether or not the current user has bookmarked this post.  Will be null for api key requests and for the current users&#39; posts.
   * @return bookmarked
   */
  @javax.annotation.Nullable
  public Boolean getBookmarked() {
    return bookmarked;
  }

  public void setBookmarked(Boolean bookmarked) {
    this.bookmarked = bookmarked;
  }


  public GetPostAndRelatedData200Response feedback(List<Feedback> feedback) {
    this.feedback = feedback;
    return this;
  }

  public GetPostAndRelatedData200Response addFeedbackItem(Feedback feedbackItem) {
    if (this.feedback == null) {
      this.feedback = new ArrayList<>();
    }
    this.feedback.add(feedbackItem);
    return this;
  }

  /**
   * Feedback the current user has left on the post author.
   * @return feedback
   */
  @javax.annotation.Nullable
  public List<Feedback> getFeedback() {
    return feedback;
  }

  public void setFeedback(List<Feedback> feedback) {
    this.feedback = feedback;
  }


  public GetPostAndRelatedData200Response groups(List<Group> groups) {
    this.groups = groups;
    return this;
  }

  public GetPostAndRelatedData200Response addGroupsItem(Group groupsItem) {
    if (this.groups == null) {
      this.groups = new ArrayList<>();
    }
    this.groups.add(groupsItem);
    return this;
  }

  /**
   * The groups the post is published on.
   * @return groups
   */
  @javax.annotation.Nullable
  public List<Group> getGroups() {
    return groups;
  }

  public void setGroups(List<Group> groups) {
    this.groups = groups;
  }


  public GetPostAndRelatedData200Response post(Post post) {
    this.post = post;
    return this;
  }

  /**
   * Get post
   * @return post
   */
  @javax.annotation.Nullable
  public Post getPost() {
    return post;
  }

  public void setPost(Post post) {
    this.post = post;
  }


  public GetPostAndRelatedData200Response replied(Boolean replied) {
    this.replied = replied;
    return this;
  }

  /**
   * Whether or not the current user has replied to this post.  Will be null for api key requests and for the current users&#39; posts.
   * @return replied
   */
  @javax.annotation.Nullable
  public Boolean getReplied() {
    return replied;
  }

  public void setReplied(Boolean replied) {
    this.replied = replied;
  }


  public GetPostAndRelatedData200Response userCanReply(Boolean userCanReply) {
    this.userCanReply = userCanReply;
    return this;
  }

  /**
   * Whether or not the current user (if any) can reply to this post. Unverified users cannot reply to posts until they verify their account. 
   * @return userCanReply
   */
  @javax.annotation.Nullable
  public Boolean getUserCanReply() {
    return userCanReply;
  }

  public void setUserCanReply(Boolean userCanReply) {
    this.userCanReply = userCanReply;
  }


  public GetPostAndRelatedData200Response viewed(Boolean viewed) {
    this.viewed = viewed;
    return this;
  }

  /**
   * Whether or not the current user has previously viewed this post.  Will be null for api key requests and for the current users&#39; posts.
   * @return viewed
   */
  @javax.annotation.Nullable
  public Boolean getViewed() {
    return viewed;
  }

  public void setViewed(Boolean viewed) {
    this.viewed = viewed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetPostAndRelatedData200Response getPostAndRelatedData200Response = (GetPostAndRelatedData200Response) o;
    return Objects.equals(this.author, getPostAndRelatedData200Response.author) &&
        Objects.equals(this.authorOfferCount, getPostAndRelatedData200Response.authorOfferCount) &&
        Objects.equals(this.authorPosts, getPostAndRelatedData200Response.authorPosts) &&
        Objects.equals(this.authorWantedCount, getPostAndRelatedData200Response.authorWantedCount) &&
        Objects.equals(this.bookmarked, getPostAndRelatedData200Response.bookmarked) &&
        Objects.equals(this.feedback, getPostAndRelatedData200Response.feedback) &&
        Objects.equals(this.groups, getPostAndRelatedData200Response.groups) &&
        Objects.equals(this.post, getPostAndRelatedData200Response.post) &&
        Objects.equals(this.replied, getPostAndRelatedData200Response.replied) &&
        Objects.equals(this.userCanReply, getPostAndRelatedData200Response.userCanReply) &&
        Objects.equals(this.viewed, getPostAndRelatedData200Response.viewed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(author, authorOfferCount, authorPosts, authorWantedCount, bookmarked, feedback, groups, post, replied, userCanReply, viewed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetPostAndRelatedData200Response {\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    authorOfferCount: ").append(toIndentedString(authorOfferCount)).append("\n");
    sb.append("    authorPosts: ").append(toIndentedString(authorPosts)).append("\n");
    sb.append("    authorWantedCount: ").append(toIndentedString(authorWantedCount)).append("\n");
    sb.append("    bookmarked: ").append(toIndentedString(bookmarked)).append("\n");
    sb.append("    feedback: ").append(toIndentedString(feedback)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    post: ").append(toIndentedString(post)).append("\n");
    sb.append("    replied: ").append(toIndentedString(replied)).append("\n");
    sb.append("    userCanReply: ").append(toIndentedString(userCanReply)).append("\n");
    sb.append("    viewed: ").append(toIndentedString(viewed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("author");
    openapiFields.add("author_offer_count");
    openapiFields.add("author_posts");
    openapiFields.add("author_wanted_count");
    openapiFields.add("bookmarked");
    openapiFields.add("feedback");
    openapiFields.add("groups");
    openapiFields.add("post");
    openapiFields.add("replied");
    openapiFields.add("user_can_reply");
    openapiFields.add("viewed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetPostAndRelatedData200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetPostAndRelatedData200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetPostAndRelatedData200Response is not found in the empty JSON string", GetPostAndRelatedData200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetPostAndRelatedData200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetPostAndRelatedData200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `author`
      if (jsonObj.get("author") != null && !jsonObj.get("author").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("author"));
      }
      if (jsonObj.get("author_posts") != null && !jsonObj.get("author_posts").isJsonNull()) {
        JsonArray jsonArrayauthorPosts = jsonObj.getAsJsonArray("author_posts");
        if (jsonArrayauthorPosts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("author_posts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `author_posts` to be an array in the JSON string but got `%s`", jsonObj.get("author_posts").toString()));
          }

          // validate the optional field `author_posts` (array)
          for (int i = 0; i < jsonArrayauthorPosts.size(); i++) {
            Post.validateJsonElement(jsonArrayauthorPosts.get(i));
          };
        }
      }
      if (jsonObj.get("feedback") != null && !jsonObj.get("feedback").isJsonNull()) {
        JsonArray jsonArrayfeedback = jsonObj.getAsJsonArray("feedback");
        if (jsonArrayfeedback != null) {
          // ensure the json data is an array
          if (!jsonObj.get("feedback").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `feedback` to be an array in the JSON string but got `%s`", jsonObj.get("feedback").toString()));
          }

          // validate the optional field `feedback` (array)
          for (int i = 0; i < jsonArrayfeedback.size(); i++) {
            Feedback.validateJsonElement(jsonArrayfeedback.get(i));
          };
        }
      }
      if (jsonObj.get("groups") != null && !jsonObj.get("groups").isJsonNull()) {
        JsonArray jsonArraygroups = jsonObj.getAsJsonArray("groups");
        if (jsonArraygroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("groups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `groups` to be an array in the JSON string but got `%s`", jsonObj.get("groups").toString()));
          }

          // validate the optional field `groups` (array)
          for (int i = 0; i < jsonArraygroups.size(); i++) {
            Group.validateJsonElement(jsonArraygroups.get(i));
          };
        }
      }
      // validate the optional field `post`
      if (jsonObj.get("post") != null && !jsonObj.get("post").isJsonNull()) {
        Post.validateJsonElement(jsonObj.get("post"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetPostAndRelatedData200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetPostAndRelatedData200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetPostAndRelatedData200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetPostAndRelatedData200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GetPostAndRelatedData200Response>() {
           @Override
           public void write(JsonWriter out, GetPostAndRelatedData200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetPostAndRelatedData200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetPostAndRelatedData200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetPostAndRelatedData200Response
   * @throws IOException if the JSON string is invalid with respect to GetPostAndRelatedData200Response
   */
  public static GetPostAndRelatedData200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetPostAndRelatedData200Response.class);
  }

  /**
   * Convert an instance of GetPostAndRelatedData200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

