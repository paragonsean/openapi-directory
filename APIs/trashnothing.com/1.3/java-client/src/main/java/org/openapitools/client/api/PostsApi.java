/*
 * trash nothing
 * This is the REST API for [trashnothing.com](https://trashnothing.com).  To learn more about the API or to register your app for use with the API visit the [trash nothing Developer page](https://trashnothing.com/developer).  NOTE: All date-time values are [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) and are in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) (eg. 2019-02-03T01:23:53). 
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.GetAllPosts200Response;
import org.openapitools.client.model.GetAllPostsChanges200Response;
import org.openapitools.client.model.GetPostAndRelatedData200Response;
import org.openapitools.client.model.GetPosts200Response;
import org.openapitools.client.model.GetPostsByIds200Response;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Post;
import org.openapitools.client.model.SearchPosts200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PostsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PostsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PostsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAllPosts
     * @param types A comma separated list of the post types to return.  The available post types are: offer, wanted  (required)
     * @param dateMin Only posts newer than or equal to this UTC date and time will be returned. The UTC date and time used must be within a day or less of date_max. And the date and time must be within the last 30 days. And the date and time must be rounded to the nearest second.  (required)
     * @param dateMax Only posts older than this UTC date and time will be returned. The UTC date and time used must be within a day or less of date_min. And the date and time must be rounded to the nearest second.  (required)
     * @param perPage The number of posts to return per page (must be &gt;&#x3D; 1 and &lt;&#x3D; 50). (optional, default to 20)
     * @param page The page of posts to return. (optional, default to 1)
     * @param devicePixelRatio Client device pixel ratio used to determine thumbnail size (default 1.0). (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The posts. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllPostsCall(String types, OffsetDateTime dateMin, OffsetDateTime dateMax, Integer perPage, Integer page, BigDecimal devicePixelRatio, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/posts/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (types != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("types", types));
        }

        if (dateMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_min", dateMin));
        }

        if (dateMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_max", dateMax));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (devicePixelRatio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_pixel_ratio", devicePixelRatio));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPostsValidateBeforeCall(String types, OffsetDateTime dateMin, OffsetDateTime dateMax, Integer perPage, Integer page, BigDecimal devicePixelRatio, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'types' is set
        if (types == null) {
            throw new ApiException("Missing the required parameter 'types' when calling getAllPosts(Async)");
        }

        // verify the required parameter 'dateMin' is set
        if (dateMin == null) {
            throw new ApiException("Missing the required parameter 'dateMin' when calling getAllPosts(Async)");
        }

        // verify the required parameter 'dateMax' is set
        if (dateMax == null) {
            throw new ApiException("Missing the required parameter 'dateMax' when calling getAllPosts(Async)");
        }

        return getAllPostsCall(types, dateMin, dateMax, perPage, page, devicePixelRatio, _callback);

    }

    /**
     * List all posts
     * This endpoint provides an easy way to get a feed of all the publicly published posts on trash nothing. It provides access to all publicly published offer and wanted posts from the last 30 days. The posts are sorted by date (newest first). &lt;br /&gt;&lt;br /&gt; There are fewer options for filtering, sorting and searching posts with this endpoint but there is no 1,000 post limit and posts that are crossposted to multiple groups are not merged together in the response.  In most cases, crossposted posts are easy to detect because they have the same user_id, title and content. 
     * @param types A comma separated list of the post types to return.  The available post types are: offer, wanted  (required)
     * @param dateMin Only posts newer than or equal to this UTC date and time will be returned. The UTC date and time used must be within a day or less of date_max. And the date and time must be within the last 30 days. And the date and time must be rounded to the nearest second.  (required)
     * @param dateMax Only posts older than this UTC date and time will be returned. The UTC date and time used must be within a day or less of date_min. And the date and time must be rounded to the nearest second.  (required)
     * @param perPage The number of posts to return per page (must be &gt;&#x3D; 1 and &lt;&#x3D; 50). (optional, default to 20)
     * @param page The page of posts to return. (optional, default to 1)
     * @param devicePixelRatio Client device pixel ratio used to determine thumbnail size (default 1.0). (optional, default to 1)
     * @return GetAllPosts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The posts. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllPosts200Response getAllPosts(String types, OffsetDateTime dateMin, OffsetDateTime dateMax, Integer perPage, Integer page, BigDecimal devicePixelRatio) throws ApiException {
        ApiResponse<GetAllPosts200Response> localVarResp = getAllPostsWithHttpInfo(types, dateMin, dateMax, perPage, page, devicePixelRatio);
        return localVarResp.getData();
    }

    /**
     * List all posts
     * This endpoint provides an easy way to get a feed of all the publicly published posts on trash nothing. It provides access to all publicly published offer and wanted posts from the last 30 days. The posts are sorted by date (newest first). &lt;br /&gt;&lt;br /&gt; There are fewer options for filtering, sorting and searching posts with this endpoint but there is no 1,000 post limit and posts that are crossposted to multiple groups are not merged together in the response.  In most cases, crossposted posts are easy to detect because they have the same user_id, title and content. 
     * @param types A comma separated list of the post types to return.  The available post types are: offer, wanted  (required)
     * @param dateMin Only posts newer than or equal to this UTC date and time will be returned. The UTC date and time used must be within a day or less of date_max. And the date and time must be within the last 30 days. And the date and time must be rounded to the nearest second.  (required)
     * @param dateMax Only posts older than this UTC date and time will be returned. The UTC date and time used must be within a day or less of date_min. And the date and time must be rounded to the nearest second.  (required)
     * @param perPage The number of posts to return per page (must be &gt;&#x3D; 1 and &lt;&#x3D; 50). (optional, default to 20)
     * @param page The page of posts to return. (optional, default to 1)
     * @param devicePixelRatio Client device pixel ratio used to determine thumbnail size (default 1.0). (optional, default to 1)
     * @return ApiResponse&lt;GetAllPosts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The posts. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAllPosts200Response> getAllPostsWithHttpInfo(String types, OffsetDateTime dateMin, OffsetDateTime dateMax, Integer perPage, Integer page, BigDecimal devicePixelRatio) throws ApiException {
        okhttp3.Call localVarCall = getAllPostsValidateBeforeCall(types, dateMin, dateMax, perPage, page, devicePixelRatio, null);
        Type localVarReturnType = new TypeToken<GetAllPosts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all posts (asynchronously)
     * This endpoint provides an easy way to get a feed of all the publicly published posts on trash nothing. It provides access to all publicly published offer and wanted posts from the last 30 days. The posts are sorted by date (newest first). &lt;br /&gt;&lt;br /&gt; There are fewer options for filtering, sorting and searching posts with this endpoint but there is no 1,000 post limit and posts that are crossposted to multiple groups are not merged together in the response.  In most cases, crossposted posts are easy to detect because they have the same user_id, title and content. 
     * @param types A comma separated list of the post types to return.  The available post types are: offer, wanted  (required)
     * @param dateMin Only posts newer than or equal to this UTC date and time will be returned. The UTC date and time used must be within a day or less of date_max. And the date and time must be within the last 30 days. And the date and time must be rounded to the nearest second.  (required)
     * @param dateMax Only posts older than this UTC date and time will be returned. The UTC date and time used must be within a day or less of date_min. And the date and time must be rounded to the nearest second.  (required)
     * @param perPage The number of posts to return per page (must be &gt;&#x3D; 1 and &lt;&#x3D; 50). (optional, default to 20)
     * @param page The page of posts to return. (optional, default to 1)
     * @param devicePixelRatio Client device pixel ratio used to determine thumbnail size (default 1.0). (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The posts. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllPostsAsync(String types, OffsetDateTime dateMin, OffsetDateTime dateMax, Integer perPage, Integer page, BigDecimal devicePixelRatio, final ApiCallback<GetAllPosts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPostsValidateBeforeCall(types, dateMin, dateMax, perPage, page, devicePixelRatio, _callback);
        Type localVarReturnType = new TypeToken<GetAllPosts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllPostsChanges
     * @param dateMin Only changes newer than or equal to this UTC date and time will be returned. The UTC date and time used must be within a day or less of date_max. And the date and time must be within the last 30 days. And the date and time must be rounded to the nearest second.  (required)
     * @param dateMax Only changes older than this UTC date and time will be returned. The UTC date and time used must be within a day or less of date_min. And the date and time must be rounded to the nearest second.  (required)
     * @param perPage The number of changes to return per page (must be &gt;&#x3D; 1 and &lt;&#x3D; 50). (optional, default to 20)
     * @param page The page of changes to return. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The changes. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllPostsChangesCall(OffsetDateTime dateMin, OffsetDateTime dateMax, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/posts/all/changes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dateMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_min", dateMin));
        }

        if (dateMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_max", dateMax));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPostsChangesValidateBeforeCall(OffsetDateTime dateMin, OffsetDateTime dateMax, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dateMin' is set
        if (dateMin == null) {
            throw new ApiException("Missing the required parameter 'dateMin' when calling getAllPostsChanges(Async)");
        }

        // verify the required parameter 'dateMax' is set
        if (dateMax == null) {
            throw new ApiException("Missing the required parameter 'dateMax' when calling getAllPostsChanges(Async)");
        }

        return getAllPostsChangesCall(dateMin, dateMax, perPage, page, _callback);

    }

    /**
     * List all post changes
     * This endpoint provides an easy way to get a feed of all the changes that have been made to publicly published posts on trash nothing.  Similar to the /posts/all endpoint, only data from the last 30 days is available and the changes are sorted by date (newest first).  Every change includes the date of the change, the post_id of the post that was changed and the type of change. &lt;br /&gt;&lt;br /&gt; The different types of changes that are returned are listed below. &lt;br /&gt;&lt;br /&gt; - deleted&lt;br /&gt; - undeleted&lt;br /&gt; - satisfied&lt;br /&gt; - promised&lt;br /&gt; - unpromised&lt;br /&gt; - withdrawn&lt;br /&gt; - edited&lt;br /&gt; &lt;br /&gt; For edited changes, clients can use the retrieve post API endpoint to get the edits that have been made to the post. 
     * @param dateMin Only changes newer than or equal to this UTC date and time will be returned. The UTC date and time used must be within a day or less of date_max. And the date and time must be within the last 30 days. And the date and time must be rounded to the nearest second.  (required)
     * @param dateMax Only changes older than this UTC date and time will be returned. The UTC date and time used must be within a day or less of date_min. And the date and time must be rounded to the nearest second.  (required)
     * @param perPage The number of changes to return per page (must be &gt;&#x3D; 1 and &lt;&#x3D; 50). (optional, default to 20)
     * @param page The page of changes to return. (optional, default to 1)
     * @return GetAllPostsChanges200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The changes. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllPostsChanges200Response getAllPostsChanges(OffsetDateTime dateMin, OffsetDateTime dateMax, Integer perPage, Integer page) throws ApiException {
        ApiResponse<GetAllPostsChanges200Response> localVarResp = getAllPostsChangesWithHttpInfo(dateMin, dateMax, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List all post changes
     * This endpoint provides an easy way to get a feed of all the changes that have been made to publicly published posts on trash nothing.  Similar to the /posts/all endpoint, only data from the last 30 days is available and the changes are sorted by date (newest first).  Every change includes the date of the change, the post_id of the post that was changed and the type of change. &lt;br /&gt;&lt;br /&gt; The different types of changes that are returned are listed below. &lt;br /&gt;&lt;br /&gt; - deleted&lt;br /&gt; - undeleted&lt;br /&gt; - satisfied&lt;br /&gt; - promised&lt;br /&gt; - unpromised&lt;br /&gt; - withdrawn&lt;br /&gt; - edited&lt;br /&gt; &lt;br /&gt; For edited changes, clients can use the retrieve post API endpoint to get the edits that have been made to the post. 
     * @param dateMin Only changes newer than or equal to this UTC date and time will be returned. The UTC date and time used must be within a day or less of date_max. And the date and time must be within the last 30 days. And the date and time must be rounded to the nearest second.  (required)
     * @param dateMax Only changes older than this UTC date and time will be returned. The UTC date and time used must be within a day or less of date_min. And the date and time must be rounded to the nearest second.  (required)
     * @param perPage The number of changes to return per page (must be &gt;&#x3D; 1 and &lt;&#x3D; 50). (optional, default to 20)
     * @param page The page of changes to return. (optional, default to 1)
     * @return ApiResponse&lt;GetAllPostsChanges200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The changes. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAllPostsChanges200Response> getAllPostsChangesWithHttpInfo(OffsetDateTime dateMin, OffsetDateTime dateMax, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getAllPostsChangesValidateBeforeCall(dateMin, dateMax, perPage, page, null);
        Type localVarReturnType = new TypeToken<GetAllPostsChanges200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all post changes (asynchronously)
     * This endpoint provides an easy way to get a feed of all the changes that have been made to publicly published posts on trash nothing.  Similar to the /posts/all endpoint, only data from the last 30 days is available and the changes are sorted by date (newest first).  Every change includes the date of the change, the post_id of the post that was changed and the type of change. &lt;br /&gt;&lt;br /&gt; The different types of changes that are returned are listed below. &lt;br /&gt;&lt;br /&gt; - deleted&lt;br /&gt; - undeleted&lt;br /&gt; - satisfied&lt;br /&gt; - promised&lt;br /&gt; - unpromised&lt;br /&gt; - withdrawn&lt;br /&gt; - edited&lt;br /&gt; &lt;br /&gt; For edited changes, clients can use the retrieve post API endpoint to get the edits that have been made to the post. 
     * @param dateMin Only changes newer than or equal to this UTC date and time will be returned. The UTC date and time used must be within a day or less of date_max. And the date and time must be within the last 30 days. And the date and time must be rounded to the nearest second.  (required)
     * @param dateMax Only changes older than this UTC date and time will be returned. The UTC date and time used must be within a day or less of date_min. And the date and time must be rounded to the nearest second.  (required)
     * @param perPage The number of changes to return per page (must be &gt;&#x3D; 1 and &lt;&#x3D; 50). (optional, default to 20)
     * @param page The page of changes to return. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The changes. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllPostsChangesAsync(OffsetDateTime dateMin, OffsetDateTime dateMax, Integer perPage, Integer page, final ApiCallback<GetAllPostsChanges200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPostsChangesValidateBeforeCall(dateMin, dateMax, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<GetAllPostsChanges200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPost
     * @param postId The ID of the post to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The post. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user doesn&#39;t have permission to access the post. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Post not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPostCall(String postId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/posts/{post_id}"
            .replace("{" + "post_id" + "}", localVarApiClient.escapeString(postId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPostValidateBeforeCall(String postId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'postId' is set
        if (postId == null) {
            throw new ApiException("Missing the required parameter 'postId' when calling getPost(Async)");
        }

        return getPostCall(postId, _callback);

    }

    /**
     * Retrieve a post
     * 
     * @param postId The ID of the post to retrieve. (required)
     * @return Post
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The post. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user doesn&#39;t have permission to access the post. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Post not found. </td><td>  -  </td></tr>
     </table>
     */
    public Post getPost(String postId) throws ApiException {
        ApiResponse<Post> localVarResp = getPostWithHttpInfo(postId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a post
     * 
     * @param postId The ID of the post to retrieve. (required)
     * @return ApiResponse&lt;Post&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The post. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user doesn&#39;t have permission to access the post. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Post not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Post> getPostWithHttpInfo(String postId) throws ApiException {
        okhttp3.Call localVarCall = getPostValidateBeforeCall(postId, null);
        Type localVarReturnType = new TypeToken<Post>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a post (asynchronously)
     * 
     * @param postId The ID of the post to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The post. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user doesn&#39;t have permission to access the post. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Post not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPostAsync(String postId, final ApiCallback<Post> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPostValidateBeforeCall(postId, _callback);
        Type localVarReturnType = new TypeToken<Post>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPostAndRelatedData
     * @param postId The ID of the post to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The post and related data. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user doesn&#39;t have permission to access the post. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Post not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPostAndRelatedDataCall(String postId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/posts/{post_id}/display"
            .replace("{" + "post_id" + "}", localVarApiClient.escapeString(postId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPostAndRelatedDataValidateBeforeCall(String postId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'postId' is set
        if (postId == null) {
            throw new ApiException("Missing the required parameter 'postId' when calling getPostAndRelatedData(Async)");
        }

        return getPostAndRelatedDataCall(postId, _callback);

    }

    /**
     * Retrieve post display data
     * Retrieve a post and other data related to the post that is useful for displaying the post such as data about the user who posted the post and the groups the post was posted on. 
     * @param postId The ID of the post to retrieve. (required)
     * @return GetPostAndRelatedData200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The post and related data. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user doesn&#39;t have permission to access the post. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Post not found. </td><td>  -  </td></tr>
     </table>
     */
    public GetPostAndRelatedData200Response getPostAndRelatedData(String postId) throws ApiException {
        ApiResponse<GetPostAndRelatedData200Response> localVarResp = getPostAndRelatedDataWithHttpInfo(postId);
        return localVarResp.getData();
    }

    /**
     * Retrieve post display data
     * Retrieve a post and other data related to the post that is useful for displaying the post such as data about the user who posted the post and the groups the post was posted on. 
     * @param postId The ID of the post to retrieve. (required)
     * @return ApiResponse&lt;GetPostAndRelatedData200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The post and related data. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user doesn&#39;t have permission to access the post. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Post not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPostAndRelatedData200Response> getPostAndRelatedDataWithHttpInfo(String postId) throws ApiException {
        okhttp3.Call localVarCall = getPostAndRelatedDataValidateBeforeCall(postId, null);
        Type localVarReturnType = new TypeToken<GetPostAndRelatedData200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve post display data (asynchronously)
     * Retrieve a post and other data related to the post that is useful for displaying the post such as data about the user who posted the post and the groups the post was posted on. 
     * @param postId The ID of the post to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The post and related data. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user doesn&#39;t have permission to access the post. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Post not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPostAndRelatedDataAsync(String postId, final ApiCallback<GetPostAndRelatedData200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPostAndRelatedDataValidateBeforeCall(postId, _callback);
        Type localVarReturnType = new TypeToken<GetPostAndRelatedData200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPosts
     * @param types A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin  (required)
     * @param sources A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or the current users&#39; location if latitude, longitude and radius aren&#39;t passed). &lt;br /&gt;&lt;br /&gt; NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required.  (required)
     * @param sortBy How to sort the posts that are returned.  One of: date, active, distance &lt;br /&gt;&lt;br /&gt; Date sorting will sort posts from newest to oldest. Active sorting will sort active posts before satisfied, withdrawn and expired posts and then sort by date. Distance sorting will sort the closest posts first.  (optional, default to date)
     * @param groupIds A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the &#39;groups&#39; source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). &lt;br /&gt;&lt;br /&gt; NOTE: For requests using an api key instead of oauth, this field is required if the &#39;groups&#39; source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). &lt;br /&gt;&lt;br/&gt; *To determine which group IDs were used and which were discarded, use the group_ids field in the response.  (optional, default to The group IDs of every group the current user is a member of.)
     * @param perPage The number of posts to return per page (must be &gt;&#x3D; 1 and &lt;&#x3D; 100). (optional, default to 20)
     * @param page The page of posts to return. (optional, default to 1)
     * @param devicePixelRatio Client device pixel ratio used to determine thumbnail size (default 1.0). (optional, default to 1)
     * @param latitude The latitude of a point around which to return posts.  (optional)
     * @param longitude The longitude of a point around which to return posts.  (optional)
     * @param radius The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned.  (optional)
     * @param dateMin Only posts newer than or equal to this UTC date and time will be returned.  If unset, defaults to the current date and time minus 90 days.  (optional)
     * @param dateMax Only posts older than this UTC date and time will be returned.  If unset, defaults to the current date and time. (optional)
     * @param outcomes A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn &lt;br /&gt;&lt;br /&gt; There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn and not expired are returned. If set to &#39;all&#39;, all posts will be returned no matter what outcome the posts have. If set to &#39;not-promised&#39;, only posts that are not satisfied ant not withdrawn and not expired and not promised are returned.  (optional, default to )
     * @param userState If user_state is set, only posts matching the state specified will be returned.  Only one state may be passed and it must be one of the following: viewed, replied, bookmarked &lt;br&gt;&lt;br&gt; NOTE: This option will only work with oauth requests.  (optional, default to )
     * @param includeReposts If set to 1 (the default), posts that are reposts will be included. If set to 0, reposts will be excluded. See the repost_count field of post objects for details about how reposts are identified.  (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The posts and paging data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPostsCall(String types, String sources, String sortBy, String groupIds, Integer perPage, Integer page, BigDecimal devicePixelRatio, BigDecimal latitude, BigDecimal longitude, BigDecimal radius, OffsetDateTime dateMin, OffsetDateTime dateMax, String outcomes, String userState, Integer includeReposts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/posts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (types != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("types", types));
        }

        if (sources != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sources", sources));
        }

        if (groupIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_ids", groupIds));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (devicePixelRatio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_pixel_ratio", devicePixelRatio));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (dateMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_min", dateMin));
        }

        if (dateMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_max", dateMax));
        }

        if (outcomes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outcomes", outcomes));
        }

        if (userState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_state", userState));
        }

        if (includeReposts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_reposts", includeReposts));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPostsValidateBeforeCall(String types, String sources, String sortBy, String groupIds, Integer perPage, Integer page, BigDecimal devicePixelRatio, BigDecimal latitude, BigDecimal longitude, BigDecimal radius, OffsetDateTime dateMin, OffsetDateTime dateMax, String outcomes, String userState, Integer includeReposts, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'types' is set
        if (types == null) {
            throw new ApiException("Missing the required parameter 'types' when calling getPosts(Async)");
        }

        // verify the required parameter 'sources' is set
        if (sources == null) {
            throw new ApiException("Missing the required parameter 'sources' when calling getPosts(Async)");
        }

        return getPostsCall(types, sources, sortBy, groupIds, perPage, page, devicePixelRatio, latitude, longitude, radius, dateMin, dateMax, outcomes, userState, includeReposts, _callback);

    }

    /**
     * List posts
     * NOTE: When paging through the posts returned by this endpoint, there will be at most 1,000 posts that can be returned (eg. 50 pages worth of posts with the default per_page value of 20).  In areas where there are more than 1,000 posts, clients can use more specific query parameters to adjust which posts are returned. NOTE: Passing the latitude, longitude and radius parameters filters all posts by their location and so these parameters will temporarily override the current users&#39; location preferences. When latitude, longitude and radius are not specified, public posts will be filtered by the current users&#39; location preferences. 
     * @param types A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin  (required)
     * @param sources A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or the current users&#39; location if latitude, longitude and radius aren&#39;t passed). &lt;br /&gt;&lt;br /&gt; NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required.  (required)
     * @param sortBy How to sort the posts that are returned.  One of: date, active, distance &lt;br /&gt;&lt;br /&gt; Date sorting will sort posts from newest to oldest. Active sorting will sort active posts before satisfied, withdrawn and expired posts and then sort by date. Distance sorting will sort the closest posts first.  (optional, default to date)
     * @param groupIds A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the &#39;groups&#39; source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). &lt;br /&gt;&lt;br /&gt; NOTE: For requests using an api key instead of oauth, this field is required if the &#39;groups&#39; source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). &lt;br /&gt;&lt;br/&gt; *To determine which group IDs were used and which were discarded, use the group_ids field in the response.  (optional, default to The group IDs of every group the current user is a member of.)
     * @param perPage The number of posts to return per page (must be &gt;&#x3D; 1 and &lt;&#x3D; 100). (optional, default to 20)
     * @param page The page of posts to return. (optional, default to 1)
     * @param devicePixelRatio Client device pixel ratio used to determine thumbnail size (default 1.0). (optional, default to 1)
     * @param latitude The latitude of a point around which to return posts.  (optional)
     * @param longitude The longitude of a point around which to return posts.  (optional)
     * @param radius The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned.  (optional)
     * @param dateMin Only posts newer than or equal to this UTC date and time will be returned.  If unset, defaults to the current date and time minus 90 days.  (optional)
     * @param dateMax Only posts older than this UTC date and time will be returned.  If unset, defaults to the current date and time. (optional)
     * @param outcomes A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn &lt;br /&gt;&lt;br /&gt; There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn and not expired are returned. If set to &#39;all&#39;, all posts will be returned no matter what outcome the posts have. If set to &#39;not-promised&#39;, only posts that are not satisfied ant not withdrawn and not expired and not promised are returned.  (optional, default to )
     * @param userState If user_state is set, only posts matching the state specified will be returned.  Only one state may be passed and it must be one of the following: viewed, replied, bookmarked &lt;br&gt;&lt;br&gt; NOTE: This option will only work with oauth requests.  (optional, default to )
     * @param includeReposts If set to 1 (the default), posts that are reposts will be included. If set to 0, reposts will be excluded. See the repost_count field of post objects for details about how reposts are identified.  (optional, default to 1)
     * @return GetPosts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The posts and paging data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public GetPosts200Response getPosts(String types, String sources, String sortBy, String groupIds, Integer perPage, Integer page, BigDecimal devicePixelRatio, BigDecimal latitude, BigDecimal longitude, BigDecimal radius, OffsetDateTime dateMin, OffsetDateTime dateMax, String outcomes, String userState, Integer includeReposts) throws ApiException {
        ApiResponse<GetPosts200Response> localVarResp = getPostsWithHttpInfo(types, sources, sortBy, groupIds, perPage, page, devicePixelRatio, latitude, longitude, radius, dateMin, dateMax, outcomes, userState, includeReposts);
        return localVarResp.getData();
    }

    /**
     * List posts
     * NOTE: When paging through the posts returned by this endpoint, there will be at most 1,000 posts that can be returned (eg. 50 pages worth of posts with the default per_page value of 20).  In areas where there are more than 1,000 posts, clients can use more specific query parameters to adjust which posts are returned. NOTE: Passing the latitude, longitude and radius parameters filters all posts by their location and so these parameters will temporarily override the current users&#39; location preferences. When latitude, longitude and radius are not specified, public posts will be filtered by the current users&#39; location preferences. 
     * @param types A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin  (required)
     * @param sources A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or the current users&#39; location if latitude, longitude and radius aren&#39;t passed). &lt;br /&gt;&lt;br /&gt; NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required.  (required)
     * @param sortBy How to sort the posts that are returned.  One of: date, active, distance &lt;br /&gt;&lt;br /&gt; Date sorting will sort posts from newest to oldest. Active sorting will sort active posts before satisfied, withdrawn and expired posts and then sort by date. Distance sorting will sort the closest posts first.  (optional, default to date)
     * @param groupIds A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the &#39;groups&#39; source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). &lt;br /&gt;&lt;br /&gt; NOTE: For requests using an api key instead of oauth, this field is required if the &#39;groups&#39; source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). &lt;br /&gt;&lt;br/&gt; *To determine which group IDs were used and which were discarded, use the group_ids field in the response.  (optional, default to The group IDs of every group the current user is a member of.)
     * @param perPage The number of posts to return per page (must be &gt;&#x3D; 1 and &lt;&#x3D; 100). (optional, default to 20)
     * @param page The page of posts to return. (optional, default to 1)
     * @param devicePixelRatio Client device pixel ratio used to determine thumbnail size (default 1.0). (optional, default to 1)
     * @param latitude The latitude of a point around which to return posts.  (optional)
     * @param longitude The longitude of a point around which to return posts.  (optional)
     * @param radius The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned.  (optional)
     * @param dateMin Only posts newer than or equal to this UTC date and time will be returned.  If unset, defaults to the current date and time minus 90 days.  (optional)
     * @param dateMax Only posts older than this UTC date and time will be returned.  If unset, defaults to the current date and time. (optional)
     * @param outcomes A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn &lt;br /&gt;&lt;br /&gt; There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn and not expired are returned. If set to &#39;all&#39;, all posts will be returned no matter what outcome the posts have. If set to &#39;not-promised&#39;, only posts that are not satisfied ant not withdrawn and not expired and not promised are returned.  (optional, default to )
     * @param userState If user_state is set, only posts matching the state specified will be returned.  Only one state may be passed and it must be one of the following: viewed, replied, bookmarked &lt;br&gt;&lt;br&gt; NOTE: This option will only work with oauth requests.  (optional, default to )
     * @param includeReposts If set to 1 (the default), posts that are reposts will be included. If set to 0, reposts will be excluded. See the repost_count field of post objects for details about how reposts are identified.  (optional, default to 1)
     * @return ApiResponse&lt;GetPosts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The posts and paging data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPosts200Response> getPostsWithHttpInfo(String types, String sources, String sortBy, String groupIds, Integer perPage, Integer page, BigDecimal devicePixelRatio, BigDecimal latitude, BigDecimal longitude, BigDecimal radius, OffsetDateTime dateMin, OffsetDateTime dateMax, String outcomes, String userState, Integer includeReposts) throws ApiException {
        okhttp3.Call localVarCall = getPostsValidateBeforeCall(types, sources, sortBy, groupIds, perPage, page, devicePixelRatio, latitude, longitude, radius, dateMin, dateMax, outcomes, userState, includeReposts, null);
        Type localVarReturnType = new TypeToken<GetPosts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List posts (asynchronously)
     * NOTE: When paging through the posts returned by this endpoint, there will be at most 1,000 posts that can be returned (eg. 50 pages worth of posts with the default per_page value of 20).  In areas where there are more than 1,000 posts, clients can use more specific query parameters to adjust which posts are returned. NOTE: Passing the latitude, longitude and radius parameters filters all posts by their location and so these parameters will temporarily override the current users&#39; location preferences. When latitude, longitude and radius are not specified, public posts will be filtered by the current users&#39; location preferences. 
     * @param types A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin  (required)
     * @param sources A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or the current users&#39; location if latitude, longitude and radius aren&#39;t passed). &lt;br /&gt;&lt;br /&gt; NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required.  (required)
     * @param sortBy How to sort the posts that are returned.  One of: date, active, distance &lt;br /&gt;&lt;br /&gt; Date sorting will sort posts from newest to oldest. Active sorting will sort active posts before satisfied, withdrawn and expired posts and then sort by date. Distance sorting will sort the closest posts first.  (optional, default to date)
     * @param groupIds A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the &#39;groups&#39; source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). &lt;br /&gt;&lt;br /&gt; NOTE: For requests using an api key instead of oauth, this field is required if the &#39;groups&#39; source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). &lt;br /&gt;&lt;br/&gt; *To determine which group IDs were used and which were discarded, use the group_ids field in the response.  (optional, default to The group IDs of every group the current user is a member of.)
     * @param perPage The number of posts to return per page (must be &gt;&#x3D; 1 and &lt;&#x3D; 100). (optional, default to 20)
     * @param page The page of posts to return. (optional, default to 1)
     * @param devicePixelRatio Client device pixel ratio used to determine thumbnail size (default 1.0). (optional, default to 1)
     * @param latitude The latitude of a point around which to return posts.  (optional)
     * @param longitude The longitude of a point around which to return posts.  (optional)
     * @param radius The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned.  (optional)
     * @param dateMin Only posts newer than or equal to this UTC date and time will be returned.  If unset, defaults to the current date and time minus 90 days.  (optional)
     * @param dateMax Only posts older than this UTC date and time will be returned.  If unset, defaults to the current date and time. (optional)
     * @param outcomes A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn &lt;br /&gt;&lt;br /&gt; There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn and not expired are returned. If set to &#39;all&#39;, all posts will be returned no matter what outcome the posts have. If set to &#39;not-promised&#39;, only posts that are not satisfied ant not withdrawn and not expired and not promised are returned.  (optional, default to )
     * @param userState If user_state is set, only posts matching the state specified will be returned.  Only one state may be passed and it must be one of the following: viewed, replied, bookmarked &lt;br&gt;&lt;br&gt; NOTE: This option will only work with oauth requests.  (optional, default to )
     * @param includeReposts If set to 1 (the default), posts that are reposts will be included. If set to 0, reposts will be excluded. See the repost_count field of post objects for details about how reposts are identified.  (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The posts and paging data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPostsAsync(String types, String sources, String sortBy, String groupIds, Integer perPage, Integer page, BigDecimal devicePixelRatio, BigDecimal latitude, BigDecimal longitude, BigDecimal radius, OffsetDateTime dateMin, OffsetDateTime dateMax, String outcomes, String userState, Integer includeReposts, final ApiCallback<GetPosts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPostsValidateBeforeCall(types, sources, sortBy, groupIds, perPage, page, devicePixelRatio, latitude, longitude, radius, dateMin, dateMax, outcomes, userState, includeReposts, _callback);
        Type localVarReturnType = new TypeToken<GetPosts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPostsByIds
     * @param postIds A comma separated list of the post IDs. If more than 10 post IDs are passed, only the first 10 posts will be returned.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The posts. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPostsByIdsCall(String postIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/posts/multiple";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (postIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("post_ids", postIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPostsByIdsValidateBeforeCall(String postIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'postIds' is set
        if (postIds == null) {
            throw new ApiException("Missing the required parameter 'postIds' when calling getPostsByIds(Async)");
        }

        return getPostsByIdsCall(postIds, _callback);

    }

    /**
     * Retrieve multiple posts
     * 
     * @param postIds A comma separated list of the post IDs. If more than 10 post IDs are passed, only the first 10 posts will be returned.  (required)
     * @return GetPostsByIds200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The posts. </td><td>  -  </td></tr>
     </table>
     */
    public GetPostsByIds200Response getPostsByIds(String postIds) throws ApiException {
        ApiResponse<GetPostsByIds200Response> localVarResp = getPostsByIdsWithHttpInfo(postIds);
        return localVarResp.getData();
    }

    /**
     * Retrieve multiple posts
     * 
     * @param postIds A comma separated list of the post IDs. If more than 10 post IDs are passed, only the first 10 posts will be returned.  (required)
     * @return ApiResponse&lt;GetPostsByIds200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The posts. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPostsByIds200Response> getPostsByIdsWithHttpInfo(String postIds) throws ApiException {
        okhttp3.Call localVarCall = getPostsByIdsValidateBeforeCall(postIds, null);
        Type localVarReturnType = new TypeToken<GetPostsByIds200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve multiple posts (asynchronously)
     * 
     * @param postIds A comma separated list of the post IDs. If more than 10 post IDs are passed, only the first 10 posts will be returned.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The posts. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPostsByIdsAsync(String postIds, final ApiCallback<GetPostsByIds200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPostsByIdsValidateBeforeCall(postIds, _callback);
        Type localVarReturnType = new TypeToken<GetPostsByIds200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchPosts
     * @param search The search query used to find posts. (required)
     * @param types A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin  (required)
     * @param sources A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or the current users&#39; location if latitude, longitude and radius aren&#39;t passed). &lt;br /&gt;&lt;br /&gt; NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required.  (required)
     * @param sortBy How to sort the posts that are returned.  One of: relevance, date, active, distance &lt;br /&gt;&lt;br /&gt; Relevance sorting will sort the posts that best match the search query first. Date sorting will sort posts from newest to oldest. Active sorting will sort active posts before satisfied, withdrawn and expired posts and then sort by date. Distance sorting will sort the closest posts first.  (optional, default to relevance)
     * @param groupIds A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the &#39;groups&#39; source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). &lt;br /&gt;&lt;br /&gt; NOTE: For requests using an api key instead of oauth, this field is required if the &#39;groups&#39; source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). &lt;br /&gt;&lt;br/&gt; *To determine which group IDs were used and which were discarded, use the group_ids field in the response.  (optional, default to The group IDs of every group the current user is a member of.)
     * @param perPage The number of posts to return per page (must be &gt;&#x3D; 1 and &lt;&#x3D; 100). (optional, default to 20)
     * @param page The page of posts to return. (optional, default to 1)
     * @param devicePixelRatio Client device pixel ratio used to determine thumbnail size (default 1.0). (optional, default to 1)
     * @param latitude The latitude of a point around which to return posts.  (optional)
     * @param longitude The longitude of a point around which to return posts.  (optional)
     * @param radius The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned.  (optional)
     * @param dateMin Only posts newer than or equal to this UTC date and time will be returned.  If unset, defaults to the current date and time minus 90 days.  (optional)
     * @param dateMax Only posts older than this UTC date and time will be returned.  If unset, defaults to the current date and time. (optional)
     * @param outcomes A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn &lt;br /&gt;&lt;br /&gt; There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn and not expired are returned. If set to &#39;all&#39;, all posts will be returned no matter what outcome the posts have. If set to &#39;not-promised&#39;, only posts that are not satisfied ant not withdrawn and not expired and not promised are returned.  (optional, default to )
     * @param userState If user_state is set, only posts matching the state specified will be returned.  Only one state may be passed and it must be one of the following: viewed, replied, bookmarked &lt;br&gt;&lt;br&gt; NOTE: This option will only work with oauth requests.  (optional, default to )
     * @param includeReposts If set to 1 (the default), posts that are reposts will be included. If set to 0, reposts will be excluded. See the repost_count field of post objects for details about how reposts are identified.  (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The posts and paging data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchPostsCall(String search, String types, String sources, String sortBy, String groupIds, Integer perPage, Integer page, BigDecimal devicePixelRatio, BigDecimal latitude, BigDecimal longitude, BigDecimal radius, OffsetDateTime dateMin, OffsetDateTime dateMax, String outcomes, String userState, Integer includeReposts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/posts/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (types != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("types", types));
        }

        if (sources != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sources", sources));
        }

        if (groupIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_ids", groupIds));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (devicePixelRatio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_pixel_ratio", devicePixelRatio));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (dateMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_min", dateMin));
        }

        if (dateMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_max", dateMax));
        }

        if (outcomes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outcomes", outcomes));
        }

        if (userState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_state", userState));
        }

        if (includeReposts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_reposts", includeReposts));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchPostsValidateBeforeCall(String search, String types, String sources, String sortBy, String groupIds, Integer perPage, Integer page, BigDecimal devicePixelRatio, BigDecimal latitude, BigDecimal longitude, BigDecimal radius, OffsetDateTime dateMin, OffsetDateTime dateMax, String outcomes, String userState, Integer includeReposts, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'search' is set
        if (search == null) {
            throw new ApiException("Missing the required parameter 'search' when calling searchPosts(Async)");
        }

        // verify the required parameter 'types' is set
        if (types == null) {
            throw new ApiException("Missing the required parameter 'types' when calling searchPosts(Async)");
        }

        // verify the required parameter 'sources' is set
        if (sources == null) {
            throw new ApiException("Missing the required parameter 'sources' when calling searchPosts(Async)");
        }

        return searchPostsCall(search, types, sources, sortBy, groupIds, perPage, page, devicePixelRatio, latitude, longitude, radius, dateMin, dateMax, outcomes, userState, includeReposts, _callback);

    }

    /**
     * Search posts
     * Searching posts takes the same arguments as listing posts except for the addition of the search and sort_by parameters. NOTE: When paging through the posts returned by this endpoint, there will be at most 1,000 posts that can be returned (eg. 50 pages worth of posts with the default per_page value of 20).  In areas where there are more than 1,000 posts, clients can use more specific query parameters to adjust which posts are returned. 
     * @param search The search query used to find posts. (required)
     * @param types A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin  (required)
     * @param sources A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or the current users&#39; location if latitude, longitude and radius aren&#39;t passed). &lt;br /&gt;&lt;br /&gt; NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required.  (required)
     * @param sortBy How to sort the posts that are returned.  One of: relevance, date, active, distance &lt;br /&gt;&lt;br /&gt; Relevance sorting will sort the posts that best match the search query first. Date sorting will sort posts from newest to oldest. Active sorting will sort active posts before satisfied, withdrawn and expired posts and then sort by date. Distance sorting will sort the closest posts first.  (optional, default to relevance)
     * @param groupIds A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the &#39;groups&#39; source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). &lt;br /&gt;&lt;br /&gt; NOTE: For requests using an api key instead of oauth, this field is required if the &#39;groups&#39; source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). &lt;br /&gt;&lt;br/&gt; *To determine which group IDs were used and which were discarded, use the group_ids field in the response.  (optional, default to The group IDs of every group the current user is a member of.)
     * @param perPage The number of posts to return per page (must be &gt;&#x3D; 1 and &lt;&#x3D; 100). (optional, default to 20)
     * @param page The page of posts to return. (optional, default to 1)
     * @param devicePixelRatio Client device pixel ratio used to determine thumbnail size (default 1.0). (optional, default to 1)
     * @param latitude The latitude of a point around which to return posts.  (optional)
     * @param longitude The longitude of a point around which to return posts.  (optional)
     * @param radius The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned.  (optional)
     * @param dateMin Only posts newer than or equal to this UTC date and time will be returned.  If unset, defaults to the current date and time minus 90 days.  (optional)
     * @param dateMax Only posts older than this UTC date and time will be returned.  If unset, defaults to the current date and time. (optional)
     * @param outcomes A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn &lt;br /&gt;&lt;br /&gt; There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn and not expired are returned. If set to &#39;all&#39;, all posts will be returned no matter what outcome the posts have. If set to &#39;not-promised&#39;, only posts that are not satisfied ant not withdrawn and not expired and not promised are returned.  (optional, default to )
     * @param userState If user_state is set, only posts matching the state specified will be returned.  Only one state may be passed and it must be one of the following: viewed, replied, bookmarked &lt;br&gt;&lt;br&gt; NOTE: This option will only work with oauth requests.  (optional, default to )
     * @param includeReposts If set to 1 (the default), posts that are reposts will be included. If set to 0, reposts will be excluded. See the repost_count field of post objects for details about how reposts are identified.  (optional, default to 1)
     * @return SearchPosts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The posts and paging data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public SearchPosts200Response searchPosts(String search, String types, String sources, String sortBy, String groupIds, Integer perPage, Integer page, BigDecimal devicePixelRatio, BigDecimal latitude, BigDecimal longitude, BigDecimal radius, OffsetDateTime dateMin, OffsetDateTime dateMax, String outcomes, String userState, Integer includeReposts) throws ApiException {
        ApiResponse<SearchPosts200Response> localVarResp = searchPostsWithHttpInfo(search, types, sources, sortBy, groupIds, perPage, page, devicePixelRatio, latitude, longitude, radius, dateMin, dateMax, outcomes, userState, includeReposts);
        return localVarResp.getData();
    }

    /**
     * Search posts
     * Searching posts takes the same arguments as listing posts except for the addition of the search and sort_by parameters. NOTE: When paging through the posts returned by this endpoint, there will be at most 1,000 posts that can be returned (eg. 50 pages worth of posts with the default per_page value of 20).  In areas where there are more than 1,000 posts, clients can use more specific query parameters to adjust which posts are returned. 
     * @param search The search query used to find posts. (required)
     * @param types A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin  (required)
     * @param sources A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or the current users&#39; location if latitude, longitude and radius aren&#39;t passed). &lt;br /&gt;&lt;br /&gt; NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required.  (required)
     * @param sortBy How to sort the posts that are returned.  One of: relevance, date, active, distance &lt;br /&gt;&lt;br /&gt; Relevance sorting will sort the posts that best match the search query first. Date sorting will sort posts from newest to oldest. Active sorting will sort active posts before satisfied, withdrawn and expired posts and then sort by date. Distance sorting will sort the closest posts first.  (optional, default to relevance)
     * @param groupIds A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the &#39;groups&#39; source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). &lt;br /&gt;&lt;br /&gt; NOTE: For requests using an api key instead of oauth, this field is required if the &#39;groups&#39; source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). &lt;br /&gt;&lt;br/&gt; *To determine which group IDs were used and which were discarded, use the group_ids field in the response.  (optional, default to The group IDs of every group the current user is a member of.)
     * @param perPage The number of posts to return per page (must be &gt;&#x3D; 1 and &lt;&#x3D; 100). (optional, default to 20)
     * @param page The page of posts to return. (optional, default to 1)
     * @param devicePixelRatio Client device pixel ratio used to determine thumbnail size (default 1.0). (optional, default to 1)
     * @param latitude The latitude of a point around which to return posts.  (optional)
     * @param longitude The longitude of a point around which to return posts.  (optional)
     * @param radius The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned.  (optional)
     * @param dateMin Only posts newer than or equal to this UTC date and time will be returned.  If unset, defaults to the current date and time minus 90 days.  (optional)
     * @param dateMax Only posts older than this UTC date and time will be returned.  If unset, defaults to the current date and time. (optional)
     * @param outcomes A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn &lt;br /&gt;&lt;br /&gt; There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn and not expired are returned. If set to &#39;all&#39;, all posts will be returned no matter what outcome the posts have. If set to &#39;not-promised&#39;, only posts that are not satisfied ant not withdrawn and not expired and not promised are returned.  (optional, default to )
     * @param userState If user_state is set, only posts matching the state specified will be returned.  Only one state may be passed and it must be one of the following: viewed, replied, bookmarked &lt;br&gt;&lt;br&gt; NOTE: This option will only work with oauth requests.  (optional, default to )
     * @param includeReposts If set to 1 (the default), posts that are reposts will be included. If set to 0, reposts will be excluded. See the repost_count field of post objects for details about how reposts are identified.  (optional, default to 1)
     * @return ApiResponse&lt;SearchPosts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The posts and paging data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchPosts200Response> searchPostsWithHttpInfo(String search, String types, String sources, String sortBy, String groupIds, Integer perPage, Integer page, BigDecimal devicePixelRatio, BigDecimal latitude, BigDecimal longitude, BigDecimal radius, OffsetDateTime dateMin, OffsetDateTime dateMax, String outcomes, String userState, Integer includeReposts) throws ApiException {
        okhttp3.Call localVarCall = searchPostsValidateBeforeCall(search, types, sources, sortBy, groupIds, perPage, page, devicePixelRatio, latitude, longitude, radius, dateMin, dateMax, outcomes, userState, includeReposts, null);
        Type localVarReturnType = new TypeToken<SearchPosts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search posts (asynchronously)
     * Searching posts takes the same arguments as listing posts except for the addition of the search and sort_by parameters. NOTE: When paging through the posts returned by this endpoint, there will be at most 1,000 posts that can be returned (eg. 50 pages worth of posts with the default per_page value of 20).  In areas where there are more than 1,000 posts, clients can use more specific query parameters to adjust which posts are returned. 
     * @param search The search query used to find posts. (required)
     * @param types A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin  (required)
     * @param sources A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or the current users&#39; location if latitude, longitude and radius aren&#39;t passed). &lt;br /&gt;&lt;br /&gt; NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required.  (required)
     * @param sortBy How to sort the posts that are returned.  One of: relevance, date, active, distance &lt;br /&gt;&lt;br /&gt; Relevance sorting will sort the posts that best match the search query first. Date sorting will sort posts from newest to oldest. Active sorting will sort active posts before satisfied, withdrawn and expired posts and then sort by date. Distance sorting will sort the closest posts first.  (optional, default to relevance)
     * @param groupIds A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the &#39;groups&#39; source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). &lt;br /&gt;&lt;br /&gt; NOTE: For requests using an api key instead of oauth, this field is required if the &#39;groups&#39; source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). &lt;br /&gt;&lt;br/&gt; *To determine which group IDs were used and which were discarded, use the group_ids field in the response.  (optional, default to The group IDs of every group the current user is a member of.)
     * @param perPage The number of posts to return per page (must be &gt;&#x3D; 1 and &lt;&#x3D; 100). (optional, default to 20)
     * @param page The page of posts to return. (optional, default to 1)
     * @param devicePixelRatio Client device pixel ratio used to determine thumbnail size (default 1.0). (optional, default to 1)
     * @param latitude The latitude of a point around which to return posts.  (optional)
     * @param longitude The longitude of a point around which to return posts.  (optional)
     * @param radius The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned.  (optional)
     * @param dateMin Only posts newer than or equal to this UTC date and time will be returned.  If unset, defaults to the current date and time minus 90 days.  (optional)
     * @param dateMax Only posts older than this UTC date and time will be returned.  If unset, defaults to the current date and time. (optional)
     * @param outcomes A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn &lt;br /&gt;&lt;br /&gt; There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn and not expired are returned. If set to &#39;all&#39;, all posts will be returned no matter what outcome the posts have. If set to &#39;not-promised&#39;, only posts that are not satisfied ant not withdrawn and not expired and not promised are returned.  (optional, default to )
     * @param userState If user_state is set, only posts matching the state specified will be returned.  Only one state may be passed and it must be one of the following: viewed, replied, bookmarked &lt;br&gt;&lt;br&gt; NOTE: This option will only work with oauth requests.  (optional, default to )
     * @param includeReposts If set to 1 (the default), posts that are reposts will be included. If set to 0, reposts will be excluded. See the repost_count field of post objects for details about how reposts are identified.  (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The posts and paging data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchPostsAsync(String search, String types, String sources, String sortBy, String groupIds, Integer perPage, Integer page, BigDecimal devicePixelRatio, BigDecimal latitude, BigDecimal longitude, BigDecimal radius, OffsetDateTime dateMin, OffsetDateTime dateMax, String outcomes, String userState, Integer includeReposts, final ApiCallback<SearchPosts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchPostsValidateBeforeCall(search, types, sources, sortBy, groupIds, perPage, page, devicePixelRatio, latitude, longitude, radius, dateMin, dateMax, outcomes, userState, includeReposts, _callback);
        Type localVarReturnType = new TypeToken<SearchPosts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
