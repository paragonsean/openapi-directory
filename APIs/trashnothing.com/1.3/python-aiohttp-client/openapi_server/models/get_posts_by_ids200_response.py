# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.post import Post
from openapi_server import util


class GetPostsByIds200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, forbidden: List[str]=None, not_found: List[str]=None, posts: List[Post]=None):
        """GetPostsByIds200Response - a model defined in OpenAPI

        :param forbidden: The forbidden of this GetPostsByIds200Response.
        :param not_found: The not_found of this GetPostsByIds200Response.
        :param posts: The posts of this GetPostsByIds200Response.
        """
        self.openapi_types = {
            'forbidden': List[str],
            'not_found': List[str],
            'posts': List[Post]
        }

        self.attribute_map = {
            'forbidden': 'forbidden',
            'not_found': 'not_found',
            'posts': 'posts'
        }

        self._forbidden = forbidden
        self._not_found = not_found
        self._posts = posts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetPostsByIds200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_posts_by_ids_200_response of this GetPostsByIds200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def forbidden(self):
        """Gets the forbidden of this GetPostsByIds200Response.

        The IDs of posts that are forbidden for the current user.

        :return: The forbidden of this GetPostsByIds200Response.
        :rtype: List[str]
        """
        return self._forbidden

    @forbidden.setter
    def forbidden(self, forbidden):
        """Sets the forbidden of this GetPostsByIds200Response.

        The IDs of posts that are forbidden for the current user.

        :param forbidden: The forbidden of this GetPostsByIds200Response.
        :type forbidden: List[str]
        """

        self._forbidden = forbidden

    @property
    def not_found(self):
        """Gets the not_found of this GetPostsByIds200Response.

        The IDs of posts that weren't found (may have been deleted or never existed).

        :return: The not_found of this GetPostsByIds200Response.
        :rtype: List[str]
        """
        return self._not_found

    @not_found.setter
    def not_found(self, not_found):
        """Sets the not_found of this GetPostsByIds200Response.

        The IDs of posts that weren't found (may have been deleted or never existed).

        :param not_found: The not_found of this GetPostsByIds200Response.
        :type not_found: List[str]
        """

        self._not_found = not_found

    @property
    def posts(self):
        """Gets the posts of this GetPostsByIds200Response.


        :return: The posts of this GetPostsByIds200Response.
        :rtype: List[Post]
        """
        return self._posts

    @posts.setter
    def posts(self, posts):
        """Sets the posts of this GetPostsByIds200Response.


        :param posts: The posts of this GetPostsByIds200Response.
        :type posts: List[Post]
        """

        self._posts = posts
