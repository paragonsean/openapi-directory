# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.photo import Photo
from openapi_server import util


class Post(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, _date: datetime=None, expiration: datetime=None, footer: str=None, group_id: str=None, latitude: float=None, longitude: float=None, outcome: str=None, photos: List[Photo]=None, post_id: str=None, repost_count: int=None, reselling: bool=None, source: str=None, title: str=None, type: str=None, url: str=None, user_id: str=None):
        """Post - a model defined in OpenAPI

        :param content: The content of this Post.
        :param _date: The _date of this Post.
        :param expiration: The expiration of this Post.
        :param footer: The footer of this Post.
        :param group_id: The group_id of this Post.
        :param latitude: The latitude of this Post.
        :param longitude: The longitude of this Post.
        :param outcome: The outcome of this Post.
        :param photos: The photos of this Post.
        :param post_id: The post_id of this Post.
        :param repost_count: The repost_count of this Post.
        :param reselling: The reselling of this Post.
        :param source: The source of this Post.
        :param title: The title of this Post.
        :param type: The type of this Post.
        :param url: The url of this Post.
        :param user_id: The user_id of this Post.
        """
        self.openapi_types = {
            'content': str,
            '_date': datetime,
            'expiration': datetime,
            'footer': str,
            'group_id': str,
            'latitude': float,
            'longitude': float,
            'outcome': str,
            'photos': List[Photo],
            'post_id': str,
            'repost_count': int,
            'reselling': bool,
            'source': str,
            'title': str,
            'type': str,
            'url': str,
            'user_id': str
        }

        self.attribute_map = {
            'content': 'content',
            '_date': 'date',
            'expiration': 'expiration',
            'footer': 'footer',
            'group_id': 'group_id',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'outcome': 'outcome',
            'photos': 'photos',
            'post_id': 'post_id',
            'repost_count': 'repost_count',
            'reselling': 'reselling',
            'source': 'source',
            'title': 'title',
            'type': 'type',
            'url': 'url',
            'user_id': 'user_id'
        }

        self._content = content
        self.__date = _date
        self._expiration = expiration
        self._footer = footer
        self._group_id = group_id
        self._latitude = latitude
        self._longitude = longitude
        self._outcome = outcome
        self._photos = photos
        self._post_id = post_id
        self._repost_count = repost_count
        self._reselling = reselling
        self._source = source
        self._title = title
        self._type = type
        self._url = url
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Post':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Post of this Post.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this Post.


        :return: The content of this Post.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Post.


        :param content: The content of this Post.
        :type content: str
        """

        self._content = content

    @property
    def _date(self):
        """Gets the _date of this Post.

        The UTC date and time when the post was published.

        :return: The _date of this Post.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Post.

        The UTC date and time when the post was published.

        :param _date: The _date of this Post.
        :type _date: datetime
        """

        self.__date = _date

    @property
    def expiration(self):
        """Gets the expiration of this Post.

        The UTC date and time when the post will expire.   Currently only offer and wanted posts expire.  For all other posts, expiration is always null. 

        :return: The expiration of this Post.
        :rtype: datetime
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this Post.

        The UTC date and time when the post will expire.   Currently only offer and wanted posts expire.  For all other posts, expiration is always null. 

        :param expiration: The expiration of this Post.
        :type expiration: datetime
        """

        self._expiration = expiration

    @property
    def footer(self):
        """Gets the footer of this Post.

        Some groups add footers to posts that are separate and sometimes unrelated to the post itself - such as reminders about group rules or features (may be null).

        :return: The footer of this Post.
        :rtype: str
        """
        return self._footer

    @footer.setter
    def footer(self, footer):
        """Sets the footer of this Post.

        Some groups add footers to posts that are separate and sometimes unrelated to the post itself - such as reminders about group rules or features (may be null).

        :param footer: The footer of this Post.
        :type footer: str
        """

        self._footer = footer

    @property
    def group_id(self):
        """Gets the group_id of this Post.

        The group ID of the post.  For public posts, this is always null. 

        :return: The group_id of this Post.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this Post.

        The group ID of the post.  For public posts, this is always null. 

        :param group_id: The group_id of this Post.
        :type group_id: str
        """

        self._group_id = group_id

    @property
    def latitude(self):
        """Gets the latitude of this Post.

        May be null if a post hasn't been mapped.

        :return: The latitude of this Post.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Post.

        May be null if a post hasn't been mapped.

        :param latitude: The latitude of this Post.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this Post.

        May be null if a post hasn't been mapped.

        :return: The longitude of this Post.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Post.

        May be null if a post hasn't been mapped.

        :param longitude: The longitude of this Post.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def outcome(self):
        """Gets the outcome of this Post.

        For offer and wanted posts, this indicates the outcome of the post which is null if no outcome has been set yet.   <br /><br /> Offer post outcomes will be one of: satisfied, withdrawn, promised, expired <br /><br /> Wanted post outcomes will be one of: satisfied, withdrawn, expired <br /><br /> For all other posts, outcome is always null. 

        :return: The outcome of this Post.
        :rtype: str
        """
        return self._outcome

    @outcome.setter
    def outcome(self, outcome):
        """Sets the outcome of this Post.

        For offer and wanted posts, this indicates the outcome of the post which is null if no outcome has been set yet.   <br /><br /> Offer post outcomes will be one of: satisfied, withdrawn, promised, expired <br /><br /> Wanted post outcomes will be one of: satisfied, withdrawn, expired <br /><br /> For all other posts, outcome is always null. 

        :param outcome: The outcome of this Post.
        :type outcome: str
        """

        self._outcome = outcome

    @property
    def photos(self):
        """Gets the photos of this Post.

        Details about the photos associated with this post (may be null if there are no photos).

        :return: The photos of this Post.
        :rtype: List[Photo]
        """
        return self._photos

    @photos.setter
    def photos(self, photos):
        """Sets the photos of this Post.

        Details about the photos associated with this post (may be null if there are no photos).

        :param photos: The photos of this Post.
        :type photos: List[Photo]
        """

        self._photos = photos

    @property
    def post_id(self):
        """Gets the post_id of this Post.


        :return: The post_id of this Post.
        :rtype: str
        """
        return self._post_id

    @post_id.setter
    def post_id(self, post_id):
        """Sets the post_id of this Post.


        :param post_id: The post_id of this Post.
        :type post_id: str
        """

        self._post_id = post_id

    @property
    def repost_count(self):
        """Gets the repost_count of this Post.

        The count of how many times this post has been reposted in the last 90 days. A value of zero is used to indicate that the post is not a repost. The count is specific to the source of the post (eg. the specific group the post is on). If a post is crossposted to multiple groups, the repost_count of the post on each group may be different for each group depending on how many times the post has been posted on that group in the last 90 days. 

        :return: The repost_count of this Post.
        :rtype: int
        """
        return self._repost_count

    @repost_count.setter
    def repost_count(self, repost_count):
        """Sets the repost_count of this Post.

        The count of how many times this post has been reposted in the last 90 days. A value of zero is used to indicate that the post is not a repost. The count is specific to the source of the post (eg. the specific group the post is on). If a post is crossposted to multiple groups, the repost_count of the post on each group may be different for each group depending on how many times the post has been posted on that group in the last 90 days. 

        :param repost_count: The repost_count of this Post.
        :type repost_count: int
        """

        self._repost_count = repost_count

    @property
    def reselling(self):
        """Gets the reselling of this Post.

        For wanted posts, whether the item is being requested in order to resell it or not. Will be null for all posts that are not wanted posts and for wanted posts where the poster hasn't indicated whether or not they intend to resell the item they are requesting. 

        :return: The reselling of this Post.
        :rtype: bool
        """
        return self._reselling

    @reselling.setter
    def reselling(self, reselling):
        """Sets the reselling of this Post.

        For wanted posts, whether the item is being requested in order to resell it or not. Will be null for all posts that are not wanted posts and for wanted posts where the poster hasn't indicated whether or not they intend to resell the item they are requesting. 

        :param reselling: The reselling of this Post.
        :type reselling: bool
        """

        self._reselling = reselling

    @property
    def source(self):
        """Gets the source of this Post.

        The source of the post.  One of: groups, trashnothing, open_archive_groups.  A value of groups or open_archive_groups indicates the post is from a group and the group_id field will contain the ID of the group. A value of trashnothing indicates the post is a public post not associated with any group. 

        :return: The source of this Post.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Post.

        The source of the post.  One of: groups, trashnothing, open_archive_groups.  A value of groups or open_archive_groups indicates the post is from a group and the group_id field will contain the ID of the group. A value of trashnothing indicates the post is a public post not associated with any group. 

        :param source: The source of this Post.
        :type source: str
        """

        self._source = source

    @property
    def title(self):
        """Gets the title of this Post.


        :return: The title of this Post.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Post.


        :param title: The title of this Post.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this Post.

        The type of post.  One of: offer, taken, wanted, received, admin 

        :return: The type of this Post.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Post.

        The type of post.  One of: offer, taken, wanted, received, admin 

        :param type: The type of this Post.
        :type type: str
        """

        self._type = type

    @property
    def url(self):
        """Gets the url of this Post.

        The link to use to view the post on the trash nothing site.

        :return: The url of this Post.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Post.

        The link to use to view the post on the trash nothing site.

        :param url: The url of this Post.
        :type url: str
        """

        self._url = url

    @property
    def user_id(self):
        """Gets the user_id of this Post.


        :return: The user_id of this Post.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Post.


        :param user_id: The user_id of this Post.
        :type user_id: str
        """

        self._user_id = user_id
