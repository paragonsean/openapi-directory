# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group import Group
from openapi_server import util


class SearchGroups200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_index: int=None, groups: List[Group]=None, num_groups: int=None, num_pages: int=None, page: int=None, per_page: int=None, start_index: int=None):
        """SearchGroups200Response - a model defined in OpenAPI

        :param end_index: The end_index of this SearchGroups200Response.
        :param groups: The groups of this SearchGroups200Response.
        :param num_groups: The num_groups of this SearchGroups200Response.
        :param num_pages: The num_pages of this SearchGroups200Response.
        :param page: The page of this SearchGroups200Response.
        :param per_page: The per_page of this SearchGroups200Response.
        :param start_index: The start_index of this SearchGroups200Response.
        """
        self.openapi_types = {
            'end_index': int,
            'groups': List[Group],
            'num_groups': int,
            'num_pages': int,
            'page': int,
            'per_page': int,
            'start_index': int
        }

        self.attribute_map = {
            'end_index': 'end_index',
            'groups': 'groups',
            'num_groups': 'num_groups',
            'num_pages': 'num_pages',
            'page': 'page',
            'per_page': 'per_page',
            'start_index': 'start_index'
        }

        self._end_index = end_index
        self._groups = groups
        self._num_groups = num_groups
        self._num_pages = num_pages
        self._page = page
        self._per_page = per_page
        self._start_index = start_index

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchGroups200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The search_groups_200_response of this SearchGroups200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_index(self):
        """Gets the end_index of this SearchGroups200Response.

        The index of the last group being returned (an integer between start_index and num_groups).

        :return: The end_index of this SearchGroups200Response.
        :rtype: int
        """
        return self._end_index

    @end_index.setter
    def end_index(self, end_index):
        """Sets the end_index of this SearchGroups200Response.

        The index of the last group being returned (an integer between start_index and num_groups).

        :param end_index: The end_index of this SearchGroups200Response.
        :type end_index: int
        """

        self._end_index = end_index

    @property
    def groups(self):
        """Gets the groups of this SearchGroups200Response.


        :return: The groups of this SearchGroups200Response.
        :rtype: List[Group]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this SearchGroups200Response.


        :param groups: The groups of this SearchGroups200Response.
        :type groups: List[Group]
        """

        self._groups = groups

    @property
    def num_groups(self):
        """Gets the num_groups of this SearchGroups200Response.

        The total number of groups available.

        :return: The num_groups of this SearchGroups200Response.
        :rtype: int
        """
        return self._num_groups

    @num_groups.setter
    def num_groups(self, num_groups):
        """Sets the num_groups of this SearchGroups200Response.

        The total number of groups available.

        :param num_groups: The num_groups of this SearchGroups200Response.
        :type num_groups: int
        """

        self._num_groups = num_groups

    @property
    def num_pages(self):
        """Gets the num_pages of this SearchGroups200Response.

        The total number of pages available.

        :return: The num_pages of this SearchGroups200Response.
        :rtype: int
        """
        return self._num_pages

    @num_pages.setter
    def num_pages(self, num_pages):
        """Sets the num_pages of this SearchGroups200Response.

        The total number of pages available.

        :param num_pages: The num_pages of this SearchGroups200Response.
        :type num_pages: int
        """

        self._num_pages = num_pages

    @property
    def page(self):
        """Gets the page of this SearchGroups200Response.

        The page number of the groups being returned.

        :return: The page of this SearchGroups200Response.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this SearchGroups200Response.

        The page number of the groups being returned.

        :param page: The page of this SearchGroups200Response.
        :type page: int
        """

        self._page = page

    @property
    def per_page(self):
        """Gets the per_page of this SearchGroups200Response.

        The number of groups being returned per page.

        :return: The per_page of this SearchGroups200Response.
        :rtype: int
        """
        return self._per_page

    @per_page.setter
    def per_page(self, per_page):
        """Sets the per_page of this SearchGroups200Response.

        The number of groups being returned per page.

        :param per_page: The per_page of this SearchGroups200Response.
        :type per_page: int
        """

        self._per_page = per_page

    @property
    def start_index(self):
        """Gets the start_index of this SearchGroups200Response.

        The index of the first group being returned (an integer between 1 and num_groups).

        :return: The start_index of this SearchGroups200Response.
        :rtype: int
        """
        return self._start_index

    @start_index.setter
    def start_index(self, start_index):
        """Sets the start_index of this SearchGroups200Response.

        The index of the first group being returned (an integer between 1 and num_groups).

        :param start_index: The start_index of this SearchGroups200Response.
        :type start_index: int
        """

        self._start_index = start_index
