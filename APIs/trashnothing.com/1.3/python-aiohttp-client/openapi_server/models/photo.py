# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.photo_images_inner import PhotoImagesInner
from openapi_server import util


class Photo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blurhash: str=None, images: List[PhotoImagesInner]=None, photo_id: str=None, thumbnail: str=None, url: str=None):
        """Photo - a model defined in OpenAPI

        :param blurhash: The blurhash of this Photo.
        :param images: The images of this Photo.
        :param photo_id: The photo_id of this Photo.
        :param thumbnail: The thumbnail of this Photo.
        :param url: The url of this Photo.
        """
        self.openapi_types = {
            'blurhash': str,
            'images': List[PhotoImagesInner],
            'photo_id': str,
            'thumbnail': str,
            'url': str
        }

        self.attribute_map = {
            'blurhash': 'blurhash',
            'images': 'images',
            'photo_id': 'photo_id',
            'thumbnail': 'thumbnail',
            'url': 'url'
        }

        self._blurhash = blurhash
        self._images = images
        self._photo_id = photo_id
        self._thumbnail = thumbnail
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Photo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Photo of this Photo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blurhash(self):
        """Gets the blurhash of this Photo.

        A blurhash of the photo that can be used as a placeholder while the photo is loading (see: https://github.com/woltapp/blurhash). May be null if no blurhash is available and the length of the blurhash can vary based on the photo. 

        :return: The blurhash of this Photo.
        :rtype: str
        """
        return self._blurhash

    @blurhash.setter
    def blurhash(self, blurhash):
        """Sets the blurhash of this Photo.

        A blurhash of the photo that can be used as a placeholder while the photo is loading (see: https://github.com/woltapp/blurhash). May be null if no blurhash is available and the length of the blurhash can vary based on the photo. 

        :param blurhash: The blurhash of this Photo.
        :type blurhash: str
        """

        self._blurhash = blurhash

    @property
    def images(self):
        """Gets the images of this Photo.

        All the versions of this photo ordered from smallest to largest.  This list is guaranteed to include the photos specified by the above thumbnail and url properties.

        :return: The images of this Photo.
        :rtype: List[PhotoImagesInner]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this Photo.

        All the versions of this photo ordered from smallest to largest.  This list is guaranteed to include the photos specified by the above thumbnail and url properties.

        :param images: The images of this Photo.
        :type images: List[PhotoImagesInner]
        """

        self._images = images

    @property
    def photo_id(self):
        """Gets the photo_id of this Photo.


        :return: The photo_id of this Photo.
        :rtype: str
        """
        return self._photo_id

    @photo_id.setter
    def photo_id(self, photo_id):
        """Sets the photo_id of this Photo.


        :param photo_id: The photo_id of this Photo.
        :type photo_id: str
        """

        self._photo_id = photo_id

    @property
    def thumbnail(self):
        """Gets the thumbnail of this Photo.

        A URL to a thumbnail of this photo.  The size of the thumbnail depends on the device_pixel_ratio parameter and it is not guaranteed to be square.

        :return: The thumbnail of this Photo.
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this Photo.

        A URL to a thumbnail of this photo.  The size of the thumbnail depends on the device_pixel_ratio parameter and it is not guaranteed to be square.

        :param thumbnail: The thumbnail of this Photo.
        :type thumbnail: str
        """

        self._thumbnail = thumbnail

    @property
    def url(self):
        """Gets the url of this Photo.

        A URL to a large version of this photo (but not necessarily the largest size available).

        :return: The url of this Photo.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Photo.

        A URL to a large version of this photo (but not necessarily the largest size available).

        :param url: The url of this Photo.
        :type url: str
        """

        self._url = url
