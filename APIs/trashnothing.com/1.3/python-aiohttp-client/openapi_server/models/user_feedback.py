# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserFeedback(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, percent_positive: float=None, restriction: str=None, score: int=None):
        """UserFeedback - a model defined in OpenAPI

        :param percent_positive: The percent_positive of this UserFeedback.
        :param restriction: The restriction of this UserFeedback.
        :param score: The score of this UserFeedback.
        """
        self.openapi_types = {
            'percent_positive': float,
            'restriction': str,
            'score': int
        }

        self.attribute_map = {
            'percent_positive': 'percent_positive',
            'restriction': 'restriction',
            'score': 'score'
        }

        self._percent_positive = percent_positive
        self._restriction = restriction
        self._score = score

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserFeedback':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User_feedback of this UserFeedback.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def percent_positive(self):
        """Gets the percent_positive of this UserFeedback.

        The percent of feedback that this user has received in the last year that was positive. May be null if a user has not received enough feedback to calculate a percentage. 

        :return: The percent_positive of this UserFeedback.
        :rtype: float
        """
        return self._percent_positive

    @percent_positive.setter
    def percent_positive(self, percent_positive):
        """Sets the percent_positive of this UserFeedback.

        The percent of feedback that this user has received in the last year that was positive. May be null if a user has not received enough feedback to calculate a percentage. 

        :param percent_positive: The percent_positive of this UserFeedback.
        :type percent_positive: float
        """
        if percent_positive is not None and percent_positive > 100:
            raise ValueError("Invalid value for `percent_positive`, must be a value less than or equal to `100`")
        if percent_positive is not None and percent_positive < 0:
            raise ValueError("Invalid value for `percent_positive`, must be a value greater than or equal to `0`")

        self._percent_positive = percent_positive

    @property
    def restriction(self):
        """Gets the restriction of this UserFeedback.

        If the current user can leave positive or negative feedback on this user then restriction is null. <br /><br /> Otherwise, restriction is set to a string that explains why feedback is currently restricted and what type of feedback is restricted. The string will be one of the following:  no-recent-messages, negative-score, moderator, [days]-day-wait-for-negative <br /><br /> - **no-recent-messages**: The current user has not received any messages from this user in the last 30 days. <br /> - **negative-score**: The current user has a negative feedback and will not be able to leave feedback until their score is >= 0. <br /> - **moderator**: The user is a moderator and leaving feedback on moderators is not currently supported. <br /> - **[days]-day-wait-for-negative**: Positive feedback is not restricted but the current user must wait   some number of days before they will be able to leave negative feedback on this user.  This string can    change depending on the number of days.  For example, when the current user must wait one day, the   string will be '1-day-wait-for-negative'.  A wait is necessary because a lot of negative feedback results   from communication issues that are resolved with more time. 

        :return: The restriction of this UserFeedback.
        :rtype: str
        """
        return self._restriction

    @restriction.setter
    def restriction(self, restriction):
        """Sets the restriction of this UserFeedback.

        If the current user can leave positive or negative feedback on this user then restriction is null. <br /><br /> Otherwise, restriction is set to a string that explains why feedback is currently restricted and what type of feedback is restricted. The string will be one of the following:  no-recent-messages, negative-score, moderator, [days]-day-wait-for-negative <br /><br /> - **no-recent-messages**: The current user has not received any messages from this user in the last 30 days. <br /> - **negative-score**: The current user has a negative feedback and will not be able to leave feedback until their score is >= 0. <br /> - **moderator**: The user is a moderator and leaving feedback on moderators is not currently supported. <br /> - **[days]-day-wait-for-negative**: Positive feedback is not restricted but the current user must wait   some number of days before they will be able to leave negative feedback on this user.  This string can    change depending on the number of days.  For example, when the current user must wait one day, the   string will be '1-day-wait-for-negative'.  A wait is necessary because a lot of negative feedback results   from communication issues that are resolved with more time. 

        :param restriction: The restriction of this UserFeedback.
        :type restriction: str
        """

        self._restriction = restriction

    @property
    def score(self):
        """Gets the score of this UserFeedback.

        The feedback score of this user.  Higher scores are better.   Scores are calculated by substracting the total number of negative feedback from the total number of positive feedback that a user has received.  May be null if a user has not received enough feedback to calculate a score. 

        :return: The score of this UserFeedback.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this UserFeedback.

        The feedback score of this user.  Higher scores are better.   Scores are calculated by substracting the total number of negative feedback from the total number of positive feedback that a user has received.  May be null if a user has not received enough feedback to calculate a score. 

        :param score: The score of this UserFeedback.
        :type score: int
        """

        self._score = score
