# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.feedback import Feedback
from openapi_server.models.group import Group
from openapi_server.models.post import Post
from openapi_server.models.user import User
from openapi_server import util


class GetPostAndRelatedData200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: User=None, author_offer_count: int=None, author_posts: List[Post]=None, author_wanted_count: int=None, bookmarked: bool=None, feedback: List[Feedback]=None, groups: List[Group]=None, post: Post=None, replied: bool=None, user_can_reply: bool=None, viewed: bool=None):
        """GetPostAndRelatedData200Response - a model defined in OpenAPI

        :param author: The author of this GetPostAndRelatedData200Response.
        :param author_offer_count: The author_offer_count of this GetPostAndRelatedData200Response.
        :param author_posts: The author_posts of this GetPostAndRelatedData200Response.
        :param author_wanted_count: The author_wanted_count of this GetPostAndRelatedData200Response.
        :param bookmarked: The bookmarked of this GetPostAndRelatedData200Response.
        :param feedback: The feedback of this GetPostAndRelatedData200Response.
        :param groups: The groups of this GetPostAndRelatedData200Response.
        :param post: The post of this GetPostAndRelatedData200Response.
        :param replied: The replied of this GetPostAndRelatedData200Response.
        :param user_can_reply: The user_can_reply of this GetPostAndRelatedData200Response.
        :param viewed: The viewed of this GetPostAndRelatedData200Response.
        """
        self.openapi_types = {
            'author': User,
            'author_offer_count': int,
            'author_posts': List[Post],
            'author_wanted_count': int,
            'bookmarked': bool,
            'feedback': List[Feedback],
            'groups': List[Group],
            'post': Post,
            'replied': bool,
            'user_can_reply': bool,
            'viewed': bool
        }

        self.attribute_map = {
            'author': 'author',
            'author_offer_count': 'author_offer_count',
            'author_posts': 'author_posts',
            'author_wanted_count': 'author_wanted_count',
            'bookmarked': 'bookmarked',
            'feedback': 'feedback',
            'groups': 'groups',
            'post': 'post',
            'replied': 'replied',
            'user_can_reply': 'user_can_reply',
            'viewed': 'viewed'
        }

        self._author = author
        self._author_offer_count = author_offer_count
        self._author_posts = author_posts
        self._author_wanted_count = author_wanted_count
        self._bookmarked = bookmarked
        self._feedback = feedback
        self._groups = groups
        self._post = post
        self._replied = replied
        self._user_can_reply = user_can_reply
        self._viewed = viewed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetPostAndRelatedData200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_post_and_related_data_200_response of this GetPostAndRelatedData200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this GetPostAndRelatedData200Response.


        :return: The author of this GetPostAndRelatedData200Response.
        :rtype: User
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this GetPostAndRelatedData200Response.


        :param author: The author of this GetPostAndRelatedData200Response.
        :type author: User
        """

        self._author = author

    @property
    def author_offer_count(self):
        """Gets the author_offer_count of this GetPostAndRelatedData200Response.

        Count of offer posts made by the post author in the last 90 days.

        :return: The author_offer_count of this GetPostAndRelatedData200Response.
        :rtype: int
        """
        return self._author_offer_count

    @author_offer_count.setter
    def author_offer_count(self, author_offer_count):
        """Sets the author_offer_count of this GetPostAndRelatedData200Response.

        Count of offer posts made by the post author in the last 90 days.

        :param author_offer_count: The author_offer_count of this GetPostAndRelatedData200Response.
        :type author_offer_count: int
        """

        self._author_offer_count = author_offer_count

    @property
    def author_posts(self):
        """Gets the author_posts of this GetPostAndRelatedData200Response.

        Other active posts from the post author in the last 90 days. A maximum of 30 posts will be returned. 

        :return: The author_posts of this GetPostAndRelatedData200Response.
        :rtype: List[Post]
        """
        return self._author_posts

    @author_posts.setter
    def author_posts(self, author_posts):
        """Sets the author_posts of this GetPostAndRelatedData200Response.

        Other active posts from the post author in the last 90 days. A maximum of 30 posts will be returned. 

        :param author_posts: The author_posts of this GetPostAndRelatedData200Response.
        :type author_posts: List[Post]
        """

        self._author_posts = author_posts

    @property
    def author_wanted_count(self):
        """Gets the author_wanted_count of this GetPostAndRelatedData200Response.

        Count of wanted posts made by the post author in the last 90 days.

        :return: The author_wanted_count of this GetPostAndRelatedData200Response.
        :rtype: int
        """
        return self._author_wanted_count

    @author_wanted_count.setter
    def author_wanted_count(self, author_wanted_count):
        """Sets the author_wanted_count of this GetPostAndRelatedData200Response.

        Count of wanted posts made by the post author in the last 90 days.

        :param author_wanted_count: The author_wanted_count of this GetPostAndRelatedData200Response.
        :type author_wanted_count: int
        """

        self._author_wanted_count = author_wanted_count

    @property
    def bookmarked(self):
        """Gets the bookmarked of this GetPostAndRelatedData200Response.

        Whether or not the current user has bookmarked this post.  Will be null for api key requests and for the current users' posts.

        :return: The bookmarked of this GetPostAndRelatedData200Response.
        :rtype: bool
        """
        return self._bookmarked

    @bookmarked.setter
    def bookmarked(self, bookmarked):
        """Sets the bookmarked of this GetPostAndRelatedData200Response.

        Whether or not the current user has bookmarked this post.  Will be null for api key requests and for the current users' posts.

        :param bookmarked: The bookmarked of this GetPostAndRelatedData200Response.
        :type bookmarked: bool
        """

        self._bookmarked = bookmarked

    @property
    def feedback(self):
        """Gets the feedback of this GetPostAndRelatedData200Response.

        Feedback the current user has left on the post author.

        :return: The feedback of this GetPostAndRelatedData200Response.
        :rtype: List[Feedback]
        """
        return self._feedback

    @feedback.setter
    def feedback(self, feedback):
        """Sets the feedback of this GetPostAndRelatedData200Response.

        Feedback the current user has left on the post author.

        :param feedback: The feedback of this GetPostAndRelatedData200Response.
        :type feedback: List[Feedback]
        """

        self._feedback = feedback

    @property
    def groups(self):
        """Gets the groups of this GetPostAndRelatedData200Response.

        The groups the post is published on.

        :return: The groups of this GetPostAndRelatedData200Response.
        :rtype: List[Group]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this GetPostAndRelatedData200Response.

        The groups the post is published on.

        :param groups: The groups of this GetPostAndRelatedData200Response.
        :type groups: List[Group]
        """

        self._groups = groups

    @property
    def post(self):
        """Gets the post of this GetPostAndRelatedData200Response.


        :return: The post of this GetPostAndRelatedData200Response.
        :rtype: Post
        """
        return self._post

    @post.setter
    def post(self, post):
        """Sets the post of this GetPostAndRelatedData200Response.


        :param post: The post of this GetPostAndRelatedData200Response.
        :type post: Post
        """

        self._post = post

    @property
    def replied(self):
        """Gets the replied of this GetPostAndRelatedData200Response.

        Whether or not the current user has replied to this post.  Will be null for api key requests and for the current users' posts.

        :return: The replied of this GetPostAndRelatedData200Response.
        :rtype: bool
        """
        return self._replied

    @replied.setter
    def replied(self, replied):
        """Sets the replied of this GetPostAndRelatedData200Response.

        Whether or not the current user has replied to this post.  Will be null for api key requests and for the current users' posts.

        :param replied: The replied of this GetPostAndRelatedData200Response.
        :type replied: bool
        """

        self._replied = replied

    @property
    def user_can_reply(self):
        """Gets the user_can_reply of this GetPostAndRelatedData200Response.

        Whether or not the current user (if any) can reply to this post. Unverified users cannot reply to posts until they verify their account. 

        :return: The user_can_reply of this GetPostAndRelatedData200Response.
        :rtype: bool
        """
        return self._user_can_reply

    @user_can_reply.setter
    def user_can_reply(self, user_can_reply):
        """Sets the user_can_reply of this GetPostAndRelatedData200Response.

        Whether or not the current user (if any) can reply to this post. Unverified users cannot reply to posts until they verify their account. 

        :param user_can_reply: The user_can_reply of this GetPostAndRelatedData200Response.
        :type user_can_reply: bool
        """

        self._user_can_reply = user_can_reply

    @property
    def viewed(self):
        """Gets the viewed of this GetPostAndRelatedData200Response.

        Whether or not the current user has previously viewed this post.  Will be null for api key requests and for the current users' posts.

        :return: The viewed of this GetPostAndRelatedData200Response.
        :rtype: bool
        """
        return self._viewed

    @viewed.setter
    def viewed(self, viewed):
        """Sets the viewed of this GetPostAndRelatedData200Response.

        Whether or not the current user has previously viewed this post.  Will be null for api key requests and for the current users' posts.

        :param viewed: The viewed of this GetPostAndRelatedData200Response.
        :type viewed: bool
        """

        self._viewed = viewed
