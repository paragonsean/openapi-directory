# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.post import Post
from openapi_server import util


class GetPosts200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_index: int=None, group_ids: List[str]=None, last_listings_view: datetime=None, num_pages: int=None, num_posts: int=None, page: int=None, per_page: int=None, posts: List[Post]=None, start_index: int=None):
        """GetPosts200Response - a model defined in OpenAPI

        :param end_index: The end_index of this GetPosts200Response.
        :param group_ids: The group_ids of this GetPosts200Response.
        :param last_listings_view: The last_listings_view of this GetPosts200Response.
        :param num_pages: The num_pages of this GetPosts200Response.
        :param num_posts: The num_posts of this GetPosts200Response.
        :param page: The page of this GetPosts200Response.
        :param per_page: The per_page of this GetPosts200Response.
        :param posts: The posts of this GetPosts200Response.
        :param start_index: The start_index of this GetPosts200Response.
        """
        self.openapi_types = {
            'end_index': int,
            'group_ids': List[str],
            'last_listings_view': datetime,
            'num_pages': int,
            'num_posts': int,
            'page': int,
            'per_page': int,
            'posts': List[Post],
            'start_index': int
        }

        self.attribute_map = {
            'end_index': 'end_index',
            'group_ids': 'group_ids',
            'last_listings_view': 'last_listings_view',
            'num_pages': 'num_pages',
            'num_posts': 'num_posts',
            'page': 'page',
            'per_page': 'per_page',
            'posts': 'posts',
            'start_index': 'start_index'
        }

        self._end_index = end_index
        self._group_ids = group_ids
        self._last_listings_view = last_listings_view
        self._num_pages = num_pages
        self._num_posts = num_posts
        self._page = page
        self._per_page = per_page
        self._posts = posts
        self._start_index = start_index

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetPosts200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_posts_200_response of this GetPosts200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_index(self):
        """Gets the end_index of this GetPosts200Response.

        The index of the last post being returned (an integer between start_index and num_posts).

        :return: The end_index of this GetPosts200Response.
        :rtype: int
        """
        return self._end_index

    @end_index.setter
    def end_index(self, end_index):
        """Sets the end_index of this GetPosts200Response.

        The index of the last post being returned (an integer between start_index and num_posts).

        :param end_index: The end_index of this GetPosts200Response.
        :type end_index: int
        """

        self._end_index = end_index

    @property
    def group_ids(self):
        """Gets the group_ids of this GetPosts200Response.

        The IDs of the groups that the posts were retrieved from (will be null when no group IDs were used). These IDs may be a subset of the requested group IDs when a request includes group IDs for groups that are not open archives and that the current user is not a member of.  If the open_archive_groups source is used, these IDs may include the IDs of open archive groups that weren't present in the group_ids parameter of the request. 

        :return: The group_ids of this GetPosts200Response.
        :rtype: List[str]
        """
        return self._group_ids

    @group_ids.setter
    def group_ids(self, group_ids):
        """Sets the group_ids of this GetPosts200Response.

        The IDs of the groups that the posts were retrieved from (will be null when no group IDs were used). These IDs may be a subset of the requested group IDs when a request includes group IDs for groups that are not open archives and that the current user is not a member of.  If the open_archive_groups source is used, these IDs may include the IDs of open archive groups that weren't present in the group_ids parameter of the request. 

        :param group_ids: The group_ids of this GetPosts200Response.
        :type group_ids: List[str]
        """

        self._group_ids = group_ids

    @property
    def last_listings_view(self):
        """Gets the last_listings_view of this GetPosts200Response.

        The UTC date and time when the current user last viewed the newest posts on the All Posts page (may be null). <br /><br /> NOTE: For this to be accurate, clients must update the last_listings_view property of the current user every time the user is shown the newest posts on the All Posts page. <br /><br /> NOTE: For requests using an api key instead of oauth, this field is always null. 

        :return: The last_listings_view of this GetPosts200Response.
        :rtype: datetime
        """
        return self._last_listings_view

    @last_listings_view.setter
    def last_listings_view(self, last_listings_view):
        """Sets the last_listings_view of this GetPosts200Response.

        The UTC date and time when the current user last viewed the newest posts on the All Posts page (may be null). <br /><br /> NOTE: For this to be accurate, clients must update the last_listings_view property of the current user every time the user is shown the newest posts on the All Posts page. <br /><br /> NOTE: For requests using an api key instead of oauth, this field is always null. 

        :param last_listings_view: The last_listings_view of this GetPosts200Response.
        :type last_listings_view: datetime
        """

        self._last_listings_view = last_listings_view

    @property
    def num_pages(self):
        """Gets the num_pages of this GetPosts200Response.

        The total number of pages available.

        :return: The num_pages of this GetPosts200Response.
        :rtype: int
        """
        return self._num_pages

    @num_pages.setter
    def num_pages(self, num_pages):
        """Sets the num_pages of this GetPosts200Response.

        The total number of pages available.

        :param num_pages: The num_pages of this GetPosts200Response.
        :type num_pages: int
        """

        self._num_pages = num_pages

    @property
    def num_posts(self):
        """Gets the num_posts of this GetPosts200Response.

        The total number of posts available.

        :return: The num_posts of this GetPosts200Response.
        :rtype: int
        """
        return self._num_posts

    @num_posts.setter
    def num_posts(self, num_posts):
        """Sets the num_posts of this GetPosts200Response.

        The total number of posts available.

        :param num_posts: The num_posts of this GetPosts200Response.
        :type num_posts: int
        """

        self._num_posts = num_posts

    @property
    def page(self):
        """Gets the page of this GetPosts200Response.

        The page number of the posts being returned.

        :return: The page of this GetPosts200Response.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this GetPosts200Response.

        The page number of the posts being returned.

        :param page: The page of this GetPosts200Response.
        :type page: int
        """

        self._page = page

    @property
    def per_page(self):
        """Gets the per_page of this GetPosts200Response.

        The number of posts being returned per page.

        :return: The per_page of this GetPosts200Response.
        :rtype: int
        """
        return self._per_page

    @per_page.setter
    def per_page(self, per_page):
        """Sets the per_page of this GetPosts200Response.

        The number of posts being returned per page.

        :param per_page: The per_page of this GetPosts200Response.
        :type per_page: int
        """

        self._per_page = per_page

    @property
    def posts(self):
        """Gets the posts of this GetPosts200Response.


        :return: The posts of this GetPosts200Response.
        :rtype: List[Post]
        """
        return self._posts

    @posts.setter
    def posts(self, posts):
        """Sets the posts of this GetPosts200Response.


        :param posts: The posts of this GetPosts200Response.
        :type posts: List[Post]
        """

        self._posts = posts

    @property
    def start_index(self):
        """Gets the start_index of this GetPosts200Response.

        The index of the first post being returned (an integer between 1 and num_posts).

        :return: The start_index of this GetPosts200Response.
        :rtype: int
        """
        return self._start_index

    @start_index.setter
    def start_index(self, start_index):
        """Sets the start_index of this GetPosts200Response.

        The index of the first post being returned (an integer between 1 and num_posts).

        :param start_index: The start_index of this GetPosts200Response.
        :type start_index: int
        """

        self._start_index = start_index
