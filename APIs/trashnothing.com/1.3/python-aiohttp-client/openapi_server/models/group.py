# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group_country import GroupCountry
from openapi_server.models.group_membership import GroupMembership
from openapi_server.models.group_region import GroupRegion
from openapi_server import util


class Group(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: GroupCountry=None, group_id: str=None, has_questions: bool=None, homepage: str=None, identifier: str=None, latitude: float=None, longitude: float=None, member_count: int=None, membership: GroupMembership=None, name: str=None, open_archives: bool=None, open_membership: bool=None, region: GroupRegion=None, timezone: str=None):
        """Group - a model defined in OpenAPI

        :param country: The country of this Group.
        :param group_id: The group_id of this Group.
        :param has_questions: The has_questions of this Group.
        :param homepage: The homepage of this Group.
        :param identifier: The identifier of this Group.
        :param latitude: The latitude of this Group.
        :param longitude: The longitude of this Group.
        :param member_count: The member_count of this Group.
        :param membership: The membership of this Group.
        :param name: The name of this Group.
        :param open_archives: The open_archives of this Group.
        :param open_membership: The open_membership of this Group.
        :param region: The region of this Group.
        :param timezone: The timezone of this Group.
        """
        self.openapi_types = {
            'country': GroupCountry,
            'group_id': str,
            'has_questions': bool,
            'homepage': str,
            'identifier': str,
            'latitude': float,
            'longitude': float,
            'member_count': int,
            'membership': GroupMembership,
            'name': str,
            'open_archives': bool,
            'open_membership': bool,
            'region': GroupRegion,
            'timezone': str
        }

        self.attribute_map = {
            'country': 'country',
            'group_id': 'group_id',
            'has_questions': 'has_questions',
            'homepage': 'homepage',
            'identifier': 'identifier',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'member_count': 'member_count',
            'membership': 'membership',
            'name': 'name',
            'open_archives': 'open_archives',
            'open_membership': 'open_membership',
            'region': 'region',
            'timezone': 'timezone'
        }

        self._country = country
        self._group_id = group_id
        self._has_questions = has_questions
        self._homepage = homepage
        self._identifier = identifier
        self._latitude = latitude
        self._longitude = longitude
        self._member_count = member_count
        self._membership = membership
        self._name = name
        self._open_archives = open_archives
        self._open_membership = open_membership
        self._region = region
        self._timezone = timezone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Group':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Group of this Group.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this Group.


        :return: The country of this Group.
        :rtype: GroupCountry
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Group.


        :param country: The country of this Group.
        :type country: GroupCountry
        """

        self._country = country

    @property
    def group_id(self):
        """Gets the group_id of this Group.


        :return: The group_id of this Group.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this Group.


        :param group_id: The group_id of this Group.
        :type group_id: str
        """

        self._group_id = group_id

    @property
    def has_questions(self):
        """Gets the has_questions of this Group.

        When true, anyone requesting membership to this group will be required to answer a new membership questionnaire.

        :return: The has_questions of this Group.
        :rtype: bool
        """
        return self._has_questions

    @has_questions.setter
    def has_questions(self, has_questions):
        """Sets the has_questions of this Group.

        When true, anyone requesting membership to this group will be required to answer a new membership questionnaire.

        :param has_questions: The has_questions of this Group.
        :type has_questions: bool
        """

        self._has_questions = has_questions

    @property
    def homepage(self):
        """Gets the homepage of this Group.

        A URL to the group homepage.

        :return: The homepage of this Group.
        :rtype: str
        """
        return self._homepage

    @homepage.setter
    def homepage(self, homepage):
        """Sets the homepage of this Group.

        A URL to the group homepage.

        :param homepage: The homepage of this Group.
        :type homepage: str
        """

        self._homepage = homepage

    @property
    def identifier(self):
        """Gets the identifier of this Group.

        A unique identifier for the group that is used in URLs.

        :return: The identifier of this Group.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Group.

        A unique identifier for the group that is used in URLs.

        :param identifier: The identifier of this Group.
        :type identifier: str
        """

        self._identifier = identifier

    @property
    def latitude(self):
        """Gets the latitude of this Group.


        :return: The latitude of this Group.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Group.


        :param latitude: The latitude of this Group.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this Group.


        :return: The longitude of this Group.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Group.


        :param longitude: The longitude of this Group.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def member_count(self):
        """Gets the member_count of this Group.

        The number of members who belong to the group.

        :return: The member_count of this Group.
        :rtype: int
        """
        return self._member_count

    @member_count.setter
    def member_count(self, member_count):
        """Sets the member_count of this Group.

        The number of members who belong to the group.

        :param member_count: The member_count of this Group.
        :type member_count: int
        """

        self._member_count = member_count

    @property
    def membership(self):
        """Gets the membership of this Group.


        :return: The membership of this Group.
        :rtype: GroupMembership
        """
        return self._membership

    @membership.setter
    def membership(self, membership):
        """Sets the membership of this Group.


        :param membership: The membership of this Group.
        :type membership: GroupMembership
        """

        self._membership = membership

    @property
    def name(self):
        """Gets the name of this Group.

        The name of the group (not guaranteed to be unique).

        :return: The name of this Group.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Group.

        The name of the group (not guaranteed to be unique).

        :param name: The name of this Group.
        :type name: str
        """

        self._name = name

    @property
    def open_archives(self):
        """Gets the open_archives of this Group.

        When true, the group posts are viewable by anyone.  When false, the group posts can only be viewed by members of the group.

        :return: The open_archives of this Group.
        :rtype: bool
        """
        return self._open_archives

    @open_archives.setter
    def open_archives(self, open_archives):
        """Sets the open_archives of this Group.

        When true, the group posts are viewable by anyone.  When false, the group posts can only be viewed by members of the group.

        :param open_archives: The open_archives of this Group.
        :type open_archives: bool
        """

        self._open_archives = open_archives

    @property
    def open_membership(self):
        """Gets the open_membership of this Group.

        When true, the group allows anyone to join.  When false, the group moderators review and approve applicants.

        :return: The open_membership of this Group.
        :rtype: bool
        """
        return self._open_membership

    @open_membership.setter
    def open_membership(self, open_membership):
        """Sets the open_membership of this Group.

        When true, the group allows anyone to join.  When false, the group moderators review and approve applicants.

        :param open_membership: The open_membership of this Group.
        :type open_membership: bool
        """

        self._open_membership = open_membership

    @property
    def region(self):
        """Gets the region of this Group.


        :return: The region of this Group.
        :rtype: GroupRegion
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Group.


        :param region: The region of this Group.
        :type region: GroupRegion
        """

        self._region = region

    @property
    def timezone(self):
        """Gets the timezone of this Group.

        The timezone that the group is in (eg. America/New_York).

        :return: The timezone of this Group.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Group.

        The timezone that the group is in (eg. America/New_York).

        :param timezone: The timezone of this Group.
        :type timezone: str
        """

        self._timezone = timezone
