# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_feedback import UserFeedback
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, about_me: str=None, country: str=None, feedback: UserFeedback=None, firstname: str=None, lastname: str=None, member_since: str=None, profile_image: str=None, reply_time: int=None, user_id: str=None, username: str=None):
        """User - a model defined in OpenAPI

        :param about_me: The about_me of this User.
        :param country: The country of this User.
        :param feedback: The feedback of this User.
        :param firstname: The firstname of this User.
        :param lastname: The lastname of this User.
        :param member_since: The member_since of this User.
        :param profile_image: The profile_image of this User.
        :param reply_time: The reply_time of this User.
        :param user_id: The user_id of this User.
        :param username: The username of this User.
        """
        self.openapi_types = {
            'about_me': str,
            'country': str,
            'feedback': UserFeedback,
            'firstname': str,
            'lastname': str,
            'member_since': str,
            'profile_image': str,
            'reply_time': int,
            'user_id': str,
            'username': str
        }

        self.attribute_map = {
            'about_me': 'about_me',
            'country': 'country',
            'feedback': 'feedback',
            'firstname': 'firstname',
            'lastname': 'lastname',
            'member_since': 'member_since',
            'profile_image': 'profile_image',
            'reply_time': 'reply_time',
            'user_id': 'user_id',
            'username': 'username'
        }

        self._about_me = about_me
        self._country = country
        self._feedback = feedback
        self._firstname = firstname
        self._lastname = lastname
        self._member_since = member_since
        self._profile_image = profile_image
        self._reply_time = reply_time
        self._user_id = user_id
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def about_me(self):
        """Gets the about_me of this User.

        A short bio a user has written about themselves to help other members get to know them better. May be null if the user has not written anything about themselves. 

        :return: The about_me of this User.
        :rtype: str
        """
        return self._about_me

    @about_me.setter
    def about_me(self, about_me):
        """Sets the about_me of this User.

        A short bio a user has written about themselves to help other members get to know them better. May be null if the user has not written anything about themselves. 

        :param about_me: The about_me of this User.
        :type about_me: str
        """

        self._about_me = about_me

    @property
    def country(self):
        """Gets the country of this User.

        A 2 letter country code for the country that has been automatically detected for the user (see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ). May be null if no country has been set. 

        :return: The country of this User.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this User.

        A 2 letter country code for the country that has been automatically detected for the user (see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ). May be null if no country has been set. 

        :param country: The country of this User.
        :type country: str
        """

        self._country = country

    @property
    def feedback(self):
        """Gets the feedback of this User.


        :return: The feedback of this User.
        :rtype: UserFeedback
        """
        return self._feedback

    @feedback.setter
    def feedback(self, feedback):
        """Sets the feedback of this User.


        :param feedback: The feedback of this User.
        :type feedback: UserFeedback
        """

        self._feedback = feedback

    @property
    def firstname(self):
        """Gets the firstname of this User.

        The first name of the user (may be null).

        :return: The firstname of this User.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this User.

        The first name of the user (may be null).

        :param firstname: The firstname of this User.
        :type firstname: str
        """

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this User.

        The last name of the user (may be null).

        :return: The lastname of this User.
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this User.

        The last name of the user (may be null).

        :param lastname: The lastname of this User.
        :type lastname: str
        """

        self._lastname = lastname

    @property
    def member_since(self):
        """Gets the member_since of this User.

        The date and time when the user first became publicly active on a group (the date may be older than when the user signed up).

        :return: The member_since of this User.
        :rtype: str
        """
        return self._member_since

    @member_since.setter
    def member_since(self, member_since):
        """Sets the member_since of this User.

        The date and time when the user first became publicly active on a group (the date may be older than when the user signed up).

        :param member_since: The member_since of this User.
        :type member_since: str
        """

        self._member_since = member_since

    @property
    def profile_image(self):
        """Gets the profile_image of this User.

        A URL to a profile image for the user.  Profile images sizes vary based on the source (Google, Facebook, Gravatar, etc) and some can be as small as 64px by 64px.  Will be null for api key requests and requests where the oauth user doesn't belong to any of the same groups as this user. 

        :return: The profile_image of this User.
        :rtype: str
        """
        return self._profile_image

    @profile_image.setter
    def profile_image(self, profile_image):
        """Sets the profile_image of this User.

        A URL to a profile image for the user.  Profile images sizes vary based on the source (Google, Facebook, Gravatar, etc) and some can be as small as 64px by 64px.  Will be null for api key requests and requests where the oauth user doesn't belong to any of the same groups as this user. 

        :param profile_image: The profile_image of this User.
        :type profile_image: str
        """

        self._profile_image = profile_image

    @property
    def reply_time(self):
        """Gets the reply_time of this User.

        An estimate of how many seconds it takes this user to reply to messages. May be null when there is not enough data to calculate an estimate. 

        :return: The reply_time of this User.
        :rtype: int
        """
        return self._reply_time

    @reply_time.setter
    def reply_time(self, reply_time):
        """Sets the reply_time of this User.

        An estimate of how many seconds it takes this user to reply to messages. May be null when there is not enough data to calculate an estimate. 

        :param reply_time: The reply_time of this User.
        :type reply_time: int
        """

        self._reply_time = reply_time

    @property
    def user_id(self):
        """Gets the user_id of this User.


        :return: The user_id of this User.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this User.


        :param user_id: The user_id of this User.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def username(self):
        """Gets the username of this User.

        A username that can be displayed for the user (the username is NOT guaranteed to be unique). Will be null for api key requests and requests where the oauth user doesn't belong to any of the same groups as this user. 

        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.

        A username that can be displayed for the user (the username is NOT guaranteed to be unique). Will be null for api key requests and requests where the oauth user doesn't belong to any of the same groups as this user. 

        :param username: The username of this User.
        :type username: str
        """

        self._username = username
