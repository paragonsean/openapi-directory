/**
 * trash nothing
 * This is the REST API for [trashnothing.com](https://trashnothing.com).  To learn more about the API or to register your app for use with the API visit the [trash nothing Developer page](https://trashnothing.com/developer).  NOTE: All date-time values are [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) and are in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) (eg. 2019-02-03T01:23:53). 
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TrashNothing);
  }
}(this, function(expect, TrashNothing) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TrashNothing.PostsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PostsApi', function() {
    describe('getAllPosts', function() {
      it('should call getAllPosts successfully', function(done) {
        //uncomment below and update the code to test getAllPosts
        //instance.getAllPosts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllPostsChanges', function() {
      it('should call getAllPostsChanges successfully', function(done) {
        //uncomment below and update the code to test getAllPostsChanges
        //instance.getAllPostsChanges(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPost', function() {
      it('should call getPost successfully', function(done) {
        //uncomment below and update the code to test getPost
        //instance.getPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPostAndRelatedData', function() {
      it('should call getPostAndRelatedData successfully', function(done) {
        //uncomment below and update the code to test getPostAndRelatedData
        //instance.getPostAndRelatedData(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPosts', function() {
      it('should call getPosts successfully', function(done) {
        //uncomment below and update the code to test getPosts
        //instance.getPosts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPostsByIds', function() {
      it('should call getPostsByIds successfully', function(done) {
        //uncomment below and update the code to test getPostsByIds
        //instance.getPostsByIds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchPosts', function() {
      it('should call searchPosts successfully', function(done) {
        //uncomment below and update the code to test searchPosts
        //instance.searchPosts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
