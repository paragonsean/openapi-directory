/**
 * trash nothing
 * This is the REST API for [trashnothing.com](https://trashnothing.com).  To learn more about the API or to register your app for use with the API visit the [trash nothing Developer page](https://trashnothing.com/developer).  NOTE: All date-time values are [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) and are in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) (eg. 2019-02-03T01:23:53). 
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Feedback model module.
 * @module model/Feedback
 * @version 1.3
 */
class Feedback {
    /**
     * Constructs a new <code>Feedback</code>.
     * @alias module:model/Feedback
     */
    constructor() { 
        
        Feedback.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Feedback</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Feedback} obj Optional instance to populate.
     * @return {module:model/Feedback} The populated <code>Feedback</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Feedback();

            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('feedback_id')) {
                obj['feedback_id'] = ApiClient.convertToType(data['feedback_id'], 'String');
            }
            if (data.hasOwnProperty('positive')) {
                obj['positive'] = ApiClient.convertToType(data['positive'], 'Boolean');
            }
            if (data.hasOwnProperty('reviewer_user_id')) {
                obj['reviewer_user_id'] = ApiClient.convertToType(data['reviewer_user_id'], 'String');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Feedback</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Feedback</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['feedback_id'] && !(typeof data['feedback_id'] === 'string' || data['feedback_id'] instanceof String)) {
            throw new Error("Expected the field `feedback_id` to be a primitive type in the JSON string but got " + data['feedback_id']);
        }
        // ensure the json data is a string
        if (data['reviewer_user_id'] && !(typeof data['reviewer_user_id'] === 'string' || data['reviewer_user_id'] instanceof String)) {
            throw new Error("Expected the field `reviewer_user_id` to be a primitive type in the JSON string but got " + data['reviewer_user_id']);
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }

        return true;
    }


}



/**
 * A comment written by the reviewer about the user (may be null).
 * @member {String} content
 */
Feedback.prototype['content'] = undefined;

/**
 * Date when the feedback was submitted.
 * @member {Date} date
 */
Feedback.prototype['date'] = undefined;

/**
 * @member {String} feedback_id
 */
Feedback.prototype['feedback_id'] = undefined;

/**
 * Set to true for positive feedback and false for negative feedback.
 * @member {Boolean} positive
 */
Feedback.prototype['positive'] = undefined;

/**
 * The user ID of the user that submitted the feedback.
 * @member {String} reviewer_user_id
 */
Feedback.prototype['reviewer_user_id'] = undefined;

/**
 * The user ID of the user that the feedback is about.
 * @member {String} user_id
 */
Feedback.prototype['user_id'] = undefined;






export default Feedback;

