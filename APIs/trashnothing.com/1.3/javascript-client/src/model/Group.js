/**
 * trash nothing
 * This is the REST API for [trashnothing.com](https://trashnothing.com).  To learn more about the API or to register your app for use with the API visit the [trash nothing Developer page](https://trashnothing.com/developer).  NOTE: All date-time values are [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) and are in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) (eg. 2019-02-03T01:23:53). 
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GroupCountry from './GroupCountry';
import GroupMembership from './GroupMembership';
import GroupRegion from './GroupRegion';

/**
 * The Group model module.
 * @module model/Group
 * @version 1.3
 */
class Group {
    /**
     * Constructs a new <code>Group</code>.
     * Groups are run by volunteer moderators and provide a way to group activity in a specific location. Because each group is usually run by different people, there can be variations in rules from group to group (eg. who is allowed to join, what is allowed to be posted, how often reposts are allowed). 
     * @alias module:model/Group
     */
    constructor() { 
        
        Group.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Group</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Group} obj Optional instance to populate.
     * @return {module:model/Group} The populated <code>Group</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Group();

            if (data.hasOwnProperty('country')) {
                obj['country'] = GroupCountry.constructFromObject(data['country']);
            }
            if (data.hasOwnProperty('group_id')) {
                obj['group_id'] = ApiClient.convertToType(data['group_id'], 'String');
            }
            if (data.hasOwnProperty('has_questions')) {
                obj['has_questions'] = ApiClient.convertToType(data['has_questions'], 'Boolean');
            }
            if (data.hasOwnProperty('homepage')) {
                obj['homepage'] = ApiClient.convertToType(data['homepage'], 'String');
            }
            if (data.hasOwnProperty('identifier')) {
                obj['identifier'] = ApiClient.convertToType(data['identifier'], 'String');
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'Number');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'Number');
            }
            if (data.hasOwnProperty('member_count')) {
                obj['member_count'] = ApiClient.convertToType(data['member_count'], 'Number');
            }
            if (data.hasOwnProperty('membership')) {
                obj['membership'] = GroupMembership.constructFromObject(data['membership']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('open_archives')) {
                obj['open_archives'] = ApiClient.convertToType(data['open_archives'], 'Boolean');
            }
            if (data.hasOwnProperty('open_membership')) {
                obj['open_membership'] = ApiClient.convertToType(data['open_membership'], 'Boolean');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = GroupRegion.constructFromObject(data['region']);
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Group</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Group</code>.
     */
    static validateJSON(data) {
        // validate the optional field `country`
        if (data['country']) { // data not null
          GroupCountry.validateJSON(data['country']);
        }
        // ensure the json data is a string
        if (data['group_id'] && !(typeof data['group_id'] === 'string' || data['group_id'] instanceof String)) {
            throw new Error("Expected the field `group_id` to be a primitive type in the JSON string but got " + data['group_id']);
        }
        // ensure the json data is a string
        if (data['homepage'] && !(typeof data['homepage'] === 'string' || data['homepage'] instanceof String)) {
            throw new Error("Expected the field `homepage` to be a primitive type in the JSON string but got " + data['homepage']);
        }
        // ensure the json data is a string
        if (data['identifier'] && !(typeof data['identifier'] === 'string' || data['identifier'] instanceof String)) {
            throw new Error("Expected the field `identifier` to be a primitive type in the JSON string but got " + data['identifier']);
        }
        // validate the optional field `membership`
        if (data['membership']) { // data not null
          GroupMembership.validateJSON(data['membership']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `region`
        if (data['region']) { // data not null
          GroupRegion.validateJSON(data['region']);
        }
        // ensure the json data is a string
        if (data['timezone'] && !(typeof data['timezone'] === 'string' || data['timezone'] instanceof String)) {
            throw new Error("Expected the field `timezone` to be a primitive type in the JSON string but got " + data['timezone']);
        }

        return true;
    }


}



/**
 * @member {module:model/GroupCountry} country
 */
Group.prototype['country'] = undefined;

/**
 * @member {String} group_id
 */
Group.prototype['group_id'] = undefined;

/**
 * When true, anyone requesting membership to this group will be required to answer a new membership questionnaire.
 * @member {Boolean} has_questions
 */
Group.prototype['has_questions'] = undefined;

/**
 * A URL to the group homepage.
 * @member {String} homepage
 */
Group.prototype['homepage'] = undefined;

/**
 * A unique identifier for the group that is used in URLs.
 * @member {String} identifier
 */
Group.prototype['identifier'] = undefined;

/**
 * @member {Number} latitude
 */
Group.prototype['latitude'] = undefined;

/**
 * @member {Number} longitude
 */
Group.prototype['longitude'] = undefined;

/**
 * The number of members who belong to the group.
 * @member {Number} member_count
 */
Group.prototype['member_count'] = undefined;

/**
 * @member {module:model/GroupMembership} membership
 */
Group.prototype['membership'] = undefined;

/**
 * The name of the group (not guaranteed to be unique).
 * @member {String} name
 */
Group.prototype['name'] = undefined;

/**
 * When true, the group posts are viewable by anyone.  When false, the group posts can only be viewed by members of the group.
 * @member {Boolean} open_archives
 */
Group.prototype['open_archives'] = undefined;

/**
 * When true, the group allows anyone to join.  When false, the group moderators review and approve applicants.
 * @member {Boolean} open_membership
 */
Group.prototype['open_membership'] = undefined;

/**
 * @member {module:model/GroupRegion} region
 */
Group.prototype['region'] = undefined;

/**
 * The timezone that the group is in (eg. America/New_York).
 * @member {String} timezone
 */
Group.prototype['timezone'] = undefined;






export default Group;

