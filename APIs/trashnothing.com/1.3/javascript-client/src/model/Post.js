/**
 * trash nothing
 * This is the REST API for [trashnothing.com](https://trashnothing.com).  To learn more about the API or to register your app for use with the API visit the [trash nothing Developer page](https://trashnothing.com/developer).  NOTE: All date-time values are [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) and are in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) (eg. 2019-02-03T01:23:53). 
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Photo from './Photo';

/**
 * The Post model module.
 * @module model/Post
 * @version 1.3
 */
class Post {
    /**
     * Constructs a new <code>Post</code>.
     * An offer, wanted, admin, taken or received post.
     * @alias module:model/Post
     */
    constructor() { 
        
        Post.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Post</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Post} obj Optional instance to populate.
     * @return {module:model/Post} The populated <code>Post</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Post();

            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('expiration')) {
                obj['expiration'] = ApiClient.convertToType(data['expiration'], 'Date');
            }
            if (data.hasOwnProperty('footer')) {
                obj['footer'] = ApiClient.convertToType(data['footer'], 'String');
            }
            if (data.hasOwnProperty('group_id')) {
                obj['group_id'] = ApiClient.convertToType(data['group_id'], 'String');
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'Number');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'Number');
            }
            if (data.hasOwnProperty('outcome')) {
                obj['outcome'] = ApiClient.convertToType(data['outcome'], 'String');
            }
            if (data.hasOwnProperty('photos')) {
                obj['photos'] = ApiClient.convertToType(data['photos'], [Photo]);
            }
            if (data.hasOwnProperty('post_id')) {
                obj['post_id'] = ApiClient.convertToType(data['post_id'], 'String');
            }
            if (data.hasOwnProperty('repost_count')) {
                obj['repost_count'] = ApiClient.convertToType(data['repost_count'], 'Number');
            }
            if (data.hasOwnProperty('reselling')) {
                obj['reselling'] = ApiClient.convertToType(data['reselling'], 'Boolean');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Post</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Post</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['footer'] && !(typeof data['footer'] === 'string' || data['footer'] instanceof String)) {
            throw new Error("Expected the field `footer` to be a primitive type in the JSON string but got " + data['footer']);
        }
        // ensure the json data is a string
        if (data['group_id'] && !(typeof data['group_id'] === 'string' || data['group_id'] instanceof String)) {
            throw new Error("Expected the field `group_id` to be a primitive type in the JSON string but got " + data['group_id']);
        }
        // ensure the json data is a string
        if (data['outcome'] && !(typeof data['outcome'] === 'string' || data['outcome'] instanceof String)) {
            throw new Error("Expected the field `outcome` to be a primitive type in the JSON string but got " + data['outcome']);
        }
        if (data['photos']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['photos'])) {
                throw new Error("Expected the field `photos` to be an array in the JSON data but got " + data['photos']);
            }
            // validate the optional field `photos` (array)
            for (const item of data['photos']) {
                Photo.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['post_id'] && !(typeof data['post_id'] === 'string' || data['post_id'] instanceof String)) {
            throw new Error("Expected the field `post_id` to be a primitive type in the JSON string but got " + data['post_id']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }

        return true;
    }


}



/**
 * @member {String} content
 */
Post.prototype['content'] = undefined;

/**
 * The UTC date and time when the post was published.
 * @member {Date} date
 */
Post.prototype['date'] = undefined;

/**
 * The UTC date and time when the post will expire.   Currently only offer and wanted posts expire.  For all other posts, expiration is always null. 
 * @member {Date} expiration
 */
Post.prototype['expiration'] = undefined;

/**
 * Some groups add footers to posts that are separate and sometimes unrelated to the post itself - such as reminders about group rules or features (may be null).
 * @member {String} footer
 */
Post.prototype['footer'] = undefined;

/**
 * The group ID of the post.  For public posts, this is always null. 
 * @member {String} group_id
 */
Post.prototype['group_id'] = undefined;

/**
 * May be null if a post hasn't been mapped.
 * @member {Number} latitude
 */
Post.prototype['latitude'] = undefined;

/**
 * May be null if a post hasn't been mapped.
 * @member {Number} longitude
 */
Post.prototype['longitude'] = undefined;

/**
 * For offer and wanted posts, this indicates the outcome of the post which is null if no outcome has been set yet.   <br /><br /> Offer post outcomes will be one of: satisfied, withdrawn, promised, expired <br /><br /> Wanted post outcomes will be one of: satisfied, withdrawn, expired <br /><br /> For all other posts, outcome is always null. 
 * @member {String} outcome
 */
Post.prototype['outcome'] = undefined;

/**
 * Details about the photos associated with this post (may be null if there are no photos).
 * @member {Array.<module:model/Photo>} photos
 */
Post.prototype['photos'] = undefined;

/**
 * @member {String} post_id
 */
Post.prototype['post_id'] = undefined;

/**
 * The count of how many times this post has been reposted in the last 90 days. A value of zero is used to indicate that the post is not a repost. The count is specific to the source of the post (eg. the specific group the post is on). If a post is crossposted to multiple groups, the repost_count of the post on each group may be different for each group depending on how many times the post has been posted on that group in the last 90 days. 
 * @member {Number} repost_count
 */
Post.prototype['repost_count'] = undefined;

/**
 * For wanted posts, whether the item is being requested in order to resell it or not. Will be null for all posts that are not wanted posts and for wanted posts where the poster hasn't indicated whether or not they intend to resell the item they are requesting. 
 * @member {Boolean} reselling
 */
Post.prototype['reselling'] = undefined;

/**
 * The source of the post.  One of: groups, trashnothing, open_archive_groups.  A value of groups or open_archive_groups indicates the post is from a group and the group_id field will contain the ID of the group. A value of trashnothing indicates the post is a public post not associated with any group. 
 * @member {String} source
 */
Post.prototype['source'] = undefined;

/**
 * @member {String} title
 */
Post.prototype['title'] = undefined;

/**
 * The type of post.  One of: offer, taken, wanted, received, admin 
 * @member {String} type
 */
Post.prototype['type'] = undefined;

/**
 * The link to use to view the post on the trash nothing site.
 * @member {String} url
 */
Post.prototype['url'] = undefined;

/**
 * @member {String} user_id
 */
Post.prototype['user_id'] = undefined;






export default Post;

