/**
 * trash nothing
 * This is the REST API for [trashnothing.com](https://trashnothing.com).  To learn more about the API or to register your app for use with the API visit the [trash nothing Developer page](https://trashnothing.com/developer).  NOTE: All date-time values are [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) and are in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) (eg. 2019-02-03T01:23:53). 
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Feedback from './Feedback';
import Group from './Group';
import Post from './Post';
import User from './User';

/**
 * The GetPostAndRelatedData200Response model module.
 * @module model/GetPostAndRelatedData200Response
 * @version 1.3
 */
class GetPostAndRelatedData200Response {
    /**
     * Constructs a new <code>GetPostAndRelatedData200Response</code>.
     * @alias module:model/GetPostAndRelatedData200Response
     */
    constructor() { 
        
        GetPostAndRelatedData200Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetPostAndRelatedData200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetPostAndRelatedData200Response} obj Optional instance to populate.
     * @return {module:model/GetPostAndRelatedData200Response} The populated <code>GetPostAndRelatedData200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetPostAndRelatedData200Response();

            if (data.hasOwnProperty('author')) {
                obj['author'] = User.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('author_offer_count')) {
                obj['author_offer_count'] = ApiClient.convertToType(data['author_offer_count'], 'Number');
            }
            if (data.hasOwnProperty('author_posts')) {
                obj['author_posts'] = ApiClient.convertToType(data['author_posts'], [Post]);
            }
            if (data.hasOwnProperty('author_wanted_count')) {
                obj['author_wanted_count'] = ApiClient.convertToType(data['author_wanted_count'], 'Number');
            }
            if (data.hasOwnProperty('bookmarked')) {
                obj['bookmarked'] = ApiClient.convertToType(data['bookmarked'], 'Boolean');
            }
            if (data.hasOwnProperty('feedback')) {
                obj['feedback'] = ApiClient.convertToType(data['feedback'], [Feedback]);
            }
            if (data.hasOwnProperty('groups')) {
                obj['groups'] = ApiClient.convertToType(data['groups'], [Group]);
            }
            if (data.hasOwnProperty('post')) {
                obj['post'] = Post.constructFromObject(data['post']);
            }
            if (data.hasOwnProperty('replied')) {
                obj['replied'] = ApiClient.convertToType(data['replied'], 'Boolean');
            }
            if (data.hasOwnProperty('user_can_reply')) {
                obj['user_can_reply'] = ApiClient.convertToType(data['user_can_reply'], 'Boolean');
            }
            if (data.hasOwnProperty('viewed')) {
                obj['viewed'] = ApiClient.convertToType(data['viewed'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetPostAndRelatedData200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetPostAndRelatedData200Response</code>.
     */
    static validateJSON(data) {
        // validate the optional field `author`
        if (data['author']) { // data not null
          User.validateJSON(data['author']);
        }
        if (data['author_posts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['author_posts'])) {
                throw new Error("Expected the field `author_posts` to be an array in the JSON data but got " + data['author_posts']);
            }
            // validate the optional field `author_posts` (array)
            for (const item of data['author_posts']) {
                Post.validateJSON(item);
            };
        }
        if (data['feedback']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['feedback'])) {
                throw new Error("Expected the field `feedback` to be an array in the JSON data but got " + data['feedback']);
            }
            // validate the optional field `feedback` (array)
            for (const item of data['feedback']) {
                Feedback.validateJSON(item);
            };
        }
        if (data['groups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['groups'])) {
                throw new Error("Expected the field `groups` to be an array in the JSON data but got " + data['groups']);
            }
            // validate the optional field `groups` (array)
            for (const item of data['groups']) {
                Group.validateJSON(item);
            };
        }
        // validate the optional field `post`
        if (data['post']) { // data not null
          Post.validateJSON(data['post']);
        }

        return true;
    }


}



/**
 * @member {module:model/User} author
 */
GetPostAndRelatedData200Response.prototype['author'] = undefined;

/**
 * Count of offer posts made by the post author in the last 90 days.
 * @member {Number} author_offer_count
 */
GetPostAndRelatedData200Response.prototype['author_offer_count'] = undefined;

/**
 * Other active posts from the post author in the last 90 days. A maximum of 30 posts will be returned. 
 * @member {Array.<module:model/Post>} author_posts
 */
GetPostAndRelatedData200Response.prototype['author_posts'] = undefined;

/**
 * Count of wanted posts made by the post author in the last 90 days.
 * @member {Number} author_wanted_count
 */
GetPostAndRelatedData200Response.prototype['author_wanted_count'] = undefined;

/**
 * Whether or not the current user has bookmarked this post.  Will be null for api key requests and for the current users' posts.
 * @member {Boolean} bookmarked
 */
GetPostAndRelatedData200Response.prototype['bookmarked'] = undefined;

/**
 * Feedback the current user has left on the post author.
 * @member {Array.<module:model/Feedback>} feedback
 */
GetPostAndRelatedData200Response.prototype['feedback'] = undefined;

/**
 * The groups the post is published on.
 * @member {Array.<module:model/Group>} groups
 */
GetPostAndRelatedData200Response.prototype['groups'] = undefined;

/**
 * @member {module:model/Post} post
 */
GetPostAndRelatedData200Response.prototype['post'] = undefined;

/**
 * Whether or not the current user has replied to this post.  Will be null for api key requests and for the current users' posts.
 * @member {Boolean} replied
 */
GetPostAndRelatedData200Response.prototype['replied'] = undefined;

/**
 * Whether or not the current user (if any) can reply to this post. Unverified users cannot reply to posts until they verify their account. 
 * @member {Boolean} user_can_reply
 */
GetPostAndRelatedData200Response.prototype['user_can_reply'] = undefined;

/**
 * Whether or not the current user has previously viewed this post.  Will be null for api key requests and for the current users' posts.
 * @member {Boolean} viewed
 */
GetPostAndRelatedData200Response.prototype['viewed'] = undefined;






export default GetPostAndRelatedData200Response;

