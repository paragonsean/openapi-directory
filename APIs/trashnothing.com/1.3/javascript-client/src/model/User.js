/**
 * trash nothing
 * This is the REST API for [trashnothing.com](https://trashnothing.com).  To learn more about the API or to register your app for use with the API visit the [trash nothing Developer page](https://trashnothing.com/developer).  NOTE: All date-time values are [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) and are in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) (eg. 2019-02-03T01:23:53). 
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserFeedback from './UserFeedback';

/**
 * The User model module.
 * @module model/User
 * @version 1.3
 */
class User {
    /**
     * Constructs a new <code>User</code>.
     * @alias module:model/User
     */
    constructor() { 
        
        User.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/User} obj Optional instance to populate.
     * @return {module:model/User} The populated <code>User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();

            if (data.hasOwnProperty('about_me')) {
                obj['about_me'] = ApiClient.convertToType(data['about_me'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('feedback')) {
                obj['feedback'] = UserFeedback.constructFromObject(data['feedback']);
            }
            if (data.hasOwnProperty('firstname')) {
                obj['firstname'] = ApiClient.convertToType(data['firstname'], 'String');
            }
            if (data.hasOwnProperty('lastname')) {
                obj['lastname'] = ApiClient.convertToType(data['lastname'], 'String');
            }
            if (data.hasOwnProperty('member_since')) {
                obj['member_since'] = ApiClient.convertToType(data['member_since'], 'String');
            }
            if (data.hasOwnProperty('profile_image')) {
                obj['profile_image'] = ApiClient.convertToType(data['profile_image'], 'String');
            }
            if (data.hasOwnProperty('reply_time')) {
                obj['reply_time'] = ApiClient.convertToType(data['reply_time'], 'Number');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>User</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>User</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['about_me'] && !(typeof data['about_me'] === 'string' || data['about_me'] instanceof String)) {
            throw new Error("Expected the field `about_me` to be a primitive type in the JSON string but got " + data['about_me']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // validate the optional field `feedback`
        if (data['feedback']) { // data not null
          UserFeedback.validateJSON(data['feedback']);
        }
        // ensure the json data is a string
        if (data['firstname'] && !(typeof data['firstname'] === 'string' || data['firstname'] instanceof String)) {
            throw new Error("Expected the field `firstname` to be a primitive type in the JSON string but got " + data['firstname']);
        }
        // ensure the json data is a string
        if (data['lastname'] && !(typeof data['lastname'] === 'string' || data['lastname'] instanceof String)) {
            throw new Error("Expected the field `lastname` to be a primitive type in the JSON string but got " + data['lastname']);
        }
        // ensure the json data is a string
        if (data['member_since'] && !(typeof data['member_since'] === 'string' || data['member_since'] instanceof String)) {
            throw new Error("Expected the field `member_since` to be a primitive type in the JSON string but got " + data['member_since']);
        }
        // ensure the json data is a string
        if (data['profile_image'] && !(typeof data['profile_image'] === 'string' || data['profile_image'] instanceof String)) {
            throw new Error("Expected the field `profile_image` to be a primitive type in the JSON string but got " + data['profile_image']);
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}



/**
 * A short bio a user has written about themselves to help other members get to know them better. May be null if the user has not written anything about themselves. 
 * @member {String} about_me
 */
User.prototype['about_me'] = undefined;

/**
 * A 2 letter country code for the country that has been automatically detected for the user (see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ). May be null if no country has been set. 
 * @member {String} country
 */
User.prototype['country'] = undefined;

/**
 * @member {module:model/UserFeedback} feedback
 */
User.prototype['feedback'] = undefined;

/**
 * The first name of the user (may be null).
 * @member {String} firstname
 */
User.prototype['firstname'] = undefined;

/**
 * The last name of the user (may be null).
 * @member {String} lastname
 */
User.prototype['lastname'] = undefined;

/**
 * The date and time when the user first became publicly active on a group (the date may be older than when the user signed up).
 * @member {String} member_since
 */
User.prototype['member_since'] = undefined;

/**
 * A URL to a profile image for the user.  Profile images sizes vary based on the source (Google, Facebook, Gravatar, etc) and some can be as small as 64px by 64px.  Will be null for api key requests and requests where the oauth user doesn't belong to any of the same groups as this user. 
 * @member {String} profile_image
 */
User.prototype['profile_image'] = undefined;

/**
 * An estimate of how many seconds it takes this user to reply to messages. May be null when there is not enough data to calculate an estimate. 
 * @member {Number} reply_time
 */
User.prototype['reply_time'] = undefined;

/**
 * @member {String} user_id
 */
User.prototype['user_id'] = undefined;

/**
 * A username that can be displayed for the user (the username is NOT guaranteed to be unique). Will be null for api key requests and requests where the oauth user doesn't belong to any of the same groups as this user. 
 * @member {String} username
 */
User.prototype['username'] = undefined;






export default User;

