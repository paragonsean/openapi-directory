/**
 * trash nothing
 * This is the REST API for [trashnothing.com](https://trashnothing.com).  To learn more about the API or to register your app for use with the API visit the [trash nothing Developer page](https://trashnothing.com/developer).  NOTE: All date-time values are [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) and are in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) (eg. 2019-02-03T01:23:53). 
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PhotoImagesInner from './PhotoImagesInner';

/**
 * The Photo model module.
 * @module model/Photo
 * @version 1.3
 */
class Photo {
    /**
     * Constructs a new <code>Photo</code>.
     * @alias module:model/Photo
     */
    constructor() { 
        
        Photo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Photo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Photo} obj Optional instance to populate.
     * @return {module:model/Photo} The populated <code>Photo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Photo();

            if (data.hasOwnProperty('blurhash')) {
                obj['blurhash'] = ApiClient.convertToType(data['blurhash'], 'String');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], [PhotoImagesInner]);
            }
            if (data.hasOwnProperty('photo_id')) {
                obj['photo_id'] = ApiClient.convertToType(data['photo_id'], 'String');
            }
            if (data.hasOwnProperty('thumbnail')) {
                obj['thumbnail'] = ApiClient.convertToType(data['thumbnail'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Photo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Photo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['blurhash'] && !(typeof data['blurhash'] === 'string' || data['blurhash'] instanceof String)) {
            throw new Error("Expected the field `blurhash` to be a primitive type in the JSON string but got " + data['blurhash']);
        }
        if (data['images']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['images'])) {
                throw new Error("Expected the field `images` to be an array in the JSON data but got " + data['images']);
            }
            // validate the optional field `images` (array)
            for (const item of data['images']) {
                PhotoImagesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['photo_id'] && !(typeof data['photo_id'] === 'string' || data['photo_id'] instanceof String)) {
            throw new Error("Expected the field `photo_id` to be a primitive type in the JSON string but got " + data['photo_id']);
        }
        // ensure the json data is a string
        if (data['thumbnail'] && !(typeof data['thumbnail'] === 'string' || data['thumbnail'] instanceof String)) {
            throw new Error("Expected the field `thumbnail` to be a primitive type in the JSON string but got " + data['thumbnail']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * A blurhash of the photo that can be used as a placeholder while the photo is loading (see: https://github.com/woltapp/blurhash). May be null if no blurhash is available and the length of the blurhash can vary based on the photo. 
 * @member {String} blurhash
 */
Photo.prototype['blurhash'] = undefined;

/**
 * All the versions of this photo ordered from smallest to largest.  This list is guaranteed to include the photos specified by the above thumbnail and url properties.
 * @member {Array.<module:model/PhotoImagesInner>} images
 */
Photo.prototype['images'] = undefined;

/**
 * @member {String} photo_id
 */
Photo.prototype['photo_id'] = undefined;

/**
 * A URL to a thumbnail of this photo.  The size of the thumbnail depends on the device_pixel_ratio parameter and it is not guaranteed to be square.
 * @member {String} thumbnail
 */
Photo.prototype['thumbnail'] = undefined;

/**
 * A URL to a large version of this photo (but not necessarily the largest size available).
 * @member {String} url
 */
Photo.prototype['url'] = undefined;






export default Photo;

