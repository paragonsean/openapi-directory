/**
 * trash nothing
 * This is the REST API for [trashnothing.com](https://trashnothing.com).  To learn more about the API or to register your app for use with the API visit the [trash nothing Developer page](https://trashnothing.com/developer).  NOTE: All date-time values are [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) and are in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) (eg. 2019-02-03T01:23:53). 
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetAllPosts200Response from '../model/GetAllPosts200Response';
import GetAllPostsChanges200Response from '../model/GetAllPostsChanges200Response';
import GetPostAndRelatedData200Response from '../model/GetPostAndRelatedData200Response';
import GetPosts200Response from '../model/GetPosts200Response';
import GetPostsByIds200Response from '../model/GetPostsByIds200Response';
import Post from '../model/Post';
import SearchPosts200Response from '../model/SearchPosts200Response';

/**
* Posts service.
* @module api/PostsApi
* @version 1.3
*/
export default class PostsApi {

    /**
    * Constructs a new PostsApi. 
    * @alias module:api/PostsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAllPosts operation.
     * @callback module:api/PostsApi~getAllPostsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllPosts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all posts
     * This endpoint provides an easy way to get a feed of all the publicly published posts on trash nothing. It provides access to all publicly published offer and wanted posts from the last 30 days. The posts are sorted by date (newest first). <br /><br /> There are fewer options for filtering, sorting and searching posts with this endpoint but there is no 1,000 post limit and posts that are crossposted to multiple groups are not merged together in the response.  In most cases, crossposted posts are easy to detect because they have the same user_id, title and content. 
     * @param {String} types A comma separated list of the post types to return.  The available post types are: offer, wanted 
     * @param {Date} dateMin Only posts newer than or equal to this UTC date and time will be returned. The UTC date and time used must be within a day or less of date_max. And the date and time must be within the last 30 days. And the date and time must be rounded to the nearest second. 
     * @param {Date} dateMax Only posts older than this UTC date and time will be returned. The UTC date and time used must be within a day or less of date_min. And the date and time must be rounded to the nearest second. 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 20)] The number of posts to return per page (must be >= 1 and <= 50).
     * @param {Number} [page = 1)] The page of posts to return.
     * @param {Number} [devicePixelRatio = 1)] Client device pixel ratio used to determine thumbnail size (default 1.0).
     * @param {module:api/PostsApi~getAllPostsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAllPosts200Response}
     */
    getAllPosts(types, dateMin, dateMax, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'types' is set
      if (types === undefined || types === null) {
        throw new Error("Missing the required parameter 'types' when calling getAllPosts");
      }
      // verify the required parameter 'dateMin' is set
      if (dateMin === undefined || dateMin === null) {
        throw new Error("Missing the required parameter 'dateMin' when calling getAllPosts");
      }
      // verify the required parameter 'dateMax' is set
      if (dateMax === undefined || dateMax === null) {
        throw new Error("Missing the required parameter 'dateMax' when calling getAllPosts");
      }

      let pathParams = {
      };
      let queryParams = {
        'types': types,
        'date_min': dateMin,
        'date_max': dateMax,
        'per_page': opts['perPage'],
        'page': opts['page'],
        'device_pixel_ratio': opts['devicePixelRatio']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllPosts200Response;
      return this.apiClient.callApi(
        '/posts/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllPostsChanges operation.
     * @callback module:api/PostsApi~getAllPostsChangesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllPostsChanges200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all post changes
     * This endpoint provides an easy way to get a feed of all the changes that have been made to publicly published posts on trash nothing.  Similar to the /posts/all endpoint, only data from the last 30 days is available and the changes are sorted by date (newest first).  Every change includes the date of the change, the post_id of the post that was changed and the type of change. <br /><br /> The different types of changes that are returned are listed below. <br /><br /> - deleted<br /> - undeleted<br /> - satisfied<br /> - promised<br /> - unpromised<br /> - withdrawn<br /> - edited<br /> <br /> For edited changes, clients can use the retrieve post API endpoint to get the edits that have been made to the post. 
     * @param {Date} dateMin Only changes newer than or equal to this UTC date and time will be returned. The UTC date and time used must be within a day or less of date_max. And the date and time must be within the last 30 days. And the date and time must be rounded to the nearest second. 
     * @param {Date} dateMax Only changes older than this UTC date and time will be returned. The UTC date and time used must be within a day or less of date_min. And the date and time must be rounded to the nearest second. 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 20)] The number of changes to return per page (must be >= 1 and <= 50).
     * @param {Number} [page = 1)] The page of changes to return.
     * @param {module:api/PostsApi~getAllPostsChangesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAllPostsChanges200Response}
     */
    getAllPostsChanges(dateMin, dateMax, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dateMin' is set
      if (dateMin === undefined || dateMin === null) {
        throw new Error("Missing the required parameter 'dateMin' when calling getAllPostsChanges");
      }
      // verify the required parameter 'dateMax' is set
      if (dateMax === undefined || dateMax === null) {
        throw new Error("Missing the required parameter 'dateMax' when calling getAllPostsChanges");
      }

      let pathParams = {
      };
      let queryParams = {
        'date_min': dateMin,
        'date_max': dateMax,
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllPostsChanges200Response;
      return this.apiClient.callApi(
        '/posts/all/changes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPost operation.
     * @callback module:api/PostsApi~getPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Post} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a post
     * @param {String} postId The ID of the post to retrieve.
     * @param {module:api/PostsApi~getPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Post}
     */
    getPost(postId, callback) {
      let postBody = null;
      // verify the required parameter 'postId' is set
      if (postId === undefined || postId === null) {
        throw new Error("Missing the required parameter 'postId' when calling getPost");
      }

      let pathParams = {
        'post_id': postId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Post;
      return this.apiClient.callApi(
        '/posts/{post_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPostAndRelatedData operation.
     * @callback module:api/PostsApi~getPostAndRelatedDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPostAndRelatedData200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve post display data
     * Retrieve a post and other data related to the post that is useful for displaying the post such as data about the user who posted the post and the groups the post was posted on. 
     * @param {String} postId The ID of the post to retrieve.
     * @param {module:api/PostsApi~getPostAndRelatedDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPostAndRelatedData200Response}
     */
    getPostAndRelatedData(postId, callback) {
      let postBody = null;
      // verify the required parameter 'postId' is set
      if (postId === undefined || postId === null) {
        throw new Error("Missing the required parameter 'postId' when calling getPostAndRelatedData");
      }

      let pathParams = {
        'post_id': postId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPostAndRelatedData200Response;
      return this.apiClient.callApi(
        '/posts/{post_id}/display', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPosts operation.
     * @callback module:api/PostsApi~getPostsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPosts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List posts
     * NOTE: When paging through the posts returned by this endpoint, there will be at most 1,000 posts that can be returned (eg. 50 pages worth of posts with the default per_page value of 20).  In areas where there are more than 1,000 posts, clients can use more specific query parameters to adjust which posts are returned. NOTE: Passing the latitude, longitude and radius parameters filters all posts by their location and so these parameters will temporarily override the current users' location preferences. When latitude, longitude and radius are not specified, public posts will be filtered by the current users' location preferences. 
     * @param {String} types A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin 
     * @param {String} sources A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or the current users' location if latitude, longitude and radius aren't passed). <br /><br /> NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required. 
     * @param {Object} opts Optional parameters
     * @param {String} [sortBy = 'date')] How to sort the posts that are returned.  One of: date, active, distance <br /><br /> Date sorting will sort posts from newest to oldest. Active sorting will sort active posts before satisfied, withdrawn and expired posts and then sort by date. Distance sorting will sort the closest posts first. 
     * @param {String} [groupIds = 'The group IDs of every group the current user is a member of.')] A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the 'groups' source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). <br /><br /> NOTE: For requests using an api key instead of oauth, this field is required if the 'groups' source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). <br /><br/> *To determine which group IDs were used and which were discarded, use the group_ids field in the response. 
     * @param {Number} [perPage = 20)] The number of posts to return per page (must be >= 1 and <= 100).
     * @param {Number} [page = 1)] The page of posts to return.
     * @param {Number} [devicePixelRatio = 1)] Client device pixel ratio used to determine thumbnail size (default 1.0).
     * @param {Number} [latitude] The latitude of a point around which to return posts. 
     * @param {Number} [longitude] The longitude of a point around which to return posts. 
     * @param {Number} [radius] The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned. 
     * @param {Date} [dateMin] Only posts newer than or equal to this UTC date and time will be returned.  If unset, defaults to the current date and time minus 90 days. 
     * @param {Date} [dateMax] Only posts older than this UTC date and time will be returned.  If unset, defaults to the current date and time.
     * @param {String} [outcomes = '')] A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn <br /><br /> There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn and not expired are returned. If set to 'all', all posts will be returned no matter what outcome the posts have. If set to 'not-promised', only posts that are not satisfied ant not withdrawn and not expired and not promised are returned. 
     * @param {String} [userState = '')] If user_state is set, only posts matching the state specified will be returned.  Only one state may be passed and it must be one of the following: viewed, replied, bookmarked <br><br> NOTE: This option will only work with oauth requests. 
     * @param {Number} [includeReposts = 1)] If set to 1 (the default), posts that are reposts will be included. If set to 0, reposts will be excluded. See the repost_count field of post objects for details about how reposts are identified. 
     * @param {module:api/PostsApi~getPostsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPosts200Response}
     */
    getPosts(types, sources, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'types' is set
      if (types === undefined || types === null) {
        throw new Error("Missing the required parameter 'types' when calling getPosts");
      }
      // verify the required parameter 'sources' is set
      if (sources === undefined || sources === null) {
        throw new Error("Missing the required parameter 'sources' when calling getPosts");
      }

      let pathParams = {
      };
      let queryParams = {
        'sort_by': opts['sortBy'],
        'types': types,
        'sources': sources,
        'group_ids': opts['groupIds'],
        'per_page': opts['perPage'],
        'page': opts['page'],
        'device_pixel_ratio': opts['devicePixelRatio'],
        'latitude': opts['latitude'],
        'longitude': opts['longitude'],
        'radius': opts['radius'],
        'date_min': opts['dateMin'],
        'date_max': opts['dateMax'],
        'outcomes': opts['outcomes'],
        'user_state': opts['userState'],
        'include_reposts': opts['includeReposts']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPosts200Response;
      return this.apiClient.callApi(
        '/posts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPostsByIds operation.
     * @callback module:api/PostsApi~getPostsByIdsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPostsByIds200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve multiple posts
     * @param {String} postIds A comma separated list of the post IDs. If more than 10 post IDs are passed, only the first 10 posts will be returned. 
     * @param {module:api/PostsApi~getPostsByIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPostsByIds200Response}
     */
    getPostsByIds(postIds, callback) {
      let postBody = null;
      // verify the required parameter 'postIds' is set
      if (postIds === undefined || postIds === null) {
        throw new Error("Missing the required parameter 'postIds' when calling getPostsByIds");
      }

      let pathParams = {
      };
      let queryParams = {
        'post_ids': postIds
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPostsByIds200Response;
      return this.apiClient.callApi(
        '/posts/multiple', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchPosts operation.
     * @callback module:api/PostsApi~searchPostsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchPosts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search posts
     * Searching posts takes the same arguments as listing posts except for the addition of the search and sort_by parameters. NOTE: When paging through the posts returned by this endpoint, there will be at most 1,000 posts that can be returned (eg. 50 pages worth of posts with the default per_page value of 20).  In areas where there are more than 1,000 posts, clients can use more specific query parameters to adjust which posts are returned. 
     * @param {String} search The search query used to find posts.
     * @param {String} types A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin 
     * @param {String} sources A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or the current users' location if latitude, longitude and radius aren't passed). <br /><br /> NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required. 
     * @param {Object} opts Optional parameters
     * @param {String} [sortBy = 'relevance')] How to sort the posts that are returned.  One of: relevance, date, active, distance <br /><br /> Relevance sorting will sort the posts that best match the search query first. Date sorting will sort posts from newest to oldest. Active sorting will sort active posts before satisfied, withdrawn and expired posts and then sort by date. Distance sorting will sort the closest posts first. 
     * @param {String} [groupIds = 'The group IDs of every group the current user is a member of.')] A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the 'groups' source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). <br /><br /> NOTE: For requests using an api key instead of oauth, this field is required if the 'groups' source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). <br /><br/> *To determine which group IDs were used and which were discarded, use the group_ids field in the response. 
     * @param {Number} [perPage = 20)] The number of posts to return per page (must be >= 1 and <= 100).
     * @param {Number} [page = 1)] The page of posts to return.
     * @param {Number} [devicePixelRatio = 1)] Client device pixel ratio used to determine thumbnail size (default 1.0).
     * @param {Number} [latitude] The latitude of a point around which to return posts. 
     * @param {Number} [longitude] The longitude of a point around which to return posts. 
     * @param {Number} [radius] The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned. 
     * @param {Date} [dateMin] Only posts newer than or equal to this UTC date and time will be returned.  If unset, defaults to the current date and time minus 90 days. 
     * @param {Date} [dateMax] Only posts older than this UTC date and time will be returned.  If unset, defaults to the current date and time.
     * @param {String} [outcomes = '')] A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn <br /><br /> There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn and not expired are returned. If set to 'all', all posts will be returned no matter what outcome the posts have. If set to 'not-promised', only posts that are not satisfied ant not withdrawn and not expired and not promised are returned. 
     * @param {String} [userState = '')] If user_state is set, only posts matching the state specified will be returned.  Only one state may be passed and it must be one of the following: viewed, replied, bookmarked <br><br> NOTE: This option will only work with oauth requests. 
     * @param {Number} [includeReposts = 1)] If set to 1 (the default), posts that are reposts will be included. If set to 0, reposts will be excluded. See the repost_count field of post objects for details about how reposts are identified. 
     * @param {module:api/PostsApi~searchPostsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchPosts200Response}
     */
    searchPosts(search, types, sources, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'search' is set
      if (search === undefined || search === null) {
        throw new Error("Missing the required parameter 'search' when calling searchPosts");
      }
      // verify the required parameter 'types' is set
      if (types === undefined || types === null) {
        throw new Error("Missing the required parameter 'types' when calling searchPosts");
      }
      // verify the required parameter 'sources' is set
      if (sources === undefined || sources === null) {
        throw new Error("Missing the required parameter 'sources' when calling searchPosts");
      }

      let pathParams = {
      };
      let queryParams = {
        'search': search,
        'sort_by': opts['sortBy'],
        'types': types,
        'sources': sources,
        'group_ids': opts['groupIds'],
        'per_page': opts['perPage'],
        'page': opts['page'],
        'device_pixel_ratio': opts['devicePixelRatio'],
        'latitude': opts['latitude'],
        'longitude': opts['longitude'],
        'radius': opts['radius'],
        'date_min': opts['dateMin'],
        'date_max': opts['dateMax'],
        'outcomes': opts['outcomes'],
        'user_state': opts['userState'],
        'include_reposts': opts['includeReposts']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SearchPosts200Response;
      return this.apiClient.callApi(
        '/posts/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
