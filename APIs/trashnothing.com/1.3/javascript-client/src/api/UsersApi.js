/**
 * trash nothing
 * This is the REST API for [trashnothing.com](https://trashnothing.com).  To learn more about the API or to register your app for use with the API visit the [trash nothing Developer page](https://trashnothing.com/developer).  NOTE: All date-time values are [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) and are in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) (eg. 2019-02-03T01:23:53). 
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetPosts200Response from '../model/GetPosts200Response';
import SearchPosts200Response from '../model/SearchPosts200Response';

/**
* Users service.
* @module api/UsersApi
* @version 1.3
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getUserPosts operation.
     * @callback module:api/UsersApi~getUserPostsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPosts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List posts by a user
     * 
     * @param {String} userId The user ID of the user whose posts will be retrieved. Using 'me' as the user_id will return the posts for the current user. 
     * @param {String} types A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin 
     * @param {String} sources A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or all the open archive groups the requested user has posted to if latitude, longitude and radius aren't passed). <br /><br /> NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required. 
     * @param {Object} opts Optional parameters
     * @param {String} [sortBy = 'date')] How to sort the posts that are returned.  One of: date, active, distance <br /><br /> Date sorting will sort posts from newest to oldest. Active sorting will sort active posts before satisfied, withdrawn and expired posts and then sort by date. Distance sorting will sort the closest posts first. 
     * @param {String} [groupIds = 'The group IDs of every group the current user is a member of.')] A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the 'groups' source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). <br /><br /> NOTE: For requests using an api key instead of oauth, this field is required if the 'groups' source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). <br /><br/> *To determine which group IDs were used and which were discarded, use the group_ids field in the response. 
     * @param {Number} [perPage = 20)] The number of posts to return per page (must be >= 1 and <= 100).
     * @param {Number} [page = 1)] The page of posts to return.
     * @param {Number} [devicePixelRatio = 1)] Client device pixel ratio used to determine thumbnail size (default 1.0).
     * @param {Number} [latitude] The latitude of a point around which to return posts. 
     * @param {Number} [longitude] The longitude of a point around which to return posts. 
     * @param {Number} [radius] The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned. 
     * @param {Date} [dateMin] Only posts newer than or equal to this UTC date and time will be returned. 
     * @param {Date} [dateMax] Only posts older than this UTC date and time will be returned.
     * @param {String} [outcomes = '')] A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn <br /><br /> There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn and not expired are returned. If set to 'all', all posts will be returned no matter what outcome the posts have. If set to 'not-promised', only posts that are not satisfied ant not withdrawn and not expired and not promised are returned. 
     * @param {Number} [includeReposts = 1)] If set to 1 (the default), posts that are reposts will be included. If set to 0, reposts will be excluded. See the repost_count field of post objects for details about how reposts are identified. 
     * @param {module:api/UsersApi~getUserPostsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPosts200Response}
     */
    getUserPosts(userId, types, sources, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserPosts");
      }
      // verify the required parameter 'types' is set
      if (types === undefined || types === null) {
        throw new Error("Missing the required parameter 'types' when calling getUserPosts");
      }
      // verify the required parameter 'sources' is set
      if (sources === undefined || sources === null) {
        throw new Error("Missing the required parameter 'sources' when calling getUserPosts");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'sort_by': opts['sortBy'],
        'types': types,
        'sources': sources,
        'group_ids': opts['groupIds'],
        'per_page': opts['perPage'],
        'page': opts['page'],
        'device_pixel_ratio': opts['devicePixelRatio'],
        'latitude': opts['latitude'],
        'longitude': opts['longitude'],
        'radius': opts['radius'],
        'date_min': opts['dateMin'],
        'date_max': opts['dateMax'],
        'outcomes': opts['outcomes'],
        'include_reposts': opts['includeReposts']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPosts200Response;
      return this.apiClient.callApi(
        '/users/{user_id}/posts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchUserPosts operation.
     * @callback module:api/UsersApi~searchUserPostsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchPosts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search posts by a user
     * Searching posts takes the same arguments as listing posts except for the addition of the search and sort_by parameters. 
     * @param {String} userId The user ID of the user whose posts will be retrieved. Using 'me' as the user_id will return the posts for the current user. 
     * @param {String} search The search query used to find posts.
     * @param {String} types A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin 
     * @param {String} sources A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing, open_archive_groups. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group. The open_archive_groups source provides a way to easily request posts from groups that have open_archives set to true without having to pass a group_ids parameter.  When passed, it will automatically return posts from open archive groups that are within the area specified by the latitude, longitude and radius parameters (or all the open archive groups the requested user has posted to if latitude, longitude and radius aren't passed). <br /><br /> NOTE: For requests using an api key instead of oauth, passing the trashnothing source or the open_archive_groups source makes the latitude, longitude and radius parameters required. 
     * @param {Object} opts Optional parameters
     * @param {String} [sortBy = 'relevance')] How to sort the posts that are returned.  One of: relevance, date, active, distance <br /><br /> Relevance sorting will sort the posts that best match the search query first. Date sorting will sort posts from newest to oldest. Active sorting will sort active posts before satisfied, withdrawn and expired posts and then sort by date. Distance sorting will sort the closest posts first. 
     * @param {String} [groupIds = 'The group IDs of every group the current user is a member of.')] A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the 'groups' source is passed in the sources parameter and only groups that the current user is a member of or that are open archives groups will be used (the group IDs of other groups will be silently discarded*). <br /><br /> NOTE: For requests using an api key instead of oauth, this field is required if the 'groups' source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded*). <br /><br/> *To determine which group IDs were used and which were discarded, use the group_ids field in the response. 
     * @param {Number} [perPage = 20)] The number of posts to return per page (must be >= 1 and <= 100).
     * @param {Number} [page = 1)] The page of posts to return.
     * @param {Number} [devicePixelRatio = 1)] Client device pixel ratio used to determine thumbnail size (default 1.0).
     * @param {Number} [latitude] The latitude of a point around which to return posts. 
     * @param {Number} [longitude] The longitude of a point around which to return posts. 
     * @param {Number} [radius] The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned. 
     * @param {Date} [dateMin] Only posts newer than or equal to this UTC date and time will be returned. 
     * @param {Date} [dateMax] Only posts older than this UTC date and time will be returned.
     * @param {String} [outcomes = '')] A comma separated list of the post outcomes to return.  The available post outcomes are: satisfied, withdrawn <br /><br /> There are also a couple special values that can be passed.  If set to an empty string (the default), only posts that are not satisfied and not withdrawn and not expired are returned. If set to 'all', all posts will be returned no matter what outcome the posts have. If set to 'not-promised', only posts that are not satisfied ant not withdrawn and not expired and not promised are returned. 
     * @param {Number} [includeReposts = 1)] If set to 1 (the default), posts that are reposts will be included. If set to 0, reposts will be excluded. See the repost_count field of post objects for details about how reposts are identified. 
     * @param {module:api/UsersApi~searchUserPostsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchPosts200Response}
     */
    searchUserPosts(userId, search, types, sources, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling searchUserPosts");
      }
      // verify the required parameter 'search' is set
      if (search === undefined || search === null) {
        throw new Error("Missing the required parameter 'search' when calling searchUserPosts");
      }
      // verify the required parameter 'types' is set
      if (types === undefined || types === null) {
        throw new Error("Missing the required parameter 'types' when calling searchUserPosts");
      }
      // verify the required parameter 'sources' is set
      if (sources === undefined || sources === null) {
        throw new Error("Missing the required parameter 'sources' when calling searchUserPosts");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'search': search,
        'sort_by': opts['sortBy'],
        'types': types,
        'sources': sources,
        'group_ids': opts['groupIds'],
        'per_page': opts['perPage'],
        'page': opts['page'],
        'device_pixel_ratio': opts['devicePixelRatio'],
        'latitude': opts['latitude'],
        'longitude': opts['longitude'],
        'radius': opts['radius'],
        'date_min': opts['dateMin'],
        'date_max': opts['dateMax'],
        'outcomes': opts['outcomes'],
        'include_reposts': opts['includeReposts']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SearchPosts200Response;
      return this.apiClient.callApi(
        '/users/{user_id}/posts/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
