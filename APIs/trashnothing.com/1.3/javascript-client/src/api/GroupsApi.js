/**
 * trash nothing
 * This is the REST API for [trashnothing.com](https://trashnothing.com).  To learn more about the API or to register your app for use with the API visit the [trash nothing Developer page](https://trashnothing.com/developer).  NOTE: All date-time values are [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) and are in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) (eg. 2019-02-03T01:23:53). 
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Group from '../model/Group';
import SearchGroups200Response from '../model/SearchGroups200Response';

/**
* Groups service.
* @module api/GroupsApi
* @version 1.3
*/
export default class GroupsApi {

    /**
    * Constructs a new GroupsApi. 
    * @alias module:api/GroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getGroup operation.
     * @callback module:api/GroupsApi~getGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a group
     * @param {String} groupId The ID of the group to retrieve.
     * @param {module:api/GroupsApi~getGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    getGroup(groupId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getGroup");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/groups/{group_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupsByIds operation.
     * @callback module:api/GroupsApi~getGroupsByIdsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Group>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve multiple groups
     * @param {String} groupIds The IDs of the groups to retrieve.  If more than 20 group IDs are passed, only the first 20 groups will be returned.
     * @param {module:api/GroupsApi~getGroupsByIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Group>}
     */
    getGroupsByIds(groupIds, callback) {
      let postBody = null;
      // verify the required parameter 'groupIds' is set
      if (groupIds === undefined || groupIds === null) {
        throw new Error("Missing the required parameter 'groupIds' when calling getGroupsByIds");
      }

      let pathParams = {
      };
      let queryParams = {
        'group_ids': groupIds
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Group];
      return this.apiClient.callApi(
        '/groups/multiple', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchGroups operation.
     * @callback module:api/GroupsApi~searchGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchGroups200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search groups
     * @param {Object} opts Optional parameters
     * @param {String} [name] Find groups that have the given text somewhere in their name (case insensitive).
     * @param {Number} [latitude] Find groups near the given latitude and longitude.
     * @param {Number} [longitude] Find groups near the given latitude and longitude.
     * @param {Number} [distance = 100)] When latitude and longitude are passed, distance can optionally be passed to only return groups within a certain distance (in kilometers) from the point specified by the latitude and longitude.  The distance must be > 0 and <= 150 and will default to 100. 
     * @param {String} [country] Find groups in the given country where country is a 2 letter country code for the country (see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ). 
     * @param {String} [region] For countries with regions (AU, CA, GB, US), search groups in a specific region as specified by the region abbreviation.  The supported regions and their abbreviations are listed below. <br /><br /> NOTE: The region and postal_code parameters cannot be used at the same time and if both are passed then the postal_code will take priority. <br /><br /> --- <br /><br /> **AU**<br /> - QLD: Queensland<br /> - SA: South Australia<br /> - TAS: Tasmania<br /> - VIC: Victoria<br /> - WA: Western Australia<br /> - NT: Northern Territory<br /> - NSW: New South Wales - ACT<br /> <br /> **CA**<br /> - AB: Alberta<br /> - BC: British Columbia<br /> - MB: Manitoba<br /> - NB: New Brunswick<br /> - NL: Newfoundland and Labrador<br /> - NS: Nova Scotia<br /> - ON: Ontario<br /> - QC: Quebec<br /> - SK: Saskatchewan<br /> - PE: Prince Edward Island<br /> <br /> **GB**<br /> - E: East<br /> - EM: East Midlands<br /> - LDN: London<br /> - NE: North East<br /> - NW: North West<br /> - NI: Northern Ireland<br /> - SC: Scotland<br /> - SE: South East<br /> - SW: South West<br /> - WA: Wales<br /> - WM: West Midlands<br /> - YH: Yorkshire and the Humber<br /> <br /> **US**<br /> All 50 states and the District of Columbia are supported.  For the abbreviations, see: https://github.com/jasonong/List-of-US-States/blob/master/states.csv 
     * @param {String} [postalCode] Find groups in the given postal code.  Only a few countries support postal code searches (US, CA, AU, GB).  The country parameter must be passed when the postal_code parameter is set. <br /><br /> NOTE: The region and postal_code parameters cannot be used at the same time and if both are passed then the postal_code will take priority. 
     * @param {Number} [page = 1)] The page of groups to return.
     * @param {Number} [perPage = 20)] The number of groups to return per page (must be >= 1 and <= 100).
     * @param {module:api/GroupsApi~searchGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchGroups200Response}
     */
    searchGroups(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'latitude': opts['latitude'],
        'longitude': opts['longitude'],
        'distance': opts['distance'],
        'country': opts['country'],
        'region': opts['region'],
        'postal_code': opts['postalCode'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SearchGroups200Response;
      return this.apiClient.callApi(
        '/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
