/**
 * trash nothing
 * This is the REST API for [trashnothing.com](https://trashnothing.com).  To learn more about the API or to register your app for use with the API visit the [trash nothing Developer page](https://trashnothing.com/developer).  NOTE: All date-time values are [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) and are in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) (eg. 2019-02-03T01:23:53). 
 *
 * The version of the OpenAPI document: 1.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_posts_by_ids_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_posts_by_ids_200_response::OAIGet_posts_by_ids_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_posts_by_ids_200_response::OAIGet_posts_by_ids_200_response() {
    this->initializeModel();
}

OAIGet_posts_by_ids_200_response::~OAIGet_posts_by_ids_200_response() {}

void OAIGet_posts_by_ids_200_response::initializeModel() {

    m_forbidden_isSet = false;
    m_forbidden_isValid = false;

    m_not_found_isSet = false;
    m_not_found_isValid = false;

    m_posts_isSet = false;
    m_posts_isValid = false;
}

void OAIGet_posts_by_ids_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_posts_by_ids_200_response::fromJsonObject(QJsonObject json) {

    m_forbidden_isValid = ::OpenAPI::fromJsonValue(m_forbidden, json[QString("forbidden")]);
    m_forbidden_isSet = !json[QString("forbidden")].isNull() && m_forbidden_isValid;

    m_not_found_isValid = ::OpenAPI::fromJsonValue(m_not_found, json[QString("not_found")]);
    m_not_found_isSet = !json[QString("not_found")].isNull() && m_not_found_isValid;

    m_posts_isValid = ::OpenAPI::fromJsonValue(m_posts, json[QString("posts")]);
    m_posts_isSet = !json[QString("posts")].isNull() && m_posts_isValid;
}

QString OAIGet_posts_by_ids_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_posts_by_ids_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_forbidden.size() > 0) {
        obj.insert(QString("forbidden"), ::OpenAPI::toJsonValue(m_forbidden));
    }
    if (m_not_found.size() > 0) {
        obj.insert(QString("not_found"), ::OpenAPI::toJsonValue(m_not_found));
    }
    if (m_posts.size() > 0) {
        obj.insert(QString("posts"), ::OpenAPI::toJsonValue(m_posts));
    }
    return obj;
}

QList<QString> OAIGet_posts_by_ids_200_response::getForbidden() const {
    return m_forbidden;
}
void OAIGet_posts_by_ids_200_response::setForbidden(const QList<QString> &forbidden) {
    m_forbidden = forbidden;
    m_forbidden_isSet = true;
}

bool OAIGet_posts_by_ids_200_response::is_forbidden_Set() const{
    return m_forbidden_isSet;
}

bool OAIGet_posts_by_ids_200_response::is_forbidden_Valid() const{
    return m_forbidden_isValid;
}

QList<QString> OAIGet_posts_by_ids_200_response::getNotFound() const {
    return m_not_found;
}
void OAIGet_posts_by_ids_200_response::setNotFound(const QList<QString> &not_found) {
    m_not_found = not_found;
    m_not_found_isSet = true;
}

bool OAIGet_posts_by_ids_200_response::is_not_found_Set() const{
    return m_not_found_isSet;
}

bool OAIGet_posts_by_ids_200_response::is_not_found_Valid() const{
    return m_not_found_isValid;
}

QList<OAIPost> OAIGet_posts_by_ids_200_response::getPosts() const {
    return m_posts;
}
void OAIGet_posts_by_ids_200_response::setPosts(const QList<OAIPost> &posts) {
    m_posts = posts;
    m_posts_isSet = true;
}

bool OAIGet_posts_by_ids_200_response::is_posts_Set() const{
    return m_posts_isSet;
}

bool OAIGet_posts_by_ids_200_response::is_posts_Valid() const{
    return m_posts_isValid;
}

bool OAIGet_posts_by_ids_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_forbidden.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_found.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_posts.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_posts_by_ids_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
