/**
 * trash nothing
 * This is the REST API for [trashnothing.com](https://trashnothing.com).  To learn more about the API or to register your app for use with the API visit the [trash nothing Developer page](https://trashnothing.com/developer).  NOTE: All date-time values are [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) and are in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) (eg. 2019-02-03T01:23:53). 
 *
 * The version of the OpenAPI document: 1.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPostsApi_H
#define OAI_OAIPostsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGet_all_posts_200_response.h"
#include "OAIGet_all_posts_changes_200_response.h"
#include "OAIGet_post_and_related_data_200_response.h"
#include "OAIGet_posts_200_response.h"
#include "OAIGet_posts_by_ids_200_response.h"
#include "OAIPost.h"
#include "OAISearch_posts_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPostsApi : public QObject {
    Q_OBJECT

public:
    OAIPostsApi(const int timeOut = 0);
    ~OAIPostsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  types QString [required]
    * @param[in]  date_min QDateTime [required]
    * @param[in]  date_max QDateTime [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  device_pixel_ratio double [optional]
    */
    virtual void getAllPosts(const QString &types, const QDateTime &date_min, const QDateTime &date_max, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &device_pixel_ratio = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  date_min QDateTime [required]
    * @param[in]  date_max QDateTime [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void getAllPostsChanges(const QDateTime &date_min, const QDateTime &date_max, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  post_id QString [required]
    */
    virtual void getPost(const QString &post_id);

    /**
    * @param[in]  post_id QString [required]
    */
    virtual void getPostAndRelatedData(const QString &post_id);

    /**
    * @param[in]  types QString [required]
    * @param[in]  sources QString [required]
    * @param[in]  sort_by QString [optional]
    * @param[in]  group_ids QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  device_pixel_ratio double [optional]
    * @param[in]  latitude double [optional]
    * @param[in]  longitude double [optional]
    * @param[in]  radius double [optional]
    * @param[in]  date_min QDateTime [optional]
    * @param[in]  date_max QDateTime [optional]
    * @param[in]  outcomes QString [optional]
    * @param[in]  user_state QString [optional]
    * @param[in]  include_reposts qint32 [optional]
    */
    virtual void getPosts(const QString &types, const QString &sources, const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &device_pixel_ratio = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &latitude = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &longitude = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &radius = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QDateTime> &date_min = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &date_max = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &outcomes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &include_reposts = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  post_ids QString [required]
    */
    virtual void getPostsByIds(const QString &post_ids);

    /**
    * @param[in]  search QString [required]
    * @param[in]  types QString [required]
    * @param[in]  sources QString [required]
    * @param[in]  sort_by QString [optional]
    * @param[in]  group_ids QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  device_pixel_ratio double [optional]
    * @param[in]  latitude double [optional]
    * @param[in]  longitude double [optional]
    * @param[in]  radius double [optional]
    * @param[in]  date_min QDateTime [optional]
    * @param[in]  date_max QDateTime [optional]
    * @param[in]  outcomes QString [optional]
    * @param[in]  user_state QString [optional]
    * @param[in]  include_reposts qint32 [optional]
    */
    virtual void searchPosts(const QString &search, const QString &types, const QString &sources, const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &device_pixel_ratio = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &latitude = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &longitude = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &radius = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QDateTime> &date_min = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &date_max = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &outcomes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &include_reposts = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAllPostsCallback(OAIHttpRequestWorker *worker);
    void getAllPostsChangesCallback(OAIHttpRequestWorker *worker);
    void getPostCallback(OAIHttpRequestWorker *worker);
    void getPostAndRelatedDataCallback(OAIHttpRequestWorker *worker);
    void getPostsCallback(OAIHttpRequestWorker *worker);
    void getPostsByIdsCallback(OAIHttpRequestWorker *worker);
    void searchPostsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAllPostsSignal(OAIGet_all_posts_200_response summary);
    void getAllPostsChangesSignal(OAIGet_all_posts_changes_200_response summary);
    void getPostSignal(OAIPost summary);
    void getPostAndRelatedDataSignal(OAIGet_post_and_related_data_200_response summary);
    void getPostsSignal(OAIGet_posts_200_response summary);
    void getPostsByIdsSignal(OAIGet_posts_by_ids_200_response summary);
    void searchPostsSignal(OAISearch_posts_200_response summary);


    void getAllPostsSignalFull(OAIHttpRequestWorker *worker, OAIGet_all_posts_200_response summary);
    void getAllPostsChangesSignalFull(OAIHttpRequestWorker *worker, OAIGet_all_posts_changes_200_response summary);
    void getPostSignalFull(OAIHttpRequestWorker *worker, OAIPost summary);
    void getPostAndRelatedDataSignalFull(OAIHttpRequestWorker *worker, OAIGet_post_and_related_data_200_response summary);
    void getPostsSignalFull(OAIHttpRequestWorker *worker, OAIGet_posts_200_response summary);
    void getPostsByIdsSignalFull(OAIHttpRequestWorker *worker, OAIGet_posts_by_ids_200_response summary);
    void searchPostsSignalFull(OAIHttpRequestWorker *worker, OAISearch_posts_200_response summary);

    Q_DECL_DEPRECATED_X("Use getAllPostsSignalError() instead")
    void getAllPostsSignalE(OAIGet_all_posts_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPostsSignalError(OAIGet_all_posts_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllPostsChangesSignalError() instead")
    void getAllPostsChangesSignalE(OAIGet_all_posts_changes_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPostsChangesSignalError(OAIGet_all_posts_changes_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPostSignalError() instead")
    void getPostSignalE(OAIPost summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPostSignalError(OAIPost summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPostAndRelatedDataSignalError() instead")
    void getPostAndRelatedDataSignalE(OAIGet_post_and_related_data_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPostAndRelatedDataSignalError(OAIGet_post_and_related_data_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPostsSignalError() instead")
    void getPostsSignalE(OAIGet_posts_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPostsSignalError(OAIGet_posts_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPostsByIdsSignalError() instead")
    void getPostsByIdsSignalE(OAIGet_posts_by_ids_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPostsByIdsSignalError(OAIGet_posts_by_ids_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchPostsSignalError() instead")
    void searchPostsSignalE(OAISearch_posts_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchPostsSignalError(OAISearch_posts_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAllPostsSignalErrorFull() instead")
    void getAllPostsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPostsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllPostsChangesSignalErrorFull() instead")
    void getAllPostsChangesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPostsChangesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPostSignalErrorFull() instead")
    void getPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPostAndRelatedDataSignalErrorFull() instead")
    void getPostAndRelatedDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPostAndRelatedDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPostsSignalErrorFull() instead")
    void getPostsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPostsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPostsByIdsSignalErrorFull() instead")
    void getPostsByIdsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPostsByIdsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchPostsSignalErrorFull() instead")
    void searchPostsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchPostsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
