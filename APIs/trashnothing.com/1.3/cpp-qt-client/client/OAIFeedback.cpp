/**
 * trash nothing
 * This is the REST API for [trashnothing.com](https://trashnothing.com).  To learn more about the API or to register your app for use with the API visit the [trash nothing Developer page](https://trashnothing.com/developer).  NOTE: All date-time values are [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) and are in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) (eg. 2019-02-03T01:23:53). 
 *
 * The version of the OpenAPI document: 1.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeedback.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeedback::OAIFeedback(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeedback::OAIFeedback() {
    this->initializeModel();
}

OAIFeedback::~OAIFeedback() {}

void OAIFeedback::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_feedback_id_isSet = false;
    m_feedback_id_isValid = false;

    m_positive_isSet = false;
    m_positive_isValid = false;

    m_reviewer_user_id_isSet = false;
    m_reviewer_user_id_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIFeedback::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeedback::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_feedback_id_isValid = ::OpenAPI::fromJsonValue(m_feedback_id, json[QString("feedback_id")]);
    m_feedback_id_isSet = !json[QString("feedback_id")].isNull() && m_feedback_id_isValid;

    m_positive_isValid = ::OpenAPI::fromJsonValue(m_positive, json[QString("positive")]);
    m_positive_isSet = !json[QString("positive")].isNull() && m_positive_isValid;

    m_reviewer_user_id_isValid = ::OpenAPI::fromJsonValue(m_reviewer_user_id, json[QString("reviewer_user_id")]);
    m_reviewer_user_id_isSet = !json[QString("reviewer_user_id")].isNull() && m_reviewer_user_id_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIFeedback::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeedback::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_feedback_id_isSet) {
        obj.insert(QString("feedback_id"), ::OpenAPI::toJsonValue(m_feedback_id));
    }
    if (m_positive_isSet) {
        obj.insert(QString("positive"), ::OpenAPI::toJsonValue(m_positive));
    }
    if (m_reviewer_user_id_isSet) {
        obj.insert(QString("reviewer_user_id"), ::OpenAPI::toJsonValue(m_reviewer_user_id));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIFeedback::getContent() const {
    return m_content;
}
void OAIFeedback::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIFeedback::is_content_Set() const{
    return m_content_isSet;
}

bool OAIFeedback::is_content_Valid() const{
    return m_content_isValid;
}

QDateTime OAIFeedback::getDate() const {
    return m_date;
}
void OAIFeedback::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIFeedback::is_date_Set() const{
    return m_date_isSet;
}

bool OAIFeedback::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIFeedback::getFeedbackId() const {
    return m_feedback_id;
}
void OAIFeedback::setFeedbackId(const QString &feedback_id) {
    m_feedback_id = feedback_id;
    m_feedback_id_isSet = true;
}

bool OAIFeedback::is_feedback_id_Set() const{
    return m_feedback_id_isSet;
}

bool OAIFeedback::is_feedback_id_Valid() const{
    return m_feedback_id_isValid;
}

bool OAIFeedback::isPositive() const {
    return m_positive;
}
void OAIFeedback::setPositive(const bool &positive) {
    m_positive = positive;
    m_positive_isSet = true;
}

bool OAIFeedback::is_positive_Set() const{
    return m_positive_isSet;
}

bool OAIFeedback::is_positive_Valid() const{
    return m_positive_isValid;
}

QString OAIFeedback::getReviewerUserId() const {
    return m_reviewer_user_id;
}
void OAIFeedback::setReviewerUserId(const QString &reviewer_user_id) {
    m_reviewer_user_id = reviewer_user_id;
    m_reviewer_user_id_isSet = true;
}

bool OAIFeedback::is_reviewer_user_id_Set() const{
    return m_reviewer_user_id_isSet;
}

bool OAIFeedback::is_reviewer_user_id_Valid() const{
    return m_reviewer_user_id_isValid;
}

QString OAIFeedback::getUserId() const {
    return m_user_id;
}
void OAIFeedback::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIFeedback::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIFeedback::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIFeedback::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feedback_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_positive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reviewer_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeedback::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
