/**
 * trash nothing
 * This is the REST API for [trashnothing.com](https://trashnothing.com).  To learn more about the API or to register your app for use with the API visit the [trash nothing Developer page](https://trashnothing.com/developer).  NOTE: All date-time values are [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) and are in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) (eg. 2019-02-03T01:23:53). 
 *
 * The version of the OpenAPI document: 1.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearch_groups_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearch_groups_200_response::OAISearch_groups_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearch_groups_200_response::OAISearch_groups_200_response() {
    this->initializeModel();
}

OAISearch_groups_200_response::~OAISearch_groups_200_response() {}

void OAISearch_groups_200_response::initializeModel() {

    m_end_index_isSet = false;
    m_end_index_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_num_groups_isSet = false;
    m_num_groups_isValid = false;

    m_num_pages_isSet = false;
    m_num_pages_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_per_page_isSet = false;
    m_per_page_isValid = false;

    m_start_index_isSet = false;
    m_start_index_isValid = false;
}

void OAISearch_groups_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearch_groups_200_response::fromJsonObject(QJsonObject json) {

    m_end_index_isValid = ::OpenAPI::fromJsonValue(m_end_index, json[QString("end_index")]);
    m_end_index_isSet = !json[QString("end_index")].isNull() && m_end_index_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_num_groups_isValid = ::OpenAPI::fromJsonValue(m_num_groups, json[QString("num_groups")]);
    m_num_groups_isSet = !json[QString("num_groups")].isNull() && m_num_groups_isValid;

    m_num_pages_isValid = ::OpenAPI::fromJsonValue(m_num_pages, json[QString("num_pages")]);
    m_num_pages_isSet = !json[QString("num_pages")].isNull() && m_num_pages_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_per_page_isValid = ::OpenAPI::fromJsonValue(m_per_page, json[QString("per_page")]);
    m_per_page_isSet = !json[QString("per_page")].isNull() && m_per_page_isValid;

    m_start_index_isValid = ::OpenAPI::fromJsonValue(m_start_index, json[QString("start_index")]);
    m_start_index_isSet = !json[QString("start_index")].isNull() && m_start_index_isValid;
}

QString OAISearch_groups_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearch_groups_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_end_index_isSet) {
        obj.insert(QString("end_index"), ::OpenAPI::toJsonValue(m_end_index));
    }
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_num_groups_isSet) {
        obj.insert(QString("num_groups"), ::OpenAPI::toJsonValue(m_num_groups));
    }
    if (m_num_pages_isSet) {
        obj.insert(QString("num_pages"), ::OpenAPI::toJsonValue(m_num_pages));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_per_page_isSet) {
        obj.insert(QString("per_page"), ::OpenAPI::toJsonValue(m_per_page));
    }
    if (m_start_index_isSet) {
        obj.insert(QString("start_index"), ::OpenAPI::toJsonValue(m_start_index));
    }
    return obj;
}

qint32 OAISearch_groups_200_response::getEndIndex() const {
    return m_end_index;
}
void OAISearch_groups_200_response::setEndIndex(const qint32 &end_index) {
    m_end_index = end_index;
    m_end_index_isSet = true;
}

bool OAISearch_groups_200_response::is_end_index_Set() const{
    return m_end_index_isSet;
}

bool OAISearch_groups_200_response::is_end_index_Valid() const{
    return m_end_index_isValid;
}

QList<OAIGroup> OAISearch_groups_200_response::getGroups() const {
    return m_groups;
}
void OAISearch_groups_200_response::setGroups(const QList<OAIGroup> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAISearch_groups_200_response::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAISearch_groups_200_response::is_groups_Valid() const{
    return m_groups_isValid;
}

qint32 OAISearch_groups_200_response::getNumGroups() const {
    return m_num_groups;
}
void OAISearch_groups_200_response::setNumGroups(const qint32 &num_groups) {
    m_num_groups = num_groups;
    m_num_groups_isSet = true;
}

bool OAISearch_groups_200_response::is_num_groups_Set() const{
    return m_num_groups_isSet;
}

bool OAISearch_groups_200_response::is_num_groups_Valid() const{
    return m_num_groups_isValid;
}

qint32 OAISearch_groups_200_response::getNumPages() const {
    return m_num_pages;
}
void OAISearch_groups_200_response::setNumPages(const qint32 &num_pages) {
    m_num_pages = num_pages;
    m_num_pages_isSet = true;
}

bool OAISearch_groups_200_response::is_num_pages_Set() const{
    return m_num_pages_isSet;
}

bool OAISearch_groups_200_response::is_num_pages_Valid() const{
    return m_num_pages_isValid;
}

qint32 OAISearch_groups_200_response::getPage() const {
    return m_page;
}
void OAISearch_groups_200_response::setPage(const qint32 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAISearch_groups_200_response::is_page_Set() const{
    return m_page_isSet;
}

bool OAISearch_groups_200_response::is_page_Valid() const{
    return m_page_isValid;
}

qint32 OAISearch_groups_200_response::getPerPage() const {
    return m_per_page;
}
void OAISearch_groups_200_response::setPerPage(const qint32 &per_page) {
    m_per_page = per_page;
    m_per_page_isSet = true;
}

bool OAISearch_groups_200_response::is_per_page_Set() const{
    return m_per_page_isSet;
}

bool OAISearch_groups_200_response::is_per_page_Valid() const{
    return m_per_page_isValid;
}

qint32 OAISearch_groups_200_response::getStartIndex() const {
    return m_start_index;
}
void OAISearch_groups_200_response::setStartIndex(const qint32 &start_index) {
    m_start_index = start_index;
    m_start_index_isSet = true;
}

bool OAISearch_groups_200_response::is_start_index_Set() const{
    return m_start_index_isSet;
}

bool OAISearch_groups_200_response::is_start_index_Valid() const{
    return m_start_index_isValid;
}

bool OAISearch_groups_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_groups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_pages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_index_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearch_groups_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
