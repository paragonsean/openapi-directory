/**
 * trash nothing
 * This is the REST API for [trashnothing.com](https://trashnothing.com).  To learn more about the API or to register your app for use with the API visit the [trash nothing Developer page](https://trashnothing.com/developer).  NOTE: All date-time values are [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) and are in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) (eg. 2019-02-03T01:23:53). 
 *
 * The version of the OpenAPI document: 1.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_post_and_related_data_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_post_and_related_data_200_response::OAIGet_post_and_related_data_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_post_and_related_data_200_response::OAIGet_post_and_related_data_200_response() {
    this->initializeModel();
}

OAIGet_post_and_related_data_200_response::~OAIGet_post_and_related_data_200_response() {}

void OAIGet_post_and_related_data_200_response::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_author_offer_count_isSet = false;
    m_author_offer_count_isValid = false;

    m_author_posts_isSet = false;
    m_author_posts_isValid = false;

    m_author_wanted_count_isSet = false;
    m_author_wanted_count_isValid = false;

    m_bookmarked_isSet = false;
    m_bookmarked_isValid = false;

    m_feedback_isSet = false;
    m_feedback_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_post_isSet = false;
    m_post_isValid = false;

    m_replied_isSet = false;
    m_replied_isValid = false;

    m_user_can_reply_isSet = false;
    m_user_can_reply_isValid = false;

    m_viewed_isSet = false;
    m_viewed_isValid = false;
}

void OAIGet_post_and_related_data_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_post_and_related_data_200_response::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_author_offer_count_isValid = ::OpenAPI::fromJsonValue(m_author_offer_count, json[QString("author_offer_count")]);
    m_author_offer_count_isSet = !json[QString("author_offer_count")].isNull() && m_author_offer_count_isValid;

    m_author_posts_isValid = ::OpenAPI::fromJsonValue(m_author_posts, json[QString("author_posts")]);
    m_author_posts_isSet = !json[QString("author_posts")].isNull() && m_author_posts_isValid;

    m_author_wanted_count_isValid = ::OpenAPI::fromJsonValue(m_author_wanted_count, json[QString("author_wanted_count")]);
    m_author_wanted_count_isSet = !json[QString("author_wanted_count")].isNull() && m_author_wanted_count_isValid;

    m_bookmarked_isValid = ::OpenAPI::fromJsonValue(m_bookmarked, json[QString("bookmarked")]);
    m_bookmarked_isSet = !json[QString("bookmarked")].isNull() && m_bookmarked_isValid;

    m_feedback_isValid = ::OpenAPI::fromJsonValue(m_feedback, json[QString("feedback")]);
    m_feedback_isSet = !json[QString("feedback")].isNull() && m_feedback_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_post_isValid = ::OpenAPI::fromJsonValue(m_post, json[QString("post")]);
    m_post_isSet = !json[QString("post")].isNull() && m_post_isValid;

    m_replied_isValid = ::OpenAPI::fromJsonValue(m_replied, json[QString("replied")]);
    m_replied_isSet = !json[QString("replied")].isNull() && m_replied_isValid;

    m_user_can_reply_isValid = ::OpenAPI::fromJsonValue(m_user_can_reply, json[QString("user_can_reply")]);
    m_user_can_reply_isSet = !json[QString("user_can_reply")].isNull() && m_user_can_reply_isValid;

    m_viewed_isValid = ::OpenAPI::fromJsonValue(m_viewed, json[QString("viewed")]);
    m_viewed_isSet = !json[QString("viewed")].isNull() && m_viewed_isValid;
}

QString OAIGet_post_and_related_data_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_post_and_related_data_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_author_offer_count_isSet) {
        obj.insert(QString("author_offer_count"), ::OpenAPI::toJsonValue(m_author_offer_count));
    }
    if (m_author_posts.size() > 0) {
        obj.insert(QString("author_posts"), ::OpenAPI::toJsonValue(m_author_posts));
    }
    if (m_author_wanted_count_isSet) {
        obj.insert(QString("author_wanted_count"), ::OpenAPI::toJsonValue(m_author_wanted_count));
    }
    if (m_bookmarked_isSet) {
        obj.insert(QString("bookmarked"), ::OpenAPI::toJsonValue(m_bookmarked));
    }
    if (m_feedback.size() > 0) {
        obj.insert(QString("feedback"), ::OpenAPI::toJsonValue(m_feedback));
    }
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_post.isSet()) {
        obj.insert(QString("post"), ::OpenAPI::toJsonValue(m_post));
    }
    if (m_replied_isSet) {
        obj.insert(QString("replied"), ::OpenAPI::toJsonValue(m_replied));
    }
    if (m_user_can_reply_isSet) {
        obj.insert(QString("user_can_reply"), ::OpenAPI::toJsonValue(m_user_can_reply));
    }
    if (m_viewed_isSet) {
        obj.insert(QString("viewed"), ::OpenAPI::toJsonValue(m_viewed));
    }
    return obj;
}

OAIUser OAIGet_post_and_related_data_200_response::getAuthor() const {
    return m_author;
}
void OAIGet_post_and_related_data_200_response::setAuthor(const OAIUser &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIGet_post_and_related_data_200_response::is_author_Set() const{
    return m_author_isSet;
}

bool OAIGet_post_and_related_data_200_response::is_author_Valid() const{
    return m_author_isValid;
}

qint32 OAIGet_post_and_related_data_200_response::getAuthorOfferCount() const {
    return m_author_offer_count;
}
void OAIGet_post_and_related_data_200_response::setAuthorOfferCount(const qint32 &author_offer_count) {
    m_author_offer_count = author_offer_count;
    m_author_offer_count_isSet = true;
}

bool OAIGet_post_and_related_data_200_response::is_author_offer_count_Set() const{
    return m_author_offer_count_isSet;
}

bool OAIGet_post_and_related_data_200_response::is_author_offer_count_Valid() const{
    return m_author_offer_count_isValid;
}

QList<OAIPost> OAIGet_post_and_related_data_200_response::getAuthorPosts() const {
    return m_author_posts;
}
void OAIGet_post_and_related_data_200_response::setAuthorPosts(const QList<OAIPost> &author_posts) {
    m_author_posts = author_posts;
    m_author_posts_isSet = true;
}

bool OAIGet_post_and_related_data_200_response::is_author_posts_Set() const{
    return m_author_posts_isSet;
}

bool OAIGet_post_and_related_data_200_response::is_author_posts_Valid() const{
    return m_author_posts_isValid;
}

qint32 OAIGet_post_and_related_data_200_response::getAuthorWantedCount() const {
    return m_author_wanted_count;
}
void OAIGet_post_and_related_data_200_response::setAuthorWantedCount(const qint32 &author_wanted_count) {
    m_author_wanted_count = author_wanted_count;
    m_author_wanted_count_isSet = true;
}

bool OAIGet_post_and_related_data_200_response::is_author_wanted_count_Set() const{
    return m_author_wanted_count_isSet;
}

bool OAIGet_post_and_related_data_200_response::is_author_wanted_count_Valid() const{
    return m_author_wanted_count_isValid;
}

bool OAIGet_post_and_related_data_200_response::isBookmarked() const {
    return m_bookmarked;
}
void OAIGet_post_and_related_data_200_response::setBookmarked(const bool &bookmarked) {
    m_bookmarked = bookmarked;
    m_bookmarked_isSet = true;
}

bool OAIGet_post_and_related_data_200_response::is_bookmarked_Set() const{
    return m_bookmarked_isSet;
}

bool OAIGet_post_and_related_data_200_response::is_bookmarked_Valid() const{
    return m_bookmarked_isValid;
}

QList<OAIFeedback> OAIGet_post_and_related_data_200_response::getFeedback() const {
    return m_feedback;
}
void OAIGet_post_and_related_data_200_response::setFeedback(const QList<OAIFeedback> &feedback) {
    m_feedback = feedback;
    m_feedback_isSet = true;
}

bool OAIGet_post_and_related_data_200_response::is_feedback_Set() const{
    return m_feedback_isSet;
}

bool OAIGet_post_and_related_data_200_response::is_feedback_Valid() const{
    return m_feedback_isValid;
}

QList<OAIGroup> OAIGet_post_and_related_data_200_response::getGroups() const {
    return m_groups;
}
void OAIGet_post_and_related_data_200_response::setGroups(const QList<OAIGroup> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIGet_post_and_related_data_200_response::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIGet_post_and_related_data_200_response::is_groups_Valid() const{
    return m_groups_isValid;
}

OAIPost OAIGet_post_and_related_data_200_response::getPost() const {
    return m_post;
}
void OAIGet_post_and_related_data_200_response::setPost(const OAIPost &post) {
    m_post = post;
    m_post_isSet = true;
}

bool OAIGet_post_and_related_data_200_response::is_post_Set() const{
    return m_post_isSet;
}

bool OAIGet_post_and_related_data_200_response::is_post_Valid() const{
    return m_post_isValid;
}

bool OAIGet_post_and_related_data_200_response::isReplied() const {
    return m_replied;
}
void OAIGet_post_and_related_data_200_response::setReplied(const bool &replied) {
    m_replied = replied;
    m_replied_isSet = true;
}

bool OAIGet_post_and_related_data_200_response::is_replied_Set() const{
    return m_replied_isSet;
}

bool OAIGet_post_and_related_data_200_response::is_replied_Valid() const{
    return m_replied_isValid;
}

bool OAIGet_post_and_related_data_200_response::isUserCanReply() const {
    return m_user_can_reply;
}
void OAIGet_post_and_related_data_200_response::setUserCanReply(const bool &user_can_reply) {
    m_user_can_reply = user_can_reply;
    m_user_can_reply_isSet = true;
}

bool OAIGet_post_and_related_data_200_response::is_user_can_reply_Set() const{
    return m_user_can_reply_isSet;
}

bool OAIGet_post_and_related_data_200_response::is_user_can_reply_Valid() const{
    return m_user_can_reply_isValid;
}

bool OAIGet_post_and_related_data_200_response::isViewed() const {
    return m_viewed;
}
void OAIGet_post_and_related_data_200_response::setViewed(const bool &viewed) {
    m_viewed = viewed;
    m_viewed_isSet = true;
}

bool OAIGet_post_and_related_data_200_response::is_viewed_Set() const{
    return m_viewed_isSet;
}

bool OAIGet_post_and_related_data_200_response::is_viewed_Valid() const{
    return m_viewed_isValid;
}

bool OAIGet_post_and_related_data_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_offer_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_posts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_wanted_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bookmarked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feedback.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_post.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replied_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_can_reply_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_post_and_related_data_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
