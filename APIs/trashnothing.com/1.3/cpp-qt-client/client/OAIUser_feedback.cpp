/**
 * trash nothing
 * This is the REST API for [trashnothing.com](https://trashnothing.com).  To learn more about the API or to register your app for use with the API visit the [trash nothing Developer page](https://trashnothing.com/developer).  NOTE: All date-time values are [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) and are in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) (eg. 2019-02-03T01:23:53). 
 *
 * The version of the OpenAPI document: 1.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser_feedback.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser_feedback::OAIUser_feedback(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser_feedback::OAIUser_feedback() {
    this->initializeModel();
}

OAIUser_feedback::~OAIUser_feedback() {}

void OAIUser_feedback::initializeModel() {

    m_percent_positive_isSet = false;
    m_percent_positive_isValid = false;

    m_restriction_isSet = false;
    m_restriction_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;
}

void OAIUser_feedback::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser_feedback::fromJsonObject(QJsonObject json) {

    m_percent_positive_isValid = ::OpenAPI::fromJsonValue(m_percent_positive, json[QString("percent_positive")]);
    m_percent_positive_isSet = !json[QString("percent_positive")].isNull() && m_percent_positive_isValid;

    m_restriction_isValid = ::OpenAPI::fromJsonValue(m_restriction, json[QString("restriction")]);
    m_restriction_isSet = !json[QString("restriction")].isNull() && m_restriction_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;
}

QString OAIUser_feedback::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser_feedback::asJsonObject() const {
    QJsonObject obj;
    if (m_percent_positive_isSet) {
        obj.insert(QString("percent_positive"), ::OpenAPI::toJsonValue(m_percent_positive));
    }
    if (m_restriction_isSet) {
        obj.insert(QString("restriction"), ::OpenAPI::toJsonValue(m_restriction));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    return obj;
}

double OAIUser_feedback::getPercentPositive() const {
    return m_percent_positive;
}
void OAIUser_feedback::setPercentPositive(const double &percent_positive) {
    m_percent_positive = percent_positive;
    m_percent_positive_isSet = true;
}

bool OAIUser_feedback::is_percent_positive_Set() const{
    return m_percent_positive_isSet;
}

bool OAIUser_feedback::is_percent_positive_Valid() const{
    return m_percent_positive_isValid;
}

QString OAIUser_feedback::getRestriction() const {
    return m_restriction;
}
void OAIUser_feedback::setRestriction(const QString &restriction) {
    m_restriction = restriction;
    m_restriction_isSet = true;
}

bool OAIUser_feedback::is_restriction_Set() const{
    return m_restriction_isSet;
}

bool OAIUser_feedback::is_restriction_Valid() const{
    return m_restriction_isValid;
}

qint32 OAIUser_feedback::getScore() const {
    return m_score;
}
void OAIUser_feedback::setScore(const qint32 &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIUser_feedback::is_score_Set() const{
    return m_score_isSet;
}

bool OAIUser_feedback::is_score_Valid() const{
    return m_score_isValid;
}

bool OAIUser_feedback::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_percent_positive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restriction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser_feedback::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
