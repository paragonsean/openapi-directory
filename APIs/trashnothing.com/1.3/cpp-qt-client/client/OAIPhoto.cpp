/**
 * trash nothing
 * This is the REST API for [trashnothing.com](https://trashnothing.com).  To learn more about the API or to register your app for use with the API visit the [trash nothing Developer page](https://trashnothing.com/developer).  NOTE: All date-time values are [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) and are in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) (eg. 2019-02-03T01:23:53). 
 *
 * The version of the OpenAPI document: 1.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPhoto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPhoto::OAIPhoto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPhoto::OAIPhoto() {
    this->initializeModel();
}

OAIPhoto::~OAIPhoto() {}

void OAIPhoto::initializeModel() {

    m_blurhash_isSet = false;
    m_blurhash_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_photo_id_isSet = false;
    m_photo_id_isValid = false;

    m_thumbnail_isSet = false;
    m_thumbnail_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIPhoto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPhoto::fromJsonObject(QJsonObject json) {

    m_blurhash_isValid = ::OpenAPI::fromJsonValue(m_blurhash, json[QString("blurhash")]);
    m_blurhash_isSet = !json[QString("blurhash")].isNull() && m_blurhash_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_photo_id_isValid = ::OpenAPI::fromJsonValue(m_photo_id, json[QString("photo_id")]);
    m_photo_id_isSet = !json[QString("photo_id")].isNull() && m_photo_id_isValid;

    m_thumbnail_isValid = ::OpenAPI::fromJsonValue(m_thumbnail, json[QString("thumbnail")]);
    m_thumbnail_isSet = !json[QString("thumbnail")].isNull() && m_thumbnail_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIPhoto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPhoto::asJsonObject() const {
    QJsonObject obj;
    if (m_blurhash_isSet) {
        obj.insert(QString("blurhash"), ::OpenAPI::toJsonValue(m_blurhash));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_photo_id_isSet) {
        obj.insert(QString("photo_id"), ::OpenAPI::toJsonValue(m_photo_id));
    }
    if (m_thumbnail_isSet) {
        obj.insert(QString("thumbnail"), ::OpenAPI::toJsonValue(m_thumbnail));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIPhoto::getBlurhash() const {
    return m_blurhash;
}
void OAIPhoto::setBlurhash(const QString &blurhash) {
    m_blurhash = blurhash;
    m_blurhash_isSet = true;
}

bool OAIPhoto::is_blurhash_Set() const{
    return m_blurhash_isSet;
}

bool OAIPhoto::is_blurhash_Valid() const{
    return m_blurhash_isValid;
}

QList<OAIPhoto_images_inner> OAIPhoto::getImages() const {
    return m_images;
}
void OAIPhoto::setImages(const QList<OAIPhoto_images_inner> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIPhoto::is_images_Set() const{
    return m_images_isSet;
}

bool OAIPhoto::is_images_Valid() const{
    return m_images_isValid;
}

QString OAIPhoto::getPhotoId() const {
    return m_photo_id;
}
void OAIPhoto::setPhotoId(const QString &photo_id) {
    m_photo_id = photo_id;
    m_photo_id_isSet = true;
}

bool OAIPhoto::is_photo_id_Set() const{
    return m_photo_id_isSet;
}

bool OAIPhoto::is_photo_id_Valid() const{
    return m_photo_id_isValid;
}

QString OAIPhoto::getThumbnail() const {
    return m_thumbnail;
}
void OAIPhoto::setThumbnail(const QString &thumbnail) {
    m_thumbnail = thumbnail;
    m_thumbnail_isSet = true;
}

bool OAIPhoto::is_thumbnail_Set() const{
    return m_thumbnail_isSet;
}

bool OAIPhoto::is_thumbnail_Valid() const{
    return m_thumbnail_isValid;
}

QString OAIPhoto::getUrl() const {
    return m_url;
}
void OAIPhoto::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPhoto::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPhoto::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIPhoto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blurhash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_photo_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPhoto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
