/**
 * trash nothing
 * This is the REST API for [trashnothing.com](https://trashnothing.com).  To learn more about the API or to register your app for use with the API visit the [trash nothing Developer page](https://trashnothing.com/developer).  NOTE: All date-time values are [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) and are in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) (eg. 2019-02-03T01:23:53). 
 *
 * The version of the OpenAPI document: 1.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroup::OAIGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroup::OAIGroup() {
    this->initializeModel();
}

OAIGroup::~OAIGroup() {}

void OAIGroup::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_has_questions_isSet = false;
    m_has_questions_isValid = false;

    m_homepage_isSet = false;
    m_homepage_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_member_count_isSet = false;
    m_member_count_isValid = false;

    m_membership_isSet = false;
    m_membership_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_open_archives_isSet = false;
    m_open_archives_isValid = false;

    m_open_membership_isSet = false;
    m_open_membership_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;
}

void OAIGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroup::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("group_id")]);
    m_group_id_isSet = !json[QString("group_id")].isNull() && m_group_id_isValid;

    m_has_questions_isValid = ::OpenAPI::fromJsonValue(m_has_questions, json[QString("has_questions")]);
    m_has_questions_isSet = !json[QString("has_questions")].isNull() && m_has_questions_isValid;

    m_homepage_isValid = ::OpenAPI::fromJsonValue(m_homepage, json[QString("homepage")]);
    m_homepage_isSet = !json[QString("homepage")].isNull() && m_homepage_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_member_count_isValid = ::OpenAPI::fromJsonValue(m_member_count, json[QString("member_count")]);
    m_member_count_isSet = !json[QString("member_count")].isNull() && m_member_count_isValid;

    m_membership_isValid = ::OpenAPI::fromJsonValue(m_membership, json[QString("membership")]);
    m_membership_isSet = !json[QString("membership")].isNull() && m_membership_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_open_archives_isValid = ::OpenAPI::fromJsonValue(m_open_archives, json[QString("open_archives")]);
    m_open_archives_isSet = !json[QString("open_archives")].isNull() && m_open_archives_isValid;

    m_open_membership_isValid = ::OpenAPI::fromJsonValue(m_open_membership, json[QString("open_membership")]);
    m_open_membership_isSet = !json[QString("open_membership")].isNull() && m_open_membership_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;
}

QString OAIGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_country.isSet()) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("group_id"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_has_questions_isSet) {
        obj.insert(QString("has_questions"), ::OpenAPI::toJsonValue(m_has_questions));
    }
    if (m_homepage_isSet) {
        obj.insert(QString("homepage"), ::OpenAPI::toJsonValue(m_homepage));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_member_count_isSet) {
        obj.insert(QString("member_count"), ::OpenAPI::toJsonValue(m_member_count));
    }
    if (m_membership.isSet()) {
        obj.insert(QString("membership"), ::OpenAPI::toJsonValue(m_membership));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_open_archives_isSet) {
        obj.insert(QString("open_archives"), ::OpenAPI::toJsonValue(m_open_archives));
    }
    if (m_open_membership_isSet) {
        obj.insert(QString("open_membership"), ::OpenAPI::toJsonValue(m_open_membership));
    }
    if (m_region.isSet()) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    return obj;
}

OAIGroup_country OAIGroup::getCountry() const {
    return m_country;
}
void OAIGroup::setCountry(const OAIGroup_country &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIGroup::is_country_Set() const{
    return m_country_isSet;
}

bool OAIGroup::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIGroup::getGroupId() const {
    return m_group_id;
}
void OAIGroup::setGroupId(const QString &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIGroup::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIGroup::is_group_id_Valid() const{
    return m_group_id_isValid;
}

bool OAIGroup::isHasQuestions() const {
    return m_has_questions;
}
void OAIGroup::setHasQuestions(const bool &has_questions) {
    m_has_questions = has_questions;
    m_has_questions_isSet = true;
}

bool OAIGroup::is_has_questions_Set() const{
    return m_has_questions_isSet;
}

bool OAIGroup::is_has_questions_Valid() const{
    return m_has_questions_isValid;
}

QString OAIGroup::getHomepage() const {
    return m_homepage;
}
void OAIGroup::setHomepage(const QString &homepage) {
    m_homepage = homepage;
    m_homepage_isSet = true;
}

bool OAIGroup::is_homepage_Set() const{
    return m_homepage_isSet;
}

bool OAIGroup::is_homepage_Valid() const{
    return m_homepage_isValid;
}

QString OAIGroup::getIdentifier() const {
    return m_identifier;
}
void OAIGroup::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIGroup::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIGroup::is_identifier_Valid() const{
    return m_identifier_isValid;
}

double OAIGroup::getLatitude() const {
    return m_latitude;
}
void OAIGroup::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIGroup::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIGroup::is_latitude_Valid() const{
    return m_latitude_isValid;
}

double OAIGroup::getLongitude() const {
    return m_longitude;
}
void OAIGroup::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIGroup::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIGroup::is_longitude_Valid() const{
    return m_longitude_isValid;
}

qint32 OAIGroup::getMemberCount() const {
    return m_member_count;
}
void OAIGroup::setMemberCount(const qint32 &member_count) {
    m_member_count = member_count;
    m_member_count_isSet = true;
}

bool OAIGroup::is_member_count_Set() const{
    return m_member_count_isSet;
}

bool OAIGroup::is_member_count_Valid() const{
    return m_member_count_isValid;
}

OAIGroup_membership OAIGroup::getMembership() const {
    return m_membership;
}
void OAIGroup::setMembership(const OAIGroup_membership &membership) {
    m_membership = membership;
    m_membership_isSet = true;
}

bool OAIGroup::is_membership_Set() const{
    return m_membership_isSet;
}

bool OAIGroup::is_membership_Valid() const{
    return m_membership_isValid;
}

QString OAIGroup::getName() const {
    return m_name;
}
void OAIGroup::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGroup::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGroup::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIGroup::isOpenArchives() const {
    return m_open_archives;
}
void OAIGroup::setOpenArchives(const bool &open_archives) {
    m_open_archives = open_archives;
    m_open_archives_isSet = true;
}

bool OAIGroup::is_open_archives_Set() const{
    return m_open_archives_isSet;
}

bool OAIGroup::is_open_archives_Valid() const{
    return m_open_archives_isValid;
}

bool OAIGroup::isOpenMembership() const {
    return m_open_membership;
}
void OAIGroup::setOpenMembership(const bool &open_membership) {
    m_open_membership = open_membership;
    m_open_membership_isSet = true;
}

bool OAIGroup::is_open_membership_Set() const{
    return m_open_membership_isSet;
}

bool OAIGroup::is_open_membership_Valid() const{
    return m_open_membership_isValid;
}

OAIGroup_region OAIGroup::getRegion() const {
    return m_region;
}
void OAIGroup::setRegion(const OAIGroup_region &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIGroup::is_region_Set() const{
    return m_region_isSet;
}

bool OAIGroup::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIGroup::getTimezone() const {
    return m_timezone;
}
void OAIGroup::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIGroup::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIGroup::is_timezone_Valid() const{
    return m_timezone_isValid;
}

bool OAIGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_questions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_homepage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_archives_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_membership_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
