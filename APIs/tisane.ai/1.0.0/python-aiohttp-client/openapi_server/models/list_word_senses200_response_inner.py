# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.list_word_senses200_response_inner_families_inner import ListWordSenses200ResponseInnerFamiliesInner
from openapi_server.models.list_word_senses200_response_inner_features_inner import ListWordSenses200ResponseInnerFeaturesInner
from openapi_server import util


class ListWordSenses200ResponseInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, families: List[ListWordSenses200ResponseInnerFamiliesInner]=None, features: List[ListWordSenses200ResponseInnerFeaturesInner]=None, frequency: float=None, is_lemma: bool=None, legacy_map_id: float=None, lemma: str=None, lexeme_id: float=None):
        """ListWordSenses200ResponseInner - a model defined in OpenAPI

        :param families: The families of this ListWordSenses200ResponseInner.
        :param features: The features of this ListWordSenses200ResponseInner.
        :param frequency: The frequency of this ListWordSenses200ResponseInner.
        :param is_lemma: The is_lemma of this ListWordSenses200ResponseInner.
        :param legacy_map_id: The legacy_map_id of this ListWordSenses200ResponseInner.
        :param lemma: The lemma of this ListWordSenses200ResponseInner.
        :param lexeme_id: The lexeme_id of this ListWordSenses200ResponseInner.
        """
        self.openapi_types = {
            'families': List[ListWordSenses200ResponseInnerFamiliesInner],
            'features': List[ListWordSenses200ResponseInnerFeaturesInner],
            'frequency': float,
            'is_lemma': bool,
            'legacy_map_id': float,
            'lemma': str,
            'lexeme_id': float
        }

        self.attribute_map = {
            'families': 'families',
            'features': 'features',
            'frequency': 'frequency',
            'is_lemma': 'isLemma',
            'legacy_map_id': 'legacyMapId',
            'lemma': 'lemma',
            'lexeme_id': 'lexemeId'
        }

        self._families = families
        self._features = features
        self._frequency = frequency
        self._is_lemma = is_lemma
        self._legacy_map_id = legacy_map_id
        self._lemma = lemma
        self._lexeme_id = lexeme_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListWordSenses200ResponseInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The listWordSenses_200_response_inner of this ListWordSenses200ResponseInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def families(self):
        """Gets the families of this ListWordSenses200ResponseInner.


        :return: The families of this ListWordSenses200ResponseInner.
        :rtype: List[ListWordSenses200ResponseInnerFamiliesInner]
        """
        return self._families

    @families.setter
    def families(self, families):
        """Sets the families of this ListWordSenses200ResponseInner.


        :param families: The families of this ListWordSenses200ResponseInner.
        :type families: List[ListWordSenses200ResponseInnerFamiliesInner]
        """

        self._families = families

    @property
    def features(self):
        """Gets the features of this ListWordSenses200ResponseInner.


        :return: The features of this ListWordSenses200ResponseInner.
        :rtype: List[ListWordSenses200ResponseInnerFeaturesInner]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this ListWordSenses200ResponseInner.


        :param features: The features of this ListWordSenses200ResponseInner.
        :type features: List[ListWordSenses200ResponseInnerFeaturesInner]
        """

        self._features = features

    @property
    def frequency(self):
        """Gets the frequency of this ListWordSenses200ResponseInner.


        :return: The frequency of this ListWordSenses200ResponseInner.
        :rtype: float
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this ListWordSenses200ResponseInner.


        :param frequency: The frequency of this ListWordSenses200ResponseInner.
        :type frequency: float
        """

        self._frequency = frequency

    @property
    def is_lemma(self):
        """Gets the is_lemma of this ListWordSenses200ResponseInner.


        :return: The is_lemma of this ListWordSenses200ResponseInner.
        :rtype: bool
        """
        return self._is_lemma

    @is_lemma.setter
    def is_lemma(self, is_lemma):
        """Sets the is_lemma of this ListWordSenses200ResponseInner.


        :param is_lemma: The is_lemma of this ListWordSenses200ResponseInner.
        :type is_lemma: bool
        """

        self._is_lemma = is_lemma

    @property
    def legacy_map_id(self):
        """Gets the legacy_map_id of this ListWordSenses200ResponseInner.


        :return: The legacy_map_id of this ListWordSenses200ResponseInner.
        :rtype: float
        """
        return self._legacy_map_id

    @legacy_map_id.setter
    def legacy_map_id(self, legacy_map_id):
        """Sets the legacy_map_id of this ListWordSenses200ResponseInner.


        :param legacy_map_id: The legacy_map_id of this ListWordSenses200ResponseInner.
        :type legacy_map_id: float
        """

        self._legacy_map_id = legacy_map_id

    @property
    def lemma(self):
        """Gets the lemma of this ListWordSenses200ResponseInner.


        :return: The lemma of this ListWordSenses200ResponseInner.
        :rtype: str
        """
        return self._lemma

    @lemma.setter
    def lemma(self, lemma):
        """Sets the lemma of this ListWordSenses200ResponseInner.


        :param lemma: The lemma of this ListWordSenses200ResponseInner.
        :type lemma: str
        """

        self._lemma = lemma

    @property
    def lexeme_id(self):
        """Gets the lexeme_id of this ListWordSenses200ResponseInner.


        :return: The lexeme_id of this ListWordSenses200ResponseInner.
        :rtype: float
        """
        return self._lexeme_id

    @lexeme_id.setter
    def lexeme_id(self, lexeme_id):
        """Sets the lexeme_id of this ListWordSenses200ResponseInner.


        :param lexeme_id: The lexeme_id of this ListWordSenses200ResponseInner.
        :type lexeme_id: float
        """

        self._lexeme_id = lexeme_id
