# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CandidateDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_through: int=None, address_city: str=None, address_state: str=None, address_street_1: str=None, address_street_2: str=None, address_zip: str=None, candidate_id: str=None, candidate_inactive: bool=None, candidate_status: str=None, cycles: List[int]=None, district: str=None, district_number: int=None, election_districts: List[str]=None, election_years: List[int]=None, federal_funds_flag: bool=None, first_file_date: date=None, flags: str=None, has_raised_funds: bool=None, incumbent_challenge: str=None, incumbent_challenge_full: str=None, last_f2_date: date=None, last_file_date: date=None, load_date: datetime=None, name: str=None, office: str=None, office_full: str=None, party: str=None, party_full: str=None, state: str=None):
        """CandidateDetail - a model defined in OpenAPI

        :param active_through: The active_through of this CandidateDetail.
        :param address_city: The address_city of this CandidateDetail.
        :param address_state: The address_state of this CandidateDetail.
        :param address_street_1: The address_street_1 of this CandidateDetail.
        :param address_street_2: The address_street_2 of this CandidateDetail.
        :param address_zip: The address_zip of this CandidateDetail.
        :param candidate_id: The candidate_id of this CandidateDetail.
        :param candidate_inactive: The candidate_inactive of this CandidateDetail.
        :param candidate_status: The candidate_status of this CandidateDetail.
        :param cycles: The cycles of this CandidateDetail.
        :param district: The district of this CandidateDetail.
        :param district_number: The district_number of this CandidateDetail.
        :param election_districts: The election_districts of this CandidateDetail.
        :param election_years: The election_years of this CandidateDetail.
        :param federal_funds_flag: The federal_funds_flag of this CandidateDetail.
        :param first_file_date: The first_file_date of this CandidateDetail.
        :param flags: The flags of this CandidateDetail.
        :param has_raised_funds: The has_raised_funds of this CandidateDetail.
        :param incumbent_challenge: The incumbent_challenge of this CandidateDetail.
        :param incumbent_challenge_full: The incumbent_challenge_full of this CandidateDetail.
        :param last_f2_date: The last_f2_date of this CandidateDetail.
        :param last_file_date: The last_file_date of this CandidateDetail.
        :param load_date: The load_date of this CandidateDetail.
        :param name: The name of this CandidateDetail.
        :param office: The office of this CandidateDetail.
        :param office_full: The office_full of this CandidateDetail.
        :param party: The party of this CandidateDetail.
        :param party_full: The party_full of this CandidateDetail.
        :param state: The state of this CandidateDetail.
        """
        self.openapi_types = {
            'active_through': int,
            'address_city': str,
            'address_state': str,
            'address_street_1': str,
            'address_street_2': str,
            'address_zip': str,
            'candidate_id': str,
            'candidate_inactive': bool,
            'candidate_status': str,
            'cycles': List[int],
            'district': str,
            'district_number': int,
            'election_districts': List[str],
            'election_years': List[int],
            'federal_funds_flag': bool,
            'first_file_date': date,
            'flags': str,
            'has_raised_funds': bool,
            'incumbent_challenge': str,
            'incumbent_challenge_full': str,
            'last_f2_date': date,
            'last_file_date': date,
            'load_date': datetime,
            'name': str,
            'office': str,
            'office_full': str,
            'party': str,
            'party_full': str,
            'state': str
        }

        self.attribute_map = {
            'active_through': 'active_through',
            'address_city': 'address_city',
            'address_state': 'address_state',
            'address_street_1': 'address_street_1',
            'address_street_2': 'address_street_2',
            'address_zip': 'address_zip',
            'candidate_id': 'candidate_id',
            'candidate_inactive': 'candidate_inactive',
            'candidate_status': 'candidate_status',
            'cycles': 'cycles',
            'district': 'district',
            'district_number': 'district_number',
            'election_districts': 'election_districts',
            'election_years': 'election_years',
            'federal_funds_flag': 'federal_funds_flag',
            'first_file_date': 'first_file_date',
            'flags': 'flags',
            'has_raised_funds': 'has_raised_funds',
            'incumbent_challenge': 'incumbent_challenge',
            'incumbent_challenge_full': 'incumbent_challenge_full',
            'last_f2_date': 'last_f2_date',
            'last_file_date': 'last_file_date',
            'load_date': 'load_date',
            'name': 'name',
            'office': 'office',
            'office_full': 'office_full',
            'party': 'party',
            'party_full': 'party_full',
            'state': 'state'
        }

        self._active_through = active_through
        self._address_city = address_city
        self._address_state = address_state
        self._address_street_1 = address_street_1
        self._address_street_2 = address_street_2
        self._address_zip = address_zip
        self._candidate_id = candidate_id
        self._candidate_inactive = candidate_inactive
        self._candidate_status = candidate_status
        self._cycles = cycles
        self._district = district
        self._district_number = district_number
        self._election_districts = election_districts
        self._election_years = election_years
        self._federal_funds_flag = federal_funds_flag
        self._first_file_date = first_file_date
        self._flags = flags
        self._has_raised_funds = has_raised_funds
        self._incumbent_challenge = incumbent_challenge
        self._incumbent_challenge_full = incumbent_challenge_full
        self._last_f2_date = last_f2_date
        self._last_file_date = last_file_date
        self._load_date = load_date
        self._name = name
        self._office = office
        self._office_full = office_full
        self._party = party
        self._party_full = party_full
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CandidateDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CandidateDetail of this CandidateDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_through(self):
        """Gets the active_through of this CandidateDetail.

        Last year a candidate was active. This field is specific to the candidate_id so if the same person runs for another office, there may be a different record for them.

        :return: The active_through of this CandidateDetail.
        :rtype: int
        """
        return self._active_through

    @active_through.setter
    def active_through(self, active_through):
        """Sets the active_through of this CandidateDetail.

        Last year a candidate was active. This field is specific to the candidate_id so if the same person runs for another office, there may be a different record for them.

        :param active_through: The active_through of this CandidateDetail.
        :type active_through: int
        """

        self._active_through = active_through

    @property
    def address_city(self):
        """Gets the address_city of this CandidateDetail.

        City of candidate's address, as reported on their Form 2.

        :return: The address_city of this CandidateDetail.
        :rtype: str
        """
        return self._address_city

    @address_city.setter
    def address_city(self, address_city):
        """Sets the address_city of this CandidateDetail.

        City of candidate's address, as reported on their Form 2.

        :param address_city: The address_city of this CandidateDetail.
        :type address_city: str
        """
        if address_city is not None and len(address_city) > 100:
            raise ValueError("Invalid value for `address_city`, length must be less than or equal to `100`")

        self._address_city = address_city

    @property
    def address_state(self):
        """Gets the address_state of this CandidateDetail.

        State of candidate's address, as reported on their Form 2.

        :return: The address_state of this CandidateDetail.
        :rtype: str
        """
        return self._address_state

    @address_state.setter
    def address_state(self, address_state):
        """Sets the address_state of this CandidateDetail.

        State of candidate's address, as reported on their Form 2.

        :param address_state: The address_state of this CandidateDetail.
        :type address_state: str
        """
        if address_state is not None and len(address_state) > 2:
            raise ValueError("Invalid value for `address_state`, length must be less than or equal to `2`")

        self._address_state = address_state

    @property
    def address_street_1(self):
        """Gets the address_street_1 of this CandidateDetail.

        Street of candidate's address, as reported on their Form 2.

        :return: The address_street_1 of this CandidateDetail.
        :rtype: str
        """
        return self._address_street_1

    @address_street_1.setter
    def address_street_1(self, address_street_1):
        """Sets the address_street_1 of this CandidateDetail.

        Street of candidate's address, as reported on their Form 2.

        :param address_street_1: The address_street_1 of this CandidateDetail.
        :type address_street_1: str
        """
        if address_street_1 is not None and len(address_street_1) > 200:
            raise ValueError("Invalid value for `address_street_1`, length must be less than or equal to `200`")

        self._address_street_1 = address_street_1

    @property
    def address_street_2(self):
        """Gets the address_street_2 of this CandidateDetail.

        Additional street information of candidate's address, as reported on their Form 2.

        :return: The address_street_2 of this CandidateDetail.
        :rtype: str
        """
        return self._address_street_2

    @address_street_2.setter
    def address_street_2(self, address_street_2):
        """Sets the address_street_2 of this CandidateDetail.

        Additional street information of candidate's address, as reported on their Form 2.

        :param address_street_2: The address_street_2 of this CandidateDetail.
        :type address_street_2: str
        """
        if address_street_2 is not None and len(address_street_2) > 200:
            raise ValueError("Invalid value for `address_street_2`, length must be less than or equal to `200`")

        self._address_street_2 = address_street_2

    @property
    def address_zip(self):
        """Gets the address_zip of this CandidateDetail.

        Zip code of candidate's address, as reported on their Form 2.

        :return: The address_zip of this CandidateDetail.
        :rtype: str
        """
        return self._address_zip

    @address_zip.setter
    def address_zip(self, address_zip):
        """Sets the address_zip of this CandidateDetail.

        Zip code of candidate's address, as reported on their Form 2.

        :param address_zip: The address_zip of this CandidateDetail.
        :type address_zip: str
        """
        if address_zip is not None and len(address_zip) > 10:
            raise ValueError("Invalid value for `address_zip`, length must be less than or equal to `10`")

        self._address_zip = address_zip

    @property
    def candidate_id(self):
        """Gets the candidate_id of this CandidateDetail.

         A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 

        :return: The candidate_id of this CandidateDetail.
        :rtype: str
        """
        return self._candidate_id

    @candidate_id.setter
    def candidate_id(self, candidate_id):
        """Sets the candidate_id of this CandidateDetail.

         A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 

        :param candidate_id: The candidate_id of this CandidateDetail.
        :type candidate_id: str
        """

        self._candidate_id = candidate_id

    @property
    def candidate_inactive(self):
        """Gets the candidate_inactive of this CandidateDetail.

        True indicates that a candidate is inactive.

        :return: The candidate_inactive of this CandidateDetail.
        :rtype: bool
        """
        return self._candidate_inactive

    @candidate_inactive.setter
    def candidate_inactive(self, candidate_inactive):
        """Sets the candidate_inactive of this CandidateDetail.

        True indicates that a candidate is inactive.

        :param candidate_inactive: The candidate_inactive of this CandidateDetail.
        :type candidate_inactive: bool
        """

        self._candidate_inactive = candidate_inactive

    @property
    def candidate_status(self):
        """Gets the candidate_status of this CandidateDetail.

        One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 

        :return: The candidate_status of this CandidateDetail.
        :rtype: str
        """
        return self._candidate_status

    @candidate_status.setter
    def candidate_status(self, candidate_status):
        """Sets the candidate_status of this CandidateDetail.

        One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 

        :param candidate_status: The candidate_status of this CandidateDetail.
        :type candidate_status: str
        """
        if candidate_status is not None and len(candidate_status) > 1:
            raise ValueError("Invalid value for `candidate_status`, length must be less than or equal to `1`")

        self._candidate_status = candidate_status

    @property
    def cycles(self):
        """Gets the cycles of this CandidateDetail.

         Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the `election_full` flag. 

        :return: The cycles of this CandidateDetail.
        :rtype: List[int]
        """
        return self._cycles

    @cycles.setter
    def cycles(self, cycles):
        """Sets the cycles of this CandidateDetail.

         Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the `election_full` flag. 

        :param cycles: The cycles of this CandidateDetail.
        :type cycles: List[int]
        """

        self._cycles = cycles

    @property
    def district(self):
        """Gets the district of this CandidateDetail.

        Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.

        :return: The district of this CandidateDetail.
        :rtype: str
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this CandidateDetail.

        Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.

        :param district: The district of this CandidateDetail.
        :type district: str
        """
        if district is not None and len(district) > 2:
            raise ValueError("Invalid value for `district`, length must be less than or equal to `2`")

        self._district = district

    @property
    def district_number(self):
        """Gets the district_number of this CandidateDetail.

        One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 

        :return: The district_number of this CandidateDetail.
        :rtype: int
        """
        return self._district_number

    @district_number.setter
    def district_number(self, district_number):
        """Sets the district_number of this CandidateDetail.

        One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 

        :param district_number: The district_number of this CandidateDetail.
        :type district_number: int
        """

        self._district_number = district_number

    @property
    def election_districts(self):
        """Gets the election_districts of this CandidateDetail.

        Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.

        :return: The election_districts of this CandidateDetail.
        :rtype: List[str]
        """
        return self._election_districts

    @election_districts.setter
    def election_districts(self, election_districts):
        """Sets the election_districts of this CandidateDetail.

        Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.

        :param election_districts: The election_districts of this CandidateDetail.
        :type election_districts: List[str]
        """

        self._election_districts = election_districts

    @property
    def election_years(self):
        """Gets the election_years of this CandidateDetail.

        Years in which a candidate ran for office.

        :return: The election_years of this CandidateDetail.
        :rtype: List[int]
        """
        return self._election_years

    @election_years.setter
    def election_years(self, election_years):
        """Sets the election_years of this CandidateDetail.

        Years in which a candidate ran for office.

        :param election_years: The election_years of this CandidateDetail.
        :type election_years: List[int]
        """

        self._election_years = election_years

    @property
    def federal_funds_flag(self):
        """Gets the federal_funds_flag of this CandidateDetail.


        :return: The federal_funds_flag of this CandidateDetail.
        :rtype: bool
        """
        return self._federal_funds_flag

    @federal_funds_flag.setter
    def federal_funds_flag(self, federal_funds_flag):
        """Sets the federal_funds_flag of this CandidateDetail.


        :param federal_funds_flag: The federal_funds_flag of this CandidateDetail.
        :type federal_funds_flag: bool
        """

        self._federal_funds_flag = federal_funds_flag

    @property
    def first_file_date(self):
        """Gets the first_file_date of this CandidateDetail.

        The day the FEC received the candidate's first filing. This is a F2 candidate registration.

        :return: The first_file_date of this CandidateDetail.
        :rtype: date
        """
        return self._first_file_date

    @first_file_date.setter
    def first_file_date(self, first_file_date):
        """Sets the first_file_date of this CandidateDetail.

        The day the FEC received the candidate's first filing. This is a F2 candidate registration.

        :param first_file_date: The first_file_date of this CandidateDetail.
        :type first_file_date: date
        """

        self._first_file_date = first_file_date

    @property
    def flags(self):
        """Gets the flags of this CandidateDetail.


        :return: The flags of this CandidateDetail.
        :rtype: str
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this CandidateDetail.


        :param flags: The flags of this CandidateDetail.
        :type flags: str
        """

        self._flags = flags

    @property
    def has_raised_funds(self):
        """Gets the has_raised_funds of this CandidateDetail.


        :return: The has_raised_funds of this CandidateDetail.
        :rtype: bool
        """
        return self._has_raised_funds

    @has_raised_funds.setter
    def has_raised_funds(self, has_raised_funds):
        """Sets the has_raised_funds of this CandidateDetail.


        :param has_raised_funds: The has_raised_funds of this CandidateDetail.
        :type has_raised_funds: bool
        """

        self._has_raised_funds = has_raised_funds

    @property
    def incumbent_challenge(self):
        """Gets the incumbent_challenge of this CandidateDetail.

        One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.

        :return: The incumbent_challenge of this CandidateDetail.
        :rtype: str
        """
        return self._incumbent_challenge

    @incumbent_challenge.setter
    def incumbent_challenge(self, incumbent_challenge):
        """Sets the incumbent_challenge of this CandidateDetail.

        One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.

        :param incumbent_challenge: The incumbent_challenge of this CandidateDetail.
        :type incumbent_challenge: str
        """
        if incumbent_challenge is not None and len(incumbent_challenge) > 1:
            raise ValueError("Invalid value for `incumbent_challenge`, length must be less than or equal to `1`")

        self._incumbent_challenge = incumbent_challenge

    @property
    def incumbent_challenge_full(self):
        """Gets the incumbent_challenge_full of this CandidateDetail.

        Explains if the candidate is an incumbent, a challenger, or if the seat is open.

        :return: The incumbent_challenge_full of this CandidateDetail.
        :rtype: str
        """
        return self._incumbent_challenge_full

    @incumbent_challenge_full.setter
    def incumbent_challenge_full(self, incumbent_challenge_full):
        """Sets the incumbent_challenge_full of this CandidateDetail.

        Explains if the candidate is an incumbent, a challenger, or if the seat is open.

        :param incumbent_challenge_full: The incumbent_challenge_full of this CandidateDetail.
        :type incumbent_challenge_full: str
        """
        if incumbent_challenge_full is not None and len(incumbent_challenge_full) > 10:
            raise ValueError("Invalid value for `incumbent_challenge_full`, length must be less than or equal to `10`")

        self._incumbent_challenge_full = incumbent_challenge_full

    @property
    def last_f2_date(self):
        """Gets the last_f2_date of this CandidateDetail.

        The day the FEC received the candidate's most recent Form 2

        :return: The last_f2_date of this CandidateDetail.
        :rtype: date
        """
        return self._last_f2_date

    @last_f2_date.setter
    def last_f2_date(self, last_f2_date):
        """Sets the last_f2_date of this CandidateDetail.

        The day the FEC received the candidate's most recent Form 2

        :param last_f2_date: The last_f2_date of this CandidateDetail.
        :type last_f2_date: date
        """

        self._last_f2_date = last_f2_date

    @property
    def last_file_date(self):
        """Gets the last_file_date of this CandidateDetail.

        The day the FEC received the candidate's most recent filing

        :return: The last_file_date of this CandidateDetail.
        :rtype: date
        """
        return self._last_file_date

    @last_file_date.setter
    def last_file_date(self, last_file_date):
        """Sets the last_file_date of this CandidateDetail.

        The day the FEC received the candidate's most recent filing

        :param last_file_date: The last_file_date of this CandidateDetail.
        :type last_file_date: date
        """

        self._last_file_date = last_file_date

    @property
    def load_date(self):
        """Gets the load_date of this CandidateDetail.

        Date the information was loaded into the FEC systems. This can be affected by reseting systems and other factors, refer to receipt_date for the day that the FEC received the paper or electronic document. Keep in mind that paper filings take more time to process and there can be a lag between load_date and receipt_date. This field can be helpful to identify paper records that have been processed recently.

        :return: The load_date of this CandidateDetail.
        :rtype: datetime
        """
        return self._load_date

    @load_date.setter
    def load_date(self, load_date):
        """Sets the load_date of this CandidateDetail.

        Date the information was loaded into the FEC systems. This can be affected by reseting systems and other factors, refer to receipt_date for the day that the FEC received the paper or electronic document. Keep in mind that paper filings take more time to process and there can be a lag between load_date and receipt_date. This field can be helpful to identify paper records that have been processed recently.

        :param load_date: The load_date of this CandidateDetail.
        :type load_date: datetime
        """

        self._load_date = load_date

    @property
    def name(self):
        """Gets the name of this CandidateDetail.

        Name of candidate running for office

        :return: The name of this CandidateDetail.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CandidateDetail.

        Name of candidate running for office

        :param name: The name of this CandidateDetail.
        :type name: str
        """
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")

        self._name = name

    @property
    def office(self):
        """Gets the office of this CandidateDetail.

        Federal office candidate runs for: H, S or P

        :return: The office of this CandidateDetail.
        :rtype: str
        """
        return self._office

    @office.setter
    def office(self, office):
        """Sets the office of this CandidateDetail.

        Federal office candidate runs for: H, S or P

        :param office: The office of this CandidateDetail.
        :type office: str
        """
        if office is not None and len(office) > 1:
            raise ValueError("Invalid value for `office`, length must be less than or equal to `1`")

        self._office = office

    @property
    def office_full(self):
        """Gets the office_full of this CandidateDetail.

        Federal office candidate runs for: House, Senate or presidential

        :return: The office_full of this CandidateDetail.
        :rtype: str
        """
        return self._office_full

    @office_full.setter
    def office_full(self, office_full):
        """Sets the office_full of this CandidateDetail.

        Federal office candidate runs for: House, Senate or presidential

        :param office_full: The office_full of this CandidateDetail.
        :type office_full: str
        """
        if office_full is not None and len(office_full) > 9:
            raise ValueError("Invalid value for `office_full`, length must be less than or equal to `9`")

        self._office_full = office_full

    @property
    def party(self):
        """Gets the party of this CandidateDetail.

        Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.

        :return: The party of this CandidateDetail.
        :rtype: str
        """
        return self._party

    @party.setter
    def party(self, party):
        """Sets the party of this CandidateDetail.

        Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.

        :param party: The party of this CandidateDetail.
        :type party: str
        """
        if party is not None and len(party) > 3:
            raise ValueError("Invalid value for `party`, length must be less than or equal to `3`")

        self._party = party

    @property
    def party_full(self):
        """Gets the party_full of this CandidateDetail.

        Party affiliated with a candidate or committee

        :return: The party_full of this CandidateDetail.
        :rtype: str
        """
        return self._party_full

    @party_full.setter
    def party_full(self, party_full):
        """Sets the party_full of this CandidateDetail.

        Party affiliated with a candidate or committee

        :param party_full: The party_full of this CandidateDetail.
        :type party_full: str
        """
        if party_full is not None and len(party_full) > 255:
            raise ValueError("Invalid value for `party_full`, length must be less than or equal to `255`")

        self._party_full = party_full

    @property
    def state(self):
        """Gets the state of this CandidateDetail.

        US state or territory where a candidate runs for office

        :return: The state of this CandidateDetail.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CandidateDetail.

        US state or territory where a candidate runs for office

        :param state: The state of this CandidateDetail.
        :type state: str
        """
        if state is not None and len(state) > 2:
            raise ValueError("Invalid value for `state`, length must be less than or equal to `2`")

        self._state = state
