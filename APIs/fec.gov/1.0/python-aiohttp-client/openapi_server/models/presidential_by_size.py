# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PresidentialBySize(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, candidate_id: str=None, contribution_receipt_amount: float=None, election_year: int=None, size: int=None, size_range_id: int=None):
        """PresidentialBySize - a model defined in OpenAPI

        :param candidate_id: The candidate_id of this PresidentialBySize.
        :param contribution_receipt_amount: The contribution_receipt_amount of this PresidentialBySize.
        :param election_year: The election_year of this PresidentialBySize.
        :param size: The size of this PresidentialBySize.
        :param size_range_id: The size_range_id of this PresidentialBySize.
        """
        self.openapi_types = {
            'candidate_id': str,
            'contribution_receipt_amount': float,
            'election_year': int,
            'size': int,
            'size_range_id': int
        }

        self.attribute_map = {
            'candidate_id': 'candidate_id',
            'contribution_receipt_amount': 'contribution_receipt_amount',
            'election_year': 'election_year',
            'size': 'size',
            'size_range_id': 'size_range_id'
        }

        self._candidate_id = candidate_id
        self._contribution_receipt_amount = contribution_receipt_amount
        self._election_year = election_year
        self._size = size
        self._size_range_id = size_range_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PresidentialBySize':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PresidentialBySize of this PresidentialBySize.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def candidate_id(self):
        """Gets the candidate_id of this PresidentialBySize.

         A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence.   -P00000001    All candidates   -P00000002    Democrasts   -P00000003    Republicans 

        :return: The candidate_id of this PresidentialBySize.
        :rtype: str
        """
        return self._candidate_id

    @candidate_id.setter
    def candidate_id(self, candidate_id):
        """Sets the candidate_id of this PresidentialBySize.

         A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence.   -P00000001    All candidates   -P00000002    Democrasts   -P00000003    Republicans 

        :param candidate_id: The candidate_id of this PresidentialBySize.
        :type candidate_id: str
        """
        if candidate_id is not None and len(candidate_id) > 0:
            raise ValueError("Invalid value for `candidate_id`, length must be less than or equal to `0`")

        self._candidate_id = candidate_id

    @property
    def contribution_receipt_amount(self):
        """Gets the contribution_receipt_amount of this PresidentialBySize.

         Contributions received 

        :return: The contribution_receipt_amount of this PresidentialBySize.
        :rtype: float
        """
        return self._contribution_receipt_amount

    @contribution_receipt_amount.setter
    def contribution_receipt_amount(self, contribution_receipt_amount):
        """Sets the contribution_receipt_amount of this PresidentialBySize.

         Contributions received 

        :param contribution_receipt_amount: The contribution_receipt_amount of this PresidentialBySize.
        :type contribution_receipt_amount: float
        """

        self._contribution_receipt_amount = contribution_receipt_amount

    @property
    def election_year(self):
        """Gets the election_year of this PresidentialBySize.

        Year of election

        :return: The election_year of this PresidentialBySize.
        :rtype: int
        """
        return self._election_year

    @election_year.setter
    def election_year(self, election_year):
        """Sets the election_year of this PresidentialBySize.

        Year of election

        :param election_year: The election_year of this PresidentialBySize.
        :type election_year: int
        """

        self._election_year = election_year

    @property
    def size(self):
        """Gets the size of this PresidentialBySize.

         The total all contributions in the following ranges: ```   -0    $200 and under   -200  $200.01 - $499.99   -500  $500 - $999.99   -1000 $1000 - $1999.99   -2000 $2000 + ``` Unitemized contributions are included in the `0` category. 

        :return: The size of this PresidentialBySize.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this PresidentialBySize.

         The total all contributions in the following ranges: ```   -0    $200 and under   -200  $200.01 - $499.99   -500  $500 - $999.99   -1000 $1000 - $1999.99   -2000 $2000 + ``` Unitemized contributions are included in the `0` category. 

        :param size: The size of this PresidentialBySize.
        :type size: int
        """

        self._size = size

    @property
    def size_range_id(self):
        """Gets the size_range_id of this PresidentialBySize.

         The total all contributions range id. 

        :return: The size_range_id of this PresidentialBySize.
        :rtype: int
        """
        return self._size_range_id

    @size_range_id.setter
    def size_range_id(self, size_range_id):
        """Sets the size_range_id of this PresidentialBySize.

         The total all contributions range id. 

        :param size_range_id: The size_range_id of this PresidentialBySize.
        :type size_range_id: int
        """

        self._size_range_id = size_range_id
