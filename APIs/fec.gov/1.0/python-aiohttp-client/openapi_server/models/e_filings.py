# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EFilings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amended_by: int=None, amendment_chain: List[int]=None, amendment_number: int=None, amends_file: int=None, beginning_image_number: str=None, committee_id: str=None, committee_name: str=None, coverage_end_date: date=None, coverage_start_date: date=None, csv_url: str=None, document_description: str=None, ending_image_number: str=None, fec_file_id: str=None, fec_url: str=None, file_number: int=None, filed_date: date=None, form_type: str=None, html_url: str=None, is_amended: bool=None, load_timestamp: datetime=None, most_recent: bool=None, most_recent_filing: int=None, pdf_url: str=None, receipt_date: datetime=None):
        """EFilings - a model defined in OpenAPI

        :param amended_by: The amended_by of this EFilings.
        :param amendment_chain: The amendment_chain of this EFilings.
        :param amendment_number: The amendment_number of this EFilings.
        :param amends_file: The amends_file of this EFilings.
        :param beginning_image_number: The beginning_image_number of this EFilings.
        :param committee_id: The committee_id of this EFilings.
        :param committee_name: The committee_name of this EFilings.
        :param coverage_end_date: The coverage_end_date of this EFilings.
        :param coverage_start_date: The coverage_start_date of this EFilings.
        :param csv_url: The csv_url of this EFilings.
        :param document_description: The document_description of this EFilings.
        :param ending_image_number: The ending_image_number of this EFilings.
        :param fec_file_id: The fec_file_id of this EFilings.
        :param fec_url: The fec_url of this EFilings.
        :param file_number: The file_number of this EFilings.
        :param filed_date: The filed_date of this EFilings.
        :param form_type: The form_type of this EFilings.
        :param html_url: The html_url of this EFilings.
        :param is_amended: The is_amended of this EFilings.
        :param load_timestamp: The load_timestamp of this EFilings.
        :param most_recent: The most_recent of this EFilings.
        :param most_recent_filing: The most_recent_filing of this EFilings.
        :param pdf_url: The pdf_url of this EFilings.
        :param receipt_date: The receipt_date of this EFilings.
        """
        self.openapi_types = {
            'amended_by': int,
            'amendment_chain': List[int],
            'amendment_number': int,
            'amends_file': int,
            'beginning_image_number': str,
            'committee_id': str,
            'committee_name': str,
            'coverage_end_date': date,
            'coverage_start_date': date,
            'csv_url': str,
            'document_description': str,
            'ending_image_number': str,
            'fec_file_id': str,
            'fec_url': str,
            'file_number': int,
            'filed_date': date,
            'form_type': str,
            'html_url': str,
            'is_amended': bool,
            'load_timestamp': datetime,
            'most_recent': bool,
            'most_recent_filing': int,
            'pdf_url': str,
            'receipt_date': datetime
        }

        self.attribute_map = {
            'amended_by': 'amended_by',
            'amendment_chain': 'amendment_chain',
            'amendment_number': 'amendment_number',
            'amends_file': 'amends_file',
            'beginning_image_number': 'beginning_image_number',
            'committee_id': 'committee_id',
            'committee_name': 'committee_name',
            'coverage_end_date': 'coverage_end_date',
            'coverage_start_date': 'coverage_start_date',
            'csv_url': 'csv_url',
            'document_description': 'document_description',
            'ending_image_number': 'ending_image_number',
            'fec_file_id': 'fec_file_id',
            'fec_url': 'fec_url',
            'file_number': 'file_number',
            'filed_date': 'filed_date',
            'form_type': 'form_type',
            'html_url': 'html_url',
            'is_amended': 'is_amended',
            'load_timestamp': 'load_timestamp',
            'most_recent': 'most_recent',
            'most_recent_filing': 'most_recent_filing',
            'pdf_url': 'pdf_url',
            'receipt_date': 'receipt_date'
        }

        self._amended_by = amended_by
        self._amendment_chain = amendment_chain
        self._amendment_number = amendment_number
        self._amends_file = amends_file
        self._beginning_image_number = beginning_image_number
        self._committee_id = committee_id
        self._committee_name = committee_name
        self._coverage_end_date = coverage_end_date
        self._coverage_start_date = coverage_start_date
        self._csv_url = csv_url
        self._document_description = document_description
        self._ending_image_number = ending_image_number
        self._fec_file_id = fec_file_id
        self._fec_url = fec_url
        self._file_number = file_number
        self._filed_date = filed_date
        self._form_type = form_type
        self._html_url = html_url
        self._is_amended = is_amended
        self._load_timestamp = load_timestamp
        self._most_recent = most_recent
        self._most_recent_filing = most_recent_filing
        self._pdf_url = pdf_url
        self._receipt_date = receipt_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EFilings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EFilings of this EFilings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amended_by(self):
        """Gets the amended_by of this EFilings.


        :return: The amended_by of this EFilings.
        :rtype: int
        """
        return self._amended_by

    @amended_by.setter
    def amended_by(self, amended_by):
        """Sets the amended_by of this EFilings.


        :param amended_by: The amended_by of this EFilings.
        :type amended_by: int
        """

        self._amended_by = amended_by

    @property
    def amendment_chain(self):
        """Gets the amendment_chain of this EFilings.


        :return: The amendment_chain of this EFilings.
        :rtype: List[int]
        """
        return self._amendment_chain

    @amendment_chain.setter
    def amendment_chain(self, amendment_chain):
        """Sets the amendment_chain of this EFilings.


        :param amendment_chain: The amendment_chain of this EFilings.
        :type amendment_chain: List[int]
        """

        self._amendment_chain = amendment_chain

    @property
    def amendment_number(self):
        """Gets the amendment_number of this EFilings.

         Number of times the report has been amended. 

        :return: The amendment_number of this EFilings.
        :rtype: int
        """
        return self._amendment_number

    @amendment_number.setter
    def amendment_number(self, amendment_number):
        """Sets the amendment_number of this EFilings.

         Number of times the report has been amended. 

        :param amendment_number: The amendment_number of this EFilings.
        :type amendment_number: int
        """

        self._amendment_number = amendment_number

    @property
    def amends_file(self):
        """Gets the amends_file of this EFilings.

         For amendments, this file_number is the file_number of the previous report that is being amended. Refer to the amended_by for the most recent version of the report. 

        :return: The amends_file of this EFilings.
        :rtype: int
        """
        return self._amends_file

    @amends_file.setter
    def amends_file(self, amends_file):
        """Sets the amends_file of this EFilings.

         For amendments, this file_number is the file_number of the previous report that is being amended. Refer to the amended_by for the most recent version of the report. 

        :param amends_file: The amends_file of this EFilings.
        :type amends_file: int
        """

        self._amends_file = amends_file

    @property
    def beginning_image_number(self):
        """Gets the beginning_image_number of this EFilings.


        :return: The beginning_image_number of this EFilings.
        :rtype: str
        """
        return self._beginning_image_number

    @beginning_image_number.setter
    def beginning_image_number(self, beginning_image_number):
        """Sets the beginning_image_number of this EFilings.


        :param beginning_image_number: The beginning_image_number of this EFilings.
        :type beginning_image_number: str
        """

        self._beginning_image_number = beginning_image_number

    @property
    def committee_id(self):
        """Gets the committee_id of this EFilings.

         A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 

        :return: The committee_id of this EFilings.
        :rtype: str
        """
        return self._committee_id

    @committee_id.setter
    def committee_id(self, committee_id):
        """Sets the committee_id of this EFilings.

         A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 

        :param committee_id: The committee_id of this EFilings.
        :type committee_id: str
        """

        self._committee_id = committee_id

    @property
    def committee_name(self):
        """Gets the committee_name of this EFilings.

        The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.

        :return: The committee_name of this EFilings.
        :rtype: str
        """
        return self._committee_name

    @committee_name.setter
    def committee_name(self, committee_name):
        """Sets the committee_name of this EFilings.

        The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.

        :param committee_name: The committee_name of this EFilings.
        :type committee_name: str
        """

        self._committee_name = committee_name

    @property
    def coverage_end_date(self):
        """Gets the coverage_end_date of this EFilings.

        Ending date of the reporting period

        :return: The coverage_end_date of this EFilings.
        :rtype: date
        """
        return self._coverage_end_date

    @coverage_end_date.setter
    def coverage_end_date(self, coverage_end_date):
        """Sets the coverage_end_date of this EFilings.

        Ending date of the reporting period

        :param coverage_end_date: The coverage_end_date of this EFilings.
        :type coverage_end_date: date
        """

        self._coverage_end_date = coverage_end_date

    @property
    def coverage_start_date(self):
        """Gets the coverage_start_date of this EFilings.

        Beginning date of the reporting period

        :return: The coverage_start_date of this EFilings.
        :rtype: date
        """
        return self._coverage_start_date

    @coverage_start_date.setter
    def coverage_start_date(self, coverage_start_date):
        """Sets the coverage_start_date of this EFilings.

        Beginning date of the reporting period

        :param coverage_start_date: The coverage_start_date of this EFilings.
        :type coverage_start_date: date
        """

        self._coverage_start_date = coverage_start_date

    @property
    def csv_url(self):
        """Gets the csv_url of this EFilings.


        :return: The csv_url of this EFilings.
        :rtype: str
        """
        return self._csv_url

    @csv_url.setter
    def csv_url(self, csv_url):
        """Sets the csv_url of this EFilings.


        :param csv_url: The csv_url of this EFilings.
        :type csv_url: str
        """

        self._csv_url = csv_url

    @property
    def document_description(self):
        """Gets the document_description of this EFilings.


        :return: The document_description of this EFilings.
        :rtype: str
        """
        return self._document_description

    @document_description.setter
    def document_description(self, document_description):
        """Sets the document_description of this EFilings.


        :param document_description: The document_description of this EFilings.
        :type document_description: str
        """

        self._document_description = document_description

    @property
    def ending_image_number(self):
        """Gets the ending_image_number of this EFilings.


        :return: The ending_image_number of this EFilings.
        :rtype: str
        """
        return self._ending_image_number

    @ending_image_number.setter
    def ending_image_number(self, ending_image_number):
        """Sets the ending_image_number of this EFilings.


        :param ending_image_number: The ending_image_number of this EFilings.
        :type ending_image_number: str
        """

        self._ending_image_number = ending_image_number

    @property
    def fec_file_id(self):
        """Gets the fec_file_id of this EFilings.


        :return: The fec_file_id of this EFilings.
        :rtype: str
        """
        return self._fec_file_id

    @fec_file_id.setter
    def fec_file_id(self, fec_file_id):
        """Sets the fec_file_id of this EFilings.


        :param fec_file_id: The fec_file_id of this EFilings.
        :type fec_file_id: str
        """

        self._fec_file_id = fec_file_id

    @property
    def fec_url(self):
        """Gets the fec_url of this EFilings.


        :return: The fec_url of this EFilings.
        :rtype: str
        """
        return self._fec_url

    @fec_url.setter
    def fec_url(self, fec_url):
        """Sets the fec_url of this EFilings.


        :param fec_url: The fec_url of this EFilings.
        :type fec_url: str
        """

        self._fec_url = fec_url

    @property
    def file_number(self):
        """Gets the file_number of this EFilings.

        Filing ID number

        :return: The file_number of this EFilings.
        :rtype: int
        """
        return self._file_number

    @file_number.setter
    def file_number(self, file_number):
        """Sets the file_number of this EFilings.

        Filing ID number

        :param file_number: The file_number of this EFilings.
        :type file_number: int
        """

        self._file_number = file_number

    @property
    def filed_date(self):
        """Gets the filed_date of this EFilings.

        Timestamp of electronic or paper record that FEC received

        :return: The filed_date of this EFilings.
        :rtype: date
        """
        return self._filed_date

    @filed_date.setter
    def filed_date(self, filed_date):
        """Sets the filed_date of this EFilings.

        Timestamp of electronic or paper record that FEC received

        :param filed_date: The filed_date of this EFilings.
        :type filed_date: date
        """

        self._filed_date = filed_date

    @property
    def form_type(self):
        """Gets the form_type of this EFilings.

        The form where the underlying data comes from, for example, Form 1 would appear as F1:     - F1   Statement of Organization     - F1M  Notification of Multicandidate Status     - F2   Statement of Candidacy     - F3   Report of Receipts and Disbursements for an Authorized Committee     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention     - F5   Report of Independent Expenditures Made and Contributions Received     - F6   48 Hour Notice of Contributions/Loans Received     - F7   Report of Communication Costs by Corporations and Membership Organizations     - F8   Debt Settlement Plan     - F9   24 Hour Notice of Disbursements for Electioneering Communications     - F13  Report of Donations Accepted for Inaugural Committee     - F99  Miscellaneous Text     - FRQ  Request for Additional Information 

        :return: The form_type of this EFilings.
        :rtype: str
        """
        return self._form_type

    @form_type.setter
    def form_type(self, form_type):
        """Sets the form_type of this EFilings.

        The form where the underlying data comes from, for example, Form 1 would appear as F1:     - F1   Statement of Organization     - F1M  Notification of Multicandidate Status     - F2   Statement of Candidacy     - F3   Report of Receipts and Disbursements for an Authorized Committee     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention     - F5   Report of Independent Expenditures Made and Contributions Received     - F6   48 Hour Notice of Contributions/Loans Received     - F7   Report of Communication Costs by Corporations and Membership Organizations     - F8   Debt Settlement Plan     - F9   24 Hour Notice of Disbursements for Electioneering Communications     - F13  Report of Donations Accepted for Inaugural Committee     - F99  Miscellaneous Text     - FRQ  Request for Additional Information 

        :param form_type: The form_type of this EFilings.
        :type form_type: str
        """

        self._form_type = form_type

    @property
    def html_url(self):
        """Gets the html_url of this EFilings.


        :return: The html_url of this EFilings.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this EFilings.


        :param html_url: The html_url of this EFilings.
        :type html_url: str
        """

        self._html_url = html_url

    @property
    def is_amended(self):
        """Gets the is_amended of this EFilings.


        :return: The is_amended of this EFilings.
        :rtype: bool
        """
        return self._is_amended

    @is_amended.setter
    def is_amended(self, is_amended):
        """Sets the is_amended of this EFilings.


        :param is_amended: The is_amended of this EFilings.
        :type is_amended: bool
        """

        self._is_amended = is_amended

    @property
    def load_timestamp(self):
        """Gets the load_timestamp of this EFilings.

        Date the information was loaded into the FEC systems. This can be affected by reseting systems and other factors, refer to receipt_date for the day that the FEC received the paper or electronic document. Keep in mind that paper filings take more time to process and there can be a lag between load_date and receipt_date. This field can be helpful to identify paper records that have been processed recently.

        :return: The load_timestamp of this EFilings.
        :rtype: datetime
        """
        return self._load_timestamp

    @load_timestamp.setter
    def load_timestamp(self, load_timestamp):
        """Sets the load_timestamp of this EFilings.

        Date the information was loaded into the FEC systems. This can be affected by reseting systems and other factors, refer to receipt_date for the day that the FEC received the paper or electronic document. Keep in mind that paper filings take more time to process and there can be a lag between load_date and receipt_date. This field can be helpful to identify paper records that have been processed recently.

        :param load_timestamp: The load_timestamp of this EFilings.
        :type load_timestamp: datetime
        """

        self._load_timestamp = load_timestamp

    @property
    def most_recent(self):
        """Gets the most_recent of this EFilings.


        :return: The most_recent of this EFilings.
        :rtype: bool
        """
        return self._most_recent

    @most_recent.setter
    def most_recent(self, most_recent):
        """Sets the most_recent of this EFilings.


        :param most_recent: The most_recent of this EFilings.
        :type most_recent: bool
        """

        self._most_recent = most_recent

    @property
    def most_recent_filing(self):
        """Gets the most_recent_filing of this EFilings.


        :return: The most_recent_filing of this EFilings.
        :rtype: int
        """
        return self._most_recent_filing

    @most_recent_filing.setter
    def most_recent_filing(self, most_recent_filing):
        """Sets the most_recent_filing of this EFilings.


        :param most_recent_filing: The most_recent_filing of this EFilings.
        :type most_recent_filing: int
        """

        self._most_recent_filing = most_recent_filing

    @property
    def pdf_url(self):
        """Gets the pdf_url of this EFilings.


        :return: The pdf_url of this EFilings.
        :rtype: str
        """
        return self._pdf_url

    @pdf_url.setter
    def pdf_url(self, pdf_url):
        """Sets the pdf_url of this EFilings.


        :param pdf_url: The pdf_url of this EFilings.
        :type pdf_url: str
        """

        self._pdf_url = pdf_url

    @property
    def receipt_date(self):
        """Gets the receipt_date of this EFilings.

        Date the FEC received the electronic or paper record

        :return: The receipt_date of this EFilings.
        :rtype: datetime
        """
        return self._receipt_date

    @receipt_date.setter
    def receipt_date(self, receipt_date):
        """Sets the receipt_date of this EFilings.

        Date the FEC received the electronic or paper record

        :param receipt_date: The receipt_date of this EFilings.
        :type receipt_date: datetime
        """

        self._receipt_date = receipt_date
