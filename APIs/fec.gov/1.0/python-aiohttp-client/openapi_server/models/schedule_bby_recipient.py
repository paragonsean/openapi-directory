# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScheduleBByRecipient(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, committee_id: str=None, committee_total_disbursements: float=None, count: int=None, cycle: int=None, memo_count: int=None, memo_total: float=None, recipient_disbursement_percent: float=None, recipient_name: str=None, total: float=None):
        """ScheduleBByRecipient - a model defined in OpenAPI

        :param committee_id: The committee_id of this ScheduleBByRecipient.
        :param committee_total_disbursements: The committee_total_disbursements of this ScheduleBByRecipient.
        :param count: The count of this ScheduleBByRecipient.
        :param cycle: The cycle of this ScheduleBByRecipient.
        :param memo_count: The memo_count of this ScheduleBByRecipient.
        :param memo_total: The memo_total of this ScheduleBByRecipient.
        :param recipient_disbursement_percent: The recipient_disbursement_percent of this ScheduleBByRecipient.
        :param recipient_name: The recipient_name of this ScheduleBByRecipient.
        :param total: The total of this ScheduleBByRecipient.
        """
        self.openapi_types = {
            'committee_id': str,
            'committee_total_disbursements': float,
            'count': int,
            'cycle': int,
            'memo_count': int,
            'memo_total': float,
            'recipient_disbursement_percent': float,
            'recipient_name': str,
            'total': float
        }

        self.attribute_map = {
            'committee_id': 'committee_id',
            'committee_total_disbursements': 'committee_total_disbursements',
            'count': 'count',
            'cycle': 'cycle',
            'memo_count': 'memo_count',
            'memo_total': 'memo_total',
            'recipient_disbursement_percent': 'recipient_disbursement_percent',
            'recipient_name': 'recipient_name',
            'total': 'total'
        }

        self._committee_id = committee_id
        self._committee_total_disbursements = committee_total_disbursements
        self._count = count
        self._cycle = cycle
        self._memo_count = memo_count
        self._memo_total = memo_total
        self._recipient_disbursement_percent = recipient_disbursement_percent
        self._recipient_name = recipient_name
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScheduleBByRecipient':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScheduleBByRecipient of this ScheduleBByRecipient.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def committee_id(self):
        """Gets the committee_id of this ScheduleBByRecipient.

         A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 

        :return: The committee_id of this ScheduleBByRecipient.
        :rtype: str
        """
        return self._committee_id

    @committee_id.setter
    def committee_id(self, committee_id):
        """Sets the committee_id of this ScheduleBByRecipient.

         A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 

        :param committee_id: The committee_id of this ScheduleBByRecipient.
        :type committee_id: str
        """
        if committee_id is None:
            raise ValueError("Invalid value for `committee_id`, must not be `None`")

        self._committee_id = committee_id

    @property
    def committee_total_disbursements(self):
        """Gets the committee_total_disbursements of this ScheduleBByRecipient.

        Disbursements

        :return: The committee_total_disbursements of this ScheduleBByRecipient.
        :rtype: float
        """
        return self._committee_total_disbursements

    @committee_total_disbursements.setter
    def committee_total_disbursements(self, committee_total_disbursements):
        """Sets the committee_total_disbursements of this ScheduleBByRecipient.

        Disbursements

        :param committee_total_disbursements: The committee_total_disbursements of this ScheduleBByRecipient.
        :type committee_total_disbursements: float
        """

        self._committee_total_disbursements = committee_total_disbursements

    @property
    def count(self):
        """Gets the count of this ScheduleBByRecipient.

         Number of records making up the total. 

        :return: The count of this ScheduleBByRecipient.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ScheduleBByRecipient.

         Number of records making up the total. 

        :param count: The count of this ScheduleBByRecipient.
        :type count: int
        """

        self._count = count

    @property
    def cycle(self):
        """Gets the cycle of this ScheduleBByRecipient.

         Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 

        :return: The cycle of this ScheduleBByRecipient.
        :rtype: int
        """
        return self._cycle

    @cycle.setter
    def cycle(self, cycle):
        """Sets the cycle of this ScheduleBByRecipient.

         Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 

        :param cycle: The cycle of this ScheduleBByRecipient.
        :type cycle: int
        """
        if cycle is None:
            raise ValueError("Invalid value for `cycle`, must not be `None`")

        self._cycle = cycle

    @property
    def memo_count(self):
        """Gets the memo_count of this ScheduleBByRecipient.

         Number of records making up the total. 

        :return: The memo_count of this ScheduleBByRecipient.
        :rtype: int
        """
        return self._memo_count

    @memo_count.setter
    def memo_count(self, memo_count):
        """Sets the memo_count of this ScheduleBByRecipient.

         Number of records making up the total. 

        :param memo_count: The memo_count of this ScheduleBByRecipient.
        :type memo_count: int
        """

        self._memo_count = memo_count

    @property
    def memo_total(self):
        """Gets the memo_total of this ScheduleBByRecipient.

         Schedule B disbursements aggregated by memoed items only 

        :return: The memo_total of this ScheduleBByRecipient.
        :rtype: float
        """
        return self._memo_total

    @memo_total.setter
    def memo_total(self, memo_total):
        """Sets the memo_total of this ScheduleBByRecipient.

         Schedule B disbursements aggregated by memoed items only 

        :param memo_total: The memo_total of this ScheduleBByRecipient.
        :type memo_total: float
        """

        self._memo_total = memo_total

    @property
    def recipient_disbursement_percent(self):
        """Gets the recipient_disbursement_percent of this ScheduleBByRecipient.


        :return: The recipient_disbursement_percent of this ScheduleBByRecipient.
        :rtype: float
        """
        return self._recipient_disbursement_percent

    @recipient_disbursement_percent.setter
    def recipient_disbursement_percent(self, recipient_disbursement_percent):
        """Sets the recipient_disbursement_percent of this ScheduleBByRecipient.


        :param recipient_disbursement_percent: The recipient_disbursement_percent of this ScheduleBByRecipient.
        :type recipient_disbursement_percent: float
        """

        self._recipient_disbursement_percent = recipient_disbursement_percent

    @property
    def recipient_name(self):
        """Gets the recipient_name of this ScheduleBByRecipient.

        Name of the entity receiving the disbursement

        :return: The recipient_name of this ScheduleBByRecipient.
        :rtype: str
        """
        return self._recipient_name

    @recipient_name.setter
    def recipient_name(self, recipient_name):
        """Sets the recipient_name of this ScheduleBByRecipient.

        Name of the entity receiving the disbursement

        :param recipient_name: The recipient_name of this ScheduleBByRecipient.
        :type recipient_name: str
        """
        if recipient_name is None:
            raise ValueError("Invalid value for `recipient_name`, must not be `None`")

        self._recipient_name = recipient_name

    @property
    def total(self):
        """Gets the total of this ScheduleBByRecipient.

         Schedule B disbursements aggregated by non-memoed items only 

        :return: The total of this ScheduleBByRecipient.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ScheduleBByRecipient.

         Schedule B disbursements aggregated by non-memoed items only 

        :param total: The total of this ScheduleBByRecipient.
        :type total: float
        """

        self._total = total
