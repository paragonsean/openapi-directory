# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CalendarDate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all_day: bool=None, calendar_category_id: int=None, category: str=None, description: str=None, end_date: str=None, event_id: int=None, location: str=None, start_date: str=None, state: List[str]=None, summary: str=None, url: str=None):
        """CalendarDate - a model defined in OpenAPI

        :param all_day: The all_day of this CalendarDate.
        :param calendar_category_id: The calendar_category_id of this CalendarDate.
        :param category: The category of this CalendarDate.
        :param description: The description of this CalendarDate.
        :param end_date: The end_date of this CalendarDate.
        :param event_id: The event_id of this CalendarDate.
        :param location: The location of this CalendarDate.
        :param start_date: The start_date of this CalendarDate.
        :param state: The state of this CalendarDate.
        :param summary: The summary of this CalendarDate.
        :param url: The url of this CalendarDate.
        """
        self.openapi_types = {
            'all_day': bool,
            'calendar_category_id': int,
            'category': str,
            'description': str,
            'end_date': str,
            'event_id': int,
            'location': str,
            'start_date': str,
            'state': List[str],
            'summary': str,
            'url': str
        }

        self.attribute_map = {
            'all_day': 'all_day',
            'calendar_category_id': 'calendar_category_id',
            'category': 'category',
            'description': 'description',
            'end_date': 'end_date',
            'event_id': 'event_id',
            'location': 'location',
            'start_date': 'start_date',
            'state': 'state',
            'summary': 'summary',
            'url': 'url'
        }

        self._all_day = all_day
        self._calendar_category_id = calendar_category_id
        self._category = category
        self._description = description
        self._end_date = end_date
        self._event_id = event_id
        self._location = location
        self._start_date = start_date
        self._state = state
        self._summary = summary
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CalendarDate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CalendarDate of this CalendarDate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all_day(self):
        """Gets the all_day of this CalendarDate.


        :return: The all_day of this CalendarDate.
        :rtype: bool
        """
        return self._all_day

    @all_day.setter
    def all_day(self, all_day):
        """Sets the all_day of this CalendarDate.


        :param all_day: The all_day of this CalendarDate.
        :type all_day: bool
        """

        self._all_day = all_day

    @property
    def calendar_category_id(self):
        """Gets the calendar_category_id of this CalendarDate.

         Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40, Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20, Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26, Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29 

        :return: The calendar_category_id of this CalendarDate.
        :rtype: int
        """
        return self._calendar_category_id

    @calendar_category_id.setter
    def calendar_category_id(self, calendar_category_id):
        """Sets the calendar_category_id of this CalendarDate.

         Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40, Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20, Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26, Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29 

        :param calendar_category_id: The calendar_category_id of this CalendarDate.
        :type calendar_category_id: int
        """

        self._calendar_category_id = calendar_category_id

    @property
    def category(self):
        """Gets the category of this CalendarDate.

         Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40, Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20, Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26, Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29 

        :return: The category of this CalendarDate.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this CalendarDate.

         Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40, Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20, Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26, Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29 

        :param category: The category of this CalendarDate.
        :type category: str
        """

        self._category = category

    @property
    def description(self):
        """Gets the description of this CalendarDate.


        :return: The description of this CalendarDate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CalendarDate.


        :param description: The description of this CalendarDate.
        :type description: str
        """

        self._description = description

    @property
    def end_date(self):
        """Gets the end_date of this CalendarDate.


        :return: The end_date of this CalendarDate.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this CalendarDate.


        :param end_date: The end_date of this CalendarDate.
        :type end_date: str
        """

        self._end_date = end_date

    @property
    def event_id(self):
        """Gets the event_id of this CalendarDate.

        An unique ID for an event. Useful for downloading a single event to your calendar. This ID is not a permanent, persistent ID.

        :return: The event_id of this CalendarDate.
        :rtype: int
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this CalendarDate.

        An unique ID for an event. Useful for downloading a single event to your calendar. This ID is not a permanent, persistent ID.

        :param event_id: The event_id of this CalendarDate.
        :type event_id: int
        """

        self._event_id = event_id

    @property
    def location(self):
        """Gets the location of this CalendarDate.

         Can be state address or room. 

        :return: The location of this CalendarDate.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this CalendarDate.

         Can be state address or room. 

        :param location: The location of this CalendarDate.
        :type location: str
        """

        self._location = location

    @property
    def start_date(self):
        """Gets the start_date of this CalendarDate.


        :return: The start_date of this CalendarDate.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this CalendarDate.


        :param start_date: The start_date of this CalendarDate.
        :type start_date: str
        """

        self._start_date = start_date

    @property
    def state(self):
        """Gets the state of this CalendarDate.

        The state field only applies to election dates and reporting deadlines, reporting periods and all other dates do not have the array of states to filter on

        :return: The state of this CalendarDate.
        :rtype: List[str]
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CalendarDate.

        The state field only applies to election dates and reporting deadlines, reporting periods and all other dates do not have the array of states to filter on

        :param state: The state of this CalendarDate.
        :type state: List[str]
        """

        self._state = state

    @property
    def summary(self):
        """Gets the summary of this CalendarDate.


        :return: The summary of this CalendarDate.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this CalendarDate.


        :param summary: The summary of this CalendarDate.
        :type summary: str
        """

        self._summary = summary

    @property
    def url(self):
        """Gets the url of this CalendarDate.

         A url for that event 

        :return: The url of this CalendarDate.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CalendarDate.

         A url for that event 

        :param url: The url of this CalendarDate.
        :type url: str
        """

        self._url = url
