# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CandidateHistoryTotal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_through: int=None, address_city: str=None, address_state: str=None, address_street_1: str=None, address_street_2: str=None, address_zip: str=None, candidate_election_year: int=None, candidate_id: str=None, candidate_inactive: bool=None, candidate_status: str=None, cash_on_hand_end_period: float=None, coverage_end_date: date=None, coverage_start_date: date=None, cycle: int=None, cycles: List[int]=None, debts_owed_by_committee: float=None, disbursements: float=None, district: str=None, district_number: int=None, election_districts: List[str]=None, election_year: int=None, election_years: List[int]=None, fec_cycles_in_election: List[int]=None, federal_funds_flag: bool=None, first_file_date: date=None, flags: str=None, has_raised_funds: bool=None, incumbent_challenge: str=None, incumbent_challenge_full: str=None, individual_itemized_contributions: float=None, is_election: bool=None, last_f2_date: date=None, last_file_date: date=None, load_date: datetime=None, name: str=None, office: str=None, office_full: str=None, other_political_committee_contributions: float=None, party: str=None, party_full: str=None, receipts: float=None, rounded_election_years: List[int]=None, state: str=None, state_full: str=None, transfers_from_other_authorized_committee: float=None, two_year_period: int=None):
        """CandidateHistoryTotal - a model defined in OpenAPI

        :param active_through: The active_through of this CandidateHistoryTotal.
        :param address_city: The address_city of this CandidateHistoryTotal.
        :param address_state: The address_state of this CandidateHistoryTotal.
        :param address_street_1: The address_street_1 of this CandidateHistoryTotal.
        :param address_street_2: The address_street_2 of this CandidateHistoryTotal.
        :param address_zip: The address_zip of this CandidateHistoryTotal.
        :param candidate_election_year: The candidate_election_year of this CandidateHistoryTotal.
        :param candidate_id: The candidate_id of this CandidateHistoryTotal.
        :param candidate_inactive: The candidate_inactive of this CandidateHistoryTotal.
        :param candidate_status: The candidate_status of this CandidateHistoryTotal.
        :param cash_on_hand_end_period: The cash_on_hand_end_period of this CandidateHistoryTotal.
        :param coverage_end_date: The coverage_end_date of this CandidateHistoryTotal.
        :param coverage_start_date: The coverage_start_date of this CandidateHistoryTotal.
        :param cycle: The cycle of this CandidateHistoryTotal.
        :param cycles: The cycles of this CandidateHistoryTotal.
        :param debts_owed_by_committee: The debts_owed_by_committee of this CandidateHistoryTotal.
        :param disbursements: The disbursements of this CandidateHistoryTotal.
        :param district: The district of this CandidateHistoryTotal.
        :param district_number: The district_number of this CandidateHistoryTotal.
        :param election_districts: The election_districts of this CandidateHistoryTotal.
        :param election_year: The election_year of this CandidateHistoryTotal.
        :param election_years: The election_years of this CandidateHistoryTotal.
        :param fec_cycles_in_election: The fec_cycles_in_election of this CandidateHistoryTotal.
        :param federal_funds_flag: The federal_funds_flag of this CandidateHistoryTotal.
        :param first_file_date: The first_file_date of this CandidateHistoryTotal.
        :param flags: The flags of this CandidateHistoryTotal.
        :param has_raised_funds: The has_raised_funds of this CandidateHistoryTotal.
        :param incumbent_challenge: The incumbent_challenge of this CandidateHistoryTotal.
        :param incumbent_challenge_full: The incumbent_challenge_full of this CandidateHistoryTotal.
        :param individual_itemized_contributions: The individual_itemized_contributions of this CandidateHistoryTotal.
        :param is_election: The is_election of this CandidateHistoryTotal.
        :param last_f2_date: The last_f2_date of this CandidateHistoryTotal.
        :param last_file_date: The last_file_date of this CandidateHistoryTotal.
        :param load_date: The load_date of this CandidateHistoryTotal.
        :param name: The name of this CandidateHistoryTotal.
        :param office: The office of this CandidateHistoryTotal.
        :param office_full: The office_full of this CandidateHistoryTotal.
        :param other_political_committee_contributions: The other_political_committee_contributions of this CandidateHistoryTotal.
        :param party: The party of this CandidateHistoryTotal.
        :param party_full: The party_full of this CandidateHistoryTotal.
        :param receipts: The receipts of this CandidateHistoryTotal.
        :param rounded_election_years: The rounded_election_years of this CandidateHistoryTotal.
        :param state: The state of this CandidateHistoryTotal.
        :param state_full: The state_full of this CandidateHistoryTotal.
        :param transfers_from_other_authorized_committee: The transfers_from_other_authorized_committee of this CandidateHistoryTotal.
        :param two_year_period: The two_year_period of this CandidateHistoryTotal.
        """
        self.openapi_types = {
            'active_through': int,
            'address_city': str,
            'address_state': str,
            'address_street_1': str,
            'address_street_2': str,
            'address_zip': str,
            'candidate_election_year': int,
            'candidate_id': str,
            'candidate_inactive': bool,
            'candidate_status': str,
            'cash_on_hand_end_period': float,
            'coverage_end_date': date,
            'coverage_start_date': date,
            'cycle': int,
            'cycles': List[int],
            'debts_owed_by_committee': float,
            'disbursements': float,
            'district': str,
            'district_number': int,
            'election_districts': List[str],
            'election_year': int,
            'election_years': List[int],
            'fec_cycles_in_election': List[int],
            'federal_funds_flag': bool,
            'first_file_date': date,
            'flags': str,
            'has_raised_funds': bool,
            'incumbent_challenge': str,
            'incumbent_challenge_full': str,
            'individual_itemized_contributions': float,
            'is_election': bool,
            'last_f2_date': date,
            'last_file_date': date,
            'load_date': datetime,
            'name': str,
            'office': str,
            'office_full': str,
            'other_political_committee_contributions': float,
            'party': str,
            'party_full': str,
            'receipts': float,
            'rounded_election_years': List[int],
            'state': str,
            'state_full': str,
            'transfers_from_other_authorized_committee': float,
            'two_year_period': int
        }

        self.attribute_map = {
            'active_through': 'active_through',
            'address_city': 'address_city',
            'address_state': 'address_state',
            'address_street_1': 'address_street_1',
            'address_street_2': 'address_street_2',
            'address_zip': 'address_zip',
            'candidate_election_year': 'candidate_election_year',
            'candidate_id': 'candidate_id',
            'candidate_inactive': 'candidate_inactive',
            'candidate_status': 'candidate_status',
            'cash_on_hand_end_period': 'cash_on_hand_end_period',
            'coverage_end_date': 'coverage_end_date',
            'coverage_start_date': 'coverage_start_date',
            'cycle': 'cycle',
            'cycles': 'cycles',
            'debts_owed_by_committee': 'debts_owed_by_committee',
            'disbursements': 'disbursements',
            'district': 'district',
            'district_number': 'district_number',
            'election_districts': 'election_districts',
            'election_year': 'election_year',
            'election_years': 'election_years',
            'fec_cycles_in_election': 'fec_cycles_in_election',
            'federal_funds_flag': 'federal_funds_flag',
            'first_file_date': 'first_file_date',
            'flags': 'flags',
            'has_raised_funds': 'has_raised_funds',
            'incumbent_challenge': 'incumbent_challenge',
            'incumbent_challenge_full': 'incumbent_challenge_full',
            'individual_itemized_contributions': 'individual_itemized_contributions',
            'is_election': 'is_election',
            'last_f2_date': 'last_f2_date',
            'last_file_date': 'last_file_date',
            'load_date': 'load_date',
            'name': 'name',
            'office': 'office',
            'office_full': 'office_full',
            'other_political_committee_contributions': 'other_political_committee_contributions',
            'party': 'party',
            'party_full': 'party_full',
            'receipts': 'receipts',
            'rounded_election_years': 'rounded_election_years',
            'state': 'state',
            'state_full': 'state_full',
            'transfers_from_other_authorized_committee': 'transfers_from_other_authorized_committee',
            'two_year_period': 'two_year_period'
        }

        self._active_through = active_through
        self._address_city = address_city
        self._address_state = address_state
        self._address_street_1 = address_street_1
        self._address_street_2 = address_street_2
        self._address_zip = address_zip
        self._candidate_election_year = candidate_election_year
        self._candidate_id = candidate_id
        self._candidate_inactive = candidate_inactive
        self._candidate_status = candidate_status
        self._cash_on_hand_end_period = cash_on_hand_end_period
        self._coverage_end_date = coverage_end_date
        self._coverage_start_date = coverage_start_date
        self._cycle = cycle
        self._cycles = cycles
        self._debts_owed_by_committee = debts_owed_by_committee
        self._disbursements = disbursements
        self._district = district
        self._district_number = district_number
        self._election_districts = election_districts
        self._election_year = election_year
        self._election_years = election_years
        self._fec_cycles_in_election = fec_cycles_in_election
        self._federal_funds_flag = federal_funds_flag
        self._first_file_date = first_file_date
        self._flags = flags
        self._has_raised_funds = has_raised_funds
        self._incumbent_challenge = incumbent_challenge
        self._incumbent_challenge_full = incumbent_challenge_full
        self._individual_itemized_contributions = individual_itemized_contributions
        self._is_election = is_election
        self._last_f2_date = last_f2_date
        self._last_file_date = last_file_date
        self._load_date = load_date
        self._name = name
        self._office = office
        self._office_full = office_full
        self._other_political_committee_contributions = other_political_committee_contributions
        self._party = party
        self._party_full = party_full
        self._receipts = receipts
        self._rounded_election_years = rounded_election_years
        self._state = state
        self._state_full = state_full
        self._transfers_from_other_authorized_committee = transfers_from_other_authorized_committee
        self._two_year_period = two_year_period

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CandidateHistoryTotal':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CandidateHistoryTotal of this CandidateHistoryTotal.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_through(self):
        """Gets the active_through of this CandidateHistoryTotal.

        Last year a candidate was active. This field is specific to the candidate_id so if the same person runs for another office, there may be a different record for them.

        :return: The active_through of this CandidateHistoryTotal.
        :rtype: int
        """
        return self._active_through

    @active_through.setter
    def active_through(self, active_through):
        """Sets the active_through of this CandidateHistoryTotal.

        Last year a candidate was active. This field is specific to the candidate_id so if the same person runs for another office, there may be a different record for them.

        :param active_through: The active_through of this CandidateHistoryTotal.
        :type active_through: int
        """

        self._active_through = active_through

    @property
    def address_city(self):
        """Gets the address_city of this CandidateHistoryTotal.

        City of candidate's address, as reported on their Form 2.

        :return: The address_city of this CandidateHistoryTotal.
        :rtype: str
        """
        return self._address_city

    @address_city.setter
    def address_city(self, address_city):
        """Sets the address_city of this CandidateHistoryTotal.

        City of candidate's address, as reported on their Form 2.

        :param address_city: The address_city of this CandidateHistoryTotal.
        :type address_city: str
        """
        if address_city is not None and len(address_city) > 100:
            raise ValueError("Invalid value for `address_city`, length must be less than or equal to `100`")

        self._address_city = address_city

    @property
    def address_state(self):
        """Gets the address_state of this CandidateHistoryTotal.

        State of candidate's address, as reported on their Form 2.

        :return: The address_state of this CandidateHistoryTotal.
        :rtype: str
        """
        return self._address_state

    @address_state.setter
    def address_state(self, address_state):
        """Sets the address_state of this CandidateHistoryTotal.

        State of candidate's address, as reported on their Form 2.

        :param address_state: The address_state of this CandidateHistoryTotal.
        :type address_state: str
        """
        if address_state is not None and len(address_state) > 2:
            raise ValueError("Invalid value for `address_state`, length must be less than or equal to `2`")

        self._address_state = address_state

    @property
    def address_street_1(self):
        """Gets the address_street_1 of this CandidateHistoryTotal.

        Street of candidate's address, as reported on their Form 2.

        :return: The address_street_1 of this CandidateHistoryTotal.
        :rtype: str
        """
        return self._address_street_1

    @address_street_1.setter
    def address_street_1(self, address_street_1):
        """Sets the address_street_1 of this CandidateHistoryTotal.

        Street of candidate's address, as reported on their Form 2.

        :param address_street_1: The address_street_1 of this CandidateHistoryTotal.
        :type address_street_1: str
        """
        if address_street_1 is not None and len(address_street_1) > 200:
            raise ValueError("Invalid value for `address_street_1`, length must be less than or equal to `200`")

        self._address_street_1 = address_street_1

    @property
    def address_street_2(self):
        """Gets the address_street_2 of this CandidateHistoryTotal.

        Additional street information of candidate's address, as reported on their Form 2.

        :return: The address_street_2 of this CandidateHistoryTotal.
        :rtype: str
        """
        return self._address_street_2

    @address_street_2.setter
    def address_street_2(self, address_street_2):
        """Sets the address_street_2 of this CandidateHistoryTotal.

        Additional street information of candidate's address, as reported on their Form 2.

        :param address_street_2: The address_street_2 of this CandidateHistoryTotal.
        :type address_street_2: str
        """
        if address_street_2 is not None and len(address_street_2) > 200:
            raise ValueError("Invalid value for `address_street_2`, length must be less than or equal to `200`")

        self._address_street_2 = address_street_2

    @property
    def address_zip(self):
        """Gets the address_zip of this CandidateHistoryTotal.

        Zip code of candidate's address, as reported on their Form 2.

        :return: The address_zip of this CandidateHistoryTotal.
        :rtype: str
        """
        return self._address_zip

    @address_zip.setter
    def address_zip(self, address_zip):
        """Sets the address_zip of this CandidateHistoryTotal.

        Zip code of candidate's address, as reported on their Form 2.

        :param address_zip: The address_zip of this CandidateHistoryTotal.
        :type address_zip: str
        """
        if address_zip is not None and len(address_zip) > 10:
            raise ValueError("Invalid value for `address_zip`, length must be less than or equal to `10`")

        self._address_zip = address_zip

    @property
    def candidate_election_year(self):
        """Gets the candidate_election_year of this CandidateHistoryTotal.

        The last year of the cycle for this election.

        :return: The candidate_election_year of this CandidateHistoryTotal.
        :rtype: int
        """
        return self._candidate_election_year

    @candidate_election_year.setter
    def candidate_election_year(self, candidate_election_year):
        """Sets the candidate_election_year of this CandidateHistoryTotal.

        The last year of the cycle for this election.

        :param candidate_election_year: The candidate_election_year of this CandidateHistoryTotal.
        :type candidate_election_year: int
        """

        self._candidate_election_year = candidate_election_year

    @property
    def candidate_id(self):
        """Gets the candidate_id of this CandidateHistoryTotal.

         A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 

        :return: The candidate_id of this CandidateHistoryTotal.
        :rtype: str
        """
        return self._candidate_id

    @candidate_id.setter
    def candidate_id(self, candidate_id):
        """Sets the candidate_id of this CandidateHistoryTotal.

         A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 

        :param candidate_id: The candidate_id of this CandidateHistoryTotal.
        :type candidate_id: str
        """
        if candidate_id is None:
            raise ValueError("Invalid value for `candidate_id`, must not be `None`")

        self._candidate_id = candidate_id

    @property
    def candidate_inactive(self):
        """Gets the candidate_inactive of this CandidateHistoryTotal.

         True indicates that a candidate is inactive. 

        :return: The candidate_inactive of this CandidateHistoryTotal.
        :rtype: bool
        """
        return self._candidate_inactive

    @candidate_inactive.setter
    def candidate_inactive(self, candidate_inactive):
        """Sets the candidate_inactive of this CandidateHistoryTotal.

         True indicates that a candidate is inactive. 

        :param candidate_inactive: The candidate_inactive of this CandidateHistoryTotal.
        :type candidate_inactive: bool
        """

        self._candidate_inactive = candidate_inactive

    @property
    def candidate_status(self):
        """Gets the candidate_status of this CandidateHistoryTotal.

        One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 

        :return: The candidate_status of this CandidateHistoryTotal.
        :rtype: str
        """
        return self._candidate_status

    @candidate_status.setter
    def candidate_status(self, candidate_status):
        """Sets the candidate_status of this CandidateHistoryTotal.

        One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 

        :param candidate_status: The candidate_status of this CandidateHistoryTotal.
        :type candidate_status: str
        """
        if candidate_status is not None and len(candidate_status) > 1:
            raise ValueError("Invalid value for `candidate_status`, length must be less than or equal to `1`")

        self._candidate_status = candidate_status

    @property
    def cash_on_hand_end_period(self):
        """Gets the cash_on_hand_end_period of this CandidateHistoryTotal.

        Ending cash balance on the most recent filing

        :return: The cash_on_hand_end_period of this CandidateHistoryTotal.
        :rtype: float
        """
        return self._cash_on_hand_end_period

    @cash_on_hand_end_period.setter
    def cash_on_hand_end_period(self, cash_on_hand_end_period):
        """Sets the cash_on_hand_end_period of this CandidateHistoryTotal.

        Ending cash balance on the most recent filing

        :param cash_on_hand_end_period: The cash_on_hand_end_period of this CandidateHistoryTotal.
        :type cash_on_hand_end_period: float
        """

        self._cash_on_hand_end_period = cash_on_hand_end_period

    @property
    def coverage_end_date(self):
        """Gets the coverage_end_date of this CandidateHistoryTotal.

        Ending date of the reporting period

        :return: The coverage_end_date of this CandidateHistoryTotal.
        :rtype: date
        """
        return self._coverage_end_date

    @coverage_end_date.setter
    def coverage_end_date(self, coverage_end_date):
        """Sets the coverage_end_date of this CandidateHistoryTotal.

        Ending date of the reporting period

        :param coverage_end_date: The coverage_end_date of this CandidateHistoryTotal.
        :type coverage_end_date: date
        """

        self._coverage_end_date = coverage_end_date

    @property
    def coverage_start_date(self):
        """Gets the coverage_start_date of this CandidateHistoryTotal.

        Beginning date of the reporting period

        :return: The coverage_start_date of this CandidateHistoryTotal.
        :rtype: date
        """
        return self._coverage_start_date

    @coverage_start_date.setter
    def coverage_start_date(self, coverage_start_date):
        """Sets the coverage_start_date of this CandidateHistoryTotal.

        Beginning date of the reporting period

        :param coverage_start_date: The coverage_start_date of this CandidateHistoryTotal.
        :type coverage_start_date: date
        """

        self._coverage_start_date = coverage_start_date

    @property
    def cycle(self):
        """Gets the cycle of this CandidateHistoryTotal.

         Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 

        :return: The cycle of this CandidateHistoryTotal.
        :rtype: int
        """
        return self._cycle

    @cycle.setter
    def cycle(self, cycle):
        """Sets the cycle of this CandidateHistoryTotal.

         Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 

        :param cycle: The cycle of this CandidateHistoryTotal.
        :type cycle: int
        """
        if cycle is None:
            raise ValueError("Invalid value for `cycle`, must not be `None`")

        self._cycle = cycle

    @property
    def cycles(self):
        """Gets the cycles of this CandidateHistoryTotal.

         Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the `election_full` flag. 

        :return: The cycles of this CandidateHistoryTotal.
        :rtype: List[int]
        """
        return self._cycles

    @cycles.setter
    def cycles(self, cycles):
        """Sets the cycles of this CandidateHistoryTotal.

         Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the `election_full` flag. 

        :param cycles: The cycles of this CandidateHistoryTotal.
        :type cycles: List[int]
        """

        self._cycles = cycles

    @property
    def debts_owed_by_committee(self):
        """Gets the debts_owed_by_committee of this CandidateHistoryTotal.

        Debts owed by the committee

        :return: The debts_owed_by_committee of this CandidateHistoryTotal.
        :rtype: float
        """
        return self._debts_owed_by_committee

    @debts_owed_by_committee.setter
    def debts_owed_by_committee(self, debts_owed_by_committee):
        """Sets the debts_owed_by_committee of this CandidateHistoryTotal.

        Debts owed by the committee

        :param debts_owed_by_committee: The debts_owed_by_committee of this CandidateHistoryTotal.
        :type debts_owed_by_committee: float
        """

        self._debts_owed_by_committee = debts_owed_by_committee

    @property
    def disbursements(self):
        """Gets the disbursements of this CandidateHistoryTotal.


        :return: The disbursements of this CandidateHistoryTotal.
        :rtype: float
        """
        return self._disbursements

    @disbursements.setter
    def disbursements(self, disbursements):
        """Sets the disbursements of this CandidateHistoryTotal.


        :param disbursements: The disbursements of this CandidateHistoryTotal.
        :type disbursements: float
        """

        self._disbursements = disbursements

    @property
    def district(self):
        """Gets the district of this CandidateHistoryTotal.

        Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.

        :return: The district of this CandidateHistoryTotal.
        :rtype: str
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this CandidateHistoryTotal.

        Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.

        :param district: The district of this CandidateHistoryTotal.
        :type district: str
        """
        if district is not None and len(district) > 2:
            raise ValueError("Invalid value for `district`, length must be less than or equal to `2`")

        self._district = district

    @property
    def district_number(self):
        """Gets the district_number of this CandidateHistoryTotal.

        One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 

        :return: The district_number of this CandidateHistoryTotal.
        :rtype: int
        """
        return self._district_number

    @district_number.setter
    def district_number(self, district_number):
        """Sets the district_number of this CandidateHistoryTotal.

        One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 

        :param district_number: The district_number of this CandidateHistoryTotal.
        :type district_number: int
        """

        self._district_number = district_number

    @property
    def election_districts(self):
        """Gets the election_districts of this CandidateHistoryTotal.

        Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.

        :return: The election_districts of this CandidateHistoryTotal.
        :rtype: List[str]
        """
        return self._election_districts

    @election_districts.setter
    def election_districts(self, election_districts):
        """Sets the election_districts of this CandidateHistoryTotal.

        Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.

        :param election_districts: The election_districts of this CandidateHistoryTotal.
        :type election_districts: List[str]
        """

        self._election_districts = election_districts

    @property
    def election_year(self):
        """Gets the election_year of this CandidateHistoryTotal.

        Year of election

        :return: The election_year of this CandidateHistoryTotal.
        :rtype: int
        """
        return self._election_year

    @election_year.setter
    def election_year(self, election_year):
        """Sets the election_year of this CandidateHistoryTotal.

        Year of election

        :param election_year: The election_year of this CandidateHistoryTotal.
        :type election_year: int
        """

        self._election_year = election_year

    @property
    def election_years(self):
        """Gets the election_years of this CandidateHistoryTotal.

        Years in which a candidate ran for office.

        :return: The election_years of this CandidateHistoryTotal.
        :rtype: List[int]
        """
        return self._election_years

    @election_years.setter
    def election_years(self, election_years):
        """Sets the election_years of this CandidateHistoryTotal.

        Years in which a candidate ran for office.

        :param election_years: The election_years of this CandidateHistoryTotal.
        :type election_years: List[int]
        """

        self._election_years = election_years

    @property
    def fec_cycles_in_election(self):
        """Gets the fec_cycles_in_election of this CandidateHistoryTotal.

        FEC cycles are included in candidate election years.

        :return: The fec_cycles_in_election of this CandidateHistoryTotal.
        :rtype: List[int]
        """
        return self._fec_cycles_in_election

    @fec_cycles_in_election.setter
    def fec_cycles_in_election(self, fec_cycles_in_election):
        """Sets the fec_cycles_in_election of this CandidateHistoryTotal.

        FEC cycles are included in candidate election years.

        :param fec_cycles_in_election: The fec_cycles_in_election of this CandidateHistoryTotal.
        :type fec_cycles_in_election: List[int]
        """

        self._fec_cycles_in_election = fec_cycles_in_election

    @property
    def federal_funds_flag(self):
        """Gets the federal_funds_flag of this CandidateHistoryTotal.

        A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.

        :return: The federal_funds_flag of this CandidateHistoryTotal.
        :rtype: bool
        """
        return self._federal_funds_flag

    @federal_funds_flag.setter
    def federal_funds_flag(self, federal_funds_flag):
        """Sets the federal_funds_flag of this CandidateHistoryTotal.

        A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.

        :param federal_funds_flag: The federal_funds_flag of this CandidateHistoryTotal.
        :type federal_funds_flag: bool
        """

        self._federal_funds_flag = federal_funds_flag

    @property
    def first_file_date(self):
        """Gets the first_file_date of this CandidateHistoryTotal.

        The day the FEC received the candidate's first filing. This is a F2 candidate registration.

        :return: The first_file_date of this CandidateHistoryTotal.
        :rtype: date
        """
        return self._first_file_date

    @first_file_date.setter
    def first_file_date(self, first_file_date):
        """Sets the first_file_date of this CandidateHistoryTotal.

        The day the FEC received the candidate's first filing. This is a F2 candidate registration.

        :param first_file_date: The first_file_date of this CandidateHistoryTotal.
        :type first_file_date: date
        """

        self._first_file_date = first_file_date

    @property
    def flags(self):
        """Gets the flags of this CandidateHistoryTotal.


        :return: The flags of this CandidateHistoryTotal.
        :rtype: str
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this CandidateHistoryTotal.


        :param flags: The flags of this CandidateHistoryTotal.
        :type flags: str
        """

        self._flags = flags

    @property
    def has_raised_funds(self):
        """Gets the has_raised_funds of this CandidateHistoryTotal.

        A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)

        :return: The has_raised_funds of this CandidateHistoryTotal.
        :rtype: bool
        """
        return self._has_raised_funds

    @has_raised_funds.setter
    def has_raised_funds(self, has_raised_funds):
        """Sets the has_raised_funds of this CandidateHistoryTotal.

        A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)

        :param has_raised_funds: The has_raised_funds of this CandidateHistoryTotal.
        :type has_raised_funds: bool
        """

        self._has_raised_funds = has_raised_funds

    @property
    def incumbent_challenge(self):
        """Gets the incumbent_challenge of this CandidateHistoryTotal.

        One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.

        :return: The incumbent_challenge of this CandidateHistoryTotal.
        :rtype: str
        """
        return self._incumbent_challenge

    @incumbent_challenge.setter
    def incumbent_challenge(self, incumbent_challenge):
        """Sets the incumbent_challenge of this CandidateHistoryTotal.

        One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.

        :param incumbent_challenge: The incumbent_challenge of this CandidateHistoryTotal.
        :type incumbent_challenge: str
        """
        if incumbent_challenge is not None and len(incumbent_challenge) > 1:
            raise ValueError("Invalid value for `incumbent_challenge`, length must be less than or equal to `1`")

        self._incumbent_challenge = incumbent_challenge

    @property
    def incumbent_challenge_full(self):
        """Gets the incumbent_challenge_full of this CandidateHistoryTotal.

        Explains if the candidate is an incumbent, a challenger, or if the seat is open.

        :return: The incumbent_challenge_full of this CandidateHistoryTotal.
        :rtype: str
        """
        return self._incumbent_challenge_full

    @incumbent_challenge_full.setter
    def incumbent_challenge_full(self, incumbent_challenge_full):
        """Sets the incumbent_challenge_full of this CandidateHistoryTotal.

        Explains if the candidate is an incumbent, a challenger, or if the seat is open.

        :param incumbent_challenge_full: The incumbent_challenge_full of this CandidateHistoryTotal.
        :type incumbent_challenge_full: str
        """
        if incumbent_challenge_full is not None and len(incumbent_challenge_full) > 10:
            raise ValueError("Invalid value for `incumbent_challenge_full`, length must be less than or equal to `10`")

        self._incumbent_challenge_full = incumbent_challenge_full

    @property
    def individual_itemized_contributions(self):
        """Gets the individual_itemized_contributions of this CandidateHistoryTotal.

        Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less.

        :return: The individual_itemized_contributions of this CandidateHistoryTotal.
        :rtype: float
        """
        return self._individual_itemized_contributions

    @individual_itemized_contributions.setter
    def individual_itemized_contributions(self, individual_itemized_contributions):
        """Sets the individual_itemized_contributions of this CandidateHistoryTotal.

        Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less.

        :param individual_itemized_contributions: The individual_itemized_contributions of this CandidateHistoryTotal.
        :type individual_itemized_contributions: float
        """

        self._individual_itemized_contributions = individual_itemized_contributions

    @property
    def is_election(self):
        """Gets the is_election of this CandidateHistoryTotal.


        :return: The is_election of this CandidateHistoryTotal.
        :rtype: bool
        """
        return self._is_election

    @is_election.setter
    def is_election(self, is_election):
        """Sets the is_election of this CandidateHistoryTotal.


        :param is_election: The is_election of this CandidateHistoryTotal.
        :type is_election: bool
        """
        if is_election is None:
            raise ValueError("Invalid value for `is_election`, must not be `None`")

        self._is_election = is_election

    @property
    def last_f2_date(self):
        """Gets the last_f2_date of this CandidateHistoryTotal.

        The day the FEC received the candidate's most recent Form 2

        :return: The last_f2_date of this CandidateHistoryTotal.
        :rtype: date
        """
        return self._last_f2_date

    @last_f2_date.setter
    def last_f2_date(self, last_f2_date):
        """Sets the last_f2_date of this CandidateHistoryTotal.

        The day the FEC received the candidate's most recent Form 2

        :param last_f2_date: The last_f2_date of this CandidateHistoryTotal.
        :type last_f2_date: date
        """

        self._last_f2_date = last_f2_date

    @property
    def last_file_date(self):
        """Gets the last_file_date of this CandidateHistoryTotal.

        The day the FEC received the candidate's most recent filing

        :return: The last_file_date of this CandidateHistoryTotal.
        :rtype: date
        """
        return self._last_file_date

    @last_file_date.setter
    def last_file_date(self, last_file_date):
        """Sets the last_file_date of this CandidateHistoryTotal.

        The day the FEC received the candidate's most recent filing

        :param last_file_date: The last_file_date of this CandidateHistoryTotal.
        :type last_file_date: date
        """

        self._last_file_date = last_file_date

    @property
    def load_date(self):
        """Gets the load_date of this CandidateHistoryTotal.

        Date the information was loaded into the FEC systems. This can be affected by reseting systems and other factors, refer to receipt_date for the day that the FEC received the paper or electronic document. Keep in mind that paper filings take more time to process and there can be a lag between load_date and receipt_date. This field can be helpful to identify paper records that have been processed recently.

        :return: The load_date of this CandidateHistoryTotal.
        :rtype: datetime
        """
        return self._load_date

    @load_date.setter
    def load_date(self, load_date):
        """Sets the load_date of this CandidateHistoryTotal.

        Date the information was loaded into the FEC systems. This can be affected by reseting systems and other factors, refer to receipt_date for the day that the FEC received the paper or electronic document. Keep in mind that paper filings take more time to process and there can be a lag between load_date and receipt_date. This field can be helpful to identify paper records that have been processed recently.

        :param load_date: The load_date of this CandidateHistoryTotal.
        :type load_date: datetime
        """

        self._load_date = load_date

    @property
    def name(self):
        """Gets the name of this CandidateHistoryTotal.

        Name of candidate running for office

        :return: The name of this CandidateHistoryTotal.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CandidateHistoryTotal.

        Name of candidate running for office

        :param name: The name of this CandidateHistoryTotal.
        :type name: str
        """
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")

        self._name = name

    @property
    def office(self):
        """Gets the office of this CandidateHistoryTotal.

        Federal office candidate runs for: H, S or P

        :return: The office of this CandidateHistoryTotal.
        :rtype: str
        """
        return self._office

    @office.setter
    def office(self, office):
        """Sets the office of this CandidateHistoryTotal.

        Federal office candidate runs for: H, S or P

        :param office: The office of this CandidateHistoryTotal.
        :type office: str
        """
        if office is not None and len(office) > 1:
            raise ValueError("Invalid value for `office`, length must be less than or equal to `1`")

        self._office = office

    @property
    def office_full(self):
        """Gets the office_full of this CandidateHistoryTotal.

        Federal office candidate runs for: House, Senate or presidential

        :return: The office_full of this CandidateHistoryTotal.
        :rtype: str
        """
        return self._office_full

    @office_full.setter
    def office_full(self, office_full):
        """Sets the office_full of this CandidateHistoryTotal.

        Federal office candidate runs for: House, Senate or presidential

        :param office_full: The office_full of this CandidateHistoryTotal.
        :type office_full: str
        """
        if office_full is not None and len(office_full) > 9:
            raise ValueError("Invalid value for `office_full`, length must be less than or equal to `9`")

        self._office_full = office_full

    @property
    def other_political_committee_contributions(self):
        """Gets the other_political_committee_contributions of this CandidateHistoryTotal.

        Other committees contributions

        :return: The other_political_committee_contributions of this CandidateHistoryTotal.
        :rtype: float
        """
        return self._other_political_committee_contributions

    @other_political_committee_contributions.setter
    def other_political_committee_contributions(self, other_political_committee_contributions):
        """Sets the other_political_committee_contributions of this CandidateHistoryTotal.

        Other committees contributions

        :param other_political_committee_contributions: The other_political_committee_contributions of this CandidateHistoryTotal.
        :type other_political_committee_contributions: float
        """

        self._other_political_committee_contributions = other_political_committee_contributions

    @property
    def party(self):
        """Gets the party of this CandidateHistoryTotal.

        Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.

        :return: The party of this CandidateHistoryTotal.
        :rtype: str
        """
        return self._party

    @party.setter
    def party(self, party):
        """Sets the party of this CandidateHistoryTotal.

        Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.

        :param party: The party of this CandidateHistoryTotal.
        :type party: str
        """
        if party is not None and len(party) > 3:
            raise ValueError("Invalid value for `party`, length must be less than or equal to `3`")

        self._party = party

    @property
    def party_full(self):
        """Gets the party_full of this CandidateHistoryTotal.

        Party affiliated with a candidate or committee

        :return: The party_full of this CandidateHistoryTotal.
        :rtype: str
        """
        return self._party_full

    @party_full.setter
    def party_full(self, party_full):
        """Sets the party_full of this CandidateHistoryTotal.

        Party affiliated with a candidate or committee

        :param party_full: The party_full of this CandidateHistoryTotal.
        :type party_full: str
        """
        if party_full is not None and len(party_full) > 255:
            raise ValueError("Invalid value for `party_full`, length must be less than or equal to `255`")

        self._party_full = party_full

    @property
    def receipts(self):
        """Gets the receipts of this CandidateHistoryTotal.


        :return: The receipts of this CandidateHistoryTotal.
        :rtype: float
        """
        return self._receipts

    @receipts.setter
    def receipts(self, receipts):
        """Sets the receipts of this CandidateHistoryTotal.


        :param receipts: The receipts of this CandidateHistoryTotal.
        :type receipts: float
        """

        self._receipts = receipts

    @property
    def rounded_election_years(self):
        """Gets the rounded_election_years of this CandidateHistoryTotal.

        Rounded election years in which a candidate ran for office

        :return: The rounded_election_years of this CandidateHistoryTotal.
        :rtype: List[int]
        """
        return self._rounded_election_years

    @rounded_election_years.setter
    def rounded_election_years(self, rounded_election_years):
        """Sets the rounded_election_years of this CandidateHistoryTotal.

        Rounded election years in which a candidate ran for office

        :param rounded_election_years: The rounded_election_years of this CandidateHistoryTotal.
        :type rounded_election_years: List[int]
        """

        self._rounded_election_years = rounded_election_years

    @property
    def state(self):
        """Gets the state of this CandidateHistoryTotal.

        US state or territory where a candidate runs for office

        :return: The state of this CandidateHistoryTotal.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CandidateHistoryTotal.

        US state or territory where a candidate runs for office

        :param state: The state of this CandidateHistoryTotal.
        :type state: str
        """
        if state is not None and len(state) > 2:
            raise ValueError("Invalid value for `state`, length must be less than or equal to `2`")

        self._state = state

    @property
    def state_full(self):
        """Gets the state_full of this CandidateHistoryTotal.

        US state or territory where a candidate runs for office

        :return: The state_full of this CandidateHistoryTotal.
        :rtype: str
        """
        return self._state_full

    @state_full.setter
    def state_full(self, state_full):
        """Sets the state_full of this CandidateHistoryTotal.

        US state or territory where a candidate runs for office

        :param state_full: The state_full of this CandidateHistoryTotal.
        :type state_full: str
        """
        if state_full is not None and len(state_full) > 50:
            raise ValueError("Invalid value for `state_full`, length must be less than or equal to `50`")

        self._state_full = state_full

    @property
    def transfers_from_other_authorized_committee(self):
        """Gets the transfers_from_other_authorized_committee of this CandidateHistoryTotal.

        Transfers from authorized committees

        :return: The transfers_from_other_authorized_committee of this CandidateHistoryTotal.
        :rtype: float
        """
        return self._transfers_from_other_authorized_committee

    @transfers_from_other_authorized_committee.setter
    def transfers_from_other_authorized_committee(self, transfers_from_other_authorized_committee):
        """Sets the transfers_from_other_authorized_committee of this CandidateHistoryTotal.

        Transfers from authorized committees

        :param transfers_from_other_authorized_committee: The transfers_from_other_authorized_committee of this CandidateHistoryTotal.
        :type transfers_from_other_authorized_committee: float
        """

        self._transfers_from_other_authorized_committee = transfers_from_other_authorized_committee

    @property
    def two_year_period(self):
        """Gets the two_year_period of this CandidateHistoryTotal.

         Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the `election_full` flag. 

        :return: The two_year_period of this CandidateHistoryTotal.
        :rtype: int
        """
        return self._two_year_period

    @two_year_period.setter
    def two_year_period(self, two_year_period):
        """Sets the two_year_period of this CandidateHistoryTotal.

         Two-year election cycle in which a candidate runs for office. Calculated from Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To retrieve data for the entire four years of a presidential term or six years of a senatorial term, you will need the `election_full` flag. 

        :param two_year_period: The two_year_period of this CandidateHistoryTotal.
        :type two_year_period: int
        """
        if two_year_period is None:
            raise ValueError("Invalid value for `two_year_period`, must not be `None`")

        self._two_year_period = two_year_period
