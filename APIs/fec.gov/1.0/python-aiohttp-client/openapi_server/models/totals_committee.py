# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.committee_detail_jfc_committee_inner import CommitteeDetailJfcCommitteeInner
from openapi_server import util


class TotalsCommittee(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, affiliated_committee_name: str=None, candidate_ids: List[str]=None, cash_on_hand_end_period: float=None, city: str=None, committee_id: str=None, committee_type: str=None, committee_type_full: str=None, cycle: int=None, cycles: List[int]=None, cycles_has_activity: List[int]=None, cycles_has_financial: List[int]=None, debts_owed_by_committee: float=None, designation: str=None, designation_full: str=None, disbursements: float=None, filing_frequency: str=None, first_f1_date: date=None, first_file_date: date=None, independent_expenditures: float=None, is_active: bool=None, jfc_committee: List[CommitteeDetailJfcCommitteeInner]=None, last_cycle_has_activity: int=None, last_cycle_has_financial: int=None, last_f1_date: date=None, last_file_date: date=None, name: str=None, organization_type: str=None, organization_type_full: str=None, party: str=None, party_full: str=None, receipts: float=None, state: str=None, state_full: str=None, street_1: str=None, street_2: str=None, treasurer_name: str=None, zip: str=None):
        """TotalsCommittee - a model defined in OpenAPI

        :param affiliated_committee_name: The affiliated_committee_name of this TotalsCommittee.
        :param candidate_ids: The candidate_ids of this TotalsCommittee.
        :param cash_on_hand_end_period: The cash_on_hand_end_period of this TotalsCommittee.
        :param city: The city of this TotalsCommittee.
        :param committee_id: The committee_id of this TotalsCommittee.
        :param committee_type: The committee_type of this TotalsCommittee.
        :param committee_type_full: The committee_type_full of this TotalsCommittee.
        :param cycle: The cycle of this TotalsCommittee.
        :param cycles: The cycles of this TotalsCommittee.
        :param cycles_has_activity: The cycles_has_activity of this TotalsCommittee.
        :param cycles_has_financial: The cycles_has_financial of this TotalsCommittee.
        :param debts_owed_by_committee: The debts_owed_by_committee of this TotalsCommittee.
        :param designation: The designation of this TotalsCommittee.
        :param designation_full: The designation_full of this TotalsCommittee.
        :param disbursements: The disbursements of this TotalsCommittee.
        :param filing_frequency: The filing_frequency of this TotalsCommittee.
        :param first_f1_date: The first_f1_date of this TotalsCommittee.
        :param first_file_date: The first_file_date of this TotalsCommittee.
        :param independent_expenditures: The independent_expenditures of this TotalsCommittee.
        :param is_active: The is_active of this TotalsCommittee.
        :param jfc_committee: The jfc_committee of this TotalsCommittee.
        :param last_cycle_has_activity: The last_cycle_has_activity of this TotalsCommittee.
        :param last_cycle_has_financial: The last_cycle_has_financial of this TotalsCommittee.
        :param last_f1_date: The last_f1_date of this TotalsCommittee.
        :param last_file_date: The last_file_date of this TotalsCommittee.
        :param name: The name of this TotalsCommittee.
        :param organization_type: The organization_type of this TotalsCommittee.
        :param organization_type_full: The organization_type_full of this TotalsCommittee.
        :param party: The party of this TotalsCommittee.
        :param party_full: The party_full of this TotalsCommittee.
        :param receipts: The receipts of this TotalsCommittee.
        :param state: The state of this TotalsCommittee.
        :param state_full: The state_full of this TotalsCommittee.
        :param street_1: The street_1 of this TotalsCommittee.
        :param street_2: The street_2 of this TotalsCommittee.
        :param treasurer_name: The treasurer_name of this TotalsCommittee.
        :param zip: The zip of this TotalsCommittee.
        """
        self.openapi_types = {
            'affiliated_committee_name': str,
            'candidate_ids': List[str],
            'cash_on_hand_end_period': float,
            'city': str,
            'committee_id': str,
            'committee_type': str,
            'committee_type_full': str,
            'cycle': int,
            'cycles': List[int],
            'cycles_has_activity': List[int],
            'cycles_has_financial': List[int],
            'debts_owed_by_committee': float,
            'designation': str,
            'designation_full': str,
            'disbursements': float,
            'filing_frequency': str,
            'first_f1_date': date,
            'first_file_date': date,
            'independent_expenditures': float,
            'is_active': bool,
            'jfc_committee': List[CommitteeDetailJfcCommitteeInner],
            'last_cycle_has_activity': int,
            'last_cycle_has_financial': int,
            'last_f1_date': date,
            'last_file_date': date,
            'name': str,
            'organization_type': str,
            'organization_type_full': str,
            'party': str,
            'party_full': str,
            'receipts': float,
            'state': str,
            'state_full': str,
            'street_1': str,
            'street_2': str,
            'treasurer_name': str,
            'zip': str
        }

        self.attribute_map = {
            'affiliated_committee_name': 'affiliated_committee_name',
            'candidate_ids': 'candidate_ids',
            'cash_on_hand_end_period': 'cash_on_hand_end_period',
            'city': 'city',
            'committee_id': 'committee_id',
            'committee_type': 'committee_type',
            'committee_type_full': 'committee_type_full',
            'cycle': 'cycle',
            'cycles': 'cycles',
            'cycles_has_activity': 'cycles_has_activity',
            'cycles_has_financial': 'cycles_has_financial',
            'debts_owed_by_committee': 'debts_owed_by_committee',
            'designation': 'designation',
            'designation_full': 'designation_full',
            'disbursements': 'disbursements',
            'filing_frequency': 'filing_frequency',
            'first_f1_date': 'first_f1_date',
            'first_file_date': 'first_file_date',
            'independent_expenditures': 'independent_expenditures',
            'is_active': 'is_active',
            'jfc_committee': 'jfc_committee',
            'last_cycle_has_activity': 'last_cycle_has_activity',
            'last_cycle_has_financial': 'last_cycle_has_financial',
            'last_f1_date': 'last_f1_date',
            'last_file_date': 'last_file_date',
            'name': 'name',
            'organization_type': 'organization_type',
            'organization_type_full': 'organization_type_full',
            'party': 'party',
            'party_full': 'party_full',
            'receipts': 'receipts',
            'state': 'state',
            'state_full': 'state_full',
            'street_1': 'street_1',
            'street_2': 'street_2',
            'treasurer_name': 'treasurer_name',
            'zip': 'zip'
        }

        self._affiliated_committee_name = affiliated_committee_name
        self._candidate_ids = candidate_ids
        self._cash_on_hand_end_period = cash_on_hand_end_period
        self._city = city
        self._committee_id = committee_id
        self._committee_type = committee_type
        self._committee_type_full = committee_type_full
        self._cycle = cycle
        self._cycles = cycles
        self._cycles_has_activity = cycles_has_activity
        self._cycles_has_financial = cycles_has_financial
        self._debts_owed_by_committee = debts_owed_by_committee
        self._designation = designation
        self._designation_full = designation_full
        self._disbursements = disbursements
        self._filing_frequency = filing_frequency
        self._first_f1_date = first_f1_date
        self._first_file_date = first_file_date
        self._independent_expenditures = independent_expenditures
        self._is_active = is_active
        self._jfc_committee = jfc_committee
        self._last_cycle_has_activity = last_cycle_has_activity
        self._last_cycle_has_financial = last_cycle_has_financial
        self._last_f1_date = last_f1_date
        self._last_file_date = last_file_date
        self._name = name
        self._organization_type = organization_type
        self._organization_type_full = organization_type_full
        self._party = party
        self._party_full = party_full
        self._receipts = receipts
        self._state = state
        self._state_full = state_full
        self._street_1 = street_1
        self._street_2 = street_2
        self._treasurer_name = treasurer_name
        self._zip = zip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TotalsCommittee':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TotalsCommittee of this TotalsCommittee.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def affiliated_committee_name(self):
        """Gets the affiliated_committee_name of this TotalsCommittee.

         Affiliated committee or connected organization 

        :return: The affiliated_committee_name of this TotalsCommittee.
        :rtype: str
        """
        return self._affiliated_committee_name

    @affiliated_committee_name.setter
    def affiliated_committee_name(self, affiliated_committee_name):
        """Sets the affiliated_committee_name of this TotalsCommittee.

         Affiliated committee or connected organization 

        :param affiliated_committee_name: The affiliated_committee_name of this TotalsCommittee.
        :type affiliated_committee_name: str
        """
        if affiliated_committee_name is not None and len(affiliated_committee_name) > 100:
            raise ValueError("Invalid value for `affiliated_committee_name`, length must be less than or equal to `100`")

        self._affiliated_committee_name = affiliated_committee_name

    @property
    def candidate_ids(self):
        """Gets the candidate_ids of this TotalsCommittee.

         A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 

        :return: The candidate_ids of this TotalsCommittee.
        :rtype: List[str]
        """
        return self._candidate_ids

    @candidate_ids.setter
    def candidate_ids(self, candidate_ids):
        """Sets the candidate_ids of this TotalsCommittee.

         A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 

        :param candidate_ids: The candidate_ids of this TotalsCommittee.
        :type candidate_ids: List[str]
        """

        self._candidate_ids = candidate_ids

    @property
    def cash_on_hand_end_period(self):
        """Gets the cash_on_hand_end_period of this TotalsCommittee.


        :return: The cash_on_hand_end_period of this TotalsCommittee.
        :rtype: float
        """
        return self._cash_on_hand_end_period

    @cash_on_hand_end_period.setter
    def cash_on_hand_end_period(self, cash_on_hand_end_period):
        """Sets the cash_on_hand_end_period of this TotalsCommittee.


        :param cash_on_hand_end_period: The cash_on_hand_end_period of this TotalsCommittee.
        :type cash_on_hand_end_period: float
        """

        self._cash_on_hand_end_period = cash_on_hand_end_period

    @property
    def city(self):
        """Gets the city of this TotalsCommittee.

         City of committee as reported on the Form 1 

        :return: The city of this TotalsCommittee.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this TotalsCommittee.

         City of committee as reported on the Form 1 

        :param city: The city of this TotalsCommittee.
        :type city: str
        """
        if city is not None and len(city) > 50:
            raise ValueError("Invalid value for `city`, length must be less than or equal to `50`")

        self._city = city

    @property
    def committee_id(self):
        """Gets the committee_id of this TotalsCommittee.

         A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 

        :return: The committee_id of this TotalsCommittee.
        :rtype: str
        """
        return self._committee_id

    @committee_id.setter
    def committee_id(self, committee_id):
        """Sets the committee_id of this TotalsCommittee.

         A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 

        :param committee_id: The committee_id of this TotalsCommittee.
        :type committee_id: str
        """
        if committee_id is None:
            raise ValueError("Invalid value for `committee_id`, must not be `None`")

        self._committee_id = committee_id

    @property
    def committee_type(self):
        """Gets the committee_type of this TotalsCommittee.

        The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 

        :return: The committee_type of this TotalsCommittee.
        :rtype: str
        """
        return self._committee_type

    @committee_type.setter
    def committee_type(self, committee_type):
        """Sets the committee_type of this TotalsCommittee.

        The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 

        :param committee_type: The committee_type of this TotalsCommittee.
        :type committee_type: str
        """
        if committee_type is not None and len(committee_type) > 1:
            raise ValueError("Invalid value for `committee_type`, length must be less than or equal to `1`")

        self._committee_type = committee_type

    @property
    def committee_type_full(self):
        """Gets the committee_type_full of this TotalsCommittee.

        The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 

        :return: The committee_type_full of this TotalsCommittee.
        :rtype: str
        """
        return self._committee_type_full

    @committee_type_full.setter
    def committee_type_full(self, committee_type_full):
        """Sets the committee_type_full of this TotalsCommittee.

        The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 

        :param committee_type_full: The committee_type_full of this TotalsCommittee.
        :type committee_type_full: str
        """
        if committee_type_full is not None and len(committee_type_full) > 50:
            raise ValueError("Invalid value for `committee_type_full`, length must be less than or equal to `50`")

        self._committee_type_full = committee_type_full

    @property
    def cycle(self):
        """Gets the cycle of this TotalsCommittee.

         A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year. 

        :return: The cycle of this TotalsCommittee.
        :rtype: int
        """
        return self._cycle

    @cycle.setter
    def cycle(self, cycle):
        """Sets the cycle of this TotalsCommittee.

         A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year. 

        :param cycle: The cycle of this TotalsCommittee.
        :type cycle: int
        """
        if cycle is None:
            raise ValueError("Invalid value for `cycle`, must not be `None`")

        self._cycle = cycle

    @property
    def cycles(self):
        """Gets the cycles of this TotalsCommittee.

         A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year. 

        :return: The cycles of this TotalsCommittee.
        :rtype: List[int]
        """
        return self._cycles

    @cycles.setter
    def cycles(self, cycles):
        """Sets the cycles of this TotalsCommittee.

         A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year. 

        :param cycles: The cycles of this TotalsCommittee.
        :type cycles: List[int]
        """

        self._cycles = cycles

    @property
    def cycles_has_activity(self):
        """Gets the cycles_has_activity of this TotalsCommittee.

         A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1), and the committee has filling activity during the cycle 

        :return: The cycles_has_activity of this TotalsCommittee.
        :rtype: List[int]
        """
        return self._cycles_has_activity

    @cycles_has_activity.setter
    def cycles_has_activity(self, cycles_has_activity):
        """Sets the cycles_has_activity of this TotalsCommittee.

         A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1), and the committee has filling activity during the cycle 

        :param cycles_has_activity: The cycles_has_activity of this TotalsCommittee.
        :type cycles_has_activity: List[int]
        """

        self._cycles_has_activity = cycles_has_activity

    @property
    def cycles_has_financial(self):
        """Gets the cycles_has_financial of this TotalsCommittee.

         A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s), and the committee files the financial reports ('F3', 'F3X', 'F3P', 'F3L', 'F4', 'F5', 'F7', 'F13') during this cycle. 

        :return: The cycles_has_financial of this TotalsCommittee.
        :rtype: List[int]
        """
        return self._cycles_has_financial

    @cycles_has_financial.setter
    def cycles_has_financial(self, cycles_has_financial):
        """Sets the cycles_has_financial of this TotalsCommittee.

         A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s), and the committee files the financial reports ('F3', 'F3X', 'F3P', 'F3L', 'F4', 'F5', 'F7', 'F13') during this cycle. 

        :param cycles_has_financial: The cycles_has_financial of this TotalsCommittee.
        :type cycles_has_financial: List[int]
        """

        self._cycles_has_financial = cycles_has_financial

    @property
    def debts_owed_by_committee(self):
        """Gets the debts_owed_by_committee of this TotalsCommittee.


        :return: The debts_owed_by_committee of this TotalsCommittee.
        :rtype: float
        """
        return self._debts_owed_by_committee

    @debts_owed_by_committee.setter
    def debts_owed_by_committee(self, debts_owed_by_committee):
        """Sets the debts_owed_by_committee of this TotalsCommittee.


        :param debts_owed_by_committee: The debts_owed_by_committee of this TotalsCommittee.
        :type debts_owed_by_committee: float
        """

        self._debts_owed_by_committee = debts_owed_by_committee

    @property
    def designation(self):
        """Gets the designation of this TotalsCommittee.

        The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 

        :return: The designation of this TotalsCommittee.
        :rtype: str
        """
        return self._designation

    @designation.setter
    def designation(self, designation):
        """Sets the designation of this TotalsCommittee.

        The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 

        :param designation: The designation of this TotalsCommittee.
        :type designation: str
        """
        if designation is not None and len(designation) > 1:
            raise ValueError("Invalid value for `designation`, length must be less than or equal to `1`")

        self._designation = designation

    @property
    def designation_full(self):
        """Gets the designation_full of this TotalsCommittee.

        The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 

        :return: The designation_full of this TotalsCommittee.
        :rtype: str
        """
        return self._designation_full

    @designation_full.setter
    def designation_full(self, designation_full):
        """Sets the designation_full of this TotalsCommittee.

        The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 

        :param designation_full: The designation_full of this TotalsCommittee.
        :type designation_full: str
        """
        if designation_full is not None and len(designation_full) > 25:
            raise ValueError("Invalid value for `designation_full`, length must be less than or equal to `25`")

        self._designation_full = designation_full

    @property
    def disbursements(self):
        """Gets the disbursements of this TotalsCommittee.


        :return: The disbursements of this TotalsCommittee.
        :rtype: float
        """
        return self._disbursements

    @disbursements.setter
    def disbursements(self, disbursements):
        """Sets the disbursements of this TotalsCommittee.


        :param disbursements: The disbursements of this TotalsCommittee.
        :type disbursements: float
        """

        self._disbursements = disbursements

    @property
    def filing_frequency(self):
        """Gets the filing_frequency of this TotalsCommittee.

        The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 

        :return: The filing_frequency of this TotalsCommittee.
        :rtype: str
        """
        return self._filing_frequency

    @filing_frequency.setter
    def filing_frequency(self, filing_frequency):
        """Sets the filing_frequency of this TotalsCommittee.

        The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 

        :param filing_frequency: The filing_frequency of this TotalsCommittee.
        :type filing_frequency: str
        """
        if filing_frequency is not None and len(filing_frequency) > 1:
            raise ValueError("Invalid value for `filing_frequency`, length must be less than or equal to `1`")

        self._filing_frequency = filing_frequency

    @property
    def first_f1_date(self):
        """Gets the first_f1_date of this TotalsCommittee.

        The day the FEC received the committee's first Form 1

        :return: The first_f1_date of this TotalsCommittee.
        :rtype: date
        """
        return self._first_f1_date

    @first_f1_date.setter
    def first_f1_date(self, first_f1_date):
        """Sets the first_f1_date of this TotalsCommittee.

        The day the FEC received the committee's first Form 1

        :param first_f1_date: The first_f1_date of this TotalsCommittee.
        :type first_f1_date: date
        """

        self._first_f1_date = first_f1_date

    @property
    def first_file_date(self):
        """Gets the first_file_date of this TotalsCommittee.

        The day the FEC received the committee's first filing. This is usually a Form 1 committee registration.

        :return: The first_file_date of this TotalsCommittee.
        :rtype: date
        """
        return self._first_file_date

    @first_file_date.setter
    def first_file_date(self, first_file_date):
        """Sets the first_file_date of this TotalsCommittee.

        The day the FEC received the committee's first filing. This is usually a Form 1 committee registration.

        :param first_file_date: The first_file_date of this TotalsCommittee.
        :type first_file_date: date
        """

        self._first_file_date = first_file_date

    @property
    def independent_expenditures(self):
        """Gets the independent_expenditures of this TotalsCommittee.


        :return: The independent_expenditures of this TotalsCommittee.
        :rtype: float
        """
        return self._independent_expenditures

    @independent_expenditures.setter
    def independent_expenditures(self, independent_expenditures):
        """Sets the independent_expenditures of this TotalsCommittee.


        :param independent_expenditures: The independent_expenditures of this TotalsCommittee.
        :type independent_expenditures: float
        """

        self._independent_expenditures = independent_expenditures

    @property
    def is_active(self):
        """Gets the is_active of this TotalsCommittee.

         True indicates that a committee is active. 

        :return: The is_active of this TotalsCommittee.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this TotalsCommittee.

         True indicates that a committee is active. 

        :param is_active: The is_active of this TotalsCommittee.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def jfc_committee(self):
        """Gets the jfc_committee of this TotalsCommittee.


        :return: The jfc_committee of this TotalsCommittee.
        :rtype: List[CommitteeDetailJfcCommitteeInner]
        """
        return self._jfc_committee

    @jfc_committee.setter
    def jfc_committee(self, jfc_committee):
        """Sets the jfc_committee of this TotalsCommittee.


        :param jfc_committee: The jfc_committee of this TotalsCommittee.
        :type jfc_committee: List[CommitteeDetailJfcCommitteeInner]
        """

        self._jfc_committee = jfc_committee

    @property
    def last_cycle_has_activity(self):
        """Gets the last_cycle_has_activity of this TotalsCommittee.

         The latest two year election cycle that the committee has filings 

        :return: The last_cycle_has_activity of this TotalsCommittee.
        :rtype: int
        """
        return self._last_cycle_has_activity

    @last_cycle_has_activity.setter
    def last_cycle_has_activity(self, last_cycle_has_activity):
        """Sets the last_cycle_has_activity of this TotalsCommittee.

         The latest two year election cycle that the committee has filings 

        :param last_cycle_has_activity: The last_cycle_has_activity of this TotalsCommittee.
        :type last_cycle_has_activity: int
        """

        self._last_cycle_has_activity = last_cycle_has_activity

    @property
    def last_cycle_has_financial(self):
        """Gets the last_cycle_has_financial of this TotalsCommittee.

         The latest two year election cycle that the committee files the financial reports ('F3', 'F3X', 'F3P', 'F3L', 'F4', 'F5', 'F7', 'F13'). 

        :return: The last_cycle_has_financial of this TotalsCommittee.
        :rtype: int
        """
        return self._last_cycle_has_financial

    @last_cycle_has_financial.setter
    def last_cycle_has_financial(self, last_cycle_has_financial):
        """Sets the last_cycle_has_financial of this TotalsCommittee.

         The latest two year election cycle that the committee files the financial reports ('F3', 'F3X', 'F3P', 'F3L', 'F4', 'F5', 'F7', 'F13'). 

        :param last_cycle_has_financial: The last_cycle_has_financial of this TotalsCommittee.
        :type last_cycle_has_financial: int
        """

        self._last_cycle_has_financial = last_cycle_has_financial

    @property
    def last_f1_date(self):
        """Gets the last_f1_date of this TotalsCommittee.

        The day the FEC received the committee's most recent Form 1

        :return: The last_f1_date of this TotalsCommittee.
        :rtype: date
        """
        return self._last_f1_date

    @last_f1_date.setter
    def last_f1_date(self, last_f1_date):
        """Sets the last_f1_date of this TotalsCommittee.

        The day the FEC received the committee's most recent Form 1

        :param last_f1_date: The last_f1_date of this TotalsCommittee.
        :type last_f1_date: date
        """

        self._last_f1_date = last_f1_date

    @property
    def last_file_date(self):
        """Gets the last_file_date of this TotalsCommittee.

        The day the FEC received the committee's most recent filing

        :return: The last_file_date of this TotalsCommittee.
        :rtype: date
        """
        return self._last_file_date

    @last_file_date.setter
    def last_file_date(self, last_file_date):
        """Sets the last_file_date of this TotalsCommittee.

        The day the FEC received the committee's most recent filing

        :param last_file_date: The last_file_date of this TotalsCommittee.
        :type last_file_date: date
        """

        self._last_file_date = last_file_date

    @property
    def name(self):
        """Gets the name of this TotalsCommittee.

        The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.

        :return: The name of this TotalsCommittee.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TotalsCommittee.

        The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.

        :param name: The name of this TotalsCommittee.
        :type name: str
        """
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")

        self._name = name

    @property
    def organization_type(self):
        """Gets the organization_type of this TotalsCommittee.

        The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 

        :return: The organization_type of this TotalsCommittee.
        :rtype: str
        """
        return self._organization_type

    @organization_type.setter
    def organization_type(self, organization_type):
        """Sets the organization_type of this TotalsCommittee.

        The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 

        :param organization_type: The organization_type of this TotalsCommittee.
        :type organization_type: str
        """
        if organization_type is not None and len(organization_type) > 1:
            raise ValueError("Invalid value for `organization_type`, length must be less than or equal to `1`")

        self._organization_type = organization_type

    @property
    def organization_type_full(self):
        """Gets the organization_type_full of this TotalsCommittee.

        The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 

        :return: The organization_type_full of this TotalsCommittee.
        :rtype: str
        """
        return self._organization_type_full

    @organization_type_full.setter
    def organization_type_full(self, organization_type_full):
        """Sets the organization_type_full of this TotalsCommittee.

        The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 

        :param organization_type_full: The organization_type_full of this TotalsCommittee.
        :type organization_type_full: str
        """
        if organization_type_full is not None and len(organization_type_full) > 100:
            raise ValueError("Invalid value for `organization_type_full`, length must be less than or equal to `100`")

        self._organization_type_full = organization_type_full

    @property
    def party(self):
        """Gets the party of this TotalsCommittee.

        Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.

        :return: The party of this TotalsCommittee.
        :rtype: str
        """
        return self._party

    @party.setter
    def party(self, party):
        """Sets the party of this TotalsCommittee.

        Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.

        :param party: The party of this TotalsCommittee.
        :type party: str
        """
        if party is not None and len(party) > 3:
            raise ValueError("Invalid value for `party`, length must be less than or equal to `3`")

        self._party = party

    @property
    def party_full(self):
        """Gets the party_full of this TotalsCommittee.

        Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.

        :return: The party_full of this TotalsCommittee.
        :rtype: str
        """
        return self._party_full

    @party_full.setter
    def party_full(self, party_full):
        """Sets the party_full of this TotalsCommittee.

        Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.

        :param party_full: The party_full of this TotalsCommittee.
        :type party_full: str
        """
        if party_full is not None and len(party_full) > 50:
            raise ValueError("Invalid value for `party_full`, length must be less than or equal to `50`")

        self._party_full = party_full

    @property
    def receipts(self):
        """Gets the receipts of this TotalsCommittee.


        :return: The receipts of this TotalsCommittee.
        :rtype: float
        """
        return self._receipts

    @receipts.setter
    def receipts(self, receipts):
        """Sets the receipts of this TotalsCommittee.


        :param receipts: The receipts of this TotalsCommittee.
        :type receipts: float
        """

        self._receipts = receipts

    @property
    def state(self):
        """Gets the state of this TotalsCommittee.

         State of the committee's address as filed on the Form 1 

        :return: The state of this TotalsCommittee.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this TotalsCommittee.

         State of the committee's address as filed on the Form 1 

        :param state: The state of this TotalsCommittee.
        :type state: str
        """
        if state is not None and len(state) > 2:
            raise ValueError("Invalid value for `state`, length must be less than or equal to `2`")

        self._state = state

    @property
    def state_full(self):
        """Gets the state_full of this TotalsCommittee.

         State of committee as reported on the Form 1 

        :return: The state_full of this TotalsCommittee.
        :rtype: str
        """
        return self._state_full

    @state_full.setter
    def state_full(self, state_full):
        """Sets the state_full of this TotalsCommittee.

         State of committee as reported on the Form 1 

        :param state_full: The state_full of this TotalsCommittee.
        :type state_full: str
        """
        if state_full is not None and len(state_full) > 50:
            raise ValueError("Invalid value for `state_full`, length must be less than or equal to `50`")

        self._state_full = state_full

    @property
    def street_1(self):
        """Gets the street_1 of this TotalsCommittee.

         Street address of committee as reported on the Form 1 

        :return: The street_1 of this TotalsCommittee.
        :rtype: str
        """
        return self._street_1

    @street_1.setter
    def street_1(self, street_1):
        """Sets the street_1 of this TotalsCommittee.

         Street address of committee as reported on the Form 1 

        :param street_1: The street_1 of this TotalsCommittee.
        :type street_1: str
        """
        if street_1 is not None and len(street_1) > 50:
            raise ValueError("Invalid value for `street_1`, length must be less than or equal to `50`")

        self._street_1 = street_1

    @property
    def street_2(self):
        """Gets the street_2 of this TotalsCommittee.

         Second line of street address of committee as reported on the Form 1 

        :return: The street_2 of this TotalsCommittee.
        :rtype: str
        """
        return self._street_2

    @street_2.setter
    def street_2(self, street_2):
        """Sets the street_2 of this TotalsCommittee.

         Second line of street address of committee as reported on the Form 1 

        :param street_2: The street_2 of this TotalsCommittee.
        :type street_2: str
        """
        if street_2 is not None and len(street_2) > 50:
            raise ValueError("Invalid value for `street_2`, length must be less than or equal to `50`")

        self._street_2 = street_2

    @property
    def treasurer_name(self):
        """Gets the treasurer_name of this TotalsCommittee.

        Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.

        :return: The treasurer_name of this TotalsCommittee.
        :rtype: str
        """
        return self._treasurer_name

    @treasurer_name.setter
    def treasurer_name(self, treasurer_name):
        """Sets the treasurer_name of this TotalsCommittee.

        Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.

        :param treasurer_name: The treasurer_name of this TotalsCommittee.
        :type treasurer_name: str
        """
        if treasurer_name is not None and len(treasurer_name) > 100:
            raise ValueError("Invalid value for `treasurer_name`, length must be less than or equal to `100`")

        self._treasurer_name = treasurer_name

    @property
    def zip(self):
        """Gets the zip of this TotalsCommittee.

         Zip code of committee as reported on the Form 1 

        :return: The zip of this TotalsCommittee.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this TotalsCommittee.

         Zip code of committee as reported on the Form 1 

        :param zip: The zip of this TotalsCommittee.
        :type zip: str
        """
        if zip is not None and len(zip) > 9:
            raise ValueError("Invalid value for `zip`, length must be less than or equal to `9`")

        self._zip = zip
