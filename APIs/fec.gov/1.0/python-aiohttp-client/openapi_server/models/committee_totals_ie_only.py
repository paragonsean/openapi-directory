# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CommitteeTotalsIEOnly(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, committee_id: str=None, committee_state: str=None, contributions_ie_and_party_expenditures_made_percent: float=None, coverage_end_date: datetime=None, coverage_start_date: datetime=None, cycle: int=None, filing_frequency: str=None, filing_frequency_full: str=None, first_file_date: date=None, individual_contributions_percent: float=None, last_beginning_image_number: str=None, last_cash_on_hand_end_period: float=None, operating_expenditures_percent: float=None, party_and_other_committee_contributions_percent: float=None, pdf_url: str=None, report_form: str=None, total_independent_contributions: float=None, total_independent_expenditures: float=None, transaction_coverage_date: date=None):
        """CommitteeTotalsIEOnly - a model defined in OpenAPI

        :param committee_id: The committee_id of this CommitteeTotalsIEOnly.
        :param committee_state: The committee_state of this CommitteeTotalsIEOnly.
        :param contributions_ie_and_party_expenditures_made_percent: The contributions_ie_and_party_expenditures_made_percent of this CommitteeTotalsIEOnly.
        :param coverage_end_date: The coverage_end_date of this CommitteeTotalsIEOnly.
        :param coverage_start_date: The coverage_start_date of this CommitteeTotalsIEOnly.
        :param cycle: The cycle of this CommitteeTotalsIEOnly.
        :param filing_frequency: The filing_frequency of this CommitteeTotalsIEOnly.
        :param filing_frequency_full: The filing_frequency_full of this CommitteeTotalsIEOnly.
        :param first_file_date: The first_file_date of this CommitteeTotalsIEOnly.
        :param individual_contributions_percent: The individual_contributions_percent of this CommitteeTotalsIEOnly.
        :param last_beginning_image_number: The last_beginning_image_number of this CommitteeTotalsIEOnly.
        :param last_cash_on_hand_end_period: The last_cash_on_hand_end_period of this CommitteeTotalsIEOnly.
        :param operating_expenditures_percent: The operating_expenditures_percent of this CommitteeTotalsIEOnly.
        :param party_and_other_committee_contributions_percent: The party_and_other_committee_contributions_percent of this CommitteeTotalsIEOnly.
        :param pdf_url: The pdf_url of this CommitteeTotalsIEOnly.
        :param report_form: The report_form of this CommitteeTotalsIEOnly.
        :param total_independent_contributions: The total_independent_contributions of this CommitteeTotalsIEOnly.
        :param total_independent_expenditures: The total_independent_expenditures of this CommitteeTotalsIEOnly.
        :param transaction_coverage_date: The transaction_coverage_date of this CommitteeTotalsIEOnly.
        """
        self.openapi_types = {
            'committee_id': str,
            'committee_state': str,
            'contributions_ie_and_party_expenditures_made_percent': float,
            'coverage_end_date': datetime,
            'coverage_start_date': datetime,
            'cycle': int,
            'filing_frequency': str,
            'filing_frequency_full': str,
            'first_file_date': date,
            'individual_contributions_percent': float,
            'last_beginning_image_number': str,
            'last_cash_on_hand_end_period': float,
            'operating_expenditures_percent': float,
            'party_and_other_committee_contributions_percent': float,
            'pdf_url': str,
            'report_form': str,
            'total_independent_contributions': float,
            'total_independent_expenditures': float,
            'transaction_coverage_date': date
        }

        self.attribute_map = {
            'committee_id': 'committee_id',
            'committee_state': 'committee_state',
            'contributions_ie_and_party_expenditures_made_percent': 'contributions_ie_and_party_expenditures_made_percent',
            'coverage_end_date': 'coverage_end_date',
            'coverage_start_date': 'coverage_start_date',
            'cycle': 'cycle',
            'filing_frequency': 'filing_frequency',
            'filing_frequency_full': 'filing_frequency_full',
            'first_file_date': 'first_file_date',
            'individual_contributions_percent': 'individual_contributions_percent',
            'last_beginning_image_number': 'last_beginning_image_number',
            'last_cash_on_hand_end_period': 'last_cash_on_hand_end_period',
            'operating_expenditures_percent': 'operating_expenditures_percent',
            'party_and_other_committee_contributions_percent': 'party_and_other_committee_contributions_percent',
            'pdf_url': 'pdf_url',
            'report_form': 'report_form',
            'total_independent_contributions': 'total_independent_contributions',
            'total_independent_expenditures': 'total_independent_expenditures',
            'transaction_coverage_date': 'transaction_coverage_date'
        }

        self._committee_id = committee_id
        self._committee_state = committee_state
        self._contributions_ie_and_party_expenditures_made_percent = contributions_ie_and_party_expenditures_made_percent
        self._coverage_end_date = coverage_end_date
        self._coverage_start_date = coverage_start_date
        self._cycle = cycle
        self._filing_frequency = filing_frequency
        self._filing_frequency_full = filing_frequency_full
        self._first_file_date = first_file_date
        self._individual_contributions_percent = individual_contributions_percent
        self._last_beginning_image_number = last_beginning_image_number
        self._last_cash_on_hand_end_period = last_cash_on_hand_end_period
        self._operating_expenditures_percent = operating_expenditures_percent
        self._party_and_other_committee_contributions_percent = party_and_other_committee_contributions_percent
        self._pdf_url = pdf_url
        self._report_form = report_form
        self._total_independent_contributions = total_independent_contributions
        self._total_independent_expenditures = total_independent_expenditures
        self._transaction_coverage_date = transaction_coverage_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommitteeTotalsIEOnly':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommitteeTotalsIEOnly of this CommitteeTotalsIEOnly.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def committee_id(self):
        """Gets the committee_id of this CommitteeTotalsIEOnly.

         A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 

        :return: The committee_id of this CommitteeTotalsIEOnly.
        :rtype: str
        """
        return self._committee_id

    @committee_id.setter
    def committee_id(self, committee_id):
        """Sets the committee_id of this CommitteeTotalsIEOnly.

         A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 

        :param committee_id: The committee_id of this CommitteeTotalsIEOnly.
        :type committee_id: str
        """

        self._committee_id = committee_id

    @property
    def committee_state(self):
        """Gets the committee_state of this CommitteeTotalsIEOnly.

         State of the committee's address as filed on the Form 1 

        :return: The committee_state of this CommitteeTotalsIEOnly.
        :rtype: str
        """
        return self._committee_state

    @committee_state.setter
    def committee_state(self, committee_state):
        """Sets the committee_state of this CommitteeTotalsIEOnly.

         State of the committee's address as filed on the Form 1 

        :param committee_state: The committee_state of this CommitteeTotalsIEOnly.
        :type committee_state: str
        """
        if committee_state is not None and len(committee_state) > 2:
            raise ValueError("Invalid value for `committee_state`, length must be less than or equal to `2`")

        self._committee_state = committee_state

    @property
    def contributions_ie_and_party_expenditures_made_percent(self):
        """Gets the contributions_ie_and_party_expenditures_made_percent of this CommitteeTotalsIEOnly.


        :return: The contributions_ie_and_party_expenditures_made_percent of this CommitteeTotalsIEOnly.
        :rtype: float
        """
        return self._contributions_ie_and_party_expenditures_made_percent

    @contributions_ie_and_party_expenditures_made_percent.setter
    def contributions_ie_and_party_expenditures_made_percent(self, contributions_ie_and_party_expenditures_made_percent):
        """Sets the contributions_ie_and_party_expenditures_made_percent of this CommitteeTotalsIEOnly.


        :param contributions_ie_and_party_expenditures_made_percent: The contributions_ie_and_party_expenditures_made_percent of this CommitteeTotalsIEOnly.
        :type contributions_ie_and_party_expenditures_made_percent: float
        """

        self._contributions_ie_and_party_expenditures_made_percent = contributions_ie_and_party_expenditures_made_percent

    @property
    def coverage_end_date(self):
        """Gets the coverage_end_date of this CommitteeTotalsIEOnly.

        Ending date of the reporting period

        :return: The coverage_end_date of this CommitteeTotalsIEOnly.
        :rtype: datetime
        """
        return self._coverage_end_date

    @coverage_end_date.setter
    def coverage_end_date(self, coverage_end_date):
        """Sets the coverage_end_date of this CommitteeTotalsIEOnly.

        Ending date of the reporting period

        :param coverage_end_date: The coverage_end_date of this CommitteeTotalsIEOnly.
        :type coverage_end_date: datetime
        """

        self._coverage_end_date = coverage_end_date

    @property
    def coverage_start_date(self):
        """Gets the coverage_start_date of this CommitteeTotalsIEOnly.

        Beginning date of the reporting period

        :return: The coverage_start_date of this CommitteeTotalsIEOnly.
        :rtype: datetime
        """
        return self._coverage_start_date

    @coverage_start_date.setter
    def coverage_start_date(self, coverage_start_date):
        """Sets the coverage_start_date of this CommitteeTotalsIEOnly.

        Beginning date of the reporting period

        :param coverage_start_date: The coverage_start_date of this CommitteeTotalsIEOnly.
        :type coverage_start_date: datetime
        """

        self._coverage_start_date = coverage_start_date

    @property
    def cycle(self):
        """Gets the cycle of this CommitteeTotalsIEOnly.

         Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 

        :return: The cycle of this CommitteeTotalsIEOnly.
        :rtype: int
        """
        return self._cycle

    @cycle.setter
    def cycle(self, cycle):
        """Sets the cycle of this CommitteeTotalsIEOnly.

         Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 

        :param cycle: The cycle of this CommitteeTotalsIEOnly.
        :type cycle: int
        """

        self._cycle = cycle

    @property
    def filing_frequency(self):
        """Gets the filing_frequency of this CommitteeTotalsIEOnly.

        The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 

        :return: The filing_frequency of this CommitteeTotalsIEOnly.
        :rtype: str
        """
        return self._filing_frequency

    @filing_frequency.setter
    def filing_frequency(self, filing_frequency):
        """Sets the filing_frequency of this CommitteeTotalsIEOnly.

        The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 

        :param filing_frequency: The filing_frequency of this CommitteeTotalsIEOnly.
        :type filing_frequency: str
        """
        if filing_frequency is not None and len(filing_frequency) > 1:
            raise ValueError("Invalid value for `filing_frequency`, length must be less than or equal to `1`")

        self._filing_frequency = filing_frequency

    @property
    def filing_frequency_full(self):
        """Gets the filing_frequency_full of this CommitteeTotalsIEOnly.

        The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 

        :return: The filing_frequency_full of this CommitteeTotalsIEOnly.
        :rtype: str
        """
        return self._filing_frequency_full

    @filing_frequency_full.setter
    def filing_frequency_full(self, filing_frequency_full):
        """Sets the filing_frequency_full of this CommitteeTotalsIEOnly.

        The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 

        :param filing_frequency_full: The filing_frequency_full of this CommitteeTotalsIEOnly.
        :type filing_frequency_full: str
        """

        self._filing_frequency_full = filing_frequency_full

    @property
    def first_file_date(self):
        """Gets the first_file_date of this CommitteeTotalsIEOnly.

        The day the FEC received the committee's first filing. This is usually a Form 1 committee registration.

        :return: The first_file_date of this CommitteeTotalsIEOnly.
        :rtype: date
        """
        return self._first_file_date

    @first_file_date.setter
    def first_file_date(self, first_file_date):
        """Sets the first_file_date of this CommitteeTotalsIEOnly.

        The day the FEC received the committee's first filing. This is usually a Form 1 committee registration.

        :param first_file_date: The first_file_date of this CommitteeTotalsIEOnly.
        :type first_file_date: date
        """

        self._first_file_date = first_file_date

    @property
    def individual_contributions_percent(self):
        """Gets the individual_contributions_percent of this CommitteeTotalsIEOnly.


        :return: The individual_contributions_percent of this CommitteeTotalsIEOnly.
        :rtype: float
        """
        return self._individual_contributions_percent

    @individual_contributions_percent.setter
    def individual_contributions_percent(self, individual_contributions_percent):
        """Sets the individual_contributions_percent of this CommitteeTotalsIEOnly.


        :param individual_contributions_percent: The individual_contributions_percent of this CommitteeTotalsIEOnly.
        :type individual_contributions_percent: float
        """

        self._individual_contributions_percent = individual_contributions_percent

    @property
    def last_beginning_image_number(self):
        """Gets the last_beginning_image_number of this CommitteeTotalsIEOnly.


        :return: The last_beginning_image_number of this CommitteeTotalsIEOnly.
        :rtype: str
        """
        return self._last_beginning_image_number

    @last_beginning_image_number.setter
    def last_beginning_image_number(self, last_beginning_image_number):
        """Sets the last_beginning_image_number of this CommitteeTotalsIEOnly.


        :param last_beginning_image_number: The last_beginning_image_number of this CommitteeTotalsIEOnly.
        :type last_beginning_image_number: str
        """

        self._last_beginning_image_number = last_beginning_image_number

    @property
    def last_cash_on_hand_end_period(self):
        """Gets the last_cash_on_hand_end_period of this CommitteeTotalsIEOnly.


        :return: The last_cash_on_hand_end_period of this CommitteeTotalsIEOnly.
        :rtype: float
        """
        return self._last_cash_on_hand_end_period

    @last_cash_on_hand_end_period.setter
    def last_cash_on_hand_end_period(self, last_cash_on_hand_end_period):
        """Sets the last_cash_on_hand_end_period of this CommitteeTotalsIEOnly.


        :param last_cash_on_hand_end_period: The last_cash_on_hand_end_period of this CommitteeTotalsIEOnly.
        :type last_cash_on_hand_end_period: float
        """

        self._last_cash_on_hand_end_period = last_cash_on_hand_end_period

    @property
    def operating_expenditures_percent(self):
        """Gets the operating_expenditures_percent of this CommitteeTotalsIEOnly.


        :return: The operating_expenditures_percent of this CommitteeTotalsIEOnly.
        :rtype: float
        """
        return self._operating_expenditures_percent

    @operating_expenditures_percent.setter
    def operating_expenditures_percent(self, operating_expenditures_percent):
        """Sets the operating_expenditures_percent of this CommitteeTotalsIEOnly.


        :param operating_expenditures_percent: The operating_expenditures_percent of this CommitteeTotalsIEOnly.
        :type operating_expenditures_percent: float
        """

        self._operating_expenditures_percent = operating_expenditures_percent

    @property
    def party_and_other_committee_contributions_percent(self):
        """Gets the party_and_other_committee_contributions_percent of this CommitteeTotalsIEOnly.


        :return: The party_and_other_committee_contributions_percent of this CommitteeTotalsIEOnly.
        :rtype: float
        """
        return self._party_and_other_committee_contributions_percent

    @party_and_other_committee_contributions_percent.setter
    def party_and_other_committee_contributions_percent(self, party_and_other_committee_contributions_percent):
        """Sets the party_and_other_committee_contributions_percent of this CommitteeTotalsIEOnly.


        :param party_and_other_committee_contributions_percent: The party_and_other_committee_contributions_percent of this CommitteeTotalsIEOnly.
        :type party_and_other_committee_contributions_percent: float
        """

        self._party_and_other_committee_contributions_percent = party_and_other_committee_contributions_percent

    @property
    def pdf_url(self):
        """Gets the pdf_url of this CommitteeTotalsIEOnly.


        :return: The pdf_url of this CommitteeTotalsIEOnly.
        :rtype: str
        """
        return self._pdf_url

    @pdf_url.setter
    def pdf_url(self, pdf_url):
        """Sets the pdf_url of this CommitteeTotalsIEOnly.


        :param pdf_url: The pdf_url of this CommitteeTotalsIEOnly.
        :type pdf_url: str
        """

        self._pdf_url = pdf_url

    @property
    def report_form(self):
        """Gets the report_form of this CommitteeTotalsIEOnly.


        :return: The report_form of this CommitteeTotalsIEOnly.
        :rtype: str
        """
        return self._report_form

    @report_form.setter
    def report_form(self, report_form):
        """Sets the report_form of this CommitteeTotalsIEOnly.


        :param report_form: The report_form of this CommitteeTotalsIEOnly.
        :type report_form: str
        """

        self._report_form = report_form

    @property
    def total_independent_contributions(self):
        """Gets the total_independent_contributions of this CommitteeTotalsIEOnly.


        :return: The total_independent_contributions of this CommitteeTotalsIEOnly.
        :rtype: float
        """
        return self._total_independent_contributions

    @total_independent_contributions.setter
    def total_independent_contributions(self, total_independent_contributions):
        """Sets the total_independent_contributions of this CommitteeTotalsIEOnly.


        :param total_independent_contributions: The total_independent_contributions of this CommitteeTotalsIEOnly.
        :type total_independent_contributions: float
        """

        self._total_independent_contributions = total_independent_contributions

    @property
    def total_independent_expenditures(self):
        """Gets the total_independent_expenditures of this CommitteeTotalsIEOnly.


        :return: The total_independent_expenditures of this CommitteeTotalsIEOnly.
        :rtype: float
        """
        return self._total_independent_expenditures

    @total_independent_expenditures.setter
    def total_independent_expenditures(self, total_independent_expenditures):
        """Sets the total_independent_expenditures of this CommitteeTotalsIEOnly.


        :param total_independent_expenditures: The total_independent_expenditures of this CommitteeTotalsIEOnly.
        :type total_independent_expenditures: float
        """

        self._total_independent_expenditures = total_independent_expenditures

    @property
    def transaction_coverage_date(self):
        """Gets the transaction_coverage_date of this CommitteeTotalsIEOnly.


        :return: The transaction_coverage_date of this CommitteeTotalsIEOnly.
        :rtype: date
        """
        return self._transaction_coverage_date

    @transaction_coverage_date.setter
    def transaction_coverage_date(self, transaction_coverage_date):
        """Sets the transaction_coverage_date of this CommitteeTotalsIEOnly.


        :param transaction_coverage_date: The transaction_coverage_date of this CommitteeTotalsIEOnly.
        :type transaction_coverage_date: date
        """

        self._transaction_coverage_date = transaction_coverage_date
