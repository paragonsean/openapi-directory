# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EntityReceiptDisbursementTotals(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cumulative_candidate_disbursements: float=None, cumulative_candidate_receipts: float=None, cumulative_pac_disbursements: float=None, cumulative_pac_receipts: float=None, cumulative_party_disbursements: float=None, cumulative_party_receipts: float=None, cycle: int=None, end_date: date=None):
        """EntityReceiptDisbursementTotals - a model defined in OpenAPI

        :param cumulative_candidate_disbursements: The cumulative_candidate_disbursements of this EntityReceiptDisbursementTotals.
        :param cumulative_candidate_receipts: The cumulative_candidate_receipts of this EntityReceiptDisbursementTotals.
        :param cumulative_pac_disbursements: The cumulative_pac_disbursements of this EntityReceiptDisbursementTotals.
        :param cumulative_pac_receipts: The cumulative_pac_receipts of this EntityReceiptDisbursementTotals.
        :param cumulative_party_disbursements: The cumulative_party_disbursements of this EntityReceiptDisbursementTotals.
        :param cumulative_party_receipts: The cumulative_party_receipts of this EntityReceiptDisbursementTotals.
        :param cycle: The cycle of this EntityReceiptDisbursementTotals.
        :param end_date: The end_date of this EntityReceiptDisbursementTotals.
        """
        self.openapi_types = {
            'cumulative_candidate_disbursements': float,
            'cumulative_candidate_receipts': float,
            'cumulative_pac_disbursements': float,
            'cumulative_pac_receipts': float,
            'cumulative_party_disbursements': float,
            'cumulative_party_receipts': float,
            'cycle': int,
            'end_date': date
        }

        self.attribute_map = {
            'cumulative_candidate_disbursements': 'cumulative_candidate_disbursements',
            'cumulative_candidate_receipts': 'cumulative_candidate_receipts',
            'cumulative_pac_disbursements': 'cumulative_pac_disbursements',
            'cumulative_pac_receipts': 'cumulative_pac_receipts',
            'cumulative_party_disbursements': 'cumulative_party_disbursements',
            'cumulative_party_receipts': 'cumulative_party_receipts',
            'cycle': 'cycle',
            'end_date': 'end_date'
        }

        self._cumulative_candidate_disbursements = cumulative_candidate_disbursements
        self._cumulative_candidate_receipts = cumulative_candidate_receipts
        self._cumulative_pac_disbursements = cumulative_pac_disbursements
        self._cumulative_pac_receipts = cumulative_pac_receipts
        self._cumulative_party_disbursements = cumulative_party_disbursements
        self._cumulative_party_receipts = cumulative_party_receipts
        self._cycle = cycle
        self._end_date = end_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntityReceiptDisbursementTotals':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EntityReceiptDisbursementTotals of this EntityReceiptDisbursementTotals.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cumulative_candidate_disbursements(self):
        """Gets the cumulative_candidate_disbursements of this EntityReceiptDisbursementTotals.

        Cumulative candidate disbursements in a two year period, adjusted to avoid double counting.

        :return: The cumulative_candidate_disbursements of this EntityReceiptDisbursementTotals.
        :rtype: float
        """
        return self._cumulative_candidate_disbursements

    @cumulative_candidate_disbursements.setter
    def cumulative_candidate_disbursements(self, cumulative_candidate_disbursements):
        """Sets the cumulative_candidate_disbursements of this EntityReceiptDisbursementTotals.

        Cumulative candidate disbursements in a two year period, adjusted to avoid double counting.

        :param cumulative_candidate_disbursements: The cumulative_candidate_disbursements of this EntityReceiptDisbursementTotals.
        :type cumulative_candidate_disbursements: float
        """

        self._cumulative_candidate_disbursements = cumulative_candidate_disbursements

    @property
    def cumulative_candidate_receipts(self):
        """Gets the cumulative_candidate_receipts of this EntityReceiptDisbursementTotals.

        Cumulative candidate receipts in a two year period, adjusted to avoid double counting.

        :return: The cumulative_candidate_receipts of this EntityReceiptDisbursementTotals.
        :rtype: float
        """
        return self._cumulative_candidate_receipts

    @cumulative_candidate_receipts.setter
    def cumulative_candidate_receipts(self, cumulative_candidate_receipts):
        """Sets the cumulative_candidate_receipts of this EntityReceiptDisbursementTotals.

        Cumulative candidate receipts in a two year period, adjusted to avoid double counting.

        :param cumulative_candidate_receipts: The cumulative_candidate_receipts of this EntityReceiptDisbursementTotals.
        :type cumulative_candidate_receipts: float
        """

        self._cumulative_candidate_receipts = cumulative_candidate_receipts

    @property
    def cumulative_pac_disbursements(self):
        """Gets the cumulative_pac_disbursements of this EntityReceiptDisbursementTotals.

        Cumulative PAC disbursements in a two year period, adjusted to avoid double counting.

        :return: The cumulative_pac_disbursements of this EntityReceiptDisbursementTotals.
        :rtype: float
        """
        return self._cumulative_pac_disbursements

    @cumulative_pac_disbursements.setter
    def cumulative_pac_disbursements(self, cumulative_pac_disbursements):
        """Sets the cumulative_pac_disbursements of this EntityReceiptDisbursementTotals.

        Cumulative PAC disbursements in a two year period, adjusted to avoid double counting.

        :param cumulative_pac_disbursements: The cumulative_pac_disbursements of this EntityReceiptDisbursementTotals.
        :type cumulative_pac_disbursements: float
        """

        self._cumulative_pac_disbursements = cumulative_pac_disbursements

    @property
    def cumulative_pac_receipts(self):
        """Gets the cumulative_pac_receipts of this EntityReceiptDisbursementTotals.

        Cumulative PAC recipts in a two year period, adjusted to avoid double counting.

        :return: The cumulative_pac_receipts of this EntityReceiptDisbursementTotals.
        :rtype: float
        """
        return self._cumulative_pac_receipts

    @cumulative_pac_receipts.setter
    def cumulative_pac_receipts(self, cumulative_pac_receipts):
        """Sets the cumulative_pac_receipts of this EntityReceiptDisbursementTotals.

        Cumulative PAC recipts in a two year period, adjusted to avoid double counting.

        :param cumulative_pac_receipts: The cumulative_pac_receipts of this EntityReceiptDisbursementTotals.
        :type cumulative_pac_receipts: float
        """

        self._cumulative_pac_receipts = cumulative_pac_receipts

    @property
    def cumulative_party_disbursements(self):
        """Gets the cumulative_party_disbursements of this EntityReceiptDisbursementTotals.

        Cumulative party disbursements in a two year period, adjusted to avoid double counting.

        :return: The cumulative_party_disbursements of this EntityReceiptDisbursementTotals.
        :rtype: float
        """
        return self._cumulative_party_disbursements

    @cumulative_party_disbursements.setter
    def cumulative_party_disbursements(self, cumulative_party_disbursements):
        """Sets the cumulative_party_disbursements of this EntityReceiptDisbursementTotals.

        Cumulative party disbursements in a two year period, adjusted to avoid double counting.

        :param cumulative_party_disbursements: The cumulative_party_disbursements of this EntityReceiptDisbursementTotals.
        :type cumulative_party_disbursements: float
        """

        self._cumulative_party_disbursements = cumulative_party_disbursements

    @property
    def cumulative_party_receipts(self):
        """Gets the cumulative_party_receipts of this EntityReceiptDisbursementTotals.

        Cumulative party receipts in a two year period, adjusted to avoid double counting.

        :return: The cumulative_party_receipts of this EntityReceiptDisbursementTotals.
        :rtype: float
        """
        return self._cumulative_party_receipts

    @cumulative_party_receipts.setter
    def cumulative_party_receipts(self, cumulative_party_receipts):
        """Sets the cumulative_party_receipts of this EntityReceiptDisbursementTotals.

        Cumulative party receipts in a two year period, adjusted to avoid double counting.

        :param cumulative_party_receipts: The cumulative_party_receipts of this EntityReceiptDisbursementTotals.
        :type cumulative_party_receipts: float
        """

        self._cumulative_party_receipts = cumulative_party_receipts

    @property
    def cycle(self):
        """Gets the cycle of this EntityReceiptDisbursementTotals.

         Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 

        :return: The cycle of this EntityReceiptDisbursementTotals.
        :rtype: int
        """
        return self._cycle

    @cycle.setter
    def cycle(self, cycle):
        """Sets the cycle of this EntityReceiptDisbursementTotals.

         Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 

        :param cycle: The cycle of this EntityReceiptDisbursementTotals.
        :type cycle: int
        """

        self._cycle = cycle

    @property
    def end_date(self):
        """Gets the end_date of this EntityReceiptDisbursementTotals.


        :return: The end_date of this EntityReceiptDisbursementTotals.
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this EntityReceiptDisbursementTotals.


        :param end_date: The end_date of this EntityReceiptDisbursementTotals.
        :type end_date: date
        """

        self._end_date = end_date
