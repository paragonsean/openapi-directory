# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScheduleAByStateRecipientTotals(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, committee_type: str=None, committee_type_full: str=None, count: int=None, cycle: int=None, state: str=None, state_full: str=None, total: float=None):
        """ScheduleAByStateRecipientTotals - a model defined in OpenAPI

        :param committee_type: The committee_type of this ScheduleAByStateRecipientTotals.
        :param committee_type_full: The committee_type_full of this ScheduleAByStateRecipientTotals.
        :param count: The count of this ScheduleAByStateRecipientTotals.
        :param cycle: The cycle of this ScheduleAByStateRecipientTotals.
        :param state: The state of this ScheduleAByStateRecipientTotals.
        :param state_full: The state_full of this ScheduleAByStateRecipientTotals.
        :param total: The total of this ScheduleAByStateRecipientTotals.
        """
        self.openapi_types = {
            'committee_type': str,
            'committee_type_full': str,
            'count': int,
            'cycle': int,
            'state': str,
            'state_full': str,
            'total': float
        }

        self.attribute_map = {
            'committee_type': 'committee_type',
            'committee_type_full': 'committee_type_full',
            'count': 'count',
            'cycle': 'cycle',
            'state': 'state',
            'state_full': 'state_full',
            'total': 'total'
        }

        self._committee_type = committee_type
        self._committee_type_full = committee_type_full
        self._count = count
        self._cycle = cycle
        self._state = state
        self._state_full = state_full
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScheduleAByStateRecipientTotals':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScheduleAByStateRecipientTotals of this ScheduleAByStateRecipientTotals.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def committee_type(self):
        """Gets the committee_type of this ScheduleAByStateRecipientTotals.

        The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 

        :return: The committee_type of this ScheduleAByStateRecipientTotals.
        :rtype: str
        """
        return self._committee_type

    @committee_type.setter
    def committee_type(self, committee_type):
        """Sets the committee_type of this ScheduleAByStateRecipientTotals.

        The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 

        :param committee_type: The committee_type of this ScheduleAByStateRecipientTotals.
        :type committee_type: str
        """

        self._committee_type = committee_type

    @property
    def committee_type_full(self):
        """Gets the committee_type_full of this ScheduleAByStateRecipientTotals.

        The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 

        :return: The committee_type_full of this ScheduleAByStateRecipientTotals.
        :rtype: str
        """
        return self._committee_type_full

    @committee_type_full.setter
    def committee_type_full(self, committee_type_full):
        """Sets the committee_type_full of this ScheduleAByStateRecipientTotals.

        The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 

        :param committee_type_full: The committee_type_full of this ScheduleAByStateRecipientTotals.
        :type committee_type_full: str
        """

        self._committee_type_full = committee_type_full

    @property
    def count(self):
        """Gets the count of this ScheduleAByStateRecipientTotals.

        Number of records making up the total.

        :return: The count of this ScheduleAByStateRecipientTotals.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ScheduleAByStateRecipientTotals.

        Number of records making up the total.

        :param count: The count of this ScheduleAByStateRecipientTotals.
        :type count: int
        """

        self._count = count

    @property
    def cycle(self):
        """Gets the cycle of this ScheduleAByStateRecipientTotals.

         Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 

        :return: The cycle of this ScheduleAByStateRecipientTotals.
        :rtype: int
        """
        return self._cycle

    @cycle.setter
    def cycle(self, cycle):
        """Sets the cycle of this ScheduleAByStateRecipientTotals.

         Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 

        :param cycle: The cycle of this ScheduleAByStateRecipientTotals.
        :type cycle: int
        """

        self._cycle = cycle

    @property
    def state(self):
        """Gets the state of this ScheduleAByStateRecipientTotals.

        US state or territory

        :return: The state of this ScheduleAByStateRecipientTotals.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ScheduleAByStateRecipientTotals.

        US state or territory

        :param state: The state of this ScheduleAByStateRecipientTotals.
        :type state: str
        """

        self._state = state

    @property
    def state_full(self):
        """Gets the state_full of this ScheduleAByStateRecipientTotals.

        US state or territory

        :return: The state_full of this ScheduleAByStateRecipientTotals.
        :rtype: str
        """
        return self._state_full

    @state_full.setter
    def state_full(self, state_full):
        """Sets the state_full of this ScheduleAByStateRecipientTotals.

        US state or territory

        :param state_full: The state_full of this ScheduleAByStateRecipientTotals.
        :type state_full: str
        """

        self._state_full = state_full

    @property
    def total(self):
        """Gets the total of this ScheduleAByStateRecipientTotals.

        The calculated total.

        :return: The total of this ScheduleAByStateRecipientTotals.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ScheduleAByStateRecipientTotals.

        The calculated total.

        :param total: The total of this ScheduleAByStateRecipientTotals.
        :type total: float
        """

        self._total = total
