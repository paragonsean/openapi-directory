# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InauguralDonations(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, committee_id: str=None, contributor_name: str=None, cycle: float=None, total_donation: float=None):
        """InauguralDonations - a model defined in OpenAPI

        :param committee_id: The committee_id of this InauguralDonations.
        :param contributor_name: The contributor_name of this InauguralDonations.
        :param cycle: The cycle of this InauguralDonations.
        :param total_donation: The total_donation of this InauguralDonations.
        """
        self.openapi_types = {
            'committee_id': str,
            'contributor_name': str,
            'cycle': float,
            'total_donation': float
        }

        self.attribute_map = {
            'committee_id': 'committee_id',
            'contributor_name': 'contributor_name',
            'cycle': 'cycle',
            'total_donation': 'total_donation'
        }

        self._committee_id = committee_id
        self._contributor_name = contributor_name
        self._cycle = cycle
        self._total_donation = total_donation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InauguralDonations':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InauguralDonations of this InauguralDonations.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def committee_id(self):
        """Gets the committee_id of this InauguralDonations.

         A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 

        :return: The committee_id of this InauguralDonations.
        :rtype: str
        """
        return self._committee_id

    @committee_id.setter
    def committee_id(self, committee_id):
        """Sets the committee_id of this InauguralDonations.

         A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 

        :param committee_id: The committee_id of this InauguralDonations.
        :type committee_id: str
        """
        if committee_id is None:
            raise ValueError("Invalid value for `committee_id`, must not be `None`")

        self._committee_id = committee_id

    @property
    def contributor_name(self):
        """Gets the contributor_name of this InauguralDonations.

        Name of contributor

        :return: The contributor_name of this InauguralDonations.
        :rtype: str
        """
        return self._contributor_name

    @contributor_name.setter
    def contributor_name(self, contributor_name):
        """Sets the contributor_name of this InauguralDonations.

        Name of contributor

        :param contributor_name: The contributor_name of this InauguralDonations.
        :type contributor_name: str
        """
        if contributor_name is None:
            raise ValueError("Invalid value for `contributor_name`, must not be `None`")
        if contributor_name is not None and len(contributor_name) > 100:
            raise ValueError("Invalid value for `contributor_name`, length must be less than or equal to `100`")

        self._contributor_name = contributor_name

    @property
    def cycle(self):
        """Gets the cycle of this InauguralDonations.

         A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year. 

        :return: The cycle of this InauguralDonations.
        :rtype: float
        """
        return self._cycle

    @cycle.setter
    def cycle(self, cycle):
        """Sets the cycle of this InauguralDonations.

         A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year. 

        :param cycle: The cycle of this InauguralDonations.
        :type cycle: float
        """
        if cycle is None:
            raise ValueError("Invalid value for `cycle`, must not be `None`")

        self._cycle = cycle

    @property
    def total_donation(self):
        """Gets the total_donation of this InauguralDonations.


        :return: The total_donation of this InauguralDonations.
        :rtype: float
        """
        return self._total_donation

    @total_donation.setter
    def total_donation(self, total_donation):
        """Sets the total_donation of this InauguralDonations.


        :param total_donation: The total_donation of this InauguralDonations.
        :type total_donation: float
        """

        self._total_donation = total_donation
