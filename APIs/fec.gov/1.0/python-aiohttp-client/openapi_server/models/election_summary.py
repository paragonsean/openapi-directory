# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ElectionSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, disbursements: float=None, independent_expenditures: float=None, receipts: float=None):
        """ElectionSummary - a model defined in OpenAPI

        :param count: The count of this ElectionSummary.
        :param disbursements: The disbursements of this ElectionSummary.
        :param independent_expenditures: The independent_expenditures of this ElectionSummary.
        :param receipts: The receipts of this ElectionSummary.
        """
        self.openapi_types = {
            'count': int,
            'disbursements': float,
            'independent_expenditures': float,
            'receipts': float
        }

        self.attribute_map = {
            'count': 'count',
            'disbursements': 'disbursements',
            'independent_expenditures': 'independent_expenditures',
            'receipts': 'receipts'
        }

        self._count = count
        self._disbursements = disbursements
        self._independent_expenditures = independent_expenditures
        self._receipts = receipts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ElectionSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ElectionSummary of this ElectionSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this ElectionSummary.


        :return: The count of this ElectionSummary.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ElectionSummary.


        :param count: The count of this ElectionSummary.
        :type count: int
        """

        self._count = count

    @property
    def disbursements(self):
        """Gets the disbursements of this ElectionSummary.


        :return: The disbursements of this ElectionSummary.
        :rtype: float
        """
        return self._disbursements

    @disbursements.setter
    def disbursements(self, disbursements):
        """Sets the disbursements of this ElectionSummary.


        :param disbursements: The disbursements of this ElectionSummary.
        :type disbursements: float
        """

        self._disbursements = disbursements

    @property
    def independent_expenditures(self):
        """Gets the independent_expenditures of this ElectionSummary.


        :return: The independent_expenditures of this ElectionSummary.
        :rtype: float
        """
        return self._independent_expenditures

    @independent_expenditures.setter
    def independent_expenditures(self, independent_expenditures):
        """Sets the independent_expenditures of this ElectionSummary.


        :param independent_expenditures: The independent_expenditures of this ElectionSummary.
        :type independent_expenditures: float
        """

        self._independent_expenditures = independent_expenditures

    @property
    def receipts(self):
        """Gets the receipts of this ElectionSummary.


        :return: The receipts of this ElectionSummary.
        :rtype: float
        """
        return self._receipts

    @receipts.setter
    def receipts(self, receipts):
        """Sets the receipts of this ElectionSummary.


        :param receipts: The receipts of this ElectionSummary.
        :type receipts: float
        """

        self._receipts = receipts
