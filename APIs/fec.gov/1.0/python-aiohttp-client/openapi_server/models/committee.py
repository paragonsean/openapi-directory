# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.committee_sponsor_candidate_list_inner import CommitteeSponsorCandidateListInner
from openapi_server import util


class Committee(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, affiliated_committee_name: str=None, candidate_ids: List[str]=None, committee_id: str=None, committee_type: str=None, committee_type_full: str=None, cycles: List[int]=None, designation: str=None, designation_full: str=None, filing_frequency: str=None, first_f1_date: date=None, first_file_date: date=None, last_f1_date: date=None, last_file_date: date=None, name: str=None, organization_type: str=None, organization_type_full: str=None, party: str=None, party_full: str=None, sponsor_candidate_ids: List[str]=None, sponsor_candidate_list: List[CommitteeSponsorCandidateListInner]=None, state: str=None, treasurer_name: str=None):
        """Committee - a model defined in OpenAPI

        :param affiliated_committee_name: The affiliated_committee_name of this Committee.
        :param candidate_ids: The candidate_ids of this Committee.
        :param committee_id: The committee_id of this Committee.
        :param committee_type: The committee_type of this Committee.
        :param committee_type_full: The committee_type_full of this Committee.
        :param cycles: The cycles of this Committee.
        :param designation: The designation of this Committee.
        :param designation_full: The designation_full of this Committee.
        :param filing_frequency: The filing_frequency of this Committee.
        :param first_f1_date: The first_f1_date of this Committee.
        :param first_file_date: The first_file_date of this Committee.
        :param last_f1_date: The last_f1_date of this Committee.
        :param last_file_date: The last_file_date of this Committee.
        :param name: The name of this Committee.
        :param organization_type: The organization_type of this Committee.
        :param organization_type_full: The organization_type_full of this Committee.
        :param party: The party of this Committee.
        :param party_full: The party_full of this Committee.
        :param sponsor_candidate_ids: The sponsor_candidate_ids of this Committee.
        :param sponsor_candidate_list: The sponsor_candidate_list of this Committee.
        :param state: The state of this Committee.
        :param treasurer_name: The treasurer_name of this Committee.
        """
        self.openapi_types = {
            'affiliated_committee_name': str,
            'candidate_ids': List[str],
            'committee_id': str,
            'committee_type': str,
            'committee_type_full': str,
            'cycles': List[int],
            'designation': str,
            'designation_full': str,
            'filing_frequency': str,
            'first_f1_date': date,
            'first_file_date': date,
            'last_f1_date': date,
            'last_file_date': date,
            'name': str,
            'organization_type': str,
            'organization_type_full': str,
            'party': str,
            'party_full': str,
            'sponsor_candidate_ids': List[str],
            'sponsor_candidate_list': List[CommitteeSponsorCandidateListInner],
            'state': str,
            'treasurer_name': str
        }

        self.attribute_map = {
            'affiliated_committee_name': 'affiliated_committee_name',
            'candidate_ids': 'candidate_ids',
            'committee_id': 'committee_id',
            'committee_type': 'committee_type',
            'committee_type_full': 'committee_type_full',
            'cycles': 'cycles',
            'designation': 'designation',
            'designation_full': 'designation_full',
            'filing_frequency': 'filing_frequency',
            'first_f1_date': 'first_f1_date',
            'first_file_date': 'first_file_date',
            'last_f1_date': 'last_f1_date',
            'last_file_date': 'last_file_date',
            'name': 'name',
            'organization_type': 'organization_type',
            'organization_type_full': 'organization_type_full',
            'party': 'party',
            'party_full': 'party_full',
            'sponsor_candidate_ids': 'sponsor_candidate_ids',
            'sponsor_candidate_list': 'sponsor_candidate_list',
            'state': 'state',
            'treasurer_name': 'treasurer_name'
        }

        self._affiliated_committee_name = affiliated_committee_name
        self._candidate_ids = candidate_ids
        self._committee_id = committee_id
        self._committee_type = committee_type
        self._committee_type_full = committee_type_full
        self._cycles = cycles
        self._designation = designation
        self._designation_full = designation_full
        self._filing_frequency = filing_frequency
        self._first_f1_date = first_f1_date
        self._first_file_date = first_file_date
        self._last_f1_date = last_f1_date
        self._last_file_date = last_file_date
        self._name = name
        self._organization_type = organization_type
        self._organization_type_full = organization_type_full
        self._party = party
        self._party_full = party_full
        self._sponsor_candidate_ids = sponsor_candidate_ids
        self._sponsor_candidate_list = sponsor_candidate_list
        self._state = state
        self._treasurer_name = treasurer_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Committee':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Committee of this Committee.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def affiliated_committee_name(self):
        """Gets the affiliated_committee_name of this Committee.

         Affiliated committee or connected organization 

        :return: The affiliated_committee_name of this Committee.
        :rtype: str
        """
        return self._affiliated_committee_name

    @affiliated_committee_name.setter
    def affiliated_committee_name(self, affiliated_committee_name):
        """Sets the affiliated_committee_name of this Committee.

         Affiliated committee or connected organization 

        :param affiliated_committee_name: The affiliated_committee_name of this Committee.
        :type affiliated_committee_name: str
        """
        if affiliated_committee_name is not None and len(affiliated_committee_name) > 100:
            raise ValueError("Invalid value for `affiliated_committee_name`, length must be less than or equal to `100`")

        self._affiliated_committee_name = affiliated_committee_name

    @property
    def candidate_ids(self):
        """Gets the candidate_ids of this Committee.

         A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 

        :return: The candidate_ids of this Committee.
        :rtype: List[str]
        """
        return self._candidate_ids

    @candidate_ids.setter
    def candidate_ids(self, candidate_ids):
        """Sets the candidate_ids of this Committee.

         A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 

        :param candidate_ids: The candidate_ids of this Committee.
        :type candidate_ids: List[str]
        """

        self._candidate_ids = candidate_ids

    @property
    def committee_id(self):
        """Gets the committee_id of this Committee.

         A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 

        :return: The committee_id of this Committee.
        :rtype: str
        """
        return self._committee_id

    @committee_id.setter
    def committee_id(self, committee_id):
        """Sets the committee_id of this Committee.

         A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 

        :param committee_id: The committee_id of this Committee.
        :type committee_id: str
        """
        if committee_id is None:
            raise ValueError("Invalid value for `committee_id`, must not be `None`")

        self._committee_id = committee_id

    @property
    def committee_type(self):
        """Gets the committee_type of this Committee.

        The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 

        :return: The committee_type of this Committee.
        :rtype: str
        """
        return self._committee_type

    @committee_type.setter
    def committee_type(self, committee_type):
        """Sets the committee_type of this Committee.

        The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 

        :param committee_type: The committee_type of this Committee.
        :type committee_type: str
        """
        if committee_type is not None and len(committee_type) > 1:
            raise ValueError("Invalid value for `committee_type`, length must be less than or equal to `1`")

        self._committee_type = committee_type

    @property
    def committee_type_full(self):
        """Gets the committee_type_full of this Committee.

        The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 

        :return: The committee_type_full of this Committee.
        :rtype: str
        """
        return self._committee_type_full

    @committee_type_full.setter
    def committee_type_full(self, committee_type_full):
        """Sets the committee_type_full of this Committee.

        The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 

        :param committee_type_full: The committee_type_full of this Committee.
        :type committee_type_full: str
        """
        if committee_type_full is not None and len(committee_type_full) > 50:
            raise ValueError("Invalid value for `committee_type_full`, length must be less than or equal to `50`")

        self._committee_type_full = committee_type_full

    @property
    def cycles(self):
        """Gets the cycles of this Committee.

         A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year. 

        :return: The cycles of this Committee.
        :rtype: List[int]
        """
        return self._cycles

    @cycles.setter
    def cycles(self, cycles):
        """Sets the cycles of this Committee.

         A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year. 

        :param cycles: The cycles of this Committee.
        :type cycles: List[int]
        """

        self._cycles = cycles

    @property
    def designation(self):
        """Gets the designation of this Committee.

        The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 

        :return: The designation of this Committee.
        :rtype: str
        """
        return self._designation

    @designation.setter
    def designation(self, designation):
        """Sets the designation of this Committee.

        The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 

        :param designation: The designation of this Committee.
        :type designation: str
        """
        if designation is not None and len(designation) > 1:
            raise ValueError("Invalid value for `designation`, length must be less than or equal to `1`")

        self._designation = designation

    @property
    def designation_full(self):
        """Gets the designation_full of this Committee.

        The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 

        :return: The designation_full of this Committee.
        :rtype: str
        """
        return self._designation_full

    @designation_full.setter
    def designation_full(self, designation_full):
        """Sets the designation_full of this Committee.

        The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 

        :param designation_full: The designation_full of this Committee.
        :type designation_full: str
        """
        if designation_full is not None and len(designation_full) > 25:
            raise ValueError("Invalid value for `designation_full`, length must be less than or equal to `25`")

        self._designation_full = designation_full

    @property
    def filing_frequency(self):
        """Gets the filing_frequency of this Committee.

        The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 

        :return: The filing_frequency of this Committee.
        :rtype: str
        """
        return self._filing_frequency

    @filing_frequency.setter
    def filing_frequency(self, filing_frequency):
        """Sets the filing_frequency of this Committee.

        The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 

        :param filing_frequency: The filing_frequency of this Committee.
        :type filing_frequency: str
        """
        if filing_frequency is not None and len(filing_frequency) > 1:
            raise ValueError("Invalid value for `filing_frequency`, length must be less than or equal to `1`")

        self._filing_frequency = filing_frequency

    @property
    def first_f1_date(self):
        """Gets the first_f1_date of this Committee.

        The day the FEC received the committee's first Form 1

        :return: The first_f1_date of this Committee.
        :rtype: date
        """
        return self._first_f1_date

    @first_f1_date.setter
    def first_f1_date(self, first_f1_date):
        """Sets the first_f1_date of this Committee.

        The day the FEC received the committee's first Form 1

        :param first_f1_date: The first_f1_date of this Committee.
        :type first_f1_date: date
        """

        self._first_f1_date = first_f1_date

    @property
    def first_file_date(self):
        """Gets the first_file_date of this Committee.

        The day the FEC received the committee's first filing. This is usually a Form 1 committee registration.

        :return: The first_file_date of this Committee.
        :rtype: date
        """
        return self._first_file_date

    @first_file_date.setter
    def first_file_date(self, first_file_date):
        """Sets the first_file_date of this Committee.

        The day the FEC received the committee's first filing. This is usually a Form 1 committee registration.

        :param first_file_date: The first_file_date of this Committee.
        :type first_file_date: date
        """

        self._first_file_date = first_file_date

    @property
    def last_f1_date(self):
        """Gets the last_f1_date of this Committee.

        The day the FEC received the committee's most recent Form 1

        :return: The last_f1_date of this Committee.
        :rtype: date
        """
        return self._last_f1_date

    @last_f1_date.setter
    def last_f1_date(self, last_f1_date):
        """Sets the last_f1_date of this Committee.

        The day the FEC received the committee's most recent Form 1

        :param last_f1_date: The last_f1_date of this Committee.
        :type last_f1_date: date
        """

        self._last_f1_date = last_f1_date

    @property
    def last_file_date(self):
        """Gets the last_file_date of this Committee.

        The day the FEC received the committee's most recent filing

        :return: The last_file_date of this Committee.
        :rtype: date
        """
        return self._last_file_date

    @last_file_date.setter
    def last_file_date(self, last_file_date):
        """Sets the last_file_date of this Committee.

        The day the FEC received the committee's most recent filing

        :param last_file_date: The last_file_date of this Committee.
        :type last_file_date: date
        """

        self._last_file_date = last_file_date

    @property
    def name(self):
        """Gets the name of this Committee.

        The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.

        :return: The name of this Committee.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Committee.

        The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.

        :param name: The name of this Committee.
        :type name: str
        """
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")

        self._name = name

    @property
    def organization_type(self):
        """Gets the organization_type of this Committee.

        The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 

        :return: The organization_type of this Committee.
        :rtype: str
        """
        return self._organization_type

    @organization_type.setter
    def organization_type(self, organization_type):
        """Sets the organization_type of this Committee.

        The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 

        :param organization_type: The organization_type of this Committee.
        :type organization_type: str
        """
        if organization_type is not None and len(organization_type) > 1:
            raise ValueError("Invalid value for `organization_type`, length must be less than or equal to `1`")

        self._organization_type = organization_type

    @property
    def organization_type_full(self):
        """Gets the organization_type_full of this Committee.

        The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 

        :return: The organization_type_full of this Committee.
        :rtype: str
        """
        return self._organization_type_full

    @organization_type_full.setter
    def organization_type_full(self, organization_type_full):
        """Sets the organization_type_full of this Committee.

        The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 

        :param organization_type_full: The organization_type_full of this Committee.
        :type organization_type_full: str
        """
        if organization_type_full is not None and len(organization_type_full) > 100:
            raise ValueError("Invalid value for `organization_type_full`, length must be less than or equal to `100`")

        self._organization_type_full = organization_type_full

    @property
    def party(self):
        """Gets the party of this Committee.

        Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.

        :return: The party of this Committee.
        :rtype: str
        """
        return self._party

    @party.setter
    def party(self, party):
        """Sets the party of this Committee.

        Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.

        :param party: The party of this Committee.
        :type party: str
        """
        if party is not None and len(party) > 3:
            raise ValueError("Invalid value for `party`, length must be less than or equal to `3`")

        self._party = party

    @property
    def party_full(self):
        """Gets the party_full of this Committee.

        Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.

        :return: The party_full of this Committee.
        :rtype: str
        """
        return self._party_full

    @party_full.setter
    def party_full(self, party_full):
        """Sets the party_full of this Committee.

        Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.

        :param party_full: The party_full of this Committee.
        :type party_full: str
        """
        if party_full is not None and len(party_full) > 50:
            raise ValueError("Invalid value for `party_full`, length must be less than or equal to `50`")

        self._party_full = party_full

    @property
    def sponsor_candidate_ids(self):
        """Gets the sponsor_candidate_ids of this Committee.

         A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. This is a filter for Leadership PAC sponsor. 

        :return: The sponsor_candidate_ids of this Committee.
        :rtype: List[str]
        """
        return self._sponsor_candidate_ids

    @sponsor_candidate_ids.setter
    def sponsor_candidate_ids(self, sponsor_candidate_ids):
        """Sets the sponsor_candidate_ids of this Committee.

         A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. This is a filter for Leadership PAC sponsor. 

        :param sponsor_candidate_ids: The sponsor_candidate_ids of this Committee.
        :type sponsor_candidate_ids: List[str]
        """

        self._sponsor_candidate_ids = sponsor_candidate_ids

    @property
    def sponsor_candidate_list(self):
        """Gets the sponsor_candidate_list of this Committee.


        :return: The sponsor_candidate_list of this Committee.
        :rtype: List[CommitteeSponsorCandidateListInner]
        """
        return self._sponsor_candidate_list

    @sponsor_candidate_list.setter
    def sponsor_candidate_list(self, sponsor_candidate_list):
        """Sets the sponsor_candidate_list of this Committee.


        :param sponsor_candidate_list: The sponsor_candidate_list of this Committee.
        :type sponsor_candidate_list: List[CommitteeSponsorCandidateListInner]
        """

        self._sponsor_candidate_list = sponsor_candidate_list

    @property
    def state(self):
        """Gets the state of this Committee.

         State of the committee's address as filed on the Form 1 

        :return: The state of this Committee.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Committee.

         State of the committee's address as filed on the Form 1 

        :param state: The state of this Committee.
        :type state: str
        """
        if state is not None and len(state) > 2:
            raise ValueError("Invalid value for `state`, length must be less than or equal to `2`")

        self._state = state

    @property
    def treasurer_name(self):
        """Gets the treasurer_name of this Committee.

        Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.

        :return: The treasurer_name of this Committee.
        :rtype: str
        """
        return self._treasurer_name

    @treasurer_name.setter
    def treasurer_name(self, treasurer_name):
        """Sets the treasurer_name of this Committee.

        Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.

        :param treasurer_name: The treasurer_name of this Committee.
        :type treasurer_name: str
        """
        if treasurer_name is not None and len(treasurer_name) > 100:
            raise ValueError("Invalid value for `treasurer_name`, length must be less than or equal to `100`")

        self._treasurer_name = treasurer_name
