# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PresidentialCoverage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, candidate_id: str=None, coverage_end_date: datetime=None, election_year: int=None):
        """PresidentialCoverage - a model defined in OpenAPI

        :param candidate_id: The candidate_id of this PresidentialCoverage.
        :param coverage_end_date: The coverage_end_date of this PresidentialCoverage.
        :param election_year: The election_year of this PresidentialCoverage.
        """
        self.openapi_types = {
            'candidate_id': str,
            'coverage_end_date': datetime,
            'election_year': int
        }

        self.attribute_map = {
            'candidate_id': 'candidate_id',
            'coverage_end_date': 'coverage_end_date',
            'election_year': 'election_year'
        }

        self._candidate_id = candidate_id
        self._coverage_end_date = coverage_end_date
        self._election_year = election_year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PresidentialCoverage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PresidentialCoverage of this PresidentialCoverage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def candidate_id(self):
        """Gets the candidate_id of this PresidentialCoverage.

         A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence.   -P00000001    All candidates   -P00000002    Democrasts   -P00000003    Republicans 

        :return: The candidate_id of this PresidentialCoverage.
        :rtype: str
        """
        return self._candidate_id

    @candidate_id.setter
    def candidate_id(self, candidate_id):
        """Sets the candidate_id of this PresidentialCoverage.

         A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence.   -P00000001    All candidates   -P00000002    Democrasts   -P00000003    Republicans 

        :param candidate_id: The candidate_id of this PresidentialCoverage.
        :type candidate_id: str
        """

        self._candidate_id = candidate_id

    @property
    def coverage_end_date(self):
        """Gets the coverage_end_date of this PresidentialCoverage.

        Ending date of the reporting period

        :return: The coverage_end_date of this PresidentialCoverage.
        :rtype: datetime
        """
        return self._coverage_end_date

    @coverage_end_date.setter
    def coverage_end_date(self, coverage_end_date):
        """Sets the coverage_end_date of this PresidentialCoverage.

        Ending date of the reporting period

        :param coverage_end_date: The coverage_end_date of this PresidentialCoverage.
        :type coverage_end_date: datetime
        """

        self._coverage_end_date = coverage_end_date

    @property
    def election_year(self):
        """Gets the election_year of this PresidentialCoverage.

        Year of election

        :return: The election_year of this PresidentialCoverage.
        :rtype: int
        """
        return self._election_year

    @election_year.setter
    def election_year(self, election_year):
        """Sets the election_year of this PresidentialCoverage.

        Year of election

        :param election_year: The election_year of this PresidentialCoverage.
        :type election_year: int
        """

        self._election_year = election_year
