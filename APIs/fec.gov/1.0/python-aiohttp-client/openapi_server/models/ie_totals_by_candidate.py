# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IETotalsByCandidate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, candidate_id: str=None, cycle: int=None, support_oppose_indicator: str=None, total: float=None):
        """IETotalsByCandidate - a model defined in OpenAPI

        :param candidate_id: The candidate_id of this IETotalsByCandidate.
        :param cycle: The cycle of this IETotalsByCandidate.
        :param support_oppose_indicator: The support_oppose_indicator of this IETotalsByCandidate.
        :param total: The total of this IETotalsByCandidate.
        """
        self.openapi_types = {
            'candidate_id': str,
            'cycle': int,
            'support_oppose_indicator': str,
            'total': float
        }

        self.attribute_map = {
            'candidate_id': 'candidate_id',
            'cycle': 'cycle',
            'support_oppose_indicator': 'support_oppose_indicator',
            'total': 'total'
        }

        self._candidate_id = candidate_id
        self._cycle = cycle
        self._support_oppose_indicator = support_oppose_indicator
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IETotalsByCandidate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IETotalsByCandidate of this IETotalsByCandidate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def candidate_id(self):
        """Gets the candidate_id of this IETotalsByCandidate.


        :return: The candidate_id of this IETotalsByCandidate.
        :rtype: str
        """
        return self._candidate_id

    @candidate_id.setter
    def candidate_id(self, candidate_id):
        """Sets the candidate_id of this IETotalsByCandidate.


        :param candidate_id: The candidate_id of this IETotalsByCandidate.
        :type candidate_id: str
        """

        self._candidate_id = candidate_id

    @property
    def cycle(self):
        """Gets the cycle of this IETotalsByCandidate.


        :return: The cycle of this IETotalsByCandidate.
        :rtype: int
        """
        return self._cycle

    @cycle.setter
    def cycle(self, cycle):
        """Sets the cycle of this IETotalsByCandidate.


        :param cycle: The cycle of this IETotalsByCandidate.
        :type cycle: int
        """

        self._cycle = cycle

    @property
    def support_oppose_indicator(self):
        """Gets the support_oppose_indicator of this IETotalsByCandidate.


        :return: The support_oppose_indicator of this IETotalsByCandidate.
        :rtype: str
        """
        return self._support_oppose_indicator

    @support_oppose_indicator.setter
    def support_oppose_indicator(self, support_oppose_indicator):
        """Sets the support_oppose_indicator of this IETotalsByCandidate.


        :param support_oppose_indicator: The support_oppose_indicator of this IETotalsByCandidate.
        :type support_oppose_indicator: str
        """

        self._support_oppose_indicator = support_oppose_indicator

    @property
    def total(self):
        """Gets the total of this IETotalsByCandidate.


        :return: The total of this IETotalsByCandidate.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this IETotalsByCandidate.


        :param total: The total of this IETotalsByCandidate.
        :type total: float
        """

        self._total = total
