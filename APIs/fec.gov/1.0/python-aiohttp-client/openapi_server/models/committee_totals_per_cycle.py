# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CommitteeTotalsPerCycle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, candidate_contribution: float=None, cash_on_hand_beginning_period: float=None, committee_designation: str=None, committee_designation_full: str=None, committee_id: str=None, committee_name: str=None, committee_state: str=None, committee_type: str=None, committee_type_full: str=None, contribution_refunds: float=None, contributions: float=None, contributions_ie_and_party_expenditures_made_percent: float=None, coverage_end_date: datetime=None, coverage_start_date: datetime=None, cycle: int=None, disbursements: float=None, exempt_legal_accounting_disbursement: float=None, federal_funds: float=None, filing_frequency: str=None, filing_frequency_full: str=None, first_f1_date: date=None, first_file_date: date=None, fundraising_disbursements: float=None, individual_contributions: float=None, individual_contributions_percent: float=None, individual_itemized_contributions: float=None, individual_unitemized_contributions: float=None, last_beginning_image_number: str=None, last_cash_on_hand_end_period: float=None, last_debts_owed_by_committee: float=None, last_debts_owed_to_committee: float=None, last_report_type_full: str=None, last_report_year: int=None, loan_repayments_made: float=None, loans_received: float=None, loans_received_from_candidate: float=None, net_contributions: float=None, net_operating_expenditures: float=None, offsets_to_fundraising_expenditures: float=None, offsets_to_legal_accounting: float=None, offsets_to_operating_expenditures: float=None, operating_expenditures: float=None, operating_expenditures_percent: float=None, organization_type: str=None, organization_type_full: str=None, other_disbursements: float=None, other_loans_received: float=None, other_political_committee_contributions: float=None, other_receipts: float=None, party_and_other_committee_contributions_percent: float=None, party_full: str=None, pdf_url: str=None, political_party_committee_contributions: float=None, receipts: float=None, refunded_individual_contributions: float=None, refunded_other_political_committee_contributions: float=None, refunded_political_party_committee_contributions: float=None, repayments_loans_made_by_candidate: float=None, repayments_other_loans: float=None, report_form: str=None, total_offsets_to_operating_expenditures: float=None, transaction_coverage_date: date=None, transfers_from_affiliated_committee: float=None, transfers_to_other_authorized_committee: float=None, treasurer_name: str=None):
        """CommitteeTotalsPerCycle - a model defined in OpenAPI

        :param candidate_contribution: The candidate_contribution of this CommitteeTotalsPerCycle.
        :param cash_on_hand_beginning_period: The cash_on_hand_beginning_period of this CommitteeTotalsPerCycle.
        :param committee_designation: The committee_designation of this CommitteeTotalsPerCycle.
        :param committee_designation_full: The committee_designation_full of this CommitteeTotalsPerCycle.
        :param committee_id: The committee_id of this CommitteeTotalsPerCycle.
        :param committee_name: The committee_name of this CommitteeTotalsPerCycle.
        :param committee_state: The committee_state of this CommitteeTotalsPerCycle.
        :param committee_type: The committee_type of this CommitteeTotalsPerCycle.
        :param committee_type_full: The committee_type_full of this CommitteeTotalsPerCycle.
        :param contribution_refunds: The contribution_refunds of this CommitteeTotalsPerCycle.
        :param contributions: The contributions of this CommitteeTotalsPerCycle.
        :param contributions_ie_and_party_expenditures_made_percent: The contributions_ie_and_party_expenditures_made_percent of this CommitteeTotalsPerCycle.
        :param coverage_end_date: The coverage_end_date of this CommitteeTotalsPerCycle.
        :param coverage_start_date: The coverage_start_date of this CommitteeTotalsPerCycle.
        :param cycle: The cycle of this CommitteeTotalsPerCycle.
        :param disbursements: The disbursements of this CommitteeTotalsPerCycle.
        :param exempt_legal_accounting_disbursement: The exempt_legal_accounting_disbursement of this CommitteeTotalsPerCycle.
        :param federal_funds: The federal_funds of this CommitteeTotalsPerCycle.
        :param filing_frequency: The filing_frequency of this CommitteeTotalsPerCycle.
        :param filing_frequency_full: The filing_frequency_full of this CommitteeTotalsPerCycle.
        :param first_f1_date: The first_f1_date of this CommitteeTotalsPerCycle.
        :param first_file_date: The first_file_date of this CommitteeTotalsPerCycle.
        :param fundraising_disbursements: The fundraising_disbursements of this CommitteeTotalsPerCycle.
        :param individual_contributions: The individual_contributions of this CommitteeTotalsPerCycle.
        :param individual_contributions_percent: The individual_contributions_percent of this CommitteeTotalsPerCycle.
        :param individual_itemized_contributions: The individual_itemized_contributions of this CommitteeTotalsPerCycle.
        :param individual_unitemized_contributions: The individual_unitemized_contributions of this CommitteeTotalsPerCycle.
        :param last_beginning_image_number: The last_beginning_image_number of this CommitteeTotalsPerCycle.
        :param last_cash_on_hand_end_period: The last_cash_on_hand_end_period of this CommitteeTotalsPerCycle.
        :param last_debts_owed_by_committee: The last_debts_owed_by_committee of this CommitteeTotalsPerCycle.
        :param last_debts_owed_to_committee: The last_debts_owed_to_committee of this CommitteeTotalsPerCycle.
        :param last_report_type_full: The last_report_type_full of this CommitteeTotalsPerCycle.
        :param last_report_year: The last_report_year of this CommitteeTotalsPerCycle.
        :param loan_repayments_made: The loan_repayments_made of this CommitteeTotalsPerCycle.
        :param loans_received: The loans_received of this CommitteeTotalsPerCycle.
        :param loans_received_from_candidate: The loans_received_from_candidate of this CommitteeTotalsPerCycle.
        :param net_contributions: The net_contributions of this CommitteeTotalsPerCycle.
        :param net_operating_expenditures: The net_operating_expenditures of this CommitteeTotalsPerCycle.
        :param offsets_to_fundraising_expenditures: The offsets_to_fundraising_expenditures of this CommitteeTotalsPerCycle.
        :param offsets_to_legal_accounting: The offsets_to_legal_accounting of this CommitteeTotalsPerCycle.
        :param offsets_to_operating_expenditures: The offsets_to_operating_expenditures of this CommitteeTotalsPerCycle.
        :param operating_expenditures: The operating_expenditures of this CommitteeTotalsPerCycle.
        :param operating_expenditures_percent: The operating_expenditures_percent of this CommitteeTotalsPerCycle.
        :param organization_type: The organization_type of this CommitteeTotalsPerCycle.
        :param organization_type_full: The organization_type_full of this CommitteeTotalsPerCycle.
        :param other_disbursements: The other_disbursements of this CommitteeTotalsPerCycle.
        :param other_loans_received: The other_loans_received of this CommitteeTotalsPerCycle.
        :param other_political_committee_contributions: The other_political_committee_contributions of this CommitteeTotalsPerCycle.
        :param other_receipts: The other_receipts of this CommitteeTotalsPerCycle.
        :param party_and_other_committee_contributions_percent: The party_and_other_committee_contributions_percent of this CommitteeTotalsPerCycle.
        :param party_full: The party_full of this CommitteeTotalsPerCycle.
        :param pdf_url: The pdf_url of this CommitteeTotalsPerCycle.
        :param political_party_committee_contributions: The political_party_committee_contributions of this CommitteeTotalsPerCycle.
        :param receipts: The receipts of this CommitteeTotalsPerCycle.
        :param refunded_individual_contributions: The refunded_individual_contributions of this CommitteeTotalsPerCycle.
        :param refunded_other_political_committee_contributions: The refunded_other_political_committee_contributions of this CommitteeTotalsPerCycle.
        :param refunded_political_party_committee_contributions: The refunded_political_party_committee_contributions of this CommitteeTotalsPerCycle.
        :param repayments_loans_made_by_candidate: The repayments_loans_made_by_candidate of this CommitteeTotalsPerCycle.
        :param repayments_other_loans: The repayments_other_loans of this CommitteeTotalsPerCycle.
        :param report_form: The report_form of this CommitteeTotalsPerCycle.
        :param total_offsets_to_operating_expenditures: The total_offsets_to_operating_expenditures of this CommitteeTotalsPerCycle.
        :param transaction_coverage_date: The transaction_coverage_date of this CommitteeTotalsPerCycle.
        :param transfers_from_affiliated_committee: The transfers_from_affiliated_committee of this CommitteeTotalsPerCycle.
        :param transfers_to_other_authorized_committee: The transfers_to_other_authorized_committee of this CommitteeTotalsPerCycle.
        :param treasurer_name: The treasurer_name of this CommitteeTotalsPerCycle.
        """
        self.openapi_types = {
            'candidate_contribution': float,
            'cash_on_hand_beginning_period': float,
            'committee_designation': str,
            'committee_designation_full': str,
            'committee_id': str,
            'committee_name': str,
            'committee_state': str,
            'committee_type': str,
            'committee_type_full': str,
            'contribution_refunds': float,
            'contributions': float,
            'contributions_ie_and_party_expenditures_made_percent': float,
            'coverage_end_date': datetime,
            'coverage_start_date': datetime,
            'cycle': int,
            'disbursements': float,
            'exempt_legal_accounting_disbursement': float,
            'federal_funds': float,
            'filing_frequency': str,
            'filing_frequency_full': str,
            'first_f1_date': date,
            'first_file_date': date,
            'fundraising_disbursements': float,
            'individual_contributions': float,
            'individual_contributions_percent': float,
            'individual_itemized_contributions': float,
            'individual_unitemized_contributions': float,
            'last_beginning_image_number': str,
            'last_cash_on_hand_end_period': float,
            'last_debts_owed_by_committee': float,
            'last_debts_owed_to_committee': float,
            'last_report_type_full': str,
            'last_report_year': int,
            'loan_repayments_made': float,
            'loans_received': float,
            'loans_received_from_candidate': float,
            'net_contributions': float,
            'net_operating_expenditures': float,
            'offsets_to_fundraising_expenditures': float,
            'offsets_to_legal_accounting': float,
            'offsets_to_operating_expenditures': float,
            'operating_expenditures': float,
            'operating_expenditures_percent': float,
            'organization_type': str,
            'organization_type_full': str,
            'other_disbursements': float,
            'other_loans_received': float,
            'other_political_committee_contributions': float,
            'other_receipts': float,
            'party_and_other_committee_contributions_percent': float,
            'party_full': str,
            'pdf_url': str,
            'political_party_committee_contributions': float,
            'receipts': float,
            'refunded_individual_contributions': float,
            'refunded_other_political_committee_contributions': float,
            'refunded_political_party_committee_contributions': float,
            'repayments_loans_made_by_candidate': float,
            'repayments_other_loans': float,
            'report_form': str,
            'total_offsets_to_operating_expenditures': float,
            'transaction_coverage_date': date,
            'transfers_from_affiliated_committee': float,
            'transfers_to_other_authorized_committee': float,
            'treasurer_name': str
        }

        self.attribute_map = {
            'candidate_contribution': 'candidate_contribution',
            'cash_on_hand_beginning_period': 'cash_on_hand_beginning_period',
            'committee_designation': 'committee_designation',
            'committee_designation_full': 'committee_designation_full',
            'committee_id': 'committee_id',
            'committee_name': 'committee_name',
            'committee_state': 'committee_state',
            'committee_type': 'committee_type',
            'committee_type_full': 'committee_type_full',
            'contribution_refunds': 'contribution_refunds',
            'contributions': 'contributions',
            'contributions_ie_and_party_expenditures_made_percent': 'contributions_ie_and_party_expenditures_made_percent',
            'coverage_end_date': 'coverage_end_date',
            'coverage_start_date': 'coverage_start_date',
            'cycle': 'cycle',
            'disbursements': 'disbursements',
            'exempt_legal_accounting_disbursement': 'exempt_legal_accounting_disbursement',
            'federal_funds': 'federal_funds',
            'filing_frequency': 'filing_frequency',
            'filing_frequency_full': 'filing_frequency_full',
            'first_f1_date': 'first_f1_date',
            'first_file_date': 'first_file_date',
            'fundraising_disbursements': 'fundraising_disbursements',
            'individual_contributions': 'individual_contributions',
            'individual_contributions_percent': 'individual_contributions_percent',
            'individual_itemized_contributions': 'individual_itemized_contributions',
            'individual_unitemized_contributions': 'individual_unitemized_contributions',
            'last_beginning_image_number': 'last_beginning_image_number',
            'last_cash_on_hand_end_period': 'last_cash_on_hand_end_period',
            'last_debts_owed_by_committee': 'last_debts_owed_by_committee',
            'last_debts_owed_to_committee': 'last_debts_owed_to_committee',
            'last_report_type_full': 'last_report_type_full',
            'last_report_year': 'last_report_year',
            'loan_repayments_made': 'loan_repayments_made',
            'loans_received': 'loans_received',
            'loans_received_from_candidate': 'loans_received_from_candidate',
            'net_contributions': 'net_contributions',
            'net_operating_expenditures': 'net_operating_expenditures',
            'offsets_to_fundraising_expenditures': 'offsets_to_fundraising_expenditures',
            'offsets_to_legal_accounting': 'offsets_to_legal_accounting',
            'offsets_to_operating_expenditures': 'offsets_to_operating_expenditures',
            'operating_expenditures': 'operating_expenditures',
            'operating_expenditures_percent': 'operating_expenditures_percent',
            'organization_type': 'organization_type',
            'organization_type_full': 'organization_type_full',
            'other_disbursements': 'other_disbursements',
            'other_loans_received': 'other_loans_received',
            'other_political_committee_contributions': 'other_political_committee_contributions',
            'other_receipts': 'other_receipts',
            'party_and_other_committee_contributions_percent': 'party_and_other_committee_contributions_percent',
            'party_full': 'party_full',
            'pdf_url': 'pdf_url',
            'political_party_committee_contributions': 'political_party_committee_contributions',
            'receipts': 'receipts',
            'refunded_individual_contributions': 'refunded_individual_contributions',
            'refunded_other_political_committee_contributions': 'refunded_other_political_committee_contributions',
            'refunded_political_party_committee_contributions': 'refunded_political_party_committee_contributions',
            'repayments_loans_made_by_candidate': 'repayments_loans_made_by_candidate',
            'repayments_other_loans': 'repayments_other_loans',
            'report_form': 'report_form',
            'total_offsets_to_operating_expenditures': 'total_offsets_to_operating_expenditures',
            'transaction_coverage_date': 'transaction_coverage_date',
            'transfers_from_affiliated_committee': 'transfers_from_affiliated_committee',
            'transfers_to_other_authorized_committee': 'transfers_to_other_authorized_committee',
            'treasurer_name': 'treasurer_name'
        }

        self._candidate_contribution = candidate_contribution
        self._cash_on_hand_beginning_period = cash_on_hand_beginning_period
        self._committee_designation = committee_designation
        self._committee_designation_full = committee_designation_full
        self._committee_id = committee_id
        self._committee_name = committee_name
        self._committee_state = committee_state
        self._committee_type = committee_type
        self._committee_type_full = committee_type_full
        self._contribution_refunds = contribution_refunds
        self._contributions = contributions
        self._contributions_ie_and_party_expenditures_made_percent = contributions_ie_and_party_expenditures_made_percent
        self._coverage_end_date = coverage_end_date
        self._coverage_start_date = coverage_start_date
        self._cycle = cycle
        self._disbursements = disbursements
        self._exempt_legal_accounting_disbursement = exempt_legal_accounting_disbursement
        self._federal_funds = federal_funds
        self._filing_frequency = filing_frequency
        self._filing_frequency_full = filing_frequency_full
        self._first_f1_date = first_f1_date
        self._first_file_date = first_file_date
        self._fundraising_disbursements = fundraising_disbursements
        self._individual_contributions = individual_contributions
        self._individual_contributions_percent = individual_contributions_percent
        self._individual_itemized_contributions = individual_itemized_contributions
        self._individual_unitemized_contributions = individual_unitemized_contributions
        self._last_beginning_image_number = last_beginning_image_number
        self._last_cash_on_hand_end_period = last_cash_on_hand_end_period
        self._last_debts_owed_by_committee = last_debts_owed_by_committee
        self._last_debts_owed_to_committee = last_debts_owed_to_committee
        self._last_report_type_full = last_report_type_full
        self._last_report_year = last_report_year
        self._loan_repayments_made = loan_repayments_made
        self._loans_received = loans_received
        self._loans_received_from_candidate = loans_received_from_candidate
        self._net_contributions = net_contributions
        self._net_operating_expenditures = net_operating_expenditures
        self._offsets_to_fundraising_expenditures = offsets_to_fundraising_expenditures
        self._offsets_to_legal_accounting = offsets_to_legal_accounting
        self._offsets_to_operating_expenditures = offsets_to_operating_expenditures
        self._operating_expenditures = operating_expenditures
        self._operating_expenditures_percent = operating_expenditures_percent
        self._organization_type = organization_type
        self._organization_type_full = organization_type_full
        self._other_disbursements = other_disbursements
        self._other_loans_received = other_loans_received
        self._other_political_committee_contributions = other_political_committee_contributions
        self._other_receipts = other_receipts
        self._party_and_other_committee_contributions_percent = party_and_other_committee_contributions_percent
        self._party_full = party_full
        self._pdf_url = pdf_url
        self._political_party_committee_contributions = political_party_committee_contributions
        self._receipts = receipts
        self._refunded_individual_contributions = refunded_individual_contributions
        self._refunded_other_political_committee_contributions = refunded_other_political_committee_contributions
        self._refunded_political_party_committee_contributions = refunded_political_party_committee_contributions
        self._repayments_loans_made_by_candidate = repayments_loans_made_by_candidate
        self._repayments_other_loans = repayments_other_loans
        self._report_form = report_form
        self._total_offsets_to_operating_expenditures = total_offsets_to_operating_expenditures
        self._transaction_coverage_date = transaction_coverage_date
        self._transfers_from_affiliated_committee = transfers_from_affiliated_committee
        self._transfers_to_other_authorized_committee = transfers_to_other_authorized_committee
        self._treasurer_name = treasurer_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommitteeTotalsPerCycle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommitteeTotalsPerCycle of this CommitteeTotalsPerCycle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def candidate_contribution(self):
        """Gets the candidate_contribution of this CommitteeTotalsPerCycle.


        :return: The candidate_contribution of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._candidate_contribution

    @candidate_contribution.setter
    def candidate_contribution(self, candidate_contribution):
        """Sets the candidate_contribution of this CommitteeTotalsPerCycle.


        :param candidate_contribution: The candidate_contribution of this CommitteeTotalsPerCycle.
        :type candidate_contribution: float
        """

        self._candidate_contribution = candidate_contribution

    @property
    def cash_on_hand_beginning_period(self):
        """Gets the cash_on_hand_beginning_period of this CommitteeTotalsPerCycle.


        :return: The cash_on_hand_beginning_period of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._cash_on_hand_beginning_period

    @cash_on_hand_beginning_period.setter
    def cash_on_hand_beginning_period(self, cash_on_hand_beginning_period):
        """Sets the cash_on_hand_beginning_period of this CommitteeTotalsPerCycle.


        :param cash_on_hand_beginning_period: The cash_on_hand_beginning_period of this CommitteeTotalsPerCycle.
        :type cash_on_hand_beginning_period: float
        """

        self._cash_on_hand_beginning_period = cash_on_hand_beginning_period

    @property
    def committee_designation(self):
        """Gets the committee_designation of this CommitteeTotalsPerCycle.

        The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 

        :return: The committee_designation of this CommitteeTotalsPerCycle.
        :rtype: str
        """
        return self._committee_designation

    @committee_designation.setter
    def committee_designation(self, committee_designation):
        """Sets the committee_designation of this CommitteeTotalsPerCycle.

        The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 

        :param committee_designation: The committee_designation of this CommitteeTotalsPerCycle.
        :type committee_designation: str
        """

        self._committee_designation = committee_designation

    @property
    def committee_designation_full(self):
        """Gets the committee_designation_full of this CommitteeTotalsPerCycle.

        The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 

        :return: The committee_designation_full of this CommitteeTotalsPerCycle.
        :rtype: str
        """
        return self._committee_designation_full

    @committee_designation_full.setter
    def committee_designation_full(self, committee_designation_full):
        """Sets the committee_designation_full of this CommitteeTotalsPerCycle.

        The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 

        :param committee_designation_full: The committee_designation_full of this CommitteeTotalsPerCycle.
        :type committee_designation_full: str
        """

        self._committee_designation_full = committee_designation_full

    @property
    def committee_id(self):
        """Gets the committee_id of this CommitteeTotalsPerCycle.

         A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 

        :return: The committee_id of this CommitteeTotalsPerCycle.
        :rtype: str
        """
        return self._committee_id

    @committee_id.setter
    def committee_id(self, committee_id):
        """Sets the committee_id of this CommitteeTotalsPerCycle.

         A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 

        :param committee_id: The committee_id of this CommitteeTotalsPerCycle.
        :type committee_id: str
        """

        self._committee_id = committee_id

    @property
    def committee_name(self):
        """Gets the committee_name of this CommitteeTotalsPerCycle.

        The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.

        :return: The committee_name of this CommitteeTotalsPerCycle.
        :rtype: str
        """
        return self._committee_name

    @committee_name.setter
    def committee_name(self, committee_name):
        """Sets the committee_name of this CommitteeTotalsPerCycle.

        The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.

        :param committee_name: The committee_name of this CommitteeTotalsPerCycle.
        :type committee_name: str
        """

        self._committee_name = committee_name

    @property
    def committee_state(self):
        """Gets the committee_state of this CommitteeTotalsPerCycle.

         State of the committee's address as filed on the Form 1 

        :return: The committee_state of this CommitteeTotalsPerCycle.
        :rtype: str
        """
        return self._committee_state

    @committee_state.setter
    def committee_state(self, committee_state):
        """Sets the committee_state of this CommitteeTotalsPerCycle.

         State of the committee's address as filed on the Form 1 

        :param committee_state: The committee_state of this CommitteeTotalsPerCycle.
        :type committee_state: str
        """
        if committee_state is not None and len(committee_state) > 2:
            raise ValueError("Invalid value for `committee_state`, length must be less than or equal to `2`")

        self._committee_state = committee_state

    @property
    def committee_type(self):
        """Gets the committee_type of this CommitteeTotalsPerCycle.

        The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 

        :return: The committee_type of this CommitteeTotalsPerCycle.
        :rtype: str
        """
        return self._committee_type

    @committee_type.setter
    def committee_type(self, committee_type):
        """Sets the committee_type of this CommitteeTotalsPerCycle.

        The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 

        :param committee_type: The committee_type of this CommitteeTotalsPerCycle.
        :type committee_type: str
        """

        self._committee_type = committee_type

    @property
    def committee_type_full(self):
        """Gets the committee_type_full of this CommitteeTotalsPerCycle.

        The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 

        :return: The committee_type_full of this CommitteeTotalsPerCycle.
        :rtype: str
        """
        return self._committee_type_full

    @committee_type_full.setter
    def committee_type_full(self, committee_type_full):
        """Sets the committee_type_full of this CommitteeTotalsPerCycle.

        The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 

        :param committee_type_full: The committee_type_full of this CommitteeTotalsPerCycle.
        :type committee_type_full: str
        """

        self._committee_type_full = committee_type_full

    @property
    def contribution_refunds(self):
        """Gets the contribution_refunds of this CommitteeTotalsPerCycle.


        :return: The contribution_refunds of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._contribution_refunds

    @contribution_refunds.setter
    def contribution_refunds(self, contribution_refunds):
        """Sets the contribution_refunds of this CommitteeTotalsPerCycle.


        :param contribution_refunds: The contribution_refunds of this CommitteeTotalsPerCycle.
        :type contribution_refunds: float
        """

        self._contribution_refunds = contribution_refunds

    @property
    def contributions(self):
        """Gets the contributions of this CommitteeTotalsPerCycle.

        Contribution

        :return: The contributions of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._contributions

    @contributions.setter
    def contributions(self, contributions):
        """Sets the contributions of this CommitteeTotalsPerCycle.

        Contribution

        :param contributions: The contributions of this CommitteeTotalsPerCycle.
        :type contributions: float
        """

        self._contributions = contributions

    @property
    def contributions_ie_and_party_expenditures_made_percent(self):
        """Gets the contributions_ie_and_party_expenditures_made_percent of this CommitteeTotalsPerCycle.


        :return: The contributions_ie_and_party_expenditures_made_percent of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._contributions_ie_and_party_expenditures_made_percent

    @contributions_ie_and_party_expenditures_made_percent.setter
    def contributions_ie_and_party_expenditures_made_percent(self, contributions_ie_and_party_expenditures_made_percent):
        """Sets the contributions_ie_and_party_expenditures_made_percent of this CommitteeTotalsPerCycle.


        :param contributions_ie_and_party_expenditures_made_percent: The contributions_ie_and_party_expenditures_made_percent of this CommitteeTotalsPerCycle.
        :type contributions_ie_and_party_expenditures_made_percent: float
        """

        self._contributions_ie_and_party_expenditures_made_percent = contributions_ie_and_party_expenditures_made_percent

    @property
    def coverage_end_date(self):
        """Gets the coverage_end_date of this CommitteeTotalsPerCycle.


        :return: The coverage_end_date of this CommitteeTotalsPerCycle.
        :rtype: datetime
        """
        return self._coverage_end_date

    @coverage_end_date.setter
    def coverage_end_date(self, coverage_end_date):
        """Sets the coverage_end_date of this CommitteeTotalsPerCycle.


        :param coverage_end_date: The coverage_end_date of this CommitteeTotalsPerCycle.
        :type coverage_end_date: datetime
        """

        self._coverage_end_date = coverage_end_date

    @property
    def coverage_start_date(self):
        """Gets the coverage_start_date of this CommitteeTotalsPerCycle.


        :return: The coverage_start_date of this CommitteeTotalsPerCycle.
        :rtype: datetime
        """
        return self._coverage_start_date

    @coverage_start_date.setter
    def coverage_start_date(self, coverage_start_date):
        """Sets the coverage_start_date of this CommitteeTotalsPerCycle.


        :param coverage_start_date: The coverage_start_date of this CommitteeTotalsPerCycle.
        :type coverage_start_date: datetime
        """

        self._coverage_start_date = coverage_start_date

    @property
    def cycle(self):
        """Gets the cycle of this CommitteeTotalsPerCycle.

         Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 

        :return: The cycle of this CommitteeTotalsPerCycle.
        :rtype: int
        """
        return self._cycle

    @cycle.setter
    def cycle(self, cycle):
        """Sets the cycle of this CommitteeTotalsPerCycle.

         Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 

        :param cycle: The cycle of this CommitteeTotalsPerCycle.
        :type cycle: int
        """
        if cycle is None:
            raise ValueError("Invalid value for `cycle`, must not be `None`")

        self._cycle = cycle

    @property
    def disbursements(self):
        """Gets the disbursements of this CommitteeTotalsPerCycle.

        Disbursements

        :return: The disbursements of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._disbursements

    @disbursements.setter
    def disbursements(self, disbursements):
        """Sets the disbursements of this CommitteeTotalsPerCycle.

        Disbursements

        :param disbursements: The disbursements of this CommitteeTotalsPerCycle.
        :type disbursements: float
        """

        self._disbursements = disbursements

    @property
    def exempt_legal_accounting_disbursement(self):
        """Gets the exempt_legal_accounting_disbursement of this CommitteeTotalsPerCycle.


        :return: The exempt_legal_accounting_disbursement of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._exempt_legal_accounting_disbursement

    @exempt_legal_accounting_disbursement.setter
    def exempt_legal_accounting_disbursement(self, exempt_legal_accounting_disbursement):
        """Sets the exempt_legal_accounting_disbursement of this CommitteeTotalsPerCycle.


        :param exempt_legal_accounting_disbursement: The exempt_legal_accounting_disbursement of this CommitteeTotalsPerCycle.
        :type exempt_legal_accounting_disbursement: float
        """

        self._exempt_legal_accounting_disbursement = exempt_legal_accounting_disbursement

    @property
    def federal_funds(self):
        """Gets the federal_funds of this CommitteeTotalsPerCycle.


        :return: The federal_funds of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._federal_funds

    @federal_funds.setter
    def federal_funds(self, federal_funds):
        """Sets the federal_funds of this CommitteeTotalsPerCycle.


        :param federal_funds: The federal_funds of this CommitteeTotalsPerCycle.
        :type federal_funds: float
        """

        self._federal_funds = federal_funds

    @property
    def filing_frequency(self):
        """Gets the filing_frequency of this CommitteeTotalsPerCycle.

        The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 

        :return: The filing_frequency of this CommitteeTotalsPerCycle.
        :rtype: str
        """
        return self._filing_frequency

    @filing_frequency.setter
    def filing_frequency(self, filing_frequency):
        """Sets the filing_frequency of this CommitteeTotalsPerCycle.

        The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 

        :param filing_frequency: The filing_frequency of this CommitteeTotalsPerCycle.
        :type filing_frequency: str
        """
        if filing_frequency is not None and len(filing_frequency) > 1:
            raise ValueError("Invalid value for `filing_frequency`, length must be less than or equal to `1`")

        self._filing_frequency = filing_frequency

    @property
    def filing_frequency_full(self):
        """Gets the filing_frequency_full of this CommitteeTotalsPerCycle.

        The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 

        :return: The filing_frequency_full of this CommitteeTotalsPerCycle.
        :rtype: str
        """
        return self._filing_frequency_full

    @filing_frequency_full.setter
    def filing_frequency_full(self, filing_frequency_full):
        """Sets the filing_frequency_full of this CommitteeTotalsPerCycle.

        The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 

        :param filing_frequency_full: The filing_frequency_full of this CommitteeTotalsPerCycle.
        :type filing_frequency_full: str
        """

        self._filing_frequency_full = filing_frequency_full

    @property
    def first_f1_date(self):
        """Gets the first_f1_date of this CommitteeTotalsPerCycle.

        The day the FEC received the committee's first Form 1

        :return: The first_f1_date of this CommitteeTotalsPerCycle.
        :rtype: date
        """
        return self._first_f1_date

    @first_f1_date.setter
    def first_f1_date(self, first_f1_date):
        """Sets the first_f1_date of this CommitteeTotalsPerCycle.

        The day the FEC received the committee's first Form 1

        :param first_f1_date: The first_f1_date of this CommitteeTotalsPerCycle.
        :type first_f1_date: date
        """

        self._first_f1_date = first_f1_date

    @property
    def first_file_date(self):
        """Gets the first_file_date of this CommitteeTotalsPerCycle.

        The day the FEC received the committee's first filing. This is usually a Form 1 committee registration.

        :return: The first_file_date of this CommitteeTotalsPerCycle.
        :rtype: date
        """
        return self._first_file_date

    @first_file_date.setter
    def first_file_date(self, first_file_date):
        """Sets the first_file_date of this CommitteeTotalsPerCycle.

        The day the FEC received the committee's first filing. This is usually a Form 1 committee registration.

        :param first_file_date: The first_file_date of this CommitteeTotalsPerCycle.
        :type first_file_date: date
        """

        self._first_file_date = first_file_date

    @property
    def fundraising_disbursements(self):
        """Gets the fundraising_disbursements of this CommitteeTotalsPerCycle.


        :return: The fundraising_disbursements of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._fundraising_disbursements

    @fundraising_disbursements.setter
    def fundraising_disbursements(self, fundraising_disbursements):
        """Sets the fundraising_disbursements of this CommitteeTotalsPerCycle.


        :param fundraising_disbursements: The fundraising_disbursements of this CommitteeTotalsPerCycle.
        :type fundraising_disbursements: float
        """

        self._fundraising_disbursements = fundraising_disbursements

    @property
    def individual_contributions(self):
        """Gets the individual_contributions of this CommitteeTotalsPerCycle.


        :return: The individual_contributions of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._individual_contributions

    @individual_contributions.setter
    def individual_contributions(self, individual_contributions):
        """Sets the individual_contributions of this CommitteeTotalsPerCycle.


        :param individual_contributions: The individual_contributions of this CommitteeTotalsPerCycle.
        :type individual_contributions: float
        """

        self._individual_contributions = individual_contributions

    @property
    def individual_contributions_percent(self):
        """Gets the individual_contributions_percent of this CommitteeTotalsPerCycle.


        :return: The individual_contributions_percent of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._individual_contributions_percent

    @individual_contributions_percent.setter
    def individual_contributions_percent(self, individual_contributions_percent):
        """Sets the individual_contributions_percent of this CommitteeTotalsPerCycle.


        :param individual_contributions_percent: The individual_contributions_percent of this CommitteeTotalsPerCycle.
        :type individual_contributions_percent: float
        """

        self._individual_contributions_percent = individual_contributions_percent

    @property
    def individual_itemized_contributions(self):
        """Gets the individual_itemized_contributions of this CommitteeTotalsPerCycle.

        Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less.

        :return: The individual_itemized_contributions of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._individual_itemized_contributions

    @individual_itemized_contributions.setter
    def individual_itemized_contributions(self, individual_itemized_contributions):
        """Sets the individual_itemized_contributions of this CommitteeTotalsPerCycle.

        Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less.

        :param individual_itemized_contributions: The individual_itemized_contributions of this CommitteeTotalsPerCycle.
        :type individual_itemized_contributions: float
        """

        self._individual_itemized_contributions = individual_itemized_contributions

    @property
    def individual_unitemized_contributions(self):
        """Gets the individual_unitemized_contributions of this CommitteeTotalsPerCycle.

        Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total.

        :return: The individual_unitemized_contributions of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._individual_unitemized_contributions

    @individual_unitemized_contributions.setter
    def individual_unitemized_contributions(self, individual_unitemized_contributions):
        """Sets the individual_unitemized_contributions of this CommitteeTotalsPerCycle.

        Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total.

        :param individual_unitemized_contributions: The individual_unitemized_contributions of this CommitteeTotalsPerCycle.
        :type individual_unitemized_contributions: float
        """

        self._individual_unitemized_contributions = individual_unitemized_contributions

    @property
    def last_beginning_image_number(self):
        """Gets the last_beginning_image_number of this CommitteeTotalsPerCycle.


        :return: The last_beginning_image_number of this CommitteeTotalsPerCycle.
        :rtype: str
        """
        return self._last_beginning_image_number

    @last_beginning_image_number.setter
    def last_beginning_image_number(self, last_beginning_image_number):
        """Sets the last_beginning_image_number of this CommitteeTotalsPerCycle.


        :param last_beginning_image_number: The last_beginning_image_number of this CommitteeTotalsPerCycle.
        :type last_beginning_image_number: str
        """

        self._last_beginning_image_number = last_beginning_image_number

    @property
    def last_cash_on_hand_end_period(self):
        """Gets the last_cash_on_hand_end_period of this CommitteeTotalsPerCycle.


        :return: The last_cash_on_hand_end_period of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._last_cash_on_hand_end_period

    @last_cash_on_hand_end_period.setter
    def last_cash_on_hand_end_period(self, last_cash_on_hand_end_period):
        """Sets the last_cash_on_hand_end_period of this CommitteeTotalsPerCycle.


        :param last_cash_on_hand_end_period: The last_cash_on_hand_end_period of this CommitteeTotalsPerCycle.
        :type last_cash_on_hand_end_period: float
        """

        self._last_cash_on_hand_end_period = last_cash_on_hand_end_period

    @property
    def last_debts_owed_by_committee(self):
        """Gets the last_debts_owed_by_committee of this CommitteeTotalsPerCycle.


        :return: The last_debts_owed_by_committee of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._last_debts_owed_by_committee

    @last_debts_owed_by_committee.setter
    def last_debts_owed_by_committee(self, last_debts_owed_by_committee):
        """Sets the last_debts_owed_by_committee of this CommitteeTotalsPerCycle.


        :param last_debts_owed_by_committee: The last_debts_owed_by_committee of this CommitteeTotalsPerCycle.
        :type last_debts_owed_by_committee: float
        """

        self._last_debts_owed_by_committee = last_debts_owed_by_committee

    @property
    def last_debts_owed_to_committee(self):
        """Gets the last_debts_owed_to_committee of this CommitteeTotalsPerCycle.


        :return: The last_debts_owed_to_committee of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._last_debts_owed_to_committee

    @last_debts_owed_to_committee.setter
    def last_debts_owed_to_committee(self, last_debts_owed_to_committee):
        """Sets the last_debts_owed_to_committee of this CommitteeTotalsPerCycle.


        :param last_debts_owed_to_committee: The last_debts_owed_to_committee of this CommitteeTotalsPerCycle.
        :type last_debts_owed_to_committee: float
        """

        self._last_debts_owed_to_committee = last_debts_owed_to_committee

    @property
    def last_report_type_full(self):
        """Gets the last_report_type_full of this CommitteeTotalsPerCycle.


        :return: The last_report_type_full of this CommitteeTotalsPerCycle.
        :rtype: str
        """
        return self._last_report_type_full

    @last_report_type_full.setter
    def last_report_type_full(self, last_report_type_full):
        """Sets the last_report_type_full of this CommitteeTotalsPerCycle.


        :param last_report_type_full: The last_report_type_full of this CommitteeTotalsPerCycle.
        :type last_report_type_full: str
        """

        self._last_report_type_full = last_report_type_full

    @property
    def last_report_year(self):
        """Gets the last_report_year of this CommitteeTotalsPerCycle.


        :return: The last_report_year of this CommitteeTotalsPerCycle.
        :rtype: int
        """
        return self._last_report_year

    @last_report_year.setter
    def last_report_year(self, last_report_year):
        """Sets the last_report_year of this CommitteeTotalsPerCycle.


        :param last_report_year: The last_report_year of this CommitteeTotalsPerCycle.
        :type last_report_year: int
        """

        self._last_report_year = last_report_year

    @property
    def loan_repayments_made(self):
        """Gets the loan_repayments_made of this CommitteeTotalsPerCycle.


        :return: The loan_repayments_made of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._loan_repayments_made

    @loan_repayments_made.setter
    def loan_repayments_made(self, loan_repayments_made):
        """Sets the loan_repayments_made of this CommitteeTotalsPerCycle.


        :param loan_repayments_made: The loan_repayments_made of this CommitteeTotalsPerCycle.
        :type loan_repayments_made: float
        """

        self._loan_repayments_made = loan_repayments_made

    @property
    def loans_received(self):
        """Gets the loans_received of this CommitteeTotalsPerCycle.


        :return: The loans_received of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._loans_received

    @loans_received.setter
    def loans_received(self, loans_received):
        """Sets the loans_received of this CommitteeTotalsPerCycle.


        :param loans_received: The loans_received of this CommitteeTotalsPerCycle.
        :type loans_received: float
        """

        self._loans_received = loans_received

    @property
    def loans_received_from_candidate(self):
        """Gets the loans_received_from_candidate of this CommitteeTotalsPerCycle.


        :return: The loans_received_from_candidate of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._loans_received_from_candidate

    @loans_received_from_candidate.setter
    def loans_received_from_candidate(self, loans_received_from_candidate):
        """Sets the loans_received_from_candidate of this CommitteeTotalsPerCycle.


        :param loans_received_from_candidate: The loans_received_from_candidate of this CommitteeTotalsPerCycle.
        :type loans_received_from_candidate: float
        """

        self._loans_received_from_candidate = loans_received_from_candidate

    @property
    def net_contributions(self):
        """Gets the net_contributions of this CommitteeTotalsPerCycle.


        :return: The net_contributions of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._net_contributions

    @net_contributions.setter
    def net_contributions(self, net_contributions):
        """Sets the net_contributions of this CommitteeTotalsPerCycle.


        :param net_contributions: The net_contributions of this CommitteeTotalsPerCycle.
        :type net_contributions: float
        """

        self._net_contributions = net_contributions

    @property
    def net_operating_expenditures(self):
        """Gets the net_operating_expenditures of this CommitteeTotalsPerCycle.


        :return: The net_operating_expenditures of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._net_operating_expenditures

    @net_operating_expenditures.setter
    def net_operating_expenditures(self, net_operating_expenditures):
        """Sets the net_operating_expenditures of this CommitteeTotalsPerCycle.


        :param net_operating_expenditures: The net_operating_expenditures of this CommitteeTotalsPerCycle.
        :type net_operating_expenditures: float
        """

        self._net_operating_expenditures = net_operating_expenditures

    @property
    def offsets_to_fundraising_expenditures(self):
        """Gets the offsets_to_fundraising_expenditures of this CommitteeTotalsPerCycle.


        :return: The offsets_to_fundraising_expenditures of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._offsets_to_fundraising_expenditures

    @offsets_to_fundraising_expenditures.setter
    def offsets_to_fundraising_expenditures(self, offsets_to_fundraising_expenditures):
        """Sets the offsets_to_fundraising_expenditures of this CommitteeTotalsPerCycle.


        :param offsets_to_fundraising_expenditures: The offsets_to_fundraising_expenditures of this CommitteeTotalsPerCycle.
        :type offsets_to_fundraising_expenditures: float
        """

        self._offsets_to_fundraising_expenditures = offsets_to_fundraising_expenditures

    @property
    def offsets_to_legal_accounting(self):
        """Gets the offsets_to_legal_accounting of this CommitteeTotalsPerCycle.


        :return: The offsets_to_legal_accounting of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._offsets_to_legal_accounting

    @offsets_to_legal_accounting.setter
    def offsets_to_legal_accounting(self, offsets_to_legal_accounting):
        """Sets the offsets_to_legal_accounting of this CommitteeTotalsPerCycle.


        :param offsets_to_legal_accounting: The offsets_to_legal_accounting of this CommitteeTotalsPerCycle.
        :type offsets_to_legal_accounting: float
        """

        self._offsets_to_legal_accounting = offsets_to_legal_accounting

    @property
    def offsets_to_operating_expenditures(self):
        """Gets the offsets_to_operating_expenditures of this CommitteeTotalsPerCycle.


        :return: The offsets_to_operating_expenditures of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._offsets_to_operating_expenditures

    @offsets_to_operating_expenditures.setter
    def offsets_to_operating_expenditures(self, offsets_to_operating_expenditures):
        """Sets the offsets_to_operating_expenditures of this CommitteeTotalsPerCycle.


        :param offsets_to_operating_expenditures: The offsets_to_operating_expenditures of this CommitteeTotalsPerCycle.
        :type offsets_to_operating_expenditures: float
        """

        self._offsets_to_operating_expenditures = offsets_to_operating_expenditures

    @property
    def operating_expenditures(self):
        """Gets the operating_expenditures of this CommitteeTotalsPerCycle.


        :return: The operating_expenditures of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._operating_expenditures

    @operating_expenditures.setter
    def operating_expenditures(self, operating_expenditures):
        """Sets the operating_expenditures of this CommitteeTotalsPerCycle.


        :param operating_expenditures: The operating_expenditures of this CommitteeTotalsPerCycle.
        :type operating_expenditures: float
        """

        self._operating_expenditures = operating_expenditures

    @property
    def operating_expenditures_percent(self):
        """Gets the operating_expenditures_percent of this CommitteeTotalsPerCycle.


        :return: The operating_expenditures_percent of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._operating_expenditures_percent

    @operating_expenditures_percent.setter
    def operating_expenditures_percent(self, operating_expenditures_percent):
        """Sets the operating_expenditures_percent of this CommitteeTotalsPerCycle.


        :param operating_expenditures_percent: The operating_expenditures_percent of this CommitteeTotalsPerCycle.
        :type operating_expenditures_percent: float
        """

        self._operating_expenditures_percent = operating_expenditures_percent

    @property
    def organization_type(self):
        """Gets the organization_type of this CommitteeTotalsPerCycle.

        The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 

        :return: The organization_type of this CommitteeTotalsPerCycle.
        :rtype: str
        """
        return self._organization_type

    @organization_type.setter
    def organization_type(self, organization_type):
        """Sets the organization_type of this CommitteeTotalsPerCycle.

        The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 

        :param organization_type: The organization_type of this CommitteeTotalsPerCycle.
        :type organization_type: str
        """
        if organization_type is not None and len(organization_type) > 1:
            raise ValueError("Invalid value for `organization_type`, length must be less than or equal to `1`")

        self._organization_type = organization_type

    @property
    def organization_type_full(self):
        """Gets the organization_type_full of this CommitteeTotalsPerCycle.

        The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 

        :return: The organization_type_full of this CommitteeTotalsPerCycle.
        :rtype: str
        """
        return self._organization_type_full

    @organization_type_full.setter
    def organization_type_full(self, organization_type_full):
        """Sets the organization_type_full of this CommitteeTotalsPerCycle.

        The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 

        :param organization_type_full: The organization_type_full of this CommitteeTotalsPerCycle.
        :type organization_type_full: str
        """
        if organization_type_full is not None and len(organization_type_full) > 100:
            raise ValueError("Invalid value for `organization_type_full`, length must be less than or equal to `100`")

        self._organization_type_full = organization_type_full

    @property
    def other_disbursements(self):
        """Gets the other_disbursements of this CommitteeTotalsPerCycle.


        :return: The other_disbursements of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._other_disbursements

    @other_disbursements.setter
    def other_disbursements(self, other_disbursements):
        """Sets the other_disbursements of this CommitteeTotalsPerCycle.


        :param other_disbursements: The other_disbursements of this CommitteeTotalsPerCycle.
        :type other_disbursements: float
        """

        self._other_disbursements = other_disbursements

    @property
    def other_loans_received(self):
        """Gets the other_loans_received of this CommitteeTotalsPerCycle.


        :return: The other_loans_received of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._other_loans_received

    @other_loans_received.setter
    def other_loans_received(self, other_loans_received):
        """Sets the other_loans_received of this CommitteeTotalsPerCycle.


        :param other_loans_received: The other_loans_received of this CommitteeTotalsPerCycle.
        :type other_loans_received: float
        """

        self._other_loans_received = other_loans_received

    @property
    def other_political_committee_contributions(self):
        """Gets the other_political_committee_contributions of this CommitteeTotalsPerCycle.


        :return: The other_political_committee_contributions of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._other_political_committee_contributions

    @other_political_committee_contributions.setter
    def other_political_committee_contributions(self, other_political_committee_contributions):
        """Sets the other_political_committee_contributions of this CommitteeTotalsPerCycle.


        :param other_political_committee_contributions: The other_political_committee_contributions of this CommitteeTotalsPerCycle.
        :type other_political_committee_contributions: float
        """

        self._other_political_committee_contributions = other_political_committee_contributions

    @property
    def other_receipts(self):
        """Gets the other_receipts of this CommitteeTotalsPerCycle.


        :return: The other_receipts of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._other_receipts

    @other_receipts.setter
    def other_receipts(self, other_receipts):
        """Sets the other_receipts of this CommitteeTotalsPerCycle.


        :param other_receipts: The other_receipts of this CommitteeTotalsPerCycle.
        :type other_receipts: float
        """

        self._other_receipts = other_receipts

    @property
    def party_and_other_committee_contributions_percent(self):
        """Gets the party_and_other_committee_contributions_percent of this CommitteeTotalsPerCycle.


        :return: The party_and_other_committee_contributions_percent of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._party_and_other_committee_contributions_percent

    @party_and_other_committee_contributions_percent.setter
    def party_and_other_committee_contributions_percent(self, party_and_other_committee_contributions_percent):
        """Sets the party_and_other_committee_contributions_percent of this CommitteeTotalsPerCycle.


        :param party_and_other_committee_contributions_percent: The party_and_other_committee_contributions_percent of this CommitteeTotalsPerCycle.
        :type party_and_other_committee_contributions_percent: float
        """

        self._party_and_other_committee_contributions_percent = party_and_other_committee_contributions_percent

    @property
    def party_full(self):
        """Gets the party_full of this CommitteeTotalsPerCycle.

        Party affiliated with a candidate or committee

        :return: The party_full of this CommitteeTotalsPerCycle.
        :rtype: str
        """
        return self._party_full

    @party_full.setter
    def party_full(self, party_full):
        """Sets the party_full of this CommitteeTotalsPerCycle.

        Party affiliated with a candidate or committee

        :param party_full: The party_full of this CommitteeTotalsPerCycle.
        :type party_full: str
        """

        self._party_full = party_full

    @property
    def pdf_url(self):
        """Gets the pdf_url of this CommitteeTotalsPerCycle.


        :return: The pdf_url of this CommitteeTotalsPerCycle.
        :rtype: str
        """
        return self._pdf_url

    @pdf_url.setter
    def pdf_url(self, pdf_url):
        """Sets the pdf_url of this CommitteeTotalsPerCycle.


        :param pdf_url: The pdf_url of this CommitteeTotalsPerCycle.
        :type pdf_url: str
        """

        self._pdf_url = pdf_url

    @property
    def political_party_committee_contributions(self):
        """Gets the political_party_committee_contributions of this CommitteeTotalsPerCycle.


        :return: The political_party_committee_contributions of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._political_party_committee_contributions

    @political_party_committee_contributions.setter
    def political_party_committee_contributions(self, political_party_committee_contributions):
        """Sets the political_party_committee_contributions of this CommitteeTotalsPerCycle.


        :param political_party_committee_contributions: The political_party_committee_contributions of this CommitteeTotalsPerCycle.
        :type political_party_committee_contributions: float
        """

        self._political_party_committee_contributions = political_party_committee_contributions

    @property
    def receipts(self):
        """Gets the receipts of this CommitteeTotalsPerCycle.


        :return: The receipts of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._receipts

    @receipts.setter
    def receipts(self, receipts):
        """Sets the receipts of this CommitteeTotalsPerCycle.


        :param receipts: The receipts of this CommitteeTotalsPerCycle.
        :type receipts: float
        """

        self._receipts = receipts

    @property
    def refunded_individual_contributions(self):
        """Gets the refunded_individual_contributions of this CommitteeTotalsPerCycle.


        :return: The refunded_individual_contributions of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._refunded_individual_contributions

    @refunded_individual_contributions.setter
    def refunded_individual_contributions(self, refunded_individual_contributions):
        """Sets the refunded_individual_contributions of this CommitteeTotalsPerCycle.


        :param refunded_individual_contributions: The refunded_individual_contributions of this CommitteeTotalsPerCycle.
        :type refunded_individual_contributions: float
        """

        self._refunded_individual_contributions = refunded_individual_contributions

    @property
    def refunded_other_political_committee_contributions(self):
        """Gets the refunded_other_political_committee_contributions of this CommitteeTotalsPerCycle.


        :return: The refunded_other_political_committee_contributions of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._refunded_other_political_committee_contributions

    @refunded_other_political_committee_contributions.setter
    def refunded_other_political_committee_contributions(self, refunded_other_political_committee_contributions):
        """Sets the refunded_other_political_committee_contributions of this CommitteeTotalsPerCycle.


        :param refunded_other_political_committee_contributions: The refunded_other_political_committee_contributions of this CommitteeTotalsPerCycle.
        :type refunded_other_political_committee_contributions: float
        """

        self._refunded_other_political_committee_contributions = refunded_other_political_committee_contributions

    @property
    def refunded_political_party_committee_contributions(self):
        """Gets the refunded_political_party_committee_contributions of this CommitteeTotalsPerCycle.


        :return: The refunded_political_party_committee_contributions of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._refunded_political_party_committee_contributions

    @refunded_political_party_committee_contributions.setter
    def refunded_political_party_committee_contributions(self, refunded_political_party_committee_contributions):
        """Sets the refunded_political_party_committee_contributions of this CommitteeTotalsPerCycle.


        :param refunded_political_party_committee_contributions: The refunded_political_party_committee_contributions of this CommitteeTotalsPerCycle.
        :type refunded_political_party_committee_contributions: float
        """

        self._refunded_political_party_committee_contributions = refunded_political_party_committee_contributions

    @property
    def repayments_loans_made_by_candidate(self):
        """Gets the repayments_loans_made_by_candidate of this CommitteeTotalsPerCycle.


        :return: The repayments_loans_made_by_candidate of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._repayments_loans_made_by_candidate

    @repayments_loans_made_by_candidate.setter
    def repayments_loans_made_by_candidate(self, repayments_loans_made_by_candidate):
        """Sets the repayments_loans_made_by_candidate of this CommitteeTotalsPerCycle.


        :param repayments_loans_made_by_candidate: The repayments_loans_made_by_candidate of this CommitteeTotalsPerCycle.
        :type repayments_loans_made_by_candidate: float
        """

        self._repayments_loans_made_by_candidate = repayments_loans_made_by_candidate

    @property
    def repayments_other_loans(self):
        """Gets the repayments_other_loans of this CommitteeTotalsPerCycle.


        :return: The repayments_other_loans of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._repayments_other_loans

    @repayments_other_loans.setter
    def repayments_other_loans(self, repayments_other_loans):
        """Sets the repayments_other_loans of this CommitteeTotalsPerCycle.


        :param repayments_other_loans: The repayments_other_loans of this CommitteeTotalsPerCycle.
        :type repayments_other_loans: float
        """

        self._repayments_other_loans = repayments_other_loans

    @property
    def report_form(self):
        """Gets the report_form of this CommitteeTotalsPerCycle.


        :return: The report_form of this CommitteeTotalsPerCycle.
        :rtype: str
        """
        return self._report_form

    @report_form.setter
    def report_form(self, report_form):
        """Sets the report_form of this CommitteeTotalsPerCycle.


        :param report_form: The report_form of this CommitteeTotalsPerCycle.
        :type report_form: str
        """

        self._report_form = report_form

    @property
    def total_offsets_to_operating_expenditures(self):
        """Gets the total_offsets_to_operating_expenditures of this CommitteeTotalsPerCycle.


        :return: The total_offsets_to_operating_expenditures of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._total_offsets_to_operating_expenditures

    @total_offsets_to_operating_expenditures.setter
    def total_offsets_to_operating_expenditures(self, total_offsets_to_operating_expenditures):
        """Sets the total_offsets_to_operating_expenditures of this CommitteeTotalsPerCycle.


        :param total_offsets_to_operating_expenditures: The total_offsets_to_operating_expenditures of this CommitteeTotalsPerCycle.
        :type total_offsets_to_operating_expenditures: float
        """

        self._total_offsets_to_operating_expenditures = total_offsets_to_operating_expenditures

    @property
    def transaction_coverage_date(self):
        """Gets the transaction_coverage_date of this CommitteeTotalsPerCycle.


        :return: The transaction_coverage_date of this CommitteeTotalsPerCycle.
        :rtype: date
        """
        return self._transaction_coverage_date

    @transaction_coverage_date.setter
    def transaction_coverage_date(self, transaction_coverage_date):
        """Sets the transaction_coverage_date of this CommitteeTotalsPerCycle.


        :param transaction_coverage_date: The transaction_coverage_date of this CommitteeTotalsPerCycle.
        :type transaction_coverage_date: date
        """

        self._transaction_coverage_date = transaction_coverage_date

    @property
    def transfers_from_affiliated_committee(self):
        """Gets the transfers_from_affiliated_committee of this CommitteeTotalsPerCycle.


        :return: The transfers_from_affiliated_committee of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._transfers_from_affiliated_committee

    @transfers_from_affiliated_committee.setter
    def transfers_from_affiliated_committee(self, transfers_from_affiliated_committee):
        """Sets the transfers_from_affiliated_committee of this CommitteeTotalsPerCycle.


        :param transfers_from_affiliated_committee: The transfers_from_affiliated_committee of this CommitteeTotalsPerCycle.
        :type transfers_from_affiliated_committee: float
        """

        self._transfers_from_affiliated_committee = transfers_from_affiliated_committee

    @property
    def transfers_to_other_authorized_committee(self):
        """Gets the transfers_to_other_authorized_committee of this CommitteeTotalsPerCycle.


        :return: The transfers_to_other_authorized_committee of this CommitteeTotalsPerCycle.
        :rtype: float
        """
        return self._transfers_to_other_authorized_committee

    @transfers_to_other_authorized_committee.setter
    def transfers_to_other_authorized_committee(self, transfers_to_other_authorized_committee):
        """Sets the transfers_to_other_authorized_committee of this CommitteeTotalsPerCycle.


        :param transfers_to_other_authorized_committee: The transfers_to_other_authorized_committee of this CommitteeTotalsPerCycle.
        :type transfers_to_other_authorized_committee: float
        """

        self._transfers_to_other_authorized_committee = transfers_to_other_authorized_committee

    @property
    def treasurer_name(self):
        """Gets the treasurer_name of this CommitteeTotalsPerCycle.

        Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.

        :return: The treasurer_name of this CommitteeTotalsPerCycle.
        :rtype: str
        """
        return self._treasurer_name

    @treasurer_name.setter
    def treasurer_name(self, treasurer_name):
        """Sets the treasurer_name of this CommitteeTotalsPerCycle.

        Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.

        :param treasurer_name: The treasurer_name of this CommitteeTotalsPerCycle.
        :type treasurer_name: str
        """
        if treasurer_name is not None and len(treasurer_name) > 100:
            raise ValueError("Invalid value for `treasurer_name`, length must be less than or equal to `100`")

        self._treasurer_name = treasurer_name
