# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CommitteeDetailJfcCommitteeInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, joint_committee_id: str=None, joint_committee_name: str=None):
        """CommitteeDetailJfcCommitteeInner - a model defined in OpenAPI

        :param joint_committee_id: The joint_committee_id of this CommitteeDetailJfcCommitteeInner.
        :param joint_committee_name: The joint_committee_name of this CommitteeDetailJfcCommitteeInner.
        """
        self.openapi_types = {
            'joint_committee_id': str,
            'joint_committee_name': str
        }

        self.attribute_map = {
            'joint_committee_id': 'joint_committee_id',
            'joint_committee_name': 'joint_committee_name'
        }

        self._joint_committee_id = joint_committee_id
        self._joint_committee_name = joint_committee_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommitteeDetailJfcCommitteeInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommitteeDetail_jfc_committee_inner of this CommitteeDetailJfcCommitteeInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def joint_committee_id(self):
        """Gets the joint_committee_id of this CommitteeDetailJfcCommitteeInner.

         A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 

        :return: The joint_committee_id of this CommitteeDetailJfcCommitteeInner.
        :rtype: str
        """
        return self._joint_committee_id

    @joint_committee_id.setter
    def joint_committee_id(self, joint_committee_id):
        """Sets the joint_committee_id of this CommitteeDetailJfcCommitteeInner.

         A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 

        :param joint_committee_id: The joint_committee_id of this CommitteeDetailJfcCommitteeInner.
        :type joint_committee_id: str
        """

        self._joint_committee_id = joint_committee_id

    @property
    def joint_committee_name(self):
        """Gets the joint_committee_name of this CommitteeDetailJfcCommitteeInner.

        The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.

        :return: The joint_committee_name of this CommitteeDetailJfcCommitteeInner.
        :rtype: str
        """
        return self._joint_committee_name

    @joint_committee_name.setter
    def joint_committee_name(self, joint_committee_name):
        """Sets the joint_committee_name of this CommitteeDetailJfcCommitteeInner.

        The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.

        :param joint_committee_name: The joint_committee_name of this CommitteeDetailJfcCommitteeInner.
        :type joint_committee_name: str
        """
        if joint_committee_name is not None and len(joint_committee_name) > 100:
            raise ValueError("Invalid value for `joint_committee_name`, length must be less than or equal to `100`")

        self._joint_committee_name = joint_committee_name
