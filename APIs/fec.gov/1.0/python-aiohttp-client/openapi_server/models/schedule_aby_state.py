# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScheduleAByState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, committee_id: str=None, count: int=None, cycle: int=None, state: str=None, state_full: str=None, total: float=None):
        """ScheduleAByState - a model defined in OpenAPI

        :param committee_id: The committee_id of this ScheduleAByState.
        :param count: The count of this ScheduleAByState.
        :param cycle: The cycle of this ScheduleAByState.
        :param state: The state of this ScheduleAByState.
        :param state_full: The state_full of this ScheduleAByState.
        :param total: The total of this ScheduleAByState.
        """
        self.openapi_types = {
            'committee_id': str,
            'count': int,
            'cycle': int,
            'state': str,
            'state_full': str,
            'total': float
        }

        self.attribute_map = {
            'committee_id': 'committee_id',
            'count': 'count',
            'cycle': 'cycle',
            'state': 'state',
            'state_full': 'state_full',
            'total': 'total'
        }

        self._committee_id = committee_id
        self._count = count
        self._cycle = cycle
        self._state = state
        self._state_full = state_full
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScheduleAByState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScheduleAByState of this ScheduleAByState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def committee_id(self):
        """Gets the committee_id of this ScheduleAByState.

         A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 

        :return: The committee_id of this ScheduleAByState.
        :rtype: str
        """
        return self._committee_id

    @committee_id.setter
    def committee_id(self, committee_id):
        """Sets the committee_id of this ScheduleAByState.

         A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 

        :param committee_id: The committee_id of this ScheduleAByState.
        :type committee_id: str
        """
        if committee_id is None:
            raise ValueError("Invalid value for `committee_id`, must not be `None`")

        self._committee_id = committee_id

    @property
    def count(self):
        """Gets the count of this ScheduleAByState.

         Number of records making up the total. 

        :return: The count of this ScheduleAByState.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ScheduleAByState.

         Number of records making up the total. 

        :param count: The count of this ScheduleAByState.
        :type count: int
        """

        self._count = count

    @property
    def cycle(self):
        """Gets the cycle of this ScheduleAByState.

         Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 

        :return: The cycle of this ScheduleAByState.
        :rtype: int
        """
        return self._cycle

    @cycle.setter
    def cycle(self, cycle):
        """Sets the cycle of this ScheduleAByState.

         Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 

        :param cycle: The cycle of this ScheduleAByState.
        :type cycle: int
        """
        if cycle is None:
            raise ValueError("Invalid value for `cycle`, must not be `None`")

        self._cycle = cycle

    @property
    def state(self):
        """Gets the state of this ScheduleAByState.

        US state or territory

        :return: The state of this ScheduleAByState.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ScheduleAByState.

        US state or territory

        :param state: The state of this ScheduleAByState.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def state_full(self):
        """Gets the state_full of this ScheduleAByState.

        US state or territory

        :return: The state_full of this ScheduleAByState.
        :rtype: str
        """
        return self._state_full

    @state_full.setter
    def state_full(self, state_full):
        """Sets the state_full of this ScheduleAByState.

        US state or territory

        :param state_full: The state_full of this ScheduleAByState.
        :type state_full: str
        """
        if state_full is None:
            raise ValueError("Invalid value for `state_full`, must not be `None`")

        self._state_full = state_full

    @property
    def total(self):
        """Gets the total of this ScheduleAByState.

        Sum of transactions

        :return: The total of this ScheduleAByState.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ScheduleAByState.

        Sum of transactions

        :param total: The total of this ScheduleAByState.
        :type total: float
        """

        self._total = total
