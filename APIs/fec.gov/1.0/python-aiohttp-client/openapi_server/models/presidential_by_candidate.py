# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PresidentialByCandidate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, candidate_id: str=None, candidate_last_name: str=None, candidate_party_affiliation: str=None, contributor_state: str=None, election_year: int=None, net_receipts: float=None, rounded_net_receipts: float=None):
        """PresidentialByCandidate - a model defined in OpenAPI

        :param candidate_id: The candidate_id of this PresidentialByCandidate.
        :param candidate_last_name: The candidate_last_name of this PresidentialByCandidate.
        :param candidate_party_affiliation: The candidate_party_affiliation of this PresidentialByCandidate.
        :param contributor_state: The contributor_state of this PresidentialByCandidate.
        :param election_year: The election_year of this PresidentialByCandidate.
        :param net_receipts: The net_receipts of this PresidentialByCandidate.
        :param rounded_net_receipts: The rounded_net_receipts of this PresidentialByCandidate.
        """
        self.openapi_types = {
            'candidate_id': str,
            'candidate_last_name': str,
            'candidate_party_affiliation': str,
            'contributor_state': str,
            'election_year': int,
            'net_receipts': float,
            'rounded_net_receipts': float
        }

        self.attribute_map = {
            'candidate_id': 'candidate_id',
            'candidate_last_name': 'candidate_last_name',
            'candidate_party_affiliation': 'candidate_party_affiliation',
            'contributor_state': 'contributor_state',
            'election_year': 'election_year',
            'net_receipts': 'net_receipts',
            'rounded_net_receipts': 'rounded_net_receipts'
        }

        self._candidate_id = candidate_id
        self._candidate_last_name = candidate_last_name
        self._candidate_party_affiliation = candidate_party_affiliation
        self._contributor_state = contributor_state
        self._election_year = election_year
        self._net_receipts = net_receipts
        self._rounded_net_receipts = rounded_net_receipts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PresidentialByCandidate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PresidentialByCandidate of this PresidentialByCandidate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def candidate_id(self):
        """Gets the candidate_id of this PresidentialByCandidate.

         A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence.   -P00000001    All candidates   -P00000002    Democrasts   -P00000003    Republicans 

        :return: The candidate_id of this PresidentialByCandidate.
        :rtype: str
        """
        return self._candidate_id

    @candidate_id.setter
    def candidate_id(self, candidate_id):
        """Sets the candidate_id of this PresidentialByCandidate.

         A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence.   -P00000001    All candidates   -P00000002    Democrasts   -P00000003    Republicans 

        :param candidate_id: The candidate_id of this PresidentialByCandidate.
        :type candidate_id: str
        """

        self._candidate_id = candidate_id

    @property
    def candidate_last_name(self):
        """Gets the candidate_last_name of this PresidentialByCandidate.

         Candidate last name 

        :return: The candidate_last_name of this PresidentialByCandidate.
        :rtype: str
        """
        return self._candidate_last_name

    @candidate_last_name.setter
    def candidate_last_name(self, candidate_last_name):
        """Sets the candidate_last_name of this PresidentialByCandidate.

         Candidate last name 

        :param candidate_last_name: The candidate_last_name of this PresidentialByCandidate.
        :type candidate_last_name: str
        """

        self._candidate_last_name = candidate_last_name

    @property
    def candidate_party_affiliation(self):
        """Gets the candidate_party_affiliation of this PresidentialByCandidate.

        Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.

        :return: The candidate_party_affiliation of this PresidentialByCandidate.
        :rtype: str
        """
        return self._candidate_party_affiliation

    @candidate_party_affiliation.setter
    def candidate_party_affiliation(self, candidate_party_affiliation):
        """Sets the candidate_party_affiliation of this PresidentialByCandidate.

        Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.

        :param candidate_party_affiliation: The candidate_party_affiliation of this PresidentialByCandidate.
        :type candidate_party_affiliation: str
        """

        self._candidate_party_affiliation = candidate_party_affiliation

    @property
    def contributor_state(self):
        """Gets the contributor_state of this PresidentialByCandidate.

        State of contributor

        :return: The contributor_state of this PresidentialByCandidate.
        :rtype: str
        """
        return self._contributor_state

    @contributor_state.setter
    def contributor_state(self, contributor_state):
        """Sets the contributor_state of this PresidentialByCandidate.

        State of contributor

        :param contributor_state: The contributor_state of this PresidentialByCandidate.
        :type contributor_state: str
        """
        if contributor_state is not None and len(contributor_state) > 2:
            raise ValueError("Invalid value for `contributor_state`, length must be less than or equal to `2`")

        self._contributor_state = contributor_state

    @property
    def election_year(self):
        """Gets the election_year of this PresidentialByCandidate.

        Year of election

        :return: The election_year of this PresidentialByCandidate.
        :rtype: int
        """
        return self._election_year

    @election_year.setter
    def election_year(self, election_year):
        """Sets the election_year of this PresidentialByCandidate.

        Year of election

        :param election_year: The election_year of this PresidentialByCandidate.
        :type election_year: int
        """

        self._election_year = election_year

    @property
    def net_receipts(self):
        """Gets the net_receipts of this PresidentialByCandidate.

        Net contributions

        :return: The net_receipts of this PresidentialByCandidate.
        :rtype: float
        """
        return self._net_receipts

    @net_receipts.setter
    def net_receipts(self, net_receipts):
        """Sets the net_receipts of this PresidentialByCandidate.

        Net contributions

        :param net_receipts: The net_receipts of this PresidentialByCandidate.
        :type net_receipts: float
        """

        self._net_receipts = net_receipts

    @property
    def rounded_net_receipts(self):
        """Gets the rounded_net_receipts of this PresidentialByCandidate.

         Net receipts, in millions 

        :return: The rounded_net_receipts of this PresidentialByCandidate.
        :rtype: float
        """
        return self._rounded_net_receipts

    @rounded_net_receipts.setter
    def rounded_net_receipts(self, rounded_net_receipts):
        """Sets the rounded_net_receipts of this PresidentialByCandidate.

         Net receipts, in millions 

        :param rounded_net_receipts: The rounded_net_receipts of this PresidentialByCandidate.
        :type rounded_net_receipts: float
        """

        self._rounded_net_receipts = rounded_net_receipts
