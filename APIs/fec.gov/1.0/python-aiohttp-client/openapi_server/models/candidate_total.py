# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CandidateTotal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, candidate_id: str=None, candidate_inactive: bool=None, cash_on_hand_end_period: float=None, coverage_end_date: date=None, coverage_start_date: date=None, cycle: int=None, debts_owed_by_committee: float=None, disbursements: float=None, district: str=None, district_number: int=None, election_year: int=None, federal_funds_flag: bool=None, has_raised_funds: bool=None, individual_itemized_contributions: float=None, is_election: bool=None, office: str=None, other_political_committee_contributions: float=None, party: str=None, receipts: float=None, state: str=None, state_full: str=None, transfers_from_other_authorized_committee: float=None):
        """CandidateTotal - a model defined in OpenAPI

        :param candidate_id: The candidate_id of this CandidateTotal.
        :param candidate_inactive: The candidate_inactive of this CandidateTotal.
        :param cash_on_hand_end_period: The cash_on_hand_end_period of this CandidateTotal.
        :param coverage_end_date: The coverage_end_date of this CandidateTotal.
        :param coverage_start_date: The coverage_start_date of this CandidateTotal.
        :param cycle: The cycle of this CandidateTotal.
        :param debts_owed_by_committee: The debts_owed_by_committee of this CandidateTotal.
        :param disbursements: The disbursements of this CandidateTotal.
        :param district: The district of this CandidateTotal.
        :param district_number: The district_number of this CandidateTotal.
        :param election_year: The election_year of this CandidateTotal.
        :param federal_funds_flag: The federal_funds_flag of this CandidateTotal.
        :param has_raised_funds: The has_raised_funds of this CandidateTotal.
        :param individual_itemized_contributions: The individual_itemized_contributions of this CandidateTotal.
        :param is_election: The is_election of this CandidateTotal.
        :param office: The office of this CandidateTotal.
        :param other_political_committee_contributions: The other_political_committee_contributions of this CandidateTotal.
        :param party: The party of this CandidateTotal.
        :param receipts: The receipts of this CandidateTotal.
        :param state: The state of this CandidateTotal.
        :param state_full: The state_full of this CandidateTotal.
        :param transfers_from_other_authorized_committee: The transfers_from_other_authorized_committee of this CandidateTotal.
        """
        self.openapi_types = {
            'candidate_id': str,
            'candidate_inactive': bool,
            'cash_on_hand_end_period': float,
            'coverage_end_date': date,
            'coverage_start_date': date,
            'cycle': int,
            'debts_owed_by_committee': float,
            'disbursements': float,
            'district': str,
            'district_number': int,
            'election_year': int,
            'federal_funds_flag': bool,
            'has_raised_funds': bool,
            'individual_itemized_contributions': float,
            'is_election': bool,
            'office': str,
            'other_political_committee_contributions': float,
            'party': str,
            'receipts': float,
            'state': str,
            'state_full': str,
            'transfers_from_other_authorized_committee': float
        }

        self.attribute_map = {
            'candidate_id': 'candidate_id',
            'candidate_inactive': 'candidate_inactive',
            'cash_on_hand_end_period': 'cash_on_hand_end_period',
            'coverage_end_date': 'coverage_end_date',
            'coverage_start_date': 'coverage_start_date',
            'cycle': 'cycle',
            'debts_owed_by_committee': 'debts_owed_by_committee',
            'disbursements': 'disbursements',
            'district': 'district',
            'district_number': 'district_number',
            'election_year': 'election_year',
            'federal_funds_flag': 'federal_funds_flag',
            'has_raised_funds': 'has_raised_funds',
            'individual_itemized_contributions': 'individual_itemized_contributions',
            'is_election': 'is_election',
            'office': 'office',
            'other_political_committee_contributions': 'other_political_committee_contributions',
            'party': 'party',
            'receipts': 'receipts',
            'state': 'state',
            'state_full': 'state_full',
            'transfers_from_other_authorized_committee': 'transfers_from_other_authorized_committee'
        }

        self._candidate_id = candidate_id
        self._candidate_inactive = candidate_inactive
        self._cash_on_hand_end_period = cash_on_hand_end_period
        self._coverage_end_date = coverage_end_date
        self._coverage_start_date = coverage_start_date
        self._cycle = cycle
        self._debts_owed_by_committee = debts_owed_by_committee
        self._disbursements = disbursements
        self._district = district
        self._district_number = district_number
        self._election_year = election_year
        self._federal_funds_flag = federal_funds_flag
        self._has_raised_funds = has_raised_funds
        self._individual_itemized_contributions = individual_itemized_contributions
        self._is_election = is_election
        self._office = office
        self._other_political_committee_contributions = other_political_committee_contributions
        self._party = party
        self._receipts = receipts
        self._state = state
        self._state_full = state_full
        self._transfers_from_other_authorized_committee = transfers_from_other_authorized_committee

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CandidateTotal':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CandidateTotal of this CandidateTotal.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def candidate_id(self):
        """Gets the candidate_id of this CandidateTotal.

         A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 

        :return: The candidate_id of this CandidateTotal.
        :rtype: str
        """
        return self._candidate_id

    @candidate_id.setter
    def candidate_id(self, candidate_id):
        """Sets the candidate_id of this CandidateTotal.

         A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 

        :param candidate_id: The candidate_id of this CandidateTotal.
        :type candidate_id: str
        """
        if candidate_id is None:
            raise ValueError("Invalid value for `candidate_id`, must not be `None`")

        self._candidate_id = candidate_id

    @property
    def candidate_inactive(self):
        """Gets the candidate_inactive of this CandidateTotal.

         True indicates that a candidate is inactive. 

        :return: The candidate_inactive of this CandidateTotal.
        :rtype: bool
        """
        return self._candidate_inactive

    @candidate_inactive.setter
    def candidate_inactive(self, candidate_inactive):
        """Sets the candidate_inactive of this CandidateTotal.

         True indicates that a candidate is inactive. 

        :param candidate_inactive: The candidate_inactive of this CandidateTotal.
        :type candidate_inactive: bool
        """

        self._candidate_inactive = candidate_inactive

    @property
    def cash_on_hand_end_period(self):
        """Gets the cash_on_hand_end_period of this CandidateTotal.

        Ending cash balance on the most recent filing

        :return: The cash_on_hand_end_period of this CandidateTotal.
        :rtype: float
        """
        return self._cash_on_hand_end_period

    @cash_on_hand_end_period.setter
    def cash_on_hand_end_period(self, cash_on_hand_end_period):
        """Sets the cash_on_hand_end_period of this CandidateTotal.

        Ending cash balance on the most recent filing

        :param cash_on_hand_end_period: The cash_on_hand_end_period of this CandidateTotal.
        :type cash_on_hand_end_period: float
        """

        self._cash_on_hand_end_period = cash_on_hand_end_period

    @property
    def coverage_end_date(self):
        """Gets the coverage_end_date of this CandidateTotal.

        Ending date of the reporting period

        :return: The coverage_end_date of this CandidateTotal.
        :rtype: date
        """
        return self._coverage_end_date

    @coverage_end_date.setter
    def coverage_end_date(self, coverage_end_date):
        """Sets the coverage_end_date of this CandidateTotal.

        Ending date of the reporting period

        :param coverage_end_date: The coverage_end_date of this CandidateTotal.
        :type coverage_end_date: date
        """

        self._coverage_end_date = coverage_end_date

    @property
    def coverage_start_date(self):
        """Gets the coverage_start_date of this CandidateTotal.

        Beginning date of the reporting period

        :return: The coverage_start_date of this CandidateTotal.
        :rtype: date
        """
        return self._coverage_start_date

    @coverage_start_date.setter
    def coverage_start_date(self, coverage_start_date):
        """Sets the coverage_start_date of this CandidateTotal.

        Beginning date of the reporting period

        :param coverage_start_date: The coverage_start_date of this CandidateTotal.
        :type coverage_start_date: date
        """

        self._coverage_start_date = coverage_start_date

    @property
    def cycle(self):
        """Gets the cycle of this CandidateTotal.

         Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 

        :return: The cycle of this CandidateTotal.
        :rtype: int
        """
        return self._cycle

    @cycle.setter
    def cycle(self, cycle):
        """Sets the cycle of this CandidateTotal.

         Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 

        :param cycle: The cycle of this CandidateTotal.
        :type cycle: int
        """
        if cycle is None:
            raise ValueError("Invalid value for `cycle`, must not be `None`")

        self._cycle = cycle

    @property
    def debts_owed_by_committee(self):
        """Gets the debts_owed_by_committee of this CandidateTotal.

        Debts owed by the committee

        :return: The debts_owed_by_committee of this CandidateTotal.
        :rtype: float
        """
        return self._debts_owed_by_committee

    @debts_owed_by_committee.setter
    def debts_owed_by_committee(self, debts_owed_by_committee):
        """Sets the debts_owed_by_committee of this CandidateTotal.

        Debts owed by the committee

        :param debts_owed_by_committee: The debts_owed_by_committee of this CandidateTotal.
        :type debts_owed_by_committee: float
        """

        self._debts_owed_by_committee = debts_owed_by_committee

    @property
    def disbursements(self):
        """Gets the disbursements of this CandidateTotal.


        :return: The disbursements of this CandidateTotal.
        :rtype: float
        """
        return self._disbursements

    @disbursements.setter
    def disbursements(self, disbursements):
        """Sets the disbursements of this CandidateTotal.


        :param disbursements: The disbursements of this CandidateTotal.
        :type disbursements: float
        """

        self._disbursements = disbursements

    @property
    def district(self):
        """Gets the district of this CandidateTotal.

        Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.

        :return: The district of this CandidateTotal.
        :rtype: str
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this CandidateTotal.

        Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.

        :param district: The district of this CandidateTotal.
        :type district: str
        """
        if district is not None and len(district) > 2:
            raise ValueError("Invalid value for `district`, length must be less than or equal to `2`")

        self._district = district

    @property
    def district_number(self):
        """Gets the district_number of this CandidateTotal.

        Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.

        :return: The district_number of this CandidateTotal.
        :rtype: int
        """
        return self._district_number

    @district_number.setter
    def district_number(self, district_number):
        """Sets the district_number of this CandidateTotal.

        Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.

        :param district_number: The district_number of this CandidateTotal.
        :type district_number: int
        """

        self._district_number = district_number

    @property
    def election_year(self):
        """Gets the election_year of this CandidateTotal.

        Year of election

        :return: The election_year of this CandidateTotal.
        :rtype: int
        """
        return self._election_year

    @election_year.setter
    def election_year(self, election_year):
        """Sets the election_year of this CandidateTotal.

        Year of election

        :param election_year: The election_year of this CandidateTotal.
        :type election_year: int
        """

        self._election_year = election_year

    @property
    def federal_funds_flag(self):
        """Gets the federal_funds_flag of this CandidateTotal.

        A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.

        :return: The federal_funds_flag of this CandidateTotal.
        :rtype: bool
        """
        return self._federal_funds_flag

    @federal_funds_flag.setter
    def federal_funds_flag(self, federal_funds_flag):
        """Sets the federal_funds_flag of this CandidateTotal.

        A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.

        :param federal_funds_flag: The federal_funds_flag of this CandidateTotal.
        :type federal_funds_flag: bool
        """

        self._federal_funds_flag = federal_funds_flag

    @property
    def has_raised_funds(self):
        """Gets the has_raised_funds of this CandidateTotal.

        A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)

        :return: The has_raised_funds of this CandidateTotal.
        :rtype: bool
        """
        return self._has_raised_funds

    @has_raised_funds.setter
    def has_raised_funds(self, has_raised_funds):
        """Sets the has_raised_funds of this CandidateTotal.

        A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)

        :param has_raised_funds: The has_raised_funds of this CandidateTotal.
        :type has_raised_funds: bool
        """

        self._has_raised_funds = has_raised_funds

    @property
    def individual_itemized_contributions(self):
        """Gets the individual_itemized_contributions of this CandidateTotal.

        Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less.

        :return: The individual_itemized_contributions of this CandidateTotal.
        :rtype: float
        """
        return self._individual_itemized_contributions

    @individual_itemized_contributions.setter
    def individual_itemized_contributions(self, individual_itemized_contributions):
        """Sets the individual_itemized_contributions of this CandidateTotal.

        Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less.

        :param individual_itemized_contributions: The individual_itemized_contributions of this CandidateTotal.
        :type individual_itemized_contributions: float
        """

        self._individual_itemized_contributions = individual_itemized_contributions

    @property
    def is_election(self):
        """Gets the is_election of this CandidateTotal.


        :return: The is_election of this CandidateTotal.
        :rtype: bool
        """
        return self._is_election

    @is_election.setter
    def is_election(self, is_election):
        """Sets the is_election of this CandidateTotal.


        :param is_election: The is_election of this CandidateTotal.
        :type is_election: bool
        """
        if is_election is None:
            raise ValueError("Invalid value for `is_election`, must not be `None`")

        self._is_election = is_election

    @property
    def office(self):
        """Gets the office of this CandidateTotal.

        Federal office candidate runs for: H, S or P

        :return: The office of this CandidateTotal.
        :rtype: str
        """
        return self._office

    @office.setter
    def office(self, office):
        """Sets the office of this CandidateTotal.

        Federal office candidate runs for: H, S or P

        :param office: The office of this CandidateTotal.
        :type office: str
        """
        if office is not None and len(office) > 1:
            raise ValueError("Invalid value for `office`, length must be less than or equal to `1`")

        self._office = office

    @property
    def other_political_committee_contributions(self):
        """Gets the other_political_committee_contributions of this CandidateTotal.

        Other committees contributions

        :return: The other_political_committee_contributions of this CandidateTotal.
        :rtype: float
        """
        return self._other_political_committee_contributions

    @other_political_committee_contributions.setter
    def other_political_committee_contributions(self, other_political_committee_contributions):
        """Sets the other_political_committee_contributions of this CandidateTotal.

        Other committees contributions

        :param other_political_committee_contributions: The other_political_committee_contributions of this CandidateTotal.
        :type other_political_committee_contributions: float
        """

        self._other_political_committee_contributions = other_political_committee_contributions

    @property
    def party(self):
        """Gets the party of this CandidateTotal.

        Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.

        :return: The party of this CandidateTotal.
        :rtype: str
        """
        return self._party

    @party.setter
    def party(self, party):
        """Sets the party of this CandidateTotal.

        Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.

        :param party: The party of this CandidateTotal.
        :type party: str
        """
        if party is not None and len(party) > 3:
            raise ValueError("Invalid value for `party`, length must be less than or equal to `3`")

        self._party = party

    @property
    def receipts(self):
        """Gets the receipts of this CandidateTotal.


        :return: The receipts of this CandidateTotal.
        :rtype: float
        """
        return self._receipts

    @receipts.setter
    def receipts(self, receipts):
        """Sets the receipts of this CandidateTotal.


        :param receipts: The receipts of this CandidateTotal.
        :type receipts: float
        """

        self._receipts = receipts

    @property
    def state(self):
        """Gets the state of this CandidateTotal.

        US state or territory where a candidate runs for office

        :return: The state of this CandidateTotal.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CandidateTotal.

        US state or territory where a candidate runs for office

        :param state: The state of this CandidateTotal.
        :type state: str
        """
        if state is not None and len(state) > 2:
            raise ValueError("Invalid value for `state`, length must be less than or equal to `2`")

        self._state = state

    @property
    def state_full(self):
        """Gets the state_full of this CandidateTotal.

        US state or territory where a candidate runs for office

        :return: The state_full of this CandidateTotal.
        :rtype: str
        """
        return self._state_full

    @state_full.setter
    def state_full(self, state_full):
        """Sets the state_full of this CandidateTotal.

        US state or territory where a candidate runs for office

        :param state_full: The state_full of this CandidateTotal.
        :type state_full: str
        """
        if state_full is not None and len(state_full) > 50:
            raise ValueError("Invalid value for `state_full`, length must be less than or equal to `50`")

        self._state_full = state_full

    @property
    def transfers_from_other_authorized_committee(self):
        """Gets the transfers_from_other_authorized_committee of this CandidateTotal.

        Transfers from authorized committees

        :return: The transfers_from_other_authorized_committee of this CandidateTotal.
        :rtype: float
        """
        return self._transfers_from_other_authorized_committee

    @transfers_from_other_authorized_committee.setter
    def transfers_from_other_authorized_committee(self, transfers_from_other_authorized_committee):
        """Sets the transfers_from_other_authorized_committee of this CandidateTotal.

        Transfers from authorized committees

        :param transfers_from_other_authorized_committee: The transfers_from_other_authorized_committee of this CandidateTotal.
        :type transfers_from_other_authorized_committee: float
        """

        self._transfers_from_other_authorized_committee = transfers_from_other_authorized_committee
