# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CommitteeSponsorCandidateListInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sponsor_candidate_id: str=None, sponsor_candidate_name: str=None):
        """CommitteeSponsorCandidateListInner - a model defined in OpenAPI

        :param sponsor_candidate_id: The sponsor_candidate_id of this CommitteeSponsorCandidateListInner.
        :param sponsor_candidate_name: The sponsor_candidate_name of this CommitteeSponsorCandidateListInner.
        """
        self.openapi_types = {
            'sponsor_candidate_id': str,
            'sponsor_candidate_name': str
        }

        self.attribute_map = {
            'sponsor_candidate_id': 'sponsor_candidate_id',
            'sponsor_candidate_name': 'sponsor_candidate_name'
        }

        self._sponsor_candidate_id = sponsor_candidate_id
        self._sponsor_candidate_name = sponsor_candidate_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommitteeSponsorCandidateListInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Committee_sponsor_candidate_list_inner of this CommitteeSponsorCandidateListInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sponsor_candidate_id(self):
        """Gets the sponsor_candidate_id of this CommitteeSponsorCandidateListInner.

         A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 

        :return: The sponsor_candidate_id of this CommitteeSponsorCandidateListInner.
        :rtype: str
        """
        return self._sponsor_candidate_id

    @sponsor_candidate_id.setter
    def sponsor_candidate_id(self, sponsor_candidate_id):
        """Sets the sponsor_candidate_id of this CommitteeSponsorCandidateListInner.

         A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 

        :param sponsor_candidate_id: The sponsor_candidate_id of this CommitteeSponsorCandidateListInner.
        :type sponsor_candidate_id: str
        """

        self._sponsor_candidate_id = sponsor_candidate_id

    @property
    def sponsor_candidate_name(self):
        """Gets the sponsor_candidate_name of this CommitteeSponsorCandidateListInner.

        Name of candidate running for office

        :return: The sponsor_candidate_name of this CommitteeSponsorCandidateListInner.
        :rtype: str
        """
        return self._sponsor_candidate_name

    @sponsor_candidate_name.setter
    def sponsor_candidate_name(self, sponsor_candidate_name):
        """Sets the sponsor_candidate_name of this CommitteeSponsorCandidateListInner.

        Name of candidate running for office

        :param sponsor_candidate_name: The sponsor_candidate_name of this CommitteeSponsorCandidateListInner.
        :type sponsor_candidate_name: str
        """
        if sponsor_candidate_name is not None and len(sponsor_candidate_name) > 100:
            raise ValueError("Invalid value for `sponsor_candidate_name`, length must be less than or equal to `100`")

        self._sponsor_candidate_name = sponsor_candidate_name
