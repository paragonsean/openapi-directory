# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CandidateFlags(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, candidate_id: str=None, federal_funds_flag: bool=None, has_raised_funds: bool=None):
        """CandidateFlags - a model defined in OpenAPI

        :param candidate_id: The candidate_id of this CandidateFlags.
        :param federal_funds_flag: The federal_funds_flag of this CandidateFlags.
        :param has_raised_funds: The has_raised_funds of this CandidateFlags.
        """
        self.openapi_types = {
            'candidate_id': str,
            'federal_funds_flag': bool,
            'has_raised_funds': bool
        }

        self.attribute_map = {
            'candidate_id': 'candidate_id',
            'federal_funds_flag': 'federal_funds_flag',
            'has_raised_funds': 'has_raised_funds'
        }

        self._candidate_id = candidate_id
        self._federal_funds_flag = federal_funds_flag
        self._has_raised_funds = has_raised_funds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CandidateFlags':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CandidateFlags of this CandidateFlags.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def candidate_id(self):
        """Gets the candidate_id of this CandidateFlags.

         A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 

        :return: The candidate_id of this CandidateFlags.
        :rtype: str
        """
        return self._candidate_id

    @candidate_id.setter
    def candidate_id(self, candidate_id):
        """Sets the candidate_id of this CandidateFlags.

         A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 

        :param candidate_id: The candidate_id of this CandidateFlags.
        :type candidate_id: str
        """
        if candidate_id is None:
            raise ValueError("Invalid value for `candidate_id`, must not be `None`")

        self._candidate_id = candidate_id

    @property
    def federal_funds_flag(self):
        """Gets the federal_funds_flag of this CandidateFlags.

        A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.

        :return: The federal_funds_flag of this CandidateFlags.
        :rtype: bool
        """
        return self._federal_funds_flag

    @federal_funds_flag.setter
    def federal_funds_flag(self, federal_funds_flag):
        """Sets the federal_funds_flag of this CandidateFlags.

        A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.

        :param federal_funds_flag: The federal_funds_flag of this CandidateFlags.
        :type federal_funds_flag: bool
        """

        self._federal_funds_flag = federal_funds_flag

    @property
    def has_raised_funds(self):
        """Gets the has_raised_funds of this CandidateFlags.

        A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)

        :return: The has_raised_funds of this CandidateFlags.
        :rtype: bool
        """
        return self._has_raised_funds

    @has_raised_funds.setter
    def has_raised_funds(self, has_raised_funds):
        """Sets the has_raised_funds of this CandidateFlags.

        A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)

        :param has_raised_funds: The has_raised_funds of this CandidateFlags.
        :type has_raised_funds: bool
        """

        self._has_raised_funds = has_raised_funds
