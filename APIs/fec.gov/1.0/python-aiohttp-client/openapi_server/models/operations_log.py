# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OperationsLog(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amendment_indicator: str=None, beginning_image_number: str=None, candidate_committee_id: str=None, coverage_end_date: datetime=None, coverage_start_date: datetime=None, ending_image_number: str=None, form_type: str=None, receipt_date: datetime=None, report_type: str=None, report_year: int=None, status_num: int=None, sub_id: int=None, summary_data_complete_date: datetime=None, summary_data_verification_date: datetime=None, transaction_data_complete_date: date=None):
        """OperationsLog - a model defined in OpenAPI

        :param amendment_indicator: The amendment_indicator of this OperationsLog.
        :param beginning_image_number: The beginning_image_number of this OperationsLog.
        :param candidate_committee_id: The candidate_committee_id of this OperationsLog.
        :param coverage_end_date: The coverage_end_date of this OperationsLog.
        :param coverage_start_date: The coverage_start_date of this OperationsLog.
        :param ending_image_number: The ending_image_number of this OperationsLog.
        :param form_type: The form_type of this OperationsLog.
        :param receipt_date: The receipt_date of this OperationsLog.
        :param report_type: The report_type of this OperationsLog.
        :param report_year: The report_year of this OperationsLog.
        :param status_num: The status_num of this OperationsLog.
        :param sub_id: The sub_id of this OperationsLog.
        :param summary_data_complete_date: The summary_data_complete_date of this OperationsLog.
        :param summary_data_verification_date: The summary_data_verification_date of this OperationsLog.
        :param transaction_data_complete_date: The transaction_data_complete_date of this OperationsLog.
        """
        self.openapi_types = {
            'amendment_indicator': str,
            'beginning_image_number': str,
            'candidate_committee_id': str,
            'coverage_end_date': datetime,
            'coverage_start_date': datetime,
            'ending_image_number': str,
            'form_type': str,
            'receipt_date': datetime,
            'report_type': str,
            'report_year': int,
            'status_num': int,
            'sub_id': int,
            'summary_data_complete_date': datetime,
            'summary_data_verification_date': datetime,
            'transaction_data_complete_date': date
        }

        self.attribute_map = {
            'amendment_indicator': 'amendment_indicator',
            'beginning_image_number': 'beginning_image_number',
            'candidate_committee_id': 'candidate_committee_id',
            'coverage_end_date': 'coverage_end_date',
            'coverage_start_date': 'coverage_start_date',
            'ending_image_number': 'ending_image_number',
            'form_type': 'form_type',
            'receipt_date': 'receipt_date',
            'report_type': 'report_type',
            'report_year': 'report_year',
            'status_num': 'status_num',
            'sub_id': 'sub_id',
            'summary_data_complete_date': 'summary_data_complete_date',
            'summary_data_verification_date': 'summary_data_verification_date',
            'transaction_data_complete_date': 'transaction_data_complete_date'
        }

        self._amendment_indicator = amendment_indicator
        self._beginning_image_number = beginning_image_number
        self._candidate_committee_id = candidate_committee_id
        self._coverage_end_date = coverage_end_date
        self._coverage_start_date = coverage_start_date
        self._ending_image_number = ending_image_number
        self._form_type = form_type
        self._receipt_date = receipt_date
        self._report_type = report_type
        self._report_year = report_year
        self._status_num = status_num
        self._sub_id = sub_id
        self._summary_data_complete_date = summary_data_complete_date
        self._summary_data_verification_date = summary_data_verification_date
        self._transaction_data_complete_date = transaction_data_complete_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OperationsLog':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OperationsLog of this OperationsLog.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amendment_indicator(self):
        """Gets the amendment_indicator of this OperationsLog.

        Amendent types:     -N   new     -A   amendment     -T   terminated     -C   consolidated     -M   multi-candidate     -S   secondary  NULL might be new or amendment. If amendment indicator is null and the filings is the first or first in a chain treat it as if it was a new. If it is not the first or first in a chain then treat the filing as an amendment. 

        :return: The amendment_indicator of this OperationsLog.
        :rtype: str
        """
        return self._amendment_indicator

    @amendment_indicator.setter
    def amendment_indicator(self, amendment_indicator):
        """Sets the amendment_indicator of this OperationsLog.

        Amendent types:     -N   new     -A   amendment     -T   terminated     -C   consolidated     -M   multi-candidate     -S   secondary  NULL might be new or amendment. If amendment indicator is null and the filings is the first or first in a chain treat it as if it was a new. If it is not the first or first in a chain then treat the filing as an amendment. 

        :param amendment_indicator: The amendment_indicator of this OperationsLog.
        :type amendment_indicator: str
        """

        self._amendment_indicator = amendment_indicator

    @property
    def beginning_image_number(self):
        """Gets the beginning_image_number of this OperationsLog.

         Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document. 

        :return: The beginning_image_number of this OperationsLog.
        :rtype: str
        """
        return self._beginning_image_number

    @beginning_image_number.setter
    def beginning_image_number(self, beginning_image_number):
        """Sets the beginning_image_number of this OperationsLog.

         Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document. 

        :param beginning_image_number: The beginning_image_number of this OperationsLog.
        :type beginning_image_number: str
        """

        self._beginning_image_number = beginning_image_number

    @property
    def candidate_committee_id(self):
        """Gets the candidate_committee_id of this OperationsLog.

         A unique identifier of the registered filer. 

        :return: The candidate_committee_id of this OperationsLog.
        :rtype: str
        """
        return self._candidate_committee_id

    @candidate_committee_id.setter
    def candidate_committee_id(self, candidate_committee_id):
        """Sets the candidate_committee_id of this OperationsLog.

         A unique identifier of the registered filer. 

        :param candidate_committee_id: The candidate_committee_id of this OperationsLog.
        :type candidate_committee_id: str
        """

        self._candidate_committee_id = candidate_committee_id

    @property
    def coverage_end_date(self):
        """Gets the coverage_end_date of this OperationsLog.

        Ending date of the reporting period

        :return: The coverage_end_date of this OperationsLog.
        :rtype: datetime
        """
        return self._coverage_end_date

    @coverage_end_date.setter
    def coverage_end_date(self, coverage_end_date):
        """Sets the coverage_end_date of this OperationsLog.

        Ending date of the reporting period

        :param coverage_end_date: The coverage_end_date of this OperationsLog.
        :type coverage_end_date: datetime
        """

        self._coverage_end_date = coverage_end_date

    @property
    def coverage_start_date(self):
        """Gets the coverage_start_date of this OperationsLog.

        Beginning date of the reporting period

        :return: The coverage_start_date of this OperationsLog.
        :rtype: datetime
        """
        return self._coverage_start_date

    @coverage_start_date.setter
    def coverage_start_date(self, coverage_start_date):
        """Sets the coverage_start_date of this OperationsLog.

        Beginning date of the reporting period

        :param coverage_start_date: The coverage_start_date of this OperationsLog.
        :type coverage_start_date: datetime
        """

        self._coverage_start_date = coverage_start_date

    @property
    def ending_image_number(self):
        """Gets the ending_image_number of this OperationsLog.

        Image number is an unique identifier for each page the electronic or paper report. The last image number corresponds to the image number for the last page of the document.

        :return: The ending_image_number of this OperationsLog.
        :rtype: str
        """
        return self._ending_image_number

    @ending_image_number.setter
    def ending_image_number(self, ending_image_number):
        """Sets the ending_image_number of this OperationsLog.

        Image number is an unique identifier for each page the electronic or paper report. The last image number corresponds to the image number for the last page of the document.

        :param ending_image_number: The ending_image_number of this OperationsLog.
        :type ending_image_number: str
        """

        self._ending_image_number = ending_image_number

    @property
    def form_type(self):
        """Gets the form_type of this OperationsLog.

        The form where the underlying data comes from, for example, Form 1 would appear as F1:     - F1   Statement of Organization     - F1M  Notification of Multicandidate Status     - F2   Statement of Candidacy     - F3   Report of Receipts and Disbursements for an Authorized Committee     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention     - F5   Report of Independent Expenditures Made and Contributions Received     - F6   48 Hour Notice of Contributions/Loans Received     - F7   Report of Communication Costs by Corporations and Membership Organizations     - F8   Debt Settlement Plan     - F9   24 Hour Notice of Disbursements for Electioneering Communications     - F13  Report of Donations Accepted for Inaugural Committee     - F99  Miscellaneous Text     - FRQ  Request for Additional Information 

        :return: The form_type of this OperationsLog.
        :rtype: str
        """
        return self._form_type

    @form_type.setter
    def form_type(self, form_type):
        """Sets the form_type of this OperationsLog.

        The form where the underlying data comes from, for example, Form 1 would appear as F1:     - F1   Statement of Organization     - F1M  Notification of Multicandidate Status     - F2   Statement of Candidacy     - F3   Report of Receipts and Disbursements for an Authorized Committee     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention     - F5   Report of Independent Expenditures Made and Contributions Received     - F6   48 Hour Notice of Contributions/Loans Received     - F7   Report of Communication Costs by Corporations and Membership Organizations     - F8   Debt Settlement Plan     - F9   24 Hour Notice of Disbursements for Electioneering Communications     - F13  Report of Donations Accepted for Inaugural Committee     - F99  Miscellaneous Text     - FRQ  Request for Additional Information 

        :param form_type: The form_type of this OperationsLog.
        :type form_type: str
        """

        self._form_type = form_type

    @property
    def receipt_date(self):
        """Gets the receipt_date of this OperationsLog.

        Date the FEC received the electronic or paper record

        :return: The receipt_date of this OperationsLog.
        :rtype: datetime
        """
        return self._receipt_date

    @receipt_date.setter
    def receipt_date(self, receipt_date):
        """Sets the receipt_date of this OperationsLog.

        Date the FEC received the electronic or paper record

        :param receipt_date: The receipt_date of this OperationsLog.
        :type receipt_date: datetime
        """

        self._receipt_date = receipt_date

    @property
    def report_type(self):
        """Gets the report_type of this OperationsLog.

        Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 

        :return: The report_type of this OperationsLog.
        :rtype: str
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this OperationsLog.

        Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 

        :param report_type: The report_type of this OperationsLog.
        :type report_type: str
        """

        self._report_type = report_type

    @property
    def report_year(self):
        """Gets the report_year of this OperationsLog.

         Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 

        :return: The report_year of this OperationsLog.
        :rtype: int
        """
        return self._report_year

    @report_year.setter
    def report_year(self, report_year):
        """Sets the report_year of this OperationsLog.

         Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 

        :param report_year: The report_year of this OperationsLog.
        :type report_year: int
        """

        self._report_year = report_year

    @property
    def status_num(self):
        """Gets the status_num of this OperationsLog.

         Status of the transactional report.     -0- Transaction is entered            into the system.           But not verified.     -1- Transaction is verified. 

        :return: The status_num of this OperationsLog.
        :rtype: int
        """
        return self._status_num

    @status_num.setter
    def status_num(self, status_num):
        """Sets the status_num of this OperationsLog.

         Status of the transactional report.     -0- Transaction is entered            into the system.           But not verified.     -1- Transaction is verified. 

        :param status_num: The status_num of this OperationsLog.
        :type status_num: int
        """

        self._status_num = status_num

    @property
    def sub_id(self):
        """Gets the sub_id of this OperationsLog.

         A unique identifier of the transactional report. 

        :return: The sub_id of this OperationsLog.
        :rtype: int
        """
        return self._sub_id

    @sub_id.setter
    def sub_id(self, sub_id):
        """Sets the sub_id of this OperationsLog.

         A unique identifier of the transactional report. 

        :param sub_id: The sub_id of this OperationsLog.
        :type sub_id: int
        """

        self._sub_id = sub_id

    @property
    def summary_data_complete_date(self):
        """Gets the summary_data_complete_date of this OperationsLog.

         Date when the report is entered into the database 

        :return: The summary_data_complete_date of this OperationsLog.
        :rtype: datetime
        """
        return self._summary_data_complete_date

    @summary_data_complete_date.setter
    def summary_data_complete_date(self, summary_data_complete_date):
        """Sets the summary_data_complete_date of this OperationsLog.

         Date when the report is entered into the database 

        :param summary_data_complete_date: The summary_data_complete_date of this OperationsLog.
        :type summary_data_complete_date: datetime
        """

        self._summary_data_complete_date = summary_data_complete_date

    @property
    def summary_data_verification_date(self):
        """Gets the summary_data_verification_date of this OperationsLog.

         Same day or a day after the report is loaded in the database 

        :return: The summary_data_verification_date of this OperationsLog.
        :rtype: datetime
        """
        return self._summary_data_verification_date

    @summary_data_verification_date.setter
    def summary_data_verification_date(self, summary_data_verification_date):
        """Sets the summary_data_verification_date of this OperationsLog.

         Same day or a day after the report is loaded in the database 

        :param summary_data_verification_date: The summary_data_verification_date of this OperationsLog.
        :type summary_data_verification_date: datetime
        """

        self._summary_data_verification_date = summary_data_verification_date

    @property
    def transaction_data_complete_date(self):
        """Gets the transaction_data_complete_date of this OperationsLog.

         Date when the report is processed completely 

        :return: The transaction_data_complete_date of this OperationsLog.
        :rtype: date
        """
        return self._transaction_data_complete_date

    @transaction_data_complete_date.setter
    def transaction_data_complete_date(self, transaction_data_complete_date):
        """Sets the transaction_data_complete_date of this OperationsLog.

         Date when the report is processed completely 

        :param transaction_data_complete_date: The transaction_data_complete_date of this OperationsLog.
        :type transaction_data_complete_date: date
        """

        self._transaction_data_complete_date = transaction_data_complete_date
