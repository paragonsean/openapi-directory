# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.committee_detail_jfc_committee_inner import CommitteeDetailJfcCommitteeInner
from openapi_server import util


class CommitteeHistoryProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, affiliated_committee_name: str=None, candidate_ids: List[str]=None, city: str=None, committee_id: str=None, committee_label: str=None, committee_type: str=None, committee_type_full: str=None, convert_to_pac_flag: bool=None, cycle: int=None, cycles: List[int]=None, cycles_has_activity: List[int]=None, cycles_has_financial: List[int]=None, designation: str=None, designation_full: str=None, filing_frequency: str=None, first_f1_date: date=None, first_file_date: date=None, former_candidate_election_year: int=None, former_candidate_id: str=None, former_candidate_name: str=None, former_committee_name: str=None, is_active: bool=None, jfc_committee: List[CommitteeDetailJfcCommitteeInner]=None, last_cycle_has_activity: int=None, last_cycle_has_financial: int=None, last_f1_date: date=None, last_file_date: date=None, name: str=None, organization_type: str=None, organization_type_full: str=None, party: str=None, party_full: str=None, sponsor_candidate_ids: List[str]=None, state: str=None, state_full: str=None, street_1: str=None, street_2: str=None, treasurer_name: str=None, zip: str=None):
        """CommitteeHistoryProfile - a model defined in OpenAPI

        :param affiliated_committee_name: The affiliated_committee_name of this CommitteeHistoryProfile.
        :param candidate_ids: The candidate_ids of this CommitteeHistoryProfile.
        :param city: The city of this CommitteeHistoryProfile.
        :param committee_id: The committee_id of this CommitteeHistoryProfile.
        :param committee_label: The committee_label of this CommitteeHistoryProfile.
        :param committee_type: The committee_type of this CommitteeHistoryProfile.
        :param committee_type_full: The committee_type_full of this CommitteeHistoryProfile.
        :param convert_to_pac_flag: The convert_to_pac_flag of this CommitteeHistoryProfile.
        :param cycle: The cycle of this CommitteeHistoryProfile.
        :param cycles: The cycles of this CommitteeHistoryProfile.
        :param cycles_has_activity: The cycles_has_activity of this CommitteeHistoryProfile.
        :param cycles_has_financial: The cycles_has_financial of this CommitteeHistoryProfile.
        :param designation: The designation of this CommitteeHistoryProfile.
        :param designation_full: The designation_full of this CommitteeHistoryProfile.
        :param filing_frequency: The filing_frequency of this CommitteeHistoryProfile.
        :param first_f1_date: The first_f1_date of this CommitteeHistoryProfile.
        :param first_file_date: The first_file_date of this CommitteeHistoryProfile.
        :param former_candidate_election_year: The former_candidate_election_year of this CommitteeHistoryProfile.
        :param former_candidate_id: The former_candidate_id of this CommitteeHistoryProfile.
        :param former_candidate_name: The former_candidate_name of this CommitteeHistoryProfile.
        :param former_committee_name: The former_committee_name of this CommitteeHistoryProfile.
        :param is_active: The is_active of this CommitteeHistoryProfile.
        :param jfc_committee: The jfc_committee of this CommitteeHistoryProfile.
        :param last_cycle_has_activity: The last_cycle_has_activity of this CommitteeHistoryProfile.
        :param last_cycle_has_financial: The last_cycle_has_financial of this CommitteeHistoryProfile.
        :param last_f1_date: The last_f1_date of this CommitteeHistoryProfile.
        :param last_file_date: The last_file_date of this CommitteeHistoryProfile.
        :param name: The name of this CommitteeHistoryProfile.
        :param organization_type: The organization_type of this CommitteeHistoryProfile.
        :param organization_type_full: The organization_type_full of this CommitteeHistoryProfile.
        :param party: The party of this CommitteeHistoryProfile.
        :param party_full: The party_full of this CommitteeHistoryProfile.
        :param sponsor_candidate_ids: The sponsor_candidate_ids of this CommitteeHistoryProfile.
        :param state: The state of this CommitteeHistoryProfile.
        :param state_full: The state_full of this CommitteeHistoryProfile.
        :param street_1: The street_1 of this CommitteeHistoryProfile.
        :param street_2: The street_2 of this CommitteeHistoryProfile.
        :param treasurer_name: The treasurer_name of this CommitteeHistoryProfile.
        :param zip: The zip of this CommitteeHistoryProfile.
        """
        self.openapi_types = {
            'affiliated_committee_name': str,
            'candidate_ids': List[str],
            'city': str,
            'committee_id': str,
            'committee_label': str,
            'committee_type': str,
            'committee_type_full': str,
            'convert_to_pac_flag': bool,
            'cycle': int,
            'cycles': List[int],
            'cycles_has_activity': List[int],
            'cycles_has_financial': List[int],
            'designation': str,
            'designation_full': str,
            'filing_frequency': str,
            'first_f1_date': date,
            'first_file_date': date,
            'former_candidate_election_year': int,
            'former_candidate_id': str,
            'former_candidate_name': str,
            'former_committee_name': str,
            'is_active': bool,
            'jfc_committee': List[CommitteeDetailJfcCommitteeInner],
            'last_cycle_has_activity': int,
            'last_cycle_has_financial': int,
            'last_f1_date': date,
            'last_file_date': date,
            'name': str,
            'organization_type': str,
            'organization_type_full': str,
            'party': str,
            'party_full': str,
            'sponsor_candidate_ids': List[str],
            'state': str,
            'state_full': str,
            'street_1': str,
            'street_2': str,
            'treasurer_name': str,
            'zip': str
        }

        self.attribute_map = {
            'affiliated_committee_name': 'affiliated_committee_name',
            'candidate_ids': 'candidate_ids',
            'city': 'city',
            'committee_id': 'committee_id',
            'committee_label': 'committee_label',
            'committee_type': 'committee_type',
            'committee_type_full': 'committee_type_full',
            'convert_to_pac_flag': 'convert_to_pac_flag',
            'cycle': 'cycle',
            'cycles': 'cycles',
            'cycles_has_activity': 'cycles_has_activity',
            'cycles_has_financial': 'cycles_has_financial',
            'designation': 'designation',
            'designation_full': 'designation_full',
            'filing_frequency': 'filing_frequency',
            'first_f1_date': 'first_f1_date',
            'first_file_date': 'first_file_date',
            'former_candidate_election_year': 'former_candidate_election_year',
            'former_candidate_id': 'former_candidate_id',
            'former_candidate_name': 'former_candidate_name',
            'former_committee_name': 'former_committee_name',
            'is_active': 'is_active',
            'jfc_committee': 'jfc_committee',
            'last_cycle_has_activity': 'last_cycle_has_activity',
            'last_cycle_has_financial': 'last_cycle_has_financial',
            'last_f1_date': 'last_f1_date',
            'last_file_date': 'last_file_date',
            'name': 'name',
            'organization_type': 'organization_type',
            'organization_type_full': 'organization_type_full',
            'party': 'party',
            'party_full': 'party_full',
            'sponsor_candidate_ids': 'sponsor_candidate_ids',
            'state': 'state',
            'state_full': 'state_full',
            'street_1': 'street_1',
            'street_2': 'street_2',
            'treasurer_name': 'treasurer_name',
            'zip': 'zip'
        }

        self._affiliated_committee_name = affiliated_committee_name
        self._candidate_ids = candidate_ids
        self._city = city
        self._committee_id = committee_id
        self._committee_label = committee_label
        self._committee_type = committee_type
        self._committee_type_full = committee_type_full
        self._convert_to_pac_flag = convert_to_pac_flag
        self._cycle = cycle
        self._cycles = cycles
        self._cycles_has_activity = cycles_has_activity
        self._cycles_has_financial = cycles_has_financial
        self._designation = designation
        self._designation_full = designation_full
        self._filing_frequency = filing_frequency
        self._first_f1_date = first_f1_date
        self._first_file_date = first_file_date
        self._former_candidate_election_year = former_candidate_election_year
        self._former_candidate_id = former_candidate_id
        self._former_candidate_name = former_candidate_name
        self._former_committee_name = former_committee_name
        self._is_active = is_active
        self._jfc_committee = jfc_committee
        self._last_cycle_has_activity = last_cycle_has_activity
        self._last_cycle_has_financial = last_cycle_has_financial
        self._last_f1_date = last_f1_date
        self._last_file_date = last_file_date
        self._name = name
        self._organization_type = organization_type
        self._organization_type_full = organization_type_full
        self._party = party
        self._party_full = party_full
        self._sponsor_candidate_ids = sponsor_candidate_ids
        self._state = state
        self._state_full = state_full
        self._street_1 = street_1
        self._street_2 = street_2
        self._treasurer_name = treasurer_name
        self._zip = zip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommitteeHistoryProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommitteeHistoryProfile of this CommitteeHistoryProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def affiliated_committee_name(self):
        """Gets the affiliated_committee_name of this CommitteeHistoryProfile.

         Affiliated committee or connected organization 

        :return: The affiliated_committee_name of this CommitteeHistoryProfile.
        :rtype: str
        """
        return self._affiliated_committee_name

    @affiliated_committee_name.setter
    def affiliated_committee_name(self, affiliated_committee_name):
        """Sets the affiliated_committee_name of this CommitteeHistoryProfile.

         Affiliated committee or connected organization 

        :param affiliated_committee_name: The affiliated_committee_name of this CommitteeHistoryProfile.
        :type affiliated_committee_name: str
        """
        if affiliated_committee_name is not None and len(affiliated_committee_name) > 100:
            raise ValueError("Invalid value for `affiliated_committee_name`, length must be less than or equal to `100`")

        self._affiliated_committee_name = affiliated_committee_name

    @property
    def candidate_ids(self):
        """Gets the candidate_ids of this CommitteeHistoryProfile.

         A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 

        :return: The candidate_ids of this CommitteeHistoryProfile.
        :rtype: List[str]
        """
        return self._candidate_ids

    @candidate_ids.setter
    def candidate_ids(self, candidate_ids):
        """Sets the candidate_ids of this CommitteeHistoryProfile.

         A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 

        :param candidate_ids: The candidate_ids of this CommitteeHistoryProfile.
        :type candidate_ids: List[str]
        """

        self._candidate_ids = candidate_ids

    @property
    def city(self):
        """Gets the city of this CommitteeHistoryProfile.

         City of committee as reported on the Form 1 

        :return: The city of this CommitteeHistoryProfile.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this CommitteeHistoryProfile.

         City of committee as reported on the Form 1 

        :param city: The city of this CommitteeHistoryProfile.
        :type city: str
        """
        if city is not None and len(city) > 50:
            raise ValueError("Invalid value for `city`, length must be less than or equal to `50`")

        self._city = city

    @property
    def committee_id(self):
        """Gets the committee_id of this CommitteeHistoryProfile.

         A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 

        :return: The committee_id of this CommitteeHistoryProfile.
        :rtype: str
        """
        return self._committee_id

    @committee_id.setter
    def committee_id(self, committee_id):
        """Sets the committee_id of this CommitteeHistoryProfile.

         A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 

        :param committee_id: The committee_id of this CommitteeHistoryProfile.
        :type committee_id: str
        """
        if committee_id is None:
            raise ValueError("Invalid value for `committee_id`, must not be `None`")

        self._committee_id = committee_id

    @property
    def committee_label(self):
        """Gets the committee_label of this CommitteeHistoryProfile.

         Display the label of committee based on committee type, designation and organization type 

        :return: The committee_label of this CommitteeHistoryProfile.
        :rtype: str
        """
        return self._committee_label

    @committee_label.setter
    def committee_label(self, committee_label):
        """Sets the committee_label of this CommitteeHistoryProfile.

         Display the label of committee based on committee type, designation and organization type 

        :param committee_label: The committee_label of this CommitteeHistoryProfile.
        :type committee_label: str
        """

        self._committee_label = committee_label

    @property
    def committee_type(self):
        """Gets the committee_type of this CommitteeHistoryProfile.

        The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 

        :return: The committee_type of this CommitteeHistoryProfile.
        :rtype: str
        """
        return self._committee_type

    @committee_type.setter
    def committee_type(self, committee_type):
        """Sets the committee_type of this CommitteeHistoryProfile.

        The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 

        :param committee_type: The committee_type of this CommitteeHistoryProfile.
        :type committee_type: str
        """
        if committee_type is not None and len(committee_type) > 1:
            raise ValueError("Invalid value for `committee_type`, length must be less than or equal to `1`")

        self._committee_type = committee_type

    @property
    def committee_type_full(self):
        """Gets the committee_type_full of this CommitteeHistoryProfile.

        The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 

        :return: The committee_type_full of this CommitteeHistoryProfile.
        :rtype: str
        """
        return self._committee_type_full

    @committee_type_full.setter
    def committee_type_full(self, committee_type_full):
        """Sets the committee_type_full of this CommitteeHistoryProfile.

        The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 

        :param committee_type_full: The committee_type_full of this CommitteeHistoryProfile.
        :type committee_type_full: str
        """
        if committee_type_full is not None and len(committee_type_full) > 50:
            raise ValueError("Invalid value for `committee_type_full`, length must be less than or equal to `50`")

        self._committee_type_full = committee_type_full

    @property
    def convert_to_pac_flag(self):
        """Gets the convert_to_pac_flag of this CommitteeHistoryProfile.

        True indicates that a candidate committee had been converted to a PAC

        :return: The convert_to_pac_flag of this CommitteeHistoryProfile.
        :rtype: bool
        """
        return self._convert_to_pac_flag

    @convert_to_pac_flag.setter
    def convert_to_pac_flag(self, convert_to_pac_flag):
        """Sets the convert_to_pac_flag of this CommitteeHistoryProfile.

        True indicates that a candidate committee had been converted to a PAC

        :param convert_to_pac_flag: The convert_to_pac_flag of this CommitteeHistoryProfile.
        :type convert_to_pac_flag: bool
        """

        self._convert_to_pac_flag = convert_to_pac_flag

    @property
    def cycle(self):
        """Gets the cycle of this CommitteeHistoryProfile.

         A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year. 

        :return: The cycle of this CommitteeHistoryProfile.
        :rtype: int
        """
        return self._cycle

    @cycle.setter
    def cycle(self, cycle):
        """Sets the cycle of this CommitteeHistoryProfile.

         A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year. 

        :param cycle: The cycle of this CommitteeHistoryProfile.
        :type cycle: int
        """
        if cycle is None:
            raise ValueError("Invalid value for `cycle`, must not be `None`")

        self._cycle = cycle

    @property
    def cycles(self):
        """Gets the cycles of this CommitteeHistoryProfile.

         A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year. 

        :return: The cycles of this CommitteeHistoryProfile.
        :rtype: List[int]
        """
        return self._cycles

    @cycles.setter
    def cycles(self, cycles):
        """Sets the cycles of this CommitteeHistoryProfile.

         A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s) The cycle begins with an odd year and is named for its ending, even year. 

        :param cycles: The cycles of this CommitteeHistoryProfile.
        :type cycles: List[int]
        """

        self._cycles = cycles

    @property
    def cycles_has_activity(self):
        """Gets the cycles_has_activity of this CommitteeHistoryProfile.

         A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1), and the committee has filling activity during the cycle 

        :return: The cycles_has_activity of this CommitteeHistoryProfile.
        :rtype: List[int]
        """
        return self._cycles_has_activity

    @cycles_has_activity.setter
    def cycles_has_activity(self, cycles_has_activity):
        """Sets the cycles_has_activity of this CommitteeHistoryProfile.

         A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1), and the committee has filling activity during the cycle 

        :param cycles_has_activity: The cycles_has_activity of this CommitteeHistoryProfile.
        :type cycles_has_activity: List[int]
        """

        self._cycles_has_activity = cycles_has_activity

    @property
    def cycles_has_financial(self):
        """Gets the cycles_has_financial of this CommitteeHistoryProfile.

         A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s), and the committee files the financial reports ('F3', 'F3X', 'F3P', 'F3L', 'F4', 'F5', 'F7', 'F13') during this cycle. 

        :return: The cycles_has_financial of this CommitteeHistoryProfile.
        :rtype: List[int]
        """
        return self._cycles_has_financial

    @cycles_has_financial.setter
    def cycles_has_financial(self, cycles_has_financial):
        """Sets the cycles_has_financial of this CommitteeHistoryProfile.

         A two year election cycle that the committee was active- (after original registration date but before expiration date in Form 1s), and the committee files the financial reports ('F3', 'F3X', 'F3P', 'F3L', 'F4', 'F5', 'F7', 'F13') during this cycle. 

        :param cycles_has_financial: The cycles_has_financial of this CommitteeHistoryProfile.
        :type cycles_has_financial: List[int]
        """

        self._cycles_has_financial = cycles_has_financial

    @property
    def designation(self):
        """Gets the designation of this CommitteeHistoryProfile.

        The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 

        :return: The designation of this CommitteeHistoryProfile.
        :rtype: str
        """
        return self._designation

    @designation.setter
    def designation(self, designation):
        """Sets the designation of this CommitteeHistoryProfile.

        The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 

        :param designation: The designation of this CommitteeHistoryProfile.
        :type designation: str
        """
        if designation is not None and len(designation) > 1:
            raise ValueError("Invalid value for `designation`, length must be less than or equal to `1`")

        self._designation = designation

    @property
    def designation_full(self):
        """Gets the designation_full of this CommitteeHistoryProfile.

        The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 

        :return: The designation_full of this CommitteeHistoryProfile.
        :rtype: str
        """
        return self._designation_full

    @designation_full.setter
    def designation_full(self, designation_full):
        """Sets the designation_full of this CommitteeHistoryProfile.

        The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 

        :param designation_full: The designation_full of this CommitteeHistoryProfile.
        :type designation_full: str
        """
        if designation_full is not None and len(designation_full) > 25:
            raise ValueError("Invalid value for `designation_full`, length must be less than or equal to `25`")

        self._designation_full = designation_full

    @property
    def filing_frequency(self):
        """Gets the filing_frequency of this CommitteeHistoryProfile.

        The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 

        :return: The filing_frequency of this CommitteeHistoryProfile.
        :rtype: str
        """
        return self._filing_frequency

    @filing_frequency.setter
    def filing_frequency(self, filing_frequency):
        """Sets the filing_frequency of this CommitteeHistoryProfile.

        The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 

        :param filing_frequency: The filing_frequency of this CommitteeHistoryProfile.
        :type filing_frequency: str
        """
        if filing_frequency is not None and len(filing_frequency) > 1:
            raise ValueError("Invalid value for `filing_frequency`, length must be less than or equal to `1`")

        self._filing_frequency = filing_frequency

    @property
    def first_f1_date(self):
        """Gets the first_f1_date of this CommitteeHistoryProfile.

        The day the FEC received the committee's first Form 1

        :return: The first_f1_date of this CommitteeHistoryProfile.
        :rtype: date
        """
        return self._first_f1_date

    @first_f1_date.setter
    def first_f1_date(self, first_f1_date):
        """Sets the first_f1_date of this CommitteeHistoryProfile.

        The day the FEC received the committee's first Form 1

        :param first_f1_date: The first_f1_date of this CommitteeHistoryProfile.
        :type first_f1_date: date
        """

        self._first_f1_date = first_f1_date

    @property
    def first_file_date(self):
        """Gets the first_file_date of this CommitteeHistoryProfile.

        The day the FEC received the committee's first filing. This is usually a Form 1 committee registration.

        :return: The first_file_date of this CommitteeHistoryProfile.
        :rtype: date
        """
        return self._first_file_date

    @first_file_date.setter
    def first_file_date(self, first_file_date):
        """Sets the first_file_date of this CommitteeHistoryProfile.

        The day the FEC received the committee's first filing. This is usually a Form 1 committee registration.

        :param first_file_date: The first_file_date of this CommitteeHistoryProfile.
        :type first_file_date: date
        """

        self._first_file_date = first_file_date

    @property
    def former_candidate_election_year(self):
        """Gets the former_candidate_election_year of this CommitteeHistoryProfile.

        Year a candidate runs for federal office.

        :return: The former_candidate_election_year of this CommitteeHistoryProfile.
        :rtype: int
        """
        return self._former_candidate_election_year

    @former_candidate_election_year.setter
    def former_candidate_election_year(self, former_candidate_election_year):
        """Sets the former_candidate_election_year of this CommitteeHistoryProfile.

        Year a candidate runs for federal office.

        :param former_candidate_election_year: The former_candidate_election_year of this CommitteeHistoryProfile.
        :type former_candidate_election_year: int
        """

        self._former_candidate_election_year = former_candidate_election_year

    @property
    def former_candidate_id(self):
        """Gets the former_candidate_id of this CommitteeHistoryProfile.

         A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 

        :return: The former_candidate_id of this CommitteeHistoryProfile.
        :rtype: str
        """
        return self._former_candidate_id

    @former_candidate_id.setter
    def former_candidate_id(self, former_candidate_id):
        """Sets the former_candidate_id of this CommitteeHistoryProfile.

         A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 

        :param former_candidate_id: The former_candidate_id of this CommitteeHistoryProfile.
        :type former_candidate_id: str
        """
        if former_candidate_id is not None and len(former_candidate_id) > 9:
            raise ValueError("Invalid value for `former_candidate_id`, length must be less than or equal to `9`")

        self._former_candidate_id = former_candidate_id

    @property
    def former_candidate_name(self):
        """Gets the former_candidate_name of this CommitteeHistoryProfile.

        Name of candidate running for office

        :return: The former_candidate_name of this CommitteeHistoryProfile.
        :rtype: str
        """
        return self._former_candidate_name

    @former_candidate_name.setter
    def former_candidate_name(self, former_candidate_name):
        """Sets the former_candidate_name of this CommitteeHistoryProfile.

        Name of candidate running for office

        :param former_candidate_name: The former_candidate_name of this CommitteeHistoryProfile.
        :type former_candidate_name: str
        """
        if former_candidate_name is not None and len(former_candidate_name) > 90:
            raise ValueError("Invalid value for `former_candidate_name`, length must be less than or equal to `90`")

        self._former_candidate_name = former_candidate_name

    @property
    def former_committee_name(self):
        """Gets the former_committee_name of this CommitteeHistoryProfile.

        The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.

        :return: The former_committee_name of this CommitteeHistoryProfile.
        :rtype: str
        """
        return self._former_committee_name

    @former_committee_name.setter
    def former_committee_name(self, former_committee_name):
        """Sets the former_committee_name of this CommitteeHistoryProfile.

        The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.

        :param former_committee_name: The former_committee_name of this CommitteeHistoryProfile.
        :type former_committee_name: str
        """
        if former_committee_name is not None and len(former_committee_name) > 200:
            raise ValueError("Invalid value for `former_committee_name`, length must be less than or equal to `200`")

        self._former_committee_name = former_committee_name

    @property
    def is_active(self):
        """Gets the is_active of this CommitteeHistoryProfile.

         True indicates that a committee is active. 

        :return: The is_active of this CommitteeHistoryProfile.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this CommitteeHistoryProfile.

         True indicates that a committee is active. 

        :param is_active: The is_active of this CommitteeHistoryProfile.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def jfc_committee(self):
        """Gets the jfc_committee of this CommitteeHistoryProfile.


        :return: The jfc_committee of this CommitteeHistoryProfile.
        :rtype: List[CommitteeDetailJfcCommitteeInner]
        """
        return self._jfc_committee

    @jfc_committee.setter
    def jfc_committee(self, jfc_committee):
        """Sets the jfc_committee of this CommitteeHistoryProfile.


        :param jfc_committee: The jfc_committee of this CommitteeHistoryProfile.
        :type jfc_committee: List[CommitteeDetailJfcCommitteeInner]
        """

        self._jfc_committee = jfc_committee

    @property
    def last_cycle_has_activity(self):
        """Gets the last_cycle_has_activity of this CommitteeHistoryProfile.

         The latest two year election cycle that the committee has filings 

        :return: The last_cycle_has_activity of this CommitteeHistoryProfile.
        :rtype: int
        """
        return self._last_cycle_has_activity

    @last_cycle_has_activity.setter
    def last_cycle_has_activity(self, last_cycle_has_activity):
        """Sets the last_cycle_has_activity of this CommitteeHistoryProfile.

         The latest two year election cycle that the committee has filings 

        :param last_cycle_has_activity: The last_cycle_has_activity of this CommitteeHistoryProfile.
        :type last_cycle_has_activity: int
        """

        self._last_cycle_has_activity = last_cycle_has_activity

    @property
    def last_cycle_has_financial(self):
        """Gets the last_cycle_has_financial of this CommitteeHistoryProfile.

         The latest two year election cycle that the committee files the financial reports ('F3', 'F3X', 'F3P', 'F3L', 'F4', 'F5', 'F7', 'F13'). 

        :return: The last_cycle_has_financial of this CommitteeHistoryProfile.
        :rtype: int
        """
        return self._last_cycle_has_financial

    @last_cycle_has_financial.setter
    def last_cycle_has_financial(self, last_cycle_has_financial):
        """Sets the last_cycle_has_financial of this CommitteeHistoryProfile.

         The latest two year election cycle that the committee files the financial reports ('F3', 'F3X', 'F3P', 'F3L', 'F4', 'F5', 'F7', 'F13'). 

        :param last_cycle_has_financial: The last_cycle_has_financial of this CommitteeHistoryProfile.
        :type last_cycle_has_financial: int
        """

        self._last_cycle_has_financial = last_cycle_has_financial

    @property
    def last_f1_date(self):
        """Gets the last_f1_date of this CommitteeHistoryProfile.

        The day the FEC received the committee's most recent Form 1

        :return: The last_f1_date of this CommitteeHistoryProfile.
        :rtype: date
        """
        return self._last_f1_date

    @last_f1_date.setter
    def last_f1_date(self, last_f1_date):
        """Sets the last_f1_date of this CommitteeHistoryProfile.

        The day the FEC received the committee's most recent Form 1

        :param last_f1_date: The last_f1_date of this CommitteeHistoryProfile.
        :type last_f1_date: date
        """

        self._last_f1_date = last_f1_date

    @property
    def last_file_date(self):
        """Gets the last_file_date of this CommitteeHistoryProfile.

        The day the FEC received the committee's most recent filing

        :return: The last_file_date of this CommitteeHistoryProfile.
        :rtype: date
        """
        return self._last_file_date

    @last_file_date.setter
    def last_file_date(self, last_file_date):
        """Sets the last_file_date of this CommitteeHistoryProfile.

        The day the FEC received the committee's most recent filing

        :param last_file_date: The last_file_date of this CommitteeHistoryProfile.
        :type last_file_date: date
        """

        self._last_file_date = last_file_date

    @property
    def name(self):
        """Gets the name of this CommitteeHistoryProfile.

        The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.

        :return: The name of this CommitteeHistoryProfile.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CommitteeHistoryProfile.

        The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.

        :param name: The name of this CommitteeHistoryProfile.
        :type name: str
        """
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")

        self._name = name

    @property
    def organization_type(self):
        """Gets the organization_type of this CommitteeHistoryProfile.

        The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 

        :return: The organization_type of this CommitteeHistoryProfile.
        :rtype: str
        """
        return self._organization_type

    @organization_type.setter
    def organization_type(self, organization_type):
        """Sets the organization_type of this CommitteeHistoryProfile.

        The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 

        :param organization_type: The organization_type of this CommitteeHistoryProfile.
        :type organization_type: str
        """
        if organization_type is not None and len(organization_type) > 1:
            raise ValueError("Invalid value for `organization_type`, length must be less than or equal to `1`")

        self._organization_type = organization_type

    @property
    def organization_type_full(self):
        """Gets the organization_type_full of this CommitteeHistoryProfile.

        The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 

        :return: The organization_type_full of this CommitteeHistoryProfile.
        :rtype: str
        """
        return self._organization_type_full

    @organization_type_full.setter
    def organization_type_full(self, organization_type_full):
        """Sets the organization_type_full of this CommitteeHistoryProfile.

        The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 

        :param organization_type_full: The organization_type_full of this CommitteeHistoryProfile.
        :type organization_type_full: str
        """
        if organization_type_full is not None and len(organization_type_full) > 100:
            raise ValueError("Invalid value for `organization_type_full`, length must be less than or equal to `100`")

        self._organization_type_full = organization_type_full

    @property
    def party(self):
        """Gets the party of this CommitteeHistoryProfile.

        Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.

        :return: The party of this CommitteeHistoryProfile.
        :rtype: str
        """
        return self._party

    @party.setter
    def party(self, party):
        """Sets the party of this CommitteeHistoryProfile.

        Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.

        :param party: The party of this CommitteeHistoryProfile.
        :type party: str
        """
        if party is not None and len(party) > 3:
            raise ValueError("Invalid value for `party`, length must be less than or equal to `3`")

        self._party = party

    @property
    def party_full(self):
        """Gets the party_full of this CommitteeHistoryProfile.

        Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.

        :return: The party_full of this CommitteeHistoryProfile.
        :rtype: str
        """
        return self._party_full

    @party_full.setter
    def party_full(self, party_full):
        """Sets the party_full of this CommitteeHistoryProfile.

        Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.

        :param party_full: The party_full of this CommitteeHistoryProfile.
        :type party_full: str
        """
        if party_full is not None and len(party_full) > 50:
            raise ValueError("Invalid value for `party_full`, length must be less than or equal to `50`")

        self._party_full = party_full

    @property
    def sponsor_candidate_ids(self):
        """Gets the sponsor_candidate_ids of this CommitteeHistoryProfile.

         A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. This is a filter for Leadership PAC sponsor. 

        :return: The sponsor_candidate_ids of this CommitteeHistoryProfile.
        :rtype: List[str]
        """
        return self._sponsor_candidate_ids

    @sponsor_candidate_ids.setter
    def sponsor_candidate_ids(self, sponsor_candidate_ids):
        """Sets the sponsor_candidate_ids of this CommitteeHistoryProfile.

         A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. This is a filter for Leadership PAC sponsor. 

        :param sponsor_candidate_ids: The sponsor_candidate_ids of this CommitteeHistoryProfile.
        :type sponsor_candidate_ids: List[str]
        """

        self._sponsor_candidate_ids = sponsor_candidate_ids

    @property
    def state(self):
        """Gets the state of this CommitteeHistoryProfile.

         State of the committee's address as filed on the Form 1 

        :return: The state of this CommitteeHistoryProfile.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CommitteeHistoryProfile.

         State of the committee's address as filed on the Form 1 

        :param state: The state of this CommitteeHistoryProfile.
        :type state: str
        """
        if state is not None and len(state) > 2:
            raise ValueError("Invalid value for `state`, length must be less than or equal to `2`")

        self._state = state

    @property
    def state_full(self):
        """Gets the state_full of this CommitteeHistoryProfile.

         State of committee as reported on the Form 1 

        :return: The state_full of this CommitteeHistoryProfile.
        :rtype: str
        """
        return self._state_full

    @state_full.setter
    def state_full(self, state_full):
        """Sets the state_full of this CommitteeHistoryProfile.

         State of committee as reported on the Form 1 

        :param state_full: The state_full of this CommitteeHistoryProfile.
        :type state_full: str
        """
        if state_full is not None and len(state_full) > 50:
            raise ValueError("Invalid value for `state_full`, length must be less than or equal to `50`")

        self._state_full = state_full

    @property
    def street_1(self):
        """Gets the street_1 of this CommitteeHistoryProfile.

         Street address of committee as reported on the Form 1 

        :return: The street_1 of this CommitteeHistoryProfile.
        :rtype: str
        """
        return self._street_1

    @street_1.setter
    def street_1(self, street_1):
        """Sets the street_1 of this CommitteeHistoryProfile.

         Street address of committee as reported on the Form 1 

        :param street_1: The street_1 of this CommitteeHistoryProfile.
        :type street_1: str
        """
        if street_1 is not None and len(street_1) > 50:
            raise ValueError("Invalid value for `street_1`, length must be less than or equal to `50`")

        self._street_1 = street_1

    @property
    def street_2(self):
        """Gets the street_2 of this CommitteeHistoryProfile.

         Second line of street address of committee as reported on the Form 1 

        :return: The street_2 of this CommitteeHistoryProfile.
        :rtype: str
        """
        return self._street_2

    @street_2.setter
    def street_2(self, street_2):
        """Sets the street_2 of this CommitteeHistoryProfile.

         Second line of street address of committee as reported on the Form 1 

        :param street_2: The street_2 of this CommitteeHistoryProfile.
        :type street_2: str
        """
        if street_2 is not None and len(street_2) > 50:
            raise ValueError("Invalid value for `street_2`, length must be less than or equal to `50`")

        self._street_2 = street_2

    @property
    def treasurer_name(self):
        """Gets the treasurer_name of this CommitteeHistoryProfile.

        Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.

        :return: The treasurer_name of this CommitteeHistoryProfile.
        :rtype: str
        """
        return self._treasurer_name

    @treasurer_name.setter
    def treasurer_name(self, treasurer_name):
        """Sets the treasurer_name of this CommitteeHistoryProfile.

        Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.

        :param treasurer_name: The treasurer_name of this CommitteeHistoryProfile.
        :type treasurer_name: str
        """
        if treasurer_name is not None and len(treasurer_name) > 100:
            raise ValueError("Invalid value for `treasurer_name`, length must be less than or equal to `100`")

        self._treasurer_name = treasurer_name

    @property
    def zip(self):
        """Gets the zip of this CommitteeHistoryProfile.

         Zip code of committee as reported on the Form 1 

        :return: The zip of this CommitteeHistoryProfile.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this CommitteeHistoryProfile.

         Zip code of committee as reported on the Form 1 

        :param zip: The zip of this CommitteeHistoryProfile.
        :type zip: str
        """
        if zip is not None and len(zip) > 9:
            raise ValueError("Invalid value for `zip`, length must be less than or equal to `9`")

        self._zip = zip
