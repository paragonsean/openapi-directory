# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Filings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_bank_names: List[str]=None, amendment_chain: List[float]=None, amendment_indicator: str=None, amendment_version: int=None, bank_depository_city: str=None, bank_depository_name: str=None, bank_depository_state: str=None, bank_depository_street_1: str=None, bank_depository_street_2: str=None, bank_depository_zip: str=None, beginning_image_number: str=None, candidate_id: str=None, candidate_name: str=None, cash_on_hand_beginning_period: float=None, cash_on_hand_end_period: float=None, committee_id: str=None, committee_name: str=None, committee_type: str=None, coverage_end_date: date=None, coverage_start_date: date=None, csv_url: str=None, cycle: int=None, debts_owed_by_committee: float=None, debts_owed_to_committee: float=None, document_description: str=None, document_type: str=None, document_type_full: str=None, election_year: int=None, ending_image_number: str=None, fec_file_id: str=None, fec_url: str=None, file_number: int=None, form_category: str=None, form_type: str=None, house_personal_funds: float=None, html_url: str=None, is_amended: bool=None, means_filed: str=None, most_recent: bool=None, most_recent_file_number: int=None, net_donations: float=None, office: str=None, opposition_personal_funds: float=None, pages: int=None, party: str=None, pdf_url: str=None, previous_file_number: int=None, primary_general_indicator: str=None, receipt_date: date=None, report_type: str=None, report_type_full: str=None, report_year: int=None, request_type: str=None, senate_personal_funds: float=None, state: str=None, sub_id: str=None, total_communication_cost: float=None, total_disbursements: float=None, total_independent_expenditures: float=None, total_individual_contributions: float=None, total_receipts: float=None, treasurer_name: str=None, update_date: date=None):
        """Filings - a model defined in OpenAPI

        :param additional_bank_names: The additional_bank_names of this Filings.
        :param amendment_chain: The amendment_chain of this Filings.
        :param amendment_indicator: The amendment_indicator of this Filings.
        :param amendment_version: The amendment_version of this Filings.
        :param bank_depository_city: The bank_depository_city of this Filings.
        :param bank_depository_name: The bank_depository_name of this Filings.
        :param bank_depository_state: The bank_depository_state of this Filings.
        :param bank_depository_street_1: The bank_depository_street_1 of this Filings.
        :param bank_depository_street_2: The bank_depository_street_2 of this Filings.
        :param bank_depository_zip: The bank_depository_zip of this Filings.
        :param beginning_image_number: The beginning_image_number of this Filings.
        :param candidate_id: The candidate_id of this Filings.
        :param candidate_name: The candidate_name of this Filings.
        :param cash_on_hand_beginning_period: The cash_on_hand_beginning_period of this Filings.
        :param cash_on_hand_end_period: The cash_on_hand_end_period of this Filings.
        :param committee_id: The committee_id of this Filings.
        :param committee_name: The committee_name of this Filings.
        :param committee_type: The committee_type of this Filings.
        :param coverage_end_date: The coverage_end_date of this Filings.
        :param coverage_start_date: The coverage_start_date of this Filings.
        :param csv_url: The csv_url of this Filings.
        :param cycle: The cycle of this Filings.
        :param debts_owed_by_committee: The debts_owed_by_committee of this Filings.
        :param debts_owed_to_committee: The debts_owed_to_committee of this Filings.
        :param document_description: The document_description of this Filings.
        :param document_type: The document_type of this Filings.
        :param document_type_full: The document_type_full of this Filings.
        :param election_year: The election_year of this Filings.
        :param ending_image_number: The ending_image_number of this Filings.
        :param fec_file_id: The fec_file_id of this Filings.
        :param fec_url: The fec_url of this Filings.
        :param file_number: The file_number of this Filings.
        :param form_category: The form_category of this Filings.
        :param form_type: The form_type of this Filings.
        :param house_personal_funds: The house_personal_funds of this Filings.
        :param html_url: The html_url of this Filings.
        :param is_amended: The is_amended of this Filings.
        :param means_filed: The means_filed of this Filings.
        :param most_recent: The most_recent of this Filings.
        :param most_recent_file_number: The most_recent_file_number of this Filings.
        :param net_donations: The net_donations of this Filings.
        :param office: The office of this Filings.
        :param opposition_personal_funds: The opposition_personal_funds of this Filings.
        :param pages: The pages of this Filings.
        :param party: The party of this Filings.
        :param pdf_url: The pdf_url of this Filings.
        :param previous_file_number: The previous_file_number of this Filings.
        :param primary_general_indicator: The primary_general_indicator of this Filings.
        :param receipt_date: The receipt_date of this Filings.
        :param report_type: The report_type of this Filings.
        :param report_type_full: The report_type_full of this Filings.
        :param report_year: The report_year of this Filings.
        :param request_type: The request_type of this Filings.
        :param senate_personal_funds: The senate_personal_funds of this Filings.
        :param state: The state of this Filings.
        :param sub_id: The sub_id of this Filings.
        :param total_communication_cost: The total_communication_cost of this Filings.
        :param total_disbursements: The total_disbursements of this Filings.
        :param total_independent_expenditures: The total_independent_expenditures of this Filings.
        :param total_individual_contributions: The total_individual_contributions of this Filings.
        :param total_receipts: The total_receipts of this Filings.
        :param treasurer_name: The treasurer_name of this Filings.
        :param update_date: The update_date of this Filings.
        """
        self.openapi_types = {
            'additional_bank_names': List[str],
            'amendment_chain': List[float],
            'amendment_indicator': str,
            'amendment_version': int,
            'bank_depository_city': str,
            'bank_depository_name': str,
            'bank_depository_state': str,
            'bank_depository_street_1': str,
            'bank_depository_street_2': str,
            'bank_depository_zip': str,
            'beginning_image_number': str,
            'candidate_id': str,
            'candidate_name': str,
            'cash_on_hand_beginning_period': float,
            'cash_on_hand_end_period': float,
            'committee_id': str,
            'committee_name': str,
            'committee_type': str,
            'coverage_end_date': date,
            'coverage_start_date': date,
            'csv_url': str,
            'cycle': int,
            'debts_owed_by_committee': float,
            'debts_owed_to_committee': float,
            'document_description': str,
            'document_type': str,
            'document_type_full': str,
            'election_year': int,
            'ending_image_number': str,
            'fec_file_id': str,
            'fec_url': str,
            'file_number': int,
            'form_category': str,
            'form_type': str,
            'house_personal_funds': float,
            'html_url': str,
            'is_amended': bool,
            'means_filed': str,
            'most_recent': bool,
            'most_recent_file_number': int,
            'net_donations': float,
            'office': str,
            'opposition_personal_funds': float,
            'pages': int,
            'party': str,
            'pdf_url': str,
            'previous_file_number': int,
            'primary_general_indicator': str,
            'receipt_date': date,
            'report_type': str,
            'report_type_full': str,
            'report_year': int,
            'request_type': str,
            'senate_personal_funds': float,
            'state': str,
            'sub_id': str,
            'total_communication_cost': float,
            'total_disbursements': float,
            'total_independent_expenditures': float,
            'total_individual_contributions': float,
            'total_receipts': float,
            'treasurer_name': str,
            'update_date': date
        }

        self.attribute_map = {
            'additional_bank_names': 'additional_bank_names',
            'amendment_chain': 'amendment_chain',
            'amendment_indicator': 'amendment_indicator',
            'amendment_version': 'amendment_version',
            'bank_depository_city': 'bank_depository_city',
            'bank_depository_name': 'bank_depository_name',
            'bank_depository_state': 'bank_depository_state',
            'bank_depository_street_1': 'bank_depository_street_1',
            'bank_depository_street_2': 'bank_depository_street_2',
            'bank_depository_zip': 'bank_depository_zip',
            'beginning_image_number': 'beginning_image_number',
            'candidate_id': 'candidate_id',
            'candidate_name': 'candidate_name',
            'cash_on_hand_beginning_period': 'cash_on_hand_beginning_period',
            'cash_on_hand_end_period': 'cash_on_hand_end_period',
            'committee_id': 'committee_id',
            'committee_name': 'committee_name',
            'committee_type': 'committee_type',
            'coverage_end_date': 'coverage_end_date',
            'coverage_start_date': 'coverage_start_date',
            'csv_url': 'csv_url',
            'cycle': 'cycle',
            'debts_owed_by_committee': 'debts_owed_by_committee',
            'debts_owed_to_committee': 'debts_owed_to_committee',
            'document_description': 'document_description',
            'document_type': 'document_type',
            'document_type_full': 'document_type_full',
            'election_year': 'election_year',
            'ending_image_number': 'ending_image_number',
            'fec_file_id': 'fec_file_id',
            'fec_url': 'fec_url',
            'file_number': 'file_number',
            'form_category': 'form_category',
            'form_type': 'form_type',
            'house_personal_funds': 'house_personal_funds',
            'html_url': 'html_url',
            'is_amended': 'is_amended',
            'means_filed': 'means_filed',
            'most_recent': 'most_recent',
            'most_recent_file_number': 'most_recent_file_number',
            'net_donations': 'net_donations',
            'office': 'office',
            'opposition_personal_funds': 'opposition_personal_funds',
            'pages': 'pages',
            'party': 'party',
            'pdf_url': 'pdf_url',
            'previous_file_number': 'previous_file_number',
            'primary_general_indicator': 'primary_general_indicator',
            'receipt_date': 'receipt_date',
            'report_type': 'report_type',
            'report_type_full': 'report_type_full',
            'report_year': 'report_year',
            'request_type': 'request_type',
            'senate_personal_funds': 'senate_personal_funds',
            'state': 'state',
            'sub_id': 'sub_id',
            'total_communication_cost': 'total_communication_cost',
            'total_disbursements': 'total_disbursements',
            'total_independent_expenditures': 'total_independent_expenditures',
            'total_individual_contributions': 'total_individual_contributions',
            'total_receipts': 'total_receipts',
            'treasurer_name': 'treasurer_name',
            'update_date': 'update_date'
        }

        self._additional_bank_names = additional_bank_names
        self._amendment_chain = amendment_chain
        self._amendment_indicator = amendment_indicator
        self._amendment_version = amendment_version
        self._bank_depository_city = bank_depository_city
        self._bank_depository_name = bank_depository_name
        self._bank_depository_state = bank_depository_state
        self._bank_depository_street_1 = bank_depository_street_1
        self._bank_depository_street_2 = bank_depository_street_2
        self._bank_depository_zip = bank_depository_zip
        self._beginning_image_number = beginning_image_number
        self._candidate_id = candidate_id
        self._candidate_name = candidate_name
        self._cash_on_hand_beginning_period = cash_on_hand_beginning_period
        self._cash_on_hand_end_period = cash_on_hand_end_period
        self._committee_id = committee_id
        self._committee_name = committee_name
        self._committee_type = committee_type
        self._coverage_end_date = coverage_end_date
        self._coverage_start_date = coverage_start_date
        self._csv_url = csv_url
        self._cycle = cycle
        self._debts_owed_by_committee = debts_owed_by_committee
        self._debts_owed_to_committee = debts_owed_to_committee
        self._document_description = document_description
        self._document_type = document_type
        self._document_type_full = document_type_full
        self._election_year = election_year
        self._ending_image_number = ending_image_number
        self._fec_file_id = fec_file_id
        self._fec_url = fec_url
        self._file_number = file_number
        self._form_category = form_category
        self._form_type = form_type
        self._house_personal_funds = house_personal_funds
        self._html_url = html_url
        self._is_amended = is_amended
        self._means_filed = means_filed
        self._most_recent = most_recent
        self._most_recent_file_number = most_recent_file_number
        self._net_donations = net_donations
        self._office = office
        self._opposition_personal_funds = opposition_personal_funds
        self._pages = pages
        self._party = party
        self._pdf_url = pdf_url
        self._previous_file_number = previous_file_number
        self._primary_general_indicator = primary_general_indicator
        self._receipt_date = receipt_date
        self._report_type = report_type
        self._report_type_full = report_type_full
        self._report_year = report_year
        self._request_type = request_type
        self._senate_personal_funds = senate_personal_funds
        self._state = state
        self._sub_id = sub_id
        self._total_communication_cost = total_communication_cost
        self._total_disbursements = total_disbursements
        self._total_independent_expenditures = total_independent_expenditures
        self._total_individual_contributions = total_individual_contributions
        self._total_receipts = total_receipts
        self._treasurer_name = treasurer_name
        self._update_date = update_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Filings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Filings of this Filings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_bank_names(self):
        """Gets the additional_bank_names of this Filings.

         Additional banks or depositories in which the committee deposits funds, holds accounts, rents safety deposit boxes or maintains funds. 

        :return: The additional_bank_names of this Filings.
        :rtype: List[str]
        """
        return self._additional_bank_names

    @additional_bank_names.setter
    def additional_bank_names(self, additional_bank_names):
        """Sets the additional_bank_names of this Filings.

         Additional banks or depositories in which the committee deposits funds, holds accounts, rents safety deposit boxes or maintains funds. 

        :param additional_bank_names: The additional_bank_names of this Filings.
        :type additional_bank_names: List[str]
        """

        self._additional_bank_names = additional_bank_names

    @property
    def amendment_chain(self):
        """Gets the amendment_chain of this Filings.

         The first value in the chain is the original filing.  The ordering in the chain reflects the order the amendments were filed up to the amendment being inspected. 

        :return: The amendment_chain of this Filings.
        :rtype: List[float]
        """
        return self._amendment_chain

    @amendment_chain.setter
    def amendment_chain(self, amendment_chain):
        """Sets the amendment_chain of this Filings.

         The first value in the chain is the original filing.  The ordering in the chain reflects the order the amendments were filed up to the amendment being inspected. 

        :param amendment_chain: The amendment_chain of this Filings.
        :type amendment_chain: List[float]
        """

        self._amendment_chain = amendment_chain

    @property
    def amendment_indicator(self):
        """Gets the amendment_indicator of this Filings.

         The first value in the chain is the original filing.  The ordering in the chain reflects the order the amendments were filed up to the amendment being inspected. 

        :return: The amendment_indicator of this Filings.
        :rtype: str
        """
        return self._amendment_indicator

    @amendment_indicator.setter
    def amendment_indicator(self, amendment_indicator):
        """Sets the amendment_indicator of this Filings.

         The first value in the chain is the original filing.  The ordering in the chain reflects the order the amendments were filed up to the amendment being inspected. 

        :param amendment_indicator: The amendment_indicator of this Filings.
        :type amendment_indicator: str
        """

        self._amendment_indicator = amendment_indicator

    @property
    def amendment_version(self):
        """Gets the amendment_version of this Filings.

         Amendment version 

        :return: The amendment_version of this Filings.
        :rtype: int
        """
        return self._amendment_version

    @amendment_version.setter
    def amendment_version(self, amendment_version):
        """Sets the amendment_version of this Filings.

         Amendment version 

        :param amendment_version: The amendment_version of this Filings.
        :type amendment_version: int
        """

        self._amendment_version = amendment_version

    @property
    def bank_depository_city(self):
        """Gets the bank_depository_city of this Filings.

         City of bank or depository as reported on the Form 1 

        :return: The bank_depository_city of this Filings.
        :rtype: str
        """
        return self._bank_depository_city

    @bank_depository_city.setter
    def bank_depository_city(self, bank_depository_city):
        """Sets the bank_depository_city of this Filings.

         City of bank or depository as reported on the Form 1 

        :param bank_depository_city: The bank_depository_city of this Filings.
        :type bank_depository_city: str
        """

        self._bank_depository_city = bank_depository_city

    @property
    def bank_depository_name(self):
        """Gets the bank_depository_name of this Filings.

         Primary bank or depository in which the committee deposits funds,holds accounts, rents safety deposit boxes or maintains funds. 

        :return: The bank_depository_name of this Filings.
        :rtype: str
        """
        return self._bank_depository_name

    @bank_depository_name.setter
    def bank_depository_name(self, bank_depository_name):
        """Sets the bank_depository_name of this Filings.

         Primary bank or depository in which the committee deposits funds,holds accounts, rents safety deposit boxes or maintains funds. 

        :param bank_depository_name: The bank_depository_name of this Filings.
        :type bank_depository_name: str
        """

        self._bank_depository_name = bank_depository_name

    @property
    def bank_depository_state(self):
        """Gets the bank_depository_state of this Filings.

         State of bank or depository as reported on the Form 1 

        :return: The bank_depository_state of this Filings.
        :rtype: str
        """
        return self._bank_depository_state

    @bank_depository_state.setter
    def bank_depository_state(self, bank_depository_state):
        """Sets the bank_depository_state of this Filings.

         State of bank or depository as reported on the Form 1 

        :param bank_depository_state: The bank_depository_state of this Filings.
        :type bank_depository_state: str
        """

        self._bank_depository_state = bank_depository_state

    @property
    def bank_depository_street_1(self):
        """Gets the bank_depository_street_1 of this Filings.

         Street of bank or depository as reported on their Form 1. 

        :return: The bank_depository_street_1 of this Filings.
        :rtype: str
        """
        return self._bank_depository_street_1

    @bank_depository_street_1.setter
    def bank_depository_street_1(self, bank_depository_street_1):
        """Sets the bank_depository_street_1 of this Filings.

         Street of bank or depository as reported on their Form 1. 

        :param bank_depository_street_1: The bank_depository_street_1 of this Filings.
        :type bank_depository_street_1: str
        """

        self._bank_depository_street_1 = bank_depository_street_1

    @property
    def bank_depository_street_2(self):
        """Gets the bank_depository_street_2 of this Filings.

         Second line of the street of bank or depository as reported on the Form 1 

        :return: The bank_depository_street_2 of this Filings.
        :rtype: str
        """
        return self._bank_depository_street_2

    @bank_depository_street_2.setter
    def bank_depository_street_2(self, bank_depository_street_2):
        """Sets the bank_depository_street_2 of this Filings.

         Second line of the street of bank or depository as reported on the Form 1 

        :param bank_depository_street_2: The bank_depository_street_2 of this Filings.
        :type bank_depository_street_2: str
        """

        self._bank_depository_street_2 = bank_depository_street_2

    @property
    def bank_depository_zip(self):
        """Gets the bank_depository_zip of this Filings.

         Zip code of bank or depository as reported on the Form 1 

        :return: The bank_depository_zip of this Filings.
        :rtype: str
        """
        return self._bank_depository_zip

    @bank_depository_zip.setter
    def bank_depository_zip(self, bank_depository_zip):
        """Sets the bank_depository_zip of this Filings.

         Zip code of bank or depository as reported on the Form 1 

        :param bank_depository_zip: The bank_depository_zip of this Filings.
        :type bank_depository_zip: str
        """

        self._bank_depository_zip = bank_depository_zip

    @property
    def beginning_image_number(self):
        """Gets the beginning_image_number of this Filings.


        :return: The beginning_image_number of this Filings.
        :rtype: str
        """
        return self._beginning_image_number

    @beginning_image_number.setter
    def beginning_image_number(self, beginning_image_number):
        """Sets the beginning_image_number of this Filings.


        :param beginning_image_number: The beginning_image_number of this Filings.
        :type beginning_image_number: str
        """

        self._beginning_image_number = beginning_image_number

    @property
    def candidate_id(self):
        """Gets the candidate_id of this Filings.

         A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 

        :return: The candidate_id of this Filings.
        :rtype: str
        """
        return self._candidate_id

    @candidate_id.setter
    def candidate_id(self, candidate_id):
        """Sets the candidate_id of this Filings.

         A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 

        :param candidate_id: The candidate_id of this Filings.
        :type candidate_id: str
        """

        self._candidate_id = candidate_id

    @property
    def candidate_name(self):
        """Gets the candidate_name of this Filings.

        Name of candidate running for office

        :return: The candidate_name of this Filings.
        :rtype: str
        """
        return self._candidate_name

    @candidate_name.setter
    def candidate_name(self, candidate_name):
        """Sets the candidate_name of this Filings.

        Name of candidate running for office

        :param candidate_name: The candidate_name of this Filings.
        :type candidate_name: str
        """

        self._candidate_name = candidate_name

    @property
    def cash_on_hand_beginning_period(self):
        """Gets the cash_on_hand_beginning_period of this Filings.

        Balance for the committee at the start of the two-year period

        :return: The cash_on_hand_beginning_period of this Filings.
        :rtype: float
        """
        return self._cash_on_hand_beginning_period

    @cash_on_hand_beginning_period.setter
    def cash_on_hand_beginning_period(self, cash_on_hand_beginning_period):
        """Sets the cash_on_hand_beginning_period of this Filings.

        Balance for the committee at the start of the two-year period

        :param cash_on_hand_beginning_period: The cash_on_hand_beginning_period of this Filings.
        :type cash_on_hand_beginning_period: float
        """

        self._cash_on_hand_beginning_period = cash_on_hand_beginning_period

    @property
    def cash_on_hand_end_period(self):
        """Gets the cash_on_hand_end_period of this Filings.

        Ending cash balance on the most recent filing

        :return: The cash_on_hand_end_period of this Filings.
        :rtype: float
        """
        return self._cash_on_hand_end_period

    @cash_on_hand_end_period.setter
    def cash_on_hand_end_period(self, cash_on_hand_end_period):
        """Sets the cash_on_hand_end_period of this Filings.

        Ending cash balance on the most recent filing

        :param cash_on_hand_end_period: The cash_on_hand_end_period of this Filings.
        :type cash_on_hand_end_period: float
        """

        self._cash_on_hand_end_period = cash_on_hand_end_period

    @property
    def committee_id(self):
        """Gets the committee_id of this Filings.

         A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 

        :return: The committee_id of this Filings.
        :rtype: str
        """
        return self._committee_id

    @committee_id.setter
    def committee_id(self, committee_id):
        """Sets the committee_id of this Filings.

         A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 

        :param committee_id: The committee_id of this Filings.
        :type committee_id: str
        """

        self._committee_id = committee_id

    @property
    def committee_name(self):
        """Gets the committee_name of this Filings.

        The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.

        :return: The committee_name of this Filings.
        :rtype: str
        """
        return self._committee_name

    @committee_name.setter
    def committee_name(self, committee_name):
        """Sets the committee_name of this Filings.

        The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.

        :param committee_name: The committee_name of this Filings.
        :type committee_name: str
        """

        self._committee_name = committee_name

    @property
    def committee_type(self):
        """Gets the committee_type of this Filings.

        The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 

        :return: The committee_type of this Filings.
        :rtype: str
        """
        return self._committee_type

    @committee_type.setter
    def committee_type(self, committee_type):
        """Sets the committee_type of this Filings.

        The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 

        :param committee_type: The committee_type of this Filings.
        :type committee_type: str
        """

        self._committee_type = committee_type

    @property
    def coverage_end_date(self):
        """Gets the coverage_end_date of this Filings.

        Ending date of the reporting period

        :return: The coverage_end_date of this Filings.
        :rtype: date
        """
        return self._coverage_end_date

    @coverage_end_date.setter
    def coverage_end_date(self, coverage_end_date):
        """Sets the coverage_end_date of this Filings.

        Ending date of the reporting period

        :param coverage_end_date: The coverage_end_date of this Filings.
        :type coverage_end_date: date
        """

        self._coverage_end_date = coverage_end_date

    @property
    def coverage_start_date(self):
        """Gets the coverage_start_date of this Filings.

        Beginning date of the reporting period

        :return: The coverage_start_date of this Filings.
        :rtype: date
        """
        return self._coverage_start_date

    @coverage_start_date.setter
    def coverage_start_date(self, coverage_start_date):
        """Sets the coverage_start_date of this Filings.

        Beginning date of the reporting period

        :param coverage_start_date: The coverage_start_date of this Filings.
        :type coverage_start_date: date
        """

        self._coverage_start_date = coverage_start_date

    @property
    def csv_url(self):
        """Gets the csv_url of this Filings.


        :return: The csv_url of this Filings.
        :rtype: str
        """
        return self._csv_url

    @csv_url.setter
    def csv_url(self, csv_url):
        """Sets the csv_url of this Filings.


        :param csv_url: The csv_url of this Filings.
        :type csv_url: str
        """

        self._csv_url = csv_url

    @property
    def cycle(self):
        """Gets the cycle of this Filings.

         Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 

        :return: The cycle of this Filings.
        :rtype: int
        """
        return self._cycle

    @cycle.setter
    def cycle(self, cycle):
        """Sets the cycle of this Filings.

         Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 

        :param cycle: The cycle of this Filings.
        :type cycle: int
        """

        self._cycle = cycle

    @property
    def debts_owed_by_committee(self):
        """Gets the debts_owed_by_committee of this Filings.

        Debts owed by the committee

        :return: The debts_owed_by_committee of this Filings.
        :rtype: float
        """
        return self._debts_owed_by_committee

    @debts_owed_by_committee.setter
    def debts_owed_by_committee(self, debts_owed_by_committee):
        """Sets the debts_owed_by_committee of this Filings.

        Debts owed by the committee

        :param debts_owed_by_committee: The debts_owed_by_committee of this Filings.
        :type debts_owed_by_committee: float
        """

        self._debts_owed_by_committee = debts_owed_by_committee

    @property
    def debts_owed_to_committee(self):
        """Gets the debts_owed_to_committee of this Filings.

        Debts owed to the committee

        :return: The debts_owed_to_committee of this Filings.
        :rtype: float
        """
        return self._debts_owed_to_committee

    @debts_owed_to_committee.setter
    def debts_owed_to_committee(self, debts_owed_to_committee):
        """Sets the debts_owed_to_committee of this Filings.

        Debts owed to the committee

        :param debts_owed_to_committee: The debts_owed_to_committee of this Filings.
        :type debts_owed_to_committee: float
        """

        self._debts_owed_to_committee = debts_owed_to_committee

    @property
    def document_description(self):
        """Gets the document_description of this Filings.


        :return: The document_description of this Filings.
        :rtype: str
        """
        return self._document_description

    @document_description.setter
    def document_description(self, document_description):
        """Sets the document_description of this Filings.


        :param document_description: The document_description of this Filings.
        :type document_description: str
        """

        self._document_description = document_description

    @property
    def document_type(self):
        """Gets the document_type of this Filings.

         The type of document for documents other than reports:     - 2 24 Hour Contribution Notice     - 4 48 Hour Contribution Notice     - A Debt Settlement Statement     - B Acknowledgment of Receipt of Debt Settlement Statement     - C RFAI: Debt Settlement First Notice     - D Commission Debt Settlement Review     - E Commission Response TO Debt Settlement Request     - F Administrative Termination     - G Debt Settlement Plan Amendment     - H Disavowal Notice     - I Disavowal Response     - J Conduit Report     - K Termination Approval     - L Repeat Non-Filer Notice     - M Filing Frequency Change Notice     - N Paper Amendment to Electronic Report     - O Acknowledgment of Filing Frequency Change     - S RFAI: Debt Settlement Second     - T Miscellaneous Report TO FEC     - V Repeat Violation Notice (441A OR 441B)     - P Notice of Paper Filing     - R F3L Filing Frequency Change Notice     - Q Acknowledgment of F3L Filing Frequency Change     - U Unregistered Committee Notice 

        :return: The document_type of this Filings.
        :rtype: str
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this Filings.

         The type of document for documents other than reports:     - 2 24 Hour Contribution Notice     - 4 48 Hour Contribution Notice     - A Debt Settlement Statement     - B Acknowledgment of Receipt of Debt Settlement Statement     - C RFAI: Debt Settlement First Notice     - D Commission Debt Settlement Review     - E Commission Response TO Debt Settlement Request     - F Administrative Termination     - G Debt Settlement Plan Amendment     - H Disavowal Notice     - I Disavowal Response     - J Conduit Report     - K Termination Approval     - L Repeat Non-Filer Notice     - M Filing Frequency Change Notice     - N Paper Amendment to Electronic Report     - O Acknowledgment of Filing Frequency Change     - S RFAI: Debt Settlement Second     - T Miscellaneous Report TO FEC     - V Repeat Violation Notice (441A OR 441B)     - P Notice of Paper Filing     - R F3L Filing Frequency Change Notice     - Q Acknowledgment of F3L Filing Frequency Change     - U Unregistered Committee Notice 

        :param document_type: The document_type of this Filings.
        :type document_type: str
        """

        self._document_type = document_type

    @property
    def document_type_full(self):
        """Gets the document_type_full of this Filings.

         The type of document for documents other than reports:     - 2 24 Hour Contribution Notice     - 4 48 Hour Contribution Notice     - A Debt Settlement Statement     - B Acknowledgment of Receipt of Debt Settlement Statement     - C RFAI: Debt Settlement First Notice     - D Commission Debt Settlement Review     - E Commission Response TO Debt Settlement Request     - F Administrative Termination     - G Debt Settlement Plan Amendment     - H Disavowal Notice     - I Disavowal Response     - J Conduit Report     - K Termination Approval     - L Repeat Non-Filer Notice     - M Filing Frequency Change Notice     - N Paper Amendment to Electronic Report     - O Acknowledgment of Filing Frequency Change     - S RFAI: Debt Settlement Second     - T Miscellaneous Report TO FEC     - V Repeat Violation Notice (441A OR 441B)     - P Notice of Paper Filing     - R F3L Filing Frequency Change Notice     - Q Acknowledgment of F3L Filing Frequency Change     - U Unregistered Committee Notice 

        :return: The document_type_full of this Filings.
        :rtype: str
        """
        return self._document_type_full

    @document_type_full.setter
    def document_type_full(self, document_type_full):
        """Sets the document_type_full of this Filings.

         The type of document for documents other than reports:     - 2 24 Hour Contribution Notice     - 4 48 Hour Contribution Notice     - A Debt Settlement Statement     - B Acknowledgment of Receipt of Debt Settlement Statement     - C RFAI: Debt Settlement First Notice     - D Commission Debt Settlement Review     - E Commission Response TO Debt Settlement Request     - F Administrative Termination     - G Debt Settlement Plan Amendment     - H Disavowal Notice     - I Disavowal Response     - J Conduit Report     - K Termination Approval     - L Repeat Non-Filer Notice     - M Filing Frequency Change Notice     - N Paper Amendment to Electronic Report     - O Acknowledgment of Filing Frequency Change     - S RFAI: Debt Settlement Second     - T Miscellaneous Report TO FEC     - V Repeat Violation Notice (441A OR 441B)     - P Notice of Paper Filing     - R F3L Filing Frequency Change Notice     - Q Acknowledgment of F3L Filing Frequency Change     - U Unregistered Committee Notice 

        :param document_type_full: The document_type_full of this Filings.
        :type document_type_full: str
        """

        self._document_type_full = document_type_full

    @property
    def election_year(self):
        """Gets the election_year of this Filings.

        Year of election

        :return: The election_year of this Filings.
        :rtype: int
        """
        return self._election_year

    @election_year.setter
    def election_year(self, election_year):
        """Sets the election_year of this Filings.

        Year of election

        :param election_year: The election_year of this Filings.
        :type election_year: int
        """

        self._election_year = election_year

    @property
    def ending_image_number(self):
        """Gets the ending_image_number of this Filings.


        :return: The ending_image_number of this Filings.
        :rtype: str
        """
        return self._ending_image_number

    @ending_image_number.setter
    def ending_image_number(self, ending_image_number):
        """Sets the ending_image_number of this Filings.


        :param ending_image_number: The ending_image_number of this Filings.
        :type ending_image_number: str
        """

        self._ending_image_number = ending_image_number

    @property
    def fec_file_id(self):
        """Gets the fec_file_id of this Filings.


        :return: The fec_file_id of this Filings.
        :rtype: str
        """
        return self._fec_file_id

    @fec_file_id.setter
    def fec_file_id(self, fec_file_id):
        """Sets the fec_file_id of this Filings.


        :param fec_file_id: The fec_file_id of this Filings.
        :type fec_file_id: str
        """

        self._fec_file_id = fec_file_id

    @property
    def fec_url(self):
        """Gets the fec_url of this Filings.


        :return: The fec_url of this Filings.
        :rtype: str
        """
        return self._fec_url

    @fec_url.setter
    def fec_url(self, fec_url):
        """Sets the fec_url of this Filings.


        :param fec_url: The fec_url of this Filings.
        :type fec_url: str
        """

        self._fec_url = fec_url

    @property
    def file_number(self):
        """Gets the file_number of this Filings.

        Filing ID number

        :return: The file_number of this Filings.
        :rtype: int
        """
        return self._file_number

    @file_number.setter
    def file_number(self, file_number):
        """Sets the file_number of this Filings.

        Filing ID number

        :param file_number: The file_number of this Filings.
        :type file_number: int
        """

        self._file_number = file_number

    @property
    def form_category(self):
        """Gets the form_category of this Filings.

         The forms filed are categorized based on the nature of the filing:     - REPORT F3, F3X, F3P, F3L, F4, F5, F7, F13     - NOTICE F5, F24, F6, F9, F10, F11     - STATEMENT F1, F2     - OTHER F1M, F8, F99, F12, FRQ 

        :return: The form_category of this Filings.
        :rtype: str
        """
        return self._form_category

    @form_category.setter
    def form_category(self, form_category):
        """Sets the form_category of this Filings.

         The forms filed are categorized based on the nature of the filing:     - REPORT F3, F3X, F3P, F3L, F4, F5, F7, F13     - NOTICE F5, F24, F6, F9, F10, F11     - STATEMENT F1, F2     - OTHER F1M, F8, F99, F12, FRQ 

        :param form_category: The form_category of this Filings.
        :type form_category: str
        """

        self._form_category = form_category

    @property
    def form_type(self):
        """Gets the form_type of this Filings.

        The form where the underlying data comes from, for example, Form 1 would appear as F1:     - F1   Statement of Organization     - F1M  Notification of Multicandidate Status     - F2   Statement of Candidacy     - F3   Report of Receipts and Disbursements for an Authorized Committee     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention     - F5   Report of Independent Expenditures Made and Contributions Received     - F6   48 Hour Notice of Contributions/Loans Received     - F7   Report of Communication Costs by Corporations and Membership Organizations     - F8   Debt Settlement Plan     - F9   24 Hour Notice of Disbursements for Electioneering Communications     - F13  Report of Donations Accepted for Inaugural Committee     - F99  Miscellaneous Text     - FRQ  Request for Additional Information 

        :return: The form_type of this Filings.
        :rtype: str
        """
        return self._form_type

    @form_type.setter
    def form_type(self, form_type):
        """Sets the form_type of this Filings.

        The form where the underlying data comes from, for example, Form 1 would appear as F1:     - F1   Statement of Organization     - F1M  Notification of Multicandidate Status     - F2   Statement of Candidacy     - F3   Report of Receipts and Disbursements for an Authorized Committee     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention     - F5   Report of Independent Expenditures Made and Contributions Received     - F6   48 Hour Notice of Contributions/Loans Received     - F7   Report of Communication Costs by Corporations and Membership Organizations     - F8   Debt Settlement Plan     - F9   24 Hour Notice of Disbursements for Electioneering Communications     - F13  Report of Donations Accepted for Inaugural Committee     - F99  Miscellaneous Text     - FRQ  Request for Additional Information 

        :param form_type: The form_type of this Filings.
        :type form_type: str
        """

        self._form_type = form_type

    @property
    def house_personal_funds(self):
        """Gets the house_personal_funds of this Filings.

        House personal funds

        :return: The house_personal_funds of this Filings.
        :rtype: float
        """
        return self._house_personal_funds

    @house_personal_funds.setter
    def house_personal_funds(self, house_personal_funds):
        """Sets the house_personal_funds of this Filings.

        House personal funds

        :param house_personal_funds: The house_personal_funds of this Filings.
        :type house_personal_funds: float
        """

        self._house_personal_funds = house_personal_funds

    @property
    def html_url(self):
        """Gets the html_url of this Filings.

         HTML link to the filing. 

        :return: The html_url of this Filings.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this Filings.

         HTML link to the filing. 

        :param html_url: The html_url of this Filings.
        :type html_url: str
        """

        self._html_url = html_url

    @property
    def is_amended(self):
        """Gets the is_amended of this Filings.

         False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment. 

        :return: The is_amended of this Filings.
        :rtype: bool
        """
        return self._is_amended

    @is_amended.setter
    def is_amended(self, is_amended):
        """Sets the is_amended of this Filings.

         False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment. 

        :param is_amended: The is_amended of this Filings.
        :type is_amended: bool
        """

        self._is_amended = is_amended

    @property
    def means_filed(self):
        """Gets the means_filed of this Filings.

        The method used to file with the FEC, either electronic or on paper.

        :return: The means_filed of this Filings.
        :rtype: str
        """
        return self._means_filed

    @means_filed.setter
    def means_filed(self, means_filed):
        """Sets the means_filed of this Filings.

        The method used to file with the FEC, either electronic or on paper.

        :param means_filed: The means_filed of this Filings.
        :type means_filed: str
        """

        self._means_filed = means_filed

    @property
    def most_recent(self):
        """Gets the most_recent of this Filings.

         Report is either new or is the most-recently filed amendment 

        :return: The most_recent of this Filings.
        :rtype: bool
        """
        return self._most_recent

    @most_recent.setter
    def most_recent(self, most_recent):
        """Sets the most_recent of this Filings.

         Report is either new or is the most-recently filed amendment 

        :param most_recent: The most_recent of this Filings.
        :type most_recent: bool
        """

        self._most_recent = most_recent

    @property
    def most_recent_file_number(self):
        """Gets the most_recent_file_number of this Filings.


        :return: The most_recent_file_number of this Filings.
        :rtype: int
        """
        return self._most_recent_file_number

    @most_recent_file_number.setter
    def most_recent_file_number(self, most_recent_file_number):
        """Sets the most_recent_file_number of this Filings.


        :param most_recent_file_number: The most_recent_file_number of this Filings.
        :type most_recent_file_number: int
        """

        self._most_recent_file_number = most_recent_file_number

    @property
    def net_donations(self):
        """Gets the net_donations of this Filings.

        Net donations

        :return: The net_donations of this Filings.
        :rtype: float
        """
        return self._net_donations

    @net_donations.setter
    def net_donations(self, net_donations):
        """Sets the net_donations of this Filings.

        Net donations

        :param net_donations: The net_donations of this Filings.
        :type net_donations: float
        """

        self._net_donations = net_donations

    @property
    def office(self):
        """Gets the office of this Filings.

        Federal office candidate runs for: H, S or P

        :return: The office of this Filings.
        :rtype: str
        """
        return self._office

    @office.setter
    def office(self, office):
        """Sets the office of this Filings.

        Federal office candidate runs for: H, S or P

        :param office: The office of this Filings.
        :type office: str
        """

        self._office = office

    @property
    def opposition_personal_funds(self):
        """Gets the opposition_personal_funds of this Filings.

        Opposition personal funds

        :return: The opposition_personal_funds of this Filings.
        :rtype: float
        """
        return self._opposition_personal_funds

    @opposition_personal_funds.setter
    def opposition_personal_funds(self, opposition_personal_funds):
        """Sets the opposition_personal_funds of this Filings.

        Opposition personal funds

        :param opposition_personal_funds: The opposition_personal_funds of this Filings.
        :type opposition_personal_funds: float
        """

        self._opposition_personal_funds = opposition_personal_funds

    @property
    def pages(self):
        """Gets the pages of this Filings.

         Number of pages in the document 

        :return: The pages of this Filings.
        :rtype: int
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this Filings.

         Number of pages in the document 

        :param pages: The pages of this Filings.
        :type pages: int
        """

        self._pages = pages

    @property
    def party(self):
        """Gets the party of this Filings.

        Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.

        :return: The party of this Filings.
        :rtype: str
        """
        return self._party

    @party.setter
    def party(self, party):
        """Sets the party of this Filings.

        Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.

        :param party: The party of this Filings.
        :type party: str
        """

        self._party = party

    @property
    def pdf_url(self):
        """Gets the pdf_url of this Filings.

         pdf link to the filing 

        :return: The pdf_url of this Filings.
        :rtype: str
        """
        return self._pdf_url

    @pdf_url.setter
    def pdf_url(self, pdf_url):
        """Sets the pdf_url of this Filings.

         pdf link to the filing 

        :param pdf_url: The pdf_url of this Filings.
        :type pdf_url: str
        """

        self._pdf_url = pdf_url

    @property
    def previous_file_number(self):
        """Gets the previous_file_number of this Filings.

         Previous filing ID number 

        :return: The previous_file_number of this Filings.
        :rtype: int
        """
        return self._previous_file_number

    @previous_file_number.setter
    def previous_file_number(self, previous_file_number):
        """Sets the previous_file_number of this Filings.

         Previous filing ID number 

        :param previous_file_number: The previous_file_number of this Filings.
        :type previous_file_number: int
        """

        self._previous_file_number = previous_file_number

    @property
    def primary_general_indicator(self):
        """Gets the primary_general_indicator of this Filings.

         Primary general indicator 

        :return: The primary_general_indicator of this Filings.
        :rtype: str
        """
        return self._primary_general_indicator

    @primary_general_indicator.setter
    def primary_general_indicator(self, primary_general_indicator):
        """Sets the primary_general_indicator of this Filings.

         Primary general indicator 

        :param primary_general_indicator: The primary_general_indicator of this Filings.
        :type primary_general_indicator: str
        """

        self._primary_general_indicator = primary_general_indicator

    @property
    def receipt_date(self):
        """Gets the receipt_date of this Filings.

        Date the FEC received the electronic or paper record

        :return: The receipt_date of this Filings.
        :rtype: date
        """
        return self._receipt_date

    @receipt_date.setter
    def receipt_date(self, receipt_date):
        """Sets the receipt_date of this Filings.

        Date the FEC received the electronic or paper record

        :param receipt_date: The receipt_date of this Filings.
        :type receipt_date: date
        """

        self._receipt_date = receipt_date

    @property
    def report_type(self):
        """Gets the report_type of this Filings.

        Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 

        :return: The report_type of this Filings.
        :rtype: str
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this Filings.

        Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 

        :param report_type: The report_type of this Filings.
        :type report_type: str
        """

        self._report_type = report_type

    @property
    def report_type_full(self):
        """Gets the report_type_full of this Filings.


        :return: The report_type_full of this Filings.
        :rtype: str
        """
        return self._report_type_full

    @report_type_full.setter
    def report_type_full(self, report_type_full):
        """Sets the report_type_full of this Filings.


        :param report_type_full: The report_type_full of this Filings.
        :type report_type_full: str
        """

        self._report_type_full = report_type_full

    @property
    def report_year(self):
        """Gets the report_year of this Filings.

         Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 

        :return: The report_year of this Filings.
        :rtype: int
        """
        return self._report_year

    @report_year.setter
    def report_year(self, report_year):
        """Sets the report_year of this Filings.

         Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 

        :param report_year: The report_year of this Filings.
        :type report_year: int
        """

        self._report_year = report_year

    @property
    def request_type(self):
        """Gets the request_type of this Filings.

         Requests for additional information (RFAIs) sent to filers. The request type is based on the type of document filed:     - 1 Statement of Organization     - 2 Report of Receipts and Expenditures (Form 3 and 3X)     - 3 Second Notice - Reports     - 4 Request for Additional Information     - 5 Informational - Reports     - 6 Second Notice - Statement of Organization     - 7 Failure to File     - 8 From Public Disclosure     - 9 From Multi Candidate Status 

        :return: The request_type of this Filings.
        :rtype: str
        """
        return self._request_type

    @request_type.setter
    def request_type(self, request_type):
        """Sets the request_type of this Filings.

         Requests for additional information (RFAIs) sent to filers. The request type is based on the type of document filed:     - 1 Statement of Organization     - 2 Report of Receipts and Expenditures (Form 3 and 3X)     - 3 Second Notice - Reports     - 4 Request for Additional Information     - 5 Informational - Reports     - 6 Second Notice - Statement of Organization     - 7 Failure to File     - 8 From Public Disclosure     - 9 From Multi Candidate Status 

        :param request_type: The request_type of this Filings.
        :type request_type: str
        """

        self._request_type = request_type

    @property
    def senate_personal_funds(self):
        """Gets the senate_personal_funds of this Filings.

        Senate personal funds

        :return: The senate_personal_funds of this Filings.
        :rtype: float
        """
        return self._senate_personal_funds

    @senate_personal_funds.setter
    def senate_personal_funds(self, senate_personal_funds):
        """Sets the senate_personal_funds of this Filings.

        Senate personal funds

        :param senate_personal_funds: The senate_personal_funds of this Filings.
        :type senate_personal_funds: float
        """

        self._senate_personal_funds = senate_personal_funds

    @property
    def state(self):
        """Gets the state of this Filings.

        US state or territory where a candidate runs for office

        :return: The state of this Filings.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Filings.

        US state or territory where a candidate runs for office

        :param state: The state of this Filings.
        :type state: str
        """

        self._state = state

    @property
    def sub_id(self):
        """Gets the sub_id of this Filings.


        :return: The sub_id of this Filings.
        :rtype: str
        """
        return self._sub_id

    @sub_id.setter
    def sub_id(self, sub_id):
        """Sets the sub_id of this Filings.


        :param sub_id: The sub_id of this Filings.
        :type sub_id: str
        """

        self._sub_id = sub_id

    @property
    def total_communication_cost(self):
        """Gets the total_communication_cost of this Filings.

        Total communications cost

        :return: The total_communication_cost of this Filings.
        :rtype: float
        """
        return self._total_communication_cost

    @total_communication_cost.setter
    def total_communication_cost(self, total_communication_cost):
        """Sets the total_communication_cost of this Filings.

        Total communications cost

        :param total_communication_cost: The total_communication_cost of this Filings.
        :type total_communication_cost: float
        """

        self._total_communication_cost = total_communication_cost

    @property
    def total_disbursements(self):
        """Gets the total_disbursements of this Filings.

        Total disbursements

        :return: The total_disbursements of this Filings.
        :rtype: float
        """
        return self._total_disbursements

    @total_disbursements.setter
    def total_disbursements(self, total_disbursements):
        """Sets the total_disbursements of this Filings.

        Total disbursements

        :param total_disbursements: The total_disbursements of this Filings.
        :type total_disbursements: float
        """

        self._total_disbursements = total_disbursements

    @property
    def total_independent_expenditures(self):
        """Gets the total_independent_expenditures of this Filings.

        Total independent expenditures

        :return: The total_independent_expenditures of this Filings.
        :rtype: float
        """
        return self._total_independent_expenditures

    @total_independent_expenditures.setter
    def total_independent_expenditures(self, total_independent_expenditures):
        """Sets the total_independent_expenditures of this Filings.

        Total independent expenditures

        :param total_independent_expenditures: The total_independent_expenditures of this Filings.
        :type total_independent_expenditures: float
        """

        self._total_independent_expenditures = total_independent_expenditures

    @property
    def total_individual_contributions(self):
        """Gets the total_individual_contributions of this Filings.

        Total individual contributions

        :return: The total_individual_contributions of this Filings.
        :rtype: float
        """
        return self._total_individual_contributions

    @total_individual_contributions.setter
    def total_individual_contributions(self, total_individual_contributions):
        """Sets the total_individual_contributions of this Filings.

        Total individual contributions

        :param total_individual_contributions: The total_individual_contributions of this Filings.
        :type total_individual_contributions: float
        """

        self._total_individual_contributions = total_individual_contributions

    @property
    def total_receipts(self):
        """Gets the total_receipts of this Filings.

        Total receipts

        :return: The total_receipts of this Filings.
        :rtype: float
        """
        return self._total_receipts

    @total_receipts.setter
    def total_receipts(self, total_receipts):
        """Sets the total_receipts of this Filings.

        Total receipts

        :param total_receipts: The total_receipts of this Filings.
        :type total_receipts: float
        """

        self._total_receipts = total_receipts

    @property
    def treasurer_name(self):
        """Gets the treasurer_name of this Filings.

        Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.

        :return: The treasurer_name of this Filings.
        :rtype: str
        """
        return self._treasurer_name

    @treasurer_name.setter
    def treasurer_name(self, treasurer_name):
        """Sets the treasurer_name of this Filings.

        Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.

        :param treasurer_name: The treasurer_name of this Filings.
        :type treasurer_name: str
        """

        self._treasurer_name = treasurer_name

    @property
    def update_date(self):
        """Gets the update_date of this Filings.

        Date the record was updated

        :return: The update_date of this Filings.
        :rtype: date
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this Filings.

        Date the record was updated

        :param update_date: The update_date of this Filings.
        :type update_date: date
        """

        self._update_date = update_date
