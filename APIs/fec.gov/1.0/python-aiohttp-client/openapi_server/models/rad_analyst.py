# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RadAnalyst(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analyst_id: float=None, analyst_short_id: float=None, assignment_update_date: date=None, committee_id: str=None, committee_name: str=None, email: str=None, first_name: str=None, last_name: str=None, rad_branch: str=None, telephone_ext: float=None, title: str=None):
        """RadAnalyst - a model defined in OpenAPI

        :param analyst_id: The analyst_id of this RadAnalyst.
        :param analyst_short_id: The analyst_short_id of this RadAnalyst.
        :param assignment_update_date: The assignment_update_date of this RadAnalyst.
        :param committee_id: The committee_id of this RadAnalyst.
        :param committee_name: The committee_name of this RadAnalyst.
        :param email: The email of this RadAnalyst.
        :param first_name: The first_name of this RadAnalyst.
        :param last_name: The last_name of this RadAnalyst.
        :param rad_branch: The rad_branch of this RadAnalyst.
        :param telephone_ext: The telephone_ext of this RadAnalyst.
        :param title: The title of this RadAnalyst.
        """
        self.openapi_types = {
            'analyst_id': float,
            'analyst_short_id': float,
            'assignment_update_date': date,
            'committee_id': str,
            'committee_name': str,
            'email': str,
            'first_name': str,
            'last_name': str,
            'rad_branch': str,
            'telephone_ext': float,
            'title': str
        }

        self.attribute_map = {
            'analyst_id': 'analyst_id',
            'analyst_short_id': 'analyst_short_id',
            'assignment_update_date': 'assignment_update_date',
            'committee_id': 'committee_id',
            'committee_name': 'committee_name',
            'email': 'email',
            'first_name': 'first_name',
            'last_name': 'last_name',
            'rad_branch': 'rad_branch',
            'telephone_ext': 'telephone_ext',
            'title': 'title'
        }

        self._analyst_id = analyst_id
        self._analyst_short_id = analyst_short_id
        self._assignment_update_date = assignment_update_date
        self._committee_id = committee_id
        self._committee_name = committee_name
        self._email = email
        self._first_name = first_name
        self._last_name = last_name
        self._rad_branch = rad_branch
        self._telephone_ext = telephone_ext
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RadAnalyst':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RadAnalyst of this RadAnalyst.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analyst_id(self):
        """Gets the analyst_id of this RadAnalyst.

        ID of RAD analyst.

        :return: The analyst_id of this RadAnalyst.
        :rtype: float
        """
        return self._analyst_id

    @analyst_id.setter
    def analyst_id(self, analyst_id):
        """Sets the analyst_id of this RadAnalyst.

        ID of RAD analyst.

        :param analyst_id: The analyst_id of this RadAnalyst.
        :type analyst_id: float
        """

        self._analyst_id = analyst_id

    @property
    def analyst_short_id(self):
        """Gets the analyst_short_id of this RadAnalyst.

        Short ID of RAD analyst.

        :return: The analyst_short_id of this RadAnalyst.
        :rtype: float
        """
        return self._analyst_short_id

    @analyst_short_id.setter
    def analyst_short_id(self, analyst_short_id):
        """Sets the analyst_short_id of this RadAnalyst.

        Short ID of RAD analyst.

        :param analyst_short_id: The analyst_short_id of this RadAnalyst.
        :type analyst_short_id: float
        """

        self._analyst_short_id = analyst_short_id

    @property
    def assignment_update_date(self):
        """Gets the assignment_update_date of this RadAnalyst.

        Date of most recent RAD analyst assignment change

        :return: The assignment_update_date of this RadAnalyst.
        :rtype: date
        """
        return self._assignment_update_date

    @assignment_update_date.setter
    def assignment_update_date(self, assignment_update_date):
        """Sets the assignment_update_date of this RadAnalyst.

        Date of most recent RAD analyst assignment change

        :param assignment_update_date: The assignment_update_date of this RadAnalyst.
        :type assignment_update_date: date
        """

        self._assignment_update_date = assignment_update_date

    @property
    def committee_id(self):
        """Gets the committee_id of this RadAnalyst.

         A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 

        :return: The committee_id of this RadAnalyst.
        :rtype: str
        """
        return self._committee_id

    @committee_id.setter
    def committee_id(self, committee_id):
        """Sets the committee_id of this RadAnalyst.

         A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits. 

        :param committee_id: The committee_id of this RadAnalyst.
        :type committee_id: str
        """
        if committee_id is None:
            raise ValueError("Invalid value for `committee_id`, must not be `None`")

        self._committee_id = committee_id

    @property
    def committee_name(self):
        """Gets the committee_name of this RadAnalyst.

        The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.

        :return: The committee_name of this RadAnalyst.
        :rtype: str
        """
        return self._committee_name

    @committee_name.setter
    def committee_name(self, committee_name):
        """Sets the committee_name of this RadAnalyst.

        The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.

        :param committee_name: The committee_name of this RadAnalyst.
        :type committee_name: str
        """
        if committee_name is not None and len(committee_name) > 100:
            raise ValueError("Invalid value for `committee_name`, length must be less than or equal to `100`")

        self._committee_name = committee_name

    @property
    def email(self):
        """Gets the email of this RadAnalyst.

        Email of RAD analyst

        :return: The email of this RadAnalyst.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this RadAnalyst.

        Email of RAD analyst

        :param email: The email of this RadAnalyst.
        :type email: str
        """
        if email is not None and len(email) > 100:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `100`")

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this RadAnalyst.

        Fist name of RAD analyst

        :return: The first_name of this RadAnalyst.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this RadAnalyst.

        Fist name of RAD analyst

        :param first_name: The first_name of this RadAnalyst.
        :type first_name: str
        """
        if first_name is not None and len(first_name) > 255:
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `255`")

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this RadAnalyst.

        Last name of RAD analyst

        :return: The last_name of this RadAnalyst.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this RadAnalyst.

        Last name of RAD analyst

        :param last_name: The last_name of this RadAnalyst.
        :type last_name: str
        """
        if last_name is not None and len(last_name) > 100:
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `100`")

        self._last_name = last_name

    @property
    def rad_branch(self):
        """Gets the rad_branch of this RadAnalyst.

        Branch of RAD analyst

        :return: The rad_branch of this RadAnalyst.
        :rtype: str
        """
        return self._rad_branch

    @rad_branch.setter
    def rad_branch(self, rad_branch):
        """Sets the rad_branch of this RadAnalyst.

        Branch of RAD analyst

        :param rad_branch: The rad_branch of this RadAnalyst.
        :type rad_branch: str
        """
        if rad_branch is not None and len(rad_branch) > 100:
            raise ValueError("Invalid value for `rad_branch`, length must be less than or equal to `100`")

        self._rad_branch = rad_branch

    @property
    def telephone_ext(self):
        """Gets the telephone_ext of this RadAnalyst.

        Telephone extension of RAD analyst

        :return: The telephone_ext of this RadAnalyst.
        :rtype: float
        """
        return self._telephone_ext

    @telephone_ext.setter
    def telephone_ext(self, telephone_ext):
        """Sets the telephone_ext of this RadAnalyst.

        Telephone extension of RAD analyst

        :param telephone_ext: The telephone_ext of this RadAnalyst.
        :type telephone_ext: float
        """

        self._telephone_ext = telephone_ext

    @property
    def title(self):
        """Gets the title of this RadAnalyst.

        Title of RAD analyst

        :return: The title of this RadAnalyst.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this RadAnalyst.

        Title of RAD analyst

        :param title: The title of this RadAnalyst.
        :type title: str
        """
        if title is not None and len(title) > 100:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `100`")

        self._title = title
