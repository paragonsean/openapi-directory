# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PresidentialByState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, candidate_id: str=None, contribution_receipt_amount: float=None, contribution_state: str=None, election_year: int=None):
        """PresidentialByState - a model defined in OpenAPI

        :param candidate_id: The candidate_id of this PresidentialByState.
        :param contribution_receipt_amount: The contribution_receipt_amount of this PresidentialByState.
        :param contribution_state: The contribution_state of this PresidentialByState.
        :param election_year: The election_year of this PresidentialByState.
        """
        self.openapi_types = {
            'candidate_id': str,
            'contribution_receipt_amount': float,
            'contribution_state': str,
            'election_year': int
        }

        self.attribute_map = {
            'candidate_id': 'candidate_id',
            'contribution_receipt_amount': 'contribution_receipt_amount',
            'contribution_state': 'contribution_state',
            'election_year': 'election_year'
        }

        self._candidate_id = candidate_id
        self._contribution_receipt_amount = contribution_receipt_amount
        self._contribution_state = contribution_state
        self._election_year = election_year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PresidentialByState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PresidentialByState of this PresidentialByState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def candidate_id(self):
        """Gets the candidate_id of this PresidentialByState.

         A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence.   -P00000001    All candidates   -P00000002    Democrasts   -P00000003    Republicans 

        :return: The candidate_id of this PresidentialByState.
        :rtype: str
        """
        return self._candidate_id

    @candidate_id.setter
    def candidate_id(self, candidate_id):
        """Sets the candidate_id of this PresidentialByState.

         A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence.   -P00000001    All candidates   -P00000002    Democrasts   -P00000003    Republicans 

        :param candidate_id: The candidate_id of this PresidentialByState.
        :type candidate_id: str
        """
        if candidate_id is not None and len(candidate_id) > 0:
            raise ValueError("Invalid value for `candidate_id`, length must be less than or equal to `0`")

        self._candidate_id = candidate_id

    @property
    def contribution_receipt_amount(self):
        """Gets the contribution_receipt_amount of this PresidentialByState.

         Contributions received 

        :return: The contribution_receipt_amount of this PresidentialByState.
        :rtype: float
        """
        return self._contribution_receipt_amount

    @contribution_receipt_amount.setter
    def contribution_receipt_amount(self, contribution_receipt_amount):
        """Sets the contribution_receipt_amount of this PresidentialByState.

         Contributions received 

        :param contribution_receipt_amount: The contribution_receipt_amount of this PresidentialByState.
        :type contribution_receipt_amount: float
        """

        self._contribution_receipt_amount = contribution_receipt_amount

    @property
    def contribution_state(self):
        """Gets the contribution_state of this PresidentialByState.

        State of contributor

        :return: The contribution_state of this PresidentialByState.
        :rtype: str
        """
        return self._contribution_state

    @contribution_state.setter
    def contribution_state(self, contribution_state):
        """Sets the contribution_state of this PresidentialByState.

        State of contributor

        :param contribution_state: The contribution_state of this PresidentialByState.
        :type contribution_state: str
        """
        if contribution_state is not None and len(contribution_state) > 2:
            raise ValueError("Invalid value for `contribution_state`, length must be less than or equal to `2`")

        self._contribution_state = contribution_state

    @property
    def election_year(self):
        """Gets the election_year of this PresidentialByState.

        Year of election

        :return: The election_year of this PresidentialByState.
        :rtype: int
        """
        return self._election_year

    @election_year.setter
    def election_year(self, election_year):
        """Sets the election_year of this PresidentialByState.

        Year of election

        :param election_year: The election_year of this PresidentialByState.
        :type election_year: int
        """

        self._election_year = election_year
