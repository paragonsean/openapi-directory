# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Election(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, candidate_election_year: int=None, candidate_id: str=None, candidate_name: str=None, candidate_pcc_id: str=None, candidate_pcc_name: str=None, cash_on_hand_end_period: float=None, committee_ids: List[str]=None, coverage_end_date: date=None, incumbent_challenge_full: str=None, party_full: str=None, total_disbursements: float=None, total_receipts: float=None):
        """Election - a model defined in OpenAPI

        :param candidate_election_year: The candidate_election_year of this Election.
        :param candidate_id: The candidate_id of this Election.
        :param candidate_name: The candidate_name of this Election.
        :param candidate_pcc_id: The candidate_pcc_id of this Election.
        :param candidate_pcc_name: The candidate_pcc_name of this Election.
        :param cash_on_hand_end_period: The cash_on_hand_end_period of this Election.
        :param committee_ids: The committee_ids of this Election.
        :param coverage_end_date: The coverage_end_date of this Election.
        :param incumbent_challenge_full: The incumbent_challenge_full of this Election.
        :param party_full: The party_full of this Election.
        :param total_disbursements: The total_disbursements of this Election.
        :param total_receipts: The total_receipts of this Election.
        """
        self.openapi_types = {
            'candidate_election_year': int,
            'candidate_id': str,
            'candidate_name': str,
            'candidate_pcc_id': str,
            'candidate_pcc_name': str,
            'cash_on_hand_end_period': float,
            'committee_ids': List[str],
            'coverage_end_date': date,
            'incumbent_challenge_full': str,
            'party_full': str,
            'total_disbursements': float,
            'total_receipts': float
        }

        self.attribute_map = {
            'candidate_election_year': 'candidate_election_year',
            'candidate_id': 'candidate_id',
            'candidate_name': 'candidate_name',
            'candidate_pcc_id': 'candidate_pcc_id',
            'candidate_pcc_name': 'candidate_pcc_name',
            'cash_on_hand_end_period': 'cash_on_hand_end_period',
            'committee_ids': 'committee_ids',
            'coverage_end_date': 'coverage_end_date',
            'incumbent_challenge_full': 'incumbent_challenge_full',
            'party_full': 'party_full',
            'total_disbursements': 'total_disbursements',
            'total_receipts': 'total_receipts'
        }

        self._candidate_election_year = candidate_election_year
        self._candidate_id = candidate_id
        self._candidate_name = candidate_name
        self._candidate_pcc_id = candidate_pcc_id
        self._candidate_pcc_name = candidate_pcc_name
        self._cash_on_hand_end_period = cash_on_hand_end_period
        self._committee_ids = committee_ids
        self._coverage_end_date = coverage_end_date
        self._incumbent_challenge_full = incumbent_challenge_full
        self._party_full = party_full
        self._total_disbursements = total_disbursements
        self._total_receipts = total_receipts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Election':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Election of this Election.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def candidate_election_year(self):
        """Gets the candidate_election_year of this Election.


        :return: The candidate_election_year of this Election.
        :rtype: int
        """
        return self._candidate_election_year

    @candidate_election_year.setter
    def candidate_election_year(self, candidate_election_year):
        """Sets the candidate_election_year of this Election.


        :param candidate_election_year: The candidate_election_year of this Election.
        :type candidate_election_year: int
        """

        self._candidate_election_year = candidate_election_year

    @property
    def candidate_id(self):
        """Gets the candidate_id of this Election.


        :return: The candidate_id of this Election.
        :rtype: str
        """
        return self._candidate_id

    @candidate_id.setter
    def candidate_id(self, candidate_id):
        """Sets the candidate_id of this Election.


        :param candidate_id: The candidate_id of this Election.
        :type candidate_id: str
        """

        self._candidate_id = candidate_id

    @property
    def candidate_name(self):
        """Gets the candidate_name of this Election.


        :return: The candidate_name of this Election.
        :rtype: str
        """
        return self._candidate_name

    @candidate_name.setter
    def candidate_name(self, candidate_name):
        """Sets the candidate_name of this Election.


        :param candidate_name: The candidate_name of this Election.
        :type candidate_name: str
        """

        self._candidate_name = candidate_name

    @property
    def candidate_pcc_id(self):
        """Gets the candidate_pcc_id of this Election.


        :return: The candidate_pcc_id of this Election.
        :rtype: str
        """
        return self._candidate_pcc_id

    @candidate_pcc_id.setter
    def candidate_pcc_id(self, candidate_pcc_id):
        """Sets the candidate_pcc_id of this Election.


        :param candidate_pcc_id: The candidate_pcc_id of this Election.
        :type candidate_pcc_id: str
        """

        self._candidate_pcc_id = candidate_pcc_id

    @property
    def candidate_pcc_name(self):
        """Gets the candidate_pcc_name of this Election.


        :return: The candidate_pcc_name of this Election.
        :rtype: str
        """
        return self._candidate_pcc_name

    @candidate_pcc_name.setter
    def candidate_pcc_name(self, candidate_pcc_name):
        """Sets the candidate_pcc_name of this Election.


        :param candidate_pcc_name: The candidate_pcc_name of this Election.
        :type candidate_pcc_name: str
        """

        self._candidate_pcc_name = candidate_pcc_name

    @property
    def cash_on_hand_end_period(self):
        """Gets the cash_on_hand_end_period of this Election.


        :return: The cash_on_hand_end_period of this Election.
        :rtype: float
        """
        return self._cash_on_hand_end_period

    @cash_on_hand_end_period.setter
    def cash_on_hand_end_period(self, cash_on_hand_end_period):
        """Sets the cash_on_hand_end_period of this Election.


        :param cash_on_hand_end_period: The cash_on_hand_end_period of this Election.
        :type cash_on_hand_end_period: float
        """

        self._cash_on_hand_end_period = cash_on_hand_end_period

    @property
    def committee_ids(self):
        """Gets the committee_ids of this Election.


        :return: The committee_ids of this Election.
        :rtype: List[str]
        """
        return self._committee_ids

    @committee_ids.setter
    def committee_ids(self, committee_ids):
        """Sets the committee_ids of this Election.


        :param committee_ids: The committee_ids of this Election.
        :type committee_ids: List[str]
        """

        self._committee_ids = committee_ids

    @property
    def coverage_end_date(self):
        """Gets the coverage_end_date of this Election.


        :return: The coverage_end_date of this Election.
        :rtype: date
        """
        return self._coverage_end_date

    @coverage_end_date.setter
    def coverage_end_date(self, coverage_end_date):
        """Sets the coverage_end_date of this Election.


        :param coverage_end_date: The coverage_end_date of this Election.
        :type coverage_end_date: date
        """

        self._coverage_end_date = coverage_end_date

    @property
    def incumbent_challenge_full(self):
        """Gets the incumbent_challenge_full of this Election.


        :return: The incumbent_challenge_full of this Election.
        :rtype: str
        """
        return self._incumbent_challenge_full

    @incumbent_challenge_full.setter
    def incumbent_challenge_full(self, incumbent_challenge_full):
        """Sets the incumbent_challenge_full of this Election.


        :param incumbent_challenge_full: The incumbent_challenge_full of this Election.
        :type incumbent_challenge_full: str
        """

        self._incumbent_challenge_full = incumbent_challenge_full

    @property
    def party_full(self):
        """Gets the party_full of this Election.


        :return: The party_full of this Election.
        :rtype: str
        """
        return self._party_full

    @party_full.setter
    def party_full(self, party_full):
        """Sets the party_full of this Election.


        :param party_full: The party_full of this Election.
        :type party_full: str
        """

        self._party_full = party_full

    @property
    def total_disbursements(self):
        """Gets the total_disbursements of this Election.


        :return: The total_disbursements of this Election.
        :rtype: float
        """
        return self._total_disbursements

    @total_disbursements.setter
    def total_disbursements(self, total_disbursements):
        """Sets the total_disbursements of this Election.


        :param total_disbursements: The total_disbursements of this Election.
        :type total_disbursements: float
        """

        self._total_disbursements = total_disbursements

    @property
    def total_receipts(self):
        """Gets the total_receipts of this Election.


        :return: The total_receipts of this Election.
        :rtype: float
        """
        return self._total_receipts

    @total_receipts.setter
    def total_receipts(self, total_receipts):
        """Sets the total_receipts of this Election.


        :param total_receipts: The total_receipts of this Election.
        :type total_receipts: float
        """

        self._total_receipts = total_receipts
