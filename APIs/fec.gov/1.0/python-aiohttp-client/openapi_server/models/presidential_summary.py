# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PresidentialSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, candidate_contributions_less_repayments: float=None, candidate_id: str=None, candidate_last_name: str=None, candidate_name: str=None, candidate_party_affiliation: str=None, cash_on_hand_end: float=None, committee_designation: str=None, committee_id: str=None, committee_name: str=None, committee_type: str=None, debts_owed_by_committee: float=None, disbursements_less_offsets: float=None, election_year: int=None, exempt_legal_accounting_disbursement: float=None, federal_funds: float=None, fundraising_disbursements: float=None, individual_contributions_less_refunds: float=None, net_receipts: float=None, offsets_to_operating_expenditures: float=None, operating_expenditures: float=None, other_disbursements: float=None, pac_contributions_less_refunds: float=None, party_contributions_less_refunds: float=None, repayments_loans_made_by_candidate: float=None, repayments_other_loans: float=None, rounded_net_receipts: float=None, total_contribution_refunds: float=None, total_loan_repayments_made: float=None, transfers_from_affiliated_committees: float=None, transfers_to_other_authorized_committees: float=None):
        """PresidentialSummary - a model defined in OpenAPI

        :param candidate_contributions_less_repayments: The candidate_contributions_less_repayments of this PresidentialSummary.
        :param candidate_id: The candidate_id of this PresidentialSummary.
        :param candidate_last_name: The candidate_last_name of this PresidentialSummary.
        :param candidate_name: The candidate_name of this PresidentialSummary.
        :param candidate_party_affiliation: The candidate_party_affiliation of this PresidentialSummary.
        :param cash_on_hand_end: The cash_on_hand_end of this PresidentialSummary.
        :param committee_designation: The committee_designation of this PresidentialSummary.
        :param committee_id: The committee_id of this PresidentialSummary.
        :param committee_name: The committee_name of this PresidentialSummary.
        :param committee_type: The committee_type of this PresidentialSummary.
        :param debts_owed_by_committee: The debts_owed_by_committee of this PresidentialSummary.
        :param disbursements_less_offsets: The disbursements_less_offsets of this PresidentialSummary.
        :param election_year: The election_year of this PresidentialSummary.
        :param exempt_legal_accounting_disbursement: The exempt_legal_accounting_disbursement of this PresidentialSummary.
        :param federal_funds: The federal_funds of this PresidentialSummary.
        :param fundraising_disbursements: The fundraising_disbursements of this PresidentialSummary.
        :param individual_contributions_less_refunds: The individual_contributions_less_refunds of this PresidentialSummary.
        :param net_receipts: The net_receipts of this PresidentialSummary.
        :param offsets_to_operating_expenditures: The offsets_to_operating_expenditures of this PresidentialSummary.
        :param operating_expenditures: The operating_expenditures of this PresidentialSummary.
        :param other_disbursements: The other_disbursements of this PresidentialSummary.
        :param pac_contributions_less_refunds: The pac_contributions_less_refunds of this PresidentialSummary.
        :param party_contributions_less_refunds: The party_contributions_less_refunds of this PresidentialSummary.
        :param repayments_loans_made_by_candidate: The repayments_loans_made_by_candidate of this PresidentialSummary.
        :param repayments_other_loans: The repayments_other_loans of this PresidentialSummary.
        :param rounded_net_receipts: The rounded_net_receipts of this PresidentialSummary.
        :param total_contribution_refunds: The total_contribution_refunds of this PresidentialSummary.
        :param total_loan_repayments_made: The total_loan_repayments_made of this PresidentialSummary.
        :param transfers_from_affiliated_committees: The transfers_from_affiliated_committees of this PresidentialSummary.
        :param transfers_to_other_authorized_committees: The transfers_to_other_authorized_committees of this PresidentialSummary.
        """
        self.openapi_types = {
            'candidate_contributions_less_repayments': float,
            'candidate_id': str,
            'candidate_last_name': str,
            'candidate_name': str,
            'candidate_party_affiliation': str,
            'cash_on_hand_end': float,
            'committee_designation': str,
            'committee_id': str,
            'committee_name': str,
            'committee_type': str,
            'debts_owed_by_committee': float,
            'disbursements_less_offsets': float,
            'election_year': int,
            'exempt_legal_accounting_disbursement': float,
            'federal_funds': float,
            'fundraising_disbursements': float,
            'individual_contributions_less_refunds': float,
            'net_receipts': float,
            'offsets_to_operating_expenditures': float,
            'operating_expenditures': float,
            'other_disbursements': float,
            'pac_contributions_less_refunds': float,
            'party_contributions_less_refunds': float,
            'repayments_loans_made_by_candidate': float,
            'repayments_other_loans': float,
            'rounded_net_receipts': float,
            'total_contribution_refunds': float,
            'total_loan_repayments_made': float,
            'transfers_from_affiliated_committees': float,
            'transfers_to_other_authorized_committees': float
        }

        self.attribute_map = {
            'candidate_contributions_less_repayments': 'candidate_contributions_less_repayments',
            'candidate_id': 'candidate_id',
            'candidate_last_name': 'candidate_last_name',
            'candidate_name': 'candidate_name',
            'candidate_party_affiliation': 'candidate_party_affiliation',
            'cash_on_hand_end': 'cash_on_hand_end',
            'committee_designation': 'committee_designation',
            'committee_id': 'committee_id',
            'committee_name': 'committee_name',
            'committee_type': 'committee_type',
            'debts_owed_by_committee': 'debts_owed_by_committee',
            'disbursements_less_offsets': 'disbursements_less_offsets',
            'election_year': 'election_year',
            'exempt_legal_accounting_disbursement': 'exempt_legal_accounting_disbursement',
            'federal_funds': 'federal_funds',
            'fundraising_disbursements': 'fundraising_disbursements',
            'individual_contributions_less_refunds': 'individual_contributions_less_refunds',
            'net_receipts': 'net_receipts',
            'offsets_to_operating_expenditures': 'offsets_to_operating_expenditures',
            'operating_expenditures': 'operating_expenditures',
            'other_disbursements': 'other_disbursements',
            'pac_contributions_less_refunds': 'pac_contributions_less_refunds',
            'party_contributions_less_refunds': 'party_contributions_less_refunds',
            'repayments_loans_made_by_candidate': 'repayments_loans_made_by_candidate',
            'repayments_other_loans': 'repayments_other_loans',
            'rounded_net_receipts': 'rounded_net_receipts',
            'total_contribution_refunds': 'total_contribution_refunds',
            'total_loan_repayments_made': 'total_loan_repayments_made',
            'transfers_from_affiliated_committees': 'transfers_from_affiliated_committees',
            'transfers_to_other_authorized_committees': 'transfers_to_other_authorized_committees'
        }

        self._candidate_contributions_less_repayments = candidate_contributions_less_repayments
        self._candidate_id = candidate_id
        self._candidate_last_name = candidate_last_name
        self._candidate_name = candidate_name
        self._candidate_party_affiliation = candidate_party_affiliation
        self._cash_on_hand_end = cash_on_hand_end
        self._committee_designation = committee_designation
        self._committee_id = committee_id
        self._committee_name = committee_name
        self._committee_type = committee_type
        self._debts_owed_by_committee = debts_owed_by_committee
        self._disbursements_less_offsets = disbursements_less_offsets
        self._election_year = election_year
        self._exempt_legal_accounting_disbursement = exempt_legal_accounting_disbursement
        self._federal_funds = federal_funds
        self._fundraising_disbursements = fundraising_disbursements
        self._individual_contributions_less_refunds = individual_contributions_less_refunds
        self._net_receipts = net_receipts
        self._offsets_to_operating_expenditures = offsets_to_operating_expenditures
        self._operating_expenditures = operating_expenditures
        self._other_disbursements = other_disbursements
        self._pac_contributions_less_refunds = pac_contributions_less_refunds
        self._party_contributions_less_refunds = party_contributions_less_refunds
        self._repayments_loans_made_by_candidate = repayments_loans_made_by_candidate
        self._repayments_other_loans = repayments_other_loans
        self._rounded_net_receipts = rounded_net_receipts
        self._total_contribution_refunds = total_contribution_refunds
        self._total_loan_repayments_made = total_loan_repayments_made
        self._transfers_from_affiliated_committees = transfers_from_affiliated_committees
        self._transfers_to_other_authorized_committees = transfers_to_other_authorized_committees

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PresidentialSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PresidentialSummary of this PresidentialSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def candidate_contributions_less_repayments(self):
        """Gets the candidate_contributions_less_repayments of this PresidentialSummary.

         candidate contributions less repayments 

        :return: The candidate_contributions_less_repayments of this PresidentialSummary.
        :rtype: float
        """
        return self._candidate_contributions_less_repayments

    @candidate_contributions_less_repayments.setter
    def candidate_contributions_less_repayments(self, candidate_contributions_less_repayments):
        """Sets the candidate_contributions_less_repayments of this PresidentialSummary.

         candidate contributions less repayments 

        :param candidate_contributions_less_repayments: The candidate_contributions_less_repayments of this PresidentialSummary.
        :type candidate_contributions_less_repayments: float
        """

        self._candidate_contributions_less_repayments = candidate_contributions_less_repayments

    @property
    def candidate_id(self):
        """Gets the candidate_id of this PresidentialSummary.

         A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence.   -P00000001    All candidates   -P00000002    Democrasts   -P00000003    Republicans 

        :return: The candidate_id of this PresidentialSummary.
        :rtype: str
        """
        return self._candidate_id

    @candidate_id.setter
    def candidate_id(self, candidate_id):
        """Sets the candidate_id of this PresidentialSummary.

         A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence.   -P00000001    All candidates   -P00000002    Democrasts   -P00000003    Republicans 

        :param candidate_id: The candidate_id of this PresidentialSummary.
        :type candidate_id: str
        """

        self._candidate_id = candidate_id

    @property
    def candidate_last_name(self):
        """Gets the candidate_last_name of this PresidentialSummary.

         Candidate last name 

        :return: The candidate_last_name of this PresidentialSummary.
        :rtype: str
        """
        return self._candidate_last_name

    @candidate_last_name.setter
    def candidate_last_name(self, candidate_last_name):
        """Sets the candidate_last_name of this PresidentialSummary.

         Candidate last name 

        :param candidate_last_name: The candidate_last_name of this PresidentialSummary.
        :type candidate_last_name: str
        """

        self._candidate_last_name = candidate_last_name

    @property
    def candidate_name(self):
        """Gets the candidate_name of this PresidentialSummary.

        Name of candidate running for office

        :return: The candidate_name of this PresidentialSummary.
        :rtype: str
        """
        return self._candidate_name

    @candidate_name.setter
    def candidate_name(self, candidate_name):
        """Sets the candidate_name of this PresidentialSummary.

        Name of candidate running for office

        :param candidate_name: The candidate_name of this PresidentialSummary.
        :type candidate_name: str
        """

        self._candidate_name = candidate_name

    @property
    def candidate_party_affiliation(self):
        """Gets the candidate_party_affiliation of this PresidentialSummary.

        Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.

        :return: The candidate_party_affiliation of this PresidentialSummary.
        :rtype: str
        """
        return self._candidate_party_affiliation

    @candidate_party_affiliation.setter
    def candidate_party_affiliation(self, candidate_party_affiliation):
        """Sets the candidate_party_affiliation of this PresidentialSummary.

        Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.

        :param candidate_party_affiliation: The candidate_party_affiliation of this PresidentialSummary.
        :type candidate_party_affiliation: str
        """

        self._candidate_party_affiliation = candidate_party_affiliation

    @property
    def cash_on_hand_end(self):
        """Gets the cash_on_hand_end of this PresidentialSummary.

        Ending cash balance on the most recent filing

        :return: The cash_on_hand_end of this PresidentialSummary.
        :rtype: float
        """
        return self._cash_on_hand_end

    @cash_on_hand_end.setter
    def cash_on_hand_end(self, cash_on_hand_end):
        """Sets the cash_on_hand_end of this PresidentialSummary.

        Ending cash balance on the most recent filing

        :param cash_on_hand_end: The cash_on_hand_end of this PresidentialSummary.
        :type cash_on_hand_end: float
        """

        self._cash_on_hand_end = cash_on_hand_end

    @property
    def committee_designation(self):
        """Gets the committee_designation of this PresidentialSummary.

        The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 

        :return: The committee_designation of this PresidentialSummary.
        :rtype: str
        """
        return self._committee_designation

    @committee_designation.setter
    def committee_designation(self, committee_designation):
        """Sets the committee_designation of this PresidentialSummary.

        The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 

        :param committee_designation: The committee_designation of this PresidentialSummary.
        :type committee_designation: str
        """

        self._committee_designation = committee_designation

    @property
    def committee_id(self):
        """Gets the committee_id of this PresidentialSummary.

         A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 

        :return: The committee_id of this PresidentialSummary.
        :rtype: str
        """
        return self._committee_id

    @committee_id.setter
    def committee_id(self, committee_id):
        """Sets the committee_id of this PresidentialSummary.

         A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. First character indicates office - [P]residential, [H]ouse, [S]enate]. Second character is the last digit of the two-year period the ID was created. Third and fourth is the candidate state. Presidential IDs don't have state. Fifth and sixth is the district when the candidate first ran. This does not change if the candidate/member's district changes during re-districting. Presidential IDs don't have districts. The rest is sequence. 

        :param committee_id: The committee_id of this PresidentialSummary.
        :type committee_id: str
        """

        self._committee_id = committee_id

    @property
    def committee_name(self):
        """Gets the committee_name of this PresidentialSummary.

        The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.

        :return: The committee_name of this PresidentialSummary.
        :rtype: str
        """
        return self._committee_name

    @committee_name.setter
    def committee_name(self, committee_name):
        """Sets the committee_name of this PresidentialSummary.

        The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.

        :param committee_name: The committee_name of this PresidentialSummary.
        :type committee_name: str
        """

        self._committee_name = committee_name

    @property
    def committee_type(self):
        """Gets the committee_type of this PresidentialSummary.

        The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 

        :return: The committee_type of this PresidentialSummary.
        :rtype: str
        """
        return self._committee_type

    @committee_type.setter
    def committee_type(self, committee_type):
        """Sets the committee_type of this PresidentialSummary.

        The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditure filer (not a committee)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 

        :param committee_type: The committee_type of this PresidentialSummary.
        :type committee_type: str
        """

        self._committee_type = committee_type

    @property
    def debts_owed_by_committee(self):
        """Gets the debts_owed_by_committee of this PresidentialSummary.

        Debts owed by the committee

        :return: The debts_owed_by_committee of this PresidentialSummary.
        :rtype: float
        """
        return self._debts_owed_by_committee

    @debts_owed_by_committee.setter
    def debts_owed_by_committee(self, debts_owed_by_committee):
        """Sets the debts_owed_by_committee of this PresidentialSummary.

        Debts owed by the committee

        :param debts_owed_by_committee: The debts_owed_by_committee of this PresidentialSummary.
        :type debts_owed_by_committee: float
        """

        self._debts_owed_by_committee = debts_owed_by_committee

    @property
    def disbursements_less_offsets(self):
        """Gets the disbursements_less_offsets of this PresidentialSummary.

         disbursements less offsets 

        :return: The disbursements_less_offsets of this PresidentialSummary.
        :rtype: float
        """
        return self._disbursements_less_offsets

    @disbursements_less_offsets.setter
    def disbursements_less_offsets(self, disbursements_less_offsets):
        """Sets the disbursements_less_offsets of this PresidentialSummary.

         disbursements less offsets 

        :param disbursements_less_offsets: The disbursements_less_offsets of this PresidentialSummary.
        :type disbursements_less_offsets: float
        """

        self._disbursements_less_offsets = disbursements_less_offsets

    @property
    def election_year(self):
        """Gets the election_year of this PresidentialSummary.

        Year of election

        :return: The election_year of this PresidentialSummary.
        :rtype: int
        """
        return self._election_year

    @election_year.setter
    def election_year(self, election_year):
        """Sets the election_year of this PresidentialSummary.

        Year of election

        :param election_year: The election_year of this PresidentialSummary.
        :type election_year: int
        """

        self._election_year = election_year

    @property
    def exempt_legal_accounting_disbursement(self):
        """Gets the exempt_legal_accounting_disbursement of this PresidentialSummary.

         exempt legal accounting disbursement 

        :return: The exempt_legal_accounting_disbursement of this PresidentialSummary.
        :rtype: float
        """
        return self._exempt_legal_accounting_disbursement

    @exempt_legal_accounting_disbursement.setter
    def exempt_legal_accounting_disbursement(self, exempt_legal_accounting_disbursement):
        """Sets the exempt_legal_accounting_disbursement of this PresidentialSummary.

         exempt legal accounting disbursement 

        :param exempt_legal_accounting_disbursement: The exempt_legal_accounting_disbursement of this PresidentialSummary.
        :type exempt_legal_accounting_disbursement: float
        """

        self._exempt_legal_accounting_disbursement = exempt_legal_accounting_disbursement

    @property
    def federal_funds(self):
        """Gets the federal_funds of this PresidentialSummary.

        Federal funds: Public funding of presidential elections means that qualified presidential candidates                 receive federal government funds to pay for the valid expenses of their political campaigns                 in both the primary and general elections.

        :return: The federal_funds of this PresidentialSummary.
        :rtype: float
        """
        return self._federal_funds

    @federal_funds.setter
    def federal_funds(self, federal_funds):
        """Sets the federal_funds of this PresidentialSummary.

        Federal funds: Public funding of presidential elections means that qualified presidential candidates                 receive federal government funds to pay for the valid expenses of their political campaigns                 in both the primary and general elections.

        :param federal_funds: The federal_funds of this PresidentialSummary.
        :type federal_funds: float
        """

        self._federal_funds = federal_funds

    @property
    def fundraising_disbursements(self):
        """Gets the fundraising_disbursements of this PresidentialSummary.

         fundraising disbursements 

        :return: The fundraising_disbursements of this PresidentialSummary.
        :rtype: float
        """
        return self._fundraising_disbursements

    @fundraising_disbursements.setter
    def fundraising_disbursements(self, fundraising_disbursements):
        """Sets the fundraising_disbursements of this PresidentialSummary.

         fundraising disbursements 

        :param fundraising_disbursements: The fundraising_disbursements of this PresidentialSummary.
        :type fundraising_disbursements: float
        """

        self._fundraising_disbursements = fundraising_disbursements

    @property
    def individual_contributions_less_refunds(self):
        """Gets the individual_contributions_less_refunds of this PresidentialSummary.

         individual contributions less refunds 

        :return: The individual_contributions_less_refunds of this PresidentialSummary.
        :rtype: float
        """
        return self._individual_contributions_less_refunds

    @individual_contributions_less_refunds.setter
    def individual_contributions_less_refunds(self, individual_contributions_less_refunds):
        """Sets the individual_contributions_less_refunds of this PresidentialSummary.

         individual contributions less refunds 

        :param individual_contributions_less_refunds: The individual_contributions_less_refunds of this PresidentialSummary.
        :type individual_contributions_less_refunds: float
        """

        self._individual_contributions_less_refunds = individual_contributions_less_refunds

    @property
    def net_receipts(self):
        """Gets the net_receipts of this PresidentialSummary.

         Contributions received 

        :return: The net_receipts of this PresidentialSummary.
        :rtype: float
        """
        return self._net_receipts

    @net_receipts.setter
    def net_receipts(self, net_receipts):
        """Sets the net_receipts of this PresidentialSummary.

         Contributions received 

        :param net_receipts: The net_receipts of this PresidentialSummary.
        :type net_receipts: float
        """

        self._net_receipts = net_receipts

    @property
    def offsets_to_operating_expenditures(self):
        """Gets the offsets_to_operating_expenditures of this PresidentialSummary.

        Offsets to operating expenditures

        :return: The offsets_to_operating_expenditures of this PresidentialSummary.
        :rtype: float
        """
        return self._offsets_to_operating_expenditures

    @offsets_to_operating_expenditures.setter
    def offsets_to_operating_expenditures(self, offsets_to_operating_expenditures):
        """Sets the offsets_to_operating_expenditures of this PresidentialSummary.

        Offsets to operating expenditures

        :param offsets_to_operating_expenditures: The offsets_to_operating_expenditures of this PresidentialSummary.
        :type offsets_to_operating_expenditures: float
        """

        self._offsets_to_operating_expenditures = offsets_to_operating_expenditures

    @property
    def operating_expenditures(self):
        """Gets the operating_expenditures of this PresidentialSummary.

        Total operating expenditures

        :return: The operating_expenditures of this PresidentialSummary.
        :rtype: float
        """
        return self._operating_expenditures

    @operating_expenditures.setter
    def operating_expenditures(self, operating_expenditures):
        """Sets the operating_expenditures of this PresidentialSummary.

        Total operating expenditures

        :param operating_expenditures: The operating_expenditures of this PresidentialSummary.
        :type operating_expenditures: float
        """

        self._operating_expenditures = operating_expenditures

    @property
    def other_disbursements(self):
        """Gets the other_disbursements of this PresidentialSummary.

        Other disbursements

        :return: The other_disbursements of this PresidentialSummary.
        :rtype: float
        """
        return self._other_disbursements

    @other_disbursements.setter
    def other_disbursements(self, other_disbursements):
        """Sets the other_disbursements of this PresidentialSummary.

        Other disbursements

        :param other_disbursements: The other_disbursements of this PresidentialSummary.
        :type other_disbursements: float
        """

        self._other_disbursements = other_disbursements

    @property
    def pac_contributions_less_refunds(self):
        """Gets the pac_contributions_less_refunds of this PresidentialSummary.

         pac contributions less refunds 

        :return: The pac_contributions_less_refunds of this PresidentialSummary.
        :rtype: float
        """
        return self._pac_contributions_less_refunds

    @pac_contributions_less_refunds.setter
    def pac_contributions_less_refunds(self, pac_contributions_less_refunds):
        """Sets the pac_contributions_less_refunds of this PresidentialSummary.

         pac contributions less refunds 

        :param pac_contributions_less_refunds: The pac_contributions_less_refunds of this PresidentialSummary.
        :type pac_contributions_less_refunds: float
        """

        self._pac_contributions_less_refunds = pac_contributions_less_refunds

    @property
    def party_contributions_less_refunds(self):
        """Gets the party_contributions_less_refunds of this PresidentialSummary.

         party contributions less refunds 

        :return: The party_contributions_less_refunds of this PresidentialSummary.
        :rtype: float
        """
        return self._party_contributions_less_refunds

    @party_contributions_less_refunds.setter
    def party_contributions_less_refunds(self, party_contributions_less_refunds):
        """Sets the party_contributions_less_refunds of this PresidentialSummary.

         party contributions less refunds 

        :param party_contributions_less_refunds: The party_contributions_less_refunds of this PresidentialSummary.
        :type party_contributions_less_refunds: float
        """

        self._party_contributions_less_refunds = party_contributions_less_refunds

    @property
    def repayments_loans_made_by_candidate(self):
        """Gets the repayments_loans_made_by_candidate of this PresidentialSummary.

         repayments loans made by candidate 

        :return: The repayments_loans_made_by_candidate of this PresidentialSummary.
        :rtype: float
        """
        return self._repayments_loans_made_by_candidate

    @repayments_loans_made_by_candidate.setter
    def repayments_loans_made_by_candidate(self, repayments_loans_made_by_candidate):
        """Sets the repayments_loans_made_by_candidate of this PresidentialSummary.

         repayments loans made by candidate 

        :param repayments_loans_made_by_candidate: The repayments_loans_made_by_candidate of this PresidentialSummary.
        :type repayments_loans_made_by_candidate: float
        """

        self._repayments_loans_made_by_candidate = repayments_loans_made_by_candidate

    @property
    def repayments_other_loans(self):
        """Gets the repayments_other_loans of this PresidentialSummary.

         repayments other loans 

        :return: The repayments_other_loans of this PresidentialSummary.
        :rtype: float
        """
        return self._repayments_other_loans

    @repayments_other_loans.setter
    def repayments_other_loans(self, repayments_other_loans):
        """Sets the repayments_other_loans of this PresidentialSummary.

         repayments other loans 

        :param repayments_other_loans: The repayments_other_loans of this PresidentialSummary.
        :type repayments_other_loans: float
        """

        self._repayments_other_loans = repayments_other_loans

    @property
    def rounded_net_receipts(self):
        """Gets the rounded_net_receipts of this PresidentialSummary.

         Net receipts, in millions 

        :return: The rounded_net_receipts of this PresidentialSummary.
        :rtype: float
        """
        return self._rounded_net_receipts

    @rounded_net_receipts.setter
    def rounded_net_receipts(self, rounded_net_receipts):
        """Sets the rounded_net_receipts of this PresidentialSummary.

         Net receipts, in millions 

        :param rounded_net_receipts: The rounded_net_receipts of this PresidentialSummary.
        :type rounded_net_receipts: float
        """

        self._rounded_net_receipts = rounded_net_receipts

    @property
    def total_contribution_refunds(self):
        """Gets the total_contribution_refunds of this PresidentialSummary.

         total contribution refunds 

        :return: The total_contribution_refunds of this PresidentialSummary.
        :rtype: float
        """
        return self._total_contribution_refunds

    @total_contribution_refunds.setter
    def total_contribution_refunds(self, total_contribution_refunds):
        """Sets the total_contribution_refunds of this PresidentialSummary.

         total contribution refunds 

        :param total_contribution_refunds: The total_contribution_refunds of this PresidentialSummary.
        :type total_contribution_refunds: float
        """

        self._total_contribution_refunds = total_contribution_refunds

    @property
    def total_loan_repayments_made(self):
        """Gets the total_loan_repayments_made of this PresidentialSummary.

         total loan repayments made 

        :return: The total_loan_repayments_made of this PresidentialSummary.
        :rtype: float
        """
        return self._total_loan_repayments_made

    @total_loan_repayments_made.setter
    def total_loan_repayments_made(self, total_loan_repayments_made):
        """Sets the total_loan_repayments_made of this PresidentialSummary.

         total loan repayments made 

        :param total_loan_repayments_made: The total_loan_repayments_made of this PresidentialSummary.
        :type total_loan_repayments_made: float
        """

        self._total_loan_repayments_made = total_loan_repayments_made

    @property
    def transfers_from_affiliated_committees(self):
        """Gets the transfers_from_affiliated_committees of this PresidentialSummary.

         transfers from affiliated committees 

        :return: The transfers_from_affiliated_committees of this PresidentialSummary.
        :rtype: float
        """
        return self._transfers_from_affiliated_committees

    @transfers_from_affiliated_committees.setter
    def transfers_from_affiliated_committees(self, transfers_from_affiliated_committees):
        """Sets the transfers_from_affiliated_committees of this PresidentialSummary.

         transfers from affiliated committees 

        :param transfers_from_affiliated_committees: The transfers_from_affiliated_committees of this PresidentialSummary.
        :type transfers_from_affiliated_committees: float
        """

        self._transfers_from_affiliated_committees = transfers_from_affiliated_committees

    @property
    def transfers_to_other_authorized_committees(self):
        """Gets the transfers_to_other_authorized_committees of this PresidentialSummary.

         transfers to other authorized committees 

        :return: The transfers_to_other_authorized_committees of this PresidentialSummary.
        :rtype: float
        """
        return self._transfers_to_other_authorized_committees

    @transfers_to_other_authorized_committees.setter
    def transfers_to_other_authorized_committees(self, transfers_to_other_authorized_committees):
        """Sets the transfers_to_other_authorized_committees of this PresidentialSummary.

         transfers to other authorized committees 

        :param transfers_to_other_authorized_committees: The transfers_to_other_authorized_committees of this PresidentialSummary.
        :type transfers_to_other_authorized_committees: float
        """

        self._transfers_to_other_authorized_committees = transfers_to_other_authorized_committees
