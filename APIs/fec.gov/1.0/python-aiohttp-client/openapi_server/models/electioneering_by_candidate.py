# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ElectioneeringByCandidate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, candidate: str=None, candidate_id: str=None, candidate_name: str=None, committee: str=None, committee_id: str=None, committee_name: str=None, count: int=None, cycle: int=None, total: float=None):
        """ElectioneeringByCandidate - a model defined in OpenAPI

        :param candidate: The candidate of this ElectioneeringByCandidate.
        :param candidate_id: The candidate_id of this ElectioneeringByCandidate.
        :param candidate_name: The candidate_name of this ElectioneeringByCandidate.
        :param committee: The committee of this ElectioneeringByCandidate.
        :param committee_id: The committee_id of this ElectioneeringByCandidate.
        :param committee_name: The committee_name of this ElectioneeringByCandidate.
        :param count: The count of this ElectioneeringByCandidate.
        :param cycle: The cycle of this ElectioneeringByCandidate.
        :param total: The total of this ElectioneeringByCandidate.
        """
        self.openapi_types = {
            'candidate': str,
            'candidate_id': str,
            'candidate_name': str,
            'committee': str,
            'committee_id': str,
            'committee_name': str,
            'count': int,
            'cycle': int,
            'total': float
        }

        self.attribute_map = {
            'candidate': 'candidate',
            'candidate_id': 'candidate_id',
            'candidate_name': 'candidate_name',
            'committee': 'committee',
            'committee_id': 'committee_id',
            'committee_name': 'committee_name',
            'count': 'count',
            'cycle': 'cycle',
            'total': 'total'
        }

        self._candidate = candidate
        self._candidate_id = candidate_id
        self._candidate_name = candidate_name
        self._committee = committee
        self._committee_id = committee_id
        self._committee_name = committee_name
        self._count = count
        self._cycle = cycle
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ElectioneeringByCandidate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ElectioneeringByCandidate of this ElectioneeringByCandidate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def candidate(self):
        """Gets the candidate of this ElectioneeringByCandidate.


        :return: The candidate of this ElectioneeringByCandidate.
        :rtype: str
        """
        return self._candidate

    @candidate.setter
    def candidate(self, candidate):
        """Sets the candidate of this ElectioneeringByCandidate.


        :param candidate: The candidate of this ElectioneeringByCandidate.
        :type candidate: str
        """

        self._candidate = candidate

    @property
    def candidate_id(self):
        """Gets the candidate_id of this ElectioneeringByCandidate.


        :return: The candidate_id of this ElectioneeringByCandidate.
        :rtype: str
        """
        return self._candidate_id

    @candidate_id.setter
    def candidate_id(self, candidate_id):
        """Sets the candidate_id of this ElectioneeringByCandidate.


        :param candidate_id: The candidate_id of this ElectioneeringByCandidate.
        :type candidate_id: str
        """

        self._candidate_id = candidate_id

    @property
    def candidate_name(self):
        """Gets the candidate_name of this ElectioneeringByCandidate.


        :return: The candidate_name of this ElectioneeringByCandidate.
        :rtype: str
        """
        return self._candidate_name

    @candidate_name.setter
    def candidate_name(self, candidate_name):
        """Sets the candidate_name of this ElectioneeringByCandidate.


        :param candidate_name: The candidate_name of this ElectioneeringByCandidate.
        :type candidate_name: str
        """

        self._candidate_name = candidate_name

    @property
    def committee(self):
        """Gets the committee of this ElectioneeringByCandidate.


        :return: The committee of this ElectioneeringByCandidate.
        :rtype: str
        """
        return self._committee

    @committee.setter
    def committee(self, committee):
        """Sets the committee of this ElectioneeringByCandidate.


        :param committee: The committee of this ElectioneeringByCandidate.
        :type committee: str
        """

        self._committee = committee

    @property
    def committee_id(self):
        """Gets the committee_id of this ElectioneeringByCandidate.


        :return: The committee_id of this ElectioneeringByCandidate.
        :rtype: str
        """
        return self._committee_id

    @committee_id.setter
    def committee_id(self, committee_id):
        """Sets the committee_id of this ElectioneeringByCandidate.


        :param committee_id: The committee_id of this ElectioneeringByCandidate.
        :type committee_id: str
        """

        self._committee_id = committee_id

    @property
    def committee_name(self):
        """Gets the committee_name of this ElectioneeringByCandidate.


        :return: The committee_name of this ElectioneeringByCandidate.
        :rtype: str
        """
        return self._committee_name

    @committee_name.setter
    def committee_name(self, committee_name):
        """Sets the committee_name of this ElectioneeringByCandidate.


        :param committee_name: The committee_name of this ElectioneeringByCandidate.
        :type committee_name: str
        """

        self._committee_name = committee_name

    @property
    def count(self):
        """Gets the count of this ElectioneeringByCandidate.


        :return: The count of this ElectioneeringByCandidate.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ElectioneeringByCandidate.


        :param count: The count of this ElectioneeringByCandidate.
        :type count: int
        """

        self._count = count

    @property
    def cycle(self):
        """Gets the cycle of this ElectioneeringByCandidate.


        :return: The cycle of this ElectioneeringByCandidate.
        :rtype: int
        """
        return self._cycle

    @cycle.setter
    def cycle(self, cycle):
        """Sets the cycle of this ElectioneeringByCandidate.


        :param cycle: The cycle of this ElectioneeringByCandidate.
        :type cycle: int
        """

        self._cycle = cycle

    @property
    def total(self):
        """Gets the total of this ElectioneeringByCandidate.


        :return: The total of this ElectioneeringByCandidate.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ElectioneeringByCandidate.


        :param total: The total of this ElectioneeringByCandidate.
        :type total: float
        """

        self._total = total
