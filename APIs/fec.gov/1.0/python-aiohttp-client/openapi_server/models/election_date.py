# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ElectionDate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_election: bool=None, create_date: datetime=None, election_date: date=None, election_district: int=None, election_notes: str=None, election_party: str=None, election_state: str=None, election_type_full: str=None, election_type_id: str=None, election_year: int=None, office_sought: str=None, primary_general_date: date=None, update_date: datetime=None):
        """ElectionDate - a model defined in OpenAPI

        :param active_election: The active_election of this ElectionDate.
        :param create_date: The create_date of this ElectionDate.
        :param election_date: The election_date of this ElectionDate.
        :param election_district: The election_district of this ElectionDate.
        :param election_notes: The election_notes of this ElectionDate.
        :param election_party: The election_party of this ElectionDate.
        :param election_state: The election_state of this ElectionDate.
        :param election_type_full: The election_type_full of this ElectionDate.
        :param election_type_id: The election_type_id of this ElectionDate.
        :param election_year: The election_year of this ElectionDate.
        :param office_sought: The office_sought of this ElectionDate.
        :param primary_general_date: The primary_general_date of this ElectionDate.
        :param update_date: The update_date of this ElectionDate.
        """
        self.openapi_types = {
            'active_election': bool,
            'create_date': datetime,
            'election_date': date,
            'election_district': int,
            'election_notes': str,
            'election_party': str,
            'election_state': str,
            'election_type_full': str,
            'election_type_id': str,
            'election_year': int,
            'office_sought': str,
            'primary_general_date': date,
            'update_date': datetime
        }

        self.attribute_map = {
            'active_election': 'active_election',
            'create_date': 'create_date',
            'election_date': 'election_date',
            'election_district': 'election_district',
            'election_notes': 'election_notes',
            'election_party': 'election_party',
            'election_state': 'election_state',
            'election_type_full': 'election_type_full',
            'election_type_id': 'election_type_id',
            'election_year': 'election_year',
            'office_sought': 'office_sought',
            'primary_general_date': 'primary_general_date',
            'update_date': 'update_date'
        }

        self._active_election = active_election
        self._create_date = create_date
        self._election_date = election_date
        self._election_district = election_district
        self._election_notes = election_notes
        self._election_party = election_party
        self._election_state = election_state
        self._election_type_full = election_type_full
        self._election_type_id = election_type_id
        self._election_year = election_year
        self._office_sought = office_sought
        self._primary_general_date = primary_general_date
        self._update_date = update_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ElectionDate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ElectionDate of this ElectionDate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_election(self):
        """Gets the active_election of this ElectionDate.


        :return: The active_election of this ElectionDate.
        :rtype: bool
        """
        return self._active_election

    @active_election.setter
    def active_election(self, active_election):
        """Sets the active_election of this ElectionDate.


        :param active_election: The active_election of this ElectionDate.
        :type active_election: bool
        """

        self._active_election = active_election

    @property
    def create_date(self):
        """Gets the create_date of this ElectionDate.

        Date the record was created

        :return: The create_date of this ElectionDate.
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this ElectionDate.

        Date the record was created

        :param create_date: The create_date of this ElectionDate.
        :type create_date: datetime
        """

        self._create_date = create_date

    @property
    def election_date(self):
        """Gets the election_date of this ElectionDate.

        Date of election

        :return: The election_date of this ElectionDate.
        :rtype: date
        """
        return self._election_date

    @election_date.setter
    def election_date(self, election_date):
        """Sets the election_date of this ElectionDate.

        Date of election

        :param election_date: The election_date of this ElectionDate.
        :type election_date: date
        """

        self._election_date = election_date

    @property
    def election_district(self):
        """Gets the election_district of this ElectionDate.

        Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.

        :return: The election_district of this ElectionDate.
        :rtype: int
        """
        return self._election_district

    @election_district.setter
    def election_district(self, election_district):
        """Sets the election_district of this ElectionDate.

        Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.

        :param election_district: The election_district of this ElectionDate.
        :type election_district: int
        """

        self._election_district = election_district

    @property
    def election_notes(self):
        """Gets the election_notes of this ElectionDate.


        :return: The election_notes of this ElectionDate.
        :rtype: str
        """
        return self._election_notes

    @election_notes.setter
    def election_notes(self, election_notes):
        """Sets the election_notes of this ElectionDate.


        :param election_notes: The election_notes of this ElectionDate.
        :type election_notes: str
        """

        self._election_notes = election_notes

    @property
    def election_party(self):
        """Gets the election_party of this ElectionDate.

        Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.

        :return: The election_party of this ElectionDate.
        :rtype: str
        """
        return self._election_party

    @election_party.setter
    def election_party(self, election_party):
        """Sets the election_party of this ElectionDate.

        Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.

        :param election_party: The election_party of this ElectionDate.
        :type election_party: str
        """

        self._election_party = election_party

    @property
    def election_state(self):
        """Gets the election_state of this ElectionDate.

        US state or territory where a candidate runs for office

        :return: The election_state of this ElectionDate.
        :rtype: str
        """
        return self._election_state

    @election_state.setter
    def election_state(self, election_state):
        """Sets the election_state of this ElectionDate.

        US state or territory where a candidate runs for office

        :param election_state: The election_state of this ElectionDate.
        :type election_state: str
        """

        self._election_state = election_state

    @property
    def election_type_full(self):
        """Gets the election_type_full of this ElectionDate.


        :return: The election_type_full of this ElectionDate.
        :rtype: str
        """
        return self._election_type_full

    @election_type_full.setter
    def election_type_full(self, election_type_full):
        """Sets the election_type_full of this ElectionDate.


        :param election_type_full: The election_type_full of this ElectionDate.
        :type election_type_full: str
        """

        self._election_type_full = election_type_full

    @property
    def election_type_id(self):
        """Gets the election_type_id of this ElectionDate.

        Election type  Convention, Primary, General, Special, Runoff etc. 

        :return: The election_type_id of this ElectionDate.
        :rtype: str
        """
        return self._election_type_id

    @election_type_id.setter
    def election_type_id(self, election_type_id):
        """Sets the election_type_id of this ElectionDate.

        Election type  Convention, Primary, General, Special, Runoff etc. 

        :param election_type_id: The election_type_id of this ElectionDate.
        :type election_type_id: str
        """

        self._election_type_id = election_type_id

    @property
    def election_year(self):
        """Gets the election_year of this ElectionDate.

        Year of election

        :return: The election_year of this ElectionDate.
        :rtype: int
        """
        return self._election_year

    @election_year.setter
    def election_year(self, election_year):
        """Sets the election_year of this ElectionDate.

        Year of election

        :param election_year: The election_year of this ElectionDate.
        :type election_year: int
        """

        self._election_year = election_year

    @property
    def office_sought(self):
        """Gets the office_sought of this ElectionDate.

        Federal office candidate runs for: H, S or P

        :return: The office_sought of this ElectionDate.
        :rtype: str
        """
        return self._office_sought

    @office_sought.setter
    def office_sought(self, office_sought):
        """Sets the office_sought of this ElectionDate.

        Federal office candidate runs for: H, S or P

        :param office_sought: The office_sought of this ElectionDate.
        :type office_sought: str
        """

        self._office_sought = office_sought

    @property
    def primary_general_date(self):
        """Gets the primary_general_date of this ElectionDate.


        :return: The primary_general_date of this ElectionDate.
        :rtype: date
        """
        return self._primary_general_date

    @primary_general_date.setter
    def primary_general_date(self, primary_general_date):
        """Sets the primary_general_date of this ElectionDate.


        :param primary_general_date: The primary_general_date of this ElectionDate.
        :type primary_general_date: date
        """

        self._primary_general_date = primary_general_date

    @property
    def update_date(self):
        """Gets the update_date of this ElectionDate.

        Date the record was updated

        :return: The update_date of this ElectionDate.
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this ElectionDate.

        Date the record was updated

        :param update_date: The update_date of this ElectionDate.
        :type update_date: datetime
        """

        self._update_date = update_date
