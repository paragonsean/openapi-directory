/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICandidateCommitteeTotalsPresidential.h
 *
 * 
 */

#ifndef OAICandidateCommitteeTotalsPresidential_H
#define OAICandidateCommitteeTotalsPresidential_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICandidateCommitteeTotalsPresidential : public OAIObject {
public:
    OAICandidateCommitteeTotalsPresidential();
    OAICandidateCommitteeTotalsPresidential(QString json);
    ~OAICandidateCommitteeTotalsPresidential() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getCandidateContribution() const;
    void setCandidateContribution(const double &candidate_contribution);
    bool is_candidate_contribution_Set() const;
    bool is_candidate_contribution_Valid() const;

    qint32 getCandidateElectionYear() const;
    void setCandidateElectionYear(const qint32 &candidate_election_year);
    bool is_candidate_election_year_Set() const;
    bool is_candidate_election_year_Valid() const;

    QString getCandidateId() const;
    void setCandidateId(const QString &candidate_id);
    bool is_candidate_id_Set() const;
    bool is_candidate_id_Valid() const;

    double getContributionRefunds() const;
    void setContributionRefunds(const double &contribution_refunds);
    bool is_contribution_refunds_Set() const;
    bool is_contribution_refunds_Valid() const;

    double getContributions() const;
    void setContributions(const double &contributions);
    bool is_contributions_Set() const;
    bool is_contributions_Valid() const;

    QDateTime getCoverageEndDate() const;
    void setCoverageEndDate(const QDateTime &coverage_end_date);
    bool is_coverage_end_date_Set() const;
    bool is_coverage_end_date_Valid() const;

    QDateTime getCoverageStartDate() const;
    void setCoverageStartDate(const QDateTime &coverage_start_date);
    bool is_coverage_start_date_Set() const;
    bool is_coverage_start_date_Valid() const;

    qint32 getCycle() const;
    void setCycle(const qint32 &cycle);
    bool is_cycle_Set() const;
    bool is_cycle_Valid() const;

    double getDisbursements() const;
    void setDisbursements(const double &disbursements);
    bool is_disbursements_Set() const;
    bool is_disbursements_Valid() const;

    bool isElectionFull() const;
    void setElectionFull(const bool &election_full);
    bool is_election_full_Set() const;
    bool is_election_full_Valid() const;

    double getExemptLegalAccountingDisbursement() const;
    void setExemptLegalAccountingDisbursement(const double &exempt_legal_accounting_disbursement);
    bool is_exempt_legal_accounting_disbursement_Set() const;
    bool is_exempt_legal_accounting_disbursement_Valid() const;

    double getFederalFunds() const;
    void setFederalFunds(const double &federal_funds);
    bool is_federal_funds_Set() const;
    bool is_federal_funds_Valid() const;

    double getFundraisingDisbursements() const;
    void setFundraisingDisbursements(const double &fundraising_disbursements);
    bool is_fundraising_disbursements_Set() const;
    bool is_fundraising_disbursements_Valid() const;

    double getIndividualContributions() const;
    void setIndividualContributions(const double &individual_contributions);
    bool is_individual_contributions_Set() const;
    bool is_individual_contributions_Valid() const;

    double getIndividualItemizedContributions() const;
    void setIndividualItemizedContributions(const double &individual_itemized_contributions);
    bool is_individual_itemized_contributions_Set() const;
    bool is_individual_itemized_contributions_Valid() const;

    double getIndividualUnitemizedContributions() const;
    void setIndividualUnitemizedContributions(const double &individual_unitemized_contributions);
    bool is_individual_unitemized_contributions_Set() const;
    bool is_individual_unitemized_contributions_Valid() const;

    QString getLastBeginningImageNumber() const;
    void setLastBeginningImageNumber(const QString &last_beginning_image_number);
    bool is_last_beginning_image_number_Set() const;
    bool is_last_beginning_image_number_Valid() const;

    double getLastCashOnHandEndPeriod() const;
    void setLastCashOnHandEndPeriod(const double &last_cash_on_hand_end_period);
    bool is_last_cash_on_hand_end_period_Set() const;
    bool is_last_cash_on_hand_end_period_Valid() const;

    double getLastDebtsOwedByCommittee() const;
    void setLastDebtsOwedByCommittee(const double &last_debts_owed_by_committee);
    bool is_last_debts_owed_by_committee_Set() const;
    bool is_last_debts_owed_by_committee_Valid() const;

    double getLastDebtsOwedToCommittee() const;
    void setLastDebtsOwedToCommittee(const double &last_debts_owed_to_committee);
    bool is_last_debts_owed_to_committee_Set() const;
    bool is_last_debts_owed_to_committee_Valid() const;

    QString getLastReportTypeFull() const;
    void setLastReportTypeFull(const QString &last_report_type_full);
    bool is_last_report_type_full_Set() const;
    bool is_last_report_type_full_Valid() const;

    qint32 getLastReportYear() const;
    void setLastReportYear(const qint32 &last_report_year);
    bool is_last_report_year_Set() const;
    bool is_last_report_year_Valid() const;

    double getLoanRepaymentsMade() const;
    void setLoanRepaymentsMade(const double &loan_repayments_made);
    bool is_loan_repayments_made_Set() const;
    bool is_loan_repayments_made_Valid() const;

    double getLoansReceived() const;
    void setLoansReceived(const double &loans_received);
    bool is_loans_received_Set() const;
    bool is_loans_received_Valid() const;

    double getLoansReceivedFromCandidate() const;
    void setLoansReceivedFromCandidate(const double &loans_received_from_candidate);
    bool is_loans_received_from_candidate_Set() const;
    bool is_loans_received_from_candidate_Valid() const;

    double getNetContributions() const;
    void setNetContributions(const double &net_contributions);
    bool is_net_contributions_Set() const;
    bool is_net_contributions_Valid() const;

    double getNetOperatingExpenditures() const;
    void setNetOperatingExpenditures(const double &net_operating_expenditures);
    bool is_net_operating_expenditures_Set() const;
    bool is_net_operating_expenditures_Valid() const;

    double getOffsetsToFundraisingExpenditures() const;
    void setOffsetsToFundraisingExpenditures(const double &offsets_to_fundraising_expenditures);
    bool is_offsets_to_fundraising_expenditures_Set() const;
    bool is_offsets_to_fundraising_expenditures_Valid() const;

    double getOffsetsToLegalAccounting() const;
    void setOffsetsToLegalAccounting(const double &offsets_to_legal_accounting);
    bool is_offsets_to_legal_accounting_Set() const;
    bool is_offsets_to_legal_accounting_Valid() const;

    double getOffsetsToOperatingExpenditures() const;
    void setOffsetsToOperatingExpenditures(const double &offsets_to_operating_expenditures);
    bool is_offsets_to_operating_expenditures_Set() const;
    bool is_offsets_to_operating_expenditures_Valid() const;

    double getOperatingExpenditures() const;
    void setOperatingExpenditures(const double &operating_expenditures);
    bool is_operating_expenditures_Set() const;
    bool is_operating_expenditures_Valid() const;

    double getOtherDisbursements() const;
    void setOtherDisbursements(const double &other_disbursements);
    bool is_other_disbursements_Set() const;
    bool is_other_disbursements_Valid() const;

    double getOtherLoansReceived() const;
    void setOtherLoansReceived(const double &other_loans_received);
    bool is_other_loans_received_Set() const;
    bool is_other_loans_received_Valid() const;

    double getOtherPoliticalCommitteeContributions() const;
    void setOtherPoliticalCommitteeContributions(const double &other_political_committee_contributions);
    bool is_other_political_committee_contributions_Set() const;
    bool is_other_political_committee_contributions_Valid() const;

    double getOtherReceipts() const;
    void setOtherReceipts(const double &other_receipts);
    bool is_other_receipts_Set() const;
    bool is_other_receipts_Valid() const;

    double getPoliticalPartyCommitteeContributions() const;
    void setPoliticalPartyCommitteeContributions(const double &political_party_committee_contributions);
    bool is_political_party_committee_contributions_Set() const;
    bool is_political_party_committee_contributions_Valid() const;

    double getReceipts() const;
    void setReceipts(const double &receipts);
    bool is_receipts_Set() const;
    bool is_receipts_Valid() const;

    double getRefundedIndividualContributions() const;
    void setRefundedIndividualContributions(const double &refunded_individual_contributions);
    bool is_refunded_individual_contributions_Set() const;
    bool is_refunded_individual_contributions_Valid() const;

    double getRefundedOtherPoliticalCommitteeContributions() const;
    void setRefundedOtherPoliticalCommitteeContributions(const double &refunded_other_political_committee_contributions);
    bool is_refunded_other_political_committee_contributions_Set() const;
    bool is_refunded_other_political_committee_contributions_Valid() const;

    double getRefundedPoliticalPartyCommitteeContributions() const;
    void setRefundedPoliticalPartyCommitteeContributions(const double &refunded_political_party_committee_contributions);
    bool is_refunded_political_party_committee_contributions_Set() const;
    bool is_refunded_political_party_committee_contributions_Valid() const;

    double getRepaymentsLoansMadeByCandidate() const;
    void setRepaymentsLoansMadeByCandidate(const double &repayments_loans_made_by_candidate);
    bool is_repayments_loans_made_by_candidate_Set() const;
    bool is_repayments_loans_made_by_candidate_Valid() const;

    double getRepaymentsOtherLoans() const;
    void setRepaymentsOtherLoans(const double &repayments_other_loans);
    bool is_repayments_other_loans_Set() const;
    bool is_repayments_other_loans_Valid() const;

    double getTotalOffsetsToOperatingExpenditures() const;
    void setTotalOffsetsToOperatingExpenditures(const double &total_offsets_to_operating_expenditures);
    bool is_total_offsets_to_operating_expenditures_Set() const;
    bool is_total_offsets_to_operating_expenditures_Valid() const;

    QDateTime getTransactionCoverageDate() const;
    void setTransactionCoverageDate(const QDateTime &transaction_coverage_date);
    bool is_transaction_coverage_date_Set() const;
    bool is_transaction_coverage_date_Valid() const;

    double getTransfersFromAffiliatedCommittee() const;
    void setTransfersFromAffiliatedCommittee(const double &transfers_from_affiliated_committee);
    bool is_transfers_from_affiliated_committee_Set() const;
    bool is_transfers_from_affiliated_committee_Valid() const;

    double getTransfersToOtherAuthorizedCommittee() const;
    void setTransfersToOtherAuthorizedCommittee(const double &transfers_to_other_authorized_committee);
    bool is_transfers_to_other_authorized_committee_Set() const;
    bool is_transfers_to_other_authorized_committee_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_candidate_contribution;
    bool m_candidate_contribution_isSet;
    bool m_candidate_contribution_isValid;

    qint32 m_candidate_election_year;
    bool m_candidate_election_year_isSet;
    bool m_candidate_election_year_isValid;

    QString m_candidate_id;
    bool m_candidate_id_isSet;
    bool m_candidate_id_isValid;

    double m_contribution_refunds;
    bool m_contribution_refunds_isSet;
    bool m_contribution_refunds_isValid;

    double m_contributions;
    bool m_contributions_isSet;
    bool m_contributions_isValid;

    QDateTime m_coverage_end_date;
    bool m_coverage_end_date_isSet;
    bool m_coverage_end_date_isValid;

    QDateTime m_coverage_start_date;
    bool m_coverage_start_date_isSet;
    bool m_coverage_start_date_isValid;

    qint32 m_cycle;
    bool m_cycle_isSet;
    bool m_cycle_isValid;

    double m_disbursements;
    bool m_disbursements_isSet;
    bool m_disbursements_isValid;

    bool m_election_full;
    bool m_election_full_isSet;
    bool m_election_full_isValid;

    double m_exempt_legal_accounting_disbursement;
    bool m_exempt_legal_accounting_disbursement_isSet;
    bool m_exempt_legal_accounting_disbursement_isValid;

    double m_federal_funds;
    bool m_federal_funds_isSet;
    bool m_federal_funds_isValid;

    double m_fundraising_disbursements;
    bool m_fundraising_disbursements_isSet;
    bool m_fundraising_disbursements_isValid;

    double m_individual_contributions;
    bool m_individual_contributions_isSet;
    bool m_individual_contributions_isValid;

    double m_individual_itemized_contributions;
    bool m_individual_itemized_contributions_isSet;
    bool m_individual_itemized_contributions_isValid;

    double m_individual_unitemized_contributions;
    bool m_individual_unitemized_contributions_isSet;
    bool m_individual_unitemized_contributions_isValid;

    QString m_last_beginning_image_number;
    bool m_last_beginning_image_number_isSet;
    bool m_last_beginning_image_number_isValid;

    double m_last_cash_on_hand_end_period;
    bool m_last_cash_on_hand_end_period_isSet;
    bool m_last_cash_on_hand_end_period_isValid;

    double m_last_debts_owed_by_committee;
    bool m_last_debts_owed_by_committee_isSet;
    bool m_last_debts_owed_by_committee_isValid;

    double m_last_debts_owed_to_committee;
    bool m_last_debts_owed_to_committee_isSet;
    bool m_last_debts_owed_to_committee_isValid;

    QString m_last_report_type_full;
    bool m_last_report_type_full_isSet;
    bool m_last_report_type_full_isValid;

    qint32 m_last_report_year;
    bool m_last_report_year_isSet;
    bool m_last_report_year_isValid;

    double m_loan_repayments_made;
    bool m_loan_repayments_made_isSet;
    bool m_loan_repayments_made_isValid;

    double m_loans_received;
    bool m_loans_received_isSet;
    bool m_loans_received_isValid;

    double m_loans_received_from_candidate;
    bool m_loans_received_from_candidate_isSet;
    bool m_loans_received_from_candidate_isValid;

    double m_net_contributions;
    bool m_net_contributions_isSet;
    bool m_net_contributions_isValid;

    double m_net_operating_expenditures;
    bool m_net_operating_expenditures_isSet;
    bool m_net_operating_expenditures_isValid;

    double m_offsets_to_fundraising_expenditures;
    bool m_offsets_to_fundraising_expenditures_isSet;
    bool m_offsets_to_fundraising_expenditures_isValid;

    double m_offsets_to_legal_accounting;
    bool m_offsets_to_legal_accounting_isSet;
    bool m_offsets_to_legal_accounting_isValid;

    double m_offsets_to_operating_expenditures;
    bool m_offsets_to_operating_expenditures_isSet;
    bool m_offsets_to_operating_expenditures_isValid;

    double m_operating_expenditures;
    bool m_operating_expenditures_isSet;
    bool m_operating_expenditures_isValid;

    double m_other_disbursements;
    bool m_other_disbursements_isSet;
    bool m_other_disbursements_isValid;

    double m_other_loans_received;
    bool m_other_loans_received_isSet;
    bool m_other_loans_received_isValid;

    double m_other_political_committee_contributions;
    bool m_other_political_committee_contributions_isSet;
    bool m_other_political_committee_contributions_isValid;

    double m_other_receipts;
    bool m_other_receipts_isSet;
    bool m_other_receipts_isValid;

    double m_political_party_committee_contributions;
    bool m_political_party_committee_contributions_isSet;
    bool m_political_party_committee_contributions_isValid;

    double m_receipts;
    bool m_receipts_isSet;
    bool m_receipts_isValid;

    double m_refunded_individual_contributions;
    bool m_refunded_individual_contributions_isSet;
    bool m_refunded_individual_contributions_isValid;

    double m_refunded_other_political_committee_contributions;
    bool m_refunded_other_political_committee_contributions_isSet;
    bool m_refunded_other_political_committee_contributions_isValid;

    double m_refunded_political_party_committee_contributions;
    bool m_refunded_political_party_committee_contributions_isSet;
    bool m_refunded_political_party_committee_contributions_isValid;

    double m_repayments_loans_made_by_candidate;
    bool m_repayments_loans_made_by_candidate_isSet;
    bool m_repayments_loans_made_by_candidate_isValid;

    double m_repayments_other_loans;
    bool m_repayments_other_loans_isSet;
    bool m_repayments_other_loans_isValid;

    double m_total_offsets_to_operating_expenditures;
    bool m_total_offsets_to_operating_expenditures_isSet;
    bool m_total_offsets_to_operating_expenditures_isValid;

    QDateTime m_transaction_coverage_date;
    bool m_transaction_coverage_date_isSet;
    bool m_transaction_coverage_date_isValid;

    double m_transfers_from_affiliated_committee;
    bool m_transfers_from_affiliated_committee_isSet;
    bool m_transfers_from_affiliated_committee_isValid;

    double m_transfers_to_other_authorized_committee;
    bool m_transfers_to_other_authorized_committee_isSet;
    bool m_transfers_to_other_authorized_committee_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICandidateCommitteeTotalsPresidential)

#endif // OAICandidateCommitteeTotalsPresidential_H
