/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAI_legal_search__get_default_response_admin_fines_inner.h
 *
 * 
 */

#ifndef OAI_legal_search__get_default_response_admin_fines_inner_H
#define OAI_legal_search__get_default_response_admin_fines_inner_H

#include <QJsonObject>

#include "OAIObject.h"
#include "OAI_legal_search__get_default_response_admin_fines_inner_commission_votes_inner.h"
#include "OAI_legal_search__get_default_response_admin_fines_inner_documents_inner.h"
#include <QDate>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAI_legal_search__get_default_response_admin_fines_inner_commission_votes_inner;
class OAI_legal_search__get_default_response_admin_fines_inner_documents_inner;

class OAI_legal_search__get_default_response_admin_fines_inner : public OAIObject {
public:
    OAI_legal_search__get_default_response_admin_fines_inner();
    OAI_legal_search__get_default_response_admin_fines_inner(QString json);
    ~OAI_legal_search__get_default_response_admin_fines_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getChallengeOutcome() const;
    void setChallengeOutcome(const QString &challenge_outcome);
    bool is_challenge_outcome_Set() const;
    bool is_challenge_outcome_Valid() const;

    QDate getChallengeReceiptDate() const;
    void setChallengeReceiptDate(const QDate &challenge_receipt_date);
    bool is_challenge_receipt_date_Set() const;
    bool is_challenge_receipt_date_Valid() const;

    double getCheckAmount() const;
    void setCheckAmount(const double &check_amount);
    bool is_check_amount_Set() const;
    bool is_check_amount_Valid() const;

    QList<OAI_legal_search__get_default_response_admin_fines_inner_commission_votes_inner> getCommissionVotes() const;
    void setCommissionVotes(const QList<OAI_legal_search__get_default_response_admin_fines_inner_commission_votes_inner> &commission_votes);
    bool is_commission_votes_Set() const;
    bool is_commission_votes_Valid() const;

    QString getCommitteeId() const;
    void setCommitteeId(const QString &committee_id);
    bool is_committee_id_Set() const;
    bool is_committee_id_Valid() const;

    QString getDocId() const;
    void setDocId(const QString &doc_id);
    bool is_doc_id_Set() const;
    bool is_doc_id_Valid() const;

    OAIObject getDocumentHighlights() const;
    void setDocumentHighlights(const OAIObject &document_highlights);
    bool is_document_highlights_Set() const;
    bool is_document_highlights_Valid() const;

    QList<OAI_legal_search__get_default_response_admin_fines_inner_documents_inner> getDocuments() const;
    void setDocuments(const QList<OAI_legal_search__get_default_response_admin_fines_inner_documents_inner> &documents);
    bool is_documents_Set() const;
    bool is_documents_Valid() const;

    double getFinalDeterminationAmount() const;
    void setFinalDeterminationAmount(const double &final_determination_amount);
    bool is_final_determination_amount_Set() const;
    bool is_final_determination_amount_Valid() const;

    QDate getFinalDeterminationDate() const;
    void setFinalDeterminationDate(const QDate &final_determination_date);
    bool is_final_determination_date_Set() const;
    bool is_final_determination_date_Valid() const;

    QList<QString> getHighlights() const;
    void setHighlights(const QList<QString> &highlights);
    bool is_highlights_Set() const;
    bool is_highlights_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getRFalse() const;
    void setRFalse(const QString &r_false);
    bool is_r_false_Set() const;
    bool is_r_false_Valid() const;

    QDate getPetitionCourtDecisionDate() const;
    void setPetitionCourtDecisionDate(const QDate &petition_court_decision_date);
    bool is_petition_court_decision_date_Set() const;
    bool is_petition_court_decision_date_Valid() const;

    QDate getPetitionCourtFilingDate() const;
    void setPetitionCourtFilingDate(const QDate &petition_court_filing_date);
    bool is_petition_court_filing_date_Set() const;
    bool is_petition_court_filing_date_Valid() const;

    QDate getReasonToBelieveActionDate() const;
    void setReasonToBelieveActionDate(const QDate &reason_to_believe_action_date);
    bool is_reason_to_believe_action_date_Set() const;
    bool is_reason_to_believe_action_date_Valid() const;

    double getReasonToBelieveFineAmount() const;
    void setReasonToBelieveFineAmount(const double &reason_to_believe_fine_amount);
    bool is_reason_to_believe_fine_amount_Set() const;
    bool is_reason_to_believe_fine_amount_Valid() const;

    QString getReportType() const;
    void setReportType(const QString &report_type);
    bool is_report_type_Set() const;
    bool is_report_type_Valid() const;

    QString getReportYear() const;
    void setReportYear(const QString &report_year);
    bool is_report_year_Set() const;
    bool is_report_year_Valid() const;

    double getTreasuryReferralAmount() const;
    void setTreasuryReferralAmount(const double &treasury_referral_amount);
    bool is_treasury_referral_amount_Set() const;
    bool is_treasury_referral_amount_Valid() const;

    QDate getTreasuryReferralDate() const;
    void setTreasuryReferralDate(const QDate &treasury_referral_date);
    bool is_treasury_referral_date_Set() const;
    bool is_treasury_referral_date_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_challenge_outcome;
    bool m_challenge_outcome_isSet;
    bool m_challenge_outcome_isValid;

    QDate m_challenge_receipt_date;
    bool m_challenge_receipt_date_isSet;
    bool m_challenge_receipt_date_isValid;

    double m_check_amount;
    bool m_check_amount_isSet;
    bool m_check_amount_isValid;

    QList<OAI_legal_search__get_default_response_admin_fines_inner_commission_votes_inner> m_commission_votes;
    bool m_commission_votes_isSet;
    bool m_commission_votes_isValid;

    QString m_committee_id;
    bool m_committee_id_isSet;
    bool m_committee_id_isValid;

    QString m_doc_id;
    bool m_doc_id_isSet;
    bool m_doc_id_isValid;

    OAIObject m_document_highlights;
    bool m_document_highlights_isSet;
    bool m_document_highlights_isValid;

    QList<OAI_legal_search__get_default_response_admin_fines_inner_documents_inner> m_documents;
    bool m_documents_isSet;
    bool m_documents_isValid;

    double m_final_determination_amount;
    bool m_final_determination_amount_isSet;
    bool m_final_determination_amount_isValid;

    QDate m_final_determination_date;
    bool m_final_determination_date_isSet;
    bool m_final_determination_date_isValid;

    QList<QString> m_highlights;
    bool m_highlights_isSet;
    bool m_highlights_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_r_false;
    bool m_r_false_isSet;
    bool m_r_false_isValid;

    QDate m_petition_court_decision_date;
    bool m_petition_court_decision_date_isSet;
    bool m_petition_court_decision_date_isValid;

    QDate m_petition_court_filing_date;
    bool m_petition_court_filing_date_isSet;
    bool m_petition_court_filing_date_isValid;

    QDate m_reason_to_believe_action_date;
    bool m_reason_to_believe_action_date_isSet;
    bool m_reason_to_believe_action_date_isValid;

    double m_reason_to_believe_fine_amount;
    bool m_reason_to_believe_fine_amount_isSet;
    bool m_reason_to_believe_fine_amount_isValid;

    QString m_report_type;
    bool m_report_type_isSet;
    bool m_report_type_isValid;

    QString m_report_year;
    bool m_report_year_isSet;
    bool m_report_year_isValid;

    double m_treasury_referral_amount;
    bool m_treasury_referral_amount_isSet;
    bool m_treasury_referral_amount_isValid;

    QDate m_treasury_referral_date;
    bool m_treasury_referral_date_isSet;
    bool m_treasury_referral_date_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAI_legal_search__get_default_response_admin_fines_inner)

#endif // OAI_legal_search__get_default_response_admin_fines_inner_H
