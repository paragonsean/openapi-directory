/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAuditApi_H
#define OAI_OAIAuditApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAuditCandidateSearchList.h"
#include "OAIAuditCasePage.h"
#include "OAIAuditCategoryPage.h"
#include "OAIAuditCommitteeSearchList.h"
#include "OAIAuditPrimaryCategoryPage.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAuditApi : public QObject {
    Q_OBJECT

public:
    OAIAuditApi(const int timeOut = 0);
    ~OAIAuditApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  max_election_cycle qint32 [optional]
    * @param[in]  q QList<QString> [optional]
    * @param[in]  sub_category_id QString [optional]
    * @param[in]  cycle QList<qint32> [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  audit_case_id QList<QString> [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  candidate_id QList<QString> [optional]
    * @param[in]  qq QList<QString> [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  min_election_cycle qint32 [optional]
    * @param[in]  audit_id QList<qint32> [optional]
    * @param[in]  committee_designation QString [optional]
    * @param[in]  committee_type QList<QString> [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  committee_id QList<QString> [optional]
    * @param[in]  primary_category_id QString [optional]
    */
    virtual void auditCaseGet(const QString &api_key, const ::OpenAPI::OptionalParam<qint32> &max_election_cycle = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &q = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &sub_category_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<qint32>> &cycle = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &audit_case_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &candidate_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &qq = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &min_election_cycle = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<qint32>> &audit_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QString> &committee_designation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &committee_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &committee_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &primary_category_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  primary_category_id QList<QString> [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  primary_category_name QList<QString> [optional]
    */
    virtual void auditCategoryGet(const QString &api_key, const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &primary_category_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &primary_category_name = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  primary_category_id QList<QString> [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  primary_category_name QList<QString> [optional]
    */
    virtual void auditPrimaryCategoryGet(const QString &api_key, const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &primary_category_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &primary_category_name = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  q QList<QString> [required]
    */
    virtual void namesAuditCandidatesGet(const QString &api_key, const QList<QString> &q);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  q QList<QString> [required]
    */
    virtual void namesAuditCommitteesGet(const QString &api_key, const QList<QString> &q);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void auditCaseGetCallback(OAIHttpRequestWorker *worker);
    void auditCategoryGetCallback(OAIHttpRequestWorker *worker);
    void auditPrimaryCategoryGetCallback(OAIHttpRequestWorker *worker);
    void namesAuditCandidatesGetCallback(OAIHttpRequestWorker *worker);
    void namesAuditCommitteesGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void auditCaseGetSignal(OAIAuditCasePage summary);
    void auditCategoryGetSignal(OAIAuditCategoryPage summary);
    void auditPrimaryCategoryGetSignal(OAIAuditPrimaryCategoryPage summary);
    void namesAuditCandidatesGetSignal(OAIAuditCandidateSearchList summary);
    void namesAuditCommitteesGetSignal(OAIAuditCommitteeSearchList summary);


    void auditCaseGetSignalFull(OAIHttpRequestWorker *worker, OAIAuditCasePage summary);
    void auditCategoryGetSignalFull(OAIHttpRequestWorker *worker, OAIAuditCategoryPage summary);
    void auditPrimaryCategoryGetSignalFull(OAIHttpRequestWorker *worker, OAIAuditPrimaryCategoryPage summary);
    void namesAuditCandidatesGetSignalFull(OAIHttpRequestWorker *worker, OAIAuditCandidateSearchList summary);
    void namesAuditCommitteesGetSignalFull(OAIHttpRequestWorker *worker, OAIAuditCommitteeSearchList summary);

    Q_DECL_DEPRECATED_X("Use auditCaseGetSignalError() instead")
    void auditCaseGetSignalE(OAIAuditCasePage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void auditCaseGetSignalError(OAIAuditCasePage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use auditCategoryGetSignalError() instead")
    void auditCategoryGetSignalE(OAIAuditCategoryPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void auditCategoryGetSignalError(OAIAuditCategoryPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use auditPrimaryCategoryGetSignalError() instead")
    void auditPrimaryCategoryGetSignalE(OAIAuditPrimaryCategoryPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void auditPrimaryCategoryGetSignalError(OAIAuditPrimaryCategoryPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namesAuditCandidatesGetSignalError() instead")
    void namesAuditCandidatesGetSignalE(OAIAuditCandidateSearchList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void namesAuditCandidatesGetSignalError(OAIAuditCandidateSearchList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namesAuditCommitteesGetSignalError() instead")
    void namesAuditCommitteesGetSignalE(OAIAuditCommitteeSearchList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void namesAuditCommitteesGetSignalError(OAIAuditCommitteeSearchList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use auditCaseGetSignalErrorFull() instead")
    void auditCaseGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void auditCaseGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use auditCategoryGetSignalErrorFull() instead")
    void auditCategoryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void auditCategoryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use auditPrimaryCategoryGetSignalErrorFull() instead")
    void auditPrimaryCategoryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void auditPrimaryCategoryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namesAuditCandidatesGetSignalErrorFull() instead")
    void namesAuditCandidatesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namesAuditCandidatesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namesAuditCommitteesGetSignalErrorFull() instead")
    void namesAuditCommitteesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namesAuditCommitteesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
