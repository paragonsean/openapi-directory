/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBaseF3PFiling.h
 *
 * 
 */

#ifndef OAIBaseF3PFiling_H
#define OAIBaseF3PFiling_H

#include <QJsonObject>

#include <QDate>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIBaseF3PFiling : public OAIObject {
public:
    OAIBaseF3PFiling();
    OAIBaseF3PFiling(QString json);
    ~OAIBaseF3PFiling() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAmendedBy() const;
    void setAmendedBy(const qint32 &amended_by);
    bool is_amended_by_Set() const;
    bool is_amended_by_Valid() const;

    QString getAmendment() const;
    void setAmendment(const QString &amendment);
    bool is_amendment_Set() const;
    bool is_amendment_Valid() const;

    QList<qint32> getAmendmentChain() const;
    void setAmendmentChain(const QList<qint32> &amendment_chain);
    bool is_amendment_chain_Set() const;
    bool is_amendment_chain_Valid() const;

    QString getBeginningImageNumber() const;
    void setBeginningImageNumber(const QString &beginning_image_number);
    bool is_beginning_image_number_Set() const;
    bool is_beginning_image_number_Valid() const;

    float getCashOnHandBeginningPeriod() const;
    void setCashOnHandBeginningPeriod(const float &cash_on_hand_beginning_period);
    bool is_cash_on_hand_beginning_period_Set() const;
    bool is_cash_on_hand_beginning_period_Valid() const;

    float getCashOnHandEndPeriod() const;
    void setCashOnHandEndPeriod(const float &cash_on_hand_end_period);
    bool is_cash_on_hand_end_period_Set() const;
    bool is_cash_on_hand_end_period_Valid() const;

    QString getCity() const;
    void setCity(const QString &city);
    bool is_city_Set() const;
    bool is_city_Valid() const;

    QString getCommitteeId() const;
    void setCommitteeId(const QString &committee_id);
    bool is_committee_id_Set() const;
    bool is_committee_id_Valid() const;

    QString getCommitteeName() const;
    void setCommitteeName(const QString &committee_name);
    bool is_committee_name_Set() const;
    bool is_committee_name_Valid() const;

    QDate getCoverageEndDate() const;
    void setCoverageEndDate(const QDate &coverage_end_date);
    bool is_coverage_end_date_Set() const;
    bool is_coverage_end_date_Valid() const;

    QDate getCoverageStartDate() const;
    void setCoverageStartDate(const QDate &coverage_start_date);
    bool is_coverage_start_date_Set() const;
    bool is_coverage_start_date_Valid() const;

    QString getCsvUrl() const;
    void setCsvUrl(const QString &csv_url);
    bool is_csv_url_Set() const;
    bool is_csv_url_Valid() const;

    float getDebtsOwedByCommittee() const;
    void setDebtsOwedByCommittee(const float &debts_owed_by_committee);
    bool is_debts_owed_by_committee_Set() const;
    bool is_debts_owed_by_committee_Valid() const;

    float getDebtsOwedToCommittee() const;
    void setDebtsOwedToCommittee(const float &debts_owed_to_committee);
    bool is_debts_owed_to_committee_Set() const;
    bool is_debts_owed_to_committee_Valid() const;

    QString getDocumentDescription() const;
    void setDocumentDescription(const QString &document_description);
    bool is_document_description_Set() const;
    bool is_document_description_Valid() const;

    QDate getElectionDate() const;
    void setElectionDate(const QDate &election_date);
    bool is_election_date_Set() const;
    bool is_election_date_Valid() const;

    QString getElectionState() const;
    void setElectionState(const QString &election_state);
    bool is_election_state_Set() const;
    bool is_election_state_Valid() const;

    float getExpenditureSubjectToLimits() const;
    void setExpenditureSubjectToLimits(const float &expenditure_subject_to_limits);
    bool is_expenditure_subject_to_limits_Set() const;
    bool is_expenditure_subject_to_limits_Valid() const;

    QString getFecFileId() const;
    void setFecFileId(const QString &fec_file_id);
    bool is_fec_file_id_Set() const;
    bool is_fec_file_id_Valid() const;

    QString getFecUrl() const;
    void setFecUrl(const QString &fec_url);
    bool is_fec_url_Set() const;
    bool is_fec_url_Valid() const;

    qint32 getFileNumber() const;
    void setFileNumber(const qint32 &file_number);
    bool is_file_number_Set() const;
    bool is_file_number_Valid() const;

    QString getGeneralElection() const;
    void setGeneralElection(const QString &general_election);
    bool is_general_election_Set() const;
    bool is_general_election_Valid() const;

    bool isIsAmended() const;
    void setIsAmended(const bool &is_amended);
    bool is_is_amended_Set() const;
    bool is_is_amended_Valid() const;

    bool isMostRecent() const;
    void setMostRecent(const bool &most_recent);
    bool is_most_recent_Set() const;
    bool is_most_recent_Valid() const;

    qint32 getMostRecentFiling() const;
    void setMostRecentFiling(const qint32 &most_recent_filing);
    bool is_most_recent_filing_Set() const;
    bool is_most_recent_filing_Valid() const;

    float getNetContributionsCycleToDate() const;
    void setNetContributionsCycleToDate(const float &net_contributions_cycle_to_date);
    bool is_net_contributions_cycle_to_date_Set() const;
    bool is_net_contributions_cycle_to_date_Valid() const;

    float getNetOperatingExpendituresCycleToDate() const;
    void setNetOperatingExpendituresCycleToDate(const float &net_operating_expenditures_cycle_to_date);
    bool is_net_operating_expenditures_cycle_to_date_Set() const;
    bool is_net_operating_expenditures_cycle_to_date_Valid() const;

    QString getPdfUrl() const;
    void setPdfUrl(const QString &pdf_url);
    bool is_pdf_url_Set() const;
    bool is_pdf_url_Valid() const;

    QString getPrefix() const;
    void setPrefix(const QString &prefix);
    bool is_prefix_Set() const;
    bool is_prefix_Valid() const;

    QString getPrimaryElection() const;
    void setPrimaryElection(const QString &primary_election);
    bool is_primary_election_Set() const;
    bool is_primary_election_Valid() const;

    QDate getReceiptDate() const;
    void setReceiptDate(const QDate &receipt_date);
    bool is_receipt_date_Set() const;
    bool is_receipt_date_Valid() const;

    QString getReport() const;
    void setReport(const QString &report);
    bool is_report_Set() const;
    bool is_report_Valid() const;

    QString getReportType() const;
    void setReportType(const QString &report_type);
    bool is_report_type_Set() const;
    bool is_report_type_Valid() const;

    qint32 getReportYear() const;
    void setReportYear(const qint32 &report_year);
    bool is_report_year_Set() const;
    bool is_report_year_Valid() const;

    QString getRptPgi() const;
    void setRptPgi(const QString &rpt_pgi);
    bool is_rpt_pgi_Set() const;
    bool is_rpt_pgi_Valid() const;

    QDate getSignDate() const;
    void setSignDate(const QDate &sign_date);
    bool is_sign_date_Set() const;
    bool is_sign_date_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getStreet1() const;
    void setStreet1(const QString &street_1);
    bool is_street_1_Set() const;
    bool is_street_1_Valid() const;

    QString getStreet2() const;
    void setStreet2(const QString &street_2);
    bool is_street_2_Set() const;
    bool is_street_2_Valid() const;

    QString getSubtotalSummaryPeriod() const;
    void setSubtotalSummaryPeriod(const QString &subtotal_summary_period);
    bool is_subtotal_summary_period_Set() const;
    bool is_subtotal_summary_period_Valid() const;

    QString getSuffix() const;
    void setSuffix(const QString &suffix);
    bool is_suffix_Set() const;
    bool is_suffix_Valid() const;

    QString getSummaryLines() const;
    void setSummaryLines(const QString &summary_lines);
    bool is_summary_lines_Set() const;
    bool is_summary_lines_Valid() const;

    QString getTreasurerFirstName() const;
    void setTreasurerFirstName(const QString &treasurer_first_name);
    bool is_treasurer_first_name_Set() const;
    bool is_treasurer_first_name_Valid() const;

    QString getTreasurerLastName() const;
    void setTreasurerLastName(const QString &treasurer_last_name);
    bool is_treasurer_last_name_Set() const;
    bool is_treasurer_last_name_Valid() const;

    QString getTreasurerMiddleName() const;
    void setTreasurerMiddleName(const QString &treasurer_middle_name);
    bool is_treasurer_middle_name_Set() const;
    bool is_treasurer_middle_name_Valid() const;

    QString getTreasurerName() const;
    void setTreasurerName(const QString &treasurer_name);
    bool is_treasurer_name_Set() const;
    bool is_treasurer_name_Valid() const;

    QString getZip() const;
    void setZip(const QString &zip);
    bool is_zip_Set() const;
    bool is_zip_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_amended_by;
    bool m_amended_by_isSet;
    bool m_amended_by_isValid;

    QString m_amendment;
    bool m_amendment_isSet;
    bool m_amendment_isValid;

    QList<qint32> m_amendment_chain;
    bool m_amendment_chain_isSet;
    bool m_amendment_chain_isValid;

    QString m_beginning_image_number;
    bool m_beginning_image_number_isSet;
    bool m_beginning_image_number_isValid;

    float m_cash_on_hand_beginning_period;
    bool m_cash_on_hand_beginning_period_isSet;
    bool m_cash_on_hand_beginning_period_isValid;

    float m_cash_on_hand_end_period;
    bool m_cash_on_hand_end_period_isSet;
    bool m_cash_on_hand_end_period_isValid;

    QString m_city;
    bool m_city_isSet;
    bool m_city_isValid;

    QString m_committee_id;
    bool m_committee_id_isSet;
    bool m_committee_id_isValid;

    QString m_committee_name;
    bool m_committee_name_isSet;
    bool m_committee_name_isValid;

    QDate m_coverage_end_date;
    bool m_coverage_end_date_isSet;
    bool m_coverage_end_date_isValid;

    QDate m_coverage_start_date;
    bool m_coverage_start_date_isSet;
    bool m_coverage_start_date_isValid;

    QString m_csv_url;
    bool m_csv_url_isSet;
    bool m_csv_url_isValid;

    float m_debts_owed_by_committee;
    bool m_debts_owed_by_committee_isSet;
    bool m_debts_owed_by_committee_isValid;

    float m_debts_owed_to_committee;
    bool m_debts_owed_to_committee_isSet;
    bool m_debts_owed_to_committee_isValid;

    QString m_document_description;
    bool m_document_description_isSet;
    bool m_document_description_isValid;

    QDate m_election_date;
    bool m_election_date_isSet;
    bool m_election_date_isValid;

    QString m_election_state;
    bool m_election_state_isSet;
    bool m_election_state_isValid;

    float m_expenditure_subject_to_limits;
    bool m_expenditure_subject_to_limits_isSet;
    bool m_expenditure_subject_to_limits_isValid;

    QString m_fec_file_id;
    bool m_fec_file_id_isSet;
    bool m_fec_file_id_isValid;

    QString m_fec_url;
    bool m_fec_url_isSet;
    bool m_fec_url_isValid;

    qint32 m_file_number;
    bool m_file_number_isSet;
    bool m_file_number_isValid;

    QString m_general_election;
    bool m_general_election_isSet;
    bool m_general_election_isValid;

    bool m_is_amended;
    bool m_is_amended_isSet;
    bool m_is_amended_isValid;

    bool m_most_recent;
    bool m_most_recent_isSet;
    bool m_most_recent_isValid;

    qint32 m_most_recent_filing;
    bool m_most_recent_filing_isSet;
    bool m_most_recent_filing_isValid;

    float m_net_contributions_cycle_to_date;
    bool m_net_contributions_cycle_to_date_isSet;
    bool m_net_contributions_cycle_to_date_isValid;

    float m_net_operating_expenditures_cycle_to_date;
    bool m_net_operating_expenditures_cycle_to_date_isSet;
    bool m_net_operating_expenditures_cycle_to_date_isValid;

    QString m_pdf_url;
    bool m_pdf_url_isSet;
    bool m_pdf_url_isValid;

    QString m_prefix;
    bool m_prefix_isSet;
    bool m_prefix_isValid;

    QString m_primary_election;
    bool m_primary_election_isSet;
    bool m_primary_election_isValid;

    QDate m_receipt_date;
    bool m_receipt_date_isSet;
    bool m_receipt_date_isValid;

    QString m_report;
    bool m_report_isSet;
    bool m_report_isValid;

    QString m_report_type;
    bool m_report_type_isSet;
    bool m_report_type_isValid;

    qint32 m_report_year;
    bool m_report_year_isSet;
    bool m_report_year_isValid;

    QString m_rpt_pgi;
    bool m_rpt_pgi_isSet;
    bool m_rpt_pgi_isValid;

    QDate m_sign_date;
    bool m_sign_date_isSet;
    bool m_sign_date_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_street_1;
    bool m_street_1_isSet;
    bool m_street_1_isValid;

    QString m_street_2;
    bool m_street_2_isSet;
    bool m_street_2_isValid;

    QString m_subtotal_summary_period;
    bool m_subtotal_summary_period_isSet;
    bool m_subtotal_summary_period_isValid;

    QString m_suffix;
    bool m_suffix_isSet;
    bool m_suffix_isValid;

    QString m_summary_lines;
    bool m_summary_lines_isSet;
    bool m_summary_lines_isValid;

    QString m_treasurer_first_name;
    bool m_treasurer_first_name_isSet;
    bool m_treasurer_first_name_isValid;

    QString m_treasurer_last_name;
    bool m_treasurer_last_name_isSet;
    bool m_treasurer_last_name_isValid;

    QString m_treasurer_middle_name;
    bool m_treasurer_middle_name_isSet;
    bool m_treasurer_middle_name_isValid;

    QString m_treasurer_name;
    bool m_treasurer_name_isSet;
    bool m_treasurer_name_isValid;

    QString m_zip;
    bool m_zip_isSet;
    bool m_zip_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBaseF3PFiling)

#endif // OAIBaseF3PFiling_H
