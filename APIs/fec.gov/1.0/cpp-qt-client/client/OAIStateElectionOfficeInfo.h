/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStateElectionOfficeInfo.h
 *
 * 
 */

#ifndef OAIStateElectionOfficeInfo_H
#define OAIStateElectionOfficeInfo_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIStateElectionOfficeInfo : public OAIObject {
public:
    OAIStateElectionOfficeInfo();
    OAIStateElectionOfficeInfo(QString json);
    ~OAIStateElectionOfficeInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAddressLine1() const;
    void setAddressLine1(const QString &address_line1);
    bool is_address_line1_Set() const;
    bool is_address_line1_Valid() const;

    QString getAddressLine2() const;
    void setAddressLine2(const QString &address_line2);
    bool is_address_line2_Set() const;
    bool is_address_line2_Valid() const;

    QString getCity() const;
    void setCity(const QString &city);
    bool is_city_Set() const;
    bool is_city_Valid() const;

    QString getEmail() const;
    void setEmail(const QString &email);
    bool is_email_Set() const;
    bool is_email_Valid() const;

    QString getFaxNumber() const;
    void setFaxNumber(const QString &fax_number);
    bool is_fax_number_Set() const;
    bool is_fax_number_Valid() const;

    QString getMailingAddress1() const;
    void setMailingAddress1(const QString &mailing_address1);
    bool is_mailing_address1_Set() const;
    bool is_mailing_address1_Valid() const;

    QString getMailingAddress2() const;
    void setMailingAddress2(const QString &mailing_address2);
    bool is_mailing_address2_Set() const;
    bool is_mailing_address2_Valid() const;

    QString getMailingCity() const;
    void setMailingCity(const QString &mailing_city);
    bool is_mailing_city_Set() const;
    bool is_mailing_city_Valid() const;

    QString getMailingState() const;
    void setMailingState(const QString &mailing_state);
    bool is_mailing_state_Set() const;
    bool is_mailing_state_Valid() const;

    QString getMailingZipcode() const;
    void setMailingZipcode(const QString &mailing_zipcode);
    bool is_mailing_zipcode_Set() const;
    bool is_mailing_zipcode_Valid() const;

    QString getOfficeName() const;
    void setOfficeName(const QString &office_name);
    bool is_office_name_Set() const;
    bool is_office_name_Valid() const;

    QString getOfficeType() const;
    void setOfficeType(const QString &office_type);
    bool is_office_type_Set() const;
    bool is_office_type_Valid() const;

    QString getPrimaryPhoneNumber() const;
    void setPrimaryPhoneNumber(const QString &primary_phone_number);
    bool is_primary_phone_number_Set() const;
    bool is_primary_phone_number_Valid() const;

    QString getSecondaryPhoneNumber() const;
    void setSecondaryPhoneNumber(const QString &secondary_phone_number);
    bool is_secondary_phone_number_Set() const;
    bool is_secondary_phone_number_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getStateFullName() const;
    void setStateFullName(const QString &state_full_name);
    bool is_state_full_name_Set() const;
    bool is_state_full_name_Valid() const;

    QString getWebsiteUrl1() const;
    void setWebsiteUrl1(const QString &website_url1);
    bool is_website_url1_Set() const;
    bool is_website_url1_Valid() const;

    QString getWebsiteUrl2() const;
    void setWebsiteUrl2(const QString &website_url2);
    bool is_website_url2_Set() const;
    bool is_website_url2_Valid() const;

    QString getZipCode() const;
    void setZipCode(const QString &zip_code);
    bool is_zip_code_Set() const;
    bool is_zip_code_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_address_line1;
    bool m_address_line1_isSet;
    bool m_address_line1_isValid;

    QString m_address_line2;
    bool m_address_line2_isSet;
    bool m_address_line2_isValid;

    QString m_city;
    bool m_city_isSet;
    bool m_city_isValid;

    QString m_email;
    bool m_email_isSet;
    bool m_email_isValid;

    QString m_fax_number;
    bool m_fax_number_isSet;
    bool m_fax_number_isValid;

    QString m_mailing_address1;
    bool m_mailing_address1_isSet;
    bool m_mailing_address1_isValid;

    QString m_mailing_address2;
    bool m_mailing_address2_isSet;
    bool m_mailing_address2_isValid;

    QString m_mailing_city;
    bool m_mailing_city_isSet;
    bool m_mailing_city_isValid;

    QString m_mailing_state;
    bool m_mailing_state_isSet;
    bool m_mailing_state_isValid;

    QString m_mailing_zipcode;
    bool m_mailing_zipcode_isSet;
    bool m_mailing_zipcode_isValid;

    QString m_office_name;
    bool m_office_name_isSet;
    bool m_office_name_isValid;

    QString m_office_type;
    bool m_office_type_isSet;
    bool m_office_type_isValid;

    QString m_primary_phone_number;
    bool m_primary_phone_number_isSet;
    bool m_primary_phone_number_isValid;

    QString m_secondary_phone_number;
    bool m_secondary_phone_number_isSet;
    bool m_secondary_phone_number_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_state_full_name;
    bool m_state_full_name_isSet;
    bool m_state_full_name_isValid;

    QString m_website_url1;
    bool m_website_url1_isSet;
    bool m_website_url1_isValid;

    QString m_website_url2;
    bool m_website_url2_isSet;
    bool m_website_url2_isValid;

    QString m_zip_code;
    bool m_zip_code_isSet;
    bool m_zip_code_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStateElectionOfficeInfo)

#endif // OAIStateElectionOfficeInfo_H
