/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_legal_search__get_default_response_murs_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_legal_search__get_default_response_murs_inner::OAI_legal_search__get_default_response_murs_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_legal_search__get_default_response_murs_inner::OAI_legal_search__get_default_response_murs_inner() {
    this->initializeModel();
}

OAI_legal_search__get_default_response_murs_inner::~OAI_legal_search__get_default_response_murs_inner() {}

void OAI_legal_search__get_default_response_murs_inner::initializeModel() {

    m_close_date_isSet = false;
    m_close_date_isValid = false;

    m_commission_votes_isSet = false;
    m_commission_votes_isValid = false;

    m_dispositions_isSet = false;
    m_dispositions_isValid = false;

    m_doc_id_isSet = false;
    m_doc_id_isValid = false;

    m_document_highlights_isSet = false;
    m_document_highlights_isValid = false;

    m_documents_isSet = false;
    m_documents_isValid = false;

    m_election_cycles_isSet = false;
    m_election_cycles_isValid = false;

    m_highlights_isSet = false;
    m_highlights_isValid = false;

    m_mur_type_isSet = false;
    m_mur_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_r_false_isSet = false;
    m_r_false_isValid = false;

    m_open_date_isSet = false;
    m_open_date_isValid = false;

    m_participants_isSet = false;
    m_participants_isValid = false;

    m_respondents_isSet = false;
    m_respondents_isValid = false;

    m_subjects_isSet = false;
    m_subjects_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAI_legal_search__get_default_response_murs_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_legal_search__get_default_response_murs_inner::fromJsonObject(QJsonObject json) {

    m_close_date_isValid = ::OpenAPI::fromJsonValue(m_close_date, json[QString("close_date")]);
    m_close_date_isSet = !json[QString("close_date")].isNull() && m_close_date_isValid;

    m_commission_votes_isValid = ::OpenAPI::fromJsonValue(m_commission_votes, json[QString("commission_votes")]);
    m_commission_votes_isSet = !json[QString("commission_votes")].isNull() && m_commission_votes_isValid;

    m_dispositions_isValid = ::OpenAPI::fromJsonValue(m_dispositions, json[QString("dispositions")]);
    m_dispositions_isSet = !json[QString("dispositions")].isNull() && m_dispositions_isValid;

    m_doc_id_isValid = ::OpenAPI::fromJsonValue(m_doc_id, json[QString("doc_id")]);
    m_doc_id_isSet = !json[QString("doc_id")].isNull() && m_doc_id_isValid;

    m_document_highlights_isValid = ::OpenAPI::fromJsonValue(m_document_highlights, json[QString("document_highlights")]);
    m_document_highlights_isSet = !json[QString("document_highlights")].isNull() && m_document_highlights_isValid;

    m_documents_isValid = ::OpenAPI::fromJsonValue(m_documents, json[QString("documents")]);
    m_documents_isSet = !json[QString("documents")].isNull() && m_documents_isValid;

    m_election_cycles_isValid = ::OpenAPI::fromJsonValue(m_election_cycles, json[QString("election_cycles")]);
    m_election_cycles_isSet = !json[QString("election_cycles")].isNull() && m_election_cycles_isValid;

    m_highlights_isValid = ::OpenAPI::fromJsonValue(m_highlights, json[QString("highlights")]);
    m_highlights_isSet = !json[QString("highlights")].isNull() && m_highlights_isValid;

    m_mur_type_isValid = ::OpenAPI::fromJsonValue(m_mur_type, json[QString("mur_type")]);
    m_mur_type_isSet = !json[QString("mur_type")].isNull() && m_mur_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_r_false_isValid = ::OpenAPI::fromJsonValue(m_r_false, json[QString("false")]);
    m_r_false_isSet = !json[QString("false")].isNull() && m_r_false_isValid;

    m_open_date_isValid = ::OpenAPI::fromJsonValue(m_open_date, json[QString("open_date")]);
    m_open_date_isSet = !json[QString("open_date")].isNull() && m_open_date_isValid;

    m_participants_isValid = ::OpenAPI::fromJsonValue(m_participants, json[QString("participants")]);
    m_participants_isSet = !json[QString("participants")].isNull() && m_participants_isValid;

    m_respondents_isValid = ::OpenAPI::fromJsonValue(m_respondents, json[QString("respondents")]);
    m_respondents_isSet = !json[QString("respondents")].isNull() && m_respondents_isValid;

    m_subjects_isValid = ::OpenAPI::fromJsonValue(m_subjects, json[QString("subjects")]);
    m_subjects_isSet = !json[QString("subjects")].isNull() && m_subjects_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAI_legal_search__get_default_response_murs_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_legal_search__get_default_response_murs_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_close_date_isSet) {
        obj.insert(QString("close_date"), ::OpenAPI::toJsonValue(m_close_date));
    }
    if (m_commission_votes.size() > 0) {
        obj.insert(QString("commission_votes"), ::OpenAPI::toJsonValue(m_commission_votes));
    }
    if (m_dispositions.size() > 0) {
        obj.insert(QString("dispositions"), ::OpenAPI::toJsonValue(m_dispositions));
    }
    if (m_doc_id_isSet) {
        obj.insert(QString("doc_id"), ::OpenAPI::toJsonValue(m_doc_id));
    }
    if (m_document_highlights_isSet) {
        obj.insert(QString("document_highlights"), ::OpenAPI::toJsonValue(m_document_highlights));
    }
    if (m_documents.size() > 0) {
        obj.insert(QString("documents"), ::OpenAPI::toJsonValue(m_documents));
    }
    if (m_election_cycles_isSet) {
        obj.insert(QString("election_cycles"), ::OpenAPI::toJsonValue(m_election_cycles));
    }
    if (m_highlights.size() > 0) {
        obj.insert(QString("highlights"), ::OpenAPI::toJsonValue(m_highlights));
    }
    if (m_mur_type_isSet) {
        obj.insert(QString("mur_type"), ::OpenAPI::toJsonValue(m_mur_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_r_false_isSet) {
        obj.insert(QString("false"), ::OpenAPI::toJsonValue(m_r_false));
    }
    if (m_open_date_isSet) {
        obj.insert(QString("open_date"), ::OpenAPI::toJsonValue(m_open_date));
    }
    if (m_participants.size() > 0) {
        obj.insert(QString("participants"), ::OpenAPI::toJsonValue(m_participants));
    }
    if (m_respondents.size() > 0) {
        obj.insert(QString("respondents"), ::OpenAPI::toJsonValue(m_respondents));
    }
    if (m_subjects.size() > 0) {
        obj.insert(QString("subjects"), ::OpenAPI::toJsonValue(m_subjects));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QDate OAI_legal_search__get_default_response_murs_inner::getCloseDate() const {
    return m_close_date;
}
void OAI_legal_search__get_default_response_murs_inner::setCloseDate(const QDate &close_date) {
    m_close_date = close_date;
    m_close_date_isSet = true;
}

bool OAI_legal_search__get_default_response_murs_inner::is_close_date_Set() const{
    return m_close_date_isSet;
}

bool OAI_legal_search__get_default_response_murs_inner::is_close_date_Valid() const{
    return m_close_date_isValid;
}

QList<OAI_legal_search__get_default_response_admin_fines_inner_commission_votes_inner> OAI_legal_search__get_default_response_murs_inner::getCommissionVotes() const {
    return m_commission_votes;
}
void OAI_legal_search__get_default_response_murs_inner::setCommissionVotes(const QList<OAI_legal_search__get_default_response_admin_fines_inner_commission_votes_inner> &commission_votes) {
    m_commission_votes = commission_votes;
    m_commission_votes_isSet = true;
}

bool OAI_legal_search__get_default_response_murs_inner::is_commission_votes_Set() const{
    return m_commission_votes_isSet;
}

bool OAI_legal_search__get_default_response_murs_inner::is_commission_votes_Valid() const{
    return m_commission_votes_isValid;
}

QList<OAI_legal_search__get_default_response_adrs_inner_dispositions_inner> OAI_legal_search__get_default_response_murs_inner::getDispositions() const {
    return m_dispositions;
}
void OAI_legal_search__get_default_response_murs_inner::setDispositions(const QList<OAI_legal_search__get_default_response_adrs_inner_dispositions_inner> &dispositions) {
    m_dispositions = dispositions;
    m_dispositions_isSet = true;
}

bool OAI_legal_search__get_default_response_murs_inner::is_dispositions_Set() const{
    return m_dispositions_isSet;
}

bool OAI_legal_search__get_default_response_murs_inner::is_dispositions_Valid() const{
    return m_dispositions_isValid;
}

QString OAI_legal_search__get_default_response_murs_inner::getDocId() const {
    return m_doc_id;
}
void OAI_legal_search__get_default_response_murs_inner::setDocId(const QString &doc_id) {
    m_doc_id = doc_id;
    m_doc_id_isSet = true;
}

bool OAI_legal_search__get_default_response_murs_inner::is_doc_id_Set() const{
    return m_doc_id_isSet;
}

bool OAI_legal_search__get_default_response_murs_inner::is_doc_id_Valid() const{
    return m_doc_id_isValid;
}

OAIObject OAI_legal_search__get_default_response_murs_inner::getDocumentHighlights() const {
    return m_document_highlights;
}
void OAI_legal_search__get_default_response_murs_inner::setDocumentHighlights(const OAIObject &document_highlights) {
    m_document_highlights = document_highlights;
    m_document_highlights_isSet = true;
}

bool OAI_legal_search__get_default_response_murs_inner::is_document_highlights_Set() const{
    return m_document_highlights_isSet;
}

bool OAI_legal_search__get_default_response_murs_inner::is_document_highlights_Valid() const{
    return m_document_highlights_isValid;
}

QList<OAI_legal_search__get_default_response_admin_fines_inner_documents_inner> OAI_legal_search__get_default_response_murs_inner::getDocuments() const {
    return m_documents;
}
void OAI_legal_search__get_default_response_murs_inner::setDocuments(const QList<OAI_legal_search__get_default_response_admin_fines_inner_documents_inner> &documents) {
    m_documents = documents;
    m_documents_isSet = true;
}

bool OAI_legal_search__get_default_response_murs_inner::is_documents_Set() const{
    return m_documents_isSet;
}

bool OAI_legal_search__get_default_response_murs_inner::is_documents_Valid() const{
    return m_documents_isValid;
}

qint32 OAI_legal_search__get_default_response_murs_inner::getElectionCycles() const {
    return m_election_cycles;
}
void OAI_legal_search__get_default_response_murs_inner::setElectionCycles(const qint32 &election_cycles) {
    m_election_cycles = election_cycles;
    m_election_cycles_isSet = true;
}

bool OAI_legal_search__get_default_response_murs_inner::is_election_cycles_Set() const{
    return m_election_cycles_isSet;
}

bool OAI_legal_search__get_default_response_murs_inner::is_election_cycles_Valid() const{
    return m_election_cycles_isValid;
}

QList<QString> OAI_legal_search__get_default_response_murs_inner::getHighlights() const {
    return m_highlights;
}
void OAI_legal_search__get_default_response_murs_inner::setHighlights(const QList<QString> &highlights) {
    m_highlights = highlights;
    m_highlights_isSet = true;
}

bool OAI_legal_search__get_default_response_murs_inner::is_highlights_Set() const{
    return m_highlights_isSet;
}

bool OAI_legal_search__get_default_response_murs_inner::is_highlights_Valid() const{
    return m_highlights_isValid;
}

QString OAI_legal_search__get_default_response_murs_inner::getMurType() const {
    return m_mur_type;
}
void OAI_legal_search__get_default_response_murs_inner::setMurType(const QString &mur_type) {
    m_mur_type = mur_type;
    m_mur_type_isSet = true;
}

bool OAI_legal_search__get_default_response_murs_inner::is_mur_type_Set() const{
    return m_mur_type_isSet;
}

bool OAI_legal_search__get_default_response_murs_inner::is_mur_type_Valid() const{
    return m_mur_type_isValid;
}

QString OAI_legal_search__get_default_response_murs_inner::getName() const {
    return m_name;
}
void OAI_legal_search__get_default_response_murs_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAI_legal_search__get_default_response_murs_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAI_legal_search__get_default_response_murs_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAI_legal_search__get_default_response_murs_inner::getRFalse() const {
    return m_r_false;
}
void OAI_legal_search__get_default_response_murs_inner::setRFalse(const QString &r_false) {
    m_r_false = r_false;
    m_r_false_isSet = true;
}

bool OAI_legal_search__get_default_response_murs_inner::is_r_false_Set() const{
    return m_r_false_isSet;
}

bool OAI_legal_search__get_default_response_murs_inner::is_r_false_Valid() const{
    return m_r_false_isValid;
}

QDate OAI_legal_search__get_default_response_murs_inner::getOpenDate() const {
    return m_open_date;
}
void OAI_legal_search__get_default_response_murs_inner::setOpenDate(const QDate &open_date) {
    m_open_date = open_date;
    m_open_date_isSet = true;
}

bool OAI_legal_search__get_default_response_murs_inner::is_open_date_Set() const{
    return m_open_date_isSet;
}

bool OAI_legal_search__get_default_response_murs_inner::is_open_date_Valid() const{
    return m_open_date_isValid;
}

QList<OAI_legal_search__get_default_response_adrs_inner_participants_inner> OAI_legal_search__get_default_response_murs_inner::getParticipants() const {
    return m_participants;
}
void OAI_legal_search__get_default_response_murs_inner::setParticipants(const QList<OAI_legal_search__get_default_response_adrs_inner_participants_inner> &participants) {
    m_participants = participants;
    m_participants_isSet = true;
}

bool OAI_legal_search__get_default_response_murs_inner::is_participants_Set() const{
    return m_participants_isSet;
}

bool OAI_legal_search__get_default_response_murs_inner::is_participants_Valid() const{
    return m_participants_isValid;
}

QList<QString> OAI_legal_search__get_default_response_murs_inner::getRespondents() const {
    return m_respondents;
}
void OAI_legal_search__get_default_response_murs_inner::setRespondents(const QList<QString> &respondents) {
    m_respondents = respondents;
    m_respondents_isSet = true;
}

bool OAI_legal_search__get_default_response_murs_inner::is_respondents_Set() const{
    return m_respondents_isSet;
}

bool OAI_legal_search__get_default_response_murs_inner::is_respondents_Valid() const{
    return m_respondents_isValid;
}

QList<QString> OAI_legal_search__get_default_response_murs_inner::getSubjects() const {
    return m_subjects;
}
void OAI_legal_search__get_default_response_murs_inner::setSubjects(const QList<QString> &subjects) {
    m_subjects = subjects;
    m_subjects_isSet = true;
}

bool OAI_legal_search__get_default_response_murs_inner::is_subjects_Set() const{
    return m_subjects_isSet;
}

bool OAI_legal_search__get_default_response_murs_inner::is_subjects_Valid() const{
    return m_subjects_isValid;
}

QString OAI_legal_search__get_default_response_murs_inner::getUrl() const {
    return m_url;
}
void OAI_legal_search__get_default_response_murs_inner::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAI_legal_search__get_default_response_murs_inner::is_url_Set() const{
    return m_url_isSet;
}

bool OAI_legal_search__get_default_response_murs_inner::is_url_Valid() const{
    return m_url_isValid;
}

bool OAI_legal_search__get_default_response_murs_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_close_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commission_votes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dispositions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_doc_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_highlights_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_documents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_cycles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_highlights.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mur_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_false_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_participants.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_respondents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subjects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_legal_search__get_default_response_murs_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
