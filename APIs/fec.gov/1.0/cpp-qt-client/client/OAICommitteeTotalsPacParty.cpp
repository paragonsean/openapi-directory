/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommitteeTotalsPacParty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommitteeTotalsPacParty::OAICommitteeTotalsPacParty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommitteeTotalsPacParty::OAICommitteeTotalsPacParty() {
    this->initializeModel();
}

OAICommitteeTotalsPacParty::~OAICommitteeTotalsPacParty() {}

void OAICommitteeTotalsPacParty::initializeModel() {

    m_all_loans_received_isSet = false;
    m_all_loans_received_isValid = false;

    m_allocated_federal_election_levin_share_isSet = false;
    m_allocated_federal_election_levin_share_isValid = false;

    m_cash_on_hand_beginning_period_isSet = false;
    m_cash_on_hand_beginning_period_isValid = false;

    m_committee_designation_isSet = false;
    m_committee_designation_isValid = false;

    m_committee_designation_full_isSet = false;
    m_committee_designation_full_isValid = false;

    m_committee_id_isSet = false;
    m_committee_id_isValid = false;

    m_committee_name_isSet = false;
    m_committee_name_isValid = false;

    m_committee_state_isSet = false;
    m_committee_state_isValid = false;

    m_committee_type_isSet = false;
    m_committee_type_isValid = false;

    m_committee_type_full_isSet = false;
    m_committee_type_full_isValid = false;

    m_contribution_refunds_isSet = false;
    m_contribution_refunds_isValid = false;

    m_contributions_isSet = false;
    m_contributions_isValid = false;

    m_contributions_ie_and_party_expenditures_made_percent_isSet = false;
    m_contributions_ie_and_party_expenditures_made_percent_isValid = false;

    m_convention_exp_isSet = false;
    m_convention_exp_isValid = false;

    m_coordinated_expenditures_by_party_committee_isSet = false;
    m_coordinated_expenditures_by_party_committee_isValid = false;

    m_coverage_end_date_isSet = false;
    m_coverage_end_date_isValid = false;

    m_coverage_start_date_isSet = false;
    m_coverage_start_date_isValid = false;

    m_cycle_isSet = false;
    m_cycle_isValid = false;

    m_disbursements_isSet = false;
    m_disbursements_isValid = false;

    m_exp_prior_years_subject_limits_isSet = false;
    m_exp_prior_years_subject_limits_isValid = false;

    m_exp_subject_limits_isSet = false;
    m_exp_subject_limits_isValid = false;

    m_fed_candidate_committee_contributions_isSet = false;
    m_fed_candidate_committee_contributions_isValid = false;

    m_fed_candidate_contribution_refunds_isSet = false;
    m_fed_candidate_contribution_refunds_isValid = false;

    m_fed_disbursements_isSet = false;
    m_fed_disbursements_isValid = false;

    m_fed_election_activity_isSet = false;
    m_fed_election_activity_isValid = false;

    m_fed_operating_expenditures_isSet = false;
    m_fed_operating_expenditures_isValid = false;

    m_fed_receipts_isSet = false;
    m_fed_receipts_isValid = false;

    m_federal_funds_isSet = false;
    m_federal_funds_isValid = false;

    m_filing_frequency_isSet = false;
    m_filing_frequency_isValid = false;

    m_filing_frequency_full_isSet = false;
    m_filing_frequency_full_isValid = false;

    m_first_f1_date_isSet = false;
    m_first_f1_date_isValid = false;

    m_first_file_date_isSet = false;
    m_first_file_date_isValid = false;

    m_independent_expenditures_isSet = false;
    m_independent_expenditures_isValid = false;

    m_individual_contributions_isSet = false;
    m_individual_contributions_isValid = false;

    m_individual_contributions_percent_isSet = false;
    m_individual_contributions_percent_isValid = false;

    m_individual_itemized_contributions_isSet = false;
    m_individual_itemized_contributions_isValid = false;

    m_individual_unitemized_contributions_isSet = false;
    m_individual_unitemized_contributions_isValid = false;

    m_itemized_convention_exp_isSet = false;
    m_itemized_convention_exp_isValid = false;

    m_itemized_other_disb_isSet = false;
    m_itemized_other_disb_isValid = false;

    m_itemized_other_income_isSet = false;
    m_itemized_other_income_isValid = false;

    m_itemized_other_refunds_isSet = false;
    m_itemized_other_refunds_isValid = false;

    m_itemized_refunds_relating_convention_exp_isSet = false;
    m_itemized_refunds_relating_convention_exp_isValid = false;

    m_last_beginning_image_number_isSet = false;
    m_last_beginning_image_number_isValid = false;

    m_last_cash_on_hand_end_period_isSet = false;
    m_last_cash_on_hand_end_period_isValid = false;

    m_last_debts_owed_by_committee_isSet = false;
    m_last_debts_owed_by_committee_isValid = false;

    m_last_debts_owed_to_committee_isSet = false;
    m_last_debts_owed_to_committee_isValid = false;

    m_last_report_type_full_isSet = false;
    m_last_report_type_full_isValid = false;

    m_last_report_year_isSet = false;
    m_last_report_year_isValid = false;

    m_loan_repayments_made_isSet = false;
    m_loan_repayments_made_isValid = false;

    m_loan_repayments_received_isSet = false;
    m_loan_repayments_received_isValid = false;

    m_loans_and_loan_repayments_made_isSet = false;
    m_loans_and_loan_repayments_made_isValid = false;

    m_loans_and_loan_repayments_received_isSet = false;
    m_loans_and_loan_repayments_received_isValid = false;

    m_loans_made_isSet = false;
    m_loans_made_isValid = false;

    m_net_contributions_isSet = false;
    m_net_contributions_isValid = false;

    m_net_operating_expenditures_isSet = false;
    m_net_operating_expenditures_isValid = false;

    m_non_allocated_fed_election_activity_isSet = false;
    m_non_allocated_fed_election_activity_isValid = false;

    m_offsets_to_operating_expenditures_isSet = false;
    m_offsets_to_operating_expenditures_isValid = false;

    m_operating_expenditures_isSet = false;
    m_operating_expenditures_isValid = false;

    m_operating_expenditures_percent_isSet = false;
    m_operating_expenditures_percent_isValid = false;

    m_organization_type_isSet = false;
    m_organization_type_isValid = false;

    m_organization_type_full_isSet = false;
    m_organization_type_full_isValid = false;

    m_other_disbursements_isSet = false;
    m_other_disbursements_isValid = false;

    m_other_fed_operating_expenditures_isSet = false;
    m_other_fed_operating_expenditures_isValid = false;

    m_other_fed_receipts_isSet = false;
    m_other_fed_receipts_isValid = false;

    m_other_political_committee_contributions_isSet = false;
    m_other_political_committee_contributions_isValid = false;

    m_other_refunds_isSet = false;
    m_other_refunds_isValid = false;

    m_party_and_other_committee_contributions_percent_isSet = false;
    m_party_and_other_committee_contributions_percent_isValid = false;

    m_party_full_isSet = false;
    m_party_full_isValid = false;

    m_pdf_url_isSet = false;
    m_pdf_url_isValid = false;

    m_political_party_committee_contributions_isSet = false;
    m_political_party_committee_contributions_isValid = false;

    m_receipts_isSet = false;
    m_receipts_isValid = false;

    m_refunded_individual_contributions_isSet = false;
    m_refunded_individual_contributions_isValid = false;

    m_refunded_other_political_committee_contributions_isSet = false;
    m_refunded_other_political_committee_contributions_isValid = false;

    m_refunded_political_party_committee_contributions_isSet = false;
    m_refunded_political_party_committee_contributions_isValid = false;

    m_refunds_relating_convention_exp_isSet = false;
    m_refunds_relating_convention_exp_isValid = false;

    m_report_form_isSet = false;
    m_report_form_isValid = false;

    m_shared_fed_activity_isSet = false;
    m_shared_fed_activity_isValid = false;

    m_shared_fed_activity_nonfed_isSet = false;
    m_shared_fed_activity_nonfed_isValid = false;

    m_shared_fed_operating_expenditures_isSet = false;
    m_shared_fed_operating_expenditures_isValid = false;

    m_shared_nonfed_operating_expenditures_isSet = false;
    m_shared_nonfed_operating_expenditures_isValid = false;

    m_sponsor_candidate_ids_isSet = false;
    m_sponsor_candidate_ids_isValid = false;

    m_sponsor_candidate_list_isSet = false;
    m_sponsor_candidate_list_isValid = false;

    m_total_exp_subject_limits_isSet = false;
    m_total_exp_subject_limits_isValid = false;

    m_total_transfers_isSet = false;
    m_total_transfers_isValid = false;

    m_transaction_coverage_date_isSet = false;
    m_transaction_coverage_date_isValid = false;

    m_transfers_from_affiliated_party_isSet = false;
    m_transfers_from_affiliated_party_isValid = false;

    m_transfers_from_nonfed_account_isSet = false;
    m_transfers_from_nonfed_account_isValid = false;

    m_transfers_from_nonfed_levin_isSet = false;
    m_transfers_from_nonfed_levin_isValid = false;

    m_transfers_to_affiliated_committee_isSet = false;
    m_transfers_to_affiliated_committee_isValid = false;

    m_treasurer_name_isSet = false;
    m_treasurer_name_isValid = false;

    m_unitemized_convention_exp_isSet = false;
    m_unitemized_convention_exp_isValid = false;

    m_unitemized_other_disb_isSet = false;
    m_unitemized_other_disb_isValid = false;

    m_unitemized_other_income_isSet = false;
    m_unitemized_other_income_isValid = false;

    m_unitemized_other_refunds_isSet = false;
    m_unitemized_other_refunds_isValid = false;

    m_unitemized_refunds_relating_convention_exp_isSet = false;
    m_unitemized_refunds_relating_convention_exp_isValid = false;
}

void OAICommitteeTotalsPacParty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommitteeTotalsPacParty::fromJsonObject(QJsonObject json) {

    m_all_loans_received_isValid = ::OpenAPI::fromJsonValue(m_all_loans_received, json[QString("all_loans_received")]);
    m_all_loans_received_isSet = !json[QString("all_loans_received")].isNull() && m_all_loans_received_isValid;

    m_allocated_federal_election_levin_share_isValid = ::OpenAPI::fromJsonValue(m_allocated_federal_election_levin_share, json[QString("allocated_federal_election_levin_share")]);
    m_allocated_federal_election_levin_share_isSet = !json[QString("allocated_federal_election_levin_share")].isNull() && m_allocated_federal_election_levin_share_isValid;

    m_cash_on_hand_beginning_period_isValid = ::OpenAPI::fromJsonValue(m_cash_on_hand_beginning_period, json[QString("cash_on_hand_beginning_period")]);
    m_cash_on_hand_beginning_period_isSet = !json[QString("cash_on_hand_beginning_period")].isNull() && m_cash_on_hand_beginning_period_isValid;

    m_committee_designation_isValid = ::OpenAPI::fromJsonValue(m_committee_designation, json[QString("committee_designation")]);
    m_committee_designation_isSet = !json[QString("committee_designation")].isNull() && m_committee_designation_isValid;

    m_committee_designation_full_isValid = ::OpenAPI::fromJsonValue(m_committee_designation_full, json[QString("committee_designation_full")]);
    m_committee_designation_full_isSet = !json[QString("committee_designation_full")].isNull() && m_committee_designation_full_isValid;

    m_committee_id_isValid = ::OpenAPI::fromJsonValue(m_committee_id, json[QString("committee_id")]);
    m_committee_id_isSet = !json[QString("committee_id")].isNull() && m_committee_id_isValid;

    m_committee_name_isValid = ::OpenAPI::fromJsonValue(m_committee_name, json[QString("committee_name")]);
    m_committee_name_isSet = !json[QString("committee_name")].isNull() && m_committee_name_isValid;

    m_committee_state_isValid = ::OpenAPI::fromJsonValue(m_committee_state, json[QString("committee_state")]);
    m_committee_state_isSet = !json[QString("committee_state")].isNull() && m_committee_state_isValid;

    m_committee_type_isValid = ::OpenAPI::fromJsonValue(m_committee_type, json[QString("committee_type")]);
    m_committee_type_isSet = !json[QString("committee_type")].isNull() && m_committee_type_isValid;

    m_committee_type_full_isValid = ::OpenAPI::fromJsonValue(m_committee_type_full, json[QString("committee_type_full")]);
    m_committee_type_full_isSet = !json[QString("committee_type_full")].isNull() && m_committee_type_full_isValid;

    m_contribution_refunds_isValid = ::OpenAPI::fromJsonValue(m_contribution_refunds, json[QString("contribution_refunds")]);
    m_contribution_refunds_isSet = !json[QString("contribution_refunds")].isNull() && m_contribution_refunds_isValid;

    m_contributions_isValid = ::OpenAPI::fromJsonValue(m_contributions, json[QString("contributions")]);
    m_contributions_isSet = !json[QString("contributions")].isNull() && m_contributions_isValid;

    m_contributions_ie_and_party_expenditures_made_percent_isValid = ::OpenAPI::fromJsonValue(m_contributions_ie_and_party_expenditures_made_percent, json[QString("contributions_ie_and_party_expenditures_made_percent")]);
    m_contributions_ie_and_party_expenditures_made_percent_isSet = !json[QString("contributions_ie_and_party_expenditures_made_percent")].isNull() && m_contributions_ie_and_party_expenditures_made_percent_isValid;

    m_convention_exp_isValid = ::OpenAPI::fromJsonValue(m_convention_exp, json[QString("convention_exp")]);
    m_convention_exp_isSet = !json[QString("convention_exp")].isNull() && m_convention_exp_isValid;

    m_coordinated_expenditures_by_party_committee_isValid = ::OpenAPI::fromJsonValue(m_coordinated_expenditures_by_party_committee, json[QString("coordinated_expenditures_by_party_committee")]);
    m_coordinated_expenditures_by_party_committee_isSet = !json[QString("coordinated_expenditures_by_party_committee")].isNull() && m_coordinated_expenditures_by_party_committee_isValid;

    m_coverage_end_date_isValid = ::OpenAPI::fromJsonValue(m_coverage_end_date, json[QString("coverage_end_date")]);
    m_coverage_end_date_isSet = !json[QString("coverage_end_date")].isNull() && m_coverage_end_date_isValid;

    m_coverage_start_date_isValid = ::OpenAPI::fromJsonValue(m_coverage_start_date, json[QString("coverage_start_date")]);
    m_coverage_start_date_isSet = !json[QString("coverage_start_date")].isNull() && m_coverage_start_date_isValid;

    m_cycle_isValid = ::OpenAPI::fromJsonValue(m_cycle, json[QString("cycle")]);
    m_cycle_isSet = !json[QString("cycle")].isNull() && m_cycle_isValid;

    m_disbursements_isValid = ::OpenAPI::fromJsonValue(m_disbursements, json[QString("disbursements")]);
    m_disbursements_isSet = !json[QString("disbursements")].isNull() && m_disbursements_isValid;

    m_exp_prior_years_subject_limits_isValid = ::OpenAPI::fromJsonValue(m_exp_prior_years_subject_limits, json[QString("exp_prior_years_subject_limits")]);
    m_exp_prior_years_subject_limits_isSet = !json[QString("exp_prior_years_subject_limits")].isNull() && m_exp_prior_years_subject_limits_isValid;

    m_exp_subject_limits_isValid = ::OpenAPI::fromJsonValue(m_exp_subject_limits, json[QString("exp_subject_limits")]);
    m_exp_subject_limits_isSet = !json[QString("exp_subject_limits")].isNull() && m_exp_subject_limits_isValid;

    m_fed_candidate_committee_contributions_isValid = ::OpenAPI::fromJsonValue(m_fed_candidate_committee_contributions, json[QString("fed_candidate_committee_contributions")]);
    m_fed_candidate_committee_contributions_isSet = !json[QString("fed_candidate_committee_contributions")].isNull() && m_fed_candidate_committee_contributions_isValid;

    m_fed_candidate_contribution_refunds_isValid = ::OpenAPI::fromJsonValue(m_fed_candidate_contribution_refunds, json[QString("fed_candidate_contribution_refunds")]);
    m_fed_candidate_contribution_refunds_isSet = !json[QString("fed_candidate_contribution_refunds")].isNull() && m_fed_candidate_contribution_refunds_isValid;

    m_fed_disbursements_isValid = ::OpenAPI::fromJsonValue(m_fed_disbursements, json[QString("fed_disbursements")]);
    m_fed_disbursements_isSet = !json[QString("fed_disbursements")].isNull() && m_fed_disbursements_isValid;

    m_fed_election_activity_isValid = ::OpenAPI::fromJsonValue(m_fed_election_activity, json[QString("fed_election_activity")]);
    m_fed_election_activity_isSet = !json[QString("fed_election_activity")].isNull() && m_fed_election_activity_isValid;

    m_fed_operating_expenditures_isValid = ::OpenAPI::fromJsonValue(m_fed_operating_expenditures, json[QString("fed_operating_expenditures")]);
    m_fed_operating_expenditures_isSet = !json[QString("fed_operating_expenditures")].isNull() && m_fed_operating_expenditures_isValid;

    m_fed_receipts_isValid = ::OpenAPI::fromJsonValue(m_fed_receipts, json[QString("fed_receipts")]);
    m_fed_receipts_isSet = !json[QString("fed_receipts")].isNull() && m_fed_receipts_isValid;

    m_federal_funds_isValid = ::OpenAPI::fromJsonValue(m_federal_funds, json[QString("federal_funds")]);
    m_federal_funds_isSet = !json[QString("federal_funds")].isNull() && m_federal_funds_isValid;

    m_filing_frequency_isValid = ::OpenAPI::fromJsonValue(m_filing_frequency, json[QString("filing_frequency")]);
    m_filing_frequency_isSet = !json[QString("filing_frequency")].isNull() && m_filing_frequency_isValid;

    m_filing_frequency_full_isValid = ::OpenAPI::fromJsonValue(m_filing_frequency_full, json[QString("filing_frequency_full")]);
    m_filing_frequency_full_isSet = !json[QString("filing_frequency_full")].isNull() && m_filing_frequency_full_isValid;

    m_first_f1_date_isValid = ::OpenAPI::fromJsonValue(m_first_f1_date, json[QString("first_f1_date")]);
    m_first_f1_date_isSet = !json[QString("first_f1_date")].isNull() && m_first_f1_date_isValid;

    m_first_file_date_isValid = ::OpenAPI::fromJsonValue(m_first_file_date, json[QString("first_file_date")]);
    m_first_file_date_isSet = !json[QString("first_file_date")].isNull() && m_first_file_date_isValid;

    m_independent_expenditures_isValid = ::OpenAPI::fromJsonValue(m_independent_expenditures, json[QString("independent_expenditures")]);
    m_independent_expenditures_isSet = !json[QString("independent_expenditures")].isNull() && m_independent_expenditures_isValid;

    m_individual_contributions_isValid = ::OpenAPI::fromJsonValue(m_individual_contributions, json[QString("individual_contributions")]);
    m_individual_contributions_isSet = !json[QString("individual_contributions")].isNull() && m_individual_contributions_isValid;

    m_individual_contributions_percent_isValid = ::OpenAPI::fromJsonValue(m_individual_contributions_percent, json[QString("individual_contributions_percent")]);
    m_individual_contributions_percent_isSet = !json[QString("individual_contributions_percent")].isNull() && m_individual_contributions_percent_isValid;

    m_individual_itemized_contributions_isValid = ::OpenAPI::fromJsonValue(m_individual_itemized_contributions, json[QString("individual_itemized_contributions")]);
    m_individual_itemized_contributions_isSet = !json[QString("individual_itemized_contributions")].isNull() && m_individual_itemized_contributions_isValid;

    m_individual_unitemized_contributions_isValid = ::OpenAPI::fromJsonValue(m_individual_unitemized_contributions, json[QString("individual_unitemized_contributions")]);
    m_individual_unitemized_contributions_isSet = !json[QString("individual_unitemized_contributions")].isNull() && m_individual_unitemized_contributions_isValid;

    m_itemized_convention_exp_isValid = ::OpenAPI::fromJsonValue(m_itemized_convention_exp, json[QString("itemized_convention_exp")]);
    m_itemized_convention_exp_isSet = !json[QString("itemized_convention_exp")].isNull() && m_itemized_convention_exp_isValid;

    m_itemized_other_disb_isValid = ::OpenAPI::fromJsonValue(m_itemized_other_disb, json[QString("itemized_other_disb")]);
    m_itemized_other_disb_isSet = !json[QString("itemized_other_disb")].isNull() && m_itemized_other_disb_isValid;

    m_itemized_other_income_isValid = ::OpenAPI::fromJsonValue(m_itemized_other_income, json[QString("itemized_other_income")]);
    m_itemized_other_income_isSet = !json[QString("itemized_other_income")].isNull() && m_itemized_other_income_isValid;

    m_itemized_other_refunds_isValid = ::OpenAPI::fromJsonValue(m_itemized_other_refunds, json[QString("itemized_other_refunds")]);
    m_itemized_other_refunds_isSet = !json[QString("itemized_other_refunds")].isNull() && m_itemized_other_refunds_isValid;

    m_itemized_refunds_relating_convention_exp_isValid = ::OpenAPI::fromJsonValue(m_itemized_refunds_relating_convention_exp, json[QString("itemized_refunds_relating_convention_exp")]);
    m_itemized_refunds_relating_convention_exp_isSet = !json[QString("itemized_refunds_relating_convention_exp")].isNull() && m_itemized_refunds_relating_convention_exp_isValid;

    m_last_beginning_image_number_isValid = ::OpenAPI::fromJsonValue(m_last_beginning_image_number, json[QString("last_beginning_image_number")]);
    m_last_beginning_image_number_isSet = !json[QString("last_beginning_image_number")].isNull() && m_last_beginning_image_number_isValid;

    m_last_cash_on_hand_end_period_isValid = ::OpenAPI::fromJsonValue(m_last_cash_on_hand_end_period, json[QString("last_cash_on_hand_end_period")]);
    m_last_cash_on_hand_end_period_isSet = !json[QString("last_cash_on_hand_end_period")].isNull() && m_last_cash_on_hand_end_period_isValid;

    m_last_debts_owed_by_committee_isValid = ::OpenAPI::fromJsonValue(m_last_debts_owed_by_committee, json[QString("last_debts_owed_by_committee")]);
    m_last_debts_owed_by_committee_isSet = !json[QString("last_debts_owed_by_committee")].isNull() && m_last_debts_owed_by_committee_isValid;

    m_last_debts_owed_to_committee_isValid = ::OpenAPI::fromJsonValue(m_last_debts_owed_to_committee, json[QString("last_debts_owed_to_committee")]);
    m_last_debts_owed_to_committee_isSet = !json[QString("last_debts_owed_to_committee")].isNull() && m_last_debts_owed_to_committee_isValid;

    m_last_report_type_full_isValid = ::OpenAPI::fromJsonValue(m_last_report_type_full, json[QString("last_report_type_full")]);
    m_last_report_type_full_isSet = !json[QString("last_report_type_full")].isNull() && m_last_report_type_full_isValid;

    m_last_report_year_isValid = ::OpenAPI::fromJsonValue(m_last_report_year, json[QString("last_report_year")]);
    m_last_report_year_isSet = !json[QString("last_report_year")].isNull() && m_last_report_year_isValid;

    m_loan_repayments_made_isValid = ::OpenAPI::fromJsonValue(m_loan_repayments_made, json[QString("loan_repayments_made")]);
    m_loan_repayments_made_isSet = !json[QString("loan_repayments_made")].isNull() && m_loan_repayments_made_isValid;

    m_loan_repayments_received_isValid = ::OpenAPI::fromJsonValue(m_loan_repayments_received, json[QString("loan_repayments_received")]);
    m_loan_repayments_received_isSet = !json[QString("loan_repayments_received")].isNull() && m_loan_repayments_received_isValid;

    m_loans_and_loan_repayments_made_isValid = ::OpenAPI::fromJsonValue(m_loans_and_loan_repayments_made, json[QString("loans_and_loan_repayments_made")]);
    m_loans_and_loan_repayments_made_isSet = !json[QString("loans_and_loan_repayments_made")].isNull() && m_loans_and_loan_repayments_made_isValid;

    m_loans_and_loan_repayments_received_isValid = ::OpenAPI::fromJsonValue(m_loans_and_loan_repayments_received, json[QString("loans_and_loan_repayments_received")]);
    m_loans_and_loan_repayments_received_isSet = !json[QString("loans_and_loan_repayments_received")].isNull() && m_loans_and_loan_repayments_received_isValid;

    m_loans_made_isValid = ::OpenAPI::fromJsonValue(m_loans_made, json[QString("loans_made")]);
    m_loans_made_isSet = !json[QString("loans_made")].isNull() && m_loans_made_isValid;

    m_net_contributions_isValid = ::OpenAPI::fromJsonValue(m_net_contributions, json[QString("net_contributions")]);
    m_net_contributions_isSet = !json[QString("net_contributions")].isNull() && m_net_contributions_isValid;

    m_net_operating_expenditures_isValid = ::OpenAPI::fromJsonValue(m_net_operating_expenditures, json[QString("net_operating_expenditures")]);
    m_net_operating_expenditures_isSet = !json[QString("net_operating_expenditures")].isNull() && m_net_operating_expenditures_isValid;

    m_non_allocated_fed_election_activity_isValid = ::OpenAPI::fromJsonValue(m_non_allocated_fed_election_activity, json[QString("non_allocated_fed_election_activity")]);
    m_non_allocated_fed_election_activity_isSet = !json[QString("non_allocated_fed_election_activity")].isNull() && m_non_allocated_fed_election_activity_isValid;

    m_offsets_to_operating_expenditures_isValid = ::OpenAPI::fromJsonValue(m_offsets_to_operating_expenditures, json[QString("offsets_to_operating_expenditures")]);
    m_offsets_to_operating_expenditures_isSet = !json[QString("offsets_to_operating_expenditures")].isNull() && m_offsets_to_operating_expenditures_isValid;

    m_operating_expenditures_isValid = ::OpenAPI::fromJsonValue(m_operating_expenditures, json[QString("operating_expenditures")]);
    m_operating_expenditures_isSet = !json[QString("operating_expenditures")].isNull() && m_operating_expenditures_isValid;

    m_operating_expenditures_percent_isValid = ::OpenAPI::fromJsonValue(m_operating_expenditures_percent, json[QString("operating_expenditures_percent")]);
    m_operating_expenditures_percent_isSet = !json[QString("operating_expenditures_percent")].isNull() && m_operating_expenditures_percent_isValid;

    m_organization_type_isValid = ::OpenAPI::fromJsonValue(m_organization_type, json[QString("organization_type")]);
    m_organization_type_isSet = !json[QString("organization_type")].isNull() && m_organization_type_isValid;

    m_organization_type_full_isValid = ::OpenAPI::fromJsonValue(m_organization_type_full, json[QString("organization_type_full")]);
    m_organization_type_full_isSet = !json[QString("organization_type_full")].isNull() && m_organization_type_full_isValid;

    m_other_disbursements_isValid = ::OpenAPI::fromJsonValue(m_other_disbursements, json[QString("other_disbursements")]);
    m_other_disbursements_isSet = !json[QString("other_disbursements")].isNull() && m_other_disbursements_isValid;

    m_other_fed_operating_expenditures_isValid = ::OpenAPI::fromJsonValue(m_other_fed_operating_expenditures, json[QString("other_fed_operating_expenditures")]);
    m_other_fed_operating_expenditures_isSet = !json[QString("other_fed_operating_expenditures")].isNull() && m_other_fed_operating_expenditures_isValid;

    m_other_fed_receipts_isValid = ::OpenAPI::fromJsonValue(m_other_fed_receipts, json[QString("other_fed_receipts")]);
    m_other_fed_receipts_isSet = !json[QString("other_fed_receipts")].isNull() && m_other_fed_receipts_isValid;

    m_other_political_committee_contributions_isValid = ::OpenAPI::fromJsonValue(m_other_political_committee_contributions, json[QString("other_political_committee_contributions")]);
    m_other_political_committee_contributions_isSet = !json[QString("other_political_committee_contributions")].isNull() && m_other_political_committee_contributions_isValid;

    m_other_refunds_isValid = ::OpenAPI::fromJsonValue(m_other_refunds, json[QString("other_refunds")]);
    m_other_refunds_isSet = !json[QString("other_refunds")].isNull() && m_other_refunds_isValid;

    m_party_and_other_committee_contributions_percent_isValid = ::OpenAPI::fromJsonValue(m_party_and_other_committee_contributions_percent, json[QString("party_and_other_committee_contributions_percent")]);
    m_party_and_other_committee_contributions_percent_isSet = !json[QString("party_and_other_committee_contributions_percent")].isNull() && m_party_and_other_committee_contributions_percent_isValid;

    m_party_full_isValid = ::OpenAPI::fromJsonValue(m_party_full, json[QString("party_full")]);
    m_party_full_isSet = !json[QString("party_full")].isNull() && m_party_full_isValid;

    m_pdf_url_isValid = ::OpenAPI::fromJsonValue(m_pdf_url, json[QString("pdf_url")]);
    m_pdf_url_isSet = !json[QString("pdf_url")].isNull() && m_pdf_url_isValid;

    m_political_party_committee_contributions_isValid = ::OpenAPI::fromJsonValue(m_political_party_committee_contributions, json[QString("political_party_committee_contributions")]);
    m_political_party_committee_contributions_isSet = !json[QString("political_party_committee_contributions")].isNull() && m_political_party_committee_contributions_isValid;

    m_receipts_isValid = ::OpenAPI::fromJsonValue(m_receipts, json[QString("receipts")]);
    m_receipts_isSet = !json[QString("receipts")].isNull() && m_receipts_isValid;

    m_refunded_individual_contributions_isValid = ::OpenAPI::fromJsonValue(m_refunded_individual_contributions, json[QString("refunded_individual_contributions")]);
    m_refunded_individual_contributions_isSet = !json[QString("refunded_individual_contributions")].isNull() && m_refunded_individual_contributions_isValid;

    m_refunded_other_political_committee_contributions_isValid = ::OpenAPI::fromJsonValue(m_refunded_other_political_committee_contributions, json[QString("refunded_other_political_committee_contributions")]);
    m_refunded_other_political_committee_contributions_isSet = !json[QString("refunded_other_political_committee_contributions")].isNull() && m_refunded_other_political_committee_contributions_isValid;

    m_refunded_political_party_committee_contributions_isValid = ::OpenAPI::fromJsonValue(m_refunded_political_party_committee_contributions, json[QString("refunded_political_party_committee_contributions")]);
    m_refunded_political_party_committee_contributions_isSet = !json[QString("refunded_political_party_committee_contributions")].isNull() && m_refunded_political_party_committee_contributions_isValid;

    m_refunds_relating_convention_exp_isValid = ::OpenAPI::fromJsonValue(m_refunds_relating_convention_exp, json[QString("refunds_relating_convention_exp")]);
    m_refunds_relating_convention_exp_isSet = !json[QString("refunds_relating_convention_exp")].isNull() && m_refunds_relating_convention_exp_isValid;

    m_report_form_isValid = ::OpenAPI::fromJsonValue(m_report_form, json[QString("report_form")]);
    m_report_form_isSet = !json[QString("report_form")].isNull() && m_report_form_isValid;

    m_shared_fed_activity_isValid = ::OpenAPI::fromJsonValue(m_shared_fed_activity, json[QString("shared_fed_activity")]);
    m_shared_fed_activity_isSet = !json[QString("shared_fed_activity")].isNull() && m_shared_fed_activity_isValid;

    m_shared_fed_activity_nonfed_isValid = ::OpenAPI::fromJsonValue(m_shared_fed_activity_nonfed, json[QString("shared_fed_activity_nonfed")]);
    m_shared_fed_activity_nonfed_isSet = !json[QString("shared_fed_activity_nonfed")].isNull() && m_shared_fed_activity_nonfed_isValid;

    m_shared_fed_operating_expenditures_isValid = ::OpenAPI::fromJsonValue(m_shared_fed_operating_expenditures, json[QString("shared_fed_operating_expenditures")]);
    m_shared_fed_operating_expenditures_isSet = !json[QString("shared_fed_operating_expenditures")].isNull() && m_shared_fed_operating_expenditures_isValid;

    m_shared_nonfed_operating_expenditures_isValid = ::OpenAPI::fromJsonValue(m_shared_nonfed_operating_expenditures, json[QString("shared_nonfed_operating_expenditures")]);
    m_shared_nonfed_operating_expenditures_isSet = !json[QString("shared_nonfed_operating_expenditures")].isNull() && m_shared_nonfed_operating_expenditures_isValid;

    m_sponsor_candidate_ids_isValid = ::OpenAPI::fromJsonValue(m_sponsor_candidate_ids, json[QString("sponsor_candidate_ids")]);
    m_sponsor_candidate_ids_isSet = !json[QString("sponsor_candidate_ids")].isNull() && m_sponsor_candidate_ids_isValid;

    m_sponsor_candidate_list_isValid = ::OpenAPI::fromJsonValue(m_sponsor_candidate_list, json[QString("sponsor_candidate_list")]);
    m_sponsor_candidate_list_isSet = !json[QString("sponsor_candidate_list")].isNull() && m_sponsor_candidate_list_isValid;

    m_total_exp_subject_limits_isValid = ::OpenAPI::fromJsonValue(m_total_exp_subject_limits, json[QString("total_exp_subject_limits")]);
    m_total_exp_subject_limits_isSet = !json[QString("total_exp_subject_limits")].isNull() && m_total_exp_subject_limits_isValid;

    m_total_transfers_isValid = ::OpenAPI::fromJsonValue(m_total_transfers, json[QString("total_transfers")]);
    m_total_transfers_isSet = !json[QString("total_transfers")].isNull() && m_total_transfers_isValid;

    m_transaction_coverage_date_isValid = ::OpenAPI::fromJsonValue(m_transaction_coverage_date, json[QString("transaction_coverage_date")]);
    m_transaction_coverage_date_isSet = !json[QString("transaction_coverage_date")].isNull() && m_transaction_coverage_date_isValid;

    m_transfers_from_affiliated_party_isValid = ::OpenAPI::fromJsonValue(m_transfers_from_affiliated_party, json[QString("transfers_from_affiliated_party")]);
    m_transfers_from_affiliated_party_isSet = !json[QString("transfers_from_affiliated_party")].isNull() && m_transfers_from_affiliated_party_isValid;

    m_transfers_from_nonfed_account_isValid = ::OpenAPI::fromJsonValue(m_transfers_from_nonfed_account, json[QString("transfers_from_nonfed_account")]);
    m_transfers_from_nonfed_account_isSet = !json[QString("transfers_from_nonfed_account")].isNull() && m_transfers_from_nonfed_account_isValid;

    m_transfers_from_nonfed_levin_isValid = ::OpenAPI::fromJsonValue(m_transfers_from_nonfed_levin, json[QString("transfers_from_nonfed_levin")]);
    m_transfers_from_nonfed_levin_isSet = !json[QString("transfers_from_nonfed_levin")].isNull() && m_transfers_from_nonfed_levin_isValid;

    m_transfers_to_affiliated_committee_isValid = ::OpenAPI::fromJsonValue(m_transfers_to_affiliated_committee, json[QString("transfers_to_affiliated_committee")]);
    m_transfers_to_affiliated_committee_isSet = !json[QString("transfers_to_affiliated_committee")].isNull() && m_transfers_to_affiliated_committee_isValid;

    m_treasurer_name_isValid = ::OpenAPI::fromJsonValue(m_treasurer_name, json[QString("treasurer_name")]);
    m_treasurer_name_isSet = !json[QString("treasurer_name")].isNull() && m_treasurer_name_isValid;

    m_unitemized_convention_exp_isValid = ::OpenAPI::fromJsonValue(m_unitemized_convention_exp, json[QString("unitemized_convention_exp")]);
    m_unitemized_convention_exp_isSet = !json[QString("unitemized_convention_exp")].isNull() && m_unitemized_convention_exp_isValid;

    m_unitemized_other_disb_isValid = ::OpenAPI::fromJsonValue(m_unitemized_other_disb, json[QString("unitemized_other_disb")]);
    m_unitemized_other_disb_isSet = !json[QString("unitemized_other_disb")].isNull() && m_unitemized_other_disb_isValid;

    m_unitemized_other_income_isValid = ::OpenAPI::fromJsonValue(m_unitemized_other_income, json[QString("unitemized_other_income")]);
    m_unitemized_other_income_isSet = !json[QString("unitemized_other_income")].isNull() && m_unitemized_other_income_isValid;

    m_unitemized_other_refunds_isValid = ::OpenAPI::fromJsonValue(m_unitemized_other_refunds, json[QString("unitemized_other_refunds")]);
    m_unitemized_other_refunds_isSet = !json[QString("unitemized_other_refunds")].isNull() && m_unitemized_other_refunds_isValid;

    m_unitemized_refunds_relating_convention_exp_isValid = ::OpenAPI::fromJsonValue(m_unitemized_refunds_relating_convention_exp, json[QString("unitemized_refunds_relating_convention_exp")]);
    m_unitemized_refunds_relating_convention_exp_isSet = !json[QString("unitemized_refunds_relating_convention_exp")].isNull() && m_unitemized_refunds_relating_convention_exp_isValid;
}

QString OAICommitteeTotalsPacParty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommitteeTotalsPacParty::asJsonObject() const {
    QJsonObject obj;
    if (m_all_loans_received_isSet) {
        obj.insert(QString("all_loans_received"), ::OpenAPI::toJsonValue(m_all_loans_received));
    }
    if (m_allocated_federal_election_levin_share_isSet) {
        obj.insert(QString("allocated_federal_election_levin_share"), ::OpenAPI::toJsonValue(m_allocated_federal_election_levin_share));
    }
    if (m_cash_on_hand_beginning_period_isSet) {
        obj.insert(QString("cash_on_hand_beginning_period"), ::OpenAPI::toJsonValue(m_cash_on_hand_beginning_period));
    }
    if (m_committee_designation_isSet) {
        obj.insert(QString("committee_designation"), ::OpenAPI::toJsonValue(m_committee_designation));
    }
    if (m_committee_designation_full_isSet) {
        obj.insert(QString("committee_designation_full"), ::OpenAPI::toJsonValue(m_committee_designation_full));
    }
    if (m_committee_id_isSet) {
        obj.insert(QString("committee_id"), ::OpenAPI::toJsonValue(m_committee_id));
    }
    if (m_committee_name_isSet) {
        obj.insert(QString("committee_name"), ::OpenAPI::toJsonValue(m_committee_name));
    }
    if (m_committee_state_isSet) {
        obj.insert(QString("committee_state"), ::OpenAPI::toJsonValue(m_committee_state));
    }
    if (m_committee_type_isSet) {
        obj.insert(QString("committee_type"), ::OpenAPI::toJsonValue(m_committee_type));
    }
    if (m_committee_type_full_isSet) {
        obj.insert(QString("committee_type_full"), ::OpenAPI::toJsonValue(m_committee_type_full));
    }
    if (m_contribution_refunds_isSet) {
        obj.insert(QString("contribution_refunds"), ::OpenAPI::toJsonValue(m_contribution_refunds));
    }
    if (m_contributions_isSet) {
        obj.insert(QString("contributions"), ::OpenAPI::toJsonValue(m_contributions));
    }
    if (m_contributions_ie_and_party_expenditures_made_percent_isSet) {
        obj.insert(QString("contributions_ie_and_party_expenditures_made_percent"), ::OpenAPI::toJsonValue(m_contributions_ie_and_party_expenditures_made_percent));
    }
    if (m_convention_exp_isSet) {
        obj.insert(QString("convention_exp"), ::OpenAPI::toJsonValue(m_convention_exp));
    }
    if (m_coordinated_expenditures_by_party_committee_isSet) {
        obj.insert(QString("coordinated_expenditures_by_party_committee"), ::OpenAPI::toJsonValue(m_coordinated_expenditures_by_party_committee));
    }
    if (m_coverage_end_date_isSet) {
        obj.insert(QString("coverage_end_date"), ::OpenAPI::toJsonValue(m_coverage_end_date));
    }
    if (m_coverage_start_date_isSet) {
        obj.insert(QString("coverage_start_date"), ::OpenAPI::toJsonValue(m_coverage_start_date));
    }
    if (m_cycle_isSet) {
        obj.insert(QString("cycle"), ::OpenAPI::toJsonValue(m_cycle));
    }
    if (m_disbursements_isSet) {
        obj.insert(QString("disbursements"), ::OpenAPI::toJsonValue(m_disbursements));
    }
    if (m_exp_prior_years_subject_limits_isSet) {
        obj.insert(QString("exp_prior_years_subject_limits"), ::OpenAPI::toJsonValue(m_exp_prior_years_subject_limits));
    }
    if (m_exp_subject_limits_isSet) {
        obj.insert(QString("exp_subject_limits"), ::OpenAPI::toJsonValue(m_exp_subject_limits));
    }
    if (m_fed_candidate_committee_contributions_isSet) {
        obj.insert(QString("fed_candidate_committee_contributions"), ::OpenAPI::toJsonValue(m_fed_candidate_committee_contributions));
    }
    if (m_fed_candidate_contribution_refunds_isSet) {
        obj.insert(QString("fed_candidate_contribution_refunds"), ::OpenAPI::toJsonValue(m_fed_candidate_contribution_refunds));
    }
    if (m_fed_disbursements_isSet) {
        obj.insert(QString("fed_disbursements"), ::OpenAPI::toJsonValue(m_fed_disbursements));
    }
    if (m_fed_election_activity_isSet) {
        obj.insert(QString("fed_election_activity"), ::OpenAPI::toJsonValue(m_fed_election_activity));
    }
    if (m_fed_operating_expenditures_isSet) {
        obj.insert(QString("fed_operating_expenditures"), ::OpenAPI::toJsonValue(m_fed_operating_expenditures));
    }
    if (m_fed_receipts_isSet) {
        obj.insert(QString("fed_receipts"), ::OpenAPI::toJsonValue(m_fed_receipts));
    }
    if (m_federal_funds_isSet) {
        obj.insert(QString("federal_funds"), ::OpenAPI::toJsonValue(m_federal_funds));
    }
    if (m_filing_frequency_isSet) {
        obj.insert(QString("filing_frequency"), ::OpenAPI::toJsonValue(m_filing_frequency));
    }
    if (m_filing_frequency_full_isSet) {
        obj.insert(QString("filing_frequency_full"), ::OpenAPI::toJsonValue(m_filing_frequency_full));
    }
    if (m_first_f1_date_isSet) {
        obj.insert(QString("first_f1_date"), ::OpenAPI::toJsonValue(m_first_f1_date));
    }
    if (m_first_file_date_isSet) {
        obj.insert(QString("first_file_date"), ::OpenAPI::toJsonValue(m_first_file_date));
    }
    if (m_independent_expenditures_isSet) {
        obj.insert(QString("independent_expenditures"), ::OpenAPI::toJsonValue(m_independent_expenditures));
    }
    if (m_individual_contributions_isSet) {
        obj.insert(QString("individual_contributions"), ::OpenAPI::toJsonValue(m_individual_contributions));
    }
    if (m_individual_contributions_percent_isSet) {
        obj.insert(QString("individual_contributions_percent"), ::OpenAPI::toJsonValue(m_individual_contributions_percent));
    }
    if (m_individual_itemized_contributions_isSet) {
        obj.insert(QString("individual_itemized_contributions"), ::OpenAPI::toJsonValue(m_individual_itemized_contributions));
    }
    if (m_individual_unitemized_contributions_isSet) {
        obj.insert(QString("individual_unitemized_contributions"), ::OpenAPI::toJsonValue(m_individual_unitemized_contributions));
    }
    if (m_itemized_convention_exp_isSet) {
        obj.insert(QString("itemized_convention_exp"), ::OpenAPI::toJsonValue(m_itemized_convention_exp));
    }
    if (m_itemized_other_disb_isSet) {
        obj.insert(QString("itemized_other_disb"), ::OpenAPI::toJsonValue(m_itemized_other_disb));
    }
    if (m_itemized_other_income_isSet) {
        obj.insert(QString("itemized_other_income"), ::OpenAPI::toJsonValue(m_itemized_other_income));
    }
    if (m_itemized_other_refunds_isSet) {
        obj.insert(QString("itemized_other_refunds"), ::OpenAPI::toJsonValue(m_itemized_other_refunds));
    }
    if (m_itemized_refunds_relating_convention_exp_isSet) {
        obj.insert(QString("itemized_refunds_relating_convention_exp"), ::OpenAPI::toJsonValue(m_itemized_refunds_relating_convention_exp));
    }
    if (m_last_beginning_image_number_isSet) {
        obj.insert(QString("last_beginning_image_number"), ::OpenAPI::toJsonValue(m_last_beginning_image_number));
    }
    if (m_last_cash_on_hand_end_period_isSet) {
        obj.insert(QString("last_cash_on_hand_end_period"), ::OpenAPI::toJsonValue(m_last_cash_on_hand_end_period));
    }
    if (m_last_debts_owed_by_committee_isSet) {
        obj.insert(QString("last_debts_owed_by_committee"), ::OpenAPI::toJsonValue(m_last_debts_owed_by_committee));
    }
    if (m_last_debts_owed_to_committee_isSet) {
        obj.insert(QString("last_debts_owed_to_committee"), ::OpenAPI::toJsonValue(m_last_debts_owed_to_committee));
    }
    if (m_last_report_type_full_isSet) {
        obj.insert(QString("last_report_type_full"), ::OpenAPI::toJsonValue(m_last_report_type_full));
    }
    if (m_last_report_year_isSet) {
        obj.insert(QString("last_report_year"), ::OpenAPI::toJsonValue(m_last_report_year));
    }
    if (m_loan_repayments_made_isSet) {
        obj.insert(QString("loan_repayments_made"), ::OpenAPI::toJsonValue(m_loan_repayments_made));
    }
    if (m_loan_repayments_received_isSet) {
        obj.insert(QString("loan_repayments_received"), ::OpenAPI::toJsonValue(m_loan_repayments_received));
    }
    if (m_loans_and_loan_repayments_made_isSet) {
        obj.insert(QString("loans_and_loan_repayments_made"), ::OpenAPI::toJsonValue(m_loans_and_loan_repayments_made));
    }
    if (m_loans_and_loan_repayments_received_isSet) {
        obj.insert(QString("loans_and_loan_repayments_received"), ::OpenAPI::toJsonValue(m_loans_and_loan_repayments_received));
    }
    if (m_loans_made_isSet) {
        obj.insert(QString("loans_made"), ::OpenAPI::toJsonValue(m_loans_made));
    }
    if (m_net_contributions_isSet) {
        obj.insert(QString("net_contributions"), ::OpenAPI::toJsonValue(m_net_contributions));
    }
    if (m_net_operating_expenditures_isSet) {
        obj.insert(QString("net_operating_expenditures"), ::OpenAPI::toJsonValue(m_net_operating_expenditures));
    }
    if (m_non_allocated_fed_election_activity_isSet) {
        obj.insert(QString("non_allocated_fed_election_activity"), ::OpenAPI::toJsonValue(m_non_allocated_fed_election_activity));
    }
    if (m_offsets_to_operating_expenditures_isSet) {
        obj.insert(QString("offsets_to_operating_expenditures"), ::OpenAPI::toJsonValue(m_offsets_to_operating_expenditures));
    }
    if (m_operating_expenditures_isSet) {
        obj.insert(QString("operating_expenditures"), ::OpenAPI::toJsonValue(m_operating_expenditures));
    }
    if (m_operating_expenditures_percent_isSet) {
        obj.insert(QString("operating_expenditures_percent"), ::OpenAPI::toJsonValue(m_operating_expenditures_percent));
    }
    if (m_organization_type_isSet) {
        obj.insert(QString("organization_type"), ::OpenAPI::toJsonValue(m_organization_type));
    }
    if (m_organization_type_full_isSet) {
        obj.insert(QString("organization_type_full"), ::OpenAPI::toJsonValue(m_organization_type_full));
    }
    if (m_other_disbursements_isSet) {
        obj.insert(QString("other_disbursements"), ::OpenAPI::toJsonValue(m_other_disbursements));
    }
    if (m_other_fed_operating_expenditures_isSet) {
        obj.insert(QString("other_fed_operating_expenditures"), ::OpenAPI::toJsonValue(m_other_fed_operating_expenditures));
    }
    if (m_other_fed_receipts_isSet) {
        obj.insert(QString("other_fed_receipts"), ::OpenAPI::toJsonValue(m_other_fed_receipts));
    }
    if (m_other_political_committee_contributions_isSet) {
        obj.insert(QString("other_political_committee_contributions"), ::OpenAPI::toJsonValue(m_other_political_committee_contributions));
    }
    if (m_other_refunds_isSet) {
        obj.insert(QString("other_refunds"), ::OpenAPI::toJsonValue(m_other_refunds));
    }
    if (m_party_and_other_committee_contributions_percent_isSet) {
        obj.insert(QString("party_and_other_committee_contributions_percent"), ::OpenAPI::toJsonValue(m_party_and_other_committee_contributions_percent));
    }
    if (m_party_full_isSet) {
        obj.insert(QString("party_full"), ::OpenAPI::toJsonValue(m_party_full));
    }
    if (m_pdf_url_isSet) {
        obj.insert(QString("pdf_url"), ::OpenAPI::toJsonValue(m_pdf_url));
    }
    if (m_political_party_committee_contributions_isSet) {
        obj.insert(QString("political_party_committee_contributions"), ::OpenAPI::toJsonValue(m_political_party_committee_contributions));
    }
    if (m_receipts_isSet) {
        obj.insert(QString("receipts"), ::OpenAPI::toJsonValue(m_receipts));
    }
    if (m_refunded_individual_contributions_isSet) {
        obj.insert(QString("refunded_individual_contributions"), ::OpenAPI::toJsonValue(m_refunded_individual_contributions));
    }
    if (m_refunded_other_political_committee_contributions_isSet) {
        obj.insert(QString("refunded_other_political_committee_contributions"), ::OpenAPI::toJsonValue(m_refunded_other_political_committee_contributions));
    }
    if (m_refunded_political_party_committee_contributions_isSet) {
        obj.insert(QString("refunded_political_party_committee_contributions"), ::OpenAPI::toJsonValue(m_refunded_political_party_committee_contributions));
    }
    if (m_refunds_relating_convention_exp_isSet) {
        obj.insert(QString("refunds_relating_convention_exp"), ::OpenAPI::toJsonValue(m_refunds_relating_convention_exp));
    }
    if (m_report_form_isSet) {
        obj.insert(QString("report_form"), ::OpenAPI::toJsonValue(m_report_form));
    }
    if (m_shared_fed_activity_isSet) {
        obj.insert(QString("shared_fed_activity"), ::OpenAPI::toJsonValue(m_shared_fed_activity));
    }
    if (m_shared_fed_activity_nonfed_isSet) {
        obj.insert(QString("shared_fed_activity_nonfed"), ::OpenAPI::toJsonValue(m_shared_fed_activity_nonfed));
    }
    if (m_shared_fed_operating_expenditures_isSet) {
        obj.insert(QString("shared_fed_operating_expenditures"), ::OpenAPI::toJsonValue(m_shared_fed_operating_expenditures));
    }
    if (m_shared_nonfed_operating_expenditures_isSet) {
        obj.insert(QString("shared_nonfed_operating_expenditures"), ::OpenAPI::toJsonValue(m_shared_nonfed_operating_expenditures));
    }
    if (m_sponsor_candidate_ids.size() > 0) {
        obj.insert(QString("sponsor_candidate_ids"), ::OpenAPI::toJsonValue(m_sponsor_candidate_ids));
    }
    if (m_sponsor_candidate_list.size() > 0) {
        obj.insert(QString("sponsor_candidate_list"), ::OpenAPI::toJsonValue(m_sponsor_candidate_list));
    }
    if (m_total_exp_subject_limits_isSet) {
        obj.insert(QString("total_exp_subject_limits"), ::OpenAPI::toJsonValue(m_total_exp_subject_limits));
    }
    if (m_total_transfers_isSet) {
        obj.insert(QString("total_transfers"), ::OpenAPI::toJsonValue(m_total_transfers));
    }
    if (m_transaction_coverage_date_isSet) {
        obj.insert(QString("transaction_coverage_date"), ::OpenAPI::toJsonValue(m_transaction_coverage_date));
    }
    if (m_transfers_from_affiliated_party_isSet) {
        obj.insert(QString("transfers_from_affiliated_party"), ::OpenAPI::toJsonValue(m_transfers_from_affiliated_party));
    }
    if (m_transfers_from_nonfed_account_isSet) {
        obj.insert(QString("transfers_from_nonfed_account"), ::OpenAPI::toJsonValue(m_transfers_from_nonfed_account));
    }
    if (m_transfers_from_nonfed_levin_isSet) {
        obj.insert(QString("transfers_from_nonfed_levin"), ::OpenAPI::toJsonValue(m_transfers_from_nonfed_levin));
    }
    if (m_transfers_to_affiliated_committee_isSet) {
        obj.insert(QString("transfers_to_affiliated_committee"), ::OpenAPI::toJsonValue(m_transfers_to_affiliated_committee));
    }
    if (m_treasurer_name_isSet) {
        obj.insert(QString("treasurer_name"), ::OpenAPI::toJsonValue(m_treasurer_name));
    }
    if (m_unitemized_convention_exp_isSet) {
        obj.insert(QString("unitemized_convention_exp"), ::OpenAPI::toJsonValue(m_unitemized_convention_exp));
    }
    if (m_unitemized_other_disb_isSet) {
        obj.insert(QString("unitemized_other_disb"), ::OpenAPI::toJsonValue(m_unitemized_other_disb));
    }
    if (m_unitemized_other_income_isSet) {
        obj.insert(QString("unitemized_other_income"), ::OpenAPI::toJsonValue(m_unitemized_other_income));
    }
    if (m_unitemized_other_refunds_isSet) {
        obj.insert(QString("unitemized_other_refunds"), ::OpenAPI::toJsonValue(m_unitemized_other_refunds));
    }
    if (m_unitemized_refunds_relating_convention_exp_isSet) {
        obj.insert(QString("unitemized_refunds_relating_convention_exp"), ::OpenAPI::toJsonValue(m_unitemized_refunds_relating_convention_exp));
    }
    return obj;
}

double OAICommitteeTotalsPacParty::getAllLoansReceived() const {
    return m_all_loans_received;
}
void OAICommitteeTotalsPacParty::setAllLoansReceived(const double &all_loans_received) {
    m_all_loans_received = all_loans_received;
    m_all_loans_received_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_all_loans_received_Set() const{
    return m_all_loans_received_isSet;
}

bool OAICommitteeTotalsPacParty::is_all_loans_received_Valid() const{
    return m_all_loans_received_isValid;
}

double OAICommitteeTotalsPacParty::getAllocatedFederalElectionLevinShare() const {
    return m_allocated_federal_election_levin_share;
}
void OAICommitteeTotalsPacParty::setAllocatedFederalElectionLevinShare(const double &allocated_federal_election_levin_share) {
    m_allocated_federal_election_levin_share = allocated_federal_election_levin_share;
    m_allocated_federal_election_levin_share_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_allocated_federal_election_levin_share_Set() const{
    return m_allocated_federal_election_levin_share_isSet;
}

bool OAICommitteeTotalsPacParty::is_allocated_federal_election_levin_share_Valid() const{
    return m_allocated_federal_election_levin_share_isValid;
}

double OAICommitteeTotalsPacParty::getCashOnHandBeginningPeriod() const {
    return m_cash_on_hand_beginning_period;
}
void OAICommitteeTotalsPacParty::setCashOnHandBeginningPeriod(const double &cash_on_hand_beginning_period) {
    m_cash_on_hand_beginning_period = cash_on_hand_beginning_period;
    m_cash_on_hand_beginning_period_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_cash_on_hand_beginning_period_Set() const{
    return m_cash_on_hand_beginning_period_isSet;
}

bool OAICommitteeTotalsPacParty::is_cash_on_hand_beginning_period_Valid() const{
    return m_cash_on_hand_beginning_period_isValid;
}

QString OAICommitteeTotalsPacParty::getCommitteeDesignation() const {
    return m_committee_designation;
}
void OAICommitteeTotalsPacParty::setCommitteeDesignation(const QString &committee_designation) {
    m_committee_designation = committee_designation;
    m_committee_designation_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_committee_designation_Set() const{
    return m_committee_designation_isSet;
}

bool OAICommitteeTotalsPacParty::is_committee_designation_Valid() const{
    return m_committee_designation_isValid;
}

QString OAICommitteeTotalsPacParty::getCommitteeDesignationFull() const {
    return m_committee_designation_full;
}
void OAICommitteeTotalsPacParty::setCommitteeDesignationFull(const QString &committee_designation_full) {
    m_committee_designation_full = committee_designation_full;
    m_committee_designation_full_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_committee_designation_full_Set() const{
    return m_committee_designation_full_isSet;
}

bool OAICommitteeTotalsPacParty::is_committee_designation_full_Valid() const{
    return m_committee_designation_full_isValid;
}

QString OAICommitteeTotalsPacParty::getCommitteeId() const {
    return m_committee_id;
}
void OAICommitteeTotalsPacParty::setCommitteeId(const QString &committee_id) {
    m_committee_id = committee_id;
    m_committee_id_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_committee_id_Set() const{
    return m_committee_id_isSet;
}

bool OAICommitteeTotalsPacParty::is_committee_id_Valid() const{
    return m_committee_id_isValid;
}

QString OAICommitteeTotalsPacParty::getCommitteeName() const {
    return m_committee_name;
}
void OAICommitteeTotalsPacParty::setCommitteeName(const QString &committee_name) {
    m_committee_name = committee_name;
    m_committee_name_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_committee_name_Set() const{
    return m_committee_name_isSet;
}

bool OAICommitteeTotalsPacParty::is_committee_name_Valid() const{
    return m_committee_name_isValid;
}

QString OAICommitteeTotalsPacParty::getCommitteeState() const {
    return m_committee_state;
}
void OAICommitteeTotalsPacParty::setCommitteeState(const QString &committee_state) {
    m_committee_state = committee_state;
    m_committee_state_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_committee_state_Set() const{
    return m_committee_state_isSet;
}

bool OAICommitteeTotalsPacParty::is_committee_state_Valid() const{
    return m_committee_state_isValid;
}

QString OAICommitteeTotalsPacParty::getCommitteeType() const {
    return m_committee_type;
}
void OAICommitteeTotalsPacParty::setCommitteeType(const QString &committee_type) {
    m_committee_type = committee_type;
    m_committee_type_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_committee_type_Set() const{
    return m_committee_type_isSet;
}

bool OAICommitteeTotalsPacParty::is_committee_type_Valid() const{
    return m_committee_type_isValid;
}

QString OAICommitteeTotalsPacParty::getCommitteeTypeFull() const {
    return m_committee_type_full;
}
void OAICommitteeTotalsPacParty::setCommitteeTypeFull(const QString &committee_type_full) {
    m_committee_type_full = committee_type_full;
    m_committee_type_full_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_committee_type_full_Set() const{
    return m_committee_type_full_isSet;
}

bool OAICommitteeTotalsPacParty::is_committee_type_full_Valid() const{
    return m_committee_type_full_isValid;
}

double OAICommitteeTotalsPacParty::getContributionRefunds() const {
    return m_contribution_refunds;
}
void OAICommitteeTotalsPacParty::setContributionRefunds(const double &contribution_refunds) {
    m_contribution_refunds = contribution_refunds;
    m_contribution_refunds_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_contribution_refunds_Set() const{
    return m_contribution_refunds_isSet;
}

bool OAICommitteeTotalsPacParty::is_contribution_refunds_Valid() const{
    return m_contribution_refunds_isValid;
}

double OAICommitteeTotalsPacParty::getContributions() const {
    return m_contributions;
}
void OAICommitteeTotalsPacParty::setContributions(const double &contributions) {
    m_contributions = contributions;
    m_contributions_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_contributions_Set() const{
    return m_contributions_isSet;
}

bool OAICommitteeTotalsPacParty::is_contributions_Valid() const{
    return m_contributions_isValid;
}

double OAICommitteeTotalsPacParty::getContributionsIeAndPartyExpendituresMadePercent() const {
    return m_contributions_ie_and_party_expenditures_made_percent;
}
void OAICommitteeTotalsPacParty::setContributionsIeAndPartyExpendituresMadePercent(const double &contributions_ie_and_party_expenditures_made_percent) {
    m_contributions_ie_and_party_expenditures_made_percent = contributions_ie_and_party_expenditures_made_percent;
    m_contributions_ie_and_party_expenditures_made_percent_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_contributions_ie_and_party_expenditures_made_percent_Set() const{
    return m_contributions_ie_and_party_expenditures_made_percent_isSet;
}

bool OAICommitteeTotalsPacParty::is_contributions_ie_and_party_expenditures_made_percent_Valid() const{
    return m_contributions_ie_and_party_expenditures_made_percent_isValid;
}

double OAICommitteeTotalsPacParty::getConventionExp() const {
    return m_convention_exp;
}
void OAICommitteeTotalsPacParty::setConventionExp(const double &convention_exp) {
    m_convention_exp = convention_exp;
    m_convention_exp_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_convention_exp_Set() const{
    return m_convention_exp_isSet;
}

bool OAICommitteeTotalsPacParty::is_convention_exp_Valid() const{
    return m_convention_exp_isValid;
}

double OAICommitteeTotalsPacParty::getCoordinatedExpendituresByPartyCommittee() const {
    return m_coordinated_expenditures_by_party_committee;
}
void OAICommitteeTotalsPacParty::setCoordinatedExpendituresByPartyCommittee(const double &coordinated_expenditures_by_party_committee) {
    m_coordinated_expenditures_by_party_committee = coordinated_expenditures_by_party_committee;
    m_coordinated_expenditures_by_party_committee_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_coordinated_expenditures_by_party_committee_Set() const{
    return m_coordinated_expenditures_by_party_committee_isSet;
}

bool OAICommitteeTotalsPacParty::is_coordinated_expenditures_by_party_committee_Valid() const{
    return m_coordinated_expenditures_by_party_committee_isValid;
}

QDateTime OAICommitteeTotalsPacParty::getCoverageEndDate() const {
    return m_coverage_end_date;
}
void OAICommitteeTotalsPacParty::setCoverageEndDate(const QDateTime &coverage_end_date) {
    m_coverage_end_date = coverage_end_date;
    m_coverage_end_date_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_coverage_end_date_Set() const{
    return m_coverage_end_date_isSet;
}

bool OAICommitteeTotalsPacParty::is_coverage_end_date_Valid() const{
    return m_coverage_end_date_isValid;
}

QDateTime OAICommitteeTotalsPacParty::getCoverageStartDate() const {
    return m_coverage_start_date;
}
void OAICommitteeTotalsPacParty::setCoverageStartDate(const QDateTime &coverage_start_date) {
    m_coverage_start_date = coverage_start_date;
    m_coverage_start_date_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_coverage_start_date_Set() const{
    return m_coverage_start_date_isSet;
}

bool OAICommitteeTotalsPacParty::is_coverage_start_date_Valid() const{
    return m_coverage_start_date_isValid;
}

qint32 OAICommitteeTotalsPacParty::getCycle() const {
    return m_cycle;
}
void OAICommitteeTotalsPacParty::setCycle(const qint32 &cycle) {
    m_cycle = cycle;
    m_cycle_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_cycle_Set() const{
    return m_cycle_isSet;
}

bool OAICommitteeTotalsPacParty::is_cycle_Valid() const{
    return m_cycle_isValid;
}

double OAICommitteeTotalsPacParty::getDisbursements() const {
    return m_disbursements;
}
void OAICommitteeTotalsPacParty::setDisbursements(const double &disbursements) {
    m_disbursements = disbursements;
    m_disbursements_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_disbursements_Set() const{
    return m_disbursements_isSet;
}

bool OAICommitteeTotalsPacParty::is_disbursements_Valid() const{
    return m_disbursements_isValid;
}

double OAICommitteeTotalsPacParty::getExpPriorYearsSubjectLimits() const {
    return m_exp_prior_years_subject_limits;
}
void OAICommitteeTotalsPacParty::setExpPriorYearsSubjectLimits(const double &exp_prior_years_subject_limits) {
    m_exp_prior_years_subject_limits = exp_prior_years_subject_limits;
    m_exp_prior_years_subject_limits_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_exp_prior_years_subject_limits_Set() const{
    return m_exp_prior_years_subject_limits_isSet;
}

bool OAICommitteeTotalsPacParty::is_exp_prior_years_subject_limits_Valid() const{
    return m_exp_prior_years_subject_limits_isValid;
}

double OAICommitteeTotalsPacParty::getExpSubjectLimits() const {
    return m_exp_subject_limits;
}
void OAICommitteeTotalsPacParty::setExpSubjectLimits(const double &exp_subject_limits) {
    m_exp_subject_limits = exp_subject_limits;
    m_exp_subject_limits_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_exp_subject_limits_Set() const{
    return m_exp_subject_limits_isSet;
}

bool OAICommitteeTotalsPacParty::is_exp_subject_limits_Valid() const{
    return m_exp_subject_limits_isValid;
}

double OAICommitteeTotalsPacParty::getFedCandidateCommitteeContributions() const {
    return m_fed_candidate_committee_contributions;
}
void OAICommitteeTotalsPacParty::setFedCandidateCommitteeContributions(const double &fed_candidate_committee_contributions) {
    m_fed_candidate_committee_contributions = fed_candidate_committee_contributions;
    m_fed_candidate_committee_contributions_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_fed_candidate_committee_contributions_Set() const{
    return m_fed_candidate_committee_contributions_isSet;
}

bool OAICommitteeTotalsPacParty::is_fed_candidate_committee_contributions_Valid() const{
    return m_fed_candidate_committee_contributions_isValid;
}

double OAICommitteeTotalsPacParty::getFedCandidateContributionRefunds() const {
    return m_fed_candidate_contribution_refunds;
}
void OAICommitteeTotalsPacParty::setFedCandidateContributionRefunds(const double &fed_candidate_contribution_refunds) {
    m_fed_candidate_contribution_refunds = fed_candidate_contribution_refunds;
    m_fed_candidate_contribution_refunds_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_fed_candidate_contribution_refunds_Set() const{
    return m_fed_candidate_contribution_refunds_isSet;
}

bool OAICommitteeTotalsPacParty::is_fed_candidate_contribution_refunds_Valid() const{
    return m_fed_candidate_contribution_refunds_isValid;
}

double OAICommitteeTotalsPacParty::getFedDisbursements() const {
    return m_fed_disbursements;
}
void OAICommitteeTotalsPacParty::setFedDisbursements(const double &fed_disbursements) {
    m_fed_disbursements = fed_disbursements;
    m_fed_disbursements_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_fed_disbursements_Set() const{
    return m_fed_disbursements_isSet;
}

bool OAICommitteeTotalsPacParty::is_fed_disbursements_Valid() const{
    return m_fed_disbursements_isValid;
}

double OAICommitteeTotalsPacParty::getFedElectionActivity() const {
    return m_fed_election_activity;
}
void OAICommitteeTotalsPacParty::setFedElectionActivity(const double &fed_election_activity) {
    m_fed_election_activity = fed_election_activity;
    m_fed_election_activity_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_fed_election_activity_Set() const{
    return m_fed_election_activity_isSet;
}

bool OAICommitteeTotalsPacParty::is_fed_election_activity_Valid() const{
    return m_fed_election_activity_isValid;
}

double OAICommitteeTotalsPacParty::getFedOperatingExpenditures() const {
    return m_fed_operating_expenditures;
}
void OAICommitteeTotalsPacParty::setFedOperatingExpenditures(const double &fed_operating_expenditures) {
    m_fed_operating_expenditures = fed_operating_expenditures;
    m_fed_operating_expenditures_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_fed_operating_expenditures_Set() const{
    return m_fed_operating_expenditures_isSet;
}

bool OAICommitteeTotalsPacParty::is_fed_operating_expenditures_Valid() const{
    return m_fed_operating_expenditures_isValid;
}

double OAICommitteeTotalsPacParty::getFedReceipts() const {
    return m_fed_receipts;
}
void OAICommitteeTotalsPacParty::setFedReceipts(const double &fed_receipts) {
    m_fed_receipts = fed_receipts;
    m_fed_receipts_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_fed_receipts_Set() const{
    return m_fed_receipts_isSet;
}

bool OAICommitteeTotalsPacParty::is_fed_receipts_Valid() const{
    return m_fed_receipts_isValid;
}

double OAICommitteeTotalsPacParty::getFederalFunds() const {
    return m_federal_funds;
}
void OAICommitteeTotalsPacParty::setFederalFunds(const double &federal_funds) {
    m_federal_funds = federal_funds;
    m_federal_funds_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_federal_funds_Set() const{
    return m_federal_funds_isSet;
}

bool OAICommitteeTotalsPacParty::is_federal_funds_Valid() const{
    return m_federal_funds_isValid;
}

QString OAICommitteeTotalsPacParty::getFilingFrequency() const {
    return m_filing_frequency;
}
void OAICommitteeTotalsPacParty::setFilingFrequency(const QString &filing_frequency) {
    m_filing_frequency = filing_frequency;
    m_filing_frequency_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_filing_frequency_Set() const{
    return m_filing_frequency_isSet;
}

bool OAICommitteeTotalsPacParty::is_filing_frequency_Valid() const{
    return m_filing_frequency_isValid;
}

QString OAICommitteeTotalsPacParty::getFilingFrequencyFull() const {
    return m_filing_frequency_full;
}
void OAICommitteeTotalsPacParty::setFilingFrequencyFull(const QString &filing_frequency_full) {
    m_filing_frequency_full = filing_frequency_full;
    m_filing_frequency_full_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_filing_frequency_full_Set() const{
    return m_filing_frequency_full_isSet;
}

bool OAICommitteeTotalsPacParty::is_filing_frequency_full_Valid() const{
    return m_filing_frequency_full_isValid;
}

QDate OAICommitteeTotalsPacParty::getFirstF1Date() const {
    return m_first_f1_date;
}
void OAICommitteeTotalsPacParty::setFirstF1Date(const QDate &first_f1_date) {
    m_first_f1_date = first_f1_date;
    m_first_f1_date_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_first_f1_date_Set() const{
    return m_first_f1_date_isSet;
}

bool OAICommitteeTotalsPacParty::is_first_f1_date_Valid() const{
    return m_first_f1_date_isValid;
}

QDate OAICommitteeTotalsPacParty::getFirstFileDate() const {
    return m_first_file_date;
}
void OAICommitteeTotalsPacParty::setFirstFileDate(const QDate &first_file_date) {
    m_first_file_date = first_file_date;
    m_first_file_date_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_first_file_date_Set() const{
    return m_first_file_date_isSet;
}

bool OAICommitteeTotalsPacParty::is_first_file_date_Valid() const{
    return m_first_file_date_isValid;
}

double OAICommitteeTotalsPacParty::getIndependentExpenditures() const {
    return m_independent_expenditures;
}
void OAICommitteeTotalsPacParty::setIndependentExpenditures(const double &independent_expenditures) {
    m_independent_expenditures = independent_expenditures;
    m_independent_expenditures_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_independent_expenditures_Set() const{
    return m_independent_expenditures_isSet;
}

bool OAICommitteeTotalsPacParty::is_independent_expenditures_Valid() const{
    return m_independent_expenditures_isValid;
}

double OAICommitteeTotalsPacParty::getIndividualContributions() const {
    return m_individual_contributions;
}
void OAICommitteeTotalsPacParty::setIndividualContributions(const double &individual_contributions) {
    m_individual_contributions = individual_contributions;
    m_individual_contributions_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_individual_contributions_Set() const{
    return m_individual_contributions_isSet;
}

bool OAICommitteeTotalsPacParty::is_individual_contributions_Valid() const{
    return m_individual_contributions_isValid;
}

double OAICommitteeTotalsPacParty::getIndividualContributionsPercent() const {
    return m_individual_contributions_percent;
}
void OAICommitteeTotalsPacParty::setIndividualContributionsPercent(const double &individual_contributions_percent) {
    m_individual_contributions_percent = individual_contributions_percent;
    m_individual_contributions_percent_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_individual_contributions_percent_Set() const{
    return m_individual_contributions_percent_isSet;
}

bool OAICommitteeTotalsPacParty::is_individual_contributions_percent_Valid() const{
    return m_individual_contributions_percent_isValid;
}

double OAICommitteeTotalsPacParty::getIndividualItemizedContributions() const {
    return m_individual_itemized_contributions;
}
void OAICommitteeTotalsPacParty::setIndividualItemizedContributions(const double &individual_itemized_contributions) {
    m_individual_itemized_contributions = individual_itemized_contributions;
    m_individual_itemized_contributions_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_individual_itemized_contributions_Set() const{
    return m_individual_itemized_contributions_isSet;
}

bool OAICommitteeTotalsPacParty::is_individual_itemized_contributions_Valid() const{
    return m_individual_itemized_contributions_isValid;
}

double OAICommitteeTotalsPacParty::getIndividualUnitemizedContributions() const {
    return m_individual_unitemized_contributions;
}
void OAICommitteeTotalsPacParty::setIndividualUnitemizedContributions(const double &individual_unitemized_contributions) {
    m_individual_unitemized_contributions = individual_unitemized_contributions;
    m_individual_unitemized_contributions_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_individual_unitemized_contributions_Set() const{
    return m_individual_unitemized_contributions_isSet;
}

bool OAICommitteeTotalsPacParty::is_individual_unitemized_contributions_Valid() const{
    return m_individual_unitemized_contributions_isValid;
}

double OAICommitteeTotalsPacParty::getItemizedConventionExp() const {
    return m_itemized_convention_exp;
}
void OAICommitteeTotalsPacParty::setItemizedConventionExp(const double &itemized_convention_exp) {
    m_itemized_convention_exp = itemized_convention_exp;
    m_itemized_convention_exp_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_itemized_convention_exp_Set() const{
    return m_itemized_convention_exp_isSet;
}

bool OAICommitteeTotalsPacParty::is_itemized_convention_exp_Valid() const{
    return m_itemized_convention_exp_isValid;
}

double OAICommitteeTotalsPacParty::getItemizedOtherDisb() const {
    return m_itemized_other_disb;
}
void OAICommitteeTotalsPacParty::setItemizedOtherDisb(const double &itemized_other_disb) {
    m_itemized_other_disb = itemized_other_disb;
    m_itemized_other_disb_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_itemized_other_disb_Set() const{
    return m_itemized_other_disb_isSet;
}

bool OAICommitteeTotalsPacParty::is_itemized_other_disb_Valid() const{
    return m_itemized_other_disb_isValid;
}

double OAICommitteeTotalsPacParty::getItemizedOtherIncome() const {
    return m_itemized_other_income;
}
void OAICommitteeTotalsPacParty::setItemizedOtherIncome(const double &itemized_other_income) {
    m_itemized_other_income = itemized_other_income;
    m_itemized_other_income_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_itemized_other_income_Set() const{
    return m_itemized_other_income_isSet;
}

bool OAICommitteeTotalsPacParty::is_itemized_other_income_Valid() const{
    return m_itemized_other_income_isValid;
}

double OAICommitteeTotalsPacParty::getItemizedOtherRefunds() const {
    return m_itemized_other_refunds;
}
void OAICommitteeTotalsPacParty::setItemizedOtherRefunds(const double &itemized_other_refunds) {
    m_itemized_other_refunds = itemized_other_refunds;
    m_itemized_other_refunds_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_itemized_other_refunds_Set() const{
    return m_itemized_other_refunds_isSet;
}

bool OAICommitteeTotalsPacParty::is_itemized_other_refunds_Valid() const{
    return m_itemized_other_refunds_isValid;
}

double OAICommitteeTotalsPacParty::getItemizedRefundsRelatingConventionExp() const {
    return m_itemized_refunds_relating_convention_exp;
}
void OAICommitteeTotalsPacParty::setItemizedRefundsRelatingConventionExp(const double &itemized_refunds_relating_convention_exp) {
    m_itemized_refunds_relating_convention_exp = itemized_refunds_relating_convention_exp;
    m_itemized_refunds_relating_convention_exp_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_itemized_refunds_relating_convention_exp_Set() const{
    return m_itemized_refunds_relating_convention_exp_isSet;
}

bool OAICommitteeTotalsPacParty::is_itemized_refunds_relating_convention_exp_Valid() const{
    return m_itemized_refunds_relating_convention_exp_isValid;
}

QString OAICommitteeTotalsPacParty::getLastBeginningImageNumber() const {
    return m_last_beginning_image_number;
}
void OAICommitteeTotalsPacParty::setLastBeginningImageNumber(const QString &last_beginning_image_number) {
    m_last_beginning_image_number = last_beginning_image_number;
    m_last_beginning_image_number_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_last_beginning_image_number_Set() const{
    return m_last_beginning_image_number_isSet;
}

bool OAICommitteeTotalsPacParty::is_last_beginning_image_number_Valid() const{
    return m_last_beginning_image_number_isValid;
}

double OAICommitteeTotalsPacParty::getLastCashOnHandEndPeriod() const {
    return m_last_cash_on_hand_end_period;
}
void OAICommitteeTotalsPacParty::setLastCashOnHandEndPeriod(const double &last_cash_on_hand_end_period) {
    m_last_cash_on_hand_end_period = last_cash_on_hand_end_period;
    m_last_cash_on_hand_end_period_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_last_cash_on_hand_end_period_Set() const{
    return m_last_cash_on_hand_end_period_isSet;
}

bool OAICommitteeTotalsPacParty::is_last_cash_on_hand_end_period_Valid() const{
    return m_last_cash_on_hand_end_period_isValid;
}

double OAICommitteeTotalsPacParty::getLastDebtsOwedByCommittee() const {
    return m_last_debts_owed_by_committee;
}
void OAICommitteeTotalsPacParty::setLastDebtsOwedByCommittee(const double &last_debts_owed_by_committee) {
    m_last_debts_owed_by_committee = last_debts_owed_by_committee;
    m_last_debts_owed_by_committee_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_last_debts_owed_by_committee_Set() const{
    return m_last_debts_owed_by_committee_isSet;
}

bool OAICommitteeTotalsPacParty::is_last_debts_owed_by_committee_Valid() const{
    return m_last_debts_owed_by_committee_isValid;
}

double OAICommitteeTotalsPacParty::getLastDebtsOwedToCommittee() const {
    return m_last_debts_owed_to_committee;
}
void OAICommitteeTotalsPacParty::setLastDebtsOwedToCommittee(const double &last_debts_owed_to_committee) {
    m_last_debts_owed_to_committee = last_debts_owed_to_committee;
    m_last_debts_owed_to_committee_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_last_debts_owed_to_committee_Set() const{
    return m_last_debts_owed_to_committee_isSet;
}

bool OAICommitteeTotalsPacParty::is_last_debts_owed_to_committee_Valid() const{
    return m_last_debts_owed_to_committee_isValid;
}

QString OAICommitteeTotalsPacParty::getLastReportTypeFull() const {
    return m_last_report_type_full;
}
void OAICommitteeTotalsPacParty::setLastReportTypeFull(const QString &last_report_type_full) {
    m_last_report_type_full = last_report_type_full;
    m_last_report_type_full_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_last_report_type_full_Set() const{
    return m_last_report_type_full_isSet;
}

bool OAICommitteeTotalsPacParty::is_last_report_type_full_Valid() const{
    return m_last_report_type_full_isValid;
}

qint32 OAICommitteeTotalsPacParty::getLastReportYear() const {
    return m_last_report_year;
}
void OAICommitteeTotalsPacParty::setLastReportYear(const qint32 &last_report_year) {
    m_last_report_year = last_report_year;
    m_last_report_year_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_last_report_year_Set() const{
    return m_last_report_year_isSet;
}

bool OAICommitteeTotalsPacParty::is_last_report_year_Valid() const{
    return m_last_report_year_isValid;
}

double OAICommitteeTotalsPacParty::getLoanRepaymentsMade() const {
    return m_loan_repayments_made;
}
void OAICommitteeTotalsPacParty::setLoanRepaymentsMade(const double &loan_repayments_made) {
    m_loan_repayments_made = loan_repayments_made;
    m_loan_repayments_made_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_loan_repayments_made_Set() const{
    return m_loan_repayments_made_isSet;
}

bool OAICommitteeTotalsPacParty::is_loan_repayments_made_Valid() const{
    return m_loan_repayments_made_isValid;
}

double OAICommitteeTotalsPacParty::getLoanRepaymentsReceived() const {
    return m_loan_repayments_received;
}
void OAICommitteeTotalsPacParty::setLoanRepaymentsReceived(const double &loan_repayments_received) {
    m_loan_repayments_received = loan_repayments_received;
    m_loan_repayments_received_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_loan_repayments_received_Set() const{
    return m_loan_repayments_received_isSet;
}

bool OAICommitteeTotalsPacParty::is_loan_repayments_received_Valid() const{
    return m_loan_repayments_received_isValid;
}

double OAICommitteeTotalsPacParty::getLoansAndLoanRepaymentsMade() const {
    return m_loans_and_loan_repayments_made;
}
void OAICommitteeTotalsPacParty::setLoansAndLoanRepaymentsMade(const double &loans_and_loan_repayments_made) {
    m_loans_and_loan_repayments_made = loans_and_loan_repayments_made;
    m_loans_and_loan_repayments_made_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_loans_and_loan_repayments_made_Set() const{
    return m_loans_and_loan_repayments_made_isSet;
}

bool OAICommitteeTotalsPacParty::is_loans_and_loan_repayments_made_Valid() const{
    return m_loans_and_loan_repayments_made_isValid;
}

double OAICommitteeTotalsPacParty::getLoansAndLoanRepaymentsReceived() const {
    return m_loans_and_loan_repayments_received;
}
void OAICommitteeTotalsPacParty::setLoansAndLoanRepaymentsReceived(const double &loans_and_loan_repayments_received) {
    m_loans_and_loan_repayments_received = loans_and_loan_repayments_received;
    m_loans_and_loan_repayments_received_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_loans_and_loan_repayments_received_Set() const{
    return m_loans_and_loan_repayments_received_isSet;
}

bool OAICommitteeTotalsPacParty::is_loans_and_loan_repayments_received_Valid() const{
    return m_loans_and_loan_repayments_received_isValid;
}

double OAICommitteeTotalsPacParty::getLoansMade() const {
    return m_loans_made;
}
void OAICommitteeTotalsPacParty::setLoansMade(const double &loans_made) {
    m_loans_made = loans_made;
    m_loans_made_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_loans_made_Set() const{
    return m_loans_made_isSet;
}

bool OAICommitteeTotalsPacParty::is_loans_made_Valid() const{
    return m_loans_made_isValid;
}

double OAICommitteeTotalsPacParty::getNetContributions() const {
    return m_net_contributions;
}
void OAICommitteeTotalsPacParty::setNetContributions(const double &net_contributions) {
    m_net_contributions = net_contributions;
    m_net_contributions_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_net_contributions_Set() const{
    return m_net_contributions_isSet;
}

bool OAICommitteeTotalsPacParty::is_net_contributions_Valid() const{
    return m_net_contributions_isValid;
}

double OAICommitteeTotalsPacParty::getNetOperatingExpenditures() const {
    return m_net_operating_expenditures;
}
void OAICommitteeTotalsPacParty::setNetOperatingExpenditures(const double &net_operating_expenditures) {
    m_net_operating_expenditures = net_operating_expenditures;
    m_net_operating_expenditures_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_net_operating_expenditures_Set() const{
    return m_net_operating_expenditures_isSet;
}

bool OAICommitteeTotalsPacParty::is_net_operating_expenditures_Valid() const{
    return m_net_operating_expenditures_isValid;
}

double OAICommitteeTotalsPacParty::getNonAllocatedFedElectionActivity() const {
    return m_non_allocated_fed_election_activity;
}
void OAICommitteeTotalsPacParty::setNonAllocatedFedElectionActivity(const double &non_allocated_fed_election_activity) {
    m_non_allocated_fed_election_activity = non_allocated_fed_election_activity;
    m_non_allocated_fed_election_activity_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_non_allocated_fed_election_activity_Set() const{
    return m_non_allocated_fed_election_activity_isSet;
}

bool OAICommitteeTotalsPacParty::is_non_allocated_fed_election_activity_Valid() const{
    return m_non_allocated_fed_election_activity_isValid;
}

double OAICommitteeTotalsPacParty::getOffsetsToOperatingExpenditures() const {
    return m_offsets_to_operating_expenditures;
}
void OAICommitteeTotalsPacParty::setOffsetsToOperatingExpenditures(const double &offsets_to_operating_expenditures) {
    m_offsets_to_operating_expenditures = offsets_to_operating_expenditures;
    m_offsets_to_operating_expenditures_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_offsets_to_operating_expenditures_Set() const{
    return m_offsets_to_operating_expenditures_isSet;
}

bool OAICommitteeTotalsPacParty::is_offsets_to_operating_expenditures_Valid() const{
    return m_offsets_to_operating_expenditures_isValid;
}

double OAICommitteeTotalsPacParty::getOperatingExpenditures() const {
    return m_operating_expenditures;
}
void OAICommitteeTotalsPacParty::setOperatingExpenditures(const double &operating_expenditures) {
    m_operating_expenditures = operating_expenditures;
    m_operating_expenditures_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_operating_expenditures_Set() const{
    return m_operating_expenditures_isSet;
}

bool OAICommitteeTotalsPacParty::is_operating_expenditures_Valid() const{
    return m_operating_expenditures_isValid;
}

double OAICommitteeTotalsPacParty::getOperatingExpendituresPercent() const {
    return m_operating_expenditures_percent;
}
void OAICommitteeTotalsPacParty::setOperatingExpendituresPercent(const double &operating_expenditures_percent) {
    m_operating_expenditures_percent = operating_expenditures_percent;
    m_operating_expenditures_percent_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_operating_expenditures_percent_Set() const{
    return m_operating_expenditures_percent_isSet;
}

bool OAICommitteeTotalsPacParty::is_operating_expenditures_percent_Valid() const{
    return m_operating_expenditures_percent_isValid;
}

QString OAICommitteeTotalsPacParty::getOrganizationType() const {
    return m_organization_type;
}
void OAICommitteeTotalsPacParty::setOrganizationType(const QString &organization_type) {
    m_organization_type = organization_type;
    m_organization_type_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_organization_type_Set() const{
    return m_organization_type_isSet;
}

bool OAICommitteeTotalsPacParty::is_organization_type_Valid() const{
    return m_organization_type_isValid;
}

QString OAICommitteeTotalsPacParty::getOrganizationTypeFull() const {
    return m_organization_type_full;
}
void OAICommitteeTotalsPacParty::setOrganizationTypeFull(const QString &organization_type_full) {
    m_organization_type_full = organization_type_full;
    m_organization_type_full_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_organization_type_full_Set() const{
    return m_organization_type_full_isSet;
}

bool OAICommitteeTotalsPacParty::is_organization_type_full_Valid() const{
    return m_organization_type_full_isValid;
}

double OAICommitteeTotalsPacParty::getOtherDisbursements() const {
    return m_other_disbursements;
}
void OAICommitteeTotalsPacParty::setOtherDisbursements(const double &other_disbursements) {
    m_other_disbursements = other_disbursements;
    m_other_disbursements_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_other_disbursements_Set() const{
    return m_other_disbursements_isSet;
}

bool OAICommitteeTotalsPacParty::is_other_disbursements_Valid() const{
    return m_other_disbursements_isValid;
}

double OAICommitteeTotalsPacParty::getOtherFedOperatingExpenditures() const {
    return m_other_fed_operating_expenditures;
}
void OAICommitteeTotalsPacParty::setOtherFedOperatingExpenditures(const double &other_fed_operating_expenditures) {
    m_other_fed_operating_expenditures = other_fed_operating_expenditures;
    m_other_fed_operating_expenditures_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_other_fed_operating_expenditures_Set() const{
    return m_other_fed_operating_expenditures_isSet;
}

bool OAICommitteeTotalsPacParty::is_other_fed_operating_expenditures_Valid() const{
    return m_other_fed_operating_expenditures_isValid;
}

double OAICommitteeTotalsPacParty::getOtherFedReceipts() const {
    return m_other_fed_receipts;
}
void OAICommitteeTotalsPacParty::setOtherFedReceipts(const double &other_fed_receipts) {
    m_other_fed_receipts = other_fed_receipts;
    m_other_fed_receipts_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_other_fed_receipts_Set() const{
    return m_other_fed_receipts_isSet;
}

bool OAICommitteeTotalsPacParty::is_other_fed_receipts_Valid() const{
    return m_other_fed_receipts_isValid;
}

double OAICommitteeTotalsPacParty::getOtherPoliticalCommitteeContributions() const {
    return m_other_political_committee_contributions;
}
void OAICommitteeTotalsPacParty::setOtherPoliticalCommitteeContributions(const double &other_political_committee_contributions) {
    m_other_political_committee_contributions = other_political_committee_contributions;
    m_other_political_committee_contributions_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_other_political_committee_contributions_Set() const{
    return m_other_political_committee_contributions_isSet;
}

bool OAICommitteeTotalsPacParty::is_other_political_committee_contributions_Valid() const{
    return m_other_political_committee_contributions_isValid;
}

double OAICommitteeTotalsPacParty::getOtherRefunds() const {
    return m_other_refunds;
}
void OAICommitteeTotalsPacParty::setOtherRefunds(const double &other_refunds) {
    m_other_refunds = other_refunds;
    m_other_refunds_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_other_refunds_Set() const{
    return m_other_refunds_isSet;
}

bool OAICommitteeTotalsPacParty::is_other_refunds_Valid() const{
    return m_other_refunds_isValid;
}

double OAICommitteeTotalsPacParty::getPartyAndOtherCommitteeContributionsPercent() const {
    return m_party_and_other_committee_contributions_percent;
}
void OAICommitteeTotalsPacParty::setPartyAndOtherCommitteeContributionsPercent(const double &party_and_other_committee_contributions_percent) {
    m_party_and_other_committee_contributions_percent = party_and_other_committee_contributions_percent;
    m_party_and_other_committee_contributions_percent_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_party_and_other_committee_contributions_percent_Set() const{
    return m_party_and_other_committee_contributions_percent_isSet;
}

bool OAICommitteeTotalsPacParty::is_party_and_other_committee_contributions_percent_Valid() const{
    return m_party_and_other_committee_contributions_percent_isValid;
}

QString OAICommitteeTotalsPacParty::getPartyFull() const {
    return m_party_full;
}
void OAICommitteeTotalsPacParty::setPartyFull(const QString &party_full) {
    m_party_full = party_full;
    m_party_full_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_party_full_Set() const{
    return m_party_full_isSet;
}

bool OAICommitteeTotalsPacParty::is_party_full_Valid() const{
    return m_party_full_isValid;
}

QString OAICommitteeTotalsPacParty::getPdfUrl() const {
    return m_pdf_url;
}
void OAICommitteeTotalsPacParty::setPdfUrl(const QString &pdf_url) {
    m_pdf_url = pdf_url;
    m_pdf_url_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_pdf_url_Set() const{
    return m_pdf_url_isSet;
}

bool OAICommitteeTotalsPacParty::is_pdf_url_Valid() const{
    return m_pdf_url_isValid;
}

double OAICommitteeTotalsPacParty::getPoliticalPartyCommitteeContributions() const {
    return m_political_party_committee_contributions;
}
void OAICommitteeTotalsPacParty::setPoliticalPartyCommitteeContributions(const double &political_party_committee_contributions) {
    m_political_party_committee_contributions = political_party_committee_contributions;
    m_political_party_committee_contributions_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_political_party_committee_contributions_Set() const{
    return m_political_party_committee_contributions_isSet;
}

bool OAICommitteeTotalsPacParty::is_political_party_committee_contributions_Valid() const{
    return m_political_party_committee_contributions_isValid;
}

double OAICommitteeTotalsPacParty::getReceipts() const {
    return m_receipts;
}
void OAICommitteeTotalsPacParty::setReceipts(const double &receipts) {
    m_receipts = receipts;
    m_receipts_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_receipts_Set() const{
    return m_receipts_isSet;
}

bool OAICommitteeTotalsPacParty::is_receipts_Valid() const{
    return m_receipts_isValid;
}

double OAICommitteeTotalsPacParty::getRefundedIndividualContributions() const {
    return m_refunded_individual_contributions;
}
void OAICommitteeTotalsPacParty::setRefundedIndividualContributions(const double &refunded_individual_contributions) {
    m_refunded_individual_contributions = refunded_individual_contributions;
    m_refunded_individual_contributions_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_refunded_individual_contributions_Set() const{
    return m_refunded_individual_contributions_isSet;
}

bool OAICommitteeTotalsPacParty::is_refunded_individual_contributions_Valid() const{
    return m_refunded_individual_contributions_isValid;
}

double OAICommitteeTotalsPacParty::getRefundedOtherPoliticalCommitteeContributions() const {
    return m_refunded_other_political_committee_contributions;
}
void OAICommitteeTotalsPacParty::setRefundedOtherPoliticalCommitteeContributions(const double &refunded_other_political_committee_contributions) {
    m_refunded_other_political_committee_contributions = refunded_other_political_committee_contributions;
    m_refunded_other_political_committee_contributions_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_refunded_other_political_committee_contributions_Set() const{
    return m_refunded_other_political_committee_contributions_isSet;
}

bool OAICommitteeTotalsPacParty::is_refunded_other_political_committee_contributions_Valid() const{
    return m_refunded_other_political_committee_contributions_isValid;
}

double OAICommitteeTotalsPacParty::getRefundedPoliticalPartyCommitteeContributions() const {
    return m_refunded_political_party_committee_contributions;
}
void OAICommitteeTotalsPacParty::setRefundedPoliticalPartyCommitteeContributions(const double &refunded_political_party_committee_contributions) {
    m_refunded_political_party_committee_contributions = refunded_political_party_committee_contributions;
    m_refunded_political_party_committee_contributions_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_refunded_political_party_committee_contributions_Set() const{
    return m_refunded_political_party_committee_contributions_isSet;
}

bool OAICommitteeTotalsPacParty::is_refunded_political_party_committee_contributions_Valid() const{
    return m_refunded_political_party_committee_contributions_isValid;
}

double OAICommitteeTotalsPacParty::getRefundsRelatingConventionExp() const {
    return m_refunds_relating_convention_exp;
}
void OAICommitteeTotalsPacParty::setRefundsRelatingConventionExp(const double &refunds_relating_convention_exp) {
    m_refunds_relating_convention_exp = refunds_relating_convention_exp;
    m_refunds_relating_convention_exp_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_refunds_relating_convention_exp_Set() const{
    return m_refunds_relating_convention_exp_isSet;
}

bool OAICommitteeTotalsPacParty::is_refunds_relating_convention_exp_Valid() const{
    return m_refunds_relating_convention_exp_isValid;
}

QString OAICommitteeTotalsPacParty::getReportForm() const {
    return m_report_form;
}
void OAICommitteeTotalsPacParty::setReportForm(const QString &report_form) {
    m_report_form = report_form;
    m_report_form_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_report_form_Set() const{
    return m_report_form_isSet;
}

bool OAICommitteeTotalsPacParty::is_report_form_Valid() const{
    return m_report_form_isValid;
}

double OAICommitteeTotalsPacParty::getSharedFedActivity() const {
    return m_shared_fed_activity;
}
void OAICommitteeTotalsPacParty::setSharedFedActivity(const double &shared_fed_activity) {
    m_shared_fed_activity = shared_fed_activity;
    m_shared_fed_activity_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_shared_fed_activity_Set() const{
    return m_shared_fed_activity_isSet;
}

bool OAICommitteeTotalsPacParty::is_shared_fed_activity_Valid() const{
    return m_shared_fed_activity_isValid;
}

double OAICommitteeTotalsPacParty::getSharedFedActivityNonfed() const {
    return m_shared_fed_activity_nonfed;
}
void OAICommitteeTotalsPacParty::setSharedFedActivityNonfed(const double &shared_fed_activity_nonfed) {
    m_shared_fed_activity_nonfed = shared_fed_activity_nonfed;
    m_shared_fed_activity_nonfed_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_shared_fed_activity_nonfed_Set() const{
    return m_shared_fed_activity_nonfed_isSet;
}

bool OAICommitteeTotalsPacParty::is_shared_fed_activity_nonfed_Valid() const{
    return m_shared_fed_activity_nonfed_isValid;
}

double OAICommitteeTotalsPacParty::getSharedFedOperatingExpenditures() const {
    return m_shared_fed_operating_expenditures;
}
void OAICommitteeTotalsPacParty::setSharedFedOperatingExpenditures(const double &shared_fed_operating_expenditures) {
    m_shared_fed_operating_expenditures = shared_fed_operating_expenditures;
    m_shared_fed_operating_expenditures_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_shared_fed_operating_expenditures_Set() const{
    return m_shared_fed_operating_expenditures_isSet;
}

bool OAICommitteeTotalsPacParty::is_shared_fed_operating_expenditures_Valid() const{
    return m_shared_fed_operating_expenditures_isValid;
}

double OAICommitteeTotalsPacParty::getSharedNonfedOperatingExpenditures() const {
    return m_shared_nonfed_operating_expenditures;
}
void OAICommitteeTotalsPacParty::setSharedNonfedOperatingExpenditures(const double &shared_nonfed_operating_expenditures) {
    m_shared_nonfed_operating_expenditures = shared_nonfed_operating_expenditures;
    m_shared_nonfed_operating_expenditures_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_shared_nonfed_operating_expenditures_Set() const{
    return m_shared_nonfed_operating_expenditures_isSet;
}

bool OAICommitteeTotalsPacParty::is_shared_nonfed_operating_expenditures_Valid() const{
    return m_shared_nonfed_operating_expenditures_isValid;
}

QList<QString> OAICommitteeTotalsPacParty::getSponsorCandidateIds() const {
    return m_sponsor_candidate_ids;
}
void OAICommitteeTotalsPacParty::setSponsorCandidateIds(const QList<QString> &sponsor_candidate_ids) {
    m_sponsor_candidate_ids = sponsor_candidate_ids;
    m_sponsor_candidate_ids_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_sponsor_candidate_ids_Set() const{
    return m_sponsor_candidate_ids_isSet;
}

bool OAICommitteeTotalsPacParty::is_sponsor_candidate_ids_Valid() const{
    return m_sponsor_candidate_ids_isValid;
}

QList<OAICommittee_sponsor_candidate_list_inner> OAICommitteeTotalsPacParty::getSponsorCandidateList() const {
    return m_sponsor_candidate_list;
}
void OAICommitteeTotalsPacParty::setSponsorCandidateList(const QList<OAICommittee_sponsor_candidate_list_inner> &sponsor_candidate_list) {
    m_sponsor_candidate_list = sponsor_candidate_list;
    m_sponsor_candidate_list_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_sponsor_candidate_list_Set() const{
    return m_sponsor_candidate_list_isSet;
}

bool OAICommitteeTotalsPacParty::is_sponsor_candidate_list_Valid() const{
    return m_sponsor_candidate_list_isValid;
}

double OAICommitteeTotalsPacParty::getTotalExpSubjectLimits() const {
    return m_total_exp_subject_limits;
}
void OAICommitteeTotalsPacParty::setTotalExpSubjectLimits(const double &total_exp_subject_limits) {
    m_total_exp_subject_limits = total_exp_subject_limits;
    m_total_exp_subject_limits_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_total_exp_subject_limits_Set() const{
    return m_total_exp_subject_limits_isSet;
}

bool OAICommitteeTotalsPacParty::is_total_exp_subject_limits_Valid() const{
    return m_total_exp_subject_limits_isValid;
}

double OAICommitteeTotalsPacParty::getTotalTransfers() const {
    return m_total_transfers;
}
void OAICommitteeTotalsPacParty::setTotalTransfers(const double &total_transfers) {
    m_total_transfers = total_transfers;
    m_total_transfers_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_total_transfers_Set() const{
    return m_total_transfers_isSet;
}

bool OAICommitteeTotalsPacParty::is_total_transfers_Valid() const{
    return m_total_transfers_isValid;
}

QDate OAICommitteeTotalsPacParty::getTransactionCoverageDate() const {
    return m_transaction_coverage_date;
}
void OAICommitteeTotalsPacParty::setTransactionCoverageDate(const QDate &transaction_coverage_date) {
    m_transaction_coverage_date = transaction_coverage_date;
    m_transaction_coverage_date_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_transaction_coverage_date_Set() const{
    return m_transaction_coverage_date_isSet;
}

bool OAICommitteeTotalsPacParty::is_transaction_coverage_date_Valid() const{
    return m_transaction_coverage_date_isValid;
}

double OAICommitteeTotalsPacParty::getTransfersFromAffiliatedParty() const {
    return m_transfers_from_affiliated_party;
}
void OAICommitteeTotalsPacParty::setTransfersFromAffiliatedParty(const double &transfers_from_affiliated_party) {
    m_transfers_from_affiliated_party = transfers_from_affiliated_party;
    m_transfers_from_affiliated_party_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_transfers_from_affiliated_party_Set() const{
    return m_transfers_from_affiliated_party_isSet;
}

bool OAICommitteeTotalsPacParty::is_transfers_from_affiliated_party_Valid() const{
    return m_transfers_from_affiliated_party_isValid;
}

double OAICommitteeTotalsPacParty::getTransfersFromNonfedAccount() const {
    return m_transfers_from_nonfed_account;
}
void OAICommitteeTotalsPacParty::setTransfersFromNonfedAccount(const double &transfers_from_nonfed_account) {
    m_transfers_from_nonfed_account = transfers_from_nonfed_account;
    m_transfers_from_nonfed_account_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_transfers_from_nonfed_account_Set() const{
    return m_transfers_from_nonfed_account_isSet;
}

bool OAICommitteeTotalsPacParty::is_transfers_from_nonfed_account_Valid() const{
    return m_transfers_from_nonfed_account_isValid;
}

double OAICommitteeTotalsPacParty::getTransfersFromNonfedLevin() const {
    return m_transfers_from_nonfed_levin;
}
void OAICommitteeTotalsPacParty::setTransfersFromNonfedLevin(const double &transfers_from_nonfed_levin) {
    m_transfers_from_nonfed_levin = transfers_from_nonfed_levin;
    m_transfers_from_nonfed_levin_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_transfers_from_nonfed_levin_Set() const{
    return m_transfers_from_nonfed_levin_isSet;
}

bool OAICommitteeTotalsPacParty::is_transfers_from_nonfed_levin_Valid() const{
    return m_transfers_from_nonfed_levin_isValid;
}

double OAICommitteeTotalsPacParty::getTransfersToAffiliatedCommittee() const {
    return m_transfers_to_affiliated_committee;
}
void OAICommitteeTotalsPacParty::setTransfersToAffiliatedCommittee(const double &transfers_to_affiliated_committee) {
    m_transfers_to_affiliated_committee = transfers_to_affiliated_committee;
    m_transfers_to_affiliated_committee_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_transfers_to_affiliated_committee_Set() const{
    return m_transfers_to_affiliated_committee_isSet;
}

bool OAICommitteeTotalsPacParty::is_transfers_to_affiliated_committee_Valid() const{
    return m_transfers_to_affiliated_committee_isValid;
}

QString OAICommitteeTotalsPacParty::getTreasurerName() const {
    return m_treasurer_name;
}
void OAICommitteeTotalsPacParty::setTreasurerName(const QString &treasurer_name) {
    m_treasurer_name = treasurer_name;
    m_treasurer_name_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_treasurer_name_Set() const{
    return m_treasurer_name_isSet;
}

bool OAICommitteeTotalsPacParty::is_treasurer_name_Valid() const{
    return m_treasurer_name_isValid;
}

double OAICommitteeTotalsPacParty::getUnitemizedConventionExp() const {
    return m_unitemized_convention_exp;
}
void OAICommitteeTotalsPacParty::setUnitemizedConventionExp(const double &unitemized_convention_exp) {
    m_unitemized_convention_exp = unitemized_convention_exp;
    m_unitemized_convention_exp_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_unitemized_convention_exp_Set() const{
    return m_unitemized_convention_exp_isSet;
}

bool OAICommitteeTotalsPacParty::is_unitemized_convention_exp_Valid() const{
    return m_unitemized_convention_exp_isValid;
}

double OAICommitteeTotalsPacParty::getUnitemizedOtherDisb() const {
    return m_unitemized_other_disb;
}
void OAICommitteeTotalsPacParty::setUnitemizedOtherDisb(const double &unitemized_other_disb) {
    m_unitemized_other_disb = unitemized_other_disb;
    m_unitemized_other_disb_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_unitemized_other_disb_Set() const{
    return m_unitemized_other_disb_isSet;
}

bool OAICommitteeTotalsPacParty::is_unitemized_other_disb_Valid() const{
    return m_unitemized_other_disb_isValid;
}

double OAICommitteeTotalsPacParty::getUnitemizedOtherIncome() const {
    return m_unitemized_other_income;
}
void OAICommitteeTotalsPacParty::setUnitemizedOtherIncome(const double &unitemized_other_income) {
    m_unitemized_other_income = unitemized_other_income;
    m_unitemized_other_income_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_unitemized_other_income_Set() const{
    return m_unitemized_other_income_isSet;
}

bool OAICommitteeTotalsPacParty::is_unitemized_other_income_Valid() const{
    return m_unitemized_other_income_isValid;
}

double OAICommitteeTotalsPacParty::getUnitemizedOtherRefunds() const {
    return m_unitemized_other_refunds;
}
void OAICommitteeTotalsPacParty::setUnitemizedOtherRefunds(const double &unitemized_other_refunds) {
    m_unitemized_other_refunds = unitemized_other_refunds;
    m_unitemized_other_refunds_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_unitemized_other_refunds_Set() const{
    return m_unitemized_other_refunds_isSet;
}

bool OAICommitteeTotalsPacParty::is_unitemized_other_refunds_Valid() const{
    return m_unitemized_other_refunds_isValid;
}

double OAICommitteeTotalsPacParty::getUnitemizedRefundsRelatingConventionExp() const {
    return m_unitemized_refunds_relating_convention_exp;
}
void OAICommitteeTotalsPacParty::setUnitemizedRefundsRelatingConventionExp(const double &unitemized_refunds_relating_convention_exp) {
    m_unitemized_refunds_relating_convention_exp = unitemized_refunds_relating_convention_exp;
    m_unitemized_refunds_relating_convention_exp_isSet = true;
}

bool OAICommitteeTotalsPacParty::is_unitemized_refunds_relating_convention_exp_Set() const{
    return m_unitemized_refunds_relating_convention_exp_isSet;
}

bool OAICommitteeTotalsPacParty::is_unitemized_refunds_relating_convention_exp_Valid() const{
    return m_unitemized_refunds_relating_convention_exp_isValid;
}

bool OAICommitteeTotalsPacParty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_loans_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allocated_federal_election_levin_share_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_on_hand_beginning_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_designation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_designation_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_type_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contribution_refunds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributions_ie_and_party_expenditures_made_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_convention_exp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coordinated_expenditures_by_party_committee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coverage_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coverage_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cycle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disbursements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exp_prior_years_subject_limits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exp_subject_limits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fed_candidate_committee_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fed_candidate_contribution_refunds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fed_disbursements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fed_election_activity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fed_operating_expenditures_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fed_receipts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_federal_funds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filing_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filing_frequency_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_f1_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_file_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_independent_expenditures_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_individual_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_individual_contributions_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_individual_itemized_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_individual_unitemized_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_itemized_convention_exp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_itemized_other_disb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_itemized_other_income_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_itemized_other_refunds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_itemized_refunds_relating_convention_exp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_beginning_image_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_cash_on_hand_end_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_debts_owed_by_committee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_debts_owed_to_committee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_report_type_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_report_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loan_repayments_made_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loan_repayments_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loans_and_loan_repayments_made_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loans_and_loan_repayments_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loans_made_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_operating_expenditures_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_allocated_fed_election_activity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offsets_to_operating_expenditures_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_expenditures_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_expenditures_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_type_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_disbursements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_fed_operating_expenditures_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_fed_receipts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_political_committee_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_refunds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_and_other_committee_contributions_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pdf_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_political_party_committee_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunded_individual_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunded_other_political_committee_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunded_political_party_committee_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunds_relating_convention_exp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_form_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_fed_activity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_fed_activity_nonfed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_fed_operating_expenditures_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_nonfed_operating_expenditures_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sponsor_candidate_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sponsor_candidate_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_exp_subject_limits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_transfers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_coverage_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfers_from_affiliated_party_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfers_from_nonfed_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfers_from_nonfed_levin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfers_to_affiliated_committee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_treasurer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unitemized_convention_exp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unitemized_other_disb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unitemized_other_income_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unitemized_other_refunds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unitemized_refunds_relating_convention_exp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommitteeTotalsPacParty::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cycle_isValid && true;
}

} // namespace OpenAPI
