/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIElectioneering.h
 *
 * 
 */

#ifndef OAIElectioneering_H
#define OAIElectioneering_H

#include <QJsonObject>

#include <QDate>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIElectioneering : public OAIObject {
public:
    OAIElectioneering();
    OAIElectioneering(QString json);
    ~OAIElectioneering() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAmendmentIndicator() const;
    void setAmendmentIndicator(const QString &amendment_indicator);
    bool is_amendment_indicator_Set() const;
    bool is_amendment_indicator_Valid() const;

    QString getBeginningImageNumber() const;
    void setBeginningImageNumber(const QString &beginning_image_number);
    bool is_beginning_image_number_Set() const;
    bool is_beginning_image_number_Valid() const;

    double getCalculatedCandidateShare() const;
    void setCalculatedCandidateShare(const double &calculated_candidate_share);
    bool is_calculated_candidate_share_Set() const;
    bool is_calculated_candidate_share_Valid() const;

    QString getCandidateDistrict() const;
    void setCandidateDistrict(const QString &candidate_district);
    bool is_candidate_district_Set() const;
    bool is_candidate_district_Valid() const;

    QString getCandidateId() const;
    void setCandidateId(const QString &candidate_id);
    bool is_candidate_id_Set() const;
    bool is_candidate_id_Valid() const;

    QString getCandidateName() const;
    void setCandidateName(const QString &candidate_name);
    bool is_candidate_name_Set() const;
    bool is_candidate_name_Valid() const;

    QString getCandidateOffice() const;
    void setCandidateOffice(const QString &candidate_office);
    bool is_candidate_office_Set() const;
    bool is_candidate_office_Valid() const;

    QString getCandidateState() const;
    void setCandidateState(const QString &candidate_state);
    bool is_candidate_state_Set() const;
    bool is_candidate_state_Valid() const;

    QString getCommitteeId() const;
    void setCommitteeId(const QString &committee_id);
    bool is_committee_id_Set() const;
    bool is_committee_id_Valid() const;

    QString getCommitteeName() const;
    void setCommitteeName(const QString &committee_name);
    bool is_committee_name_Set() const;
    bool is_committee_name_Valid() const;

    QDate getCommunicationDate() const;
    void setCommunicationDate(const QDate &communication_date);
    bool is_communication_date_Set() const;
    bool is_communication_date_Valid() const;

    double getDisbursementAmount() const;
    void setDisbursementAmount(const double &disbursement_amount);
    bool is_disbursement_amount_Set() const;
    bool is_disbursement_amount_Valid() const;

    QDate getDisbursementDate() const;
    void setDisbursementDate(const QDate &disbursement_date);
    bool is_disbursement_date_Set() const;
    bool is_disbursement_date_Valid() const;

    QString getElectionType() const;
    void setElectionType(const QString &election_type);
    bool is_election_type_Set() const;
    bool is_election_type_Valid() const;

    qint32 getFileNumber() const;
    void setFileNumber(const qint32 &file_number);
    bool is_file_number_Set() const;
    bool is_file_number_Valid() const;

    qint32 getLinkId() const;
    void setLinkId(const qint32 &link_id);
    bool is_link_id_Set() const;
    bool is_link_id_Valid() const;

    double getNumberOfCandidates() const;
    void setNumberOfCandidates(const double &number_of_candidates);
    bool is_number_of_candidates_Set() const;
    bool is_number_of_candidates_Valid() const;

    QString getPayeeName() const;
    void setPayeeName(const QString &payee_name);
    bool is_payee_name_Set() const;
    bool is_payee_name_Valid() const;

    QString getPayeeState() const;
    void setPayeeState(const QString &payee_state);
    bool is_payee_state_Set() const;
    bool is_payee_state_Valid() const;

    QString getPdfUrl() const;
    void setPdfUrl(const QString &pdf_url);
    bool is_pdf_url_Set() const;
    bool is_pdf_url_Valid() const;

    QDate getPublicDistributionDate() const;
    void setPublicDistributionDate(const QDate &public_distribution_date);
    bool is_public_distribution_date_Set() const;
    bool is_public_distribution_date_Valid() const;

    QString getPurposeDescription() const;
    void setPurposeDescription(const QString &purpose_description);
    bool is_purpose_description_Set() const;
    bool is_purpose_description_Valid() const;

    QDate getReceiptDate() const;
    void setReceiptDate(const QDate &receipt_date);
    bool is_receipt_date_Set() const;
    bool is_receipt_date_Valid() const;

    qint32 getReportYear() const;
    void setReportYear(const qint32 &report_year);
    bool is_report_year_Set() const;
    bool is_report_year_Valid() const;

    QString getSbImageNum() const;
    void setSbImageNum(const QString &sb_image_num);
    bool is_sb_image_num_Set() const;
    bool is_sb_image_num_Valid() const;

    QString getSbLinkId() const;
    void setSbLinkId(const QString &sb_link_id);
    bool is_sb_link_id_Set() const;
    bool is_sb_link_id_Valid() const;

    qint32 getSubId() const;
    void setSubId(const qint32 &sub_id);
    bool is_sub_id_Set() const;
    bool is_sub_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_amendment_indicator;
    bool m_amendment_indicator_isSet;
    bool m_amendment_indicator_isValid;

    QString m_beginning_image_number;
    bool m_beginning_image_number_isSet;
    bool m_beginning_image_number_isValid;

    double m_calculated_candidate_share;
    bool m_calculated_candidate_share_isSet;
    bool m_calculated_candidate_share_isValid;

    QString m_candidate_district;
    bool m_candidate_district_isSet;
    bool m_candidate_district_isValid;

    QString m_candidate_id;
    bool m_candidate_id_isSet;
    bool m_candidate_id_isValid;

    QString m_candidate_name;
    bool m_candidate_name_isSet;
    bool m_candidate_name_isValid;

    QString m_candidate_office;
    bool m_candidate_office_isSet;
    bool m_candidate_office_isValid;

    QString m_candidate_state;
    bool m_candidate_state_isSet;
    bool m_candidate_state_isValid;

    QString m_committee_id;
    bool m_committee_id_isSet;
    bool m_committee_id_isValid;

    QString m_committee_name;
    bool m_committee_name_isSet;
    bool m_committee_name_isValid;

    QDate m_communication_date;
    bool m_communication_date_isSet;
    bool m_communication_date_isValid;

    double m_disbursement_amount;
    bool m_disbursement_amount_isSet;
    bool m_disbursement_amount_isValid;

    QDate m_disbursement_date;
    bool m_disbursement_date_isSet;
    bool m_disbursement_date_isValid;

    QString m_election_type;
    bool m_election_type_isSet;
    bool m_election_type_isValid;

    qint32 m_file_number;
    bool m_file_number_isSet;
    bool m_file_number_isValid;

    qint32 m_link_id;
    bool m_link_id_isSet;
    bool m_link_id_isValid;

    double m_number_of_candidates;
    bool m_number_of_candidates_isSet;
    bool m_number_of_candidates_isValid;

    QString m_payee_name;
    bool m_payee_name_isSet;
    bool m_payee_name_isValid;

    QString m_payee_state;
    bool m_payee_state_isSet;
    bool m_payee_state_isValid;

    QString m_pdf_url;
    bool m_pdf_url_isSet;
    bool m_pdf_url_isValid;

    QDate m_public_distribution_date;
    bool m_public_distribution_date_isSet;
    bool m_public_distribution_date_isValid;

    QString m_purpose_description;
    bool m_purpose_description_isSet;
    bool m_purpose_description_isValid;

    QDate m_receipt_date;
    bool m_receipt_date_isSet;
    bool m_receipt_date_isValid;

    qint32 m_report_year;
    bool m_report_year_isSet;
    bool m_report_year_isValid;

    QString m_sb_image_num;
    bool m_sb_image_num_isSet;
    bool m_sb_image_num_isValid;

    QString m_sb_link_id;
    bool m_sb_link_id_isSet;
    bool m_sb_link_id_isValid;

    qint32 m_sub_id;
    bool m_sub_id_isSet;
    bool m_sub_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIElectioneering)

#endif // OAIElectioneering_H
