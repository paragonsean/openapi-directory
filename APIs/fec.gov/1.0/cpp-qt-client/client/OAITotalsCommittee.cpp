/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITotalsCommittee.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITotalsCommittee::OAITotalsCommittee(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITotalsCommittee::OAITotalsCommittee() {
    this->initializeModel();
}

OAITotalsCommittee::~OAITotalsCommittee() {}

void OAITotalsCommittee::initializeModel() {

    m_affiliated_committee_name_isSet = false;
    m_affiliated_committee_name_isValid = false;

    m_candidate_ids_isSet = false;
    m_candidate_ids_isValid = false;

    m_cash_on_hand_end_period_isSet = false;
    m_cash_on_hand_end_period_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_committee_id_isSet = false;
    m_committee_id_isValid = false;

    m_committee_type_isSet = false;
    m_committee_type_isValid = false;

    m_committee_type_full_isSet = false;
    m_committee_type_full_isValid = false;

    m_cycle_isSet = false;
    m_cycle_isValid = false;

    m_cycles_isSet = false;
    m_cycles_isValid = false;

    m_cycles_has_activity_isSet = false;
    m_cycles_has_activity_isValid = false;

    m_cycles_has_financial_isSet = false;
    m_cycles_has_financial_isValid = false;

    m_debts_owed_by_committee_isSet = false;
    m_debts_owed_by_committee_isValid = false;

    m_designation_isSet = false;
    m_designation_isValid = false;

    m_designation_full_isSet = false;
    m_designation_full_isValid = false;

    m_disbursements_isSet = false;
    m_disbursements_isValid = false;

    m_filing_frequency_isSet = false;
    m_filing_frequency_isValid = false;

    m_first_f1_date_isSet = false;
    m_first_f1_date_isValid = false;

    m_first_file_date_isSet = false;
    m_first_file_date_isValid = false;

    m_independent_expenditures_isSet = false;
    m_independent_expenditures_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_jfc_committee_isSet = false;
    m_jfc_committee_isValid = false;

    m_last_cycle_has_activity_isSet = false;
    m_last_cycle_has_activity_isValid = false;

    m_last_cycle_has_financial_isSet = false;
    m_last_cycle_has_financial_isValid = false;

    m_last_f1_date_isSet = false;
    m_last_f1_date_isValid = false;

    m_last_file_date_isSet = false;
    m_last_file_date_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_organization_type_isSet = false;
    m_organization_type_isValid = false;

    m_organization_type_full_isSet = false;
    m_organization_type_full_isValid = false;

    m_party_isSet = false;
    m_party_isValid = false;

    m_party_full_isSet = false;
    m_party_full_isValid = false;

    m_receipts_isSet = false;
    m_receipts_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_full_isSet = false;
    m_state_full_isValid = false;

    m_street_1_isSet = false;
    m_street_1_isValid = false;

    m_street_2_isSet = false;
    m_street_2_isValid = false;

    m_treasurer_name_isSet = false;
    m_treasurer_name_isValid = false;

    m_zip_isSet = false;
    m_zip_isValid = false;
}

void OAITotalsCommittee::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITotalsCommittee::fromJsonObject(QJsonObject json) {

    m_affiliated_committee_name_isValid = ::OpenAPI::fromJsonValue(m_affiliated_committee_name, json[QString("affiliated_committee_name")]);
    m_affiliated_committee_name_isSet = !json[QString("affiliated_committee_name")].isNull() && m_affiliated_committee_name_isValid;

    m_candidate_ids_isValid = ::OpenAPI::fromJsonValue(m_candidate_ids, json[QString("candidate_ids")]);
    m_candidate_ids_isSet = !json[QString("candidate_ids")].isNull() && m_candidate_ids_isValid;

    m_cash_on_hand_end_period_isValid = ::OpenAPI::fromJsonValue(m_cash_on_hand_end_period, json[QString("cash_on_hand_end_period")]);
    m_cash_on_hand_end_period_isSet = !json[QString("cash_on_hand_end_period")].isNull() && m_cash_on_hand_end_period_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_committee_id_isValid = ::OpenAPI::fromJsonValue(m_committee_id, json[QString("committee_id")]);
    m_committee_id_isSet = !json[QString("committee_id")].isNull() && m_committee_id_isValid;

    m_committee_type_isValid = ::OpenAPI::fromJsonValue(m_committee_type, json[QString("committee_type")]);
    m_committee_type_isSet = !json[QString("committee_type")].isNull() && m_committee_type_isValid;

    m_committee_type_full_isValid = ::OpenAPI::fromJsonValue(m_committee_type_full, json[QString("committee_type_full")]);
    m_committee_type_full_isSet = !json[QString("committee_type_full")].isNull() && m_committee_type_full_isValid;

    m_cycle_isValid = ::OpenAPI::fromJsonValue(m_cycle, json[QString("cycle")]);
    m_cycle_isSet = !json[QString("cycle")].isNull() && m_cycle_isValid;

    m_cycles_isValid = ::OpenAPI::fromJsonValue(m_cycles, json[QString("cycles")]);
    m_cycles_isSet = !json[QString("cycles")].isNull() && m_cycles_isValid;

    m_cycles_has_activity_isValid = ::OpenAPI::fromJsonValue(m_cycles_has_activity, json[QString("cycles_has_activity")]);
    m_cycles_has_activity_isSet = !json[QString("cycles_has_activity")].isNull() && m_cycles_has_activity_isValid;

    m_cycles_has_financial_isValid = ::OpenAPI::fromJsonValue(m_cycles_has_financial, json[QString("cycles_has_financial")]);
    m_cycles_has_financial_isSet = !json[QString("cycles_has_financial")].isNull() && m_cycles_has_financial_isValid;

    m_debts_owed_by_committee_isValid = ::OpenAPI::fromJsonValue(m_debts_owed_by_committee, json[QString("debts_owed_by_committee")]);
    m_debts_owed_by_committee_isSet = !json[QString("debts_owed_by_committee")].isNull() && m_debts_owed_by_committee_isValid;

    m_designation_isValid = ::OpenAPI::fromJsonValue(m_designation, json[QString("designation")]);
    m_designation_isSet = !json[QString("designation")].isNull() && m_designation_isValid;

    m_designation_full_isValid = ::OpenAPI::fromJsonValue(m_designation_full, json[QString("designation_full")]);
    m_designation_full_isSet = !json[QString("designation_full")].isNull() && m_designation_full_isValid;

    m_disbursements_isValid = ::OpenAPI::fromJsonValue(m_disbursements, json[QString("disbursements")]);
    m_disbursements_isSet = !json[QString("disbursements")].isNull() && m_disbursements_isValid;

    m_filing_frequency_isValid = ::OpenAPI::fromJsonValue(m_filing_frequency, json[QString("filing_frequency")]);
    m_filing_frequency_isSet = !json[QString("filing_frequency")].isNull() && m_filing_frequency_isValid;

    m_first_f1_date_isValid = ::OpenAPI::fromJsonValue(m_first_f1_date, json[QString("first_f1_date")]);
    m_first_f1_date_isSet = !json[QString("first_f1_date")].isNull() && m_first_f1_date_isValid;

    m_first_file_date_isValid = ::OpenAPI::fromJsonValue(m_first_file_date, json[QString("first_file_date")]);
    m_first_file_date_isSet = !json[QString("first_file_date")].isNull() && m_first_file_date_isValid;

    m_independent_expenditures_isValid = ::OpenAPI::fromJsonValue(m_independent_expenditures, json[QString("independent_expenditures")]);
    m_independent_expenditures_isSet = !json[QString("independent_expenditures")].isNull() && m_independent_expenditures_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("is_active")]);
    m_is_active_isSet = !json[QString("is_active")].isNull() && m_is_active_isValid;

    m_jfc_committee_isValid = ::OpenAPI::fromJsonValue(m_jfc_committee, json[QString("jfc_committee")]);
    m_jfc_committee_isSet = !json[QString("jfc_committee")].isNull() && m_jfc_committee_isValid;

    m_last_cycle_has_activity_isValid = ::OpenAPI::fromJsonValue(m_last_cycle_has_activity, json[QString("last_cycle_has_activity")]);
    m_last_cycle_has_activity_isSet = !json[QString("last_cycle_has_activity")].isNull() && m_last_cycle_has_activity_isValid;

    m_last_cycle_has_financial_isValid = ::OpenAPI::fromJsonValue(m_last_cycle_has_financial, json[QString("last_cycle_has_financial")]);
    m_last_cycle_has_financial_isSet = !json[QString("last_cycle_has_financial")].isNull() && m_last_cycle_has_financial_isValid;

    m_last_f1_date_isValid = ::OpenAPI::fromJsonValue(m_last_f1_date, json[QString("last_f1_date")]);
    m_last_f1_date_isSet = !json[QString("last_f1_date")].isNull() && m_last_f1_date_isValid;

    m_last_file_date_isValid = ::OpenAPI::fromJsonValue(m_last_file_date, json[QString("last_file_date")]);
    m_last_file_date_isSet = !json[QString("last_file_date")].isNull() && m_last_file_date_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_organization_type_isValid = ::OpenAPI::fromJsonValue(m_organization_type, json[QString("organization_type")]);
    m_organization_type_isSet = !json[QString("organization_type")].isNull() && m_organization_type_isValid;

    m_organization_type_full_isValid = ::OpenAPI::fromJsonValue(m_organization_type_full, json[QString("organization_type_full")]);
    m_organization_type_full_isSet = !json[QString("organization_type_full")].isNull() && m_organization_type_full_isValid;

    m_party_isValid = ::OpenAPI::fromJsonValue(m_party, json[QString("party")]);
    m_party_isSet = !json[QString("party")].isNull() && m_party_isValid;

    m_party_full_isValid = ::OpenAPI::fromJsonValue(m_party_full, json[QString("party_full")]);
    m_party_full_isSet = !json[QString("party_full")].isNull() && m_party_full_isValid;

    m_receipts_isValid = ::OpenAPI::fromJsonValue(m_receipts, json[QString("receipts")]);
    m_receipts_isSet = !json[QString("receipts")].isNull() && m_receipts_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_full_isValid = ::OpenAPI::fromJsonValue(m_state_full, json[QString("state_full")]);
    m_state_full_isSet = !json[QString("state_full")].isNull() && m_state_full_isValid;

    m_street_1_isValid = ::OpenAPI::fromJsonValue(m_street_1, json[QString("street_1")]);
    m_street_1_isSet = !json[QString("street_1")].isNull() && m_street_1_isValid;

    m_street_2_isValid = ::OpenAPI::fromJsonValue(m_street_2, json[QString("street_2")]);
    m_street_2_isSet = !json[QString("street_2")].isNull() && m_street_2_isValid;

    m_treasurer_name_isValid = ::OpenAPI::fromJsonValue(m_treasurer_name, json[QString("treasurer_name")]);
    m_treasurer_name_isSet = !json[QString("treasurer_name")].isNull() && m_treasurer_name_isValid;

    m_zip_isValid = ::OpenAPI::fromJsonValue(m_zip, json[QString("zip")]);
    m_zip_isSet = !json[QString("zip")].isNull() && m_zip_isValid;
}

QString OAITotalsCommittee::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITotalsCommittee::asJsonObject() const {
    QJsonObject obj;
    if (m_affiliated_committee_name_isSet) {
        obj.insert(QString("affiliated_committee_name"), ::OpenAPI::toJsonValue(m_affiliated_committee_name));
    }
    if (m_candidate_ids.size() > 0) {
        obj.insert(QString("candidate_ids"), ::OpenAPI::toJsonValue(m_candidate_ids));
    }
    if (m_cash_on_hand_end_period_isSet) {
        obj.insert(QString("cash_on_hand_end_period"), ::OpenAPI::toJsonValue(m_cash_on_hand_end_period));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_committee_id_isSet) {
        obj.insert(QString("committee_id"), ::OpenAPI::toJsonValue(m_committee_id));
    }
    if (m_committee_type_isSet) {
        obj.insert(QString("committee_type"), ::OpenAPI::toJsonValue(m_committee_type));
    }
    if (m_committee_type_full_isSet) {
        obj.insert(QString("committee_type_full"), ::OpenAPI::toJsonValue(m_committee_type_full));
    }
    if (m_cycle_isSet) {
        obj.insert(QString("cycle"), ::OpenAPI::toJsonValue(m_cycle));
    }
    if (m_cycles.size() > 0) {
        obj.insert(QString("cycles"), ::OpenAPI::toJsonValue(m_cycles));
    }
    if (m_cycles_has_activity.size() > 0) {
        obj.insert(QString("cycles_has_activity"), ::OpenAPI::toJsonValue(m_cycles_has_activity));
    }
    if (m_cycles_has_financial.size() > 0) {
        obj.insert(QString("cycles_has_financial"), ::OpenAPI::toJsonValue(m_cycles_has_financial));
    }
    if (m_debts_owed_by_committee_isSet) {
        obj.insert(QString("debts_owed_by_committee"), ::OpenAPI::toJsonValue(m_debts_owed_by_committee));
    }
    if (m_designation_isSet) {
        obj.insert(QString("designation"), ::OpenAPI::toJsonValue(m_designation));
    }
    if (m_designation_full_isSet) {
        obj.insert(QString("designation_full"), ::OpenAPI::toJsonValue(m_designation_full));
    }
    if (m_disbursements_isSet) {
        obj.insert(QString("disbursements"), ::OpenAPI::toJsonValue(m_disbursements));
    }
    if (m_filing_frequency_isSet) {
        obj.insert(QString("filing_frequency"), ::OpenAPI::toJsonValue(m_filing_frequency));
    }
    if (m_first_f1_date_isSet) {
        obj.insert(QString("first_f1_date"), ::OpenAPI::toJsonValue(m_first_f1_date));
    }
    if (m_first_file_date_isSet) {
        obj.insert(QString("first_file_date"), ::OpenAPI::toJsonValue(m_first_file_date));
    }
    if (m_independent_expenditures_isSet) {
        obj.insert(QString("independent_expenditures"), ::OpenAPI::toJsonValue(m_independent_expenditures));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("is_active"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_jfc_committee.size() > 0) {
        obj.insert(QString("jfc_committee"), ::OpenAPI::toJsonValue(m_jfc_committee));
    }
    if (m_last_cycle_has_activity_isSet) {
        obj.insert(QString("last_cycle_has_activity"), ::OpenAPI::toJsonValue(m_last_cycle_has_activity));
    }
    if (m_last_cycle_has_financial_isSet) {
        obj.insert(QString("last_cycle_has_financial"), ::OpenAPI::toJsonValue(m_last_cycle_has_financial));
    }
    if (m_last_f1_date_isSet) {
        obj.insert(QString("last_f1_date"), ::OpenAPI::toJsonValue(m_last_f1_date));
    }
    if (m_last_file_date_isSet) {
        obj.insert(QString("last_file_date"), ::OpenAPI::toJsonValue(m_last_file_date));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_organization_type_isSet) {
        obj.insert(QString("organization_type"), ::OpenAPI::toJsonValue(m_organization_type));
    }
    if (m_organization_type_full_isSet) {
        obj.insert(QString("organization_type_full"), ::OpenAPI::toJsonValue(m_organization_type_full));
    }
    if (m_party_isSet) {
        obj.insert(QString("party"), ::OpenAPI::toJsonValue(m_party));
    }
    if (m_party_full_isSet) {
        obj.insert(QString("party_full"), ::OpenAPI::toJsonValue(m_party_full));
    }
    if (m_receipts_isSet) {
        obj.insert(QString("receipts"), ::OpenAPI::toJsonValue(m_receipts));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_full_isSet) {
        obj.insert(QString("state_full"), ::OpenAPI::toJsonValue(m_state_full));
    }
    if (m_street_1_isSet) {
        obj.insert(QString("street_1"), ::OpenAPI::toJsonValue(m_street_1));
    }
    if (m_street_2_isSet) {
        obj.insert(QString("street_2"), ::OpenAPI::toJsonValue(m_street_2));
    }
    if (m_treasurer_name_isSet) {
        obj.insert(QString("treasurer_name"), ::OpenAPI::toJsonValue(m_treasurer_name));
    }
    if (m_zip_isSet) {
        obj.insert(QString("zip"), ::OpenAPI::toJsonValue(m_zip));
    }
    return obj;
}

QString OAITotalsCommittee::getAffiliatedCommitteeName() const {
    return m_affiliated_committee_name;
}
void OAITotalsCommittee::setAffiliatedCommitteeName(const QString &affiliated_committee_name) {
    m_affiliated_committee_name = affiliated_committee_name;
    m_affiliated_committee_name_isSet = true;
}

bool OAITotalsCommittee::is_affiliated_committee_name_Set() const{
    return m_affiliated_committee_name_isSet;
}

bool OAITotalsCommittee::is_affiliated_committee_name_Valid() const{
    return m_affiliated_committee_name_isValid;
}

QList<QString> OAITotalsCommittee::getCandidateIds() const {
    return m_candidate_ids;
}
void OAITotalsCommittee::setCandidateIds(const QList<QString> &candidate_ids) {
    m_candidate_ids = candidate_ids;
    m_candidate_ids_isSet = true;
}

bool OAITotalsCommittee::is_candidate_ids_Set() const{
    return m_candidate_ids_isSet;
}

bool OAITotalsCommittee::is_candidate_ids_Valid() const{
    return m_candidate_ids_isValid;
}

double OAITotalsCommittee::getCashOnHandEndPeriod() const {
    return m_cash_on_hand_end_period;
}
void OAITotalsCommittee::setCashOnHandEndPeriod(const double &cash_on_hand_end_period) {
    m_cash_on_hand_end_period = cash_on_hand_end_period;
    m_cash_on_hand_end_period_isSet = true;
}

bool OAITotalsCommittee::is_cash_on_hand_end_period_Set() const{
    return m_cash_on_hand_end_period_isSet;
}

bool OAITotalsCommittee::is_cash_on_hand_end_period_Valid() const{
    return m_cash_on_hand_end_period_isValid;
}

QString OAITotalsCommittee::getCity() const {
    return m_city;
}
void OAITotalsCommittee::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAITotalsCommittee::is_city_Set() const{
    return m_city_isSet;
}

bool OAITotalsCommittee::is_city_Valid() const{
    return m_city_isValid;
}

QString OAITotalsCommittee::getCommitteeId() const {
    return m_committee_id;
}
void OAITotalsCommittee::setCommitteeId(const QString &committee_id) {
    m_committee_id = committee_id;
    m_committee_id_isSet = true;
}

bool OAITotalsCommittee::is_committee_id_Set() const{
    return m_committee_id_isSet;
}

bool OAITotalsCommittee::is_committee_id_Valid() const{
    return m_committee_id_isValid;
}

QString OAITotalsCommittee::getCommitteeType() const {
    return m_committee_type;
}
void OAITotalsCommittee::setCommitteeType(const QString &committee_type) {
    m_committee_type = committee_type;
    m_committee_type_isSet = true;
}

bool OAITotalsCommittee::is_committee_type_Set() const{
    return m_committee_type_isSet;
}

bool OAITotalsCommittee::is_committee_type_Valid() const{
    return m_committee_type_isValid;
}

QString OAITotalsCommittee::getCommitteeTypeFull() const {
    return m_committee_type_full;
}
void OAITotalsCommittee::setCommitteeTypeFull(const QString &committee_type_full) {
    m_committee_type_full = committee_type_full;
    m_committee_type_full_isSet = true;
}

bool OAITotalsCommittee::is_committee_type_full_Set() const{
    return m_committee_type_full_isSet;
}

bool OAITotalsCommittee::is_committee_type_full_Valid() const{
    return m_committee_type_full_isValid;
}

qint32 OAITotalsCommittee::getCycle() const {
    return m_cycle;
}
void OAITotalsCommittee::setCycle(const qint32 &cycle) {
    m_cycle = cycle;
    m_cycle_isSet = true;
}

bool OAITotalsCommittee::is_cycle_Set() const{
    return m_cycle_isSet;
}

bool OAITotalsCommittee::is_cycle_Valid() const{
    return m_cycle_isValid;
}

QList<qint32> OAITotalsCommittee::getCycles() const {
    return m_cycles;
}
void OAITotalsCommittee::setCycles(const QList<qint32> &cycles) {
    m_cycles = cycles;
    m_cycles_isSet = true;
}

bool OAITotalsCommittee::is_cycles_Set() const{
    return m_cycles_isSet;
}

bool OAITotalsCommittee::is_cycles_Valid() const{
    return m_cycles_isValid;
}

QList<qint32> OAITotalsCommittee::getCyclesHasActivity() const {
    return m_cycles_has_activity;
}
void OAITotalsCommittee::setCyclesHasActivity(const QList<qint32> &cycles_has_activity) {
    m_cycles_has_activity = cycles_has_activity;
    m_cycles_has_activity_isSet = true;
}

bool OAITotalsCommittee::is_cycles_has_activity_Set() const{
    return m_cycles_has_activity_isSet;
}

bool OAITotalsCommittee::is_cycles_has_activity_Valid() const{
    return m_cycles_has_activity_isValid;
}

QList<qint32> OAITotalsCommittee::getCyclesHasFinancial() const {
    return m_cycles_has_financial;
}
void OAITotalsCommittee::setCyclesHasFinancial(const QList<qint32> &cycles_has_financial) {
    m_cycles_has_financial = cycles_has_financial;
    m_cycles_has_financial_isSet = true;
}

bool OAITotalsCommittee::is_cycles_has_financial_Set() const{
    return m_cycles_has_financial_isSet;
}

bool OAITotalsCommittee::is_cycles_has_financial_Valid() const{
    return m_cycles_has_financial_isValid;
}

double OAITotalsCommittee::getDebtsOwedByCommittee() const {
    return m_debts_owed_by_committee;
}
void OAITotalsCommittee::setDebtsOwedByCommittee(const double &debts_owed_by_committee) {
    m_debts_owed_by_committee = debts_owed_by_committee;
    m_debts_owed_by_committee_isSet = true;
}

bool OAITotalsCommittee::is_debts_owed_by_committee_Set() const{
    return m_debts_owed_by_committee_isSet;
}

bool OAITotalsCommittee::is_debts_owed_by_committee_Valid() const{
    return m_debts_owed_by_committee_isValid;
}

QString OAITotalsCommittee::getDesignation() const {
    return m_designation;
}
void OAITotalsCommittee::setDesignation(const QString &designation) {
    m_designation = designation;
    m_designation_isSet = true;
}

bool OAITotalsCommittee::is_designation_Set() const{
    return m_designation_isSet;
}

bool OAITotalsCommittee::is_designation_Valid() const{
    return m_designation_isValid;
}

QString OAITotalsCommittee::getDesignationFull() const {
    return m_designation_full;
}
void OAITotalsCommittee::setDesignationFull(const QString &designation_full) {
    m_designation_full = designation_full;
    m_designation_full_isSet = true;
}

bool OAITotalsCommittee::is_designation_full_Set() const{
    return m_designation_full_isSet;
}

bool OAITotalsCommittee::is_designation_full_Valid() const{
    return m_designation_full_isValid;
}

double OAITotalsCommittee::getDisbursements() const {
    return m_disbursements;
}
void OAITotalsCommittee::setDisbursements(const double &disbursements) {
    m_disbursements = disbursements;
    m_disbursements_isSet = true;
}

bool OAITotalsCommittee::is_disbursements_Set() const{
    return m_disbursements_isSet;
}

bool OAITotalsCommittee::is_disbursements_Valid() const{
    return m_disbursements_isValid;
}

QString OAITotalsCommittee::getFilingFrequency() const {
    return m_filing_frequency;
}
void OAITotalsCommittee::setFilingFrequency(const QString &filing_frequency) {
    m_filing_frequency = filing_frequency;
    m_filing_frequency_isSet = true;
}

bool OAITotalsCommittee::is_filing_frequency_Set() const{
    return m_filing_frequency_isSet;
}

bool OAITotalsCommittee::is_filing_frequency_Valid() const{
    return m_filing_frequency_isValid;
}

QDate OAITotalsCommittee::getFirstF1Date() const {
    return m_first_f1_date;
}
void OAITotalsCommittee::setFirstF1Date(const QDate &first_f1_date) {
    m_first_f1_date = first_f1_date;
    m_first_f1_date_isSet = true;
}

bool OAITotalsCommittee::is_first_f1_date_Set() const{
    return m_first_f1_date_isSet;
}

bool OAITotalsCommittee::is_first_f1_date_Valid() const{
    return m_first_f1_date_isValid;
}

QDate OAITotalsCommittee::getFirstFileDate() const {
    return m_first_file_date;
}
void OAITotalsCommittee::setFirstFileDate(const QDate &first_file_date) {
    m_first_file_date = first_file_date;
    m_first_file_date_isSet = true;
}

bool OAITotalsCommittee::is_first_file_date_Set() const{
    return m_first_file_date_isSet;
}

bool OAITotalsCommittee::is_first_file_date_Valid() const{
    return m_first_file_date_isValid;
}

double OAITotalsCommittee::getIndependentExpenditures() const {
    return m_independent_expenditures;
}
void OAITotalsCommittee::setIndependentExpenditures(const double &independent_expenditures) {
    m_independent_expenditures = independent_expenditures;
    m_independent_expenditures_isSet = true;
}

bool OAITotalsCommittee::is_independent_expenditures_Set() const{
    return m_independent_expenditures_isSet;
}

bool OAITotalsCommittee::is_independent_expenditures_Valid() const{
    return m_independent_expenditures_isValid;
}

bool OAITotalsCommittee::isIsActive() const {
    return m_is_active;
}
void OAITotalsCommittee::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAITotalsCommittee::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAITotalsCommittee::is_is_active_Valid() const{
    return m_is_active_isValid;
}

QList<OAICommitteeDetail_jfc_committee_inner> OAITotalsCommittee::getJfcCommittee() const {
    return m_jfc_committee;
}
void OAITotalsCommittee::setJfcCommittee(const QList<OAICommitteeDetail_jfc_committee_inner> &jfc_committee) {
    m_jfc_committee = jfc_committee;
    m_jfc_committee_isSet = true;
}

bool OAITotalsCommittee::is_jfc_committee_Set() const{
    return m_jfc_committee_isSet;
}

bool OAITotalsCommittee::is_jfc_committee_Valid() const{
    return m_jfc_committee_isValid;
}

qint32 OAITotalsCommittee::getLastCycleHasActivity() const {
    return m_last_cycle_has_activity;
}
void OAITotalsCommittee::setLastCycleHasActivity(const qint32 &last_cycle_has_activity) {
    m_last_cycle_has_activity = last_cycle_has_activity;
    m_last_cycle_has_activity_isSet = true;
}

bool OAITotalsCommittee::is_last_cycle_has_activity_Set() const{
    return m_last_cycle_has_activity_isSet;
}

bool OAITotalsCommittee::is_last_cycle_has_activity_Valid() const{
    return m_last_cycle_has_activity_isValid;
}

qint32 OAITotalsCommittee::getLastCycleHasFinancial() const {
    return m_last_cycle_has_financial;
}
void OAITotalsCommittee::setLastCycleHasFinancial(const qint32 &last_cycle_has_financial) {
    m_last_cycle_has_financial = last_cycle_has_financial;
    m_last_cycle_has_financial_isSet = true;
}

bool OAITotalsCommittee::is_last_cycle_has_financial_Set() const{
    return m_last_cycle_has_financial_isSet;
}

bool OAITotalsCommittee::is_last_cycle_has_financial_Valid() const{
    return m_last_cycle_has_financial_isValid;
}

QDate OAITotalsCommittee::getLastF1Date() const {
    return m_last_f1_date;
}
void OAITotalsCommittee::setLastF1Date(const QDate &last_f1_date) {
    m_last_f1_date = last_f1_date;
    m_last_f1_date_isSet = true;
}

bool OAITotalsCommittee::is_last_f1_date_Set() const{
    return m_last_f1_date_isSet;
}

bool OAITotalsCommittee::is_last_f1_date_Valid() const{
    return m_last_f1_date_isValid;
}

QDate OAITotalsCommittee::getLastFileDate() const {
    return m_last_file_date;
}
void OAITotalsCommittee::setLastFileDate(const QDate &last_file_date) {
    m_last_file_date = last_file_date;
    m_last_file_date_isSet = true;
}

bool OAITotalsCommittee::is_last_file_date_Set() const{
    return m_last_file_date_isSet;
}

bool OAITotalsCommittee::is_last_file_date_Valid() const{
    return m_last_file_date_isValid;
}

QString OAITotalsCommittee::getName() const {
    return m_name;
}
void OAITotalsCommittee::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITotalsCommittee::is_name_Set() const{
    return m_name_isSet;
}

bool OAITotalsCommittee::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITotalsCommittee::getOrganizationType() const {
    return m_organization_type;
}
void OAITotalsCommittee::setOrganizationType(const QString &organization_type) {
    m_organization_type = organization_type;
    m_organization_type_isSet = true;
}

bool OAITotalsCommittee::is_organization_type_Set() const{
    return m_organization_type_isSet;
}

bool OAITotalsCommittee::is_organization_type_Valid() const{
    return m_organization_type_isValid;
}

QString OAITotalsCommittee::getOrganizationTypeFull() const {
    return m_organization_type_full;
}
void OAITotalsCommittee::setOrganizationTypeFull(const QString &organization_type_full) {
    m_organization_type_full = organization_type_full;
    m_organization_type_full_isSet = true;
}

bool OAITotalsCommittee::is_organization_type_full_Set() const{
    return m_organization_type_full_isSet;
}

bool OAITotalsCommittee::is_organization_type_full_Valid() const{
    return m_organization_type_full_isValid;
}

QString OAITotalsCommittee::getParty() const {
    return m_party;
}
void OAITotalsCommittee::setParty(const QString &party) {
    m_party = party;
    m_party_isSet = true;
}

bool OAITotalsCommittee::is_party_Set() const{
    return m_party_isSet;
}

bool OAITotalsCommittee::is_party_Valid() const{
    return m_party_isValid;
}

QString OAITotalsCommittee::getPartyFull() const {
    return m_party_full;
}
void OAITotalsCommittee::setPartyFull(const QString &party_full) {
    m_party_full = party_full;
    m_party_full_isSet = true;
}

bool OAITotalsCommittee::is_party_full_Set() const{
    return m_party_full_isSet;
}

bool OAITotalsCommittee::is_party_full_Valid() const{
    return m_party_full_isValid;
}

double OAITotalsCommittee::getReceipts() const {
    return m_receipts;
}
void OAITotalsCommittee::setReceipts(const double &receipts) {
    m_receipts = receipts;
    m_receipts_isSet = true;
}

bool OAITotalsCommittee::is_receipts_Set() const{
    return m_receipts_isSet;
}

bool OAITotalsCommittee::is_receipts_Valid() const{
    return m_receipts_isValid;
}

QString OAITotalsCommittee::getState() const {
    return m_state;
}
void OAITotalsCommittee::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAITotalsCommittee::is_state_Set() const{
    return m_state_isSet;
}

bool OAITotalsCommittee::is_state_Valid() const{
    return m_state_isValid;
}

QString OAITotalsCommittee::getStateFull() const {
    return m_state_full;
}
void OAITotalsCommittee::setStateFull(const QString &state_full) {
    m_state_full = state_full;
    m_state_full_isSet = true;
}

bool OAITotalsCommittee::is_state_full_Set() const{
    return m_state_full_isSet;
}

bool OAITotalsCommittee::is_state_full_Valid() const{
    return m_state_full_isValid;
}

QString OAITotalsCommittee::getStreet1() const {
    return m_street_1;
}
void OAITotalsCommittee::setStreet1(const QString &street_1) {
    m_street_1 = street_1;
    m_street_1_isSet = true;
}

bool OAITotalsCommittee::is_street_1_Set() const{
    return m_street_1_isSet;
}

bool OAITotalsCommittee::is_street_1_Valid() const{
    return m_street_1_isValid;
}

QString OAITotalsCommittee::getStreet2() const {
    return m_street_2;
}
void OAITotalsCommittee::setStreet2(const QString &street_2) {
    m_street_2 = street_2;
    m_street_2_isSet = true;
}

bool OAITotalsCommittee::is_street_2_Set() const{
    return m_street_2_isSet;
}

bool OAITotalsCommittee::is_street_2_Valid() const{
    return m_street_2_isValid;
}

QString OAITotalsCommittee::getTreasurerName() const {
    return m_treasurer_name;
}
void OAITotalsCommittee::setTreasurerName(const QString &treasurer_name) {
    m_treasurer_name = treasurer_name;
    m_treasurer_name_isSet = true;
}

bool OAITotalsCommittee::is_treasurer_name_Set() const{
    return m_treasurer_name_isSet;
}

bool OAITotalsCommittee::is_treasurer_name_Valid() const{
    return m_treasurer_name_isValid;
}

QString OAITotalsCommittee::getZip() const {
    return m_zip;
}
void OAITotalsCommittee::setZip(const QString &zip) {
    m_zip = zip;
    m_zip_isSet = true;
}

bool OAITotalsCommittee::is_zip_Set() const{
    return m_zip_isSet;
}

bool OAITotalsCommittee::is_zip_Valid() const{
    return m_zip_isValid;
}

bool OAITotalsCommittee::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_affiliated_committee_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_on_hand_end_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_type_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cycle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cycles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cycles_has_activity.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cycles_has_financial.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_debts_owed_by_committee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_designation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_designation_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disbursements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filing_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_f1_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_file_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_independent_expenditures_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jfc_committee.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_cycle_has_activity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_cycle_has_financial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_f1_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_file_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_type_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_treasurer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITotalsCommittee::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_committee_id_isValid && m_cycle_isValid && true;
}

} // namespace OpenAPI
