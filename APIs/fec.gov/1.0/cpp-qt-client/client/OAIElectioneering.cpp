/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIElectioneering.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIElectioneering::OAIElectioneering(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIElectioneering::OAIElectioneering() {
    this->initializeModel();
}

OAIElectioneering::~OAIElectioneering() {}

void OAIElectioneering::initializeModel() {

    m_amendment_indicator_isSet = false;
    m_amendment_indicator_isValid = false;

    m_beginning_image_number_isSet = false;
    m_beginning_image_number_isValid = false;

    m_calculated_candidate_share_isSet = false;
    m_calculated_candidate_share_isValid = false;

    m_candidate_district_isSet = false;
    m_candidate_district_isValid = false;

    m_candidate_id_isSet = false;
    m_candidate_id_isValid = false;

    m_candidate_name_isSet = false;
    m_candidate_name_isValid = false;

    m_candidate_office_isSet = false;
    m_candidate_office_isValid = false;

    m_candidate_state_isSet = false;
    m_candidate_state_isValid = false;

    m_committee_id_isSet = false;
    m_committee_id_isValid = false;

    m_committee_name_isSet = false;
    m_committee_name_isValid = false;

    m_communication_date_isSet = false;
    m_communication_date_isValid = false;

    m_disbursement_amount_isSet = false;
    m_disbursement_amount_isValid = false;

    m_disbursement_date_isSet = false;
    m_disbursement_date_isValid = false;

    m_election_type_isSet = false;
    m_election_type_isValid = false;

    m_file_number_isSet = false;
    m_file_number_isValid = false;

    m_link_id_isSet = false;
    m_link_id_isValid = false;

    m_number_of_candidates_isSet = false;
    m_number_of_candidates_isValid = false;

    m_payee_name_isSet = false;
    m_payee_name_isValid = false;

    m_payee_state_isSet = false;
    m_payee_state_isValid = false;

    m_pdf_url_isSet = false;
    m_pdf_url_isValid = false;

    m_public_distribution_date_isSet = false;
    m_public_distribution_date_isValid = false;

    m_purpose_description_isSet = false;
    m_purpose_description_isValid = false;

    m_receipt_date_isSet = false;
    m_receipt_date_isValid = false;

    m_report_year_isSet = false;
    m_report_year_isValid = false;

    m_sb_image_num_isSet = false;
    m_sb_image_num_isValid = false;

    m_sb_link_id_isSet = false;
    m_sb_link_id_isValid = false;

    m_sub_id_isSet = false;
    m_sub_id_isValid = false;
}

void OAIElectioneering::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIElectioneering::fromJsonObject(QJsonObject json) {

    m_amendment_indicator_isValid = ::OpenAPI::fromJsonValue(m_amendment_indicator, json[QString("amendment_indicator")]);
    m_amendment_indicator_isSet = !json[QString("amendment_indicator")].isNull() && m_amendment_indicator_isValid;

    m_beginning_image_number_isValid = ::OpenAPI::fromJsonValue(m_beginning_image_number, json[QString("beginning_image_number")]);
    m_beginning_image_number_isSet = !json[QString("beginning_image_number")].isNull() && m_beginning_image_number_isValid;

    m_calculated_candidate_share_isValid = ::OpenAPI::fromJsonValue(m_calculated_candidate_share, json[QString("calculated_candidate_share")]);
    m_calculated_candidate_share_isSet = !json[QString("calculated_candidate_share")].isNull() && m_calculated_candidate_share_isValid;

    m_candidate_district_isValid = ::OpenAPI::fromJsonValue(m_candidate_district, json[QString("candidate_district")]);
    m_candidate_district_isSet = !json[QString("candidate_district")].isNull() && m_candidate_district_isValid;

    m_candidate_id_isValid = ::OpenAPI::fromJsonValue(m_candidate_id, json[QString("candidate_id")]);
    m_candidate_id_isSet = !json[QString("candidate_id")].isNull() && m_candidate_id_isValid;

    m_candidate_name_isValid = ::OpenAPI::fromJsonValue(m_candidate_name, json[QString("candidate_name")]);
    m_candidate_name_isSet = !json[QString("candidate_name")].isNull() && m_candidate_name_isValid;

    m_candidate_office_isValid = ::OpenAPI::fromJsonValue(m_candidate_office, json[QString("candidate_office")]);
    m_candidate_office_isSet = !json[QString("candidate_office")].isNull() && m_candidate_office_isValid;

    m_candidate_state_isValid = ::OpenAPI::fromJsonValue(m_candidate_state, json[QString("candidate_state")]);
    m_candidate_state_isSet = !json[QString("candidate_state")].isNull() && m_candidate_state_isValid;

    m_committee_id_isValid = ::OpenAPI::fromJsonValue(m_committee_id, json[QString("committee_id")]);
    m_committee_id_isSet = !json[QString("committee_id")].isNull() && m_committee_id_isValid;

    m_committee_name_isValid = ::OpenAPI::fromJsonValue(m_committee_name, json[QString("committee_name")]);
    m_committee_name_isSet = !json[QString("committee_name")].isNull() && m_committee_name_isValid;

    m_communication_date_isValid = ::OpenAPI::fromJsonValue(m_communication_date, json[QString("communication_date")]);
    m_communication_date_isSet = !json[QString("communication_date")].isNull() && m_communication_date_isValid;

    m_disbursement_amount_isValid = ::OpenAPI::fromJsonValue(m_disbursement_amount, json[QString("disbursement_amount")]);
    m_disbursement_amount_isSet = !json[QString("disbursement_amount")].isNull() && m_disbursement_amount_isValid;

    m_disbursement_date_isValid = ::OpenAPI::fromJsonValue(m_disbursement_date, json[QString("disbursement_date")]);
    m_disbursement_date_isSet = !json[QString("disbursement_date")].isNull() && m_disbursement_date_isValid;

    m_election_type_isValid = ::OpenAPI::fromJsonValue(m_election_type, json[QString("election_type")]);
    m_election_type_isSet = !json[QString("election_type")].isNull() && m_election_type_isValid;

    m_file_number_isValid = ::OpenAPI::fromJsonValue(m_file_number, json[QString("file_number")]);
    m_file_number_isSet = !json[QString("file_number")].isNull() && m_file_number_isValid;

    m_link_id_isValid = ::OpenAPI::fromJsonValue(m_link_id, json[QString("link_id")]);
    m_link_id_isSet = !json[QString("link_id")].isNull() && m_link_id_isValid;

    m_number_of_candidates_isValid = ::OpenAPI::fromJsonValue(m_number_of_candidates, json[QString("number_of_candidates")]);
    m_number_of_candidates_isSet = !json[QString("number_of_candidates")].isNull() && m_number_of_candidates_isValid;

    m_payee_name_isValid = ::OpenAPI::fromJsonValue(m_payee_name, json[QString("payee_name")]);
    m_payee_name_isSet = !json[QString("payee_name")].isNull() && m_payee_name_isValid;

    m_payee_state_isValid = ::OpenAPI::fromJsonValue(m_payee_state, json[QString("payee_state")]);
    m_payee_state_isSet = !json[QString("payee_state")].isNull() && m_payee_state_isValid;

    m_pdf_url_isValid = ::OpenAPI::fromJsonValue(m_pdf_url, json[QString("pdf_url")]);
    m_pdf_url_isSet = !json[QString("pdf_url")].isNull() && m_pdf_url_isValid;

    m_public_distribution_date_isValid = ::OpenAPI::fromJsonValue(m_public_distribution_date, json[QString("public_distribution_date")]);
    m_public_distribution_date_isSet = !json[QString("public_distribution_date")].isNull() && m_public_distribution_date_isValid;

    m_purpose_description_isValid = ::OpenAPI::fromJsonValue(m_purpose_description, json[QString("purpose_description")]);
    m_purpose_description_isSet = !json[QString("purpose_description")].isNull() && m_purpose_description_isValid;

    m_receipt_date_isValid = ::OpenAPI::fromJsonValue(m_receipt_date, json[QString("receipt_date")]);
    m_receipt_date_isSet = !json[QString("receipt_date")].isNull() && m_receipt_date_isValid;

    m_report_year_isValid = ::OpenAPI::fromJsonValue(m_report_year, json[QString("report_year")]);
    m_report_year_isSet = !json[QString("report_year")].isNull() && m_report_year_isValid;

    m_sb_image_num_isValid = ::OpenAPI::fromJsonValue(m_sb_image_num, json[QString("sb_image_num")]);
    m_sb_image_num_isSet = !json[QString("sb_image_num")].isNull() && m_sb_image_num_isValid;

    m_sb_link_id_isValid = ::OpenAPI::fromJsonValue(m_sb_link_id, json[QString("sb_link_id")]);
    m_sb_link_id_isSet = !json[QString("sb_link_id")].isNull() && m_sb_link_id_isValid;

    m_sub_id_isValid = ::OpenAPI::fromJsonValue(m_sub_id, json[QString("sub_id")]);
    m_sub_id_isSet = !json[QString("sub_id")].isNull() && m_sub_id_isValid;
}

QString OAIElectioneering::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIElectioneering::asJsonObject() const {
    QJsonObject obj;
    if (m_amendment_indicator_isSet) {
        obj.insert(QString("amendment_indicator"), ::OpenAPI::toJsonValue(m_amendment_indicator));
    }
    if (m_beginning_image_number_isSet) {
        obj.insert(QString("beginning_image_number"), ::OpenAPI::toJsonValue(m_beginning_image_number));
    }
    if (m_calculated_candidate_share_isSet) {
        obj.insert(QString("calculated_candidate_share"), ::OpenAPI::toJsonValue(m_calculated_candidate_share));
    }
    if (m_candidate_district_isSet) {
        obj.insert(QString("candidate_district"), ::OpenAPI::toJsonValue(m_candidate_district));
    }
    if (m_candidate_id_isSet) {
        obj.insert(QString("candidate_id"), ::OpenAPI::toJsonValue(m_candidate_id));
    }
    if (m_candidate_name_isSet) {
        obj.insert(QString("candidate_name"), ::OpenAPI::toJsonValue(m_candidate_name));
    }
    if (m_candidate_office_isSet) {
        obj.insert(QString("candidate_office"), ::OpenAPI::toJsonValue(m_candidate_office));
    }
    if (m_candidate_state_isSet) {
        obj.insert(QString("candidate_state"), ::OpenAPI::toJsonValue(m_candidate_state));
    }
    if (m_committee_id_isSet) {
        obj.insert(QString("committee_id"), ::OpenAPI::toJsonValue(m_committee_id));
    }
    if (m_committee_name_isSet) {
        obj.insert(QString("committee_name"), ::OpenAPI::toJsonValue(m_committee_name));
    }
    if (m_communication_date_isSet) {
        obj.insert(QString("communication_date"), ::OpenAPI::toJsonValue(m_communication_date));
    }
    if (m_disbursement_amount_isSet) {
        obj.insert(QString("disbursement_amount"), ::OpenAPI::toJsonValue(m_disbursement_amount));
    }
    if (m_disbursement_date_isSet) {
        obj.insert(QString("disbursement_date"), ::OpenAPI::toJsonValue(m_disbursement_date));
    }
    if (m_election_type_isSet) {
        obj.insert(QString("election_type"), ::OpenAPI::toJsonValue(m_election_type));
    }
    if (m_file_number_isSet) {
        obj.insert(QString("file_number"), ::OpenAPI::toJsonValue(m_file_number));
    }
    if (m_link_id_isSet) {
        obj.insert(QString("link_id"), ::OpenAPI::toJsonValue(m_link_id));
    }
    if (m_number_of_candidates_isSet) {
        obj.insert(QString("number_of_candidates"), ::OpenAPI::toJsonValue(m_number_of_candidates));
    }
    if (m_payee_name_isSet) {
        obj.insert(QString("payee_name"), ::OpenAPI::toJsonValue(m_payee_name));
    }
    if (m_payee_state_isSet) {
        obj.insert(QString("payee_state"), ::OpenAPI::toJsonValue(m_payee_state));
    }
    if (m_pdf_url_isSet) {
        obj.insert(QString("pdf_url"), ::OpenAPI::toJsonValue(m_pdf_url));
    }
    if (m_public_distribution_date_isSet) {
        obj.insert(QString("public_distribution_date"), ::OpenAPI::toJsonValue(m_public_distribution_date));
    }
    if (m_purpose_description_isSet) {
        obj.insert(QString("purpose_description"), ::OpenAPI::toJsonValue(m_purpose_description));
    }
    if (m_receipt_date_isSet) {
        obj.insert(QString("receipt_date"), ::OpenAPI::toJsonValue(m_receipt_date));
    }
    if (m_report_year_isSet) {
        obj.insert(QString("report_year"), ::OpenAPI::toJsonValue(m_report_year));
    }
    if (m_sb_image_num_isSet) {
        obj.insert(QString("sb_image_num"), ::OpenAPI::toJsonValue(m_sb_image_num));
    }
    if (m_sb_link_id_isSet) {
        obj.insert(QString("sb_link_id"), ::OpenAPI::toJsonValue(m_sb_link_id));
    }
    if (m_sub_id_isSet) {
        obj.insert(QString("sub_id"), ::OpenAPI::toJsonValue(m_sub_id));
    }
    return obj;
}

QString OAIElectioneering::getAmendmentIndicator() const {
    return m_amendment_indicator;
}
void OAIElectioneering::setAmendmentIndicator(const QString &amendment_indicator) {
    m_amendment_indicator = amendment_indicator;
    m_amendment_indicator_isSet = true;
}

bool OAIElectioneering::is_amendment_indicator_Set() const{
    return m_amendment_indicator_isSet;
}

bool OAIElectioneering::is_amendment_indicator_Valid() const{
    return m_amendment_indicator_isValid;
}

QString OAIElectioneering::getBeginningImageNumber() const {
    return m_beginning_image_number;
}
void OAIElectioneering::setBeginningImageNumber(const QString &beginning_image_number) {
    m_beginning_image_number = beginning_image_number;
    m_beginning_image_number_isSet = true;
}

bool OAIElectioneering::is_beginning_image_number_Set() const{
    return m_beginning_image_number_isSet;
}

bool OAIElectioneering::is_beginning_image_number_Valid() const{
    return m_beginning_image_number_isValid;
}

double OAIElectioneering::getCalculatedCandidateShare() const {
    return m_calculated_candidate_share;
}
void OAIElectioneering::setCalculatedCandidateShare(const double &calculated_candidate_share) {
    m_calculated_candidate_share = calculated_candidate_share;
    m_calculated_candidate_share_isSet = true;
}

bool OAIElectioneering::is_calculated_candidate_share_Set() const{
    return m_calculated_candidate_share_isSet;
}

bool OAIElectioneering::is_calculated_candidate_share_Valid() const{
    return m_calculated_candidate_share_isValid;
}

QString OAIElectioneering::getCandidateDistrict() const {
    return m_candidate_district;
}
void OAIElectioneering::setCandidateDistrict(const QString &candidate_district) {
    m_candidate_district = candidate_district;
    m_candidate_district_isSet = true;
}

bool OAIElectioneering::is_candidate_district_Set() const{
    return m_candidate_district_isSet;
}

bool OAIElectioneering::is_candidate_district_Valid() const{
    return m_candidate_district_isValid;
}

QString OAIElectioneering::getCandidateId() const {
    return m_candidate_id;
}
void OAIElectioneering::setCandidateId(const QString &candidate_id) {
    m_candidate_id = candidate_id;
    m_candidate_id_isSet = true;
}

bool OAIElectioneering::is_candidate_id_Set() const{
    return m_candidate_id_isSet;
}

bool OAIElectioneering::is_candidate_id_Valid() const{
    return m_candidate_id_isValid;
}

QString OAIElectioneering::getCandidateName() const {
    return m_candidate_name;
}
void OAIElectioneering::setCandidateName(const QString &candidate_name) {
    m_candidate_name = candidate_name;
    m_candidate_name_isSet = true;
}

bool OAIElectioneering::is_candidate_name_Set() const{
    return m_candidate_name_isSet;
}

bool OAIElectioneering::is_candidate_name_Valid() const{
    return m_candidate_name_isValid;
}

QString OAIElectioneering::getCandidateOffice() const {
    return m_candidate_office;
}
void OAIElectioneering::setCandidateOffice(const QString &candidate_office) {
    m_candidate_office = candidate_office;
    m_candidate_office_isSet = true;
}

bool OAIElectioneering::is_candidate_office_Set() const{
    return m_candidate_office_isSet;
}

bool OAIElectioneering::is_candidate_office_Valid() const{
    return m_candidate_office_isValid;
}

QString OAIElectioneering::getCandidateState() const {
    return m_candidate_state;
}
void OAIElectioneering::setCandidateState(const QString &candidate_state) {
    m_candidate_state = candidate_state;
    m_candidate_state_isSet = true;
}

bool OAIElectioneering::is_candidate_state_Set() const{
    return m_candidate_state_isSet;
}

bool OAIElectioneering::is_candidate_state_Valid() const{
    return m_candidate_state_isValid;
}

QString OAIElectioneering::getCommitteeId() const {
    return m_committee_id;
}
void OAIElectioneering::setCommitteeId(const QString &committee_id) {
    m_committee_id = committee_id;
    m_committee_id_isSet = true;
}

bool OAIElectioneering::is_committee_id_Set() const{
    return m_committee_id_isSet;
}

bool OAIElectioneering::is_committee_id_Valid() const{
    return m_committee_id_isValid;
}

QString OAIElectioneering::getCommitteeName() const {
    return m_committee_name;
}
void OAIElectioneering::setCommitteeName(const QString &committee_name) {
    m_committee_name = committee_name;
    m_committee_name_isSet = true;
}

bool OAIElectioneering::is_committee_name_Set() const{
    return m_committee_name_isSet;
}

bool OAIElectioneering::is_committee_name_Valid() const{
    return m_committee_name_isValid;
}

QDate OAIElectioneering::getCommunicationDate() const {
    return m_communication_date;
}
void OAIElectioneering::setCommunicationDate(const QDate &communication_date) {
    m_communication_date = communication_date;
    m_communication_date_isSet = true;
}

bool OAIElectioneering::is_communication_date_Set() const{
    return m_communication_date_isSet;
}

bool OAIElectioneering::is_communication_date_Valid() const{
    return m_communication_date_isValid;
}

double OAIElectioneering::getDisbursementAmount() const {
    return m_disbursement_amount;
}
void OAIElectioneering::setDisbursementAmount(const double &disbursement_amount) {
    m_disbursement_amount = disbursement_amount;
    m_disbursement_amount_isSet = true;
}

bool OAIElectioneering::is_disbursement_amount_Set() const{
    return m_disbursement_amount_isSet;
}

bool OAIElectioneering::is_disbursement_amount_Valid() const{
    return m_disbursement_amount_isValid;
}

QDate OAIElectioneering::getDisbursementDate() const {
    return m_disbursement_date;
}
void OAIElectioneering::setDisbursementDate(const QDate &disbursement_date) {
    m_disbursement_date = disbursement_date;
    m_disbursement_date_isSet = true;
}

bool OAIElectioneering::is_disbursement_date_Set() const{
    return m_disbursement_date_isSet;
}

bool OAIElectioneering::is_disbursement_date_Valid() const{
    return m_disbursement_date_isValid;
}

QString OAIElectioneering::getElectionType() const {
    return m_election_type;
}
void OAIElectioneering::setElectionType(const QString &election_type) {
    m_election_type = election_type;
    m_election_type_isSet = true;
}

bool OAIElectioneering::is_election_type_Set() const{
    return m_election_type_isSet;
}

bool OAIElectioneering::is_election_type_Valid() const{
    return m_election_type_isValid;
}

qint32 OAIElectioneering::getFileNumber() const {
    return m_file_number;
}
void OAIElectioneering::setFileNumber(const qint32 &file_number) {
    m_file_number = file_number;
    m_file_number_isSet = true;
}

bool OAIElectioneering::is_file_number_Set() const{
    return m_file_number_isSet;
}

bool OAIElectioneering::is_file_number_Valid() const{
    return m_file_number_isValid;
}

qint32 OAIElectioneering::getLinkId() const {
    return m_link_id;
}
void OAIElectioneering::setLinkId(const qint32 &link_id) {
    m_link_id = link_id;
    m_link_id_isSet = true;
}

bool OAIElectioneering::is_link_id_Set() const{
    return m_link_id_isSet;
}

bool OAIElectioneering::is_link_id_Valid() const{
    return m_link_id_isValid;
}

double OAIElectioneering::getNumberOfCandidates() const {
    return m_number_of_candidates;
}
void OAIElectioneering::setNumberOfCandidates(const double &number_of_candidates) {
    m_number_of_candidates = number_of_candidates;
    m_number_of_candidates_isSet = true;
}

bool OAIElectioneering::is_number_of_candidates_Set() const{
    return m_number_of_candidates_isSet;
}

bool OAIElectioneering::is_number_of_candidates_Valid() const{
    return m_number_of_candidates_isValid;
}

QString OAIElectioneering::getPayeeName() const {
    return m_payee_name;
}
void OAIElectioneering::setPayeeName(const QString &payee_name) {
    m_payee_name = payee_name;
    m_payee_name_isSet = true;
}

bool OAIElectioneering::is_payee_name_Set() const{
    return m_payee_name_isSet;
}

bool OAIElectioneering::is_payee_name_Valid() const{
    return m_payee_name_isValid;
}

QString OAIElectioneering::getPayeeState() const {
    return m_payee_state;
}
void OAIElectioneering::setPayeeState(const QString &payee_state) {
    m_payee_state = payee_state;
    m_payee_state_isSet = true;
}

bool OAIElectioneering::is_payee_state_Set() const{
    return m_payee_state_isSet;
}

bool OAIElectioneering::is_payee_state_Valid() const{
    return m_payee_state_isValid;
}

QString OAIElectioneering::getPdfUrl() const {
    return m_pdf_url;
}
void OAIElectioneering::setPdfUrl(const QString &pdf_url) {
    m_pdf_url = pdf_url;
    m_pdf_url_isSet = true;
}

bool OAIElectioneering::is_pdf_url_Set() const{
    return m_pdf_url_isSet;
}

bool OAIElectioneering::is_pdf_url_Valid() const{
    return m_pdf_url_isValid;
}

QDate OAIElectioneering::getPublicDistributionDate() const {
    return m_public_distribution_date;
}
void OAIElectioneering::setPublicDistributionDate(const QDate &public_distribution_date) {
    m_public_distribution_date = public_distribution_date;
    m_public_distribution_date_isSet = true;
}

bool OAIElectioneering::is_public_distribution_date_Set() const{
    return m_public_distribution_date_isSet;
}

bool OAIElectioneering::is_public_distribution_date_Valid() const{
    return m_public_distribution_date_isValid;
}

QString OAIElectioneering::getPurposeDescription() const {
    return m_purpose_description;
}
void OAIElectioneering::setPurposeDescription(const QString &purpose_description) {
    m_purpose_description = purpose_description;
    m_purpose_description_isSet = true;
}

bool OAIElectioneering::is_purpose_description_Set() const{
    return m_purpose_description_isSet;
}

bool OAIElectioneering::is_purpose_description_Valid() const{
    return m_purpose_description_isValid;
}

QDate OAIElectioneering::getReceiptDate() const {
    return m_receipt_date;
}
void OAIElectioneering::setReceiptDate(const QDate &receipt_date) {
    m_receipt_date = receipt_date;
    m_receipt_date_isSet = true;
}

bool OAIElectioneering::is_receipt_date_Set() const{
    return m_receipt_date_isSet;
}

bool OAIElectioneering::is_receipt_date_Valid() const{
    return m_receipt_date_isValid;
}

qint32 OAIElectioneering::getReportYear() const {
    return m_report_year;
}
void OAIElectioneering::setReportYear(const qint32 &report_year) {
    m_report_year = report_year;
    m_report_year_isSet = true;
}

bool OAIElectioneering::is_report_year_Set() const{
    return m_report_year_isSet;
}

bool OAIElectioneering::is_report_year_Valid() const{
    return m_report_year_isValid;
}

QString OAIElectioneering::getSbImageNum() const {
    return m_sb_image_num;
}
void OAIElectioneering::setSbImageNum(const QString &sb_image_num) {
    m_sb_image_num = sb_image_num;
    m_sb_image_num_isSet = true;
}

bool OAIElectioneering::is_sb_image_num_Set() const{
    return m_sb_image_num_isSet;
}

bool OAIElectioneering::is_sb_image_num_Valid() const{
    return m_sb_image_num_isValid;
}

QString OAIElectioneering::getSbLinkId() const {
    return m_sb_link_id;
}
void OAIElectioneering::setSbLinkId(const QString &sb_link_id) {
    m_sb_link_id = sb_link_id;
    m_sb_link_id_isSet = true;
}

bool OAIElectioneering::is_sb_link_id_Set() const{
    return m_sb_link_id_isSet;
}

bool OAIElectioneering::is_sb_link_id_Valid() const{
    return m_sb_link_id_isValid;
}

qint32 OAIElectioneering::getSubId() const {
    return m_sub_id;
}
void OAIElectioneering::setSubId(const qint32 &sub_id) {
    m_sub_id = sub_id;
    m_sub_id_isSet = true;
}

bool OAIElectioneering::is_sub_id_Set() const{
    return m_sub_id_isSet;
}

bool OAIElectioneering::is_sub_id_Valid() const{
    return m_sub_id_isValid;
}

bool OAIElectioneering::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amendment_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_beginning_image_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calculated_candidate_share_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_district_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_office_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_communication_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disbursement_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disbursement_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_candidates_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pdf_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_distribution_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purpose_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sb_image_num_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sb_link_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIElectioneering::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
