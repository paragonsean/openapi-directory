/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICandidateCommitteeTotalsPresidential.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICandidateCommitteeTotalsPresidential::OAICandidateCommitteeTotalsPresidential(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICandidateCommitteeTotalsPresidential::OAICandidateCommitteeTotalsPresidential() {
    this->initializeModel();
}

OAICandidateCommitteeTotalsPresidential::~OAICandidateCommitteeTotalsPresidential() {}

void OAICandidateCommitteeTotalsPresidential::initializeModel() {

    m_candidate_contribution_isSet = false;
    m_candidate_contribution_isValid = false;

    m_candidate_election_year_isSet = false;
    m_candidate_election_year_isValid = false;

    m_candidate_id_isSet = false;
    m_candidate_id_isValid = false;

    m_contribution_refunds_isSet = false;
    m_contribution_refunds_isValid = false;

    m_contributions_isSet = false;
    m_contributions_isValid = false;

    m_coverage_end_date_isSet = false;
    m_coverage_end_date_isValid = false;

    m_coverage_start_date_isSet = false;
    m_coverage_start_date_isValid = false;

    m_cycle_isSet = false;
    m_cycle_isValid = false;

    m_disbursements_isSet = false;
    m_disbursements_isValid = false;

    m_election_full_isSet = false;
    m_election_full_isValid = false;

    m_exempt_legal_accounting_disbursement_isSet = false;
    m_exempt_legal_accounting_disbursement_isValid = false;

    m_federal_funds_isSet = false;
    m_federal_funds_isValid = false;

    m_fundraising_disbursements_isSet = false;
    m_fundraising_disbursements_isValid = false;

    m_individual_contributions_isSet = false;
    m_individual_contributions_isValid = false;

    m_individual_itemized_contributions_isSet = false;
    m_individual_itemized_contributions_isValid = false;

    m_individual_unitemized_contributions_isSet = false;
    m_individual_unitemized_contributions_isValid = false;

    m_last_beginning_image_number_isSet = false;
    m_last_beginning_image_number_isValid = false;

    m_last_cash_on_hand_end_period_isSet = false;
    m_last_cash_on_hand_end_period_isValid = false;

    m_last_debts_owed_by_committee_isSet = false;
    m_last_debts_owed_by_committee_isValid = false;

    m_last_debts_owed_to_committee_isSet = false;
    m_last_debts_owed_to_committee_isValid = false;

    m_last_report_type_full_isSet = false;
    m_last_report_type_full_isValid = false;

    m_last_report_year_isSet = false;
    m_last_report_year_isValid = false;

    m_loan_repayments_made_isSet = false;
    m_loan_repayments_made_isValid = false;

    m_loans_received_isSet = false;
    m_loans_received_isValid = false;

    m_loans_received_from_candidate_isSet = false;
    m_loans_received_from_candidate_isValid = false;

    m_net_contributions_isSet = false;
    m_net_contributions_isValid = false;

    m_net_operating_expenditures_isSet = false;
    m_net_operating_expenditures_isValid = false;

    m_offsets_to_fundraising_expenditures_isSet = false;
    m_offsets_to_fundraising_expenditures_isValid = false;

    m_offsets_to_legal_accounting_isSet = false;
    m_offsets_to_legal_accounting_isValid = false;

    m_offsets_to_operating_expenditures_isSet = false;
    m_offsets_to_operating_expenditures_isValid = false;

    m_operating_expenditures_isSet = false;
    m_operating_expenditures_isValid = false;

    m_other_disbursements_isSet = false;
    m_other_disbursements_isValid = false;

    m_other_loans_received_isSet = false;
    m_other_loans_received_isValid = false;

    m_other_political_committee_contributions_isSet = false;
    m_other_political_committee_contributions_isValid = false;

    m_other_receipts_isSet = false;
    m_other_receipts_isValid = false;

    m_political_party_committee_contributions_isSet = false;
    m_political_party_committee_contributions_isValid = false;

    m_receipts_isSet = false;
    m_receipts_isValid = false;

    m_refunded_individual_contributions_isSet = false;
    m_refunded_individual_contributions_isValid = false;

    m_refunded_other_political_committee_contributions_isSet = false;
    m_refunded_other_political_committee_contributions_isValid = false;

    m_refunded_political_party_committee_contributions_isSet = false;
    m_refunded_political_party_committee_contributions_isValid = false;

    m_repayments_loans_made_by_candidate_isSet = false;
    m_repayments_loans_made_by_candidate_isValid = false;

    m_repayments_other_loans_isSet = false;
    m_repayments_other_loans_isValid = false;

    m_total_offsets_to_operating_expenditures_isSet = false;
    m_total_offsets_to_operating_expenditures_isValid = false;

    m_transaction_coverage_date_isSet = false;
    m_transaction_coverage_date_isValid = false;

    m_transfers_from_affiliated_committee_isSet = false;
    m_transfers_from_affiliated_committee_isValid = false;

    m_transfers_to_other_authorized_committee_isSet = false;
    m_transfers_to_other_authorized_committee_isValid = false;
}

void OAICandidateCommitteeTotalsPresidential::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICandidateCommitteeTotalsPresidential::fromJsonObject(QJsonObject json) {

    m_candidate_contribution_isValid = ::OpenAPI::fromJsonValue(m_candidate_contribution, json[QString("candidate_contribution")]);
    m_candidate_contribution_isSet = !json[QString("candidate_contribution")].isNull() && m_candidate_contribution_isValid;

    m_candidate_election_year_isValid = ::OpenAPI::fromJsonValue(m_candidate_election_year, json[QString("candidate_election_year")]);
    m_candidate_election_year_isSet = !json[QString("candidate_election_year")].isNull() && m_candidate_election_year_isValid;

    m_candidate_id_isValid = ::OpenAPI::fromJsonValue(m_candidate_id, json[QString("candidate_id")]);
    m_candidate_id_isSet = !json[QString("candidate_id")].isNull() && m_candidate_id_isValid;

    m_contribution_refunds_isValid = ::OpenAPI::fromJsonValue(m_contribution_refunds, json[QString("contribution_refunds")]);
    m_contribution_refunds_isSet = !json[QString("contribution_refunds")].isNull() && m_contribution_refunds_isValid;

    m_contributions_isValid = ::OpenAPI::fromJsonValue(m_contributions, json[QString("contributions")]);
    m_contributions_isSet = !json[QString("contributions")].isNull() && m_contributions_isValid;

    m_coverage_end_date_isValid = ::OpenAPI::fromJsonValue(m_coverage_end_date, json[QString("coverage_end_date")]);
    m_coverage_end_date_isSet = !json[QString("coverage_end_date")].isNull() && m_coverage_end_date_isValid;

    m_coverage_start_date_isValid = ::OpenAPI::fromJsonValue(m_coverage_start_date, json[QString("coverage_start_date")]);
    m_coverage_start_date_isSet = !json[QString("coverage_start_date")].isNull() && m_coverage_start_date_isValid;

    m_cycle_isValid = ::OpenAPI::fromJsonValue(m_cycle, json[QString("cycle")]);
    m_cycle_isSet = !json[QString("cycle")].isNull() && m_cycle_isValid;

    m_disbursements_isValid = ::OpenAPI::fromJsonValue(m_disbursements, json[QString("disbursements")]);
    m_disbursements_isSet = !json[QString("disbursements")].isNull() && m_disbursements_isValid;

    m_election_full_isValid = ::OpenAPI::fromJsonValue(m_election_full, json[QString("election_full")]);
    m_election_full_isSet = !json[QString("election_full")].isNull() && m_election_full_isValid;

    m_exempt_legal_accounting_disbursement_isValid = ::OpenAPI::fromJsonValue(m_exempt_legal_accounting_disbursement, json[QString("exempt_legal_accounting_disbursement")]);
    m_exempt_legal_accounting_disbursement_isSet = !json[QString("exempt_legal_accounting_disbursement")].isNull() && m_exempt_legal_accounting_disbursement_isValid;

    m_federal_funds_isValid = ::OpenAPI::fromJsonValue(m_federal_funds, json[QString("federal_funds")]);
    m_federal_funds_isSet = !json[QString("federal_funds")].isNull() && m_federal_funds_isValid;

    m_fundraising_disbursements_isValid = ::OpenAPI::fromJsonValue(m_fundraising_disbursements, json[QString("fundraising_disbursements")]);
    m_fundraising_disbursements_isSet = !json[QString("fundraising_disbursements")].isNull() && m_fundraising_disbursements_isValid;

    m_individual_contributions_isValid = ::OpenAPI::fromJsonValue(m_individual_contributions, json[QString("individual_contributions")]);
    m_individual_contributions_isSet = !json[QString("individual_contributions")].isNull() && m_individual_contributions_isValid;

    m_individual_itemized_contributions_isValid = ::OpenAPI::fromJsonValue(m_individual_itemized_contributions, json[QString("individual_itemized_contributions")]);
    m_individual_itemized_contributions_isSet = !json[QString("individual_itemized_contributions")].isNull() && m_individual_itemized_contributions_isValid;

    m_individual_unitemized_contributions_isValid = ::OpenAPI::fromJsonValue(m_individual_unitemized_contributions, json[QString("individual_unitemized_contributions")]);
    m_individual_unitemized_contributions_isSet = !json[QString("individual_unitemized_contributions")].isNull() && m_individual_unitemized_contributions_isValid;

    m_last_beginning_image_number_isValid = ::OpenAPI::fromJsonValue(m_last_beginning_image_number, json[QString("last_beginning_image_number")]);
    m_last_beginning_image_number_isSet = !json[QString("last_beginning_image_number")].isNull() && m_last_beginning_image_number_isValid;

    m_last_cash_on_hand_end_period_isValid = ::OpenAPI::fromJsonValue(m_last_cash_on_hand_end_period, json[QString("last_cash_on_hand_end_period")]);
    m_last_cash_on_hand_end_period_isSet = !json[QString("last_cash_on_hand_end_period")].isNull() && m_last_cash_on_hand_end_period_isValid;

    m_last_debts_owed_by_committee_isValid = ::OpenAPI::fromJsonValue(m_last_debts_owed_by_committee, json[QString("last_debts_owed_by_committee")]);
    m_last_debts_owed_by_committee_isSet = !json[QString("last_debts_owed_by_committee")].isNull() && m_last_debts_owed_by_committee_isValid;

    m_last_debts_owed_to_committee_isValid = ::OpenAPI::fromJsonValue(m_last_debts_owed_to_committee, json[QString("last_debts_owed_to_committee")]);
    m_last_debts_owed_to_committee_isSet = !json[QString("last_debts_owed_to_committee")].isNull() && m_last_debts_owed_to_committee_isValid;

    m_last_report_type_full_isValid = ::OpenAPI::fromJsonValue(m_last_report_type_full, json[QString("last_report_type_full")]);
    m_last_report_type_full_isSet = !json[QString("last_report_type_full")].isNull() && m_last_report_type_full_isValid;

    m_last_report_year_isValid = ::OpenAPI::fromJsonValue(m_last_report_year, json[QString("last_report_year")]);
    m_last_report_year_isSet = !json[QString("last_report_year")].isNull() && m_last_report_year_isValid;

    m_loan_repayments_made_isValid = ::OpenAPI::fromJsonValue(m_loan_repayments_made, json[QString("loan_repayments_made")]);
    m_loan_repayments_made_isSet = !json[QString("loan_repayments_made")].isNull() && m_loan_repayments_made_isValid;

    m_loans_received_isValid = ::OpenAPI::fromJsonValue(m_loans_received, json[QString("loans_received")]);
    m_loans_received_isSet = !json[QString("loans_received")].isNull() && m_loans_received_isValid;

    m_loans_received_from_candidate_isValid = ::OpenAPI::fromJsonValue(m_loans_received_from_candidate, json[QString("loans_received_from_candidate")]);
    m_loans_received_from_candidate_isSet = !json[QString("loans_received_from_candidate")].isNull() && m_loans_received_from_candidate_isValid;

    m_net_contributions_isValid = ::OpenAPI::fromJsonValue(m_net_contributions, json[QString("net_contributions")]);
    m_net_contributions_isSet = !json[QString("net_contributions")].isNull() && m_net_contributions_isValid;

    m_net_operating_expenditures_isValid = ::OpenAPI::fromJsonValue(m_net_operating_expenditures, json[QString("net_operating_expenditures")]);
    m_net_operating_expenditures_isSet = !json[QString("net_operating_expenditures")].isNull() && m_net_operating_expenditures_isValid;

    m_offsets_to_fundraising_expenditures_isValid = ::OpenAPI::fromJsonValue(m_offsets_to_fundraising_expenditures, json[QString("offsets_to_fundraising_expenditures")]);
    m_offsets_to_fundraising_expenditures_isSet = !json[QString("offsets_to_fundraising_expenditures")].isNull() && m_offsets_to_fundraising_expenditures_isValid;

    m_offsets_to_legal_accounting_isValid = ::OpenAPI::fromJsonValue(m_offsets_to_legal_accounting, json[QString("offsets_to_legal_accounting")]);
    m_offsets_to_legal_accounting_isSet = !json[QString("offsets_to_legal_accounting")].isNull() && m_offsets_to_legal_accounting_isValid;

    m_offsets_to_operating_expenditures_isValid = ::OpenAPI::fromJsonValue(m_offsets_to_operating_expenditures, json[QString("offsets_to_operating_expenditures")]);
    m_offsets_to_operating_expenditures_isSet = !json[QString("offsets_to_operating_expenditures")].isNull() && m_offsets_to_operating_expenditures_isValid;

    m_operating_expenditures_isValid = ::OpenAPI::fromJsonValue(m_operating_expenditures, json[QString("operating_expenditures")]);
    m_operating_expenditures_isSet = !json[QString("operating_expenditures")].isNull() && m_operating_expenditures_isValid;

    m_other_disbursements_isValid = ::OpenAPI::fromJsonValue(m_other_disbursements, json[QString("other_disbursements")]);
    m_other_disbursements_isSet = !json[QString("other_disbursements")].isNull() && m_other_disbursements_isValid;

    m_other_loans_received_isValid = ::OpenAPI::fromJsonValue(m_other_loans_received, json[QString("other_loans_received")]);
    m_other_loans_received_isSet = !json[QString("other_loans_received")].isNull() && m_other_loans_received_isValid;

    m_other_political_committee_contributions_isValid = ::OpenAPI::fromJsonValue(m_other_political_committee_contributions, json[QString("other_political_committee_contributions")]);
    m_other_political_committee_contributions_isSet = !json[QString("other_political_committee_contributions")].isNull() && m_other_political_committee_contributions_isValid;

    m_other_receipts_isValid = ::OpenAPI::fromJsonValue(m_other_receipts, json[QString("other_receipts")]);
    m_other_receipts_isSet = !json[QString("other_receipts")].isNull() && m_other_receipts_isValid;

    m_political_party_committee_contributions_isValid = ::OpenAPI::fromJsonValue(m_political_party_committee_contributions, json[QString("political_party_committee_contributions")]);
    m_political_party_committee_contributions_isSet = !json[QString("political_party_committee_contributions")].isNull() && m_political_party_committee_contributions_isValid;

    m_receipts_isValid = ::OpenAPI::fromJsonValue(m_receipts, json[QString("receipts")]);
    m_receipts_isSet = !json[QString("receipts")].isNull() && m_receipts_isValid;

    m_refunded_individual_contributions_isValid = ::OpenAPI::fromJsonValue(m_refunded_individual_contributions, json[QString("refunded_individual_contributions")]);
    m_refunded_individual_contributions_isSet = !json[QString("refunded_individual_contributions")].isNull() && m_refunded_individual_contributions_isValid;

    m_refunded_other_political_committee_contributions_isValid = ::OpenAPI::fromJsonValue(m_refunded_other_political_committee_contributions, json[QString("refunded_other_political_committee_contributions")]);
    m_refunded_other_political_committee_contributions_isSet = !json[QString("refunded_other_political_committee_contributions")].isNull() && m_refunded_other_political_committee_contributions_isValid;

    m_refunded_political_party_committee_contributions_isValid = ::OpenAPI::fromJsonValue(m_refunded_political_party_committee_contributions, json[QString("refunded_political_party_committee_contributions")]);
    m_refunded_political_party_committee_contributions_isSet = !json[QString("refunded_political_party_committee_contributions")].isNull() && m_refunded_political_party_committee_contributions_isValid;

    m_repayments_loans_made_by_candidate_isValid = ::OpenAPI::fromJsonValue(m_repayments_loans_made_by_candidate, json[QString("repayments_loans_made_by_candidate")]);
    m_repayments_loans_made_by_candidate_isSet = !json[QString("repayments_loans_made_by_candidate")].isNull() && m_repayments_loans_made_by_candidate_isValid;

    m_repayments_other_loans_isValid = ::OpenAPI::fromJsonValue(m_repayments_other_loans, json[QString("repayments_other_loans")]);
    m_repayments_other_loans_isSet = !json[QString("repayments_other_loans")].isNull() && m_repayments_other_loans_isValid;

    m_total_offsets_to_operating_expenditures_isValid = ::OpenAPI::fromJsonValue(m_total_offsets_to_operating_expenditures, json[QString("total_offsets_to_operating_expenditures")]);
    m_total_offsets_to_operating_expenditures_isSet = !json[QString("total_offsets_to_operating_expenditures")].isNull() && m_total_offsets_to_operating_expenditures_isValid;

    m_transaction_coverage_date_isValid = ::OpenAPI::fromJsonValue(m_transaction_coverage_date, json[QString("transaction_coverage_date")]);
    m_transaction_coverage_date_isSet = !json[QString("transaction_coverage_date")].isNull() && m_transaction_coverage_date_isValid;

    m_transfers_from_affiliated_committee_isValid = ::OpenAPI::fromJsonValue(m_transfers_from_affiliated_committee, json[QString("transfers_from_affiliated_committee")]);
    m_transfers_from_affiliated_committee_isSet = !json[QString("transfers_from_affiliated_committee")].isNull() && m_transfers_from_affiliated_committee_isValid;

    m_transfers_to_other_authorized_committee_isValid = ::OpenAPI::fromJsonValue(m_transfers_to_other_authorized_committee, json[QString("transfers_to_other_authorized_committee")]);
    m_transfers_to_other_authorized_committee_isSet = !json[QString("transfers_to_other_authorized_committee")].isNull() && m_transfers_to_other_authorized_committee_isValid;
}

QString OAICandidateCommitteeTotalsPresidential::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICandidateCommitteeTotalsPresidential::asJsonObject() const {
    QJsonObject obj;
    if (m_candidate_contribution_isSet) {
        obj.insert(QString("candidate_contribution"), ::OpenAPI::toJsonValue(m_candidate_contribution));
    }
    if (m_candidate_election_year_isSet) {
        obj.insert(QString("candidate_election_year"), ::OpenAPI::toJsonValue(m_candidate_election_year));
    }
    if (m_candidate_id_isSet) {
        obj.insert(QString("candidate_id"), ::OpenAPI::toJsonValue(m_candidate_id));
    }
    if (m_contribution_refunds_isSet) {
        obj.insert(QString("contribution_refunds"), ::OpenAPI::toJsonValue(m_contribution_refunds));
    }
    if (m_contributions_isSet) {
        obj.insert(QString("contributions"), ::OpenAPI::toJsonValue(m_contributions));
    }
    if (m_coverage_end_date_isSet) {
        obj.insert(QString("coverage_end_date"), ::OpenAPI::toJsonValue(m_coverage_end_date));
    }
    if (m_coverage_start_date_isSet) {
        obj.insert(QString("coverage_start_date"), ::OpenAPI::toJsonValue(m_coverage_start_date));
    }
    if (m_cycle_isSet) {
        obj.insert(QString("cycle"), ::OpenAPI::toJsonValue(m_cycle));
    }
    if (m_disbursements_isSet) {
        obj.insert(QString("disbursements"), ::OpenAPI::toJsonValue(m_disbursements));
    }
    if (m_election_full_isSet) {
        obj.insert(QString("election_full"), ::OpenAPI::toJsonValue(m_election_full));
    }
    if (m_exempt_legal_accounting_disbursement_isSet) {
        obj.insert(QString("exempt_legal_accounting_disbursement"), ::OpenAPI::toJsonValue(m_exempt_legal_accounting_disbursement));
    }
    if (m_federal_funds_isSet) {
        obj.insert(QString("federal_funds"), ::OpenAPI::toJsonValue(m_federal_funds));
    }
    if (m_fundraising_disbursements_isSet) {
        obj.insert(QString("fundraising_disbursements"), ::OpenAPI::toJsonValue(m_fundraising_disbursements));
    }
    if (m_individual_contributions_isSet) {
        obj.insert(QString("individual_contributions"), ::OpenAPI::toJsonValue(m_individual_contributions));
    }
    if (m_individual_itemized_contributions_isSet) {
        obj.insert(QString("individual_itemized_contributions"), ::OpenAPI::toJsonValue(m_individual_itemized_contributions));
    }
    if (m_individual_unitemized_contributions_isSet) {
        obj.insert(QString("individual_unitemized_contributions"), ::OpenAPI::toJsonValue(m_individual_unitemized_contributions));
    }
    if (m_last_beginning_image_number_isSet) {
        obj.insert(QString("last_beginning_image_number"), ::OpenAPI::toJsonValue(m_last_beginning_image_number));
    }
    if (m_last_cash_on_hand_end_period_isSet) {
        obj.insert(QString("last_cash_on_hand_end_period"), ::OpenAPI::toJsonValue(m_last_cash_on_hand_end_period));
    }
    if (m_last_debts_owed_by_committee_isSet) {
        obj.insert(QString("last_debts_owed_by_committee"), ::OpenAPI::toJsonValue(m_last_debts_owed_by_committee));
    }
    if (m_last_debts_owed_to_committee_isSet) {
        obj.insert(QString("last_debts_owed_to_committee"), ::OpenAPI::toJsonValue(m_last_debts_owed_to_committee));
    }
    if (m_last_report_type_full_isSet) {
        obj.insert(QString("last_report_type_full"), ::OpenAPI::toJsonValue(m_last_report_type_full));
    }
    if (m_last_report_year_isSet) {
        obj.insert(QString("last_report_year"), ::OpenAPI::toJsonValue(m_last_report_year));
    }
    if (m_loan_repayments_made_isSet) {
        obj.insert(QString("loan_repayments_made"), ::OpenAPI::toJsonValue(m_loan_repayments_made));
    }
    if (m_loans_received_isSet) {
        obj.insert(QString("loans_received"), ::OpenAPI::toJsonValue(m_loans_received));
    }
    if (m_loans_received_from_candidate_isSet) {
        obj.insert(QString("loans_received_from_candidate"), ::OpenAPI::toJsonValue(m_loans_received_from_candidate));
    }
    if (m_net_contributions_isSet) {
        obj.insert(QString("net_contributions"), ::OpenAPI::toJsonValue(m_net_contributions));
    }
    if (m_net_operating_expenditures_isSet) {
        obj.insert(QString("net_operating_expenditures"), ::OpenAPI::toJsonValue(m_net_operating_expenditures));
    }
    if (m_offsets_to_fundraising_expenditures_isSet) {
        obj.insert(QString("offsets_to_fundraising_expenditures"), ::OpenAPI::toJsonValue(m_offsets_to_fundraising_expenditures));
    }
    if (m_offsets_to_legal_accounting_isSet) {
        obj.insert(QString("offsets_to_legal_accounting"), ::OpenAPI::toJsonValue(m_offsets_to_legal_accounting));
    }
    if (m_offsets_to_operating_expenditures_isSet) {
        obj.insert(QString("offsets_to_operating_expenditures"), ::OpenAPI::toJsonValue(m_offsets_to_operating_expenditures));
    }
    if (m_operating_expenditures_isSet) {
        obj.insert(QString("operating_expenditures"), ::OpenAPI::toJsonValue(m_operating_expenditures));
    }
    if (m_other_disbursements_isSet) {
        obj.insert(QString("other_disbursements"), ::OpenAPI::toJsonValue(m_other_disbursements));
    }
    if (m_other_loans_received_isSet) {
        obj.insert(QString("other_loans_received"), ::OpenAPI::toJsonValue(m_other_loans_received));
    }
    if (m_other_political_committee_contributions_isSet) {
        obj.insert(QString("other_political_committee_contributions"), ::OpenAPI::toJsonValue(m_other_political_committee_contributions));
    }
    if (m_other_receipts_isSet) {
        obj.insert(QString("other_receipts"), ::OpenAPI::toJsonValue(m_other_receipts));
    }
    if (m_political_party_committee_contributions_isSet) {
        obj.insert(QString("political_party_committee_contributions"), ::OpenAPI::toJsonValue(m_political_party_committee_contributions));
    }
    if (m_receipts_isSet) {
        obj.insert(QString("receipts"), ::OpenAPI::toJsonValue(m_receipts));
    }
    if (m_refunded_individual_contributions_isSet) {
        obj.insert(QString("refunded_individual_contributions"), ::OpenAPI::toJsonValue(m_refunded_individual_contributions));
    }
    if (m_refunded_other_political_committee_contributions_isSet) {
        obj.insert(QString("refunded_other_political_committee_contributions"), ::OpenAPI::toJsonValue(m_refunded_other_political_committee_contributions));
    }
    if (m_refunded_political_party_committee_contributions_isSet) {
        obj.insert(QString("refunded_political_party_committee_contributions"), ::OpenAPI::toJsonValue(m_refunded_political_party_committee_contributions));
    }
    if (m_repayments_loans_made_by_candidate_isSet) {
        obj.insert(QString("repayments_loans_made_by_candidate"), ::OpenAPI::toJsonValue(m_repayments_loans_made_by_candidate));
    }
    if (m_repayments_other_loans_isSet) {
        obj.insert(QString("repayments_other_loans"), ::OpenAPI::toJsonValue(m_repayments_other_loans));
    }
    if (m_total_offsets_to_operating_expenditures_isSet) {
        obj.insert(QString("total_offsets_to_operating_expenditures"), ::OpenAPI::toJsonValue(m_total_offsets_to_operating_expenditures));
    }
    if (m_transaction_coverage_date_isSet) {
        obj.insert(QString("transaction_coverage_date"), ::OpenAPI::toJsonValue(m_transaction_coverage_date));
    }
    if (m_transfers_from_affiliated_committee_isSet) {
        obj.insert(QString("transfers_from_affiliated_committee"), ::OpenAPI::toJsonValue(m_transfers_from_affiliated_committee));
    }
    if (m_transfers_to_other_authorized_committee_isSet) {
        obj.insert(QString("transfers_to_other_authorized_committee"), ::OpenAPI::toJsonValue(m_transfers_to_other_authorized_committee));
    }
    return obj;
}

double OAICandidateCommitteeTotalsPresidential::getCandidateContribution() const {
    return m_candidate_contribution;
}
void OAICandidateCommitteeTotalsPresidential::setCandidateContribution(const double &candidate_contribution) {
    m_candidate_contribution = candidate_contribution;
    m_candidate_contribution_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_candidate_contribution_Set() const{
    return m_candidate_contribution_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_candidate_contribution_Valid() const{
    return m_candidate_contribution_isValid;
}

qint32 OAICandidateCommitteeTotalsPresidential::getCandidateElectionYear() const {
    return m_candidate_election_year;
}
void OAICandidateCommitteeTotalsPresidential::setCandidateElectionYear(const qint32 &candidate_election_year) {
    m_candidate_election_year = candidate_election_year;
    m_candidate_election_year_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_candidate_election_year_Set() const{
    return m_candidate_election_year_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_candidate_election_year_Valid() const{
    return m_candidate_election_year_isValid;
}

QString OAICandidateCommitteeTotalsPresidential::getCandidateId() const {
    return m_candidate_id;
}
void OAICandidateCommitteeTotalsPresidential::setCandidateId(const QString &candidate_id) {
    m_candidate_id = candidate_id;
    m_candidate_id_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_candidate_id_Set() const{
    return m_candidate_id_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_candidate_id_Valid() const{
    return m_candidate_id_isValid;
}

double OAICandidateCommitteeTotalsPresidential::getContributionRefunds() const {
    return m_contribution_refunds;
}
void OAICandidateCommitteeTotalsPresidential::setContributionRefunds(const double &contribution_refunds) {
    m_contribution_refunds = contribution_refunds;
    m_contribution_refunds_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_contribution_refunds_Set() const{
    return m_contribution_refunds_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_contribution_refunds_Valid() const{
    return m_contribution_refunds_isValid;
}

double OAICandidateCommitteeTotalsPresidential::getContributions() const {
    return m_contributions;
}
void OAICandidateCommitteeTotalsPresidential::setContributions(const double &contributions) {
    m_contributions = contributions;
    m_contributions_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_contributions_Set() const{
    return m_contributions_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_contributions_Valid() const{
    return m_contributions_isValid;
}

QDateTime OAICandidateCommitteeTotalsPresidential::getCoverageEndDate() const {
    return m_coverage_end_date;
}
void OAICandidateCommitteeTotalsPresidential::setCoverageEndDate(const QDateTime &coverage_end_date) {
    m_coverage_end_date = coverage_end_date;
    m_coverage_end_date_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_coverage_end_date_Set() const{
    return m_coverage_end_date_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_coverage_end_date_Valid() const{
    return m_coverage_end_date_isValid;
}

QDateTime OAICandidateCommitteeTotalsPresidential::getCoverageStartDate() const {
    return m_coverage_start_date;
}
void OAICandidateCommitteeTotalsPresidential::setCoverageStartDate(const QDateTime &coverage_start_date) {
    m_coverage_start_date = coverage_start_date;
    m_coverage_start_date_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_coverage_start_date_Set() const{
    return m_coverage_start_date_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_coverage_start_date_Valid() const{
    return m_coverage_start_date_isValid;
}

qint32 OAICandidateCommitteeTotalsPresidential::getCycle() const {
    return m_cycle;
}
void OAICandidateCommitteeTotalsPresidential::setCycle(const qint32 &cycle) {
    m_cycle = cycle;
    m_cycle_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_cycle_Set() const{
    return m_cycle_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_cycle_Valid() const{
    return m_cycle_isValid;
}

double OAICandidateCommitteeTotalsPresidential::getDisbursements() const {
    return m_disbursements;
}
void OAICandidateCommitteeTotalsPresidential::setDisbursements(const double &disbursements) {
    m_disbursements = disbursements;
    m_disbursements_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_disbursements_Set() const{
    return m_disbursements_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_disbursements_Valid() const{
    return m_disbursements_isValid;
}

bool OAICandidateCommitteeTotalsPresidential::isElectionFull() const {
    return m_election_full;
}
void OAICandidateCommitteeTotalsPresidential::setElectionFull(const bool &election_full) {
    m_election_full = election_full;
    m_election_full_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_election_full_Set() const{
    return m_election_full_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_election_full_Valid() const{
    return m_election_full_isValid;
}

double OAICandidateCommitteeTotalsPresidential::getExemptLegalAccountingDisbursement() const {
    return m_exempt_legal_accounting_disbursement;
}
void OAICandidateCommitteeTotalsPresidential::setExemptLegalAccountingDisbursement(const double &exempt_legal_accounting_disbursement) {
    m_exempt_legal_accounting_disbursement = exempt_legal_accounting_disbursement;
    m_exempt_legal_accounting_disbursement_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_exempt_legal_accounting_disbursement_Set() const{
    return m_exempt_legal_accounting_disbursement_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_exempt_legal_accounting_disbursement_Valid() const{
    return m_exempt_legal_accounting_disbursement_isValid;
}

double OAICandidateCommitteeTotalsPresidential::getFederalFunds() const {
    return m_federal_funds;
}
void OAICandidateCommitteeTotalsPresidential::setFederalFunds(const double &federal_funds) {
    m_federal_funds = federal_funds;
    m_federal_funds_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_federal_funds_Set() const{
    return m_federal_funds_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_federal_funds_Valid() const{
    return m_federal_funds_isValid;
}

double OAICandidateCommitteeTotalsPresidential::getFundraisingDisbursements() const {
    return m_fundraising_disbursements;
}
void OAICandidateCommitteeTotalsPresidential::setFundraisingDisbursements(const double &fundraising_disbursements) {
    m_fundraising_disbursements = fundraising_disbursements;
    m_fundraising_disbursements_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_fundraising_disbursements_Set() const{
    return m_fundraising_disbursements_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_fundraising_disbursements_Valid() const{
    return m_fundraising_disbursements_isValid;
}

double OAICandidateCommitteeTotalsPresidential::getIndividualContributions() const {
    return m_individual_contributions;
}
void OAICandidateCommitteeTotalsPresidential::setIndividualContributions(const double &individual_contributions) {
    m_individual_contributions = individual_contributions;
    m_individual_contributions_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_individual_contributions_Set() const{
    return m_individual_contributions_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_individual_contributions_Valid() const{
    return m_individual_contributions_isValid;
}

double OAICandidateCommitteeTotalsPresidential::getIndividualItemizedContributions() const {
    return m_individual_itemized_contributions;
}
void OAICandidateCommitteeTotalsPresidential::setIndividualItemizedContributions(const double &individual_itemized_contributions) {
    m_individual_itemized_contributions = individual_itemized_contributions;
    m_individual_itemized_contributions_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_individual_itemized_contributions_Set() const{
    return m_individual_itemized_contributions_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_individual_itemized_contributions_Valid() const{
    return m_individual_itemized_contributions_isValid;
}

double OAICandidateCommitteeTotalsPresidential::getIndividualUnitemizedContributions() const {
    return m_individual_unitemized_contributions;
}
void OAICandidateCommitteeTotalsPresidential::setIndividualUnitemizedContributions(const double &individual_unitemized_contributions) {
    m_individual_unitemized_contributions = individual_unitemized_contributions;
    m_individual_unitemized_contributions_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_individual_unitemized_contributions_Set() const{
    return m_individual_unitemized_contributions_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_individual_unitemized_contributions_Valid() const{
    return m_individual_unitemized_contributions_isValid;
}

QString OAICandidateCommitteeTotalsPresidential::getLastBeginningImageNumber() const {
    return m_last_beginning_image_number;
}
void OAICandidateCommitteeTotalsPresidential::setLastBeginningImageNumber(const QString &last_beginning_image_number) {
    m_last_beginning_image_number = last_beginning_image_number;
    m_last_beginning_image_number_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_last_beginning_image_number_Set() const{
    return m_last_beginning_image_number_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_last_beginning_image_number_Valid() const{
    return m_last_beginning_image_number_isValid;
}

double OAICandidateCommitteeTotalsPresidential::getLastCashOnHandEndPeriod() const {
    return m_last_cash_on_hand_end_period;
}
void OAICandidateCommitteeTotalsPresidential::setLastCashOnHandEndPeriod(const double &last_cash_on_hand_end_period) {
    m_last_cash_on_hand_end_period = last_cash_on_hand_end_period;
    m_last_cash_on_hand_end_period_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_last_cash_on_hand_end_period_Set() const{
    return m_last_cash_on_hand_end_period_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_last_cash_on_hand_end_period_Valid() const{
    return m_last_cash_on_hand_end_period_isValid;
}

double OAICandidateCommitteeTotalsPresidential::getLastDebtsOwedByCommittee() const {
    return m_last_debts_owed_by_committee;
}
void OAICandidateCommitteeTotalsPresidential::setLastDebtsOwedByCommittee(const double &last_debts_owed_by_committee) {
    m_last_debts_owed_by_committee = last_debts_owed_by_committee;
    m_last_debts_owed_by_committee_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_last_debts_owed_by_committee_Set() const{
    return m_last_debts_owed_by_committee_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_last_debts_owed_by_committee_Valid() const{
    return m_last_debts_owed_by_committee_isValid;
}

double OAICandidateCommitteeTotalsPresidential::getLastDebtsOwedToCommittee() const {
    return m_last_debts_owed_to_committee;
}
void OAICandidateCommitteeTotalsPresidential::setLastDebtsOwedToCommittee(const double &last_debts_owed_to_committee) {
    m_last_debts_owed_to_committee = last_debts_owed_to_committee;
    m_last_debts_owed_to_committee_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_last_debts_owed_to_committee_Set() const{
    return m_last_debts_owed_to_committee_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_last_debts_owed_to_committee_Valid() const{
    return m_last_debts_owed_to_committee_isValid;
}

QString OAICandidateCommitteeTotalsPresidential::getLastReportTypeFull() const {
    return m_last_report_type_full;
}
void OAICandidateCommitteeTotalsPresidential::setLastReportTypeFull(const QString &last_report_type_full) {
    m_last_report_type_full = last_report_type_full;
    m_last_report_type_full_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_last_report_type_full_Set() const{
    return m_last_report_type_full_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_last_report_type_full_Valid() const{
    return m_last_report_type_full_isValid;
}

qint32 OAICandidateCommitteeTotalsPresidential::getLastReportYear() const {
    return m_last_report_year;
}
void OAICandidateCommitteeTotalsPresidential::setLastReportYear(const qint32 &last_report_year) {
    m_last_report_year = last_report_year;
    m_last_report_year_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_last_report_year_Set() const{
    return m_last_report_year_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_last_report_year_Valid() const{
    return m_last_report_year_isValid;
}

double OAICandidateCommitteeTotalsPresidential::getLoanRepaymentsMade() const {
    return m_loan_repayments_made;
}
void OAICandidateCommitteeTotalsPresidential::setLoanRepaymentsMade(const double &loan_repayments_made) {
    m_loan_repayments_made = loan_repayments_made;
    m_loan_repayments_made_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_loan_repayments_made_Set() const{
    return m_loan_repayments_made_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_loan_repayments_made_Valid() const{
    return m_loan_repayments_made_isValid;
}

double OAICandidateCommitteeTotalsPresidential::getLoansReceived() const {
    return m_loans_received;
}
void OAICandidateCommitteeTotalsPresidential::setLoansReceived(const double &loans_received) {
    m_loans_received = loans_received;
    m_loans_received_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_loans_received_Set() const{
    return m_loans_received_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_loans_received_Valid() const{
    return m_loans_received_isValid;
}

double OAICandidateCommitteeTotalsPresidential::getLoansReceivedFromCandidate() const {
    return m_loans_received_from_candidate;
}
void OAICandidateCommitteeTotalsPresidential::setLoansReceivedFromCandidate(const double &loans_received_from_candidate) {
    m_loans_received_from_candidate = loans_received_from_candidate;
    m_loans_received_from_candidate_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_loans_received_from_candidate_Set() const{
    return m_loans_received_from_candidate_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_loans_received_from_candidate_Valid() const{
    return m_loans_received_from_candidate_isValid;
}

double OAICandidateCommitteeTotalsPresidential::getNetContributions() const {
    return m_net_contributions;
}
void OAICandidateCommitteeTotalsPresidential::setNetContributions(const double &net_contributions) {
    m_net_contributions = net_contributions;
    m_net_contributions_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_net_contributions_Set() const{
    return m_net_contributions_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_net_contributions_Valid() const{
    return m_net_contributions_isValid;
}

double OAICandidateCommitteeTotalsPresidential::getNetOperatingExpenditures() const {
    return m_net_operating_expenditures;
}
void OAICandidateCommitteeTotalsPresidential::setNetOperatingExpenditures(const double &net_operating_expenditures) {
    m_net_operating_expenditures = net_operating_expenditures;
    m_net_operating_expenditures_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_net_operating_expenditures_Set() const{
    return m_net_operating_expenditures_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_net_operating_expenditures_Valid() const{
    return m_net_operating_expenditures_isValid;
}

double OAICandidateCommitteeTotalsPresidential::getOffsetsToFundraisingExpenditures() const {
    return m_offsets_to_fundraising_expenditures;
}
void OAICandidateCommitteeTotalsPresidential::setOffsetsToFundraisingExpenditures(const double &offsets_to_fundraising_expenditures) {
    m_offsets_to_fundraising_expenditures = offsets_to_fundraising_expenditures;
    m_offsets_to_fundraising_expenditures_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_offsets_to_fundraising_expenditures_Set() const{
    return m_offsets_to_fundraising_expenditures_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_offsets_to_fundraising_expenditures_Valid() const{
    return m_offsets_to_fundraising_expenditures_isValid;
}

double OAICandidateCommitteeTotalsPresidential::getOffsetsToLegalAccounting() const {
    return m_offsets_to_legal_accounting;
}
void OAICandidateCommitteeTotalsPresidential::setOffsetsToLegalAccounting(const double &offsets_to_legal_accounting) {
    m_offsets_to_legal_accounting = offsets_to_legal_accounting;
    m_offsets_to_legal_accounting_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_offsets_to_legal_accounting_Set() const{
    return m_offsets_to_legal_accounting_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_offsets_to_legal_accounting_Valid() const{
    return m_offsets_to_legal_accounting_isValid;
}

double OAICandidateCommitteeTotalsPresidential::getOffsetsToOperatingExpenditures() const {
    return m_offsets_to_operating_expenditures;
}
void OAICandidateCommitteeTotalsPresidential::setOffsetsToOperatingExpenditures(const double &offsets_to_operating_expenditures) {
    m_offsets_to_operating_expenditures = offsets_to_operating_expenditures;
    m_offsets_to_operating_expenditures_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_offsets_to_operating_expenditures_Set() const{
    return m_offsets_to_operating_expenditures_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_offsets_to_operating_expenditures_Valid() const{
    return m_offsets_to_operating_expenditures_isValid;
}

double OAICandidateCommitteeTotalsPresidential::getOperatingExpenditures() const {
    return m_operating_expenditures;
}
void OAICandidateCommitteeTotalsPresidential::setOperatingExpenditures(const double &operating_expenditures) {
    m_operating_expenditures = operating_expenditures;
    m_operating_expenditures_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_operating_expenditures_Set() const{
    return m_operating_expenditures_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_operating_expenditures_Valid() const{
    return m_operating_expenditures_isValid;
}

double OAICandidateCommitteeTotalsPresidential::getOtherDisbursements() const {
    return m_other_disbursements;
}
void OAICandidateCommitteeTotalsPresidential::setOtherDisbursements(const double &other_disbursements) {
    m_other_disbursements = other_disbursements;
    m_other_disbursements_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_other_disbursements_Set() const{
    return m_other_disbursements_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_other_disbursements_Valid() const{
    return m_other_disbursements_isValid;
}

double OAICandidateCommitteeTotalsPresidential::getOtherLoansReceived() const {
    return m_other_loans_received;
}
void OAICandidateCommitteeTotalsPresidential::setOtherLoansReceived(const double &other_loans_received) {
    m_other_loans_received = other_loans_received;
    m_other_loans_received_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_other_loans_received_Set() const{
    return m_other_loans_received_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_other_loans_received_Valid() const{
    return m_other_loans_received_isValid;
}

double OAICandidateCommitteeTotalsPresidential::getOtherPoliticalCommitteeContributions() const {
    return m_other_political_committee_contributions;
}
void OAICandidateCommitteeTotalsPresidential::setOtherPoliticalCommitteeContributions(const double &other_political_committee_contributions) {
    m_other_political_committee_contributions = other_political_committee_contributions;
    m_other_political_committee_contributions_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_other_political_committee_contributions_Set() const{
    return m_other_political_committee_contributions_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_other_political_committee_contributions_Valid() const{
    return m_other_political_committee_contributions_isValid;
}

double OAICandidateCommitteeTotalsPresidential::getOtherReceipts() const {
    return m_other_receipts;
}
void OAICandidateCommitteeTotalsPresidential::setOtherReceipts(const double &other_receipts) {
    m_other_receipts = other_receipts;
    m_other_receipts_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_other_receipts_Set() const{
    return m_other_receipts_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_other_receipts_Valid() const{
    return m_other_receipts_isValid;
}

double OAICandidateCommitteeTotalsPresidential::getPoliticalPartyCommitteeContributions() const {
    return m_political_party_committee_contributions;
}
void OAICandidateCommitteeTotalsPresidential::setPoliticalPartyCommitteeContributions(const double &political_party_committee_contributions) {
    m_political_party_committee_contributions = political_party_committee_contributions;
    m_political_party_committee_contributions_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_political_party_committee_contributions_Set() const{
    return m_political_party_committee_contributions_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_political_party_committee_contributions_Valid() const{
    return m_political_party_committee_contributions_isValid;
}

double OAICandidateCommitteeTotalsPresidential::getReceipts() const {
    return m_receipts;
}
void OAICandidateCommitteeTotalsPresidential::setReceipts(const double &receipts) {
    m_receipts = receipts;
    m_receipts_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_receipts_Set() const{
    return m_receipts_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_receipts_Valid() const{
    return m_receipts_isValid;
}

double OAICandidateCommitteeTotalsPresidential::getRefundedIndividualContributions() const {
    return m_refunded_individual_contributions;
}
void OAICandidateCommitteeTotalsPresidential::setRefundedIndividualContributions(const double &refunded_individual_contributions) {
    m_refunded_individual_contributions = refunded_individual_contributions;
    m_refunded_individual_contributions_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_refunded_individual_contributions_Set() const{
    return m_refunded_individual_contributions_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_refunded_individual_contributions_Valid() const{
    return m_refunded_individual_contributions_isValid;
}

double OAICandidateCommitteeTotalsPresidential::getRefundedOtherPoliticalCommitteeContributions() const {
    return m_refunded_other_political_committee_contributions;
}
void OAICandidateCommitteeTotalsPresidential::setRefundedOtherPoliticalCommitteeContributions(const double &refunded_other_political_committee_contributions) {
    m_refunded_other_political_committee_contributions = refunded_other_political_committee_contributions;
    m_refunded_other_political_committee_contributions_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_refunded_other_political_committee_contributions_Set() const{
    return m_refunded_other_political_committee_contributions_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_refunded_other_political_committee_contributions_Valid() const{
    return m_refunded_other_political_committee_contributions_isValid;
}

double OAICandidateCommitteeTotalsPresidential::getRefundedPoliticalPartyCommitteeContributions() const {
    return m_refunded_political_party_committee_contributions;
}
void OAICandidateCommitteeTotalsPresidential::setRefundedPoliticalPartyCommitteeContributions(const double &refunded_political_party_committee_contributions) {
    m_refunded_political_party_committee_contributions = refunded_political_party_committee_contributions;
    m_refunded_political_party_committee_contributions_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_refunded_political_party_committee_contributions_Set() const{
    return m_refunded_political_party_committee_contributions_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_refunded_political_party_committee_contributions_Valid() const{
    return m_refunded_political_party_committee_contributions_isValid;
}

double OAICandidateCommitteeTotalsPresidential::getRepaymentsLoansMadeByCandidate() const {
    return m_repayments_loans_made_by_candidate;
}
void OAICandidateCommitteeTotalsPresidential::setRepaymentsLoansMadeByCandidate(const double &repayments_loans_made_by_candidate) {
    m_repayments_loans_made_by_candidate = repayments_loans_made_by_candidate;
    m_repayments_loans_made_by_candidate_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_repayments_loans_made_by_candidate_Set() const{
    return m_repayments_loans_made_by_candidate_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_repayments_loans_made_by_candidate_Valid() const{
    return m_repayments_loans_made_by_candidate_isValid;
}

double OAICandidateCommitteeTotalsPresidential::getRepaymentsOtherLoans() const {
    return m_repayments_other_loans;
}
void OAICandidateCommitteeTotalsPresidential::setRepaymentsOtherLoans(const double &repayments_other_loans) {
    m_repayments_other_loans = repayments_other_loans;
    m_repayments_other_loans_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_repayments_other_loans_Set() const{
    return m_repayments_other_loans_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_repayments_other_loans_Valid() const{
    return m_repayments_other_loans_isValid;
}

double OAICandidateCommitteeTotalsPresidential::getTotalOffsetsToOperatingExpenditures() const {
    return m_total_offsets_to_operating_expenditures;
}
void OAICandidateCommitteeTotalsPresidential::setTotalOffsetsToOperatingExpenditures(const double &total_offsets_to_operating_expenditures) {
    m_total_offsets_to_operating_expenditures = total_offsets_to_operating_expenditures;
    m_total_offsets_to_operating_expenditures_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_total_offsets_to_operating_expenditures_Set() const{
    return m_total_offsets_to_operating_expenditures_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_total_offsets_to_operating_expenditures_Valid() const{
    return m_total_offsets_to_operating_expenditures_isValid;
}

QDateTime OAICandidateCommitteeTotalsPresidential::getTransactionCoverageDate() const {
    return m_transaction_coverage_date;
}
void OAICandidateCommitteeTotalsPresidential::setTransactionCoverageDate(const QDateTime &transaction_coverage_date) {
    m_transaction_coverage_date = transaction_coverage_date;
    m_transaction_coverage_date_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_transaction_coverage_date_Set() const{
    return m_transaction_coverage_date_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_transaction_coverage_date_Valid() const{
    return m_transaction_coverage_date_isValid;
}

double OAICandidateCommitteeTotalsPresidential::getTransfersFromAffiliatedCommittee() const {
    return m_transfers_from_affiliated_committee;
}
void OAICandidateCommitteeTotalsPresidential::setTransfersFromAffiliatedCommittee(const double &transfers_from_affiliated_committee) {
    m_transfers_from_affiliated_committee = transfers_from_affiliated_committee;
    m_transfers_from_affiliated_committee_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_transfers_from_affiliated_committee_Set() const{
    return m_transfers_from_affiliated_committee_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_transfers_from_affiliated_committee_Valid() const{
    return m_transfers_from_affiliated_committee_isValid;
}

double OAICandidateCommitteeTotalsPresidential::getTransfersToOtherAuthorizedCommittee() const {
    return m_transfers_to_other_authorized_committee;
}
void OAICandidateCommitteeTotalsPresidential::setTransfersToOtherAuthorizedCommittee(const double &transfers_to_other_authorized_committee) {
    m_transfers_to_other_authorized_committee = transfers_to_other_authorized_committee;
    m_transfers_to_other_authorized_committee_isSet = true;
}

bool OAICandidateCommitteeTotalsPresidential::is_transfers_to_other_authorized_committee_Set() const{
    return m_transfers_to_other_authorized_committee_isSet;
}

bool OAICandidateCommitteeTotalsPresidential::is_transfers_to_other_authorized_committee_Valid() const{
    return m_transfers_to_other_authorized_committee_isValid;
}

bool OAICandidateCommitteeTotalsPresidential::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_candidate_contribution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_election_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contribution_refunds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coverage_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coverage_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cycle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disbursements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exempt_legal_accounting_disbursement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_federal_funds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fundraising_disbursements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_individual_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_individual_itemized_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_individual_unitemized_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_beginning_image_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_cash_on_hand_end_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_debts_owed_by_committee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_debts_owed_to_committee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_report_type_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_report_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loan_repayments_made_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loans_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loans_received_from_candidate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_operating_expenditures_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offsets_to_fundraising_expenditures_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offsets_to_legal_accounting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offsets_to_operating_expenditures_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_expenditures_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_disbursements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_loans_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_political_committee_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_receipts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_political_party_committee_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunded_individual_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunded_other_political_committee_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunded_political_party_committee_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repayments_loans_made_by_candidate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repayments_other_loans_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_offsets_to_operating_expenditures_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_coverage_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfers_from_affiliated_committee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfers_to_other_authorized_committee_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICandidateCommitteeTotalsPresidential::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_candidate_election_year_isValid && m_candidate_id_isValid && m_cycle_isValid && m_election_full_isValid && true;
}

} // namespace OpenAPI
