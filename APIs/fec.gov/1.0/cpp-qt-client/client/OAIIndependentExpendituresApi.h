/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIndependentExpendituresApi_H
#define OAI_OAIIndependentExpendituresApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIIETotalsByCandidatePage.h"
#include "OAIScheduleEByCandidatePage.h"
#include "OAIScheduleEEfilePage.h"
#include "OAIScheduleEPage.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIndependentExpendituresApi : public QObject {
    Q_OBJECT

public:
    OAIIndependentExpendituresApi(const int timeOut = 0);
    ~OAIIndependentExpendituresApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  district QString [optional]
    * @param[in]  support_oppose QString [optional]
    * @param[in]  election_full bool [optional]
    * @param[in]  cycle QList<qint32> [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  state QString [optional]
    * @param[in]  committee_id QList<QString> [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  candidate_id QList<QString> [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  office QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void schedulesScheduleEByCandidateGet(const QString &api_key, const ::OpenAPI::OptionalParam<QString> &district = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &support_oppose = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &election_full = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<qint32>> &cycle = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &committee_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &candidate_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &office = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  max_expenditure_amount qint32 [optional]
    * @param[in]  support_oppose_indicator QList<QString> [optional]
    * @param[in]  min_expenditure_date QDate [optional]
    * @param[in]  filing_form QList<QString> [optional]
    * @param[in]  max_expenditure_date QDate [optional]
    * @param[in]  max_filed_date QDate [optional]
    * @param[in]  is_notice bool [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  payee_name QList<QString> [optional]
    * @param[in]  candidate_id QList<QString> [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  candidate_office_district QList<QString> [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  min_expenditure_amount qint32 [optional]
    * @param[in]  spender_name QList<QString> [optional]
    * @param[in]  min_dissemination_date QDate [optional]
    * @param[in]  candidate_office_state QList<QString> [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  committee_id QList<QString> [optional]
    * @param[in]  candidate_search QList<QString> [optional]
    * @param[in]  image_number QList<QString> [optional]
    * @param[in]  candidate_party QList<QString> [optional]
    * @param[in]  min_filed_date QDate [optional]
    * @param[in]  max_dissemination_date QDate [optional]
    * @param[in]  most_recent bool [optional]
    * @param[in]  candidate_office QString [optional]
    */
    virtual void schedulesScheduleEEfileGet(const QString &api_key, const ::OpenAPI::OptionalParam<qint32> &max_expenditure_amount = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &support_oppose_indicator = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &min_expenditure_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<QString>> &filing_form = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &max_expenditure_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &max_filed_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<bool> &is_notice = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &payee_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &candidate_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &candidate_office_district = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &min_expenditure_amount = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &spender_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &min_dissemination_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<QString>> &candidate_office_state = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &committee_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &candidate_search = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &image_number = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &candidate_party = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &min_filed_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &max_dissemination_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<bool> &most_recent = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &candidate_office = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  last_expenditure_date QDate [optional]
    * @param[in]  max_image_number QString [optional]
    * @param[in]  is_notice QList<bool> [optional]
    * @param[in]  payee_name QList<QString> [optional]
    * @param[in]  min_amount QString [optional]
    * @param[in]  candidate_id QList<QString> [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  last_office_total_ytd float [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  min_filing_date QDate [optional]
    * @param[in]  q_spender QList<QString> [optional]
    * @param[in]  min_dissemination_date QDate [optional]
    * @param[in]  candidate_office_state QList<QString> [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  last_expenditure_amount float [optional]
    * @param[in]  image_number QList<QString> [optional]
    * @param[in]  max_date QDate [optional]
    * @param[in]  max_dissemination_date QDate [optional]
    * @param[in]  min_date QDate [optional]
    * @param[in]  filing_form QList<QString> [optional]
    * @param[in]  support_oppose_indicator QList<QString> [optional]
    * @param[in]  min_image_number QString [optional]
    * @param[in]  cycle QList<qint32> [optional]
    * @param[in]  max_filing_date QDate [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  last_support_oppose_indicator QString [optional]
    * @param[in]  last_index qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  candidate_office_district QList<QString> [optional]
    * @param[in]  line_number QString [optional]
    * @param[in]  committee_id QList<QString> [optional]
    * @param[in]  candidate_party QList<QString> [optional]
    * @param[in]  max_amount QString [optional]
    * @param[in]  most_recent bool [optional]
    * @param[in]  candidate_office QList<QString> [optional]
    */
    virtual void schedulesScheduleEGet(const QString &api_key, const ::OpenAPI::OptionalParam<QDate> &last_expenditure_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &max_image_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<bool>> &is_notice = ::OpenAPI::OptionalParam<QList<bool>>(), const ::OpenAPI::OptionalParam<QList<QString>> &payee_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &min_amount = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &candidate_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<float> &last_office_total_ytd = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &min_filing_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<QString>> &q_spender = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &min_dissemination_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<QString>> &candidate_office_state = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<float> &last_expenditure_amount = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QList<QString>> &image_number = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &max_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &max_dissemination_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &min_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<QString>> &filing_form = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &support_oppose_indicator = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &min_image_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<qint32>> &cycle = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QDate> &max_filing_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &last_support_oppose_indicator = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &last_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &candidate_office_district = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &line_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &committee_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &candidate_party = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &max_amount = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &most_recent = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &candidate_office = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  election_full bool [optional]
    * @param[in]  cycle QList<qint32> [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  candidate_id QList<QString> [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void schedulesScheduleETotalsByCandidateGet(const QString &api_key, const ::OpenAPI::OptionalParam<bool> &election_full = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<qint32>> &cycle = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &candidate_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void schedulesScheduleEByCandidateGetCallback(OAIHttpRequestWorker *worker);
    void schedulesScheduleEEfileGetCallback(OAIHttpRequestWorker *worker);
    void schedulesScheduleEGetCallback(OAIHttpRequestWorker *worker);
    void schedulesScheduleETotalsByCandidateGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void schedulesScheduleEByCandidateGetSignal(OAIScheduleEByCandidatePage summary);
    void schedulesScheduleEEfileGetSignal(OAIScheduleEEfilePage summary);
    void schedulesScheduleEGetSignal(OAIScheduleEPage summary);
    void schedulesScheduleETotalsByCandidateGetSignal(OAIIETotalsByCandidatePage summary);


    void schedulesScheduleEByCandidateGetSignalFull(OAIHttpRequestWorker *worker, OAIScheduleEByCandidatePage summary);
    void schedulesScheduleEEfileGetSignalFull(OAIHttpRequestWorker *worker, OAIScheduleEEfilePage summary);
    void schedulesScheduleEGetSignalFull(OAIHttpRequestWorker *worker, OAIScheduleEPage summary);
    void schedulesScheduleETotalsByCandidateGetSignalFull(OAIHttpRequestWorker *worker, OAIIETotalsByCandidatePage summary);

    Q_DECL_DEPRECATED_X("Use schedulesScheduleEByCandidateGetSignalError() instead")
    void schedulesScheduleEByCandidateGetSignalE(OAIScheduleEByCandidatePage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleEByCandidateGetSignalError(OAIScheduleEByCandidatePage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleEEfileGetSignalError() instead")
    void schedulesScheduleEEfileGetSignalE(OAIScheduleEEfilePage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleEEfileGetSignalError(OAIScheduleEEfilePage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleEGetSignalError() instead")
    void schedulesScheduleEGetSignalE(OAIScheduleEPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleEGetSignalError(OAIScheduleEPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleETotalsByCandidateGetSignalError() instead")
    void schedulesScheduleETotalsByCandidateGetSignalE(OAIIETotalsByCandidatePage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleETotalsByCandidateGetSignalError(OAIIETotalsByCandidatePage summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use schedulesScheduleEByCandidateGetSignalErrorFull() instead")
    void schedulesScheduleEByCandidateGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleEByCandidateGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleEEfileGetSignalErrorFull() instead")
    void schedulesScheduleEEfileGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleEEfileGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleEGetSignalErrorFull() instead")
    void schedulesScheduleEGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleEGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleETotalsByCandidateGetSignalErrorFull() instead")
    void schedulesScheduleETotalsByCandidateGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleETotalsByCandidateGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
