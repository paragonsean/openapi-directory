/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduleAEfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduleAEfile::OAIScheduleAEfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduleAEfile::OAIScheduleAEfile() {
    this->initializeModel();
}

OAIScheduleAEfile::~OAIScheduleAEfile() {}

void OAIScheduleAEfile::initializeModel() {

    m_amendment_indicator_isSet = false;
    m_amendment_indicator_isValid = false;

    m_back_reference_schedule_name_isSet = false;
    m_back_reference_schedule_name_isValid = false;

    m_back_reference_transaction_id_isSet = false;
    m_back_reference_transaction_id_isValid = false;

    m_beginning_image_number_isSet = false;
    m_beginning_image_number_isValid = false;

    m_committee_isSet = false;
    m_committee_isValid = false;

    m_committee_id_isSet = false;
    m_committee_id_isValid = false;

    m_conduit_committee_city_isSet = false;
    m_conduit_committee_city_isValid = false;

    m_conduit_committee_id_isSet = false;
    m_conduit_committee_id_isValid = false;

    m_conduit_committee_name_isSet = false;
    m_conduit_committee_name_isValid = false;

    m_conduit_committee_state_isSet = false;
    m_conduit_committee_state_isValid = false;

    m_conduit_committee_street1_isSet = false;
    m_conduit_committee_street1_isValid = false;

    m_conduit_committee_street2_isSet = false;
    m_conduit_committee_street2_isValid = false;

    m_conduit_committee_zip_isSet = false;
    m_conduit_committee_zip_isValid = false;

    m_contribution_receipt_amount_isSet = false;
    m_contribution_receipt_amount_isValid = false;

    m_contribution_receipt_date_isSet = false;
    m_contribution_receipt_date_isValid = false;

    m_contributor_aggregate_ytd_isSet = false;
    m_contributor_aggregate_ytd_isValid = false;

    m_contributor_city_isSet = false;
    m_contributor_city_isValid = false;

    m_contributor_employer_isSet = false;
    m_contributor_employer_isValid = false;

    m_contributor_first_name_isSet = false;
    m_contributor_first_name_isValid = false;

    m_contributor_last_name_isSet = false;
    m_contributor_last_name_isValid = false;

    m_contributor_middle_name_isSet = false;
    m_contributor_middle_name_isValid = false;

    m_contributor_name_isSet = false;
    m_contributor_name_isValid = false;

    m_contributor_occupation_isSet = false;
    m_contributor_occupation_isValid = false;

    m_contributor_prefix_isSet = false;
    m_contributor_prefix_isValid = false;

    m_contributor_state_isSet = false;
    m_contributor_state_isValid = false;

    m_contributor_suffix_isSet = false;
    m_contributor_suffix_isValid = false;

    m_contributor_zip_isSet = false;
    m_contributor_zip_isValid = false;

    m_csv_url_isSet = false;
    m_csv_url_isValid = false;

    m_cycle_isSet = false;
    m_cycle_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_fec_election_type_desc_isSet = false;
    m_fec_election_type_desc_isValid = false;

    m_fec_url_isSet = false;
    m_fec_url_isValid = false;

    m_file_number_isSet = false;
    m_file_number_isValid = false;

    m_filing_isSet = false;
    m_filing_isValid = false;

    m_image_number_isSet = false;
    m_image_number_isValid = false;

    m_line_number_isSet = false;
    m_line_number_isValid = false;

    m_load_timestamp_isSet = false;
    m_load_timestamp_isValid = false;

    m_memo_code_isSet = false;
    m_memo_code_isValid = false;

    m_memo_text_isSet = false;
    m_memo_text_isValid = false;

    m_pdf_url_isSet = false;
    m_pdf_url_isValid = false;

    m_pgo_isSet = false;
    m_pgo_isValid = false;

    m_related_line_number_isSet = false;
    m_related_line_number_isValid = false;

    m_report_type_isSet = false;
    m_report_type_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;
}

void OAIScheduleAEfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduleAEfile::fromJsonObject(QJsonObject json) {

    m_amendment_indicator_isValid = ::OpenAPI::fromJsonValue(m_amendment_indicator, json[QString("amendment_indicator")]);
    m_amendment_indicator_isSet = !json[QString("amendment_indicator")].isNull() && m_amendment_indicator_isValid;

    m_back_reference_schedule_name_isValid = ::OpenAPI::fromJsonValue(m_back_reference_schedule_name, json[QString("back_reference_schedule_name")]);
    m_back_reference_schedule_name_isSet = !json[QString("back_reference_schedule_name")].isNull() && m_back_reference_schedule_name_isValid;

    m_back_reference_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_back_reference_transaction_id, json[QString("back_reference_transaction_id")]);
    m_back_reference_transaction_id_isSet = !json[QString("back_reference_transaction_id")].isNull() && m_back_reference_transaction_id_isValid;

    m_beginning_image_number_isValid = ::OpenAPI::fromJsonValue(m_beginning_image_number, json[QString("beginning_image_number")]);
    m_beginning_image_number_isSet = !json[QString("beginning_image_number")].isNull() && m_beginning_image_number_isValid;

    m_committee_isValid = ::OpenAPI::fromJsonValue(m_committee, json[QString("committee")]);
    m_committee_isSet = !json[QString("committee")].isNull() && m_committee_isValid;

    m_committee_id_isValid = ::OpenAPI::fromJsonValue(m_committee_id, json[QString("committee_id")]);
    m_committee_id_isSet = !json[QString("committee_id")].isNull() && m_committee_id_isValid;

    m_conduit_committee_city_isValid = ::OpenAPI::fromJsonValue(m_conduit_committee_city, json[QString("conduit_committee_city")]);
    m_conduit_committee_city_isSet = !json[QString("conduit_committee_city")].isNull() && m_conduit_committee_city_isValid;

    m_conduit_committee_id_isValid = ::OpenAPI::fromJsonValue(m_conduit_committee_id, json[QString("conduit_committee_id")]);
    m_conduit_committee_id_isSet = !json[QString("conduit_committee_id")].isNull() && m_conduit_committee_id_isValid;

    m_conduit_committee_name_isValid = ::OpenAPI::fromJsonValue(m_conduit_committee_name, json[QString("conduit_committee_name")]);
    m_conduit_committee_name_isSet = !json[QString("conduit_committee_name")].isNull() && m_conduit_committee_name_isValid;

    m_conduit_committee_state_isValid = ::OpenAPI::fromJsonValue(m_conduit_committee_state, json[QString("conduit_committee_state")]);
    m_conduit_committee_state_isSet = !json[QString("conduit_committee_state")].isNull() && m_conduit_committee_state_isValid;

    m_conduit_committee_street1_isValid = ::OpenAPI::fromJsonValue(m_conduit_committee_street1, json[QString("conduit_committee_street1")]);
    m_conduit_committee_street1_isSet = !json[QString("conduit_committee_street1")].isNull() && m_conduit_committee_street1_isValid;

    m_conduit_committee_street2_isValid = ::OpenAPI::fromJsonValue(m_conduit_committee_street2, json[QString("conduit_committee_street2")]);
    m_conduit_committee_street2_isSet = !json[QString("conduit_committee_street2")].isNull() && m_conduit_committee_street2_isValid;

    m_conduit_committee_zip_isValid = ::OpenAPI::fromJsonValue(m_conduit_committee_zip, json[QString("conduit_committee_zip")]);
    m_conduit_committee_zip_isSet = !json[QString("conduit_committee_zip")].isNull() && m_conduit_committee_zip_isValid;

    m_contribution_receipt_amount_isValid = ::OpenAPI::fromJsonValue(m_contribution_receipt_amount, json[QString("contribution_receipt_amount")]);
    m_contribution_receipt_amount_isSet = !json[QString("contribution_receipt_amount")].isNull() && m_contribution_receipt_amount_isValid;

    m_contribution_receipt_date_isValid = ::OpenAPI::fromJsonValue(m_contribution_receipt_date, json[QString("contribution_receipt_date")]);
    m_contribution_receipt_date_isSet = !json[QString("contribution_receipt_date")].isNull() && m_contribution_receipt_date_isValid;

    m_contributor_aggregate_ytd_isValid = ::OpenAPI::fromJsonValue(m_contributor_aggregate_ytd, json[QString("contributor_aggregate_ytd")]);
    m_contributor_aggregate_ytd_isSet = !json[QString("contributor_aggregate_ytd")].isNull() && m_contributor_aggregate_ytd_isValid;

    m_contributor_city_isValid = ::OpenAPI::fromJsonValue(m_contributor_city, json[QString("contributor_city")]);
    m_contributor_city_isSet = !json[QString("contributor_city")].isNull() && m_contributor_city_isValid;

    m_contributor_employer_isValid = ::OpenAPI::fromJsonValue(m_contributor_employer, json[QString("contributor_employer")]);
    m_contributor_employer_isSet = !json[QString("contributor_employer")].isNull() && m_contributor_employer_isValid;

    m_contributor_first_name_isValid = ::OpenAPI::fromJsonValue(m_contributor_first_name, json[QString("contributor_first_name")]);
    m_contributor_first_name_isSet = !json[QString("contributor_first_name")].isNull() && m_contributor_first_name_isValid;

    m_contributor_last_name_isValid = ::OpenAPI::fromJsonValue(m_contributor_last_name, json[QString("contributor_last_name")]);
    m_contributor_last_name_isSet = !json[QString("contributor_last_name")].isNull() && m_contributor_last_name_isValid;

    m_contributor_middle_name_isValid = ::OpenAPI::fromJsonValue(m_contributor_middle_name, json[QString("contributor_middle_name")]);
    m_contributor_middle_name_isSet = !json[QString("contributor_middle_name")].isNull() && m_contributor_middle_name_isValid;

    m_contributor_name_isValid = ::OpenAPI::fromJsonValue(m_contributor_name, json[QString("contributor_name")]);
    m_contributor_name_isSet = !json[QString("contributor_name")].isNull() && m_contributor_name_isValid;

    m_contributor_occupation_isValid = ::OpenAPI::fromJsonValue(m_contributor_occupation, json[QString("contributor_occupation")]);
    m_contributor_occupation_isSet = !json[QString("contributor_occupation")].isNull() && m_contributor_occupation_isValid;

    m_contributor_prefix_isValid = ::OpenAPI::fromJsonValue(m_contributor_prefix, json[QString("contributor_prefix")]);
    m_contributor_prefix_isSet = !json[QString("contributor_prefix")].isNull() && m_contributor_prefix_isValid;

    m_contributor_state_isValid = ::OpenAPI::fromJsonValue(m_contributor_state, json[QString("contributor_state")]);
    m_contributor_state_isSet = !json[QString("contributor_state")].isNull() && m_contributor_state_isValid;

    m_contributor_suffix_isValid = ::OpenAPI::fromJsonValue(m_contributor_suffix, json[QString("contributor_suffix")]);
    m_contributor_suffix_isSet = !json[QString("contributor_suffix")].isNull() && m_contributor_suffix_isValid;

    m_contributor_zip_isValid = ::OpenAPI::fromJsonValue(m_contributor_zip, json[QString("contributor_zip")]);
    m_contributor_zip_isSet = !json[QString("contributor_zip")].isNull() && m_contributor_zip_isValid;

    m_csv_url_isValid = ::OpenAPI::fromJsonValue(m_csv_url, json[QString("csv_url")]);
    m_csv_url_isSet = !json[QString("csv_url")].isNull() && m_csv_url_isValid;

    m_cycle_isValid = ::OpenAPI::fromJsonValue(m_cycle, json[QString("cycle")]);
    m_cycle_isSet = !json[QString("cycle")].isNull() && m_cycle_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entity_type")]);
    m_entity_type_isSet = !json[QString("entity_type")].isNull() && m_entity_type_isValid;

    m_fec_election_type_desc_isValid = ::OpenAPI::fromJsonValue(m_fec_election_type_desc, json[QString("fec_election_type_desc")]);
    m_fec_election_type_desc_isSet = !json[QString("fec_election_type_desc")].isNull() && m_fec_election_type_desc_isValid;

    m_fec_url_isValid = ::OpenAPI::fromJsonValue(m_fec_url, json[QString("fec_url")]);
    m_fec_url_isSet = !json[QString("fec_url")].isNull() && m_fec_url_isValid;

    m_file_number_isValid = ::OpenAPI::fromJsonValue(m_file_number, json[QString("file_number")]);
    m_file_number_isSet = !json[QString("file_number")].isNull() && m_file_number_isValid;

    m_filing_isValid = ::OpenAPI::fromJsonValue(m_filing, json[QString("filing")]);
    m_filing_isSet = !json[QString("filing")].isNull() && m_filing_isValid;

    m_image_number_isValid = ::OpenAPI::fromJsonValue(m_image_number, json[QString("image_number")]);
    m_image_number_isSet = !json[QString("image_number")].isNull() && m_image_number_isValid;

    m_line_number_isValid = ::OpenAPI::fromJsonValue(m_line_number, json[QString("line_number")]);
    m_line_number_isSet = !json[QString("line_number")].isNull() && m_line_number_isValid;

    m_load_timestamp_isValid = ::OpenAPI::fromJsonValue(m_load_timestamp, json[QString("load_timestamp")]);
    m_load_timestamp_isSet = !json[QString("load_timestamp")].isNull() && m_load_timestamp_isValid;

    m_memo_code_isValid = ::OpenAPI::fromJsonValue(m_memo_code, json[QString("memo_code")]);
    m_memo_code_isSet = !json[QString("memo_code")].isNull() && m_memo_code_isValid;

    m_memo_text_isValid = ::OpenAPI::fromJsonValue(m_memo_text, json[QString("memo_text")]);
    m_memo_text_isSet = !json[QString("memo_text")].isNull() && m_memo_text_isValid;

    m_pdf_url_isValid = ::OpenAPI::fromJsonValue(m_pdf_url, json[QString("pdf_url")]);
    m_pdf_url_isSet = !json[QString("pdf_url")].isNull() && m_pdf_url_isValid;

    m_pgo_isValid = ::OpenAPI::fromJsonValue(m_pgo, json[QString("pgo")]);
    m_pgo_isSet = !json[QString("pgo")].isNull() && m_pgo_isValid;

    m_related_line_number_isValid = ::OpenAPI::fromJsonValue(m_related_line_number, json[QString("related_line_number")]);
    m_related_line_number_isSet = !json[QString("related_line_number")].isNull() && m_related_line_number_isValid;

    m_report_type_isValid = ::OpenAPI::fromJsonValue(m_report_type, json[QString("report_type")]);
    m_report_type_isSet = !json[QString("report_type")].isNull() && m_report_type_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("transaction_id")]);
    m_transaction_id_isSet = !json[QString("transaction_id")].isNull() && m_transaction_id_isValid;
}

QString OAIScheduleAEfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduleAEfile::asJsonObject() const {
    QJsonObject obj;
    if (m_amendment_indicator_isSet) {
        obj.insert(QString("amendment_indicator"), ::OpenAPI::toJsonValue(m_amendment_indicator));
    }
    if (m_back_reference_schedule_name_isSet) {
        obj.insert(QString("back_reference_schedule_name"), ::OpenAPI::toJsonValue(m_back_reference_schedule_name));
    }
    if (m_back_reference_transaction_id_isSet) {
        obj.insert(QString("back_reference_transaction_id"), ::OpenAPI::toJsonValue(m_back_reference_transaction_id));
    }
    if (m_beginning_image_number_isSet) {
        obj.insert(QString("beginning_image_number"), ::OpenAPI::toJsonValue(m_beginning_image_number));
    }
    if (m_committee.isSet()) {
        obj.insert(QString("committee"), ::OpenAPI::toJsonValue(m_committee));
    }
    if (m_committee_id_isSet) {
        obj.insert(QString("committee_id"), ::OpenAPI::toJsonValue(m_committee_id));
    }
    if (m_conduit_committee_city_isSet) {
        obj.insert(QString("conduit_committee_city"), ::OpenAPI::toJsonValue(m_conduit_committee_city));
    }
    if (m_conduit_committee_id_isSet) {
        obj.insert(QString("conduit_committee_id"), ::OpenAPI::toJsonValue(m_conduit_committee_id));
    }
    if (m_conduit_committee_name_isSet) {
        obj.insert(QString("conduit_committee_name"), ::OpenAPI::toJsonValue(m_conduit_committee_name));
    }
    if (m_conduit_committee_state_isSet) {
        obj.insert(QString("conduit_committee_state"), ::OpenAPI::toJsonValue(m_conduit_committee_state));
    }
    if (m_conduit_committee_street1_isSet) {
        obj.insert(QString("conduit_committee_street1"), ::OpenAPI::toJsonValue(m_conduit_committee_street1));
    }
    if (m_conduit_committee_street2_isSet) {
        obj.insert(QString("conduit_committee_street2"), ::OpenAPI::toJsonValue(m_conduit_committee_street2));
    }
    if (m_conduit_committee_zip_isSet) {
        obj.insert(QString("conduit_committee_zip"), ::OpenAPI::toJsonValue(m_conduit_committee_zip));
    }
    if (m_contribution_receipt_amount_isSet) {
        obj.insert(QString("contribution_receipt_amount"), ::OpenAPI::toJsonValue(m_contribution_receipt_amount));
    }
    if (m_contribution_receipt_date_isSet) {
        obj.insert(QString("contribution_receipt_date"), ::OpenAPI::toJsonValue(m_contribution_receipt_date));
    }
    if (m_contributor_aggregate_ytd_isSet) {
        obj.insert(QString("contributor_aggregate_ytd"), ::OpenAPI::toJsonValue(m_contributor_aggregate_ytd));
    }
    if (m_contributor_city_isSet) {
        obj.insert(QString("contributor_city"), ::OpenAPI::toJsonValue(m_contributor_city));
    }
    if (m_contributor_employer_isSet) {
        obj.insert(QString("contributor_employer"), ::OpenAPI::toJsonValue(m_contributor_employer));
    }
    if (m_contributor_first_name_isSet) {
        obj.insert(QString("contributor_first_name"), ::OpenAPI::toJsonValue(m_contributor_first_name));
    }
    if (m_contributor_last_name_isSet) {
        obj.insert(QString("contributor_last_name"), ::OpenAPI::toJsonValue(m_contributor_last_name));
    }
    if (m_contributor_middle_name_isSet) {
        obj.insert(QString("contributor_middle_name"), ::OpenAPI::toJsonValue(m_contributor_middle_name));
    }
    if (m_contributor_name_isSet) {
        obj.insert(QString("contributor_name"), ::OpenAPI::toJsonValue(m_contributor_name));
    }
    if (m_contributor_occupation_isSet) {
        obj.insert(QString("contributor_occupation"), ::OpenAPI::toJsonValue(m_contributor_occupation));
    }
    if (m_contributor_prefix_isSet) {
        obj.insert(QString("contributor_prefix"), ::OpenAPI::toJsonValue(m_contributor_prefix));
    }
    if (m_contributor_state_isSet) {
        obj.insert(QString("contributor_state"), ::OpenAPI::toJsonValue(m_contributor_state));
    }
    if (m_contributor_suffix_isSet) {
        obj.insert(QString("contributor_suffix"), ::OpenAPI::toJsonValue(m_contributor_suffix));
    }
    if (m_contributor_zip_isSet) {
        obj.insert(QString("contributor_zip"), ::OpenAPI::toJsonValue(m_contributor_zip));
    }
    if (m_csv_url_isSet) {
        obj.insert(QString("csv_url"), ::OpenAPI::toJsonValue(m_csv_url));
    }
    if (m_cycle_isSet) {
        obj.insert(QString("cycle"), ::OpenAPI::toJsonValue(m_cycle));
    }
    if (m_entity_type_isSet) {
        obj.insert(QString("entity_type"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_fec_election_type_desc_isSet) {
        obj.insert(QString("fec_election_type_desc"), ::OpenAPI::toJsonValue(m_fec_election_type_desc));
    }
    if (m_fec_url_isSet) {
        obj.insert(QString("fec_url"), ::OpenAPI::toJsonValue(m_fec_url));
    }
    if (m_file_number_isSet) {
        obj.insert(QString("file_number"), ::OpenAPI::toJsonValue(m_file_number));
    }
    if (m_filing.isSet()) {
        obj.insert(QString("filing"), ::OpenAPI::toJsonValue(m_filing));
    }
    if (m_image_number_isSet) {
        obj.insert(QString("image_number"), ::OpenAPI::toJsonValue(m_image_number));
    }
    if (m_line_number_isSet) {
        obj.insert(QString("line_number"), ::OpenAPI::toJsonValue(m_line_number));
    }
    if (m_load_timestamp_isSet) {
        obj.insert(QString("load_timestamp"), ::OpenAPI::toJsonValue(m_load_timestamp));
    }
    if (m_memo_code_isSet) {
        obj.insert(QString("memo_code"), ::OpenAPI::toJsonValue(m_memo_code));
    }
    if (m_memo_text_isSet) {
        obj.insert(QString("memo_text"), ::OpenAPI::toJsonValue(m_memo_text));
    }
    if (m_pdf_url_isSet) {
        obj.insert(QString("pdf_url"), ::OpenAPI::toJsonValue(m_pdf_url));
    }
    if (m_pgo_isSet) {
        obj.insert(QString("pgo"), ::OpenAPI::toJsonValue(m_pgo));
    }
    if (m_related_line_number_isSet) {
        obj.insert(QString("related_line_number"), ::OpenAPI::toJsonValue(m_related_line_number));
    }
    if (m_report_type_isSet) {
        obj.insert(QString("report_type"), ::OpenAPI::toJsonValue(m_report_type));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("transaction_id"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    return obj;
}

QString OAIScheduleAEfile::getAmendmentIndicator() const {
    return m_amendment_indicator;
}
void OAIScheduleAEfile::setAmendmentIndicator(const QString &amendment_indicator) {
    m_amendment_indicator = amendment_indicator;
    m_amendment_indicator_isSet = true;
}

bool OAIScheduleAEfile::is_amendment_indicator_Set() const{
    return m_amendment_indicator_isSet;
}

bool OAIScheduleAEfile::is_amendment_indicator_Valid() const{
    return m_amendment_indicator_isValid;
}

QString OAIScheduleAEfile::getBackReferenceScheduleName() const {
    return m_back_reference_schedule_name;
}
void OAIScheduleAEfile::setBackReferenceScheduleName(const QString &back_reference_schedule_name) {
    m_back_reference_schedule_name = back_reference_schedule_name;
    m_back_reference_schedule_name_isSet = true;
}

bool OAIScheduleAEfile::is_back_reference_schedule_name_Set() const{
    return m_back_reference_schedule_name_isSet;
}

bool OAIScheduleAEfile::is_back_reference_schedule_name_Valid() const{
    return m_back_reference_schedule_name_isValid;
}

QString OAIScheduleAEfile::getBackReferenceTransactionId() const {
    return m_back_reference_transaction_id;
}
void OAIScheduleAEfile::setBackReferenceTransactionId(const QString &back_reference_transaction_id) {
    m_back_reference_transaction_id = back_reference_transaction_id;
    m_back_reference_transaction_id_isSet = true;
}

bool OAIScheduleAEfile::is_back_reference_transaction_id_Set() const{
    return m_back_reference_transaction_id_isSet;
}

bool OAIScheduleAEfile::is_back_reference_transaction_id_Valid() const{
    return m_back_reference_transaction_id_isValid;
}

QString OAIScheduleAEfile::getBeginningImageNumber() const {
    return m_beginning_image_number;
}
void OAIScheduleAEfile::setBeginningImageNumber(const QString &beginning_image_number) {
    m_beginning_image_number = beginning_image_number;
    m_beginning_image_number_isSet = true;
}

bool OAIScheduleAEfile::is_beginning_image_number_Set() const{
    return m_beginning_image_number_isSet;
}

bool OAIScheduleAEfile::is_beginning_image_number_Valid() const{
    return m_beginning_image_number_isValid;
}

OAICommitteeHistory OAIScheduleAEfile::getCommittee() const {
    return m_committee;
}
void OAIScheduleAEfile::setCommittee(const OAICommitteeHistory &committee) {
    m_committee = committee;
    m_committee_isSet = true;
}

bool OAIScheduleAEfile::is_committee_Set() const{
    return m_committee_isSet;
}

bool OAIScheduleAEfile::is_committee_Valid() const{
    return m_committee_isValid;
}

QString OAIScheduleAEfile::getCommitteeId() const {
    return m_committee_id;
}
void OAIScheduleAEfile::setCommitteeId(const QString &committee_id) {
    m_committee_id = committee_id;
    m_committee_id_isSet = true;
}

bool OAIScheduleAEfile::is_committee_id_Set() const{
    return m_committee_id_isSet;
}

bool OAIScheduleAEfile::is_committee_id_Valid() const{
    return m_committee_id_isValid;
}

QString OAIScheduleAEfile::getConduitCommitteeCity() const {
    return m_conduit_committee_city;
}
void OAIScheduleAEfile::setConduitCommitteeCity(const QString &conduit_committee_city) {
    m_conduit_committee_city = conduit_committee_city;
    m_conduit_committee_city_isSet = true;
}

bool OAIScheduleAEfile::is_conduit_committee_city_Set() const{
    return m_conduit_committee_city_isSet;
}

bool OAIScheduleAEfile::is_conduit_committee_city_Valid() const{
    return m_conduit_committee_city_isValid;
}

QString OAIScheduleAEfile::getConduitCommitteeId() const {
    return m_conduit_committee_id;
}
void OAIScheduleAEfile::setConduitCommitteeId(const QString &conduit_committee_id) {
    m_conduit_committee_id = conduit_committee_id;
    m_conduit_committee_id_isSet = true;
}

bool OAIScheduleAEfile::is_conduit_committee_id_Set() const{
    return m_conduit_committee_id_isSet;
}

bool OAIScheduleAEfile::is_conduit_committee_id_Valid() const{
    return m_conduit_committee_id_isValid;
}

QString OAIScheduleAEfile::getConduitCommitteeName() const {
    return m_conduit_committee_name;
}
void OAIScheduleAEfile::setConduitCommitteeName(const QString &conduit_committee_name) {
    m_conduit_committee_name = conduit_committee_name;
    m_conduit_committee_name_isSet = true;
}

bool OAIScheduleAEfile::is_conduit_committee_name_Set() const{
    return m_conduit_committee_name_isSet;
}

bool OAIScheduleAEfile::is_conduit_committee_name_Valid() const{
    return m_conduit_committee_name_isValid;
}

QString OAIScheduleAEfile::getConduitCommitteeState() const {
    return m_conduit_committee_state;
}
void OAIScheduleAEfile::setConduitCommitteeState(const QString &conduit_committee_state) {
    m_conduit_committee_state = conduit_committee_state;
    m_conduit_committee_state_isSet = true;
}

bool OAIScheduleAEfile::is_conduit_committee_state_Set() const{
    return m_conduit_committee_state_isSet;
}

bool OAIScheduleAEfile::is_conduit_committee_state_Valid() const{
    return m_conduit_committee_state_isValid;
}

QString OAIScheduleAEfile::getConduitCommitteeStreet1() const {
    return m_conduit_committee_street1;
}
void OAIScheduleAEfile::setConduitCommitteeStreet1(const QString &conduit_committee_street1) {
    m_conduit_committee_street1 = conduit_committee_street1;
    m_conduit_committee_street1_isSet = true;
}

bool OAIScheduleAEfile::is_conduit_committee_street1_Set() const{
    return m_conduit_committee_street1_isSet;
}

bool OAIScheduleAEfile::is_conduit_committee_street1_Valid() const{
    return m_conduit_committee_street1_isValid;
}

QString OAIScheduleAEfile::getConduitCommitteeStreet2() const {
    return m_conduit_committee_street2;
}
void OAIScheduleAEfile::setConduitCommitteeStreet2(const QString &conduit_committee_street2) {
    m_conduit_committee_street2 = conduit_committee_street2;
    m_conduit_committee_street2_isSet = true;
}

bool OAIScheduleAEfile::is_conduit_committee_street2_Set() const{
    return m_conduit_committee_street2_isSet;
}

bool OAIScheduleAEfile::is_conduit_committee_street2_Valid() const{
    return m_conduit_committee_street2_isValid;
}

qint32 OAIScheduleAEfile::getConduitCommitteeZip() const {
    return m_conduit_committee_zip;
}
void OAIScheduleAEfile::setConduitCommitteeZip(const qint32 &conduit_committee_zip) {
    m_conduit_committee_zip = conduit_committee_zip;
    m_conduit_committee_zip_isSet = true;
}

bool OAIScheduleAEfile::is_conduit_committee_zip_Set() const{
    return m_conduit_committee_zip_isSet;
}

bool OAIScheduleAEfile::is_conduit_committee_zip_Valid() const{
    return m_conduit_committee_zip_isValid;
}

double OAIScheduleAEfile::getContributionReceiptAmount() const {
    return m_contribution_receipt_amount;
}
void OAIScheduleAEfile::setContributionReceiptAmount(const double &contribution_receipt_amount) {
    m_contribution_receipt_amount = contribution_receipt_amount;
    m_contribution_receipt_amount_isSet = true;
}

bool OAIScheduleAEfile::is_contribution_receipt_amount_Set() const{
    return m_contribution_receipt_amount_isSet;
}

bool OAIScheduleAEfile::is_contribution_receipt_amount_Valid() const{
    return m_contribution_receipt_amount_isValid;
}

QDate OAIScheduleAEfile::getContributionReceiptDate() const {
    return m_contribution_receipt_date;
}
void OAIScheduleAEfile::setContributionReceiptDate(const QDate &contribution_receipt_date) {
    m_contribution_receipt_date = contribution_receipt_date;
    m_contribution_receipt_date_isSet = true;
}

bool OAIScheduleAEfile::is_contribution_receipt_date_Set() const{
    return m_contribution_receipt_date_isSet;
}

bool OAIScheduleAEfile::is_contribution_receipt_date_Valid() const{
    return m_contribution_receipt_date_isValid;
}

double OAIScheduleAEfile::getContributorAggregateYtd() const {
    return m_contributor_aggregate_ytd;
}
void OAIScheduleAEfile::setContributorAggregateYtd(const double &contributor_aggregate_ytd) {
    m_contributor_aggregate_ytd = contributor_aggregate_ytd;
    m_contributor_aggregate_ytd_isSet = true;
}

bool OAIScheduleAEfile::is_contributor_aggregate_ytd_Set() const{
    return m_contributor_aggregate_ytd_isSet;
}

bool OAIScheduleAEfile::is_contributor_aggregate_ytd_Valid() const{
    return m_contributor_aggregate_ytd_isValid;
}

QString OAIScheduleAEfile::getContributorCity() const {
    return m_contributor_city;
}
void OAIScheduleAEfile::setContributorCity(const QString &contributor_city) {
    m_contributor_city = contributor_city;
    m_contributor_city_isSet = true;
}

bool OAIScheduleAEfile::is_contributor_city_Set() const{
    return m_contributor_city_isSet;
}

bool OAIScheduleAEfile::is_contributor_city_Valid() const{
    return m_contributor_city_isValid;
}

QString OAIScheduleAEfile::getContributorEmployer() const {
    return m_contributor_employer;
}
void OAIScheduleAEfile::setContributorEmployer(const QString &contributor_employer) {
    m_contributor_employer = contributor_employer;
    m_contributor_employer_isSet = true;
}

bool OAIScheduleAEfile::is_contributor_employer_Set() const{
    return m_contributor_employer_isSet;
}

bool OAIScheduleAEfile::is_contributor_employer_Valid() const{
    return m_contributor_employer_isValid;
}

QString OAIScheduleAEfile::getContributorFirstName() const {
    return m_contributor_first_name;
}
void OAIScheduleAEfile::setContributorFirstName(const QString &contributor_first_name) {
    m_contributor_first_name = contributor_first_name;
    m_contributor_first_name_isSet = true;
}

bool OAIScheduleAEfile::is_contributor_first_name_Set() const{
    return m_contributor_first_name_isSet;
}

bool OAIScheduleAEfile::is_contributor_first_name_Valid() const{
    return m_contributor_first_name_isValid;
}

QString OAIScheduleAEfile::getContributorLastName() const {
    return m_contributor_last_name;
}
void OAIScheduleAEfile::setContributorLastName(const QString &contributor_last_name) {
    m_contributor_last_name = contributor_last_name;
    m_contributor_last_name_isSet = true;
}

bool OAIScheduleAEfile::is_contributor_last_name_Set() const{
    return m_contributor_last_name_isSet;
}

bool OAIScheduleAEfile::is_contributor_last_name_Valid() const{
    return m_contributor_last_name_isValid;
}

QString OAIScheduleAEfile::getContributorMiddleName() const {
    return m_contributor_middle_name;
}
void OAIScheduleAEfile::setContributorMiddleName(const QString &contributor_middle_name) {
    m_contributor_middle_name = contributor_middle_name;
    m_contributor_middle_name_isSet = true;
}

bool OAIScheduleAEfile::is_contributor_middle_name_Set() const{
    return m_contributor_middle_name_isSet;
}

bool OAIScheduleAEfile::is_contributor_middle_name_Valid() const{
    return m_contributor_middle_name_isValid;
}

QString OAIScheduleAEfile::getContributorName() const {
    return m_contributor_name;
}
void OAIScheduleAEfile::setContributorName(const QString &contributor_name) {
    m_contributor_name = contributor_name;
    m_contributor_name_isSet = true;
}

bool OAIScheduleAEfile::is_contributor_name_Set() const{
    return m_contributor_name_isSet;
}

bool OAIScheduleAEfile::is_contributor_name_Valid() const{
    return m_contributor_name_isValid;
}

QString OAIScheduleAEfile::getContributorOccupation() const {
    return m_contributor_occupation;
}
void OAIScheduleAEfile::setContributorOccupation(const QString &contributor_occupation) {
    m_contributor_occupation = contributor_occupation;
    m_contributor_occupation_isSet = true;
}

bool OAIScheduleAEfile::is_contributor_occupation_Set() const{
    return m_contributor_occupation_isSet;
}

bool OAIScheduleAEfile::is_contributor_occupation_Valid() const{
    return m_contributor_occupation_isValid;
}

QString OAIScheduleAEfile::getContributorPrefix() const {
    return m_contributor_prefix;
}
void OAIScheduleAEfile::setContributorPrefix(const QString &contributor_prefix) {
    m_contributor_prefix = contributor_prefix;
    m_contributor_prefix_isSet = true;
}

bool OAIScheduleAEfile::is_contributor_prefix_Set() const{
    return m_contributor_prefix_isSet;
}

bool OAIScheduleAEfile::is_contributor_prefix_Valid() const{
    return m_contributor_prefix_isValid;
}

QString OAIScheduleAEfile::getContributorState() const {
    return m_contributor_state;
}
void OAIScheduleAEfile::setContributorState(const QString &contributor_state) {
    m_contributor_state = contributor_state;
    m_contributor_state_isSet = true;
}

bool OAIScheduleAEfile::is_contributor_state_Set() const{
    return m_contributor_state_isSet;
}

bool OAIScheduleAEfile::is_contributor_state_Valid() const{
    return m_contributor_state_isValid;
}

QString OAIScheduleAEfile::getContributorSuffix() const {
    return m_contributor_suffix;
}
void OAIScheduleAEfile::setContributorSuffix(const QString &contributor_suffix) {
    m_contributor_suffix = contributor_suffix;
    m_contributor_suffix_isSet = true;
}

bool OAIScheduleAEfile::is_contributor_suffix_Set() const{
    return m_contributor_suffix_isSet;
}

bool OAIScheduleAEfile::is_contributor_suffix_Valid() const{
    return m_contributor_suffix_isValid;
}

QString OAIScheduleAEfile::getContributorZip() const {
    return m_contributor_zip;
}
void OAIScheduleAEfile::setContributorZip(const QString &contributor_zip) {
    m_contributor_zip = contributor_zip;
    m_contributor_zip_isSet = true;
}

bool OAIScheduleAEfile::is_contributor_zip_Set() const{
    return m_contributor_zip_isSet;
}

bool OAIScheduleAEfile::is_contributor_zip_Valid() const{
    return m_contributor_zip_isValid;
}

QString OAIScheduleAEfile::getCsvUrl() const {
    return m_csv_url;
}
void OAIScheduleAEfile::setCsvUrl(const QString &csv_url) {
    m_csv_url = csv_url;
    m_csv_url_isSet = true;
}

bool OAIScheduleAEfile::is_csv_url_Set() const{
    return m_csv_url_isSet;
}

bool OAIScheduleAEfile::is_csv_url_Valid() const{
    return m_csv_url_isValid;
}

qint32 OAIScheduleAEfile::getCycle() const {
    return m_cycle;
}
void OAIScheduleAEfile::setCycle(const qint32 &cycle) {
    m_cycle = cycle;
    m_cycle_isSet = true;
}

bool OAIScheduleAEfile::is_cycle_Set() const{
    return m_cycle_isSet;
}

bool OAIScheduleAEfile::is_cycle_Valid() const{
    return m_cycle_isValid;
}

QString OAIScheduleAEfile::getEntityType() const {
    return m_entity_type;
}
void OAIScheduleAEfile::setEntityType(const QString &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIScheduleAEfile::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIScheduleAEfile::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAIScheduleAEfile::getFecElectionTypeDesc() const {
    return m_fec_election_type_desc;
}
void OAIScheduleAEfile::setFecElectionTypeDesc(const QString &fec_election_type_desc) {
    m_fec_election_type_desc = fec_election_type_desc;
    m_fec_election_type_desc_isSet = true;
}

bool OAIScheduleAEfile::is_fec_election_type_desc_Set() const{
    return m_fec_election_type_desc_isSet;
}

bool OAIScheduleAEfile::is_fec_election_type_desc_Valid() const{
    return m_fec_election_type_desc_isValid;
}

QString OAIScheduleAEfile::getFecUrl() const {
    return m_fec_url;
}
void OAIScheduleAEfile::setFecUrl(const QString &fec_url) {
    m_fec_url = fec_url;
    m_fec_url_isSet = true;
}

bool OAIScheduleAEfile::is_fec_url_Set() const{
    return m_fec_url_isSet;
}

bool OAIScheduleAEfile::is_fec_url_Valid() const{
    return m_fec_url_isValid;
}

qint32 OAIScheduleAEfile::getFileNumber() const {
    return m_file_number;
}
void OAIScheduleAEfile::setFileNumber(const qint32 &file_number) {
    m_file_number = file_number;
    m_file_number_isSet = true;
}

bool OAIScheduleAEfile::is_file_number_Set() const{
    return m_file_number_isSet;
}

bool OAIScheduleAEfile::is_file_number_Valid() const{
    return m_file_number_isValid;
}

OAIEFilings OAIScheduleAEfile::getFiling() const {
    return m_filing;
}
void OAIScheduleAEfile::setFiling(const OAIEFilings &filing) {
    m_filing = filing;
    m_filing_isSet = true;
}

bool OAIScheduleAEfile::is_filing_Set() const{
    return m_filing_isSet;
}

bool OAIScheduleAEfile::is_filing_Valid() const{
    return m_filing_isValid;
}

QString OAIScheduleAEfile::getImageNumber() const {
    return m_image_number;
}
void OAIScheduleAEfile::setImageNumber(const QString &image_number) {
    m_image_number = image_number;
    m_image_number_isSet = true;
}

bool OAIScheduleAEfile::is_image_number_Set() const{
    return m_image_number_isSet;
}

bool OAIScheduleAEfile::is_image_number_Valid() const{
    return m_image_number_isValid;
}

QString OAIScheduleAEfile::getLineNumber() const {
    return m_line_number;
}
void OAIScheduleAEfile::setLineNumber(const QString &line_number) {
    m_line_number = line_number;
    m_line_number_isSet = true;
}

bool OAIScheduleAEfile::is_line_number_Set() const{
    return m_line_number_isSet;
}

bool OAIScheduleAEfile::is_line_number_Valid() const{
    return m_line_number_isValid;
}

QDateTime OAIScheduleAEfile::getLoadTimestamp() const {
    return m_load_timestamp;
}
void OAIScheduleAEfile::setLoadTimestamp(const QDateTime &load_timestamp) {
    m_load_timestamp = load_timestamp;
    m_load_timestamp_isSet = true;
}

bool OAIScheduleAEfile::is_load_timestamp_Set() const{
    return m_load_timestamp_isSet;
}

bool OAIScheduleAEfile::is_load_timestamp_Valid() const{
    return m_load_timestamp_isValid;
}

QString OAIScheduleAEfile::getMemoCode() const {
    return m_memo_code;
}
void OAIScheduleAEfile::setMemoCode(const QString &memo_code) {
    m_memo_code = memo_code;
    m_memo_code_isSet = true;
}

bool OAIScheduleAEfile::is_memo_code_Set() const{
    return m_memo_code_isSet;
}

bool OAIScheduleAEfile::is_memo_code_Valid() const{
    return m_memo_code_isValid;
}

QString OAIScheduleAEfile::getMemoText() const {
    return m_memo_text;
}
void OAIScheduleAEfile::setMemoText(const QString &memo_text) {
    m_memo_text = memo_text;
    m_memo_text_isSet = true;
}

bool OAIScheduleAEfile::is_memo_text_Set() const{
    return m_memo_text_isSet;
}

bool OAIScheduleAEfile::is_memo_text_Valid() const{
    return m_memo_text_isValid;
}

QString OAIScheduleAEfile::getPdfUrl() const {
    return m_pdf_url;
}
void OAIScheduleAEfile::setPdfUrl(const QString &pdf_url) {
    m_pdf_url = pdf_url;
    m_pdf_url_isSet = true;
}

bool OAIScheduleAEfile::is_pdf_url_Set() const{
    return m_pdf_url_isSet;
}

bool OAIScheduleAEfile::is_pdf_url_Valid() const{
    return m_pdf_url_isValid;
}

QString OAIScheduleAEfile::getPgo() const {
    return m_pgo;
}
void OAIScheduleAEfile::setPgo(const QString &pgo) {
    m_pgo = pgo;
    m_pgo_isSet = true;
}

bool OAIScheduleAEfile::is_pgo_Set() const{
    return m_pgo_isSet;
}

bool OAIScheduleAEfile::is_pgo_Valid() const{
    return m_pgo_isValid;
}

qint32 OAIScheduleAEfile::getRelatedLineNumber() const {
    return m_related_line_number;
}
void OAIScheduleAEfile::setRelatedLineNumber(const qint32 &related_line_number) {
    m_related_line_number = related_line_number;
    m_related_line_number_isSet = true;
}

bool OAIScheduleAEfile::is_related_line_number_Set() const{
    return m_related_line_number_isSet;
}

bool OAIScheduleAEfile::is_related_line_number_Valid() const{
    return m_related_line_number_isValid;
}

QString OAIScheduleAEfile::getReportType() const {
    return m_report_type;
}
void OAIScheduleAEfile::setReportType(const QString &report_type) {
    m_report_type = report_type;
    m_report_type_isSet = true;
}

bool OAIScheduleAEfile::is_report_type_Set() const{
    return m_report_type_isSet;
}

bool OAIScheduleAEfile::is_report_type_Valid() const{
    return m_report_type_isValid;
}

QString OAIScheduleAEfile::getTransactionId() const {
    return m_transaction_id;
}
void OAIScheduleAEfile::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAIScheduleAEfile::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAIScheduleAEfile::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

bool OAIScheduleAEfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amendment_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_back_reference_schedule_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_back_reference_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_beginning_image_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conduit_committee_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conduit_committee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conduit_committee_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conduit_committee_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conduit_committee_street1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conduit_committee_street2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conduit_committee_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contribution_receipt_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contribution_receipt_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor_aggregate_ytd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor_employer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor_middle_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor_occupation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_csv_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cycle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fec_election_type_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fec_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memo_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memo_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pdf_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pgo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_line_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduleAEfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_number_isValid && m_related_line_number_isValid && true;
}

} // namespace OpenAPI
