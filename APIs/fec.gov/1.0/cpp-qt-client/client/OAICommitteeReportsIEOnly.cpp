/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommitteeReportsIEOnly.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommitteeReportsIEOnly::OAICommitteeReportsIEOnly(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommitteeReportsIEOnly::OAICommitteeReportsIEOnly() {
    this->initializeModel();
}

OAICommitteeReportsIEOnly::~OAICommitteeReportsIEOnly() {}

void OAICommitteeReportsIEOnly::initializeModel() {

    m_beginning_image_number_isSet = false;
    m_beginning_image_number_isValid = false;

    m_committee_id_isSet = false;
    m_committee_id_isValid = false;

    m_committee_name_isSet = false;
    m_committee_name_isValid = false;

    m_committee_type_isSet = false;
    m_committee_type_isValid = false;

    m_coverage_end_date_isSet = false;
    m_coverage_end_date_isValid = false;

    m_coverage_start_date_isSet = false;
    m_coverage_start_date_isValid = false;

    m_csv_url_isSet = false;
    m_csv_url_isValid = false;

    m_cycle_isSet = false;
    m_cycle_isValid = false;

    m_document_description_isSet = false;
    m_document_description_isValid = false;

    m_end_image_number_isSet = false;
    m_end_image_number_isValid = false;

    m_fec_file_id_isSet = false;
    m_fec_file_id_isValid = false;

    m_fec_url_isSet = false;
    m_fec_url_isValid = false;

    m_independent_contributions_period_isSet = false;
    m_independent_contributions_period_isValid = false;

    m_independent_expenditures_period_isSet = false;
    m_independent_expenditures_period_isValid = false;

    m_is_amended_isSet = false;
    m_is_amended_isValid = false;

    m_means_filed_isSet = false;
    m_means_filed_isValid = false;

    m_pdf_url_isSet = false;
    m_pdf_url_isValid = false;

    m_receipt_date_isSet = false;
    m_receipt_date_isValid = false;

    m_report_form_isSet = false;
    m_report_form_isValid = false;

    m_report_type_isSet = false;
    m_report_type_isValid = false;

    m_report_type_full_isSet = false;
    m_report_type_full_isValid = false;

    m_report_year_isSet = false;
    m_report_year_isValid = false;
}

void OAICommitteeReportsIEOnly::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommitteeReportsIEOnly::fromJsonObject(QJsonObject json) {

    m_beginning_image_number_isValid = ::OpenAPI::fromJsonValue(m_beginning_image_number, json[QString("beginning_image_number")]);
    m_beginning_image_number_isSet = !json[QString("beginning_image_number")].isNull() && m_beginning_image_number_isValid;

    m_committee_id_isValid = ::OpenAPI::fromJsonValue(m_committee_id, json[QString("committee_id")]);
    m_committee_id_isSet = !json[QString("committee_id")].isNull() && m_committee_id_isValid;

    m_committee_name_isValid = ::OpenAPI::fromJsonValue(m_committee_name, json[QString("committee_name")]);
    m_committee_name_isSet = !json[QString("committee_name")].isNull() && m_committee_name_isValid;

    m_committee_type_isValid = ::OpenAPI::fromJsonValue(m_committee_type, json[QString("committee_type")]);
    m_committee_type_isSet = !json[QString("committee_type")].isNull() && m_committee_type_isValid;

    m_coverage_end_date_isValid = ::OpenAPI::fromJsonValue(m_coverage_end_date, json[QString("coverage_end_date")]);
    m_coverage_end_date_isSet = !json[QString("coverage_end_date")].isNull() && m_coverage_end_date_isValid;

    m_coverage_start_date_isValid = ::OpenAPI::fromJsonValue(m_coverage_start_date, json[QString("coverage_start_date")]);
    m_coverage_start_date_isSet = !json[QString("coverage_start_date")].isNull() && m_coverage_start_date_isValid;

    m_csv_url_isValid = ::OpenAPI::fromJsonValue(m_csv_url, json[QString("csv_url")]);
    m_csv_url_isSet = !json[QString("csv_url")].isNull() && m_csv_url_isValid;

    m_cycle_isValid = ::OpenAPI::fromJsonValue(m_cycle, json[QString("cycle")]);
    m_cycle_isSet = !json[QString("cycle")].isNull() && m_cycle_isValid;

    m_document_description_isValid = ::OpenAPI::fromJsonValue(m_document_description, json[QString("document_description")]);
    m_document_description_isSet = !json[QString("document_description")].isNull() && m_document_description_isValid;

    m_end_image_number_isValid = ::OpenAPI::fromJsonValue(m_end_image_number, json[QString("end_image_number")]);
    m_end_image_number_isSet = !json[QString("end_image_number")].isNull() && m_end_image_number_isValid;

    m_fec_file_id_isValid = ::OpenAPI::fromJsonValue(m_fec_file_id, json[QString("fec_file_id")]);
    m_fec_file_id_isSet = !json[QString("fec_file_id")].isNull() && m_fec_file_id_isValid;

    m_fec_url_isValid = ::OpenAPI::fromJsonValue(m_fec_url, json[QString("fec_url")]);
    m_fec_url_isSet = !json[QString("fec_url")].isNull() && m_fec_url_isValid;

    m_independent_contributions_period_isValid = ::OpenAPI::fromJsonValue(m_independent_contributions_period, json[QString("independent_contributions_period")]);
    m_independent_contributions_period_isSet = !json[QString("independent_contributions_period")].isNull() && m_independent_contributions_period_isValid;

    m_independent_expenditures_period_isValid = ::OpenAPI::fromJsonValue(m_independent_expenditures_period, json[QString("independent_expenditures_period")]);
    m_independent_expenditures_period_isSet = !json[QString("independent_expenditures_period")].isNull() && m_independent_expenditures_period_isValid;

    m_is_amended_isValid = ::OpenAPI::fromJsonValue(m_is_amended, json[QString("is_amended")]);
    m_is_amended_isSet = !json[QString("is_amended")].isNull() && m_is_amended_isValid;

    m_means_filed_isValid = ::OpenAPI::fromJsonValue(m_means_filed, json[QString("means_filed")]);
    m_means_filed_isSet = !json[QString("means_filed")].isNull() && m_means_filed_isValid;

    m_pdf_url_isValid = ::OpenAPI::fromJsonValue(m_pdf_url, json[QString("pdf_url")]);
    m_pdf_url_isSet = !json[QString("pdf_url")].isNull() && m_pdf_url_isValid;

    m_receipt_date_isValid = ::OpenAPI::fromJsonValue(m_receipt_date, json[QString("receipt_date")]);
    m_receipt_date_isSet = !json[QString("receipt_date")].isNull() && m_receipt_date_isValid;

    m_report_form_isValid = ::OpenAPI::fromJsonValue(m_report_form, json[QString("report_form")]);
    m_report_form_isSet = !json[QString("report_form")].isNull() && m_report_form_isValid;

    m_report_type_isValid = ::OpenAPI::fromJsonValue(m_report_type, json[QString("report_type")]);
    m_report_type_isSet = !json[QString("report_type")].isNull() && m_report_type_isValid;

    m_report_type_full_isValid = ::OpenAPI::fromJsonValue(m_report_type_full, json[QString("report_type_full")]);
    m_report_type_full_isSet = !json[QString("report_type_full")].isNull() && m_report_type_full_isValid;

    m_report_year_isValid = ::OpenAPI::fromJsonValue(m_report_year, json[QString("report_year")]);
    m_report_year_isSet = !json[QString("report_year")].isNull() && m_report_year_isValid;
}

QString OAICommitteeReportsIEOnly::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommitteeReportsIEOnly::asJsonObject() const {
    QJsonObject obj;
    if (m_beginning_image_number_isSet) {
        obj.insert(QString("beginning_image_number"), ::OpenAPI::toJsonValue(m_beginning_image_number));
    }
    if (m_committee_id_isSet) {
        obj.insert(QString("committee_id"), ::OpenAPI::toJsonValue(m_committee_id));
    }
    if (m_committee_name_isSet) {
        obj.insert(QString("committee_name"), ::OpenAPI::toJsonValue(m_committee_name));
    }
    if (m_committee_type_isSet) {
        obj.insert(QString("committee_type"), ::OpenAPI::toJsonValue(m_committee_type));
    }
    if (m_coverage_end_date_isSet) {
        obj.insert(QString("coverage_end_date"), ::OpenAPI::toJsonValue(m_coverage_end_date));
    }
    if (m_coverage_start_date_isSet) {
        obj.insert(QString("coverage_start_date"), ::OpenAPI::toJsonValue(m_coverage_start_date));
    }
    if (m_csv_url_isSet) {
        obj.insert(QString("csv_url"), ::OpenAPI::toJsonValue(m_csv_url));
    }
    if (m_cycle_isSet) {
        obj.insert(QString("cycle"), ::OpenAPI::toJsonValue(m_cycle));
    }
    if (m_document_description_isSet) {
        obj.insert(QString("document_description"), ::OpenAPI::toJsonValue(m_document_description));
    }
    if (m_end_image_number_isSet) {
        obj.insert(QString("end_image_number"), ::OpenAPI::toJsonValue(m_end_image_number));
    }
    if (m_fec_file_id_isSet) {
        obj.insert(QString("fec_file_id"), ::OpenAPI::toJsonValue(m_fec_file_id));
    }
    if (m_fec_url_isSet) {
        obj.insert(QString("fec_url"), ::OpenAPI::toJsonValue(m_fec_url));
    }
    if (m_independent_contributions_period_isSet) {
        obj.insert(QString("independent_contributions_period"), ::OpenAPI::toJsonValue(m_independent_contributions_period));
    }
    if (m_independent_expenditures_period_isSet) {
        obj.insert(QString("independent_expenditures_period"), ::OpenAPI::toJsonValue(m_independent_expenditures_period));
    }
    if (m_is_amended_isSet) {
        obj.insert(QString("is_amended"), ::OpenAPI::toJsonValue(m_is_amended));
    }
    if (m_means_filed_isSet) {
        obj.insert(QString("means_filed"), ::OpenAPI::toJsonValue(m_means_filed));
    }
    if (m_pdf_url_isSet) {
        obj.insert(QString("pdf_url"), ::OpenAPI::toJsonValue(m_pdf_url));
    }
    if (m_receipt_date_isSet) {
        obj.insert(QString("receipt_date"), ::OpenAPI::toJsonValue(m_receipt_date));
    }
    if (m_report_form_isSet) {
        obj.insert(QString("report_form"), ::OpenAPI::toJsonValue(m_report_form));
    }
    if (m_report_type_isSet) {
        obj.insert(QString("report_type"), ::OpenAPI::toJsonValue(m_report_type));
    }
    if (m_report_type_full_isSet) {
        obj.insert(QString("report_type_full"), ::OpenAPI::toJsonValue(m_report_type_full));
    }
    if (m_report_year_isSet) {
        obj.insert(QString("report_year"), ::OpenAPI::toJsonValue(m_report_year));
    }
    return obj;
}

QString OAICommitteeReportsIEOnly::getBeginningImageNumber() const {
    return m_beginning_image_number;
}
void OAICommitteeReportsIEOnly::setBeginningImageNumber(const QString &beginning_image_number) {
    m_beginning_image_number = beginning_image_number;
    m_beginning_image_number_isSet = true;
}

bool OAICommitteeReportsIEOnly::is_beginning_image_number_Set() const{
    return m_beginning_image_number_isSet;
}

bool OAICommitteeReportsIEOnly::is_beginning_image_number_Valid() const{
    return m_beginning_image_number_isValid;
}

QString OAICommitteeReportsIEOnly::getCommitteeId() const {
    return m_committee_id;
}
void OAICommitteeReportsIEOnly::setCommitteeId(const QString &committee_id) {
    m_committee_id = committee_id;
    m_committee_id_isSet = true;
}

bool OAICommitteeReportsIEOnly::is_committee_id_Set() const{
    return m_committee_id_isSet;
}

bool OAICommitteeReportsIEOnly::is_committee_id_Valid() const{
    return m_committee_id_isValid;
}

QString OAICommitteeReportsIEOnly::getCommitteeName() const {
    return m_committee_name;
}
void OAICommitteeReportsIEOnly::setCommitteeName(const QString &committee_name) {
    m_committee_name = committee_name;
    m_committee_name_isSet = true;
}

bool OAICommitteeReportsIEOnly::is_committee_name_Set() const{
    return m_committee_name_isSet;
}

bool OAICommitteeReportsIEOnly::is_committee_name_Valid() const{
    return m_committee_name_isValid;
}

QString OAICommitteeReportsIEOnly::getCommitteeType() const {
    return m_committee_type;
}
void OAICommitteeReportsIEOnly::setCommitteeType(const QString &committee_type) {
    m_committee_type = committee_type;
    m_committee_type_isSet = true;
}

bool OAICommitteeReportsIEOnly::is_committee_type_Set() const{
    return m_committee_type_isSet;
}

bool OAICommitteeReportsIEOnly::is_committee_type_Valid() const{
    return m_committee_type_isValid;
}

QDateTime OAICommitteeReportsIEOnly::getCoverageEndDate() const {
    return m_coverage_end_date;
}
void OAICommitteeReportsIEOnly::setCoverageEndDate(const QDateTime &coverage_end_date) {
    m_coverage_end_date = coverage_end_date;
    m_coverage_end_date_isSet = true;
}

bool OAICommitteeReportsIEOnly::is_coverage_end_date_Set() const{
    return m_coverage_end_date_isSet;
}

bool OAICommitteeReportsIEOnly::is_coverage_end_date_Valid() const{
    return m_coverage_end_date_isValid;
}

QDateTime OAICommitteeReportsIEOnly::getCoverageStartDate() const {
    return m_coverage_start_date;
}
void OAICommitteeReportsIEOnly::setCoverageStartDate(const QDateTime &coverage_start_date) {
    m_coverage_start_date = coverage_start_date;
    m_coverage_start_date_isSet = true;
}

bool OAICommitteeReportsIEOnly::is_coverage_start_date_Set() const{
    return m_coverage_start_date_isSet;
}

bool OAICommitteeReportsIEOnly::is_coverage_start_date_Valid() const{
    return m_coverage_start_date_isValid;
}

QString OAICommitteeReportsIEOnly::getCsvUrl() const {
    return m_csv_url;
}
void OAICommitteeReportsIEOnly::setCsvUrl(const QString &csv_url) {
    m_csv_url = csv_url;
    m_csv_url_isSet = true;
}

bool OAICommitteeReportsIEOnly::is_csv_url_Set() const{
    return m_csv_url_isSet;
}

bool OAICommitteeReportsIEOnly::is_csv_url_Valid() const{
    return m_csv_url_isValid;
}

qint32 OAICommitteeReportsIEOnly::getCycle() const {
    return m_cycle;
}
void OAICommitteeReportsIEOnly::setCycle(const qint32 &cycle) {
    m_cycle = cycle;
    m_cycle_isSet = true;
}

bool OAICommitteeReportsIEOnly::is_cycle_Set() const{
    return m_cycle_isSet;
}

bool OAICommitteeReportsIEOnly::is_cycle_Valid() const{
    return m_cycle_isValid;
}

QString OAICommitteeReportsIEOnly::getDocumentDescription() const {
    return m_document_description;
}
void OAICommitteeReportsIEOnly::setDocumentDescription(const QString &document_description) {
    m_document_description = document_description;
    m_document_description_isSet = true;
}

bool OAICommitteeReportsIEOnly::is_document_description_Set() const{
    return m_document_description_isSet;
}

bool OAICommitteeReportsIEOnly::is_document_description_Valid() const{
    return m_document_description_isValid;
}

QString OAICommitteeReportsIEOnly::getEndImageNumber() const {
    return m_end_image_number;
}
void OAICommitteeReportsIEOnly::setEndImageNumber(const QString &end_image_number) {
    m_end_image_number = end_image_number;
    m_end_image_number_isSet = true;
}

bool OAICommitteeReportsIEOnly::is_end_image_number_Set() const{
    return m_end_image_number_isSet;
}

bool OAICommitteeReportsIEOnly::is_end_image_number_Valid() const{
    return m_end_image_number_isValid;
}

QString OAICommitteeReportsIEOnly::getFecFileId() const {
    return m_fec_file_id;
}
void OAICommitteeReportsIEOnly::setFecFileId(const QString &fec_file_id) {
    m_fec_file_id = fec_file_id;
    m_fec_file_id_isSet = true;
}

bool OAICommitteeReportsIEOnly::is_fec_file_id_Set() const{
    return m_fec_file_id_isSet;
}

bool OAICommitteeReportsIEOnly::is_fec_file_id_Valid() const{
    return m_fec_file_id_isValid;
}

QString OAICommitteeReportsIEOnly::getFecUrl() const {
    return m_fec_url;
}
void OAICommitteeReportsIEOnly::setFecUrl(const QString &fec_url) {
    m_fec_url = fec_url;
    m_fec_url_isSet = true;
}

bool OAICommitteeReportsIEOnly::is_fec_url_Set() const{
    return m_fec_url_isSet;
}

bool OAICommitteeReportsIEOnly::is_fec_url_Valid() const{
    return m_fec_url_isValid;
}

double OAICommitteeReportsIEOnly::getIndependentContributionsPeriod() const {
    return m_independent_contributions_period;
}
void OAICommitteeReportsIEOnly::setIndependentContributionsPeriod(const double &independent_contributions_period) {
    m_independent_contributions_period = independent_contributions_period;
    m_independent_contributions_period_isSet = true;
}

bool OAICommitteeReportsIEOnly::is_independent_contributions_period_Set() const{
    return m_independent_contributions_period_isSet;
}

bool OAICommitteeReportsIEOnly::is_independent_contributions_period_Valid() const{
    return m_independent_contributions_period_isValid;
}

double OAICommitteeReportsIEOnly::getIndependentExpendituresPeriod() const {
    return m_independent_expenditures_period;
}
void OAICommitteeReportsIEOnly::setIndependentExpendituresPeriod(const double &independent_expenditures_period) {
    m_independent_expenditures_period = independent_expenditures_period;
    m_independent_expenditures_period_isSet = true;
}

bool OAICommitteeReportsIEOnly::is_independent_expenditures_period_Set() const{
    return m_independent_expenditures_period_isSet;
}

bool OAICommitteeReportsIEOnly::is_independent_expenditures_period_Valid() const{
    return m_independent_expenditures_period_isValid;
}

bool OAICommitteeReportsIEOnly::isIsAmended() const {
    return m_is_amended;
}
void OAICommitteeReportsIEOnly::setIsAmended(const bool &is_amended) {
    m_is_amended = is_amended;
    m_is_amended_isSet = true;
}

bool OAICommitteeReportsIEOnly::is_is_amended_Set() const{
    return m_is_amended_isSet;
}

bool OAICommitteeReportsIEOnly::is_is_amended_Valid() const{
    return m_is_amended_isValid;
}

QString OAICommitteeReportsIEOnly::getMeansFiled() const {
    return m_means_filed;
}
void OAICommitteeReportsIEOnly::setMeansFiled(const QString &means_filed) {
    m_means_filed = means_filed;
    m_means_filed_isSet = true;
}

bool OAICommitteeReportsIEOnly::is_means_filed_Set() const{
    return m_means_filed_isSet;
}

bool OAICommitteeReportsIEOnly::is_means_filed_Valid() const{
    return m_means_filed_isValid;
}

QString OAICommitteeReportsIEOnly::getPdfUrl() const {
    return m_pdf_url;
}
void OAICommitteeReportsIEOnly::setPdfUrl(const QString &pdf_url) {
    m_pdf_url = pdf_url;
    m_pdf_url_isSet = true;
}

bool OAICommitteeReportsIEOnly::is_pdf_url_Set() const{
    return m_pdf_url_isSet;
}

bool OAICommitteeReportsIEOnly::is_pdf_url_Valid() const{
    return m_pdf_url_isValid;
}

QDate OAICommitteeReportsIEOnly::getReceiptDate() const {
    return m_receipt_date;
}
void OAICommitteeReportsIEOnly::setReceiptDate(const QDate &receipt_date) {
    m_receipt_date = receipt_date;
    m_receipt_date_isSet = true;
}

bool OAICommitteeReportsIEOnly::is_receipt_date_Set() const{
    return m_receipt_date_isSet;
}

bool OAICommitteeReportsIEOnly::is_receipt_date_Valid() const{
    return m_receipt_date_isValid;
}

QString OAICommitteeReportsIEOnly::getReportForm() const {
    return m_report_form;
}
void OAICommitteeReportsIEOnly::setReportForm(const QString &report_form) {
    m_report_form = report_form;
    m_report_form_isSet = true;
}

bool OAICommitteeReportsIEOnly::is_report_form_Set() const{
    return m_report_form_isSet;
}

bool OAICommitteeReportsIEOnly::is_report_form_Valid() const{
    return m_report_form_isValid;
}

QString OAICommitteeReportsIEOnly::getReportType() const {
    return m_report_type;
}
void OAICommitteeReportsIEOnly::setReportType(const QString &report_type) {
    m_report_type = report_type;
    m_report_type_isSet = true;
}

bool OAICommitteeReportsIEOnly::is_report_type_Set() const{
    return m_report_type_isSet;
}

bool OAICommitteeReportsIEOnly::is_report_type_Valid() const{
    return m_report_type_isValid;
}

QString OAICommitteeReportsIEOnly::getReportTypeFull() const {
    return m_report_type_full;
}
void OAICommitteeReportsIEOnly::setReportTypeFull(const QString &report_type_full) {
    m_report_type_full = report_type_full;
    m_report_type_full_isSet = true;
}

bool OAICommitteeReportsIEOnly::is_report_type_full_Set() const{
    return m_report_type_full_isSet;
}

bool OAICommitteeReportsIEOnly::is_report_type_full_Valid() const{
    return m_report_type_full_isValid;
}

qint32 OAICommitteeReportsIEOnly::getReportYear() const {
    return m_report_year;
}
void OAICommitteeReportsIEOnly::setReportYear(const qint32 &report_year) {
    m_report_year = report_year;
    m_report_year_isSet = true;
}

bool OAICommitteeReportsIEOnly::is_report_year_Set() const{
    return m_report_year_isSet;
}

bool OAICommitteeReportsIEOnly::is_report_year_Valid() const{
    return m_report_year_isValid;
}

bool OAICommitteeReportsIEOnly::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_beginning_image_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coverage_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coverage_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_csv_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cycle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_image_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fec_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fec_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_independent_contributions_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_independent_expenditures_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_amended_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_means_filed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pdf_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_form_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_type_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommitteeReportsIEOnly::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
