/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_legal_search__get_default_response_admin_fines_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_legal_search__get_default_response_admin_fines_inner::OAI_legal_search__get_default_response_admin_fines_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_legal_search__get_default_response_admin_fines_inner::OAI_legal_search__get_default_response_admin_fines_inner() {
    this->initializeModel();
}

OAI_legal_search__get_default_response_admin_fines_inner::~OAI_legal_search__get_default_response_admin_fines_inner() {}

void OAI_legal_search__get_default_response_admin_fines_inner::initializeModel() {

    m_challenge_outcome_isSet = false;
    m_challenge_outcome_isValid = false;

    m_challenge_receipt_date_isSet = false;
    m_challenge_receipt_date_isValid = false;

    m_check_amount_isSet = false;
    m_check_amount_isValid = false;

    m_commission_votes_isSet = false;
    m_commission_votes_isValid = false;

    m_committee_id_isSet = false;
    m_committee_id_isValid = false;

    m_doc_id_isSet = false;
    m_doc_id_isValid = false;

    m_document_highlights_isSet = false;
    m_document_highlights_isValid = false;

    m_documents_isSet = false;
    m_documents_isValid = false;

    m_final_determination_amount_isSet = false;
    m_final_determination_amount_isValid = false;

    m_final_determination_date_isSet = false;
    m_final_determination_date_isValid = false;

    m_highlights_isSet = false;
    m_highlights_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_r_false_isSet = false;
    m_r_false_isValid = false;

    m_petition_court_decision_date_isSet = false;
    m_petition_court_decision_date_isValid = false;

    m_petition_court_filing_date_isSet = false;
    m_petition_court_filing_date_isValid = false;

    m_reason_to_believe_action_date_isSet = false;
    m_reason_to_believe_action_date_isValid = false;

    m_reason_to_believe_fine_amount_isSet = false;
    m_reason_to_believe_fine_amount_isValid = false;

    m_report_type_isSet = false;
    m_report_type_isValid = false;

    m_report_year_isSet = false;
    m_report_year_isValid = false;

    m_treasury_referral_amount_isSet = false;
    m_treasury_referral_amount_isValid = false;

    m_treasury_referral_date_isSet = false;
    m_treasury_referral_date_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAI_legal_search__get_default_response_admin_fines_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_legal_search__get_default_response_admin_fines_inner::fromJsonObject(QJsonObject json) {

    m_challenge_outcome_isValid = ::OpenAPI::fromJsonValue(m_challenge_outcome, json[QString("challenge_outcome")]);
    m_challenge_outcome_isSet = !json[QString("challenge_outcome")].isNull() && m_challenge_outcome_isValid;

    m_challenge_receipt_date_isValid = ::OpenAPI::fromJsonValue(m_challenge_receipt_date, json[QString("challenge_receipt_date")]);
    m_challenge_receipt_date_isSet = !json[QString("challenge_receipt_date")].isNull() && m_challenge_receipt_date_isValid;

    m_check_amount_isValid = ::OpenAPI::fromJsonValue(m_check_amount, json[QString("check_amount")]);
    m_check_amount_isSet = !json[QString("check_amount")].isNull() && m_check_amount_isValid;

    m_commission_votes_isValid = ::OpenAPI::fromJsonValue(m_commission_votes, json[QString("commission_votes")]);
    m_commission_votes_isSet = !json[QString("commission_votes")].isNull() && m_commission_votes_isValid;

    m_committee_id_isValid = ::OpenAPI::fromJsonValue(m_committee_id, json[QString("committee_id")]);
    m_committee_id_isSet = !json[QString("committee_id")].isNull() && m_committee_id_isValid;

    m_doc_id_isValid = ::OpenAPI::fromJsonValue(m_doc_id, json[QString("doc_id")]);
    m_doc_id_isSet = !json[QString("doc_id")].isNull() && m_doc_id_isValid;

    m_document_highlights_isValid = ::OpenAPI::fromJsonValue(m_document_highlights, json[QString("document_highlights")]);
    m_document_highlights_isSet = !json[QString("document_highlights")].isNull() && m_document_highlights_isValid;

    m_documents_isValid = ::OpenAPI::fromJsonValue(m_documents, json[QString("documents")]);
    m_documents_isSet = !json[QString("documents")].isNull() && m_documents_isValid;

    m_final_determination_amount_isValid = ::OpenAPI::fromJsonValue(m_final_determination_amount, json[QString("final_determination_amount")]);
    m_final_determination_amount_isSet = !json[QString("final_determination_amount")].isNull() && m_final_determination_amount_isValid;

    m_final_determination_date_isValid = ::OpenAPI::fromJsonValue(m_final_determination_date, json[QString("final_determination_date")]);
    m_final_determination_date_isSet = !json[QString("final_determination_date")].isNull() && m_final_determination_date_isValid;

    m_highlights_isValid = ::OpenAPI::fromJsonValue(m_highlights, json[QString("highlights")]);
    m_highlights_isSet = !json[QString("highlights")].isNull() && m_highlights_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_r_false_isValid = ::OpenAPI::fromJsonValue(m_r_false, json[QString("false")]);
    m_r_false_isSet = !json[QString("false")].isNull() && m_r_false_isValid;

    m_petition_court_decision_date_isValid = ::OpenAPI::fromJsonValue(m_petition_court_decision_date, json[QString("petition_court_decision_date")]);
    m_petition_court_decision_date_isSet = !json[QString("petition_court_decision_date")].isNull() && m_petition_court_decision_date_isValid;

    m_petition_court_filing_date_isValid = ::OpenAPI::fromJsonValue(m_petition_court_filing_date, json[QString("petition_court_filing_date")]);
    m_petition_court_filing_date_isSet = !json[QString("petition_court_filing_date")].isNull() && m_petition_court_filing_date_isValid;

    m_reason_to_believe_action_date_isValid = ::OpenAPI::fromJsonValue(m_reason_to_believe_action_date, json[QString("reason_to_believe_action_date")]);
    m_reason_to_believe_action_date_isSet = !json[QString("reason_to_believe_action_date")].isNull() && m_reason_to_believe_action_date_isValid;

    m_reason_to_believe_fine_amount_isValid = ::OpenAPI::fromJsonValue(m_reason_to_believe_fine_amount, json[QString("reason_to_believe_fine_amount")]);
    m_reason_to_believe_fine_amount_isSet = !json[QString("reason_to_believe_fine_amount")].isNull() && m_reason_to_believe_fine_amount_isValid;

    m_report_type_isValid = ::OpenAPI::fromJsonValue(m_report_type, json[QString("report_type")]);
    m_report_type_isSet = !json[QString("report_type")].isNull() && m_report_type_isValid;

    m_report_year_isValid = ::OpenAPI::fromJsonValue(m_report_year, json[QString("report_year")]);
    m_report_year_isSet = !json[QString("report_year")].isNull() && m_report_year_isValid;

    m_treasury_referral_amount_isValid = ::OpenAPI::fromJsonValue(m_treasury_referral_amount, json[QString("treasury_referral_amount")]);
    m_treasury_referral_amount_isSet = !json[QString("treasury_referral_amount")].isNull() && m_treasury_referral_amount_isValid;

    m_treasury_referral_date_isValid = ::OpenAPI::fromJsonValue(m_treasury_referral_date, json[QString("treasury_referral_date")]);
    m_treasury_referral_date_isSet = !json[QString("treasury_referral_date")].isNull() && m_treasury_referral_date_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAI_legal_search__get_default_response_admin_fines_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_legal_search__get_default_response_admin_fines_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_challenge_outcome_isSet) {
        obj.insert(QString("challenge_outcome"), ::OpenAPI::toJsonValue(m_challenge_outcome));
    }
    if (m_challenge_receipt_date_isSet) {
        obj.insert(QString("challenge_receipt_date"), ::OpenAPI::toJsonValue(m_challenge_receipt_date));
    }
    if (m_check_amount_isSet) {
        obj.insert(QString("check_amount"), ::OpenAPI::toJsonValue(m_check_amount));
    }
    if (m_commission_votes.size() > 0) {
        obj.insert(QString("commission_votes"), ::OpenAPI::toJsonValue(m_commission_votes));
    }
    if (m_committee_id_isSet) {
        obj.insert(QString("committee_id"), ::OpenAPI::toJsonValue(m_committee_id));
    }
    if (m_doc_id_isSet) {
        obj.insert(QString("doc_id"), ::OpenAPI::toJsonValue(m_doc_id));
    }
    if (m_document_highlights_isSet) {
        obj.insert(QString("document_highlights"), ::OpenAPI::toJsonValue(m_document_highlights));
    }
    if (m_documents.size() > 0) {
        obj.insert(QString("documents"), ::OpenAPI::toJsonValue(m_documents));
    }
    if (m_final_determination_amount_isSet) {
        obj.insert(QString("final_determination_amount"), ::OpenAPI::toJsonValue(m_final_determination_amount));
    }
    if (m_final_determination_date_isSet) {
        obj.insert(QString("final_determination_date"), ::OpenAPI::toJsonValue(m_final_determination_date));
    }
    if (m_highlights.size() > 0) {
        obj.insert(QString("highlights"), ::OpenAPI::toJsonValue(m_highlights));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_r_false_isSet) {
        obj.insert(QString("false"), ::OpenAPI::toJsonValue(m_r_false));
    }
    if (m_petition_court_decision_date_isSet) {
        obj.insert(QString("petition_court_decision_date"), ::OpenAPI::toJsonValue(m_petition_court_decision_date));
    }
    if (m_petition_court_filing_date_isSet) {
        obj.insert(QString("petition_court_filing_date"), ::OpenAPI::toJsonValue(m_petition_court_filing_date));
    }
    if (m_reason_to_believe_action_date_isSet) {
        obj.insert(QString("reason_to_believe_action_date"), ::OpenAPI::toJsonValue(m_reason_to_believe_action_date));
    }
    if (m_reason_to_believe_fine_amount_isSet) {
        obj.insert(QString("reason_to_believe_fine_amount"), ::OpenAPI::toJsonValue(m_reason_to_believe_fine_amount));
    }
    if (m_report_type_isSet) {
        obj.insert(QString("report_type"), ::OpenAPI::toJsonValue(m_report_type));
    }
    if (m_report_year_isSet) {
        obj.insert(QString("report_year"), ::OpenAPI::toJsonValue(m_report_year));
    }
    if (m_treasury_referral_amount_isSet) {
        obj.insert(QString("treasury_referral_amount"), ::OpenAPI::toJsonValue(m_treasury_referral_amount));
    }
    if (m_treasury_referral_date_isSet) {
        obj.insert(QString("treasury_referral_date"), ::OpenAPI::toJsonValue(m_treasury_referral_date));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAI_legal_search__get_default_response_admin_fines_inner::getChallengeOutcome() const {
    return m_challenge_outcome;
}
void OAI_legal_search__get_default_response_admin_fines_inner::setChallengeOutcome(const QString &challenge_outcome) {
    m_challenge_outcome = challenge_outcome;
    m_challenge_outcome_isSet = true;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_challenge_outcome_Set() const{
    return m_challenge_outcome_isSet;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_challenge_outcome_Valid() const{
    return m_challenge_outcome_isValid;
}

QDate OAI_legal_search__get_default_response_admin_fines_inner::getChallengeReceiptDate() const {
    return m_challenge_receipt_date;
}
void OAI_legal_search__get_default_response_admin_fines_inner::setChallengeReceiptDate(const QDate &challenge_receipt_date) {
    m_challenge_receipt_date = challenge_receipt_date;
    m_challenge_receipt_date_isSet = true;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_challenge_receipt_date_Set() const{
    return m_challenge_receipt_date_isSet;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_challenge_receipt_date_Valid() const{
    return m_challenge_receipt_date_isValid;
}

double OAI_legal_search__get_default_response_admin_fines_inner::getCheckAmount() const {
    return m_check_amount;
}
void OAI_legal_search__get_default_response_admin_fines_inner::setCheckAmount(const double &check_amount) {
    m_check_amount = check_amount;
    m_check_amount_isSet = true;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_check_amount_Set() const{
    return m_check_amount_isSet;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_check_amount_Valid() const{
    return m_check_amount_isValid;
}

QList<OAI_legal_search__get_default_response_admin_fines_inner_commission_votes_inner> OAI_legal_search__get_default_response_admin_fines_inner::getCommissionVotes() const {
    return m_commission_votes;
}
void OAI_legal_search__get_default_response_admin_fines_inner::setCommissionVotes(const QList<OAI_legal_search__get_default_response_admin_fines_inner_commission_votes_inner> &commission_votes) {
    m_commission_votes = commission_votes;
    m_commission_votes_isSet = true;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_commission_votes_Set() const{
    return m_commission_votes_isSet;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_commission_votes_Valid() const{
    return m_commission_votes_isValid;
}

QString OAI_legal_search__get_default_response_admin_fines_inner::getCommitteeId() const {
    return m_committee_id;
}
void OAI_legal_search__get_default_response_admin_fines_inner::setCommitteeId(const QString &committee_id) {
    m_committee_id = committee_id;
    m_committee_id_isSet = true;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_committee_id_Set() const{
    return m_committee_id_isSet;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_committee_id_Valid() const{
    return m_committee_id_isValid;
}

QString OAI_legal_search__get_default_response_admin_fines_inner::getDocId() const {
    return m_doc_id;
}
void OAI_legal_search__get_default_response_admin_fines_inner::setDocId(const QString &doc_id) {
    m_doc_id = doc_id;
    m_doc_id_isSet = true;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_doc_id_Set() const{
    return m_doc_id_isSet;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_doc_id_Valid() const{
    return m_doc_id_isValid;
}

OAIObject OAI_legal_search__get_default_response_admin_fines_inner::getDocumentHighlights() const {
    return m_document_highlights;
}
void OAI_legal_search__get_default_response_admin_fines_inner::setDocumentHighlights(const OAIObject &document_highlights) {
    m_document_highlights = document_highlights;
    m_document_highlights_isSet = true;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_document_highlights_Set() const{
    return m_document_highlights_isSet;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_document_highlights_Valid() const{
    return m_document_highlights_isValid;
}

QList<OAI_legal_search__get_default_response_admin_fines_inner_documents_inner> OAI_legal_search__get_default_response_admin_fines_inner::getDocuments() const {
    return m_documents;
}
void OAI_legal_search__get_default_response_admin_fines_inner::setDocuments(const QList<OAI_legal_search__get_default_response_admin_fines_inner_documents_inner> &documents) {
    m_documents = documents;
    m_documents_isSet = true;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_documents_Set() const{
    return m_documents_isSet;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_documents_Valid() const{
    return m_documents_isValid;
}

double OAI_legal_search__get_default_response_admin_fines_inner::getFinalDeterminationAmount() const {
    return m_final_determination_amount;
}
void OAI_legal_search__get_default_response_admin_fines_inner::setFinalDeterminationAmount(const double &final_determination_amount) {
    m_final_determination_amount = final_determination_amount;
    m_final_determination_amount_isSet = true;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_final_determination_amount_Set() const{
    return m_final_determination_amount_isSet;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_final_determination_amount_Valid() const{
    return m_final_determination_amount_isValid;
}

QDate OAI_legal_search__get_default_response_admin_fines_inner::getFinalDeterminationDate() const {
    return m_final_determination_date;
}
void OAI_legal_search__get_default_response_admin_fines_inner::setFinalDeterminationDate(const QDate &final_determination_date) {
    m_final_determination_date = final_determination_date;
    m_final_determination_date_isSet = true;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_final_determination_date_Set() const{
    return m_final_determination_date_isSet;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_final_determination_date_Valid() const{
    return m_final_determination_date_isValid;
}

QList<QString> OAI_legal_search__get_default_response_admin_fines_inner::getHighlights() const {
    return m_highlights;
}
void OAI_legal_search__get_default_response_admin_fines_inner::setHighlights(const QList<QString> &highlights) {
    m_highlights = highlights;
    m_highlights_isSet = true;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_highlights_Set() const{
    return m_highlights_isSet;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_highlights_Valid() const{
    return m_highlights_isValid;
}

QString OAI_legal_search__get_default_response_admin_fines_inner::getName() const {
    return m_name;
}
void OAI_legal_search__get_default_response_admin_fines_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAI_legal_search__get_default_response_admin_fines_inner::getRFalse() const {
    return m_r_false;
}
void OAI_legal_search__get_default_response_admin_fines_inner::setRFalse(const QString &r_false) {
    m_r_false = r_false;
    m_r_false_isSet = true;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_r_false_Set() const{
    return m_r_false_isSet;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_r_false_Valid() const{
    return m_r_false_isValid;
}

QDate OAI_legal_search__get_default_response_admin_fines_inner::getPetitionCourtDecisionDate() const {
    return m_petition_court_decision_date;
}
void OAI_legal_search__get_default_response_admin_fines_inner::setPetitionCourtDecisionDate(const QDate &petition_court_decision_date) {
    m_petition_court_decision_date = petition_court_decision_date;
    m_petition_court_decision_date_isSet = true;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_petition_court_decision_date_Set() const{
    return m_petition_court_decision_date_isSet;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_petition_court_decision_date_Valid() const{
    return m_petition_court_decision_date_isValid;
}

QDate OAI_legal_search__get_default_response_admin_fines_inner::getPetitionCourtFilingDate() const {
    return m_petition_court_filing_date;
}
void OAI_legal_search__get_default_response_admin_fines_inner::setPetitionCourtFilingDate(const QDate &petition_court_filing_date) {
    m_petition_court_filing_date = petition_court_filing_date;
    m_petition_court_filing_date_isSet = true;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_petition_court_filing_date_Set() const{
    return m_petition_court_filing_date_isSet;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_petition_court_filing_date_Valid() const{
    return m_petition_court_filing_date_isValid;
}

QDate OAI_legal_search__get_default_response_admin_fines_inner::getReasonToBelieveActionDate() const {
    return m_reason_to_believe_action_date;
}
void OAI_legal_search__get_default_response_admin_fines_inner::setReasonToBelieveActionDate(const QDate &reason_to_believe_action_date) {
    m_reason_to_believe_action_date = reason_to_believe_action_date;
    m_reason_to_believe_action_date_isSet = true;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_reason_to_believe_action_date_Set() const{
    return m_reason_to_believe_action_date_isSet;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_reason_to_believe_action_date_Valid() const{
    return m_reason_to_believe_action_date_isValid;
}

double OAI_legal_search__get_default_response_admin_fines_inner::getReasonToBelieveFineAmount() const {
    return m_reason_to_believe_fine_amount;
}
void OAI_legal_search__get_default_response_admin_fines_inner::setReasonToBelieveFineAmount(const double &reason_to_believe_fine_amount) {
    m_reason_to_believe_fine_amount = reason_to_believe_fine_amount;
    m_reason_to_believe_fine_amount_isSet = true;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_reason_to_believe_fine_amount_Set() const{
    return m_reason_to_believe_fine_amount_isSet;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_reason_to_believe_fine_amount_Valid() const{
    return m_reason_to_believe_fine_amount_isValid;
}

QString OAI_legal_search__get_default_response_admin_fines_inner::getReportType() const {
    return m_report_type;
}
void OAI_legal_search__get_default_response_admin_fines_inner::setReportType(const QString &report_type) {
    m_report_type = report_type;
    m_report_type_isSet = true;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_report_type_Set() const{
    return m_report_type_isSet;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_report_type_Valid() const{
    return m_report_type_isValid;
}

QString OAI_legal_search__get_default_response_admin_fines_inner::getReportYear() const {
    return m_report_year;
}
void OAI_legal_search__get_default_response_admin_fines_inner::setReportYear(const QString &report_year) {
    m_report_year = report_year;
    m_report_year_isSet = true;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_report_year_Set() const{
    return m_report_year_isSet;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_report_year_Valid() const{
    return m_report_year_isValid;
}

double OAI_legal_search__get_default_response_admin_fines_inner::getTreasuryReferralAmount() const {
    return m_treasury_referral_amount;
}
void OAI_legal_search__get_default_response_admin_fines_inner::setTreasuryReferralAmount(const double &treasury_referral_amount) {
    m_treasury_referral_amount = treasury_referral_amount;
    m_treasury_referral_amount_isSet = true;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_treasury_referral_amount_Set() const{
    return m_treasury_referral_amount_isSet;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_treasury_referral_amount_Valid() const{
    return m_treasury_referral_amount_isValid;
}

QDate OAI_legal_search__get_default_response_admin_fines_inner::getTreasuryReferralDate() const {
    return m_treasury_referral_date;
}
void OAI_legal_search__get_default_response_admin_fines_inner::setTreasuryReferralDate(const QDate &treasury_referral_date) {
    m_treasury_referral_date = treasury_referral_date;
    m_treasury_referral_date_isSet = true;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_treasury_referral_date_Set() const{
    return m_treasury_referral_date_isSet;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_treasury_referral_date_Valid() const{
    return m_treasury_referral_date_isValid;
}

QString OAI_legal_search__get_default_response_admin_fines_inner::getUrl() const {
    return m_url;
}
void OAI_legal_search__get_default_response_admin_fines_inner::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_url_Set() const{
    return m_url_isSet;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::is_url_Valid() const{
    return m_url_isValid;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_challenge_outcome_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_challenge_receipt_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commission_votes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doc_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_highlights_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_documents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_final_determination_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_final_determination_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_highlights.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_false_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_petition_court_decision_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_petition_court_filing_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_to_believe_action_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_to_believe_fine_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_treasury_referral_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_treasury_referral_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_legal_search__get_default_response_admin_fines_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
