/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommitteeTotalsIEOnly.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommitteeTotalsIEOnly::OAICommitteeTotalsIEOnly(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommitteeTotalsIEOnly::OAICommitteeTotalsIEOnly() {
    this->initializeModel();
}

OAICommitteeTotalsIEOnly::~OAICommitteeTotalsIEOnly() {}

void OAICommitteeTotalsIEOnly::initializeModel() {

    m_committee_id_isSet = false;
    m_committee_id_isValid = false;

    m_committee_state_isSet = false;
    m_committee_state_isValid = false;

    m_contributions_ie_and_party_expenditures_made_percent_isSet = false;
    m_contributions_ie_and_party_expenditures_made_percent_isValid = false;

    m_coverage_end_date_isSet = false;
    m_coverage_end_date_isValid = false;

    m_coverage_start_date_isSet = false;
    m_coverage_start_date_isValid = false;

    m_cycle_isSet = false;
    m_cycle_isValid = false;

    m_filing_frequency_isSet = false;
    m_filing_frequency_isValid = false;

    m_filing_frequency_full_isSet = false;
    m_filing_frequency_full_isValid = false;

    m_first_file_date_isSet = false;
    m_first_file_date_isValid = false;

    m_individual_contributions_percent_isSet = false;
    m_individual_contributions_percent_isValid = false;

    m_last_beginning_image_number_isSet = false;
    m_last_beginning_image_number_isValid = false;

    m_last_cash_on_hand_end_period_isSet = false;
    m_last_cash_on_hand_end_period_isValid = false;

    m_operating_expenditures_percent_isSet = false;
    m_operating_expenditures_percent_isValid = false;

    m_party_and_other_committee_contributions_percent_isSet = false;
    m_party_and_other_committee_contributions_percent_isValid = false;

    m_pdf_url_isSet = false;
    m_pdf_url_isValid = false;

    m_report_form_isSet = false;
    m_report_form_isValid = false;

    m_total_independent_contributions_isSet = false;
    m_total_independent_contributions_isValid = false;

    m_total_independent_expenditures_isSet = false;
    m_total_independent_expenditures_isValid = false;

    m_transaction_coverage_date_isSet = false;
    m_transaction_coverage_date_isValid = false;
}

void OAICommitteeTotalsIEOnly::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommitteeTotalsIEOnly::fromJsonObject(QJsonObject json) {

    m_committee_id_isValid = ::OpenAPI::fromJsonValue(m_committee_id, json[QString("committee_id")]);
    m_committee_id_isSet = !json[QString("committee_id")].isNull() && m_committee_id_isValid;

    m_committee_state_isValid = ::OpenAPI::fromJsonValue(m_committee_state, json[QString("committee_state")]);
    m_committee_state_isSet = !json[QString("committee_state")].isNull() && m_committee_state_isValid;

    m_contributions_ie_and_party_expenditures_made_percent_isValid = ::OpenAPI::fromJsonValue(m_contributions_ie_and_party_expenditures_made_percent, json[QString("contributions_ie_and_party_expenditures_made_percent")]);
    m_contributions_ie_and_party_expenditures_made_percent_isSet = !json[QString("contributions_ie_and_party_expenditures_made_percent")].isNull() && m_contributions_ie_and_party_expenditures_made_percent_isValid;

    m_coverage_end_date_isValid = ::OpenAPI::fromJsonValue(m_coverage_end_date, json[QString("coverage_end_date")]);
    m_coverage_end_date_isSet = !json[QString("coverage_end_date")].isNull() && m_coverage_end_date_isValid;

    m_coverage_start_date_isValid = ::OpenAPI::fromJsonValue(m_coverage_start_date, json[QString("coverage_start_date")]);
    m_coverage_start_date_isSet = !json[QString("coverage_start_date")].isNull() && m_coverage_start_date_isValid;

    m_cycle_isValid = ::OpenAPI::fromJsonValue(m_cycle, json[QString("cycle")]);
    m_cycle_isSet = !json[QString("cycle")].isNull() && m_cycle_isValid;

    m_filing_frequency_isValid = ::OpenAPI::fromJsonValue(m_filing_frequency, json[QString("filing_frequency")]);
    m_filing_frequency_isSet = !json[QString("filing_frequency")].isNull() && m_filing_frequency_isValid;

    m_filing_frequency_full_isValid = ::OpenAPI::fromJsonValue(m_filing_frequency_full, json[QString("filing_frequency_full")]);
    m_filing_frequency_full_isSet = !json[QString("filing_frequency_full")].isNull() && m_filing_frequency_full_isValid;

    m_first_file_date_isValid = ::OpenAPI::fromJsonValue(m_first_file_date, json[QString("first_file_date")]);
    m_first_file_date_isSet = !json[QString("first_file_date")].isNull() && m_first_file_date_isValid;

    m_individual_contributions_percent_isValid = ::OpenAPI::fromJsonValue(m_individual_contributions_percent, json[QString("individual_contributions_percent")]);
    m_individual_contributions_percent_isSet = !json[QString("individual_contributions_percent")].isNull() && m_individual_contributions_percent_isValid;

    m_last_beginning_image_number_isValid = ::OpenAPI::fromJsonValue(m_last_beginning_image_number, json[QString("last_beginning_image_number")]);
    m_last_beginning_image_number_isSet = !json[QString("last_beginning_image_number")].isNull() && m_last_beginning_image_number_isValid;

    m_last_cash_on_hand_end_period_isValid = ::OpenAPI::fromJsonValue(m_last_cash_on_hand_end_period, json[QString("last_cash_on_hand_end_period")]);
    m_last_cash_on_hand_end_period_isSet = !json[QString("last_cash_on_hand_end_period")].isNull() && m_last_cash_on_hand_end_period_isValid;

    m_operating_expenditures_percent_isValid = ::OpenAPI::fromJsonValue(m_operating_expenditures_percent, json[QString("operating_expenditures_percent")]);
    m_operating_expenditures_percent_isSet = !json[QString("operating_expenditures_percent")].isNull() && m_operating_expenditures_percent_isValid;

    m_party_and_other_committee_contributions_percent_isValid = ::OpenAPI::fromJsonValue(m_party_and_other_committee_contributions_percent, json[QString("party_and_other_committee_contributions_percent")]);
    m_party_and_other_committee_contributions_percent_isSet = !json[QString("party_and_other_committee_contributions_percent")].isNull() && m_party_and_other_committee_contributions_percent_isValid;

    m_pdf_url_isValid = ::OpenAPI::fromJsonValue(m_pdf_url, json[QString("pdf_url")]);
    m_pdf_url_isSet = !json[QString("pdf_url")].isNull() && m_pdf_url_isValid;

    m_report_form_isValid = ::OpenAPI::fromJsonValue(m_report_form, json[QString("report_form")]);
    m_report_form_isSet = !json[QString("report_form")].isNull() && m_report_form_isValid;

    m_total_independent_contributions_isValid = ::OpenAPI::fromJsonValue(m_total_independent_contributions, json[QString("total_independent_contributions")]);
    m_total_independent_contributions_isSet = !json[QString("total_independent_contributions")].isNull() && m_total_independent_contributions_isValid;

    m_total_independent_expenditures_isValid = ::OpenAPI::fromJsonValue(m_total_independent_expenditures, json[QString("total_independent_expenditures")]);
    m_total_independent_expenditures_isSet = !json[QString("total_independent_expenditures")].isNull() && m_total_independent_expenditures_isValid;

    m_transaction_coverage_date_isValid = ::OpenAPI::fromJsonValue(m_transaction_coverage_date, json[QString("transaction_coverage_date")]);
    m_transaction_coverage_date_isSet = !json[QString("transaction_coverage_date")].isNull() && m_transaction_coverage_date_isValid;
}

QString OAICommitteeTotalsIEOnly::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommitteeTotalsIEOnly::asJsonObject() const {
    QJsonObject obj;
    if (m_committee_id_isSet) {
        obj.insert(QString("committee_id"), ::OpenAPI::toJsonValue(m_committee_id));
    }
    if (m_committee_state_isSet) {
        obj.insert(QString("committee_state"), ::OpenAPI::toJsonValue(m_committee_state));
    }
    if (m_contributions_ie_and_party_expenditures_made_percent_isSet) {
        obj.insert(QString("contributions_ie_and_party_expenditures_made_percent"), ::OpenAPI::toJsonValue(m_contributions_ie_and_party_expenditures_made_percent));
    }
    if (m_coverage_end_date_isSet) {
        obj.insert(QString("coverage_end_date"), ::OpenAPI::toJsonValue(m_coverage_end_date));
    }
    if (m_coverage_start_date_isSet) {
        obj.insert(QString("coverage_start_date"), ::OpenAPI::toJsonValue(m_coverage_start_date));
    }
    if (m_cycle_isSet) {
        obj.insert(QString("cycle"), ::OpenAPI::toJsonValue(m_cycle));
    }
    if (m_filing_frequency_isSet) {
        obj.insert(QString("filing_frequency"), ::OpenAPI::toJsonValue(m_filing_frequency));
    }
    if (m_filing_frequency_full_isSet) {
        obj.insert(QString("filing_frequency_full"), ::OpenAPI::toJsonValue(m_filing_frequency_full));
    }
    if (m_first_file_date_isSet) {
        obj.insert(QString("first_file_date"), ::OpenAPI::toJsonValue(m_first_file_date));
    }
    if (m_individual_contributions_percent_isSet) {
        obj.insert(QString("individual_contributions_percent"), ::OpenAPI::toJsonValue(m_individual_contributions_percent));
    }
    if (m_last_beginning_image_number_isSet) {
        obj.insert(QString("last_beginning_image_number"), ::OpenAPI::toJsonValue(m_last_beginning_image_number));
    }
    if (m_last_cash_on_hand_end_period_isSet) {
        obj.insert(QString("last_cash_on_hand_end_period"), ::OpenAPI::toJsonValue(m_last_cash_on_hand_end_period));
    }
    if (m_operating_expenditures_percent_isSet) {
        obj.insert(QString("operating_expenditures_percent"), ::OpenAPI::toJsonValue(m_operating_expenditures_percent));
    }
    if (m_party_and_other_committee_contributions_percent_isSet) {
        obj.insert(QString("party_and_other_committee_contributions_percent"), ::OpenAPI::toJsonValue(m_party_and_other_committee_contributions_percent));
    }
    if (m_pdf_url_isSet) {
        obj.insert(QString("pdf_url"), ::OpenAPI::toJsonValue(m_pdf_url));
    }
    if (m_report_form_isSet) {
        obj.insert(QString("report_form"), ::OpenAPI::toJsonValue(m_report_form));
    }
    if (m_total_independent_contributions_isSet) {
        obj.insert(QString("total_independent_contributions"), ::OpenAPI::toJsonValue(m_total_independent_contributions));
    }
    if (m_total_independent_expenditures_isSet) {
        obj.insert(QString("total_independent_expenditures"), ::OpenAPI::toJsonValue(m_total_independent_expenditures));
    }
    if (m_transaction_coverage_date_isSet) {
        obj.insert(QString("transaction_coverage_date"), ::OpenAPI::toJsonValue(m_transaction_coverage_date));
    }
    return obj;
}

QString OAICommitteeTotalsIEOnly::getCommitteeId() const {
    return m_committee_id;
}
void OAICommitteeTotalsIEOnly::setCommitteeId(const QString &committee_id) {
    m_committee_id = committee_id;
    m_committee_id_isSet = true;
}

bool OAICommitteeTotalsIEOnly::is_committee_id_Set() const{
    return m_committee_id_isSet;
}

bool OAICommitteeTotalsIEOnly::is_committee_id_Valid() const{
    return m_committee_id_isValid;
}

QString OAICommitteeTotalsIEOnly::getCommitteeState() const {
    return m_committee_state;
}
void OAICommitteeTotalsIEOnly::setCommitteeState(const QString &committee_state) {
    m_committee_state = committee_state;
    m_committee_state_isSet = true;
}

bool OAICommitteeTotalsIEOnly::is_committee_state_Set() const{
    return m_committee_state_isSet;
}

bool OAICommitteeTotalsIEOnly::is_committee_state_Valid() const{
    return m_committee_state_isValid;
}

double OAICommitteeTotalsIEOnly::getContributionsIeAndPartyExpendituresMadePercent() const {
    return m_contributions_ie_and_party_expenditures_made_percent;
}
void OAICommitteeTotalsIEOnly::setContributionsIeAndPartyExpendituresMadePercent(const double &contributions_ie_and_party_expenditures_made_percent) {
    m_contributions_ie_and_party_expenditures_made_percent = contributions_ie_and_party_expenditures_made_percent;
    m_contributions_ie_and_party_expenditures_made_percent_isSet = true;
}

bool OAICommitteeTotalsIEOnly::is_contributions_ie_and_party_expenditures_made_percent_Set() const{
    return m_contributions_ie_and_party_expenditures_made_percent_isSet;
}

bool OAICommitteeTotalsIEOnly::is_contributions_ie_and_party_expenditures_made_percent_Valid() const{
    return m_contributions_ie_and_party_expenditures_made_percent_isValid;
}

QDateTime OAICommitteeTotalsIEOnly::getCoverageEndDate() const {
    return m_coverage_end_date;
}
void OAICommitteeTotalsIEOnly::setCoverageEndDate(const QDateTime &coverage_end_date) {
    m_coverage_end_date = coverage_end_date;
    m_coverage_end_date_isSet = true;
}

bool OAICommitteeTotalsIEOnly::is_coverage_end_date_Set() const{
    return m_coverage_end_date_isSet;
}

bool OAICommitteeTotalsIEOnly::is_coverage_end_date_Valid() const{
    return m_coverage_end_date_isValid;
}

QDateTime OAICommitteeTotalsIEOnly::getCoverageStartDate() const {
    return m_coverage_start_date;
}
void OAICommitteeTotalsIEOnly::setCoverageStartDate(const QDateTime &coverage_start_date) {
    m_coverage_start_date = coverage_start_date;
    m_coverage_start_date_isSet = true;
}

bool OAICommitteeTotalsIEOnly::is_coverage_start_date_Set() const{
    return m_coverage_start_date_isSet;
}

bool OAICommitteeTotalsIEOnly::is_coverage_start_date_Valid() const{
    return m_coverage_start_date_isValid;
}

qint32 OAICommitteeTotalsIEOnly::getCycle() const {
    return m_cycle;
}
void OAICommitteeTotalsIEOnly::setCycle(const qint32 &cycle) {
    m_cycle = cycle;
    m_cycle_isSet = true;
}

bool OAICommitteeTotalsIEOnly::is_cycle_Set() const{
    return m_cycle_isSet;
}

bool OAICommitteeTotalsIEOnly::is_cycle_Valid() const{
    return m_cycle_isValid;
}

QString OAICommitteeTotalsIEOnly::getFilingFrequency() const {
    return m_filing_frequency;
}
void OAICommitteeTotalsIEOnly::setFilingFrequency(const QString &filing_frequency) {
    m_filing_frequency = filing_frequency;
    m_filing_frequency_isSet = true;
}

bool OAICommitteeTotalsIEOnly::is_filing_frequency_Set() const{
    return m_filing_frequency_isSet;
}

bool OAICommitteeTotalsIEOnly::is_filing_frequency_Valid() const{
    return m_filing_frequency_isValid;
}

QString OAICommitteeTotalsIEOnly::getFilingFrequencyFull() const {
    return m_filing_frequency_full;
}
void OAICommitteeTotalsIEOnly::setFilingFrequencyFull(const QString &filing_frequency_full) {
    m_filing_frequency_full = filing_frequency_full;
    m_filing_frequency_full_isSet = true;
}

bool OAICommitteeTotalsIEOnly::is_filing_frequency_full_Set() const{
    return m_filing_frequency_full_isSet;
}

bool OAICommitteeTotalsIEOnly::is_filing_frequency_full_Valid() const{
    return m_filing_frequency_full_isValid;
}

QDate OAICommitteeTotalsIEOnly::getFirstFileDate() const {
    return m_first_file_date;
}
void OAICommitteeTotalsIEOnly::setFirstFileDate(const QDate &first_file_date) {
    m_first_file_date = first_file_date;
    m_first_file_date_isSet = true;
}

bool OAICommitteeTotalsIEOnly::is_first_file_date_Set() const{
    return m_first_file_date_isSet;
}

bool OAICommitteeTotalsIEOnly::is_first_file_date_Valid() const{
    return m_first_file_date_isValid;
}

double OAICommitteeTotalsIEOnly::getIndividualContributionsPercent() const {
    return m_individual_contributions_percent;
}
void OAICommitteeTotalsIEOnly::setIndividualContributionsPercent(const double &individual_contributions_percent) {
    m_individual_contributions_percent = individual_contributions_percent;
    m_individual_contributions_percent_isSet = true;
}

bool OAICommitteeTotalsIEOnly::is_individual_contributions_percent_Set() const{
    return m_individual_contributions_percent_isSet;
}

bool OAICommitteeTotalsIEOnly::is_individual_contributions_percent_Valid() const{
    return m_individual_contributions_percent_isValid;
}

QString OAICommitteeTotalsIEOnly::getLastBeginningImageNumber() const {
    return m_last_beginning_image_number;
}
void OAICommitteeTotalsIEOnly::setLastBeginningImageNumber(const QString &last_beginning_image_number) {
    m_last_beginning_image_number = last_beginning_image_number;
    m_last_beginning_image_number_isSet = true;
}

bool OAICommitteeTotalsIEOnly::is_last_beginning_image_number_Set() const{
    return m_last_beginning_image_number_isSet;
}

bool OAICommitteeTotalsIEOnly::is_last_beginning_image_number_Valid() const{
    return m_last_beginning_image_number_isValid;
}

double OAICommitteeTotalsIEOnly::getLastCashOnHandEndPeriod() const {
    return m_last_cash_on_hand_end_period;
}
void OAICommitteeTotalsIEOnly::setLastCashOnHandEndPeriod(const double &last_cash_on_hand_end_period) {
    m_last_cash_on_hand_end_period = last_cash_on_hand_end_period;
    m_last_cash_on_hand_end_period_isSet = true;
}

bool OAICommitteeTotalsIEOnly::is_last_cash_on_hand_end_period_Set() const{
    return m_last_cash_on_hand_end_period_isSet;
}

bool OAICommitteeTotalsIEOnly::is_last_cash_on_hand_end_period_Valid() const{
    return m_last_cash_on_hand_end_period_isValid;
}

double OAICommitteeTotalsIEOnly::getOperatingExpendituresPercent() const {
    return m_operating_expenditures_percent;
}
void OAICommitteeTotalsIEOnly::setOperatingExpendituresPercent(const double &operating_expenditures_percent) {
    m_operating_expenditures_percent = operating_expenditures_percent;
    m_operating_expenditures_percent_isSet = true;
}

bool OAICommitteeTotalsIEOnly::is_operating_expenditures_percent_Set() const{
    return m_operating_expenditures_percent_isSet;
}

bool OAICommitteeTotalsIEOnly::is_operating_expenditures_percent_Valid() const{
    return m_operating_expenditures_percent_isValid;
}

double OAICommitteeTotalsIEOnly::getPartyAndOtherCommitteeContributionsPercent() const {
    return m_party_and_other_committee_contributions_percent;
}
void OAICommitteeTotalsIEOnly::setPartyAndOtherCommitteeContributionsPercent(const double &party_and_other_committee_contributions_percent) {
    m_party_and_other_committee_contributions_percent = party_and_other_committee_contributions_percent;
    m_party_and_other_committee_contributions_percent_isSet = true;
}

bool OAICommitteeTotalsIEOnly::is_party_and_other_committee_contributions_percent_Set() const{
    return m_party_and_other_committee_contributions_percent_isSet;
}

bool OAICommitteeTotalsIEOnly::is_party_and_other_committee_contributions_percent_Valid() const{
    return m_party_and_other_committee_contributions_percent_isValid;
}

QString OAICommitteeTotalsIEOnly::getPdfUrl() const {
    return m_pdf_url;
}
void OAICommitteeTotalsIEOnly::setPdfUrl(const QString &pdf_url) {
    m_pdf_url = pdf_url;
    m_pdf_url_isSet = true;
}

bool OAICommitteeTotalsIEOnly::is_pdf_url_Set() const{
    return m_pdf_url_isSet;
}

bool OAICommitteeTotalsIEOnly::is_pdf_url_Valid() const{
    return m_pdf_url_isValid;
}

QString OAICommitteeTotalsIEOnly::getReportForm() const {
    return m_report_form;
}
void OAICommitteeTotalsIEOnly::setReportForm(const QString &report_form) {
    m_report_form = report_form;
    m_report_form_isSet = true;
}

bool OAICommitteeTotalsIEOnly::is_report_form_Set() const{
    return m_report_form_isSet;
}

bool OAICommitteeTotalsIEOnly::is_report_form_Valid() const{
    return m_report_form_isValid;
}

double OAICommitteeTotalsIEOnly::getTotalIndependentContributions() const {
    return m_total_independent_contributions;
}
void OAICommitteeTotalsIEOnly::setTotalIndependentContributions(const double &total_independent_contributions) {
    m_total_independent_contributions = total_independent_contributions;
    m_total_independent_contributions_isSet = true;
}

bool OAICommitteeTotalsIEOnly::is_total_independent_contributions_Set() const{
    return m_total_independent_contributions_isSet;
}

bool OAICommitteeTotalsIEOnly::is_total_independent_contributions_Valid() const{
    return m_total_independent_contributions_isValid;
}

double OAICommitteeTotalsIEOnly::getTotalIndependentExpenditures() const {
    return m_total_independent_expenditures;
}
void OAICommitteeTotalsIEOnly::setTotalIndependentExpenditures(const double &total_independent_expenditures) {
    m_total_independent_expenditures = total_independent_expenditures;
    m_total_independent_expenditures_isSet = true;
}

bool OAICommitteeTotalsIEOnly::is_total_independent_expenditures_Set() const{
    return m_total_independent_expenditures_isSet;
}

bool OAICommitteeTotalsIEOnly::is_total_independent_expenditures_Valid() const{
    return m_total_independent_expenditures_isValid;
}

QDate OAICommitteeTotalsIEOnly::getTransactionCoverageDate() const {
    return m_transaction_coverage_date;
}
void OAICommitteeTotalsIEOnly::setTransactionCoverageDate(const QDate &transaction_coverage_date) {
    m_transaction_coverage_date = transaction_coverage_date;
    m_transaction_coverage_date_isSet = true;
}

bool OAICommitteeTotalsIEOnly::is_transaction_coverage_date_Set() const{
    return m_transaction_coverage_date_isSet;
}

bool OAICommitteeTotalsIEOnly::is_transaction_coverage_date_Valid() const{
    return m_transaction_coverage_date_isValid;
}

bool OAICommitteeTotalsIEOnly::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_committee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributions_ie_and_party_expenditures_made_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coverage_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coverage_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cycle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filing_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filing_frequency_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_file_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_individual_contributions_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_beginning_image_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_cash_on_hand_end_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_expenditures_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_and_other_committee_contributions_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pdf_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_form_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_independent_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_independent_expenditures_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_coverage_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommitteeTotalsIEOnly::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
