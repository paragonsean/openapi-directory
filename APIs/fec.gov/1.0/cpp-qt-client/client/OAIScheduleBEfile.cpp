/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduleBEfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduleBEfile::OAIScheduleBEfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduleBEfile::OAIScheduleBEfile() {
    this->initializeModel();
}

OAIScheduleBEfile::~OAIScheduleBEfile() {}

void OAIScheduleBEfile::initializeModel() {

    m_amendment_indicator_isSet = false;
    m_amendment_indicator_isValid = false;

    m_back_reference_schedule_name_isSet = false;
    m_back_reference_schedule_name_isValid = false;

    m_back_reference_transaction_id_isSet = false;
    m_back_reference_transaction_id_isValid = false;

    m_beginning_image_number_isSet = false;
    m_beginning_image_number_isValid = false;

    m_beneficiary_committee_name_isSet = false;
    m_beneficiary_committee_name_isValid = false;

    m_candidate_office_isSet = false;
    m_candidate_office_isValid = false;

    m_candidate_office_district_isSet = false;
    m_candidate_office_district_isValid = false;

    m_committee_isSet = false;
    m_committee_isValid = false;

    m_committee_id_isSet = false;
    m_committee_id_isValid = false;

    m_csv_url_isSet = false;
    m_csv_url_isValid = false;

    m_disbursement_amount_isSet = false;
    m_disbursement_amount_isValid = false;

    m_disbursement_date_isSet = false;
    m_disbursement_date_isValid = false;

    m_disbursement_description_isSet = false;
    m_disbursement_description_isValid = false;

    m_disbursement_type_isSet = false;
    m_disbursement_type_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_fec_url_isSet = false;
    m_fec_url_isValid = false;

    m_file_number_isSet = false;
    m_file_number_isValid = false;

    m_filing_isSet = false;
    m_filing_isValid = false;

    m_image_number_isSet = false;
    m_image_number_isValid = false;

    m_is_notice_isSet = false;
    m_is_notice_isValid = false;

    m_line_number_isSet = false;
    m_line_number_isValid = false;

    m_load_timestamp_isSet = false;
    m_load_timestamp_isValid = false;

    m_memo_code_isSet = false;
    m_memo_code_isValid = false;

    m_memo_text_isSet = false;
    m_memo_text_isValid = false;

    m_payee_name_isSet = false;
    m_payee_name_isValid = false;

    m_pdf_url_isSet = false;
    m_pdf_url_isValid = false;

    m_recipient_city_isSet = false;
    m_recipient_city_isValid = false;

    m_recipient_name_isSet = false;
    m_recipient_name_isValid = false;

    m_recipient_prefix_isSet = false;
    m_recipient_prefix_isValid = false;

    m_recipient_state_isSet = false;
    m_recipient_state_isValid = false;

    m_recipient_suffix_isSet = false;
    m_recipient_suffix_isValid = false;

    m_recipient_zip_isSet = false;
    m_recipient_zip_isValid = false;

    m_related_line_number_isSet = false;
    m_related_line_number_isValid = false;

    m_report_type_isSet = false;
    m_report_type_isValid = false;

    m_semi_annual_bundled_refund_isSet = false;
    m_semi_annual_bundled_refund_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;
}

void OAIScheduleBEfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduleBEfile::fromJsonObject(QJsonObject json) {

    m_amendment_indicator_isValid = ::OpenAPI::fromJsonValue(m_amendment_indicator, json[QString("amendment_indicator")]);
    m_amendment_indicator_isSet = !json[QString("amendment_indicator")].isNull() && m_amendment_indicator_isValid;

    m_back_reference_schedule_name_isValid = ::OpenAPI::fromJsonValue(m_back_reference_schedule_name, json[QString("back_reference_schedule_name")]);
    m_back_reference_schedule_name_isSet = !json[QString("back_reference_schedule_name")].isNull() && m_back_reference_schedule_name_isValid;

    m_back_reference_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_back_reference_transaction_id, json[QString("back_reference_transaction_id")]);
    m_back_reference_transaction_id_isSet = !json[QString("back_reference_transaction_id")].isNull() && m_back_reference_transaction_id_isValid;

    m_beginning_image_number_isValid = ::OpenAPI::fromJsonValue(m_beginning_image_number, json[QString("beginning_image_number")]);
    m_beginning_image_number_isSet = !json[QString("beginning_image_number")].isNull() && m_beginning_image_number_isValid;

    m_beneficiary_committee_name_isValid = ::OpenAPI::fromJsonValue(m_beneficiary_committee_name, json[QString("beneficiary_committee_name")]);
    m_beneficiary_committee_name_isSet = !json[QString("beneficiary_committee_name")].isNull() && m_beneficiary_committee_name_isValid;

    m_candidate_office_isValid = ::OpenAPI::fromJsonValue(m_candidate_office, json[QString("candidate_office")]);
    m_candidate_office_isSet = !json[QString("candidate_office")].isNull() && m_candidate_office_isValid;

    m_candidate_office_district_isValid = ::OpenAPI::fromJsonValue(m_candidate_office_district, json[QString("candidate_office_district")]);
    m_candidate_office_district_isSet = !json[QString("candidate_office_district")].isNull() && m_candidate_office_district_isValid;

    m_committee_isValid = ::OpenAPI::fromJsonValue(m_committee, json[QString("committee")]);
    m_committee_isSet = !json[QString("committee")].isNull() && m_committee_isValid;

    m_committee_id_isValid = ::OpenAPI::fromJsonValue(m_committee_id, json[QString("committee_id")]);
    m_committee_id_isSet = !json[QString("committee_id")].isNull() && m_committee_id_isValid;

    m_csv_url_isValid = ::OpenAPI::fromJsonValue(m_csv_url, json[QString("csv_url")]);
    m_csv_url_isSet = !json[QString("csv_url")].isNull() && m_csv_url_isValid;

    m_disbursement_amount_isValid = ::OpenAPI::fromJsonValue(m_disbursement_amount, json[QString("disbursement_amount")]);
    m_disbursement_amount_isSet = !json[QString("disbursement_amount")].isNull() && m_disbursement_amount_isValid;

    m_disbursement_date_isValid = ::OpenAPI::fromJsonValue(m_disbursement_date, json[QString("disbursement_date")]);
    m_disbursement_date_isSet = !json[QString("disbursement_date")].isNull() && m_disbursement_date_isValid;

    m_disbursement_description_isValid = ::OpenAPI::fromJsonValue(m_disbursement_description, json[QString("disbursement_description")]);
    m_disbursement_description_isSet = !json[QString("disbursement_description")].isNull() && m_disbursement_description_isValid;

    m_disbursement_type_isValid = ::OpenAPI::fromJsonValue(m_disbursement_type, json[QString("disbursement_type")]);
    m_disbursement_type_isSet = !json[QString("disbursement_type")].isNull() && m_disbursement_type_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entity_type")]);
    m_entity_type_isSet = !json[QString("entity_type")].isNull() && m_entity_type_isValid;

    m_fec_url_isValid = ::OpenAPI::fromJsonValue(m_fec_url, json[QString("fec_url")]);
    m_fec_url_isSet = !json[QString("fec_url")].isNull() && m_fec_url_isValid;

    m_file_number_isValid = ::OpenAPI::fromJsonValue(m_file_number, json[QString("file_number")]);
    m_file_number_isSet = !json[QString("file_number")].isNull() && m_file_number_isValid;

    m_filing_isValid = ::OpenAPI::fromJsonValue(m_filing, json[QString("filing")]);
    m_filing_isSet = !json[QString("filing")].isNull() && m_filing_isValid;

    m_image_number_isValid = ::OpenAPI::fromJsonValue(m_image_number, json[QString("image_number")]);
    m_image_number_isSet = !json[QString("image_number")].isNull() && m_image_number_isValid;

    m_is_notice_isValid = ::OpenAPI::fromJsonValue(m_is_notice, json[QString("is_notice")]);
    m_is_notice_isSet = !json[QString("is_notice")].isNull() && m_is_notice_isValid;

    m_line_number_isValid = ::OpenAPI::fromJsonValue(m_line_number, json[QString("line_number")]);
    m_line_number_isSet = !json[QString("line_number")].isNull() && m_line_number_isValid;

    m_load_timestamp_isValid = ::OpenAPI::fromJsonValue(m_load_timestamp, json[QString("load_timestamp")]);
    m_load_timestamp_isSet = !json[QString("load_timestamp")].isNull() && m_load_timestamp_isValid;

    m_memo_code_isValid = ::OpenAPI::fromJsonValue(m_memo_code, json[QString("memo_code")]);
    m_memo_code_isSet = !json[QString("memo_code")].isNull() && m_memo_code_isValid;

    m_memo_text_isValid = ::OpenAPI::fromJsonValue(m_memo_text, json[QString("memo_text")]);
    m_memo_text_isSet = !json[QString("memo_text")].isNull() && m_memo_text_isValid;

    m_payee_name_isValid = ::OpenAPI::fromJsonValue(m_payee_name, json[QString("payee_name")]);
    m_payee_name_isSet = !json[QString("payee_name")].isNull() && m_payee_name_isValid;

    m_pdf_url_isValid = ::OpenAPI::fromJsonValue(m_pdf_url, json[QString("pdf_url")]);
    m_pdf_url_isSet = !json[QString("pdf_url")].isNull() && m_pdf_url_isValid;

    m_recipient_city_isValid = ::OpenAPI::fromJsonValue(m_recipient_city, json[QString("recipient_city")]);
    m_recipient_city_isSet = !json[QString("recipient_city")].isNull() && m_recipient_city_isValid;

    m_recipient_name_isValid = ::OpenAPI::fromJsonValue(m_recipient_name, json[QString("recipient_name")]);
    m_recipient_name_isSet = !json[QString("recipient_name")].isNull() && m_recipient_name_isValid;

    m_recipient_prefix_isValid = ::OpenAPI::fromJsonValue(m_recipient_prefix, json[QString("recipient_prefix")]);
    m_recipient_prefix_isSet = !json[QString("recipient_prefix")].isNull() && m_recipient_prefix_isValid;

    m_recipient_state_isValid = ::OpenAPI::fromJsonValue(m_recipient_state, json[QString("recipient_state")]);
    m_recipient_state_isSet = !json[QString("recipient_state")].isNull() && m_recipient_state_isValid;

    m_recipient_suffix_isValid = ::OpenAPI::fromJsonValue(m_recipient_suffix, json[QString("recipient_suffix")]);
    m_recipient_suffix_isSet = !json[QString("recipient_suffix")].isNull() && m_recipient_suffix_isValid;

    m_recipient_zip_isValid = ::OpenAPI::fromJsonValue(m_recipient_zip, json[QString("recipient_zip")]);
    m_recipient_zip_isSet = !json[QString("recipient_zip")].isNull() && m_recipient_zip_isValid;

    m_related_line_number_isValid = ::OpenAPI::fromJsonValue(m_related_line_number, json[QString("related_line_number")]);
    m_related_line_number_isSet = !json[QString("related_line_number")].isNull() && m_related_line_number_isValid;

    m_report_type_isValid = ::OpenAPI::fromJsonValue(m_report_type, json[QString("report_type")]);
    m_report_type_isSet = !json[QString("report_type")].isNull() && m_report_type_isValid;

    m_semi_annual_bundled_refund_isValid = ::OpenAPI::fromJsonValue(m_semi_annual_bundled_refund, json[QString("semi_annual_bundled_refund")]);
    m_semi_annual_bundled_refund_isSet = !json[QString("semi_annual_bundled_refund")].isNull() && m_semi_annual_bundled_refund_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("transaction_id")]);
    m_transaction_id_isSet = !json[QString("transaction_id")].isNull() && m_transaction_id_isValid;
}

QString OAIScheduleBEfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduleBEfile::asJsonObject() const {
    QJsonObject obj;
    if (m_amendment_indicator_isSet) {
        obj.insert(QString("amendment_indicator"), ::OpenAPI::toJsonValue(m_amendment_indicator));
    }
    if (m_back_reference_schedule_name_isSet) {
        obj.insert(QString("back_reference_schedule_name"), ::OpenAPI::toJsonValue(m_back_reference_schedule_name));
    }
    if (m_back_reference_transaction_id_isSet) {
        obj.insert(QString("back_reference_transaction_id"), ::OpenAPI::toJsonValue(m_back_reference_transaction_id));
    }
    if (m_beginning_image_number_isSet) {
        obj.insert(QString("beginning_image_number"), ::OpenAPI::toJsonValue(m_beginning_image_number));
    }
    if (m_beneficiary_committee_name_isSet) {
        obj.insert(QString("beneficiary_committee_name"), ::OpenAPI::toJsonValue(m_beneficiary_committee_name));
    }
    if (m_candidate_office_isSet) {
        obj.insert(QString("candidate_office"), ::OpenAPI::toJsonValue(m_candidate_office));
    }
    if (m_candidate_office_district_isSet) {
        obj.insert(QString("candidate_office_district"), ::OpenAPI::toJsonValue(m_candidate_office_district));
    }
    if (m_committee.isSet()) {
        obj.insert(QString("committee"), ::OpenAPI::toJsonValue(m_committee));
    }
    if (m_committee_id_isSet) {
        obj.insert(QString("committee_id"), ::OpenAPI::toJsonValue(m_committee_id));
    }
    if (m_csv_url_isSet) {
        obj.insert(QString("csv_url"), ::OpenAPI::toJsonValue(m_csv_url));
    }
    if (m_disbursement_amount_isSet) {
        obj.insert(QString("disbursement_amount"), ::OpenAPI::toJsonValue(m_disbursement_amount));
    }
    if (m_disbursement_date_isSet) {
        obj.insert(QString("disbursement_date"), ::OpenAPI::toJsonValue(m_disbursement_date));
    }
    if (m_disbursement_description_isSet) {
        obj.insert(QString("disbursement_description"), ::OpenAPI::toJsonValue(m_disbursement_description));
    }
    if (m_disbursement_type_isSet) {
        obj.insert(QString("disbursement_type"), ::OpenAPI::toJsonValue(m_disbursement_type));
    }
    if (m_entity_type_isSet) {
        obj.insert(QString("entity_type"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_fec_url_isSet) {
        obj.insert(QString("fec_url"), ::OpenAPI::toJsonValue(m_fec_url));
    }
    if (m_file_number_isSet) {
        obj.insert(QString("file_number"), ::OpenAPI::toJsonValue(m_file_number));
    }
    if (m_filing.isSet()) {
        obj.insert(QString("filing"), ::OpenAPI::toJsonValue(m_filing));
    }
    if (m_image_number_isSet) {
        obj.insert(QString("image_number"), ::OpenAPI::toJsonValue(m_image_number));
    }
    if (m_is_notice_isSet) {
        obj.insert(QString("is_notice"), ::OpenAPI::toJsonValue(m_is_notice));
    }
    if (m_line_number_isSet) {
        obj.insert(QString("line_number"), ::OpenAPI::toJsonValue(m_line_number));
    }
    if (m_load_timestamp_isSet) {
        obj.insert(QString("load_timestamp"), ::OpenAPI::toJsonValue(m_load_timestamp));
    }
    if (m_memo_code_isSet) {
        obj.insert(QString("memo_code"), ::OpenAPI::toJsonValue(m_memo_code));
    }
    if (m_memo_text_isSet) {
        obj.insert(QString("memo_text"), ::OpenAPI::toJsonValue(m_memo_text));
    }
    if (m_payee_name_isSet) {
        obj.insert(QString("payee_name"), ::OpenAPI::toJsonValue(m_payee_name));
    }
    if (m_pdf_url_isSet) {
        obj.insert(QString("pdf_url"), ::OpenAPI::toJsonValue(m_pdf_url));
    }
    if (m_recipient_city_isSet) {
        obj.insert(QString("recipient_city"), ::OpenAPI::toJsonValue(m_recipient_city));
    }
    if (m_recipient_name_isSet) {
        obj.insert(QString("recipient_name"), ::OpenAPI::toJsonValue(m_recipient_name));
    }
    if (m_recipient_prefix_isSet) {
        obj.insert(QString("recipient_prefix"), ::OpenAPI::toJsonValue(m_recipient_prefix));
    }
    if (m_recipient_state_isSet) {
        obj.insert(QString("recipient_state"), ::OpenAPI::toJsonValue(m_recipient_state));
    }
    if (m_recipient_suffix_isSet) {
        obj.insert(QString("recipient_suffix"), ::OpenAPI::toJsonValue(m_recipient_suffix));
    }
    if (m_recipient_zip_isSet) {
        obj.insert(QString("recipient_zip"), ::OpenAPI::toJsonValue(m_recipient_zip));
    }
    if (m_related_line_number_isSet) {
        obj.insert(QString("related_line_number"), ::OpenAPI::toJsonValue(m_related_line_number));
    }
    if (m_report_type_isSet) {
        obj.insert(QString("report_type"), ::OpenAPI::toJsonValue(m_report_type));
    }
    if (m_semi_annual_bundled_refund_isSet) {
        obj.insert(QString("semi_annual_bundled_refund"), ::OpenAPI::toJsonValue(m_semi_annual_bundled_refund));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("transaction_id"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    return obj;
}

QString OAIScheduleBEfile::getAmendmentIndicator() const {
    return m_amendment_indicator;
}
void OAIScheduleBEfile::setAmendmentIndicator(const QString &amendment_indicator) {
    m_amendment_indicator = amendment_indicator;
    m_amendment_indicator_isSet = true;
}

bool OAIScheduleBEfile::is_amendment_indicator_Set() const{
    return m_amendment_indicator_isSet;
}

bool OAIScheduleBEfile::is_amendment_indicator_Valid() const{
    return m_amendment_indicator_isValid;
}

QString OAIScheduleBEfile::getBackReferenceScheduleName() const {
    return m_back_reference_schedule_name;
}
void OAIScheduleBEfile::setBackReferenceScheduleName(const QString &back_reference_schedule_name) {
    m_back_reference_schedule_name = back_reference_schedule_name;
    m_back_reference_schedule_name_isSet = true;
}

bool OAIScheduleBEfile::is_back_reference_schedule_name_Set() const{
    return m_back_reference_schedule_name_isSet;
}

bool OAIScheduleBEfile::is_back_reference_schedule_name_Valid() const{
    return m_back_reference_schedule_name_isValid;
}

QString OAIScheduleBEfile::getBackReferenceTransactionId() const {
    return m_back_reference_transaction_id;
}
void OAIScheduleBEfile::setBackReferenceTransactionId(const QString &back_reference_transaction_id) {
    m_back_reference_transaction_id = back_reference_transaction_id;
    m_back_reference_transaction_id_isSet = true;
}

bool OAIScheduleBEfile::is_back_reference_transaction_id_Set() const{
    return m_back_reference_transaction_id_isSet;
}

bool OAIScheduleBEfile::is_back_reference_transaction_id_Valid() const{
    return m_back_reference_transaction_id_isValid;
}

QString OAIScheduleBEfile::getBeginningImageNumber() const {
    return m_beginning_image_number;
}
void OAIScheduleBEfile::setBeginningImageNumber(const QString &beginning_image_number) {
    m_beginning_image_number = beginning_image_number;
    m_beginning_image_number_isSet = true;
}

bool OAIScheduleBEfile::is_beginning_image_number_Set() const{
    return m_beginning_image_number_isSet;
}

bool OAIScheduleBEfile::is_beginning_image_number_Valid() const{
    return m_beginning_image_number_isValid;
}

QString OAIScheduleBEfile::getBeneficiaryCommitteeName() const {
    return m_beneficiary_committee_name;
}
void OAIScheduleBEfile::setBeneficiaryCommitteeName(const QString &beneficiary_committee_name) {
    m_beneficiary_committee_name = beneficiary_committee_name;
    m_beneficiary_committee_name_isSet = true;
}

bool OAIScheduleBEfile::is_beneficiary_committee_name_Set() const{
    return m_beneficiary_committee_name_isSet;
}

bool OAIScheduleBEfile::is_beneficiary_committee_name_Valid() const{
    return m_beneficiary_committee_name_isValid;
}

QString OAIScheduleBEfile::getCandidateOffice() const {
    return m_candidate_office;
}
void OAIScheduleBEfile::setCandidateOffice(const QString &candidate_office) {
    m_candidate_office = candidate_office;
    m_candidate_office_isSet = true;
}

bool OAIScheduleBEfile::is_candidate_office_Set() const{
    return m_candidate_office_isSet;
}

bool OAIScheduleBEfile::is_candidate_office_Valid() const{
    return m_candidate_office_isValid;
}

QString OAIScheduleBEfile::getCandidateOfficeDistrict() const {
    return m_candidate_office_district;
}
void OAIScheduleBEfile::setCandidateOfficeDistrict(const QString &candidate_office_district) {
    m_candidate_office_district = candidate_office_district;
    m_candidate_office_district_isSet = true;
}

bool OAIScheduleBEfile::is_candidate_office_district_Set() const{
    return m_candidate_office_district_isSet;
}

bool OAIScheduleBEfile::is_candidate_office_district_Valid() const{
    return m_candidate_office_district_isValid;
}

OAICommitteeHistory OAIScheduleBEfile::getCommittee() const {
    return m_committee;
}
void OAIScheduleBEfile::setCommittee(const OAICommitteeHistory &committee) {
    m_committee = committee;
    m_committee_isSet = true;
}

bool OAIScheduleBEfile::is_committee_Set() const{
    return m_committee_isSet;
}

bool OAIScheduleBEfile::is_committee_Valid() const{
    return m_committee_isValid;
}

QString OAIScheduleBEfile::getCommitteeId() const {
    return m_committee_id;
}
void OAIScheduleBEfile::setCommitteeId(const QString &committee_id) {
    m_committee_id = committee_id;
    m_committee_id_isSet = true;
}

bool OAIScheduleBEfile::is_committee_id_Set() const{
    return m_committee_id_isSet;
}

bool OAIScheduleBEfile::is_committee_id_Valid() const{
    return m_committee_id_isValid;
}

QString OAIScheduleBEfile::getCsvUrl() const {
    return m_csv_url;
}
void OAIScheduleBEfile::setCsvUrl(const QString &csv_url) {
    m_csv_url = csv_url;
    m_csv_url_isSet = true;
}

bool OAIScheduleBEfile::is_csv_url_Set() const{
    return m_csv_url_isSet;
}

bool OAIScheduleBEfile::is_csv_url_Valid() const{
    return m_csv_url_isValid;
}

double OAIScheduleBEfile::getDisbursementAmount() const {
    return m_disbursement_amount;
}
void OAIScheduleBEfile::setDisbursementAmount(const double &disbursement_amount) {
    m_disbursement_amount = disbursement_amount;
    m_disbursement_amount_isSet = true;
}

bool OAIScheduleBEfile::is_disbursement_amount_Set() const{
    return m_disbursement_amount_isSet;
}

bool OAIScheduleBEfile::is_disbursement_amount_Valid() const{
    return m_disbursement_amount_isValid;
}

QDate OAIScheduleBEfile::getDisbursementDate() const {
    return m_disbursement_date;
}
void OAIScheduleBEfile::setDisbursementDate(const QDate &disbursement_date) {
    m_disbursement_date = disbursement_date;
    m_disbursement_date_isSet = true;
}

bool OAIScheduleBEfile::is_disbursement_date_Set() const{
    return m_disbursement_date_isSet;
}

bool OAIScheduleBEfile::is_disbursement_date_Valid() const{
    return m_disbursement_date_isValid;
}

QString OAIScheduleBEfile::getDisbursementDescription() const {
    return m_disbursement_description;
}
void OAIScheduleBEfile::setDisbursementDescription(const QString &disbursement_description) {
    m_disbursement_description = disbursement_description;
    m_disbursement_description_isSet = true;
}

bool OAIScheduleBEfile::is_disbursement_description_Set() const{
    return m_disbursement_description_isSet;
}

bool OAIScheduleBEfile::is_disbursement_description_Valid() const{
    return m_disbursement_description_isValid;
}

QString OAIScheduleBEfile::getDisbursementType() const {
    return m_disbursement_type;
}
void OAIScheduleBEfile::setDisbursementType(const QString &disbursement_type) {
    m_disbursement_type = disbursement_type;
    m_disbursement_type_isSet = true;
}

bool OAIScheduleBEfile::is_disbursement_type_Set() const{
    return m_disbursement_type_isSet;
}

bool OAIScheduleBEfile::is_disbursement_type_Valid() const{
    return m_disbursement_type_isValid;
}

QString OAIScheduleBEfile::getEntityType() const {
    return m_entity_type;
}
void OAIScheduleBEfile::setEntityType(const QString &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIScheduleBEfile::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIScheduleBEfile::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAIScheduleBEfile::getFecUrl() const {
    return m_fec_url;
}
void OAIScheduleBEfile::setFecUrl(const QString &fec_url) {
    m_fec_url = fec_url;
    m_fec_url_isSet = true;
}

bool OAIScheduleBEfile::is_fec_url_Set() const{
    return m_fec_url_isSet;
}

bool OAIScheduleBEfile::is_fec_url_Valid() const{
    return m_fec_url_isValid;
}

qint32 OAIScheduleBEfile::getFileNumber() const {
    return m_file_number;
}
void OAIScheduleBEfile::setFileNumber(const qint32 &file_number) {
    m_file_number = file_number;
    m_file_number_isSet = true;
}

bool OAIScheduleBEfile::is_file_number_Set() const{
    return m_file_number_isSet;
}

bool OAIScheduleBEfile::is_file_number_Valid() const{
    return m_file_number_isValid;
}

OAIEFilings OAIScheduleBEfile::getFiling() const {
    return m_filing;
}
void OAIScheduleBEfile::setFiling(const OAIEFilings &filing) {
    m_filing = filing;
    m_filing_isSet = true;
}

bool OAIScheduleBEfile::is_filing_Set() const{
    return m_filing_isSet;
}

bool OAIScheduleBEfile::is_filing_Valid() const{
    return m_filing_isValid;
}

QString OAIScheduleBEfile::getImageNumber() const {
    return m_image_number;
}
void OAIScheduleBEfile::setImageNumber(const QString &image_number) {
    m_image_number = image_number;
    m_image_number_isSet = true;
}

bool OAIScheduleBEfile::is_image_number_Set() const{
    return m_image_number_isSet;
}

bool OAIScheduleBEfile::is_image_number_Valid() const{
    return m_image_number_isValid;
}

bool OAIScheduleBEfile::isIsNotice() const {
    return m_is_notice;
}
void OAIScheduleBEfile::setIsNotice(const bool &is_notice) {
    m_is_notice = is_notice;
    m_is_notice_isSet = true;
}

bool OAIScheduleBEfile::is_is_notice_Set() const{
    return m_is_notice_isSet;
}

bool OAIScheduleBEfile::is_is_notice_Valid() const{
    return m_is_notice_isValid;
}

QString OAIScheduleBEfile::getLineNumber() const {
    return m_line_number;
}
void OAIScheduleBEfile::setLineNumber(const QString &line_number) {
    m_line_number = line_number;
    m_line_number_isSet = true;
}

bool OAIScheduleBEfile::is_line_number_Set() const{
    return m_line_number_isSet;
}

bool OAIScheduleBEfile::is_line_number_Valid() const{
    return m_line_number_isValid;
}

QDateTime OAIScheduleBEfile::getLoadTimestamp() const {
    return m_load_timestamp;
}
void OAIScheduleBEfile::setLoadTimestamp(const QDateTime &load_timestamp) {
    m_load_timestamp = load_timestamp;
    m_load_timestamp_isSet = true;
}

bool OAIScheduleBEfile::is_load_timestamp_Set() const{
    return m_load_timestamp_isSet;
}

bool OAIScheduleBEfile::is_load_timestamp_Valid() const{
    return m_load_timestamp_isValid;
}

QString OAIScheduleBEfile::getMemoCode() const {
    return m_memo_code;
}
void OAIScheduleBEfile::setMemoCode(const QString &memo_code) {
    m_memo_code = memo_code;
    m_memo_code_isSet = true;
}

bool OAIScheduleBEfile::is_memo_code_Set() const{
    return m_memo_code_isSet;
}

bool OAIScheduleBEfile::is_memo_code_Valid() const{
    return m_memo_code_isValid;
}

QString OAIScheduleBEfile::getMemoText() const {
    return m_memo_text;
}
void OAIScheduleBEfile::setMemoText(const QString &memo_text) {
    m_memo_text = memo_text;
    m_memo_text_isSet = true;
}

bool OAIScheduleBEfile::is_memo_text_Set() const{
    return m_memo_text_isSet;
}

bool OAIScheduleBEfile::is_memo_text_Valid() const{
    return m_memo_text_isValid;
}

QString OAIScheduleBEfile::getPayeeName() const {
    return m_payee_name;
}
void OAIScheduleBEfile::setPayeeName(const QString &payee_name) {
    m_payee_name = payee_name;
    m_payee_name_isSet = true;
}

bool OAIScheduleBEfile::is_payee_name_Set() const{
    return m_payee_name_isSet;
}

bool OAIScheduleBEfile::is_payee_name_Valid() const{
    return m_payee_name_isValid;
}

QString OAIScheduleBEfile::getPdfUrl() const {
    return m_pdf_url;
}
void OAIScheduleBEfile::setPdfUrl(const QString &pdf_url) {
    m_pdf_url = pdf_url;
    m_pdf_url_isSet = true;
}

bool OAIScheduleBEfile::is_pdf_url_Set() const{
    return m_pdf_url_isSet;
}

bool OAIScheduleBEfile::is_pdf_url_Valid() const{
    return m_pdf_url_isValid;
}

QString OAIScheduleBEfile::getRecipientCity() const {
    return m_recipient_city;
}
void OAIScheduleBEfile::setRecipientCity(const QString &recipient_city) {
    m_recipient_city = recipient_city;
    m_recipient_city_isSet = true;
}

bool OAIScheduleBEfile::is_recipient_city_Set() const{
    return m_recipient_city_isSet;
}

bool OAIScheduleBEfile::is_recipient_city_Valid() const{
    return m_recipient_city_isValid;
}

QString OAIScheduleBEfile::getRecipientName() const {
    return m_recipient_name;
}
void OAIScheduleBEfile::setRecipientName(const QString &recipient_name) {
    m_recipient_name = recipient_name;
    m_recipient_name_isSet = true;
}

bool OAIScheduleBEfile::is_recipient_name_Set() const{
    return m_recipient_name_isSet;
}

bool OAIScheduleBEfile::is_recipient_name_Valid() const{
    return m_recipient_name_isValid;
}

QString OAIScheduleBEfile::getRecipientPrefix() const {
    return m_recipient_prefix;
}
void OAIScheduleBEfile::setRecipientPrefix(const QString &recipient_prefix) {
    m_recipient_prefix = recipient_prefix;
    m_recipient_prefix_isSet = true;
}

bool OAIScheduleBEfile::is_recipient_prefix_Set() const{
    return m_recipient_prefix_isSet;
}

bool OAIScheduleBEfile::is_recipient_prefix_Valid() const{
    return m_recipient_prefix_isValid;
}

QString OAIScheduleBEfile::getRecipientState() const {
    return m_recipient_state;
}
void OAIScheduleBEfile::setRecipientState(const QString &recipient_state) {
    m_recipient_state = recipient_state;
    m_recipient_state_isSet = true;
}

bool OAIScheduleBEfile::is_recipient_state_Set() const{
    return m_recipient_state_isSet;
}

bool OAIScheduleBEfile::is_recipient_state_Valid() const{
    return m_recipient_state_isValid;
}

QString OAIScheduleBEfile::getRecipientSuffix() const {
    return m_recipient_suffix;
}
void OAIScheduleBEfile::setRecipientSuffix(const QString &recipient_suffix) {
    m_recipient_suffix = recipient_suffix;
    m_recipient_suffix_isSet = true;
}

bool OAIScheduleBEfile::is_recipient_suffix_Set() const{
    return m_recipient_suffix_isSet;
}

bool OAIScheduleBEfile::is_recipient_suffix_Valid() const{
    return m_recipient_suffix_isValid;
}

QString OAIScheduleBEfile::getRecipientZip() const {
    return m_recipient_zip;
}
void OAIScheduleBEfile::setRecipientZip(const QString &recipient_zip) {
    m_recipient_zip = recipient_zip;
    m_recipient_zip_isSet = true;
}

bool OAIScheduleBEfile::is_recipient_zip_Set() const{
    return m_recipient_zip_isSet;
}

bool OAIScheduleBEfile::is_recipient_zip_Valid() const{
    return m_recipient_zip_isValid;
}

qint32 OAIScheduleBEfile::getRelatedLineNumber() const {
    return m_related_line_number;
}
void OAIScheduleBEfile::setRelatedLineNumber(const qint32 &related_line_number) {
    m_related_line_number = related_line_number;
    m_related_line_number_isSet = true;
}

bool OAIScheduleBEfile::is_related_line_number_Set() const{
    return m_related_line_number_isSet;
}

bool OAIScheduleBEfile::is_related_line_number_Valid() const{
    return m_related_line_number_isValid;
}

QString OAIScheduleBEfile::getReportType() const {
    return m_report_type;
}
void OAIScheduleBEfile::setReportType(const QString &report_type) {
    m_report_type = report_type;
    m_report_type_isSet = true;
}

bool OAIScheduleBEfile::is_report_type_Set() const{
    return m_report_type_isSet;
}

bool OAIScheduleBEfile::is_report_type_Valid() const{
    return m_report_type_isValid;
}

qint32 OAIScheduleBEfile::getSemiAnnualBundledRefund() const {
    return m_semi_annual_bundled_refund;
}
void OAIScheduleBEfile::setSemiAnnualBundledRefund(const qint32 &semi_annual_bundled_refund) {
    m_semi_annual_bundled_refund = semi_annual_bundled_refund;
    m_semi_annual_bundled_refund_isSet = true;
}

bool OAIScheduleBEfile::is_semi_annual_bundled_refund_Set() const{
    return m_semi_annual_bundled_refund_isSet;
}

bool OAIScheduleBEfile::is_semi_annual_bundled_refund_Valid() const{
    return m_semi_annual_bundled_refund_isValid;
}

QString OAIScheduleBEfile::getTransactionId() const {
    return m_transaction_id;
}
void OAIScheduleBEfile::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAIScheduleBEfile::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAIScheduleBEfile::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

bool OAIScheduleBEfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amendment_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_back_reference_schedule_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_back_reference_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_beginning_image_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_beneficiary_committee_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_office_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_office_district_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_csv_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disbursement_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disbursement_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disbursement_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disbursement_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fec_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_notice_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memo_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memo_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pdf_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_line_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_semi_annual_bundled_refund_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduleBEfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_number_isValid && m_related_line_number_isValid && true;
}

} // namespace OpenAPI
