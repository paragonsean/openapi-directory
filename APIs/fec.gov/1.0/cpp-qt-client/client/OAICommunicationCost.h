/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICommunicationCost.h
 *
 * 
 */

#ifndef OAICommunicationCost_H
#define OAICommunicationCost_H

#include <QJsonObject>

#include <QDate>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICommunicationCost : public OAIObject {
public:
    OAICommunicationCost();
    OAICommunicationCost(QString json);
    ~OAICommunicationCost() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getActionCode() const;
    void setActionCode(const QString &action_code);
    bool is_action_code_Set() const;
    bool is_action_code_Valid() const;

    QString getActionCodeFull() const;
    void setActionCodeFull(const QString &action_code_full);
    bool is_action_code_full_Set() const;
    bool is_action_code_full_Valid() const;

    QString getCandidateFirstName() const;
    void setCandidateFirstName(const QString &candidate_first_name);
    bool is_candidate_first_name_Set() const;
    bool is_candidate_first_name_Valid() const;

    QString getCandidateId() const;
    void setCandidateId(const QString &candidate_id);
    bool is_candidate_id_Set() const;
    bool is_candidate_id_Valid() const;

    QString getCandidateLastName() const;
    void setCandidateLastName(const QString &candidate_last_name);
    bool is_candidate_last_name_Set() const;
    bool is_candidate_last_name_Valid() const;

    QString getCandidateMiddleName() const;
    void setCandidateMiddleName(const QString &candidate_middle_name);
    bool is_candidate_middle_name_Set() const;
    bool is_candidate_middle_name_Valid() const;

    QString getCandidateName() const;
    void setCandidateName(const QString &candidate_name);
    bool is_candidate_name_Set() const;
    bool is_candidate_name_Valid() const;

    QString getCandidateOffice() const;
    void setCandidateOffice(const QString &candidate_office);
    bool is_candidate_office_Set() const;
    bool is_candidate_office_Valid() const;

    QString getCandidateOfficeDistrict() const;
    void setCandidateOfficeDistrict(const QString &candidate_office_district);
    bool is_candidate_office_district_Set() const;
    bool is_candidate_office_district_Valid() const;

    QString getCandidateOfficeFull() const;
    void setCandidateOfficeFull(const QString &candidate_office_full);
    bool is_candidate_office_full_Set() const;
    bool is_candidate_office_full_Valid() const;

    QString getCandidateOfficeState() const;
    void setCandidateOfficeState(const QString &candidate_office_state);
    bool is_candidate_office_state_Set() const;
    bool is_candidate_office_state_Valid() const;

    QString getCommitteeId() const;
    void setCommitteeId(const QString &committee_id);
    bool is_committee_id_Set() const;
    bool is_committee_id_Valid() const;

    QString getCommitteeName() const;
    void setCommitteeName(const QString &committee_name);
    bool is_committee_name_Set() const;
    bool is_committee_name_Valid() const;

    QString getCommunicationClass() const;
    void setCommunicationClass(const QString &communication_class);
    bool is_communication_class_Set() const;
    bool is_communication_class_Valid() const;

    QString getCommunicationType() const;
    void setCommunicationType(const QString &communication_type);
    bool is_communication_type_Set() const;
    bool is_communication_type_Valid() const;

    QString getCommunicationTypeFull() const;
    void setCommunicationTypeFull(const QString &communication_type_full);
    bool is_communication_type_full_Set() const;
    bool is_communication_type_full_Valid() const;

    qint32 getCycle() const;
    void setCycle(const qint32 &cycle);
    bool is_cycle_Set() const;
    bool is_cycle_Valid() const;

    qint32 getFileNumber() const;
    void setFileNumber(const qint32 &file_number);
    bool is_file_number_Set() const;
    bool is_file_number_Valid() const;

    QString getFormTypeCode() const;
    void setFormTypeCode(const QString &form_type_code);
    bool is_form_type_code_Set() const;
    bool is_form_type_code_Valid() const;

    QString getImageNumber() const;
    void setImageNumber(const QString &image_number);
    bool is_image_number_Set() const;
    bool is_image_number_Valid() const;

    qint32 getOriginalSubId() const;
    void setOriginalSubId(const qint32 &original_sub_id);
    bool is_original_sub_id_Set() const;
    bool is_original_sub_id_Valid() const;

    QString getPdfUrl() const;
    void setPdfUrl(const QString &pdf_url);
    bool is_pdf_url_Set() const;
    bool is_pdf_url_Valid() const;

    QString getPrimaryGeneralIndicator() const;
    void setPrimaryGeneralIndicator(const QString &primary_general_indicator);
    bool is_primary_general_indicator_Set() const;
    bool is_primary_general_indicator_Valid() const;

    QString getPrimaryGeneralIndicatorDescription() const;
    void setPrimaryGeneralIndicatorDescription(const QString &primary_general_indicator_description);
    bool is_primary_general_indicator_description_Set() const;
    bool is_primary_general_indicator_description_Valid() const;

    QString getPurpose() const;
    void setPurpose(const QString &purpose);
    bool is_purpose_Set() const;
    bool is_purpose_Valid() const;

    QString getReportType() const;
    void setReportType(const QString &report_type);
    bool is_report_type_Set() const;
    bool is_report_type_Valid() const;

    qint32 getReportYear() const;
    void setReportYear(const qint32 &report_year);
    bool is_report_year_Set() const;
    bool is_report_year_Valid() const;

    QString getScheduleType() const;
    void setScheduleType(const QString &schedule_type);
    bool is_schedule_type_Set() const;
    bool is_schedule_type_Valid() const;

    QString getScheduleTypeFull() const;
    void setScheduleTypeFull(const QString &schedule_type_full);
    bool is_schedule_type_full_Set() const;
    bool is_schedule_type_full_Valid() const;

    QString getStateFull() const;
    void setStateFull(const QString &state_full);
    bool is_state_full_Set() const;
    bool is_state_full_Valid() const;

    qint32 getSubId() const;
    void setSubId(const qint32 &sub_id);
    bool is_sub_id_Set() const;
    bool is_sub_id_Valid() const;

    QString getSupportOpposeIndicator() const;
    void setSupportOpposeIndicator(const QString &support_oppose_indicator);
    bool is_support_oppose_indicator_Set() const;
    bool is_support_oppose_indicator_Valid() const;

    QString getTranId() const;
    void setTranId(const QString &tran_id);
    bool is_tran_id_Set() const;
    bool is_tran_id_Valid() const;

    double getTransactionAmount() const;
    void setTransactionAmount(const double &transaction_amount);
    bool is_transaction_amount_Set() const;
    bool is_transaction_amount_Valid() const;

    QDate getTransactionDate() const;
    void setTransactionDate(const QDate &transaction_date);
    bool is_transaction_date_Set() const;
    bool is_transaction_date_Valid() const;

    QString getTransactionType() const;
    void setTransactionType(const QString &transaction_type);
    bool is_transaction_type_Set() const;
    bool is_transaction_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_action_code;
    bool m_action_code_isSet;
    bool m_action_code_isValid;

    QString m_action_code_full;
    bool m_action_code_full_isSet;
    bool m_action_code_full_isValid;

    QString m_candidate_first_name;
    bool m_candidate_first_name_isSet;
    bool m_candidate_first_name_isValid;

    QString m_candidate_id;
    bool m_candidate_id_isSet;
    bool m_candidate_id_isValid;

    QString m_candidate_last_name;
    bool m_candidate_last_name_isSet;
    bool m_candidate_last_name_isValid;

    QString m_candidate_middle_name;
    bool m_candidate_middle_name_isSet;
    bool m_candidate_middle_name_isValid;

    QString m_candidate_name;
    bool m_candidate_name_isSet;
    bool m_candidate_name_isValid;

    QString m_candidate_office;
    bool m_candidate_office_isSet;
    bool m_candidate_office_isValid;

    QString m_candidate_office_district;
    bool m_candidate_office_district_isSet;
    bool m_candidate_office_district_isValid;

    QString m_candidate_office_full;
    bool m_candidate_office_full_isSet;
    bool m_candidate_office_full_isValid;

    QString m_candidate_office_state;
    bool m_candidate_office_state_isSet;
    bool m_candidate_office_state_isValid;

    QString m_committee_id;
    bool m_committee_id_isSet;
    bool m_committee_id_isValid;

    QString m_committee_name;
    bool m_committee_name_isSet;
    bool m_committee_name_isValid;

    QString m_communication_class;
    bool m_communication_class_isSet;
    bool m_communication_class_isValid;

    QString m_communication_type;
    bool m_communication_type_isSet;
    bool m_communication_type_isValid;

    QString m_communication_type_full;
    bool m_communication_type_full_isSet;
    bool m_communication_type_full_isValid;

    qint32 m_cycle;
    bool m_cycle_isSet;
    bool m_cycle_isValid;

    qint32 m_file_number;
    bool m_file_number_isSet;
    bool m_file_number_isValid;

    QString m_form_type_code;
    bool m_form_type_code_isSet;
    bool m_form_type_code_isValid;

    QString m_image_number;
    bool m_image_number_isSet;
    bool m_image_number_isValid;

    qint32 m_original_sub_id;
    bool m_original_sub_id_isSet;
    bool m_original_sub_id_isValid;

    QString m_pdf_url;
    bool m_pdf_url_isSet;
    bool m_pdf_url_isValid;

    QString m_primary_general_indicator;
    bool m_primary_general_indicator_isSet;
    bool m_primary_general_indicator_isValid;

    QString m_primary_general_indicator_description;
    bool m_primary_general_indicator_description_isSet;
    bool m_primary_general_indicator_description_isValid;

    QString m_purpose;
    bool m_purpose_isSet;
    bool m_purpose_isValid;

    QString m_report_type;
    bool m_report_type_isSet;
    bool m_report_type_isValid;

    qint32 m_report_year;
    bool m_report_year_isSet;
    bool m_report_year_isValid;

    QString m_schedule_type;
    bool m_schedule_type_isSet;
    bool m_schedule_type_isValid;

    QString m_schedule_type_full;
    bool m_schedule_type_full_isSet;
    bool m_schedule_type_full_isValid;

    QString m_state_full;
    bool m_state_full_isSet;
    bool m_state_full_isValid;

    qint32 m_sub_id;
    bool m_sub_id_isSet;
    bool m_sub_id_isValid;

    QString m_support_oppose_indicator;
    bool m_support_oppose_indicator_isSet;
    bool m_support_oppose_indicator_isValid;

    QString m_tran_id;
    bool m_tran_id_isSet;
    bool m_tran_id_isValid;

    double m_transaction_amount;
    bool m_transaction_amount_isSet;
    bool m_transaction_amount_isValid;

    QDate m_transaction_date;
    bool m_transaction_date_isSet;
    bool m_transaction_date_isValid;

    QString m_transaction_type;
    bool m_transaction_type_isSet;
    bool m_transaction_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICommunicationCost)

#endif // OAICommunicationCost_H
