/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICommitteeReportsIEOnly.h
 *
 * 
 */

#ifndef OAICommitteeReportsIEOnly_H
#define OAICommitteeReportsIEOnly_H

#include <QJsonObject>

#include <QDate>
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICommitteeReportsIEOnly : public OAIObject {
public:
    OAICommitteeReportsIEOnly();
    OAICommitteeReportsIEOnly(QString json);
    ~OAICommitteeReportsIEOnly() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBeginningImageNumber() const;
    void setBeginningImageNumber(const QString &beginning_image_number);
    bool is_beginning_image_number_Set() const;
    bool is_beginning_image_number_Valid() const;

    QString getCommitteeId() const;
    void setCommitteeId(const QString &committee_id);
    bool is_committee_id_Set() const;
    bool is_committee_id_Valid() const;

    QString getCommitteeName() const;
    void setCommitteeName(const QString &committee_name);
    bool is_committee_name_Set() const;
    bool is_committee_name_Valid() const;

    QString getCommitteeType() const;
    void setCommitteeType(const QString &committee_type);
    bool is_committee_type_Set() const;
    bool is_committee_type_Valid() const;

    QDateTime getCoverageEndDate() const;
    void setCoverageEndDate(const QDateTime &coverage_end_date);
    bool is_coverage_end_date_Set() const;
    bool is_coverage_end_date_Valid() const;

    QDateTime getCoverageStartDate() const;
    void setCoverageStartDate(const QDateTime &coverage_start_date);
    bool is_coverage_start_date_Set() const;
    bool is_coverage_start_date_Valid() const;

    QString getCsvUrl() const;
    void setCsvUrl(const QString &csv_url);
    bool is_csv_url_Set() const;
    bool is_csv_url_Valid() const;

    qint32 getCycle() const;
    void setCycle(const qint32 &cycle);
    bool is_cycle_Set() const;
    bool is_cycle_Valid() const;

    QString getDocumentDescription() const;
    void setDocumentDescription(const QString &document_description);
    bool is_document_description_Set() const;
    bool is_document_description_Valid() const;

    QString getEndImageNumber() const;
    void setEndImageNumber(const QString &end_image_number);
    bool is_end_image_number_Set() const;
    bool is_end_image_number_Valid() const;

    QString getFecFileId() const;
    void setFecFileId(const QString &fec_file_id);
    bool is_fec_file_id_Set() const;
    bool is_fec_file_id_Valid() const;

    QString getFecUrl() const;
    void setFecUrl(const QString &fec_url);
    bool is_fec_url_Set() const;
    bool is_fec_url_Valid() const;

    double getIndependentContributionsPeriod() const;
    void setIndependentContributionsPeriod(const double &independent_contributions_period);
    bool is_independent_contributions_period_Set() const;
    bool is_independent_contributions_period_Valid() const;

    double getIndependentExpendituresPeriod() const;
    void setIndependentExpendituresPeriod(const double &independent_expenditures_period);
    bool is_independent_expenditures_period_Set() const;
    bool is_independent_expenditures_period_Valid() const;

    bool isIsAmended() const;
    void setIsAmended(const bool &is_amended);
    bool is_is_amended_Set() const;
    bool is_is_amended_Valid() const;

    QString getMeansFiled() const;
    void setMeansFiled(const QString &means_filed);
    bool is_means_filed_Set() const;
    bool is_means_filed_Valid() const;

    QString getPdfUrl() const;
    void setPdfUrl(const QString &pdf_url);
    bool is_pdf_url_Set() const;
    bool is_pdf_url_Valid() const;

    QDate getReceiptDate() const;
    void setReceiptDate(const QDate &receipt_date);
    bool is_receipt_date_Set() const;
    bool is_receipt_date_Valid() const;

    QString getReportForm() const;
    void setReportForm(const QString &report_form);
    bool is_report_form_Set() const;
    bool is_report_form_Valid() const;

    QString getReportType() const;
    void setReportType(const QString &report_type);
    bool is_report_type_Set() const;
    bool is_report_type_Valid() const;

    QString getReportTypeFull() const;
    void setReportTypeFull(const QString &report_type_full);
    bool is_report_type_full_Set() const;
    bool is_report_type_full_Valid() const;

    qint32 getReportYear() const;
    void setReportYear(const qint32 &report_year);
    bool is_report_year_Set() const;
    bool is_report_year_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_beginning_image_number;
    bool m_beginning_image_number_isSet;
    bool m_beginning_image_number_isValid;

    QString m_committee_id;
    bool m_committee_id_isSet;
    bool m_committee_id_isValid;

    QString m_committee_name;
    bool m_committee_name_isSet;
    bool m_committee_name_isValid;

    QString m_committee_type;
    bool m_committee_type_isSet;
    bool m_committee_type_isValid;

    QDateTime m_coverage_end_date;
    bool m_coverage_end_date_isSet;
    bool m_coverage_end_date_isValid;

    QDateTime m_coverage_start_date;
    bool m_coverage_start_date_isSet;
    bool m_coverage_start_date_isValid;

    QString m_csv_url;
    bool m_csv_url_isSet;
    bool m_csv_url_isValid;

    qint32 m_cycle;
    bool m_cycle_isSet;
    bool m_cycle_isValid;

    QString m_document_description;
    bool m_document_description_isSet;
    bool m_document_description_isValid;

    QString m_end_image_number;
    bool m_end_image_number_isSet;
    bool m_end_image_number_isValid;

    QString m_fec_file_id;
    bool m_fec_file_id_isSet;
    bool m_fec_file_id_isValid;

    QString m_fec_url;
    bool m_fec_url_isSet;
    bool m_fec_url_isValid;

    double m_independent_contributions_period;
    bool m_independent_contributions_period_isSet;
    bool m_independent_contributions_period_isValid;

    double m_independent_expenditures_period;
    bool m_independent_expenditures_period_isSet;
    bool m_independent_expenditures_period_isValid;

    bool m_is_amended;
    bool m_is_amended_isSet;
    bool m_is_amended_isValid;

    QString m_means_filed;
    bool m_means_filed_isSet;
    bool m_means_filed_isValid;

    QString m_pdf_url;
    bool m_pdf_url_isSet;
    bool m_pdf_url_isValid;

    QDate m_receipt_date;
    bool m_receipt_date_isSet;
    bool m_receipt_date_isValid;

    QString m_report_form;
    bool m_report_form_isSet;
    bool m_report_form_isValid;

    QString m_report_type;
    bool m_report_type_isSet;
    bool m_report_type_isValid;

    QString m_report_type_full;
    bool m_report_type_full_isSet;
    bool m_report_type_full_isValid;

    qint32 m_report_year;
    bool m_report_year_isSet;
    bool m_report_year_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICommitteeReportsIEOnly)

#endif // OAICommitteeReportsIEOnly_H
