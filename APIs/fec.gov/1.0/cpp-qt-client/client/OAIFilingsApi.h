/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFilingsApi_H
#define OAI_OAIFilingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFilingsPage.h"
#include "OAIOperationsLogPage.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFilingsApi : public QObject {
    Q_OBJECT

public:
    OAIFilingsApi(const int timeOut = 0);
    ~OAIFilingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  candidate_id QString [required]
    * @param[in]  is_amended bool [optional]
    * @param[in]  min_receipt_date QDate [optional]
    * @param[in]  form_category QList<QString> [optional]
    * @param[in]  request_type QList<QString> [optional]
    * @param[in]  primary_general_indicator QList<QString> [optional]
    * @param[in]  cycle QList<qint32> [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  max_receipt_date QDate [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  file_number QList<qint32> [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  office QList<QString> [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  q_filer QList<QString> [optional]
    * @param[in]  district QList<QString> [optional]
    * @param[in]  filer_type QString [optional]
    * @param[in]  most_recent bool [optional]
    * @param[in]  report_type QList<QString> [optional]
    * @param[in]  committee_type QString [optional]
    * @param[in]  party QList<QString> [optional]
    * @param[in]  form_type QList<QString> [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  state QList<QString> [optional]
    * @param[in]  report_year QList<qint32> [optional]
    * @param[in]  amendment_indicator QList<QString> [optional]
    * @param[in]  document_type QList<QString> [optional]
    * @param[in]  beginning_image_number QList<QString> [optional]
    */
    virtual void candidateCandidateIdFilingsGet(const QString &api_key, const QString &candidate_id, const ::OpenAPI::OptionalParam<bool> &is_amended = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDate> &min_receipt_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<QString>> &form_category = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &request_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &primary_general_indicator = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &cycle = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDate> &max_receipt_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<qint32>> &file_number = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &office = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &q_filer = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &district = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &filer_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &most_recent = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &report_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &committee_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &party = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &form_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &state = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &report_year = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<QString>> &amendment_indicator = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &document_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &beginning_image_number = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  committee_id QString [required]
    * @param[in]  is_amended bool [optional]
    * @param[in]  min_receipt_date QDate [optional]
    * @param[in]  form_category QList<QString> [optional]
    * @param[in]  request_type QList<QString> [optional]
    * @param[in]  primary_general_indicator QList<QString> [optional]
    * @param[in]  cycle QList<qint32> [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  max_receipt_date QDate [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  file_number QList<qint32> [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  office QList<QString> [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  q_filer QList<QString> [optional]
    * @param[in]  district QList<QString> [optional]
    * @param[in]  filer_type QString [optional]
    * @param[in]  most_recent bool [optional]
    * @param[in]  report_type QList<QString> [optional]
    * @param[in]  committee_type QString [optional]
    * @param[in]  party QList<QString> [optional]
    * @param[in]  form_type QList<QString> [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  state QList<QString> [optional]
    * @param[in]  report_year QList<qint32> [optional]
    * @param[in]  amendment_indicator QList<QString> [optional]
    * @param[in]  document_type QList<QString> [optional]
    * @param[in]  beginning_image_number QList<QString> [optional]
    */
    virtual void committeeCommitteeIdFilingsGet(const QString &api_key, const QString &committee_id, const ::OpenAPI::OptionalParam<bool> &is_amended = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDate> &min_receipt_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<QString>> &form_category = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &request_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &primary_general_indicator = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &cycle = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDate> &max_receipt_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<qint32>> &file_number = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &office = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &q_filer = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &district = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &filer_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &most_recent = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &report_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &committee_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &party = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &form_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &state = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &report_year = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<QString>> &amendment_indicator = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &document_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &beginning_image_number = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  is_amended bool [optional]
    * @param[in]  min_receipt_date QDate [optional]
    * @param[in]  form_category QList<QString> [optional]
    * @param[in]  request_type QList<QString> [optional]
    * @param[in]  primary_general_indicator QList<QString> [optional]
    * @param[in]  cycle QList<qint32> [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  max_receipt_date QDate [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  candidate_id QList<QString> [optional]
    * @param[in]  file_number QList<qint32> [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  office QList<QString> [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  q_filer QList<QString> [optional]
    * @param[in]  district QList<QString> [optional]
    * @param[in]  filer_type QString [optional]
    * @param[in]  most_recent bool [optional]
    * @param[in]  report_type QList<QString> [optional]
    * @param[in]  committee_type QString [optional]
    * @param[in]  party QList<QString> [optional]
    * @param[in]  form_type QList<QString> [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  state QList<QString> [optional]
    * @param[in]  report_year QList<qint32> [optional]
    * @param[in]  committee_id QList<QString> [optional]
    * @param[in]  amendment_indicator QList<QString> [optional]
    * @param[in]  document_type QList<QString> [optional]
    * @param[in]  beginning_image_number QList<QString> [optional]
    */
    virtual void filingsGet(const QString &api_key, const ::OpenAPI::OptionalParam<bool> &is_amended = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDate> &min_receipt_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<QString>> &form_category = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &request_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &primary_general_indicator = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &cycle = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDate> &max_receipt_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &candidate_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &file_number = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &office = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &q_filer = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &district = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &filer_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &most_recent = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &report_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &committee_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &party = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &form_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &state = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &report_year = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<QString>> &committee_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &amendment_indicator = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &document_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &beginning_image_number = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  min_receipt_date QDate [optional]
    * @param[in]  candidate_committee_id QList<QString> [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  max_receipt_date QDate [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  max_transaction_data_complete_date QDate [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  report_type QList<QString> [optional]
    * @param[in]  min_transaction_data_complete_date QDate [optional]
    * @param[in]  form_type QList<QString> [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  max_coverage_end_date QDate [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  report_year QList<qint32> [optional]
    * @param[in]  status_num QList<QString> [optional]
    * @param[in]  amendment_indicator QList<QString> [optional]
    * @param[in]  beginning_image_number QList<QString> [optional]
    * @param[in]  min_coverage_end_date QDate [optional]
    */
    virtual void operationsLogGet(const QString &api_key, const ::OpenAPI::OptionalParam<QDate> &min_receipt_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<QString>> &candidate_committee_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDate> &max_receipt_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDate> &max_transaction_data_complete_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &report_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &min_transaction_data_complete_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<QString>> &form_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDate> &max_coverage_end_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<qint32>> &report_year = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<QString>> &status_num = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &amendment_indicator = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &beginning_image_number = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &min_coverage_end_date = ::OpenAPI::OptionalParam<QDate>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void candidateCandidateIdFilingsGetCallback(OAIHttpRequestWorker *worker);
    void committeeCommitteeIdFilingsGetCallback(OAIHttpRequestWorker *worker);
    void filingsGetCallback(OAIHttpRequestWorker *worker);
    void operationsLogGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void candidateCandidateIdFilingsGetSignal(OAIFilingsPage summary);
    void committeeCommitteeIdFilingsGetSignal(OAIFilingsPage summary);
    void filingsGetSignal(OAIFilingsPage summary);
    void operationsLogGetSignal(OAIOperationsLogPage summary);


    void candidateCandidateIdFilingsGetSignalFull(OAIHttpRequestWorker *worker, OAIFilingsPage summary);
    void committeeCommitteeIdFilingsGetSignalFull(OAIHttpRequestWorker *worker, OAIFilingsPage summary);
    void filingsGetSignalFull(OAIHttpRequestWorker *worker, OAIFilingsPage summary);
    void operationsLogGetSignalFull(OAIHttpRequestWorker *worker, OAIOperationsLogPage summary);

    Q_DECL_DEPRECATED_X("Use candidateCandidateIdFilingsGetSignalError() instead")
    void candidateCandidateIdFilingsGetSignalE(OAIFilingsPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void candidateCandidateIdFilingsGetSignalError(OAIFilingsPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use committeeCommitteeIdFilingsGetSignalError() instead")
    void committeeCommitteeIdFilingsGetSignalE(OAIFilingsPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void committeeCommitteeIdFilingsGetSignalError(OAIFilingsPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filingsGetSignalError() instead")
    void filingsGetSignalE(OAIFilingsPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filingsGetSignalError(OAIFilingsPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationsLogGetSignalError() instead")
    void operationsLogGetSignalE(OAIOperationsLogPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void operationsLogGetSignalError(OAIOperationsLogPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use candidateCandidateIdFilingsGetSignalErrorFull() instead")
    void candidateCandidateIdFilingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void candidateCandidateIdFilingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use committeeCommitteeIdFilingsGetSignalErrorFull() instead")
    void committeeCommitteeIdFilingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void committeeCommitteeIdFilingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filingsGetSignalErrorFull() instead")
    void filingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationsLogGetSignalErrorFull() instead")
    void operationsLogGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void operationsLogGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
