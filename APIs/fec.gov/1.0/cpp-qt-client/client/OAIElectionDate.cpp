/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIElectionDate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIElectionDate::OAIElectionDate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIElectionDate::OAIElectionDate() {
    this->initializeModel();
}

OAIElectionDate::~OAIElectionDate() {}

void OAIElectionDate::initializeModel() {

    m_active_election_isSet = false;
    m_active_election_isValid = false;

    m_create_date_isSet = false;
    m_create_date_isValid = false;

    m_election_date_isSet = false;
    m_election_date_isValid = false;

    m_election_district_isSet = false;
    m_election_district_isValid = false;

    m_election_notes_isSet = false;
    m_election_notes_isValid = false;

    m_election_party_isSet = false;
    m_election_party_isValid = false;

    m_election_state_isSet = false;
    m_election_state_isValid = false;

    m_election_type_full_isSet = false;
    m_election_type_full_isValid = false;

    m_election_type_id_isSet = false;
    m_election_type_id_isValid = false;

    m_election_year_isSet = false;
    m_election_year_isValid = false;

    m_office_sought_isSet = false;
    m_office_sought_isValid = false;

    m_primary_general_date_isSet = false;
    m_primary_general_date_isValid = false;

    m_update_date_isSet = false;
    m_update_date_isValid = false;
}

void OAIElectionDate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIElectionDate::fromJsonObject(QJsonObject json) {

    m_active_election_isValid = ::OpenAPI::fromJsonValue(m_active_election, json[QString("active_election")]);
    m_active_election_isSet = !json[QString("active_election")].isNull() && m_active_election_isValid;

    m_create_date_isValid = ::OpenAPI::fromJsonValue(m_create_date, json[QString("create_date")]);
    m_create_date_isSet = !json[QString("create_date")].isNull() && m_create_date_isValid;

    m_election_date_isValid = ::OpenAPI::fromJsonValue(m_election_date, json[QString("election_date")]);
    m_election_date_isSet = !json[QString("election_date")].isNull() && m_election_date_isValid;

    m_election_district_isValid = ::OpenAPI::fromJsonValue(m_election_district, json[QString("election_district")]);
    m_election_district_isSet = !json[QString("election_district")].isNull() && m_election_district_isValid;

    m_election_notes_isValid = ::OpenAPI::fromJsonValue(m_election_notes, json[QString("election_notes")]);
    m_election_notes_isSet = !json[QString("election_notes")].isNull() && m_election_notes_isValid;

    m_election_party_isValid = ::OpenAPI::fromJsonValue(m_election_party, json[QString("election_party")]);
    m_election_party_isSet = !json[QString("election_party")].isNull() && m_election_party_isValid;

    m_election_state_isValid = ::OpenAPI::fromJsonValue(m_election_state, json[QString("election_state")]);
    m_election_state_isSet = !json[QString("election_state")].isNull() && m_election_state_isValid;

    m_election_type_full_isValid = ::OpenAPI::fromJsonValue(m_election_type_full, json[QString("election_type_full")]);
    m_election_type_full_isSet = !json[QString("election_type_full")].isNull() && m_election_type_full_isValid;

    m_election_type_id_isValid = ::OpenAPI::fromJsonValue(m_election_type_id, json[QString("election_type_id")]);
    m_election_type_id_isSet = !json[QString("election_type_id")].isNull() && m_election_type_id_isValid;

    m_election_year_isValid = ::OpenAPI::fromJsonValue(m_election_year, json[QString("election_year")]);
    m_election_year_isSet = !json[QString("election_year")].isNull() && m_election_year_isValid;

    m_office_sought_isValid = ::OpenAPI::fromJsonValue(m_office_sought, json[QString("office_sought")]);
    m_office_sought_isSet = !json[QString("office_sought")].isNull() && m_office_sought_isValid;

    m_primary_general_date_isValid = ::OpenAPI::fromJsonValue(m_primary_general_date, json[QString("primary_general_date")]);
    m_primary_general_date_isSet = !json[QString("primary_general_date")].isNull() && m_primary_general_date_isValid;

    m_update_date_isValid = ::OpenAPI::fromJsonValue(m_update_date, json[QString("update_date")]);
    m_update_date_isSet = !json[QString("update_date")].isNull() && m_update_date_isValid;
}

QString OAIElectionDate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIElectionDate::asJsonObject() const {
    QJsonObject obj;
    if (m_active_election_isSet) {
        obj.insert(QString("active_election"), ::OpenAPI::toJsonValue(m_active_election));
    }
    if (m_create_date_isSet) {
        obj.insert(QString("create_date"), ::OpenAPI::toJsonValue(m_create_date));
    }
    if (m_election_date_isSet) {
        obj.insert(QString("election_date"), ::OpenAPI::toJsonValue(m_election_date));
    }
    if (m_election_district_isSet) {
        obj.insert(QString("election_district"), ::OpenAPI::toJsonValue(m_election_district));
    }
    if (m_election_notes_isSet) {
        obj.insert(QString("election_notes"), ::OpenAPI::toJsonValue(m_election_notes));
    }
    if (m_election_party_isSet) {
        obj.insert(QString("election_party"), ::OpenAPI::toJsonValue(m_election_party));
    }
    if (m_election_state_isSet) {
        obj.insert(QString("election_state"), ::OpenAPI::toJsonValue(m_election_state));
    }
    if (m_election_type_full_isSet) {
        obj.insert(QString("election_type_full"), ::OpenAPI::toJsonValue(m_election_type_full));
    }
    if (m_election_type_id_isSet) {
        obj.insert(QString("election_type_id"), ::OpenAPI::toJsonValue(m_election_type_id));
    }
    if (m_election_year_isSet) {
        obj.insert(QString("election_year"), ::OpenAPI::toJsonValue(m_election_year));
    }
    if (m_office_sought_isSet) {
        obj.insert(QString("office_sought"), ::OpenAPI::toJsonValue(m_office_sought));
    }
    if (m_primary_general_date_isSet) {
        obj.insert(QString("primary_general_date"), ::OpenAPI::toJsonValue(m_primary_general_date));
    }
    if (m_update_date_isSet) {
        obj.insert(QString("update_date"), ::OpenAPI::toJsonValue(m_update_date));
    }
    return obj;
}

bool OAIElectionDate::isActiveElection() const {
    return m_active_election;
}
void OAIElectionDate::setActiveElection(const bool &active_election) {
    m_active_election = active_election;
    m_active_election_isSet = true;
}

bool OAIElectionDate::is_active_election_Set() const{
    return m_active_election_isSet;
}

bool OAIElectionDate::is_active_election_Valid() const{
    return m_active_election_isValid;
}

QDateTime OAIElectionDate::getCreateDate() const {
    return m_create_date;
}
void OAIElectionDate::setCreateDate(const QDateTime &create_date) {
    m_create_date = create_date;
    m_create_date_isSet = true;
}

bool OAIElectionDate::is_create_date_Set() const{
    return m_create_date_isSet;
}

bool OAIElectionDate::is_create_date_Valid() const{
    return m_create_date_isValid;
}

QDate OAIElectionDate::getElectionDate() const {
    return m_election_date;
}
void OAIElectionDate::setElectionDate(const QDate &election_date) {
    m_election_date = election_date;
    m_election_date_isSet = true;
}

bool OAIElectionDate::is_election_date_Set() const{
    return m_election_date_isSet;
}

bool OAIElectionDate::is_election_date_Valid() const{
    return m_election_date_isValid;
}

qint32 OAIElectionDate::getElectionDistrict() const {
    return m_election_district;
}
void OAIElectionDate::setElectionDistrict(const qint32 &election_district) {
    m_election_district = election_district;
    m_election_district_isSet = true;
}

bool OAIElectionDate::is_election_district_Set() const{
    return m_election_district_isSet;
}

bool OAIElectionDate::is_election_district_Valid() const{
    return m_election_district_isValid;
}

QString OAIElectionDate::getElectionNotes() const {
    return m_election_notes;
}
void OAIElectionDate::setElectionNotes(const QString &election_notes) {
    m_election_notes = election_notes;
    m_election_notes_isSet = true;
}

bool OAIElectionDate::is_election_notes_Set() const{
    return m_election_notes_isSet;
}

bool OAIElectionDate::is_election_notes_Valid() const{
    return m_election_notes_isValid;
}

QString OAIElectionDate::getElectionParty() const {
    return m_election_party;
}
void OAIElectionDate::setElectionParty(const QString &election_party) {
    m_election_party = election_party;
    m_election_party_isSet = true;
}

bool OAIElectionDate::is_election_party_Set() const{
    return m_election_party_isSet;
}

bool OAIElectionDate::is_election_party_Valid() const{
    return m_election_party_isValid;
}

QString OAIElectionDate::getElectionState() const {
    return m_election_state;
}
void OAIElectionDate::setElectionState(const QString &election_state) {
    m_election_state = election_state;
    m_election_state_isSet = true;
}

bool OAIElectionDate::is_election_state_Set() const{
    return m_election_state_isSet;
}

bool OAIElectionDate::is_election_state_Valid() const{
    return m_election_state_isValid;
}

QString OAIElectionDate::getElectionTypeFull() const {
    return m_election_type_full;
}
void OAIElectionDate::setElectionTypeFull(const QString &election_type_full) {
    m_election_type_full = election_type_full;
    m_election_type_full_isSet = true;
}

bool OAIElectionDate::is_election_type_full_Set() const{
    return m_election_type_full_isSet;
}

bool OAIElectionDate::is_election_type_full_Valid() const{
    return m_election_type_full_isValid;
}

QString OAIElectionDate::getElectionTypeId() const {
    return m_election_type_id;
}
void OAIElectionDate::setElectionTypeId(const QString &election_type_id) {
    m_election_type_id = election_type_id;
    m_election_type_id_isSet = true;
}

bool OAIElectionDate::is_election_type_id_Set() const{
    return m_election_type_id_isSet;
}

bool OAIElectionDate::is_election_type_id_Valid() const{
    return m_election_type_id_isValid;
}

qint32 OAIElectionDate::getElectionYear() const {
    return m_election_year;
}
void OAIElectionDate::setElectionYear(const qint32 &election_year) {
    m_election_year = election_year;
    m_election_year_isSet = true;
}

bool OAIElectionDate::is_election_year_Set() const{
    return m_election_year_isSet;
}

bool OAIElectionDate::is_election_year_Valid() const{
    return m_election_year_isValid;
}

QString OAIElectionDate::getOfficeSought() const {
    return m_office_sought;
}
void OAIElectionDate::setOfficeSought(const QString &office_sought) {
    m_office_sought = office_sought;
    m_office_sought_isSet = true;
}

bool OAIElectionDate::is_office_sought_Set() const{
    return m_office_sought_isSet;
}

bool OAIElectionDate::is_office_sought_Valid() const{
    return m_office_sought_isValid;
}

QDate OAIElectionDate::getPrimaryGeneralDate() const {
    return m_primary_general_date;
}
void OAIElectionDate::setPrimaryGeneralDate(const QDate &primary_general_date) {
    m_primary_general_date = primary_general_date;
    m_primary_general_date_isSet = true;
}

bool OAIElectionDate::is_primary_general_date_Set() const{
    return m_primary_general_date_isSet;
}

bool OAIElectionDate::is_primary_general_date_Valid() const{
    return m_primary_general_date_isValid;
}

QDateTime OAIElectionDate::getUpdateDate() const {
    return m_update_date;
}
void OAIElectionDate::setUpdateDate(const QDateTime &update_date) {
    m_update_date = update_date;
    m_update_date_isSet = true;
}

bool OAIElectionDate::is_update_date_Set() const{
    return m_update_date_isSet;
}

bool OAIElectionDate::is_update_date_Valid() const{
    return m_update_date_isValid;
}

bool OAIElectionDate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_election_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_district_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_party_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_type_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_office_sought_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_general_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIElectionDate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
