/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOperationsLog.h
 *
 * 
 */

#ifndef OAIOperationsLog_H
#define OAIOperationsLog_H

#include <QJsonObject>

#include <QDate>
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIOperationsLog : public OAIObject {
public:
    OAIOperationsLog();
    OAIOperationsLog(QString json);
    ~OAIOperationsLog() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAmendmentIndicator() const;
    void setAmendmentIndicator(const QString &amendment_indicator);
    bool is_amendment_indicator_Set() const;
    bool is_amendment_indicator_Valid() const;

    QString getBeginningImageNumber() const;
    void setBeginningImageNumber(const QString &beginning_image_number);
    bool is_beginning_image_number_Set() const;
    bool is_beginning_image_number_Valid() const;

    QString getCandidateCommitteeId() const;
    void setCandidateCommitteeId(const QString &candidate_committee_id);
    bool is_candidate_committee_id_Set() const;
    bool is_candidate_committee_id_Valid() const;

    QDateTime getCoverageEndDate() const;
    void setCoverageEndDate(const QDateTime &coverage_end_date);
    bool is_coverage_end_date_Set() const;
    bool is_coverage_end_date_Valid() const;

    QDateTime getCoverageStartDate() const;
    void setCoverageStartDate(const QDateTime &coverage_start_date);
    bool is_coverage_start_date_Set() const;
    bool is_coverage_start_date_Valid() const;

    QString getEndingImageNumber() const;
    void setEndingImageNumber(const QString &ending_image_number);
    bool is_ending_image_number_Set() const;
    bool is_ending_image_number_Valid() const;

    QString getFormType() const;
    void setFormType(const QString &form_type);
    bool is_form_type_Set() const;
    bool is_form_type_Valid() const;

    QDateTime getReceiptDate() const;
    void setReceiptDate(const QDateTime &receipt_date);
    bool is_receipt_date_Set() const;
    bool is_receipt_date_Valid() const;

    QString getReportType() const;
    void setReportType(const QString &report_type);
    bool is_report_type_Set() const;
    bool is_report_type_Valid() const;

    qint32 getReportYear() const;
    void setReportYear(const qint32 &report_year);
    bool is_report_year_Set() const;
    bool is_report_year_Valid() const;

    qint32 getStatusNum() const;
    void setStatusNum(const qint32 &status_num);
    bool is_status_num_Set() const;
    bool is_status_num_Valid() const;

    qint32 getSubId() const;
    void setSubId(const qint32 &sub_id);
    bool is_sub_id_Set() const;
    bool is_sub_id_Valid() const;

    QDateTime getSummaryDataCompleteDate() const;
    void setSummaryDataCompleteDate(const QDateTime &summary_data_complete_date);
    bool is_summary_data_complete_date_Set() const;
    bool is_summary_data_complete_date_Valid() const;

    QDateTime getSummaryDataVerificationDate() const;
    void setSummaryDataVerificationDate(const QDateTime &summary_data_verification_date);
    bool is_summary_data_verification_date_Set() const;
    bool is_summary_data_verification_date_Valid() const;

    QDate getTransactionDataCompleteDate() const;
    void setTransactionDataCompleteDate(const QDate &transaction_data_complete_date);
    bool is_transaction_data_complete_date_Set() const;
    bool is_transaction_data_complete_date_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_amendment_indicator;
    bool m_amendment_indicator_isSet;
    bool m_amendment_indicator_isValid;

    QString m_beginning_image_number;
    bool m_beginning_image_number_isSet;
    bool m_beginning_image_number_isValid;

    QString m_candidate_committee_id;
    bool m_candidate_committee_id_isSet;
    bool m_candidate_committee_id_isValid;

    QDateTime m_coverage_end_date;
    bool m_coverage_end_date_isSet;
    bool m_coverage_end_date_isValid;

    QDateTime m_coverage_start_date;
    bool m_coverage_start_date_isSet;
    bool m_coverage_start_date_isValid;

    QString m_ending_image_number;
    bool m_ending_image_number_isSet;
    bool m_ending_image_number_isValid;

    QString m_form_type;
    bool m_form_type_isSet;
    bool m_form_type_isValid;

    QDateTime m_receipt_date;
    bool m_receipt_date_isSet;
    bool m_receipt_date_isValid;

    QString m_report_type;
    bool m_report_type_isSet;
    bool m_report_type_isValid;

    qint32 m_report_year;
    bool m_report_year_isSet;
    bool m_report_year_isValid;

    qint32 m_status_num;
    bool m_status_num_isSet;
    bool m_status_num_isValid;

    qint32 m_sub_id;
    bool m_sub_id_isSet;
    bool m_sub_id_isValid;

    QDateTime m_summary_data_complete_date;
    bool m_summary_data_complete_date_isSet;
    bool m_summary_data_complete_date_isValid;

    QDateTime m_summary_data_verification_date;
    bool m_summary_data_verification_date_isSet;
    bool m_summary_data_verification_date_isValid;

    QDate m_transaction_data_complete_date;
    bool m_transaction_data_complete_date_isSet;
    bool m_transaction_data_complete_date_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOperationsLog)

#endif // OAIOperationsLog_H
