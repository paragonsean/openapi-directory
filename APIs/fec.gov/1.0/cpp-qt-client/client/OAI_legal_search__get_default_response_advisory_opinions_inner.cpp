/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_legal_search__get_default_response_advisory_opinions_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_legal_search__get_default_response_advisory_opinions_inner::OAI_legal_search__get_default_response_advisory_opinions_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_legal_search__get_default_response_advisory_opinions_inner::OAI_legal_search__get_default_response_advisory_opinions_inner() {
    this->initializeModel();
}

OAI_legal_search__get_default_response_advisory_opinions_inner::~OAI_legal_search__get_default_response_advisory_opinions_inner() {}

void OAI_legal_search__get_default_response_advisory_opinions_inner::initializeModel() {

    m_ao_citations_isSet = false;
    m_ao_citations_isValid = false;

    m_aos_cited_by_isSet = false;
    m_aos_cited_by_isValid = false;

    m_commenter_names_isSet = false;
    m_commenter_names_isValid = false;

    m_document_highlights_isSet = false;
    m_document_highlights_isValid = false;

    m_documents_isSet = false;
    m_documents_isValid = false;

    m_entities_isSet = false;
    m_entities_isValid = false;

    m_highlights_isSet = false;
    m_highlights_isValid = false;

    m_is_pending_isSet = false;
    m_is_pending_isValid = false;

    m_issue_date_isSet = false;
    m_issue_date_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_r_false_isSet = false;
    m_r_false_isValid = false;

    m_regulatory_citations_isSet = false;
    m_regulatory_citations_isValid = false;

    m_representative_names_isSet = false;
    m_representative_names_isValid = false;

    m_request_date_isSet = false;
    m_request_date_isValid = false;

    m_requestor_names_isSet = false;
    m_requestor_names_isValid = false;

    m_requestor_types_isSet = false;
    m_requestor_types_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_statutory_citations_isSet = false;
    m_statutory_citations_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;
}

void OAI_legal_search__get_default_response_advisory_opinions_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_legal_search__get_default_response_advisory_opinions_inner::fromJsonObject(QJsonObject json) {

    m_ao_citations_isValid = ::OpenAPI::fromJsonValue(m_ao_citations, json[QString("ao_citations")]);
    m_ao_citations_isSet = !json[QString("ao_citations")].isNull() && m_ao_citations_isValid;

    m_aos_cited_by_isValid = ::OpenAPI::fromJsonValue(m_aos_cited_by, json[QString("aos_cited_by")]);
    m_aos_cited_by_isSet = !json[QString("aos_cited_by")].isNull() && m_aos_cited_by_isValid;

    m_commenter_names_isValid = ::OpenAPI::fromJsonValue(m_commenter_names, json[QString("commenter_names")]);
    m_commenter_names_isSet = !json[QString("commenter_names")].isNull() && m_commenter_names_isValid;

    m_document_highlights_isValid = ::OpenAPI::fromJsonValue(m_document_highlights, json[QString("document_highlights")]);
    m_document_highlights_isSet = !json[QString("document_highlights")].isNull() && m_document_highlights_isValid;

    m_documents_isValid = ::OpenAPI::fromJsonValue(m_documents, json[QString("documents")]);
    m_documents_isSet = !json[QString("documents")].isNull() && m_documents_isValid;

    m_entities_isValid = ::OpenAPI::fromJsonValue(m_entities, json[QString("entities")]);
    m_entities_isSet = !json[QString("entities")].isNull() && m_entities_isValid;

    m_highlights_isValid = ::OpenAPI::fromJsonValue(m_highlights, json[QString("highlights")]);
    m_highlights_isSet = !json[QString("highlights")].isNull() && m_highlights_isValid;

    m_is_pending_isValid = ::OpenAPI::fromJsonValue(m_is_pending, json[QString("is_pending")]);
    m_is_pending_isSet = !json[QString("is_pending")].isNull() && m_is_pending_isValid;

    m_issue_date_isValid = ::OpenAPI::fromJsonValue(m_issue_date, json[QString("issue_date")]);
    m_issue_date_isSet = !json[QString("issue_date")].isNull() && m_issue_date_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_r_false_isValid = ::OpenAPI::fromJsonValue(m_r_false, json[QString("false")]);
    m_r_false_isSet = !json[QString("false")].isNull() && m_r_false_isValid;

    m_regulatory_citations_isValid = ::OpenAPI::fromJsonValue(m_regulatory_citations, json[QString("regulatory_citations")]);
    m_regulatory_citations_isSet = !json[QString("regulatory_citations")].isNull() && m_regulatory_citations_isValid;

    m_representative_names_isValid = ::OpenAPI::fromJsonValue(m_representative_names, json[QString("representative_names")]);
    m_representative_names_isSet = !json[QString("representative_names")].isNull() && m_representative_names_isValid;

    m_request_date_isValid = ::OpenAPI::fromJsonValue(m_request_date, json[QString("request_date")]);
    m_request_date_isSet = !json[QString("request_date")].isNull() && m_request_date_isValid;

    m_requestor_names_isValid = ::OpenAPI::fromJsonValue(m_requestor_names, json[QString("requestor_names")]);
    m_requestor_names_isSet = !json[QString("requestor_names")].isNull() && m_requestor_names_isValid;

    m_requestor_types_isValid = ::OpenAPI::fromJsonValue(m_requestor_types, json[QString("requestor_types")]);
    m_requestor_types_isSet = !json[QString("requestor_types")].isNull() && m_requestor_types_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_statutory_citations_isValid = ::OpenAPI::fromJsonValue(m_statutory_citations, json[QString("statutory_citations")]);
    m_statutory_citations_isSet = !json[QString("statutory_citations")].isNull() && m_statutory_citations_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;
}

QString OAI_legal_search__get_default_response_advisory_opinions_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_legal_search__get_default_response_advisory_opinions_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_ao_citations.size() > 0) {
        obj.insert(QString("ao_citations"), ::OpenAPI::toJsonValue(m_ao_citations));
    }
    if (m_aos_cited_by.size() > 0) {
        obj.insert(QString("aos_cited_by"), ::OpenAPI::toJsonValue(m_aos_cited_by));
    }
    if (m_commenter_names.size() > 0) {
        obj.insert(QString("commenter_names"), ::OpenAPI::toJsonValue(m_commenter_names));
    }
    if (m_document_highlights_isSet) {
        obj.insert(QString("document_highlights"), ::OpenAPI::toJsonValue(m_document_highlights));
    }
    if (m_documents.size() > 0) {
        obj.insert(QString("documents"), ::OpenAPI::toJsonValue(m_documents));
    }
    if (m_entities.size() > 0) {
        obj.insert(QString("entities"), ::OpenAPI::toJsonValue(m_entities));
    }
    if (m_highlights.size() > 0) {
        obj.insert(QString("highlights"), ::OpenAPI::toJsonValue(m_highlights));
    }
    if (m_is_pending_isSet) {
        obj.insert(QString("is_pending"), ::OpenAPI::toJsonValue(m_is_pending));
    }
    if (m_issue_date_isSet) {
        obj.insert(QString("issue_date"), ::OpenAPI::toJsonValue(m_issue_date));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_r_false_isSet) {
        obj.insert(QString("false"), ::OpenAPI::toJsonValue(m_r_false));
    }
    if (m_regulatory_citations.size() > 0) {
        obj.insert(QString("regulatory_citations"), ::OpenAPI::toJsonValue(m_regulatory_citations));
    }
    if (m_representative_names.size() > 0) {
        obj.insert(QString("representative_names"), ::OpenAPI::toJsonValue(m_representative_names));
    }
    if (m_request_date_isSet) {
        obj.insert(QString("request_date"), ::OpenAPI::toJsonValue(m_request_date));
    }
    if (m_requestor_names.size() > 0) {
        obj.insert(QString("requestor_names"), ::OpenAPI::toJsonValue(m_requestor_names));
    }
    if (m_requestor_types.size() > 0) {
        obj.insert(QString("requestor_types"), ::OpenAPI::toJsonValue(m_requestor_types));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_statutory_citations.size() > 0) {
        obj.insert(QString("statutory_citations"), ::OpenAPI::toJsonValue(m_statutory_citations));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    return obj;
}

QList<OAI_legal_search__get_default_response_advisory_opinions_inner_ao_citations_inner> OAI_legal_search__get_default_response_advisory_opinions_inner::getAoCitations() const {
    return m_ao_citations;
}
void OAI_legal_search__get_default_response_advisory_opinions_inner::setAoCitations(const QList<OAI_legal_search__get_default_response_advisory_opinions_inner_ao_citations_inner> &ao_citations) {
    m_ao_citations = ao_citations;
    m_ao_citations_isSet = true;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_ao_citations_Set() const{
    return m_ao_citations_isSet;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_ao_citations_Valid() const{
    return m_ao_citations_isValid;
}

QList<OAI_legal_search__get_default_response_advisory_opinions_inner_ao_citations_inner> OAI_legal_search__get_default_response_advisory_opinions_inner::getAosCitedBy() const {
    return m_aos_cited_by;
}
void OAI_legal_search__get_default_response_advisory_opinions_inner::setAosCitedBy(const QList<OAI_legal_search__get_default_response_advisory_opinions_inner_ao_citations_inner> &aos_cited_by) {
    m_aos_cited_by = aos_cited_by;
    m_aos_cited_by_isSet = true;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_aos_cited_by_Set() const{
    return m_aos_cited_by_isSet;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_aos_cited_by_Valid() const{
    return m_aos_cited_by_isValid;
}

QList<QString> OAI_legal_search__get_default_response_advisory_opinions_inner::getCommenterNames() const {
    return m_commenter_names;
}
void OAI_legal_search__get_default_response_advisory_opinions_inner::setCommenterNames(const QList<QString> &commenter_names) {
    m_commenter_names = commenter_names;
    m_commenter_names_isSet = true;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_commenter_names_Set() const{
    return m_commenter_names_isSet;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_commenter_names_Valid() const{
    return m_commenter_names_isValid;
}

OAIObject OAI_legal_search__get_default_response_advisory_opinions_inner::getDocumentHighlights() const {
    return m_document_highlights;
}
void OAI_legal_search__get_default_response_advisory_opinions_inner::setDocumentHighlights(const OAIObject &document_highlights) {
    m_document_highlights = document_highlights;
    m_document_highlights_isSet = true;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_document_highlights_Set() const{
    return m_document_highlights_isSet;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_document_highlights_Valid() const{
    return m_document_highlights_isValid;
}

QList<OAI_legal_search__get_default_response_advisory_opinions_inner_documents_inner> OAI_legal_search__get_default_response_advisory_opinions_inner::getDocuments() const {
    return m_documents;
}
void OAI_legal_search__get_default_response_advisory_opinions_inner::setDocuments(const QList<OAI_legal_search__get_default_response_advisory_opinions_inner_documents_inner> &documents) {
    m_documents = documents;
    m_documents_isSet = true;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_documents_Set() const{
    return m_documents_isSet;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_documents_Valid() const{
    return m_documents_isValid;
}

QList<OAI_legal_search__get_default_response_advisory_opinions_inner_entities_inner> OAI_legal_search__get_default_response_advisory_opinions_inner::getEntities() const {
    return m_entities;
}
void OAI_legal_search__get_default_response_advisory_opinions_inner::setEntities(const QList<OAI_legal_search__get_default_response_advisory_opinions_inner_entities_inner> &entities) {
    m_entities = entities;
    m_entities_isSet = true;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_entities_Set() const{
    return m_entities_isSet;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_entities_Valid() const{
    return m_entities_isValid;
}

QList<QString> OAI_legal_search__get_default_response_advisory_opinions_inner::getHighlights() const {
    return m_highlights;
}
void OAI_legal_search__get_default_response_advisory_opinions_inner::setHighlights(const QList<QString> &highlights) {
    m_highlights = highlights;
    m_highlights_isSet = true;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_highlights_Set() const{
    return m_highlights_isSet;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_highlights_Valid() const{
    return m_highlights_isValid;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::isIsPending() const {
    return m_is_pending;
}
void OAI_legal_search__get_default_response_advisory_opinions_inner::setIsPending(const bool &is_pending) {
    m_is_pending = is_pending;
    m_is_pending_isSet = true;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_is_pending_Set() const{
    return m_is_pending_isSet;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_is_pending_Valid() const{
    return m_is_pending_isValid;
}

QDate OAI_legal_search__get_default_response_advisory_opinions_inner::getIssueDate() const {
    return m_issue_date;
}
void OAI_legal_search__get_default_response_advisory_opinions_inner::setIssueDate(const QDate &issue_date) {
    m_issue_date = issue_date;
    m_issue_date_isSet = true;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_issue_date_Set() const{
    return m_issue_date_isSet;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_issue_date_Valid() const{
    return m_issue_date_isValid;
}

QString OAI_legal_search__get_default_response_advisory_opinions_inner::getName() const {
    return m_name;
}
void OAI_legal_search__get_default_response_advisory_opinions_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAI_legal_search__get_default_response_advisory_opinions_inner::getRFalse() const {
    return m_r_false;
}
void OAI_legal_search__get_default_response_advisory_opinions_inner::setRFalse(const QString &r_false) {
    m_r_false = r_false;
    m_r_false_isSet = true;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_r_false_Set() const{
    return m_r_false_isSet;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_r_false_Valid() const{
    return m_r_false_isValid;
}

QList<OAI_legal_search__get_default_response_advisory_opinions_inner_regulatory_citations_inner> OAI_legal_search__get_default_response_advisory_opinions_inner::getRegulatoryCitations() const {
    return m_regulatory_citations;
}
void OAI_legal_search__get_default_response_advisory_opinions_inner::setRegulatoryCitations(const QList<OAI_legal_search__get_default_response_advisory_opinions_inner_regulatory_citations_inner> &regulatory_citations) {
    m_regulatory_citations = regulatory_citations;
    m_regulatory_citations_isSet = true;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_regulatory_citations_Set() const{
    return m_regulatory_citations_isSet;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_regulatory_citations_Valid() const{
    return m_regulatory_citations_isValid;
}

QList<QString> OAI_legal_search__get_default_response_advisory_opinions_inner::getRepresentativeNames() const {
    return m_representative_names;
}
void OAI_legal_search__get_default_response_advisory_opinions_inner::setRepresentativeNames(const QList<QString> &representative_names) {
    m_representative_names = representative_names;
    m_representative_names_isSet = true;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_representative_names_Set() const{
    return m_representative_names_isSet;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_representative_names_Valid() const{
    return m_representative_names_isValid;
}

QDate OAI_legal_search__get_default_response_advisory_opinions_inner::getRequestDate() const {
    return m_request_date;
}
void OAI_legal_search__get_default_response_advisory_opinions_inner::setRequestDate(const QDate &request_date) {
    m_request_date = request_date;
    m_request_date_isSet = true;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_request_date_Set() const{
    return m_request_date_isSet;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_request_date_Valid() const{
    return m_request_date_isValid;
}

QList<QString> OAI_legal_search__get_default_response_advisory_opinions_inner::getRequestorNames() const {
    return m_requestor_names;
}
void OAI_legal_search__get_default_response_advisory_opinions_inner::setRequestorNames(const QList<QString> &requestor_names) {
    m_requestor_names = requestor_names;
    m_requestor_names_isSet = true;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_requestor_names_Set() const{
    return m_requestor_names_isSet;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_requestor_names_Valid() const{
    return m_requestor_names_isValid;
}

QList<QString> OAI_legal_search__get_default_response_advisory_opinions_inner::getRequestorTypes() const {
    return m_requestor_types;
}
void OAI_legal_search__get_default_response_advisory_opinions_inner::setRequestorTypes(const QList<QString> &requestor_types) {
    m_requestor_types = requestor_types;
    m_requestor_types_isSet = true;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_requestor_types_Set() const{
    return m_requestor_types_isSet;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_requestor_types_Valid() const{
    return m_requestor_types_isValid;
}

QString OAI_legal_search__get_default_response_advisory_opinions_inner::getStatus() const {
    return m_status;
}
void OAI_legal_search__get_default_response_advisory_opinions_inner::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAI_legal_search__get_default_response_advisory_opinions_inner_statutory_citations_inner> OAI_legal_search__get_default_response_advisory_opinions_inner::getStatutoryCitations() const {
    return m_statutory_citations;
}
void OAI_legal_search__get_default_response_advisory_opinions_inner::setStatutoryCitations(const QList<OAI_legal_search__get_default_response_advisory_opinions_inner_statutory_citations_inner> &statutory_citations) {
    m_statutory_citations = statutory_citations;
    m_statutory_citations_isSet = true;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_statutory_citations_Set() const{
    return m_statutory_citations_isSet;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_statutory_citations_Valid() const{
    return m_statutory_citations_isValid;
}

QString OAI_legal_search__get_default_response_advisory_opinions_inner::getSummary() const {
    return m_summary;
}
void OAI_legal_search__get_default_response_advisory_opinions_inner::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::is_summary_Valid() const{
    return m_summary_isValid;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ao_citations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_aos_cited_by.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_commenter_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_highlights_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_documents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_entities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_highlights.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_pending_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_false_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regulatory_citations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_representative_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requestor_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_requestor_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statutory_citations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_legal_search__get_default_response_advisory_opinions_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
