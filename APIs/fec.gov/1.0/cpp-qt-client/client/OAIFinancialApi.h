/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFinancialApi_H
#define OAI_OAIFinancialApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICommitteeReportsPage.h"
#include "OAICommitteeTotalsPage.h"
#include "OAIElectionPage.h"
#include "OAIElectionSummary.h"
#include "OAIElectionsListPage.h"
#include "OAIEntityReceiptDisbursementTotalsPage.h"
#include "OAIInauguralDonationsPage.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFinancialApi : public QObject {
    Q_OBJECT

public:
    OAIFinancialApi(const int timeOut = 0);
    ~OAIFinancialApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  committee_id QString [required]
    * @param[in]  min_party_coordinated_expenditures QString [optional]
    * @param[in]  is_amended bool [optional]
    * @param[in]  max_party_coordinated_expenditures QString [optional]
    * @param[in]  max_cash_on_hand_end_period_amount QString [optional]
    * @param[in]  max_disbursements_amount QString [optional]
    * @param[in]  max_debts_owed_expenditures QString [optional]
    * @param[in]  min_receipts_amount QString [optional]
    * @param[in]  cycle QList<qint32> [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  min_debts_owed_amount QString [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  candidate_id QString [optional]
    * @param[in]  min_independent_expenditures QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  max_receipts_amount QString [optional]
    * @param[in]  report_type QList<QString> [optional]
    * @param[in]  max_total_contributions QString [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  year QList<qint32> [optional]
    * @param[in]  max_independent_expenditures QString [optional]
    * @param[in]  type QList<QString> [optional]
    * @param[in]  min_cash_on_hand_end_period_amount QString [optional]
    * @param[in]  min_disbursements_amount QString [optional]
    * @param[in]  min_total_contributions QString [optional]
    * @param[in]  beginning_image_number QList<QString> [optional]
    */
    virtual void committeeCommitteeIdReportsGet(const QString &api_key, const QString &committee_id, const ::OpenAPI::OptionalParam<QString> &min_party_coordinated_expenditures = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_amended = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &max_party_coordinated_expenditures = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_cash_on_hand_end_period_amount = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_disbursements_amount = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_debts_owed_expenditures = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min_receipts_amount = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<qint32>> &cycle = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &min_debts_owed_amount = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &candidate_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min_independent_expenditures = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &max_receipts_amount = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &report_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &max_total_contributions = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<qint32>> &year = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QString> &max_independent_expenditures = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &min_cash_on_hand_end_period_amount = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min_disbursements_amount = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min_total_contributions = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &beginning_image_number = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  committee_id QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  cycle QList<qint32> [optional]
    * @param[in]  sort_null_only bool [optional]
    */
    virtual void committeeCommitteeIdTotalsGet(const QString &api_key, const QString &committee_id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<qint32>> &cycle = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  cycle qint32 [required]
    * @param[in]  office QString [required]
    * @param[in]  district QString [optional]
    * @param[in]  election_full bool [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  state QString [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void electionsGet(const QString &api_key, const qint32 &cycle, const QString &office, const ::OpenAPI::OptionalParam<QString> &district = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &election_full = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  zip QList<qint32> [optional]
    * @param[in]  district QList<QString> [optional]
    * @param[in]  cycle QList<qint32> [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  state QList<QString> [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  office QList<QString> [optional]
    * @param[in]  sort QList<QString> [optional]
    */
    virtual void electionsSearchGet(const QString &api_key, const ::OpenAPI::OptionalParam<QList<qint32>> &zip = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<QString>> &district = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &cycle = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &state = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &office = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  office QString [required]
    * @param[in]  cycle qint32 [required]
    * @param[in]  state QString [optional]
    * @param[in]  district QString [optional]
    * @param[in]  election_full bool [optional]
    */
    virtual void electionsSummaryGet(const QString &api_key, const QString &office, const qint32 &cycle, const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &district = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &election_full = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  entity_type QString [required]
    * @param[in]  max_party_coordinated_expenditures QString [optional]
    * @param[in]  max_debts_owed_expenditures QString [optional]
    * @param[in]  min_receipts_amount QString [optional]
    * @param[in]  min_debts_owed_amount QString [optional]
    * @param[in]  max_receipt_date QDate [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  candidate_id QString [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  q_spender QList<QString> [optional]
    * @param[in]  max_receipts_amount QString [optional]
    * @param[in]  filer_type QString [optional]
    * @param[in]  report_type QList<QString> [optional]
    * @param[in]  max_total_contributions QString [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  max_independent_expenditures QString [optional]
    * @param[in]  min_total_contributions QString [optional]
    * @param[in]  min_party_coordinated_expenditures QString [optional]
    * @param[in]  beginning_image_number QList<QString> [optional]
    * @param[in]  min_receipt_date QDate [optional]
    * @param[in]  is_amended bool [optional]
    * @param[in]  max_disbursements_amount QString [optional]
    * @param[in]  max_cash_on_hand_end_period_amount QString [optional]
    * @param[in]  amendment_indicator QList<QString> [optional]
    * @param[in]  cycle QList<qint32> [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  min_independent_expenditures QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  q_filer QList<QString> [optional]
    * @param[in]  committee_type QList<QString> [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  year QList<qint32> [optional]
    * @param[in]  committee_id QList<QString> [optional]
    * @param[in]  min_cash_on_hand_end_period_amount QString [optional]
    * @param[in]  min_disbursements_amount QString [optional]
    * @param[in]  most_recent bool [optional]
    */
    virtual void reportsEntityTypeGet(const QString &api_key, const QString &entity_type, const ::OpenAPI::OptionalParam<QString> &max_party_coordinated_expenditures = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_debts_owed_expenditures = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min_receipts_amount = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min_debts_owed_amount = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &max_receipt_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &candidate_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &q_spender = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &max_receipts_amount = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filer_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &report_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &max_total_contributions = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &max_independent_expenditures = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min_total_contributions = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min_party_coordinated_expenditures = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &beginning_image_number = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &min_receipt_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<bool> &is_amended = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &max_disbursements_amount = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_cash_on_hand_end_period_amount = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &amendment_indicator = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &cycle = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &min_independent_expenditures = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &q_filer = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &committee_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<qint32>> &year = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<QString>> &committee_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &min_cash_on_hand_end_period_amount = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min_disbursements_amount = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &most_recent = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  cycle qint32 [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  sort_nulls_last bool [optional]
    */
    virtual void totalsByEntityGet(const QString &api_key, const qint32 &cycle, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  entity_type QString [required]
    * @param[in]  treasurer_name QList<QString> [optional]
    * @param[in]  max_disbursements QString [optional]
    * @param[in]  committee_state QList<QString> [optional]
    * @param[in]  cycle QList<qint32> [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  sponsor_candidate_id QList<QString> [optional]
    * @param[in]  min_disbursements QString [optional]
    * @param[in]  min_last_cash_on_hand_end_period QString [optional]
    * @param[in]  max_last_cash_on_hand_end_period QString [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  filing_frequency QList<QString> [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  max_last_debts_owed_by_committee QString [optional]
    * @param[in]  min_first_f1_date QDate [optional]
    * @param[in]  committee_designation QList<QString> [optional]
    * @param[in]  max_receipts QString [optional]
    * @param[in]  committee_type QList<QString> [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  committee_id QList<QString> [optional]
    * @param[in]  min_last_debts_owed_by_committee QString [optional]
    * @param[in]  max_first_f1_date QDate [optional]
    * @param[in]  organization_type QList<QString> [optional]
    * @param[in]  min_receipts QString [optional]
    */
    virtual void totalsEntityTypeGet(const QString &api_key, const QString &entity_type, const ::OpenAPI::OptionalParam<QList<QString>> &treasurer_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &max_disbursements = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &committee_state = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &cycle = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &sponsor_candidate_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &min_disbursements = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min_last_cash_on_hand_end_period = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_last_cash_on_hand_end_period = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &filing_frequency = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_last_debts_owed_by_committee = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &min_first_f1_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<QString>> &committee_designation = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &max_receipts = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &committee_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &committee_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &min_last_debts_owed_by_committee = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &max_first_f1_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<QString>> &organization_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &min_receipts = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  cycle QList<qint32> [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  committee_id QList<QString> [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  contributor_name QList<QString> [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort QList<QString> [optional]
    */
    virtual void totalsInauguralCommitteesByContributorGet(const QString &api_key, const ::OpenAPI::OptionalParam<QList<qint32>> &cycle = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &committee_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &contributor_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void committeeCommitteeIdReportsGetCallback(OAIHttpRequestWorker *worker);
    void committeeCommitteeIdTotalsGetCallback(OAIHttpRequestWorker *worker);
    void electionsGetCallback(OAIHttpRequestWorker *worker);
    void electionsSearchGetCallback(OAIHttpRequestWorker *worker);
    void electionsSummaryGetCallback(OAIHttpRequestWorker *worker);
    void reportsEntityTypeGetCallback(OAIHttpRequestWorker *worker);
    void totalsByEntityGetCallback(OAIHttpRequestWorker *worker);
    void totalsEntityTypeGetCallback(OAIHttpRequestWorker *worker);
    void totalsInauguralCommitteesByContributorGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void committeeCommitteeIdReportsGetSignal(OAICommitteeReportsPage summary);
    void committeeCommitteeIdTotalsGetSignal(OAICommitteeTotalsPage summary);
    void electionsGetSignal(OAIElectionPage summary);
    void electionsSearchGetSignal(OAIElectionsListPage summary);
    void electionsSummaryGetSignal(OAIElectionSummary summary);
    void reportsEntityTypeGetSignal(OAICommitteeReportsPage summary);
    void totalsByEntityGetSignal(OAIEntityReceiptDisbursementTotalsPage summary);
    void totalsEntityTypeGetSignal(OAICommitteeTotalsPage summary);
    void totalsInauguralCommitteesByContributorGetSignal(OAIInauguralDonationsPage summary);


    void committeeCommitteeIdReportsGetSignalFull(OAIHttpRequestWorker *worker, OAICommitteeReportsPage summary);
    void committeeCommitteeIdTotalsGetSignalFull(OAIHttpRequestWorker *worker, OAICommitteeTotalsPage summary);
    void electionsGetSignalFull(OAIHttpRequestWorker *worker, OAIElectionPage summary);
    void electionsSearchGetSignalFull(OAIHttpRequestWorker *worker, OAIElectionsListPage summary);
    void electionsSummaryGetSignalFull(OAIHttpRequestWorker *worker, OAIElectionSummary summary);
    void reportsEntityTypeGetSignalFull(OAIHttpRequestWorker *worker, OAICommitteeReportsPage summary);
    void totalsByEntityGetSignalFull(OAIHttpRequestWorker *worker, OAIEntityReceiptDisbursementTotalsPage summary);
    void totalsEntityTypeGetSignalFull(OAIHttpRequestWorker *worker, OAICommitteeTotalsPage summary);
    void totalsInauguralCommitteesByContributorGetSignalFull(OAIHttpRequestWorker *worker, OAIInauguralDonationsPage summary);

    Q_DECL_DEPRECATED_X("Use committeeCommitteeIdReportsGetSignalError() instead")
    void committeeCommitteeIdReportsGetSignalE(OAICommitteeReportsPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void committeeCommitteeIdReportsGetSignalError(OAICommitteeReportsPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use committeeCommitteeIdTotalsGetSignalError() instead")
    void committeeCommitteeIdTotalsGetSignalE(OAICommitteeTotalsPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void committeeCommitteeIdTotalsGetSignalError(OAICommitteeTotalsPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use electionsGetSignalError() instead")
    void electionsGetSignalE(OAIElectionPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void electionsGetSignalError(OAIElectionPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use electionsSearchGetSignalError() instead")
    void electionsSearchGetSignalE(OAIElectionsListPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void electionsSearchGetSignalError(OAIElectionsListPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use electionsSummaryGetSignalError() instead")
    void electionsSummaryGetSignalE(OAIElectionSummary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void electionsSummaryGetSignalError(OAIElectionSummary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsEntityTypeGetSignalError() instead")
    void reportsEntityTypeGetSignalE(OAICommitteeReportsPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsEntityTypeGetSignalError(OAICommitteeReportsPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use totalsByEntityGetSignalError() instead")
    void totalsByEntityGetSignalE(OAIEntityReceiptDisbursementTotalsPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void totalsByEntityGetSignalError(OAIEntityReceiptDisbursementTotalsPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use totalsEntityTypeGetSignalError() instead")
    void totalsEntityTypeGetSignalE(OAICommitteeTotalsPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void totalsEntityTypeGetSignalError(OAICommitteeTotalsPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use totalsInauguralCommitteesByContributorGetSignalError() instead")
    void totalsInauguralCommitteesByContributorGetSignalE(OAIInauguralDonationsPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void totalsInauguralCommitteesByContributorGetSignalError(OAIInauguralDonationsPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use committeeCommitteeIdReportsGetSignalErrorFull() instead")
    void committeeCommitteeIdReportsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void committeeCommitteeIdReportsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use committeeCommitteeIdTotalsGetSignalErrorFull() instead")
    void committeeCommitteeIdTotalsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void committeeCommitteeIdTotalsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use electionsGetSignalErrorFull() instead")
    void electionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void electionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use electionsSearchGetSignalErrorFull() instead")
    void electionsSearchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void electionsSearchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use electionsSummaryGetSignalErrorFull() instead")
    void electionsSummaryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void electionsSummaryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsEntityTypeGetSignalErrorFull() instead")
    void reportsEntityTypeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsEntityTypeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use totalsByEntityGetSignalErrorFull() instead")
    void totalsByEntityGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void totalsByEntityGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use totalsEntityTypeGetSignalErrorFull() instead")
    void totalsEntityTypeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void totalsEntityTypeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use totalsInauguralCommitteesByContributorGetSignalErrorFull() instead")
    void totalsInauguralCommitteesByContributorGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void totalsInauguralCommitteesByContributorGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
