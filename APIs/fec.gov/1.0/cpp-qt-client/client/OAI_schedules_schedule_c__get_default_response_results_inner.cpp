/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_schedules_schedule_c__get_default_response_results_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_schedules_schedule_c__get_default_response_results_inner::OAI_schedules_schedule_c__get_default_response_results_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_schedules_schedule_c__get_default_response_results_inner::OAI_schedules_schedule_c__get_default_response_results_inner() {
    this->initializeModel();
}

OAI_schedules_schedule_c__get_default_response_results_inner::~OAI_schedules_schedule_c__get_default_response_results_inner() {}

void OAI_schedules_schedule_c__get_default_response_results_inner::initializeModel() {

    m_action_code_isSet = false;
    m_action_code_isValid = false;

    m_action_code_full_isSet = false;
    m_action_code_full_isValid = false;

    m_candidate_first_name_isSet = false;
    m_candidate_first_name_isValid = false;

    m_candidate_id_isSet = false;
    m_candidate_id_isValid = false;

    m_candidate_last_name_isSet = false;
    m_candidate_last_name_isValid = false;

    m_candidate_middle_name_isSet = false;
    m_candidate_middle_name_isValid = false;

    m_candidate_name_isSet = false;
    m_candidate_name_isValid = false;

    m_candidate_office_isSet = false;
    m_candidate_office_isValid = false;

    m_candidate_office_district_isSet = false;
    m_candidate_office_district_isValid = false;

    m_candidate_office_full_isSet = false;
    m_candidate_office_full_isValid = false;

    m_candidate_office_state_isSet = false;
    m_candidate_office_state_isValid = false;

    m_candidate_office_state_full_isSet = false;
    m_candidate_office_state_full_isValid = false;

    m_candidate_prefix_isSet = false;
    m_candidate_prefix_isValid = false;

    m_candidate_suffix_isSet = false;
    m_candidate_suffix_isValid = false;

    m_committee_isSet = false;
    m_committee_isValid = false;

    m_committee_id_isSet = false;
    m_committee_id_isValid = false;

    m_cycle_isSet = false;
    m_cycle_isValid = false;

    m_due_date_terms_isSet = false;
    m_due_date_terms_isValid = false;

    m_election_type_isSet = false;
    m_election_type_isValid = false;

    m_election_type_full_isSet = false;
    m_election_type_full_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_entity_type_full_isSet = false;
    m_entity_type_full_isValid = false;

    m_fec_committee_id_isSet = false;
    m_fec_committee_id_isValid = false;

    m_fec_election_type_full_isSet = false;
    m_fec_election_type_full_isValid = false;

    m_fec_election_type_year_isSet = false;
    m_fec_election_type_year_isValid = false;

    m_file_number_isSet = false;
    m_file_number_isValid = false;

    m_filing_form_isSet = false;
    m_filing_form_isValid = false;

    m_image_number_isSet = false;
    m_image_number_isValid = false;

    m_incurred_date_isSet = false;
    m_incurred_date_isValid = false;

    m_interest_rate_terms_isSet = false;
    m_interest_rate_terms_isValid = false;

    m_line_number_isSet = false;
    m_line_number_isValid = false;

    m_link_id_isSet = false;
    m_link_id_isValid = false;

    m_load_date_isSet = false;
    m_load_date_isValid = false;

    m_loan_balance_isSet = false;
    m_loan_balance_isValid = false;

    m_loan_source_city_isSet = false;
    m_loan_source_city_isValid = false;

    m_loan_source_first_name_isSet = false;
    m_loan_source_first_name_isValid = false;

    m_loan_source_last_name_isSet = false;
    m_loan_source_last_name_isValid = false;

    m_loan_source_middle_name_isSet = false;
    m_loan_source_middle_name_isValid = false;

    m_loan_source_name_isSet = false;
    m_loan_source_name_isValid = false;

    m_loan_source_prefix_isSet = false;
    m_loan_source_prefix_isValid = false;

    m_loan_source_state_isSet = false;
    m_loan_source_state_isValid = false;

    m_loan_source_street_1_isSet = false;
    m_loan_source_street_1_isValid = false;

    m_loan_source_street_2_isSet = false;
    m_loan_source_street_2_isValid = false;

    m_loan_source_suffix_isSet = false;
    m_loan_source_suffix_isValid = false;

    m_loan_source_zip_isSet = false;
    m_loan_source_zip_isValid = false;

    m_memo_code_isSet = false;
    m_memo_code_isValid = false;

    m_memo_text_isSet = false;
    m_memo_text_isValid = false;

    m_original_loan_amount_isSet = false;
    m_original_loan_amount_isValid = false;

    m_original_sub_id_isSet = false;
    m_original_sub_id_isValid = false;

    m_payment_to_date_isSet = false;
    m_payment_to_date_isValid = false;

    m_pdf_url_isSet = false;
    m_pdf_url_isValid = false;

    m_personally_funded_isSet = false;
    m_personally_funded_isValid = false;

    m_report_type_isSet = false;
    m_report_type_isValid = false;

    m_report_year_isSet = false;
    m_report_year_isValid = false;

    m_schedule_a_line_number_isSet = false;
    m_schedule_a_line_number_isValid = false;

    m_schedule_type_isSet = false;
    m_schedule_type_isValid = false;

    m_schedule_type_full_isSet = false;
    m_schedule_type_full_isValid = false;

    m_secured_ind_isSet = false;
    m_secured_ind_isValid = false;

    m_sub_id_isSet = false;
    m_sub_id_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;
}

void OAI_schedules_schedule_c__get_default_response_results_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_schedules_schedule_c__get_default_response_results_inner::fromJsonObject(QJsonObject json) {

    m_action_code_isValid = ::OpenAPI::fromJsonValue(m_action_code, json[QString("action_code")]);
    m_action_code_isSet = !json[QString("action_code")].isNull() && m_action_code_isValid;

    m_action_code_full_isValid = ::OpenAPI::fromJsonValue(m_action_code_full, json[QString("action_code_full")]);
    m_action_code_full_isSet = !json[QString("action_code_full")].isNull() && m_action_code_full_isValid;

    m_candidate_first_name_isValid = ::OpenAPI::fromJsonValue(m_candidate_first_name, json[QString("candidate_first_name")]);
    m_candidate_first_name_isSet = !json[QString("candidate_first_name")].isNull() && m_candidate_first_name_isValid;

    m_candidate_id_isValid = ::OpenAPI::fromJsonValue(m_candidate_id, json[QString("candidate_id")]);
    m_candidate_id_isSet = !json[QString("candidate_id")].isNull() && m_candidate_id_isValid;

    m_candidate_last_name_isValid = ::OpenAPI::fromJsonValue(m_candidate_last_name, json[QString("candidate_last_name")]);
    m_candidate_last_name_isSet = !json[QString("candidate_last_name")].isNull() && m_candidate_last_name_isValid;

    m_candidate_middle_name_isValid = ::OpenAPI::fromJsonValue(m_candidate_middle_name, json[QString("candidate_middle_name")]);
    m_candidate_middle_name_isSet = !json[QString("candidate_middle_name")].isNull() && m_candidate_middle_name_isValid;

    m_candidate_name_isValid = ::OpenAPI::fromJsonValue(m_candidate_name, json[QString("candidate_name")]);
    m_candidate_name_isSet = !json[QString("candidate_name")].isNull() && m_candidate_name_isValid;

    m_candidate_office_isValid = ::OpenAPI::fromJsonValue(m_candidate_office, json[QString("candidate_office")]);
    m_candidate_office_isSet = !json[QString("candidate_office")].isNull() && m_candidate_office_isValid;

    m_candidate_office_district_isValid = ::OpenAPI::fromJsonValue(m_candidate_office_district, json[QString("candidate_office_district")]);
    m_candidate_office_district_isSet = !json[QString("candidate_office_district")].isNull() && m_candidate_office_district_isValid;

    m_candidate_office_full_isValid = ::OpenAPI::fromJsonValue(m_candidate_office_full, json[QString("candidate_office_full")]);
    m_candidate_office_full_isSet = !json[QString("candidate_office_full")].isNull() && m_candidate_office_full_isValid;

    m_candidate_office_state_isValid = ::OpenAPI::fromJsonValue(m_candidate_office_state, json[QString("candidate_office_state")]);
    m_candidate_office_state_isSet = !json[QString("candidate_office_state")].isNull() && m_candidate_office_state_isValid;

    m_candidate_office_state_full_isValid = ::OpenAPI::fromJsonValue(m_candidate_office_state_full, json[QString("candidate_office_state_full")]);
    m_candidate_office_state_full_isSet = !json[QString("candidate_office_state_full")].isNull() && m_candidate_office_state_full_isValid;

    m_candidate_prefix_isValid = ::OpenAPI::fromJsonValue(m_candidate_prefix, json[QString("candidate_prefix")]);
    m_candidate_prefix_isSet = !json[QString("candidate_prefix")].isNull() && m_candidate_prefix_isValid;

    m_candidate_suffix_isValid = ::OpenAPI::fromJsonValue(m_candidate_suffix, json[QString("candidate_suffix")]);
    m_candidate_suffix_isSet = !json[QString("candidate_suffix")].isNull() && m_candidate_suffix_isValid;

    m_committee_isValid = ::OpenAPI::fromJsonValue(m_committee, json[QString("committee")]);
    m_committee_isSet = !json[QString("committee")].isNull() && m_committee_isValid;

    m_committee_id_isValid = ::OpenAPI::fromJsonValue(m_committee_id, json[QString("committee_id")]);
    m_committee_id_isSet = !json[QString("committee_id")].isNull() && m_committee_id_isValid;

    m_cycle_isValid = ::OpenAPI::fromJsonValue(m_cycle, json[QString("cycle")]);
    m_cycle_isSet = !json[QString("cycle")].isNull() && m_cycle_isValid;

    m_due_date_terms_isValid = ::OpenAPI::fromJsonValue(m_due_date_terms, json[QString("due_date_terms")]);
    m_due_date_terms_isSet = !json[QString("due_date_terms")].isNull() && m_due_date_terms_isValid;

    m_election_type_isValid = ::OpenAPI::fromJsonValue(m_election_type, json[QString("election_type")]);
    m_election_type_isSet = !json[QString("election_type")].isNull() && m_election_type_isValid;

    m_election_type_full_isValid = ::OpenAPI::fromJsonValue(m_election_type_full, json[QString("election_type_full")]);
    m_election_type_full_isSet = !json[QString("election_type_full")].isNull() && m_election_type_full_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entity_type")]);
    m_entity_type_isSet = !json[QString("entity_type")].isNull() && m_entity_type_isValid;

    m_entity_type_full_isValid = ::OpenAPI::fromJsonValue(m_entity_type_full, json[QString("entity_type_full")]);
    m_entity_type_full_isSet = !json[QString("entity_type_full")].isNull() && m_entity_type_full_isValid;

    m_fec_committee_id_isValid = ::OpenAPI::fromJsonValue(m_fec_committee_id, json[QString("fec_committee_id")]);
    m_fec_committee_id_isSet = !json[QString("fec_committee_id")].isNull() && m_fec_committee_id_isValid;

    m_fec_election_type_full_isValid = ::OpenAPI::fromJsonValue(m_fec_election_type_full, json[QString("fec_election_type_full")]);
    m_fec_election_type_full_isSet = !json[QString("fec_election_type_full")].isNull() && m_fec_election_type_full_isValid;

    m_fec_election_type_year_isValid = ::OpenAPI::fromJsonValue(m_fec_election_type_year, json[QString("fec_election_type_year")]);
    m_fec_election_type_year_isSet = !json[QString("fec_election_type_year")].isNull() && m_fec_election_type_year_isValid;

    m_file_number_isValid = ::OpenAPI::fromJsonValue(m_file_number, json[QString("file_number")]);
    m_file_number_isSet = !json[QString("file_number")].isNull() && m_file_number_isValid;

    m_filing_form_isValid = ::OpenAPI::fromJsonValue(m_filing_form, json[QString("filing_form")]);
    m_filing_form_isSet = !json[QString("filing_form")].isNull() && m_filing_form_isValid;

    m_image_number_isValid = ::OpenAPI::fromJsonValue(m_image_number, json[QString("image_number")]);
    m_image_number_isSet = !json[QString("image_number")].isNull() && m_image_number_isValid;

    m_incurred_date_isValid = ::OpenAPI::fromJsonValue(m_incurred_date, json[QString("incurred_date")]);
    m_incurred_date_isSet = !json[QString("incurred_date")].isNull() && m_incurred_date_isValid;

    m_interest_rate_terms_isValid = ::OpenAPI::fromJsonValue(m_interest_rate_terms, json[QString("interest_rate_terms")]);
    m_interest_rate_terms_isSet = !json[QString("interest_rate_terms")].isNull() && m_interest_rate_terms_isValid;

    m_line_number_isValid = ::OpenAPI::fromJsonValue(m_line_number, json[QString("line_number")]);
    m_line_number_isSet = !json[QString("line_number")].isNull() && m_line_number_isValid;

    m_link_id_isValid = ::OpenAPI::fromJsonValue(m_link_id, json[QString("link_id")]);
    m_link_id_isSet = !json[QString("link_id")].isNull() && m_link_id_isValid;

    m_load_date_isValid = ::OpenAPI::fromJsonValue(m_load_date, json[QString("load_date")]);
    m_load_date_isSet = !json[QString("load_date")].isNull() && m_load_date_isValid;

    m_loan_balance_isValid = ::OpenAPI::fromJsonValue(m_loan_balance, json[QString("loan_balance")]);
    m_loan_balance_isSet = !json[QString("loan_balance")].isNull() && m_loan_balance_isValid;

    m_loan_source_city_isValid = ::OpenAPI::fromJsonValue(m_loan_source_city, json[QString("loan_source_city")]);
    m_loan_source_city_isSet = !json[QString("loan_source_city")].isNull() && m_loan_source_city_isValid;

    m_loan_source_first_name_isValid = ::OpenAPI::fromJsonValue(m_loan_source_first_name, json[QString("loan_source_first_name")]);
    m_loan_source_first_name_isSet = !json[QString("loan_source_first_name")].isNull() && m_loan_source_first_name_isValid;

    m_loan_source_last_name_isValid = ::OpenAPI::fromJsonValue(m_loan_source_last_name, json[QString("loan_source_last_name")]);
    m_loan_source_last_name_isSet = !json[QString("loan_source_last_name")].isNull() && m_loan_source_last_name_isValid;

    m_loan_source_middle_name_isValid = ::OpenAPI::fromJsonValue(m_loan_source_middle_name, json[QString("loan_source_middle_name")]);
    m_loan_source_middle_name_isSet = !json[QString("loan_source_middle_name")].isNull() && m_loan_source_middle_name_isValid;

    m_loan_source_name_isValid = ::OpenAPI::fromJsonValue(m_loan_source_name, json[QString("loan_source_name")]);
    m_loan_source_name_isSet = !json[QString("loan_source_name")].isNull() && m_loan_source_name_isValid;

    m_loan_source_prefix_isValid = ::OpenAPI::fromJsonValue(m_loan_source_prefix, json[QString("loan_source_prefix")]);
    m_loan_source_prefix_isSet = !json[QString("loan_source_prefix")].isNull() && m_loan_source_prefix_isValid;

    m_loan_source_state_isValid = ::OpenAPI::fromJsonValue(m_loan_source_state, json[QString("loan_source_state")]);
    m_loan_source_state_isSet = !json[QString("loan_source_state")].isNull() && m_loan_source_state_isValid;

    m_loan_source_street_1_isValid = ::OpenAPI::fromJsonValue(m_loan_source_street_1, json[QString("loan_source_street_1")]);
    m_loan_source_street_1_isSet = !json[QString("loan_source_street_1")].isNull() && m_loan_source_street_1_isValid;

    m_loan_source_street_2_isValid = ::OpenAPI::fromJsonValue(m_loan_source_street_2, json[QString("loan_source_street_2")]);
    m_loan_source_street_2_isSet = !json[QString("loan_source_street_2")].isNull() && m_loan_source_street_2_isValid;

    m_loan_source_suffix_isValid = ::OpenAPI::fromJsonValue(m_loan_source_suffix, json[QString("loan_source_suffix")]);
    m_loan_source_suffix_isSet = !json[QString("loan_source_suffix")].isNull() && m_loan_source_suffix_isValid;

    m_loan_source_zip_isValid = ::OpenAPI::fromJsonValue(m_loan_source_zip, json[QString("loan_source_zip")]);
    m_loan_source_zip_isSet = !json[QString("loan_source_zip")].isNull() && m_loan_source_zip_isValid;

    m_memo_code_isValid = ::OpenAPI::fromJsonValue(m_memo_code, json[QString("memo_code")]);
    m_memo_code_isSet = !json[QString("memo_code")].isNull() && m_memo_code_isValid;

    m_memo_text_isValid = ::OpenAPI::fromJsonValue(m_memo_text, json[QString("memo_text")]);
    m_memo_text_isSet = !json[QString("memo_text")].isNull() && m_memo_text_isValid;

    m_original_loan_amount_isValid = ::OpenAPI::fromJsonValue(m_original_loan_amount, json[QString("original_loan_amount")]);
    m_original_loan_amount_isSet = !json[QString("original_loan_amount")].isNull() && m_original_loan_amount_isValid;

    m_original_sub_id_isValid = ::OpenAPI::fromJsonValue(m_original_sub_id, json[QString("original_sub_id")]);
    m_original_sub_id_isSet = !json[QString("original_sub_id")].isNull() && m_original_sub_id_isValid;

    m_payment_to_date_isValid = ::OpenAPI::fromJsonValue(m_payment_to_date, json[QString("payment_to_date")]);
    m_payment_to_date_isSet = !json[QString("payment_to_date")].isNull() && m_payment_to_date_isValid;

    m_pdf_url_isValid = ::OpenAPI::fromJsonValue(m_pdf_url, json[QString("pdf_url")]);
    m_pdf_url_isSet = !json[QString("pdf_url")].isNull() && m_pdf_url_isValid;

    m_personally_funded_isValid = ::OpenAPI::fromJsonValue(m_personally_funded, json[QString("personally_funded")]);
    m_personally_funded_isSet = !json[QString("personally_funded")].isNull() && m_personally_funded_isValid;

    m_report_type_isValid = ::OpenAPI::fromJsonValue(m_report_type, json[QString("report_type")]);
    m_report_type_isSet = !json[QString("report_type")].isNull() && m_report_type_isValid;

    m_report_year_isValid = ::OpenAPI::fromJsonValue(m_report_year, json[QString("report_year")]);
    m_report_year_isSet = !json[QString("report_year")].isNull() && m_report_year_isValid;

    m_schedule_a_line_number_isValid = ::OpenAPI::fromJsonValue(m_schedule_a_line_number, json[QString("schedule_a_line_number")]);
    m_schedule_a_line_number_isSet = !json[QString("schedule_a_line_number")].isNull() && m_schedule_a_line_number_isValid;

    m_schedule_type_isValid = ::OpenAPI::fromJsonValue(m_schedule_type, json[QString("schedule_type")]);
    m_schedule_type_isSet = !json[QString("schedule_type")].isNull() && m_schedule_type_isValid;

    m_schedule_type_full_isValid = ::OpenAPI::fromJsonValue(m_schedule_type_full, json[QString("schedule_type_full")]);
    m_schedule_type_full_isSet = !json[QString("schedule_type_full")].isNull() && m_schedule_type_full_isValid;

    m_secured_ind_isValid = ::OpenAPI::fromJsonValue(m_secured_ind, json[QString("secured_ind")]);
    m_secured_ind_isSet = !json[QString("secured_ind")].isNull() && m_secured_ind_isValid;

    m_sub_id_isValid = ::OpenAPI::fromJsonValue(m_sub_id, json[QString("sub_id")]);
    m_sub_id_isSet = !json[QString("sub_id")].isNull() && m_sub_id_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("transaction_id")]);
    m_transaction_id_isSet = !json[QString("transaction_id")].isNull() && m_transaction_id_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_schedules_schedule_c__get_default_response_results_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_action_code_isSet) {
        obj.insert(QString("action_code"), ::OpenAPI::toJsonValue(m_action_code));
    }
    if (m_action_code_full_isSet) {
        obj.insert(QString("action_code_full"), ::OpenAPI::toJsonValue(m_action_code_full));
    }
    if (m_candidate_first_name_isSet) {
        obj.insert(QString("candidate_first_name"), ::OpenAPI::toJsonValue(m_candidate_first_name));
    }
    if (m_candidate_id_isSet) {
        obj.insert(QString("candidate_id"), ::OpenAPI::toJsonValue(m_candidate_id));
    }
    if (m_candidate_last_name_isSet) {
        obj.insert(QString("candidate_last_name"), ::OpenAPI::toJsonValue(m_candidate_last_name));
    }
    if (m_candidate_middle_name_isSet) {
        obj.insert(QString("candidate_middle_name"), ::OpenAPI::toJsonValue(m_candidate_middle_name));
    }
    if (m_candidate_name_isSet) {
        obj.insert(QString("candidate_name"), ::OpenAPI::toJsonValue(m_candidate_name));
    }
    if (m_candidate_office_isSet) {
        obj.insert(QString("candidate_office"), ::OpenAPI::toJsonValue(m_candidate_office));
    }
    if (m_candidate_office_district_isSet) {
        obj.insert(QString("candidate_office_district"), ::OpenAPI::toJsonValue(m_candidate_office_district));
    }
    if (m_candidate_office_full_isSet) {
        obj.insert(QString("candidate_office_full"), ::OpenAPI::toJsonValue(m_candidate_office_full));
    }
    if (m_candidate_office_state_isSet) {
        obj.insert(QString("candidate_office_state"), ::OpenAPI::toJsonValue(m_candidate_office_state));
    }
    if (m_candidate_office_state_full_isSet) {
        obj.insert(QString("candidate_office_state_full"), ::OpenAPI::toJsonValue(m_candidate_office_state_full));
    }
    if (m_candidate_prefix_isSet) {
        obj.insert(QString("candidate_prefix"), ::OpenAPI::toJsonValue(m_candidate_prefix));
    }
    if (m_candidate_suffix_isSet) {
        obj.insert(QString("candidate_suffix"), ::OpenAPI::toJsonValue(m_candidate_suffix));
    }
    if (m_committee.isSet()) {
        obj.insert(QString("committee"), ::OpenAPI::toJsonValue(m_committee));
    }
    if (m_committee_id_isSet) {
        obj.insert(QString("committee_id"), ::OpenAPI::toJsonValue(m_committee_id));
    }
    if (m_cycle_isSet) {
        obj.insert(QString("cycle"), ::OpenAPI::toJsonValue(m_cycle));
    }
    if (m_due_date_terms_isSet) {
        obj.insert(QString("due_date_terms"), ::OpenAPI::toJsonValue(m_due_date_terms));
    }
    if (m_election_type_isSet) {
        obj.insert(QString("election_type"), ::OpenAPI::toJsonValue(m_election_type));
    }
    if (m_election_type_full_isSet) {
        obj.insert(QString("election_type_full"), ::OpenAPI::toJsonValue(m_election_type_full));
    }
    if (m_entity_type_isSet) {
        obj.insert(QString("entity_type"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_entity_type_full_isSet) {
        obj.insert(QString("entity_type_full"), ::OpenAPI::toJsonValue(m_entity_type_full));
    }
    if (m_fec_committee_id_isSet) {
        obj.insert(QString("fec_committee_id"), ::OpenAPI::toJsonValue(m_fec_committee_id));
    }
    if (m_fec_election_type_full_isSet) {
        obj.insert(QString("fec_election_type_full"), ::OpenAPI::toJsonValue(m_fec_election_type_full));
    }
    if (m_fec_election_type_year_isSet) {
        obj.insert(QString("fec_election_type_year"), ::OpenAPI::toJsonValue(m_fec_election_type_year));
    }
    if (m_file_number_isSet) {
        obj.insert(QString("file_number"), ::OpenAPI::toJsonValue(m_file_number));
    }
    if (m_filing_form_isSet) {
        obj.insert(QString("filing_form"), ::OpenAPI::toJsonValue(m_filing_form));
    }
    if (m_image_number_isSet) {
        obj.insert(QString("image_number"), ::OpenAPI::toJsonValue(m_image_number));
    }
    if (m_incurred_date_isSet) {
        obj.insert(QString("incurred_date"), ::OpenAPI::toJsonValue(m_incurred_date));
    }
    if (m_interest_rate_terms_isSet) {
        obj.insert(QString("interest_rate_terms"), ::OpenAPI::toJsonValue(m_interest_rate_terms));
    }
    if (m_line_number_isSet) {
        obj.insert(QString("line_number"), ::OpenAPI::toJsonValue(m_line_number));
    }
    if (m_link_id_isSet) {
        obj.insert(QString("link_id"), ::OpenAPI::toJsonValue(m_link_id));
    }
    if (m_load_date_isSet) {
        obj.insert(QString("load_date"), ::OpenAPI::toJsonValue(m_load_date));
    }
    if (m_loan_balance_isSet) {
        obj.insert(QString("loan_balance"), ::OpenAPI::toJsonValue(m_loan_balance));
    }
    if (m_loan_source_city_isSet) {
        obj.insert(QString("loan_source_city"), ::OpenAPI::toJsonValue(m_loan_source_city));
    }
    if (m_loan_source_first_name_isSet) {
        obj.insert(QString("loan_source_first_name"), ::OpenAPI::toJsonValue(m_loan_source_first_name));
    }
    if (m_loan_source_last_name_isSet) {
        obj.insert(QString("loan_source_last_name"), ::OpenAPI::toJsonValue(m_loan_source_last_name));
    }
    if (m_loan_source_middle_name_isSet) {
        obj.insert(QString("loan_source_middle_name"), ::OpenAPI::toJsonValue(m_loan_source_middle_name));
    }
    if (m_loan_source_name_isSet) {
        obj.insert(QString("loan_source_name"), ::OpenAPI::toJsonValue(m_loan_source_name));
    }
    if (m_loan_source_prefix_isSet) {
        obj.insert(QString("loan_source_prefix"), ::OpenAPI::toJsonValue(m_loan_source_prefix));
    }
    if (m_loan_source_state_isSet) {
        obj.insert(QString("loan_source_state"), ::OpenAPI::toJsonValue(m_loan_source_state));
    }
    if (m_loan_source_street_1_isSet) {
        obj.insert(QString("loan_source_street_1"), ::OpenAPI::toJsonValue(m_loan_source_street_1));
    }
    if (m_loan_source_street_2_isSet) {
        obj.insert(QString("loan_source_street_2"), ::OpenAPI::toJsonValue(m_loan_source_street_2));
    }
    if (m_loan_source_suffix_isSet) {
        obj.insert(QString("loan_source_suffix"), ::OpenAPI::toJsonValue(m_loan_source_suffix));
    }
    if (m_loan_source_zip_isSet) {
        obj.insert(QString("loan_source_zip"), ::OpenAPI::toJsonValue(m_loan_source_zip));
    }
    if (m_memo_code_isSet) {
        obj.insert(QString("memo_code"), ::OpenAPI::toJsonValue(m_memo_code));
    }
    if (m_memo_text_isSet) {
        obj.insert(QString("memo_text"), ::OpenAPI::toJsonValue(m_memo_text));
    }
    if (m_original_loan_amount_isSet) {
        obj.insert(QString("original_loan_amount"), ::OpenAPI::toJsonValue(m_original_loan_amount));
    }
    if (m_original_sub_id_isSet) {
        obj.insert(QString("original_sub_id"), ::OpenAPI::toJsonValue(m_original_sub_id));
    }
    if (m_payment_to_date_isSet) {
        obj.insert(QString("payment_to_date"), ::OpenAPI::toJsonValue(m_payment_to_date));
    }
    if (m_pdf_url_isSet) {
        obj.insert(QString("pdf_url"), ::OpenAPI::toJsonValue(m_pdf_url));
    }
    if (m_personally_funded_isSet) {
        obj.insert(QString("personally_funded"), ::OpenAPI::toJsonValue(m_personally_funded));
    }
    if (m_report_type_isSet) {
        obj.insert(QString("report_type"), ::OpenAPI::toJsonValue(m_report_type));
    }
    if (m_report_year_isSet) {
        obj.insert(QString("report_year"), ::OpenAPI::toJsonValue(m_report_year));
    }
    if (m_schedule_a_line_number_isSet) {
        obj.insert(QString("schedule_a_line_number"), ::OpenAPI::toJsonValue(m_schedule_a_line_number));
    }
    if (m_schedule_type_isSet) {
        obj.insert(QString("schedule_type"), ::OpenAPI::toJsonValue(m_schedule_type));
    }
    if (m_schedule_type_full_isSet) {
        obj.insert(QString("schedule_type_full"), ::OpenAPI::toJsonValue(m_schedule_type_full));
    }
    if (m_secured_ind_isSet) {
        obj.insert(QString("secured_ind"), ::OpenAPI::toJsonValue(m_secured_ind));
    }
    if (m_sub_id_isSet) {
        obj.insert(QString("sub_id"), ::OpenAPI::toJsonValue(m_sub_id));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("transaction_id"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    return obj;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getActionCode() const {
    return m_action_code;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setActionCode(const QString &action_code) {
    m_action_code = action_code;
    m_action_code_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_action_code_Set() const{
    return m_action_code_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_action_code_Valid() const{
    return m_action_code_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getActionCodeFull() const {
    return m_action_code_full;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setActionCodeFull(const QString &action_code_full) {
    m_action_code_full = action_code_full;
    m_action_code_full_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_action_code_full_Set() const{
    return m_action_code_full_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_action_code_full_Valid() const{
    return m_action_code_full_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getCandidateFirstName() const {
    return m_candidate_first_name;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setCandidateFirstName(const QString &candidate_first_name) {
    m_candidate_first_name = candidate_first_name;
    m_candidate_first_name_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_candidate_first_name_Set() const{
    return m_candidate_first_name_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_candidate_first_name_Valid() const{
    return m_candidate_first_name_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getCandidateId() const {
    return m_candidate_id;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setCandidateId(const QString &candidate_id) {
    m_candidate_id = candidate_id;
    m_candidate_id_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_candidate_id_Set() const{
    return m_candidate_id_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_candidate_id_Valid() const{
    return m_candidate_id_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getCandidateLastName() const {
    return m_candidate_last_name;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setCandidateLastName(const QString &candidate_last_name) {
    m_candidate_last_name = candidate_last_name;
    m_candidate_last_name_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_candidate_last_name_Set() const{
    return m_candidate_last_name_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_candidate_last_name_Valid() const{
    return m_candidate_last_name_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getCandidateMiddleName() const {
    return m_candidate_middle_name;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setCandidateMiddleName(const QString &candidate_middle_name) {
    m_candidate_middle_name = candidate_middle_name;
    m_candidate_middle_name_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_candidate_middle_name_Set() const{
    return m_candidate_middle_name_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_candidate_middle_name_Valid() const{
    return m_candidate_middle_name_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getCandidateName() const {
    return m_candidate_name;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setCandidateName(const QString &candidate_name) {
    m_candidate_name = candidate_name;
    m_candidate_name_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_candidate_name_Set() const{
    return m_candidate_name_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_candidate_name_Valid() const{
    return m_candidate_name_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getCandidateOffice() const {
    return m_candidate_office;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setCandidateOffice(const QString &candidate_office) {
    m_candidate_office = candidate_office;
    m_candidate_office_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_candidate_office_Set() const{
    return m_candidate_office_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_candidate_office_Valid() const{
    return m_candidate_office_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getCandidateOfficeDistrict() const {
    return m_candidate_office_district;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setCandidateOfficeDistrict(const QString &candidate_office_district) {
    m_candidate_office_district = candidate_office_district;
    m_candidate_office_district_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_candidate_office_district_Set() const{
    return m_candidate_office_district_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_candidate_office_district_Valid() const{
    return m_candidate_office_district_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getCandidateOfficeFull() const {
    return m_candidate_office_full;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setCandidateOfficeFull(const QString &candidate_office_full) {
    m_candidate_office_full = candidate_office_full;
    m_candidate_office_full_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_candidate_office_full_Set() const{
    return m_candidate_office_full_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_candidate_office_full_Valid() const{
    return m_candidate_office_full_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getCandidateOfficeState() const {
    return m_candidate_office_state;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setCandidateOfficeState(const QString &candidate_office_state) {
    m_candidate_office_state = candidate_office_state;
    m_candidate_office_state_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_candidate_office_state_Set() const{
    return m_candidate_office_state_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_candidate_office_state_Valid() const{
    return m_candidate_office_state_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getCandidateOfficeStateFull() const {
    return m_candidate_office_state_full;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setCandidateOfficeStateFull(const QString &candidate_office_state_full) {
    m_candidate_office_state_full = candidate_office_state_full;
    m_candidate_office_state_full_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_candidate_office_state_full_Set() const{
    return m_candidate_office_state_full_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_candidate_office_state_full_Valid() const{
    return m_candidate_office_state_full_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getCandidatePrefix() const {
    return m_candidate_prefix;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setCandidatePrefix(const QString &candidate_prefix) {
    m_candidate_prefix = candidate_prefix;
    m_candidate_prefix_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_candidate_prefix_Set() const{
    return m_candidate_prefix_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_candidate_prefix_Valid() const{
    return m_candidate_prefix_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getCandidateSuffix() const {
    return m_candidate_suffix;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setCandidateSuffix(const QString &candidate_suffix) {
    m_candidate_suffix = candidate_suffix;
    m_candidate_suffix_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_candidate_suffix_Set() const{
    return m_candidate_suffix_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_candidate_suffix_Valid() const{
    return m_candidate_suffix_isValid;
}

OAICommitteeHistory OAI_schedules_schedule_c__get_default_response_results_inner::getCommittee() const {
    return m_committee;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setCommittee(const OAICommitteeHistory &committee) {
    m_committee = committee;
    m_committee_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_committee_Set() const{
    return m_committee_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_committee_Valid() const{
    return m_committee_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getCommitteeId() const {
    return m_committee_id;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setCommitteeId(const QString &committee_id) {
    m_committee_id = committee_id;
    m_committee_id_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_committee_id_Set() const{
    return m_committee_id_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_committee_id_Valid() const{
    return m_committee_id_isValid;
}

qint32 OAI_schedules_schedule_c__get_default_response_results_inner::getCycle() const {
    return m_cycle;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setCycle(const qint32 &cycle) {
    m_cycle = cycle;
    m_cycle_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_cycle_Set() const{
    return m_cycle_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_cycle_Valid() const{
    return m_cycle_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getDueDateTerms() const {
    return m_due_date_terms;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setDueDateTerms(const QString &due_date_terms) {
    m_due_date_terms = due_date_terms;
    m_due_date_terms_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_due_date_terms_Set() const{
    return m_due_date_terms_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_due_date_terms_Valid() const{
    return m_due_date_terms_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getElectionType() const {
    return m_election_type;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setElectionType(const QString &election_type) {
    m_election_type = election_type;
    m_election_type_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_election_type_Set() const{
    return m_election_type_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_election_type_Valid() const{
    return m_election_type_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getElectionTypeFull() const {
    return m_election_type_full;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setElectionTypeFull(const QString &election_type_full) {
    m_election_type_full = election_type_full;
    m_election_type_full_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_election_type_full_Set() const{
    return m_election_type_full_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_election_type_full_Valid() const{
    return m_election_type_full_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getEntityType() const {
    return m_entity_type;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setEntityType(const QString &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getEntityTypeFull() const {
    return m_entity_type_full;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setEntityTypeFull(const QString &entity_type_full) {
    m_entity_type_full = entity_type_full;
    m_entity_type_full_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_entity_type_full_Set() const{
    return m_entity_type_full_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_entity_type_full_Valid() const{
    return m_entity_type_full_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getFecCommitteeId() const {
    return m_fec_committee_id;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setFecCommitteeId(const QString &fec_committee_id) {
    m_fec_committee_id = fec_committee_id;
    m_fec_committee_id_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_fec_committee_id_Set() const{
    return m_fec_committee_id_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_fec_committee_id_Valid() const{
    return m_fec_committee_id_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getFecElectionTypeFull() const {
    return m_fec_election_type_full;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setFecElectionTypeFull(const QString &fec_election_type_full) {
    m_fec_election_type_full = fec_election_type_full;
    m_fec_election_type_full_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_fec_election_type_full_Set() const{
    return m_fec_election_type_full_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_fec_election_type_full_Valid() const{
    return m_fec_election_type_full_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getFecElectionTypeYear() const {
    return m_fec_election_type_year;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setFecElectionTypeYear(const QString &fec_election_type_year) {
    m_fec_election_type_year = fec_election_type_year;
    m_fec_election_type_year_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_fec_election_type_year_Set() const{
    return m_fec_election_type_year_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_fec_election_type_year_Valid() const{
    return m_fec_election_type_year_isValid;
}

qint32 OAI_schedules_schedule_c__get_default_response_results_inner::getFileNumber() const {
    return m_file_number;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setFileNumber(const qint32 &file_number) {
    m_file_number = file_number;
    m_file_number_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_file_number_Set() const{
    return m_file_number_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_file_number_Valid() const{
    return m_file_number_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getFilingForm() const {
    return m_filing_form;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setFilingForm(const QString &filing_form) {
    m_filing_form = filing_form;
    m_filing_form_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_filing_form_Set() const{
    return m_filing_form_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_filing_form_Valid() const{
    return m_filing_form_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getImageNumber() const {
    return m_image_number;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setImageNumber(const QString &image_number) {
    m_image_number = image_number;
    m_image_number_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_image_number_Set() const{
    return m_image_number_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_image_number_Valid() const{
    return m_image_number_isValid;
}

QDate OAI_schedules_schedule_c__get_default_response_results_inner::getIncurredDate() const {
    return m_incurred_date;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setIncurredDate(const QDate &incurred_date) {
    m_incurred_date = incurred_date;
    m_incurred_date_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_incurred_date_Set() const{
    return m_incurred_date_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_incurred_date_Valid() const{
    return m_incurred_date_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getInterestRateTerms() const {
    return m_interest_rate_terms;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setInterestRateTerms(const QString &interest_rate_terms) {
    m_interest_rate_terms = interest_rate_terms;
    m_interest_rate_terms_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_interest_rate_terms_Set() const{
    return m_interest_rate_terms_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_interest_rate_terms_Valid() const{
    return m_interest_rate_terms_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getLineNumber() const {
    return m_line_number;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setLineNumber(const QString &line_number) {
    m_line_number = line_number;
    m_line_number_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_line_number_Set() const{
    return m_line_number_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_line_number_Valid() const{
    return m_line_number_isValid;
}

qint32 OAI_schedules_schedule_c__get_default_response_results_inner::getLinkId() const {
    return m_link_id;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setLinkId(const qint32 &link_id) {
    m_link_id = link_id;
    m_link_id_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_link_id_Set() const{
    return m_link_id_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_link_id_Valid() const{
    return m_link_id_isValid;
}

QDateTime OAI_schedules_schedule_c__get_default_response_results_inner::getLoadDate() const {
    return m_load_date;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setLoadDate(const QDateTime &load_date) {
    m_load_date = load_date;
    m_load_date_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_load_date_Set() const{
    return m_load_date_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_load_date_Valid() const{
    return m_load_date_isValid;
}

float OAI_schedules_schedule_c__get_default_response_results_inner::getLoanBalance() const {
    return m_loan_balance;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setLoanBalance(const float &loan_balance) {
    m_loan_balance = loan_balance;
    m_loan_balance_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_loan_balance_Set() const{
    return m_loan_balance_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_loan_balance_Valid() const{
    return m_loan_balance_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getLoanSourceCity() const {
    return m_loan_source_city;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setLoanSourceCity(const QString &loan_source_city) {
    m_loan_source_city = loan_source_city;
    m_loan_source_city_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_loan_source_city_Set() const{
    return m_loan_source_city_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_loan_source_city_Valid() const{
    return m_loan_source_city_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getLoanSourceFirstName() const {
    return m_loan_source_first_name;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setLoanSourceFirstName(const QString &loan_source_first_name) {
    m_loan_source_first_name = loan_source_first_name;
    m_loan_source_first_name_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_loan_source_first_name_Set() const{
    return m_loan_source_first_name_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_loan_source_first_name_Valid() const{
    return m_loan_source_first_name_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getLoanSourceLastName() const {
    return m_loan_source_last_name;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setLoanSourceLastName(const QString &loan_source_last_name) {
    m_loan_source_last_name = loan_source_last_name;
    m_loan_source_last_name_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_loan_source_last_name_Set() const{
    return m_loan_source_last_name_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_loan_source_last_name_Valid() const{
    return m_loan_source_last_name_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getLoanSourceMiddleName() const {
    return m_loan_source_middle_name;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setLoanSourceMiddleName(const QString &loan_source_middle_name) {
    m_loan_source_middle_name = loan_source_middle_name;
    m_loan_source_middle_name_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_loan_source_middle_name_Set() const{
    return m_loan_source_middle_name_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_loan_source_middle_name_Valid() const{
    return m_loan_source_middle_name_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getLoanSourceName() const {
    return m_loan_source_name;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setLoanSourceName(const QString &loan_source_name) {
    m_loan_source_name = loan_source_name;
    m_loan_source_name_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_loan_source_name_Set() const{
    return m_loan_source_name_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_loan_source_name_Valid() const{
    return m_loan_source_name_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getLoanSourcePrefix() const {
    return m_loan_source_prefix;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setLoanSourcePrefix(const QString &loan_source_prefix) {
    m_loan_source_prefix = loan_source_prefix;
    m_loan_source_prefix_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_loan_source_prefix_Set() const{
    return m_loan_source_prefix_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_loan_source_prefix_Valid() const{
    return m_loan_source_prefix_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getLoanSourceState() const {
    return m_loan_source_state;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setLoanSourceState(const QString &loan_source_state) {
    m_loan_source_state = loan_source_state;
    m_loan_source_state_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_loan_source_state_Set() const{
    return m_loan_source_state_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_loan_source_state_Valid() const{
    return m_loan_source_state_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getLoanSourceStreet1() const {
    return m_loan_source_street_1;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setLoanSourceStreet1(const QString &loan_source_street_1) {
    m_loan_source_street_1 = loan_source_street_1;
    m_loan_source_street_1_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_loan_source_street_1_Set() const{
    return m_loan_source_street_1_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_loan_source_street_1_Valid() const{
    return m_loan_source_street_1_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getLoanSourceStreet2() const {
    return m_loan_source_street_2;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setLoanSourceStreet2(const QString &loan_source_street_2) {
    m_loan_source_street_2 = loan_source_street_2;
    m_loan_source_street_2_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_loan_source_street_2_Set() const{
    return m_loan_source_street_2_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_loan_source_street_2_Valid() const{
    return m_loan_source_street_2_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getLoanSourceSuffix() const {
    return m_loan_source_suffix;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setLoanSourceSuffix(const QString &loan_source_suffix) {
    m_loan_source_suffix = loan_source_suffix;
    m_loan_source_suffix_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_loan_source_suffix_Set() const{
    return m_loan_source_suffix_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_loan_source_suffix_Valid() const{
    return m_loan_source_suffix_isValid;
}

qint32 OAI_schedules_schedule_c__get_default_response_results_inner::getLoanSourceZip() const {
    return m_loan_source_zip;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setLoanSourceZip(const qint32 &loan_source_zip) {
    m_loan_source_zip = loan_source_zip;
    m_loan_source_zip_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_loan_source_zip_Set() const{
    return m_loan_source_zip_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_loan_source_zip_Valid() const{
    return m_loan_source_zip_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getMemoCode() const {
    return m_memo_code;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setMemoCode(const QString &memo_code) {
    m_memo_code = memo_code;
    m_memo_code_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_memo_code_Set() const{
    return m_memo_code_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_memo_code_Valid() const{
    return m_memo_code_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getMemoText() const {
    return m_memo_text;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setMemoText(const QString &memo_text) {
    m_memo_text = memo_text;
    m_memo_text_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_memo_text_Set() const{
    return m_memo_text_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_memo_text_Valid() const{
    return m_memo_text_isValid;
}

float OAI_schedules_schedule_c__get_default_response_results_inner::getOriginalLoanAmount() const {
    return m_original_loan_amount;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setOriginalLoanAmount(const float &original_loan_amount) {
    m_original_loan_amount = original_loan_amount;
    m_original_loan_amount_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_original_loan_amount_Set() const{
    return m_original_loan_amount_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_original_loan_amount_Valid() const{
    return m_original_loan_amount_isValid;
}

qint32 OAI_schedules_schedule_c__get_default_response_results_inner::getOriginalSubId() const {
    return m_original_sub_id;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setOriginalSubId(const qint32 &original_sub_id) {
    m_original_sub_id = original_sub_id;
    m_original_sub_id_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_original_sub_id_Set() const{
    return m_original_sub_id_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_original_sub_id_Valid() const{
    return m_original_sub_id_isValid;
}

float OAI_schedules_schedule_c__get_default_response_results_inner::getPaymentToDate() const {
    return m_payment_to_date;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setPaymentToDate(const float &payment_to_date) {
    m_payment_to_date = payment_to_date;
    m_payment_to_date_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_payment_to_date_Set() const{
    return m_payment_to_date_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_payment_to_date_Valid() const{
    return m_payment_to_date_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getPdfUrl() const {
    return m_pdf_url;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setPdfUrl(const QString &pdf_url) {
    m_pdf_url = pdf_url;
    m_pdf_url_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_pdf_url_Set() const{
    return m_pdf_url_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_pdf_url_Valid() const{
    return m_pdf_url_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getPersonallyFunded() const {
    return m_personally_funded;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setPersonallyFunded(const QString &personally_funded) {
    m_personally_funded = personally_funded;
    m_personally_funded_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_personally_funded_Set() const{
    return m_personally_funded_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_personally_funded_Valid() const{
    return m_personally_funded_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getReportType() const {
    return m_report_type;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setReportType(const QString &report_type) {
    m_report_type = report_type;
    m_report_type_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_report_type_Set() const{
    return m_report_type_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_report_type_Valid() const{
    return m_report_type_isValid;
}

qint32 OAI_schedules_schedule_c__get_default_response_results_inner::getReportYear() const {
    return m_report_year;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setReportYear(const qint32 &report_year) {
    m_report_year = report_year;
    m_report_year_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_report_year_Set() const{
    return m_report_year_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_report_year_Valid() const{
    return m_report_year_isValid;
}

qint32 OAI_schedules_schedule_c__get_default_response_results_inner::getScheduleALineNumber() const {
    return m_schedule_a_line_number;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setScheduleALineNumber(const qint32 &schedule_a_line_number) {
    m_schedule_a_line_number = schedule_a_line_number;
    m_schedule_a_line_number_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_schedule_a_line_number_Set() const{
    return m_schedule_a_line_number_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_schedule_a_line_number_Valid() const{
    return m_schedule_a_line_number_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getScheduleType() const {
    return m_schedule_type;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setScheduleType(const QString &schedule_type) {
    m_schedule_type = schedule_type;
    m_schedule_type_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_schedule_type_Set() const{
    return m_schedule_type_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_schedule_type_Valid() const{
    return m_schedule_type_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getScheduleTypeFull() const {
    return m_schedule_type_full;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setScheduleTypeFull(const QString &schedule_type_full) {
    m_schedule_type_full = schedule_type_full;
    m_schedule_type_full_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_schedule_type_full_Set() const{
    return m_schedule_type_full_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_schedule_type_full_Valid() const{
    return m_schedule_type_full_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getSecuredInd() const {
    return m_secured_ind;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setSecuredInd(const QString &secured_ind) {
    m_secured_ind = secured_ind;
    m_secured_ind_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_secured_ind_Set() const{
    return m_secured_ind_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_secured_ind_Valid() const{
    return m_secured_ind_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getSubId() const {
    return m_sub_id;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setSubId(const QString &sub_id) {
    m_sub_id = sub_id;
    m_sub_id_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_sub_id_Set() const{
    return m_sub_id_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_sub_id_Valid() const{
    return m_sub_id_isValid;
}

QString OAI_schedules_schedule_c__get_default_response_results_inner::getTransactionId() const {
    return m_transaction_id;
}
void OAI_schedules_schedule_c__get_default_response_results_inner::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_code_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_middle_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_office_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_office_district_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_office_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_office_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_office_state_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cycle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_terms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_type_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fec_committee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fec_election_type_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fec_election_type_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filing_form_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_incurred_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interest_rate_terms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loan_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loan_source_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loan_source_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loan_source_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loan_source_middle_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loan_source_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loan_source_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loan_source_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loan_source_street_1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loan_source_street_2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loan_source_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loan_source_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memo_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memo_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_loan_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_sub_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_to_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pdf_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_personally_funded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_a_line_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_type_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secured_ind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_schedules_schedule_c__get_default_response_results_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
