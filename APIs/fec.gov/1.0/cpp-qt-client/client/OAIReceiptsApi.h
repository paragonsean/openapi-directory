/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReceiptsApi_H
#define OAI_OAIReceiptsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIScheduleAByEmployerPage.h"
#include "OAIScheduleAByOccupationPage.h"
#include "OAIScheduleABySizeCandidatePage.h"
#include "OAIScheduleABySizePage.h"
#include "OAIScheduleAByStateCandidatePage.h"
#include "OAIScheduleAByStatePage.h"
#include "OAIScheduleAByStateRecipientTotalsPage.h"
#include "OAIScheduleAByZipPage.h"
#include "OAIScheduleAEfilePage.h"
#include "OAIScheduleAPage.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReceiptsApi : public QObject {
    Q_OBJECT

public:
    OAIReceiptsApi(const int timeOut = 0);
    ~OAIReceiptsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  cycle QList<qint32> [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  committee_id QList<QString> [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  employer QList<QString> [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void schedulesScheduleAByEmployerGet(const QString &api_key, const ::OpenAPI::OptionalParam<QList<qint32>> &cycle = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &committee_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &employer = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  cycle QList<qint32> [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  committee_id QList<QString> [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  occupation QList<QString> [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void schedulesScheduleAByOccupationGet(const QString &api_key, const ::OpenAPI::OptionalParam<QList<qint32>> &cycle = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &committee_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &occupation = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  cycle QList<qint32> [required]
    * @param[in]  candidate_id QList<QString> [required]
    * @param[in]  election_full bool [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void schedulesScheduleABySizeByCandidateGet(const QString &api_key, const QList<qint32> &cycle, const QList<QString> &candidate_id, const ::OpenAPI::OptionalParam<bool> &election_full = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  cycle QList<qint32> [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  committee_id QList<QString> [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  size QList<qint32> [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void schedulesScheduleABySizeGet(const QString &api_key, const ::OpenAPI::OptionalParam<QList<qint32>> &cycle = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &committee_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<qint32>> &size = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  cycle QList<qint32> [required]
    * @param[in]  candidate_id QList<QString> [required]
    * @param[in]  election_full bool [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void schedulesScheduleAByStateByCandidateGet(const QString &api_key, const QList<qint32> &cycle, const QList<QString> &candidate_id, const ::OpenAPI::OptionalParam<bool> &election_full = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  cycle QList<qint32> [required]
    * @param[in]  candidate_id QList<QString> [required]
    * @param[in]  election_full bool [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void schedulesScheduleAByStateByCandidateTotalsGet(const QString &api_key, const QList<qint32> &cycle, const QList<QString> &candidate_id, const ::OpenAPI::OptionalParam<bool> &election_full = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  hide_null bool [optional]
    * @param[in]  cycle QList<qint32> [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  state QList<QString> [optional]
    * @param[in]  committee_id QList<QString> [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void schedulesScheduleAByStateGet(const QString &api_key, const ::OpenAPI::OptionalParam<bool> &hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<qint32>> &cycle = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &state = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &committee_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  committee_type QList<QString> [optional]
    * @param[in]  cycle QList<qint32> [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  state QList<QString> [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void schedulesScheduleAByStateTotalsGet(const QString &api_key, const ::OpenAPI::OptionalParam<QList<QString>> &committee_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &cycle = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &state = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  zip QList<QString> [optional]
    * @param[in]  cycle QList<qint32> [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  state QList<QString> [optional]
    * @param[in]  committee_id QList<QString> [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void schedulesScheduleAByZipGet(const QString &api_key, const ::OpenAPI::OptionalParam<QList<QString>> &zip = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &cycle = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &state = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &committee_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  min_date QDate [optional]
    * @param[in]  max_image_number QString [optional]
    * @param[in]  contributor_employer QList<QString> [optional]
    * @param[in]  min_image_number QString [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  contributor_name QList<QString> [optional]
    * @param[in]  min_amount QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  contributor_state QList<QString> [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  line_number QString [optional]
    * @param[in]  contributor_occupation QList<QString> [optional]
    * @param[in]  contributor_city QList<QString> [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  committee_id QList<QString> [optional]
    * @param[in]  image_number QList<QString> [optional]
    * @param[in]  max_date QDate [optional]
    * @param[in]  max_amount QString [optional]
    */
    virtual void schedulesScheduleAEfileGet(const QString &api_key, const ::OpenAPI::OptionalParam<QDate> &min_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &max_image_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &contributor_employer = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &min_image_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &contributor_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &min_amount = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &contributor_state = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &line_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &contributor_occupation = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &contributor_city = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &committee_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &image_number = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &max_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &max_amount = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  is_individual bool [optional]
    * @param[in]  min_date QDate [optional]
    * @param[in]  max_image_number QString [optional]
    * @param[in]  min_image_number QString [optional]
    * @param[in]  contributor_type QList<QString> [optional]
    * @param[in]  contributor_id QList<QString> [optional]
    * @param[in]  recipient_committee_org_type QList<QString> [optional]
    * @param[in]  contributor_employer QList<QString> [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  last_index qint32 [optional]
    * @param[in]  contributor_name QList<QString> [optional]
    * @param[in]  min_amount QString [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  recipient_committee_designation QList<QString> [optional]
    * @param[in]  max_load_date QDate [optional]
    * @param[in]  recipient_committee_type QList<QString> [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  last_contribution_receipt_date QDate [optional]
    * @param[in]  last_contribution_receipt_amount float [optional]
    * @param[in]  line_number QString [optional]
    * @param[in]  contributor_state QList<QString> [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  two_year_transaction_period QList<qint32> [optional]
    * @param[in]  contributor_zip QList<QString> [optional]
    * @param[in]  min_load_date QDate [optional]
    * @param[in]  contributor_occupation QList<QString> [optional]
    * @param[in]  contributor_city QList<QString> [optional]
    * @param[in]  committee_id QList<QString> [optional]
    * @param[in]  image_number QList<QString> [optional]
    * @param[in]  max_date QDate [optional]
    * @param[in]  max_amount QString [optional]
    */
    virtual void schedulesScheduleAGet(const QString &api_key, const ::OpenAPI::OptionalParam<bool> &is_individual = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDate> &min_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &max_image_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min_image_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &contributor_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &contributor_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &recipient_committee_org_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &contributor_employer = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &last_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &contributor_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &min_amount = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &recipient_committee_designation = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &max_load_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<QString>> &recipient_committee_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &last_contribution_receipt_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<float> &last_contribution_receipt_amount = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &line_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &contributor_state = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<qint32>> &two_year_transaction_period = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<QString>> &contributor_zip = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &min_load_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<QString>> &contributor_occupation = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &contributor_city = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &committee_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &image_number = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &max_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &max_amount = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  sub_id QString [required]
    * @param[in]  is_individual bool [optional]
    * @param[in]  min_date QDate [optional]
    * @param[in]  max_image_number QString [optional]
    * @param[in]  min_image_number QString [optional]
    * @param[in]  contributor_type QList<QString> [optional]
    * @param[in]  contributor_id QList<QString> [optional]
    * @param[in]  recipient_committee_org_type QList<QString> [optional]
    * @param[in]  contributor_employer QList<QString> [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  last_index qint32 [optional]
    * @param[in]  contributor_name QList<QString> [optional]
    * @param[in]  min_amount QString [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  recipient_committee_designation QList<QString> [optional]
    * @param[in]  max_load_date QDate [optional]
    * @param[in]  recipient_committee_type QList<QString> [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  last_contribution_receipt_date QDate [optional]
    * @param[in]  last_contribution_receipt_amount float [optional]
    * @param[in]  line_number QString [optional]
    * @param[in]  contributor_state QList<QString> [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  two_year_transaction_period QList<qint32> [optional]
    * @param[in]  contributor_zip QList<QString> [optional]
    * @param[in]  min_load_date QDate [optional]
    * @param[in]  contributor_occupation QList<QString> [optional]
    * @param[in]  contributor_city QList<QString> [optional]
    * @param[in]  committee_id QList<QString> [optional]
    * @param[in]  image_number QList<QString> [optional]
    * @param[in]  max_date QDate [optional]
    * @param[in]  max_amount QString [optional]
    */
    virtual void schedulesScheduleASubIdGet(const QString &api_key, const QString &sub_id, const ::OpenAPI::OptionalParam<bool> &is_individual = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDate> &min_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &max_image_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min_image_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &contributor_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &contributor_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &recipient_committee_org_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &contributor_employer = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &last_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &contributor_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &min_amount = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &recipient_committee_designation = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &max_load_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<QString>> &recipient_committee_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &last_contribution_receipt_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<float> &last_contribution_receipt_amount = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &line_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &contributor_state = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<qint32>> &two_year_transaction_period = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<QString>> &contributor_zip = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &min_load_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<QString>> &contributor_occupation = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &contributor_city = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &committee_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &image_number = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &max_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &max_amount = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void schedulesScheduleAByEmployerGetCallback(OAIHttpRequestWorker *worker);
    void schedulesScheduleAByOccupationGetCallback(OAIHttpRequestWorker *worker);
    void schedulesScheduleABySizeByCandidateGetCallback(OAIHttpRequestWorker *worker);
    void schedulesScheduleABySizeGetCallback(OAIHttpRequestWorker *worker);
    void schedulesScheduleAByStateByCandidateGetCallback(OAIHttpRequestWorker *worker);
    void schedulesScheduleAByStateByCandidateTotalsGetCallback(OAIHttpRequestWorker *worker);
    void schedulesScheduleAByStateGetCallback(OAIHttpRequestWorker *worker);
    void schedulesScheduleAByStateTotalsGetCallback(OAIHttpRequestWorker *worker);
    void schedulesScheduleAByZipGetCallback(OAIHttpRequestWorker *worker);
    void schedulesScheduleAEfileGetCallback(OAIHttpRequestWorker *worker);
    void schedulesScheduleAGetCallback(OAIHttpRequestWorker *worker);
    void schedulesScheduleASubIdGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void schedulesScheduleAByEmployerGetSignal(OAIScheduleAByEmployerPage summary);
    void schedulesScheduleAByOccupationGetSignal(OAIScheduleAByOccupationPage summary);
    void schedulesScheduleABySizeByCandidateGetSignal(OAIScheduleABySizeCandidatePage summary);
    void schedulesScheduleABySizeGetSignal(OAIScheduleABySizePage summary);
    void schedulesScheduleAByStateByCandidateGetSignal(OAIScheduleAByStateCandidatePage summary);
    void schedulesScheduleAByStateByCandidateTotalsGetSignal(OAIScheduleAByStateCandidatePage summary);
    void schedulesScheduleAByStateGetSignal(OAIScheduleAByStatePage summary);
    void schedulesScheduleAByStateTotalsGetSignal(OAIScheduleAByStateRecipientTotalsPage summary);
    void schedulesScheduleAByZipGetSignal(OAIScheduleAByZipPage summary);
    void schedulesScheduleAEfileGetSignal(OAIScheduleAEfilePage summary);
    void schedulesScheduleAGetSignal(OAIScheduleAPage summary);
    void schedulesScheduleASubIdGetSignal(OAIScheduleAPage summary);


    void schedulesScheduleAByEmployerGetSignalFull(OAIHttpRequestWorker *worker, OAIScheduleAByEmployerPage summary);
    void schedulesScheduleAByOccupationGetSignalFull(OAIHttpRequestWorker *worker, OAIScheduleAByOccupationPage summary);
    void schedulesScheduleABySizeByCandidateGetSignalFull(OAIHttpRequestWorker *worker, OAIScheduleABySizeCandidatePage summary);
    void schedulesScheduleABySizeGetSignalFull(OAIHttpRequestWorker *worker, OAIScheduleABySizePage summary);
    void schedulesScheduleAByStateByCandidateGetSignalFull(OAIHttpRequestWorker *worker, OAIScheduleAByStateCandidatePage summary);
    void schedulesScheduleAByStateByCandidateTotalsGetSignalFull(OAIHttpRequestWorker *worker, OAIScheduleAByStateCandidatePage summary);
    void schedulesScheduleAByStateGetSignalFull(OAIHttpRequestWorker *worker, OAIScheduleAByStatePage summary);
    void schedulesScheduleAByStateTotalsGetSignalFull(OAIHttpRequestWorker *worker, OAIScheduleAByStateRecipientTotalsPage summary);
    void schedulesScheduleAByZipGetSignalFull(OAIHttpRequestWorker *worker, OAIScheduleAByZipPage summary);
    void schedulesScheduleAEfileGetSignalFull(OAIHttpRequestWorker *worker, OAIScheduleAEfilePage summary);
    void schedulesScheduleAGetSignalFull(OAIHttpRequestWorker *worker, OAIScheduleAPage summary);
    void schedulesScheduleASubIdGetSignalFull(OAIHttpRequestWorker *worker, OAIScheduleAPage summary);

    Q_DECL_DEPRECATED_X("Use schedulesScheduleAByEmployerGetSignalError() instead")
    void schedulesScheduleAByEmployerGetSignalE(OAIScheduleAByEmployerPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleAByEmployerGetSignalError(OAIScheduleAByEmployerPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleAByOccupationGetSignalError() instead")
    void schedulesScheduleAByOccupationGetSignalE(OAIScheduleAByOccupationPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleAByOccupationGetSignalError(OAIScheduleAByOccupationPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleABySizeByCandidateGetSignalError() instead")
    void schedulesScheduleABySizeByCandidateGetSignalE(OAIScheduleABySizeCandidatePage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleABySizeByCandidateGetSignalError(OAIScheduleABySizeCandidatePage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleABySizeGetSignalError() instead")
    void schedulesScheduleABySizeGetSignalE(OAIScheduleABySizePage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleABySizeGetSignalError(OAIScheduleABySizePage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleAByStateByCandidateGetSignalError() instead")
    void schedulesScheduleAByStateByCandidateGetSignalE(OAIScheduleAByStateCandidatePage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleAByStateByCandidateGetSignalError(OAIScheduleAByStateCandidatePage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleAByStateByCandidateTotalsGetSignalError() instead")
    void schedulesScheduleAByStateByCandidateTotalsGetSignalE(OAIScheduleAByStateCandidatePage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleAByStateByCandidateTotalsGetSignalError(OAIScheduleAByStateCandidatePage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleAByStateGetSignalError() instead")
    void schedulesScheduleAByStateGetSignalE(OAIScheduleAByStatePage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleAByStateGetSignalError(OAIScheduleAByStatePage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleAByStateTotalsGetSignalError() instead")
    void schedulesScheduleAByStateTotalsGetSignalE(OAIScheduleAByStateRecipientTotalsPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleAByStateTotalsGetSignalError(OAIScheduleAByStateRecipientTotalsPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleAByZipGetSignalError() instead")
    void schedulesScheduleAByZipGetSignalE(OAIScheduleAByZipPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleAByZipGetSignalError(OAIScheduleAByZipPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleAEfileGetSignalError() instead")
    void schedulesScheduleAEfileGetSignalE(OAIScheduleAEfilePage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleAEfileGetSignalError(OAIScheduleAEfilePage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleAGetSignalError() instead")
    void schedulesScheduleAGetSignalE(OAIScheduleAPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleAGetSignalError(OAIScheduleAPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleASubIdGetSignalError() instead")
    void schedulesScheduleASubIdGetSignalE(OAIScheduleAPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleASubIdGetSignalError(OAIScheduleAPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use schedulesScheduleAByEmployerGetSignalErrorFull() instead")
    void schedulesScheduleAByEmployerGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleAByEmployerGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleAByOccupationGetSignalErrorFull() instead")
    void schedulesScheduleAByOccupationGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleAByOccupationGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleABySizeByCandidateGetSignalErrorFull() instead")
    void schedulesScheduleABySizeByCandidateGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleABySizeByCandidateGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleABySizeGetSignalErrorFull() instead")
    void schedulesScheduleABySizeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleABySizeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleAByStateByCandidateGetSignalErrorFull() instead")
    void schedulesScheduleAByStateByCandidateGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleAByStateByCandidateGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleAByStateByCandidateTotalsGetSignalErrorFull() instead")
    void schedulesScheduleAByStateByCandidateTotalsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleAByStateByCandidateTotalsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleAByStateGetSignalErrorFull() instead")
    void schedulesScheduleAByStateGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleAByStateGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleAByStateTotalsGetSignalErrorFull() instead")
    void schedulesScheduleAByStateTotalsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleAByStateTotalsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleAByZipGetSignalErrorFull() instead")
    void schedulesScheduleAByZipGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleAByZipGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleAEfileGetSignalErrorFull() instead")
    void schedulesScheduleAEfileGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleAEfileGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleAGetSignalErrorFull() instead")
    void schedulesScheduleAGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleAGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleASubIdGetSignalErrorFull() instead")
    void schedulesScheduleASubIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleASubIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
