/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIScheduleH4.h
 *
 * 
 */

#ifndef OAIScheduleH4_H
#define OAIScheduleH4_H

#include <QJsonObject>

#include "OAICommitteeHistory.h"
#include <QDate>
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICommitteeHistory;

class OAIScheduleH4 : public OAIObject {
public:
    OAIScheduleH4();
    OAIScheduleH4(QString json);
    ~OAIScheduleH4() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAdditionalDescription() const;
    void setAdditionalDescription(const QString &additional_description);
    bool is_additional_description_Set() const;
    bool is_additional_description_Valid() const;

    QString getAdministrativeActivityInidcator() const;
    void setAdministrativeActivityInidcator(const QString &administrative_activity_inidcator);
    bool is_administrative_activity_inidcator_Set() const;
    bool is_administrative_activity_inidcator_Valid() const;

    QString getAdministrativeVoterDriveActivityIndicator() const;
    void setAdministrativeVoterDriveActivityIndicator(const QString &administrative_voter_drive_activity_indicator);
    bool is_administrative_voter_drive_activity_indicator_Set() const;
    bool is_administrative_voter_drive_activity_indicator_Valid() const;

    QString getAmendmentIndicator() const;
    void setAmendmentIndicator(const QString &amendment_indicator);
    bool is_amendment_indicator_Set() const;
    bool is_amendment_indicator_Valid() const;

    QString getAmendmentIndicatorDesc() const;
    void setAmendmentIndicatorDesc(const QString &amendment_indicator_desc);
    bool is_amendment_indicator_desc_Set() const;
    bool is_amendment_indicator_desc_Valid() const;

    QString getBackReferenceScheduleId() const;
    void setBackReferenceScheduleId(const QString &back_reference_schedule_id);
    bool is_back_reference_schedule_id_Set() const;
    bool is_back_reference_schedule_id_Valid() const;

    QString getBackReferenceTransactionId() const;
    void setBackReferenceTransactionId(const QString &back_reference_transaction_id);
    bool is_back_reference_transaction_id_Set() const;
    bool is_back_reference_transaction_id_Valid() const;

    QString getCandidateFirstName() const;
    void setCandidateFirstName(const QString &candidate_first_name);
    bool is_candidate_first_name_Set() const;
    bool is_candidate_first_name_Valid() const;

    QString getCandidateId() const;
    void setCandidateId(const QString &candidate_id);
    bool is_candidate_id_Set() const;
    bool is_candidate_id_Valid() const;

    QString getCandidateLastName() const;
    void setCandidateLastName(const QString &candidate_last_name);
    bool is_candidate_last_name_Set() const;
    bool is_candidate_last_name_Valid() const;

    QString getCandidateName() const;
    void setCandidateName(const QString &candidate_name);
    bool is_candidate_name_Set() const;
    bool is_candidate_name_Valid() const;

    QString getCandidateOffice() const;
    void setCandidateOffice(const QString &candidate_office);
    bool is_candidate_office_Set() const;
    bool is_candidate_office_Valid() const;

    QString getCandidateOfficeDescription() const;
    void setCandidateOfficeDescription(const QString &candidate_office_description);
    bool is_candidate_office_description_Set() const;
    bool is_candidate_office_description_Valid() const;

    QString getCandidateOfficeDistrict() const;
    void setCandidateOfficeDistrict(const QString &candidate_office_district);
    bool is_candidate_office_district_Set() const;
    bool is_candidate_office_district_Valid() const;

    QString getCandidateOfficeState() const;
    void setCandidateOfficeState(const QString &candidate_office_state);
    bool is_candidate_office_state_Set() const;
    bool is_candidate_office_state_Valid() const;

    QString getCandidateOfficeStateFull() const;
    void setCandidateOfficeStateFull(const QString &candidate_office_state_full);
    bool is_candidate_office_state_full_Set() const;
    bool is_candidate_office_state_full_Valid() const;

    QString getCategoryCode() const;
    void setCategoryCode(const QString &category_code);
    bool is_category_code_Set() const;
    bool is_category_code_Valid() const;

    QString getCategoryCodeFull() const;
    void setCategoryCodeFull(const QString &category_code_full);
    bool is_category_code_full_Set() const;
    bool is_category_code_full_Valid() const;

    OAICommitteeHistory getCommittee() const;
    void setCommittee(const OAICommitteeHistory &committee);
    bool is_committee_Set() const;
    bool is_committee_Valid() const;

    QString getCommitteeId() const;
    void setCommitteeId(const QString &committee_id);
    bool is_committee_id_Set() const;
    bool is_committee_id_Valid() const;

    QString getConduitCommitteeCity() const;
    void setConduitCommitteeCity(const QString &conduit_committee_city);
    bool is_conduit_committee_city_Set() const;
    bool is_conduit_committee_city_Valid() const;

    QString getConduitCommitteeId() const;
    void setConduitCommitteeId(const QString &conduit_committee_id);
    bool is_conduit_committee_id_Set() const;
    bool is_conduit_committee_id_Valid() const;

    QString getConduitCommitteeName() const;
    void setConduitCommitteeName(const QString &conduit_committee_name);
    bool is_conduit_committee_name_Set() const;
    bool is_conduit_committee_name_Valid() const;

    QString getConduitCommitteeState() const;
    void setConduitCommitteeState(const QString &conduit_committee_state);
    bool is_conduit_committee_state_Set() const;
    bool is_conduit_committee_state_Valid() const;

    QString getConduitCommitteeStreet1() const;
    void setConduitCommitteeStreet1(const QString &conduit_committee_street1);
    bool is_conduit_committee_street1_Set() const;
    bool is_conduit_committee_street1_Valid() const;

    QString getConduitCommitteeStreet2() const;
    void setConduitCommitteeStreet2(const QString &conduit_committee_street2);
    bool is_conduit_committee_street2_Set() const;
    bool is_conduit_committee_street2_Valid() const;

    qint32 getConduitCommitteeZip() const;
    void setConduitCommitteeZip(const qint32 &conduit_committee_zip);
    bool is_conduit_committee_zip_Set() const;
    bool is_conduit_committee_zip_Valid() const;

    double getCycle() const;
    void setCycle(const double &cycle);
    bool is_cycle_Set() const;
    bool is_cycle_Valid() const;

    QString getDirectCandidateSupportActivityIndicator() const;
    void setDirectCandidateSupportActivityIndicator(const QString &direct_candidate_support_activity_indicator);
    bool is_direct_candidate_support_activity_indicator_Set() const;
    bool is_direct_candidate_support_activity_indicator_Valid() const;

    double getDisbursementAmount() const;
    void setDisbursementAmount(const double &disbursement_amount);
    bool is_disbursement_amount_Set() const;
    bool is_disbursement_amount_Valid() const;

    QString getDisbursementType() const;
    void setDisbursementType(const QString &disbursement_type);
    bool is_disbursement_type_Set() const;
    bool is_disbursement_type_Valid() const;

    QString getDisbursementTypeFull() const;
    void setDisbursementTypeFull(const QString &disbursement_type_full);
    bool is_disbursement_type_full_Set() const;
    bool is_disbursement_type_full_Valid() const;

    QString getEntityType() const;
    void setEntityType(const QString &entity_type);
    bool is_entity_type_Set() const;
    bool is_entity_type_Valid() const;

    QString getEntityTypeDesc() const;
    void setEntityTypeDesc(const QString &entity_type_desc);
    bool is_entity_type_desc_Set() const;
    bool is_entity_type_desc_Valid() const;

    double getEventAmountYearToDate() const;
    void setEventAmountYearToDate(const double &event_amount_year_to_date);
    bool is_event_amount_year_to_date_Set() const;
    bool is_event_amount_year_to_date_Valid() const;

    QString getEventPurposeCategoryType() const;
    void setEventPurposeCategoryType(const QString &event_purpose_category_type);
    bool is_event_purpose_category_type_Set() const;
    bool is_event_purpose_category_type_Valid() const;

    QString getEventPurposeCategoryTypeFull() const;
    void setEventPurposeCategoryTypeFull(const QString &event_purpose_category_type_full);
    bool is_event_purpose_category_type_full_Set() const;
    bool is_event_purpose_category_type_full_Valid() const;

    QDate getEventPurposeDate() const;
    void setEventPurposeDate(const QDate &event_purpose_date);
    bool is_event_purpose_date_Set() const;
    bool is_event_purpose_date_Valid() const;

    QString getEventPurposeDescription() const;
    void setEventPurposeDescription(const QString &event_purpose_description);
    bool is_event_purpose_description_Set() const;
    bool is_event_purpose_description_Valid() const;

    QString getEventPurposeName() const;
    void setEventPurposeName(const QString &event_purpose_name);
    bool is_event_purpose_name_Set() const;
    bool is_event_purpose_name_Valid() const;

    QString getExemptActivityIndicator() const;
    void setExemptActivityIndicator(const QString &exempt_activity_indicator);
    bool is_exempt_activity_indicator_Set() const;
    bool is_exempt_activity_indicator_Valid() const;

    double getFederalShare() const;
    void setFederalShare(const double &federal_share);
    bool is_federal_share_Set() const;
    bool is_federal_share_Valid() const;

    qint32 getFileNumber() const;
    void setFileNumber(const qint32 &file_number);
    bool is_file_number_Set() const;
    bool is_file_number_Valid() const;

    QString getFilerCommitteeName() const;
    void setFilerCommitteeName(const QString &filer_committee_name);
    bool is_filer_committee_name_Set() const;
    bool is_filer_committee_name_Valid() const;

    QString getFilingForm() const;
    void setFilingForm(const QString &filing_form);
    bool is_filing_form_Set() const;
    bool is_filing_form_Valid() const;

    QString getFundraisingActivityIndicator() const;
    void setFundraisingActivityIndicator(const QString &fundraising_activity_indicator);
    bool is_fundraising_activity_indicator_Set() const;
    bool is_fundraising_activity_indicator_Valid() const;

    QString getGeneralVoterDriveActivityIndicator() const;
    void setGeneralVoterDriveActivityIndicator(const QString &general_voter_drive_activity_indicator);
    bool is_general_voter_drive_activity_indicator_Set() const;
    bool is_general_voter_drive_activity_indicator_Valid() const;

    QString getImageNumber() const;
    void setImageNumber(const QString &image_number);
    bool is_image_number_Set() const;
    bool is_image_number_Valid() const;

    QString getLineNumber() const;
    void setLineNumber(const QString &line_number);
    bool is_line_number_Set() const;
    bool is_line_number_Valid() const;

    qint32 getLinkId() const;
    void setLinkId(const qint32 &link_id);
    bool is_link_id_Set() const;
    bool is_link_id_Valid() const;

    QDateTime getLoadDate() const;
    void setLoadDate(const QDateTime &load_date);
    bool is_load_date_Set() const;
    bool is_load_date_Valid() const;

    QString getMemoCode() const;
    void setMemoCode(const QString &memo_code);
    bool is_memo_code_Set() const;
    bool is_memo_code_Valid() const;

    QString getMemoCodeDescription() const;
    void setMemoCodeDescription(const QString &memo_code_description);
    bool is_memo_code_description_Set() const;
    bool is_memo_code_description_Valid() const;

    QString getMemoText() const;
    void setMemoText(const QString &memo_text);
    bool is_memo_text_Set() const;
    bool is_memo_text_Valid() const;

    double getNonfederalShare() const;
    void setNonfederalShare(const double &nonfederal_share);
    bool is_nonfederal_share_Set() const;
    bool is_nonfederal_share_Valid() const;

    QString getOriginalSubId() const;
    void setOriginalSubId(const QString &original_sub_id);
    bool is_original_sub_id_Set() const;
    bool is_original_sub_id_Valid() const;

    QString getPayeeCity() const;
    void setPayeeCity(const QString &payee_city);
    bool is_payee_city_Set() const;
    bool is_payee_city_Valid() const;

    QString getPayeeFirstName() const;
    void setPayeeFirstName(const QString &payee_first_name);
    bool is_payee_first_name_Set() const;
    bool is_payee_first_name_Valid() const;

    QString getPayeeLastName() const;
    void setPayeeLastName(const QString &payee_last_name);
    bool is_payee_last_name_Set() const;
    bool is_payee_last_name_Valid() const;

    QString getPayeeMiddleName() const;
    void setPayeeMiddleName(const QString &payee_middle_name);
    bool is_payee_middle_name_Set() const;
    bool is_payee_middle_name_Valid() const;

    QString getPayeeName() const;
    void setPayeeName(const QString &payee_name);
    bool is_payee_name_Set() const;
    bool is_payee_name_Valid() const;

    QString getPayeePrefix() const;
    void setPayeePrefix(const QString &payee_prefix);
    bool is_payee_prefix_Set() const;
    bool is_payee_prefix_Valid() const;

    QString getPayeeState() const;
    void setPayeeState(const QString &payee_state);
    bool is_payee_state_Set() const;
    bool is_payee_state_Valid() const;

    QString getPayeeSuffix() const;
    void setPayeeSuffix(const QString &payee_suffix);
    bool is_payee_suffix_Set() const;
    bool is_payee_suffix_Valid() const;

    QString getPayeeZip() const;
    void setPayeeZip(const QString &payee_zip);
    bool is_payee_zip_Set() const;
    bool is_payee_zip_Valid() const;

    QString getPublishedCommitteeReferenceParityCheck() const;
    void setPublishedCommitteeReferenceParityCheck(const QString &published_committee_reference_parity_check);
    bool is_published_committee_reference_parity_check_Set() const;
    bool is_published_committee_reference_parity_check_Valid() const;

    QString getReportType() const;
    void setReportType(const QString &report_type);
    bool is_report_type_Set() const;
    bool is_report_type_Valid() const;

    double getReportYear() const;
    void setReportYear(const double &report_year);
    bool is_report_year_Set() const;
    bool is_report_year_Valid() const;

    QString getScheduleType() const;
    void setScheduleType(const QString &schedule_type);
    bool is_schedule_type_Set() const;
    bool is_schedule_type_Valid() const;

    QString getScheduleTypeFull() const;
    void setScheduleTypeFull(const QString &schedule_type_full);
    bool is_schedule_type_full_Set() const;
    bool is_schedule_type_full_Valid() const;

    QString getSubId() const;
    void setSubId(const QString &sub_id);
    bool is_sub_id_Set() const;
    bool is_sub_id_Valid() const;

    QString getTransactionId() const;
    void setTransactionId(const QString &transaction_id);
    bool is_transaction_id_Set() const;
    bool is_transaction_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_additional_description;
    bool m_additional_description_isSet;
    bool m_additional_description_isValid;

    QString m_administrative_activity_inidcator;
    bool m_administrative_activity_inidcator_isSet;
    bool m_administrative_activity_inidcator_isValid;

    QString m_administrative_voter_drive_activity_indicator;
    bool m_administrative_voter_drive_activity_indicator_isSet;
    bool m_administrative_voter_drive_activity_indicator_isValid;

    QString m_amendment_indicator;
    bool m_amendment_indicator_isSet;
    bool m_amendment_indicator_isValid;

    QString m_amendment_indicator_desc;
    bool m_amendment_indicator_desc_isSet;
    bool m_amendment_indicator_desc_isValid;

    QString m_back_reference_schedule_id;
    bool m_back_reference_schedule_id_isSet;
    bool m_back_reference_schedule_id_isValid;

    QString m_back_reference_transaction_id;
    bool m_back_reference_transaction_id_isSet;
    bool m_back_reference_transaction_id_isValid;

    QString m_candidate_first_name;
    bool m_candidate_first_name_isSet;
    bool m_candidate_first_name_isValid;

    QString m_candidate_id;
    bool m_candidate_id_isSet;
    bool m_candidate_id_isValid;

    QString m_candidate_last_name;
    bool m_candidate_last_name_isSet;
    bool m_candidate_last_name_isValid;

    QString m_candidate_name;
    bool m_candidate_name_isSet;
    bool m_candidate_name_isValid;

    QString m_candidate_office;
    bool m_candidate_office_isSet;
    bool m_candidate_office_isValid;

    QString m_candidate_office_description;
    bool m_candidate_office_description_isSet;
    bool m_candidate_office_description_isValid;

    QString m_candidate_office_district;
    bool m_candidate_office_district_isSet;
    bool m_candidate_office_district_isValid;

    QString m_candidate_office_state;
    bool m_candidate_office_state_isSet;
    bool m_candidate_office_state_isValid;

    QString m_candidate_office_state_full;
    bool m_candidate_office_state_full_isSet;
    bool m_candidate_office_state_full_isValid;

    QString m_category_code;
    bool m_category_code_isSet;
    bool m_category_code_isValid;

    QString m_category_code_full;
    bool m_category_code_full_isSet;
    bool m_category_code_full_isValid;

    OAICommitteeHistory m_committee;
    bool m_committee_isSet;
    bool m_committee_isValid;

    QString m_committee_id;
    bool m_committee_id_isSet;
    bool m_committee_id_isValid;

    QString m_conduit_committee_city;
    bool m_conduit_committee_city_isSet;
    bool m_conduit_committee_city_isValid;

    QString m_conduit_committee_id;
    bool m_conduit_committee_id_isSet;
    bool m_conduit_committee_id_isValid;

    QString m_conduit_committee_name;
    bool m_conduit_committee_name_isSet;
    bool m_conduit_committee_name_isValid;

    QString m_conduit_committee_state;
    bool m_conduit_committee_state_isSet;
    bool m_conduit_committee_state_isValid;

    QString m_conduit_committee_street1;
    bool m_conduit_committee_street1_isSet;
    bool m_conduit_committee_street1_isValid;

    QString m_conduit_committee_street2;
    bool m_conduit_committee_street2_isSet;
    bool m_conduit_committee_street2_isValid;

    qint32 m_conduit_committee_zip;
    bool m_conduit_committee_zip_isSet;
    bool m_conduit_committee_zip_isValid;

    double m_cycle;
    bool m_cycle_isSet;
    bool m_cycle_isValid;

    QString m_direct_candidate_support_activity_indicator;
    bool m_direct_candidate_support_activity_indicator_isSet;
    bool m_direct_candidate_support_activity_indicator_isValid;

    double m_disbursement_amount;
    bool m_disbursement_amount_isSet;
    bool m_disbursement_amount_isValid;

    QString m_disbursement_type;
    bool m_disbursement_type_isSet;
    bool m_disbursement_type_isValid;

    QString m_disbursement_type_full;
    bool m_disbursement_type_full_isSet;
    bool m_disbursement_type_full_isValid;

    QString m_entity_type;
    bool m_entity_type_isSet;
    bool m_entity_type_isValid;

    QString m_entity_type_desc;
    bool m_entity_type_desc_isSet;
    bool m_entity_type_desc_isValid;

    double m_event_amount_year_to_date;
    bool m_event_amount_year_to_date_isSet;
    bool m_event_amount_year_to_date_isValid;

    QString m_event_purpose_category_type;
    bool m_event_purpose_category_type_isSet;
    bool m_event_purpose_category_type_isValid;

    QString m_event_purpose_category_type_full;
    bool m_event_purpose_category_type_full_isSet;
    bool m_event_purpose_category_type_full_isValid;

    QDate m_event_purpose_date;
    bool m_event_purpose_date_isSet;
    bool m_event_purpose_date_isValid;

    QString m_event_purpose_description;
    bool m_event_purpose_description_isSet;
    bool m_event_purpose_description_isValid;

    QString m_event_purpose_name;
    bool m_event_purpose_name_isSet;
    bool m_event_purpose_name_isValid;

    QString m_exempt_activity_indicator;
    bool m_exempt_activity_indicator_isSet;
    bool m_exempt_activity_indicator_isValid;

    double m_federal_share;
    bool m_federal_share_isSet;
    bool m_federal_share_isValid;

    qint32 m_file_number;
    bool m_file_number_isSet;
    bool m_file_number_isValid;

    QString m_filer_committee_name;
    bool m_filer_committee_name_isSet;
    bool m_filer_committee_name_isValid;

    QString m_filing_form;
    bool m_filing_form_isSet;
    bool m_filing_form_isValid;

    QString m_fundraising_activity_indicator;
    bool m_fundraising_activity_indicator_isSet;
    bool m_fundraising_activity_indicator_isValid;

    QString m_general_voter_drive_activity_indicator;
    bool m_general_voter_drive_activity_indicator_isSet;
    bool m_general_voter_drive_activity_indicator_isValid;

    QString m_image_number;
    bool m_image_number_isSet;
    bool m_image_number_isValid;

    QString m_line_number;
    bool m_line_number_isSet;
    bool m_line_number_isValid;

    qint32 m_link_id;
    bool m_link_id_isSet;
    bool m_link_id_isValid;

    QDateTime m_load_date;
    bool m_load_date_isSet;
    bool m_load_date_isValid;

    QString m_memo_code;
    bool m_memo_code_isSet;
    bool m_memo_code_isValid;

    QString m_memo_code_description;
    bool m_memo_code_description_isSet;
    bool m_memo_code_description_isValid;

    QString m_memo_text;
    bool m_memo_text_isSet;
    bool m_memo_text_isValid;

    double m_nonfederal_share;
    bool m_nonfederal_share_isSet;
    bool m_nonfederal_share_isValid;

    QString m_original_sub_id;
    bool m_original_sub_id_isSet;
    bool m_original_sub_id_isValid;

    QString m_payee_city;
    bool m_payee_city_isSet;
    bool m_payee_city_isValid;

    QString m_payee_first_name;
    bool m_payee_first_name_isSet;
    bool m_payee_first_name_isValid;

    QString m_payee_last_name;
    bool m_payee_last_name_isSet;
    bool m_payee_last_name_isValid;

    QString m_payee_middle_name;
    bool m_payee_middle_name_isSet;
    bool m_payee_middle_name_isValid;

    QString m_payee_name;
    bool m_payee_name_isSet;
    bool m_payee_name_isValid;

    QString m_payee_prefix;
    bool m_payee_prefix_isSet;
    bool m_payee_prefix_isValid;

    QString m_payee_state;
    bool m_payee_state_isSet;
    bool m_payee_state_isValid;

    QString m_payee_suffix;
    bool m_payee_suffix_isSet;
    bool m_payee_suffix_isValid;

    QString m_payee_zip;
    bool m_payee_zip_isSet;
    bool m_payee_zip_isValid;

    QString m_published_committee_reference_parity_check;
    bool m_published_committee_reference_parity_check_isSet;
    bool m_published_committee_reference_parity_check_isValid;

    QString m_report_type;
    bool m_report_type_isSet;
    bool m_report_type_isValid;

    double m_report_year;
    bool m_report_year_isSet;
    bool m_report_year_isValid;

    QString m_schedule_type;
    bool m_schedule_type_isSet;
    bool m_schedule_type_isValid;

    QString m_schedule_type_full;
    bool m_schedule_type_full_isSet;
    bool m_schedule_type_full_isValid;

    QString m_sub_id;
    bool m_sub_id_isSet;
    bool m_sub_id_isValid;

    QString m_transaction_id;
    bool m_transaction_id_isSet;
    bool m_transaction_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIScheduleH4)

#endif // OAIScheduleH4_H
