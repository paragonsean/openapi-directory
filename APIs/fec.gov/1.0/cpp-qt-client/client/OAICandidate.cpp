/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICandidate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICandidate::OAICandidate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICandidate::OAICandidate() {
    this->initializeModel();
}

OAICandidate::~OAICandidate() {}

void OAICandidate::initializeModel() {

    m_active_through_isSet = false;
    m_active_through_isValid = false;

    m_candidate_id_isSet = false;
    m_candidate_id_isValid = false;

    m_candidate_inactive_isSet = false;
    m_candidate_inactive_isValid = false;

    m_candidate_status_isSet = false;
    m_candidate_status_isValid = false;

    m_cycles_isSet = false;
    m_cycles_isValid = false;

    m_district_isSet = false;
    m_district_isValid = false;

    m_district_number_isSet = false;
    m_district_number_isValid = false;

    m_election_districts_isSet = false;
    m_election_districts_isValid = false;

    m_election_years_isSet = false;
    m_election_years_isValid = false;

    m_federal_funds_flag_isSet = false;
    m_federal_funds_flag_isValid = false;

    m_first_file_date_isSet = false;
    m_first_file_date_isValid = false;

    m_has_raised_funds_isSet = false;
    m_has_raised_funds_isValid = false;

    m_inactive_election_years_isSet = false;
    m_inactive_election_years_isValid = false;

    m_incumbent_challenge_isSet = false;
    m_incumbent_challenge_isValid = false;

    m_incumbent_challenge_full_isSet = false;
    m_incumbent_challenge_full_isValid = false;

    m_last_f2_date_isSet = false;
    m_last_f2_date_isValid = false;

    m_last_file_date_isSet = false;
    m_last_file_date_isValid = false;

    m_load_date_isSet = false;
    m_load_date_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_office_isSet = false;
    m_office_isValid = false;

    m_office_full_isSet = false;
    m_office_full_isValid = false;

    m_party_isSet = false;
    m_party_isValid = false;

    m_party_full_isSet = false;
    m_party_full_isValid = false;

    m_principal_committees_isSet = false;
    m_principal_committees_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAICandidate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICandidate::fromJsonObject(QJsonObject json) {

    m_active_through_isValid = ::OpenAPI::fromJsonValue(m_active_through, json[QString("active_through")]);
    m_active_through_isSet = !json[QString("active_through")].isNull() && m_active_through_isValid;

    m_candidate_id_isValid = ::OpenAPI::fromJsonValue(m_candidate_id, json[QString("candidate_id")]);
    m_candidate_id_isSet = !json[QString("candidate_id")].isNull() && m_candidate_id_isValid;

    m_candidate_inactive_isValid = ::OpenAPI::fromJsonValue(m_candidate_inactive, json[QString("candidate_inactive")]);
    m_candidate_inactive_isSet = !json[QString("candidate_inactive")].isNull() && m_candidate_inactive_isValid;

    m_candidate_status_isValid = ::OpenAPI::fromJsonValue(m_candidate_status, json[QString("candidate_status")]);
    m_candidate_status_isSet = !json[QString("candidate_status")].isNull() && m_candidate_status_isValid;

    m_cycles_isValid = ::OpenAPI::fromJsonValue(m_cycles, json[QString("cycles")]);
    m_cycles_isSet = !json[QString("cycles")].isNull() && m_cycles_isValid;

    m_district_isValid = ::OpenAPI::fromJsonValue(m_district, json[QString("district")]);
    m_district_isSet = !json[QString("district")].isNull() && m_district_isValid;

    m_district_number_isValid = ::OpenAPI::fromJsonValue(m_district_number, json[QString("district_number")]);
    m_district_number_isSet = !json[QString("district_number")].isNull() && m_district_number_isValid;

    m_election_districts_isValid = ::OpenAPI::fromJsonValue(m_election_districts, json[QString("election_districts")]);
    m_election_districts_isSet = !json[QString("election_districts")].isNull() && m_election_districts_isValid;

    m_election_years_isValid = ::OpenAPI::fromJsonValue(m_election_years, json[QString("election_years")]);
    m_election_years_isSet = !json[QString("election_years")].isNull() && m_election_years_isValid;

    m_federal_funds_flag_isValid = ::OpenAPI::fromJsonValue(m_federal_funds_flag, json[QString("federal_funds_flag")]);
    m_federal_funds_flag_isSet = !json[QString("federal_funds_flag")].isNull() && m_federal_funds_flag_isValid;

    m_first_file_date_isValid = ::OpenAPI::fromJsonValue(m_first_file_date, json[QString("first_file_date")]);
    m_first_file_date_isSet = !json[QString("first_file_date")].isNull() && m_first_file_date_isValid;

    m_has_raised_funds_isValid = ::OpenAPI::fromJsonValue(m_has_raised_funds, json[QString("has_raised_funds")]);
    m_has_raised_funds_isSet = !json[QString("has_raised_funds")].isNull() && m_has_raised_funds_isValid;

    m_inactive_election_years_isValid = ::OpenAPI::fromJsonValue(m_inactive_election_years, json[QString("inactive_election_years")]);
    m_inactive_election_years_isSet = !json[QString("inactive_election_years")].isNull() && m_inactive_election_years_isValid;

    m_incumbent_challenge_isValid = ::OpenAPI::fromJsonValue(m_incumbent_challenge, json[QString("incumbent_challenge")]);
    m_incumbent_challenge_isSet = !json[QString("incumbent_challenge")].isNull() && m_incumbent_challenge_isValid;

    m_incumbent_challenge_full_isValid = ::OpenAPI::fromJsonValue(m_incumbent_challenge_full, json[QString("incumbent_challenge_full")]);
    m_incumbent_challenge_full_isSet = !json[QString("incumbent_challenge_full")].isNull() && m_incumbent_challenge_full_isValid;

    m_last_f2_date_isValid = ::OpenAPI::fromJsonValue(m_last_f2_date, json[QString("last_f2_date")]);
    m_last_f2_date_isSet = !json[QString("last_f2_date")].isNull() && m_last_f2_date_isValid;

    m_last_file_date_isValid = ::OpenAPI::fromJsonValue(m_last_file_date, json[QString("last_file_date")]);
    m_last_file_date_isSet = !json[QString("last_file_date")].isNull() && m_last_file_date_isValid;

    m_load_date_isValid = ::OpenAPI::fromJsonValue(m_load_date, json[QString("load_date")]);
    m_load_date_isSet = !json[QString("load_date")].isNull() && m_load_date_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_office_isValid = ::OpenAPI::fromJsonValue(m_office, json[QString("office")]);
    m_office_isSet = !json[QString("office")].isNull() && m_office_isValid;

    m_office_full_isValid = ::OpenAPI::fromJsonValue(m_office_full, json[QString("office_full")]);
    m_office_full_isSet = !json[QString("office_full")].isNull() && m_office_full_isValid;

    m_party_isValid = ::OpenAPI::fromJsonValue(m_party, json[QString("party")]);
    m_party_isSet = !json[QString("party")].isNull() && m_party_isValid;

    m_party_full_isValid = ::OpenAPI::fromJsonValue(m_party_full, json[QString("party_full")]);
    m_party_full_isSet = !json[QString("party_full")].isNull() && m_party_full_isValid;

    m_principal_committees_isValid = ::OpenAPI::fromJsonValue(m_principal_committees, json[QString("principal_committees")]);
    m_principal_committees_isSet = !json[QString("principal_committees")].isNull() && m_principal_committees_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAICandidate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICandidate::asJsonObject() const {
    QJsonObject obj;
    if (m_active_through_isSet) {
        obj.insert(QString("active_through"), ::OpenAPI::toJsonValue(m_active_through));
    }
    if (m_candidate_id_isSet) {
        obj.insert(QString("candidate_id"), ::OpenAPI::toJsonValue(m_candidate_id));
    }
    if (m_candidate_inactive_isSet) {
        obj.insert(QString("candidate_inactive"), ::OpenAPI::toJsonValue(m_candidate_inactive));
    }
    if (m_candidate_status_isSet) {
        obj.insert(QString("candidate_status"), ::OpenAPI::toJsonValue(m_candidate_status));
    }
    if (m_cycles.size() > 0) {
        obj.insert(QString("cycles"), ::OpenAPI::toJsonValue(m_cycles));
    }
    if (m_district_isSet) {
        obj.insert(QString("district"), ::OpenAPI::toJsonValue(m_district));
    }
    if (m_district_number_isSet) {
        obj.insert(QString("district_number"), ::OpenAPI::toJsonValue(m_district_number));
    }
    if (m_election_districts.size() > 0) {
        obj.insert(QString("election_districts"), ::OpenAPI::toJsonValue(m_election_districts));
    }
    if (m_election_years.size() > 0) {
        obj.insert(QString("election_years"), ::OpenAPI::toJsonValue(m_election_years));
    }
    if (m_federal_funds_flag_isSet) {
        obj.insert(QString("federal_funds_flag"), ::OpenAPI::toJsonValue(m_federal_funds_flag));
    }
    if (m_first_file_date_isSet) {
        obj.insert(QString("first_file_date"), ::OpenAPI::toJsonValue(m_first_file_date));
    }
    if (m_has_raised_funds_isSet) {
        obj.insert(QString("has_raised_funds"), ::OpenAPI::toJsonValue(m_has_raised_funds));
    }
    if (m_inactive_election_years.size() > 0) {
        obj.insert(QString("inactive_election_years"), ::OpenAPI::toJsonValue(m_inactive_election_years));
    }
    if (m_incumbent_challenge_isSet) {
        obj.insert(QString("incumbent_challenge"), ::OpenAPI::toJsonValue(m_incumbent_challenge));
    }
    if (m_incumbent_challenge_full_isSet) {
        obj.insert(QString("incumbent_challenge_full"), ::OpenAPI::toJsonValue(m_incumbent_challenge_full));
    }
    if (m_last_f2_date_isSet) {
        obj.insert(QString("last_f2_date"), ::OpenAPI::toJsonValue(m_last_f2_date));
    }
    if (m_last_file_date_isSet) {
        obj.insert(QString("last_file_date"), ::OpenAPI::toJsonValue(m_last_file_date));
    }
    if (m_load_date_isSet) {
        obj.insert(QString("load_date"), ::OpenAPI::toJsonValue(m_load_date));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_office_isSet) {
        obj.insert(QString("office"), ::OpenAPI::toJsonValue(m_office));
    }
    if (m_office_full_isSet) {
        obj.insert(QString("office_full"), ::OpenAPI::toJsonValue(m_office_full));
    }
    if (m_party_isSet) {
        obj.insert(QString("party"), ::OpenAPI::toJsonValue(m_party));
    }
    if (m_party_full_isSet) {
        obj.insert(QString("party_full"), ::OpenAPI::toJsonValue(m_party_full));
    }
    if (m_principal_committees.size() > 0) {
        obj.insert(QString("principal_committees"), ::OpenAPI::toJsonValue(m_principal_committees));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

qint32 OAICandidate::getActiveThrough() const {
    return m_active_through;
}
void OAICandidate::setActiveThrough(const qint32 &active_through) {
    m_active_through = active_through;
    m_active_through_isSet = true;
}

bool OAICandidate::is_active_through_Set() const{
    return m_active_through_isSet;
}

bool OAICandidate::is_active_through_Valid() const{
    return m_active_through_isValid;
}

QString OAICandidate::getCandidateId() const {
    return m_candidate_id;
}
void OAICandidate::setCandidateId(const QString &candidate_id) {
    m_candidate_id = candidate_id;
    m_candidate_id_isSet = true;
}

bool OAICandidate::is_candidate_id_Set() const{
    return m_candidate_id_isSet;
}

bool OAICandidate::is_candidate_id_Valid() const{
    return m_candidate_id_isValid;
}

bool OAICandidate::isCandidateInactive() const {
    return m_candidate_inactive;
}
void OAICandidate::setCandidateInactive(const bool &candidate_inactive) {
    m_candidate_inactive = candidate_inactive;
    m_candidate_inactive_isSet = true;
}

bool OAICandidate::is_candidate_inactive_Set() const{
    return m_candidate_inactive_isSet;
}

bool OAICandidate::is_candidate_inactive_Valid() const{
    return m_candidate_inactive_isValid;
}

QString OAICandidate::getCandidateStatus() const {
    return m_candidate_status;
}
void OAICandidate::setCandidateStatus(const QString &candidate_status) {
    m_candidate_status = candidate_status;
    m_candidate_status_isSet = true;
}

bool OAICandidate::is_candidate_status_Set() const{
    return m_candidate_status_isSet;
}

bool OAICandidate::is_candidate_status_Valid() const{
    return m_candidate_status_isValid;
}

QList<qint32> OAICandidate::getCycles() const {
    return m_cycles;
}
void OAICandidate::setCycles(const QList<qint32> &cycles) {
    m_cycles = cycles;
    m_cycles_isSet = true;
}

bool OAICandidate::is_cycles_Set() const{
    return m_cycles_isSet;
}

bool OAICandidate::is_cycles_Valid() const{
    return m_cycles_isValid;
}

QString OAICandidate::getDistrict() const {
    return m_district;
}
void OAICandidate::setDistrict(const QString &district) {
    m_district = district;
    m_district_isSet = true;
}

bool OAICandidate::is_district_Set() const{
    return m_district_isSet;
}

bool OAICandidate::is_district_Valid() const{
    return m_district_isValid;
}

qint32 OAICandidate::getDistrictNumber() const {
    return m_district_number;
}
void OAICandidate::setDistrictNumber(const qint32 &district_number) {
    m_district_number = district_number;
    m_district_number_isSet = true;
}

bool OAICandidate::is_district_number_Set() const{
    return m_district_number_isSet;
}

bool OAICandidate::is_district_number_Valid() const{
    return m_district_number_isValid;
}

QList<QString> OAICandidate::getElectionDistricts() const {
    return m_election_districts;
}
void OAICandidate::setElectionDistricts(const QList<QString> &election_districts) {
    m_election_districts = election_districts;
    m_election_districts_isSet = true;
}

bool OAICandidate::is_election_districts_Set() const{
    return m_election_districts_isSet;
}

bool OAICandidate::is_election_districts_Valid() const{
    return m_election_districts_isValid;
}

QList<qint32> OAICandidate::getElectionYears() const {
    return m_election_years;
}
void OAICandidate::setElectionYears(const QList<qint32> &election_years) {
    m_election_years = election_years;
    m_election_years_isSet = true;
}

bool OAICandidate::is_election_years_Set() const{
    return m_election_years_isSet;
}

bool OAICandidate::is_election_years_Valid() const{
    return m_election_years_isValid;
}

bool OAICandidate::isFederalFundsFlag() const {
    return m_federal_funds_flag;
}
void OAICandidate::setFederalFundsFlag(const bool &federal_funds_flag) {
    m_federal_funds_flag = federal_funds_flag;
    m_federal_funds_flag_isSet = true;
}

bool OAICandidate::is_federal_funds_flag_Set() const{
    return m_federal_funds_flag_isSet;
}

bool OAICandidate::is_federal_funds_flag_Valid() const{
    return m_federal_funds_flag_isValid;
}

QDate OAICandidate::getFirstFileDate() const {
    return m_first_file_date;
}
void OAICandidate::setFirstFileDate(const QDate &first_file_date) {
    m_first_file_date = first_file_date;
    m_first_file_date_isSet = true;
}

bool OAICandidate::is_first_file_date_Set() const{
    return m_first_file_date_isSet;
}

bool OAICandidate::is_first_file_date_Valid() const{
    return m_first_file_date_isValid;
}

bool OAICandidate::isHasRaisedFunds() const {
    return m_has_raised_funds;
}
void OAICandidate::setHasRaisedFunds(const bool &has_raised_funds) {
    m_has_raised_funds = has_raised_funds;
    m_has_raised_funds_isSet = true;
}

bool OAICandidate::is_has_raised_funds_Set() const{
    return m_has_raised_funds_isSet;
}

bool OAICandidate::is_has_raised_funds_Valid() const{
    return m_has_raised_funds_isValid;
}

QList<qint32> OAICandidate::getInactiveElectionYears() const {
    return m_inactive_election_years;
}
void OAICandidate::setInactiveElectionYears(const QList<qint32> &inactive_election_years) {
    m_inactive_election_years = inactive_election_years;
    m_inactive_election_years_isSet = true;
}

bool OAICandidate::is_inactive_election_years_Set() const{
    return m_inactive_election_years_isSet;
}

bool OAICandidate::is_inactive_election_years_Valid() const{
    return m_inactive_election_years_isValid;
}

QString OAICandidate::getIncumbentChallenge() const {
    return m_incumbent_challenge;
}
void OAICandidate::setIncumbentChallenge(const QString &incumbent_challenge) {
    m_incumbent_challenge = incumbent_challenge;
    m_incumbent_challenge_isSet = true;
}

bool OAICandidate::is_incumbent_challenge_Set() const{
    return m_incumbent_challenge_isSet;
}

bool OAICandidate::is_incumbent_challenge_Valid() const{
    return m_incumbent_challenge_isValid;
}

QString OAICandidate::getIncumbentChallengeFull() const {
    return m_incumbent_challenge_full;
}
void OAICandidate::setIncumbentChallengeFull(const QString &incumbent_challenge_full) {
    m_incumbent_challenge_full = incumbent_challenge_full;
    m_incumbent_challenge_full_isSet = true;
}

bool OAICandidate::is_incumbent_challenge_full_Set() const{
    return m_incumbent_challenge_full_isSet;
}

bool OAICandidate::is_incumbent_challenge_full_Valid() const{
    return m_incumbent_challenge_full_isValid;
}

QDate OAICandidate::getLastF2Date() const {
    return m_last_f2_date;
}
void OAICandidate::setLastF2Date(const QDate &last_f2_date) {
    m_last_f2_date = last_f2_date;
    m_last_f2_date_isSet = true;
}

bool OAICandidate::is_last_f2_date_Set() const{
    return m_last_f2_date_isSet;
}

bool OAICandidate::is_last_f2_date_Valid() const{
    return m_last_f2_date_isValid;
}

QDate OAICandidate::getLastFileDate() const {
    return m_last_file_date;
}
void OAICandidate::setLastFileDate(const QDate &last_file_date) {
    m_last_file_date = last_file_date;
    m_last_file_date_isSet = true;
}

bool OAICandidate::is_last_file_date_Set() const{
    return m_last_file_date_isSet;
}

bool OAICandidate::is_last_file_date_Valid() const{
    return m_last_file_date_isValid;
}

QDateTime OAICandidate::getLoadDate() const {
    return m_load_date;
}
void OAICandidate::setLoadDate(const QDateTime &load_date) {
    m_load_date = load_date;
    m_load_date_isSet = true;
}

bool OAICandidate::is_load_date_Set() const{
    return m_load_date_isSet;
}

bool OAICandidate::is_load_date_Valid() const{
    return m_load_date_isValid;
}

QString OAICandidate::getName() const {
    return m_name;
}
void OAICandidate::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICandidate::is_name_Set() const{
    return m_name_isSet;
}

bool OAICandidate::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICandidate::getOffice() const {
    return m_office;
}
void OAICandidate::setOffice(const QString &office) {
    m_office = office;
    m_office_isSet = true;
}

bool OAICandidate::is_office_Set() const{
    return m_office_isSet;
}

bool OAICandidate::is_office_Valid() const{
    return m_office_isValid;
}

QString OAICandidate::getOfficeFull() const {
    return m_office_full;
}
void OAICandidate::setOfficeFull(const QString &office_full) {
    m_office_full = office_full;
    m_office_full_isSet = true;
}

bool OAICandidate::is_office_full_Set() const{
    return m_office_full_isSet;
}

bool OAICandidate::is_office_full_Valid() const{
    return m_office_full_isValid;
}

QString OAICandidate::getParty() const {
    return m_party;
}
void OAICandidate::setParty(const QString &party) {
    m_party = party;
    m_party_isSet = true;
}

bool OAICandidate::is_party_Set() const{
    return m_party_isSet;
}

bool OAICandidate::is_party_Valid() const{
    return m_party_isValid;
}

QString OAICandidate::getPartyFull() const {
    return m_party_full;
}
void OAICandidate::setPartyFull(const QString &party_full) {
    m_party_full = party_full;
    m_party_full_isSet = true;
}

bool OAICandidate::is_party_full_Set() const{
    return m_party_full_isSet;
}

bool OAICandidate::is_party_full_Valid() const{
    return m_party_full_isValid;
}

QList<OAICandidate_principal_committees_inner> OAICandidate::getPrincipalCommittees() const {
    return m_principal_committees;
}
void OAICandidate::setPrincipalCommittees(const QList<OAICandidate_principal_committees_inner> &principal_committees) {
    m_principal_committees = principal_committees;
    m_principal_committees_isSet = true;
}

bool OAICandidate::is_principal_committees_Set() const{
    return m_principal_committees_isSet;
}

bool OAICandidate::is_principal_committees_Valid() const{
    return m_principal_committees_isValid;
}

QString OAICandidate::getState() const {
    return m_state;
}
void OAICandidate::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICandidate::is_state_Set() const{
    return m_state_isSet;
}

bool OAICandidate::is_state_Valid() const{
    return m_state_isValid;
}

bool OAICandidate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_through_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_inactive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cycles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_district_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_district_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_districts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_years.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_federal_funds_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_file_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_raised_funds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inactive_election_years.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_incumbent_challenge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_incumbent_challenge_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_f2_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_file_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_office_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_office_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_committees.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICandidate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
