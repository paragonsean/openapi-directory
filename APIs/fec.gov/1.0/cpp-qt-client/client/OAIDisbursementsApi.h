/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDisbursementsApi_H
#define OAI_OAIDisbursementsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIScheduleBByPurposePage.h"
#include "OAIScheduleBByRecipientIDPage.h"
#include "OAIScheduleBByRecipientPage.h"
#include "OAIScheduleBEfilePage.h"
#include "OAIScheduleBPage.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDisbursementsApi : public QObject {
    Q_OBJECT

public:
    OAIDisbursementsApi(const int timeOut = 0);
    ~OAIDisbursementsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  purpose QList<QString> [optional]
    * @param[in]  cycle QList<qint32> [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  committee_id QList<QString> [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void schedulesScheduleBByPurposeGet(const QString &api_key, const ::OpenAPI::OptionalParam<QList<QString>> &purpose = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &cycle = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &committee_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  recipient_name QList<QString> [optional]
    * @param[in]  cycle QList<qint32> [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  committee_id QList<QString> [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void schedulesScheduleBByRecipientGet(const QString &api_key, const ::OpenAPI::OptionalParam<QList<QString>> &recipient_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &cycle = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &committee_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  cycle QList<qint32> [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  committee_id QList<QString> [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  recipient_id QList<QString> [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void schedulesScheduleBByRecipientIdGet(const QString &api_key, const ::OpenAPI::OptionalParam<QList<qint32>> &cycle = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &committee_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &recipient_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  min_date QDate [optional]
    * @param[in]  disbursement_description QList<QString> [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  committee_id QList<QString> [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  image_number QList<QString> [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  max_date QDate [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  min_amount QString [optional]
    * @param[in]  max_amount QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  recipient_city QList<QString> [optional]
    * @param[in]  recipient_state QList<QString> [optional]
    */
    virtual void schedulesScheduleBEfileGet(const QString &api_key, const ::OpenAPI::OptionalParam<QDate> &min_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<QString>> &disbursement_description = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &committee_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &image_number = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDate> &max_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &min_amount = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_amount = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &recipient_city = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &recipient_state = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  min_date QDate [optional]
    * @param[in]  spender_committee_designation QList<QString> [optional]
    * @param[in]  recipient_committee_id QList<QString> [optional]
    * @param[in]  last_disbursement_date QDate [optional]
    * @param[in]  max_image_number QString [optional]
    * @param[in]  disbursement_description QList<QString> [optional]
    * @param[in]  disbursement_purpose_category QList<QString> [optional]
    * @param[in]  min_image_number QString [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  last_index qint32 [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  min_amount QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  line_number QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  recipient_city QList<QString> [optional]
    * @param[in]  spender_committee_type QList<QString> [optional]
    * @param[in]  last_disbursement_amount float [optional]
    * @param[in]  spender_committee_org_type QList<QString> [optional]
    * @param[in]  two_year_transaction_period QList<qint32> [optional]
    * @param[in]  committee_id QList<QString> [optional]
    * @param[in]  image_number QList<QString> [optional]
    * @param[in]  max_date QDate [optional]
    * @param[in]  recipient_name QList<QString> [optional]
    * @param[in]  max_amount QString [optional]
    * @param[in]  recipient_state QList<QString> [optional]
    */
    virtual void schedulesScheduleBGet(const QString &api_key, const ::OpenAPI::OptionalParam<QDate> &min_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<QString>> &spender_committee_designation = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &recipient_committee_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &last_disbursement_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &max_image_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &disbursement_description = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &disbursement_purpose_category = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &min_image_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &last_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &min_amount = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &line_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &recipient_city = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &spender_committee_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<float> &last_disbursement_amount = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QList<QString>> &spender_committee_org_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &two_year_transaction_period = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<QString>> &committee_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &image_number = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &max_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<QString>> &recipient_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &max_amount = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &recipient_state = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  sub_id QString [required]
    * @param[in]  min_date QDate [optional]
    * @param[in]  spender_committee_designation QList<QString> [optional]
    * @param[in]  recipient_committee_id QList<QString> [optional]
    * @param[in]  last_disbursement_date QDate [optional]
    * @param[in]  max_image_number QString [optional]
    * @param[in]  disbursement_description QList<QString> [optional]
    * @param[in]  disbursement_purpose_category QList<QString> [optional]
    * @param[in]  min_image_number QString [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  last_index qint32 [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  min_amount QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  line_number QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  recipient_city QList<QString> [optional]
    * @param[in]  spender_committee_type QList<QString> [optional]
    * @param[in]  last_disbursement_amount float [optional]
    * @param[in]  spender_committee_org_type QList<QString> [optional]
    * @param[in]  two_year_transaction_period QList<qint32> [optional]
    * @param[in]  committee_id QList<QString> [optional]
    * @param[in]  image_number QList<QString> [optional]
    * @param[in]  max_date QDate [optional]
    * @param[in]  recipient_name QList<QString> [optional]
    * @param[in]  max_amount QString [optional]
    * @param[in]  recipient_state QList<QString> [optional]
    */
    virtual void schedulesScheduleBSubIdGet(const QString &api_key, const QString &sub_id, const ::OpenAPI::OptionalParam<QDate> &min_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<QString>> &spender_committee_designation = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &recipient_committee_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &last_disbursement_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &max_image_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &disbursement_description = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &disbursement_purpose_category = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &min_image_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &last_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &min_amount = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &line_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &recipient_city = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &spender_committee_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<float> &last_disbursement_amount = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QList<QString>> &spender_committee_org_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &two_year_transaction_period = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<QString>> &committee_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &image_number = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &max_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<QString>> &recipient_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &max_amount = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &recipient_state = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void schedulesScheduleBByPurposeGetCallback(OAIHttpRequestWorker *worker);
    void schedulesScheduleBByRecipientGetCallback(OAIHttpRequestWorker *worker);
    void schedulesScheduleBByRecipientIdGetCallback(OAIHttpRequestWorker *worker);
    void schedulesScheduleBEfileGetCallback(OAIHttpRequestWorker *worker);
    void schedulesScheduleBGetCallback(OAIHttpRequestWorker *worker);
    void schedulesScheduleBSubIdGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void schedulesScheduleBByPurposeGetSignal(OAIScheduleBByPurposePage summary);
    void schedulesScheduleBByRecipientGetSignal(OAIScheduleBByRecipientPage summary);
    void schedulesScheduleBByRecipientIdGetSignal(OAIScheduleBByRecipientIDPage summary);
    void schedulesScheduleBEfileGetSignal(OAIScheduleBEfilePage summary);
    void schedulesScheduleBGetSignal(OAIScheduleBPage summary);
    void schedulesScheduleBSubIdGetSignal(OAIScheduleBPage summary);


    void schedulesScheduleBByPurposeGetSignalFull(OAIHttpRequestWorker *worker, OAIScheduleBByPurposePage summary);
    void schedulesScheduleBByRecipientGetSignalFull(OAIHttpRequestWorker *worker, OAIScheduleBByRecipientPage summary);
    void schedulesScheduleBByRecipientIdGetSignalFull(OAIHttpRequestWorker *worker, OAIScheduleBByRecipientIDPage summary);
    void schedulesScheduleBEfileGetSignalFull(OAIHttpRequestWorker *worker, OAIScheduleBEfilePage summary);
    void schedulesScheduleBGetSignalFull(OAIHttpRequestWorker *worker, OAIScheduleBPage summary);
    void schedulesScheduleBSubIdGetSignalFull(OAIHttpRequestWorker *worker, OAIScheduleBPage summary);

    Q_DECL_DEPRECATED_X("Use schedulesScheduleBByPurposeGetSignalError() instead")
    void schedulesScheduleBByPurposeGetSignalE(OAIScheduleBByPurposePage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleBByPurposeGetSignalError(OAIScheduleBByPurposePage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleBByRecipientGetSignalError() instead")
    void schedulesScheduleBByRecipientGetSignalE(OAIScheduleBByRecipientPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleBByRecipientGetSignalError(OAIScheduleBByRecipientPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleBByRecipientIdGetSignalError() instead")
    void schedulesScheduleBByRecipientIdGetSignalE(OAIScheduleBByRecipientIDPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleBByRecipientIdGetSignalError(OAIScheduleBByRecipientIDPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleBEfileGetSignalError() instead")
    void schedulesScheduleBEfileGetSignalE(OAIScheduleBEfilePage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleBEfileGetSignalError(OAIScheduleBEfilePage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleBGetSignalError() instead")
    void schedulesScheduleBGetSignalE(OAIScheduleBPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleBGetSignalError(OAIScheduleBPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleBSubIdGetSignalError() instead")
    void schedulesScheduleBSubIdGetSignalE(OAIScheduleBPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleBSubIdGetSignalError(OAIScheduleBPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use schedulesScheduleBByPurposeGetSignalErrorFull() instead")
    void schedulesScheduleBByPurposeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleBByPurposeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleBByRecipientGetSignalErrorFull() instead")
    void schedulesScheduleBByRecipientGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleBByRecipientGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleBByRecipientIdGetSignalErrorFull() instead")
    void schedulesScheduleBByRecipientIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleBByRecipientIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleBEfileGetSignalErrorFull() instead")
    void schedulesScheduleBEfileGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleBEfileGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleBGetSignalErrorFull() instead")
    void schedulesScheduleBGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleBGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulesScheduleBSubIdGetSignalErrorFull() instead")
    void schedulesScheduleBSubIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulesScheduleBSubIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
