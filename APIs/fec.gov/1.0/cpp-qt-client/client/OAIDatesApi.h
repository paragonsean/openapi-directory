/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDatesApi_H
#define OAI_OAIDatesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICalendarDatePage.h"
#include "OAI_election_dates__get_default_response.h"
#include "OAI_reporting_dates__get_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDatesApi : public QObject {
    Q_OBJECT

public:
    OAIDatesApi(const int timeOut = 0);
    ~OAIDatesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  calendar_category_id QList<qint32> [optional]
    * @param[in]  description QList<QString> [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  max_end_date QDate [optional]
    * @param[in]  summary QList<QString> [optional]
    * @param[in]  min_end_date QDate [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  min_start_date QDate [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  max_start_date QDate [optional]
    * @param[in]  renderer QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  event_id qint32 [optional]
    */
    virtual void calendarDatesExportGet(const QString &api_key, const ::OpenAPI::OptionalParam<QList<qint32>> &calendar_category_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<QString>> &description = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDate> &max_end_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<QString>> &summary = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &min_end_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDate> &min_start_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDate> &max_start_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &renderer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &event_id = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  calendar_category_id QList<qint32> [optional]
    * @param[in]  description QList<QString> [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  max_end_date QDate [optional]
    * @param[in]  summary QList<QString> [optional]
    * @param[in]  min_end_date QDate [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  min_start_date QDate [optional]
    * @param[in]  max_start_date QDate [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  event_id qint32 [optional]
    */
    virtual void calendarDatesGet(const QString &api_key, const ::OpenAPI::OptionalParam<QList<qint32>> &calendar_category_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<QString>> &description = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDate> &max_end_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<QString>> &summary = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &min_end_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDate> &min_start_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &max_start_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &event_id = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  election_state QList<QString> [optional]
    * @param[in]  max_election_date QDate [optional]
    * @param[in]  election_district QList<QString> [optional]
    * @param[in]  min_update_date QDate [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  max_create_date QDate [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  election_year QList<QString> [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  min_create_date QDate [optional]
    * @param[in]  election_party QList<QString> [optional]
    * @param[in]  office_sought QList<QString> [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  max_update_date QDate [optional]
    * @param[in]  election_type_id QList<QString> [optional]
    * @param[in]  max_primary_general_date QDate [optional]
    * @param[in]  min_election_date QDate [optional]
    * @param[in]  min_primary_general_date QDate [optional]
    */
    virtual void electionDatesGet(const QString &api_key, const ::OpenAPI::OptionalParam<QList<QString>> &election_state = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &max_election_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<QString>> &election_district = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &min_update_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDate> &max_create_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &election_year = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &min_create_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<QString>> &election_party = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &office_sought = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDate> &max_update_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<QString>> &election_type_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &max_primary_general_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &min_election_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &min_primary_general_date = ::OpenAPI::OptionalParam<QDate>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  min_update_date QDate [optional]
    * @param[in]  report_type QList<QString> [optional]
    * @param[in]  min_due_date QDate [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  max_due_date QDate [optional]
    * @param[in]  report_year QList<qint32> [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  max_create_date QDate [optional]
    * @param[in]  max_update_date QDate [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  min_create_date QDate [optional]
    */
    virtual void reportingDatesGet(const QString &api_key, const ::OpenAPI::OptionalParam<QDate> &min_update_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<QString>> &report_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &min_due_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDate> &max_due_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<qint32>> &report_year = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDate> &max_create_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &max_update_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &min_create_date = ::OpenAPI::OptionalParam<QDate>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void calendarDatesExportGetCallback(OAIHttpRequestWorker *worker);
    void calendarDatesGetCallback(OAIHttpRequestWorker *worker);
    void electionDatesGetCallback(OAIHttpRequestWorker *worker);
    void reportingDatesGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void calendarDatesExportGetSignal(OAICalendarDatePage summary);
    void calendarDatesGetSignal(OAICalendarDatePage summary);
    void electionDatesGetSignal(OAI_election_dates__get_default_response summary);
    void reportingDatesGetSignal(OAI_reporting_dates__get_default_response summary);


    void calendarDatesExportGetSignalFull(OAIHttpRequestWorker *worker, OAICalendarDatePage summary);
    void calendarDatesGetSignalFull(OAIHttpRequestWorker *worker, OAICalendarDatePage summary);
    void electionDatesGetSignalFull(OAIHttpRequestWorker *worker, OAI_election_dates__get_default_response summary);
    void reportingDatesGetSignalFull(OAIHttpRequestWorker *worker, OAI_reporting_dates__get_default_response summary);

    Q_DECL_DEPRECATED_X("Use calendarDatesExportGetSignalError() instead")
    void calendarDatesExportGetSignalE(OAICalendarDatePage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calendarDatesExportGetSignalError(OAICalendarDatePage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendarDatesGetSignalError() instead")
    void calendarDatesGetSignalE(OAICalendarDatePage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calendarDatesGetSignalError(OAICalendarDatePage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use electionDatesGetSignalError() instead")
    void electionDatesGetSignalE(OAI_election_dates__get_default_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void electionDatesGetSignalError(OAI_election_dates__get_default_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportingDatesGetSignalError() instead")
    void reportingDatesGetSignalE(OAI_reporting_dates__get_default_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportingDatesGetSignalError(OAI_reporting_dates__get_default_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use calendarDatesExportGetSignalErrorFull() instead")
    void calendarDatesExportGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calendarDatesExportGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendarDatesGetSignalErrorFull() instead")
    void calendarDatesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calendarDatesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use electionDatesGetSignalErrorFull() instead")
    void electionDatesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void electionDatesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportingDatesGetSignalErrorFull() instead")
    void reportingDatesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportingDatesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
