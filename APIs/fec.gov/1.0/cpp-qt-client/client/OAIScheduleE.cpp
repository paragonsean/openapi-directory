/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduleE.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduleE::OAIScheduleE(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduleE::OAIScheduleE() {
    this->initializeModel();
}

OAIScheduleE::~OAIScheduleE() {}

void OAIScheduleE::initializeModel() {

    m_action_code_isSet = false;
    m_action_code_isValid = false;

    m_action_code_full_isSet = false;
    m_action_code_full_isValid = false;

    m_amendment_indicator_isSet = false;
    m_amendment_indicator_isValid = false;

    m_amendment_number_isSet = false;
    m_amendment_number_isValid = false;

    m_back_reference_schedule_name_isSet = false;
    m_back_reference_schedule_name_isValid = false;

    m_back_reference_transaction_id_isSet = false;
    m_back_reference_transaction_id_isValid = false;

    m_candidate_isSet = false;
    m_candidate_isValid = false;

    m_candidate_first_name_isSet = false;
    m_candidate_first_name_isValid = false;

    m_candidate_id_isSet = false;
    m_candidate_id_isValid = false;

    m_candidate_last_name_isSet = false;
    m_candidate_last_name_isValid = false;

    m_candidate_middle_name_isSet = false;
    m_candidate_middle_name_isValid = false;

    m_candidate_name_isSet = false;
    m_candidate_name_isValid = false;

    m_candidate_office_isSet = false;
    m_candidate_office_isValid = false;

    m_candidate_office_district_isSet = false;
    m_candidate_office_district_isValid = false;

    m_candidate_office_state_isSet = false;
    m_candidate_office_state_isValid = false;

    m_candidate_party_isSet = false;
    m_candidate_party_isValid = false;

    m_candidate_prefix_isSet = false;
    m_candidate_prefix_isValid = false;

    m_candidate_suffix_isSet = false;
    m_candidate_suffix_isValid = false;

    m_category_code_isSet = false;
    m_category_code_isValid = false;

    m_category_code_full_isSet = false;
    m_category_code_full_isValid = false;

    m_committee_isSet = false;
    m_committee_isValid = false;

    m_committee_id_isSet = false;
    m_committee_id_isValid = false;

    m_conduit_committee_city_isSet = false;
    m_conduit_committee_city_isValid = false;

    m_conduit_committee_id_isSet = false;
    m_conduit_committee_id_isValid = false;

    m_conduit_committee_name_isSet = false;
    m_conduit_committee_name_isValid = false;

    m_conduit_committee_state_isSet = false;
    m_conduit_committee_state_isValid = false;

    m_conduit_committee_street1_isSet = false;
    m_conduit_committee_street1_isValid = false;

    m_conduit_committee_street2_isSet = false;
    m_conduit_committee_street2_isValid = false;

    m_conduit_committee_zip_isSet = false;
    m_conduit_committee_zip_isValid = false;

    m_dissemination_date_isSet = false;
    m_dissemination_date_isValid = false;

    m_election_type_isSet = false;
    m_election_type_isValid = false;

    m_election_type_full_isSet = false;
    m_election_type_full_isValid = false;

    m_expenditure_amount_isSet = false;
    m_expenditure_amount_isValid = false;

    m_expenditure_date_isSet = false;
    m_expenditure_date_isValid = false;

    m_expenditure_description_isSet = false;
    m_expenditure_description_isValid = false;

    m_file_number_isSet = false;
    m_file_number_isValid = false;

    m_filer_first_name_isSet = false;
    m_filer_first_name_isValid = false;

    m_filer_last_name_isSet = false;
    m_filer_last_name_isValid = false;

    m_filer_middle_name_isSet = false;
    m_filer_middle_name_isValid = false;

    m_filer_prefix_isSet = false;
    m_filer_prefix_isValid = false;

    m_filer_suffix_isSet = false;
    m_filer_suffix_isValid = false;

    m_filing_date_isSet = false;
    m_filing_date_isValid = false;

    m_filing_form_isSet = false;
    m_filing_form_isValid = false;

    m_image_number_isSet = false;
    m_image_number_isValid = false;

    m_independent_sign_date_isSet = false;
    m_independent_sign_date_isValid = false;

    m_independent_sign_name_isSet = false;
    m_independent_sign_name_isValid = false;

    m_is_notice_isSet = false;
    m_is_notice_isValid = false;

    m_line_number_isSet = false;
    m_line_number_isValid = false;

    m_link_id_isSet = false;
    m_link_id_isValid = false;

    m_memo_code_isSet = false;
    m_memo_code_isValid = false;

    m_memo_code_full_isSet = false;
    m_memo_code_full_isValid = false;

    m_memo_text_isSet = false;
    m_memo_text_isValid = false;

    m_memoed_subtotal_isSet = false;
    m_memoed_subtotal_isValid = false;

    m_most_recent_isSet = false;
    m_most_recent_isValid = false;

    m_notary_commission_expiration_date_isSet = false;
    m_notary_commission_expiration_date_isValid = false;

    m_notary_sign_date_isSet = false;
    m_notary_sign_date_isValid = false;

    m_notary_sign_name_isSet = false;
    m_notary_sign_name_isValid = false;

    m_office_total_ytd_isSet = false;
    m_office_total_ytd_isValid = false;

    m_original_sub_id_isSet = false;
    m_original_sub_id_isValid = false;

    m_payee_city_isSet = false;
    m_payee_city_isValid = false;

    m_payee_first_name_isSet = false;
    m_payee_first_name_isValid = false;

    m_payee_last_name_isSet = false;
    m_payee_last_name_isValid = false;

    m_payee_middle_name_isSet = false;
    m_payee_middle_name_isValid = false;

    m_payee_name_isSet = false;
    m_payee_name_isValid = false;

    m_payee_prefix_isSet = false;
    m_payee_prefix_isValid = false;

    m_payee_state_isSet = false;
    m_payee_state_isValid = false;

    m_payee_street_1_isSet = false;
    m_payee_street_1_isValid = false;

    m_payee_street_2_isSet = false;
    m_payee_street_2_isValid = false;

    m_payee_suffix_isSet = false;
    m_payee_suffix_isValid = false;

    m_payee_zip_isSet = false;
    m_payee_zip_isValid = false;

    m_pdf_url_isSet = false;
    m_pdf_url_isValid = false;

    m_previous_file_number_isSet = false;
    m_previous_file_number_isValid = false;

    m_report_type_isSet = false;
    m_report_type_isValid = false;

    m_report_year_isSet = false;
    m_report_year_isValid = false;

    m_schedule_type_isSet = false;
    m_schedule_type_isValid = false;

    m_schedule_type_full_isSet = false;
    m_schedule_type_full_isValid = false;

    m_sub_id_isSet = false;
    m_sub_id_isValid = false;

    m_support_oppose_indicator_isSet = false;
    m_support_oppose_indicator_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;
}

void OAIScheduleE::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduleE::fromJsonObject(QJsonObject json) {

    m_action_code_isValid = ::OpenAPI::fromJsonValue(m_action_code, json[QString("action_code")]);
    m_action_code_isSet = !json[QString("action_code")].isNull() && m_action_code_isValid;

    m_action_code_full_isValid = ::OpenAPI::fromJsonValue(m_action_code_full, json[QString("action_code_full")]);
    m_action_code_full_isSet = !json[QString("action_code_full")].isNull() && m_action_code_full_isValid;

    m_amendment_indicator_isValid = ::OpenAPI::fromJsonValue(m_amendment_indicator, json[QString("amendment_indicator")]);
    m_amendment_indicator_isSet = !json[QString("amendment_indicator")].isNull() && m_amendment_indicator_isValid;

    m_amendment_number_isValid = ::OpenAPI::fromJsonValue(m_amendment_number, json[QString("amendment_number")]);
    m_amendment_number_isSet = !json[QString("amendment_number")].isNull() && m_amendment_number_isValid;

    m_back_reference_schedule_name_isValid = ::OpenAPI::fromJsonValue(m_back_reference_schedule_name, json[QString("back_reference_schedule_name")]);
    m_back_reference_schedule_name_isSet = !json[QString("back_reference_schedule_name")].isNull() && m_back_reference_schedule_name_isValid;

    m_back_reference_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_back_reference_transaction_id, json[QString("back_reference_transaction_id")]);
    m_back_reference_transaction_id_isSet = !json[QString("back_reference_transaction_id")].isNull() && m_back_reference_transaction_id_isValid;

    m_candidate_isValid = ::OpenAPI::fromJsonValue(m_candidate, json[QString("candidate")]);
    m_candidate_isSet = !json[QString("candidate")].isNull() && m_candidate_isValid;

    m_candidate_first_name_isValid = ::OpenAPI::fromJsonValue(m_candidate_first_name, json[QString("candidate_first_name")]);
    m_candidate_first_name_isSet = !json[QString("candidate_first_name")].isNull() && m_candidate_first_name_isValid;

    m_candidate_id_isValid = ::OpenAPI::fromJsonValue(m_candidate_id, json[QString("candidate_id")]);
    m_candidate_id_isSet = !json[QString("candidate_id")].isNull() && m_candidate_id_isValid;

    m_candidate_last_name_isValid = ::OpenAPI::fromJsonValue(m_candidate_last_name, json[QString("candidate_last_name")]);
    m_candidate_last_name_isSet = !json[QString("candidate_last_name")].isNull() && m_candidate_last_name_isValid;

    m_candidate_middle_name_isValid = ::OpenAPI::fromJsonValue(m_candidate_middle_name, json[QString("candidate_middle_name")]);
    m_candidate_middle_name_isSet = !json[QString("candidate_middle_name")].isNull() && m_candidate_middle_name_isValid;

    m_candidate_name_isValid = ::OpenAPI::fromJsonValue(m_candidate_name, json[QString("candidate_name")]);
    m_candidate_name_isSet = !json[QString("candidate_name")].isNull() && m_candidate_name_isValid;

    m_candidate_office_isValid = ::OpenAPI::fromJsonValue(m_candidate_office, json[QString("candidate_office")]);
    m_candidate_office_isSet = !json[QString("candidate_office")].isNull() && m_candidate_office_isValid;

    m_candidate_office_district_isValid = ::OpenAPI::fromJsonValue(m_candidate_office_district, json[QString("candidate_office_district")]);
    m_candidate_office_district_isSet = !json[QString("candidate_office_district")].isNull() && m_candidate_office_district_isValid;

    m_candidate_office_state_isValid = ::OpenAPI::fromJsonValue(m_candidate_office_state, json[QString("candidate_office_state")]);
    m_candidate_office_state_isSet = !json[QString("candidate_office_state")].isNull() && m_candidate_office_state_isValid;

    m_candidate_party_isValid = ::OpenAPI::fromJsonValue(m_candidate_party, json[QString("candidate_party")]);
    m_candidate_party_isSet = !json[QString("candidate_party")].isNull() && m_candidate_party_isValid;

    m_candidate_prefix_isValid = ::OpenAPI::fromJsonValue(m_candidate_prefix, json[QString("candidate_prefix")]);
    m_candidate_prefix_isSet = !json[QString("candidate_prefix")].isNull() && m_candidate_prefix_isValid;

    m_candidate_suffix_isValid = ::OpenAPI::fromJsonValue(m_candidate_suffix, json[QString("candidate_suffix")]);
    m_candidate_suffix_isSet = !json[QString("candidate_suffix")].isNull() && m_candidate_suffix_isValid;

    m_category_code_isValid = ::OpenAPI::fromJsonValue(m_category_code, json[QString("category_code")]);
    m_category_code_isSet = !json[QString("category_code")].isNull() && m_category_code_isValid;

    m_category_code_full_isValid = ::OpenAPI::fromJsonValue(m_category_code_full, json[QString("category_code_full")]);
    m_category_code_full_isSet = !json[QString("category_code_full")].isNull() && m_category_code_full_isValid;

    m_committee_isValid = ::OpenAPI::fromJsonValue(m_committee, json[QString("committee")]);
    m_committee_isSet = !json[QString("committee")].isNull() && m_committee_isValid;

    m_committee_id_isValid = ::OpenAPI::fromJsonValue(m_committee_id, json[QString("committee_id")]);
    m_committee_id_isSet = !json[QString("committee_id")].isNull() && m_committee_id_isValid;

    m_conduit_committee_city_isValid = ::OpenAPI::fromJsonValue(m_conduit_committee_city, json[QString("conduit_committee_city")]);
    m_conduit_committee_city_isSet = !json[QString("conduit_committee_city")].isNull() && m_conduit_committee_city_isValid;

    m_conduit_committee_id_isValid = ::OpenAPI::fromJsonValue(m_conduit_committee_id, json[QString("conduit_committee_id")]);
    m_conduit_committee_id_isSet = !json[QString("conduit_committee_id")].isNull() && m_conduit_committee_id_isValid;

    m_conduit_committee_name_isValid = ::OpenAPI::fromJsonValue(m_conduit_committee_name, json[QString("conduit_committee_name")]);
    m_conduit_committee_name_isSet = !json[QString("conduit_committee_name")].isNull() && m_conduit_committee_name_isValid;

    m_conduit_committee_state_isValid = ::OpenAPI::fromJsonValue(m_conduit_committee_state, json[QString("conduit_committee_state")]);
    m_conduit_committee_state_isSet = !json[QString("conduit_committee_state")].isNull() && m_conduit_committee_state_isValid;

    m_conduit_committee_street1_isValid = ::OpenAPI::fromJsonValue(m_conduit_committee_street1, json[QString("conduit_committee_street1")]);
    m_conduit_committee_street1_isSet = !json[QString("conduit_committee_street1")].isNull() && m_conduit_committee_street1_isValid;

    m_conduit_committee_street2_isValid = ::OpenAPI::fromJsonValue(m_conduit_committee_street2, json[QString("conduit_committee_street2")]);
    m_conduit_committee_street2_isSet = !json[QString("conduit_committee_street2")].isNull() && m_conduit_committee_street2_isValid;

    m_conduit_committee_zip_isValid = ::OpenAPI::fromJsonValue(m_conduit_committee_zip, json[QString("conduit_committee_zip")]);
    m_conduit_committee_zip_isSet = !json[QString("conduit_committee_zip")].isNull() && m_conduit_committee_zip_isValid;

    m_dissemination_date_isValid = ::OpenAPI::fromJsonValue(m_dissemination_date, json[QString("dissemination_date")]);
    m_dissemination_date_isSet = !json[QString("dissemination_date")].isNull() && m_dissemination_date_isValid;

    m_election_type_isValid = ::OpenAPI::fromJsonValue(m_election_type, json[QString("election_type")]);
    m_election_type_isSet = !json[QString("election_type")].isNull() && m_election_type_isValid;

    m_election_type_full_isValid = ::OpenAPI::fromJsonValue(m_election_type_full, json[QString("election_type_full")]);
    m_election_type_full_isSet = !json[QString("election_type_full")].isNull() && m_election_type_full_isValid;

    m_expenditure_amount_isValid = ::OpenAPI::fromJsonValue(m_expenditure_amount, json[QString("expenditure_amount")]);
    m_expenditure_amount_isSet = !json[QString("expenditure_amount")].isNull() && m_expenditure_amount_isValid;

    m_expenditure_date_isValid = ::OpenAPI::fromJsonValue(m_expenditure_date, json[QString("expenditure_date")]);
    m_expenditure_date_isSet = !json[QString("expenditure_date")].isNull() && m_expenditure_date_isValid;

    m_expenditure_description_isValid = ::OpenAPI::fromJsonValue(m_expenditure_description, json[QString("expenditure_description")]);
    m_expenditure_description_isSet = !json[QString("expenditure_description")].isNull() && m_expenditure_description_isValid;

    m_file_number_isValid = ::OpenAPI::fromJsonValue(m_file_number, json[QString("file_number")]);
    m_file_number_isSet = !json[QString("file_number")].isNull() && m_file_number_isValid;

    m_filer_first_name_isValid = ::OpenAPI::fromJsonValue(m_filer_first_name, json[QString("filer_first_name")]);
    m_filer_first_name_isSet = !json[QString("filer_first_name")].isNull() && m_filer_first_name_isValid;

    m_filer_last_name_isValid = ::OpenAPI::fromJsonValue(m_filer_last_name, json[QString("filer_last_name")]);
    m_filer_last_name_isSet = !json[QString("filer_last_name")].isNull() && m_filer_last_name_isValid;

    m_filer_middle_name_isValid = ::OpenAPI::fromJsonValue(m_filer_middle_name, json[QString("filer_middle_name")]);
    m_filer_middle_name_isSet = !json[QString("filer_middle_name")].isNull() && m_filer_middle_name_isValid;

    m_filer_prefix_isValid = ::OpenAPI::fromJsonValue(m_filer_prefix, json[QString("filer_prefix")]);
    m_filer_prefix_isSet = !json[QString("filer_prefix")].isNull() && m_filer_prefix_isValid;

    m_filer_suffix_isValid = ::OpenAPI::fromJsonValue(m_filer_suffix, json[QString("filer_suffix")]);
    m_filer_suffix_isSet = !json[QString("filer_suffix")].isNull() && m_filer_suffix_isValid;

    m_filing_date_isValid = ::OpenAPI::fromJsonValue(m_filing_date, json[QString("filing_date")]);
    m_filing_date_isSet = !json[QString("filing_date")].isNull() && m_filing_date_isValid;

    m_filing_form_isValid = ::OpenAPI::fromJsonValue(m_filing_form, json[QString("filing_form")]);
    m_filing_form_isSet = !json[QString("filing_form")].isNull() && m_filing_form_isValid;

    m_image_number_isValid = ::OpenAPI::fromJsonValue(m_image_number, json[QString("image_number")]);
    m_image_number_isSet = !json[QString("image_number")].isNull() && m_image_number_isValid;

    m_independent_sign_date_isValid = ::OpenAPI::fromJsonValue(m_independent_sign_date, json[QString("independent_sign_date")]);
    m_independent_sign_date_isSet = !json[QString("independent_sign_date")].isNull() && m_independent_sign_date_isValid;

    m_independent_sign_name_isValid = ::OpenAPI::fromJsonValue(m_independent_sign_name, json[QString("independent_sign_name")]);
    m_independent_sign_name_isSet = !json[QString("independent_sign_name")].isNull() && m_independent_sign_name_isValid;

    m_is_notice_isValid = ::OpenAPI::fromJsonValue(m_is_notice, json[QString("is_notice")]);
    m_is_notice_isSet = !json[QString("is_notice")].isNull() && m_is_notice_isValid;

    m_line_number_isValid = ::OpenAPI::fromJsonValue(m_line_number, json[QString("line_number")]);
    m_line_number_isSet = !json[QString("line_number")].isNull() && m_line_number_isValid;

    m_link_id_isValid = ::OpenAPI::fromJsonValue(m_link_id, json[QString("link_id")]);
    m_link_id_isSet = !json[QString("link_id")].isNull() && m_link_id_isValid;

    m_memo_code_isValid = ::OpenAPI::fromJsonValue(m_memo_code, json[QString("memo_code")]);
    m_memo_code_isSet = !json[QString("memo_code")].isNull() && m_memo_code_isValid;

    m_memo_code_full_isValid = ::OpenAPI::fromJsonValue(m_memo_code_full, json[QString("memo_code_full")]);
    m_memo_code_full_isSet = !json[QString("memo_code_full")].isNull() && m_memo_code_full_isValid;

    m_memo_text_isValid = ::OpenAPI::fromJsonValue(m_memo_text, json[QString("memo_text")]);
    m_memo_text_isSet = !json[QString("memo_text")].isNull() && m_memo_text_isValid;

    m_memoed_subtotal_isValid = ::OpenAPI::fromJsonValue(m_memoed_subtotal, json[QString("memoed_subtotal")]);
    m_memoed_subtotal_isSet = !json[QString("memoed_subtotal")].isNull() && m_memoed_subtotal_isValid;

    m_most_recent_isValid = ::OpenAPI::fromJsonValue(m_most_recent, json[QString("most_recent")]);
    m_most_recent_isSet = !json[QString("most_recent")].isNull() && m_most_recent_isValid;

    m_notary_commission_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_notary_commission_expiration_date, json[QString("notary_commission_expiration_date")]);
    m_notary_commission_expiration_date_isSet = !json[QString("notary_commission_expiration_date")].isNull() && m_notary_commission_expiration_date_isValid;

    m_notary_sign_date_isValid = ::OpenAPI::fromJsonValue(m_notary_sign_date, json[QString("notary_sign_date")]);
    m_notary_sign_date_isSet = !json[QString("notary_sign_date")].isNull() && m_notary_sign_date_isValid;

    m_notary_sign_name_isValid = ::OpenAPI::fromJsonValue(m_notary_sign_name, json[QString("notary_sign_name")]);
    m_notary_sign_name_isSet = !json[QString("notary_sign_name")].isNull() && m_notary_sign_name_isValid;

    m_office_total_ytd_isValid = ::OpenAPI::fromJsonValue(m_office_total_ytd, json[QString("office_total_ytd")]);
    m_office_total_ytd_isSet = !json[QString("office_total_ytd")].isNull() && m_office_total_ytd_isValid;

    m_original_sub_id_isValid = ::OpenAPI::fromJsonValue(m_original_sub_id, json[QString("original_sub_id")]);
    m_original_sub_id_isSet = !json[QString("original_sub_id")].isNull() && m_original_sub_id_isValid;

    m_payee_city_isValid = ::OpenAPI::fromJsonValue(m_payee_city, json[QString("payee_city")]);
    m_payee_city_isSet = !json[QString("payee_city")].isNull() && m_payee_city_isValid;

    m_payee_first_name_isValid = ::OpenAPI::fromJsonValue(m_payee_first_name, json[QString("payee_first_name")]);
    m_payee_first_name_isSet = !json[QString("payee_first_name")].isNull() && m_payee_first_name_isValid;

    m_payee_last_name_isValid = ::OpenAPI::fromJsonValue(m_payee_last_name, json[QString("payee_last_name")]);
    m_payee_last_name_isSet = !json[QString("payee_last_name")].isNull() && m_payee_last_name_isValid;

    m_payee_middle_name_isValid = ::OpenAPI::fromJsonValue(m_payee_middle_name, json[QString("payee_middle_name")]);
    m_payee_middle_name_isSet = !json[QString("payee_middle_name")].isNull() && m_payee_middle_name_isValid;

    m_payee_name_isValid = ::OpenAPI::fromJsonValue(m_payee_name, json[QString("payee_name")]);
    m_payee_name_isSet = !json[QString("payee_name")].isNull() && m_payee_name_isValid;

    m_payee_prefix_isValid = ::OpenAPI::fromJsonValue(m_payee_prefix, json[QString("payee_prefix")]);
    m_payee_prefix_isSet = !json[QString("payee_prefix")].isNull() && m_payee_prefix_isValid;

    m_payee_state_isValid = ::OpenAPI::fromJsonValue(m_payee_state, json[QString("payee_state")]);
    m_payee_state_isSet = !json[QString("payee_state")].isNull() && m_payee_state_isValid;

    m_payee_street_1_isValid = ::OpenAPI::fromJsonValue(m_payee_street_1, json[QString("payee_street_1")]);
    m_payee_street_1_isSet = !json[QString("payee_street_1")].isNull() && m_payee_street_1_isValid;

    m_payee_street_2_isValid = ::OpenAPI::fromJsonValue(m_payee_street_2, json[QString("payee_street_2")]);
    m_payee_street_2_isSet = !json[QString("payee_street_2")].isNull() && m_payee_street_2_isValid;

    m_payee_suffix_isValid = ::OpenAPI::fromJsonValue(m_payee_suffix, json[QString("payee_suffix")]);
    m_payee_suffix_isSet = !json[QString("payee_suffix")].isNull() && m_payee_suffix_isValid;

    m_payee_zip_isValid = ::OpenAPI::fromJsonValue(m_payee_zip, json[QString("payee_zip")]);
    m_payee_zip_isSet = !json[QString("payee_zip")].isNull() && m_payee_zip_isValid;

    m_pdf_url_isValid = ::OpenAPI::fromJsonValue(m_pdf_url, json[QString("pdf_url")]);
    m_pdf_url_isSet = !json[QString("pdf_url")].isNull() && m_pdf_url_isValid;

    m_previous_file_number_isValid = ::OpenAPI::fromJsonValue(m_previous_file_number, json[QString("previous_file_number")]);
    m_previous_file_number_isSet = !json[QString("previous_file_number")].isNull() && m_previous_file_number_isValid;

    m_report_type_isValid = ::OpenAPI::fromJsonValue(m_report_type, json[QString("report_type")]);
    m_report_type_isSet = !json[QString("report_type")].isNull() && m_report_type_isValid;

    m_report_year_isValid = ::OpenAPI::fromJsonValue(m_report_year, json[QString("report_year")]);
    m_report_year_isSet = !json[QString("report_year")].isNull() && m_report_year_isValid;

    m_schedule_type_isValid = ::OpenAPI::fromJsonValue(m_schedule_type, json[QString("schedule_type")]);
    m_schedule_type_isSet = !json[QString("schedule_type")].isNull() && m_schedule_type_isValid;

    m_schedule_type_full_isValid = ::OpenAPI::fromJsonValue(m_schedule_type_full, json[QString("schedule_type_full")]);
    m_schedule_type_full_isSet = !json[QString("schedule_type_full")].isNull() && m_schedule_type_full_isValid;

    m_sub_id_isValid = ::OpenAPI::fromJsonValue(m_sub_id, json[QString("sub_id")]);
    m_sub_id_isSet = !json[QString("sub_id")].isNull() && m_sub_id_isValid;

    m_support_oppose_indicator_isValid = ::OpenAPI::fromJsonValue(m_support_oppose_indicator, json[QString("support_oppose_indicator")]);
    m_support_oppose_indicator_isSet = !json[QString("support_oppose_indicator")].isNull() && m_support_oppose_indicator_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("transaction_id")]);
    m_transaction_id_isSet = !json[QString("transaction_id")].isNull() && m_transaction_id_isValid;
}

QString OAIScheduleE::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduleE::asJsonObject() const {
    QJsonObject obj;
    if (m_action_code_isSet) {
        obj.insert(QString("action_code"), ::OpenAPI::toJsonValue(m_action_code));
    }
    if (m_action_code_full_isSet) {
        obj.insert(QString("action_code_full"), ::OpenAPI::toJsonValue(m_action_code_full));
    }
    if (m_amendment_indicator_isSet) {
        obj.insert(QString("amendment_indicator"), ::OpenAPI::toJsonValue(m_amendment_indicator));
    }
    if (m_amendment_number_isSet) {
        obj.insert(QString("amendment_number"), ::OpenAPI::toJsonValue(m_amendment_number));
    }
    if (m_back_reference_schedule_name_isSet) {
        obj.insert(QString("back_reference_schedule_name"), ::OpenAPI::toJsonValue(m_back_reference_schedule_name));
    }
    if (m_back_reference_transaction_id_isSet) {
        obj.insert(QString("back_reference_transaction_id"), ::OpenAPI::toJsonValue(m_back_reference_transaction_id));
    }
    if (m_candidate_isSet) {
        obj.insert(QString("candidate"), ::OpenAPI::toJsonValue(m_candidate));
    }
    if (m_candidate_first_name_isSet) {
        obj.insert(QString("candidate_first_name"), ::OpenAPI::toJsonValue(m_candidate_first_name));
    }
    if (m_candidate_id_isSet) {
        obj.insert(QString("candidate_id"), ::OpenAPI::toJsonValue(m_candidate_id));
    }
    if (m_candidate_last_name_isSet) {
        obj.insert(QString("candidate_last_name"), ::OpenAPI::toJsonValue(m_candidate_last_name));
    }
    if (m_candidate_middle_name_isSet) {
        obj.insert(QString("candidate_middle_name"), ::OpenAPI::toJsonValue(m_candidate_middle_name));
    }
    if (m_candidate_name_isSet) {
        obj.insert(QString("candidate_name"), ::OpenAPI::toJsonValue(m_candidate_name));
    }
    if (m_candidate_office_isSet) {
        obj.insert(QString("candidate_office"), ::OpenAPI::toJsonValue(m_candidate_office));
    }
    if (m_candidate_office_district_isSet) {
        obj.insert(QString("candidate_office_district"), ::OpenAPI::toJsonValue(m_candidate_office_district));
    }
    if (m_candidate_office_state_isSet) {
        obj.insert(QString("candidate_office_state"), ::OpenAPI::toJsonValue(m_candidate_office_state));
    }
    if (m_candidate_party_isSet) {
        obj.insert(QString("candidate_party"), ::OpenAPI::toJsonValue(m_candidate_party));
    }
    if (m_candidate_prefix_isSet) {
        obj.insert(QString("candidate_prefix"), ::OpenAPI::toJsonValue(m_candidate_prefix));
    }
    if (m_candidate_suffix_isSet) {
        obj.insert(QString("candidate_suffix"), ::OpenAPI::toJsonValue(m_candidate_suffix));
    }
    if (m_category_code_isSet) {
        obj.insert(QString("category_code"), ::OpenAPI::toJsonValue(m_category_code));
    }
    if (m_category_code_full_isSet) {
        obj.insert(QString("category_code_full"), ::OpenAPI::toJsonValue(m_category_code_full));
    }
    if (m_committee.isSet()) {
        obj.insert(QString("committee"), ::OpenAPI::toJsonValue(m_committee));
    }
    if (m_committee_id_isSet) {
        obj.insert(QString("committee_id"), ::OpenAPI::toJsonValue(m_committee_id));
    }
    if (m_conduit_committee_city_isSet) {
        obj.insert(QString("conduit_committee_city"), ::OpenAPI::toJsonValue(m_conduit_committee_city));
    }
    if (m_conduit_committee_id_isSet) {
        obj.insert(QString("conduit_committee_id"), ::OpenAPI::toJsonValue(m_conduit_committee_id));
    }
    if (m_conduit_committee_name_isSet) {
        obj.insert(QString("conduit_committee_name"), ::OpenAPI::toJsonValue(m_conduit_committee_name));
    }
    if (m_conduit_committee_state_isSet) {
        obj.insert(QString("conduit_committee_state"), ::OpenAPI::toJsonValue(m_conduit_committee_state));
    }
    if (m_conduit_committee_street1_isSet) {
        obj.insert(QString("conduit_committee_street1"), ::OpenAPI::toJsonValue(m_conduit_committee_street1));
    }
    if (m_conduit_committee_street2_isSet) {
        obj.insert(QString("conduit_committee_street2"), ::OpenAPI::toJsonValue(m_conduit_committee_street2));
    }
    if (m_conduit_committee_zip_isSet) {
        obj.insert(QString("conduit_committee_zip"), ::OpenAPI::toJsonValue(m_conduit_committee_zip));
    }
    if (m_dissemination_date_isSet) {
        obj.insert(QString("dissemination_date"), ::OpenAPI::toJsonValue(m_dissemination_date));
    }
    if (m_election_type_isSet) {
        obj.insert(QString("election_type"), ::OpenAPI::toJsonValue(m_election_type));
    }
    if (m_election_type_full_isSet) {
        obj.insert(QString("election_type_full"), ::OpenAPI::toJsonValue(m_election_type_full));
    }
    if (m_expenditure_amount_isSet) {
        obj.insert(QString("expenditure_amount"), ::OpenAPI::toJsonValue(m_expenditure_amount));
    }
    if (m_expenditure_date_isSet) {
        obj.insert(QString("expenditure_date"), ::OpenAPI::toJsonValue(m_expenditure_date));
    }
    if (m_expenditure_description_isSet) {
        obj.insert(QString("expenditure_description"), ::OpenAPI::toJsonValue(m_expenditure_description));
    }
    if (m_file_number_isSet) {
        obj.insert(QString("file_number"), ::OpenAPI::toJsonValue(m_file_number));
    }
    if (m_filer_first_name_isSet) {
        obj.insert(QString("filer_first_name"), ::OpenAPI::toJsonValue(m_filer_first_name));
    }
    if (m_filer_last_name_isSet) {
        obj.insert(QString("filer_last_name"), ::OpenAPI::toJsonValue(m_filer_last_name));
    }
    if (m_filer_middle_name_isSet) {
        obj.insert(QString("filer_middle_name"), ::OpenAPI::toJsonValue(m_filer_middle_name));
    }
    if (m_filer_prefix_isSet) {
        obj.insert(QString("filer_prefix"), ::OpenAPI::toJsonValue(m_filer_prefix));
    }
    if (m_filer_suffix_isSet) {
        obj.insert(QString("filer_suffix"), ::OpenAPI::toJsonValue(m_filer_suffix));
    }
    if (m_filing_date_isSet) {
        obj.insert(QString("filing_date"), ::OpenAPI::toJsonValue(m_filing_date));
    }
    if (m_filing_form_isSet) {
        obj.insert(QString("filing_form"), ::OpenAPI::toJsonValue(m_filing_form));
    }
    if (m_image_number_isSet) {
        obj.insert(QString("image_number"), ::OpenAPI::toJsonValue(m_image_number));
    }
    if (m_independent_sign_date_isSet) {
        obj.insert(QString("independent_sign_date"), ::OpenAPI::toJsonValue(m_independent_sign_date));
    }
    if (m_independent_sign_name_isSet) {
        obj.insert(QString("independent_sign_name"), ::OpenAPI::toJsonValue(m_independent_sign_name));
    }
    if (m_is_notice_isSet) {
        obj.insert(QString("is_notice"), ::OpenAPI::toJsonValue(m_is_notice));
    }
    if (m_line_number_isSet) {
        obj.insert(QString("line_number"), ::OpenAPI::toJsonValue(m_line_number));
    }
    if (m_link_id_isSet) {
        obj.insert(QString("link_id"), ::OpenAPI::toJsonValue(m_link_id));
    }
    if (m_memo_code_isSet) {
        obj.insert(QString("memo_code"), ::OpenAPI::toJsonValue(m_memo_code));
    }
    if (m_memo_code_full_isSet) {
        obj.insert(QString("memo_code_full"), ::OpenAPI::toJsonValue(m_memo_code_full));
    }
    if (m_memo_text_isSet) {
        obj.insert(QString("memo_text"), ::OpenAPI::toJsonValue(m_memo_text));
    }
    if (m_memoed_subtotal_isSet) {
        obj.insert(QString("memoed_subtotal"), ::OpenAPI::toJsonValue(m_memoed_subtotal));
    }
    if (m_most_recent_isSet) {
        obj.insert(QString("most_recent"), ::OpenAPI::toJsonValue(m_most_recent));
    }
    if (m_notary_commission_expiration_date_isSet) {
        obj.insert(QString("notary_commission_expiration_date"), ::OpenAPI::toJsonValue(m_notary_commission_expiration_date));
    }
    if (m_notary_sign_date_isSet) {
        obj.insert(QString("notary_sign_date"), ::OpenAPI::toJsonValue(m_notary_sign_date));
    }
    if (m_notary_sign_name_isSet) {
        obj.insert(QString("notary_sign_name"), ::OpenAPI::toJsonValue(m_notary_sign_name));
    }
    if (m_office_total_ytd_isSet) {
        obj.insert(QString("office_total_ytd"), ::OpenAPI::toJsonValue(m_office_total_ytd));
    }
    if (m_original_sub_id_isSet) {
        obj.insert(QString("original_sub_id"), ::OpenAPI::toJsonValue(m_original_sub_id));
    }
    if (m_payee_city_isSet) {
        obj.insert(QString("payee_city"), ::OpenAPI::toJsonValue(m_payee_city));
    }
    if (m_payee_first_name_isSet) {
        obj.insert(QString("payee_first_name"), ::OpenAPI::toJsonValue(m_payee_first_name));
    }
    if (m_payee_last_name_isSet) {
        obj.insert(QString("payee_last_name"), ::OpenAPI::toJsonValue(m_payee_last_name));
    }
    if (m_payee_middle_name_isSet) {
        obj.insert(QString("payee_middle_name"), ::OpenAPI::toJsonValue(m_payee_middle_name));
    }
    if (m_payee_name_isSet) {
        obj.insert(QString("payee_name"), ::OpenAPI::toJsonValue(m_payee_name));
    }
    if (m_payee_prefix_isSet) {
        obj.insert(QString("payee_prefix"), ::OpenAPI::toJsonValue(m_payee_prefix));
    }
    if (m_payee_state_isSet) {
        obj.insert(QString("payee_state"), ::OpenAPI::toJsonValue(m_payee_state));
    }
    if (m_payee_street_1_isSet) {
        obj.insert(QString("payee_street_1"), ::OpenAPI::toJsonValue(m_payee_street_1));
    }
    if (m_payee_street_2_isSet) {
        obj.insert(QString("payee_street_2"), ::OpenAPI::toJsonValue(m_payee_street_2));
    }
    if (m_payee_suffix_isSet) {
        obj.insert(QString("payee_suffix"), ::OpenAPI::toJsonValue(m_payee_suffix));
    }
    if (m_payee_zip_isSet) {
        obj.insert(QString("payee_zip"), ::OpenAPI::toJsonValue(m_payee_zip));
    }
    if (m_pdf_url_isSet) {
        obj.insert(QString("pdf_url"), ::OpenAPI::toJsonValue(m_pdf_url));
    }
    if (m_previous_file_number_isSet) {
        obj.insert(QString("previous_file_number"), ::OpenAPI::toJsonValue(m_previous_file_number));
    }
    if (m_report_type_isSet) {
        obj.insert(QString("report_type"), ::OpenAPI::toJsonValue(m_report_type));
    }
    if (m_report_year_isSet) {
        obj.insert(QString("report_year"), ::OpenAPI::toJsonValue(m_report_year));
    }
    if (m_schedule_type_isSet) {
        obj.insert(QString("schedule_type"), ::OpenAPI::toJsonValue(m_schedule_type));
    }
    if (m_schedule_type_full_isSet) {
        obj.insert(QString("schedule_type_full"), ::OpenAPI::toJsonValue(m_schedule_type_full));
    }
    if (m_sub_id_isSet) {
        obj.insert(QString("sub_id"), ::OpenAPI::toJsonValue(m_sub_id));
    }
    if (m_support_oppose_indicator_isSet) {
        obj.insert(QString("support_oppose_indicator"), ::OpenAPI::toJsonValue(m_support_oppose_indicator));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("transaction_id"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    return obj;
}

QString OAIScheduleE::getActionCode() const {
    return m_action_code;
}
void OAIScheduleE::setActionCode(const QString &action_code) {
    m_action_code = action_code;
    m_action_code_isSet = true;
}

bool OAIScheduleE::is_action_code_Set() const{
    return m_action_code_isSet;
}

bool OAIScheduleE::is_action_code_Valid() const{
    return m_action_code_isValid;
}

QString OAIScheduleE::getActionCodeFull() const {
    return m_action_code_full;
}
void OAIScheduleE::setActionCodeFull(const QString &action_code_full) {
    m_action_code_full = action_code_full;
    m_action_code_full_isSet = true;
}

bool OAIScheduleE::is_action_code_full_Set() const{
    return m_action_code_full_isSet;
}

bool OAIScheduleE::is_action_code_full_Valid() const{
    return m_action_code_full_isValid;
}

QString OAIScheduleE::getAmendmentIndicator() const {
    return m_amendment_indicator;
}
void OAIScheduleE::setAmendmentIndicator(const QString &amendment_indicator) {
    m_amendment_indicator = amendment_indicator;
    m_amendment_indicator_isSet = true;
}

bool OAIScheduleE::is_amendment_indicator_Set() const{
    return m_amendment_indicator_isSet;
}

bool OAIScheduleE::is_amendment_indicator_Valid() const{
    return m_amendment_indicator_isValid;
}

qint32 OAIScheduleE::getAmendmentNumber() const {
    return m_amendment_number;
}
void OAIScheduleE::setAmendmentNumber(const qint32 &amendment_number) {
    m_amendment_number = amendment_number;
    m_amendment_number_isSet = true;
}

bool OAIScheduleE::is_amendment_number_Set() const{
    return m_amendment_number_isSet;
}

bool OAIScheduleE::is_amendment_number_Valid() const{
    return m_amendment_number_isValid;
}

QString OAIScheduleE::getBackReferenceScheduleName() const {
    return m_back_reference_schedule_name;
}
void OAIScheduleE::setBackReferenceScheduleName(const QString &back_reference_schedule_name) {
    m_back_reference_schedule_name = back_reference_schedule_name;
    m_back_reference_schedule_name_isSet = true;
}

bool OAIScheduleE::is_back_reference_schedule_name_Set() const{
    return m_back_reference_schedule_name_isSet;
}

bool OAIScheduleE::is_back_reference_schedule_name_Valid() const{
    return m_back_reference_schedule_name_isValid;
}

QString OAIScheduleE::getBackReferenceTransactionId() const {
    return m_back_reference_transaction_id;
}
void OAIScheduleE::setBackReferenceTransactionId(const QString &back_reference_transaction_id) {
    m_back_reference_transaction_id = back_reference_transaction_id;
    m_back_reference_transaction_id_isSet = true;
}

bool OAIScheduleE::is_back_reference_transaction_id_Set() const{
    return m_back_reference_transaction_id_isSet;
}

bool OAIScheduleE::is_back_reference_transaction_id_Valid() const{
    return m_back_reference_transaction_id_isValid;
}

QString OAIScheduleE::getCandidate() const {
    return m_candidate;
}
void OAIScheduleE::setCandidate(const QString &candidate) {
    m_candidate = candidate;
    m_candidate_isSet = true;
}

bool OAIScheduleE::is_candidate_Set() const{
    return m_candidate_isSet;
}

bool OAIScheduleE::is_candidate_Valid() const{
    return m_candidate_isValid;
}

QString OAIScheduleE::getCandidateFirstName() const {
    return m_candidate_first_name;
}
void OAIScheduleE::setCandidateFirstName(const QString &candidate_first_name) {
    m_candidate_first_name = candidate_first_name;
    m_candidate_first_name_isSet = true;
}

bool OAIScheduleE::is_candidate_first_name_Set() const{
    return m_candidate_first_name_isSet;
}

bool OAIScheduleE::is_candidate_first_name_Valid() const{
    return m_candidate_first_name_isValid;
}

QString OAIScheduleE::getCandidateId() const {
    return m_candidate_id;
}
void OAIScheduleE::setCandidateId(const QString &candidate_id) {
    m_candidate_id = candidate_id;
    m_candidate_id_isSet = true;
}

bool OAIScheduleE::is_candidate_id_Set() const{
    return m_candidate_id_isSet;
}

bool OAIScheduleE::is_candidate_id_Valid() const{
    return m_candidate_id_isValid;
}

QString OAIScheduleE::getCandidateLastName() const {
    return m_candidate_last_name;
}
void OAIScheduleE::setCandidateLastName(const QString &candidate_last_name) {
    m_candidate_last_name = candidate_last_name;
    m_candidate_last_name_isSet = true;
}

bool OAIScheduleE::is_candidate_last_name_Set() const{
    return m_candidate_last_name_isSet;
}

bool OAIScheduleE::is_candidate_last_name_Valid() const{
    return m_candidate_last_name_isValid;
}

QString OAIScheduleE::getCandidateMiddleName() const {
    return m_candidate_middle_name;
}
void OAIScheduleE::setCandidateMiddleName(const QString &candidate_middle_name) {
    m_candidate_middle_name = candidate_middle_name;
    m_candidate_middle_name_isSet = true;
}

bool OAIScheduleE::is_candidate_middle_name_Set() const{
    return m_candidate_middle_name_isSet;
}

bool OAIScheduleE::is_candidate_middle_name_Valid() const{
    return m_candidate_middle_name_isValid;
}

QString OAIScheduleE::getCandidateName() const {
    return m_candidate_name;
}
void OAIScheduleE::setCandidateName(const QString &candidate_name) {
    m_candidate_name = candidate_name;
    m_candidate_name_isSet = true;
}

bool OAIScheduleE::is_candidate_name_Set() const{
    return m_candidate_name_isSet;
}

bool OAIScheduleE::is_candidate_name_Valid() const{
    return m_candidate_name_isValid;
}

QString OAIScheduleE::getCandidateOffice() const {
    return m_candidate_office;
}
void OAIScheduleE::setCandidateOffice(const QString &candidate_office) {
    m_candidate_office = candidate_office;
    m_candidate_office_isSet = true;
}

bool OAIScheduleE::is_candidate_office_Set() const{
    return m_candidate_office_isSet;
}

bool OAIScheduleE::is_candidate_office_Valid() const{
    return m_candidate_office_isValid;
}

QString OAIScheduleE::getCandidateOfficeDistrict() const {
    return m_candidate_office_district;
}
void OAIScheduleE::setCandidateOfficeDistrict(const QString &candidate_office_district) {
    m_candidate_office_district = candidate_office_district;
    m_candidate_office_district_isSet = true;
}

bool OAIScheduleE::is_candidate_office_district_Set() const{
    return m_candidate_office_district_isSet;
}

bool OAIScheduleE::is_candidate_office_district_Valid() const{
    return m_candidate_office_district_isValid;
}

QString OAIScheduleE::getCandidateOfficeState() const {
    return m_candidate_office_state;
}
void OAIScheduleE::setCandidateOfficeState(const QString &candidate_office_state) {
    m_candidate_office_state = candidate_office_state;
    m_candidate_office_state_isSet = true;
}

bool OAIScheduleE::is_candidate_office_state_Set() const{
    return m_candidate_office_state_isSet;
}

bool OAIScheduleE::is_candidate_office_state_Valid() const{
    return m_candidate_office_state_isValid;
}

QString OAIScheduleE::getCandidateParty() const {
    return m_candidate_party;
}
void OAIScheduleE::setCandidateParty(const QString &candidate_party) {
    m_candidate_party = candidate_party;
    m_candidate_party_isSet = true;
}

bool OAIScheduleE::is_candidate_party_Set() const{
    return m_candidate_party_isSet;
}

bool OAIScheduleE::is_candidate_party_Valid() const{
    return m_candidate_party_isValid;
}

QString OAIScheduleE::getCandidatePrefix() const {
    return m_candidate_prefix;
}
void OAIScheduleE::setCandidatePrefix(const QString &candidate_prefix) {
    m_candidate_prefix = candidate_prefix;
    m_candidate_prefix_isSet = true;
}

bool OAIScheduleE::is_candidate_prefix_Set() const{
    return m_candidate_prefix_isSet;
}

bool OAIScheduleE::is_candidate_prefix_Valid() const{
    return m_candidate_prefix_isValid;
}

QString OAIScheduleE::getCandidateSuffix() const {
    return m_candidate_suffix;
}
void OAIScheduleE::setCandidateSuffix(const QString &candidate_suffix) {
    m_candidate_suffix = candidate_suffix;
    m_candidate_suffix_isSet = true;
}

bool OAIScheduleE::is_candidate_suffix_Set() const{
    return m_candidate_suffix_isSet;
}

bool OAIScheduleE::is_candidate_suffix_Valid() const{
    return m_candidate_suffix_isValid;
}

QString OAIScheduleE::getCategoryCode() const {
    return m_category_code;
}
void OAIScheduleE::setCategoryCode(const QString &category_code) {
    m_category_code = category_code;
    m_category_code_isSet = true;
}

bool OAIScheduleE::is_category_code_Set() const{
    return m_category_code_isSet;
}

bool OAIScheduleE::is_category_code_Valid() const{
    return m_category_code_isValid;
}

QString OAIScheduleE::getCategoryCodeFull() const {
    return m_category_code_full;
}
void OAIScheduleE::setCategoryCodeFull(const QString &category_code_full) {
    m_category_code_full = category_code_full;
    m_category_code_full_isSet = true;
}

bool OAIScheduleE::is_category_code_full_Set() const{
    return m_category_code_full_isSet;
}

bool OAIScheduleE::is_category_code_full_Valid() const{
    return m_category_code_full_isValid;
}

OAICommitteeHistory OAIScheduleE::getCommittee() const {
    return m_committee;
}
void OAIScheduleE::setCommittee(const OAICommitteeHistory &committee) {
    m_committee = committee;
    m_committee_isSet = true;
}

bool OAIScheduleE::is_committee_Set() const{
    return m_committee_isSet;
}

bool OAIScheduleE::is_committee_Valid() const{
    return m_committee_isValid;
}

QString OAIScheduleE::getCommitteeId() const {
    return m_committee_id;
}
void OAIScheduleE::setCommitteeId(const QString &committee_id) {
    m_committee_id = committee_id;
    m_committee_id_isSet = true;
}

bool OAIScheduleE::is_committee_id_Set() const{
    return m_committee_id_isSet;
}

bool OAIScheduleE::is_committee_id_Valid() const{
    return m_committee_id_isValid;
}

QString OAIScheduleE::getConduitCommitteeCity() const {
    return m_conduit_committee_city;
}
void OAIScheduleE::setConduitCommitteeCity(const QString &conduit_committee_city) {
    m_conduit_committee_city = conduit_committee_city;
    m_conduit_committee_city_isSet = true;
}

bool OAIScheduleE::is_conduit_committee_city_Set() const{
    return m_conduit_committee_city_isSet;
}

bool OAIScheduleE::is_conduit_committee_city_Valid() const{
    return m_conduit_committee_city_isValid;
}

QString OAIScheduleE::getConduitCommitteeId() const {
    return m_conduit_committee_id;
}
void OAIScheduleE::setConduitCommitteeId(const QString &conduit_committee_id) {
    m_conduit_committee_id = conduit_committee_id;
    m_conduit_committee_id_isSet = true;
}

bool OAIScheduleE::is_conduit_committee_id_Set() const{
    return m_conduit_committee_id_isSet;
}

bool OAIScheduleE::is_conduit_committee_id_Valid() const{
    return m_conduit_committee_id_isValid;
}

QString OAIScheduleE::getConduitCommitteeName() const {
    return m_conduit_committee_name;
}
void OAIScheduleE::setConduitCommitteeName(const QString &conduit_committee_name) {
    m_conduit_committee_name = conduit_committee_name;
    m_conduit_committee_name_isSet = true;
}

bool OAIScheduleE::is_conduit_committee_name_Set() const{
    return m_conduit_committee_name_isSet;
}

bool OAIScheduleE::is_conduit_committee_name_Valid() const{
    return m_conduit_committee_name_isValid;
}

QString OAIScheduleE::getConduitCommitteeState() const {
    return m_conduit_committee_state;
}
void OAIScheduleE::setConduitCommitteeState(const QString &conduit_committee_state) {
    m_conduit_committee_state = conduit_committee_state;
    m_conduit_committee_state_isSet = true;
}

bool OAIScheduleE::is_conduit_committee_state_Set() const{
    return m_conduit_committee_state_isSet;
}

bool OAIScheduleE::is_conduit_committee_state_Valid() const{
    return m_conduit_committee_state_isValid;
}

QString OAIScheduleE::getConduitCommitteeStreet1() const {
    return m_conduit_committee_street1;
}
void OAIScheduleE::setConduitCommitteeStreet1(const QString &conduit_committee_street1) {
    m_conduit_committee_street1 = conduit_committee_street1;
    m_conduit_committee_street1_isSet = true;
}

bool OAIScheduleE::is_conduit_committee_street1_Set() const{
    return m_conduit_committee_street1_isSet;
}

bool OAIScheduleE::is_conduit_committee_street1_Valid() const{
    return m_conduit_committee_street1_isValid;
}

QString OAIScheduleE::getConduitCommitteeStreet2() const {
    return m_conduit_committee_street2;
}
void OAIScheduleE::setConduitCommitteeStreet2(const QString &conduit_committee_street2) {
    m_conduit_committee_street2 = conduit_committee_street2;
    m_conduit_committee_street2_isSet = true;
}

bool OAIScheduleE::is_conduit_committee_street2_Set() const{
    return m_conduit_committee_street2_isSet;
}

bool OAIScheduleE::is_conduit_committee_street2_Valid() const{
    return m_conduit_committee_street2_isValid;
}

qint32 OAIScheduleE::getConduitCommitteeZip() const {
    return m_conduit_committee_zip;
}
void OAIScheduleE::setConduitCommitteeZip(const qint32 &conduit_committee_zip) {
    m_conduit_committee_zip = conduit_committee_zip;
    m_conduit_committee_zip_isSet = true;
}

bool OAIScheduleE::is_conduit_committee_zip_Set() const{
    return m_conduit_committee_zip_isSet;
}

bool OAIScheduleE::is_conduit_committee_zip_Valid() const{
    return m_conduit_committee_zip_isValid;
}

QDate OAIScheduleE::getDisseminationDate() const {
    return m_dissemination_date;
}
void OAIScheduleE::setDisseminationDate(const QDate &dissemination_date) {
    m_dissemination_date = dissemination_date;
    m_dissemination_date_isSet = true;
}

bool OAIScheduleE::is_dissemination_date_Set() const{
    return m_dissemination_date_isSet;
}

bool OAIScheduleE::is_dissemination_date_Valid() const{
    return m_dissemination_date_isValid;
}

QString OAIScheduleE::getElectionType() const {
    return m_election_type;
}
void OAIScheduleE::setElectionType(const QString &election_type) {
    m_election_type = election_type;
    m_election_type_isSet = true;
}

bool OAIScheduleE::is_election_type_Set() const{
    return m_election_type_isSet;
}

bool OAIScheduleE::is_election_type_Valid() const{
    return m_election_type_isValid;
}

QString OAIScheduleE::getElectionTypeFull() const {
    return m_election_type_full;
}
void OAIScheduleE::setElectionTypeFull(const QString &election_type_full) {
    m_election_type_full = election_type_full;
    m_election_type_full_isSet = true;
}

bool OAIScheduleE::is_election_type_full_Set() const{
    return m_election_type_full_isSet;
}

bool OAIScheduleE::is_election_type_full_Valid() const{
    return m_election_type_full_isValid;
}

double OAIScheduleE::getExpenditureAmount() const {
    return m_expenditure_amount;
}
void OAIScheduleE::setExpenditureAmount(const double &expenditure_amount) {
    m_expenditure_amount = expenditure_amount;
    m_expenditure_amount_isSet = true;
}

bool OAIScheduleE::is_expenditure_amount_Set() const{
    return m_expenditure_amount_isSet;
}

bool OAIScheduleE::is_expenditure_amount_Valid() const{
    return m_expenditure_amount_isValid;
}

QDate OAIScheduleE::getExpenditureDate() const {
    return m_expenditure_date;
}
void OAIScheduleE::setExpenditureDate(const QDate &expenditure_date) {
    m_expenditure_date = expenditure_date;
    m_expenditure_date_isSet = true;
}

bool OAIScheduleE::is_expenditure_date_Set() const{
    return m_expenditure_date_isSet;
}

bool OAIScheduleE::is_expenditure_date_Valid() const{
    return m_expenditure_date_isValid;
}

QString OAIScheduleE::getExpenditureDescription() const {
    return m_expenditure_description;
}
void OAIScheduleE::setExpenditureDescription(const QString &expenditure_description) {
    m_expenditure_description = expenditure_description;
    m_expenditure_description_isSet = true;
}

bool OAIScheduleE::is_expenditure_description_Set() const{
    return m_expenditure_description_isSet;
}

bool OAIScheduleE::is_expenditure_description_Valid() const{
    return m_expenditure_description_isValid;
}

qint32 OAIScheduleE::getFileNumber() const {
    return m_file_number;
}
void OAIScheduleE::setFileNumber(const qint32 &file_number) {
    m_file_number = file_number;
    m_file_number_isSet = true;
}

bool OAIScheduleE::is_file_number_Set() const{
    return m_file_number_isSet;
}

bool OAIScheduleE::is_file_number_Valid() const{
    return m_file_number_isValid;
}

QString OAIScheduleE::getFilerFirstName() const {
    return m_filer_first_name;
}
void OAIScheduleE::setFilerFirstName(const QString &filer_first_name) {
    m_filer_first_name = filer_first_name;
    m_filer_first_name_isSet = true;
}

bool OAIScheduleE::is_filer_first_name_Set() const{
    return m_filer_first_name_isSet;
}

bool OAIScheduleE::is_filer_first_name_Valid() const{
    return m_filer_first_name_isValid;
}

QString OAIScheduleE::getFilerLastName() const {
    return m_filer_last_name;
}
void OAIScheduleE::setFilerLastName(const QString &filer_last_name) {
    m_filer_last_name = filer_last_name;
    m_filer_last_name_isSet = true;
}

bool OAIScheduleE::is_filer_last_name_Set() const{
    return m_filer_last_name_isSet;
}

bool OAIScheduleE::is_filer_last_name_Valid() const{
    return m_filer_last_name_isValid;
}

QString OAIScheduleE::getFilerMiddleName() const {
    return m_filer_middle_name;
}
void OAIScheduleE::setFilerMiddleName(const QString &filer_middle_name) {
    m_filer_middle_name = filer_middle_name;
    m_filer_middle_name_isSet = true;
}

bool OAIScheduleE::is_filer_middle_name_Set() const{
    return m_filer_middle_name_isSet;
}

bool OAIScheduleE::is_filer_middle_name_Valid() const{
    return m_filer_middle_name_isValid;
}

QString OAIScheduleE::getFilerPrefix() const {
    return m_filer_prefix;
}
void OAIScheduleE::setFilerPrefix(const QString &filer_prefix) {
    m_filer_prefix = filer_prefix;
    m_filer_prefix_isSet = true;
}

bool OAIScheduleE::is_filer_prefix_Set() const{
    return m_filer_prefix_isSet;
}

bool OAIScheduleE::is_filer_prefix_Valid() const{
    return m_filer_prefix_isValid;
}

QString OAIScheduleE::getFilerSuffix() const {
    return m_filer_suffix;
}
void OAIScheduleE::setFilerSuffix(const QString &filer_suffix) {
    m_filer_suffix = filer_suffix;
    m_filer_suffix_isSet = true;
}

bool OAIScheduleE::is_filer_suffix_Set() const{
    return m_filer_suffix_isSet;
}

bool OAIScheduleE::is_filer_suffix_Valid() const{
    return m_filer_suffix_isValid;
}

QDate OAIScheduleE::getFilingDate() const {
    return m_filing_date;
}
void OAIScheduleE::setFilingDate(const QDate &filing_date) {
    m_filing_date = filing_date;
    m_filing_date_isSet = true;
}

bool OAIScheduleE::is_filing_date_Set() const{
    return m_filing_date_isSet;
}

bool OAIScheduleE::is_filing_date_Valid() const{
    return m_filing_date_isValid;
}

QString OAIScheduleE::getFilingForm() const {
    return m_filing_form;
}
void OAIScheduleE::setFilingForm(const QString &filing_form) {
    m_filing_form = filing_form;
    m_filing_form_isSet = true;
}

bool OAIScheduleE::is_filing_form_Set() const{
    return m_filing_form_isSet;
}

bool OAIScheduleE::is_filing_form_Valid() const{
    return m_filing_form_isValid;
}

QString OAIScheduleE::getImageNumber() const {
    return m_image_number;
}
void OAIScheduleE::setImageNumber(const QString &image_number) {
    m_image_number = image_number;
    m_image_number_isSet = true;
}

bool OAIScheduleE::is_image_number_Set() const{
    return m_image_number_isSet;
}

bool OAIScheduleE::is_image_number_Valid() const{
    return m_image_number_isValid;
}

QDate OAIScheduleE::getIndependentSignDate() const {
    return m_independent_sign_date;
}
void OAIScheduleE::setIndependentSignDate(const QDate &independent_sign_date) {
    m_independent_sign_date = independent_sign_date;
    m_independent_sign_date_isSet = true;
}

bool OAIScheduleE::is_independent_sign_date_Set() const{
    return m_independent_sign_date_isSet;
}

bool OAIScheduleE::is_independent_sign_date_Valid() const{
    return m_independent_sign_date_isValid;
}

QString OAIScheduleE::getIndependentSignName() const {
    return m_independent_sign_name;
}
void OAIScheduleE::setIndependentSignName(const QString &independent_sign_name) {
    m_independent_sign_name = independent_sign_name;
    m_independent_sign_name_isSet = true;
}

bool OAIScheduleE::is_independent_sign_name_Set() const{
    return m_independent_sign_name_isSet;
}

bool OAIScheduleE::is_independent_sign_name_Valid() const{
    return m_independent_sign_name_isValid;
}

bool OAIScheduleE::isIsNotice() const {
    return m_is_notice;
}
void OAIScheduleE::setIsNotice(const bool &is_notice) {
    m_is_notice = is_notice;
    m_is_notice_isSet = true;
}

bool OAIScheduleE::is_is_notice_Set() const{
    return m_is_notice_isSet;
}

bool OAIScheduleE::is_is_notice_Valid() const{
    return m_is_notice_isValid;
}

QString OAIScheduleE::getLineNumber() const {
    return m_line_number;
}
void OAIScheduleE::setLineNumber(const QString &line_number) {
    m_line_number = line_number;
    m_line_number_isSet = true;
}

bool OAIScheduleE::is_line_number_Set() const{
    return m_line_number_isSet;
}

bool OAIScheduleE::is_line_number_Valid() const{
    return m_line_number_isValid;
}

qint32 OAIScheduleE::getLinkId() const {
    return m_link_id;
}
void OAIScheduleE::setLinkId(const qint32 &link_id) {
    m_link_id = link_id;
    m_link_id_isSet = true;
}

bool OAIScheduleE::is_link_id_Set() const{
    return m_link_id_isSet;
}

bool OAIScheduleE::is_link_id_Valid() const{
    return m_link_id_isValid;
}

QString OAIScheduleE::getMemoCode() const {
    return m_memo_code;
}
void OAIScheduleE::setMemoCode(const QString &memo_code) {
    m_memo_code = memo_code;
    m_memo_code_isSet = true;
}

bool OAIScheduleE::is_memo_code_Set() const{
    return m_memo_code_isSet;
}

bool OAIScheduleE::is_memo_code_Valid() const{
    return m_memo_code_isValid;
}

QString OAIScheduleE::getMemoCodeFull() const {
    return m_memo_code_full;
}
void OAIScheduleE::setMemoCodeFull(const QString &memo_code_full) {
    m_memo_code_full = memo_code_full;
    m_memo_code_full_isSet = true;
}

bool OAIScheduleE::is_memo_code_full_Set() const{
    return m_memo_code_full_isSet;
}

bool OAIScheduleE::is_memo_code_full_Valid() const{
    return m_memo_code_full_isValid;
}

QString OAIScheduleE::getMemoText() const {
    return m_memo_text;
}
void OAIScheduleE::setMemoText(const QString &memo_text) {
    m_memo_text = memo_text;
    m_memo_text_isSet = true;
}

bool OAIScheduleE::is_memo_text_Set() const{
    return m_memo_text_isSet;
}

bool OAIScheduleE::is_memo_text_Valid() const{
    return m_memo_text_isValid;
}

bool OAIScheduleE::isMemoedSubtotal() const {
    return m_memoed_subtotal;
}
void OAIScheduleE::setMemoedSubtotal(const bool &memoed_subtotal) {
    m_memoed_subtotal = memoed_subtotal;
    m_memoed_subtotal_isSet = true;
}

bool OAIScheduleE::is_memoed_subtotal_Set() const{
    return m_memoed_subtotal_isSet;
}

bool OAIScheduleE::is_memoed_subtotal_Valid() const{
    return m_memoed_subtotal_isValid;
}

bool OAIScheduleE::isMostRecent() const {
    return m_most_recent;
}
void OAIScheduleE::setMostRecent(const bool &most_recent) {
    m_most_recent = most_recent;
    m_most_recent_isSet = true;
}

bool OAIScheduleE::is_most_recent_Set() const{
    return m_most_recent_isSet;
}

bool OAIScheduleE::is_most_recent_Valid() const{
    return m_most_recent_isValid;
}

QDate OAIScheduleE::getNotaryCommissionExpirationDate() const {
    return m_notary_commission_expiration_date;
}
void OAIScheduleE::setNotaryCommissionExpirationDate(const QDate &notary_commission_expiration_date) {
    m_notary_commission_expiration_date = notary_commission_expiration_date;
    m_notary_commission_expiration_date_isSet = true;
}

bool OAIScheduleE::is_notary_commission_expiration_date_Set() const{
    return m_notary_commission_expiration_date_isSet;
}

bool OAIScheduleE::is_notary_commission_expiration_date_Valid() const{
    return m_notary_commission_expiration_date_isValid;
}

QDate OAIScheduleE::getNotarySignDate() const {
    return m_notary_sign_date;
}
void OAIScheduleE::setNotarySignDate(const QDate &notary_sign_date) {
    m_notary_sign_date = notary_sign_date;
    m_notary_sign_date_isSet = true;
}

bool OAIScheduleE::is_notary_sign_date_Set() const{
    return m_notary_sign_date_isSet;
}

bool OAIScheduleE::is_notary_sign_date_Valid() const{
    return m_notary_sign_date_isValid;
}

QString OAIScheduleE::getNotarySignName() const {
    return m_notary_sign_name;
}
void OAIScheduleE::setNotarySignName(const QString &notary_sign_name) {
    m_notary_sign_name = notary_sign_name;
    m_notary_sign_name_isSet = true;
}

bool OAIScheduleE::is_notary_sign_name_Set() const{
    return m_notary_sign_name_isSet;
}

bool OAIScheduleE::is_notary_sign_name_Valid() const{
    return m_notary_sign_name_isValid;
}

double OAIScheduleE::getOfficeTotalYtd() const {
    return m_office_total_ytd;
}
void OAIScheduleE::setOfficeTotalYtd(const double &office_total_ytd) {
    m_office_total_ytd = office_total_ytd;
    m_office_total_ytd_isSet = true;
}

bool OAIScheduleE::is_office_total_ytd_Set() const{
    return m_office_total_ytd_isSet;
}

bool OAIScheduleE::is_office_total_ytd_Valid() const{
    return m_office_total_ytd_isValid;
}

QString OAIScheduleE::getOriginalSubId() const {
    return m_original_sub_id;
}
void OAIScheduleE::setOriginalSubId(const QString &original_sub_id) {
    m_original_sub_id = original_sub_id;
    m_original_sub_id_isSet = true;
}

bool OAIScheduleE::is_original_sub_id_Set() const{
    return m_original_sub_id_isSet;
}

bool OAIScheduleE::is_original_sub_id_Valid() const{
    return m_original_sub_id_isValid;
}

QString OAIScheduleE::getPayeeCity() const {
    return m_payee_city;
}
void OAIScheduleE::setPayeeCity(const QString &payee_city) {
    m_payee_city = payee_city;
    m_payee_city_isSet = true;
}

bool OAIScheduleE::is_payee_city_Set() const{
    return m_payee_city_isSet;
}

bool OAIScheduleE::is_payee_city_Valid() const{
    return m_payee_city_isValid;
}

QString OAIScheduleE::getPayeeFirstName() const {
    return m_payee_first_name;
}
void OAIScheduleE::setPayeeFirstName(const QString &payee_first_name) {
    m_payee_first_name = payee_first_name;
    m_payee_first_name_isSet = true;
}

bool OAIScheduleE::is_payee_first_name_Set() const{
    return m_payee_first_name_isSet;
}

bool OAIScheduleE::is_payee_first_name_Valid() const{
    return m_payee_first_name_isValid;
}

QString OAIScheduleE::getPayeeLastName() const {
    return m_payee_last_name;
}
void OAIScheduleE::setPayeeLastName(const QString &payee_last_name) {
    m_payee_last_name = payee_last_name;
    m_payee_last_name_isSet = true;
}

bool OAIScheduleE::is_payee_last_name_Set() const{
    return m_payee_last_name_isSet;
}

bool OAIScheduleE::is_payee_last_name_Valid() const{
    return m_payee_last_name_isValid;
}

QString OAIScheduleE::getPayeeMiddleName() const {
    return m_payee_middle_name;
}
void OAIScheduleE::setPayeeMiddleName(const QString &payee_middle_name) {
    m_payee_middle_name = payee_middle_name;
    m_payee_middle_name_isSet = true;
}

bool OAIScheduleE::is_payee_middle_name_Set() const{
    return m_payee_middle_name_isSet;
}

bool OAIScheduleE::is_payee_middle_name_Valid() const{
    return m_payee_middle_name_isValid;
}

QString OAIScheduleE::getPayeeName() const {
    return m_payee_name;
}
void OAIScheduleE::setPayeeName(const QString &payee_name) {
    m_payee_name = payee_name;
    m_payee_name_isSet = true;
}

bool OAIScheduleE::is_payee_name_Set() const{
    return m_payee_name_isSet;
}

bool OAIScheduleE::is_payee_name_Valid() const{
    return m_payee_name_isValid;
}

QString OAIScheduleE::getPayeePrefix() const {
    return m_payee_prefix;
}
void OAIScheduleE::setPayeePrefix(const QString &payee_prefix) {
    m_payee_prefix = payee_prefix;
    m_payee_prefix_isSet = true;
}

bool OAIScheduleE::is_payee_prefix_Set() const{
    return m_payee_prefix_isSet;
}

bool OAIScheduleE::is_payee_prefix_Valid() const{
    return m_payee_prefix_isValid;
}

QString OAIScheduleE::getPayeeState() const {
    return m_payee_state;
}
void OAIScheduleE::setPayeeState(const QString &payee_state) {
    m_payee_state = payee_state;
    m_payee_state_isSet = true;
}

bool OAIScheduleE::is_payee_state_Set() const{
    return m_payee_state_isSet;
}

bool OAIScheduleE::is_payee_state_Valid() const{
    return m_payee_state_isValid;
}

QString OAIScheduleE::getPayeeStreet1() const {
    return m_payee_street_1;
}
void OAIScheduleE::setPayeeStreet1(const QString &payee_street_1) {
    m_payee_street_1 = payee_street_1;
    m_payee_street_1_isSet = true;
}

bool OAIScheduleE::is_payee_street_1_Set() const{
    return m_payee_street_1_isSet;
}

bool OAIScheduleE::is_payee_street_1_Valid() const{
    return m_payee_street_1_isValid;
}

QString OAIScheduleE::getPayeeStreet2() const {
    return m_payee_street_2;
}
void OAIScheduleE::setPayeeStreet2(const QString &payee_street_2) {
    m_payee_street_2 = payee_street_2;
    m_payee_street_2_isSet = true;
}

bool OAIScheduleE::is_payee_street_2_Set() const{
    return m_payee_street_2_isSet;
}

bool OAIScheduleE::is_payee_street_2_Valid() const{
    return m_payee_street_2_isValid;
}

QString OAIScheduleE::getPayeeSuffix() const {
    return m_payee_suffix;
}
void OAIScheduleE::setPayeeSuffix(const QString &payee_suffix) {
    m_payee_suffix = payee_suffix;
    m_payee_suffix_isSet = true;
}

bool OAIScheduleE::is_payee_suffix_Set() const{
    return m_payee_suffix_isSet;
}

bool OAIScheduleE::is_payee_suffix_Valid() const{
    return m_payee_suffix_isValid;
}

QString OAIScheduleE::getPayeeZip() const {
    return m_payee_zip;
}
void OAIScheduleE::setPayeeZip(const QString &payee_zip) {
    m_payee_zip = payee_zip;
    m_payee_zip_isSet = true;
}

bool OAIScheduleE::is_payee_zip_Set() const{
    return m_payee_zip_isSet;
}

bool OAIScheduleE::is_payee_zip_Valid() const{
    return m_payee_zip_isValid;
}

QString OAIScheduleE::getPdfUrl() const {
    return m_pdf_url;
}
void OAIScheduleE::setPdfUrl(const QString &pdf_url) {
    m_pdf_url = pdf_url;
    m_pdf_url_isSet = true;
}

bool OAIScheduleE::is_pdf_url_Set() const{
    return m_pdf_url_isSet;
}

bool OAIScheduleE::is_pdf_url_Valid() const{
    return m_pdf_url_isValid;
}

qint32 OAIScheduleE::getPreviousFileNumber() const {
    return m_previous_file_number;
}
void OAIScheduleE::setPreviousFileNumber(const qint32 &previous_file_number) {
    m_previous_file_number = previous_file_number;
    m_previous_file_number_isSet = true;
}

bool OAIScheduleE::is_previous_file_number_Set() const{
    return m_previous_file_number_isSet;
}

bool OAIScheduleE::is_previous_file_number_Valid() const{
    return m_previous_file_number_isValid;
}

QString OAIScheduleE::getReportType() const {
    return m_report_type;
}
void OAIScheduleE::setReportType(const QString &report_type) {
    m_report_type = report_type;
    m_report_type_isSet = true;
}

bool OAIScheduleE::is_report_type_Set() const{
    return m_report_type_isSet;
}

bool OAIScheduleE::is_report_type_Valid() const{
    return m_report_type_isValid;
}

qint32 OAIScheduleE::getReportYear() const {
    return m_report_year;
}
void OAIScheduleE::setReportYear(const qint32 &report_year) {
    m_report_year = report_year;
    m_report_year_isSet = true;
}

bool OAIScheduleE::is_report_year_Set() const{
    return m_report_year_isSet;
}

bool OAIScheduleE::is_report_year_Valid() const{
    return m_report_year_isValid;
}

QString OAIScheduleE::getScheduleType() const {
    return m_schedule_type;
}
void OAIScheduleE::setScheduleType(const QString &schedule_type) {
    m_schedule_type = schedule_type;
    m_schedule_type_isSet = true;
}

bool OAIScheduleE::is_schedule_type_Set() const{
    return m_schedule_type_isSet;
}

bool OAIScheduleE::is_schedule_type_Valid() const{
    return m_schedule_type_isValid;
}

QString OAIScheduleE::getScheduleTypeFull() const {
    return m_schedule_type_full;
}
void OAIScheduleE::setScheduleTypeFull(const QString &schedule_type_full) {
    m_schedule_type_full = schedule_type_full;
    m_schedule_type_full_isSet = true;
}

bool OAIScheduleE::is_schedule_type_full_Set() const{
    return m_schedule_type_full_isSet;
}

bool OAIScheduleE::is_schedule_type_full_Valid() const{
    return m_schedule_type_full_isValid;
}

QString OAIScheduleE::getSubId() const {
    return m_sub_id;
}
void OAIScheduleE::setSubId(const QString &sub_id) {
    m_sub_id = sub_id;
    m_sub_id_isSet = true;
}

bool OAIScheduleE::is_sub_id_Set() const{
    return m_sub_id_isSet;
}

bool OAIScheduleE::is_sub_id_Valid() const{
    return m_sub_id_isValid;
}

QString OAIScheduleE::getSupportOpposeIndicator() const {
    return m_support_oppose_indicator;
}
void OAIScheduleE::setSupportOpposeIndicator(const QString &support_oppose_indicator) {
    m_support_oppose_indicator = support_oppose_indicator;
    m_support_oppose_indicator_isSet = true;
}

bool OAIScheduleE::is_support_oppose_indicator_Set() const{
    return m_support_oppose_indicator_isSet;
}

bool OAIScheduleE::is_support_oppose_indicator_Valid() const{
    return m_support_oppose_indicator_isValid;
}

QString OAIScheduleE::getTransactionId() const {
    return m_transaction_id;
}
void OAIScheduleE::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAIScheduleE::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAIScheduleE::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

bool OAIScheduleE::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_code_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amendment_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amendment_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_back_reference_schedule_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_back_reference_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_middle_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_office_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_office_district_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_office_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_party_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_code_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conduit_committee_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conduit_committee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conduit_committee_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conduit_committee_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conduit_committee_street1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conduit_committee_street2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conduit_committee_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dissemination_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_type_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expenditure_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expenditure_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expenditure_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filer_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filer_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filer_middle_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filer_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filer_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filing_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filing_form_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_independent_sign_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_independent_sign_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_notice_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memo_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memo_code_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memo_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memoed_subtotal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_most_recent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notary_commission_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notary_sign_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notary_sign_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_office_total_ytd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_sub_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_middle_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_street_1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_street_2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pdf_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_file_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_type_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_oppose_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduleE::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
