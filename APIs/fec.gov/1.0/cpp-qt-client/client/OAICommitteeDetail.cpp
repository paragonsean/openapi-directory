/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommitteeDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommitteeDetail::OAICommitteeDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommitteeDetail::OAICommitteeDetail() {
    this->initializeModel();
}

OAICommitteeDetail::~OAICommitteeDetail() {}

void OAICommitteeDetail::initializeModel() {

    m_affiliated_committee_name_isSet = false;
    m_affiliated_committee_name_isValid = false;

    m_candidate_ids_isSet = false;
    m_candidate_ids_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_committee_id_isSet = false;
    m_committee_id_isValid = false;

    m_committee_type_isSet = false;
    m_committee_type_isValid = false;

    m_committee_type_full_isSet = false;
    m_committee_type_full_isValid = false;

    m_custodian_city_isSet = false;
    m_custodian_city_isValid = false;

    m_custodian_name_1_isSet = false;
    m_custodian_name_1_isValid = false;

    m_custodian_name_2_isSet = false;
    m_custodian_name_2_isValid = false;

    m_custodian_name_full_isSet = false;
    m_custodian_name_full_isValid = false;

    m_custodian_name_middle_isSet = false;
    m_custodian_name_middle_isValid = false;

    m_custodian_name_prefix_isSet = false;
    m_custodian_name_prefix_isValid = false;

    m_custodian_name_suffix_isSet = false;
    m_custodian_name_suffix_isValid = false;

    m_custodian_name_title_isSet = false;
    m_custodian_name_title_isValid = false;

    m_custodian_phone_isSet = false;
    m_custodian_phone_isValid = false;

    m_custodian_state_isSet = false;
    m_custodian_state_isValid = false;

    m_custodian_street_1_isSet = false;
    m_custodian_street_1_isValid = false;

    m_custodian_street_2_isSet = false;
    m_custodian_street_2_isValid = false;

    m_custodian_zip_isSet = false;
    m_custodian_zip_isValid = false;

    m_cycles_isSet = false;
    m_cycles_isValid = false;

    m_designation_isSet = false;
    m_designation_isValid = false;

    m_designation_full_isSet = false;
    m_designation_full_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_fax_isSet = false;
    m_fax_isValid = false;

    m_filing_frequency_isSet = false;
    m_filing_frequency_isValid = false;

    m_first_f1_date_isSet = false;
    m_first_f1_date_isValid = false;

    m_first_file_date_isSet = false;
    m_first_file_date_isValid = false;

    m_form_type_isSet = false;
    m_form_type_isValid = false;

    m_jfc_committee_isSet = false;
    m_jfc_committee_isValid = false;

    m_last_f1_date_isSet = false;
    m_last_f1_date_isValid = false;

    m_last_file_date_isSet = false;
    m_last_file_date_isValid = false;

    m_leadership_pac_isSet = false;
    m_leadership_pac_isValid = false;

    m_lobbyist_registrant_pac_isSet = false;
    m_lobbyist_registrant_pac_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_organization_type_isSet = false;
    m_organization_type_isValid = false;

    m_organization_type_full_isSet = false;
    m_organization_type_full_isValid = false;

    m_party_isSet = false;
    m_party_isValid = false;

    m_party_full_isSet = false;
    m_party_full_isValid = false;

    m_party_type_isSet = false;
    m_party_type_isValid = false;

    m_party_type_full_isSet = false;
    m_party_type_full_isValid = false;

    m_sponsor_candidate_ids_isSet = false;
    m_sponsor_candidate_ids_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_full_isSet = false;
    m_state_full_isValid = false;

    m_street_1_isSet = false;
    m_street_1_isValid = false;

    m_street_2_isSet = false;
    m_street_2_isValid = false;

    m_treasurer_city_isSet = false;
    m_treasurer_city_isValid = false;

    m_treasurer_name_isSet = false;
    m_treasurer_name_isValid = false;

    m_treasurer_name_1_isSet = false;
    m_treasurer_name_1_isValid = false;

    m_treasurer_name_2_isSet = false;
    m_treasurer_name_2_isValid = false;

    m_treasurer_name_middle_isSet = false;
    m_treasurer_name_middle_isValid = false;

    m_treasurer_name_prefix_isSet = false;
    m_treasurer_name_prefix_isValid = false;

    m_treasurer_name_suffix_isSet = false;
    m_treasurer_name_suffix_isValid = false;

    m_treasurer_name_title_isSet = false;
    m_treasurer_name_title_isValid = false;

    m_treasurer_phone_isSet = false;
    m_treasurer_phone_isValid = false;

    m_treasurer_state_isSet = false;
    m_treasurer_state_isValid = false;

    m_treasurer_street_1_isSet = false;
    m_treasurer_street_1_isValid = false;

    m_treasurer_street_2_isSet = false;
    m_treasurer_street_2_isValid = false;

    m_treasurer_zip_isSet = false;
    m_treasurer_zip_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;

    m_zip_isSet = false;
    m_zip_isValid = false;
}

void OAICommitteeDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommitteeDetail::fromJsonObject(QJsonObject json) {

    m_affiliated_committee_name_isValid = ::OpenAPI::fromJsonValue(m_affiliated_committee_name, json[QString("affiliated_committee_name")]);
    m_affiliated_committee_name_isSet = !json[QString("affiliated_committee_name")].isNull() && m_affiliated_committee_name_isValid;

    m_candidate_ids_isValid = ::OpenAPI::fromJsonValue(m_candidate_ids, json[QString("candidate_ids")]);
    m_candidate_ids_isSet = !json[QString("candidate_ids")].isNull() && m_candidate_ids_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_committee_id_isValid = ::OpenAPI::fromJsonValue(m_committee_id, json[QString("committee_id")]);
    m_committee_id_isSet = !json[QString("committee_id")].isNull() && m_committee_id_isValid;

    m_committee_type_isValid = ::OpenAPI::fromJsonValue(m_committee_type, json[QString("committee_type")]);
    m_committee_type_isSet = !json[QString("committee_type")].isNull() && m_committee_type_isValid;

    m_committee_type_full_isValid = ::OpenAPI::fromJsonValue(m_committee_type_full, json[QString("committee_type_full")]);
    m_committee_type_full_isSet = !json[QString("committee_type_full")].isNull() && m_committee_type_full_isValid;

    m_custodian_city_isValid = ::OpenAPI::fromJsonValue(m_custodian_city, json[QString("custodian_city")]);
    m_custodian_city_isSet = !json[QString("custodian_city")].isNull() && m_custodian_city_isValid;

    m_custodian_name_1_isValid = ::OpenAPI::fromJsonValue(m_custodian_name_1, json[QString("custodian_name_1")]);
    m_custodian_name_1_isSet = !json[QString("custodian_name_1")].isNull() && m_custodian_name_1_isValid;

    m_custodian_name_2_isValid = ::OpenAPI::fromJsonValue(m_custodian_name_2, json[QString("custodian_name_2")]);
    m_custodian_name_2_isSet = !json[QString("custodian_name_2")].isNull() && m_custodian_name_2_isValid;

    m_custodian_name_full_isValid = ::OpenAPI::fromJsonValue(m_custodian_name_full, json[QString("custodian_name_full")]);
    m_custodian_name_full_isSet = !json[QString("custodian_name_full")].isNull() && m_custodian_name_full_isValid;

    m_custodian_name_middle_isValid = ::OpenAPI::fromJsonValue(m_custodian_name_middle, json[QString("custodian_name_middle")]);
    m_custodian_name_middle_isSet = !json[QString("custodian_name_middle")].isNull() && m_custodian_name_middle_isValid;

    m_custodian_name_prefix_isValid = ::OpenAPI::fromJsonValue(m_custodian_name_prefix, json[QString("custodian_name_prefix")]);
    m_custodian_name_prefix_isSet = !json[QString("custodian_name_prefix")].isNull() && m_custodian_name_prefix_isValid;

    m_custodian_name_suffix_isValid = ::OpenAPI::fromJsonValue(m_custodian_name_suffix, json[QString("custodian_name_suffix")]);
    m_custodian_name_suffix_isSet = !json[QString("custodian_name_suffix")].isNull() && m_custodian_name_suffix_isValid;

    m_custodian_name_title_isValid = ::OpenAPI::fromJsonValue(m_custodian_name_title, json[QString("custodian_name_title")]);
    m_custodian_name_title_isSet = !json[QString("custodian_name_title")].isNull() && m_custodian_name_title_isValid;

    m_custodian_phone_isValid = ::OpenAPI::fromJsonValue(m_custodian_phone, json[QString("custodian_phone")]);
    m_custodian_phone_isSet = !json[QString("custodian_phone")].isNull() && m_custodian_phone_isValid;

    m_custodian_state_isValid = ::OpenAPI::fromJsonValue(m_custodian_state, json[QString("custodian_state")]);
    m_custodian_state_isSet = !json[QString("custodian_state")].isNull() && m_custodian_state_isValid;

    m_custodian_street_1_isValid = ::OpenAPI::fromJsonValue(m_custodian_street_1, json[QString("custodian_street_1")]);
    m_custodian_street_1_isSet = !json[QString("custodian_street_1")].isNull() && m_custodian_street_1_isValid;

    m_custodian_street_2_isValid = ::OpenAPI::fromJsonValue(m_custodian_street_2, json[QString("custodian_street_2")]);
    m_custodian_street_2_isSet = !json[QString("custodian_street_2")].isNull() && m_custodian_street_2_isValid;

    m_custodian_zip_isValid = ::OpenAPI::fromJsonValue(m_custodian_zip, json[QString("custodian_zip")]);
    m_custodian_zip_isSet = !json[QString("custodian_zip")].isNull() && m_custodian_zip_isValid;

    m_cycles_isValid = ::OpenAPI::fromJsonValue(m_cycles, json[QString("cycles")]);
    m_cycles_isSet = !json[QString("cycles")].isNull() && m_cycles_isValid;

    m_designation_isValid = ::OpenAPI::fromJsonValue(m_designation, json[QString("designation")]);
    m_designation_isSet = !json[QString("designation")].isNull() && m_designation_isValid;

    m_designation_full_isValid = ::OpenAPI::fromJsonValue(m_designation_full, json[QString("designation_full")]);
    m_designation_full_isSet = !json[QString("designation_full")].isNull() && m_designation_full_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_fax_isValid = ::OpenAPI::fromJsonValue(m_fax, json[QString("fax")]);
    m_fax_isSet = !json[QString("fax")].isNull() && m_fax_isValid;

    m_filing_frequency_isValid = ::OpenAPI::fromJsonValue(m_filing_frequency, json[QString("filing_frequency")]);
    m_filing_frequency_isSet = !json[QString("filing_frequency")].isNull() && m_filing_frequency_isValid;

    m_first_f1_date_isValid = ::OpenAPI::fromJsonValue(m_first_f1_date, json[QString("first_f1_date")]);
    m_first_f1_date_isSet = !json[QString("first_f1_date")].isNull() && m_first_f1_date_isValid;

    m_first_file_date_isValid = ::OpenAPI::fromJsonValue(m_first_file_date, json[QString("first_file_date")]);
    m_first_file_date_isSet = !json[QString("first_file_date")].isNull() && m_first_file_date_isValid;

    m_form_type_isValid = ::OpenAPI::fromJsonValue(m_form_type, json[QString("form_type")]);
    m_form_type_isSet = !json[QString("form_type")].isNull() && m_form_type_isValid;

    m_jfc_committee_isValid = ::OpenAPI::fromJsonValue(m_jfc_committee, json[QString("jfc_committee")]);
    m_jfc_committee_isSet = !json[QString("jfc_committee")].isNull() && m_jfc_committee_isValid;

    m_last_f1_date_isValid = ::OpenAPI::fromJsonValue(m_last_f1_date, json[QString("last_f1_date")]);
    m_last_f1_date_isSet = !json[QString("last_f1_date")].isNull() && m_last_f1_date_isValid;

    m_last_file_date_isValid = ::OpenAPI::fromJsonValue(m_last_file_date, json[QString("last_file_date")]);
    m_last_file_date_isSet = !json[QString("last_file_date")].isNull() && m_last_file_date_isValid;

    m_leadership_pac_isValid = ::OpenAPI::fromJsonValue(m_leadership_pac, json[QString("leadership_pac")]);
    m_leadership_pac_isSet = !json[QString("leadership_pac")].isNull() && m_leadership_pac_isValid;

    m_lobbyist_registrant_pac_isValid = ::OpenAPI::fromJsonValue(m_lobbyist_registrant_pac, json[QString("lobbyist_registrant_pac")]);
    m_lobbyist_registrant_pac_isSet = !json[QString("lobbyist_registrant_pac")].isNull() && m_lobbyist_registrant_pac_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_organization_type_isValid = ::OpenAPI::fromJsonValue(m_organization_type, json[QString("organization_type")]);
    m_organization_type_isSet = !json[QString("organization_type")].isNull() && m_organization_type_isValid;

    m_organization_type_full_isValid = ::OpenAPI::fromJsonValue(m_organization_type_full, json[QString("organization_type_full")]);
    m_organization_type_full_isSet = !json[QString("organization_type_full")].isNull() && m_organization_type_full_isValid;

    m_party_isValid = ::OpenAPI::fromJsonValue(m_party, json[QString("party")]);
    m_party_isSet = !json[QString("party")].isNull() && m_party_isValid;

    m_party_full_isValid = ::OpenAPI::fromJsonValue(m_party_full, json[QString("party_full")]);
    m_party_full_isSet = !json[QString("party_full")].isNull() && m_party_full_isValid;

    m_party_type_isValid = ::OpenAPI::fromJsonValue(m_party_type, json[QString("party_type")]);
    m_party_type_isSet = !json[QString("party_type")].isNull() && m_party_type_isValid;

    m_party_type_full_isValid = ::OpenAPI::fromJsonValue(m_party_type_full, json[QString("party_type_full")]);
    m_party_type_full_isSet = !json[QString("party_type_full")].isNull() && m_party_type_full_isValid;

    m_sponsor_candidate_ids_isValid = ::OpenAPI::fromJsonValue(m_sponsor_candidate_ids, json[QString("sponsor_candidate_ids")]);
    m_sponsor_candidate_ids_isSet = !json[QString("sponsor_candidate_ids")].isNull() && m_sponsor_candidate_ids_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_full_isValid = ::OpenAPI::fromJsonValue(m_state_full, json[QString("state_full")]);
    m_state_full_isSet = !json[QString("state_full")].isNull() && m_state_full_isValid;

    m_street_1_isValid = ::OpenAPI::fromJsonValue(m_street_1, json[QString("street_1")]);
    m_street_1_isSet = !json[QString("street_1")].isNull() && m_street_1_isValid;

    m_street_2_isValid = ::OpenAPI::fromJsonValue(m_street_2, json[QString("street_2")]);
    m_street_2_isSet = !json[QString("street_2")].isNull() && m_street_2_isValid;

    m_treasurer_city_isValid = ::OpenAPI::fromJsonValue(m_treasurer_city, json[QString("treasurer_city")]);
    m_treasurer_city_isSet = !json[QString("treasurer_city")].isNull() && m_treasurer_city_isValid;

    m_treasurer_name_isValid = ::OpenAPI::fromJsonValue(m_treasurer_name, json[QString("treasurer_name")]);
    m_treasurer_name_isSet = !json[QString("treasurer_name")].isNull() && m_treasurer_name_isValid;

    m_treasurer_name_1_isValid = ::OpenAPI::fromJsonValue(m_treasurer_name_1, json[QString("treasurer_name_1")]);
    m_treasurer_name_1_isSet = !json[QString("treasurer_name_1")].isNull() && m_treasurer_name_1_isValid;

    m_treasurer_name_2_isValid = ::OpenAPI::fromJsonValue(m_treasurer_name_2, json[QString("treasurer_name_2")]);
    m_treasurer_name_2_isSet = !json[QString("treasurer_name_2")].isNull() && m_treasurer_name_2_isValid;

    m_treasurer_name_middle_isValid = ::OpenAPI::fromJsonValue(m_treasurer_name_middle, json[QString("treasurer_name_middle")]);
    m_treasurer_name_middle_isSet = !json[QString("treasurer_name_middle")].isNull() && m_treasurer_name_middle_isValid;

    m_treasurer_name_prefix_isValid = ::OpenAPI::fromJsonValue(m_treasurer_name_prefix, json[QString("treasurer_name_prefix")]);
    m_treasurer_name_prefix_isSet = !json[QString("treasurer_name_prefix")].isNull() && m_treasurer_name_prefix_isValid;

    m_treasurer_name_suffix_isValid = ::OpenAPI::fromJsonValue(m_treasurer_name_suffix, json[QString("treasurer_name_suffix")]);
    m_treasurer_name_suffix_isSet = !json[QString("treasurer_name_suffix")].isNull() && m_treasurer_name_suffix_isValid;

    m_treasurer_name_title_isValid = ::OpenAPI::fromJsonValue(m_treasurer_name_title, json[QString("treasurer_name_title")]);
    m_treasurer_name_title_isSet = !json[QString("treasurer_name_title")].isNull() && m_treasurer_name_title_isValid;

    m_treasurer_phone_isValid = ::OpenAPI::fromJsonValue(m_treasurer_phone, json[QString("treasurer_phone")]);
    m_treasurer_phone_isSet = !json[QString("treasurer_phone")].isNull() && m_treasurer_phone_isValid;

    m_treasurer_state_isValid = ::OpenAPI::fromJsonValue(m_treasurer_state, json[QString("treasurer_state")]);
    m_treasurer_state_isSet = !json[QString("treasurer_state")].isNull() && m_treasurer_state_isValid;

    m_treasurer_street_1_isValid = ::OpenAPI::fromJsonValue(m_treasurer_street_1, json[QString("treasurer_street_1")]);
    m_treasurer_street_1_isSet = !json[QString("treasurer_street_1")].isNull() && m_treasurer_street_1_isValid;

    m_treasurer_street_2_isValid = ::OpenAPI::fromJsonValue(m_treasurer_street_2, json[QString("treasurer_street_2")]);
    m_treasurer_street_2_isSet = !json[QString("treasurer_street_2")].isNull() && m_treasurer_street_2_isValid;

    m_treasurer_zip_isValid = ::OpenAPI::fromJsonValue(m_treasurer_zip, json[QString("treasurer_zip")]);
    m_treasurer_zip_isSet = !json[QString("treasurer_zip")].isNull() && m_treasurer_zip_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;

    m_zip_isValid = ::OpenAPI::fromJsonValue(m_zip, json[QString("zip")]);
    m_zip_isSet = !json[QString("zip")].isNull() && m_zip_isValid;
}

QString OAICommitteeDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommitteeDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_affiliated_committee_name_isSet) {
        obj.insert(QString("affiliated_committee_name"), ::OpenAPI::toJsonValue(m_affiliated_committee_name));
    }
    if (m_candidate_ids.size() > 0) {
        obj.insert(QString("candidate_ids"), ::OpenAPI::toJsonValue(m_candidate_ids));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_committee_id_isSet) {
        obj.insert(QString("committee_id"), ::OpenAPI::toJsonValue(m_committee_id));
    }
    if (m_committee_type_isSet) {
        obj.insert(QString("committee_type"), ::OpenAPI::toJsonValue(m_committee_type));
    }
    if (m_committee_type_full_isSet) {
        obj.insert(QString("committee_type_full"), ::OpenAPI::toJsonValue(m_committee_type_full));
    }
    if (m_custodian_city_isSet) {
        obj.insert(QString("custodian_city"), ::OpenAPI::toJsonValue(m_custodian_city));
    }
    if (m_custodian_name_1_isSet) {
        obj.insert(QString("custodian_name_1"), ::OpenAPI::toJsonValue(m_custodian_name_1));
    }
    if (m_custodian_name_2_isSet) {
        obj.insert(QString("custodian_name_2"), ::OpenAPI::toJsonValue(m_custodian_name_2));
    }
    if (m_custodian_name_full_isSet) {
        obj.insert(QString("custodian_name_full"), ::OpenAPI::toJsonValue(m_custodian_name_full));
    }
    if (m_custodian_name_middle_isSet) {
        obj.insert(QString("custodian_name_middle"), ::OpenAPI::toJsonValue(m_custodian_name_middle));
    }
    if (m_custodian_name_prefix_isSet) {
        obj.insert(QString("custodian_name_prefix"), ::OpenAPI::toJsonValue(m_custodian_name_prefix));
    }
    if (m_custodian_name_suffix_isSet) {
        obj.insert(QString("custodian_name_suffix"), ::OpenAPI::toJsonValue(m_custodian_name_suffix));
    }
    if (m_custodian_name_title_isSet) {
        obj.insert(QString("custodian_name_title"), ::OpenAPI::toJsonValue(m_custodian_name_title));
    }
    if (m_custodian_phone_isSet) {
        obj.insert(QString("custodian_phone"), ::OpenAPI::toJsonValue(m_custodian_phone));
    }
    if (m_custodian_state_isSet) {
        obj.insert(QString("custodian_state"), ::OpenAPI::toJsonValue(m_custodian_state));
    }
    if (m_custodian_street_1_isSet) {
        obj.insert(QString("custodian_street_1"), ::OpenAPI::toJsonValue(m_custodian_street_1));
    }
    if (m_custodian_street_2_isSet) {
        obj.insert(QString("custodian_street_2"), ::OpenAPI::toJsonValue(m_custodian_street_2));
    }
    if (m_custodian_zip_isSet) {
        obj.insert(QString("custodian_zip"), ::OpenAPI::toJsonValue(m_custodian_zip));
    }
    if (m_cycles.size() > 0) {
        obj.insert(QString("cycles"), ::OpenAPI::toJsonValue(m_cycles));
    }
    if (m_designation_isSet) {
        obj.insert(QString("designation"), ::OpenAPI::toJsonValue(m_designation));
    }
    if (m_designation_full_isSet) {
        obj.insert(QString("designation_full"), ::OpenAPI::toJsonValue(m_designation_full));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_fax_isSet) {
        obj.insert(QString("fax"), ::OpenAPI::toJsonValue(m_fax));
    }
    if (m_filing_frequency_isSet) {
        obj.insert(QString("filing_frequency"), ::OpenAPI::toJsonValue(m_filing_frequency));
    }
    if (m_first_f1_date_isSet) {
        obj.insert(QString("first_f1_date"), ::OpenAPI::toJsonValue(m_first_f1_date));
    }
    if (m_first_file_date_isSet) {
        obj.insert(QString("first_file_date"), ::OpenAPI::toJsonValue(m_first_file_date));
    }
    if (m_form_type_isSet) {
        obj.insert(QString("form_type"), ::OpenAPI::toJsonValue(m_form_type));
    }
    if (m_jfc_committee.size() > 0) {
        obj.insert(QString("jfc_committee"), ::OpenAPI::toJsonValue(m_jfc_committee));
    }
    if (m_last_f1_date_isSet) {
        obj.insert(QString("last_f1_date"), ::OpenAPI::toJsonValue(m_last_f1_date));
    }
    if (m_last_file_date_isSet) {
        obj.insert(QString("last_file_date"), ::OpenAPI::toJsonValue(m_last_file_date));
    }
    if (m_leadership_pac_isSet) {
        obj.insert(QString("leadership_pac"), ::OpenAPI::toJsonValue(m_leadership_pac));
    }
    if (m_lobbyist_registrant_pac_isSet) {
        obj.insert(QString("lobbyist_registrant_pac"), ::OpenAPI::toJsonValue(m_lobbyist_registrant_pac));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_organization_type_isSet) {
        obj.insert(QString("organization_type"), ::OpenAPI::toJsonValue(m_organization_type));
    }
    if (m_organization_type_full_isSet) {
        obj.insert(QString("organization_type_full"), ::OpenAPI::toJsonValue(m_organization_type_full));
    }
    if (m_party_isSet) {
        obj.insert(QString("party"), ::OpenAPI::toJsonValue(m_party));
    }
    if (m_party_full_isSet) {
        obj.insert(QString("party_full"), ::OpenAPI::toJsonValue(m_party_full));
    }
    if (m_party_type_isSet) {
        obj.insert(QString("party_type"), ::OpenAPI::toJsonValue(m_party_type));
    }
    if (m_party_type_full_isSet) {
        obj.insert(QString("party_type_full"), ::OpenAPI::toJsonValue(m_party_type_full));
    }
    if (m_sponsor_candidate_ids.size() > 0) {
        obj.insert(QString("sponsor_candidate_ids"), ::OpenAPI::toJsonValue(m_sponsor_candidate_ids));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_full_isSet) {
        obj.insert(QString("state_full"), ::OpenAPI::toJsonValue(m_state_full));
    }
    if (m_street_1_isSet) {
        obj.insert(QString("street_1"), ::OpenAPI::toJsonValue(m_street_1));
    }
    if (m_street_2_isSet) {
        obj.insert(QString("street_2"), ::OpenAPI::toJsonValue(m_street_2));
    }
    if (m_treasurer_city_isSet) {
        obj.insert(QString("treasurer_city"), ::OpenAPI::toJsonValue(m_treasurer_city));
    }
    if (m_treasurer_name_isSet) {
        obj.insert(QString("treasurer_name"), ::OpenAPI::toJsonValue(m_treasurer_name));
    }
    if (m_treasurer_name_1_isSet) {
        obj.insert(QString("treasurer_name_1"), ::OpenAPI::toJsonValue(m_treasurer_name_1));
    }
    if (m_treasurer_name_2_isSet) {
        obj.insert(QString("treasurer_name_2"), ::OpenAPI::toJsonValue(m_treasurer_name_2));
    }
    if (m_treasurer_name_middle_isSet) {
        obj.insert(QString("treasurer_name_middle"), ::OpenAPI::toJsonValue(m_treasurer_name_middle));
    }
    if (m_treasurer_name_prefix_isSet) {
        obj.insert(QString("treasurer_name_prefix"), ::OpenAPI::toJsonValue(m_treasurer_name_prefix));
    }
    if (m_treasurer_name_suffix_isSet) {
        obj.insert(QString("treasurer_name_suffix"), ::OpenAPI::toJsonValue(m_treasurer_name_suffix));
    }
    if (m_treasurer_name_title_isSet) {
        obj.insert(QString("treasurer_name_title"), ::OpenAPI::toJsonValue(m_treasurer_name_title));
    }
    if (m_treasurer_phone_isSet) {
        obj.insert(QString("treasurer_phone"), ::OpenAPI::toJsonValue(m_treasurer_phone));
    }
    if (m_treasurer_state_isSet) {
        obj.insert(QString("treasurer_state"), ::OpenAPI::toJsonValue(m_treasurer_state));
    }
    if (m_treasurer_street_1_isSet) {
        obj.insert(QString("treasurer_street_1"), ::OpenAPI::toJsonValue(m_treasurer_street_1));
    }
    if (m_treasurer_street_2_isSet) {
        obj.insert(QString("treasurer_street_2"), ::OpenAPI::toJsonValue(m_treasurer_street_2));
    }
    if (m_treasurer_zip_isSet) {
        obj.insert(QString("treasurer_zip"), ::OpenAPI::toJsonValue(m_treasurer_zip));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    if (m_zip_isSet) {
        obj.insert(QString("zip"), ::OpenAPI::toJsonValue(m_zip));
    }
    return obj;
}

QString OAICommitteeDetail::getAffiliatedCommitteeName() const {
    return m_affiliated_committee_name;
}
void OAICommitteeDetail::setAffiliatedCommitteeName(const QString &affiliated_committee_name) {
    m_affiliated_committee_name = affiliated_committee_name;
    m_affiliated_committee_name_isSet = true;
}

bool OAICommitteeDetail::is_affiliated_committee_name_Set() const{
    return m_affiliated_committee_name_isSet;
}

bool OAICommitteeDetail::is_affiliated_committee_name_Valid() const{
    return m_affiliated_committee_name_isValid;
}

QList<QString> OAICommitteeDetail::getCandidateIds() const {
    return m_candidate_ids;
}
void OAICommitteeDetail::setCandidateIds(const QList<QString> &candidate_ids) {
    m_candidate_ids = candidate_ids;
    m_candidate_ids_isSet = true;
}

bool OAICommitteeDetail::is_candidate_ids_Set() const{
    return m_candidate_ids_isSet;
}

bool OAICommitteeDetail::is_candidate_ids_Valid() const{
    return m_candidate_ids_isValid;
}

QString OAICommitteeDetail::getCity() const {
    return m_city;
}
void OAICommitteeDetail::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAICommitteeDetail::is_city_Set() const{
    return m_city_isSet;
}

bool OAICommitteeDetail::is_city_Valid() const{
    return m_city_isValid;
}

QString OAICommitteeDetail::getCommitteeId() const {
    return m_committee_id;
}
void OAICommitteeDetail::setCommitteeId(const QString &committee_id) {
    m_committee_id = committee_id;
    m_committee_id_isSet = true;
}

bool OAICommitteeDetail::is_committee_id_Set() const{
    return m_committee_id_isSet;
}

bool OAICommitteeDetail::is_committee_id_Valid() const{
    return m_committee_id_isValid;
}

QString OAICommitteeDetail::getCommitteeType() const {
    return m_committee_type;
}
void OAICommitteeDetail::setCommitteeType(const QString &committee_type) {
    m_committee_type = committee_type;
    m_committee_type_isSet = true;
}

bool OAICommitteeDetail::is_committee_type_Set() const{
    return m_committee_type_isSet;
}

bool OAICommitteeDetail::is_committee_type_Valid() const{
    return m_committee_type_isValid;
}

QString OAICommitteeDetail::getCommitteeTypeFull() const {
    return m_committee_type_full;
}
void OAICommitteeDetail::setCommitteeTypeFull(const QString &committee_type_full) {
    m_committee_type_full = committee_type_full;
    m_committee_type_full_isSet = true;
}

bool OAICommitteeDetail::is_committee_type_full_Set() const{
    return m_committee_type_full_isSet;
}

bool OAICommitteeDetail::is_committee_type_full_Valid() const{
    return m_committee_type_full_isValid;
}

QString OAICommitteeDetail::getCustodianCity() const {
    return m_custodian_city;
}
void OAICommitteeDetail::setCustodianCity(const QString &custodian_city) {
    m_custodian_city = custodian_city;
    m_custodian_city_isSet = true;
}

bool OAICommitteeDetail::is_custodian_city_Set() const{
    return m_custodian_city_isSet;
}

bool OAICommitteeDetail::is_custodian_city_Valid() const{
    return m_custodian_city_isValid;
}

QString OAICommitteeDetail::getCustodianName1() const {
    return m_custodian_name_1;
}
void OAICommitteeDetail::setCustodianName1(const QString &custodian_name_1) {
    m_custodian_name_1 = custodian_name_1;
    m_custodian_name_1_isSet = true;
}

bool OAICommitteeDetail::is_custodian_name_1_Set() const{
    return m_custodian_name_1_isSet;
}

bool OAICommitteeDetail::is_custodian_name_1_Valid() const{
    return m_custodian_name_1_isValid;
}

QString OAICommitteeDetail::getCustodianName2() const {
    return m_custodian_name_2;
}
void OAICommitteeDetail::setCustodianName2(const QString &custodian_name_2) {
    m_custodian_name_2 = custodian_name_2;
    m_custodian_name_2_isSet = true;
}

bool OAICommitteeDetail::is_custodian_name_2_Set() const{
    return m_custodian_name_2_isSet;
}

bool OAICommitteeDetail::is_custodian_name_2_Valid() const{
    return m_custodian_name_2_isValid;
}

QString OAICommitteeDetail::getCustodianNameFull() const {
    return m_custodian_name_full;
}
void OAICommitteeDetail::setCustodianNameFull(const QString &custodian_name_full) {
    m_custodian_name_full = custodian_name_full;
    m_custodian_name_full_isSet = true;
}

bool OAICommitteeDetail::is_custodian_name_full_Set() const{
    return m_custodian_name_full_isSet;
}

bool OAICommitteeDetail::is_custodian_name_full_Valid() const{
    return m_custodian_name_full_isValid;
}

QString OAICommitteeDetail::getCustodianNameMiddle() const {
    return m_custodian_name_middle;
}
void OAICommitteeDetail::setCustodianNameMiddle(const QString &custodian_name_middle) {
    m_custodian_name_middle = custodian_name_middle;
    m_custodian_name_middle_isSet = true;
}

bool OAICommitteeDetail::is_custodian_name_middle_Set() const{
    return m_custodian_name_middle_isSet;
}

bool OAICommitteeDetail::is_custodian_name_middle_Valid() const{
    return m_custodian_name_middle_isValid;
}

QString OAICommitteeDetail::getCustodianNamePrefix() const {
    return m_custodian_name_prefix;
}
void OAICommitteeDetail::setCustodianNamePrefix(const QString &custodian_name_prefix) {
    m_custodian_name_prefix = custodian_name_prefix;
    m_custodian_name_prefix_isSet = true;
}

bool OAICommitteeDetail::is_custodian_name_prefix_Set() const{
    return m_custodian_name_prefix_isSet;
}

bool OAICommitteeDetail::is_custodian_name_prefix_Valid() const{
    return m_custodian_name_prefix_isValid;
}

QString OAICommitteeDetail::getCustodianNameSuffix() const {
    return m_custodian_name_suffix;
}
void OAICommitteeDetail::setCustodianNameSuffix(const QString &custodian_name_suffix) {
    m_custodian_name_suffix = custodian_name_suffix;
    m_custodian_name_suffix_isSet = true;
}

bool OAICommitteeDetail::is_custodian_name_suffix_Set() const{
    return m_custodian_name_suffix_isSet;
}

bool OAICommitteeDetail::is_custodian_name_suffix_Valid() const{
    return m_custodian_name_suffix_isValid;
}

QString OAICommitteeDetail::getCustodianNameTitle() const {
    return m_custodian_name_title;
}
void OAICommitteeDetail::setCustodianNameTitle(const QString &custodian_name_title) {
    m_custodian_name_title = custodian_name_title;
    m_custodian_name_title_isSet = true;
}

bool OAICommitteeDetail::is_custodian_name_title_Set() const{
    return m_custodian_name_title_isSet;
}

bool OAICommitteeDetail::is_custodian_name_title_Valid() const{
    return m_custodian_name_title_isValid;
}

QString OAICommitteeDetail::getCustodianPhone() const {
    return m_custodian_phone;
}
void OAICommitteeDetail::setCustodianPhone(const QString &custodian_phone) {
    m_custodian_phone = custodian_phone;
    m_custodian_phone_isSet = true;
}

bool OAICommitteeDetail::is_custodian_phone_Set() const{
    return m_custodian_phone_isSet;
}

bool OAICommitteeDetail::is_custodian_phone_Valid() const{
    return m_custodian_phone_isValid;
}

QString OAICommitteeDetail::getCustodianState() const {
    return m_custodian_state;
}
void OAICommitteeDetail::setCustodianState(const QString &custodian_state) {
    m_custodian_state = custodian_state;
    m_custodian_state_isSet = true;
}

bool OAICommitteeDetail::is_custodian_state_Set() const{
    return m_custodian_state_isSet;
}

bool OAICommitteeDetail::is_custodian_state_Valid() const{
    return m_custodian_state_isValid;
}

QString OAICommitteeDetail::getCustodianStreet1() const {
    return m_custodian_street_1;
}
void OAICommitteeDetail::setCustodianStreet1(const QString &custodian_street_1) {
    m_custodian_street_1 = custodian_street_1;
    m_custodian_street_1_isSet = true;
}

bool OAICommitteeDetail::is_custodian_street_1_Set() const{
    return m_custodian_street_1_isSet;
}

bool OAICommitteeDetail::is_custodian_street_1_Valid() const{
    return m_custodian_street_1_isValid;
}

QString OAICommitteeDetail::getCustodianStreet2() const {
    return m_custodian_street_2;
}
void OAICommitteeDetail::setCustodianStreet2(const QString &custodian_street_2) {
    m_custodian_street_2 = custodian_street_2;
    m_custodian_street_2_isSet = true;
}

bool OAICommitteeDetail::is_custodian_street_2_Set() const{
    return m_custodian_street_2_isSet;
}

bool OAICommitteeDetail::is_custodian_street_2_Valid() const{
    return m_custodian_street_2_isValid;
}

QString OAICommitteeDetail::getCustodianZip() const {
    return m_custodian_zip;
}
void OAICommitteeDetail::setCustodianZip(const QString &custodian_zip) {
    m_custodian_zip = custodian_zip;
    m_custodian_zip_isSet = true;
}

bool OAICommitteeDetail::is_custodian_zip_Set() const{
    return m_custodian_zip_isSet;
}

bool OAICommitteeDetail::is_custodian_zip_Valid() const{
    return m_custodian_zip_isValid;
}

QList<qint32> OAICommitteeDetail::getCycles() const {
    return m_cycles;
}
void OAICommitteeDetail::setCycles(const QList<qint32> &cycles) {
    m_cycles = cycles;
    m_cycles_isSet = true;
}

bool OAICommitteeDetail::is_cycles_Set() const{
    return m_cycles_isSet;
}

bool OAICommitteeDetail::is_cycles_Valid() const{
    return m_cycles_isValid;
}

QString OAICommitteeDetail::getDesignation() const {
    return m_designation;
}
void OAICommitteeDetail::setDesignation(const QString &designation) {
    m_designation = designation;
    m_designation_isSet = true;
}

bool OAICommitteeDetail::is_designation_Set() const{
    return m_designation_isSet;
}

bool OAICommitteeDetail::is_designation_Valid() const{
    return m_designation_isValid;
}

QString OAICommitteeDetail::getDesignationFull() const {
    return m_designation_full;
}
void OAICommitteeDetail::setDesignationFull(const QString &designation_full) {
    m_designation_full = designation_full;
    m_designation_full_isSet = true;
}

bool OAICommitteeDetail::is_designation_full_Set() const{
    return m_designation_full_isSet;
}

bool OAICommitteeDetail::is_designation_full_Valid() const{
    return m_designation_full_isValid;
}

QString OAICommitteeDetail::getEmail() const {
    return m_email;
}
void OAICommitteeDetail::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAICommitteeDetail::is_email_Set() const{
    return m_email_isSet;
}

bool OAICommitteeDetail::is_email_Valid() const{
    return m_email_isValid;
}

QString OAICommitteeDetail::getFax() const {
    return m_fax;
}
void OAICommitteeDetail::setFax(const QString &fax) {
    m_fax = fax;
    m_fax_isSet = true;
}

bool OAICommitteeDetail::is_fax_Set() const{
    return m_fax_isSet;
}

bool OAICommitteeDetail::is_fax_Valid() const{
    return m_fax_isValid;
}

QString OAICommitteeDetail::getFilingFrequency() const {
    return m_filing_frequency;
}
void OAICommitteeDetail::setFilingFrequency(const QString &filing_frequency) {
    m_filing_frequency = filing_frequency;
    m_filing_frequency_isSet = true;
}

bool OAICommitteeDetail::is_filing_frequency_Set() const{
    return m_filing_frequency_isSet;
}

bool OAICommitteeDetail::is_filing_frequency_Valid() const{
    return m_filing_frequency_isValid;
}

QDate OAICommitteeDetail::getFirstF1Date() const {
    return m_first_f1_date;
}
void OAICommitteeDetail::setFirstF1Date(const QDate &first_f1_date) {
    m_first_f1_date = first_f1_date;
    m_first_f1_date_isSet = true;
}

bool OAICommitteeDetail::is_first_f1_date_Set() const{
    return m_first_f1_date_isSet;
}

bool OAICommitteeDetail::is_first_f1_date_Valid() const{
    return m_first_f1_date_isValid;
}

QDate OAICommitteeDetail::getFirstFileDate() const {
    return m_first_file_date;
}
void OAICommitteeDetail::setFirstFileDate(const QDate &first_file_date) {
    m_first_file_date = first_file_date;
    m_first_file_date_isSet = true;
}

bool OAICommitteeDetail::is_first_file_date_Set() const{
    return m_first_file_date_isSet;
}

bool OAICommitteeDetail::is_first_file_date_Valid() const{
    return m_first_file_date_isValid;
}

QString OAICommitteeDetail::getFormType() const {
    return m_form_type;
}
void OAICommitteeDetail::setFormType(const QString &form_type) {
    m_form_type = form_type;
    m_form_type_isSet = true;
}

bool OAICommitteeDetail::is_form_type_Set() const{
    return m_form_type_isSet;
}

bool OAICommitteeDetail::is_form_type_Valid() const{
    return m_form_type_isValid;
}

QList<OAICommitteeDetail_jfc_committee_inner> OAICommitteeDetail::getJfcCommittee() const {
    return m_jfc_committee;
}
void OAICommitteeDetail::setJfcCommittee(const QList<OAICommitteeDetail_jfc_committee_inner> &jfc_committee) {
    m_jfc_committee = jfc_committee;
    m_jfc_committee_isSet = true;
}

bool OAICommitteeDetail::is_jfc_committee_Set() const{
    return m_jfc_committee_isSet;
}

bool OAICommitteeDetail::is_jfc_committee_Valid() const{
    return m_jfc_committee_isValid;
}

QDate OAICommitteeDetail::getLastF1Date() const {
    return m_last_f1_date;
}
void OAICommitteeDetail::setLastF1Date(const QDate &last_f1_date) {
    m_last_f1_date = last_f1_date;
    m_last_f1_date_isSet = true;
}

bool OAICommitteeDetail::is_last_f1_date_Set() const{
    return m_last_f1_date_isSet;
}

bool OAICommitteeDetail::is_last_f1_date_Valid() const{
    return m_last_f1_date_isValid;
}

QDate OAICommitteeDetail::getLastFileDate() const {
    return m_last_file_date;
}
void OAICommitteeDetail::setLastFileDate(const QDate &last_file_date) {
    m_last_file_date = last_file_date;
    m_last_file_date_isSet = true;
}

bool OAICommitteeDetail::is_last_file_date_Set() const{
    return m_last_file_date_isSet;
}

bool OAICommitteeDetail::is_last_file_date_Valid() const{
    return m_last_file_date_isValid;
}

QString OAICommitteeDetail::getLeadershipPac() const {
    return m_leadership_pac;
}
void OAICommitteeDetail::setLeadershipPac(const QString &leadership_pac) {
    m_leadership_pac = leadership_pac;
    m_leadership_pac_isSet = true;
}

bool OAICommitteeDetail::is_leadership_pac_Set() const{
    return m_leadership_pac_isSet;
}

bool OAICommitteeDetail::is_leadership_pac_Valid() const{
    return m_leadership_pac_isValid;
}

QString OAICommitteeDetail::getLobbyistRegistrantPac() const {
    return m_lobbyist_registrant_pac;
}
void OAICommitteeDetail::setLobbyistRegistrantPac(const QString &lobbyist_registrant_pac) {
    m_lobbyist_registrant_pac = lobbyist_registrant_pac;
    m_lobbyist_registrant_pac_isSet = true;
}

bool OAICommitteeDetail::is_lobbyist_registrant_pac_Set() const{
    return m_lobbyist_registrant_pac_isSet;
}

bool OAICommitteeDetail::is_lobbyist_registrant_pac_Valid() const{
    return m_lobbyist_registrant_pac_isValid;
}

QString OAICommitteeDetail::getName() const {
    return m_name;
}
void OAICommitteeDetail::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICommitteeDetail::is_name_Set() const{
    return m_name_isSet;
}

bool OAICommitteeDetail::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICommitteeDetail::getOrganizationType() const {
    return m_organization_type;
}
void OAICommitteeDetail::setOrganizationType(const QString &organization_type) {
    m_organization_type = organization_type;
    m_organization_type_isSet = true;
}

bool OAICommitteeDetail::is_organization_type_Set() const{
    return m_organization_type_isSet;
}

bool OAICommitteeDetail::is_organization_type_Valid() const{
    return m_organization_type_isValid;
}

QString OAICommitteeDetail::getOrganizationTypeFull() const {
    return m_organization_type_full;
}
void OAICommitteeDetail::setOrganizationTypeFull(const QString &organization_type_full) {
    m_organization_type_full = organization_type_full;
    m_organization_type_full_isSet = true;
}

bool OAICommitteeDetail::is_organization_type_full_Set() const{
    return m_organization_type_full_isSet;
}

bool OAICommitteeDetail::is_organization_type_full_Valid() const{
    return m_organization_type_full_isValid;
}

QString OAICommitteeDetail::getParty() const {
    return m_party;
}
void OAICommitteeDetail::setParty(const QString &party) {
    m_party = party;
    m_party_isSet = true;
}

bool OAICommitteeDetail::is_party_Set() const{
    return m_party_isSet;
}

bool OAICommitteeDetail::is_party_Valid() const{
    return m_party_isValid;
}

QString OAICommitteeDetail::getPartyFull() const {
    return m_party_full;
}
void OAICommitteeDetail::setPartyFull(const QString &party_full) {
    m_party_full = party_full;
    m_party_full_isSet = true;
}

bool OAICommitteeDetail::is_party_full_Set() const{
    return m_party_full_isSet;
}

bool OAICommitteeDetail::is_party_full_Valid() const{
    return m_party_full_isValid;
}

QString OAICommitteeDetail::getPartyType() const {
    return m_party_type;
}
void OAICommitteeDetail::setPartyType(const QString &party_type) {
    m_party_type = party_type;
    m_party_type_isSet = true;
}

bool OAICommitteeDetail::is_party_type_Set() const{
    return m_party_type_isSet;
}

bool OAICommitteeDetail::is_party_type_Valid() const{
    return m_party_type_isValid;
}

QString OAICommitteeDetail::getPartyTypeFull() const {
    return m_party_type_full;
}
void OAICommitteeDetail::setPartyTypeFull(const QString &party_type_full) {
    m_party_type_full = party_type_full;
    m_party_type_full_isSet = true;
}

bool OAICommitteeDetail::is_party_type_full_Set() const{
    return m_party_type_full_isSet;
}

bool OAICommitteeDetail::is_party_type_full_Valid() const{
    return m_party_type_full_isValid;
}

QList<QString> OAICommitteeDetail::getSponsorCandidateIds() const {
    return m_sponsor_candidate_ids;
}
void OAICommitteeDetail::setSponsorCandidateIds(const QList<QString> &sponsor_candidate_ids) {
    m_sponsor_candidate_ids = sponsor_candidate_ids;
    m_sponsor_candidate_ids_isSet = true;
}

bool OAICommitteeDetail::is_sponsor_candidate_ids_Set() const{
    return m_sponsor_candidate_ids_isSet;
}

bool OAICommitteeDetail::is_sponsor_candidate_ids_Valid() const{
    return m_sponsor_candidate_ids_isValid;
}

QString OAICommitteeDetail::getState() const {
    return m_state;
}
void OAICommitteeDetail::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICommitteeDetail::is_state_Set() const{
    return m_state_isSet;
}

bool OAICommitteeDetail::is_state_Valid() const{
    return m_state_isValid;
}

QString OAICommitteeDetail::getStateFull() const {
    return m_state_full;
}
void OAICommitteeDetail::setStateFull(const QString &state_full) {
    m_state_full = state_full;
    m_state_full_isSet = true;
}

bool OAICommitteeDetail::is_state_full_Set() const{
    return m_state_full_isSet;
}

bool OAICommitteeDetail::is_state_full_Valid() const{
    return m_state_full_isValid;
}

QString OAICommitteeDetail::getStreet1() const {
    return m_street_1;
}
void OAICommitteeDetail::setStreet1(const QString &street_1) {
    m_street_1 = street_1;
    m_street_1_isSet = true;
}

bool OAICommitteeDetail::is_street_1_Set() const{
    return m_street_1_isSet;
}

bool OAICommitteeDetail::is_street_1_Valid() const{
    return m_street_1_isValid;
}

QString OAICommitteeDetail::getStreet2() const {
    return m_street_2;
}
void OAICommitteeDetail::setStreet2(const QString &street_2) {
    m_street_2 = street_2;
    m_street_2_isSet = true;
}

bool OAICommitteeDetail::is_street_2_Set() const{
    return m_street_2_isSet;
}

bool OAICommitteeDetail::is_street_2_Valid() const{
    return m_street_2_isValid;
}

QString OAICommitteeDetail::getTreasurerCity() const {
    return m_treasurer_city;
}
void OAICommitteeDetail::setTreasurerCity(const QString &treasurer_city) {
    m_treasurer_city = treasurer_city;
    m_treasurer_city_isSet = true;
}

bool OAICommitteeDetail::is_treasurer_city_Set() const{
    return m_treasurer_city_isSet;
}

bool OAICommitteeDetail::is_treasurer_city_Valid() const{
    return m_treasurer_city_isValid;
}

QString OAICommitteeDetail::getTreasurerName() const {
    return m_treasurer_name;
}
void OAICommitteeDetail::setTreasurerName(const QString &treasurer_name) {
    m_treasurer_name = treasurer_name;
    m_treasurer_name_isSet = true;
}

bool OAICommitteeDetail::is_treasurer_name_Set() const{
    return m_treasurer_name_isSet;
}

bool OAICommitteeDetail::is_treasurer_name_Valid() const{
    return m_treasurer_name_isValid;
}

QString OAICommitteeDetail::getTreasurerName1() const {
    return m_treasurer_name_1;
}
void OAICommitteeDetail::setTreasurerName1(const QString &treasurer_name_1) {
    m_treasurer_name_1 = treasurer_name_1;
    m_treasurer_name_1_isSet = true;
}

bool OAICommitteeDetail::is_treasurer_name_1_Set() const{
    return m_treasurer_name_1_isSet;
}

bool OAICommitteeDetail::is_treasurer_name_1_Valid() const{
    return m_treasurer_name_1_isValid;
}

QString OAICommitteeDetail::getTreasurerName2() const {
    return m_treasurer_name_2;
}
void OAICommitteeDetail::setTreasurerName2(const QString &treasurer_name_2) {
    m_treasurer_name_2 = treasurer_name_2;
    m_treasurer_name_2_isSet = true;
}

bool OAICommitteeDetail::is_treasurer_name_2_Set() const{
    return m_treasurer_name_2_isSet;
}

bool OAICommitteeDetail::is_treasurer_name_2_Valid() const{
    return m_treasurer_name_2_isValid;
}

QString OAICommitteeDetail::getTreasurerNameMiddle() const {
    return m_treasurer_name_middle;
}
void OAICommitteeDetail::setTreasurerNameMiddle(const QString &treasurer_name_middle) {
    m_treasurer_name_middle = treasurer_name_middle;
    m_treasurer_name_middle_isSet = true;
}

bool OAICommitteeDetail::is_treasurer_name_middle_Set() const{
    return m_treasurer_name_middle_isSet;
}

bool OAICommitteeDetail::is_treasurer_name_middle_Valid() const{
    return m_treasurer_name_middle_isValid;
}

QString OAICommitteeDetail::getTreasurerNamePrefix() const {
    return m_treasurer_name_prefix;
}
void OAICommitteeDetail::setTreasurerNamePrefix(const QString &treasurer_name_prefix) {
    m_treasurer_name_prefix = treasurer_name_prefix;
    m_treasurer_name_prefix_isSet = true;
}

bool OAICommitteeDetail::is_treasurer_name_prefix_Set() const{
    return m_treasurer_name_prefix_isSet;
}

bool OAICommitteeDetail::is_treasurer_name_prefix_Valid() const{
    return m_treasurer_name_prefix_isValid;
}

QString OAICommitteeDetail::getTreasurerNameSuffix() const {
    return m_treasurer_name_suffix;
}
void OAICommitteeDetail::setTreasurerNameSuffix(const QString &treasurer_name_suffix) {
    m_treasurer_name_suffix = treasurer_name_suffix;
    m_treasurer_name_suffix_isSet = true;
}

bool OAICommitteeDetail::is_treasurer_name_suffix_Set() const{
    return m_treasurer_name_suffix_isSet;
}

bool OAICommitteeDetail::is_treasurer_name_suffix_Valid() const{
    return m_treasurer_name_suffix_isValid;
}

QString OAICommitteeDetail::getTreasurerNameTitle() const {
    return m_treasurer_name_title;
}
void OAICommitteeDetail::setTreasurerNameTitle(const QString &treasurer_name_title) {
    m_treasurer_name_title = treasurer_name_title;
    m_treasurer_name_title_isSet = true;
}

bool OAICommitteeDetail::is_treasurer_name_title_Set() const{
    return m_treasurer_name_title_isSet;
}

bool OAICommitteeDetail::is_treasurer_name_title_Valid() const{
    return m_treasurer_name_title_isValid;
}

QString OAICommitteeDetail::getTreasurerPhone() const {
    return m_treasurer_phone;
}
void OAICommitteeDetail::setTreasurerPhone(const QString &treasurer_phone) {
    m_treasurer_phone = treasurer_phone;
    m_treasurer_phone_isSet = true;
}

bool OAICommitteeDetail::is_treasurer_phone_Set() const{
    return m_treasurer_phone_isSet;
}

bool OAICommitteeDetail::is_treasurer_phone_Valid() const{
    return m_treasurer_phone_isValid;
}

QString OAICommitteeDetail::getTreasurerState() const {
    return m_treasurer_state;
}
void OAICommitteeDetail::setTreasurerState(const QString &treasurer_state) {
    m_treasurer_state = treasurer_state;
    m_treasurer_state_isSet = true;
}

bool OAICommitteeDetail::is_treasurer_state_Set() const{
    return m_treasurer_state_isSet;
}

bool OAICommitteeDetail::is_treasurer_state_Valid() const{
    return m_treasurer_state_isValid;
}

QString OAICommitteeDetail::getTreasurerStreet1() const {
    return m_treasurer_street_1;
}
void OAICommitteeDetail::setTreasurerStreet1(const QString &treasurer_street_1) {
    m_treasurer_street_1 = treasurer_street_1;
    m_treasurer_street_1_isSet = true;
}

bool OAICommitteeDetail::is_treasurer_street_1_Set() const{
    return m_treasurer_street_1_isSet;
}

bool OAICommitteeDetail::is_treasurer_street_1_Valid() const{
    return m_treasurer_street_1_isValid;
}

QString OAICommitteeDetail::getTreasurerStreet2() const {
    return m_treasurer_street_2;
}
void OAICommitteeDetail::setTreasurerStreet2(const QString &treasurer_street_2) {
    m_treasurer_street_2 = treasurer_street_2;
    m_treasurer_street_2_isSet = true;
}

bool OAICommitteeDetail::is_treasurer_street_2_Set() const{
    return m_treasurer_street_2_isSet;
}

bool OAICommitteeDetail::is_treasurer_street_2_Valid() const{
    return m_treasurer_street_2_isValid;
}

QString OAICommitteeDetail::getTreasurerZip() const {
    return m_treasurer_zip;
}
void OAICommitteeDetail::setTreasurerZip(const QString &treasurer_zip) {
    m_treasurer_zip = treasurer_zip;
    m_treasurer_zip_isSet = true;
}

bool OAICommitteeDetail::is_treasurer_zip_Set() const{
    return m_treasurer_zip_isSet;
}

bool OAICommitteeDetail::is_treasurer_zip_Valid() const{
    return m_treasurer_zip_isValid;
}

QString OAICommitteeDetail::getWebsite() const {
    return m_website;
}
void OAICommitteeDetail::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAICommitteeDetail::is_website_Set() const{
    return m_website_isSet;
}

bool OAICommitteeDetail::is_website_Valid() const{
    return m_website_isValid;
}

QString OAICommitteeDetail::getZip() const {
    return m_zip;
}
void OAICommitteeDetail::setZip(const QString &zip) {
    m_zip = zip;
    m_zip_isSet = true;
}

bool OAICommitteeDetail::is_zip_Set() const{
    return m_zip_isSet;
}

bool OAICommitteeDetail::is_zip_Valid() const{
    return m_zip_isValid;
}

bool OAICommitteeDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_affiliated_committee_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_type_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custodian_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custodian_name_1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custodian_name_2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custodian_name_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custodian_name_middle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custodian_name_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custodian_name_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custodian_name_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custodian_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custodian_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custodian_street_1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custodian_street_2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custodian_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cycles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_designation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_designation_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filing_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_f1_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_file_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jfc_committee.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_f1_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_file_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_leadership_pac_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lobbyist_registrant_pac_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_type_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_type_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sponsor_candidate_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_treasurer_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_treasurer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_treasurer_name_1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_treasurer_name_2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_treasurer_name_middle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_treasurer_name_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_treasurer_name_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_treasurer_name_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_treasurer_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_treasurer_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_treasurer_street_1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_treasurer_street_2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_treasurer_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommitteeDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_committee_id_isValid && true;
}

} // namespace OpenAPI
