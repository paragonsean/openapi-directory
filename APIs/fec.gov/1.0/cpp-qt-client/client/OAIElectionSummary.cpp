/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIElectionSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIElectionSummary::OAIElectionSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIElectionSummary::OAIElectionSummary() {
    this->initializeModel();
}

OAIElectionSummary::~OAIElectionSummary() {}

void OAIElectionSummary::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_disbursements_isSet = false;
    m_disbursements_isValid = false;

    m_independent_expenditures_isSet = false;
    m_independent_expenditures_isValid = false;

    m_receipts_isSet = false;
    m_receipts_isValid = false;
}

void OAIElectionSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIElectionSummary::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_disbursements_isValid = ::OpenAPI::fromJsonValue(m_disbursements, json[QString("disbursements")]);
    m_disbursements_isSet = !json[QString("disbursements")].isNull() && m_disbursements_isValid;

    m_independent_expenditures_isValid = ::OpenAPI::fromJsonValue(m_independent_expenditures, json[QString("independent_expenditures")]);
    m_independent_expenditures_isSet = !json[QString("independent_expenditures")].isNull() && m_independent_expenditures_isValid;

    m_receipts_isValid = ::OpenAPI::fromJsonValue(m_receipts, json[QString("receipts")]);
    m_receipts_isSet = !json[QString("receipts")].isNull() && m_receipts_isValid;
}

QString OAIElectionSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIElectionSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_disbursements_isSet) {
        obj.insert(QString("disbursements"), ::OpenAPI::toJsonValue(m_disbursements));
    }
    if (m_independent_expenditures_isSet) {
        obj.insert(QString("independent_expenditures"), ::OpenAPI::toJsonValue(m_independent_expenditures));
    }
    if (m_receipts_isSet) {
        obj.insert(QString("receipts"), ::OpenAPI::toJsonValue(m_receipts));
    }
    return obj;
}

qint32 OAIElectionSummary::getCount() const {
    return m_count;
}
void OAIElectionSummary::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIElectionSummary::is_count_Set() const{
    return m_count_isSet;
}

bool OAIElectionSummary::is_count_Valid() const{
    return m_count_isValid;
}

double OAIElectionSummary::getDisbursements() const {
    return m_disbursements;
}
void OAIElectionSummary::setDisbursements(const double &disbursements) {
    m_disbursements = disbursements;
    m_disbursements_isSet = true;
}

bool OAIElectionSummary::is_disbursements_Set() const{
    return m_disbursements_isSet;
}

bool OAIElectionSummary::is_disbursements_Valid() const{
    return m_disbursements_isValid;
}

double OAIElectionSummary::getIndependentExpenditures() const {
    return m_independent_expenditures;
}
void OAIElectionSummary::setIndependentExpenditures(const double &independent_expenditures) {
    m_independent_expenditures = independent_expenditures;
    m_independent_expenditures_isSet = true;
}

bool OAIElectionSummary::is_independent_expenditures_Set() const{
    return m_independent_expenditures_isSet;
}

bool OAIElectionSummary::is_independent_expenditures_Valid() const{
    return m_independent_expenditures_isValid;
}

double OAIElectionSummary::getReceipts() const {
    return m_receipts;
}
void OAIElectionSummary::setReceipts(const double &receipts) {
    m_receipts = receipts;
    m_receipts_isSet = true;
}

bool OAIElectionSummary::is_receipts_Set() const{
    return m_receipts_isSet;
}

bool OAIElectionSummary::is_receipts_Valid() const{
    return m_receipts_isValid;
}

bool OAIElectionSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disbursements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_independent_expenditures_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipts_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIElectionSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
