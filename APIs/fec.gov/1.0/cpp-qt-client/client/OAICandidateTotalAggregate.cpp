/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICandidateTotalAggregate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICandidateTotalAggregate::OAICandidateTotalAggregate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICandidateTotalAggregate::OAICandidateTotalAggregate() {
    this->initializeModel();
}

OAICandidateTotalAggregate::~OAICandidateTotalAggregate() {}

void OAICandidateTotalAggregate::initializeModel() {

    m_district_isSet = false;
    m_district_isValid = false;

    m_district_number_isSet = false;
    m_district_number_isValid = false;

    m_election_year_isSet = false;
    m_election_year_isValid = false;

    m_office_isSet = false;
    m_office_isValid = false;

    m_party_isSet = false;
    m_party_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_full_isSet = false;
    m_state_full_isValid = false;

    m_total_cash_on_hand_end_period_isSet = false;
    m_total_cash_on_hand_end_period_isValid = false;

    m_total_debts_owed_by_committee_isSet = false;
    m_total_debts_owed_by_committee_isValid = false;

    m_total_disbursements_isSet = false;
    m_total_disbursements_isValid = false;

    m_total_individual_itemized_contributions_isSet = false;
    m_total_individual_itemized_contributions_isValid = false;

    m_total_other_political_committee_contributions_isSet = false;
    m_total_other_political_committee_contributions_isValid = false;

    m_total_receipts_isSet = false;
    m_total_receipts_isValid = false;

    m_total_transfers_from_other_authorized_committee_isSet = false;
    m_total_transfers_from_other_authorized_committee_isValid = false;
}

void OAICandidateTotalAggregate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICandidateTotalAggregate::fromJsonObject(QJsonObject json) {

    m_district_isValid = ::OpenAPI::fromJsonValue(m_district, json[QString("district")]);
    m_district_isSet = !json[QString("district")].isNull() && m_district_isValid;

    m_district_number_isValid = ::OpenAPI::fromJsonValue(m_district_number, json[QString("district_number")]);
    m_district_number_isSet = !json[QString("district_number")].isNull() && m_district_number_isValid;

    m_election_year_isValid = ::OpenAPI::fromJsonValue(m_election_year, json[QString("election_year")]);
    m_election_year_isSet = !json[QString("election_year")].isNull() && m_election_year_isValid;

    m_office_isValid = ::OpenAPI::fromJsonValue(m_office, json[QString("office")]);
    m_office_isSet = !json[QString("office")].isNull() && m_office_isValid;

    m_party_isValid = ::OpenAPI::fromJsonValue(m_party, json[QString("party")]);
    m_party_isSet = !json[QString("party")].isNull() && m_party_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_full_isValid = ::OpenAPI::fromJsonValue(m_state_full, json[QString("state_full")]);
    m_state_full_isSet = !json[QString("state_full")].isNull() && m_state_full_isValid;

    m_total_cash_on_hand_end_period_isValid = ::OpenAPI::fromJsonValue(m_total_cash_on_hand_end_period, json[QString("total_cash_on_hand_end_period")]);
    m_total_cash_on_hand_end_period_isSet = !json[QString("total_cash_on_hand_end_period")].isNull() && m_total_cash_on_hand_end_period_isValid;

    m_total_debts_owed_by_committee_isValid = ::OpenAPI::fromJsonValue(m_total_debts_owed_by_committee, json[QString("total_debts_owed_by_committee")]);
    m_total_debts_owed_by_committee_isSet = !json[QString("total_debts_owed_by_committee")].isNull() && m_total_debts_owed_by_committee_isValid;

    m_total_disbursements_isValid = ::OpenAPI::fromJsonValue(m_total_disbursements, json[QString("total_disbursements")]);
    m_total_disbursements_isSet = !json[QString("total_disbursements")].isNull() && m_total_disbursements_isValid;

    m_total_individual_itemized_contributions_isValid = ::OpenAPI::fromJsonValue(m_total_individual_itemized_contributions, json[QString("total_individual_itemized_contributions")]);
    m_total_individual_itemized_contributions_isSet = !json[QString("total_individual_itemized_contributions")].isNull() && m_total_individual_itemized_contributions_isValid;

    m_total_other_political_committee_contributions_isValid = ::OpenAPI::fromJsonValue(m_total_other_political_committee_contributions, json[QString("total_other_political_committee_contributions")]);
    m_total_other_political_committee_contributions_isSet = !json[QString("total_other_political_committee_contributions")].isNull() && m_total_other_political_committee_contributions_isValid;

    m_total_receipts_isValid = ::OpenAPI::fromJsonValue(m_total_receipts, json[QString("total_receipts")]);
    m_total_receipts_isSet = !json[QString("total_receipts")].isNull() && m_total_receipts_isValid;

    m_total_transfers_from_other_authorized_committee_isValid = ::OpenAPI::fromJsonValue(m_total_transfers_from_other_authorized_committee, json[QString("total_transfers_from_other_authorized_committee")]);
    m_total_transfers_from_other_authorized_committee_isSet = !json[QString("total_transfers_from_other_authorized_committee")].isNull() && m_total_transfers_from_other_authorized_committee_isValid;
}

QString OAICandidateTotalAggregate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICandidateTotalAggregate::asJsonObject() const {
    QJsonObject obj;
    if (m_district_isSet) {
        obj.insert(QString("district"), ::OpenAPI::toJsonValue(m_district));
    }
    if (m_district_number_isSet) {
        obj.insert(QString("district_number"), ::OpenAPI::toJsonValue(m_district_number));
    }
    if (m_election_year_isSet) {
        obj.insert(QString("election_year"), ::OpenAPI::toJsonValue(m_election_year));
    }
    if (m_office_isSet) {
        obj.insert(QString("office"), ::OpenAPI::toJsonValue(m_office));
    }
    if (m_party_isSet) {
        obj.insert(QString("party"), ::OpenAPI::toJsonValue(m_party));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_full_isSet) {
        obj.insert(QString("state_full"), ::OpenAPI::toJsonValue(m_state_full));
    }
    if (m_total_cash_on_hand_end_period_isSet) {
        obj.insert(QString("total_cash_on_hand_end_period"), ::OpenAPI::toJsonValue(m_total_cash_on_hand_end_period));
    }
    if (m_total_debts_owed_by_committee_isSet) {
        obj.insert(QString("total_debts_owed_by_committee"), ::OpenAPI::toJsonValue(m_total_debts_owed_by_committee));
    }
    if (m_total_disbursements_isSet) {
        obj.insert(QString("total_disbursements"), ::OpenAPI::toJsonValue(m_total_disbursements));
    }
    if (m_total_individual_itemized_contributions_isSet) {
        obj.insert(QString("total_individual_itemized_contributions"), ::OpenAPI::toJsonValue(m_total_individual_itemized_contributions));
    }
    if (m_total_other_political_committee_contributions_isSet) {
        obj.insert(QString("total_other_political_committee_contributions"), ::OpenAPI::toJsonValue(m_total_other_political_committee_contributions));
    }
    if (m_total_receipts_isSet) {
        obj.insert(QString("total_receipts"), ::OpenAPI::toJsonValue(m_total_receipts));
    }
    if (m_total_transfers_from_other_authorized_committee_isSet) {
        obj.insert(QString("total_transfers_from_other_authorized_committee"), ::OpenAPI::toJsonValue(m_total_transfers_from_other_authorized_committee));
    }
    return obj;
}

QString OAICandidateTotalAggregate::getDistrict() const {
    return m_district;
}
void OAICandidateTotalAggregate::setDistrict(const QString &district) {
    m_district = district;
    m_district_isSet = true;
}

bool OAICandidateTotalAggregate::is_district_Set() const{
    return m_district_isSet;
}

bool OAICandidateTotalAggregate::is_district_Valid() const{
    return m_district_isValid;
}

qint32 OAICandidateTotalAggregate::getDistrictNumber() const {
    return m_district_number;
}
void OAICandidateTotalAggregate::setDistrictNumber(const qint32 &district_number) {
    m_district_number = district_number;
    m_district_number_isSet = true;
}

bool OAICandidateTotalAggregate::is_district_number_Set() const{
    return m_district_number_isSet;
}

bool OAICandidateTotalAggregate::is_district_number_Valid() const{
    return m_district_number_isValid;
}

qint32 OAICandidateTotalAggregate::getElectionYear() const {
    return m_election_year;
}
void OAICandidateTotalAggregate::setElectionYear(const qint32 &election_year) {
    m_election_year = election_year;
    m_election_year_isSet = true;
}

bool OAICandidateTotalAggregate::is_election_year_Set() const{
    return m_election_year_isSet;
}

bool OAICandidateTotalAggregate::is_election_year_Valid() const{
    return m_election_year_isValid;
}

QString OAICandidateTotalAggregate::getOffice() const {
    return m_office;
}
void OAICandidateTotalAggregate::setOffice(const QString &office) {
    m_office = office;
    m_office_isSet = true;
}

bool OAICandidateTotalAggregate::is_office_Set() const{
    return m_office_isSet;
}

bool OAICandidateTotalAggregate::is_office_Valid() const{
    return m_office_isValid;
}

QString OAICandidateTotalAggregate::getParty() const {
    return m_party;
}
void OAICandidateTotalAggregate::setParty(const QString &party) {
    m_party = party;
    m_party_isSet = true;
}

bool OAICandidateTotalAggregate::is_party_Set() const{
    return m_party_isSet;
}

bool OAICandidateTotalAggregate::is_party_Valid() const{
    return m_party_isValid;
}

QString OAICandidateTotalAggregate::getState() const {
    return m_state;
}
void OAICandidateTotalAggregate::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICandidateTotalAggregate::is_state_Set() const{
    return m_state_isSet;
}

bool OAICandidateTotalAggregate::is_state_Valid() const{
    return m_state_isValid;
}

QString OAICandidateTotalAggregate::getStateFull() const {
    return m_state_full;
}
void OAICandidateTotalAggregate::setStateFull(const QString &state_full) {
    m_state_full = state_full;
    m_state_full_isSet = true;
}

bool OAICandidateTotalAggregate::is_state_full_Set() const{
    return m_state_full_isSet;
}

bool OAICandidateTotalAggregate::is_state_full_Valid() const{
    return m_state_full_isValid;
}

double OAICandidateTotalAggregate::getTotalCashOnHandEndPeriod() const {
    return m_total_cash_on_hand_end_period;
}
void OAICandidateTotalAggregate::setTotalCashOnHandEndPeriod(const double &total_cash_on_hand_end_period) {
    m_total_cash_on_hand_end_period = total_cash_on_hand_end_period;
    m_total_cash_on_hand_end_period_isSet = true;
}

bool OAICandidateTotalAggregate::is_total_cash_on_hand_end_period_Set() const{
    return m_total_cash_on_hand_end_period_isSet;
}

bool OAICandidateTotalAggregate::is_total_cash_on_hand_end_period_Valid() const{
    return m_total_cash_on_hand_end_period_isValid;
}

double OAICandidateTotalAggregate::getTotalDebtsOwedByCommittee() const {
    return m_total_debts_owed_by_committee;
}
void OAICandidateTotalAggregate::setTotalDebtsOwedByCommittee(const double &total_debts_owed_by_committee) {
    m_total_debts_owed_by_committee = total_debts_owed_by_committee;
    m_total_debts_owed_by_committee_isSet = true;
}

bool OAICandidateTotalAggregate::is_total_debts_owed_by_committee_Set() const{
    return m_total_debts_owed_by_committee_isSet;
}

bool OAICandidateTotalAggregate::is_total_debts_owed_by_committee_Valid() const{
    return m_total_debts_owed_by_committee_isValid;
}

double OAICandidateTotalAggregate::getTotalDisbursements() const {
    return m_total_disbursements;
}
void OAICandidateTotalAggregate::setTotalDisbursements(const double &total_disbursements) {
    m_total_disbursements = total_disbursements;
    m_total_disbursements_isSet = true;
}

bool OAICandidateTotalAggregate::is_total_disbursements_Set() const{
    return m_total_disbursements_isSet;
}

bool OAICandidateTotalAggregate::is_total_disbursements_Valid() const{
    return m_total_disbursements_isValid;
}

double OAICandidateTotalAggregate::getTotalIndividualItemizedContributions() const {
    return m_total_individual_itemized_contributions;
}
void OAICandidateTotalAggregate::setTotalIndividualItemizedContributions(const double &total_individual_itemized_contributions) {
    m_total_individual_itemized_contributions = total_individual_itemized_contributions;
    m_total_individual_itemized_contributions_isSet = true;
}

bool OAICandidateTotalAggregate::is_total_individual_itemized_contributions_Set() const{
    return m_total_individual_itemized_contributions_isSet;
}

bool OAICandidateTotalAggregate::is_total_individual_itemized_contributions_Valid() const{
    return m_total_individual_itemized_contributions_isValid;
}

double OAICandidateTotalAggregate::getTotalOtherPoliticalCommitteeContributions() const {
    return m_total_other_political_committee_contributions;
}
void OAICandidateTotalAggregate::setTotalOtherPoliticalCommitteeContributions(const double &total_other_political_committee_contributions) {
    m_total_other_political_committee_contributions = total_other_political_committee_contributions;
    m_total_other_political_committee_contributions_isSet = true;
}

bool OAICandidateTotalAggregate::is_total_other_political_committee_contributions_Set() const{
    return m_total_other_political_committee_contributions_isSet;
}

bool OAICandidateTotalAggregate::is_total_other_political_committee_contributions_Valid() const{
    return m_total_other_political_committee_contributions_isValid;
}

double OAICandidateTotalAggregate::getTotalReceipts() const {
    return m_total_receipts;
}
void OAICandidateTotalAggregate::setTotalReceipts(const double &total_receipts) {
    m_total_receipts = total_receipts;
    m_total_receipts_isSet = true;
}

bool OAICandidateTotalAggregate::is_total_receipts_Set() const{
    return m_total_receipts_isSet;
}

bool OAICandidateTotalAggregate::is_total_receipts_Valid() const{
    return m_total_receipts_isValid;
}

double OAICandidateTotalAggregate::getTotalTransfersFromOtherAuthorizedCommittee() const {
    return m_total_transfers_from_other_authorized_committee;
}
void OAICandidateTotalAggregate::setTotalTransfersFromOtherAuthorizedCommittee(const double &total_transfers_from_other_authorized_committee) {
    m_total_transfers_from_other_authorized_committee = total_transfers_from_other_authorized_committee;
    m_total_transfers_from_other_authorized_committee_isSet = true;
}

bool OAICandidateTotalAggregate::is_total_transfers_from_other_authorized_committee_Set() const{
    return m_total_transfers_from_other_authorized_committee_isSet;
}

bool OAICandidateTotalAggregate::is_total_transfers_from_other_authorized_committee_Valid() const{
    return m_total_transfers_from_other_authorized_committee_isValid;
}

bool OAICandidateTotalAggregate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_district_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_district_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_office_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_cash_on_hand_end_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_debts_owed_by_committee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_disbursements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_individual_itemized_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_other_political_committee_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_receipts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_transfers_from_other_authorized_committee_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICandidateTotalAggregate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
