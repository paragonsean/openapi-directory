/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPresidentialSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPresidentialSummary::OAIPresidentialSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPresidentialSummary::OAIPresidentialSummary() {
    this->initializeModel();
}

OAIPresidentialSummary::~OAIPresidentialSummary() {}

void OAIPresidentialSummary::initializeModel() {

    m_candidate_contributions_less_repayments_isSet = false;
    m_candidate_contributions_less_repayments_isValid = false;

    m_candidate_id_isSet = false;
    m_candidate_id_isValid = false;

    m_candidate_last_name_isSet = false;
    m_candidate_last_name_isValid = false;

    m_candidate_name_isSet = false;
    m_candidate_name_isValid = false;

    m_candidate_party_affiliation_isSet = false;
    m_candidate_party_affiliation_isValid = false;

    m_cash_on_hand_end_isSet = false;
    m_cash_on_hand_end_isValid = false;

    m_committee_designation_isSet = false;
    m_committee_designation_isValid = false;

    m_committee_id_isSet = false;
    m_committee_id_isValid = false;

    m_committee_name_isSet = false;
    m_committee_name_isValid = false;

    m_committee_type_isSet = false;
    m_committee_type_isValid = false;

    m_debts_owed_by_committee_isSet = false;
    m_debts_owed_by_committee_isValid = false;

    m_disbursements_less_offsets_isSet = false;
    m_disbursements_less_offsets_isValid = false;

    m_election_year_isSet = false;
    m_election_year_isValid = false;

    m_exempt_legal_accounting_disbursement_isSet = false;
    m_exempt_legal_accounting_disbursement_isValid = false;

    m_federal_funds_isSet = false;
    m_federal_funds_isValid = false;

    m_fundraising_disbursements_isSet = false;
    m_fundraising_disbursements_isValid = false;

    m_individual_contributions_less_refunds_isSet = false;
    m_individual_contributions_less_refunds_isValid = false;

    m_net_receipts_isSet = false;
    m_net_receipts_isValid = false;

    m_offsets_to_operating_expenditures_isSet = false;
    m_offsets_to_operating_expenditures_isValid = false;

    m_operating_expenditures_isSet = false;
    m_operating_expenditures_isValid = false;

    m_other_disbursements_isSet = false;
    m_other_disbursements_isValid = false;

    m_pac_contributions_less_refunds_isSet = false;
    m_pac_contributions_less_refunds_isValid = false;

    m_party_contributions_less_refunds_isSet = false;
    m_party_contributions_less_refunds_isValid = false;

    m_repayments_loans_made_by_candidate_isSet = false;
    m_repayments_loans_made_by_candidate_isValid = false;

    m_repayments_other_loans_isSet = false;
    m_repayments_other_loans_isValid = false;

    m_rounded_net_receipts_isSet = false;
    m_rounded_net_receipts_isValid = false;

    m_total_contribution_refunds_isSet = false;
    m_total_contribution_refunds_isValid = false;

    m_total_loan_repayments_made_isSet = false;
    m_total_loan_repayments_made_isValid = false;

    m_transfers_from_affiliated_committees_isSet = false;
    m_transfers_from_affiliated_committees_isValid = false;

    m_transfers_to_other_authorized_committees_isSet = false;
    m_transfers_to_other_authorized_committees_isValid = false;
}

void OAIPresidentialSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPresidentialSummary::fromJsonObject(QJsonObject json) {

    m_candidate_contributions_less_repayments_isValid = ::OpenAPI::fromJsonValue(m_candidate_contributions_less_repayments, json[QString("candidate_contributions_less_repayments")]);
    m_candidate_contributions_less_repayments_isSet = !json[QString("candidate_contributions_less_repayments")].isNull() && m_candidate_contributions_less_repayments_isValid;

    m_candidate_id_isValid = ::OpenAPI::fromJsonValue(m_candidate_id, json[QString("candidate_id")]);
    m_candidate_id_isSet = !json[QString("candidate_id")].isNull() && m_candidate_id_isValid;

    m_candidate_last_name_isValid = ::OpenAPI::fromJsonValue(m_candidate_last_name, json[QString("candidate_last_name")]);
    m_candidate_last_name_isSet = !json[QString("candidate_last_name")].isNull() && m_candidate_last_name_isValid;

    m_candidate_name_isValid = ::OpenAPI::fromJsonValue(m_candidate_name, json[QString("candidate_name")]);
    m_candidate_name_isSet = !json[QString("candidate_name")].isNull() && m_candidate_name_isValid;

    m_candidate_party_affiliation_isValid = ::OpenAPI::fromJsonValue(m_candidate_party_affiliation, json[QString("candidate_party_affiliation")]);
    m_candidate_party_affiliation_isSet = !json[QString("candidate_party_affiliation")].isNull() && m_candidate_party_affiliation_isValid;

    m_cash_on_hand_end_isValid = ::OpenAPI::fromJsonValue(m_cash_on_hand_end, json[QString("cash_on_hand_end")]);
    m_cash_on_hand_end_isSet = !json[QString("cash_on_hand_end")].isNull() && m_cash_on_hand_end_isValid;

    m_committee_designation_isValid = ::OpenAPI::fromJsonValue(m_committee_designation, json[QString("committee_designation")]);
    m_committee_designation_isSet = !json[QString("committee_designation")].isNull() && m_committee_designation_isValid;

    m_committee_id_isValid = ::OpenAPI::fromJsonValue(m_committee_id, json[QString("committee_id")]);
    m_committee_id_isSet = !json[QString("committee_id")].isNull() && m_committee_id_isValid;

    m_committee_name_isValid = ::OpenAPI::fromJsonValue(m_committee_name, json[QString("committee_name")]);
    m_committee_name_isSet = !json[QString("committee_name")].isNull() && m_committee_name_isValid;

    m_committee_type_isValid = ::OpenAPI::fromJsonValue(m_committee_type, json[QString("committee_type")]);
    m_committee_type_isSet = !json[QString("committee_type")].isNull() && m_committee_type_isValid;

    m_debts_owed_by_committee_isValid = ::OpenAPI::fromJsonValue(m_debts_owed_by_committee, json[QString("debts_owed_by_committee")]);
    m_debts_owed_by_committee_isSet = !json[QString("debts_owed_by_committee")].isNull() && m_debts_owed_by_committee_isValid;

    m_disbursements_less_offsets_isValid = ::OpenAPI::fromJsonValue(m_disbursements_less_offsets, json[QString("disbursements_less_offsets")]);
    m_disbursements_less_offsets_isSet = !json[QString("disbursements_less_offsets")].isNull() && m_disbursements_less_offsets_isValid;

    m_election_year_isValid = ::OpenAPI::fromJsonValue(m_election_year, json[QString("election_year")]);
    m_election_year_isSet = !json[QString("election_year")].isNull() && m_election_year_isValid;

    m_exempt_legal_accounting_disbursement_isValid = ::OpenAPI::fromJsonValue(m_exempt_legal_accounting_disbursement, json[QString("exempt_legal_accounting_disbursement")]);
    m_exempt_legal_accounting_disbursement_isSet = !json[QString("exempt_legal_accounting_disbursement")].isNull() && m_exempt_legal_accounting_disbursement_isValid;

    m_federal_funds_isValid = ::OpenAPI::fromJsonValue(m_federal_funds, json[QString("federal_funds")]);
    m_federal_funds_isSet = !json[QString("federal_funds")].isNull() && m_federal_funds_isValid;

    m_fundraising_disbursements_isValid = ::OpenAPI::fromJsonValue(m_fundraising_disbursements, json[QString("fundraising_disbursements")]);
    m_fundraising_disbursements_isSet = !json[QString("fundraising_disbursements")].isNull() && m_fundraising_disbursements_isValid;

    m_individual_contributions_less_refunds_isValid = ::OpenAPI::fromJsonValue(m_individual_contributions_less_refunds, json[QString("individual_contributions_less_refunds")]);
    m_individual_contributions_less_refunds_isSet = !json[QString("individual_contributions_less_refunds")].isNull() && m_individual_contributions_less_refunds_isValid;

    m_net_receipts_isValid = ::OpenAPI::fromJsonValue(m_net_receipts, json[QString("net_receipts")]);
    m_net_receipts_isSet = !json[QString("net_receipts")].isNull() && m_net_receipts_isValid;

    m_offsets_to_operating_expenditures_isValid = ::OpenAPI::fromJsonValue(m_offsets_to_operating_expenditures, json[QString("offsets_to_operating_expenditures")]);
    m_offsets_to_operating_expenditures_isSet = !json[QString("offsets_to_operating_expenditures")].isNull() && m_offsets_to_operating_expenditures_isValid;

    m_operating_expenditures_isValid = ::OpenAPI::fromJsonValue(m_operating_expenditures, json[QString("operating_expenditures")]);
    m_operating_expenditures_isSet = !json[QString("operating_expenditures")].isNull() && m_operating_expenditures_isValid;

    m_other_disbursements_isValid = ::OpenAPI::fromJsonValue(m_other_disbursements, json[QString("other_disbursements")]);
    m_other_disbursements_isSet = !json[QString("other_disbursements")].isNull() && m_other_disbursements_isValid;

    m_pac_contributions_less_refunds_isValid = ::OpenAPI::fromJsonValue(m_pac_contributions_less_refunds, json[QString("pac_contributions_less_refunds")]);
    m_pac_contributions_less_refunds_isSet = !json[QString("pac_contributions_less_refunds")].isNull() && m_pac_contributions_less_refunds_isValid;

    m_party_contributions_less_refunds_isValid = ::OpenAPI::fromJsonValue(m_party_contributions_less_refunds, json[QString("party_contributions_less_refunds")]);
    m_party_contributions_less_refunds_isSet = !json[QString("party_contributions_less_refunds")].isNull() && m_party_contributions_less_refunds_isValid;

    m_repayments_loans_made_by_candidate_isValid = ::OpenAPI::fromJsonValue(m_repayments_loans_made_by_candidate, json[QString("repayments_loans_made_by_candidate")]);
    m_repayments_loans_made_by_candidate_isSet = !json[QString("repayments_loans_made_by_candidate")].isNull() && m_repayments_loans_made_by_candidate_isValid;

    m_repayments_other_loans_isValid = ::OpenAPI::fromJsonValue(m_repayments_other_loans, json[QString("repayments_other_loans")]);
    m_repayments_other_loans_isSet = !json[QString("repayments_other_loans")].isNull() && m_repayments_other_loans_isValid;

    m_rounded_net_receipts_isValid = ::OpenAPI::fromJsonValue(m_rounded_net_receipts, json[QString("rounded_net_receipts")]);
    m_rounded_net_receipts_isSet = !json[QString("rounded_net_receipts")].isNull() && m_rounded_net_receipts_isValid;

    m_total_contribution_refunds_isValid = ::OpenAPI::fromJsonValue(m_total_contribution_refunds, json[QString("total_contribution_refunds")]);
    m_total_contribution_refunds_isSet = !json[QString("total_contribution_refunds")].isNull() && m_total_contribution_refunds_isValid;

    m_total_loan_repayments_made_isValid = ::OpenAPI::fromJsonValue(m_total_loan_repayments_made, json[QString("total_loan_repayments_made")]);
    m_total_loan_repayments_made_isSet = !json[QString("total_loan_repayments_made")].isNull() && m_total_loan_repayments_made_isValid;

    m_transfers_from_affiliated_committees_isValid = ::OpenAPI::fromJsonValue(m_transfers_from_affiliated_committees, json[QString("transfers_from_affiliated_committees")]);
    m_transfers_from_affiliated_committees_isSet = !json[QString("transfers_from_affiliated_committees")].isNull() && m_transfers_from_affiliated_committees_isValid;

    m_transfers_to_other_authorized_committees_isValid = ::OpenAPI::fromJsonValue(m_transfers_to_other_authorized_committees, json[QString("transfers_to_other_authorized_committees")]);
    m_transfers_to_other_authorized_committees_isSet = !json[QString("transfers_to_other_authorized_committees")].isNull() && m_transfers_to_other_authorized_committees_isValid;
}

QString OAIPresidentialSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPresidentialSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_candidate_contributions_less_repayments_isSet) {
        obj.insert(QString("candidate_contributions_less_repayments"), ::OpenAPI::toJsonValue(m_candidate_contributions_less_repayments));
    }
    if (m_candidate_id_isSet) {
        obj.insert(QString("candidate_id"), ::OpenAPI::toJsonValue(m_candidate_id));
    }
    if (m_candidate_last_name_isSet) {
        obj.insert(QString("candidate_last_name"), ::OpenAPI::toJsonValue(m_candidate_last_name));
    }
    if (m_candidate_name_isSet) {
        obj.insert(QString("candidate_name"), ::OpenAPI::toJsonValue(m_candidate_name));
    }
    if (m_candidate_party_affiliation_isSet) {
        obj.insert(QString("candidate_party_affiliation"), ::OpenAPI::toJsonValue(m_candidate_party_affiliation));
    }
    if (m_cash_on_hand_end_isSet) {
        obj.insert(QString("cash_on_hand_end"), ::OpenAPI::toJsonValue(m_cash_on_hand_end));
    }
    if (m_committee_designation_isSet) {
        obj.insert(QString("committee_designation"), ::OpenAPI::toJsonValue(m_committee_designation));
    }
    if (m_committee_id_isSet) {
        obj.insert(QString("committee_id"), ::OpenAPI::toJsonValue(m_committee_id));
    }
    if (m_committee_name_isSet) {
        obj.insert(QString("committee_name"), ::OpenAPI::toJsonValue(m_committee_name));
    }
    if (m_committee_type_isSet) {
        obj.insert(QString("committee_type"), ::OpenAPI::toJsonValue(m_committee_type));
    }
    if (m_debts_owed_by_committee_isSet) {
        obj.insert(QString("debts_owed_by_committee"), ::OpenAPI::toJsonValue(m_debts_owed_by_committee));
    }
    if (m_disbursements_less_offsets_isSet) {
        obj.insert(QString("disbursements_less_offsets"), ::OpenAPI::toJsonValue(m_disbursements_less_offsets));
    }
    if (m_election_year_isSet) {
        obj.insert(QString("election_year"), ::OpenAPI::toJsonValue(m_election_year));
    }
    if (m_exempt_legal_accounting_disbursement_isSet) {
        obj.insert(QString("exempt_legal_accounting_disbursement"), ::OpenAPI::toJsonValue(m_exempt_legal_accounting_disbursement));
    }
    if (m_federal_funds_isSet) {
        obj.insert(QString("federal_funds"), ::OpenAPI::toJsonValue(m_federal_funds));
    }
    if (m_fundraising_disbursements_isSet) {
        obj.insert(QString("fundraising_disbursements"), ::OpenAPI::toJsonValue(m_fundraising_disbursements));
    }
    if (m_individual_contributions_less_refunds_isSet) {
        obj.insert(QString("individual_contributions_less_refunds"), ::OpenAPI::toJsonValue(m_individual_contributions_less_refunds));
    }
    if (m_net_receipts_isSet) {
        obj.insert(QString("net_receipts"), ::OpenAPI::toJsonValue(m_net_receipts));
    }
    if (m_offsets_to_operating_expenditures_isSet) {
        obj.insert(QString("offsets_to_operating_expenditures"), ::OpenAPI::toJsonValue(m_offsets_to_operating_expenditures));
    }
    if (m_operating_expenditures_isSet) {
        obj.insert(QString("operating_expenditures"), ::OpenAPI::toJsonValue(m_operating_expenditures));
    }
    if (m_other_disbursements_isSet) {
        obj.insert(QString("other_disbursements"), ::OpenAPI::toJsonValue(m_other_disbursements));
    }
    if (m_pac_contributions_less_refunds_isSet) {
        obj.insert(QString("pac_contributions_less_refunds"), ::OpenAPI::toJsonValue(m_pac_contributions_less_refunds));
    }
    if (m_party_contributions_less_refunds_isSet) {
        obj.insert(QString("party_contributions_less_refunds"), ::OpenAPI::toJsonValue(m_party_contributions_less_refunds));
    }
    if (m_repayments_loans_made_by_candidate_isSet) {
        obj.insert(QString("repayments_loans_made_by_candidate"), ::OpenAPI::toJsonValue(m_repayments_loans_made_by_candidate));
    }
    if (m_repayments_other_loans_isSet) {
        obj.insert(QString("repayments_other_loans"), ::OpenAPI::toJsonValue(m_repayments_other_loans));
    }
    if (m_rounded_net_receipts_isSet) {
        obj.insert(QString("rounded_net_receipts"), ::OpenAPI::toJsonValue(m_rounded_net_receipts));
    }
    if (m_total_contribution_refunds_isSet) {
        obj.insert(QString("total_contribution_refunds"), ::OpenAPI::toJsonValue(m_total_contribution_refunds));
    }
    if (m_total_loan_repayments_made_isSet) {
        obj.insert(QString("total_loan_repayments_made"), ::OpenAPI::toJsonValue(m_total_loan_repayments_made));
    }
    if (m_transfers_from_affiliated_committees_isSet) {
        obj.insert(QString("transfers_from_affiliated_committees"), ::OpenAPI::toJsonValue(m_transfers_from_affiliated_committees));
    }
    if (m_transfers_to_other_authorized_committees_isSet) {
        obj.insert(QString("transfers_to_other_authorized_committees"), ::OpenAPI::toJsonValue(m_transfers_to_other_authorized_committees));
    }
    return obj;
}

double OAIPresidentialSummary::getCandidateContributionsLessRepayments() const {
    return m_candidate_contributions_less_repayments;
}
void OAIPresidentialSummary::setCandidateContributionsLessRepayments(const double &candidate_contributions_less_repayments) {
    m_candidate_contributions_less_repayments = candidate_contributions_less_repayments;
    m_candidate_contributions_less_repayments_isSet = true;
}

bool OAIPresidentialSummary::is_candidate_contributions_less_repayments_Set() const{
    return m_candidate_contributions_less_repayments_isSet;
}

bool OAIPresidentialSummary::is_candidate_contributions_less_repayments_Valid() const{
    return m_candidate_contributions_less_repayments_isValid;
}

QString OAIPresidentialSummary::getCandidateId() const {
    return m_candidate_id;
}
void OAIPresidentialSummary::setCandidateId(const QString &candidate_id) {
    m_candidate_id = candidate_id;
    m_candidate_id_isSet = true;
}

bool OAIPresidentialSummary::is_candidate_id_Set() const{
    return m_candidate_id_isSet;
}

bool OAIPresidentialSummary::is_candidate_id_Valid() const{
    return m_candidate_id_isValid;
}

QString OAIPresidentialSummary::getCandidateLastName() const {
    return m_candidate_last_name;
}
void OAIPresidentialSummary::setCandidateLastName(const QString &candidate_last_name) {
    m_candidate_last_name = candidate_last_name;
    m_candidate_last_name_isSet = true;
}

bool OAIPresidentialSummary::is_candidate_last_name_Set() const{
    return m_candidate_last_name_isSet;
}

bool OAIPresidentialSummary::is_candidate_last_name_Valid() const{
    return m_candidate_last_name_isValid;
}

QString OAIPresidentialSummary::getCandidateName() const {
    return m_candidate_name;
}
void OAIPresidentialSummary::setCandidateName(const QString &candidate_name) {
    m_candidate_name = candidate_name;
    m_candidate_name_isSet = true;
}

bool OAIPresidentialSummary::is_candidate_name_Set() const{
    return m_candidate_name_isSet;
}

bool OAIPresidentialSummary::is_candidate_name_Valid() const{
    return m_candidate_name_isValid;
}

QString OAIPresidentialSummary::getCandidatePartyAffiliation() const {
    return m_candidate_party_affiliation;
}
void OAIPresidentialSummary::setCandidatePartyAffiliation(const QString &candidate_party_affiliation) {
    m_candidate_party_affiliation = candidate_party_affiliation;
    m_candidate_party_affiliation_isSet = true;
}

bool OAIPresidentialSummary::is_candidate_party_affiliation_Set() const{
    return m_candidate_party_affiliation_isSet;
}

bool OAIPresidentialSummary::is_candidate_party_affiliation_Valid() const{
    return m_candidate_party_affiliation_isValid;
}

double OAIPresidentialSummary::getCashOnHandEnd() const {
    return m_cash_on_hand_end;
}
void OAIPresidentialSummary::setCashOnHandEnd(const double &cash_on_hand_end) {
    m_cash_on_hand_end = cash_on_hand_end;
    m_cash_on_hand_end_isSet = true;
}

bool OAIPresidentialSummary::is_cash_on_hand_end_Set() const{
    return m_cash_on_hand_end_isSet;
}

bool OAIPresidentialSummary::is_cash_on_hand_end_Valid() const{
    return m_cash_on_hand_end_isValid;
}

QString OAIPresidentialSummary::getCommitteeDesignation() const {
    return m_committee_designation;
}
void OAIPresidentialSummary::setCommitteeDesignation(const QString &committee_designation) {
    m_committee_designation = committee_designation;
    m_committee_designation_isSet = true;
}

bool OAIPresidentialSummary::is_committee_designation_Set() const{
    return m_committee_designation_isSet;
}

bool OAIPresidentialSummary::is_committee_designation_Valid() const{
    return m_committee_designation_isValid;
}

QString OAIPresidentialSummary::getCommitteeId() const {
    return m_committee_id;
}
void OAIPresidentialSummary::setCommitteeId(const QString &committee_id) {
    m_committee_id = committee_id;
    m_committee_id_isSet = true;
}

bool OAIPresidentialSummary::is_committee_id_Set() const{
    return m_committee_id_isSet;
}

bool OAIPresidentialSummary::is_committee_id_Valid() const{
    return m_committee_id_isValid;
}

QString OAIPresidentialSummary::getCommitteeName() const {
    return m_committee_name;
}
void OAIPresidentialSummary::setCommitteeName(const QString &committee_name) {
    m_committee_name = committee_name;
    m_committee_name_isSet = true;
}

bool OAIPresidentialSummary::is_committee_name_Set() const{
    return m_committee_name_isSet;
}

bool OAIPresidentialSummary::is_committee_name_Valid() const{
    return m_committee_name_isValid;
}

QString OAIPresidentialSummary::getCommitteeType() const {
    return m_committee_type;
}
void OAIPresidentialSummary::setCommitteeType(const QString &committee_type) {
    m_committee_type = committee_type;
    m_committee_type_isSet = true;
}

bool OAIPresidentialSummary::is_committee_type_Set() const{
    return m_committee_type_isSet;
}

bool OAIPresidentialSummary::is_committee_type_Valid() const{
    return m_committee_type_isValid;
}

double OAIPresidentialSummary::getDebtsOwedByCommittee() const {
    return m_debts_owed_by_committee;
}
void OAIPresidentialSummary::setDebtsOwedByCommittee(const double &debts_owed_by_committee) {
    m_debts_owed_by_committee = debts_owed_by_committee;
    m_debts_owed_by_committee_isSet = true;
}

bool OAIPresidentialSummary::is_debts_owed_by_committee_Set() const{
    return m_debts_owed_by_committee_isSet;
}

bool OAIPresidentialSummary::is_debts_owed_by_committee_Valid() const{
    return m_debts_owed_by_committee_isValid;
}

double OAIPresidentialSummary::getDisbursementsLessOffsets() const {
    return m_disbursements_less_offsets;
}
void OAIPresidentialSummary::setDisbursementsLessOffsets(const double &disbursements_less_offsets) {
    m_disbursements_less_offsets = disbursements_less_offsets;
    m_disbursements_less_offsets_isSet = true;
}

bool OAIPresidentialSummary::is_disbursements_less_offsets_Set() const{
    return m_disbursements_less_offsets_isSet;
}

bool OAIPresidentialSummary::is_disbursements_less_offsets_Valid() const{
    return m_disbursements_less_offsets_isValid;
}

qint32 OAIPresidentialSummary::getElectionYear() const {
    return m_election_year;
}
void OAIPresidentialSummary::setElectionYear(const qint32 &election_year) {
    m_election_year = election_year;
    m_election_year_isSet = true;
}

bool OAIPresidentialSummary::is_election_year_Set() const{
    return m_election_year_isSet;
}

bool OAIPresidentialSummary::is_election_year_Valid() const{
    return m_election_year_isValid;
}

double OAIPresidentialSummary::getExemptLegalAccountingDisbursement() const {
    return m_exempt_legal_accounting_disbursement;
}
void OAIPresidentialSummary::setExemptLegalAccountingDisbursement(const double &exempt_legal_accounting_disbursement) {
    m_exempt_legal_accounting_disbursement = exempt_legal_accounting_disbursement;
    m_exempt_legal_accounting_disbursement_isSet = true;
}

bool OAIPresidentialSummary::is_exempt_legal_accounting_disbursement_Set() const{
    return m_exempt_legal_accounting_disbursement_isSet;
}

bool OAIPresidentialSummary::is_exempt_legal_accounting_disbursement_Valid() const{
    return m_exempt_legal_accounting_disbursement_isValid;
}

double OAIPresidentialSummary::getFederalFunds() const {
    return m_federal_funds;
}
void OAIPresidentialSummary::setFederalFunds(const double &federal_funds) {
    m_federal_funds = federal_funds;
    m_federal_funds_isSet = true;
}

bool OAIPresidentialSummary::is_federal_funds_Set() const{
    return m_federal_funds_isSet;
}

bool OAIPresidentialSummary::is_federal_funds_Valid() const{
    return m_federal_funds_isValid;
}

double OAIPresidentialSummary::getFundraisingDisbursements() const {
    return m_fundraising_disbursements;
}
void OAIPresidentialSummary::setFundraisingDisbursements(const double &fundraising_disbursements) {
    m_fundraising_disbursements = fundraising_disbursements;
    m_fundraising_disbursements_isSet = true;
}

bool OAIPresidentialSummary::is_fundraising_disbursements_Set() const{
    return m_fundraising_disbursements_isSet;
}

bool OAIPresidentialSummary::is_fundraising_disbursements_Valid() const{
    return m_fundraising_disbursements_isValid;
}

double OAIPresidentialSummary::getIndividualContributionsLessRefunds() const {
    return m_individual_contributions_less_refunds;
}
void OAIPresidentialSummary::setIndividualContributionsLessRefunds(const double &individual_contributions_less_refunds) {
    m_individual_contributions_less_refunds = individual_contributions_less_refunds;
    m_individual_contributions_less_refunds_isSet = true;
}

bool OAIPresidentialSummary::is_individual_contributions_less_refunds_Set() const{
    return m_individual_contributions_less_refunds_isSet;
}

bool OAIPresidentialSummary::is_individual_contributions_less_refunds_Valid() const{
    return m_individual_contributions_less_refunds_isValid;
}

double OAIPresidentialSummary::getNetReceipts() const {
    return m_net_receipts;
}
void OAIPresidentialSummary::setNetReceipts(const double &net_receipts) {
    m_net_receipts = net_receipts;
    m_net_receipts_isSet = true;
}

bool OAIPresidentialSummary::is_net_receipts_Set() const{
    return m_net_receipts_isSet;
}

bool OAIPresidentialSummary::is_net_receipts_Valid() const{
    return m_net_receipts_isValid;
}

double OAIPresidentialSummary::getOffsetsToOperatingExpenditures() const {
    return m_offsets_to_operating_expenditures;
}
void OAIPresidentialSummary::setOffsetsToOperatingExpenditures(const double &offsets_to_operating_expenditures) {
    m_offsets_to_operating_expenditures = offsets_to_operating_expenditures;
    m_offsets_to_operating_expenditures_isSet = true;
}

bool OAIPresidentialSummary::is_offsets_to_operating_expenditures_Set() const{
    return m_offsets_to_operating_expenditures_isSet;
}

bool OAIPresidentialSummary::is_offsets_to_operating_expenditures_Valid() const{
    return m_offsets_to_operating_expenditures_isValid;
}

double OAIPresidentialSummary::getOperatingExpenditures() const {
    return m_operating_expenditures;
}
void OAIPresidentialSummary::setOperatingExpenditures(const double &operating_expenditures) {
    m_operating_expenditures = operating_expenditures;
    m_operating_expenditures_isSet = true;
}

bool OAIPresidentialSummary::is_operating_expenditures_Set() const{
    return m_operating_expenditures_isSet;
}

bool OAIPresidentialSummary::is_operating_expenditures_Valid() const{
    return m_operating_expenditures_isValid;
}

double OAIPresidentialSummary::getOtherDisbursements() const {
    return m_other_disbursements;
}
void OAIPresidentialSummary::setOtherDisbursements(const double &other_disbursements) {
    m_other_disbursements = other_disbursements;
    m_other_disbursements_isSet = true;
}

bool OAIPresidentialSummary::is_other_disbursements_Set() const{
    return m_other_disbursements_isSet;
}

bool OAIPresidentialSummary::is_other_disbursements_Valid() const{
    return m_other_disbursements_isValid;
}

double OAIPresidentialSummary::getPacContributionsLessRefunds() const {
    return m_pac_contributions_less_refunds;
}
void OAIPresidentialSummary::setPacContributionsLessRefunds(const double &pac_contributions_less_refunds) {
    m_pac_contributions_less_refunds = pac_contributions_less_refunds;
    m_pac_contributions_less_refunds_isSet = true;
}

bool OAIPresidentialSummary::is_pac_contributions_less_refunds_Set() const{
    return m_pac_contributions_less_refunds_isSet;
}

bool OAIPresidentialSummary::is_pac_contributions_less_refunds_Valid() const{
    return m_pac_contributions_less_refunds_isValid;
}

double OAIPresidentialSummary::getPartyContributionsLessRefunds() const {
    return m_party_contributions_less_refunds;
}
void OAIPresidentialSummary::setPartyContributionsLessRefunds(const double &party_contributions_less_refunds) {
    m_party_contributions_less_refunds = party_contributions_less_refunds;
    m_party_contributions_less_refunds_isSet = true;
}

bool OAIPresidentialSummary::is_party_contributions_less_refunds_Set() const{
    return m_party_contributions_less_refunds_isSet;
}

bool OAIPresidentialSummary::is_party_contributions_less_refunds_Valid() const{
    return m_party_contributions_less_refunds_isValid;
}

double OAIPresidentialSummary::getRepaymentsLoansMadeByCandidate() const {
    return m_repayments_loans_made_by_candidate;
}
void OAIPresidentialSummary::setRepaymentsLoansMadeByCandidate(const double &repayments_loans_made_by_candidate) {
    m_repayments_loans_made_by_candidate = repayments_loans_made_by_candidate;
    m_repayments_loans_made_by_candidate_isSet = true;
}

bool OAIPresidentialSummary::is_repayments_loans_made_by_candidate_Set() const{
    return m_repayments_loans_made_by_candidate_isSet;
}

bool OAIPresidentialSummary::is_repayments_loans_made_by_candidate_Valid() const{
    return m_repayments_loans_made_by_candidate_isValid;
}

double OAIPresidentialSummary::getRepaymentsOtherLoans() const {
    return m_repayments_other_loans;
}
void OAIPresidentialSummary::setRepaymentsOtherLoans(const double &repayments_other_loans) {
    m_repayments_other_loans = repayments_other_loans;
    m_repayments_other_loans_isSet = true;
}

bool OAIPresidentialSummary::is_repayments_other_loans_Set() const{
    return m_repayments_other_loans_isSet;
}

bool OAIPresidentialSummary::is_repayments_other_loans_Valid() const{
    return m_repayments_other_loans_isValid;
}

double OAIPresidentialSummary::getRoundedNetReceipts() const {
    return m_rounded_net_receipts;
}
void OAIPresidentialSummary::setRoundedNetReceipts(const double &rounded_net_receipts) {
    m_rounded_net_receipts = rounded_net_receipts;
    m_rounded_net_receipts_isSet = true;
}

bool OAIPresidentialSummary::is_rounded_net_receipts_Set() const{
    return m_rounded_net_receipts_isSet;
}

bool OAIPresidentialSummary::is_rounded_net_receipts_Valid() const{
    return m_rounded_net_receipts_isValid;
}

double OAIPresidentialSummary::getTotalContributionRefunds() const {
    return m_total_contribution_refunds;
}
void OAIPresidentialSummary::setTotalContributionRefunds(const double &total_contribution_refunds) {
    m_total_contribution_refunds = total_contribution_refunds;
    m_total_contribution_refunds_isSet = true;
}

bool OAIPresidentialSummary::is_total_contribution_refunds_Set() const{
    return m_total_contribution_refunds_isSet;
}

bool OAIPresidentialSummary::is_total_contribution_refunds_Valid() const{
    return m_total_contribution_refunds_isValid;
}

double OAIPresidentialSummary::getTotalLoanRepaymentsMade() const {
    return m_total_loan_repayments_made;
}
void OAIPresidentialSummary::setTotalLoanRepaymentsMade(const double &total_loan_repayments_made) {
    m_total_loan_repayments_made = total_loan_repayments_made;
    m_total_loan_repayments_made_isSet = true;
}

bool OAIPresidentialSummary::is_total_loan_repayments_made_Set() const{
    return m_total_loan_repayments_made_isSet;
}

bool OAIPresidentialSummary::is_total_loan_repayments_made_Valid() const{
    return m_total_loan_repayments_made_isValid;
}

double OAIPresidentialSummary::getTransfersFromAffiliatedCommittees() const {
    return m_transfers_from_affiliated_committees;
}
void OAIPresidentialSummary::setTransfersFromAffiliatedCommittees(const double &transfers_from_affiliated_committees) {
    m_transfers_from_affiliated_committees = transfers_from_affiliated_committees;
    m_transfers_from_affiliated_committees_isSet = true;
}

bool OAIPresidentialSummary::is_transfers_from_affiliated_committees_Set() const{
    return m_transfers_from_affiliated_committees_isSet;
}

bool OAIPresidentialSummary::is_transfers_from_affiliated_committees_Valid() const{
    return m_transfers_from_affiliated_committees_isValid;
}

double OAIPresidentialSummary::getTransfersToOtherAuthorizedCommittees() const {
    return m_transfers_to_other_authorized_committees;
}
void OAIPresidentialSummary::setTransfersToOtherAuthorizedCommittees(const double &transfers_to_other_authorized_committees) {
    m_transfers_to_other_authorized_committees = transfers_to_other_authorized_committees;
    m_transfers_to_other_authorized_committees_isSet = true;
}

bool OAIPresidentialSummary::is_transfers_to_other_authorized_committees_Set() const{
    return m_transfers_to_other_authorized_committees_isSet;
}

bool OAIPresidentialSummary::is_transfers_to_other_authorized_committees_Valid() const{
    return m_transfers_to_other_authorized_committees_isValid;
}

bool OAIPresidentialSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_candidate_contributions_less_repayments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_party_affiliation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_on_hand_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_designation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debts_owed_by_committee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disbursements_less_offsets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exempt_legal_accounting_disbursement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_federal_funds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fundraising_disbursements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_individual_contributions_less_refunds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_receipts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offsets_to_operating_expenditures_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_expenditures_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_disbursements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pac_contributions_less_refunds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_contributions_less_refunds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repayments_loans_made_by_candidate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repayments_other_loans_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rounded_net_receipts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_contribution_refunds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_loan_repayments_made_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfers_from_affiliated_committees_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfers_to_other_authorized_committees_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPresidentialSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
