/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAI_legal_search__get_default_response_advisory_opinions_inner.h
 *
 * 
 */

#ifndef OAI_legal_search__get_default_response_advisory_opinions_inner_H
#define OAI_legal_search__get_default_response_advisory_opinions_inner_H

#include <QJsonObject>

#include "OAIObject.h"
#include "OAI_legal_search__get_default_response_advisory_opinions_inner_ao_citations_inner.h"
#include "OAI_legal_search__get_default_response_advisory_opinions_inner_documents_inner.h"
#include "OAI_legal_search__get_default_response_advisory_opinions_inner_entities_inner.h"
#include "OAI_legal_search__get_default_response_advisory_opinions_inner_regulatory_citations_inner.h"
#include "OAI_legal_search__get_default_response_advisory_opinions_inner_statutory_citations_inner.h"
#include <QDate>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAI_legal_search__get_default_response_advisory_opinions_inner_ao_citations_inner;
class OAI_legal_search__get_default_response_advisory_opinions_inner_documents_inner;
class OAI_legal_search__get_default_response_advisory_opinions_inner_entities_inner;
class OAI_legal_search__get_default_response_advisory_opinions_inner_regulatory_citations_inner;
class OAI_legal_search__get_default_response_advisory_opinions_inner_statutory_citations_inner;

class OAI_legal_search__get_default_response_advisory_opinions_inner : public OAIObject {
public:
    OAI_legal_search__get_default_response_advisory_opinions_inner();
    OAI_legal_search__get_default_response_advisory_opinions_inner(QString json);
    ~OAI_legal_search__get_default_response_advisory_opinions_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAI_legal_search__get_default_response_advisory_opinions_inner_ao_citations_inner> getAoCitations() const;
    void setAoCitations(const QList<OAI_legal_search__get_default_response_advisory_opinions_inner_ao_citations_inner> &ao_citations);
    bool is_ao_citations_Set() const;
    bool is_ao_citations_Valid() const;

    QList<OAI_legal_search__get_default_response_advisory_opinions_inner_ao_citations_inner> getAosCitedBy() const;
    void setAosCitedBy(const QList<OAI_legal_search__get_default_response_advisory_opinions_inner_ao_citations_inner> &aos_cited_by);
    bool is_aos_cited_by_Set() const;
    bool is_aos_cited_by_Valid() const;

    QList<QString> getCommenterNames() const;
    void setCommenterNames(const QList<QString> &commenter_names);
    bool is_commenter_names_Set() const;
    bool is_commenter_names_Valid() const;

    OAIObject getDocumentHighlights() const;
    void setDocumentHighlights(const OAIObject &document_highlights);
    bool is_document_highlights_Set() const;
    bool is_document_highlights_Valid() const;

    QList<OAI_legal_search__get_default_response_advisory_opinions_inner_documents_inner> getDocuments() const;
    void setDocuments(const QList<OAI_legal_search__get_default_response_advisory_opinions_inner_documents_inner> &documents);
    bool is_documents_Set() const;
    bool is_documents_Valid() const;

    QList<OAI_legal_search__get_default_response_advisory_opinions_inner_entities_inner> getEntities() const;
    void setEntities(const QList<OAI_legal_search__get_default_response_advisory_opinions_inner_entities_inner> &entities);
    bool is_entities_Set() const;
    bool is_entities_Valid() const;

    QList<QString> getHighlights() const;
    void setHighlights(const QList<QString> &highlights);
    bool is_highlights_Set() const;
    bool is_highlights_Valid() const;

    bool isIsPending() const;
    void setIsPending(const bool &is_pending);
    bool is_is_pending_Set() const;
    bool is_is_pending_Valid() const;

    QDate getIssueDate() const;
    void setIssueDate(const QDate &issue_date);
    bool is_issue_date_Set() const;
    bool is_issue_date_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getRFalse() const;
    void setRFalse(const QString &r_false);
    bool is_r_false_Set() const;
    bool is_r_false_Valid() const;

    QList<OAI_legal_search__get_default_response_advisory_opinions_inner_regulatory_citations_inner> getRegulatoryCitations() const;
    void setRegulatoryCitations(const QList<OAI_legal_search__get_default_response_advisory_opinions_inner_regulatory_citations_inner> &regulatory_citations);
    bool is_regulatory_citations_Set() const;
    bool is_regulatory_citations_Valid() const;

    QList<QString> getRepresentativeNames() const;
    void setRepresentativeNames(const QList<QString> &representative_names);
    bool is_representative_names_Set() const;
    bool is_representative_names_Valid() const;

    QDate getRequestDate() const;
    void setRequestDate(const QDate &request_date);
    bool is_request_date_Set() const;
    bool is_request_date_Valid() const;

    QList<QString> getRequestorNames() const;
    void setRequestorNames(const QList<QString> &requestor_names);
    bool is_requestor_names_Set() const;
    bool is_requestor_names_Valid() const;

    QList<QString> getRequestorTypes() const;
    void setRequestorTypes(const QList<QString> &requestor_types);
    bool is_requestor_types_Set() const;
    bool is_requestor_types_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QList<OAI_legal_search__get_default_response_advisory_opinions_inner_statutory_citations_inner> getStatutoryCitations() const;
    void setStatutoryCitations(const QList<OAI_legal_search__get_default_response_advisory_opinions_inner_statutory_citations_inner> &statutory_citations);
    bool is_statutory_citations_Set() const;
    bool is_statutory_citations_Valid() const;

    QString getSummary() const;
    void setSummary(const QString &summary);
    bool is_summary_Set() const;
    bool is_summary_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAI_legal_search__get_default_response_advisory_opinions_inner_ao_citations_inner> m_ao_citations;
    bool m_ao_citations_isSet;
    bool m_ao_citations_isValid;

    QList<OAI_legal_search__get_default_response_advisory_opinions_inner_ao_citations_inner> m_aos_cited_by;
    bool m_aos_cited_by_isSet;
    bool m_aos_cited_by_isValid;

    QList<QString> m_commenter_names;
    bool m_commenter_names_isSet;
    bool m_commenter_names_isValid;

    OAIObject m_document_highlights;
    bool m_document_highlights_isSet;
    bool m_document_highlights_isValid;

    QList<OAI_legal_search__get_default_response_advisory_opinions_inner_documents_inner> m_documents;
    bool m_documents_isSet;
    bool m_documents_isValid;

    QList<OAI_legal_search__get_default_response_advisory_opinions_inner_entities_inner> m_entities;
    bool m_entities_isSet;
    bool m_entities_isValid;

    QList<QString> m_highlights;
    bool m_highlights_isSet;
    bool m_highlights_isValid;

    bool m_is_pending;
    bool m_is_pending_isSet;
    bool m_is_pending_isValid;

    QDate m_issue_date;
    bool m_issue_date_isSet;
    bool m_issue_date_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_r_false;
    bool m_r_false_isSet;
    bool m_r_false_isValid;

    QList<OAI_legal_search__get_default_response_advisory_opinions_inner_regulatory_citations_inner> m_regulatory_citations;
    bool m_regulatory_citations_isSet;
    bool m_regulatory_citations_isValid;

    QList<QString> m_representative_names;
    bool m_representative_names_isSet;
    bool m_representative_names_isValid;

    QDate m_request_date;
    bool m_request_date_isSet;
    bool m_request_date_isValid;

    QList<QString> m_requestor_names;
    bool m_requestor_names_isSet;
    bool m_requestor_names_isValid;

    QList<QString> m_requestor_types;
    bool m_requestor_types_isSet;
    bool m_requestor_types_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QList<OAI_legal_search__get_default_response_advisory_opinions_inner_statutory_citations_inner> m_statutory_citations;
    bool m_statutory_citations_isSet;
    bool m_statutory_citations_isValid;

    QString m_summary;
    bool m_summary_isSet;
    bool m_summary_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAI_legal_search__get_default_response_advisory_opinions_inner)

#endif // OAI_legal_search__get_default_response_advisory_opinions_inner_H
