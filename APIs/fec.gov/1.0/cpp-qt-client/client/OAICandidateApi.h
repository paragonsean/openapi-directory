/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICandidateApi_H
#define OAI_OAICandidateApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICandidateDetailPage.h"
#include "OAICandidateHistoryPage.h"
#include "OAICandidateHistoryTotalPage.h"
#include "OAICandidatePage.h"
#include "OAICandidateTotalAggregatePage.h"
#include "OAICommitteeTotalsPage.h"
#include "OAITotalByOfficeByPartyPage.h"
#include "OAITotalByOfficePage.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICandidateApi : public QObject {
    Q_OBJECT

public:
    OAICandidateApi(const int timeOut = 0);
    ~OAICandidateApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  candidate_id QString [required]
    * @param[in]  incumbent_challenge QList<QString> [optional]
    * @param[in]  cycle QList<qint32> [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  federal_funds_flag bool [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  name QList<QString> [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  election_year QList<qint32> [optional]
    * @param[in]  office QList<QString> [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  candidate_status QList<QString> [optional]
    * @param[in]  district QList<QString> [optional]
    * @param[in]  has_raised_funds bool [optional]
    * @param[in]  party QList<QString> [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  state QList<QString> [optional]
    * @param[in]  year QString [optional]
    */
    virtual void candidateCandidateIdGet(const QString &api_key, const QString &candidate_id, const ::OpenAPI::OptionalParam<QList<QString>> &incumbent_challenge = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &cycle = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &federal_funds_flag = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<qint32>> &election_year = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<QString>> &office = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &candidate_status = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &district = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &has_raised_funds = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &party = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &state = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &year = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  cycle qint32 [required]
    * @param[in]  candidate_id QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  election_full bool [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  sort_nulls_last bool [optional]
    */
    virtual void candidateCandidateIdHistoryCycleGet(const QString &api_key, const qint32 &cycle, const QString &candidate_id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &election_full = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  candidate_id QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  election_full bool [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  sort_nulls_last bool [optional]
    */
    virtual void candidateCandidateIdHistoryGet(const QString &api_key, const QString &candidate_id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &election_full = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  candidate_id QString [required]
    * @param[in]  election_full bool [optional]
    * @param[in]  cycle QList<qint32> [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void candidateCandidateIdTotalsGet(const QString &api_key, const QString &candidate_id, const ::OpenAPI::OptionalParam<bool> &election_full = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<qint32>> &cycle = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  incumbent_challenge QList<QString> [optional]
    * @param[in]  min_first_file_date QDate [optional]
    * @param[in]  q QList<QString> [optional]
    * @param[in]  cycle QList<qint32> [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  federal_funds_flag bool [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  candidate_id QList<QString> [optional]
    * @param[in]  name QList<QString> [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  election_year QList<qint32> [optional]
    * @param[in]  office QList<QString> [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  candidate_status QList<QString> [optional]
    * @param[in]  max_first_file_date QDate [optional]
    * @param[in]  district QList<QString> [optional]
    * @param[in]  has_raised_funds bool [optional]
    * @param[in]  party QList<QString> [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  is_active_candidate bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  state QList<QString> [optional]
    * @param[in]  year QString [optional]
    */
    virtual void candidatesGet(const QString &api_key, const ::OpenAPI::OptionalParam<QList<QString>> &incumbent_challenge = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &min_first_file_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<QString>> &q = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &cycle = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &federal_funds_flag = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &candidate_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<qint32>> &election_year = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<QString>> &office = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &candidate_status = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &max_first_file_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<QString>> &district = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &has_raised_funds = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &party = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_active_candidate = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &state = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &year = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  incumbent_challenge QList<QString> [optional]
    * @param[in]  min_first_file_date QDate [optional]
    * @param[in]  q QList<QString> [optional]
    * @param[in]  cycle QList<qint32> [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  federal_funds_flag bool [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  candidate_id QList<QString> [optional]
    * @param[in]  name QList<QString> [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  election_year QList<qint32> [optional]
    * @param[in]  office QList<QString> [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  candidate_status QList<QString> [optional]
    * @param[in]  max_first_file_date QDate [optional]
    * @param[in]  district QList<QString> [optional]
    * @param[in]  has_raised_funds bool [optional]
    * @param[in]  party QList<QString> [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  is_active_candidate bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  state QList<QString> [optional]
    * @param[in]  year QString [optional]
    */
    virtual void candidatesSearchGet(const QString &api_key, const ::OpenAPI::OptionalParam<QList<QString>> &incumbent_challenge = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &min_first_file_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<QString>> &q = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &cycle = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &federal_funds_flag = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &candidate_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<qint32>> &election_year = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<QString>> &office = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &candidate_status = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &max_first_file_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QList<QString>> &district = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &has_raised_funds = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &party = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_active_candidate = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &state = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &year = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  max_election_cycle qint32 [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  election_year QList<qint32> [optional]
    * @param[in]  office QString [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  min_election_cycle qint32 [optional]
    * @param[in]  district QList<QString> [optional]
    * @param[in]  election_full bool [optional]
    * @param[in]  party QString [optional]
    * @param[in]  is_active_candidate bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  state QList<QString> [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  aggregate_by QString [optional]
    */
    virtual void candidatesTotalsAggregatesGet(const QString &api_key, const ::OpenAPI::OptionalParam<qint32> &max_election_cycle = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<qint32>> &election_year = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QString> &office = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &min_election_cycle = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &district = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &election_full = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &party = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_active_candidate = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &state = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &aggregate_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  election_full bool [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  is_active_candidate bool [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  election_year QList<qint32> [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  office QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void candidatesTotalsByOfficeByPartyGet(const QString &api_key, const ::OpenAPI::OptionalParam<bool> &election_full = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &is_active_candidate = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<qint32>> &election_year = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &office = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  max_election_cycle qint32 [optional]
    * @param[in]  election_full bool [optional]
    * @param[in]  is_active_candidate bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  election_year QList<qint32> [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  office QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  min_election_cycle qint32 [optional]
    */
    virtual void candidatesTotalsByOfficeGet(const QString &api_key, const ::OpenAPI::OptionalParam<qint32> &max_election_cycle = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &election_full = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_active_candidate = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<qint32>> &election_year = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &office = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &min_election_cycle = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  max_disbursements QString [optional]
    * @param[in]  q QList<QString> [optional]
    * @param[in]  cycle QList<qint32> [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  max_cash_on_hand_end_period QString [optional]
    * @param[in]  max_debts_owed_by_committee QString [optional]
    * @param[in]  min_disbursements QString [optional]
    * @param[in]  federal_funds_flag bool [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  candidate_id QList<QString> [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  election_year QList<qint32> [optional]
    * @param[in]  office QList<QString> [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  district QList<QString> [optional]
    * @param[in]  election_full bool [optional]
    * @param[in]  min_debts_owed_by_committee QString [optional]
    * @param[in]  max_receipts QString [optional]
    * @param[in]  has_raised_funds bool [optional]
    * @param[in]  party QList<QString> [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  is_active_candidate bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  state QList<QString> [optional]
    * @param[in]  min_cash_on_hand_end_period QString [optional]
    * @param[in]  min_receipts QString [optional]
    */
    virtual void candidatesTotalsGet(const QString &api_key, const ::OpenAPI::OptionalParam<QString> &max_disbursements = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &q = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &cycle = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &max_cash_on_hand_end_period = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_debts_owed_by_committee = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min_disbursements = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &federal_funds_flag = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &candidate_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<qint32>> &election_year = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<QString>> &office = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &district = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &election_full = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &min_debts_owed_by_committee = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_receipts = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &has_raised_funds = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &party = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_active_candidate = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &state = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &min_cash_on_hand_end_period = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min_receipts = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  committee_id QString [required]
    * @param[in]  incumbent_challenge QList<QString> [optional]
    * @param[in]  cycle QList<qint32> [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  federal_funds_flag bool [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  name QList<QString> [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  election_year QList<qint32> [optional]
    * @param[in]  office QList<QString> [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  candidate_status QList<QString> [optional]
    * @param[in]  district QList<QString> [optional]
    * @param[in]  has_raised_funds bool [optional]
    * @param[in]  party QList<QString> [optional]
    * @param[in]  sort_nulls_last bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  state QList<QString> [optional]
    * @param[in]  year QString [optional]
    */
    virtual void committeeCommitteeIdCandidatesGet(const QString &api_key, const QString &committee_id, const ::OpenAPI::OptionalParam<QList<QString>> &incumbent_challenge = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &cycle = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &federal_funds_flag = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<qint32>> &election_year = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<QString>> &office = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &candidate_status = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &district = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &has_raised_funds = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &party = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &state = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &year = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  committee_id QString [required]
    * @param[in]  cycle qint32 [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  election_full bool [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  sort_nulls_last bool [optional]
    */
    virtual void committeeCommitteeIdCandidatesHistoryCycleGet(const QString &api_key, const QString &committee_id, const qint32 &cycle, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &election_full = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  committee_id QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  sort_hide_null bool [optional]
    * @param[in]  election_full bool [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort_null_only bool [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  sort_nulls_last bool [optional]
    */
    virtual void committeeCommitteeIdCandidatesHistoryGet(const QString &api_key, const QString &committee_id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &sort_hide_null = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &election_full = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &sort_null_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &sort_nulls_last = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void candidateCandidateIdGetCallback(OAIHttpRequestWorker *worker);
    void candidateCandidateIdHistoryCycleGetCallback(OAIHttpRequestWorker *worker);
    void candidateCandidateIdHistoryGetCallback(OAIHttpRequestWorker *worker);
    void candidateCandidateIdTotalsGetCallback(OAIHttpRequestWorker *worker);
    void candidatesGetCallback(OAIHttpRequestWorker *worker);
    void candidatesSearchGetCallback(OAIHttpRequestWorker *worker);
    void candidatesTotalsAggregatesGetCallback(OAIHttpRequestWorker *worker);
    void candidatesTotalsByOfficeByPartyGetCallback(OAIHttpRequestWorker *worker);
    void candidatesTotalsByOfficeGetCallback(OAIHttpRequestWorker *worker);
    void candidatesTotalsGetCallback(OAIHttpRequestWorker *worker);
    void committeeCommitteeIdCandidatesGetCallback(OAIHttpRequestWorker *worker);
    void committeeCommitteeIdCandidatesHistoryCycleGetCallback(OAIHttpRequestWorker *worker);
    void committeeCommitteeIdCandidatesHistoryGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void candidateCandidateIdGetSignal(OAICandidateDetailPage summary);
    void candidateCandidateIdHistoryCycleGetSignal(OAICandidateHistoryPage summary);
    void candidateCandidateIdHistoryGetSignal(OAICandidateHistoryPage summary);
    void candidateCandidateIdTotalsGetSignal(OAICommitteeTotalsPage summary);
    void candidatesGetSignal(OAICandidatePage summary);
    void candidatesSearchGetSignal(OAICandidatePage summary);
    void candidatesTotalsAggregatesGetSignal(OAICandidateTotalAggregatePage summary);
    void candidatesTotalsByOfficeByPartyGetSignal(OAITotalByOfficeByPartyPage summary);
    void candidatesTotalsByOfficeGetSignal(OAITotalByOfficePage summary);
    void candidatesTotalsGetSignal(OAICandidateHistoryTotalPage summary);
    void committeeCommitteeIdCandidatesGetSignal(OAICandidateDetailPage summary);
    void committeeCommitteeIdCandidatesHistoryCycleGetSignal(OAICandidateHistoryPage summary);
    void committeeCommitteeIdCandidatesHistoryGetSignal(OAICandidateHistoryPage summary);


    void candidateCandidateIdGetSignalFull(OAIHttpRequestWorker *worker, OAICandidateDetailPage summary);
    void candidateCandidateIdHistoryCycleGetSignalFull(OAIHttpRequestWorker *worker, OAICandidateHistoryPage summary);
    void candidateCandidateIdHistoryGetSignalFull(OAIHttpRequestWorker *worker, OAICandidateHistoryPage summary);
    void candidateCandidateIdTotalsGetSignalFull(OAIHttpRequestWorker *worker, OAICommitteeTotalsPage summary);
    void candidatesGetSignalFull(OAIHttpRequestWorker *worker, OAICandidatePage summary);
    void candidatesSearchGetSignalFull(OAIHttpRequestWorker *worker, OAICandidatePage summary);
    void candidatesTotalsAggregatesGetSignalFull(OAIHttpRequestWorker *worker, OAICandidateTotalAggregatePage summary);
    void candidatesTotalsByOfficeByPartyGetSignalFull(OAIHttpRequestWorker *worker, OAITotalByOfficeByPartyPage summary);
    void candidatesTotalsByOfficeGetSignalFull(OAIHttpRequestWorker *worker, OAITotalByOfficePage summary);
    void candidatesTotalsGetSignalFull(OAIHttpRequestWorker *worker, OAICandidateHistoryTotalPage summary);
    void committeeCommitteeIdCandidatesGetSignalFull(OAIHttpRequestWorker *worker, OAICandidateDetailPage summary);
    void committeeCommitteeIdCandidatesHistoryCycleGetSignalFull(OAIHttpRequestWorker *worker, OAICandidateHistoryPage summary);
    void committeeCommitteeIdCandidatesHistoryGetSignalFull(OAIHttpRequestWorker *worker, OAICandidateHistoryPage summary);

    Q_DECL_DEPRECATED_X("Use candidateCandidateIdGetSignalError() instead")
    void candidateCandidateIdGetSignalE(OAICandidateDetailPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void candidateCandidateIdGetSignalError(OAICandidateDetailPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use candidateCandidateIdHistoryCycleGetSignalError() instead")
    void candidateCandidateIdHistoryCycleGetSignalE(OAICandidateHistoryPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void candidateCandidateIdHistoryCycleGetSignalError(OAICandidateHistoryPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use candidateCandidateIdHistoryGetSignalError() instead")
    void candidateCandidateIdHistoryGetSignalE(OAICandidateHistoryPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void candidateCandidateIdHistoryGetSignalError(OAICandidateHistoryPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use candidateCandidateIdTotalsGetSignalError() instead")
    void candidateCandidateIdTotalsGetSignalE(OAICommitteeTotalsPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void candidateCandidateIdTotalsGetSignalError(OAICommitteeTotalsPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use candidatesGetSignalError() instead")
    void candidatesGetSignalE(OAICandidatePage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void candidatesGetSignalError(OAICandidatePage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use candidatesSearchGetSignalError() instead")
    void candidatesSearchGetSignalE(OAICandidatePage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void candidatesSearchGetSignalError(OAICandidatePage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use candidatesTotalsAggregatesGetSignalError() instead")
    void candidatesTotalsAggregatesGetSignalE(OAICandidateTotalAggregatePage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void candidatesTotalsAggregatesGetSignalError(OAICandidateTotalAggregatePage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use candidatesTotalsByOfficeByPartyGetSignalError() instead")
    void candidatesTotalsByOfficeByPartyGetSignalE(OAITotalByOfficeByPartyPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void candidatesTotalsByOfficeByPartyGetSignalError(OAITotalByOfficeByPartyPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use candidatesTotalsByOfficeGetSignalError() instead")
    void candidatesTotalsByOfficeGetSignalE(OAITotalByOfficePage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void candidatesTotalsByOfficeGetSignalError(OAITotalByOfficePage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use candidatesTotalsGetSignalError() instead")
    void candidatesTotalsGetSignalE(OAICandidateHistoryTotalPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void candidatesTotalsGetSignalError(OAICandidateHistoryTotalPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use committeeCommitteeIdCandidatesGetSignalError() instead")
    void committeeCommitteeIdCandidatesGetSignalE(OAICandidateDetailPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void committeeCommitteeIdCandidatesGetSignalError(OAICandidateDetailPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use committeeCommitteeIdCandidatesHistoryCycleGetSignalError() instead")
    void committeeCommitteeIdCandidatesHistoryCycleGetSignalE(OAICandidateHistoryPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void committeeCommitteeIdCandidatesHistoryCycleGetSignalError(OAICandidateHistoryPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use committeeCommitteeIdCandidatesHistoryGetSignalError() instead")
    void committeeCommitteeIdCandidatesHistoryGetSignalE(OAICandidateHistoryPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void committeeCommitteeIdCandidatesHistoryGetSignalError(OAICandidateHistoryPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use candidateCandidateIdGetSignalErrorFull() instead")
    void candidateCandidateIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void candidateCandidateIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use candidateCandidateIdHistoryCycleGetSignalErrorFull() instead")
    void candidateCandidateIdHistoryCycleGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void candidateCandidateIdHistoryCycleGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use candidateCandidateIdHistoryGetSignalErrorFull() instead")
    void candidateCandidateIdHistoryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void candidateCandidateIdHistoryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use candidateCandidateIdTotalsGetSignalErrorFull() instead")
    void candidateCandidateIdTotalsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void candidateCandidateIdTotalsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use candidatesGetSignalErrorFull() instead")
    void candidatesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void candidatesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use candidatesSearchGetSignalErrorFull() instead")
    void candidatesSearchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void candidatesSearchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use candidatesTotalsAggregatesGetSignalErrorFull() instead")
    void candidatesTotalsAggregatesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void candidatesTotalsAggregatesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use candidatesTotalsByOfficeByPartyGetSignalErrorFull() instead")
    void candidatesTotalsByOfficeByPartyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void candidatesTotalsByOfficeByPartyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use candidatesTotalsByOfficeGetSignalErrorFull() instead")
    void candidatesTotalsByOfficeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void candidatesTotalsByOfficeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use candidatesTotalsGetSignalErrorFull() instead")
    void candidatesTotalsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void candidatesTotalsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use committeeCommitteeIdCandidatesGetSignalErrorFull() instead")
    void committeeCommitteeIdCandidatesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void committeeCommitteeIdCandidatesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use committeeCommitteeIdCandidatesHistoryCycleGetSignalErrorFull() instead")
    void committeeCommitteeIdCandidatesHistoryCycleGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void committeeCommitteeIdCandidatesHistoryCycleGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use committeeCommitteeIdCandidatesHistoryGetSignalErrorFull() instead")
    void committeeCommitteeIdCandidatesHistoryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void committeeCommitteeIdCandidatesHistoryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
