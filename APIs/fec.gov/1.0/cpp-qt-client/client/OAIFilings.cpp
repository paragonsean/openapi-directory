/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilings::OAIFilings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilings::OAIFilings() {
    this->initializeModel();
}

OAIFilings::~OAIFilings() {}

void OAIFilings::initializeModel() {

    m_additional_bank_names_isSet = false;
    m_additional_bank_names_isValid = false;

    m_amendment_chain_isSet = false;
    m_amendment_chain_isValid = false;

    m_amendment_indicator_isSet = false;
    m_amendment_indicator_isValid = false;

    m_amendment_version_isSet = false;
    m_amendment_version_isValid = false;

    m_bank_depository_city_isSet = false;
    m_bank_depository_city_isValid = false;

    m_bank_depository_name_isSet = false;
    m_bank_depository_name_isValid = false;

    m_bank_depository_state_isSet = false;
    m_bank_depository_state_isValid = false;

    m_bank_depository_street_1_isSet = false;
    m_bank_depository_street_1_isValid = false;

    m_bank_depository_street_2_isSet = false;
    m_bank_depository_street_2_isValid = false;

    m_bank_depository_zip_isSet = false;
    m_bank_depository_zip_isValid = false;

    m_beginning_image_number_isSet = false;
    m_beginning_image_number_isValid = false;

    m_candidate_id_isSet = false;
    m_candidate_id_isValid = false;

    m_candidate_name_isSet = false;
    m_candidate_name_isValid = false;

    m_cash_on_hand_beginning_period_isSet = false;
    m_cash_on_hand_beginning_period_isValid = false;

    m_cash_on_hand_end_period_isSet = false;
    m_cash_on_hand_end_period_isValid = false;

    m_committee_id_isSet = false;
    m_committee_id_isValid = false;

    m_committee_name_isSet = false;
    m_committee_name_isValid = false;

    m_committee_type_isSet = false;
    m_committee_type_isValid = false;

    m_coverage_end_date_isSet = false;
    m_coverage_end_date_isValid = false;

    m_coverage_start_date_isSet = false;
    m_coverage_start_date_isValid = false;

    m_csv_url_isSet = false;
    m_csv_url_isValid = false;

    m_cycle_isSet = false;
    m_cycle_isValid = false;

    m_debts_owed_by_committee_isSet = false;
    m_debts_owed_by_committee_isValid = false;

    m_debts_owed_to_committee_isSet = false;
    m_debts_owed_to_committee_isValid = false;

    m_document_description_isSet = false;
    m_document_description_isValid = false;

    m_document_type_isSet = false;
    m_document_type_isValid = false;

    m_document_type_full_isSet = false;
    m_document_type_full_isValid = false;

    m_election_year_isSet = false;
    m_election_year_isValid = false;

    m_ending_image_number_isSet = false;
    m_ending_image_number_isValid = false;

    m_fec_file_id_isSet = false;
    m_fec_file_id_isValid = false;

    m_fec_url_isSet = false;
    m_fec_url_isValid = false;

    m_file_number_isSet = false;
    m_file_number_isValid = false;

    m_form_category_isSet = false;
    m_form_category_isValid = false;

    m_form_type_isSet = false;
    m_form_type_isValid = false;

    m_house_personal_funds_isSet = false;
    m_house_personal_funds_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_is_amended_isSet = false;
    m_is_amended_isValid = false;

    m_means_filed_isSet = false;
    m_means_filed_isValid = false;

    m_most_recent_isSet = false;
    m_most_recent_isValid = false;

    m_most_recent_file_number_isSet = false;
    m_most_recent_file_number_isValid = false;

    m_net_donations_isSet = false;
    m_net_donations_isValid = false;

    m_office_isSet = false;
    m_office_isValid = false;

    m_opposition_personal_funds_isSet = false;
    m_opposition_personal_funds_isValid = false;

    m_pages_isSet = false;
    m_pages_isValid = false;

    m_party_isSet = false;
    m_party_isValid = false;

    m_pdf_url_isSet = false;
    m_pdf_url_isValid = false;

    m_previous_file_number_isSet = false;
    m_previous_file_number_isValid = false;

    m_primary_general_indicator_isSet = false;
    m_primary_general_indicator_isValid = false;

    m_receipt_date_isSet = false;
    m_receipt_date_isValid = false;

    m_report_type_isSet = false;
    m_report_type_isValid = false;

    m_report_type_full_isSet = false;
    m_report_type_full_isValid = false;

    m_report_year_isSet = false;
    m_report_year_isValid = false;

    m_request_type_isSet = false;
    m_request_type_isValid = false;

    m_senate_personal_funds_isSet = false;
    m_senate_personal_funds_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_sub_id_isSet = false;
    m_sub_id_isValid = false;

    m_total_communication_cost_isSet = false;
    m_total_communication_cost_isValid = false;

    m_total_disbursements_isSet = false;
    m_total_disbursements_isValid = false;

    m_total_independent_expenditures_isSet = false;
    m_total_independent_expenditures_isValid = false;

    m_total_individual_contributions_isSet = false;
    m_total_individual_contributions_isValid = false;

    m_total_receipts_isSet = false;
    m_total_receipts_isValid = false;

    m_treasurer_name_isSet = false;
    m_treasurer_name_isValid = false;

    m_update_date_isSet = false;
    m_update_date_isValid = false;
}

void OAIFilings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilings::fromJsonObject(QJsonObject json) {

    m_additional_bank_names_isValid = ::OpenAPI::fromJsonValue(m_additional_bank_names, json[QString("additional_bank_names")]);
    m_additional_bank_names_isSet = !json[QString("additional_bank_names")].isNull() && m_additional_bank_names_isValid;

    m_amendment_chain_isValid = ::OpenAPI::fromJsonValue(m_amendment_chain, json[QString("amendment_chain")]);
    m_amendment_chain_isSet = !json[QString("amendment_chain")].isNull() && m_amendment_chain_isValid;

    m_amendment_indicator_isValid = ::OpenAPI::fromJsonValue(m_amendment_indicator, json[QString("amendment_indicator")]);
    m_amendment_indicator_isSet = !json[QString("amendment_indicator")].isNull() && m_amendment_indicator_isValid;

    m_amendment_version_isValid = ::OpenAPI::fromJsonValue(m_amendment_version, json[QString("amendment_version")]);
    m_amendment_version_isSet = !json[QString("amendment_version")].isNull() && m_amendment_version_isValid;

    m_bank_depository_city_isValid = ::OpenAPI::fromJsonValue(m_bank_depository_city, json[QString("bank_depository_city")]);
    m_bank_depository_city_isSet = !json[QString("bank_depository_city")].isNull() && m_bank_depository_city_isValid;

    m_bank_depository_name_isValid = ::OpenAPI::fromJsonValue(m_bank_depository_name, json[QString("bank_depository_name")]);
    m_bank_depository_name_isSet = !json[QString("bank_depository_name")].isNull() && m_bank_depository_name_isValid;

    m_bank_depository_state_isValid = ::OpenAPI::fromJsonValue(m_bank_depository_state, json[QString("bank_depository_state")]);
    m_bank_depository_state_isSet = !json[QString("bank_depository_state")].isNull() && m_bank_depository_state_isValid;

    m_bank_depository_street_1_isValid = ::OpenAPI::fromJsonValue(m_bank_depository_street_1, json[QString("bank_depository_street_1")]);
    m_bank_depository_street_1_isSet = !json[QString("bank_depository_street_1")].isNull() && m_bank_depository_street_1_isValid;

    m_bank_depository_street_2_isValid = ::OpenAPI::fromJsonValue(m_bank_depository_street_2, json[QString("bank_depository_street_2")]);
    m_bank_depository_street_2_isSet = !json[QString("bank_depository_street_2")].isNull() && m_bank_depository_street_2_isValid;

    m_bank_depository_zip_isValid = ::OpenAPI::fromJsonValue(m_bank_depository_zip, json[QString("bank_depository_zip")]);
    m_bank_depository_zip_isSet = !json[QString("bank_depository_zip")].isNull() && m_bank_depository_zip_isValid;

    m_beginning_image_number_isValid = ::OpenAPI::fromJsonValue(m_beginning_image_number, json[QString("beginning_image_number")]);
    m_beginning_image_number_isSet = !json[QString("beginning_image_number")].isNull() && m_beginning_image_number_isValid;

    m_candidate_id_isValid = ::OpenAPI::fromJsonValue(m_candidate_id, json[QString("candidate_id")]);
    m_candidate_id_isSet = !json[QString("candidate_id")].isNull() && m_candidate_id_isValid;

    m_candidate_name_isValid = ::OpenAPI::fromJsonValue(m_candidate_name, json[QString("candidate_name")]);
    m_candidate_name_isSet = !json[QString("candidate_name")].isNull() && m_candidate_name_isValid;

    m_cash_on_hand_beginning_period_isValid = ::OpenAPI::fromJsonValue(m_cash_on_hand_beginning_period, json[QString("cash_on_hand_beginning_period")]);
    m_cash_on_hand_beginning_period_isSet = !json[QString("cash_on_hand_beginning_period")].isNull() && m_cash_on_hand_beginning_period_isValid;

    m_cash_on_hand_end_period_isValid = ::OpenAPI::fromJsonValue(m_cash_on_hand_end_period, json[QString("cash_on_hand_end_period")]);
    m_cash_on_hand_end_period_isSet = !json[QString("cash_on_hand_end_period")].isNull() && m_cash_on_hand_end_period_isValid;

    m_committee_id_isValid = ::OpenAPI::fromJsonValue(m_committee_id, json[QString("committee_id")]);
    m_committee_id_isSet = !json[QString("committee_id")].isNull() && m_committee_id_isValid;

    m_committee_name_isValid = ::OpenAPI::fromJsonValue(m_committee_name, json[QString("committee_name")]);
    m_committee_name_isSet = !json[QString("committee_name")].isNull() && m_committee_name_isValid;

    m_committee_type_isValid = ::OpenAPI::fromJsonValue(m_committee_type, json[QString("committee_type")]);
    m_committee_type_isSet = !json[QString("committee_type")].isNull() && m_committee_type_isValid;

    m_coverage_end_date_isValid = ::OpenAPI::fromJsonValue(m_coverage_end_date, json[QString("coverage_end_date")]);
    m_coverage_end_date_isSet = !json[QString("coverage_end_date")].isNull() && m_coverage_end_date_isValid;

    m_coverage_start_date_isValid = ::OpenAPI::fromJsonValue(m_coverage_start_date, json[QString("coverage_start_date")]);
    m_coverage_start_date_isSet = !json[QString("coverage_start_date")].isNull() && m_coverage_start_date_isValid;

    m_csv_url_isValid = ::OpenAPI::fromJsonValue(m_csv_url, json[QString("csv_url")]);
    m_csv_url_isSet = !json[QString("csv_url")].isNull() && m_csv_url_isValid;

    m_cycle_isValid = ::OpenAPI::fromJsonValue(m_cycle, json[QString("cycle")]);
    m_cycle_isSet = !json[QString("cycle")].isNull() && m_cycle_isValid;

    m_debts_owed_by_committee_isValid = ::OpenAPI::fromJsonValue(m_debts_owed_by_committee, json[QString("debts_owed_by_committee")]);
    m_debts_owed_by_committee_isSet = !json[QString("debts_owed_by_committee")].isNull() && m_debts_owed_by_committee_isValid;

    m_debts_owed_to_committee_isValid = ::OpenAPI::fromJsonValue(m_debts_owed_to_committee, json[QString("debts_owed_to_committee")]);
    m_debts_owed_to_committee_isSet = !json[QString("debts_owed_to_committee")].isNull() && m_debts_owed_to_committee_isValid;

    m_document_description_isValid = ::OpenAPI::fromJsonValue(m_document_description, json[QString("document_description")]);
    m_document_description_isSet = !json[QString("document_description")].isNull() && m_document_description_isValid;

    m_document_type_isValid = ::OpenAPI::fromJsonValue(m_document_type, json[QString("document_type")]);
    m_document_type_isSet = !json[QString("document_type")].isNull() && m_document_type_isValid;

    m_document_type_full_isValid = ::OpenAPI::fromJsonValue(m_document_type_full, json[QString("document_type_full")]);
    m_document_type_full_isSet = !json[QString("document_type_full")].isNull() && m_document_type_full_isValid;

    m_election_year_isValid = ::OpenAPI::fromJsonValue(m_election_year, json[QString("election_year")]);
    m_election_year_isSet = !json[QString("election_year")].isNull() && m_election_year_isValid;

    m_ending_image_number_isValid = ::OpenAPI::fromJsonValue(m_ending_image_number, json[QString("ending_image_number")]);
    m_ending_image_number_isSet = !json[QString("ending_image_number")].isNull() && m_ending_image_number_isValid;

    m_fec_file_id_isValid = ::OpenAPI::fromJsonValue(m_fec_file_id, json[QString("fec_file_id")]);
    m_fec_file_id_isSet = !json[QString("fec_file_id")].isNull() && m_fec_file_id_isValid;

    m_fec_url_isValid = ::OpenAPI::fromJsonValue(m_fec_url, json[QString("fec_url")]);
    m_fec_url_isSet = !json[QString("fec_url")].isNull() && m_fec_url_isValid;

    m_file_number_isValid = ::OpenAPI::fromJsonValue(m_file_number, json[QString("file_number")]);
    m_file_number_isSet = !json[QString("file_number")].isNull() && m_file_number_isValid;

    m_form_category_isValid = ::OpenAPI::fromJsonValue(m_form_category, json[QString("form_category")]);
    m_form_category_isSet = !json[QString("form_category")].isNull() && m_form_category_isValid;

    m_form_type_isValid = ::OpenAPI::fromJsonValue(m_form_type, json[QString("form_type")]);
    m_form_type_isSet = !json[QString("form_type")].isNull() && m_form_type_isValid;

    m_house_personal_funds_isValid = ::OpenAPI::fromJsonValue(m_house_personal_funds, json[QString("house_personal_funds")]);
    m_house_personal_funds_isSet = !json[QString("house_personal_funds")].isNull() && m_house_personal_funds_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_is_amended_isValid = ::OpenAPI::fromJsonValue(m_is_amended, json[QString("is_amended")]);
    m_is_amended_isSet = !json[QString("is_amended")].isNull() && m_is_amended_isValid;

    m_means_filed_isValid = ::OpenAPI::fromJsonValue(m_means_filed, json[QString("means_filed")]);
    m_means_filed_isSet = !json[QString("means_filed")].isNull() && m_means_filed_isValid;

    m_most_recent_isValid = ::OpenAPI::fromJsonValue(m_most_recent, json[QString("most_recent")]);
    m_most_recent_isSet = !json[QString("most_recent")].isNull() && m_most_recent_isValid;

    m_most_recent_file_number_isValid = ::OpenAPI::fromJsonValue(m_most_recent_file_number, json[QString("most_recent_file_number")]);
    m_most_recent_file_number_isSet = !json[QString("most_recent_file_number")].isNull() && m_most_recent_file_number_isValid;

    m_net_donations_isValid = ::OpenAPI::fromJsonValue(m_net_donations, json[QString("net_donations")]);
    m_net_donations_isSet = !json[QString("net_donations")].isNull() && m_net_donations_isValid;

    m_office_isValid = ::OpenAPI::fromJsonValue(m_office, json[QString("office")]);
    m_office_isSet = !json[QString("office")].isNull() && m_office_isValid;

    m_opposition_personal_funds_isValid = ::OpenAPI::fromJsonValue(m_opposition_personal_funds, json[QString("opposition_personal_funds")]);
    m_opposition_personal_funds_isSet = !json[QString("opposition_personal_funds")].isNull() && m_opposition_personal_funds_isValid;

    m_pages_isValid = ::OpenAPI::fromJsonValue(m_pages, json[QString("pages")]);
    m_pages_isSet = !json[QString("pages")].isNull() && m_pages_isValid;

    m_party_isValid = ::OpenAPI::fromJsonValue(m_party, json[QString("party")]);
    m_party_isSet = !json[QString("party")].isNull() && m_party_isValid;

    m_pdf_url_isValid = ::OpenAPI::fromJsonValue(m_pdf_url, json[QString("pdf_url")]);
    m_pdf_url_isSet = !json[QString("pdf_url")].isNull() && m_pdf_url_isValid;

    m_previous_file_number_isValid = ::OpenAPI::fromJsonValue(m_previous_file_number, json[QString("previous_file_number")]);
    m_previous_file_number_isSet = !json[QString("previous_file_number")].isNull() && m_previous_file_number_isValid;

    m_primary_general_indicator_isValid = ::OpenAPI::fromJsonValue(m_primary_general_indicator, json[QString("primary_general_indicator")]);
    m_primary_general_indicator_isSet = !json[QString("primary_general_indicator")].isNull() && m_primary_general_indicator_isValid;

    m_receipt_date_isValid = ::OpenAPI::fromJsonValue(m_receipt_date, json[QString("receipt_date")]);
    m_receipt_date_isSet = !json[QString("receipt_date")].isNull() && m_receipt_date_isValid;

    m_report_type_isValid = ::OpenAPI::fromJsonValue(m_report_type, json[QString("report_type")]);
    m_report_type_isSet = !json[QString("report_type")].isNull() && m_report_type_isValid;

    m_report_type_full_isValid = ::OpenAPI::fromJsonValue(m_report_type_full, json[QString("report_type_full")]);
    m_report_type_full_isSet = !json[QString("report_type_full")].isNull() && m_report_type_full_isValid;

    m_report_year_isValid = ::OpenAPI::fromJsonValue(m_report_year, json[QString("report_year")]);
    m_report_year_isSet = !json[QString("report_year")].isNull() && m_report_year_isValid;

    m_request_type_isValid = ::OpenAPI::fromJsonValue(m_request_type, json[QString("request_type")]);
    m_request_type_isSet = !json[QString("request_type")].isNull() && m_request_type_isValid;

    m_senate_personal_funds_isValid = ::OpenAPI::fromJsonValue(m_senate_personal_funds, json[QString("senate_personal_funds")]);
    m_senate_personal_funds_isSet = !json[QString("senate_personal_funds")].isNull() && m_senate_personal_funds_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_sub_id_isValid = ::OpenAPI::fromJsonValue(m_sub_id, json[QString("sub_id")]);
    m_sub_id_isSet = !json[QString("sub_id")].isNull() && m_sub_id_isValid;

    m_total_communication_cost_isValid = ::OpenAPI::fromJsonValue(m_total_communication_cost, json[QString("total_communication_cost")]);
    m_total_communication_cost_isSet = !json[QString("total_communication_cost")].isNull() && m_total_communication_cost_isValid;

    m_total_disbursements_isValid = ::OpenAPI::fromJsonValue(m_total_disbursements, json[QString("total_disbursements")]);
    m_total_disbursements_isSet = !json[QString("total_disbursements")].isNull() && m_total_disbursements_isValid;

    m_total_independent_expenditures_isValid = ::OpenAPI::fromJsonValue(m_total_independent_expenditures, json[QString("total_independent_expenditures")]);
    m_total_independent_expenditures_isSet = !json[QString("total_independent_expenditures")].isNull() && m_total_independent_expenditures_isValid;

    m_total_individual_contributions_isValid = ::OpenAPI::fromJsonValue(m_total_individual_contributions, json[QString("total_individual_contributions")]);
    m_total_individual_contributions_isSet = !json[QString("total_individual_contributions")].isNull() && m_total_individual_contributions_isValid;

    m_total_receipts_isValid = ::OpenAPI::fromJsonValue(m_total_receipts, json[QString("total_receipts")]);
    m_total_receipts_isSet = !json[QString("total_receipts")].isNull() && m_total_receipts_isValid;

    m_treasurer_name_isValid = ::OpenAPI::fromJsonValue(m_treasurer_name, json[QString("treasurer_name")]);
    m_treasurer_name_isSet = !json[QString("treasurer_name")].isNull() && m_treasurer_name_isValid;

    m_update_date_isValid = ::OpenAPI::fromJsonValue(m_update_date, json[QString("update_date")]);
    m_update_date_isSet = !json[QString("update_date")].isNull() && m_update_date_isValid;
}

QString OAIFilings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilings::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_bank_names.size() > 0) {
        obj.insert(QString("additional_bank_names"), ::OpenAPI::toJsonValue(m_additional_bank_names));
    }
    if (m_amendment_chain.size() > 0) {
        obj.insert(QString("amendment_chain"), ::OpenAPI::toJsonValue(m_amendment_chain));
    }
    if (m_amendment_indicator_isSet) {
        obj.insert(QString("amendment_indicator"), ::OpenAPI::toJsonValue(m_amendment_indicator));
    }
    if (m_amendment_version_isSet) {
        obj.insert(QString("amendment_version"), ::OpenAPI::toJsonValue(m_amendment_version));
    }
    if (m_bank_depository_city_isSet) {
        obj.insert(QString("bank_depository_city"), ::OpenAPI::toJsonValue(m_bank_depository_city));
    }
    if (m_bank_depository_name_isSet) {
        obj.insert(QString("bank_depository_name"), ::OpenAPI::toJsonValue(m_bank_depository_name));
    }
    if (m_bank_depository_state_isSet) {
        obj.insert(QString("bank_depository_state"), ::OpenAPI::toJsonValue(m_bank_depository_state));
    }
    if (m_bank_depository_street_1_isSet) {
        obj.insert(QString("bank_depository_street_1"), ::OpenAPI::toJsonValue(m_bank_depository_street_1));
    }
    if (m_bank_depository_street_2_isSet) {
        obj.insert(QString("bank_depository_street_2"), ::OpenAPI::toJsonValue(m_bank_depository_street_2));
    }
    if (m_bank_depository_zip_isSet) {
        obj.insert(QString("bank_depository_zip"), ::OpenAPI::toJsonValue(m_bank_depository_zip));
    }
    if (m_beginning_image_number_isSet) {
        obj.insert(QString("beginning_image_number"), ::OpenAPI::toJsonValue(m_beginning_image_number));
    }
    if (m_candidate_id_isSet) {
        obj.insert(QString("candidate_id"), ::OpenAPI::toJsonValue(m_candidate_id));
    }
    if (m_candidate_name_isSet) {
        obj.insert(QString("candidate_name"), ::OpenAPI::toJsonValue(m_candidate_name));
    }
    if (m_cash_on_hand_beginning_period_isSet) {
        obj.insert(QString("cash_on_hand_beginning_period"), ::OpenAPI::toJsonValue(m_cash_on_hand_beginning_period));
    }
    if (m_cash_on_hand_end_period_isSet) {
        obj.insert(QString("cash_on_hand_end_period"), ::OpenAPI::toJsonValue(m_cash_on_hand_end_period));
    }
    if (m_committee_id_isSet) {
        obj.insert(QString("committee_id"), ::OpenAPI::toJsonValue(m_committee_id));
    }
    if (m_committee_name_isSet) {
        obj.insert(QString("committee_name"), ::OpenAPI::toJsonValue(m_committee_name));
    }
    if (m_committee_type_isSet) {
        obj.insert(QString("committee_type"), ::OpenAPI::toJsonValue(m_committee_type));
    }
    if (m_coverage_end_date_isSet) {
        obj.insert(QString("coverage_end_date"), ::OpenAPI::toJsonValue(m_coverage_end_date));
    }
    if (m_coverage_start_date_isSet) {
        obj.insert(QString("coverage_start_date"), ::OpenAPI::toJsonValue(m_coverage_start_date));
    }
    if (m_csv_url_isSet) {
        obj.insert(QString("csv_url"), ::OpenAPI::toJsonValue(m_csv_url));
    }
    if (m_cycle_isSet) {
        obj.insert(QString("cycle"), ::OpenAPI::toJsonValue(m_cycle));
    }
    if (m_debts_owed_by_committee_isSet) {
        obj.insert(QString("debts_owed_by_committee"), ::OpenAPI::toJsonValue(m_debts_owed_by_committee));
    }
    if (m_debts_owed_to_committee_isSet) {
        obj.insert(QString("debts_owed_to_committee"), ::OpenAPI::toJsonValue(m_debts_owed_to_committee));
    }
    if (m_document_description_isSet) {
        obj.insert(QString("document_description"), ::OpenAPI::toJsonValue(m_document_description));
    }
    if (m_document_type_isSet) {
        obj.insert(QString("document_type"), ::OpenAPI::toJsonValue(m_document_type));
    }
    if (m_document_type_full_isSet) {
        obj.insert(QString("document_type_full"), ::OpenAPI::toJsonValue(m_document_type_full));
    }
    if (m_election_year_isSet) {
        obj.insert(QString("election_year"), ::OpenAPI::toJsonValue(m_election_year));
    }
    if (m_ending_image_number_isSet) {
        obj.insert(QString("ending_image_number"), ::OpenAPI::toJsonValue(m_ending_image_number));
    }
    if (m_fec_file_id_isSet) {
        obj.insert(QString("fec_file_id"), ::OpenAPI::toJsonValue(m_fec_file_id));
    }
    if (m_fec_url_isSet) {
        obj.insert(QString("fec_url"), ::OpenAPI::toJsonValue(m_fec_url));
    }
    if (m_file_number_isSet) {
        obj.insert(QString("file_number"), ::OpenAPI::toJsonValue(m_file_number));
    }
    if (m_form_category_isSet) {
        obj.insert(QString("form_category"), ::OpenAPI::toJsonValue(m_form_category));
    }
    if (m_form_type_isSet) {
        obj.insert(QString("form_type"), ::OpenAPI::toJsonValue(m_form_type));
    }
    if (m_house_personal_funds_isSet) {
        obj.insert(QString("house_personal_funds"), ::OpenAPI::toJsonValue(m_house_personal_funds));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_is_amended_isSet) {
        obj.insert(QString("is_amended"), ::OpenAPI::toJsonValue(m_is_amended));
    }
    if (m_means_filed_isSet) {
        obj.insert(QString("means_filed"), ::OpenAPI::toJsonValue(m_means_filed));
    }
    if (m_most_recent_isSet) {
        obj.insert(QString("most_recent"), ::OpenAPI::toJsonValue(m_most_recent));
    }
    if (m_most_recent_file_number_isSet) {
        obj.insert(QString("most_recent_file_number"), ::OpenAPI::toJsonValue(m_most_recent_file_number));
    }
    if (m_net_donations_isSet) {
        obj.insert(QString("net_donations"), ::OpenAPI::toJsonValue(m_net_donations));
    }
    if (m_office_isSet) {
        obj.insert(QString("office"), ::OpenAPI::toJsonValue(m_office));
    }
    if (m_opposition_personal_funds_isSet) {
        obj.insert(QString("opposition_personal_funds"), ::OpenAPI::toJsonValue(m_opposition_personal_funds));
    }
    if (m_pages_isSet) {
        obj.insert(QString("pages"), ::OpenAPI::toJsonValue(m_pages));
    }
    if (m_party_isSet) {
        obj.insert(QString("party"), ::OpenAPI::toJsonValue(m_party));
    }
    if (m_pdf_url_isSet) {
        obj.insert(QString("pdf_url"), ::OpenAPI::toJsonValue(m_pdf_url));
    }
    if (m_previous_file_number_isSet) {
        obj.insert(QString("previous_file_number"), ::OpenAPI::toJsonValue(m_previous_file_number));
    }
    if (m_primary_general_indicator_isSet) {
        obj.insert(QString("primary_general_indicator"), ::OpenAPI::toJsonValue(m_primary_general_indicator));
    }
    if (m_receipt_date_isSet) {
        obj.insert(QString("receipt_date"), ::OpenAPI::toJsonValue(m_receipt_date));
    }
    if (m_report_type_isSet) {
        obj.insert(QString("report_type"), ::OpenAPI::toJsonValue(m_report_type));
    }
    if (m_report_type_full_isSet) {
        obj.insert(QString("report_type_full"), ::OpenAPI::toJsonValue(m_report_type_full));
    }
    if (m_report_year_isSet) {
        obj.insert(QString("report_year"), ::OpenAPI::toJsonValue(m_report_year));
    }
    if (m_request_type_isSet) {
        obj.insert(QString("request_type"), ::OpenAPI::toJsonValue(m_request_type));
    }
    if (m_senate_personal_funds_isSet) {
        obj.insert(QString("senate_personal_funds"), ::OpenAPI::toJsonValue(m_senate_personal_funds));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_sub_id_isSet) {
        obj.insert(QString("sub_id"), ::OpenAPI::toJsonValue(m_sub_id));
    }
    if (m_total_communication_cost_isSet) {
        obj.insert(QString("total_communication_cost"), ::OpenAPI::toJsonValue(m_total_communication_cost));
    }
    if (m_total_disbursements_isSet) {
        obj.insert(QString("total_disbursements"), ::OpenAPI::toJsonValue(m_total_disbursements));
    }
    if (m_total_independent_expenditures_isSet) {
        obj.insert(QString("total_independent_expenditures"), ::OpenAPI::toJsonValue(m_total_independent_expenditures));
    }
    if (m_total_individual_contributions_isSet) {
        obj.insert(QString("total_individual_contributions"), ::OpenAPI::toJsonValue(m_total_individual_contributions));
    }
    if (m_total_receipts_isSet) {
        obj.insert(QString("total_receipts"), ::OpenAPI::toJsonValue(m_total_receipts));
    }
    if (m_treasurer_name_isSet) {
        obj.insert(QString("treasurer_name"), ::OpenAPI::toJsonValue(m_treasurer_name));
    }
    if (m_update_date_isSet) {
        obj.insert(QString("update_date"), ::OpenAPI::toJsonValue(m_update_date));
    }
    return obj;
}

QList<QString> OAIFilings::getAdditionalBankNames() const {
    return m_additional_bank_names;
}
void OAIFilings::setAdditionalBankNames(const QList<QString> &additional_bank_names) {
    m_additional_bank_names = additional_bank_names;
    m_additional_bank_names_isSet = true;
}

bool OAIFilings::is_additional_bank_names_Set() const{
    return m_additional_bank_names_isSet;
}

bool OAIFilings::is_additional_bank_names_Valid() const{
    return m_additional_bank_names_isValid;
}

QList<double> OAIFilings::getAmendmentChain() const {
    return m_amendment_chain;
}
void OAIFilings::setAmendmentChain(const QList<double> &amendment_chain) {
    m_amendment_chain = amendment_chain;
    m_amendment_chain_isSet = true;
}

bool OAIFilings::is_amendment_chain_Set() const{
    return m_amendment_chain_isSet;
}

bool OAIFilings::is_amendment_chain_Valid() const{
    return m_amendment_chain_isValid;
}

QString OAIFilings::getAmendmentIndicator() const {
    return m_amendment_indicator;
}
void OAIFilings::setAmendmentIndicator(const QString &amendment_indicator) {
    m_amendment_indicator = amendment_indicator;
    m_amendment_indicator_isSet = true;
}

bool OAIFilings::is_amendment_indicator_Set() const{
    return m_amendment_indicator_isSet;
}

bool OAIFilings::is_amendment_indicator_Valid() const{
    return m_amendment_indicator_isValid;
}

qint32 OAIFilings::getAmendmentVersion() const {
    return m_amendment_version;
}
void OAIFilings::setAmendmentVersion(const qint32 &amendment_version) {
    m_amendment_version = amendment_version;
    m_amendment_version_isSet = true;
}

bool OAIFilings::is_amendment_version_Set() const{
    return m_amendment_version_isSet;
}

bool OAIFilings::is_amendment_version_Valid() const{
    return m_amendment_version_isValid;
}

QString OAIFilings::getBankDepositoryCity() const {
    return m_bank_depository_city;
}
void OAIFilings::setBankDepositoryCity(const QString &bank_depository_city) {
    m_bank_depository_city = bank_depository_city;
    m_bank_depository_city_isSet = true;
}

bool OAIFilings::is_bank_depository_city_Set() const{
    return m_bank_depository_city_isSet;
}

bool OAIFilings::is_bank_depository_city_Valid() const{
    return m_bank_depository_city_isValid;
}

QString OAIFilings::getBankDepositoryName() const {
    return m_bank_depository_name;
}
void OAIFilings::setBankDepositoryName(const QString &bank_depository_name) {
    m_bank_depository_name = bank_depository_name;
    m_bank_depository_name_isSet = true;
}

bool OAIFilings::is_bank_depository_name_Set() const{
    return m_bank_depository_name_isSet;
}

bool OAIFilings::is_bank_depository_name_Valid() const{
    return m_bank_depository_name_isValid;
}

QString OAIFilings::getBankDepositoryState() const {
    return m_bank_depository_state;
}
void OAIFilings::setBankDepositoryState(const QString &bank_depository_state) {
    m_bank_depository_state = bank_depository_state;
    m_bank_depository_state_isSet = true;
}

bool OAIFilings::is_bank_depository_state_Set() const{
    return m_bank_depository_state_isSet;
}

bool OAIFilings::is_bank_depository_state_Valid() const{
    return m_bank_depository_state_isValid;
}

QString OAIFilings::getBankDepositoryStreet1() const {
    return m_bank_depository_street_1;
}
void OAIFilings::setBankDepositoryStreet1(const QString &bank_depository_street_1) {
    m_bank_depository_street_1 = bank_depository_street_1;
    m_bank_depository_street_1_isSet = true;
}

bool OAIFilings::is_bank_depository_street_1_Set() const{
    return m_bank_depository_street_1_isSet;
}

bool OAIFilings::is_bank_depository_street_1_Valid() const{
    return m_bank_depository_street_1_isValid;
}

QString OAIFilings::getBankDepositoryStreet2() const {
    return m_bank_depository_street_2;
}
void OAIFilings::setBankDepositoryStreet2(const QString &bank_depository_street_2) {
    m_bank_depository_street_2 = bank_depository_street_2;
    m_bank_depository_street_2_isSet = true;
}

bool OAIFilings::is_bank_depository_street_2_Set() const{
    return m_bank_depository_street_2_isSet;
}

bool OAIFilings::is_bank_depository_street_2_Valid() const{
    return m_bank_depository_street_2_isValid;
}

QString OAIFilings::getBankDepositoryZip() const {
    return m_bank_depository_zip;
}
void OAIFilings::setBankDepositoryZip(const QString &bank_depository_zip) {
    m_bank_depository_zip = bank_depository_zip;
    m_bank_depository_zip_isSet = true;
}

bool OAIFilings::is_bank_depository_zip_Set() const{
    return m_bank_depository_zip_isSet;
}

bool OAIFilings::is_bank_depository_zip_Valid() const{
    return m_bank_depository_zip_isValid;
}

QString OAIFilings::getBeginningImageNumber() const {
    return m_beginning_image_number;
}
void OAIFilings::setBeginningImageNumber(const QString &beginning_image_number) {
    m_beginning_image_number = beginning_image_number;
    m_beginning_image_number_isSet = true;
}

bool OAIFilings::is_beginning_image_number_Set() const{
    return m_beginning_image_number_isSet;
}

bool OAIFilings::is_beginning_image_number_Valid() const{
    return m_beginning_image_number_isValid;
}

QString OAIFilings::getCandidateId() const {
    return m_candidate_id;
}
void OAIFilings::setCandidateId(const QString &candidate_id) {
    m_candidate_id = candidate_id;
    m_candidate_id_isSet = true;
}

bool OAIFilings::is_candidate_id_Set() const{
    return m_candidate_id_isSet;
}

bool OAIFilings::is_candidate_id_Valid() const{
    return m_candidate_id_isValid;
}

QString OAIFilings::getCandidateName() const {
    return m_candidate_name;
}
void OAIFilings::setCandidateName(const QString &candidate_name) {
    m_candidate_name = candidate_name;
    m_candidate_name_isSet = true;
}

bool OAIFilings::is_candidate_name_Set() const{
    return m_candidate_name_isSet;
}

bool OAIFilings::is_candidate_name_Valid() const{
    return m_candidate_name_isValid;
}

double OAIFilings::getCashOnHandBeginningPeriod() const {
    return m_cash_on_hand_beginning_period;
}
void OAIFilings::setCashOnHandBeginningPeriod(const double &cash_on_hand_beginning_period) {
    m_cash_on_hand_beginning_period = cash_on_hand_beginning_period;
    m_cash_on_hand_beginning_period_isSet = true;
}

bool OAIFilings::is_cash_on_hand_beginning_period_Set() const{
    return m_cash_on_hand_beginning_period_isSet;
}

bool OAIFilings::is_cash_on_hand_beginning_period_Valid() const{
    return m_cash_on_hand_beginning_period_isValid;
}

double OAIFilings::getCashOnHandEndPeriod() const {
    return m_cash_on_hand_end_period;
}
void OAIFilings::setCashOnHandEndPeriod(const double &cash_on_hand_end_period) {
    m_cash_on_hand_end_period = cash_on_hand_end_period;
    m_cash_on_hand_end_period_isSet = true;
}

bool OAIFilings::is_cash_on_hand_end_period_Set() const{
    return m_cash_on_hand_end_period_isSet;
}

bool OAIFilings::is_cash_on_hand_end_period_Valid() const{
    return m_cash_on_hand_end_period_isValid;
}

QString OAIFilings::getCommitteeId() const {
    return m_committee_id;
}
void OAIFilings::setCommitteeId(const QString &committee_id) {
    m_committee_id = committee_id;
    m_committee_id_isSet = true;
}

bool OAIFilings::is_committee_id_Set() const{
    return m_committee_id_isSet;
}

bool OAIFilings::is_committee_id_Valid() const{
    return m_committee_id_isValid;
}

QString OAIFilings::getCommitteeName() const {
    return m_committee_name;
}
void OAIFilings::setCommitteeName(const QString &committee_name) {
    m_committee_name = committee_name;
    m_committee_name_isSet = true;
}

bool OAIFilings::is_committee_name_Set() const{
    return m_committee_name_isSet;
}

bool OAIFilings::is_committee_name_Valid() const{
    return m_committee_name_isValid;
}

QString OAIFilings::getCommitteeType() const {
    return m_committee_type;
}
void OAIFilings::setCommitteeType(const QString &committee_type) {
    m_committee_type = committee_type;
    m_committee_type_isSet = true;
}

bool OAIFilings::is_committee_type_Set() const{
    return m_committee_type_isSet;
}

bool OAIFilings::is_committee_type_Valid() const{
    return m_committee_type_isValid;
}

QDate OAIFilings::getCoverageEndDate() const {
    return m_coverage_end_date;
}
void OAIFilings::setCoverageEndDate(const QDate &coverage_end_date) {
    m_coverage_end_date = coverage_end_date;
    m_coverage_end_date_isSet = true;
}

bool OAIFilings::is_coverage_end_date_Set() const{
    return m_coverage_end_date_isSet;
}

bool OAIFilings::is_coverage_end_date_Valid() const{
    return m_coverage_end_date_isValid;
}

QDate OAIFilings::getCoverageStartDate() const {
    return m_coverage_start_date;
}
void OAIFilings::setCoverageStartDate(const QDate &coverage_start_date) {
    m_coverage_start_date = coverage_start_date;
    m_coverage_start_date_isSet = true;
}

bool OAIFilings::is_coverage_start_date_Set() const{
    return m_coverage_start_date_isSet;
}

bool OAIFilings::is_coverage_start_date_Valid() const{
    return m_coverage_start_date_isValid;
}

QString OAIFilings::getCsvUrl() const {
    return m_csv_url;
}
void OAIFilings::setCsvUrl(const QString &csv_url) {
    m_csv_url = csv_url;
    m_csv_url_isSet = true;
}

bool OAIFilings::is_csv_url_Set() const{
    return m_csv_url_isSet;
}

bool OAIFilings::is_csv_url_Valid() const{
    return m_csv_url_isValid;
}

qint32 OAIFilings::getCycle() const {
    return m_cycle;
}
void OAIFilings::setCycle(const qint32 &cycle) {
    m_cycle = cycle;
    m_cycle_isSet = true;
}

bool OAIFilings::is_cycle_Set() const{
    return m_cycle_isSet;
}

bool OAIFilings::is_cycle_Valid() const{
    return m_cycle_isValid;
}

double OAIFilings::getDebtsOwedByCommittee() const {
    return m_debts_owed_by_committee;
}
void OAIFilings::setDebtsOwedByCommittee(const double &debts_owed_by_committee) {
    m_debts_owed_by_committee = debts_owed_by_committee;
    m_debts_owed_by_committee_isSet = true;
}

bool OAIFilings::is_debts_owed_by_committee_Set() const{
    return m_debts_owed_by_committee_isSet;
}

bool OAIFilings::is_debts_owed_by_committee_Valid() const{
    return m_debts_owed_by_committee_isValid;
}

double OAIFilings::getDebtsOwedToCommittee() const {
    return m_debts_owed_to_committee;
}
void OAIFilings::setDebtsOwedToCommittee(const double &debts_owed_to_committee) {
    m_debts_owed_to_committee = debts_owed_to_committee;
    m_debts_owed_to_committee_isSet = true;
}

bool OAIFilings::is_debts_owed_to_committee_Set() const{
    return m_debts_owed_to_committee_isSet;
}

bool OAIFilings::is_debts_owed_to_committee_Valid() const{
    return m_debts_owed_to_committee_isValid;
}

QString OAIFilings::getDocumentDescription() const {
    return m_document_description;
}
void OAIFilings::setDocumentDescription(const QString &document_description) {
    m_document_description = document_description;
    m_document_description_isSet = true;
}

bool OAIFilings::is_document_description_Set() const{
    return m_document_description_isSet;
}

bool OAIFilings::is_document_description_Valid() const{
    return m_document_description_isValid;
}

QString OAIFilings::getDocumentType() const {
    return m_document_type;
}
void OAIFilings::setDocumentType(const QString &document_type) {
    m_document_type = document_type;
    m_document_type_isSet = true;
}

bool OAIFilings::is_document_type_Set() const{
    return m_document_type_isSet;
}

bool OAIFilings::is_document_type_Valid() const{
    return m_document_type_isValid;
}

QString OAIFilings::getDocumentTypeFull() const {
    return m_document_type_full;
}
void OAIFilings::setDocumentTypeFull(const QString &document_type_full) {
    m_document_type_full = document_type_full;
    m_document_type_full_isSet = true;
}

bool OAIFilings::is_document_type_full_Set() const{
    return m_document_type_full_isSet;
}

bool OAIFilings::is_document_type_full_Valid() const{
    return m_document_type_full_isValid;
}

qint32 OAIFilings::getElectionYear() const {
    return m_election_year;
}
void OAIFilings::setElectionYear(const qint32 &election_year) {
    m_election_year = election_year;
    m_election_year_isSet = true;
}

bool OAIFilings::is_election_year_Set() const{
    return m_election_year_isSet;
}

bool OAIFilings::is_election_year_Valid() const{
    return m_election_year_isValid;
}

QString OAIFilings::getEndingImageNumber() const {
    return m_ending_image_number;
}
void OAIFilings::setEndingImageNumber(const QString &ending_image_number) {
    m_ending_image_number = ending_image_number;
    m_ending_image_number_isSet = true;
}

bool OAIFilings::is_ending_image_number_Set() const{
    return m_ending_image_number_isSet;
}

bool OAIFilings::is_ending_image_number_Valid() const{
    return m_ending_image_number_isValid;
}

QString OAIFilings::getFecFileId() const {
    return m_fec_file_id;
}
void OAIFilings::setFecFileId(const QString &fec_file_id) {
    m_fec_file_id = fec_file_id;
    m_fec_file_id_isSet = true;
}

bool OAIFilings::is_fec_file_id_Set() const{
    return m_fec_file_id_isSet;
}

bool OAIFilings::is_fec_file_id_Valid() const{
    return m_fec_file_id_isValid;
}

QString OAIFilings::getFecUrl() const {
    return m_fec_url;
}
void OAIFilings::setFecUrl(const QString &fec_url) {
    m_fec_url = fec_url;
    m_fec_url_isSet = true;
}

bool OAIFilings::is_fec_url_Set() const{
    return m_fec_url_isSet;
}

bool OAIFilings::is_fec_url_Valid() const{
    return m_fec_url_isValid;
}

qint32 OAIFilings::getFileNumber() const {
    return m_file_number;
}
void OAIFilings::setFileNumber(const qint32 &file_number) {
    m_file_number = file_number;
    m_file_number_isSet = true;
}

bool OAIFilings::is_file_number_Set() const{
    return m_file_number_isSet;
}

bool OAIFilings::is_file_number_Valid() const{
    return m_file_number_isValid;
}

QString OAIFilings::getFormCategory() const {
    return m_form_category;
}
void OAIFilings::setFormCategory(const QString &form_category) {
    m_form_category = form_category;
    m_form_category_isSet = true;
}

bool OAIFilings::is_form_category_Set() const{
    return m_form_category_isSet;
}

bool OAIFilings::is_form_category_Valid() const{
    return m_form_category_isValid;
}

QString OAIFilings::getFormType() const {
    return m_form_type;
}
void OAIFilings::setFormType(const QString &form_type) {
    m_form_type = form_type;
    m_form_type_isSet = true;
}

bool OAIFilings::is_form_type_Set() const{
    return m_form_type_isSet;
}

bool OAIFilings::is_form_type_Valid() const{
    return m_form_type_isValid;
}

double OAIFilings::getHousePersonalFunds() const {
    return m_house_personal_funds;
}
void OAIFilings::setHousePersonalFunds(const double &house_personal_funds) {
    m_house_personal_funds = house_personal_funds;
    m_house_personal_funds_isSet = true;
}

bool OAIFilings::is_house_personal_funds_Set() const{
    return m_house_personal_funds_isSet;
}

bool OAIFilings::is_house_personal_funds_Valid() const{
    return m_house_personal_funds_isValid;
}

QString OAIFilings::getHtmlUrl() const {
    return m_html_url;
}
void OAIFilings::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAIFilings::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAIFilings::is_html_url_Valid() const{
    return m_html_url_isValid;
}

bool OAIFilings::isIsAmended() const {
    return m_is_amended;
}
void OAIFilings::setIsAmended(const bool &is_amended) {
    m_is_amended = is_amended;
    m_is_amended_isSet = true;
}

bool OAIFilings::is_is_amended_Set() const{
    return m_is_amended_isSet;
}

bool OAIFilings::is_is_amended_Valid() const{
    return m_is_amended_isValid;
}

QString OAIFilings::getMeansFiled() const {
    return m_means_filed;
}
void OAIFilings::setMeansFiled(const QString &means_filed) {
    m_means_filed = means_filed;
    m_means_filed_isSet = true;
}

bool OAIFilings::is_means_filed_Set() const{
    return m_means_filed_isSet;
}

bool OAIFilings::is_means_filed_Valid() const{
    return m_means_filed_isValid;
}

bool OAIFilings::isMostRecent() const {
    return m_most_recent;
}
void OAIFilings::setMostRecent(const bool &most_recent) {
    m_most_recent = most_recent;
    m_most_recent_isSet = true;
}

bool OAIFilings::is_most_recent_Set() const{
    return m_most_recent_isSet;
}

bool OAIFilings::is_most_recent_Valid() const{
    return m_most_recent_isValid;
}

qint32 OAIFilings::getMostRecentFileNumber() const {
    return m_most_recent_file_number;
}
void OAIFilings::setMostRecentFileNumber(const qint32 &most_recent_file_number) {
    m_most_recent_file_number = most_recent_file_number;
    m_most_recent_file_number_isSet = true;
}

bool OAIFilings::is_most_recent_file_number_Set() const{
    return m_most_recent_file_number_isSet;
}

bool OAIFilings::is_most_recent_file_number_Valid() const{
    return m_most_recent_file_number_isValid;
}

double OAIFilings::getNetDonations() const {
    return m_net_donations;
}
void OAIFilings::setNetDonations(const double &net_donations) {
    m_net_donations = net_donations;
    m_net_donations_isSet = true;
}

bool OAIFilings::is_net_donations_Set() const{
    return m_net_donations_isSet;
}

bool OAIFilings::is_net_donations_Valid() const{
    return m_net_donations_isValid;
}

QString OAIFilings::getOffice() const {
    return m_office;
}
void OAIFilings::setOffice(const QString &office) {
    m_office = office;
    m_office_isSet = true;
}

bool OAIFilings::is_office_Set() const{
    return m_office_isSet;
}

bool OAIFilings::is_office_Valid() const{
    return m_office_isValid;
}

double OAIFilings::getOppositionPersonalFunds() const {
    return m_opposition_personal_funds;
}
void OAIFilings::setOppositionPersonalFunds(const double &opposition_personal_funds) {
    m_opposition_personal_funds = opposition_personal_funds;
    m_opposition_personal_funds_isSet = true;
}

bool OAIFilings::is_opposition_personal_funds_Set() const{
    return m_opposition_personal_funds_isSet;
}

bool OAIFilings::is_opposition_personal_funds_Valid() const{
    return m_opposition_personal_funds_isValid;
}

qint32 OAIFilings::getPages() const {
    return m_pages;
}
void OAIFilings::setPages(const qint32 &pages) {
    m_pages = pages;
    m_pages_isSet = true;
}

bool OAIFilings::is_pages_Set() const{
    return m_pages_isSet;
}

bool OAIFilings::is_pages_Valid() const{
    return m_pages_isValid;
}

QString OAIFilings::getParty() const {
    return m_party;
}
void OAIFilings::setParty(const QString &party) {
    m_party = party;
    m_party_isSet = true;
}

bool OAIFilings::is_party_Set() const{
    return m_party_isSet;
}

bool OAIFilings::is_party_Valid() const{
    return m_party_isValid;
}

QString OAIFilings::getPdfUrl() const {
    return m_pdf_url;
}
void OAIFilings::setPdfUrl(const QString &pdf_url) {
    m_pdf_url = pdf_url;
    m_pdf_url_isSet = true;
}

bool OAIFilings::is_pdf_url_Set() const{
    return m_pdf_url_isSet;
}

bool OAIFilings::is_pdf_url_Valid() const{
    return m_pdf_url_isValid;
}

qint32 OAIFilings::getPreviousFileNumber() const {
    return m_previous_file_number;
}
void OAIFilings::setPreviousFileNumber(const qint32 &previous_file_number) {
    m_previous_file_number = previous_file_number;
    m_previous_file_number_isSet = true;
}

bool OAIFilings::is_previous_file_number_Set() const{
    return m_previous_file_number_isSet;
}

bool OAIFilings::is_previous_file_number_Valid() const{
    return m_previous_file_number_isValid;
}

QString OAIFilings::getPrimaryGeneralIndicator() const {
    return m_primary_general_indicator;
}
void OAIFilings::setPrimaryGeneralIndicator(const QString &primary_general_indicator) {
    m_primary_general_indicator = primary_general_indicator;
    m_primary_general_indicator_isSet = true;
}

bool OAIFilings::is_primary_general_indicator_Set() const{
    return m_primary_general_indicator_isSet;
}

bool OAIFilings::is_primary_general_indicator_Valid() const{
    return m_primary_general_indicator_isValid;
}

QDate OAIFilings::getReceiptDate() const {
    return m_receipt_date;
}
void OAIFilings::setReceiptDate(const QDate &receipt_date) {
    m_receipt_date = receipt_date;
    m_receipt_date_isSet = true;
}

bool OAIFilings::is_receipt_date_Set() const{
    return m_receipt_date_isSet;
}

bool OAIFilings::is_receipt_date_Valid() const{
    return m_receipt_date_isValid;
}

QString OAIFilings::getReportType() const {
    return m_report_type;
}
void OAIFilings::setReportType(const QString &report_type) {
    m_report_type = report_type;
    m_report_type_isSet = true;
}

bool OAIFilings::is_report_type_Set() const{
    return m_report_type_isSet;
}

bool OAIFilings::is_report_type_Valid() const{
    return m_report_type_isValid;
}

QString OAIFilings::getReportTypeFull() const {
    return m_report_type_full;
}
void OAIFilings::setReportTypeFull(const QString &report_type_full) {
    m_report_type_full = report_type_full;
    m_report_type_full_isSet = true;
}

bool OAIFilings::is_report_type_full_Set() const{
    return m_report_type_full_isSet;
}

bool OAIFilings::is_report_type_full_Valid() const{
    return m_report_type_full_isValid;
}

qint32 OAIFilings::getReportYear() const {
    return m_report_year;
}
void OAIFilings::setReportYear(const qint32 &report_year) {
    m_report_year = report_year;
    m_report_year_isSet = true;
}

bool OAIFilings::is_report_year_Set() const{
    return m_report_year_isSet;
}

bool OAIFilings::is_report_year_Valid() const{
    return m_report_year_isValid;
}

QString OAIFilings::getRequestType() const {
    return m_request_type;
}
void OAIFilings::setRequestType(const QString &request_type) {
    m_request_type = request_type;
    m_request_type_isSet = true;
}

bool OAIFilings::is_request_type_Set() const{
    return m_request_type_isSet;
}

bool OAIFilings::is_request_type_Valid() const{
    return m_request_type_isValid;
}

double OAIFilings::getSenatePersonalFunds() const {
    return m_senate_personal_funds;
}
void OAIFilings::setSenatePersonalFunds(const double &senate_personal_funds) {
    m_senate_personal_funds = senate_personal_funds;
    m_senate_personal_funds_isSet = true;
}

bool OAIFilings::is_senate_personal_funds_Set() const{
    return m_senate_personal_funds_isSet;
}

bool OAIFilings::is_senate_personal_funds_Valid() const{
    return m_senate_personal_funds_isValid;
}

QString OAIFilings::getState() const {
    return m_state;
}
void OAIFilings::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIFilings::is_state_Set() const{
    return m_state_isSet;
}

bool OAIFilings::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIFilings::getSubId() const {
    return m_sub_id;
}
void OAIFilings::setSubId(const QString &sub_id) {
    m_sub_id = sub_id;
    m_sub_id_isSet = true;
}

bool OAIFilings::is_sub_id_Set() const{
    return m_sub_id_isSet;
}

bool OAIFilings::is_sub_id_Valid() const{
    return m_sub_id_isValid;
}

double OAIFilings::getTotalCommunicationCost() const {
    return m_total_communication_cost;
}
void OAIFilings::setTotalCommunicationCost(const double &total_communication_cost) {
    m_total_communication_cost = total_communication_cost;
    m_total_communication_cost_isSet = true;
}

bool OAIFilings::is_total_communication_cost_Set() const{
    return m_total_communication_cost_isSet;
}

bool OAIFilings::is_total_communication_cost_Valid() const{
    return m_total_communication_cost_isValid;
}

double OAIFilings::getTotalDisbursements() const {
    return m_total_disbursements;
}
void OAIFilings::setTotalDisbursements(const double &total_disbursements) {
    m_total_disbursements = total_disbursements;
    m_total_disbursements_isSet = true;
}

bool OAIFilings::is_total_disbursements_Set() const{
    return m_total_disbursements_isSet;
}

bool OAIFilings::is_total_disbursements_Valid() const{
    return m_total_disbursements_isValid;
}

double OAIFilings::getTotalIndependentExpenditures() const {
    return m_total_independent_expenditures;
}
void OAIFilings::setTotalIndependentExpenditures(const double &total_independent_expenditures) {
    m_total_independent_expenditures = total_independent_expenditures;
    m_total_independent_expenditures_isSet = true;
}

bool OAIFilings::is_total_independent_expenditures_Set() const{
    return m_total_independent_expenditures_isSet;
}

bool OAIFilings::is_total_independent_expenditures_Valid() const{
    return m_total_independent_expenditures_isValid;
}

double OAIFilings::getTotalIndividualContributions() const {
    return m_total_individual_contributions;
}
void OAIFilings::setTotalIndividualContributions(const double &total_individual_contributions) {
    m_total_individual_contributions = total_individual_contributions;
    m_total_individual_contributions_isSet = true;
}

bool OAIFilings::is_total_individual_contributions_Set() const{
    return m_total_individual_contributions_isSet;
}

bool OAIFilings::is_total_individual_contributions_Valid() const{
    return m_total_individual_contributions_isValid;
}

double OAIFilings::getTotalReceipts() const {
    return m_total_receipts;
}
void OAIFilings::setTotalReceipts(const double &total_receipts) {
    m_total_receipts = total_receipts;
    m_total_receipts_isSet = true;
}

bool OAIFilings::is_total_receipts_Set() const{
    return m_total_receipts_isSet;
}

bool OAIFilings::is_total_receipts_Valid() const{
    return m_total_receipts_isValid;
}

QString OAIFilings::getTreasurerName() const {
    return m_treasurer_name;
}
void OAIFilings::setTreasurerName(const QString &treasurer_name) {
    m_treasurer_name = treasurer_name;
    m_treasurer_name_isSet = true;
}

bool OAIFilings::is_treasurer_name_Set() const{
    return m_treasurer_name_isSet;
}

bool OAIFilings::is_treasurer_name_Valid() const{
    return m_treasurer_name_isValid;
}

QDate OAIFilings::getUpdateDate() const {
    return m_update_date;
}
void OAIFilings::setUpdateDate(const QDate &update_date) {
    m_update_date = update_date;
    m_update_date_isSet = true;
}

bool OAIFilings::is_update_date_Set() const{
    return m_update_date_isSet;
}

bool OAIFilings::is_update_date_Valid() const{
    return m_update_date_isValid;
}

bool OAIFilings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_bank_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_amendment_chain.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_amendment_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amendment_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_depository_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_depository_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_depository_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_depository_street_1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_depository_street_2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_depository_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_beginning_image_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_on_hand_beginning_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_on_hand_end_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coverage_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coverage_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_csv_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cycle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debts_owed_by_committee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debts_owed_to_committee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_type_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ending_image_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fec_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fec_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_house_personal_funds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_amended_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_means_filed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_most_recent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_most_recent_file_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_donations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_office_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opposition_personal_funds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pdf_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_file_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_general_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_type_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_senate_personal_funds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_communication_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_disbursements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_independent_expenditures_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_individual_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_receipts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_treasurer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
