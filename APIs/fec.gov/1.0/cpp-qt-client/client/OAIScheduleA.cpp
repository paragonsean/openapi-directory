/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduleA.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduleA::OAIScheduleA(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduleA::OAIScheduleA() {
    this->initializeModel();
}

OAIScheduleA::~OAIScheduleA() {}

void OAIScheduleA::initializeModel() {

    m_amendment_indicator_isSet = false;
    m_amendment_indicator_isValid = false;

    m_amendment_indicator_desc_isSet = false;
    m_amendment_indicator_desc_isValid = false;

    m_back_reference_schedule_name_isSet = false;
    m_back_reference_schedule_name_isValid = false;

    m_back_reference_transaction_id_isSet = false;
    m_back_reference_transaction_id_isValid = false;

    m_candidate_first_name_isSet = false;
    m_candidate_first_name_isValid = false;

    m_candidate_id_isSet = false;
    m_candidate_id_isValid = false;

    m_candidate_last_name_isSet = false;
    m_candidate_last_name_isValid = false;

    m_candidate_middle_name_isSet = false;
    m_candidate_middle_name_isValid = false;

    m_candidate_name_isSet = false;
    m_candidate_name_isValid = false;

    m_candidate_office_isSet = false;
    m_candidate_office_isValid = false;

    m_candidate_office_district_isSet = false;
    m_candidate_office_district_isValid = false;

    m_candidate_office_full_isSet = false;
    m_candidate_office_full_isValid = false;

    m_candidate_office_state_isSet = false;
    m_candidate_office_state_isValid = false;

    m_candidate_office_state_full_isSet = false;
    m_candidate_office_state_full_isValid = false;

    m_candidate_prefix_isSet = false;
    m_candidate_prefix_isValid = false;

    m_candidate_suffix_isSet = false;
    m_candidate_suffix_isValid = false;

    m_committee_isSet = false;
    m_committee_isValid = false;

    m_committee_id_isSet = false;
    m_committee_id_isValid = false;

    m_committee_name_isSet = false;
    m_committee_name_isValid = false;

    m_conduit_committee_city_isSet = false;
    m_conduit_committee_city_isValid = false;

    m_conduit_committee_id_isSet = false;
    m_conduit_committee_id_isValid = false;

    m_conduit_committee_name_isSet = false;
    m_conduit_committee_name_isValid = false;

    m_conduit_committee_state_isSet = false;
    m_conduit_committee_state_isValid = false;

    m_conduit_committee_street1_isSet = false;
    m_conduit_committee_street1_isValid = false;

    m_conduit_committee_street2_isSet = false;
    m_conduit_committee_street2_isValid = false;

    m_conduit_committee_zip_isSet = false;
    m_conduit_committee_zip_isValid = false;

    m_contribution_receipt_amount_isSet = false;
    m_contribution_receipt_amount_isValid = false;

    m_contribution_receipt_date_isSet = false;
    m_contribution_receipt_date_isValid = false;

    m_contributor_isSet = false;
    m_contributor_isValid = false;

    m_contributor_aggregate_ytd_isSet = false;
    m_contributor_aggregate_ytd_isValid = false;

    m_contributor_city_isSet = false;
    m_contributor_city_isValid = false;

    m_contributor_employer_isSet = false;
    m_contributor_employer_isValid = false;

    m_contributor_first_name_isSet = false;
    m_contributor_first_name_isValid = false;

    m_contributor_id_isSet = false;
    m_contributor_id_isValid = false;

    m_contributor_last_name_isSet = false;
    m_contributor_last_name_isValid = false;

    m_contributor_middle_name_isSet = false;
    m_contributor_middle_name_isValid = false;

    m_contributor_name_isSet = false;
    m_contributor_name_isValid = false;

    m_contributor_occupation_isSet = false;
    m_contributor_occupation_isValid = false;

    m_contributor_prefix_isSet = false;
    m_contributor_prefix_isValid = false;

    m_contributor_state_isSet = false;
    m_contributor_state_isValid = false;

    m_contributor_street_1_isSet = false;
    m_contributor_street_1_isValid = false;

    m_contributor_street_2_isSet = false;
    m_contributor_street_2_isValid = false;

    m_contributor_suffix_isSet = false;
    m_contributor_suffix_isValid = false;

    m_contributor_zip_isSet = false;
    m_contributor_zip_isValid = false;

    m_donor_committee_name_isSet = false;
    m_donor_committee_name_isValid = false;

    m_election_type_isSet = false;
    m_election_type_isValid = false;

    m_election_type_full_isSet = false;
    m_election_type_full_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_entity_type_desc_isSet = false;
    m_entity_type_desc_isValid = false;

    m_fec_election_type_desc_isSet = false;
    m_fec_election_type_desc_isValid = false;

    m_fec_election_year_isSet = false;
    m_fec_election_year_isValid = false;

    m_file_number_isSet = false;
    m_file_number_isValid = false;

    m_filing_form_isSet = false;
    m_filing_form_isValid = false;

    m_image_number_isSet = false;
    m_image_number_isValid = false;

    m_increased_limit_isSet = false;
    m_increased_limit_isValid = false;

    m_is_individual_isSet = false;
    m_is_individual_isValid = false;

    m_line_number_isSet = false;
    m_line_number_isValid = false;

    m_line_number_label_isSet = false;
    m_line_number_label_isValid = false;

    m_link_id_isSet = false;
    m_link_id_isValid = false;

    m_load_date_isSet = false;
    m_load_date_isValid = false;

    m_memo_code_isSet = false;
    m_memo_code_isValid = false;

    m_memo_code_full_isSet = false;
    m_memo_code_full_isValid = false;

    m_memo_text_isSet = false;
    m_memo_text_isValid = false;

    m_memoed_subtotal_isSet = false;
    m_memoed_subtotal_isValid = false;

    m_national_committee_nonfederal_account_isSet = false;
    m_national_committee_nonfederal_account_isValid = false;

    m_original_sub_id_isSet = false;
    m_original_sub_id_isValid = false;

    m_pdf_url_isSet = false;
    m_pdf_url_isValid = false;

    m_receipt_type_isSet = false;
    m_receipt_type_isValid = false;

    m_receipt_type_desc_isSet = false;
    m_receipt_type_desc_isValid = false;

    m_receipt_type_full_isSet = false;
    m_receipt_type_full_isValid = false;

    m_recipient_committee_designation_isSet = false;
    m_recipient_committee_designation_isValid = false;

    m_recipient_committee_org_type_isSet = false;
    m_recipient_committee_org_type_isValid = false;

    m_recipient_committee_type_isSet = false;
    m_recipient_committee_type_isValid = false;

    m_report_type_isSet = false;
    m_report_type_isValid = false;

    m_report_year_isSet = false;
    m_report_year_isValid = false;

    m_schedule_type_isSet = false;
    m_schedule_type_isValid = false;

    m_schedule_type_full_isSet = false;
    m_schedule_type_full_isValid = false;

    m_sub_id_isSet = false;
    m_sub_id_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;

    m_two_year_transaction_period_isSet = false;
    m_two_year_transaction_period_isValid = false;

    m_unused_contbr_id_isSet = false;
    m_unused_contbr_id_isValid = false;
}

void OAIScheduleA::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduleA::fromJsonObject(QJsonObject json) {

    m_amendment_indicator_isValid = ::OpenAPI::fromJsonValue(m_amendment_indicator, json[QString("amendment_indicator")]);
    m_amendment_indicator_isSet = !json[QString("amendment_indicator")].isNull() && m_amendment_indicator_isValid;

    m_amendment_indicator_desc_isValid = ::OpenAPI::fromJsonValue(m_amendment_indicator_desc, json[QString("amendment_indicator_desc")]);
    m_amendment_indicator_desc_isSet = !json[QString("amendment_indicator_desc")].isNull() && m_amendment_indicator_desc_isValid;

    m_back_reference_schedule_name_isValid = ::OpenAPI::fromJsonValue(m_back_reference_schedule_name, json[QString("back_reference_schedule_name")]);
    m_back_reference_schedule_name_isSet = !json[QString("back_reference_schedule_name")].isNull() && m_back_reference_schedule_name_isValid;

    m_back_reference_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_back_reference_transaction_id, json[QString("back_reference_transaction_id")]);
    m_back_reference_transaction_id_isSet = !json[QString("back_reference_transaction_id")].isNull() && m_back_reference_transaction_id_isValid;

    m_candidate_first_name_isValid = ::OpenAPI::fromJsonValue(m_candidate_first_name, json[QString("candidate_first_name")]);
    m_candidate_first_name_isSet = !json[QString("candidate_first_name")].isNull() && m_candidate_first_name_isValid;

    m_candidate_id_isValid = ::OpenAPI::fromJsonValue(m_candidate_id, json[QString("candidate_id")]);
    m_candidate_id_isSet = !json[QString("candidate_id")].isNull() && m_candidate_id_isValid;

    m_candidate_last_name_isValid = ::OpenAPI::fromJsonValue(m_candidate_last_name, json[QString("candidate_last_name")]);
    m_candidate_last_name_isSet = !json[QString("candidate_last_name")].isNull() && m_candidate_last_name_isValid;

    m_candidate_middle_name_isValid = ::OpenAPI::fromJsonValue(m_candidate_middle_name, json[QString("candidate_middle_name")]);
    m_candidate_middle_name_isSet = !json[QString("candidate_middle_name")].isNull() && m_candidate_middle_name_isValid;

    m_candidate_name_isValid = ::OpenAPI::fromJsonValue(m_candidate_name, json[QString("candidate_name")]);
    m_candidate_name_isSet = !json[QString("candidate_name")].isNull() && m_candidate_name_isValid;

    m_candidate_office_isValid = ::OpenAPI::fromJsonValue(m_candidate_office, json[QString("candidate_office")]);
    m_candidate_office_isSet = !json[QString("candidate_office")].isNull() && m_candidate_office_isValid;

    m_candidate_office_district_isValid = ::OpenAPI::fromJsonValue(m_candidate_office_district, json[QString("candidate_office_district")]);
    m_candidate_office_district_isSet = !json[QString("candidate_office_district")].isNull() && m_candidate_office_district_isValid;

    m_candidate_office_full_isValid = ::OpenAPI::fromJsonValue(m_candidate_office_full, json[QString("candidate_office_full")]);
    m_candidate_office_full_isSet = !json[QString("candidate_office_full")].isNull() && m_candidate_office_full_isValid;

    m_candidate_office_state_isValid = ::OpenAPI::fromJsonValue(m_candidate_office_state, json[QString("candidate_office_state")]);
    m_candidate_office_state_isSet = !json[QString("candidate_office_state")].isNull() && m_candidate_office_state_isValid;

    m_candidate_office_state_full_isValid = ::OpenAPI::fromJsonValue(m_candidate_office_state_full, json[QString("candidate_office_state_full")]);
    m_candidate_office_state_full_isSet = !json[QString("candidate_office_state_full")].isNull() && m_candidate_office_state_full_isValid;

    m_candidate_prefix_isValid = ::OpenAPI::fromJsonValue(m_candidate_prefix, json[QString("candidate_prefix")]);
    m_candidate_prefix_isSet = !json[QString("candidate_prefix")].isNull() && m_candidate_prefix_isValid;

    m_candidate_suffix_isValid = ::OpenAPI::fromJsonValue(m_candidate_suffix, json[QString("candidate_suffix")]);
    m_candidate_suffix_isSet = !json[QString("candidate_suffix")].isNull() && m_candidate_suffix_isValid;

    m_committee_isValid = ::OpenAPI::fromJsonValue(m_committee, json[QString("committee")]);
    m_committee_isSet = !json[QString("committee")].isNull() && m_committee_isValid;

    m_committee_id_isValid = ::OpenAPI::fromJsonValue(m_committee_id, json[QString("committee_id")]);
    m_committee_id_isSet = !json[QString("committee_id")].isNull() && m_committee_id_isValid;

    m_committee_name_isValid = ::OpenAPI::fromJsonValue(m_committee_name, json[QString("committee_name")]);
    m_committee_name_isSet = !json[QString("committee_name")].isNull() && m_committee_name_isValid;

    m_conduit_committee_city_isValid = ::OpenAPI::fromJsonValue(m_conduit_committee_city, json[QString("conduit_committee_city")]);
    m_conduit_committee_city_isSet = !json[QString("conduit_committee_city")].isNull() && m_conduit_committee_city_isValid;

    m_conduit_committee_id_isValid = ::OpenAPI::fromJsonValue(m_conduit_committee_id, json[QString("conduit_committee_id")]);
    m_conduit_committee_id_isSet = !json[QString("conduit_committee_id")].isNull() && m_conduit_committee_id_isValid;

    m_conduit_committee_name_isValid = ::OpenAPI::fromJsonValue(m_conduit_committee_name, json[QString("conduit_committee_name")]);
    m_conduit_committee_name_isSet = !json[QString("conduit_committee_name")].isNull() && m_conduit_committee_name_isValid;

    m_conduit_committee_state_isValid = ::OpenAPI::fromJsonValue(m_conduit_committee_state, json[QString("conduit_committee_state")]);
    m_conduit_committee_state_isSet = !json[QString("conduit_committee_state")].isNull() && m_conduit_committee_state_isValid;

    m_conduit_committee_street1_isValid = ::OpenAPI::fromJsonValue(m_conduit_committee_street1, json[QString("conduit_committee_street1")]);
    m_conduit_committee_street1_isSet = !json[QString("conduit_committee_street1")].isNull() && m_conduit_committee_street1_isValid;

    m_conduit_committee_street2_isValid = ::OpenAPI::fromJsonValue(m_conduit_committee_street2, json[QString("conduit_committee_street2")]);
    m_conduit_committee_street2_isSet = !json[QString("conduit_committee_street2")].isNull() && m_conduit_committee_street2_isValid;

    m_conduit_committee_zip_isValid = ::OpenAPI::fromJsonValue(m_conduit_committee_zip, json[QString("conduit_committee_zip")]);
    m_conduit_committee_zip_isSet = !json[QString("conduit_committee_zip")].isNull() && m_conduit_committee_zip_isValid;

    m_contribution_receipt_amount_isValid = ::OpenAPI::fromJsonValue(m_contribution_receipt_amount, json[QString("contribution_receipt_amount")]);
    m_contribution_receipt_amount_isSet = !json[QString("contribution_receipt_amount")].isNull() && m_contribution_receipt_amount_isValid;

    m_contribution_receipt_date_isValid = ::OpenAPI::fromJsonValue(m_contribution_receipt_date, json[QString("contribution_receipt_date")]);
    m_contribution_receipt_date_isSet = !json[QString("contribution_receipt_date")].isNull() && m_contribution_receipt_date_isValid;

    m_contributor_isValid = ::OpenAPI::fromJsonValue(m_contributor, json[QString("contributor")]);
    m_contributor_isSet = !json[QString("contributor")].isNull() && m_contributor_isValid;

    m_contributor_aggregate_ytd_isValid = ::OpenAPI::fromJsonValue(m_contributor_aggregate_ytd, json[QString("contributor_aggregate_ytd")]);
    m_contributor_aggregate_ytd_isSet = !json[QString("contributor_aggregate_ytd")].isNull() && m_contributor_aggregate_ytd_isValid;

    m_contributor_city_isValid = ::OpenAPI::fromJsonValue(m_contributor_city, json[QString("contributor_city")]);
    m_contributor_city_isSet = !json[QString("contributor_city")].isNull() && m_contributor_city_isValid;

    m_contributor_employer_isValid = ::OpenAPI::fromJsonValue(m_contributor_employer, json[QString("contributor_employer")]);
    m_contributor_employer_isSet = !json[QString("contributor_employer")].isNull() && m_contributor_employer_isValid;

    m_contributor_first_name_isValid = ::OpenAPI::fromJsonValue(m_contributor_first_name, json[QString("contributor_first_name")]);
    m_contributor_first_name_isSet = !json[QString("contributor_first_name")].isNull() && m_contributor_first_name_isValid;

    m_contributor_id_isValid = ::OpenAPI::fromJsonValue(m_contributor_id, json[QString("contributor_id")]);
    m_contributor_id_isSet = !json[QString("contributor_id")].isNull() && m_contributor_id_isValid;

    m_contributor_last_name_isValid = ::OpenAPI::fromJsonValue(m_contributor_last_name, json[QString("contributor_last_name")]);
    m_contributor_last_name_isSet = !json[QString("contributor_last_name")].isNull() && m_contributor_last_name_isValid;

    m_contributor_middle_name_isValid = ::OpenAPI::fromJsonValue(m_contributor_middle_name, json[QString("contributor_middle_name")]);
    m_contributor_middle_name_isSet = !json[QString("contributor_middle_name")].isNull() && m_contributor_middle_name_isValid;

    m_contributor_name_isValid = ::OpenAPI::fromJsonValue(m_contributor_name, json[QString("contributor_name")]);
    m_contributor_name_isSet = !json[QString("contributor_name")].isNull() && m_contributor_name_isValid;

    m_contributor_occupation_isValid = ::OpenAPI::fromJsonValue(m_contributor_occupation, json[QString("contributor_occupation")]);
    m_contributor_occupation_isSet = !json[QString("contributor_occupation")].isNull() && m_contributor_occupation_isValid;

    m_contributor_prefix_isValid = ::OpenAPI::fromJsonValue(m_contributor_prefix, json[QString("contributor_prefix")]);
    m_contributor_prefix_isSet = !json[QString("contributor_prefix")].isNull() && m_contributor_prefix_isValid;

    m_contributor_state_isValid = ::OpenAPI::fromJsonValue(m_contributor_state, json[QString("contributor_state")]);
    m_contributor_state_isSet = !json[QString("contributor_state")].isNull() && m_contributor_state_isValid;

    m_contributor_street_1_isValid = ::OpenAPI::fromJsonValue(m_contributor_street_1, json[QString("contributor_street_1")]);
    m_contributor_street_1_isSet = !json[QString("contributor_street_1")].isNull() && m_contributor_street_1_isValid;

    m_contributor_street_2_isValid = ::OpenAPI::fromJsonValue(m_contributor_street_2, json[QString("contributor_street_2")]);
    m_contributor_street_2_isSet = !json[QString("contributor_street_2")].isNull() && m_contributor_street_2_isValid;

    m_contributor_suffix_isValid = ::OpenAPI::fromJsonValue(m_contributor_suffix, json[QString("contributor_suffix")]);
    m_contributor_suffix_isSet = !json[QString("contributor_suffix")].isNull() && m_contributor_suffix_isValid;

    m_contributor_zip_isValid = ::OpenAPI::fromJsonValue(m_contributor_zip, json[QString("contributor_zip")]);
    m_contributor_zip_isSet = !json[QString("contributor_zip")].isNull() && m_contributor_zip_isValid;

    m_donor_committee_name_isValid = ::OpenAPI::fromJsonValue(m_donor_committee_name, json[QString("donor_committee_name")]);
    m_donor_committee_name_isSet = !json[QString("donor_committee_name")].isNull() && m_donor_committee_name_isValid;

    m_election_type_isValid = ::OpenAPI::fromJsonValue(m_election_type, json[QString("election_type")]);
    m_election_type_isSet = !json[QString("election_type")].isNull() && m_election_type_isValid;

    m_election_type_full_isValid = ::OpenAPI::fromJsonValue(m_election_type_full, json[QString("election_type_full")]);
    m_election_type_full_isSet = !json[QString("election_type_full")].isNull() && m_election_type_full_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entity_type")]);
    m_entity_type_isSet = !json[QString("entity_type")].isNull() && m_entity_type_isValid;

    m_entity_type_desc_isValid = ::OpenAPI::fromJsonValue(m_entity_type_desc, json[QString("entity_type_desc")]);
    m_entity_type_desc_isSet = !json[QString("entity_type_desc")].isNull() && m_entity_type_desc_isValid;

    m_fec_election_type_desc_isValid = ::OpenAPI::fromJsonValue(m_fec_election_type_desc, json[QString("fec_election_type_desc")]);
    m_fec_election_type_desc_isSet = !json[QString("fec_election_type_desc")].isNull() && m_fec_election_type_desc_isValid;

    m_fec_election_year_isValid = ::OpenAPI::fromJsonValue(m_fec_election_year, json[QString("fec_election_year")]);
    m_fec_election_year_isSet = !json[QString("fec_election_year")].isNull() && m_fec_election_year_isValid;

    m_file_number_isValid = ::OpenAPI::fromJsonValue(m_file_number, json[QString("file_number")]);
    m_file_number_isSet = !json[QString("file_number")].isNull() && m_file_number_isValid;

    m_filing_form_isValid = ::OpenAPI::fromJsonValue(m_filing_form, json[QString("filing_form")]);
    m_filing_form_isSet = !json[QString("filing_form")].isNull() && m_filing_form_isValid;

    m_image_number_isValid = ::OpenAPI::fromJsonValue(m_image_number, json[QString("image_number")]);
    m_image_number_isSet = !json[QString("image_number")].isNull() && m_image_number_isValid;

    m_increased_limit_isValid = ::OpenAPI::fromJsonValue(m_increased_limit, json[QString("increased_limit")]);
    m_increased_limit_isSet = !json[QString("increased_limit")].isNull() && m_increased_limit_isValid;

    m_is_individual_isValid = ::OpenAPI::fromJsonValue(m_is_individual, json[QString("is_individual")]);
    m_is_individual_isSet = !json[QString("is_individual")].isNull() && m_is_individual_isValid;

    m_line_number_isValid = ::OpenAPI::fromJsonValue(m_line_number, json[QString("line_number")]);
    m_line_number_isSet = !json[QString("line_number")].isNull() && m_line_number_isValid;

    m_line_number_label_isValid = ::OpenAPI::fromJsonValue(m_line_number_label, json[QString("line_number_label")]);
    m_line_number_label_isSet = !json[QString("line_number_label")].isNull() && m_line_number_label_isValid;

    m_link_id_isValid = ::OpenAPI::fromJsonValue(m_link_id, json[QString("link_id")]);
    m_link_id_isSet = !json[QString("link_id")].isNull() && m_link_id_isValid;

    m_load_date_isValid = ::OpenAPI::fromJsonValue(m_load_date, json[QString("load_date")]);
    m_load_date_isSet = !json[QString("load_date")].isNull() && m_load_date_isValid;

    m_memo_code_isValid = ::OpenAPI::fromJsonValue(m_memo_code, json[QString("memo_code")]);
    m_memo_code_isSet = !json[QString("memo_code")].isNull() && m_memo_code_isValid;

    m_memo_code_full_isValid = ::OpenAPI::fromJsonValue(m_memo_code_full, json[QString("memo_code_full")]);
    m_memo_code_full_isSet = !json[QString("memo_code_full")].isNull() && m_memo_code_full_isValid;

    m_memo_text_isValid = ::OpenAPI::fromJsonValue(m_memo_text, json[QString("memo_text")]);
    m_memo_text_isSet = !json[QString("memo_text")].isNull() && m_memo_text_isValid;

    m_memoed_subtotal_isValid = ::OpenAPI::fromJsonValue(m_memoed_subtotal, json[QString("memoed_subtotal")]);
    m_memoed_subtotal_isSet = !json[QString("memoed_subtotal")].isNull() && m_memoed_subtotal_isValid;

    m_national_committee_nonfederal_account_isValid = ::OpenAPI::fromJsonValue(m_national_committee_nonfederal_account, json[QString("national_committee_nonfederal_account")]);
    m_national_committee_nonfederal_account_isSet = !json[QString("national_committee_nonfederal_account")].isNull() && m_national_committee_nonfederal_account_isValid;

    m_original_sub_id_isValid = ::OpenAPI::fromJsonValue(m_original_sub_id, json[QString("original_sub_id")]);
    m_original_sub_id_isSet = !json[QString("original_sub_id")].isNull() && m_original_sub_id_isValid;

    m_pdf_url_isValid = ::OpenAPI::fromJsonValue(m_pdf_url, json[QString("pdf_url")]);
    m_pdf_url_isSet = !json[QString("pdf_url")].isNull() && m_pdf_url_isValid;

    m_receipt_type_isValid = ::OpenAPI::fromJsonValue(m_receipt_type, json[QString("receipt_type")]);
    m_receipt_type_isSet = !json[QString("receipt_type")].isNull() && m_receipt_type_isValid;

    m_receipt_type_desc_isValid = ::OpenAPI::fromJsonValue(m_receipt_type_desc, json[QString("receipt_type_desc")]);
    m_receipt_type_desc_isSet = !json[QString("receipt_type_desc")].isNull() && m_receipt_type_desc_isValid;

    m_receipt_type_full_isValid = ::OpenAPI::fromJsonValue(m_receipt_type_full, json[QString("receipt_type_full")]);
    m_receipt_type_full_isSet = !json[QString("receipt_type_full")].isNull() && m_receipt_type_full_isValid;

    m_recipient_committee_designation_isValid = ::OpenAPI::fromJsonValue(m_recipient_committee_designation, json[QString("recipient_committee_designation")]);
    m_recipient_committee_designation_isSet = !json[QString("recipient_committee_designation")].isNull() && m_recipient_committee_designation_isValid;

    m_recipient_committee_org_type_isValid = ::OpenAPI::fromJsonValue(m_recipient_committee_org_type, json[QString("recipient_committee_org_type")]);
    m_recipient_committee_org_type_isSet = !json[QString("recipient_committee_org_type")].isNull() && m_recipient_committee_org_type_isValid;

    m_recipient_committee_type_isValid = ::OpenAPI::fromJsonValue(m_recipient_committee_type, json[QString("recipient_committee_type")]);
    m_recipient_committee_type_isSet = !json[QString("recipient_committee_type")].isNull() && m_recipient_committee_type_isValid;

    m_report_type_isValid = ::OpenAPI::fromJsonValue(m_report_type, json[QString("report_type")]);
    m_report_type_isSet = !json[QString("report_type")].isNull() && m_report_type_isValid;

    m_report_year_isValid = ::OpenAPI::fromJsonValue(m_report_year, json[QString("report_year")]);
    m_report_year_isSet = !json[QString("report_year")].isNull() && m_report_year_isValid;

    m_schedule_type_isValid = ::OpenAPI::fromJsonValue(m_schedule_type, json[QString("schedule_type")]);
    m_schedule_type_isSet = !json[QString("schedule_type")].isNull() && m_schedule_type_isValid;

    m_schedule_type_full_isValid = ::OpenAPI::fromJsonValue(m_schedule_type_full, json[QString("schedule_type_full")]);
    m_schedule_type_full_isSet = !json[QString("schedule_type_full")].isNull() && m_schedule_type_full_isValid;

    m_sub_id_isValid = ::OpenAPI::fromJsonValue(m_sub_id, json[QString("sub_id")]);
    m_sub_id_isSet = !json[QString("sub_id")].isNull() && m_sub_id_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("transaction_id")]);
    m_transaction_id_isSet = !json[QString("transaction_id")].isNull() && m_transaction_id_isValid;

    m_two_year_transaction_period_isValid = ::OpenAPI::fromJsonValue(m_two_year_transaction_period, json[QString("two_year_transaction_period")]);
    m_two_year_transaction_period_isSet = !json[QString("two_year_transaction_period")].isNull() && m_two_year_transaction_period_isValid;

    m_unused_contbr_id_isValid = ::OpenAPI::fromJsonValue(m_unused_contbr_id, json[QString("unused_contbr_id")]);
    m_unused_contbr_id_isSet = !json[QString("unused_contbr_id")].isNull() && m_unused_contbr_id_isValid;
}

QString OAIScheduleA::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduleA::asJsonObject() const {
    QJsonObject obj;
    if (m_amendment_indicator_isSet) {
        obj.insert(QString("amendment_indicator"), ::OpenAPI::toJsonValue(m_amendment_indicator));
    }
    if (m_amendment_indicator_desc_isSet) {
        obj.insert(QString("amendment_indicator_desc"), ::OpenAPI::toJsonValue(m_amendment_indicator_desc));
    }
    if (m_back_reference_schedule_name_isSet) {
        obj.insert(QString("back_reference_schedule_name"), ::OpenAPI::toJsonValue(m_back_reference_schedule_name));
    }
    if (m_back_reference_transaction_id_isSet) {
        obj.insert(QString("back_reference_transaction_id"), ::OpenAPI::toJsonValue(m_back_reference_transaction_id));
    }
    if (m_candidate_first_name_isSet) {
        obj.insert(QString("candidate_first_name"), ::OpenAPI::toJsonValue(m_candidate_first_name));
    }
    if (m_candidate_id_isSet) {
        obj.insert(QString("candidate_id"), ::OpenAPI::toJsonValue(m_candidate_id));
    }
    if (m_candidate_last_name_isSet) {
        obj.insert(QString("candidate_last_name"), ::OpenAPI::toJsonValue(m_candidate_last_name));
    }
    if (m_candidate_middle_name_isSet) {
        obj.insert(QString("candidate_middle_name"), ::OpenAPI::toJsonValue(m_candidate_middle_name));
    }
    if (m_candidate_name_isSet) {
        obj.insert(QString("candidate_name"), ::OpenAPI::toJsonValue(m_candidate_name));
    }
    if (m_candidate_office_isSet) {
        obj.insert(QString("candidate_office"), ::OpenAPI::toJsonValue(m_candidate_office));
    }
    if (m_candidate_office_district_isSet) {
        obj.insert(QString("candidate_office_district"), ::OpenAPI::toJsonValue(m_candidate_office_district));
    }
    if (m_candidate_office_full_isSet) {
        obj.insert(QString("candidate_office_full"), ::OpenAPI::toJsonValue(m_candidate_office_full));
    }
    if (m_candidate_office_state_isSet) {
        obj.insert(QString("candidate_office_state"), ::OpenAPI::toJsonValue(m_candidate_office_state));
    }
    if (m_candidate_office_state_full_isSet) {
        obj.insert(QString("candidate_office_state_full"), ::OpenAPI::toJsonValue(m_candidate_office_state_full));
    }
    if (m_candidate_prefix_isSet) {
        obj.insert(QString("candidate_prefix"), ::OpenAPI::toJsonValue(m_candidate_prefix));
    }
    if (m_candidate_suffix_isSet) {
        obj.insert(QString("candidate_suffix"), ::OpenAPI::toJsonValue(m_candidate_suffix));
    }
    if (m_committee.isSet()) {
        obj.insert(QString("committee"), ::OpenAPI::toJsonValue(m_committee));
    }
    if (m_committee_id_isSet) {
        obj.insert(QString("committee_id"), ::OpenAPI::toJsonValue(m_committee_id));
    }
    if (m_committee_name_isSet) {
        obj.insert(QString("committee_name"), ::OpenAPI::toJsonValue(m_committee_name));
    }
    if (m_conduit_committee_city_isSet) {
        obj.insert(QString("conduit_committee_city"), ::OpenAPI::toJsonValue(m_conduit_committee_city));
    }
    if (m_conduit_committee_id_isSet) {
        obj.insert(QString("conduit_committee_id"), ::OpenAPI::toJsonValue(m_conduit_committee_id));
    }
    if (m_conduit_committee_name_isSet) {
        obj.insert(QString("conduit_committee_name"), ::OpenAPI::toJsonValue(m_conduit_committee_name));
    }
    if (m_conduit_committee_state_isSet) {
        obj.insert(QString("conduit_committee_state"), ::OpenAPI::toJsonValue(m_conduit_committee_state));
    }
    if (m_conduit_committee_street1_isSet) {
        obj.insert(QString("conduit_committee_street1"), ::OpenAPI::toJsonValue(m_conduit_committee_street1));
    }
    if (m_conduit_committee_street2_isSet) {
        obj.insert(QString("conduit_committee_street2"), ::OpenAPI::toJsonValue(m_conduit_committee_street2));
    }
    if (m_conduit_committee_zip_isSet) {
        obj.insert(QString("conduit_committee_zip"), ::OpenAPI::toJsonValue(m_conduit_committee_zip));
    }
    if (m_contribution_receipt_amount_isSet) {
        obj.insert(QString("contribution_receipt_amount"), ::OpenAPI::toJsonValue(m_contribution_receipt_amount));
    }
    if (m_contribution_receipt_date_isSet) {
        obj.insert(QString("contribution_receipt_date"), ::OpenAPI::toJsonValue(m_contribution_receipt_date));
    }
    if (m_contributor.isSet()) {
        obj.insert(QString("contributor"), ::OpenAPI::toJsonValue(m_contributor));
    }
    if (m_contributor_aggregate_ytd_isSet) {
        obj.insert(QString("contributor_aggregate_ytd"), ::OpenAPI::toJsonValue(m_contributor_aggregate_ytd));
    }
    if (m_contributor_city_isSet) {
        obj.insert(QString("contributor_city"), ::OpenAPI::toJsonValue(m_contributor_city));
    }
    if (m_contributor_employer_isSet) {
        obj.insert(QString("contributor_employer"), ::OpenAPI::toJsonValue(m_contributor_employer));
    }
    if (m_contributor_first_name_isSet) {
        obj.insert(QString("contributor_first_name"), ::OpenAPI::toJsonValue(m_contributor_first_name));
    }
    if (m_contributor_id_isSet) {
        obj.insert(QString("contributor_id"), ::OpenAPI::toJsonValue(m_contributor_id));
    }
    if (m_contributor_last_name_isSet) {
        obj.insert(QString("contributor_last_name"), ::OpenAPI::toJsonValue(m_contributor_last_name));
    }
    if (m_contributor_middle_name_isSet) {
        obj.insert(QString("contributor_middle_name"), ::OpenAPI::toJsonValue(m_contributor_middle_name));
    }
    if (m_contributor_name_isSet) {
        obj.insert(QString("contributor_name"), ::OpenAPI::toJsonValue(m_contributor_name));
    }
    if (m_contributor_occupation_isSet) {
        obj.insert(QString("contributor_occupation"), ::OpenAPI::toJsonValue(m_contributor_occupation));
    }
    if (m_contributor_prefix_isSet) {
        obj.insert(QString("contributor_prefix"), ::OpenAPI::toJsonValue(m_contributor_prefix));
    }
    if (m_contributor_state_isSet) {
        obj.insert(QString("contributor_state"), ::OpenAPI::toJsonValue(m_contributor_state));
    }
    if (m_contributor_street_1_isSet) {
        obj.insert(QString("contributor_street_1"), ::OpenAPI::toJsonValue(m_contributor_street_1));
    }
    if (m_contributor_street_2_isSet) {
        obj.insert(QString("contributor_street_2"), ::OpenAPI::toJsonValue(m_contributor_street_2));
    }
    if (m_contributor_suffix_isSet) {
        obj.insert(QString("contributor_suffix"), ::OpenAPI::toJsonValue(m_contributor_suffix));
    }
    if (m_contributor_zip_isSet) {
        obj.insert(QString("contributor_zip"), ::OpenAPI::toJsonValue(m_contributor_zip));
    }
    if (m_donor_committee_name_isSet) {
        obj.insert(QString("donor_committee_name"), ::OpenAPI::toJsonValue(m_donor_committee_name));
    }
    if (m_election_type_isSet) {
        obj.insert(QString("election_type"), ::OpenAPI::toJsonValue(m_election_type));
    }
    if (m_election_type_full_isSet) {
        obj.insert(QString("election_type_full"), ::OpenAPI::toJsonValue(m_election_type_full));
    }
    if (m_entity_type_isSet) {
        obj.insert(QString("entity_type"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_entity_type_desc_isSet) {
        obj.insert(QString("entity_type_desc"), ::OpenAPI::toJsonValue(m_entity_type_desc));
    }
    if (m_fec_election_type_desc_isSet) {
        obj.insert(QString("fec_election_type_desc"), ::OpenAPI::toJsonValue(m_fec_election_type_desc));
    }
    if (m_fec_election_year_isSet) {
        obj.insert(QString("fec_election_year"), ::OpenAPI::toJsonValue(m_fec_election_year));
    }
    if (m_file_number_isSet) {
        obj.insert(QString("file_number"), ::OpenAPI::toJsonValue(m_file_number));
    }
    if (m_filing_form_isSet) {
        obj.insert(QString("filing_form"), ::OpenAPI::toJsonValue(m_filing_form));
    }
    if (m_image_number_isSet) {
        obj.insert(QString("image_number"), ::OpenAPI::toJsonValue(m_image_number));
    }
    if (m_increased_limit_isSet) {
        obj.insert(QString("increased_limit"), ::OpenAPI::toJsonValue(m_increased_limit));
    }
    if (m_is_individual_isSet) {
        obj.insert(QString("is_individual"), ::OpenAPI::toJsonValue(m_is_individual));
    }
    if (m_line_number_isSet) {
        obj.insert(QString("line_number"), ::OpenAPI::toJsonValue(m_line_number));
    }
    if (m_line_number_label_isSet) {
        obj.insert(QString("line_number_label"), ::OpenAPI::toJsonValue(m_line_number_label));
    }
    if (m_link_id_isSet) {
        obj.insert(QString("link_id"), ::OpenAPI::toJsonValue(m_link_id));
    }
    if (m_load_date_isSet) {
        obj.insert(QString("load_date"), ::OpenAPI::toJsonValue(m_load_date));
    }
    if (m_memo_code_isSet) {
        obj.insert(QString("memo_code"), ::OpenAPI::toJsonValue(m_memo_code));
    }
    if (m_memo_code_full_isSet) {
        obj.insert(QString("memo_code_full"), ::OpenAPI::toJsonValue(m_memo_code_full));
    }
    if (m_memo_text_isSet) {
        obj.insert(QString("memo_text"), ::OpenAPI::toJsonValue(m_memo_text));
    }
    if (m_memoed_subtotal_isSet) {
        obj.insert(QString("memoed_subtotal"), ::OpenAPI::toJsonValue(m_memoed_subtotal));
    }
    if (m_national_committee_nonfederal_account_isSet) {
        obj.insert(QString("national_committee_nonfederal_account"), ::OpenAPI::toJsonValue(m_national_committee_nonfederal_account));
    }
    if (m_original_sub_id_isSet) {
        obj.insert(QString("original_sub_id"), ::OpenAPI::toJsonValue(m_original_sub_id));
    }
    if (m_pdf_url_isSet) {
        obj.insert(QString("pdf_url"), ::OpenAPI::toJsonValue(m_pdf_url));
    }
    if (m_receipt_type_isSet) {
        obj.insert(QString("receipt_type"), ::OpenAPI::toJsonValue(m_receipt_type));
    }
    if (m_receipt_type_desc_isSet) {
        obj.insert(QString("receipt_type_desc"), ::OpenAPI::toJsonValue(m_receipt_type_desc));
    }
    if (m_receipt_type_full_isSet) {
        obj.insert(QString("receipt_type_full"), ::OpenAPI::toJsonValue(m_receipt_type_full));
    }
    if (m_recipient_committee_designation_isSet) {
        obj.insert(QString("recipient_committee_designation"), ::OpenAPI::toJsonValue(m_recipient_committee_designation));
    }
    if (m_recipient_committee_org_type_isSet) {
        obj.insert(QString("recipient_committee_org_type"), ::OpenAPI::toJsonValue(m_recipient_committee_org_type));
    }
    if (m_recipient_committee_type_isSet) {
        obj.insert(QString("recipient_committee_type"), ::OpenAPI::toJsonValue(m_recipient_committee_type));
    }
    if (m_report_type_isSet) {
        obj.insert(QString("report_type"), ::OpenAPI::toJsonValue(m_report_type));
    }
    if (m_report_year_isSet) {
        obj.insert(QString("report_year"), ::OpenAPI::toJsonValue(m_report_year));
    }
    if (m_schedule_type_isSet) {
        obj.insert(QString("schedule_type"), ::OpenAPI::toJsonValue(m_schedule_type));
    }
    if (m_schedule_type_full_isSet) {
        obj.insert(QString("schedule_type_full"), ::OpenAPI::toJsonValue(m_schedule_type_full));
    }
    if (m_sub_id_isSet) {
        obj.insert(QString("sub_id"), ::OpenAPI::toJsonValue(m_sub_id));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("transaction_id"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    if (m_two_year_transaction_period_isSet) {
        obj.insert(QString("two_year_transaction_period"), ::OpenAPI::toJsonValue(m_two_year_transaction_period));
    }
    if (m_unused_contbr_id_isSet) {
        obj.insert(QString("unused_contbr_id"), ::OpenAPI::toJsonValue(m_unused_contbr_id));
    }
    return obj;
}

QString OAIScheduleA::getAmendmentIndicator() const {
    return m_amendment_indicator;
}
void OAIScheduleA::setAmendmentIndicator(const QString &amendment_indicator) {
    m_amendment_indicator = amendment_indicator;
    m_amendment_indicator_isSet = true;
}

bool OAIScheduleA::is_amendment_indicator_Set() const{
    return m_amendment_indicator_isSet;
}

bool OAIScheduleA::is_amendment_indicator_Valid() const{
    return m_amendment_indicator_isValid;
}

QString OAIScheduleA::getAmendmentIndicatorDesc() const {
    return m_amendment_indicator_desc;
}
void OAIScheduleA::setAmendmentIndicatorDesc(const QString &amendment_indicator_desc) {
    m_amendment_indicator_desc = amendment_indicator_desc;
    m_amendment_indicator_desc_isSet = true;
}

bool OAIScheduleA::is_amendment_indicator_desc_Set() const{
    return m_amendment_indicator_desc_isSet;
}

bool OAIScheduleA::is_amendment_indicator_desc_Valid() const{
    return m_amendment_indicator_desc_isValid;
}

QString OAIScheduleA::getBackReferenceScheduleName() const {
    return m_back_reference_schedule_name;
}
void OAIScheduleA::setBackReferenceScheduleName(const QString &back_reference_schedule_name) {
    m_back_reference_schedule_name = back_reference_schedule_name;
    m_back_reference_schedule_name_isSet = true;
}

bool OAIScheduleA::is_back_reference_schedule_name_Set() const{
    return m_back_reference_schedule_name_isSet;
}

bool OAIScheduleA::is_back_reference_schedule_name_Valid() const{
    return m_back_reference_schedule_name_isValid;
}

QString OAIScheduleA::getBackReferenceTransactionId() const {
    return m_back_reference_transaction_id;
}
void OAIScheduleA::setBackReferenceTransactionId(const QString &back_reference_transaction_id) {
    m_back_reference_transaction_id = back_reference_transaction_id;
    m_back_reference_transaction_id_isSet = true;
}

bool OAIScheduleA::is_back_reference_transaction_id_Set() const{
    return m_back_reference_transaction_id_isSet;
}

bool OAIScheduleA::is_back_reference_transaction_id_Valid() const{
    return m_back_reference_transaction_id_isValid;
}

QString OAIScheduleA::getCandidateFirstName() const {
    return m_candidate_first_name;
}
void OAIScheduleA::setCandidateFirstName(const QString &candidate_first_name) {
    m_candidate_first_name = candidate_first_name;
    m_candidate_first_name_isSet = true;
}

bool OAIScheduleA::is_candidate_first_name_Set() const{
    return m_candidate_first_name_isSet;
}

bool OAIScheduleA::is_candidate_first_name_Valid() const{
    return m_candidate_first_name_isValid;
}

QString OAIScheduleA::getCandidateId() const {
    return m_candidate_id;
}
void OAIScheduleA::setCandidateId(const QString &candidate_id) {
    m_candidate_id = candidate_id;
    m_candidate_id_isSet = true;
}

bool OAIScheduleA::is_candidate_id_Set() const{
    return m_candidate_id_isSet;
}

bool OAIScheduleA::is_candidate_id_Valid() const{
    return m_candidate_id_isValid;
}

QString OAIScheduleA::getCandidateLastName() const {
    return m_candidate_last_name;
}
void OAIScheduleA::setCandidateLastName(const QString &candidate_last_name) {
    m_candidate_last_name = candidate_last_name;
    m_candidate_last_name_isSet = true;
}

bool OAIScheduleA::is_candidate_last_name_Set() const{
    return m_candidate_last_name_isSet;
}

bool OAIScheduleA::is_candidate_last_name_Valid() const{
    return m_candidate_last_name_isValid;
}

QString OAIScheduleA::getCandidateMiddleName() const {
    return m_candidate_middle_name;
}
void OAIScheduleA::setCandidateMiddleName(const QString &candidate_middle_name) {
    m_candidate_middle_name = candidate_middle_name;
    m_candidate_middle_name_isSet = true;
}

bool OAIScheduleA::is_candidate_middle_name_Set() const{
    return m_candidate_middle_name_isSet;
}

bool OAIScheduleA::is_candidate_middle_name_Valid() const{
    return m_candidate_middle_name_isValid;
}

QString OAIScheduleA::getCandidateName() const {
    return m_candidate_name;
}
void OAIScheduleA::setCandidateName(const QString &candidate_name) {
    m_candidate_name = candidate_name;
    m_candidate_name_isSet = true;
}

bool OAIScheduleA::is_candidate_name_Set() const{
    return m_candidate_name_isSet;
}

bool OAIScheduleA::is_candidate_name_Valid() const{
    return m_candidate_name_isValid;
}

QString OAIScheduleA::getCandidateOffice() const {
    return m_candidate_office;
}
void OAIScheduleA::setCandidateOffice(const QString &candidate_office) {
    m_candidate_office = candidate_office;
    m_candidate_office_isSet = true;
}

bool OAIScheduleA::is_candidate_office_Set() const{
    return m_candidate_office_isSet;
}

bool OAIScheduleA::is_candidate_office_Valid() const{
    return m_candidate_office_isValid;
}

QString OAIScheduleA::getCandidateOfficeDistrict() const {
    return m_candidate_office_district;
}
void OAIScheduleA::setCandidateOfficeDistrict(const QString &candidate_office_district) {
    m_candidate_office_district = candidate_office_district;
    m_candidate_office_district_isSet = true;
}

bool OAIScheduleA::is_candidate_office_district_Set() const{
    return m_candidate_office_district_isSet;
}

bool OAIScheduleA::is_candidate_office_district_Valid() const{
    return m_candidate_office_district_isValid;
}

QString OAIScheduleA::getCandidateOfficeFull() const {
    return m_candidate_office_full;
}
void OAIScheduleA::setCandidateOfficeFull(const QString &candidate_office_full) {
    m_candidate_office_full = candidate_office_full;
    m_candidate_office_full_isSet = true;
}

bool OAIScheduleA::is_candidate_office_full_Set() const{
    return m_candidate_office_full_isSet;
}

bool OAIScheduleA::is_candidate_office_full_Valid() const{
    return m_candidate_office_full_isValid;
}

QString OAIScheduleA::getCandidateOfficeState() const {
    return m_candidate_office_state;
}
void OAIScheduleA::setCandidateOfficeState(const QString &candidate_office_state) {
    m_candidate_office_state = candidate_office_state;
    m_candidate_office_state_isSet = true;
}

bool OAIScheduleA::is_candidate_office_state_Set() const{
    return m_candidate_office_state_isSet;
}

bool OAIScheduleA::is_candidate_office_state_Valid() const{
    return m_candidate_office_state_isValid;
}

QString OAIScheduleA::getCandidateOfficeStateFull() const {
    return m_candidate_office_state_full;
}
void OAIScheduleA::setCandidateOfficeStateFull(const QString &candidate_office_state_full) {
    m_candidate_office_state_full = candidate_office_state_full;
    m_candidate_office_state_full_isSet = true;
}

bool OAIScheduleA::is_candidate_office_state_full_Set() const{
    return m_candidate_office_state_full_isSet;
}

bool OAIScheduleA::is_candidate_office_state_full_Valid() const{
    return m_candidate_office_state_full_isValid;
}

QString OAIScheduleA::getCandidatePrefix() const {
    return m_candidate_prefix;
}
void OAIScheduleA::setCandidatePrefix(const QString &candidate_prefix) {
    m_candidate_prefix = candidate_prefix;
    m_candidate_prefix_isSet = true;
}

bool OAIScheduleA::is_candidate_prefix_Set() const{
    return m_candidate_prefix_isSet;
}

bool OAIScheduleA::is_candidate_prefix_Valid() const{
    return m_candidate_prefix_isValid;
}

QString OAIScheduleA::getCandidateSuffix() const {
    return m_candidate_suffix;
}
void OAIScheduleA::setCandidateSuffix(const QString &candidate_suffix) {
    m_candidate_suffix = candidate_suffix;
    m_candidate_suffix_isSet = true;
}

bool OAIScheduleA::is_candidate_suffix_Set() const{
    return m_candidate_suffix_isSet;
}

bool OAIScheduleA::is_candidate_suffix_Valid() const{
    return m_candidate_suffix_isValid;
}

OAICommitteeHistory OAIScheduleA::getCommittee() const {
    return m_committee;
}
void OAIScheduleA::setCommittee(const OAICommitteeHistory &committee) {
    m_committee = committee;
    m_committee_isSet = true;
}

bool OAIScheduleA::is_committee_Set() const{
    return m_committee_isSet;
}

bool OAIScheduleA::is_committee_Valid() const{
    return m_committee_isValid;
}

QString OAIScheduleA::getCommitteeId() const {
    return m_committee_id;
}
void OAIScheduleA::setCommitteeId(const QString &committee_id) {
    m_committee_id = committee_id;
    m_committee_id_isSet = true;
}

bool OAIScheduleA::is_committee_id_Set() const{
    return m_committee_id_isSet;
}

bool OAIScheduleA::is_committee_id_Valid() const{
    return m_committee_id_isValid;
}

QString OAIScheduleA::getCommitteeName() const {
    return m_committee_name;
}
void OAIScheduleA::setCommitteeName(const QString &committee_name) {
    m_committee_name = committee_name;
    m_committee_name_isSet = true;
}

bool OAIScheduleA::is_committee_name_Set() const{
    return m_committee_name_isSet;
}

bool OAIScheduleA::is_committee_name_Valid() const{
    return m_committee_name_isValid;
}

QString OAIScheduleA::getConduitCommitteeCity() const {
    return m_conduit_committee_city;
}
void OAIScheduleA::setConduitCommitteeCity(const QString &conduit_committee_city) {
    m_conduit_committee_city = conduit_committee_city;
    m_conduit_committee_city_isSet = true;
}

bool OAIScheduleA::is_conduit_committee_city_Set() const{
    return m_conduit_committee_city_isSet;
}

bool OAIScheduleA::is_conduit_committee_city_Valid() const{
    return m_conduit_committee_city_isValid;
}

QString OAIScheduleA::getConduitCommitteeId() const {
    return m_conduit_committee_id;
}
void OAIScheduleA::setConduitCommitteeId(const QString &conduit_committee_id) {
    m_conduit_committee_id = conduit_committee_id;
    m_conduit_committee_id_isSet = true;
}

bool OAIScheduleA::is_conduit_committee_id_Set() const{
    return m_conduit_committee_id_isSet;
}

bool OAIScheduleA::is_conduit_committee_id_Valid() const{
    return m_conduit_committee_id_isValid;
}

QString OAIScheduleA::getConduitCommitteeName() const {
    return m_conduit_committee_name;
}
void OAIScheduleA::setConduitCommitteeName(const QString &conduit_committee_name) {
    m_conduit_committee_name = conduit_committee_name;
    m_conduit_committee_name_isSet = true;
}

bool OAIScheduleA::is_conduit_committee_name_Set() const{
    return m_conduit_committee_name_isSet;
}

bool OAIScheduleA::is_conduit_committee_name_Valid() const{
    return m_conduit_committee_name_isValid;
}

QString OAIScheduleA::getConduitCommitteeState() const {
    return m_conduit_committee_state;
}
void OAIScheduleA::setConduitCommitteeState(const QString &conduit_committee_state) {
    m_conduit_committee_state = conduit_committee_state;
    m_conduit_committee_state_isSet = true;
}

bool OAIScheduleA::is_conduit_committee_state_Set() const{
    return m_conduit_committee_state_isSet;
}

bool OAIScheduleA::is_conduit_committee_state_Valid() const{
    return m_conduit_committee_state_isValid;
}

QString OAIScheduleA::getConduitCommitteeStreet1() const {
    return m_conduit_committee_street1;
}
void OAIScheduleA::setConduitCommitteeStreet1(const QString &conduit_committee_street1) {
    m_conduit_committee_street1 = conduit_committee_street1;
    m_conduit_committee_street1_isSet = true;
}

bool OAIScheduleA::is_conduit_committee_street1_Set() const{
    return m_conduit_committee_street1_isSet;
}

bool OAIScheduleA::is_conduit_committee_street1_Valid() const{
    return m_conduit_committee_street1_isValid;
}

QString OAIScheduleA::getConduitCommitteeStreet2() const {
    return m_conduit_committee_street2;
}
void OAIScheduleA::setConduitCommitteeStreet2(const QString &conduit_committee_street2) {
    m_conduit_committee_street2 = conduit_committee_street2;
    m_conduit_committee_street2_isSet = true;
}

bool OAIScheduleA::is_conduit_committee_street2_Set() const{
    return m_conduit_committee_street2_isSet;
}

bool OAIScheduleA::is_conduit_committee_street2_Valid() const{
    return m_conduit_committee_street2_isValid;
}

qint32 OAIScheduleA::getConduitCommitteeZip() const {
    return m_conduit_committee_zip;
}
void OAIScheduleA::setConduitCommitteeZip(const qint32 &conduit_committee_zip) {
    m_conduit_committee_zip = conduit_committee_zip;
    m_conduit_committee_zip_isSet = true;
}

bool OAIScheduleA::is_conduit_committee_zip_Set() const{
    return m_conduit_committee_zip_isSet;
}

bool OAIScheduleA::is_conduit_committee_zip_Valid() const{
    return m_conduit_committee_zip_isValid;
}

double OAIScheduleA::getContributionReceiptAmount() const {
    return m_contribution_receipt_amount;
}
void OAIScheduleA::setContributionReceiptAmount(const double &contribution_receipt_amount) {
    m_contribution_receipt_amount = contribution_receipt_amount;
    m_contribution_receipt_amount_isSet = true;
}

bool OAIScheduleA::is_contribution_receipt_amount_Set() const{
    return m_contribution_receipt_amount_isSet;
}

bool OAIScheduleA::is_contribution_receipt_amount_Valid() const{
    return m_contribution_receipt_amount_isValid;
}

QDate OAIScheduleA::getContributionReceiptDate() const {
    return m_contribution_receipt_date;
}
void OAIScheduleA::setContributionReceiptDate(const QDate &contribution_receipt_date) {
    m_contribution_receipt_date = contribution_receipt_date;
    m_contribution_receipt_date_isSet = true;
}

bool OAIScheduleA::is_contribution_receipt_date_Set() const{
    return m_contribution_receipt_date_isSet;
}

bool OAIScheduleA::is_contribution_receipt_date_Valid() const{
    return m_contribution_receipt_date_isValid;
}

OAICommitteeHistory OAIScheduleA::getContributor() const {
    return m_contributor;
}
void OAIScheduleA::setContributor(const OAICommitteeHistory &contributor) {
    m_contributor = contributor;
    m_contributor_isSet = true;
}

bool OAIScheduleA::is_contributor_Set() const{
    return m_contributor_isSet;
}

bool OAIScheduleA::is_contributor_Valid() const{
    return m_contributor_isValid;
}

double OAIScheduleA::getContributorAggregateYtd() const {
    return m_contributor_aggregate_ytd;
}
void OAIScheduleA::setContributorAggregateYtd(const double &contributor_aggregate_ytd) {
    m_contributor_aggregate_ytd = contributor_aggregate_ytd;
    m_contributor_aggregate_ytd_isSet = true;
}

bool OAIScheduleA::is_contributor_aggregate_ytd_Set() const{
    return m_contributor_aggregate_ytd_isSet;
}

bool OAIScheduleA::is_contributor_aggregate_ytd_Valid() const{
    return m_contributor_aggregate_ytd_isValid;
}

QString OAIScheduleA::getContributorCity() const {
    return m_contributor_city;
}
void OAIScheduleA::setContributorCity(const QString &contributor_city) {
    m_contributor_city = contributor_city;
    m_contributor_city_isSet = true;
}

bool OAIScheduleA::is_contributor_city_Set() const{
    return m_contributor_city_isSet;
}

bool OAIScheduleA::is_contributor_city_Valid() const{
    return m_contributor_city_isValid;
}

QString OAIScheduleA::getContributorEmployer() const {
    return m_contributor_employer;
}
void OAIScheduleA::setContributorEmployer(const QString &contributor_employer) {
    m_contributor_employer = contributor_employer;
    m_contributor_employer_isSet = true;
}

bool OAIScheduleA::is_contributor_employer_Set() const{
    return m_contributor_employer_isSet;
}

bool OAIScheduleA::is_contributor_employer_Valid() const{
    return m_contributor_employer_isValid;
}

QString OAIScheduleA::getContributorFirstName() const {
    return m_contributor_first_name;
}
void OAIScheduleA::setContributorFirstName(const QString &contributor_first_name) {
    m_contributor_first_name = contributor_first_name;
    m_contributor_first_name_isSet = true;
}

bool OAIScheduleA::is_contributor_first_name_Set() const{
    return m_contributor_first_name_isSet;
}

bool OAIScheduleA::is_contributor_first_name_Valid() const{
    return m_contributor_first_name_isValid;
}

QString OAIScheduleA::getContributorId() const {
    return m_contributor_id;
}
void OAIScheduleA::setContributorId(const QString &contributor_id) {
    m_contributor_id = contributor_id;
    m_contributor_id_isSet = true;
}

bool OAIScheduleA::is_contributor_id_Set() const{
    return m_contributor_id_isSet;
}

bool OAIScheduleA::is_contributor_id_Valid() const{
    return m_contributor_id_isValid;
}

QString OAIScheduleA::getContributorLastName() const {
    return m_contributor_last_name;
}
void OAIScheduleA::setContributorLastName(const QString &contributor_last_name) {
    m_contributor_last_name = contributor_last_name;
    m_contributor_last_name_isSet = true;
}

bool OAIScheduleA::is_contributor_last_name_Set() const{
    return m_contributor_last_name_isSet;
}

bool OAIScheduleA::is_contributor_last_name_Valid() const{
    return m_contributor_last_name_isValid;
}

QString OAIScheduleA::getContributorMiddleName() const {
    return m_contributor_middle_name;
}
void OAIScheduleA::setContributorMiddleName(const QString &contributor_middle_name) {
    m_contributor_middle_name = contributor_middle_name;
    m_contributor_middle_name_isSet = true;
}

bool OAIScheduleA::is_contributor_middle_name_Set() const{
    return m_contributor_middle_name_isSet;
}

bool OAIScheduleA::is_contributor_middle_name_Valid() const{
    return m_contributor_middle_name_isValid;
}

QString OAIScheduleA::getContributorName() const {
    return m_contributor_name;
}
void OAIScheduleA::setContributorName(const QString &contributor_name) {
    m_contributor_name = contributor_name;
    m_contributor_name_isSet = true;
}

bool OAIScheduleA::is_contributor_name_Set() const{
    return m_contributor_name_isSet;
}

bool OAIScheduleA::is_contributor_name_Valid() const{
    return m_contributor_name_isValid;
}

QString OAIScheduleA::getContributorOccupation() const {
    return m_contributor_occupation;
}
void OAIScheduleA::setContributorOccupation(const QString &contributor_occupation) {
    m_contributor_occupation = contributor_occupation;
    m_contributor_occupation_isSet = true;
}

bool OAIScheduleA::is_contributor_occupation_Set() const{
    return m_contributor_occupation_isSet;
}

bool OAIScheduleA::is_contributor_occupation_Valid() const{
    return m_contributor_occupation_isValid;
}

QString OAIScheduleA::getContributorPrefix() const {
    return m_contributor_prefix;
}
void OAIScheduleA::setContributorPrefix(const QString &contributor_prefix) {
    m_contributor_prefix = contributor_prefix;
    m_contributor_prefix_isSet = true;
}

bool OAIScheduleA::is_contributor_prefix_Set() const{
    return m_contributor_prefix_isSet;
}

bool OAIScheduleA::is_contributor_prefix_Valid() const{
    return m_contributor_prefix_isValid;
}

QString OAIScheduleA::getContributorState() const {
    return m_contributor_state;
}
void OAIScheduleA::setContributorState(const QString &contributor_state) {
    m_contributor_state = contributor_state;
    m_contributor_state_isSet = true;
}

bool OAIScheduleA::is_contributor_state_Set() const{
    return m_contributor_state_isSet;
}

bool OAIScheduleA::is_contributor_state_Valid() const{
    return m_contributor_state_isValid;
}

QString OAIScheduleA::getContributorStreet1() const {
    return m_contributor_street_1;
}
void OAIScheduleA::setContributorStreet1(const QString &contributor_street_1) {
    m_contributor_street_1 = contributor_street_1;
    m_contributor_street_1_isSet = true;
}

bool OAIScheduleA::is_contributor_street_1_Set() const{
    return m_contributor_street_1_isSet;
}

bool OAIScheduleA::is_contributor_street_1_Valid() const{
    return m_contributor_street_1_isValid;
}

QString OAIScheduleA::getContributorStreet2() const {
    return m_contributor_street_2;
}
void OAIScheduleA::setContributorStreet2(const QString &contributor_street_2) {
    m_contributor_street_2 = contributor_street_2;
    m_contributor_street_2_isSet = true;
}

bool OAIScheduleA::is_contributor_street_2_Set() const{
    return m_contributor_street_2_isSet;
}

bool OAIScheduleA::is_contributor_street_2_Valid() const{
    return m_contributor_street_2_isValid;
}

QString OAIScheduleA::getContributorSuffix() const {
    return m_contributor_suffix;
}
void OAIScheduleA::setContributorSuffix(const QString &contributor_suffix) {
    m_contributor_suffix = contributor_suffix;
    m_contributor_suffix_isSet = true;
}

bool OAIScheduleA::is_contributor_suffix_Set() const{
    return m_contributor_suffix_isSet;
}

bool OAIScheduleA::is_contributor_suffix_Valid() const{
    return m_contributor_suffix_isValid;
}

QString OAIScheduleA::getContributorZip() const {
    return m_contributor_zip;
}
void OAIScheduleA::setContributorZip(const QString &contributor_zip) {
    m_contributor_zip = contributor_zip;
    m_contributor_zip_isSet = true;
}

bool OAIScheduleA::is_contributor_zip_Set() const{
    return m_contributor_zip_isSet;
}

bool OAIScheduleA::is_contributor_zip_Valid() const{
    return m_contributor_zip_isValid;
}

QString OAIScheduleA::getDonorCommitteeName() const {
    return m_donor_committee_name;
}
void OAIScheduleA::setDonorCommitteeName(const QString &donor_committee_name) {
    m_donor_committee_name = donor_committee_name;
    m_donor_committee_name_isSet = true;
}

bool OAIScheduleA::is_donor_committee_name_Set() const{
    return m_donor_committee_name_isSet;
}

bool OAIScheduleA::is_donor_committee_name_Valid() const{
    return m_donor_committee_name_isValid;
}

QString OAIScheduleA::getElectionType() const {
    return m_election_type;
}
void OAIScheduleA::setElectionType(const QString &election_type) {
    m_election_type = election_type;
    m_election_type_isSet = true;
}

bool OAIScheduleA::is_election_type_Set() const{
    return m_election_type_isSet;
}

bool OAIScheduleA::is_election_type_Valid() const{
    return m_election_type_isValid;
}

QString OAIScheduleA::getElectionTypeFull() const {
    return m_election_type_full;
}
void OAIScheduleA::setElectionTypeFull(const QString &election_type_full) {
    m_election_type_full = election_type_full;
    m_election_type_full_isSet = true;
}

bool OAIScheduleA::is_election_type_full_Set() const{
    return m_election_type_full_isSet;
}

bool OAIScheduleA::is_election_type_full_Valid() const{
    return m_election_type_full_isValid;
}

QString OAIScheduleA::getEntityType() const {
    return m_entity_type;
}
void OAIScheduleA::setEntityType(const QString &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIScheduleA::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIScheduleA::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAIScheduleA::getEntityTypeDesc() const {
    return m_entity_type_desc;
}
void OAIScheduleA::setEntityTypeDesc(const QString &entity_type_desc) {
    m_entity_type_desc = entity_type_desc;
    m_entity_type_desc_isSet = true;
}

bool OAIScheduleA::is_entity_type_desc_Set() const{
    return m_entity_type_desc_isSet;
}

bool OAIScheduleA::is_entity_type_desc_Valid() const{
    return m_entity_type_desc_isValid;
}

QString OAIScheduleA::getFecElectionTypeDesc() const {
    return m_fec_election_type_desc;
}
void OAIScheduleA::setFecElectionTypeDesc(const QString &fec_election_type_desc) {
    m_fec_election_type_desc = fec_election_type_desc;
    m_fec_election_type_desc_isSet = true;
}

bool OAIScheduleA::is_fec_election_type_desc_Set() const{
    return m_fec_election_type_desc_isSet;
}

bool OAIScheduleA::is_fec_election_type_desc_Valid() const{
    return m_fec_election_type_desc_isValid;
}

QString OAIScheduleA::getFecElectionYear() const {
    return m_fec_election_year;
}
void OAIScheduleA::setFecElectionYear(const QString &fec_election_year) {
    m_fec_election_year = fec_election_year;
    m_fec_election_year_isSet = true;
}

bool OAIScheduleA::is_fec_election_year_Set() const{
    return m_fec_election_year_isSet;
}

bool OAIScheduleA::is_fec_election_year_Valid() const{
    return m_fec_election_year_isValid;
}

qint32 OAIScheduleA::getFileNumber() const {
    return m_file_number;
}
void OAIScheduleA::setFileNumber(const qint32 &file_number) {
    m_file_number = file_number;
    m_file_number_isSet = true;
}

bool OAIScheduleA::is_file_number_Set() const{
    return m_file_number_isSet;
}

bool OAIScheduleA::is_file_number_Valid() const{
    return m_file_number_isValid;
}

QString OAIScheduleA::getFilingForm() const {
    return m_filing_form;
}
void OAIScheduleA::setFilingForm(const QString &filing_form) {
    m_filing_form = filing_form;
    m_filing_form_isSet = true;
}

bool OAIScheduleA::is_filing_form_Set() const{
    return m_filing_form_isSet;
}

bool OAIScheduleA::is_filing_form_Valid() const{
    return m_filing_form_isValid;
}

QString OAIScheduleA::getImageNumber() const {
    return m_image_number;
}
void OAIScheduleA::setImageNumber(const QString &image_number) {
    m_image_number = image_number;
    m_image_number_isSet = true;
}

bool OAIScheduleA::is_image_number_Set() const{
    return m_image_number_isSet;
}

bool OAIScheduleA::is_image_number_Valid() const{
    return m_image_number_isValid;
}

QString OAIScheduleA::getIncreasedLimit() const {
    return m_increased_limit;
}
void OAIScheduleA::setIncreasedLimit(const QString &increased_limit) {
    m_increased_limit = increased_limit;
    m_increased_limit_isSet = true;
}

bool OAIScheduleA::is_increased_limit_Set() const{
    return m_increased_limit_isSet;
}

bool OAIScheduleA::is_increased_limit_Valid() const{
    return m_increased_limit_isValid;
}

bool OAIScheduleA::isIsIndividual() const {
    return m_is_individual;
}
void OAIScheduleA::setIsIndividual(const bool &is_individual) {
    m_is_individual = is_individual;
    m_is_individual_isSet = true;
}

bool OAIScheduleA::is_is_individual_Set() const{
    return m_is_individual_isSet;
}

bool OAIScheduleA::is_is_individual_Valid() const{
    return m_is_individual_isValid;
}

QString OAIScheduleA::getLineNumber() const {
    return m_line_number;
}
void OAIScheduleA::setLineNumber(const QString &line_number) {
    m_line_number = line_number;
    m_line_number_isSet = true;
}

bool OAIScheduleA::is_line_number_Set() const{
    return m_line_number_isSet;
}

bool OAIScheduleA::is_line_number_Valid() const{
    return m_line_number_isValid;
}

QString OAIScheduleA::getLineNumberLabel() const {
    return m_line_number_label;
}
void OAIScheduleA::setLineNumberLabel(const QString &line_number_label) {
    m_line_number_label = line_number_label;
    m_line_number_label_isSet = true;
}

bool OAIScheduleA::is_line_number_label_Set() const{
    return m_line_number_label_isSet;
}

bool OAIScheduleA::is_line_number_label_Valid() const{
    return m_line_number_label_isValid;
}

qint32 OAIScheduleA::getLinkId() const {
    return m_link_id;
}
void OAIScheduleA::setLinkId(const qint32 &link_id) {
    m_link_id = link_id;
    m_link_id_isSet = true;
}

bool OAIScheduleA::is_link_id_Set() const{
    return m_link_id_isSet;
}

bool OAIScheduleA::is_link_id_Valid() const{
    return m_link_id_isValid;
}

QDateTime OAIScheduleA::getLoadDate() const {
    return m_load_date;
}
void OAIScheduleA::setLoadDate(const QDateTime &load_date) {
    m_load_date = load_date;
    m_load_date_isSet = true;
}

bool OAIScheduleA::is_load_date_Set() const{
    return m_load_date_isSet;
}

bool OAIScheduleA::is_load_date_Valid() const{
    return m_load_date_isValid;
}

QString OAIScheduleA::getMemoCode() const {
    return m_memo_code;
}
void OAIScheduleA::setMemoCode(const QString &memo_code) {
    m_memo_code = memo_code;
    m_memo_code_isSet = true;
}

bool OAIScheduleA::is_memo_code_Set() const{
    return m_memo_code_isSet;
}

bool OAIScheduleA::is_memo_code_Valid() const{
    return m_memo_code_isValid;
}

QString OAIScheduleA::getMemoCodeFull() const {
    return m_memo_code_full;
}
void OAIScheduleA::setMemoCodeFull(const QString &memo_code_full) {
    m_memo_code_full = memo_code_full;
    m_memo_code_full_isSet = true;
}

bool OAIScheduleA::is_memo_code_full_Set() const{
    return m_memo_code_full_isSet;
}

bool OAIScheduleA::is_memo_code_full_Valid() const{
    return m_memo_code_full_isValid;
}

QString OAIScheduleA::getMemoText() const {
    return m_memo_text;
}
void OAIScheduleA::setMemoText(const QString &memo_text) {
    m_memo_text = memo_text;
    m_memo_text_isSet = true;
}

bool OAIScheduleA::is_memo_text_Set() const{
    return m_memo_text_isSet;
}

bool OAIScheduleA::is_memo_text_Valid() const{
    return m_memo_text_isValid;
}

bool OAIScheduleA::isMemoedSubtotal() const {
    return m_memoed_subtotal;
}
void OAIScheduleA::setMemoedSubtotal(const bool &memoed_subtotal) {
    m_memoed_subtotal = memoed_subtotal;
    m_memoed_subtotal_isSet = true;
}

bool OAIScheduleA::is_memoed_subtotal_Set() const{
    return m_memoed_subtotal_isSet;
}

bool OAIScheduleA::is_memoed_subtotal_Valid() const{
    return m_memoed_subtotal_isValid;
}

QString OAIScheduleA::getNationalCommitteeNonfederalAccount() const {
    return m_national_committee_nonfederal_account;
}
void OAIScheduleA::setNationalCommitteeNonfederalAccount(const QString &national_committee_nonfederal_account) {
    m_national_committee_nonfederal_account = national_committee_nonfederal_account;
    m_national_committee_nonfederal_account_isSet = true;
}

bool OAIScheduleA::is_national_committee_nonfederal_account_Set() const{
    return m_national_committee_nonfederal_account_isSet;
}

bool OAIScheduleA::is_national_committee_nonfederal_account_Valid() const{
    return m_national_committee_nonfederal_account_isValid;
}

QString OAIScheduleA::getOriginalSubId() const {
    return m_original_sub_id;
}
void OAIScheduleA::setOriginalSubId(const QString &original_sub_id) {
    m_original_sub_id = original_sub_id;
    m_original_sub_id_isSet = true;
}

bool OAIScheduleA::is_original_sub_id_Set() const{
    return m_original_sub_id_isSet;
}

bool OAIScheduleA::is_original_sub_id_Valid() const{
    return m_original_sub_id_isValid;
}

QString OAIScheduleA::getPdfUrl() const {
    return m_pdf_url;
}
void OAIScheduleA::setPdfUrl(const QString &pdf_url) {
    m_pdf_url = pdf_url;
    m_pdf_url_isSet = true;
}

bool OAIScheduleA::is_pdf_url_Set() const{
    return m_pdf_url_isSet;
}

bool OAIScheduleA::is_pdf_url_Valid() const{
    return m_pdf_url_isValid;
}

QString OAIScheduleA::getReceiptType() const {
    return m_receipt_type;
}
void OAIScheduleA::setReceiptType(const QString &receipt_type) {
    m_receipt_type = receipt_type;
    m_receipt_type_isSet = true;
}

bool OAIScheduleA::is_receipt_type_Set() const{
    return m_receipt_type_isSet;
}

bool OAIScheduleA::is_receipt_type_Valid() const{
    return m_receipt_type_isValid;
}

QString OAIScheduleA::getReceiptTypeDesc() const {
    return m_receipt_type_desc;
}
void OAIScheduleA::setReceiptTypeDesc(const QString &receipt_type_desc) {
    m_receipt_type_desc = receipt_type_desc;
    m_receipt_type_desc_isSet = true;
}

bool OAIScheduleA::is_receipt_type_desc_Set() const{
    return m_receipt_type_desc_isSet;
}

bool OAIScheduleA::is_receipt_type_desc_Valid() const{
    return m_receipt_type_desc_isValid;
}

QString OAIScheduleA::getReceiptTypeFull() const {
    return m_receipt_type_full;
}
void OAIScheduleA::setReceiptTypeFull(const QString &receipt_type_full) {
    m_receipt_type_full = receipt_type_full;
    m_receipt_type_full_isSet = true;
}

bool OAIScheduleA::is_receipt_type_full_Set() const{
    return m_receipt_type_full_isSet;
}

bool OAIScheduleA::is_receipt_type_full_Valid() const{
    return m_receipt_type_full_isValid;
}

QString OAIScheduleA::getRecipientCommitteeDesignation() const {
    return m_recipient_committee_designation;
}
void OAIScheduleA::setRecipientCommitteeDesignation(const QString &recipient_committee_designation) {
    m_recipient_committee_designation = recipient_committee_designation;
    m_recipient_committee_designation_isSet = true;
}

bool OAIScheduleA::is_recipient_committee_designation_Set() const{
    return m_recipient_committee_designation_isSet;
}

bool OAIScheduleA::is_recipient_committee_designation_Valid() const{
    return m_recipient_committee_designation_isValid;
}

QString OAIScheduleA::getRecipientCommitteeOrgType() const {
    return m_recipient_committee_org_type;
}
void OAIScheduleA::setRecipientCommitteeOrgType(const QString &recipient_committee_org_type) {
    m_recipient_committee_org_type = recipient_committee_org_type;
    m_recipient_committee_org_type_isSet = true;
}

bool OAIScheduleA::is_recipient_committee_org_type_Set() const{
    return m_recipient_committee_org_type_isSet;
}

bool OAIScheduleA::is_recipient_committee_org_type_Valid() const{
    return m_recipient_committee_org_type_isValid;
}

QString OAIScheduleA::getRecipientCommitteeType() const {
    return m_recipient_committee_type;
}
void OAIScheduleA::setRecipientCommitteeType(const QString &recipient_committee_type) {
    m_recipient_committee_type = recipient_committee_type;
    m_recipient_committee_type_isSet = true;
}

bool OAIScheduleA::is_recipient_committee_type_Set() const{
    return m_recipient_committee_type_isSet;
}

bool OAIScheduleA::is_recipient_committee_type_Valid() const{
    return m_recipient_committee_type_isValid;
}

QString OAIScheduleA::getReportType() const {
    return m_report_type;
}
void OAIScheduleA::setReportType(const QString &report_type) {
    m_report_type = report_type;
    m_report_type_isSet = true;
}

bool OAIScheduleA::is_report_type_Set() const{
    return m_report_type_isSet;
}

bool OAIScheduleA::is_report_type_Valid() const{
    return m_report_type_isValid;
}

qint32 OAIScheduleA::getReportYear() const {
    return m_report_year;
}
void OAIScheduleA::setReportYear(const qint32 &report_year) {
    m_report_year = report_year;
    m_report_year_isSet = true;
}

bool OAIScheduleA::is_report_year_Set() const{
    return m_report_year_isSet;
}

bool OAIScheduleA::is_report_year_Valid() const{
    return m_report_year_isValid;
}

QString OAIScheduleA::getScheduleType() const {
    return m_schedule_type;
}
void OAIScheduleA::setScheduleType(const QString &schedule_type) {
    m_schedule_type = schedule_type;
    m_schedule_type_isSet = true;
}

bool OAIScheduleA::is_schedule_type_Set() const{
    return m_schedule_type_isSet;
}

bool OAIScheduleA::is_schedule_type_Valid() const{
    return m_schedule_type_isValid;
}

QString OAIScheduleA::getScheduleTypeFull() const {
    return m_schedule_type_full;
}
void OAIScheduleA::setScheduleTypeFull(const QString &schedule_type_full) {
    m_schedule_type_full = schedule_type_full;
    m_schedule_type_full_isSet = true;
}

bool OAIScheduleA::is_schedule_type_full_Set() const{
    return m_schedule_type_full_isSet;
}

bool OAIScheduleA::is_schedule_type_full_Valid() const{
    return m_schedule_type_full_isValid;
}

QString OAIScheduleA::getSubId() const {
    return m_sub_id;
}
void OAIScheduleA::setSubId(const QString &sub_id) {
    m_sub_id = sub_id;
    m_sub_id_isSet = true;
}

bool OAIScheduleA::is_sub_id_Set() const{
    return m_sub_id_isSet;
}

bool OAIScheduleA::is_sub_id_Valid() const{
    return m_sub_id_isValid;
}

QString OAIScheduleA::getTransactionId() const {
    return m_transaction_id;
}
void OAIScheduleA::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAIScheduleA::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAIScheduleA::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

qint32 OAIScheduleA::getTwoYearTransactionPeriod() const {
    return m_two_year_transaction_period;
}
void OAIScheduleA::setTwoYearTransactionPeriod(const qint32 &two_year_transaction_period) {
    m_two_year_transaction_period = two_year_transaction_period;
    m_two_year_transaction_period_isSet = true;
}

bool OAIScheduleA::is_two_year_transaction_period_Set() const{
    return m_two_year_transaction_period_isSet;
}

bool OAIScheduleA::is_two_year_transaction_period_Valid() const{
    return m_two_year_transaction_period_isValid;
}

QString OAIScheduleA::getUnusedContbrId() const {
    return m_unused_contbr_id;
}
void OAIScheduleA::setUnusedContbrId(const QString &unused_contbr_id) {
    m_unused_contbr_id = unused_contbr_id;
    m_unused_contbr_id_isSet = true;
}

bool OAIScheduleA::is_unused_contbr_id_Set() const{
    return m_unused_contbr_id_isSet;
}

bool OAIScheduleA::is_unused_contbr_id_Valid() const{
    return m_unused_contbr_id_isValid;
}

bool OAIScheduleA::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amendment_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amendment_indicator_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_back_reference_schedule_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_back_reference_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_middle_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_office_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_office_district_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_office_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_office_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_office_state_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conduit_committee_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conduit_committee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conduit_committee_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conduit_committee_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conduit_committee_street1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conduit_committee_street2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conduit_committee_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contribution_receipt_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contribution_receipt_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor_aggregate_ytd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor_employer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor_middle_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor_occupation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor_street_1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor_street_2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_donor_committee_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_type_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fec_election_type_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fec_election_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filing_form_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_increased_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_individual_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_number_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memo_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memo_code_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memo_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memoed_subtotal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_national_committee_nonfederal_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_sub_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pdf_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_type_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_type_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_committee_designation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_committee_org_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_committee_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_type_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_two_year_transaction_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unused_contbr_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduleA::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
