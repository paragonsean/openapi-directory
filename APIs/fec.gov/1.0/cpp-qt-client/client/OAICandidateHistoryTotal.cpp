/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICandidateHistoryTotal.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICandidateHistoryTotal::OAICandidateHistoryTotal(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICandidateHistoryTotal::OAICandidateHistoryTotal() {
    this->initializeModel();
}

OAICandidateHistoryTotal::~OAICandidateHistoryTotal() {}

void OAICandidateHistoryTotal::initializeModel() {

    m_active_through_isSet = false;
    m_active_through_isValid = false;

    m_address_city_isSet = false;
    m_address_city_isValid = false;

    m_address_state_isSet = false;
    m_address_state_isValid = false;

    m_address_street_1_isSet = false;
    m_address_street_1_isValid = false;

    m_address_street_2_isSet = false;
    m_address_street_2_isValid = false;

    m_address_zip_isSet = false;
    m_address_zip_isValid = false;

    m_candidate_election_year_isSet = false;
    m_candidate_election_year_isValid = false;

    m_candidate_id_isSet = false;
    m_candidate_id_isValid = false;

    m_candidate_inactive_isSet = false;
    m_candidate_inactive_isValid = false;

    m_candidate_status_isSet = false;
    m_candidate_status_isValid = false;

    m_cash_on_hand_end_period_isSet = false;
    m_cash_on_hand_end_period_isValid = false;

    m_coverage_end_date_isSet = false;
    m_coverage_end_date_isValid = false;

    m_coverage_start_date_isSet = false;
    m_coverage_start_date_isValid = false;

    m_cycle_isSet = false;
    m_cycle_isValid = false;

    m_cycles_isSet = false;
    m_cycles_isValid = false;

    m_debts_owed_by_committee_isSet = false;
    m_debts_owed_by_committee_isValid = false;

    m_disbursements_isSet = false;
    m_disbursements_isValid = false;

    m_district_isSet = false;
    m_district_isValid = false;

    m_district_number_isSet = false;
    m_district_number_isValid = false;

    m_election_districts_isSet = false;
    m_election_districts_isValid = false;

    m_election_year_isSet = false;
    m_election_year_isValid = false;

    m_election_years_isSet = false;
    m_election_years_isValid = false;

    m_fec_cycles_in_election_isSet = false;
    m_fec_cycles_in_election_isValid = false;

    m_federal_funds_flag_isSet = false;
    m_federal_funds_flag_isValid = false;

    m_first_file_date_isSet = false;
    m_first_file_date_isValid = false;

    m_flags_isSet = false;
    m_flags_isValid = false;

    m_has_raised_funds_isSet = false;
    m_has_raised_funds_isValid = false;

    m_incumbent_challenge_isSet = false;
    m_incumbent_challenge_isValid = false;

    m_incumbent_challenge_full_isSet = false;
    m_incumbent_challenge_full_isValid = false;

    m_individual_itemized_contributions_isSet = false;
    m_individual_itemized_contributions_isValid = false;

    m_is_election_isSet = false;
    m_is_election_isValid = false;

    m_last_f2_date_isSet = false;
    m_last_f2_date_isValid = false;

    m_last_file_date_isSet = false;
    m_last_file_date_isValid = false;

    m_load_date_isSet = false;
    m_load_date_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_office_isSet = false;
    m_office_isValid = false;

    m_office_full_isSet = false;
    m_office_full_isValid = false;

    m_other_political_committee_contributions_isSet = false;
    m_other_political_committee_contributions_isValid = false;

    m_party_isSet = false;
    m_party_isValid = false;

    m_party_full_isSet = false;
    m_party_full_isValid = false;

    m_receipts_isSet = false;
    m_receipts_isValid = false;

    m_rounded_election_years_isSet = false;
    m_rounded_election_years_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_full_isSet = false;
    m_state_full_isValid = false;

    m_transfers_from_other_authorized_committee_isSet = false;
    m_transfers_from_other_authorized_committee_isValid = false;

    m_two_year_period_isSet = false;
    m_two_year_period_isValid = false;
}

void OAICandidateHistoryTotal::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICandidateHistoryTotal::fromJsonObject(QJsonObject json) {

    m_active_through_isValid = ::OpenAPI::fromJsonValue(m_active_through, json[QString("active_through")]);
    m_active_through_isSet = !json[QString("active_through")].isNull() && m_active_through_isValid;

    m_address_city_isValid = ::OpenAPI::fromJsonValue(m_address_city, json[QString("address_city")]);
    m_address_city_isSet = !json[QString("address_city")].isNull() && m_address_city_isValid;

    m_address_state_isValid = ::OpenAPI::fromJsonValue(m_address_state, json[QString("address_state")]);
    m_address_state_isSet = !json[QString("address_state")].isNull() && m_address_state_isValid;

    m_address_street_1_isValid = ::OpenAPI::fromJsonValue(m_address_street_1, json[QString("address_street_1")]);
    m_address_street_1_isSet = !json[QString("address_street_1")].isNull() && m_address_street_1_isValid;

    m_address_street_2_isValid = ::OpenAPI::fromJsonValue(m_address_street_2, json[QString("address_street_2")]);
    m_address_street_2_isSet = !json[QString("address_street_2")].isNull() && m_address_street_2_isValid;

    m_address_zip_isValid = ::OpenAPI::fromJsonValue(m_address_zip, json[QString("address_zip")]);
    m_address_zip_isSet = !json[QString("address_zip")].isNull() && m_address_zip_isValid;

    m_candidate_election_year_isValid = ::OpenAPI::fromJsonValue(m_candidate_election_year, json[QString("candidate_election_year")]);
    m_candidate_election_year_isSet = !json[QString("candidate_election_year")].isNull() && m_candidate_election_year_isValid;

    m_candidate_id_isValid = ::OpenAPI::fromJsonValue(m_candidate_id, json[QString("candidate_id")]);
    m_candidate_id_isSet = !json[QString("candidate_id")].isNull() && m_candidate_id_isValid;

    m_candidate_inactive_isValid = ::OpenAPI::fromJsonValue(m_candidate_inactive, json[QString("candidate_inactive")]);
    m_candidate_inactive_isSet = !json[QString("candidate_inactive")].isNull() && m_candidate_inactive_isValid;

    m_candidate_status_isValid = ::OpenAPI::fromJsonValue(m_candidate_status, json[QString("candidate_status")]);
    m_candidate_status_isSet = !json[QString("candidate_status")].isNull() && m_candidate_status_isValid;

    m_cash_on_hand_end_period_isValid = ::OpenAPI::fromJsonValue(m_cash_on_hand_end_period, json[QString("cash_on_hand_end_period")]);
    m_cash_on_hand_end_period_isSet = !json[QString("cash_on_hand_end_period")].isNull() && m_cash_on_hand_end_period_isValid;

    m_coverage_end_date_isValid = ::OpenAPI::fromJsonValue(m_coverage_end_date, json[QString("coverage_end_date")]);
    m_coverage_end_date_isSet = !json[QString("coverage_end_date")].isNull() && m_coverage_end_date_isValid;

    m_coverage_start_date_isValid = ::OpenAPI::fromJsonValue(m_coverage_start_date, json[QString("coverage_start_date")]);
    m_coverage_start_date_isSet = !json[QString("coverage_start_date")].isNull() && m_coverage_start_date_isValid;

    m_cycle_isValid = ::OpenAPI::fromJsonValue(m_cycle, json[QString("cycle")]);
    m_cycle_isSet = !json[QString("cycle")].isNull() && m_cycle_isValid;

    m_cycles_isValid = ::OpenAPI::fromJsonValue(m_cycles, json[QString("cycles")]);
    m_cycles_isSet = !json[QString("cycles")].isNull() && m_cycles_isValid;

    m_debts_owed_by_committee_isValid = ::OpenAPI::fromJsonValue(m_debts_owed_by_committee, json[QString("debts_owed_by_committee")]);
    m_debts_owed_by_committee_isSet = !json[QString("debts_owed_by_committee")].isNull() && m_debts_owed_by_committee_isValid;

    m_disbursements_isValid = ::OpenAPI::fromJsonValue(m_disbursements, json[QString("disbursements")]);
    m_disbursements_isSet = !json[QString("disbursements")].isNull() && m_disbursements_isValid;

    m_district_isValid = ::OpenAPI::fromJsonValue(m_district, json[QString("district")]);
    m_district_isSet = !json[QString("district")].isNull() && m_district_isValid;

    m_district_number_isValid = ::OpenAPI::fromJsonValue(m_district_number, json[QString("district_number")]);
    m_district_number_isSet = !json[QString("district_number")].isNull() && m_district_number_isValid;

    m_election_districts_isValid = ::OpenAPI::fromJsonValue(m_election_districts, json[QString("election_districts")]);
    m_election_districts_isSet = !json[QString("election_districts")].isNull() && m_election_districts_isValid;

    m_election_year_isValid = ::OpenAPI::fromJsonValue(m_election_year, json[QString("election_year")]);
    m_election_year_isSet = !json[QString("election_year")].isNull() && m_election_year_isValid;

    m_election_years_isValid = ::OpenAPI::fromJsonValue(m_election_years, json[QString("election_years")]);
    m_election_years_isSet = !json[QString("election_years")].isNull() && m_election_years_isValid;

    m_fec_cycles_in_election_isValid = ::OpenAPI::fromJsonValue(m_fec_cycles_in_election, json[QString("fec_cycles_in_election")]);
    m_fec_cycles_in_election_isSet = !json[QString("fec_cycles_in_election")].isNull() && m_fec_cycles_in_election_isValid;

    m_federal_funds_flag_isValid = ::OpenAPI::fromJsonValue(m_federal_funds_flag, json[QString("federal_funds_flag")]);
    m_federal_funds_flag_isSet = !json[QString("federal_funds_flag")].isNull() && m_federal_funds_flag_isValid;

    m_first_file_date_isValid = ::OpenAPI::fromJsonValue(m_first_file_date, json[QString("first_file_date")]);
    m_first_file_date_isSet = !json[QString("first_file_date")].isNull() && m_first_file_date_isValid;

    m_flags_isValid = ::OpenAPI::fromJsonValue(m_flags, json[QString("flags")]);
    m_flags_isSet = !json[QString("flags")].isNull() && m_flags_isValid;

    m_has_raised_funds_isValid = ::OpenAPI::fromJsonValue(m_has_raised_funds, json[QString("has_raised_funds")]);
    m_has_raised_funds_isSet = !json[QString("has_raised_funds")].isNull() && m_has_raised_funds_isValid;

    m_incumbent_challenge_isValid = ::OpenAPI::fromJsonValue(m_incumbent_challenge, json[QString("incumbent_challenge")]);
    m_incumbent_challenge_isSet = !json[QString("incumbent_challenge")].isNull() && m_incumbent_challenge_isValid;

    m_incumbent_challenge_full_isValid = ::OpenAPI::fromJsonValue(m_incumbent_challenge_full, json[QString("incumbent_challenge_full")]);
    m_incumbent_challenge_full_isSet = !json[QString("incumbent_challenge_full")].isNull() && m_incumbent_challenge_full_isValid;

    m_individual_itemized_contributions_isValid = ::OpenAPI::fromJsonValue(m_individual_itemized_contributions, json[QString("individual_itemized_contributions")]);
    m_individual_itemized_contributions_isSet = !json[QString("individual_itemized_contributions")].isNull() && m_individual_itemized_contributions_isValid;

    m_is_election_isValid = ::OpenAPI::fromJsonValue(m_is_election, json[QString("is_election")]);
    m_is_election_isSet = !json[QString("is_election")].isNull() && m_is_election_isValid;

    m_last_f2_date_isValid = ::OpenAPI::fromJsonValue(m_last_f2_date, json[QString("last_f2_date")]);
    m_last_f2_date_isSet = !json[QString("last_f2_date")].isNull() && m_last_f2_date_isValid;

    m_last_file_date_isValid = ::OpenAPI::fromJsonValue(m_last_file_date, json[QString("last_file_date")]);
    m_last_file_date_isSet = !json[QString("last_file_date")].isNull() && m_last_file_date_isValid;

    m_load_date_isValid = ::OpenAPI::fromJsonValue(m_load_date, json[QString("load_date")]);
    m_load_date_isSet = !json[QString("load_date")].isNull() && m_load_date_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_office_isValid = ::OpenAPI::fromJsonValue(m_office, json[QString("office")]);
    m_office_isSet = !json[QString("office")].isNull() && m_office_isValid;

    m_office_full_isValid = ::OpenAPI::fromJsonValue(m_office_full, json[QString("office_full")]);
    m_office_full_isSet = !json[QString("office_full")].isNull() && m_office_full_isValid;

    m_other_political_committee_contributions_isValid = ::OpenAPI::fromJsonValue(m_other_political_committee_contributions, json[QString("other_political_committee_contributions")]);
    m_other_political_committee_contributions_isSet = !json[QString("other_political_committee_contributions")].isNull() && m_other_political_committee_contributions_isValid;

    m_party_isValid = ::OpenAPI::fromJsonValue(m_party, json[QString("party")]);
    m_party_isSet = !json[QString("party")].isNull() && m_party_isValid;

    m_party_full_isValid = ::OpenAPI::fromJsonValue(m_party_full, json[QString("party_full")]);
    m_party_full_isSet = !json[QString("party_full")].isNull() && m_party_full_isValid;

    m_receipts_isValid = ::OpenAPI::fromJsonValue(m_receipts, json[QString("receipts")]);
    m_receipts_isSet = !json[QString("receipts")].isNull() && m_receipts_isValid;

    m_rounded_election_years_isValid = ::OpenAPI::fromJsonValue(m_rounded_election_years, json[QString("rounded_election_years")]);
    m_rounded_election_years_isSet = !json[QString("rounded_election_years")].isNull() && m_rounded_election_years_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_full_isValid = ::OpenAPI::fromJsonValue(m_state_full, json[QString("state_full")]);
    m_state_full_isSet = !json[QString("state_full")].isNull() && m_state_full_isValid;

    m_transfers_from_other_authorized_committee_isValid = ::OpenAPI::fromJsonValue(m_transfers_from_other_authorized_committee, json[QString("transfers_from_other_authorized_committee")]);
    m_transfers_from_other_authorized_committee_isSet = !json[QString("transfers_from_other_authorized_committee")].isNull() && m_transfers_from_other_authorized_committee_isValid;

    m_two_year_period_isValid = ::OpenAPI::fromJsonValue(m_two_year_period, json[QString("two_year_period")]);
    m_two_year_period_isSet = !json[QString("two_year_period")].isNull() && m_two_year_period_isValid;
}

QString OAICandidateHistoryTotal::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICandidateHistoryTotal::asJsonObject() const {
    QJsonObject obj;
    if (m_active_through_isSet) {
        obj.insert(QString("active_through"), ::OpenAPI::toJsonValue(m_active_through));
    }
    if (m_address_city_isSet) {
        obj.insert(QString("address_city"), ::OpenAPI::toJsonValue(m_address_city));
    }
    if (m_address_state_isSet) {
        obj.insert(QString("address_state"), ::OpenAPI::toJsonValue(m_address_state));
    }
    if (m_address_street_1_isSet) {
        obj.insert(QString("address_street_1"), ::OpenAPI::toJsonValue(m_address_street_1));
    }
    if (m_address_street_2_isSet) {
        obj.insert(QString("address_street_2"), ::OpenAPI::toJsonValue(m_address_street_2));
    }
    if (m_address_zip_isSet) {
        obj.insert(QString("address_zip"), ::OpenAPI::toJsonValue(m_address_zip));
    }
    if (m_candidate_election_year_isSet) {
        obj.insert(QString("candidate_election_year"), ::OpenAPI::toJsonValue(m_candidate_election_year));
    }
    if (m_candidate_id_isSet) {
        obj.insert(QString("candidate_id"), ::OpenAPI::toJsonValue(m_candidate_id));
    }
    if (m_candidate_inactive_isSet) {
        obj.insert(QString("candidate_inactive"), ::OpenAPI::toJsonValue(m_candidate_inactive));
    }
    if (m_candidate_status_isSet) {
        obj.insert(QString("candidate_status"), ::OpenAPI::toJsonValue(m_candidate_status));
    }
    if (m_cash_on_hand_end_period_isSet) {
        obj.insert(QString("cash_on_hand_end_period"), ::OpenAPI::toJsonValue(m_cash_on_hand_end_period));
    }
    if (m_coverage_end_date_isSet) {
        obj.insert(QString("coverage_end_date"), ::OpenAPI::toJsonValue(m_coverage_end_date));
    }
    if (m_coverage_start_date_isSet) {
        obj.insert(QString("coverage_start_date"), ::OpenAPI::toJsonValue(m_coverage_start_date));
    }
    if (m_cycle_isSet) {
        obj.insert(QString("cycle"), ::OpenAPI::toJsonValue(m_cycle));
    }
    if (m_cycles.size() > 0) {
        obj.insert(QString("cycles"), ::OpenAPI::toJsonValue(m_cycles));
    }
    if (m_debts_owed_by_committee_isSet) {
        obj.insert(QString("debts_owed_by_committee"), ::OpenAPI::toJsonValue(m_debts_owed_by_committee));
    }
    if (m_disbursements_isSet) {
        obj.insert(QString("disbursements"), ::OpenAPI::toJsonValue(m_disbursements));
    }
    if (m_district_isSet) {
        obj.insert(QString("district"), ::OpenAPI::toJsonValue(m_district));
    }
    if (m_district_number_isSet) {
        obj.insert(QString("district_number"), ::OpenAPI::toJsonValue(m_district_number));
    }
    if (m_election_districts.size() > 0) {
        obj.insert(QString("election_districts"), ::OpenAPI::toJsonValue(m_election_districts));
    }
    if (m_election_year_isSet) {
        obj.insert(QString("election_year"), ::OpenAPI::toJsonValue(m_election_year));
    }
    if (m_election_years.size() > 0) {
        obj.insert(QString("election_years"), ::OpenAPI::toJsonValue(m_election_years));
    }
    if (m_fec_cycles_in_election.size() > 0) {
        obj.insert(QString("fec_cycles_in_election"), ::OpenAPI::toJsonValue(m_fec_cycles_in_election));
    }
    if (m_federal_funds_flag_isSet) {
        obj.insert(QString("federal_funds_flag"), ::OpenAPI::toJsonValue(m_federal_funds_flag));
    }
    if (m_first_file_date_isSet) {
        obj.insert(QString("first_file_date"), ::OpenAPI::toJsonValue(m_first_file_date));
    }
    if (m_flags_isSet) {
        obj.insert(QString("flags"), ::OpenAPI::toJsonValue(m_flags));
    }
    if (m_has_raised_funds_isSet) {
        obj.insert(QString("has_raised_funds"), ::OpenAPI::toJsonValue(m_has_raised_funds));
    }
    if (m_incumbent_challenge_isSet) {
        obj.insert(QString("incumbent_challenge"), ::OpenAPI::toJsonValue(m_incumbent_challenge));
    }
    if (m_incumbent_challenge_full_isSet) {
        obj.insert(QString("incumbent_challenge_full"), ::OpenAPI::toJsonValue(m_incumbent_challenge_full));
    }
    if (m_individual_itemized_contributions_isSet) {
        obj.insert(QString("individual_itemized_contributions"), ::OpenAPI::toJsonValue(m_individual_itemized_contributions));
    }
    if (m_is_election_isSet) {
        obj.insert(QString("is_election"), ::OpenAPI::toJsonValue(m_is_election));
    }
    if (m_last_f2_date_isSet) {
        obj.insert(QString("last_f2_date"), ::OpenAPI::toJsonValue(m_last_f2_date));
    }
    if (m_last_file_date_isSet) {
        obj.insert(QString("last_file_date"), ::OpenAPI::toJsonValue(m_last_file_date));
    }
    if (m_load_date_isSet) {
        obj.insert(QString("load_date"), ::OpenAPI::toJsonValue(m_load_date));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_office_isSet) {
        obj.insert(QString("office"), ::OpenAPI::toJsonValue(m_office));
    }
    if (m_office_full_isSet) {
        obj.insert(QString("office_full"), ::OpenAPI::toJsonValue(m_office_full));
    }
    if (m_other_political_committee_contributions_isSet) {
        obj.insert(QString("other_political_committee_contributions"), ::OpenAPI::toJsonValue(m_other_political_committee_contributions));
    }
    if (m_party_isSet) {
        obj.insert(QString("party"), ::OpenAPI::toJsonValue(m_party));
    }
    if (m_party_full_isSet) {
        obj.insert(QString("party_full"), ::OpenAPI::toJsonValue(m_party_full));
    }
    if (m_receipts_isSet) {
        obj.insert(QString("receipts"), ::OpenAPI::toJsonValue(m_receipts));
    }
    if (m_rounded_election_years.size() > 0) {
        obj.insert(QString("rounded_election_years"), ::OpenAPI::toJsonValue(m_rounded_election_years));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_full_isSet) {
        obj.insert(QString("state_full"), ::OpenAPI::toJsonValue(m_state_full));
    }
    if (m_transfers_from_other_authorized_committee_isSet) {
        obj.insert(QString("transfers_from_other_authorized_committee"), ::OpenAPI::toJsonValue(m_transfers_from_other_authorized_committee));
    }
    if (m_two_year_period_isSet) {
        obj.insert(QString("two_year_period"), ::OpenAPI::toJsonValue(m_two_year_period));
    }
    return obj;
}

qint32 OAICandidateHistoryTotal::getActiveThrough() const {
    return m_active_through;
}
void OAICandidateHistoryTotal::setActiveThrough(const qint32 &active_through) {
    m_active_through = active_through;
    m_active_through_isSet = true;
}

bool OAICandidateHistoryTotal::is_active_through_Set() const{
    return m_active_through_isSet;
}

bool OAICandidateHistoryTotal::is_active_through_Valid() const{
    return m_active_through_isValid;
}

QString OAICandidateHistoryTotal::getAddressCity() const {
    return m_address_city;
}
void OAICandidateHistoryTotal::setAddressCity(const QString &address_city) {
    m_address_city = address_city;
    m_address_city_isSet = true;
}

bool OAICandidateHistoryTotal::is_address_city_Set() const{
    return m_address_city_isSet;
}

bool OAICandidateHistoryTotal::is_address_city_Valid() const{
    return m_address_city_isValid;
}

QString OAICandidateHistoryTotal::getAddressState() const {
    return m_address_state;
}
void OAICandidateHistoryTotal::setAddressState(const QString &address_state) {
    m_address_state = address_state;
    m_address_state_isSet = true;
}

bool OAICandidateHistoryTotal::is_address_state_Set() const{
    return m_address_state_isSet;
}

bool OAICandidateHistoryTotal::is_address_state_Valid() const{
    return m_address_state_isValid;
}

QString OAICandidateHistoryTotal::getAddressStreet1() const {
    return m_address_street_1;
}
void OAICandidateHistoryTotal::setAddressStreet1(const QString &address_street_1) {
    m_address_street_1 = address_street_1;
    m_address_street_1_isSet = true;
}

bool OAICandidateHistoryTotal::is_address_street_1_Set() const{
    return m_address_street_1_isSet;
}

bool OAICandidateHistoryTotal::is_address_street_1_Valid() const{
    return m_address_street_1_isValid;
}

QString OAICandidateHistoryTotal::getAddressStreet2() const {
    return m_address_street_2;
}
void OAICandidateHistoryTotal::setAddressStreet2(const QString &address_street_2) {
    m_address_street_2 = address_street_2;
    m_address_street_2_isSet = true;
}

bool OAICandidateHistoryTotal::is_address_street_2_Set() const{
    return m_address_street_2_isSet;
}

bool OAICandidateHistoryTotal::is_address_street_2_Valid() const{
    return m_address_street_2_isValid;
}

QString OAICandidateHistoryTotal::getAddressZip() const {
    return m_address_zip;
}
void OAICandidateHistoryTotal::setAddressZip(const QString &address_zip) {
    m_address_zip = address_zip;
    m_address_zip_isSet = true;
}

bool OAICandidateHistoryTotal::is_address_zip_Set() const{
    return m_address_zip_isSet;
}

bool OAICandidateHistoryTotal::is_address_zip_Valid() const{
    return m_address_zip_isValid;
}

qint32 OAICandidateHistoryTotal::getCandidateElectionYear() const {
    return m_candidate_election_year;
}
void OAICandidateHistoryTotal::setCandidateElectionYear(const qint32 &candidate_election_year) {
    m_candidate_election_year = candidate_election_year;
    m_candidate_election_year_isSet = true;
}

bool OAICandidateHistoryTotal::is_candidate_election_year_Set() const{
    return m_candidate_election_year_isSet;
}

bool OAICandidateHistoryTotal::is_candidate_election_year_Valid() const{
    return m_candidate_election_year_isValid;
}

QString OAICandidateHistoryTotal::getCandidateId() const {
    return m_candidate_id;
}
void OAICandidateHistoryTotal::setCandidateId(const QString &candidate_id) {
    m_candidate_id = candidate_id;
    m_candidate_id_isSet = true;
}

bool OAICandidateHistoryTotal::is_candidate_id_Set() const{
    return m_candidate_id_isSet;
}

bool OAICandidateHistoryTotal::is_candidate_id_Valid() const{
    return m_candidate_id_isValid;
}

bool OAICandidateHistoryTotal::isCandidateInactive() const {
    return m_candidate_inactive;
}
void OAICandidateHistoryTotal::setCandidateInactive(const bool &candidate_inactive) {
    m_candidate_inactive = candidate_inactive;
    m_candidate_inactive_isSet = true;
}

bool OAICandidateHistoryTotal::is_candidate_inactive_Set() const{
    return m_candidate_inactive_isSet;
}

bool OAICandidateHistoryTotal::is_candidate_inactive_Valid() const{
    return m_candidate_inactive_isValid;
}

QString OAICandidateHistoryTotal::getCandidateStatus() const {
    return m_candidate_status;
}
void OAICandidateHistoryTotal::setCandidateStatus(const QString &candidate_status) {
    m_candidate_status = candidate_status;
    m_candidate_status_isSet = true;
}

bool OAICandidateHistoryTotal::is_candidate_status_Set() const{
    return m_candidate_status_isSet;
}

bool OAICandidateHistoryTotal::is_candidate_status_Valid() const{
    return m_candidate_status_isValid;
}

double OAICandidateHistoryTotal::getCashOnHandEndPeriod() const {
    return m_cash_on_hand_end_period;
}
void OAICandidateHistoryTotal::setCashOnHandEndPeriod(const double &cash_on_hand_end_period) {
    m_cash_on_hand_end_period = cash_on_hand_end_period;
    m_cash_on_hand_end_period_isSet = true;
}

bool OAICandidateHistoryTotal::is_cash_on_hand_end_period_Set() const{
    return m_cash_on_hand_end_period_isSet;
}

bool OAICandidateHistoryTotal::is_cash_on_hand_end_period_Valid() const{
    return m_cash_on_hand_end_period_isValid;
}

QDate OAICandidateHistoryTotal::getCoverageEndDate() const {
    return m_coverage_end_date;
}
void OAICandidateHistoryTotal::setCoverageEndDate(const QDate &coverage_end_date) {
    m_coverage_end_date = coverage_end_date;
    m_coverage_end_date_isSet = true;
}

bool OAICandidateHistoryTotal::is_coverage_end_date_Set() const{
    return m_coverage_end_date_isSet;
}

bool OAICandidateHistoryTotal::is_coverage_end_date_Valid() const{
    return m_coverage_end_date_isValid;
}

QDate OAICandidateHistoryTotal::getCoverageStartDate() const {
    return m_coverage_start_date;
}
void OAICandidateHistoryTotal::setCoverageStartDate(const QDate &coverage_start_date) {
    m_coverage_start_date = coverage_start_date;
    m_coverage_start_date_isSet = true;
}

bool OAICandidateHistoryTotal::is_coverage_start_date_Set() const{
    return m_coverage_start_date_isSet;
}

bool OAICandidateHistoryTotal::is_coverage_start_date_Valid() const{
    return m_coverage_start_date_isValid;
}

qint32 OAICandidateHistoryTotal::getCycle() const {
    return m_cycle;
}
void OAICandidateHistoryTotal::setCycle(const qint32 &cycle) {
    m_cycle = cycle;
    m_cycle_isSet = true;
}

bool OAICandidateHistoryTotal::is_cycle_Set() const{
    return m_cycle_isSet;
}

bool OAICandidateHistoryTotal::is_cycle_Valid() const{
    return m_cycle_isValid;
}

QList<qint32> OAICandidateHistoryTotal::getCycles() const {
    return m_cycles;
}
void OAICandidateHistoryTotal::setCycles(const QList<qint32> &cycles) {
    m_cycles = cycles;
    m_cycles_isSet = true;
}

bool OAICandidateHistoryTotal::is_cycles_Set() const{
    return m_cycles_isSet;
}

bool OAICandidateHistoryTotal::is_cycles_Valid() const{
    return m_cycles_isValid;
}

double OAICandidateHistoryTotal::getDebtsOwedByCommittee() const {
    return m_debts_owed_by_committee;
}
void OAICandidateHistoryTotal::setDebtsOwedByCommittee(const double &debts_owed_by_committee) {
    m_debts_owed_by_committee = debts_owed_by_committee;
    m_debts_owed_by_committee_isSet = true;
}

bool OAICandidateHistoryTotal::is_debts_owed_by_committee_Set() const{
    return m_debts_owed_by_committee_isSet;
}

bool OAICandidateHistoryTotal::is_debts_owed_by_committee_Valid() const{
    return m_debts_owed_by_committee_isValid;
}

double OAICandidateHistoryTotal::getDisbursements() const {
    return m_disbursements;
}
void OAICandidateHistoryTotal::setDisbursements(const double &disbursements) {
    m_disbursements = disbursements;
    m_disbursements_isSet = true;
}

bool OAICandidateHistoryTotal::is_disbursements_Set() const{
    return m_disbursements_isSet;
}

bool OAICandidateHistoryTotal::is_disbursements_Valid() const{
    return m_disbursements_isValid;
}

QString OAICandidateHistoryTotal::getDistrict() const {
    return m_district;
}
void OAICandidateHistoryTotal::setDistrict(const QString &district) {
    m_district = district;
    m_district_isSet = true;
}

bool OAICandidateHistoryTotal::is_district_Set() const{
    return m_district_isSet;
}

bool OAICandidateHistoryTotal::is_district_Valid() const{
    return m_district_isValid;
}

qint32 OAICandidateHistoryTotal::getDistrictNumber() const {
    return m_district_number;
}
void OAICandidateHistoryTotal::setDistrictNumber(const qint32 &district_number) {
    m_district_number = district_number;
    m_district_number_isSet = true;
}

bool OAICandidateHistoryTotal::is_district_number_Set() const{
    return m_district_number_isSet;
}

bool OAICandidateHistoryTotal::is_district_number_Valid() const{
    return m_district_number_isValid;
}

QList<QString> OAICandidateHistoryTotal::getElectionDistricts() const {
    return m_election_districts;
}
void OAICandidateHistoryTotal::setElectionDistricts(const QList<QString> &election_districts) {
    m_election_districts = election_districts;
    m_election_districts_isSet = true;
}

bool OAICandidateHistoryTotal::is_election_districts_Set() const{
    return m_election_districts_isSet;
}

bool OAICandidateHistoryTotal::is_election_districts_Valid() const{
    return m_election_districts_isValid;
}

qint32 OAICandidateHistoryTotal::getElectionYear() const {
    return m_election_year;
}
void OAICandidateHistoryTotal::setElectionYear(const qint32 &election_year) {
    m_election_year = election_year;
    m_election_year_isSet = true;
}

bool OAICandidateHistoryTotal::is_election_year_Set() const{
    return m_election_year_isSet;
}

bool OAICandidateHistoryTotal::is_election_year_Valid() const{
    return m_election_year_isValid;
}

QList<qint32> OAICandidateHistoryTotal::getElectionYears() const {
    return m_election_years;
}
void OAICandidateHistoryTotal::setElectionYears(const QList<qint32> &election_years) {
    m_election_years = election_years;
    m_election_years_isSet = true;
}

bool OAICandidateHistoryTotal::is_election_years_Set() const{
    return m_election_years_isSet;
}

bool OAICandidateHistoryTotal::is_election_years_Valid() const{
    return m_election_years_isValid;
}

QList<qint32> OAICandidateHistoryTotal::getFecCyclesInElection() const {
    return m_fec_cycles_in_election;
}
void OAICandidateHistoryTotal::setFecCyclesInElection(const QList<qint32> &fec_cycles_in_election) {
    m_fec_cycles_in_election = fec_cycles_in_election;
    m_fec_cycles_in_election_isSet = true;
}

bool OAICandidateHistoryTotal::is_fec_cycles_in_election_Set() const{
    return m_fec_cycles_in_election_isSet;
}

bool OAICandidateHistoryTotal::is_fec_cycles_in_election_Valid() const{
    return m_fec_cycles_in_election_isValid;
}

bool OAICandidateHistoryTotal::isFederalFundsFlag() const {
    return m_federal_funds_flag;
}
void OAICandidateHistoryTotal::setFederalFundsFlag(const bool &federal_funds_flag) {
    m_federal_funds_flag = federal_funds_flag;
    m_federal_funds_flag_isSet = true;
}

bool OAICandidateHistoryTotal::is_federal_funds_flag_Set() const{
    return m_federal_funds_flag_isSet;
}

bool OAICandidateHistoryTotal::is_federal_funds_flag_Valid() const{
    return m_federal_funds_flag_isValid;
}

QDate OAICandidateHistoryTotal::getFirstFileDate() const {
    return m_first_file_date;
}
void OAICandidateHistoryTotal::setFirstFileDate(const QDate &first_file_date) {
    m_first_file_date = first_file_date;
    m_first_file_date_isSet = true;
}

bool OAICandidateHistoryTotal::is_first_file_date_Set() const{
    return m_first_file_date_isSet;
}

bool OAICandidateHistoryTotal::is_first_file_date_Valid() const{
    return m_first_file_date_isValid;
}

QString OAICandidateHistoryTotal::getFlags() const {
    return m_flags;
}
void OAICandidateHistoryTotal::setFlags(const QString &flags) {
    m_flags = flags;
    m_flags_isSet = true;
}

bool OAICandidateHistoryTotal::is_flags_Set() const{
    return m_flags_isSet;
}

bool OAICandidateHistoryTotal::is_flags_Valid() const{
    return m_flags_isValid;
}

bool OAICandidateHistoryTotal::isHasRaisedFunds() const {
    return m_has_raised_funds;
}
void OAICandidateHistoryTotal::setHasRaisedFunds(const bool &has_raised_funds) {
    m_has_raised_funds = has_raised_funds;
    m_has_raised_funds_isSet = true;
}

bool OAICandidateHistoryTotal::is_has_raised_funds_Set() const{
    return m_has_raised_funds_isSet;
}

bool OAICandidateHistoryTotal::is_has_raised_funds_Valid() const{
    return m_has_raised_funds_isValid;
}

QString OAICandidateHistoryTotal::getIncumbentChallenge() const {
    return m_incumbent_challenge;
}
void OAICandidateHistoryTotal::setIncumbentChallenge(const QString &incumbent_challenge) {
    m_incumbent_challenge = incumbent_challenge;
    m_incumbent_challenge_isSet = true;
}

bool OAICandidateHistoryTotal::is_incumbent_challenge_Set() const{
    return m_incumbent_challenge_isSet;
}

bool OAICandidateHistoryTotal::is_incumbent_challenge_Valid() const{
    return m_incumbent_challenge_isValid;
}

QString OAICandidateHistoryTotal::getIncumbentChallengeFull() const {
    return m_incumbent_challenge_full;
}
void OAICandidateHistoryTotal::setIncumbentChallengeFull(const QString &incumbent_challenge_full) {
    m_incumbent_challenge_full = incumbent_challenge_full;
    m_incumbent_challenge_full_isSet = true;
}

bool OAICandidateHistoryTotal::is_incumbent_challenge_full_Set() const{
    return m_incumbent_challenge_full_isSet;
}

bool OAICandidateHistoryTotal::is_incumbent_challenge_full_Valid() const{
    return m_incumbent_challenge_full_isValid;
}

double OAICandidateHistoryTotal::getIndividualItemizedContributions() const {
    return m_individual_itemized_contributions;
}
void OAICandidateHistoryTotal::setIndividualItemizedContributions(const double &individual_itemized_contributions) {
    m_individual_itemized_contributions = individual_itemized_contributions;
    m_individual_itemized_contributions_isSet = true;
}

bool OAICandidateHistoryTotal::is_individual_itemized_contributions_Set() const{
    return m_individual_itemized_contributions_isSet;
}

bool OAICandidateHistoryTotal::is_individual_itemized_contributions_Valid() const{
    return m_individual_itemized_contributions_isValid;
}

bool OAICandidateHistoryTotal::isIsElection() const {
    return m_is_election;
}
void OAICandidateHistoryTotal::setIsElection(const bool &is_election) {
    m_is_election = is_election;
    m_is_election_isSet = true;
}

bool OAICandidateHistoryTotal::is_is_election_Set() const{
    return m_is_election_isSet;
}

bool OAICandidateHistoryTotal::is_is_election_Valid() const{
    return m_is_election_isValid;
}

QDate OAICandidateHistoryTotal::getLastF2Date() const {
    return m_last_f2_date;
}
void OAICandidateHistoryTotal::setLastF2Date(const QDate &last_f2_date) {
    m_last_f2_date = last_f2_date;
    m_last_f2_date_isSet = true;
}

bool OAICandidateHistoryTotal::is_last_f2_date_Set() const{
    return m_last_f2_date_isSet;
}

bool OAICandidateHistoryTotal::is_last_f2_date_Valid() const{
    return m_last_f2_date_isValid;
}

QDate OAICandidateHistoryTotal::getLastFileDate() const {
    return m_last_file_date;
}
void OAICandidateHistoryTotal::setLastFileDate(const QDate &last_file_date) {
    m_last_file_date = last_file_date;
    m_last_file_date_isSet = true;
}

bool OAICandidateHistoryTotal::is_last_file_date_Set() const{
    return m_last_file_date_isSet;
}

bool OAICandidateHistoryTotal::is_last_file_date_Valid() const{
    return m_last_file_date_isValid;
}

QDateTime OAICandidateHistoryTotal::getLoadDate() const {
    return m_load_date;
}
void OAICandidateHistoryTotal::setLoadDate(const QDateTime &load_date) {
    m_load_date = load_date;
    m_load_date_isSet = true;
}

bool OAICandidateHistoryTotal::is_load_date_Set() const{
    return m_load_date_isSet;
}

bool OAICandidateHistoryTotal::is_load_date_Valid() const{
    return m_load_date_isValid;
}

QString OAICandidateHistoryTotal::getName() const {
    return m_name;
}
void OAICandidateHistoryTotal::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICandidateHistoryTotal::is_name_Set() const{
    return m_name_isSet;
}

bool OAICandidateHistoryTotal::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICandidateHistoryTotal::getOffice() const {
    return m_office;
}
void OAICandidateHistoryTotal::setOffice(const QString &office) {
    m_office = office;
    m_office_isSet = true;
}

bool OAICandidateHistoryTotal::is_office_Set() const{
    return m_office_isSet;
}

bool OAICandidateHistoryTotal::is_office_Valid() const{
    return m_office_isValid;
}

QString OAICandidateHistoryTotal::getOfficeFull() const {
    return m_office_full;
}
void OAICandidateHistoryTotal::setOfficeFull(const QString &office_full) {
    m_office_full = office_full;
    m_office_full_isSet = true;
}

bool OAICandidateHistoryTotal::is_office_full_Set() const{
    return m_office_full_isSet;
}

bool OAICandidateHistoryTotal::is_office_full_Valid() const{
    return m_office_full_isValid;
}

double OAICandidateHistoryTotal::getOtherPoliticalCommitteeContributions() const {
    return m_other_political_committee_contributions;
}
void OAICandidateHistoryTotal::setOtherPoliticalCommitteeContributions(const double &other_political_committee_contributions) {
    m_other_political_committee_contributions = other_political_committee_contributions;
    m_other_political_committee_contributions_isSet = true;
}

bool OAICandidateHistoryTotal::is_other_political_committee_contributions_Set() const{
    return m_other_political_committee_contributions_isSet;
}

bool OAICandidateHistoryTotal::is_other_political_committee_contributions_Valid() const{
    return m_other_political_committee_contributions_isValid;
}

QString OAICandidateHistoryTotal::getParty() const {
    return m_party;
}
void OAICandidateHistoryTotal::setParty(const QString &party) {
    m_party = party;
    m_party_isSet = true;
}

bool OAICandidateHistoryTotal::is_party_Set() const{
    return m_party_isSet;
}

bool OAICandidateHistoryTotal::is_party_Valid() const{
    return m_party_isValid;
}

QString OAICandidateHistoryTotal::getPartyFull() const {
    return m_party_full;
}
void OAICandidateHistoryTotal::setPartyFull(const QString &party_full) {
    m_party_full = party_full;
    m_party_full_isSet = true;
}

bool OAICandidateHistoryTotal::is_party_full_Set() const{
    return m_party_full_isSet;
}

bool OAICandidateHistoryTotal::is_party_full_Valid() const{
    return m_party_full_isValid;
}

double OAICandidateHistoryTotal::getReceipts() const {
    return m_receipts;
}
void OAICandidateHistoryTotal::setReceipts(const double &receipts) {
    m_receipts = receipts;
    m_receipts_isSet = true;
}

bool OAICandidateHistoryTotal::is_receipts_Set() const{
    return m_receipts_isSet;
}

bool OAICandidateHistoryTotal::is_receipts_Valid() const{
    return m_receipts_isValid;
}

QList<qint32> OAICandidateHistoryTotal::getRoundedElectionYears() const {
    return m_rounded_election_years;
}
void OAICandidateHistoryTotal::setRoundedElectionYears(const QList<qint32> &rounded_election_years) {
    m_rounded_election_years = rounded_election_years;
    m_rounded_election_years_isSet = true;
}

bool OAICandidateHistoryTotal::is_rounded_election_years_Set() const{
    return m_rounded_election_years_isSet;
}

bool OAICandidateHistoryTotal::is_rounded_election_years_Valid() const{
    return m_rounded_election_years_isValid;
}

QString OAICandidateHistoryTotal::getState() const {
    return m_state;
}
void OAICandidateHistoryTotal::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICandidateHistoryTotal::is_state_Set() const{
    return m_state_isSet;
}

bool OAICandidateHistoryTotal::is_state_Valid() const{
    return m_state_isValid;
}

QString OAICandidateHistoryTotal::getStateFull() const {
    return m_state_full;
}
void OAICandidateHistoryTotal::setStateFull(const QString &state_full) {
    m_state_full = state_full;
    m_state_full_isSet = true;
}

bool OAICandidateHistoryTotal::is_state_full_Set() const{
    return m_state_full_isSet;
}

bool OAICandidateHistoryTotal::is_state_full_Valid() const{
    return m_state_full_isValid;
}

double OAICandidateHistoryTotal::getTransfersFromOtherAuthorizedCommittee() const {
    return m_transfers_from_other_authorized_committee;
}
void OAICandidateHistoryTotal::setTransfersFromOtherAuthorizedCommittee(const double &transfers_from_other_authorized_committee) {
    m_transfers_from_other_authorized_committee = transfers_from_other_authorized_committee;
    m_transfers_from_other_authorized_committee_isSet = true;
}

bool OAICandidateHistoryTotal::is_transfers_from_other_authorized_committee_Set() const{
    return m_transfers_from_other_authorized_committee_isSet;
}

bool OAICandidateHistoryTotal::is_transfers_from_other_authorized_committee_Valid() const{
    return m_transfers_from_other_authorized_committee_isValid;
}

qint32 OAICandidateHistoryTotal::getTwoYearPeriod() const {
    return m_two_year_period;
}
void OAICandidateHistoryTotal::setTwoYearPeriod(const qint32 &two_year_period) {
    m_two_year_period = two_year_period;
    m_two_year_period_isSet = true;
}

bool OAICandidateHistoryTotal::is_two_year_period_Set() const{
    return m_two_year_period_isSet;
}

bool OAICandidateHistoryTotal::is_two_year_period_Valid() const{
    return m_two_year_period_isValid;
}

bool OAICandidateHistoryTotal::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_through_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_street_1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_street_2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_election_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_inactive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_on_hand_end_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coverage_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coverage_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cycle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cycles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_debts_owed_by_committee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disbursements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_district_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_district_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_districts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_years.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fec_cycles_in_election.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_federal_funds_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_file_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_raised_funds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_incumbent_challenge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_incumbent_challenge_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_individual_itemized_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_election_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_f2_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_file_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_office_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_office_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_political_committee_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rounded_election_years.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfers_from_other_authorized_committee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_two_year_period_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICandidateHistoryTotal::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_candidate_id_isValid && m_cycle_isValid && m_is_election_isValid && m_two_year_period_isValid && true;
}

} // namespace OpenAPI
