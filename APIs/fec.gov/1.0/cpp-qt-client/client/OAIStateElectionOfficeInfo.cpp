/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStateElectionOfficeInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStateElectionOfficeInfo::OAIStateElectionOfficeInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStateElectionOfficeInfo::OAIStateElectionOfficeInfo() {
    this->initializeModel();
}

OAIStateElectionOfficeInfo::~OAIStateElectionOfficeInfo() {}

void OAIStateElectionOfficeInfo::initializeModel() {

    m_address_line1_isSet = false;
    m_address_line1_isValid = false;

    m_address_line2_isSet = false;
    m_address_line2_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_fax_number_isSet = false;
    m_fax_number_isValid = false;

    m_mailing_address1_isSet = false;
    m_mailing_address1_isValid = false;

    m_mailing_address2_isSet = false;
    m_mailing_address2_isValid = false;

    m_mailing_city_isSet = false;
    m_mailing_city_isValid = false;

    m_mailing_state_isSet = false;
    m_mailing_state_isValid = false;

    m_mailing_zipcode_isSet = false;
    m_mailing_zipcode_isValid = false;

    m_office_name_isSet = false;
    m_office_name_isValid = false;

    m_office_type_isSet = false;
    m_office_type_isValid = false;

    m_primary_phone_number_isSet = false;
    m_primary_phone_number_isValid = false;

    m_secondary_phone_number_isSet = false;
    m_secondary_phone_number_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_full_name_isSet = false;
    m_state_full_name_isValid = false;

    m_website_url1_isSet = false;
    m_website_url1_isValid = false;

    m_website_url2_isSet = false;
    m_website_url2_isValid = false;

    m_zip_code_isSet = false;
    m_zip_code_isValid = false;
}

void OAIStateElectionOfficeInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStateElectionOfficeInfo::fromJsonObject(QJsonObject json) {

    m_address_line1_isValid = ::OpenAPI::fromJsonValue(m_address_line1, json[QString("address_line1")]);
    m_address_line1_isSet = !json[QString("address_line1")].isNull() && m_address_line1_isValid;

    m_address_line2_isValid = ::OpenAPI::fromJsonValue(m_address_line2, json[QString("address_line2")]);
    m_address_line2_isSet = !json[QString("address_line2")].isNull() && m_address_line2_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_fax_number_isValid = ::OpenAPI::fromJsonValue(m_fax_number, json[QString("fax_number")]);
    m_fax_number_isSet = !json[QString("fax_number")].isNull() && m_fax_number_isValid;

    m_mailing_address1_isValid = ::OpenAPI::fromJsonValue(m_mailing_address1, json[QString("mailing_address1")]);
    m_mailing_address1_isSet = !json[QString("mailing_address1")].isNull() && m_mailing_address1_isValid;

    m_mailing_address2_isValid = ::OpenAPI::fromJsonValue(m_mailing_address2, json[QString("mailing_address2")]);
    m_mailing_address2_isSet = !json[QString("mailing_address2")].isNull() && m_mailing_address2_isValid;

    m_mailing_city_isValid = ::OpenAPI::fromJsonValue(m_mailing_city, json[QString("mailing_city")]);
    m_mailing_city_isSet = !json[QString("mailing_city")].isNull() && m_mailing_city_isValid;

    m_mailing_state_isValid = ::OpenAPI::fromJsonValue(m_mailing_state, json[QString("mailing_state")]);
    m_mailing_state_isSet = !json[QString("mailing_state")].isNull() && m_mailing_state_isValid;

    m_mailing_zipcode_isValid = ::OpenAPI::fromJsonValue(m_mailing_zipcode, json[QString("mailing_zipcode")]);
    m_mailing_zipcode_isSet = !json[QString("mailing_zipcode")].isNull() && m_mailing_zipcode_isValid;

    m_office_name_isValid = ::OpenAPI::fromJsonValue(m_office_name, json[QString("office_name")]);
    m_office_name_isSet = !json[QString("office_name")].isNull() && m_office_name_isValid;

    m_office_type_isValid = ::OpenAPI::fromJsonValue(m_office_type, json[QString("office_type")]);
    m_office_type_isSet = !json[QString("office_type")].isNull() && m_office_type_isValid;

    m_primary_phone_number_isValid = ::OpenAPI::fromJsonValue(m_primary_phone_number, json[QString("primary_phone_number")]);
    m_primary_phone_number_isSet = !json[QString("primary_phone_number")].isNull() && m_primary_phone_number_isValid;

    m_secondary_phone_number_isValid = ::OpenAPI::fromJsonValue(m_secondary_phone_number, json[QString("secondary_phone_number")]);
    m_secondary_phone_number_isSet = !json[QString("secondary_phone_number")].isNull() && m_secondary_phone_number_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_full_name_isValid = ::OpenAPI::fromJsonValue(m_state_full_name, json[QString("state_full_name")]);
    m_state_full_name_isSet = !json[QString("state_full_name")].isNull() && m_state_full_name_isValid;

    m_website_url1_isValid = ::OpenAPI::fromJsonValue(m_website_url1, json[QString("website_url1")]);
    m_website_url1_isSet = !json[QString("website_url1")].isNull() && m_website_url1_isValid;

    m_website_url2_isValid = ::OpenAPI::fromJsonValue(m_website_url2, json[QString("website_url2")]);
    m_website_url2_isSet = !json[QString("website_url2")].isNull() && m_website_url2_isValid;

    m_zip_code_isValid = ::OpenAPI::fromJsonValue(m_zip_code, json[QString("zip_code")]);
    m_zip_code_isSet = !json[QString("zip_code")].isNull() && m_zip_code_isValid;
}

QString OAIStateElectionOfficeInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStateElectionOfficeInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_address_line1_isSet) {
        obj.insert(QString("address_line1"), ::OpenAPI::toJsonValue(m_address_line1));
    }
    if (m_address_line2_isSet) {
        obj.insert(QString("address_line2"), ::OpenAPI::toJsonValue(m_address_line2));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_fax_number_isSet) {
        obj.insert(QString("fax_number"), ::OpenAPI::toJsonValue(m_fax_number));
    }
    if (m_mailing_address1_isSet) {
        obj.insert(QString("mailing_address1"), ::OpenAPI::toJsonValue(m_mailing_address1));
    }
    if (m_mailing_address2_isSet) {
        obj.insert(QString("mailing_address2"), ::OpenAPI::toJsonValue(m_mailing_address2));
    }
    if (m_mailing_city_isSet) {
        obj.insert(QString("mailing_city"), ::OpenAPI::toJsonValue(m_mailing_city));
    }
    if (m_mailing_state_isSet) {
        obj.insert(QString("mailing_state"), ::OpenAPI::toJsonValue(m_mailing_state));
    }
    if (m_mailing_zipcode_isSet) {
        obj.insert(QString("mailing_zipcode"), ::OpenAPI::toJsonValue(m_mailing_zipcode));
    }
    if (m_office_name_isSet) {
        obj.insert(QString("office_name"), ::OpenAPI::toJsonValue(m_office_name));
    }
    if (m_office_type_isSet) {
        obj.insert(QString("office_type"), ::OpenAPI::toJsonValue(m_office_type));
    }
    if (m_primary_phone_number_isSet) {
        obj.insert(QString("primary_phone_number"), ::OpenAPI::toJsonValue(m_primary_phone_number));
    }
    if (m_secondary_phone_number_isSet) {
        obj.insert(QString("secondary_phone_number"), ::OpenAPI::toJsonValue(m_secondary_phone_number));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_full_name_isSet) {
        obj.insert(QString("state_full_name"), ::OpenAPI::toJsonValue(m_state_full_name));
    }
    if (m_website_url1_isSet) {
        obj.insert(QString("website_url1"), ::OpenAPI::toJsonValue(m_website_url1));
    }
    if (m_website_url2_isSet) {
        obj.insert(QString("website_url2"), ::OpenAPI::toJsonValue(m_website_url2));
    }
    if (m_zip_code_isSet) {
        obj.insert(QString("zip_code"), ::OpenAPI::toJsonValue(m_zip_code));
    }
    return obj;
}

QString OAIStateElectionOfficeInfo::getAddressLine1() const {
    return m_address_line1;
}
void OAIStateElectionOfficeInfo::setAddressLine1(const QString &address_line1) {
    m_address_line1 = address_line1;
    m_address_line1_isSet = true;
}

bool OAIStateElectionOfficeInfo::is_address_line1_Set() const{
    return m_address_line1_isSet;
}

bool OAIStateElectionOfficeInfo::is_address_line1_Valid() const{
    return m_address_line1_isValid;
}

QString OAIStateElectionOfficeInfo::getAddressLine2() const {
    return m_address_line2;
}
void OAIStateElectionOfficeInfo::setAddressLine2(const QString &address_line2) {
    m_address_line2 = address_line2;
    m_address_line2_isSet = true;
}

bool OAIStateElectionOfficeInfo::is_address_line2_Set() const{
    return m_address_line2_isSet;
}

bool OAIStateElectionOfficeInfo::is_address_line2_Valid() const{
    return m_address_line2_isValid;
}

QString OAIStateElectionOfficeInfo::getCity() const {
    return m_city;
}
void OAIStateElectionOfficeInfo::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIStateElectionOfficeInfo::is_city_Set() const{
    return m_city_isSet;
}

bool OAIStateElectionOfficeInfo::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIStateElectionOfficeInfo::getEmail() const {
    return m_email;
}
void OAIStateElectionOfficeInfo::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIStateElectionOfficeInfo::is_email_Set() const{
    return m_email_isSet;
}

bool OAIStateElectionOfficeInfo::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIStateElectionOfficeInfo::getFaxNumber() const {
    return m_fax_number;
}
void OAIStateElectionOfficeInfo::setFaxNumber(const QString &fax_number) {
    m_fax_number = fax_number;
    m_fax_number_isSet = true;
}

bool OAIStateElectionOfficeInfo::is_fax_number_Set() const{
    return m_fax_number_isSet;
}

bool OAIStateElectionOfficeInfo::is_fax_number_Valid() const{
    return m_fax_number_isValid;
}

QString OAIStateElectionOfficeInfo::getMailingAddress1() const {
    return m_mailing_address1;
}
void OAIStateElectionOfficeInfo::setMailingAddress1(const QString &mailing_address1) {
    m_mailing_address1 = mailing_address1;
    m_mailing_address1_isSet = true;
}

bool OAIStateElectionOfficeInfo::is_mailing_address1_Set() const{
    return m_mailing_address1_isSet;
}

bool OAIStateElectionOfficeInfo::is_mailing_address1_Valid() const{
    return m_mailing_address1_isValid;
}

QString OAIStateElectionOfficeInfo::getMailingAddress2() const {
    return m_mailing_address2;
}
void OAIStateElectionOfficeInfo::setMailingAddress2(const QString &mailing_address2) {
    m_mailing_address2 = mailing_address2;
    m_mailing_address2_isSet = true;
}

bool OAIStateElectionOfficeInfo::is_mailing_address2_Set() const{
    return m_mailing_address2_isSet;
}

bool OAIStateElectionOfficeInfo::is_mailing_address2_Valid() const{
    return m_mailing_address2_isValid;
}

QString OAIStateElectionOfficeInfo::getMailingCity() const {
    return m_mailing_city;
}
void OAIStateElectionOfficeInfo::setMailingCity(const QString &mailing_city) {
    m_mailing_city = mailing_city;
    m_mailing_city_isSet = true;
}

bool OAIStateElectionOfficeInfo::is_mailing_city_Set() const{
    return m_mailing_city_isSet;
}

bool OAIStateElectionOfficeInfo::is_mailing_city_Valid() const{
    return m_mailing_city_isValid;
}

QString OAIStateElectionOfficeInfo::getMailingState() const {
    return m_mailing_state;
}
void OAIStateElectionOfficeInfo::setMailingState(const QString &mailing_state) {
    m_mailing_state = mailing_state;
    m_mailing_state_isSet = true;
}

bool OAIStateElectionOfficeInfo::is_mailing_state_Set() const{
    return m_mailing_state_isSet;
}

bool OAIStateElectionOfficeInfo::is_mailing_state_Valid() const{
    return m_mailing_state_isValid;
}

QString OAIStateElectionOfficeInfo::getMailingZipcode() const {
    return m_mailing_zipcode;
}
void OAIStateElectionOfficeInfo::setMailingZipcode(const QString &mailing_zipcode) {
    m_mailing_zipcode = mailing_zipcode;
    m_mailing_zipcode_isSet = true;
}

bool OAIStateElectionOfficeInfo::is_mailing_zipcode_Set() const{
    return m_mailing_zipcode_isSet;
}

bool OAIStateElectionOfficeInfo::is_mailing_zipcode_Valid() const{
    return m_mailing_zipcode_isValid;
}

QString OAIStateElectionOfficeInfo::getOfficeName() const {
    return m_office_name;
}
void OAIStateElectionOfficeInfo::setOfficeName(const QString &office_name) {
    m_office_name = office_name;
    m_office_name_isSet = true;
}

bool OAIStateElectionOfficeInfo::is_office_name_Set() const{
    return m_office_name_isSet;
}

bool OAIStateElectionOfficeInfo::is_office_name_Valid() const{
    return m_office_name_isValid;
}

QString OAIStateElectionOfficeInfo::getOfficeType() const {
    return m_office_type;
}
void OAIStateElectionOfficeInfo::setOfficeType(const QString &office_type) {
    m_office_type = office_type;
    m_office_type_isSet = true;
}

bool OAIStateElectionOfficeInfo::is_office_type_Set() const{
    return m_office_type_isSet;
}

bool OAIStateElectionOfficeInfo::is_office_type_Valid() const{
    return m_office_type_isValid;
}

QString OAIStateElectionOfficeInfo::getPrimaryPhoneNumber() const {
    return m_primary_phone_number;
}
void OAIStateElectionOfficeInfo::setPrimaryPhoneNumber(const QString &primary_phone_number) {
    m_primary_phone_number = primary_phone_number;
    m_primary_phone_number_isSet = true;
}

bool OAIStateElectionOfficeInfo::is_primary_phone_number_Set() const{
    return m_primary_phone_number_isSet;
}

bool OAIStateElectionOfficeInfo::is_primary_phone_number_Valid() const{
    return m_primary_phone_number_isValid;
}

QString OAIStateElectionOfficeInfo::getSecondaryPhoneNumber() const {
    return m_secondary_phone_number;
}
void OAIStateElectionOfficeInfo::setSecondaryPhoneNumber(const QString &secondary_phone_number) {
    m_secondary_phone_number = secondary_phone_number;
    m_secondary_phone_number_isSet = true;
}

bool OAIStateElectionOfficeInfo::is_secondary_phone_number_Set() const{
    return m_secondary_phone_number_isSet;
}

bool OAIStateElectionOfficeInfo::is_secondary_phone_number_Valid() const{
    return m_secondary_phone_number_isValid;
}

QString OAIStateElectionOfficeInfo::getState() const {
    return m_state;
}
void OAIStateElectionOfficeInfo::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIStateElectionOfficeInfo::is_state_Set() const{
    return m_state_isSet;
}

bool OAIStateElectionOfficeInfo::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIStateElectionOfficeInfo::getStateFullName() const {
    return m_state_full_name;
}
void OAIStateElectionOfficeInfo::setStateFullName(const QString &state_full_name) {
    m_state_full_name = state_full_name;
    m_state_full_name_isSet = true;
}

bool OAIStateElectionOfficeInfo::is_state_full_name_Set() const{
    return m_state_full_name_isSet;
}

bool OAIStateElectionOfficeInfo::is_state_full_name_Valid() const{
    return m_state_full_name_isValid;
}

QString OAIStateElectionOfficeInfo::getWebsiteUrl1() const {
    return m_website_url1;
}
void OAIStateElectionOfficeInfo::setWebsiteUrl1(const QString &website_url1) {
    m_website_url1 = website_url1;
    m_website_url1_isSet = true;
}

bool OAIStateElectionOfficeInfo::is_website_url1_Set() const{
    return m_website_url1_isSet;
}

bool OAIStateElectionOfficeInfo::is_website_url1_Valid() const{
    return m_website_url1_isValid;
}

QString OAIStateElectionOfficeInfo::getWebsiteUrl2() const {
    return m_website_url2;
}
void OAIStateElectionOfficeInfo::setWebsiteUrl2(const QString &website_url2) {
    m_website_url2 = website_url2;
    m_website_url2_isSet = true;
}

bool OAIStateElectionOfficeInfo::is_website_url2_Set() const{
    return m_website_url2_isSet;
}

bool OAIStateElectionOfficeInfo::is_website_url2_Valid() const{
    return m_website_url2_isValid;
}

QString OAIStateElectionOfficeInfo::getZipCode() const {
    return m_zip_code;
}
void OAIStateElectionOfficeInfo::setZipCode(const QString &zip_code) {
    m_zip_code = zip_code;
    m_zip_code_isSet = true;
}

bool OAIStateElectionOfficeInfo::is_zip_code_Set() const{
    return m_zip_code_isSet;
}

bool OAIStateElectionOfficeInfo::is_zip_code_Valid() const{
    return m_zip_code_isValid;
}

bool OAIStateElectionOfficeInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_line1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_line2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fax_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mailing_address1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mailing_address2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mailing_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mailing_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mailing_zipcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_office_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_office_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_url1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_url2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStateElectionOfficeInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_office_type_isValid && m_state_isValid && true;
}

} // namespace OpenAPI
