/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduleH4.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduleH4::OAIScheduleH4(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduleH4::OAIScheduleH4() {
    this->initializeModel();
}

OAIScheduleH4::~OAIScheduleH4() {}

void OAIScheduleH4::initializeModel() {

    m_additional_description_isSet = false;
    m_additional_description_isValid = false;

    m_administrative_activity_inidcator_isSet = false;
    m_administrative_activity_inidcator_isValid = false;

    m_administrative_voter_drive_activity_indicator_isSet = false;
    m_administrative_voter_drive_activity_indicator_isValid = false;

    m_amendment_indicator_isSet = false;
    m_amendment_indicator_isValid = false;

    m_amendment_indicator_desc_isSet = false;
    m_amendment_indicator_desc_isValid = false;

    m_back_reference_schedule_id_isSet = false;
    m_back_reference_schedule_id_isValid = false;

    m_back_reference_transaction_id_isSet = false;
    m_back_reference_transaction_id_isValid = false;

    m_candidate_first_name_isSet = false;
    m_candidate_first_name_isValid = false;

    m_candidate_id_isSet = false;
    m_candidate_id_isValid = false;

    m_candidate_last_name_isSet = false;
    m_candidate_last_name_isValid = false;

    m_candidate_name_isSet = false;
    m_candidate_name_isValid = false;

    m_candidate_office_isSet = false;
    m_candidate_office_isValid = false;

    m_candidate_office_description_isSet = false;
    m_candidate_office_description_isValid = false;

    m_candidate_office_district_isSet = false;
    m_candidate_office_district_isValid = false;

    m_candidate_office_state_isSet = false;
    m_candidate_office_state_isValid = false;

    m_candidate_office_state_full_isSet = false;
    m_candidate_office_state_full_isValid = false;

    m_category_code_isSet = false;
    m_category_code_isValid = false;

    m_category_code_full_isSet = false;
    m_category_code_full_isValid = false;

    m_committee_isSet = false;
    m_committee_isValid = false;

    m_committee_id_isSet = false;
    m_committee_id_isValid = false;

    m_conduit_committee_city_isSet = false;
    m_conduit_committee_city_isValid = false;

    m_conduit_committee_id_isSet = false;
    m_conduit_committee_id_isValid = false;

    m_conduit_committee_name_isSet = false;
    m_conduit_committee_name_isValid = false;

    m_conduit_committee_state_isSet = false;
    m_conduit_committee_state_isValid = false;

    m_conduit_committee_street1_isSet = false;
    m_conduit_committee_street1_isValid = false;

    m_conduit_committee_street2_isSet = false;
    m_conduit_committee_street2_isValid = false;

    m_conduit_committee_zip_isSet = false;
    m_conduit_committee_zip_isValid = false;

    m_cycle_isSet = false;
    m_cycle_isValid = false;

    m_direct_candidate_support_activity_indicator_isSet = false;
    m_direct_candidate_support_activity_indicator_isValid = false;

    m_disbursement_amount_isSet = false;
    m_disbursement_amount_isValid = false;

    m_disbursement_type_isSet = false;
    m_disbursement_type_isValid = false;

    m_disbursement_type_full_isSet = false;
    m_disbursement_type_full_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_entity_type_desc_isSet = false;
    m_entity_type_desc_isValid = false;

    m_event_amount_year_to_date_isSet = false;
    m_event_amount_year_to_date_isValid = false;

    m_event_purpose_category_type_isSet = false;
    m_event_purpose_category_type_isValid = false;

    m_event_purpose_category_type_full_isSet = false;
    m_event_purpose_category_type_full_isValid = false;

    m_event_purpose_date_isSet = false;
    m_event_purpose_date_isValid = false;

    m_event_purpose_description_isSet = false;
    m_event_purpose_description_isValid = false;

    m_event_purpose_name_isSet = false;
    m_event_purpose_name_isValid = false;

    m_exempt_activity_indicator_isSet = false;
    m_exempt_activity_indicator_isValid = false;

    m_federal_share_isSet = false;
    m_federal_share_isValid = false;

    m_file_number_isSet = false;
    m_file_number_isValid = false;

    m_filer_committee_name_isSet = false;
    m_filer_committee_name_isValid = false;

    m_filing_form_isSet = false;
    m_filing_form_isValid = false;

    m_fundraising_activity_indicator_isSet = false;
    m_fundraising_activity_indicator_isValid = false;

    m_general_voter_drive_activity_indicator_isSet = false;
    m_general_voter_drive_activity_indicator_isValid = false;

    m_image_number_isSet = false;
    m_image_number_isValid = false;

    m_line_number_isSet = false;
    m_line_number_isValid = false;

    m_link_id_isSet = false;
    m_link_id_isValid = false;

    m_load_date_isSet = false;
    m_load_date_isValid = false;

    m_memo_code_isSet = false;
    m_memo_code_isValid = false;

    m_memo_code_description_isSet = false;
    m_memo_code_description_isValid = false;

    m_memo_text_isSet = false;
    m_memo_text_isValid = false;

    m_nonfederal_share_isSet = false;
    m_nonfederal_share_isValid = false;

    m_original_sub_id_isSet = false;
    m_original_sub_id_isValid = false;

    m_payee_city_isSet = false;
    m_payee_city_isValid = false;

    m_payee_first_name_isSet = false;
    m_payee_first_name_isValid = false;

    m_payee_last_name_isSet = false;
    m_payee_last_name_isValid = false;

    m_payee_middle_name_isSet = false;
    m_payee_middle_name_isValid = false;

    m_payee_name_isSet = false;
    m_payee_name_isValid = false;

    m_payee_prefix_isSet = false;
    m_payee_prefix_isValid = false;

    m_payee_state_isSet = false;
    m_payee_state_isValid = false;

    m_payee_suffix_isSet = false;
    m_payee_suffix_isValid = false;

    m_payee_zip_isSet = false;
    m_payee_zip_isValid = false;

    m_published_committee_reference_parity_check_isSet = false;
    m_published_committee_reference_parity_check_isValid = false;

    m_report_type_isSet = false;
    m_report_type_isValid = false;

    m_report_year_isSet = false;
    m_report_year_isValid = false;

    m_schedule_type_isSet = false;
    m_schedule_type_isValid = false;

    m_schedule_type_full_isSet = false;
    m_schedule_type_full_isValid = false;

    m_sub_id_isSet = false;
    m_sub_id_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;
}

void OAIScheduleH4::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduleH4::fromJsonObject(QJsonObject json) {

    m_additional_description_isValid = ::OpenAPI::fromJsonValue(m_additional_description, json[QString("additional_description")]);
    m_additional_description_isSet = !json[QString("additional_description")].isNull() && m_additional_description_isValid;

    m_administrative_activity_inidcator_isValid = ::OpenAPI::fromJsonValue(m_administrative_activity_inidcator, json[QString("administrative_activity_inidcator")]);
    m_administrative_activity_inidcator_isSet = !json[QString("administrative_activity_inidcator")].isNull() && m_administrative_activity_inidcator_isValid;

    m_administrative_voter_drive_activity_indicator_isValid = ::OpenAPI::fromJsonValue(m_administrative_voter_drive_activity_indicator, json[QString("administrative_voter_drive_activity_indicator")]);
    m_administrative_voter_drive_activity_indicator_isSet = !json[QString("administrative_voter_drive_activity_indicator")].isNull() && m_administrative_voter_drive_activity_indicator_isValid;

    m_amendment_indicator_isValid = ::OpenAPI::fromJsonValue(m_amendment_indicator, json[QString("amendment_indicator")]);
    m_amendment_indicator_isSet = !json[QString("amendment_indicator")].isNull() && m_amendment_indicator_isValid;

    m_amendment_indicator_desc_isValid = ::OpenAPI::fromJsonValue(m_amendment_indicator_desc, json[QString("amendment_indicator_desc")]);
    m_amendment_indicator_desc_isSet = !json[QString("amendment_indicator_desc")].isNull() && m_amendment_indicator_desc_isValid;

    m_back_reference_schedule_id_isValid = ::OpenAPI::fromJsonValue(m_back_reference_schedule_id, json[QString("back_reference_schedule_id")]);
    m_back_reference_schedule_id_isSet = !json[QString("back_reference_schedule_id")].isNull() && m_back_reference_schedule_id_isValid;

    m_back_reference_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_back_reference_transaction_id, json[QString("back_reference_transaction_id")]);
    m_back_reference_transaction_id_isSet = !json[QString("back_reference_transaction_id")].isNull() && m_back_reference_transaction_id_isValid;

    m_candidate_first_name_isValid = ::OpenAPI::fromJsonValue(m_candidate_first_name, json[QString("candidate_first_name")]);
    m_candidate_first_name_isSet = !json[QString("candidate_first_name")].isNull() && m_candidate_first_name_isValid;

    m_candidate_id_isValid = ::OpenAPI::fromJsonValue(m_candidate_id, json[QString("candidate_id")]);
    m_candidate_id_isSet = !json[QString("candidate_id")].isNull() && m_candidate_id_isValid;

    m_candidate_last_name_isValid = ::OpenAPI::fromJsonValue(m_candidate_last_name, json[QString("candidate_last_name")]);
    m_candidate_last_name_isSet = !json[QString("candidate_last_name")].isNull() && m_candidate_last_name_isValid;

    m_candidate_name_isValid = ::OpenAPI::fromJsonValue(m_candidate_name, json[QString("candidate_name")]);
    m_candidate_name_isSet = !json[QString("candidate_name")].isNull() && m_candidate_name_isValid;

    m_candidate_office_isValid = ::OpenAPI::fromJsonValue(m_candidate_office, json[QString("candidate_office")]);
    m_candidate_office_isSet = !json[QString("candidate_office")].isNull() && m_candidate_office_isValid;

    m_candidate_office_description_isValid = ::OpenAPI::fromJsonValue(m_candidate_office_description, json[QString("candidate_office_description")]);
    m_candidate_office_description_isSet = !json[QString("candidate_office_description")].isNull() && m_candidate_office_description_isValid;

    m_candidate_office_district_isValid = ::OpenAPI::fromJsonValue(m_candidate_office_district, json[QString("candidate_office_district")]);
    m_candidate_office_district_isSet = !json[QString("candidate_office_district")].isNull() && m_candidate_office_district_isValid;

    m_candidate_office_state_isValid = ::OpenAPI::fromJsonValue(m_candidate_office_state, json[QString("candidate_office_state")]);
    m_candidate_office_state_isSet = !json[QString("candidate_office_state")].isNull() && m_candidate_office_state_isValid;

    m_candidate_office_state_full_isValid = ::OpenAPI::fromJsonValue(m_candidate_office_state_full, json[QString("candidate_office_state_full")]);
    m_candidate_office_state_full_isSet = !json[QString("candidate_office_state_full")].isNull() && m_candidate_office_state_full_isValid;

    m_category_code_isValid = ::OpenAPI::fromJsonValue(m_category_code, json[QString("category_code")]);
    m_category_code_isSet = !json[QString("category_code")].isNull() && m_category_code_isValid;

    m_category_code_full_isValid = ::OpenAPI::fromJsonValue(m_category_code_full, json[QString("category_code_full")]);
    m_category_code_full_isSet = !json[QString("category_code_full")].isNull() && m_category_code_full_isValid;

    m_committee_isValid = ::OpenAPI::fromJsonValue(m_committee, json[QString("committee")]);
    m_committee_isSet = !json[QString("committee")].isNull() && m_committee_isValid;

    m_committee_id_isValid = ::OpenAPI::fromJsonValue(m_committee_id, json[QString("committee_id")]);
    m_committee_id_isSet = !json[QString("committee_id")].isNull() && m_committee_id_isValid;

    m_conduit_committee_city_isValid = ::OpenAPI::fromJsonValue(m_conduit_committee_city, json[QString("conduit_committee_city")]);
    m_conduit_committee_city_isSet = !json[QString("conduit_committee_city")].isNull() && m_conduit_committee_city_isValid;

    m_conduit_committee_id_isValid = ::OpenAPI::fromJsonValue(m_conduit_committee_id, json[QString("conduit_committee_id")]);
    m_conduit_committee_id_isSet = !json[QString("conduit_committee_id")].isNull() && m_conduit_committee_id_isValid;

    m_conduit_committee_name_isValid = ::OpenAPI::fromJsonValue(m_conduit_committee_name, json[QString("conduit_committee_name")]);
    m_conduit_committee_name_isSet = !json[QString("conduit_committee_name")].isNull() && m_conduit_committee_name_isValid;

    m_conduit_committee_state_isValid = ::OpenAPI::fromJsonValue(m_conduit_committee_state, json[QString("conduit_committee_state")]);
    m_conduit_committee_state_isSet = !json[QString("conduit_committee_state")].isNull() && m_conduit_committee_state_isValid;

    m_conduit_committee_street1_isValid = ::OpenAPI::fromJsonValue(m_conduit_committee_street1, json[QString("conduit_committee_street1")]);
    m_conduit_committee_street1_isSet = !json[QString("conduit_committee_street1")].isNull() && m_conduit_committee_street1_isValid;

    m_conduit_committee_street2_isValid = ::OpenAPI::fromJsonValue(m_conduit_committee_street2, json[QString("conduit_committee_street2")]);
    m_conduit_committee_street2_isSet = !json[QString("conduit_committee_street2")].isNull() && m_conduit_committee_street2_isValid;

    m_conduit_committee_zip_isValid = ::OpenAPI::fromJsonValue(m_conduit_committee_zip, json[QString("conduit_committee_zip")]);
    m_conduit_committee_zip_isSet = !json[QString("conduit_committee_zip")].isNull() && m_conduit_committee_zip_isValid;

    m_cycle_isValid = ::OpenAPI::fromJsonValue(m_cycle, json[QString("cycle")]);
    m_cycle_isSet = !json[QString("cycle")].isNull() && m_cycle_isValid;

    m_direct_candidate_support_activity_indicator_isValid = ::OpenAPI::fromJsonValue(m_direct_candidate_support_activity_indicator, json[QString("direct_candidate_support_activity_indicator")]);
    m_direct_candidate_support_activity_indicator_isSet = !json[QString("direct_candidate_support_activity_indicator")].isNull() && m_direct_candidate_support_activity_indicator_isValid;

    m_disbursement_amount_isValid = ::OpenAPI::fromJsonValue(m_disbursement_amount, json[QString("disbursement_amount")]);
    m_disbursement_amount_isSet = !json[QString("disbursement_amount")].isNull() && m_disbursement_amount_isValid;

    m_disbursement_type_isValid = ::OpenAPI::fromJsonValue(m_disbursement_type, json[QString("disbursement_type")]);
    m_disbursement_type_isSet = !json[QString("disbursement_type")].isNull() && m_disbursement_type_isValid;

    m_disbursement_type_full_isValid = ::OpenAPI::fromJsonValue(m_disbursement_type_full, json[QString("disbursement_type_full")]);
    m_disbursement_type_full_isSet = !json[QString("disbursement_type_full")].isNull() && m_disbursement_type_full_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entity_type")]);
    m_entity_type_isSet = !json[QString("entity_type")].isNull() && m_entity_type_isValid;

    m_entity_type_desc_isValid = ::OpenAPI::fromJsonValue(m_entity_type_desc, json[QString("entity_type_desc")]);
    m_entity_type_desc_isSet = !json[QString("entity_type_desc")].isNull() && m_entity_type_desc_isValid;

    m_event_amount_year_to_date_isValid = ::OpenAPI::fromJsonValue(m_event_amount_year_to_date, json[QString("event_amount_year_to_date")]);
    m_event_amount_year_to_date_isSet = !json[QString("event_amount_year_to_date")].isNull() && m_event_amount_year_to_date_isValid;

    m_event_purpose_category_type_isValid = ::OpenAPI::fromJsonValue(m_event_purpose_category_type, json[QString("event_purpose_category_type")]);
    m_event_purpose_category_type_isSet = !json[QString("event_purpose_category_type")].isNull() && m_event_purpose_category_type_isValid;

    m_event_purpose_category_type_full_isValid = ::OpenAPI::fromJsonValue(m_event_purpose_category_type_full, json[QString("event_purpose_category_type_full")]);
    m_event_purpose_category_type_full_isSet = !json[QString("event_purpose_category_type_full")].isNull() && m_event_purpose_category_type_full_isValid;

    m_event_purpose_date_isValid = ::OpenAPI::fromJsonValue(m_event_purpose_date, json[QString("event_purpose_date")]);
    m_event_purpose_date_isSet = !json[QString("event_purpose_date")].isNull() && m_event_purpose_date_isValid;

    m_event_purpose_description_isValid = ::OpenAPI::fromJsonValue(m_event_purpose_description, json[QString("event_purpose_description")]);
    m_event_purpose_description_isSet = !json[QString("event_purpose_description")].isNull() && m_event_purpose_description_isValid;

    m_event_purpose_name_isValid = ::OpenAPI::fromJsonValue(m_event_purpose_name, json[QString("event_purpose_name")]);
    m_event_purpose_name_isSet = !json[QString("event_purpose_name")].isNull() && m_event_purpose_name_isValid;

    m_exempt_activity_indicator_isValid = ::OpenAPI::fromJsonValue(m_exempt_activity_indicator, json[QString("exempt_activity_indicator")]);
    m_exempt_activity_indicator_isSet = !json[QString("exempt_activity_indicator")].isNull() && m_exempt_activity_indicator_isValid;

    m_federal_share_isValid = ::OpenAPI::fromJsonValue(m_federal_share, json[QString("federal_share")]);
    m_federal_share_isSet = !json[QString("federal_share")].isNull() && m_federal_share_isValid;

    m_file_number_isValid = ::OpenAPI::fromJsonValue(m_file_number, json[QString("file_number")]);
    m_file_number_isSet = !json[QString("file_number")].isNull() && m_file_number_isValid;

    m_filer_committee_name_isValid = ::OpenAPI::fromJsonValue(m_filer_committee_name, json[QString("filer_committee_name")]);
    m_filer_committee_name_isSet = !json[QString("filer_committee_name")].isNull() && m_filer_committee_name_isValid;

    m_filing_form_isValid = ::OpenAPI::fromJsonValue(m_filing_form, json[QString("filing_form")]);
    m_filing_form_isSet = !json[QString("filing_form")].isNull() && m_filing_form_isValid;

    m_fundraising_activity_indicator_isValid = ::OpenAPI::fromJsonValue(m_fundraising_activity_indicator, json[QString("fundraising_activity_indicator")]);
    m_fundraising_activity_indicator_isSet = !json[QString("fundraising_activity_indicator")].isNull() && m_fundraising_activity_indicator_isValid;

    m_general_voter_drive_activity_indicator_isValid = ::OpenAPI::fromJsonValue(m_general_voter_drive_activity_indicator, json[QString("general_voter_drive_activity_indicator")]);
    m_general_voter_drive_activity_indicator_isSet = !json[QString("general_voter_drive_activity_indicator")].isNull() && m_general_voter_drive_activity_indicator_isValid;

    m_image_number_isValid = ::OpenAPI::fromJsonValue(m_image_number, json[QString("image_number")]);
    m_image_number_isSet = !json[QString("image_number")].isNull() && m_image_number_isValid;

    m_line_number_isValid = ::OpenAPI::fromJsonValue(m_line_number, json[QString("line_number")]);
    m_line_number_isSet = !json[QString("line_number")].isNull() && m_line_number_isValid;

    m_link_id_isValid = ::OpenAPI::fromJsonValue(m_link_id, json[QString("link_id")]);
    m_link_id_isSet = !json[QString("link_id")].isNull() && m_link_id_isValid;

    m_load_date_isValid = ::OpenAPI::fromJsonValue(m_load_date, json[QString("load_date")]);
    m_load_date_isSet = !json[QString("load_date")].isNull() && m_load_date_isValid;

    m_memo_code_isValid = ::OpenAPI::fromJsonValue(m_memo_code, json[QString("memo_code")]);
    m_memo_code_isSet = !json[QString("memo_code")].isNull() && m_memo_code_isValid;

    m_memo_code_description_isValid = ::OpenAPI::fromJsonValue(m_memo_code_description, json[QString("memo_code_description")]);
    m_memo_code_description_isSet = !json[QString("memo_code_description")].isNull() && m_memo_code_description_isValid;

    m_memo_text_isValid = ::OpenAPI::fromJsonValue(m_memo_text, json[QString("memo_text")]);
    m_memo_text_isSet = !json[QString("memo_text")].isNull() && m_memo_text_isValid;

    m_nonfederal_share_isValid = ::OpenAPI::fromJsonValue(m_nonfederal_share, json[QString("nonfederal_share")]);
    m_nonfederal_share_isSet = !json[QString("nonfederal_share")].isNull() && m_nonfederal_share_isValid;

    m_original_sub_id_isValid = ::OpenAPI::fromJsonValue(m_original_sub_id, json[QString("original_sub_id")]);
    m_original_sub_id_isSet = !json[QString("original_sub_id")].isNull() && m_original_sub_id_isValid;

    m_payee_city_isValid = ::OpenAPI::fromJsonValue(m_payee_city, json[QString("payee_city")]);
    m_payee_city_isSet = !json[QString("payee_city")].isNull() && m_payee_city_isValid;

    m_payee_first_name_isValid = ::OpenAPI::fromJsonValue(m_payee_first_name, json[QString("payee_first_name")]);
    m_payee_first_name_isSet = !json[QString("payee_first_name")].isNull() && m_payee_first_name_isValid;

    m_payee_last_name_isValid = ::OpenAPI::fromJsonValue(m_payee_last_name, json[QString("payee_last_name")]);
    m_payee_last_name_isSet = !json[QString("payee_last_name")].isNull() && m_payee_last_name_isValid;

    m_payee_middle_name_isValid = ::OpenAPI::fromJsonValue(m_payee_middle_name, json[QString("payee_middle_name")]);
    m_payee_middle_name_isSet = !json[QString("payee_middle_name")].isNull() && m_payee_middle_name_isValid;

    m_payee_name_isValid = ::OpenAPI::fromJsonValue(m_payee_name, json[QString("payee_name")]);
    m_payee_name_isSet = !json[QString("payee_name")].isNull() && m_payee_name_isValid;

    m_payee_prefix_isValid = ::OpenAPI::fromJsonValue(m_payee_prefix, json[QString("payee_prefix")]);
    m_payee_prefix_isSet = !json[QString("payee_prefix")].isNull() && m_payee_prefix_isValid;

    m_payee_state_isValid = ::OpenAPI::fromJsonValue(m_payee_state, json[QString("payee_state")]);
    m_payee_state_isSet = !json[QString("payee_state")].isNull() && m_payee_state_isValid;

    m_payee_suffix_isValid = ::OpenAPI::fromJsonValue(m_payee_suffix, json[QString("payee_suffix")]);
    m_payee_suffix_isSet = !json[QString("payee_suffix")].isNull() && m_payee_suffix_isValid;

    m_payee_zip_isValid = ::OpenAPI::fromJsonValue(m_payee_zip, json[QString("payee_zip")]);
    m_payee_zip_isSet = !json[QString("payee_zip")].isNull() && m_payee_zip_isValid;

    m_published_committee_reference_parity_check_isValid = ::OpenAPI::fromJsonValue(m_published_committee_reference_parity_check, json[QString("published_committee_reference_parity_check")]);
    m_published_committee_reference_parity_check_isSet = !json[QString("published_committee_reference_parity_check")].isNull() && m_published_committee_reference_parity_check_isValid;

    m_report_type_isValid = ::OpenAPI::fromJsonValue(m_report_type, json[QString("report_type")]);
    m_report_type_isSet = !json[QString("report_type")].isNull() && m_report_type_isValid;

    m_report_year_isValid = ::OpenAPI::fromJsonValue(m_report_year, json[QString("report_year")]);
    m_report_year_isSet = !json[QString("report_year")].isNull() && m_report_year_isValid;

    m_schedule_type_isValid = ::OpenAPI::fromJsonValue(m_schedule_type, json[QString("schedule_type")]);
    m_schedule_type_isSet = !json[QString("schedule_type")].isNull() && m_schedule_type_isValid;

    m_schedule_type_full_isValid = ::OpenAPI::fromJsonValue(m_schedule_type_full, json[QString("schedule_type_full")]);
    m_schedule_type_full_isSet = !json[QString("schedule_type_full")].isNull() && m_schedule_type_full_isValid;

    m_sub_id_isValid = ::OpenAPI::fromJsonValue(m_sub_id, json[QString("sub_id")]);
    m_sub_id_isSet = !json[QString("sub_id")].isNull() && m_sub_id_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("transaction_id")]);
    m_transaction_id_isSet = !json[QString("transaction_id")].isNull() && m_transaction_id_isValid;
}

QString OAIScheduleH4::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduleH4::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_description_isSet) {
        obj.insert(QString("additional_description"), ::OpenAPI::toJsonValue(m_additional_description));
    }
    if (m_administrative_activity_inidcator_isSet) {
        obj.insert(QString("administrative_activity_inidcator"), ::OpenAPI::toJsonValue(m_administrative_activity_inidcator));
    }
    if (m_administrative_voter_drive_activity_indicator_isSet) {
        obj.insert(QString("administrative_voter_drive_activity_indicator"), ::OpenAPI::toJsonValue(m_administrative_voter_drive_activity_indicator));
    }
    if (m_amendment_indicator_isSet) {
        obj.insert(QString("amendment_indicator"), ::OpenAPI::toJsonValue(m_amendment_indicator));
    }
    if (m_amendment_indicator_desc_isSet) {
        obj.insert(QString("amendment_indicator_desc"), ::OpenAPI::toJsonValue(m_amendment_indicator_desc));
    }
    if (m_back_reference_schedule_id_isSet) {
        obj.insert(QString("back_reference_schedule_id"), ::OpenAPI::toJsonValue(m_back_reference_schedule_id));
    }
    if (m_back_reference_transaction_id_isSet) {
        obj.insert(QString("back_reference_transaction_id"), ::OpenAPI::toJsonValue(m_back_reference_transaction_id));
    }
    if (m_candidate_first_name_isSet) {
        obj.insert(QString("candidate_first_name"), ::OpenAPI::toJsonValue(m_candidate_first_name));
    }
    if (m_candidate_id_isSet) {
        obj.insert(QString("candidate_id"), ::OpenAPI::toJsonValue(m_candidate_id));
    }
    if (m_candidate_last_name_isSet) {
        obj.insert(QString("candidate_last_name"), ::OpenAPI::toJsonValue(m_candidate_last_name));
    }
    if (m_candidate_name_isSet) {
        obj.insert(QString("candidate_name"), ::OpenAPI::toJsonValue(m_candidate_name));
    }
    if (m_candidate_office_isSet) {
        obj.insert(QString("candidate_office"), ::OpenAPI::toJsonValue(m_candidate_office));
    }
    if (m_candidate_office_description_isSet) {
        obj.insert(QString("candidate_office_description"), ::OpenAPI::toJsonValue(m_candidate_office_description));
    }
    if (m_candidate_office_district_isSet) {
        obj.insert(QString("candidate_office_district"), ::OpenAPI::toJsonValue(m_candidate_office_district));
    }
    if (m_candidate_office_state_isSet) {
        obj.insert(QString("candidate_office_state"), ::OpenAPI::toJsonValue(m_candidate_office_state));
    }
    if (m_candidate_office_state_full_isSet) {
        obj.insert(QString("candidate_office_state_full"), ::OpenAPI::toJsonValue(m_candidate_office_state_full));
    }
    if (m_category_code_isSet) {
        obj.insert(QString("category_code"), ::OpenAPI::toJsonValue(m_category_code));
    }
    if (m_category_code_full_isSet) {
        obj.insert(QString("category_code_full"), ::OpenAPI::toJsonValue(m_category_code_full));
    }
    if (m_committee.isSet()) {
        obj.insert(QString("committee"), ::OpenAPI::toJsonValue(m_committee));
    }
    if (m_committee_id_isSet) {
        obj.insert(QString("committee_id"), ::OpenAPI::toJsonValue(m_committee_id));
    }
    if (m_conduit_committee_city_isSet) {
        obj.insert(QString("conduit_committee_city"), ::OpenAPI::toJsonValue(m_conduit_committee_city));
    }
    if (m_conduit_committee_id_isSet) {
        obj.insert(QString("conduit_committee_id"), ::OpenAPI::toJsonValue(m_conduit_committee_id));
    }
    if (m_conduit_committee_name_isSet) {
        obj.insert(QString("conduit_committee_name"), ::OpenAPI::toJsonValue(m_conduit_committee_name));
    }
    if (m_conduit_committee_state_isSet) {
        obj.insert(QString("conduit_committee_state"), ::OpenAPI::toJsonValue(m_conduit_committee_state));
    }
    if (m_conduit_committee_street1_isSet) {
        obj.insert(QString("conduit_committee_street1"), ::OpenAPI::toJsonValue(m_conduit_committee_street1));
    }
    if (m_conduit_committee_street2_isSet) {
        obj.insert(QString("conduit_committee_street2"), ::OpenAPI::toJsonValue(m_conduit_committee_street2));
    }
    if (m_conduit_committee_zip_isSet) {
        obj.insert(QString("conduit_committee_zip"), ::OpenAPI::toJsonValue(m_conduit_committee_zip));
    }
    if (m_cycle_isSet) {
        obj.insert(QString("cycle"), ::OpenAPI::toJsonValue(m_cycle));
    }
    if (m_direct_candidate_support_activity_indicator_isSet) {
        obj.insert(QString("direct_candidate_support_activity_indicator"), ::OpenAPI::toJsonValue(m_direct_candidate_support_activity_indicator));
    }
    if (m_disbursement_amount_isSet) {
        obj.insert(QString("disbursement_amount"), ::OpenAPI::toJsonValue(m_disbursement_amount));
    }
    if (m_disbursement_type_isSet) {
        obj.insert(QString("disbursement_type"), ::OpenAPI::toJsonValue(m_disbursement_type));
    }
    if (m_disbursement_type_full_isSet) {
        obj.insert(QString("disbursement_type_full"), ::OpenAPI::toJsonValue(m_disbursement_type_full));
    }
    if (m_entity_type_isSet) {
        obj.insert(QString("entity_type"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_entity_type_desc_isSet) {
        obj.insert(QString("entity_type_desc"), ::OpenAPI::toJsonValue(m_entity_type_desc));
    }
    if (m_event_amount_year_to_date_isSet) {
        obj.insert(QString("event_amount_year_to_date"), ::OpenAPI::toJsonValue(m_event_amount_year_to_date));
    }
    if (m_event_purpose_category_type_isSet) {
        obj.insert(QString("event_purpose_category_type"), ::OpenAPI::toJsonValue(m_event_purpose_category_type));
    }
    if (m_event_purpose_category_type_full_isSet) {
        obj.insert(QString("event_purpose_category_type_full"), ::OpenAPI::toJsonValue(m_event_purpose_category_type_full));
    }
    if (m_event_purpose_date_isSet) {
        obj.insert(QString("event_purpose_date"), ::OpenAPI::toJsonValue(m_event_purpose_date));
    }
    if (m_event_purpose_description_isSet) {
        obj.insert(QString("event_purpose_description"), ::OpenAPI::toJsonValue(m_event_purpose_description));
    }
    if (m_event_purpose_name_isSet) {
        obj.insert(QString("event_purpose_name"), ::OpenAPI::toJsonValue(m_event_purpose_name));
    }
    if (m_exempt_activity_indicator_isSet) {
        obj.insert(QString("exempt_activity_indicator"), ::OpenAPI::toJsonValue(m_exempt_activity_indicator));
    }
    if (m_federal_share_isSet) {
        obj.insert(QString("federal_share"), ::OpenAPI::toJsonValue(m_federal_share));
    }
    if (m_file_number_isSet) {
        obj.insert(QString("file_number"), ::OpenAPI::toJsonValue(m_file_number));
    }
    if (m_filer_committee_name_isSet) {
        obj.insert(QString("filer_committee_name"), ::OpenAPI::toJsonValue(m_filer_committee_name));
    }
    if (m_filing_form_isSet) {
        obj.insert(QString("filing_form"), ::OpenAPI::toJsonValue(m_filing_form));
    }
    if (m_fundraising_activity_indicator_isSet) {
        obj.insert(QString("fundraising_activity_indicator"), ::OpenAPI::toJsonValue(m_fundraising_activity_indicator));
    }
    if (m_general_voter_drive_activity_indicator_isSet) {
        obj.insert(QString("general_voter_drive_activity_indicator"), ::OpenAPI::toJsonValue(m_general_voter_drive_activity_indicator));
    }
    if (m_image_number_isSet) {
        obj.insert(QString("image_number"), ::OpenAPI::toJsonValue(m_image_number));
    }
    if (m_line_number_isSet) {
        obj.insert(QString("line_number"), ::OpenAPI::toJsonValue(m_line_number));
    }
    if (m_link_id_isSet) {
        obj.insert(QString("link_id"), ::OpenAPI::toJsonValue(m_link_id));
    }
    if (m_load_date_isSet) {
        obj.insert(QString("load_date"), ::OpenAPI::toJsonValue(m_load_date));
    }
    if (m_memo_code_isSet) {
        obj.insert(QString("memo_code"), ::OpenAPI::toJsonValue(m_memo_code));
    }
    if (m_memo_code_description_isSet) {
        obj.insert(QString("memo_code_description"), ::OpenAPI::toJsonValue(m_memo_code_description));
    }
    if (m_memo_text_isSet) {
        obj.insert(QString("memo_text"), ::OpenAPI::toJsonValue(m_memo_text));
    }
    if (m_nonfederal_share_isSet) {
        obj.insert(QString("nonfederal_share"), ::OpenAPI::toJsonValue(m_nonfederal_share));
    }
    if (m_original_sub_id_isSet) {
        obj.insert(QString("original_sub_id"), ::OpenAPI::toJsonValue(m_original_sub_id));
    }
    if (m_payee_city_isSet) {
        obj.insert(QString("payee_city"), ::OpenAPI::toJsonValue(m_payee_city));
    }
    if (m_payee_first_name_isSet) {
        obj.insert(QString("payee_first_name"), ::OpenAPI::toJsonValue(m_payee_first_name));
    }
    if (m_payee_last_name_isSet) {
        obj.insert(QString("payee_last_name"), ::OpenAPI::toJsonValue(m_payee_last_name));
    }
    if (m_payee_middle_name_isSet) {
        obj.insert(QString("payee_middle_name"), ::OpenAPI::toJsonValue(m_payee_middle_name));
    }
    if (m_payee_name_isSet) {
        obj.insert(QString("payee_name"), ::OpenAPI::toJsonValue(m_payee_name));
    }
    if (m_payee_prefix_isSet) {
        obj.insert(QString("payee_prefix"), ::OpenAPI::toJsonValue(m_payee_prefix));
    }
    if (m_payee_state_isSet) {
        obj.insert(QString("payee_state"), ::OpenAPI::toJsonValue(m_payee_state));
    }
    if (m_payee_suffix_isSet) {
        obj.insert(QString("payee_suffix"), ::OpenAPI::toJsonValue(m_payee_suffix));
    }
    if (m_payee_zip_isSet) {
        obj.insert(QString("payee_zip"), ::OpenAPI::toJsonValue(m_payee_zip));
    }
    if (m_published_committee_reference_parity_check_isSet) {
        obj.insert(QString("published_committee_reference_parity_check"), ::OpenAPI::toJsonValue(m_published_committee_reference_parity_check));
    }
    if (m_report_type_isSet) {
        obj.insert(QString("report_type"), ::OpenAPI::toJsonValue(m_report_type));
    }
    if (m_report_year_isSet) {
        obj.insert(QString("report_year"), ::OpenAPI::toJsonValue(m_report_year));
    }
    if (m_schedule_type_isSet) {
        obj.insert(QString("schedule_type"), ::OpenAPI::toJsonValue(m_schedule_type));
    }
    if (m_schedule_type_full_isSet) {
        obj.insert(QString("schedule_type_full"), ::OpenAPI::toJsonValue(m_schedule_type_full));
    }
    if (m_sub_id_isSet) {
        obj.insert(QString("sub_id"), ::OpenAPI::toJsonValue(m_sub_id));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("transaction_id"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    return obj;
}

QString OAIScheduleH4::getAdditionalDescription() const {
    return m_additional_description;
}
void OAIScheduleH4::setAdditionalDescription(const QString &additional_description) {
    m_additional_description = additional_description;
    m_additional_description_isSet = true;
}

bool OAIScheduleH4::is_additional_description_Set() const{
    return m_additional_description_isSet;
}

bool OAIScheduleH4::is_additional_description_Valid() const{
    return m_additional_description_isValid;
}

QString OAIScheduleH4::getAdministrativeActivityInidcator() const {
    return m_administrative_activity_inidcator;
}
void OAIScheduleH4::setAdministrativeActivityInidcator(const QString &administrative_activity_inidcator) {
    m_administrative_activity_inidcator = administrative_activity_inidcator;
    m_administrative_activity_inidcator_isSet = true;
}

bool OAIScheduleH4::is_administrative_activity_inidcator_Set() const{
    return m_administrative_activity_inidcator_isSet;
}

bool OAIScheduleH4::is_administrative_activity_inidcator_Valid() const{
    return m_administrative_activity_inidcator_isValid;
}

QString OAIScheduleH4::getAdministrativeVoterDriveActivityIndicator() const {
    return m_administrative_voter_drive_activity_indicator;
}
void OAIScheduleH4::setAdministrativeVoterDriveActivityIndicator(const QString &administrative_voter_drive_activity_indicator) {
    m_administrative_voter_drive_activity_indicator = administrative_voter_drive_activity_indicator;
    m_administrative_voter_drive_activity_indicator_isSet = true;
}

bool OAIScheduleH4::is_administrative_voter_drive_activity_indicator_Set() const{
    return m_administrative_voter_drive_activity_indicator_isSet;
}

bool OAIScheduleH4::is_administrative_voter_drive_activity_indicator_Valid() const{
    return m_administrative_voter_drive_activity_indicator_isValid;
}

QString OAIScheduleH4::getAmendmentIndicator() const {
    return m_amendment_indicator;
}
void OAIScheduleH4::setAmendmentIndicator(const QString &amendment_indicator) {
    m_amendment_indicator = amendment_indicator;
    m_amendment_indicator_isSet = true;
}

bool OAIScheduleH4::is_amendment_indicator_Set() const{
    return m_amendment_indicator_isSet;
}

bool OAIScheduleH4::is_amendment_indicator_Valid() const{
    return m_amendment_indicator_isValid;
}

QString OAIScheduleH4::getAmendmentIndicatorDesc() const {
    return m_amendment_indicator_desc;
}
void OAIScheduleH4::setAmendmentIndicatorDesc(const QString &amendment_indicator_desc) {
    m_amendment_indicator_desc = amendment_indicator_desc;
    m_amendment_indicator_desc_isSet = true;
}

bool OAIScheduleH4::is_amendment_indicator_desc_Set() const{
    return m_amendment_indicator_desc_isSet;
}

bool OAIScheduleH4::is_amendment_indicator_desc_Valid() const{
    return m_amendment_indicator_desc_isValid;
}

QString OAIScheduleH4::getBackReferenceScheduleId() const {
    return m_back_reference_schedule_id;
}
void OAIScheduleH4::setBackReferenceScheduleId(const QString &back_reference_schedule_id) {
    m_back_reference_schedule_id = back_reference_schedule_id;
    m_back_reference_schedule_id_isSet = true;
}

bool OAIScheduleH4::is_back_reference_schedule_id_Set() const{
    return m_back_reference_schedule_id_isSet;
}

bool OAIScheduleH4::is_back_reference_schedule_id_Valid() const{
    return m_back_reference_schedule_id_isValid;
}

QString OAIScheduleH4::getBackReferenceTransactionId() const {
    return m_back_reference_transaction_id;
}
void OAIScheduleH4::setBackReferenceTransactionId(const QString &back_reference_transaction_id) {
    m_back_reference_transaction_id = back_reference_transaction_id;
    m_back_reference_transaction_id_isSet = true;
}

bool OAIScheduleH4::is_back_reference_transaction_id_Set() const{
    return m_back_reference_transaction_id_isSet;
}

bool OAIScheduleH4::is_back_reference_transaction_id_Valid() const{
    return m_back_reference_transaction_id_isValid;
}

QString OAIScheduleH4::getCandidateFirstName() const {
    return m_candidate_first_name;
}
void OAIScheduleH4::setCandidateFirstName(const QString &candidate_first_name) {
    m_candidate_first_name = candidate_first_name;
    m_candidate_first_name_isSet = true;
}

bool OAIScheduleH4::is_candidate_first_name_Set() const{
    return m_candidate_first_name_isSet;
}

bool OAIScheduleH4::is_candidate_first_name_Valid() const{
    return m_candidate_first_name_isValid;
}

QString OAIScheduleH4::getCandidateId() const {
    return m_candidate_id;
}
void OAIScheduleH4::setCandidateId(const QString &candidate_id) {
    m_candidate_id = candidate_id;
    m_candidate_id_isSet = true;
}

bool OAIScheduleH4::is_candidate_id_Set() const{
    return m_candidate_id_isSet;
}

bool OAIScheduleH4::is_candidate_id_Valid() const{
    return m_candidate_id_isValid;
}

QString OAIScheduleH4::getCandidateLastName() const {
    return m_candidate_last_name;
}
void OAIScheduleH4::setCandidateLastName(const QString &candidate_last_name) {
    m_candidate_last_name = candidate_last_name;
    m_candidate_last_name_isSet = true;
}

bool OAIScheduleH4::is_candidate_last_name_Set() const{
    return m_candidate_last_name_isSet;
}

bool OAIScheduleH4::is_candidate_last_name_Valid() const{
    return m_candidate_last_name_isValid;
}

QString OAIScheduleH4::getCandidateName() const {
    return m_candidate_name;
}
void OAIScheduleH4::setCandidateName(const QString &candidate_name) {
    m_candidate_name = candidate_name;
    m_candidate_name_isSet = true;
}

bool OAIScheduleH4::is_candidate_name_Set() const{
    return m_candidate_name_isSet;
}

bool OAIScheduleH4::is_candidate_name_Valid() const{
    return m_candidate_name_isValid;
}

QString OAIScheduleH4::getCandidateOffice() const {
    return m_candidate_office;
}
void OAIScheduleH4::setCandidateOffice(const QString &candidate_office) {
    m_candidate_office = candidate_office;
    m_candidate_office_isSet = true;
}

bool OAIScheduleH4::is_candidate_office_Set() const{
    return m_candidate_office_isSet;
}

bool OAIScheduleH4::is_candidate_office_Valid() const{
    return m_candidate_office_isValid;
}

QString OAIScheduleH4::getCandidateOfficeDescription() const {
    return m_candidate_office_description;
}
void OAIScheduleH4::setCandidateOfficeDescription(const QString &candidate_office_description) {
    m_candidate_office_description = candidate_office_description;
    m_candidate_office_description_isSet = true;
}

bool OAIScheduleH4::is_candidate_office_description_Set() const{
    return m_candidate_office_description_isSet;
}

bool OAIScheduleH4::is_candidate_office_description_Valid() const{
    return m_candidate_office_description_isValid;
}

QString OAIScheduleH4::getCandidateOfficeDistrict() const {
    return m_candidate_office_district;
}
void OAIScheduleH4::setCandidateOfficeDistrict(const QString &candidate_office_district) {
    m_candidate_office_district = candidate_office_district;
    m_candidate_office_district_isSet = true;
}

bool OAIScheduleH4::is_candidate_office_district_Set() const{
    return m_candidate_office_district_isSet;
}

bool OAIScheduleH4::is_candidate_office_district_Valid() const{
    return m_candidate_office_district_isValid;
}

QString OAIScheduleH4::getCandidateOfficeState() const {
    return m_candidate_office_state;
}
void OAIScheduleH4::setCandidateOfficeState(const QString &candidate_office_state) {
    m_candidate_office_state = candidate_office_state;
    m_candidate_office_state_isSet = true;
}

bool OAIScheduleH4::is_candidate_office_state_Set() const{
    return m_candidate_office_state_isSet;
}

bool OAIScheduleH4::is_candidate_office_state_Valid() const{
    return m_candidate_office_state_isValid;
}

QString OAIScheduleH4::getCandidateOfficeStateFull() const {
    return m_candidate_office_state_full;
}
void OAIScheduleH4::setCandidateOfficeStateFull(const QString &candidate_office_state_full) {
    m_candidate_office_state_full = candidate_office_state_full;
    m_candidate_office_state_full_isSet = true;
}

bool OAIScheduleH4::is_candidate_office_state_full_Set() const{
    return m_candidate_office_state_full_isSet;
}

bool OAIScheduleH4::is_candidate_office_state_full_Valid() const{
    return m_candidate_office_state_full_isValid;
}

QString OAIScheduleH4::getCategoryCode() const {
    return m_category_code;
}
void OAIScheduleH4::setCategoryCode(const QString &category_code) {
    m_category_code = category_code;
    m_category_code_isSet = true;
}

bool OAIScheduleH4::is_category_code_Set() const{
    return m_category_code_isSet;
}

bool OAIScheduleH4::is_category_code_Valid() const{
    return m_category_code_isValid;
}

QString OAIScheduleH4::getCategoryCodeFull() const {
    return m_category_code_full;
}
void OAIScheduleH4::setCategoryCodeFull(const QString &category_code_full) {
    m_category_code_full = category_code_full;
    m_category_code_full_isSet = true;
}

bool OAIScheduleH4::is_category_code_full_Set() const{
    return m_category_code_full_isSet;
}

bool OAIScheduleH4::is_category_code_full_Valid() const{
    return m_category_code_full_isValid;
}

OAICommitteeHistory OAIScheduleH4::getCommittee() const {
    return m_committee;
}
void OAIScheduleH4::setCommittee(const OAICommitteeHistory &committee) {
    m_committee = committee;
    m_committee_isSet = true;
}

bool OAIScheduleH4::is_committee_Set() const{
    return m_committee_isSet;
}

bool OAIScheduleH4::is_committee_Valid() const{
    return m_committee_isValid;
}

QString OAIScheduleH4::getCommitteeId() const {
    return m_committee_id;
}
void OAIScheduleH4::setCommitteeId(const QString &committee_id) {
    m_committee_id = committee_id;
    m_committee_id_isSet = true;
}

bool OAIScheduleH4::is_committee_id_Set() const{
    return m_committee_id_isSet;
}

bool OAIScheduleH4::is_committee_id_Valid() const{
    return m_committee_id_isValid;
}

QString OAIScheduleH4::getConduitCommitteeCity() const {
    return m_conduit_committee_city;
}
void OAIScheduleH4::setConduitCommitteeCity(const QString &conduit_committee_city) {
    m_conduit_committee_city = conduit_committee_city;
    m_conduit_committee_city_isSet = true;
}

bool OAIScheduleH4::is_conduit_committee_city_Set() const{
    return m_conduit_committee_city_isSet;
}

bool OAIScheduleH4::is_conduit_committee_city_Valid() const{
    return m_conduit_committee_city_isValid;
}

QString OAIScheduleH4::getConduitCommitteeId() const {
    return m_conduit_committee_id;
}
void OAIScheduleH4::setConduitCommitteeId(const QString &conduit_committee_id) {
    m_conduit_committee_id = conduit_committee_id;
    m_conduit_committee_id_isSet = true;
}

bool OAIScheduleH4::is_conduit_committee_id_Set() const{
    return m_conduit_committee_id_isSet;
}

bool OAIScheduleH4::is_conduit_committee_id_Valid() const{
    return m_conduit_committee_id_isValid;
}

QString OAIScheduleH4::getConduitCommitteeName() const {
    return m_conduit_committee_name;
}
void OAIScheduleH4::setConduitCommitteeName(const QString &conduit_committee_name) {
    m_conduit_committee_name = conduit_committee_name;
    m_conduit_committee_name_isSet = true;
}

bool OAIScheduleH4::is_conduit_committee_name_Set() const{
    return m_conduit_committee_name_isSet;
}

bool OAIScheduleH4::is_conduit_committee_name_Valid() const{
    return m_conduit_committee_name_isValid;
}

QString OAIScheduleH4::getConduitCommitteeState() const {
    return m_conduit_committee_state;
}
void OAIScheduleH4::setConduitCommitteeState(const QString &conduit_committee_state) {
    m_conduit_committee_state = conduit_committee_state;
    m_conduit_committee_state_isSet = true;
}

bool OAIScheduleH4::is_conduit_committee_state_Set() const{
    return m_conduit_committee_state_isSet;
}

bool OAIScheduleH4::is_conduit_committee_state_Valid() const{
    return m_conduit_committee_state_isValid;
}

QString OAIScheduleH4::getConduitCommitteeStreet1() const {
    return m_conduit_committee_street1;
}
void OAIScheduleH4::setConduitCommitteeStreet1(const QString &conduit_committee_street1) {
    m_conduit_committee_street1 = conduit_committee_street1;
    m_conduit_committee_street1_isSet = true;
}

bool OAIScheduleH4::is_conduit_committee_street1_Set() const{
    return m_conduit_committee_street1_isSet;
}

bool OAIScheduleH4::is_conduit_committee_street1_Valid() const{
    return m_conduit_committee_street1_isValid;
}

QString OAIScheduleH4::getConduitCommitteeStreet2() const {
    return m_conduit_committee_street2;
}
void OAIScheduleH4::setConduitCommitteeStreet2(const QString &conduit_committee_street2) {
    m_conduit_committee_street2 = conduit_committee_street2;
    m_conduit_committee_street2_isSet = true;
}

bool OAIScheduleH4::is_conduit_committee_street2_Set() const{
    return m_conduit_committee_street2_isSet;
}

bool OAIScheduleH4::is_conduit_committee_street2_Valid() const{
    return m_conduit_committee_street2_isValid;
}

qint32 OAIScheduleH4::getConduitCommitteeZip() const {
    return m_conduit_committee_zip;
}
void OAIScheduleH4::setConduitCommitteeZip(const qint32 &conduit_committee_zip) {
    m_conduit_committee_zip = conduit_committee_zip;
    m_conduit_committee_zip_isSet = true;
}

bool OAIScheduleH4::is_conduit_committee_zip_Set() const{
    return m_conduit_committee_zip_isSet;
}

bool OAIScheduleH4::is_conduit_committee_zip_Valid() const{
    return m_conduit_committee_zip_isValid;
}

double OAIScheduleH4::getCycle() const {
    return m_cycle;
}
void OAIScheduleH4::setCycle(const double &cycle) {
    m_cycle = cycle;
    m_cycle_isSet = true;
}

bool OAIScheduleH4::is_cycle_Set() const{
    return m_cycle_isSet;
}

bool OAIScheduleH4::is_cycle_Valid() const{
    return m_cycle_isValid;
}

QString OAIScheduleH4::getDirectCandidateSupportActivityIndicator() const {
    return m_direct_candidate_support_activity_indicator;
}
void OAIScheduleH4::setDirectCandidateSupportActivityIndicator(const QString &direct_candidate_support_activity_indicator) {
    m_direct_candidate_support_activity_indicator = direct_candidate_support_activity_indicator;
    m_direct_candidate_support_activity_indicator_isSet = true;
}

bool OAIScheduleH4::is_direct_candidate_support_activity_indicator_Set() const{
    return m_direct_candidate_support_activity_indicator_isSet;
}

bool OAIScheduleH4::is_direct_candidate_support_activity_indicator_Valid() const{
    return m_direct_candidate_support_activity_indicator_isValid;
}

double OAIScheduleH4::getDisbursementAmount() const {
    return m_disbursement_amount;
}
void OAIScheduleH4::setDisbursementAmount(const double &disbursement_amount) {
    m_disbursement_amount = disbursement_amount;
    m_disbursement_amount_isSet = true;
}

bool OAIScheduleH4::is_disbursement_amount_Set() const{
    return m_disbursement_amount_isSet;
}

bool OAIScheduleH4::is_disbursement_amount_Valid() const{
    return m_disbursement_amount_isValid;
}

QString OAIScheduleH4::getDisbursementType() const {
    return m_disbursement_type;
}
void OAIScheduleH4::setDisbursementType(const QString &disbursement_type) {
    m_disbursement_type = disbursement_type;
    m_disbursement_type_isSet = true;
}

bool OAIScheduleH4::is_disbursement_type_Set() const{
    return m_disbursement_type_isSet;
}

bool OAIScheduleH4::is_disbursement_type_Valid() const{
    return m_disbursement_type_isValid;
}

QString OAIScheduleH4::getDisbursementTypeFull() const {
    return m_disbursement_type_full;
}
void OAIScheduleH4::setDisbursementTypeFull(const QString &disbursement_type_full) {
    m_disbursement_type_full = disbursement_type_full;
    m_disbursement_type_full_isSet = true;
}

bool OAIScheduleH4::is_disbursement_type_full_Set() const{
    return m_disbursement_type_full_isSet;
}

bool OAIScheduleH4::is_disbursement_type_full_Valid() const{
    return m_disbursement_type_full_isValid;
}

QString OAIScheduleH4::getEntityType() const {
    return m_entity_type;
}
void OAIScheduleH4::setEntityType(const QString &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIScheduleH4::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIScheduleH4::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAIScheduleH4::getEntityTypeDesc() const {
    return m_entity_type_desc;
}
void OAIScheduleH4::setEntityTypeDesc(const QString &entity_type_desc) {
    m_entity_type_desc = entity_type_desc;
    m_entity_type_desc_isSet = true;
}

bool OAIScheduleH4::is_entity_type_desc_Set() const{
    return m_entity_type_desc_isSet;
}

bool OAIScheduleH4::is_entity_type_desc_Valid() const{
    return m_entity_type_desc_isValid;
}

double OAIScheduleH4::getEventAmountYearToDate() const {
    return m_event_amount_year_to_date;
}
void OAIScheduleH4::setEventAmountYearToDate(const double &event_amount_year_to_date) {
    m_event_amount_year_to_date = event_amount_year_to_date;
    m_event_amount_year_to_date_isSet = true;
}

bool OAIScheduleH4::is_event_amount_year_to_date_Set() const{
    return m_event_amount_year_to_date_isSet;
}

bool OAIScheduleH4::is_event_amount_year_to_date_Valid() const{
    return m_event_amount_year_to_date_isValid;
}

QString OAIScheduleH4::getEventPurposeCategoryType() const {
    return m_event_purpose_category_type;
}
void OAIScheduleH4::setEventPurposeCategoryType(const QString &event_purpose_category_type) {
    m_event_purpose_category_type = event_purpose_category_type;
    m_event_purpose_category_type_isSet = true;
}

bool OAIScheduleH4::is_event_purpose_category_type_Set() const{
    return m_event_purpose_category_type_isSet;
}

bool OAIScheduleH4::is_event_purpose_category_type_Valid() const{
    return m_event_purpose_category_type_isValid;
}

QString OAIScheduleH4::getEventPurposeCategoryTypeFull() const {
    return m_event_purpose_category_type_full;
}
void OAIScheduleH4::setEventPurposeCategoryTypeFull(const QString &event_purpose_category_type_full) {
    m_event_purpose_category_type_full = event_purpose_category_type_full;
    m_event_purpose_category_type_full_isSet = true;
}

bool OAIScheduleH4::is_event_purpose_category_type_full_Set() const{
    return m_event_purpose_category_type_full_isSet;
}

bool OAIScheduleH4::is_event_purpose_category_type_full_Valid() const{
    return m_event_purpose_category_type_full_isValid;
}

QDate OAIScheduleH4::getEventPurposeDate() const {
    return m_event_purpose_date;
}
void OAIScheduleH4::setEventPurposeDate(const QDate &event_purpose_date) {
    m_event_purpose_date = event_purpose_date;
    m_event_purpose_date_isSet = true;
}

bool OAIScheduleH4::is_event_purpose_date_Set() const{
    return m_event_purpose_date_isSet;
}

bool OAIScheduleH4::is_event_purpose_date_Valid() const{
    return m_event_purpose_date_isValid;
}

QString OAIScheduleH4::getEventPurposeDescription() const {
    return m_event_purpose_description;
}
void OAIScheduleH4::setEventPurposeDescription(const QString &event_purpose_description) {
    m_event_purpose_description = event_purpose_description;
    m_event_purpose_description_isSet = true;
}

bool OAIScheduleH4::is_event_purpose_description_Set() const{
    return m_event_purpose_description_isSet;
}

bool OAIScheduleH4::is_event_purpose_description_Valid() const{
    return m_event_purpose_description_isValid;
}

QString OAIScheduleH4::getEventPurposeName() const {
    return m_event_purpose_name;
}
void OAIScheduleH4::setEventPurposeName(const QString &event_purpose_name) {
    m_event_purpose_name = event_purpose_name;
    m_event_purpose_name_isSet = true;
}

bool OAIScheduleH4::is_event_purpose_name_Set() const{
    return m_event_purpose_name_isSet;
}

bool OAIScheduleH4::is_event_purpose_name_Valid() const{
    return m_event_purpose_name_isValid;
}

QString OAIScheduleH4::getExemptActivityIndicator() const {
    return m_exempt_activity_indicator;
}
void OAIScheduleH4::setExemptActivityIndicator(const QString &exempt_activity_indicator) {
    m_exempt_activity_indicator = exempt_activity_indicator;
    m_exempt_activity_indicator_isSet = true;
}

bool OAIScheduleH4::is_exempt_activity_indicator_Set() const{
    return m_exempt_activity_indicator_isSet;
}

bool OAIScheduleH4::is_exempt_activity_indicator_Valid() const{
    return m_exempt_activity_indicator_isValid;
}

double OAIScheduleH4::getFederalShare() const {
    return m_federal_share;
}
void OAIScheduleH4::setFederalShare(const double &federal_share) {
    m_federal_share = federal_share;
    m_federal_share_isSet = true;
}

bool OAIScheduleH4::is_federal_share_Set() const{
    return m_federal_share_isSet;
}

bool OAIScheduleH4::is_federal_share_Valid() const{
    return m_federal_share_isValid;
}

qint32 OAIScheduleH4::getFileNumber() const {
    return m_file_number;
}
void OAIScheduleH4::setFileNumber(const qint32 &file_number) {
    m_file_number = file_number;
    m_file_number_isSet = true;
}

bool OAIScheduleH4::is_file_number_Set() const{
    return m_file_number_isSet;
}

bool OAIScheduleH4::is_file_number_Valid() const{
    return m_file_number_isValid;
}

QString OAIScheduleH4::getFilerCommitteeName() const {
    return m_filer_committee_name;
}
void OAIScheduleH4::setFilerCommitteeName(const QString &filer_committee_name) {
    m_filer_committee_name = filer_committee_name;
    m_filer_committee_name_isSet = true;
}

bool OAIScheduleH4::is_filer_committee_name_Set() const{
    return m_filer_committee_name_isSet;
}

bool OAIScheduleH4::is_filer_committee_name_Valid() const{
    return m_filer_committee_name_isValid;
}

QString OAIScheduleH4::getFilingForm() const {
    return m_filing_form;
}
void OAIScheduleH4::setFilingForm(const QString &filing_form) {
    m_filing_form = filing_form;
    m_filing_form_isSet = true;
}

bool OAIScheduleH4::is_filing_form_Set() const{
    return m_filing_form_isSet;
}

bool OAIScheduleH4::is_filing_form_Valid() const{
    return m_filing_form_isValid;
}

QString OAIScheduleH4::getFundraisingActivityIndicator() const {
    return m_fundraising_activity_indicator;
}
void OAIScheduleH4::setFundraisingActivityIndicator(const QString &fundraising_activity_indicator) {
    m_fundraising_activity_indicator = fundraising_activity_indicator;
    m_fundraising_activity_indicator_isSet = true;
}

bool OAIScheduleH4::is_fundraising_activity_indicator_Set() const{
    return m_fundraising_activity_indicator_isSet;
}

bool OAIScheduleH4::is_fundraising_activity_indicator_Valid() const{
    return m_fundraising_activity_indicator_isValid;
}

QString OAIScheduleH4::getGeneralVoterDriveActivityIndicator() const {
    return m_general_voter_drive_activity_indicator;
}
void OAIScheduleH4::setGeneralVoterDriveActivityIndicator(const QString &general_voter_drive_activity_indicator) {
    m_general_voter_drive_activity_indicator = general_voter_drive_activity_indicator;
    m_general_voter_drive_activity_indicator_isSet = true;
}

bool OAIScheduleH4::is_general_voter_drive_activity_indicator_Set() const{
    return m_general_voter_drive_activity_indicator_isSet;
}

bool OAIScheduleH4::is_general_voter_drive_activity_indicator_Valid() const{
    return m_general_voter_drive_activity_indicator_isValid;
}

QString OAIScheduleH4::getImageNumber() const {
    return m_image_number;
}
void OAIScheduleH4::setImageNumber(const QString &image_number) {
    m_image_number = image_number;
    m_image_number_isSet = true;
}

bool OAIScheduleH4::is_image_number_Set() const{
    return m_image_number_isSet;
}

bool OAIScheduleH4::is_image_number_Valid() const{
    return m_image_number_isValid;
}

QString OAIScheduleH4::getLineNumber() const {
    return m_line_number;
}
void OAIScheduleH4::setLineNumber(const QString &line_number) {
    m_line_number = line_number;
    m_line_number_isSet = true;
}

bool OAIScheduleH4::is_line_number_Set() const{
    return m_line_number_isSet;
}

bool OAIScheduleH4::is_line_number_Valid() const{
    return m_line_number_isValid;
}

qint32 OAIScheduleH4::getLinkId() const {
    return m_link_id;
}
void OAIScheduleH4::setLinkId(const qint32 &link_id) {
    m_link_id = link_id;
    m_link_id_isSet = true;
}

bool OAIScheduleH4::is_link_id_Set() const{
    return m_link_id_isSet;
}

bool OAIScheduleH4::is_link_id_Valid() const{
    return m_link_id_isValid;
}

QDateTime OAIScheduleH4::getLoadDate() const {
    return m_load_date;
}
void OAIScheduleH4::setLoadDate(const QDateTime &load_date) {
    m_load_date = load_date;
    m_load_date_isSet = true;
}

bool OAIScheduleH4::is_load_date_Set() const{
    return m_load_date_isSet;
}

bool OAIScheduleH4::is_load_date_Valid() const{
    return m_load_date_isValid;
}

QString OAIScheduleH4::getMemoCode() const {
    return m_memo_code;
}
void OAIScheduleH4::setMemoCode(const QString &memo_code) {
    m_memo_code = memo_code;
    m_memo_code_isSet = true;
}

bool OAIScheduleH4::is_memo_code_Set() const{
    return m_memo_code_isSet;
}

bool OAIScheduleH4::is_memo_code_Valid() const{
    return m_memo_code_isValid;
}

QString OAIScheduleH4::getMemoCodeDescription() const {
    return m_memo_code_description;
}
void OAIScheduleH4::setMemoCodeDescription(const QString &memo_code_description) {
    m_memo_code_description = memo_code_description;
    m_memo_code_description_isSet = true;
}

bool OAIScheduleH4::is_memo_code_description_Set() const{
    return m_memo_code_description_isSet;
}

bool OAIScheduleH4::is_memo_code_description_Valid() const{
    return m_memo_code_description_isValid;
}

QString OAIScheduleH4::getMemoText() const {
    return m_memo_text;
}
void OAIScheduleH4::setMemoText(const QString &memo_text) {
    m_memo_text = memo_text;
    m_memo_text_isSet = true;
}

bool OAIScheduleH4::is_memo_text_Set() const{
    return m_memo_text_isSet;
}

bool OAIScheduleH4::is_memo_text_Valid() const{
    return m_memo_text_isValid;
}

double OAIScheduleH4::getNonfederalShare() const {
    return m_nonfederal_share;
}
void OAIScheduleH4::setNonfederalShare(const double &nonfederal_share) {
    m_nonfederal_share = nonfederal_share;
    m_nonfederal_share_isSet = true;
}

bool OAIScheduleH4::is_nonfederal_share_Set() const{
    return m_nonfederal_share_isSet;
}

bool OAIScheduleH4::is_nonfederal_share_Valid() const{
    return m_nonfederal_share_isValid;
}

QString OAIScheduleH4::getOriginalSubId() const {
    return m_original_sub_id;
}
void OAIScheduleH4::setOriginalSubId(const QString &original_sub_id) {
    m_original_sub_id = original_sub_id;
    m_original_sub_id_isSet = true;
}

bool OAIScheduleH4::is_original_sub_id_Set() const{
    return m_original_sub_id_isSet;
}

bool OAIScheduleH4::is_original_sub_id_Valid() const{
    return m_original_sub_id_isValid;
}

QString OAIScheduleH4::getPayeeCity() const {
    return m_payee_city;
}
void OAIScheduleH4::setPayeeCity(const QString &payee_city) {
    m_payee_city = payee_city;
    m_payee_city_isSet = true;
}

bool OAIScheduleH4::is_payee_city_Set() const{
    return m_payee_city_isSet;
}

bool OAIScheduleH4::is_payee_city_Valid() const{
    return m_payee_city_isValid;
}

QString OAIScheduleH4::getPayeeFirstName() const {
    return m_payee_first_name;
}
void OAIScheduleH4::setPayeeFirstName(const QString &payee_first_name) {
    m_payee_first_name = payee_first_name;
    m_payee_first_name_isSet = true;
}

bool OAIScheduleH4::is_payee_first_name_Set() const{
    return m_payee_first_name_isSet;
}

bool OAIScheduleH4::is_payee_first_name_Valid() const{
    return m_payee_first_name_isValid;
}

QString OAIScheduleH4::getPayeeLastName() const {
    return m_payee_last_name;
}
void OAIScheduleH4::setPayeeLastName(const QString &payee_last_name) {
    m_payee_last_name = payee_last_name;
    m_payee_last_name_isSet = true;
}

bool OAIScheduleH4::is_payee_last_name_Set() const{
    return m_payee_last_name_isSet;
}

bool OAIScheduleH4::is_payee_last_name_Valid() const{
    return m_payee_last_name_isValid;
}

QString OAIScheduleH4::getPayeeMiddleName() const {
    return m_payee_middle_name;
}
void OAIScheduleH4::setPayeeMiddleName(const QString &payee_middle_name) {
    m_payee_middle_name = payee_middle_name;
    m_payee_middle_name_isSet = true;
}

bool OAIScheduleH4::is_payee_middle_name_Set() const{
    return m_payee_middle_name_isSet;
}

bool OAIScheduleH4::is_payee_middle_name_Valid() const{
    return m_payee_middle_name_isValid;
}

QString OAIScheduleH4::getPayeeName() const {
    return m_payee_name;
}
void OAIScheduleH4::setPayeeName(const QString &payee_name) {
    m_payee_name = payee_name;
    m_payee_name_isSet = true;
}

bool OAIScheduleH4::is_payee_name_Set() const{
    return m_payee_name_isSet;
}

bool OAIScheduleH4::is_payee_name_Valid() const{
    return m_payee_name_isValid;
}

QString OAIScheduleH4::getPayeePrefix() const {
    return m_payee_prefix;
}
void OAIScheduleH4::setPayeePrefix(const QString &payee_prefix) {
    m_payee_prefix = payee_prefix;
    m_payee_prefix_isSet = true;
}

bool OAIScheduleH4::is_payee_prefix_Set() const{
    return m_payee_prefix_isSet;
}

bool OAIScheduleH4::is_payee_prefix_Valid() const{
    return m_payee_prefix_isValid;
}

QString OAIScheduleH4::getPayeeState() const {
    return m_payee_state;
}
void OAIScheduleH4::setPayeeState(const QString &payee_state) {
    m_payee_state = payee_state;
    m_payee_state_isSet = true;
}

bool OAIScheduleH4::is_payee_state_Set() const{
    return m_payee_state_isSet;
}

bool OAIScheduleH4::is_payee_state_Valid() const{
    return m_payee_state_isValid;
}

QString OAIScheduleH4::getPayeeSuffix() const {
    return m_payee_suffix;
}
void OAIScheduleH4::setPayeeSuffix(const QString &payee_suffix) {
    m_payee_suffix = payee_suffix;
    m_payee_suffix_isSet = true;
}

bool OAIScheduleH4::is_payee_suffix_Set() const{
    return m_payee_suffix_isSet;
}

bool OAIScheduleH4::is_payee_suffix_Valid() const{
    return m_payee_suffix_isValid;
}

QString OAIScheduleH4::getPayeeZip() const {
    return m_payee_zip;
}
void OAIScheduleH4::setPayeeZip(const QString &payee_zip) {
    m_payee_zip = payee_zip;
    m_payee_zip_isSet = true;
}

bool OAIScheduleH4::is_payee_zip_Set() const{
    return m_payee_zip_isSet;
}

bool OAIScheduleH4::is_payee_zip_Valid() const{
    return m_payee_zip_isValid;
}

QString OAIScheduleH4::getPublishedCommitteeReferenceParityCheck() const {
    return m_published_committee_reference_parity_check;
}
void OAIScheduleH4::setPublishedCommitteeReferenceParityCheck(const QString &published_committee_reference_parity_check) {
    m_published_committee_reference_parity_check = published_committee_reference_parity_check;
    m_published_committee_reference_parity_check_isSet = true;
}

bool OAIScheduleH4::is_published_committee_reference_parity_check_Set() const{
    return m_published_committee_reference_parity_check_isSet;
}

bool OAIScheduleH4::is_published_committee_reference_parity_check_Valid() const{
    return m_published_committee_reference_parity_check_isValid;
}

QString OAIScheduleH4::getReportType() const {
    return m_report_type;
}
void OAIScheduleH4::setReportType(const QString &report_type) {
    m_report_type = report_type;
    m_report_type_isSet = true;
}

bool OAIScheduleH4::is_report_type_Set() const{
    return m_report_type_isSet;
}

bool OAIScheduleH4::is_report_type_Valid() const{
    return m_report_type_isValid;
}

double OAIScheduleH4::getReportYear() const {
    return m_report_year;
}
void OAIScheduleH4::setReportYear(const double &report_year) {
    m_report_year = report_year;
    m_report_year_isSet = true;
}

bool OAIScheduleH4::is_report_year_Set() const{
    return m_report_year_isSet;
}

bool OAIScheduleH4::is_report_year_Valid() const{
    return m_report_year_isValid;
}

QString OAIScheduleH4::getScheduleType() const {
    return m_schedule_type;
}
void OAIScheduleH4::setScheduleType(const QString &schedule_type) {
    m_schedule_type = schedule_type;
    m_schedule_type_isSet = true;
}

bool OAIScheduleH4::is_schedule_type_Set() const{
    return m_schedule_type_isSet;
}

bool OAIScheduleH4::is_schedule_type_Valid() const{
    return m_schedule_type_isValid;
}

QString OAIScheduleH4::getScheduleTypeFull() const {
    return m_schedule_type_full;
}
void OAIScheduleH4::setScheduleTypeFull(const QString &schedule_type_full) {
    m_schedule_type_full = schedule_type_full;
    m_schedule_type_full_isSet = true;
}

bool OAIScheduleH4::is_schedule_type_full_Set() const{
    return m_schedule_type_full_isSet;
}

bool OAIScheduleH4::is_schedule_type_full_Valid() const{
    return m_schedule_type_full_isValid;
}

QString OAIScheduleH4::getSubId() const {
    return m_sub_id;
}
void OAIScheduleH4::setSubId(const QString &sub_id) {
    m_sub_id = sub_id;
    m_sub_id_isSet = true;
}

bool OAIScheduleH4::is_sub_id_Set() const{
    return m_sub_id_isSet;
}

bool OAIScheduleH4::is_sub_id_Valid() const{
    return m_sub_id_isValid;
}

QString OAIScheduleH4::getTransactionId() const {
    return m_transaction_id;
}
void OAIScheduleH4::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAIScheduleH4::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAIScheduleH4::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

bool OAIScheduleH4::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_administrative_activity_inidcator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_administrative_voter_drive_activity_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amendment_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amendment_indicator_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_back_reference_schedule_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_back_reference_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_office_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_office_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_office_district_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_office_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidate_office_state_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_code_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conduit_committee_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conduit_committee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conduit_committee_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conduit_committee_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conduit_committee_street1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conduit_committee_street2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conduit_committee_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cycle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_candidate_support_activity_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disbursement_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disbursement_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disbursement_type_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_amount_year_to_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_purpose_category_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_purpose_category_type_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_purpose_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_purpose_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_purpose_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exempt_activity_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_federal_share_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filer_committee_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filing_form_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fundraising_activity_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_general_voter_drive_activity_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memo_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memo_code_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memo_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nonfederal_share_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_sub_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_middle_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_committee_reference_parity_check_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_type_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduleH4::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
