/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIElectionDate.h
 *
 * 
 */

#ifndef OAIElectionDate_H
#define OAIElectionDate_H

#include <QJsonObject>

#include <QDate>
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIElectionDate : public OAIObject {
public:
    OAIElectionDate();
    OAIElectionDate(QString json);
    ~OAIElectionDate() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isActiveElection() const;
    void setActiveElection(const bool &active_election);
    bool is_active_election_Set() const;
    bool is_active_election_Valid() const;

    QDateTime getCreateDate() const;
    void setCreateDate(const QDateTime &create_date);
    bool is_create_date_Set() const;
    bool is_create_date_Valid() const;

    QDate getElectionDate() const;
    void setElectionDate(const QDate &election_date);
    bool is_election_date_Set() const;
    bool is_election_date_Valid() const;

    qint32 getElectionDistrict() const;
    void setElectionDistrict(const qint32 &election_district);
    bool is_election_district_Set() const;
    bool is_election_district_Valid() const;

    QString getElectionNotes() const;
    void setElectionNotes(const QString &election_notes);
    bool is_election_notes_Set() const;
    bool is_election_notes_Valid() const;

    QString getElectionParty() const;
    void setElectionParty(const QString &election_party);
    bool is_election_party_Set() const;
    bool is_election_party_Valid() const;

    QString getElectionState() const;
    void setElectionState(const QString &election_state);
    bool is_election_state_Set() const;
    bool is_election_state_Valid() const;

    QString getElectionTypeFull() const;
    void setElectionTypeFull(const QString &election_type_full);
    bool is_election_type_full_Set() const;
    bool is_election_type_full_Valid() const;

    QString getElectionTypeId() const;
    void setElectionTypeId(const QString &election_type_id);
    bool is_election_type_id_Set() const;
    bool is_election_type_id_Valid() const;

    qint32 getElectionYear() const;
    void setElectionYear(const qint32 &election_year);
    bool is_election_year_Set() const;
    bool is_election_year_Valid() const;

    QString getOfficeSought() const;
    void setOfficeSought(const QString &office_sought);
    bool is_office_sought_Set() const;
    bool is_office_sought_Valid() const;

    QDate getPrimaryGeneralDate() const;
    void setPrimaryGeneralDate(const QDate &primary_general_date);
    bool is_primary_general_date_Set() const;
    bool is_primary_general_date_Valid() const;

    QDateTime getUpdateDate() const;
    void setUpdateDate(const QDateTime &update_date);
    bool is_update_date_Set() const;
    bool is_update_date_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_active_election;
    bool m_active_election_isSet;
    bool m_active_election_isValid;

    QDateTime m_create_date;
    bool m_create_date_isSet;
    bool m_create_date_isValid;

    QDate m_election_date;
    bool m_election_date_isSet;
    bool m_election_date_isValid;

    qint32 m_election_district;
    bool m_election_district_isSet;
    bool m_election_district_isValid;

    QString m_election_notes;
    bool m_election_notes_isSet;
    bool m_election_notes_isValid;

    QString m_election_party;
    bool m_election_party_isSet;
    bool m_election_party_isValid;

    QString m_election_state;
    bool m_election_state_isSet;
    bool m_election_state_isValid;

    QString m_election_type_full;
    bool m_election_type_full_isSet;
    bool m_election_type_full_isValid;

    QString m_election_type_id;
    bool m_election_type_id_isSet;
    bool m_election_type_id_isValid;

    qint32 m_election_year;
    bool m_election_year_isSet;
    bool m_election_year_isValid;

    QString m_office_sought;
    bool m_office_sought_isSet;
    bool m_office_sought_isValid;

    QDate m_primary_general_date;
    bool m_primary_general_date_isSet;
    bool m_primary_general_date_isValid;

    QDateTime m_update_date;
    bool m_update_date_isSet;
    bool m_update_date_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIElectionDate)

#endif // OAIElectionDate_H
