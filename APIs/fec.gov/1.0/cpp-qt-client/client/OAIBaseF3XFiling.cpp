/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBaseF3XFiling.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBaseF3XFiling::OAIBaseF3XFiling(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBaseF3XFiling::OAIBaseF3XFiling() {
    this->initializeModel();
}

OAIBaseF3XFiling::~OAIBaseF3XFiling() {}

void OAIBaseF3XFiling::initializeModel() {

    m_amend_address_isSet = false;
    m_amend_address_isValid = false;

    m_amended_by_isSet = false;
    m_amended_by_isValid = false;

    m_amendment_isSet = false;
    m_amendment_isValid = false;

    m_amendment_chain_isSet = false;
    m_amendment_chain_isValid = false;

    m_beginning_image_number_isSet = false;
    m_beginning_image_number_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_committee_id_isSet = false;
    m_committee_id_isValid = false;

    m_committee_name_isSet = false;
    m_committee_name_isValid = false;

    m_coverage_end_date_isSet = false;
    m_coverage_end_date_isValid = false;

    m_coverage_start_date_isSet = false;
    m_coverage_start_date_isValid = false;

    m_csv_url_isSet = false;
    m_csv_url_isValid = false;

    m_document_description_isSet = false;
    m_document_description_isValid = false;

    m_election_date_isSet = false;
    m_election_date_isValid = false;

    m_election_state_isSet = false;
    m_election_state_isValid = false;

    m_fec_file_id_isSet = false;
    m_fec_file_id_isValid = false;

    m_fec_url_isSet = false;
    m_fec_url_isValid = false;

    m_file_number_isSet = false;
    m_file_number_isValid = false;

    m_is_amended_isSet = false;
    m_is_amended_isValid = false;

    m_most_recent_isSet = false;
    m_most_recent_isValid = false;

    m_most_recent_filing_isSet = false;
    m_most_recent_filing_isValid = false;

    m_pdf_url_isSet = false;
    m_pdf_url_isValid = false;

    m_qualified_multicandidate_committee_isSet = false;
    m_qualified_multicandidate_committee_isValid = false;

    m_receipt_date_isSet = false;
    m_receipt_date_isValid = false;

    m_report_isSet = false;
    m_report_isValid = false;

    m_report_type_isSet = false;
    m_report_type_isValid = false;

    m_report_year_isSet = false;
    m_report_year_isValid = false;

    m_rpt_pgi_isSet = false;
    m_rpt_pgi_isValid = false;

    m_sign_date_isSet = false;
    m_sign_date_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_street_1_isSet = false;
    m_street_1_isValid = false;

    m_street_2_isSet = false;
    m_street_2_isValid = false;

    m_summary_lines_isSet = false;
    m_summary_lines_isValid = false;

    m_zip_isSet = false;
    m_zip_isValid = false;
}

void OAIBaseF3XFiling::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBaseF3XFiling::fromJsonObject(QJsonObject json) {

    m_amend_address_isValid = ::OpenAPI::fromJsonValue(m_amend_address, json[QString("amend_address")]);
    m_amend_address_isSet = !json[QString("amend_address")].isNull() && m_amend_address_isValid;

    m_amended_by_isValid = ::OpenAPI::fromJsonValue(m_amended_by, json[QString("amended_by")]);
    m_amended_by_isSet = !json[QString("amended_by")].isNull() && m_amended_by_isValid;

    m_amendment_isValid = ::OpenAPI::fromJsonValue(m_amendment, json[QString("amendment")]);
    m_amendment_isSet = !json[QString("amendment")].isNull() && m_amendment_isValid;

    m_amendment_chain_isValid = ::OpenAPI::fromJsonValue(m_amendment_chain, json[QString("amendment_chain")]);
    m_amendment_chain_isSet = !json[QString("amendment_chain")].isNull() && m_amendment_chain_isValid;

    m_beginning_image_number_isValid = ::OpenAPI::fromJsonValue(m_beginning_image_number, json[QString("beginning_image_number")]);
    m_beginning_image_number_isSet = !json[QString("beginning_image_number")].isNull() && m_beginning_image_number_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_committee_id_isValid = ::OpenAPI::fromJsonValue(m_committee_id, json[QString("committee_id")]);
    m_committee_id_isSet = !json[QString("committee_id")].isNull() && m_committee_id_isValid;

    m_committee_name_isValid = ::OpenAPI::fromJsonValue(m_committee_name, json[QString("committee_name")]);
    m_committee_name_isSet = !json[QString("committee_name")].isNull() && m_committee_name_isValid;

    m_coverage_end_date_isValid = ::OpenAPI::fromJsonValue(m_coverage_end_date, json[QString("coverage_end_date")]);
    m_coverage_end_date_isSet = !json[QString("coverage_end_date")].isNull() && m_coverage_end_date_isValid;

    m_coverage_start_date_isValid = ::OpenAPI::fromJsonValue(m_coverage_start_date, json[QString("coverage_start_date")]);
    m_coverage_start_date_isSet = !json[QString("coverage_start_date")].isNull() && m_coverage_start_date_isValid;

    m_csv_url_isValid = ::OpenAPI::fromJsonValue(m_csv_url, json[QString("csv_url")]);
    m_csv_url_isSet = !json[QString("csv_url")].isNull() && m_csv_url_isValid;

    m_document_description_isValid = ::OpenAPI::fromJsonValue(m_document_description, json[QString("document_description")]);
    m_document_description_isSet = !json[QString("document_description")].isNull() && m_document_description_isValid;

    m_election_date_isValid = ::OpenAPI::fromJsonValue(m_election_date, json[QString("election_date")]);
    m_election_date_isSet = !json[QString("election_date")].isNull() && m_election_date_isValid;

    m_election_state_isValid = ::OpenAPI::fromJsonValue(m_election_state, json[QString("election_state")]);
    m_election_state_isSet = !json[QString("election_state")].isNull() && m_election_state_isValid;

    m_fec_file_id_isValid = ::OpenAPI::fromJsonValue(m_fec_file_id, json[QString("fec_file_id")]);
    m_fec_file_id_isSet = !json[QString("fec_file_id")].isNull() && m_fec_file_id_isValid;

    m_fec_url_isValid = ::OpenAPI::fromJsonValue(m_fec_url, json[QString("fec_url")]);
    m_fec_url_isSet = !json[QString("fec_url")].isNull() && m_fec_url_isValid;

    m_file_number_isValid = ::OpenAPI::fromJsonValue(m_file_number, json[QString("file_number")]);
    m_file_number_isSet = !json[QString("file_number")].isNull() && m_file_number_isValid;

    m_is_amended_isValid = ::OpenAPI::fromJsonValue(m_is_amended, json[QString("is_amended")]);
    m_is_amended_isSet = !json[QString("is_amended")].isNull() && m_is_amended_isValid;

    m_most_recent_isValid = ::OpenAPI::fromJsonValue(m_most_recent, json[QString("most_recent")]);
    m_most_recent_isSet = !json[QString("most_recent")].isNull() && m_most_recent_isValid;

    m_most_recent_filing_isValid = ::OpenAPI::fromJsonValue(m_most_recent_filing, json[QString("most_recent_filing")]);
    m_most_recent_filing_isSet = !json[QString("most_recent_filing")].isNull() && m_most_recent_filing_isValid;

    m_pdf_url_isValid = ::OpenAPI::fromJsonValue(m_pdf_url, json[QString("pdf_url")]);
    m_pdf_url_isSet = !json[QString("pdf_url")].isNull() && m_pdf_url_isValid;

    m_qualified_multicandidate_committee_isValid = ::OpenAPI::fromJsonValue(m_qualified_multicandidate_committee, json[QString("qualified_multicandidate_committee")]);
    m_qualified_multicandidate_committee_isSet = !json[QString("qualified_multicandidate_committee")].isNull() && m_qualified_multicandidate_committee_isValid;

    m_receipt_date_isValid = ::OpenAPI::fromJsonValue(m_receipt_date, json[QString("receipt_date")]);
    m_receipt_date_isSet = !json[QString("receipt_date")].isNull() && m_receipt_date_isValid;

    m_report_isValid = ::OpenAPI::fromJsonValue(m_report, json[QString("report")]);
    m_report_isSet = !json[QString("report")].isNull() && m_report_isValid;

    m_report_type_isValid = ::OpenAPI::fromJsonValue(m_report_type, json[QString("report_type")]);
    m_report_type_isSet = !json[QString("report_type")].isNull() && m_report_type_isValid;

    m_report_year_isValid = ::OpenAPI::fromJsonValue(m_report_year, json[QString("report_year")]);
    m_report_year_isSet = !json[QString("report_year")].isNull() && m_report_year_isValid;

    m_rpt_pgi_isValid = ::OpenAPI::fromJsonValue(m_rpt_pgi, json[QString("rpt_pgi")]);
    m_rpt_pgi_isSet = !json[QString("rpt_pgi")].isNull() && m_rpt_pgi_isValid;

    m_sign_date_isValid = ::OpenAPI::fromJsonValue(m_sign_date, json[QString("sign_date")]);
    m_sign_date_isSet = !json[QString("sign_date")].isNull() && m_sign_date_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_street_1_isValid = ::OpenAPI::fromJsonValue(m_street_1, json[QString("street_1")]);
    m_street_1_isSet = !json[QString("street_1")].isNull() && m_street_1_isValid;

    m_street_2_isValid = ::OpenAPI::fromJsonValue(m_street_2, json[QString("street_2")]);
    m_street_2_isSet = !json[QString("street_2")].isNull() && m_street_2_isValid;

    m_summary_lines_isValid = ::OpenAPI::fromJsonValue(m_summary_lines, json[QString("summary_lines")]);
    m_summary_lines_isSet = !json[QString("summary_lines")].isNull() && m_summary_lines_isValid;

    m_zip_isValid = ::OpenAPI::fromJsonValue(m_zip, json[QString("zip")]);
    m_zip_isSet = !json[QString("zip")].isNull() && m_zip_isValid;
}

QString OAIBaseF3XFiling::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBaseF3XFiling::asJsonObject() const {
    QJsonObject obj;
    if (m_amend_address_isSet) {
        obj.insert(QString("amend_address"), ::OpenAPI::toJsonValue(m_amend_address));
    }
    if (m_amended_by_isSet) {
        obj.insert(QString("amended_by"), ::OpenAPI::toJsonValue(m_amended_by));
    }
    if (m_amendment_isSet) {
        obj.insert(QString("amendment"), ::OpenAPI::toJsonValue(m_amendment));
    }
    if (m_amendment_chain.size() > 0) {
        obj.insert(QString("amendment_chain"), ::OpenAPI::toJsonValue(m_amendment_chain));
    }
    if (m_beginning_image_number_isSet) {
        obj.insert(QString("beginning_image_number"), ::OpenAPI::toJsonValue(m_beginning_image_number));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_committee_id_isSet) {
        obj.insert(QString("committee_id"), ::OpenAPI::toJsonValue(m_committee_id));
    }
    if (m_committee_name_isSet) {
        obj.insert(QString("committee_name"), ::OpenAPI::toJsonValue(m_committee_name));
    }
    if (m_coverage_end_date_isSet) {
        obj.insert(QString("coverage_end_date"), ::OpenAPI::toJsonValue(m_coverage_end_date));
    }
    if (m_coverage_start_date_isSet) {
        obj.insert(QString("coverage_start_date"), ::OpenAPI::toJsonValue(m_coverage_start_date));
    }
    if (m_csv_url_isSet) {
        obj.insert(QString("csv_url"), ::OpenAPI::toJsonValue(m_csv_url));
    }
    if (m_document_description_isSet) {
        obj.insert(QString("document_description"), ::OpenAPI::toJsonValue(m_document_description));
    }
    if (m_election_date_isSet) {
        obj.insert(QString("election_date"), ::OpenAPI::toJsonValue(m_election_date));
    }
    if (m_election_state_isSet) {
        obj.insert(QString("election_state"), ::OpenAPI::toJsonValue(m_election_state));
    }
    if (m_fec_file_id_isSet) {
        obj.insert(QString("fec_file_id"), ::OpenAPI::toJsonValue(m_fec_file_id));
    }
    if (m_fec_url_isSet) {
        obj.insert(QString("fec_url"), ::OpenAPI::toJsonValue(m_fec_url));
    }
    if (m_file_number_isSet) {
        obj.insert(QString("file_number"), ::OpenAPI::toJsonValue(m_file_number));
    }
    if (m_is_amended_isSet) {
        obj.insert(QString("is_amended"), ::OpenAPI::toJsonValue(m_is_amended));
    }
    if (m_most_recent_isSet) {
        obj.insert(QString("most_recent"), ::OpenAPI::toJsonValue(m_most_recent));
    }
    if (m_most_recent_filing_isSet) {
        obj.insert(QString("most_recent_filing"), ::OpenAPI::toJsonValue(m_most_recent_filing));
    }
    if (m_pdf_url_isSet) {
        obj.insert(QString("pdf_url"), ::OpenAPI::toJsonValue(m_pdf_url));
    }
    if (m_qualified_multicandidate_committee_isSet) {
        obj.insert(QString("qualified_multicandidate_committee"), ::OpenAPI::toJsonValue(m_qualified_multicandidate_committee));
    }
    if (m_receipt_date_isSet) {
        obj.insert(QString("receipt_date"), ::OpenAPI::toJsonValue(m_receipt_date));
    }
    if (m_report_isSet) {
        obj.insert(QString("report"), ::OpenAPI::toJsonValue(m_report));
    }
    if (m_report_type_isSet) {
        obj.insert(QString("report_type"), ::OpenAPI::toJsonValue(m_report_type));
    }
    if (m_report_year_isSet) {
        obj.insert(QString("report_year"), ::OpenAPI::toJsonValue(m_report_year));
    }
    if (m_rpt_pgi_isSet) {
        obj.insert(QString("rpt_pgi"), ::OpenAPI::toJsonValue(m_rpt_pgi));
    }
    if (m_sign_date_isSet) {
        obj.insert(QString("sign_date"), ::OpenAPI::toJsonValue(m_sign_date));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_street_1_isSet) {
        obj.insert(QString("street_1"), ::OpenAPI::toJsonValue(m_street_1));
    }
    if (m_street_2_isSet) {
        obj.insert(QString("street_2"), ::OpenAPI::toJsonValue(m_street_2));
    }
    if (m_summary_lines_isSet) {
        obj.insert(QString("summary_lines"), ::OpenAPI::toJsonValue(m_summary_lines));
    }
    if (m_zip_isSet) {
        obj.insert(QString("zip"), ::OpenAPI::toJsonValue(m_zip));
    }
    return obj;
}

QString OAIBaseF3XFiling::getAmendAddress() const {
    return m_amend_address;
}
void OAIBaseF3XFiling::setAmendAddress(const QString &amend_address) {
    m_amend_address = amend_address;
    m_amend_address_isSet = true;
}

bool OAIBaseF3XFiling::is_amend_address_Set() const{
    return m_amend_address_isSet;
}

bool OAIBaseF3XFiling::is_amend_address_Valid() const{
    return m_amend_address_isValid;
}

qint32 OAIBaseF3XFiling::getAmendedBy() const {
    return m_amended_by;
}
void OAIBaseF3XFiling::setAmendedBy(const qint32 &amended_by) {
    m_amended_by = amended_by;
    m_amended_by_isSet = true;
}

bool OAIBaseF3XFiling::is_amended_by_Set() const{
    return m_amended_by_isSet;
}

bool OAIBaseF3XFiling::is_amended_by_Valid() const{
    return m_amended_by_isValid;
}

QString OAIBaseF3XFiling::getAmendment() const {
    return m_amendment;
}
void OAIBaseF3XFiling::setAmendment(const QString &amendment) {
    m_amendment = amendment;
    m_amendment_isSet = true;
}

bool OAIBaseF3XFiling::is_amendment_Set() const{
    return m_amendment_isSet;
}

bool OAIBaseF3XFiling::is_amendment_Valid() const{
    return m_amendment_isValid;
}

QList<qint32> OAIBaseF3XFiling::getAmendmentChain() const {
    return m_amendment_chain;
}
void OAIBaseF3XFiling::setAmendmentChain(const QList<qint32> &amendment_chain) {
    m_amendment_chain = amendment_chain;
    m_amendment_chain_isSet = true;
}

bool OAIBaseF3XFiling::is_amendment_chain_Set() const{
    return m_amendment_chain_isSet;
}

bool OAIBaseF3XFiling::is_amendment_chain_Valid() const{
    return m_amendment_chain_isValid;
}

QString OAIBaseF3XFiling::getBeginningImageNumber() const {
    return m_beginning_image_number;
}
void OAIBaseF3XFiling::setBeginningImageNumber(const QString &beginning_image_number) {
    m_beginning_image_number = beginning_image_number;
    m_beginning_image_number_isSet = true;
}

bool OAIBaseF3XFiling::is_beginning_image_number_Set() const{
    return m_beginning_image_number_isSet;
}

bool OAIBaseF3XFiling::is_beginning_image_number_Valid() const{
    return m_beginning_image_number_isValid;
}

QString OAIBaseF3XFiling::getCity() const {
    return m_city;
}
void OAIBaseF3XFiling::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIBaseF3XFiling::is_city_Set() const{
    return m_city_isSet;
}

bool OAIBaseF3XFiling::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIBaseF3XFiling::getCommitteeId() const {
    return m_committee_id;
}
void OAIBaseF3XFiling::setCommitteeId(const QString &committee_id) {
    m_committee_id = committee_id;
    m_committee_id_isSet = true;
}

bool OAIBaseF3XFiling::is_committee_id_Set() const{
    return m_committee_id_isSet;
}

bool OAIBaseF3XFiling::is_committee_id_Valid() const{
    return m_committee_id_isValid;
}

QString OAIBaseF3XFiling::getCommitteeName() const {
    return m_committee_name;
}
void OAIBaseF3XFiling::setCommitteeName(const QString &committee_name) {
    m_committee_name = committee_name;
    m_committee_name_isSet = true;
}

bool OAIBaseF3XFiling::is_committee_name_Set() const{
    return m_committee_name_isSet;
}

bool OAIBaseF3XFiling::is_committee_name_Valid() const{
    return m_committee_name_isValid;
}

QDate OAIBaseF3XFiling::getCoverageEndDate() const {
    return m_coverage_end_date;
}
void OAIBaseF3XFiling::setCoverageEndDate(const QDate &coverage_end_date) {
    m_coverage_end_date = coverage_end_date;
    m_coverage_end_date_isSet = true;
}

bool OAIBaseF3XFiling::is_coverage_end_date_Set() const{
    return m_coverage_end_date_isSet;
}

bool OAIBaseF3XFiling::is_coverage_end_date_Valid() const{
    return m_coverage_end_date_isValid;
}

QDate OAIBaseF3XFiling::getCoverageStartDate() const {
    return m_coverage_start_date;
}
void OAIBaseF3XFiling::setCoverageStartDate(const QDate &coverage_start_date) {
    m_coverage_start_date = coverage_start_date;
    m_coverage_start_date_isSet = true;
}

bool OAIBaseF3XFiling::is_coverage_start_date_Set() const{
    return m_coverage_start_date_isSet;
}

bool OAIBaseF3XFiling::is_coverage_start_date_Valid() const{
    return m_coverage_start_date_isValid;
}

QString OAIBaseF3XFiling::getCsvUrl() const {
    return m_csv_url;
}
void OAIBaseF3XFiling::setCsvUrl(const QString &csv_url) {
    m_csv_url = csv_url;
    m_csv_url_isSet = true;
}

bool OAIBaseF3XFiling::is_csv_url_Set() const{
    return m_csv_url_isSet;
}

bool OAIBaseF3XFiling::is_csv_url_Valid() const{
    return m_csv_url_isValid;
}

QString OAIBaseF3XFiling::getDocumentDescription() const {
    return m_document_description;
}
void OAIBaseF3XFiling::setDocumentDescription(const QString &document_description) {
    m_document_description = document_description;
    m_document_description_isSet = true;
}

bool OAIBaseF3XFiling::is_document_description_Set() const{
    return m_document_description_isSet;
}

bool OAIBaseF3XFiling::is_document_description_Valid() const{
    return m_document_description_isValid;
}

QDate OAIBaseF3XFiling::getElectionDate() const {
    return m_election_date;
}
void OAIBaseF3XFiling::setElectionDate(const QDate &election_date) {
    m_election_date = election_date;
    m_election_date_isSet = true;
}

bool OAIBaseF3XFiling::is_election_date_Set() const{
    return m_election_date_isSet;
}

bool OAIBaseF3XFiling::is_election_date_Valid() const{
    return m_election_date_isValid;
}

QString OAIBaseF3XFiling::getElectionState() const {
    return m_election_state;
}
void OAIBaseF3XFiling::setElectionState(const QString &election_state) {
    m_election_state = election_state;
    m_election_state_isSet = true;
}

bool OAIBaseF3XFiling::is_election_state_Set() const{
    return m_election_state_isSet;
}

bool OAIBaseF3XFiling::is_election_state_Valid() const{
    return m_election_state_isValid;
}

QString OAIBaseF3XFiling::getFecFileId() const {
    return m_fec_file_id;
}
void OAIBaseF3XFiling::setFecFileId(const QString &fec_file_id) {
    m_fec_file_id = fec_file_id;
    m_fec_file_id_isSet = true;
}

bool OAIBaseF3XFiling::is_fec_file_id_Set() const{
    return m_fec_file_id_isSet;
}

bool OAIBaseF3XFiling::is_fec_file_id_Valid() const{
    return m_fec_file_id_isValid;
}

QString OAIBaseF3XFiling::getFecUrl() const {
    return m_fec_url;
}
void OAIBaseF3XFiling::setFecUrl(const QString &fec_url) {
    m_fec_url = fec_url;
    m_fec_url_isSet = true;
}

bool OAIBaseF3XFiling::is_fec_url_Set() const{
    return m_fec_url_isSet;
}

bool OAIBaseF3XFiling::is_fec_url_Valid() const{
    return m_fec_url_isValid;
}

qint32 OAIBaseF3XFiling::getFileNumber() const {
    return m_file_number;
}
void OAIBaseF3XFiling::setFileNumber(const qint32 &file_number) {
    m_file_number = file_number;
    m_file_number_isSet = true;
}

bool OAIBaseF3XFiling::is_file_number_Set() const{
    return m_file_number_isSet;
}

bool OAIBaseF3XFiling::is_file_number_Valid() const{
    return m_file_number_isValid;
}

bool OAIBaseF3XFiling::isIsAmended() const {
    return m_is_amended;
}
void OAIBaseF3XFiling::setIsAmended(const bool &is_amended) {
    m_is_amended = is_amended;
    m_is_amended_isSet = true;
}

bool OAIBaseF3XFiling::is_is_amended_Set() const{
    return m_is_amended_isSet;
}

bool OAIBaseF3XFiling::is_is_amended_Valid() const{
    return m_is_amended_isValid;
}

bool OAIBaseF3XFiling::isMostRecent() const {
    return m_most_recent;
}
void OAIBaseF3XFiling::setMostRecent(const bool &most_recent) {
    m_most_recent = most_recent;
    m_most_recent_isSet = true;
}

bool OAIBaseF3XFiling::is_most_recent_Set() const{
    return m_most_recent_isSet;
}

bool OAIBaseF3XFiling::is_most_recent_Valid() const{
    return m_most_recent_isValid;
}

qint32 OAIBaseF3XFiling::getMostRecentFiling() const {
    return m_most_recent_filing;
}
void OAIBaseF3XFiling::setMostRecentFiling(const qint32 &most_recent_filing) {
    m_most_recent_filing = most_recent_filing;
    m_most_recent_filing_isSet = true;
}

bool OAIBaseF3XFiling::is_most_recent_filing_Set() const{
    return m_most_recent_filing_isSet;
}

bool OAIBaseF3XFiling::is_most_recent_filing_Valid() const{
    return m_most_recent_filing_isValid;
}

QString OAIBaseF3XFiling::getPdfUrl() const {
    return m_pdf_url;
}
void OAIBaseF3XFiling::setPdfUrl(const QString &pdf_url) {
    m_pdf_url = pdf_url;
    m_pdf_url_isSet = true;
}

bool OAIBaseF3XFiling::is_pdf_url_Set() const{
    return m_pdf_url_isSet;
}

bool OAIBaseF3XFiling::is_pdf_url_Valid() const{
    return m_pdf_url_isValid;
}

QString OAIBaseF3XFiling::getQualifiedMulticandidateCommittee() const {
    return m_qualified_multicandidate_committee;
}
void OAIBaseF3XFiling::setQualifiedMulticandidateCommittee(const QString &qualified_multicandidate_committee) {
    m_qualified_multicandidate_committee = qualified_multicandidate_committee;
    m_qualified_multicandidate_committee_isSet = true;
}

bool OAIBaseF3XFiling::is_qualified_multicandidate_committee_Set() const{
    return m_qualified_multicandidate_committee_isSet;
}

bool OAIBaseF3XFiling::is_qualified_multicandidate_committee_Valid() const{
    return m_qualified_multicandidate_committee_isValid;
}

QDate OAIBaseF3XFiling::getReceiptDate() const {
    return m_receipt_date;
}
void OAIBaseF3XFiling::setReceiptDate(const QDate &receipt_date) {
    m_receipt_date = receipt_date;
    m_receipt_date_isSet = true;
}

bool OAIBaseF3XFiling::is_receipt_date_Set() const{
    return m_receipt_date_isSet;
}

bool OAIBaseF3XFiling::is_receipt_date_Valid() const{
    return m_receipt_date_isValid;
}

QString OAIBaseF3XFiling::getReport() const {
    return m_report;
}
void OAIBaseF3XFiling::setReport(const QString &report) {
    m_report = report;
    m_report_isSet = true;
}

bool OAIBaseF3XFiling::is_report_Set() const{
    return m_report_isSet;
}

bool OAIBaseF3XFiling::is_report_Valid() const{
    return m_report_isValid;
}

QString OAIBaseF3XFiling::getReportType() const {
    return m_report_type;
}
void OAIBaseF3XFiling::setReportType(const QString &report_type) {
    m_report_type = report_type;
    m_report_type_isSet = true;
}

bool OAIBaseF3XFiling::is_report_type_Set() const{
    return m_report_type_isSet;
}

bool OAIBaseF3XFiling::is_report_type_Valid() const{
    return m_report_type_isValid;
}

qint32 OAIBaseF3XFiling::getReportYear() const {
    return m_report_year;
}
void OAIBaseF3XFiling::setReportYear(const qint32 &report_year) {
    m_report_year = report_year;
    m_report_year_isSet = true;
}

bool OAIBaseF3XFiling::is_report_year_Set() const{
    return m_report_year_isSet;
}

bool OAIBaseF3XFiling::is_report_year_Valid() const{
    return m_report_year_isValid;
}

QString OAIBaseF3XFiling::getRptPgi() const {
    return m_rpt_pgi;
}
void OAIBaseF3XFiling::setRptPgi(const QString &rpt_pgi) {
    m_rpt_pgi = rpt_pgi;
    m_rpt_pgi_isSet = true;
}

bool OAIBaseF3XFiling::is_rpt_pgi_Set() const{
    return m_rpt_pgi_isSet;
}

bool OAIBaseF3XFiling::is_rpt_pgi_Valid() const{
    return m_rpt_pgi_isValid;
}

QDate OAIBaseF3XFiling::getSignDate() const {
    return m_sign_date;
}
void OAIBaseF3XFiling::setSignDate(const QDate &sign_date) {
    m_sign_date = sign_date;
    m_sign_date_isSet = true;
}

bool OAIBaseF3XFiling::is_sign_date_Set() const{
    return m_sign_date_isSet;
}

bool OAIBaseF3XFiling::is_sign_date_Valid() const{
    return m_sign_date_isValid;
}

QString OAIBaseF3XFiling::getState() const {
    return m_state;
}
void OAIBaseF3XFiling::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIBaseF3XFiling::is_state_Set() const{
    return m_state_isSet;
}

bool OAIBaseF3XFiling::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIBaseF3XFiling::getStreet1() const {
    return m_street_1;
}
void OAIBaseF3XFiling::setStreet1(const QString &street_1) {
    m_street_1 = street_1;
    m_street_1_isSet = true;
}

bool OAIBaseF3XFiling::is_street_1_Set() const{
    return m_street_1_isSet;
}

bool OAIBaseF3XFiling::is_street_1_Valid() const{
    return m_street_1_isValid;
}

QString OAIBaseF3XFiling::getStreet2() const {
    return m_street_2;
}
void OAIBaseF3XFiling::setStreet2(const QString &street_2) {
    m_street_2 = street_2;
    m_street_2_isSet = true;
}

bool OAIBaseF3XFiling::is_street_2_Set() const{
    return m_street_2_isSet;
}

bool OAIBaseF3XFiling::is_street_2_Valid() const{
    return m_street_2_isValid;
}

QString OAIBaseF3XFiling::getSummaryLines() const {
    return m_summary_lines;
}
void OAIBaseF3XFiling::setSummaryLines(const QString &summary_lines) {
    m_summary_lines = summary_lines;
    m_summary_lines_isSet = true;
}

bool OAIBaseF3XFiling::is_summary_lines_Set() const{
    return m_summary_lines_isSet;
}

bool OAIBaseF3XFiling::is_summary_lines_Valid() const{
    return m_summary_lines_isValid;
}

QString OAIBaseF3XFiling::getZip() const {
    return m_zip;
}
void OAIBaseF3XFiling::setZip(const QString &zip) {
    m_zip = zip;
    m_zip_isSet = true;
}

bool OAIBaseF3XFiling::is_zip_Set() const{
    return m_zip_isSet;
}

bool OAIBaseF3XFiling::is_zip_Valid() const{
    return m_zip_isValid;
}

bool OAIBaseF3XFiling::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amend_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amended_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amendment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amendment_chain.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_beginning_image_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coverage_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coverage_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_csv_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fec_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fec_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_amended_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_most_recent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_most_recent_filing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pdf_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qualified_multicandidate_committee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rpt_pgi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sign_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_lines_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBaseF3XFiling::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
