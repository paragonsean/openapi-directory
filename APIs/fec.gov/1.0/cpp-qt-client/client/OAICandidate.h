/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICandidate.h
 *
 * 
 */

#ifndef OAICandidate_H
#define OAICandidate_H

#include <QJsonObject>

#include "OAICandidate_principal_committees_inner.h"
#include <QDate>
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICandidate_principal_committees_inner;

class OAICandidate : public OAIObject {
public:
    OAICandidate();
    OAICandidate(QString json);
    ~OAICandidate() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getActiveThrough() const;
    void setActiveThrough(const qint32 &active_through);
    bool is_active_through_Set() const;
    bool is_active_through_Valid() const;

    QString getCandidateId() const;
    void setCandidateId(const QString &candidate_id);
    bool is_candidate_id_Set() const;
    bool is_candidate_id_Valid() const;

    bool isCandidateInactive() const;
    void setCandidateInactive(const bool &candidate_inactive);
    bool is_candidate_inactive_Set() const;
    bool is_candidate_inactive_Valid() const;

    QString getCandidateStatus() const;
    void setCandidateStatus(const QString &candidate_status);
    bool is_candidate_status_Set() const;
    bool is_candidate_status_Valid() const;

    QList<qint32> getCycles() const;
    void setCycles(const QList<qint32> &cycles);
    bool is_cycles_Set() const;
    bool is_cycles_Valid() const;

    QString getDistrict() const;
    void setDistrict(const QString &district);
    bool is_district_Set() const;
    bool is_district_Valid() const;

    qint32 getDistrictNumber() const;
    void setDistrictNumber(const qint32 &district_number);
    bool is_district_number_Set() const;
    bool is_district_number_Valid() const;

    QList<QString> getElectionDistricts() const;
    void setElectionDistricts(const QList<QString> &election_districts);
    bool is_election_districts_Set() const;
    bool is_election_districts_Valid() const;

    QList<qint32> getElectionYears() const;
    void setElectionYears(const QList<qint32> &election_years);
    bool is_election_years_Set() const;
    bool is_election_years_Valid() const;

    bool isFederalFundsFlag() const;
    void setFederalFundsFlag(const bool &federal_funds_flag);
    bool is_federal_funds_flag_Set() const;
    bool is_federal_funds_flag_Valid() const;

    QDate getFirstFileDate() const;
    void setFirstFileDate(const QDate &first_file_date);
    bool is_first_file_date_Set() const;
    bool is_first_file_date_Valid() const;

    bool isHasRaisedFunds() const;
    void setHasRaisedFunds(const bool &has_raised_funds);
    bool is_has_raised_funds_Set() const;
    bool is_has_raised_funds_Valid() const;

    QList<qint32> getInactiveElectionYears() const;
    void setInactiveElectionYears(const QList<qint32> &inactive_election_years);
    bool is_inactive_election_years_Set() const;
    bool is_inactive_election_years_Valid() const;

    QString getIncumbentChallenge() const;
    void setIncumbentChallenge(const QString &incumbent_challenge);
    bool is_incumbent_challenge_Set() const;
    bool is_incumbent_challenge_Valid() const;

    QString getIncumbentChallengeFull() const;
    void setIncumbentChallengeFull(const QString &incumbent_challenge_full);
    bool is_incumbent_challenge_full_Set() const;
    bool is_incumbent_challenge_full_Valid() const;

    QDate getLastF2Date() const;
    void setLastF2Date(const QDate &last_f2_date);
    bool is_last_f2_date_Set() const;
    bool is_last_f2_date_Valid() const;

    QDate getLastFileDate() const;
    void setLastFileDate(const QDate &last_file_date);
    bool is_last_file_date_Set() const;
    bool is_last_file_date_Valid() const;

    QDateTime getLoadDate() const;
    void setLoadDate(const QDateTime &load_date);
    bool is_load_date_Set() const;
    bool is_load_date_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getOffice() const;
    void setOffice(const QString &office);
    bool is_office_Set() const;
    bool is_office_Valid() const;

    QString getOfficeFull() const;
    void setOfficeFull(const QString &office_full);
    bool is_office_full_Set() const;
    bool is_office_full_Valid() const;

    QString getParty() const;
    void setParty(const QString &party);
    bool is_party_Set() const;
    bool is_party_Valid() const;

    QString getPartyFull() const;
    void setPartyFull(const QString &party_full);
    bool is_party_full_Set() const;
    bool is_party_full_Valid() const;

    QList<OAICandidate_principal_committees_inner> getPrincipalCommittees() const;
    void setPrincipalCommittees(const QList<OAICandidate_principal_committees_inner> &principal_committees);
    bool is_principal_committees_Set() const;
    bool is_principal_committees_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_active_through;
    bool m_active_through_isSet;
    bool m_active_through_isValid;

    QString m_candidate_id;
    bool m_candidate_id_isSet;
    bool m_candidate_id_isValid;

    bool m_candidate_inactive;
    bool m_candidate_inactive_isSet;
    bool m_candidate_inactive_isValid;

    QString m_candidate_status;
    bool m_candidate_status_isSet;
    bool m_candidate_status_isValid;

    QList<qint32> m_cycles;
    bool m_cycles_isSet;
    bool m_cycles_isValid;

    QString m_district;
    bool m_district_isSet;
    bool m_district_isValid;

    qint32 m_district_number;
    bool m_district_number_isSet;
    bool m_district_number_isValid;

    QList<QString> m_election_districts;
    bool m_election_districts_isSet;
    bool m_election_districts_isValid;

    QList<qint32> m_election_years;
    bool m_election_years_isSet;
    bool m_election_years_isValid;

    bool m_federal_funds_flag;
    bool m_federal_funds_flag_isSet;
    bool m_federal_funds_flag_isValid;

    QDate m_first_file_date;
    bool m_first_file_date_isSet;
    bool m_first_file_date_isValid;

    bool m_has_raised_funds;
    bool m_has_raised_funds_isSet;
    bool m_has_raised_funds_isValid;

    QList<qint32> m_inactive_election_years;
    bool m_inactive_election_years_isSet;
    bool m_inactive_election_years_isValid;

    QString m_incumbent_challenge;
    bool m_incumbent_challenge_isSet;
    bool m_incumbent_challenge_isValid;

    QString m_incumbent_challenge_full;
    bool m_incumbent_challenge_full_isSet;
    bool m_incumbent_challenge_full_isValid;

    QDate m_last_f2_date;
    bool m_last_f2_date_isSet;
    bool m_last_f2_date_isValid;

    QDate m_last_file_date;
    bool m_last_file_date_isSet;
    bool m_last_file_date_isValid;

    QDateTime m_load_date;
    bool m_load_date_isSet;
    bool m_load_date_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_office;
    bool m_office_isSet;
    bool m_office_isValid;

    QString m_office_full;
    bool m_office_full_isSet;
    bool m_office_full_isValid;

    QString m_party;
    bool m_party_isSet;
    bool m_party_isValid;

    QString m_party_full;
    bool m_party_full_isSet;
    bool m_party_full_isValid;

    QList<OAICandidate_principal_committees_inner> m_principal_committees;
    bool m_principal_committees_isSet;
    bool m_principal_committees_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICandidate)

#endif // OAICandidate_H
