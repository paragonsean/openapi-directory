/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommitteeTotalsPerCycle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommitteeTotalsPerCycle::OAICommitteeTotalsPerCycle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommitteeTotalsPerCycle::OAICommitteeTotalsPerCycle() {
    this->initializeModel();
}

OAICommitteeTotalsPerCycle::~OAICommitteeTotalsPerCycle() {}

void OAICommitteeTotalsPerCycle::initializeModel() {

    m_candidate_contribution_isSet = false;
    m_candidate_contribution_isValid = false;

    m_cash_on_hand_beginning_period_isSet = false;
    m_cash_on_hand_beginning_period_isValid = false;

    m_committee_designation_isSet = false;
    m_committee_designation_isValid = false;

    m_committee_designation_full_isSet = false;
    m_committee_designation_full_isValid = false;

    m_committee_id_isSet = false;
    m_committee_id_isValid = false;

    m_committee_name_isSet = false;
    m_committee_name_isValid = false;

    m_committee_state_isSet = false;
    m_committee_state_isValid = false;

    m_committee_type_isSet = false;
    m_committee_type_isValid = false;

    m_committee_type_full_isSet = false;
    m_committee_type_full_isValid = false;

    m_contribution_refunds_isSet = false;
    m_contribution_refunds_isValid = false;

    m_contributions_isSet = false;
    m_contributions_isValid = false;

    m_contributions_ie_and_party_expenditures_made_percent_isSet = false;
    m_contributions_ie_and_party_expenditures_made_percent_isValid = false;

    m_coverage_end_date_isSet = false;
    m_coverage_end_date_isValid = false;

    m_coverage_start_date_isSet = false;
    m_coverage_start_date_isValid = false;

    m_cycle_isSet = false;
    m_cycle_isValid = false;

    m_disbursements_isSet = false;
    m_disbursements_isValid = false;

    m_exempt_legal_accounting_disbursement_isSet = false;
    m_exempt_legal_accounting_disbursement_isValid = false;

    m_federal_funds_isSet = false;
    m_federal_funds_isValid = false;

    m_filing_frequency_isSet = false;
    m_filing_frequency_isValid = false;

    m_filing_frequency_full_isSet = false;
    m_filing_frequency_full_isValid = false;

    m_first_f1_date_isSet = false;
    m_first_f1_date_isValid = false;

    m_first_file_date_isSet = false;
    m_first_file_date_isValid = false;

    m_fundraising_disbursements_isSet = false;
    m_fundraising_disbursements_isValid = false;

    m_individual_contributions_isSet = false;
    m_individual_contributions_isValid = false;

    m_individual_contributions_percent_isSet = false;
    m_individual_contributions_percent_isValid = false;

    m_individual_itemized_contributions_isSet = false;
    m_individual_itemized_contributions_isValid = false;

    m_individual_unitemized_contributions_isSet = false;
    m_individual_unitemized_contributions_isValid = false;

    m_last_beginning_image_number_isSet = false;
    m_last_beginning_image_number_isValid = false;

    m_last_cash_on_hand_end_period_isSet = false;
    m_last_cash_on_hand_end_period_isValid = false;

    m_last_debts_owed_by_committee_isSet = false;
    m_last_debts_owed_by_committee_isValid = false;

    m_last_debts_owed_to_committee_isSet = false;
    m_last_debts_owed_to_committee_isValid = false;

    m_last_report_type_full_isSet = false;
    m_last_report_type_full_isValid = false;

    m_last_report_year_isSet = false;
    m_last_report_year_isValid = false;

    m_loan_repayments_made_isSet = false;
    m_loan_repayments_made_isValid = false;

    m_loans_received_isSet = false;
    m_loans_received_isValid = false;

    m_loans_received_from_candidate_isSet = false;
    m_loans_received_from_candidate_isValid = false;

    m_net_contributions_isSet = false;
    m_net_contributions_isValid = false;

    m_net_operating_expenditures_isSet = false;
    m_net_operating_expenditures_isValid = false;

    m_offsets_to_fundraising_expenditures_isSet = false;
    m_offsets_to_fundraising_expenditures_isValid = false;

    m_offsets_to_legal_accounting_isSet = false;
    m_offsets_to_legal_accounting_isValid = false;

    m_offsets_to_operating_expenditures_isSet = false;
    m_offsets_to_operating_expenditures_isValid = false;

    m_operating_expenditures_isSet = false;
    m_operating_expenditures_isValid = false;

    m_operating_expenditures_percent_isSet = false;
    m_operating_expenditures_percent_isValid = false;

    m_organization_type_isSet = false;
    m_organization_type_isValid = false;

    m_organization_type_full_isSet = false;
    m_organization_type_full_isValid = false;

    m_other_disbursements_isSet = false;
    m_other_disbursements_isValid = false;

    m_other_loans_received_isSet = false;
    m_other_loans_received_isValid = false;

    m_other_political_committee_contributions_isSet = false;
    m_other_political_committee_contributions_isValid = false;

    m_other_receipts_isSet = false;
    m_other_receipts_isValid = false;

    m_party_and_other_committee_contributions_percent_isSet = false;
    m_party_and_other_committee_contributions_percent_isValid = false;

    m_party_full_isSet = false;
    m_party_full_isValid = false;

    m_pdf_url_isSet = false;
    m_pdf_url_isValid = false;

    m_political_party_committee_contributions_isSet = false;
    m_political_party_committee_contributions_isValid = false;

    m_receipts_isSet = false;
    m_receipts_isValid = false;

    m_refunded_individual_contributions_isSet = false;
    m_refunded_individual_contributions_isValid = false;

    m_refunded_other_political_committee_contributions_isSet = false;
    m_refunded_other_political_committee_contributions_isValid = false;

    m_refunded_political_party_committee_contributions_isSet = false;
    m_refunded_political_party_committee_contributions_isValid = false;

    m_repayments_loans_made_by_candidate_isSet = false;
    m_repayments_loans_made_by_candidate_isValid = false;

    m_repayments_other_loans_isSet = false;
    m_repayments_other_loans_isValid = false;

    m_report_form_isSet = false;
    m_report_form_isValid = false;

    m_total_offsets_to_operating_expenditures_isSet = false;
    m_total_offsets_to_operating_expenditures_isValid = false;

    m_transaction_coverage_date_isSet = false;
    m_transaction_coverage_date_isValid = false;

    m_transfers_from_affiliated_committee_isSet = false;
    m_transfers_from_affiliated_committee_isValid = false;

    m_transfers_to_other_authorized_committee_isSet = false;
    m_transfers_to_other_authorized_committee_isValid = false;

    m_treasurer_name_isSet = false;
    m_treasurer_name_isValid = false;
}

void OAICommitteeTotalsPerCycle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommitteeTotalsPerCycle::fromJsonObject(QJsonObject json) {

    m_candidate_contribution_isValid = ::OpenAPI::fromJsonValue(m_candidate_contribution, json[QString("candidate_contribution")]);
    m_candidate_contribution_isSet = !json[QString("candidate_contribution")].isNull() && m_candidate_contribution_isValid;

    m_cash_on_hand_beginning_period_isValid = ::OpenAPI::fromJsonValue(m_cash_on_hand_beginning_period, json[QString("cash_on_hand_beginning_period")]);
    m_cash_on_hand_beginning_period_isSet = !json[QString("cash_on_hand_beginning_period")].isNull() && m_cash_on_hand_beginning_period_isValid;

    m_committee_designation_isValid = ::OpenAPI::fromJsonValue(m_committee_designation, json[QString("committee_designation")]);
    m_committee_designation_isSet = !json[QString("committee_designation")].isNull() && m_committee_designation_isValid;

    m_committee_designation_full_isValid = ::OpenAPI::fromJsonValue(m_committee_designation_full, json[QString("committee_designation_full")]);
    m_committee_designation_full_isSet = !json[QString("committee_designation_full")].isNull() && m_committee_designation_full_isValid;

    m_committee_id_isValid = ::OpenAPI::fromJsonValue(m_committee_id, json[QString("committee_id")]);
    m_committee_id_isSet = !json[QString("committee_id")].isNull() && m_committee_id_isValid;

    m_committee_name_isValid = ::OpenAPI::fromJsonValue(m_committee_name, json[QString("committee_name")]);
    m_committee_name_isSet = !json[QString("committee_name")].isNull() && m_committee_name_isValid;

    m_committee_state_isValid = ::OpenAPI::fromJsonValue(m_committee_state, json[QString("committee_state")]);
    m_committee_state_isSet = !json[QString("committee_state")].isNull() && m_committee_state_isValid;

    m_committee_type_isValid = ::OpenAPI::fromJsonValue(m_committee_type, json[QString("committee_type")]);
    m_committee_type_isSet = !json[QString("committee_type")].isNull() && m_committee_type_isValid;

    m_committee_type_full_isValid = ::OpenAPI::fromJsonValue(m_committee_type_full, json[QString("committee_type_full")]);
    m_committee_type_full_isSet = !json[QString("committee_type_full")].isNull() && m_committee_type_full_isValid;

    m_contribution_refunds_isValid = ::OpenAPI::fromJsonValue(m_contribution_refunds, json[QString("contribution_refunds")]);
    m_contribution_refunds_isSet = !json[QString("contribution_refunds")].isNull() && m_contribution_refunds_isValid;

    m_contributions_isValid = ::OpenAPI::fromJsonValue(m_contributions, json[QString("contributions")]);
    m_contributions_isSet = !json[QString("contributions")].isNull() && m_contributions_isValid;

    m_contributions_ie_and_party_expenditures_made_percent_isValid = ::OpenAPI::fromJsonValue(m_contributions_ie_and_party_expenditures_made_percent, json[QString("contributions_ie_and_party_expenditures_made_percent")]);
    m_contributions_ie_and_party_expenditures_made_percent_isSet = !json[QString("contributions_ie_and_party_expenditures_made_percent")].isNull() && m_contributions_ie_and_party_expenditures_made_percent_isValid;

    m_coverage_end_date_isValid = ::OpenAPI::fromJsonValue(m_coverage_end_date, json[QString("coverage_end_date")]);
    m_coverage_end_date_isSet = !json[QString("coverage_end_date")].isNull() && m_coverage_end_date_isValid;

    m_coverage_start_date_isValid = ::OpenAPI::fromJsonValue(m_coverage_start_date, json[QString("coverage_start_date")]);
    m_coverage_start_date_isSet = !json[QString("coverage_start_date")].isNull() && m_coverage_start_date_isValid;

    m_cycle_isValid = ::OpenAPI::fromJsonValue(m_cycle, json[QString("cycle")]);
    m_cycle_isSet = !json[QString("cycle")].isNull() && m_cycle_isValid;

    m_disbursements_isValid = ::OpenAPI::fromJsonValue(m_disbursements, json[QString("disbursements")]);
    m_disbursements_isSet = !json[QString("disbursements")].isNull() && m_disbursements_isValid;

    m_exempt_legal_accounting_disbursement_isValid = ::OpenAPI::fromJsonValue(m_exempt_legal_accounting_disbursement, json[QString("exempt_legal_accounting_disbursement")]);
    m_exempt_legal_accounting_disbursement_isSet = !json[QString("exempt_legal_accounting_disbursement")].isNull() && m_exempt_legal_accounting_disbursement_isValid;

    m_federal_funds_isValid = ::OpenAPI::fromJsonValue(m_federal_funds, json[QString("federal_funds")]);
    m_federal_funds_isSet = !json[QString("federal_funds")].isNull() && m_federal_funds_isValid;

    m_filing_frequency_isValid = ::OpenAPI::fromJsonValue(m_filing_frequency, json[QString("filing_frequency")]);
    m_filing_frequency_isSet = !json[QString("filing_frequency")].isNull() && m_filing_frequency_isValid;

    m_filing_frequency_full_isValid = ::OpenAPI::fromJsonValue(m_filing_frequency_full, json[QString("filing_frequency_full")]);
    m_filing_frequency_full_isSet = !json[QString("filing_frequency_full")].isNull() && m_filing_frequency_full_isValid;

    m_first_f1_date_isValid = ::OpenAPI::fromJsonValue(m_first_f1_date, json[QString("first_f1_date")]);
    m_first_f1_date_isSet = !json[QString("first_f1_date")].isNull() && m_first_f1_date_isValid;

    m_first_file_date_isValid = ::OpenAPI::fromJsonValue(m_first_file_date, json[QString("first_file_date")]);
    m_first_file_date_isSet = !json[QString("first_file_date")].isNull() && m_first_file_date_isValid;

    m_fundraising_disbursements_isValid = ::OpenAPI::fromJsonValue(m_fundraising_disbursements, json[QString("fundraising_disbursements")]);
    m_fundraising_disbursements_isSet = !json[QString("fundraising_disbursements")].isNull() && m_fundraising_disbursements_isValid;

    m_individual_contributions_isValid = ::OpenAPI::fromJsonValue(m_individual_contributions, json[QString("individual_contributions")]);
    m_individual_contributions_isSet = !json[QString("individual_contributions")].isNull() && m_individual_contributions_isValid;

    m_individual_contributions_percent_isValid = ::OpenAPI::fromJsonValue(m_individual_contributions_percent, json[QString("individual_contributions_percent")]);
    m_individual_contributions_percent_isSet = !json[QString("individual_contributions_percent")].isNull() && m_individual_contributions_percent_isValid;

    m_individual_itemized_contributions_isValid = ::OpenAPI::fromJsonValue(m_individual_itemized_contributions, json[QString("individual_itemized_contributions")]);
    m_individual_itemized_contributions_isSet = !json[QString("individual_itemized_contributions")].isNull() && m_individual_itemized_contributions_isValid;

    m_individual_unitemized_contributions_isValid = ::OpenAPI::fromJsonValue(m_individual_unitemized_contributions, json[QString("individual_unitemized_contributions")]);
    m_individual_unitemized_contributions_isSet = !json[QString("individual_unitemized_contributions")].isNull() && m_individual_unitemized_contributions_isValid;

    m_last_beginning_image_number_isValid = ::OpenAPI::fromJsonValue(m_last_beginning_image_number, json[QString("last_beginning_image_number")]);
    m_last_beginning_image_number_isSet = !json[QString("last_beginning_image_number")].isNull() && m_last_beginning_image_number_isValid;

    m_last_cash_on_hand_end_period_isValid = ::OpenAPI::fromJsonValue(m_last_cash_on_hand_end_period, json[QString("last_cash_on_hand_end_period")]);
    m_last_cash_on_hand_end_period_isSet = !json[QString("last_cash_on_hand_end_period")].isNull() && m_last_cash_on_hand_end_period_isValid;

    m_last_debts_owed_by_committee_isValid = ::OpenAPI::fromJsonValue(m_last_debts_owed_by_committee, json[QString("last_debts_owed_by_committee")]);
    m_last_debts_owed_by_committee_isSet = !json[QString("last_debts_owed_by_committee")].isNull() && m_last_debts_owed_by_committee_isValid;

    m_last_debts_owed_to_committee_isValid = ::OpenAPI::fromJsonValue(m_last_debts_owed_to_committee, json[QString("last_debts_owed_to_committee")]);
    m_last_debts_owed_to_committee_isSet = !json[QString("last_debts_owed_to_committee")].isNull() && m_last_debts_owed_to_committee_isValid;

    m_last_report_type_full_isValid = ::OpenAPI::fromJsonValue(m_last_report_type_full, json[QString("last_report_type_full")]);
    m_last_report_type_full_isSet = !json[QString("last_report_type_full")].isNull() && m_last_report_type_full_isValid;

    m_last_report_year_isValid = ::OpenAPI::fromJsonValue(m_last_report_year, json[QString("last_report_year")]);
    m_last_report_year_isSet = !json[QString("last_report_year")].isNull() && m_last_report_year_isValid;

    m_loan_repayments_made_isValid = ::OpenAPI::fromJsonValue(m_loan_repayments_made, json[QString("loan_repayments_made")]);
    m_loan_repayments_made_isSet = !json[QString("loan_repayments_made")].isNull() && m_loan_repayments_made_isValid;

    m_loans_received_isValid = ::OpenAPI::fromJsonValue(m_loans_received, json[QString("loans_received")]);
    m_loans_received_isSet = !json[QString("loans_received")].isNull() && m_loans_received_isValid;

    m_loans_received_from_candidate_isValid = ::OpenAPI::fromJsonValue(m_loans_received_from_candidate, json[QString("loans_received_from_candidate")]);
    m_loans_received_from_candidate_isSet = !json[QString("loans_received_from_candidate")].isNull() && m_loans_received_from_candidate_isValid;

    m_net_contributions_isValid = ::OpenAPI::fromJsonValue(m_net_contributions, json[QString("net_contributions")]);
    m_net_contributions_isSet = !json[QString("net_contributions")].isNull() && m_net_contributions_isValid;

    m_net_operating_expenditures_isValid = ::OpenAPI::fromJsonValue(m_net_operating_expenditures, json[QString("net_operating_expenditures")]);
    m_net_operating_expenditures_isSet = !json[QString("net_operating_expenditures")].isNull() && m_net_operating_expenditures_isValid;

    m_offsets_to_fundraising_expenditures_isValid = ::OpenAPI::fromJsonValue(m_offsets_to_fundraising_expenditures, json[QString("offsets_to_fundraising_expenditures")]);
    m_offsets_to_fundraising_expenditures_isSet = !json[QString("offsets_to_fundraising_expenditures")].isNull() && m_offsets_to_fundraising_expenditures_isValid;

    m_offsets_to_legal_accounting_isValid = ::OpenAPI::fromJsonValue(m_offsets_to_legal_accounting, json[QString("offsets_to_legal_accounting")]);
    m_offsets_to_legal_accounting_isSet = !json[QString("offsets_to_legal_accounting")].isNull() && m_offsets_to_legal_accounting_isValid;

    m_offsets_to_operating_expenditures_isValid = ::OpenAPI::fromJsonValue(m_offsets_to_operating_expenditures, json[QString("offsets_to_operating_expenditures")]);
    m_offsets_to_operating_expenditures_isSet = !json[QString("offsets_to_operating_expenditures")].isNull() && m_offsets_to_operating_expenditures_isValid;

    m_operating_expenditures_isValid = ::OpenAPI::fromJsonValue(m_operating_expenditures, json[QString("operating_expenditures")]);
    m_operating_expenditures_isSet = !json[QString("operating_expenditures")].isNull() && m_operating_expenditures_isValid;

    m_operating_expenditures_percent_isValid = ::OpenAPI::fromJsonValue(m_operating_expenditures_percent, json[QString("operating_expenditures_percent")]);
    m_operating_expenditures_percent_isSet = !json[QString("operating_expenditures_percent")].isNull() && m_operating_expenditures_percent_isValid;

    m_organization_type_isValid = ::OpenAPI::fromJsonValue(m_organization_type, json[QString("organization_type")]);
    m_organization_type_isSet = !json[QString("organization_type")].isNull() && m_organization_type_isValid;

    m_organization_type_full_isValid = ::OpenAPI::fromJsonValue(m_organization_type_full, json[QString("organization_type_full")]);
    m_organization_type_full_isSet = !json[QString("organization_type_full")].isNull() && m_organization_type_full_isValid;

    m_other_disbursements_isValid = ::OpenAPI::fromJsonValue(m_other_disbursements, json[QString("other_disbursements")]);
    m_other_disbursements_isSet = !json[QString("other_disbursements")].isNull() && m_other_disbursements_isValid;

    m_other_loans_received_isValid = ::OpenAPI::fromJsonValue(m_other_loans_received, json[QString("other_loans_received")]);
    m_other_loans_received_isSet = !json[QString("other_loans_received")].isNull() && m_other_loans_received_isValid;

    m_other_political_committee_contributions_isValid = ::OpenAPI::fromJsonValue(m_other_political_committee_contributions, json[QString("other_political_committee_contributions")]);
    m_other_political_committee_contributions_isSet = !json[QString("other_political_committee_contributions")].isNull() && m_other_political_committee_contributions_isValid;

    m_other_receipts_isValid = ::OpenAPI::fromJsonValue(m_other_receipts, json[QString("other_receipts")]);
    m_other_receipts_isSet = !json[QString("other_receipts")].isNull() && m_other_receipts_isValid;

    m_party_and_other_committee_contributions_percent_isValid = ::OpenAPI::fromJsonValue(m_party_and_other_committee_contributions_percent, json[QString("party_and_other_committee_contributions_percent")]);
    m_party_and_other_committee_contributions_percent_isSet = !json[QString("party_and_other_committee_contributions_percent")].isNull() && m_party_and_other_committee_contributions_percent_isValid;

    m_party_full_isValid = ::OpenAPI::fromJsonValue(m_party_full, json[QString("party_full")]);
    m_party_full_isSet = !json[QString("party_full")].isNull() && m_party_full_isValid;

    m_pdf_url_isValid = ::OpenAPI::fromJsonValue(m_pdf_url, json[QString("pdf_url")]);
    m_pdf_url_isSet = !json[QString("pdf_url")].isNull() && m_pdf_url_isValid;

    m_political_party_committee_contributions_isValid = ::OpenAPI::fromJsonValue(m_political_party_committee_contributions, json[QString("political_party_committee_contributions")]);
    m_political_party_committee_contributions_isSet = !json[QString("political_party_committee_contributions")].isNull() && m_political_party_committee_contributions_isValid;

    m_receipts_isValid = ::OpenAPI::fromJsonValue(m_receipts, json[QString("receipts")]);
    m_receipts_isSet = !json[QString("receipts")].isNull() && m_receipts_isValid;

    m_refunded_individual_contributions_isValid = ::OpenAPI::fromJsonValue(m_refunded_individual_contributions, json[QString("refunded_individual_contributions")]);
    m_refunded_individual_contributions_isSet = !json[QString("refunded_individual_contributions")].isNull() && m_refunded_individual_contributions_isValid;

    m_refunded_other_political_committee_contributions_isValid = ::OpenAPI::fromJsonValue(m_refunded_other_political_committee_contributions, json[QString("refunded_other_political_committee_contributions")]);
    m_refunded_other_political_committee_contributions_isSet = !json[QString("refunded_other_political_committee_contributions")].isNull() && m_refunded_other_political_committee_contributions_isValid;

    m_refunded_political_party_committee_contributions_isValid = ::OpenAPI::fromJsonValue(m_refunded_political_party_committee_contributions, json[QString("refunded_political_party_committee_contributions")]);
    m_refunded_political_party_committee_contributions_isSet = !json[QString("refunded_political_party_committee_contributions")].isNull() && m_refunded_political_party_committee_contributions_isValid;

    m_repayments_loans_made_by_candidate_isValid = ::OpenAPI::fromJsonValue(m_repayments_loans_made_by_candidate, json[QString("repayments_loans_made_by_candidate")]);
    m_repayments_loans_made_by_candidate_isSet = !json[QString("repayments_loans_made_by_candidate")].isNull() && m_repayments_loans_made_by_candidate_isValid;

    m_repayments_other_loans_isValid = ::OpenAPI::fromJsonValue(m_repayments_other_loans, json[QString("repayments_other_loans")]);
    m_repayments_other_loans_isSet = !json[QString("repayments_other_loans")].isNull() && m_repayments_other_loans_isValid;

    m_report_form_isValid = ::OpenAPI::fromJsonValue(m_report_form, json[QString("report_form")]);
    m_report_form_isSet = !json[QString("report_form")].isNull() && m_report_form_isValid;

    m_total_offsets_to_operating_expenditures_isValid = ::OpenAPI::fromJsonValue(m_total_offsets_to_operating_expenditures, json[QString("total_offsets_to_operating_expenditures")]);
    m_total_offsets_to_operating_expenditures_isSet = !json[QString("total_offsets_to_operating_expenditures")].isNull() && m_total_offsets_to_operating_expenditures_isValid;

    m_transaction_coverage_date_isValid = ::OpenAPI::fromJsonValue(m_transaction_coverage_date, json[QString("transaction_coverage_date")]);
    m_transaction_coverage_date_isSet = !json[QString("transaction_coverage_date")].isNull() && m_transaction_coverage_date_isValid;

    m_transfers_from_affiliated_committee_isValid = ::OpenAPI::fromJsonValue(m_transfers_from_affiliated_committee, json[QString("transfers_from_affiliated_committee")]);
    m_transfers_from_affiliated_committee_isSet = !json[QString("transfers_from_affiliated_committee")].isNull() && m_transfers_from_affiliated_committee_isValid;

    m_transfers_to_other_authorized_committee_isValid = ::OpenAPI::fromJsonValue(m_transfers_to_other_authorized_committee, json[QString("transfers_to_other_authorized_committee")]);
    m_transfers_to_other_authorized_committee_isSet = !json[QString("transfers_to_other_authorized_committee")].isNull() && m_transfers_to_other_authorized_committee_isValid;

    m_treasurer_name_isValid = ::OpenAPI::fromJsonValue(m_treasurer_name, json[QString("treasurer_name")]);
    m_treasurer_name_isSet = !json[QString("treasurer_name")].isNull() && m_treasurer_name_isValid;
}

QString OAICommitteeTotalsPerCycle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommitteeTotalsPerCycle::asJsonObject() const {
    QJsonObject obj;
    if (m_candidate_contribution_isSet) {
        obj.insert(QString("candidate_contribution"), ::OpenAPI::toJsonValue(m_candidate_contribution));
    }
    if (m_cash_on_hand_beginning_period_isSet) {
        obj.insert(QString("cash_on_hand_beginning_period"), ::OpenAPI::toJsonValue(m_cash_on_hand_beginning_period));
    }
    if (m_committee_designation_isSet) {
        obj.insert(QString("committee_designation"), ::OpenAPI::toJsonValue(m_committee_designation));
    }
    if (m_committee_designation_full_isSet) {
        obj.insert(QString("committee_designation_full"), ::OpenAPI::toJsonValue(m_committee_designation_full));
    }
    if (m_committee_id_isSet) {
        obj.insert(QString("committee_id"), ::OpenAPI::toJsonValue(m_committee_id));
    }
    if (m_committee_name_isSet) {
        obj.insert(QString("committee_name"), ::OpenAPI::toJsonValue(m_committee_name));
    }
    if (m_committee_state_isSet) {
        obj.insert(QString("committee_state"), ::OpenAPI::toJsonValue(m_committee_state));
    }
    if (m_committee_type_isSet) {
        obj.insert(QString("committee_type"), ::OpenAPI::toJsonValue(m_committee_type));
    }
    if (m_committee_type_full_isSet) {
        obj.insert(QString("committee_type_full"), ::OpenAPI::toJsonValue(m_committee_type_full));
    }
    if (m_contribution_refunds_isSet) {
        obj.insert(QString("contribution_refunds"), ::OpenAPI::toJsonValue(m_contribution_refunds));
    }
    if (m_contributions_isSet) {
        obj.insert(QString("contributions"), ::OpenAPI::toJsonValue(m_contributions));
    }
    if (m_contributions_ie_and_party_expenditures_made_percent_isSet) {
        obj.insert(QString("contributions_ie_and_party_expenditures_made_percent"), ::OpenAPI::toJsonValue(m_contributions_ie_and_party_expenditures_made_percent));
    }
    if (m_coverage_end_date_isSet) {
        obj.insert(QString("coverage_end_date"), ::OpenAPI::toJsonValue(m_coverage_end_date));
    }
    if (m_coverage_start_date_isSet) {
        obj.insert(QString("coverage_start_date"), ::OpenAPI::toJsonValue(m_coverage_start_date));
    }
    if (m_cycle_isSet) {
        obj.insert(QString("cycle"), ::OpenAPI::toJsonValue(m_cycle));
    }
    if (m_disbursements_isSet) {
        obj.insert(QString("disbursements"), ::OpenAPI::toJsonValue(m_disbursements));
    }
    if (m_exempt_legal_accounting_disbursement_isSet) {
        obj.insert(QString("exempt_legal_accounting_disbursement"), ::OpenAPI::toJsonValue(m_exempt_legal_accounting_disbursement));
    }
    if (m_federal_funds_isSet) {
        obj.insert(QString("federal_funds"), ::OpenAPI::toJsonValue(m_federal_funds));
    }
    if (m_filing_frequency_isSet) {
        obj.insert(QString("filing_frequency"), ::OpenAPI::toJsonValue(m_filing_frequency));
    }
    if (m_filing_frequency_full_isSet) {
        obj.insert(QString("filing_frequency_full"), ::OpenAPI::toJsonValue(m_filing_frequency_full));
    }
    if (m_first_f1_date_isSet) {
        obj.insert(QString("first_f1_date"), ::OpenAPI::toJsonValue(m_first_f1_date));
    }
    if (m_first_file_date_isSet) {
        obj.insert(QString("first_file_date"), ::OpenAPI::toJsonValue(m_first_file_date));
    }
    if (m_fundraising_disbursements_isSet) {
        obj.insert(QString("fundraising_disbursements"), ::OpenAPI::toJsonValue(m_fundraising_disbursements));
    }
    if (m_individual_contributions_isSet) {
        obj.insert(QString("individual_contributions"), ::OpenAPI::toJsonValue(m_individual_contributions));
    }
    if (m_individual_contributions_percent_isSet) {
        obj.insert(QString("individual_contributions_percent"), ::OpenAPI::toJsonValue(m_individual_contributions_percent));
    }
    if (m_individual_itemized_contributions_isSet) {
        obj.insert(QString("individual_itemized_contributions"), ::OpenAPI::toJsonValue(m_individual_itemized_contributions));
    }
    if (m_individual_unitemized_contributions_isSet) {
        obj.insert(QString("individual_unitemized_contributions"), ::OpenAPI::toJsonValue(m_individual_unitemized_contributions));
    }
    if (m_last_beginning_image_number_isSet) {
        obj.insert(QString("last_beginning_image_number"), ::OpenAPI::toJsonValue(m_last_beginning_image_number));
    }
    if (m_last_cash_on_hand_end_period_isSet) {
        obj.insert(QString("last_cash_on_hand_end_period"), ::OpenAPI::toJsonValue(m_last_cash_on_hand_end_period));
    }
    if (m_last_debts_owed_by_committee_isSet) {
        obj.insert(QString("last_debts_owed_by_committee"), ::OpenAPI::toJsonValue(m_last_debts_owed_by_committee));
    }
    if (m_last_debts_owed_to_committee_isSet) {
        obj.insert(QString("last_debts_owed_to_committee"), ::OpenAPI::toJsonValue(m_last_debts_owed_to_committee));
    }
    if (m_last_report_type_full_isSet) {
        obj.insert(QString("last_report_type_full"), ::OpenAPI::toJsonValue(m_last_report_type_full));
    }
    if (m_last_report_year_isSet) {
        obj.insert(QString("last_report_year"), ::OpenAPI::toJsonValue(m_last_report_year));
    }
    if (m_loan_repayments_made_isSet) {
        obj.insert(QString("loan_repayments_made"), ::OpenAPI::toJsonValue(m_loan_repayments_made));
    }
    if (m_loans_received_isSet) {
        obj.insert(QString("loans_received"), ::OpenAPI::toJsonValue(m_loans_received));
    }
    if (m_loans_received_from_candidate_isSet) {
        obj.insert(QString("loans_received_from_candidate"), ::OpenAPI::toJsonValue(m_loans_received_from_candidate));
    }
    if (m_net_contributions_isSet) {
        obj.insert(QString("net_contributions"), ::OpenAPI::toJsonValue(m_net_contributions));
    }
    if (m_net_operating_expenditures_isSet) {
        obj.insert(QString("net_operating_expenditures"), ::OpenAPI::toJsonValue(m_net_operating_expenditures));
    }
    if (m_offsets_to_fundraising_expenditures_isSet) {
        obj.insert(QString("offsets_to_fundraising_expenditures"), ::OpenAPI::toJsonValue(m_offsets_to_fundraising_expenditures));
    }
    if (m_offsets_to_legal_accounting_isSet) {
        obj.insert(QString("offsets_to_legal_accounting"), ::OpenAPI::toJsonValue(m_offsets_to_legal_accounting));
    }
    if (m_offsets_to_operating_expenditures_isSet) {
        obj.insert(QString("offsets_to_operating_expenditures"), ::OpenAPI::toJsonValue(m_offsets_to_operating_expenditures));
    }
    if (m_operating_expenditures_isSet) {
        obj.insert(QString("operating_expenditures"), ::OpenAPI::toJsonValue(m_operating_expenditures));
    }
    if (m_operating_expenditures_percent_isSet) {
        obj.insert(QString("operating_expenditures_percent"), ::OpenAPI::toJsonValue(m_operating_expenditures_percent));
    }
    if (m_organization_type_isSet) {
        obj.insert(QString("organization_type"), ::OpenAPI::toJsonValue(m_organization_type));
    }
    if (m_organization_type_full_isSet) {
        obj.insert(QString("organization_type_full"), ::OpenAPI::toJsonValue(m_organization_type_full));
    }
    if (m_other_disbursements_isSet) {
        obj.insert(QString("other_disbursements"), ::OpenAPI::toJsonValue(m_other_disbursements));
    }
    if (m_other_loans_received_isSet) {
        obj.insert(QString("other_loans_received"), ::OpenAPI::toJsonValue(m_other_loans_received));
    }
    if (m_other_political_committee_contributions_isSet) {
        obj.insert(QString("other_political_committee_contributions"), ::OpenAPI::toJsonValue(m_other_political_committee_contributions));
    }
    if (m_other_receipts_isSet) {
        obj.insert(QString("other_receipts"), ::OpenAPI::toJsonValue(m_other_receipts));
    }
    if (m_party_and_other_committee_contributions_percent_isSet) {
        obj.insert(QString("party_and_other_committee_contributions_percent"), ::OpenAPI::toJsonValue(m_party_and_other_committee_contributions_percent));
    }
    if (m_party_full_isSet) {
        obj.insert(QString("party_full"), ::OpenAPI::toJsonValue(m_party_full));
    }
    if (m_pdf_url_isSet) {
        obj.insert(QString("pdf_url"), ::OpenAPI::toJsonValue(m_pdf_url));
    }
    if (m_political_party_committee_contributions_isSet) {
        obj.insert(QString("political_party_committee_contributions"), ::OpenAPI::toJsonValue(m_political_party_committee_contributions));
    }
    if (m_receipts_isSet) {
        obj.insert(QString("receipts"), ::OpenAPI::toJsonValue(m_receipts));
    }
    if (m_refunded_individual_contributions_isSet) {
        obj.insert(QString("refunded_individual_contributions"), ::OpenAPI::toJsonValue(m_refunded_individual_contributions));
    }
    if (m_refunded_other_political_committee_contributions_isSet) {
        obj.insert(QString("refunded_other_political_committee_contributions"), ::OpenAPI::toJsonValue(m_refunded_other_political_committee_contributions));
    }
    if (m_refunded_political_party_committee_contributions_isSet) {
        obj.insert(QString("refunded_political_party_committee_contributions"), ::OpenAPI::toJsonValue(m_refunded_political_party_committee_contributions));
    }
    if (m_repayments_loans_made_by_candidate_isSet) {
        obj.insert(QString("repayments_loans_made_by_candidate"), ::OpenAPI::toJsonValue(m_repayments_loans_made_by_candidate));
    }
    if (m_repayments_other_loans_isSet) {
        obj.insert(QString("repayments_other_loans"), ::OpenAPI::toJsonValue(m_repayments_other_loans));
    }
    if (m_report_form_isSet) {
        obj.insert(QString("report_form"), ::OpenAPI::toJsonValue(m_report_form));
    }
    if (m_total_offsets_to_operating_expenditures_isSet) {
        obj.insert(QString("total_offsets_to_operating_expenditures"), ::OpenAPI::toJsonValue(m_total_offsets_to_operating_expenditures));
    }
    if (m_transaction_coverage_date_isSet) {
        obj.insert(QString("transaction_coverage_date"), ::OpenAPI::toJsonValue(m_transaction_coverage_date));
    }
    if (m_transfers_from_affiliated_committee_isSet) {
        obj.insert(QString("transfers_from_affiliated_committee"), ::OpenAPI::toJsonValue(m_transfers_from_affiliated_committee));
    }
    if (m_transfers_to_other_authorized_committee_isSet) {
        obj.insert(QString("transfers_to_other_authorized_committee"), ::OpenAPI::toJsonValue(m_transfers_to_other_authorized_committee));
    }
    if (m_treasurer_name_isSet) {
        obj.insert(QString("treasurer_name"), ::OpenAPI::toJsonValue(m_treasurer_name));
    }
    return obj;
}

double OAICommitteeTotalsPerCycle::getCandidateContribution() const {
    return m_candidate_contribution;
}
void OAICommitteeTotalsPerCycle::setCandidateContribution(const double &candidate_contribution) {
    m_candidate_contribution = candidate_contribution;
    m_candidate_contribution_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_candidate_contribution_Set() const{
    return m_candidate_contribution_isSet;
}

bool OAICommitteeTotalsPerCycle::is_candidate_contribution_Valid() const{
    return m_candidate_contribution_isValid;
}

double OAICommitteeTotalsPerCycle::getCashOnHandBeginningPeriod() const {
    return m_cash_on_hand_beginning_period;
}
void OAICommitteeTotalsPerCycle::setCashOnHandBeginningPeriod(const double &cash_on_hand_beginning_period) {
    m_cash_on_hand_beginning_period = cash_on_hand_beginning_period;
    m_cash_on_hand_beginning_period_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_cash_on_hand_beginning_period_Set() const{
    return m_cash_on_hand_beginning_period_isSet;
}

bool OAICommitteeTotalsPerCycle::is_cash_on_hand_beginning_period_Valid() const{
    return m_cash_on_hand_beginning_period_isValid;
}

QString OAICommitteeTotalsPerCycle::getCommitteeDesignation() const {
    return m_committee_designation;
}
void OAICommitteeTotalsPerCycle::setCommitteeDesignation(const QString &committee_designation) {
    m_committee_designation = committee_designation;
    m_committee_designation_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_committee_designation_Set() const{
    return m_committee_designation_isSet;
}

bool OAICommitteeTotalsPerCycle::is_committee_designation_Valid() const{
    return m_committee_designation_isValid;
}

QString OAICommitteeTotalsPerCycle::getCommitteeDesignationFull() const {
    return m_committee_designation_full;
}
void OAICommitteeTotalsPerCycle::setCommitteeDesignationFull(const QString &committee_designation_full) {
    m_committee_designation_full = committee_designation_full;
    m_committee_designation_full_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_committee_designation_full_Set() const{
    return m_committee_designation_full_isSet;
}

bool OAICommitteeTotalsPerCycle::is_committee_designation_full_Valid() const{
    return m_committee_designation_full_isValid;
}

QString OAICommitteeTotalsPerCycle::getCommitteeId() const {
    return m_committee_id;
}
void OAICommitteeTotalsPerCycle::setCommitteeId(const QString &committee_id) {
    m_committee_id = committee_id;
    m_committee_id_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_committee_id_Set() const{
    return m_committee_id_isSet;
}

bool OAICommitteeTotalsPerCycle::is_committee_id_Valid() const{
    return m_committee_id_isValid;
}

QString OAICommitteeTotalsPerCycle::getCommitteeName() const {
    return m_committee_name;
}
void OAICommitteeTotalsPerCycle::setCommitteeName(const QString &committee_name) {
    m_committee_name = committee_name;
    m_committee_name_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_committee_name_Set() const{
    return m_committee_name_isSet;
}

bool OAICommitteeTotalsPerCycle::is_committee_name_Valid() const{
    return m_committee_name_isValid;
}

QString OAICommitteeTotalsPerCycle::getCommitteeState() const {
    return m_committee_state;
}
void OAICommitteeTotalsPerCycle::setCommitteeState(const QString &committee_state) {
    m_committee_state = committee_state;
    m_committee_state_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_committee_state_Set() const{
    return m_committee_state_isSet;
}

bool OAICommitteeTotalsPerCycle::is_committee_state_Valid() const{
    return m_committee_state_isValid;
}

QString OAICommitteeTotalsPerCycle::getCommitteeType() const {
    return m_committee_type;
}
void OAICommitteeTotalsPerCycle::setCommitteeType(const QString &committee_type) {
    m_committee_type = committee_type;
    m_committee_type_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_committee_type_Set() const{
    return m_committee_type_isSet;
}

bool OAICommitteeTotalsPerCycle::is_committee_type_Valid() const{
    return m_committee_type_isValid;
}

QString OAICommitteeTotalsPerCycle::getCommitteeTypeFull() const {
    return m_committee_type_full;
}
void OAICommitteeTotalsPerCycle::setCommitteeTypeFull(const QString &committee_type_full) {
    m_committee_type_full = committee_type_full;
    m_committee_type_full_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_committee_type_full_Set() const{
    return m_committee_type_full_isSet;
}

bool OAICommitteeTotalsPerCycle::is_committee_type_full_Valid() const{
    return m_committee_type_full_isValid;
}

double OAICommitteeTotalsPerCycle::getContributionRefunds() const {
    return m_contribution_refunds;
}
void OAICommitteeTotalsPerCycle::setContributionRefunds(const double &contribution_refunds) {
    m_contribution_refunds = contribution_refunds;
    m_contribution_refunds_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_contribution_refunds_Set() const{
    return m_contribution_refunds_isSet;
}

bool OAICommitteeTotalsPerCycle::is_contribution_refunds_Valid() const{
    return m_contribution_refunds_isValid;
}

double OAICommitteeTotalsPerCycle::getContributions() const {
    return m_contributions;
}
void OAICommitteeTotalsPerCycle::setContributions(const double &contributions) {
    m_contributions = contributions;
    m_contributions_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_contributions_Set() const{
    return m_contributions_isSet;
}

bool OAICommitteeTotalsPerCycle::is_contributions_Valid() const{
    return m_contributions_isValid;
}

double OAICommitteeTotalsPerCycle::getContributionsIeAndPartyExpendituresMadePercent() const {
    return m_contributions_ie_and_party_expenditures_made_percent;
}
void OAICommitteeTotalsPerCycle::setContributionsIeAndPartyExpendituresMadePercent(const double &contributions_ie_and_party_expenditures_made_percent) {
    m_contributions_ie_and_party_expenditures_made_percent = contributions_ie_and_party_expenditures_made_percent;
    m_contributions_ie_and_party_expenditures_made_percent_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_contributions_ie_and_party_expenditures_made_percent_Set() const{
    return m_contributions_ie_and_party_expenditures_made_percent_isSet;
}

bool OAICommitteeTotalsPerCycle::is_contributions_ie_and_party_expenditures_made_percent_Valid() const{
    return m_contributions_ie_and_party_expenditures_made_percent_isValid;
}

QDateTime OAICommitteeTotalsPerCycle::getCoverageEndDate() const {
    return m_coverage_end_date;
}
void OAICommitteeTotalsPerCycle::setCoverageEndDate(const QDateTime &coverage_end_date) {
    m_coverage_end_date = coverage_end_date;
    m_coverage_end_date_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_coverage_end_date_Set() const{
    return m_coverage_end_date_isSet;
}

bool OAICommitteeTotalsPerCycle::is_coverage_end_date_Valid() const{
    return m_coverage_end_date_isValid;
}

QDateTime OAICommitteeTotalsPerCycle::getCoverageStartDate() const {
    return m_coverage_start_date;
}
void OAICommitteeTotalsPerCycle::setCoverageStartDate(const QDateTime &coverage_start_date) {
    m_coverage_start_date = coverage_start_date;
    m_coverage_start_date_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_coverage_start_date_Set() const{
    return m_coverage_start_date_isSet;
}

bool OAICommitteeTotalsPerCycle::is_coverage_start_date_Valid() const{
    return m_coverage_start_date_isValid;
}

qint32 OAICommitteeTotalsPerCycle::getCycle() const {
    return m_cycle;
}
void OAICommitteeTotalsPerCycle::setCycle(const qint32 &cycle) {
    m_cycle = cycle;
    m_cycle_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_cycle_Set() const{
    return m_cycle_isSet;
}

bool OAICommitteeTotalsPerCycle::is_cycle_Valid() const{
    return m_cycle_isValid;
}

double OAICommitteeTotalsPerCycle::getDisbursements() const {
    return m_disbursements;
}
void OAICommitteeTotalsPerCycle::setDisbursements(const double &disbursements) {
    m_disbursements = disbursements;
    m_disbursements_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_disbursements_Set() const{
    return m_disbursements_isSet;
}

bool OAICommitteeTotalsPerCycle::is_disbursements_Valid() const{
    return m_disbursements_isValid;
}

double OAICommitteeTotalsPerCycle::getExemptLegalAccountingDisbursement() const {
    return m_exempt_legal_accounting_disbursement;
}
void OAICommitteeTotalsPerCycle::setExemptLegalAccountingDisbursement(const double &exempt_legal_accounting_disbursement) {
    m_exempt_legal_accounting_disbursement = exempt_legal_accounting_disbursement;
    m_exempt_legal_accounting_disbursement_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_exempt_legal_accounting_disbursement_Set() const{
    return m_exempt_legal_accounting_disbursement_isSet;
}

bool OAICommitteeTotalsPerCycle::is_exempt_legal_accounting_disbursement_Valid() const{
    return m_exempt_legal_accounting_disbursement_isValid;
}

double OAICommitteeTotalsPerCycle::getFederalFunds() const {
    return m_federal_funds;
}
void OAICommitteeTotalsPerCycle::setFederalFunds(const double &federal_funds) {
    m_federal_funds = federal_funds;
    m_federal_funds_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_federal_funds_Set() const{
    return m_federal_funds_isSet;
}

bool OAICommitteeTotalsPerCycle::is_federal_funds_Valid() const{
    return m_federal_funds_isValid;
}

QString OAICommitteeTotalsPerCycle::getFilingFrequency() const {
    return m_filing_frequency;
}
void OAICommitteeTotalsPerCycle::setFilingFrequency(const QString &filing_frequency) {
    m_filing_frequency = filing_frequency;
    m_filing_frequency_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_filing_frequency_Set() const{
    return m_filing_frequency_isSet;
}

bool OAICommitteeTotalsPerCycle::is_filing_frequency_Valid() const{
    return m_filing_frequency_isValid;
}

QString OAICommitteeTotalsPerCycle::getFilingFrequencyFull() const {
    return m_filing_frequency_full;
}
void OAICommitteeTotalsPerCycle::setFilingFrequencyFull(const QString &filing_frequency_full) {
    m_filing_frequency_full = filing_frequency_full;
    m_filing_frequency_full_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_filing_frequency_full_Set() const{
    return m_filing_frequency_full_isSet;
}

bool OAICommitteeTotalsPerCycle::is_filing_frequency_full_Valid() const{
    return m_filing_frequency_full_isValid;
}

QDate OAICommitteeTotalsPerCycle::getFirstF1Date() const {
    return m_first_f1_date;
}
void OAICommitteeTotalsPerCycle::setFirstF1Date(const QDate &first_f1_date) {
    m_first_f1_date = first_f1_date;
    m_first_f1_date_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_first_f1_date_Set() const{
    return m_first_f1_date_isSet;
}

bool OAICommitteeTotalsPerCycle::is_first_f1_date_Valid() const{
    return m_first_f1_date_isValid;
}

QDate OAICommitteeTotalsPerCycle::getFirstFileDate() const {
    return m_first_file_date;
}
void OAICommitteeTotalsPerCycle::setFirstFileDate(const QDate &first_file_date) {
    m_first_file_date = first_file_date;
    m_first_file_date_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_first_file_date_Set() const{
    return m_first_file_date_isSet;
}

bool OAICommitteeTotalsPerCycle::is_first_file_date_Valid() const{
    return m_first_file_date_isValid;
}

double OAICommitteeTotalsPerCycle::getFundraisingDisbursements() const {
    return m_fundraising_disbursements;
}
void OAICommitteeTotalsPerCycle::setFundraisingDisbursements(const double &fundraising_disbursements) {
    m_fundraising_disbursements = fundraising_disbursements;
    m_fundraising_disbursements_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_fundraising_disbursements_Set() const{
    return m_fundraising_disbursements_isSet;
}

bool OAICommitteeTotalsPerCycle::is_fundraising_disbursements_Valid() const{
    return m_fundraising_disbursements_isValid;
}

double OAICommitteeTotalsPerCycle::getIndividualContributions() const {
    return m_individual_contributions;
}
void OAICommitteeTotalsPerCycle::setIndividualContributions(const double &individual_contributions) {
    m_individual_contributions = individual_contributions;
    m_individual_contributions_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_individual_contributions_Set() const{
    return m_individual_contributions_isSet;
}

bool OAICommitteeTotalsPerCycle::is_individual_contributions_Valid() const{
    return m_individual_contributions_isValid;
}

double OAICommitteeTotalsPerCycle::getIndividualContributionsPercent() const {
    return m_individual_contributions_percent;
}
void OAICommitteeTotalsPerCycle::setIndividualContributionsPercent(const double &individual_contributions_percent) {
    m_individual_contributions_percent = individual_contributions_percent;
    m_individual_contributions_percent_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_individual_contributions_percent_Set() const{
    return m_individual_contributions_percent_isSet;
}

bool OAICommitteeTotalsPerCycle::is_individual_contributions_percent_Valid() const{
    return m_individual_contributions_percent_isValid;
}

double OAICommitteeTotalsPerCycle::getIndividualItemizedContributions() const {
    return m_individual_itemized_contributions;
}
void OAICommitteeTotalsPerCycle::setIndividualItemizedContributions(const double &individual_itemized_contributions) {
    m_individual_itemized_contributions = individual_itemized_contributions;
    m_individual_itemized_contributions_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_individual_itemized_contributions_Set() const{
    return m_individual_itemized_contributions_isSet;
}

bool OAICommitteeTotalsPerCycle::is_individual_itemized_contributions_Valid() const{
    return m_individual_itemized_contributions_isValid;
}

double OAICommitteeTotalsPerCycle::getIndividualUnitemizedContributions() const {
    return m_individual_unitemized_contributions;
}
void OAICommitteeTotalsPerCycle::setIndividualUnitemizedContributions(const double &individual_unitemized_contributions) {
    m_individual_unitemized_contributions = individual_unitemized_contributions;
    m_individual_unitemized_contributions_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_individual_unitemized_contributions_Set() const{
    return m_individual_unitemized_contributions_isSet;
}

bool OAICommitteeTotalsPerCycle::is_individual_unitemized_contributions_Valid() const{
    return m_individual_unitemized_contributions_isValid;
}

QString OAICommitteeTotalsPerCycle::getLastBeginningImageNumber() const {
    return m_last_beginning_image_number;
}
void OAICommitteeTotalsPerCycle::setLastBeginningImageNumber(const QString &last_beginning_image_number) {
    m_last_beginning_image_number = last_beginning_image_number;
    m_last_beginning_image_number_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_last_beginning_image_number_Set() const{
    return m_last_beginning_image_number_isSet;
}

bool OAICommitteeTotalsPerCycle::is_last_beginning_image_number_Valid() const{
    return m_last_beginning_image_number_isValid;
}

double OAICommitteeTotalsPerCycle::getLastCashOnHandEndPeriod() const {
    return m_last_cash_on_hand_end_period;
}
void OAICommitteeTotalsPerCycle::setLastCashOnHandEndPeriod(const double &last_cash_on_hand_end_period) {
    m_last_cash_on_hand_end_period = last_cash_on_hand_end_period;
    m_last_cash_on_hand_end_period_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_last_cash_on_hand_end_period_Set() const{
    return m_last_cash_on_hand_end_period_isSet;
}

bool OAICommitteeTotalsPerCycle::is_last_cash_on_hand_end_period_Valid() const{
    return m_last_cash_on_hand_end_period_isValid;
}

double OAICommitteeTotalsPerCycle::getLastDebtsOwedByCommittee() const {
    return m_last_debts_owed_by_committee;
}
void OAICommitteeTotalsPerCycle::setLastDebtsOwedByCommittee(const double &last_debts_owed_by_committee) {
    m_last_debts_owed_by_committee = last_debts_owed_by_committee;
    m_last_debts_owed_by_committee_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_last_debts_owed_by_committee_Set() const{
    return m_last_debts_owed_by_committee_isSet;
}

bool OAICommitteeTotalsPerCycle::is_last_debts_owed_by_committee_Valid() const{
    return m_last_debts_owed_by_committee_isValid;
}

double OAICommitteeTotalsPerCycle::getLastDebtsOwedToCommittee() const {
    return m_last_debts_owed_to_committee;
}
void OAICommitteeTotalsPerCycle::setLastDebtsOwedToCommittee(const double &last_debts_owed_to_committee) {
    m_last_debts_owed_to_committee = last_debts_owed_to_committee;
    m_last_debts_owed_to_committee_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_last_debts_owed_to_committee_Set() const{
    return m_last_debts_owed_to_committee_isSet;
}

bool OAICommitteeTotalsPerCycle::is_last_debts_owed_to_committee_Valid() const{
    return m_last_debts_owed_to_committee_isValid;
}

QString OAICommitteeTotalsPerCycle::getLastReportTypeFull() const {
    return m_last_report_type_full;
}
void OAICommitteeTotalsPerCycle::setLastReportTypeFull(const QString &last_report_type_full) {
    m_last_report_type_full = last_report_type_full;
    m_last_report_type_full_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_last_report_type_full_Set() const{
    return m_last_report_type_full_isSet;
}

bool OAICommitteeTotalsPerCycle::is_last_report_type_full_Valid() const{
    return m_last_report_type_full_isValid;
}

qint32 OAICommitteeTotalsPerCycle::getLastReportYear() const {
    return m_last_report_year;
}
void OAICommitteeTotalsPerCycle::setLastReportYear(const qint32 &last_report_year) {
    m_last_report_year = last_report_year;
    m_last_report_year_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_last_report_year_Set() const{
    return m_last_report_year_isSet;
}

bool OAICommitteeTotalsPerCycle::is_last_report_year_Valid() const{
    return m_last_report_year_isValid;
}

double OAICommitteeTotalsPerCycle::getLoanRepaymentsMade() const {
    return m_loan_repayments_made;
}
void OAICommitteeTotalsPerCycle::setLoanRepaymentsMade(const double &loan_repayments_made) {
    m_loan_repayments_made = loan_repayments_made;
    m_loan_repayments_made_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_loan_repayments_made_Set() const{
    return m_loan_repayments_made_isSet;
}

bool OAICommitteeTotalsPerCycle::is_loan_repayments_made_Valid() const{
    return m_loan_repayments_made_isValid;
}

double OAICommitteeTotalsPerCycle::getLoansReceived() const {
    return m_loans_received;
}
void OAICommitteeTotalsPerCycle::setLoansReceived(const double &loans_received) {
    m_loans_received = loans_received;
    m_loans_received_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_loans_received_Set() const{
    return m_loans_received_isSet;
}

bool OAICommitteeTotalsPerCycle::is_loans_received_Valid() const{
    return m_loans_received_isValid;
}

double OAICommitteeTotalsPerCycle::getLoansReceivedFromCandidate() const {
    return m_loans_received_from_candidate;
}
void OAICommitteeTotalsPerCycle::setLoansReceivedFromCandidate(const double &loans_received_from_candidate) {
    m_loans_received_from_candidate = loans_received_from_candidate;
    m_loans_received_from_candidate_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_loans_received_from_candidate_Set() const{
    return m_loans_received_from_candidate_isSet;
}

bool OAICommitteeTotalsPerCycle::is_loans_received_from_candidate_Valid() const{
    return m_loans_received_from_candidate_isValid;
}

double OAICommitteeTotalsPerCycle::getNetContributions() const {
    return m_net_contributions;
}
void OAICommitteeTotalsPerCycle::setNetContributions(const double &net_contributions) {
    m_net_contributions = net_contributions;
    m_net_contributions_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_net_contributions_Set() const{
    return m_net_contributions_isSet;
}

bool OAICommitteeTotalsPerCycle::is_net_contributions_Valid() const{
    return m_net_contributions_isValid;
}

double OAICommitteeTotalsPerCycle::getNetOperatingExpenditures() const {
    return m_net_operating_expenditures;
}
void OAICommitteeTotalsPerCycle::setNetOperatingExpenditures(const double &net_operating_expenditures) {
    m_net_operating_expenditures = net_operating_expenditures;
    m_net_operating_expenditures_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_net_operating_expenditures_Set() const{
    return m_net_operating_expenditures_isSet;
}

bool OAICommitteeTotalsPerCycle::is_net_operating_expenditures_Valid() const{
    return m_net_operating_expenditures_isValid;
}

double OAICommitteeTotalsPerCycle::getOffsetsToFundraisingExpenditures() const {
    return m_offsets_to_fundraising_expenditures;
}
void OAICommitteeTotalsPerCycle::setOffsetsToFundraisingExpenditures(const double &offsets_to_fundraising_expenditures) {
    m_offsets_to_fundraising_expenditures = offsets_to_fundraising_expenditures;
    m_offsets_to_fundraising_expenditures_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_offsets_to_fundraising_expenditures_Set() const{
    return m_offsets_to_fundraising_expenditures_isSet;
}

bool OAICommitteeTotalsPerCycle::is_offsets_to_fundraising_expenditures_Valid() const{
    return m_offsets_to_fundraising_expenditures_isValid;
}

double OAICommitteeTotalsPerCycle::getOffsetsToLegalAccounting() const {
    return m_offsets_to_legal_accounting;
}
void OAICommitteeTotalsPerCycle::setOffsetsToLegalAccounting(const double &offsets_to_legal_accounting) {
    m_offsets_to_legal_accounting = offsets_to_legal_accounting;
    m_offsets_to_legal_accounting_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_offsets_to_legal_accounting_Set() const{
    return m_offsets_to_legal_accounting_isSet;
}

bool OAICommitteeTotalsPerCycle::is_offsets_to_legal_accounting_Valid() const{
    return m_offsets_to_legal_accounting_isValid;
}

double OAICommitteeTotalsPerCycle::getOffsetsToOperatingExpenditures() const {
    return m_offsets_to_operating_expenditures;
}
void OAICommitteeTotalsPerCycle::setOffsetsToOperatingExpenditures(const double &offsets_to_operating_expenditures) {
    m_offsets_to_operating_expenditures = offsets_to_operating_expenditures;
    m_offsets_to_operating_expenditures_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_offsets_to_operating_expenditures_Set() const{
    return m_offsets_to_operating_expenditures_isSet;
}

bool OAICommitteeTotalsPerCycle::is_offsets_to_operating_expenditures_Valid() const{
    return m_offsets_to_operating_expenditures_isValid;
}

double OAICommitteeTotalsPerCycle::getOperatingExpenditures() const {
    return m_operating_expenditures;
}
void OAICommitteeTotalsPerCycle::setOperatingExpenditures(const double &operating_expenditures) {
    m_operating_expenditures = operating_expenditures;
    m_operating_expenditures_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_operating_expenditures_Set() const{
    return m_operating_expenditures_isSet;
}

bool OAICommitteeTotalsPerCycle::is_operating_expenditures_Valid() const{
    return m_operating_expenditures_isValid;
}

double OAICommitteeTotalsPerCycle::getOperatingExpendituresPercent() const {
    return m_operating_expenditures_percent;
}
void OAICommitteeTotalsPerCycle::setOperatingExpendituresPercent(const double &operating_expenditures_percent) {
    m_operating_expenditures_percent = operating_expenditures_percent;
    m_operating_expenditures_percent_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_operating_expenditures_percent_Set() const{
    return m_operating_expenditures_percent_isSet;
}

bool OAICommitteeTotalsPerCycle::is_operating_expenditures_percent_Valid() const{
    return m_operating_expenditures_percent_isValid;
}

QString OAICommitteeTotalsPerCycle::getOrganizationType() const {
    return m_organization_type;
}
void OAICommitteeTotalsPerCycle::setOrganizationType(const QString &organization_type) {
    m_organization_type = organization_type;
    m_organization_type_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_organization_type_Set() const{
    return m_organization_type_isSet;
}

bool OAICommitteeTotalsPerCycle::is_organization_type_Valid() const{
    return m_organization_type_isValid;
}

QString OAICommitteeTotalsPerCycle::getOrganizationTypeFull() const {
    return m_organization_type_full;
}
void OAICommitteeTotalsPerCycle::setOrganizationTypeFull(const QString &organization_type_full) {
    m_organization_type_full = organization_type_full;
    m_organization_type_full_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_organization_type_full_Set() const{
    return m_organization_type_full_isSet;
}

bool OAICommitteeTotalsPerCycle::is_organization_type_full_Valid() const{
    return m_organization_type_full_isValid;
}

double OAICommitteeTotalsPerCycle::getOtherDisbursements() const {
    return m_other_disbursements;
}
void OAICommitteeTotalsPerCycle::setOtherDisbursements(const double &other_disbursements) {
    m_other_disbursements = other_disbursements;
    m_other_disbursements_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_other_disbursements_Set() const{
    return m_other_disbursements_isSet;
}

bool OAICommitteeTotalsPerCycle::is_other_disbursements_Valid() const{
    return m_other_disbursements_isValid;
}

double OAICommitteeTotalsPerCycle::getOtherLoansReceived() const {
    return m_other_loans_received;
}
void OAICommitteeTotalsPerCycle::setOtherLoansReceived(const double &other_loans_received) {
    m_other_loans_received = other_loans_received;
    m_other_loans_received_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_other_loans_received_Set() const{
    return m_other_loans_received_isSet;
}

bool OAICommitteeTotalsPerCycle::is_other_loans_received_Valid() const{
    return m_other_loans_received_isValid;
}

double OAICommitteeTotalsPerCycle::getOtherPoliticalCommitteeContributions() const {
    return m_other_political_committee_contributions;
}
void OAICommitteeTotalsPerCycle::setOtherPoliticalCommitteeContributions(const double &other_political_committee_contributions) {
    m_other_political_committee_contributions = other_political_committee_contributions;
    m_other_political_committee_contributions_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_other_political_committee_contributions_Set() const{
    return m_other_political_committee_contributions_isSet;
}

bool OAICommitteeTotalsPerCycle::is_other_political_committee_contributions_Valid() const{
    return m_other_political_committee_contributions_isValid;
}

double OAICommitteeTotalsPerCycle::getOtherReceipts() const {
    return m_other_receipts;
}
void OAICommitteeTotalsPerCycle::setOtherReceipts(const double &other_receipts) {
    m_other_receipts = other_receipts;
    m_other_receipts_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_other_receipts_Set() const{
    return m_other_receipts_isSet;
}

bool OAICommitteeTotalsPerCycle::is_other_receipts_Valid() const{
    return m_other_receipts_isValid;
}

double OAICommitteeTotalsPerCycle::getPartyAndOtherCommitteeContributionsPercent() const {
    return m_party_and_other_committee_contributions_percent;
}
void OAICommitteeTotalsPerCycle::setPartyAndOtherCommitteeContributionsPercent(const double &party_and_other_committee_contributions_percent) {
    m_party_and_other_committee_contributions_percent = party_and_other_committee_contributions_percent;
    m_party_and_other_committee_contributions_percent_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_party_and_other_committee_contributions_percent_Set() const{
    return m_party_and_other_committee_contributions_percent_isSet;
}

bool OAICommitteeTotalsPerCycle::is_party_and_other_committee_contributions_percent_Valid() const{
    return m_party_and_other_committee_contributions_percent_isValid;
}

QString OAICommitteeTotalsPerCycle::getPartyFull() const {
    return m_party_full;
}
void OAICommitteeTotalsPerCycle::setPartyFull(const QString &party_full) {
    m_party_full = party_full;
    m_party_full_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_party_full_Set() const{
    return m_party_full_isSet;
}

bool OAICommitteeTotalsPerCycle::is_party_full_Valid() const{
    return m_party_full_isValid;
}

QString OAICommitteeTotalsPerCycle::getPdfUrl() const {
    return m_pdf_url;
}
void OAICommitteeTotalsPerCycle::setPdfUrl(const QString &pdf_url) {
    m_pdf_url = pdf_url;
    m_pdf_url_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_pdf_url_Set() const{
    return m_pdf_url_isSet;
}

bool OAICommitteeTotalsPerCycle::is_pdf_url_Valid() const{
    return m_pdf_url_isValid;
}

double OAICommitteeTotalsPerCycle::getPoliticalPartyCommitteeContributions() const {
    return m_political_party_committee_contributions;
}
void OAICommitteeTotalsPerCycle::setPoliticalPartyCommitteeContributions(const double &political_party_committee_contributions) {
    m_political_party_committee_contributions = political_party_committee_contributions;
    m_political_party_committee_contributions_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_political_party_committee_contributions_Set() const{
    return m_political_party_committee_contributions_isSet;
}

bool OAICommitteeTotalsPerCycle::is_political_party_committee_contributions_Valid() const{
    return m_political_party_committee_contributions_isValid;
}

double OAICommitteeTotalsPerCycle::getReceipts() const {
    return m_receipts;
}
void OAICommitteeTotalsPerCycle::setReceipts(const double &receipts) {
    m_receipts = receipts;
    m_receipts_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_receipts_Set() const{
    return m_receipts_isSet;
}

bool OAICommitteeTotalsPerCycle::is_receipts_Valid() const{
    return m_receipts_isValid;
}

double OAICommitteeTotalsPerCycle::getRefundedIndividualContributions() const {
    return m_refunded_individual_contributions;
}
void OAICommitteeTotalsPerCycle::setRefundedIndividualContributions(const double &refunded_individual_contributions) {
    m_refunded_individual_contributions = refunded_individual_contributions;
    m_refunded_individual_contributions_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_refunded_individual_contributions_Set() const{
    return m_refunded_individual_contributions_isSet;
}

bool OAICommitteeTotalsPerCycle::is_refunded_individual_contributions_Valid() const{
    return m_refunded_individual_contributions_isValid;
}

double OAICommitteeTotalsPerCycle::getRefundedOtherPoliticalCommitteeContributions() const {
    return m_refunded_other_political_committee_contributions;
}
void OAICommitteeTotalsPerCycle::setRefundedOtherPoliticalCommitteeContributions(const double &refunded_other_political_committee_contributions) {
    m_refunded_other_political_committee_contributions = refunded_other_political_committee_contributions;
    m_refunded_other_political_committee_contributions_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_refunded_other_political_committee_contributions_Set() const{
    return m_refunded_other_political_committee_contributions_isSet;
}

bool OAICommitteeTotalsPerCycle::is_refunded_other_political_committee_contributions_Valid() const{
    return m_refunded_other_political_committee_contributions_isValid;
}

double OAICommitteeTotalsPerCycle::getRefundedPoliticalPartyCommitteeContributions() const {
    return m_refunded_political_party_committee_contributions;
}
void OAICommitteeTotalsPerCycle::setRefundedPoliticalPartyCommitteeContributions(const double &refunded_political_party_committee_contributions) {
    m_refunded_political_party_committee_contributions = refunded_political_party_committee_contributions;
    m_refunded_political_party_committee_contributions_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_refunded_political_party_committee_contributions_Set() const{
    return m_refunded_political_party_committee_contributions_isSet;
}

bool OAICommitteeTotalsPerCycle::is_refunded_political_party_committee_contributions_Valid() const{
    return m_refunded_political_party_committee_contributions_isValid;
}

double OAICommitteeTotalsPerCycle::getRepaymentsLoansMadeByCandidate() const {
    return m_repayments_loans_made_by_candidate;
}
void OAICommitteeTotalsPerCycle::setRepaymentsLoansMadeByCandidate(const double &repayments_loans_made_by_candidate) {
    m_repayments_loans_made_by_candidate = repayments_loans_made_by_candidate;
    m_repayments_loans_made_by_candidate_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_repayments_loans_made_by_candidate_Set() const{
    return m_repayments_loans_made_by_candidate_isSet;
}

bool OAICommitteeTotalsPerCycle::is_repayments_loans_made_by_candidate_Valid() const{
    return m_repayments_loans_made_by_candidate_isValid;
}

double OAICommitteeTotalsPerCycle::getRepaymentsOtherLoans() const {
    return m_repayments_other_loans;
}
void OAICommitteeTotalsPerCycle::setRepaymentsOtherLoans(const double &repayments_other_loans) {
    m_repayments_other_loans = repayments_other_loans;
    m_repayments_other_loans_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_repayments_other_loans_Set() const{
    return m_repayments_other_loans_isSet;
}

bool OAICommitteeTotalsPerCycle::is_repayments_other_loans_Valid() const{
    return m_repayments_other_loans_isValid;
}

QString OAICommitteeTotalsPerCycle::getReportForm() const {
    return m_report_form;
}
void OAICommitteeTotalsPerCycle::setReportForm(const QString &report_form) {
    m_report_form = report_form;
    m_report_form_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_report_form_Set() const{
    return m_report_form_isSet;
}

bool OAICommitteeTotalsPerCycle::is_report_form_Valid() const{
    return m_report_form_isValid;
}

double OAICommitteeTotalsPerCycle::getTotalOffsetsToOperatingExpenditures() const {
    return m_total_offsets_to_operating_expenditures;
}
void OAICommitteeTotalsPerCycle::setTotalOffsetsToOperatingExpenditures(const double &total_offsets_to_operating_expenditures) {
    m_total_offsets_to_operating_expenditures = total_offsets_to_operating_expenditures;
    m_total_offsets_to_operating_expenditures_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_total_offsets_to_operating_expenditures_Set() const{
    return m_total_offsets_to_operating_expenditures_isSet;
}

bool OAICommitteeTotalsPerCycle::is_total_offsets_to_operating_expenditures_Valid() const{
    return m_total_offsets_to_operating_expenditures_isValid;
}

QDate OAICommitteeTotalsPerCycle::getTransactionCoverageDate() const {
    return m_transaction_coverage_date;
}
void OAICommitteeTotalsPerCycle::setTransactionCoverageDate(const QDate &transaction_coverage_date) {
    m_transaction_coverage_date = transaction_coverage_date;
    m_transaction_coverage_date_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_transaction_coverage_date_Set() const{
    return m_transaction_coverage_date_isSet;
}

bool OAICommitteeTotalsPerCycle::is_transaction_coverage_date_Valid() const{
    return m_transaction_coverage_date_isValid;
}

double OAICommitteeTotalsPerCycle::getTransfersFromAffiliatedCommittee() const {
    return m_transfers_from_affiliated_committee;
}
void OAICommitteeTotalsPerCycle::setTransfersFromAffiliatedCommittee(const double &transfers_from_affiliated_committee) {
    m_transfers_from_affiliated_committee = transfers_from_affiliated_committee;
    m_transfers_from_affiliated_committee_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_transfers_from_affiliated_committee_Set() const{
    return m_transfers_from_affiliated_committee_isSet;
}

bool OAICommitteeTotalsPerCycle::is_transfers_from_affiliated_committee_Valid() const{
    return m_transfers_from_affiliated_committee_isValid;
}

double OAICommitteeTotalsPerCycle::getTransfersToOtherAuthorizedCommittee() const {
    return m_transfers_to_other_authorized_committee;
}
void OAICommitteeTotalsPerCycle::setTransfersToOtherAuthorizedCommittee(const double &transfers_to_other_authorized_committee) {
    m_transfers_to_other_authorized_committee = transfers_to_other_authorized_committee;
    m_transfers_to_other_authorized_committee_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_transfers_to_other_authorized_committee_Set() const{
    return m_transfers_to_other_authorized_committee_isSet;
}

bool OAICommitteeTotalsPerCycle::is_transfers_to_other_authorized_committee_Valid() const{
    return m_transfers_to_other_authorized_committee_isValid;
}

QString OAICommitteeTotalsPerCycle::getTreasurerName() const {
    return m_treasurer_name;
}
void OAICommitteeTotalsPerCycle::setTreasurerName(const QString &treasurer_name) {
    m_treasurer_name = treasurer_name;
    m_treasurer_name_isSet = true;
}

bool OAICommitteeTotalsPerCycle::is_treasurer_name_Set() const{
    return m_treasurer_name_isSet;
}

bool OAICommitteeTotalsPerCycle::is_treasurer_name_Valid() const{
    return m_treasurer_name_isValid;
}

bool OAICommitteeTotalsPerCycle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_candidate_contribution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_on_hand_beginning_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_designation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_designation_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committee_type_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contribution_refunds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributions_ie_and_party_expenditures_made_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coverage_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coverage_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cycle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disbursements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exempt_legal_accounting_disbursement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_federal_funds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filing_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filing_frequency_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_f1_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_file_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fundraising_disbursements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_individual_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_individual_contributions_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_individual_itemized_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_individual_unitemized_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_beginning_image_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_cash_on_hand_end_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_debts_owed_by_committee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_debts_owed_to_committee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_report_type_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_report_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loan_repayments_made_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loans_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loans_received_from_candidate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_operating_expenditures_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offsets_to_fundraising_expenditures_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offsets_to_legal_accounting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offsets_to_operating_expenditures_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_expenditures_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_expenditures_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_type_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_disbursements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_loans_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_political_committee_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_receipts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_and_other_committee_contributions_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pdf_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_political_party_committee_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunded_individual_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunded_other_political_committee_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunded_political_party_committee_contributions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repayments_loans_made_by_candidate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repayments_other_loans_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_form_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_offsets_to_operating_expenditures_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_coverage_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfers_from_affiliated_committee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfers_to_other_authorized_committee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_treasurer_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommitteeTotalsPerCycle::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cycle_isValid && true;
}

} // namespace OpenAPI
