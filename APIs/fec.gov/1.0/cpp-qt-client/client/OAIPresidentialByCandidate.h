/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPresidentialByCandidate.h
 *
 * 
 */

#ifndef OAIPresidentialByCandidate_H
#define OAIPresidentialByCandidate_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPresidentialByCandidate : public OAIObject {
public:
    OAIPresidentialByCandidate();
    OAIPresidentialByCandidate(QString json);
    ~OAIPresidentialByCandidate() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCandidateId() const;
    void setCandidateId(const QString &candidate_id);
    bool is_candidate_id_Set() const;
    bool is_candidate_id_Valid() const;

    QString getCandidateLastName() const;
    void setCandidateLastName(const QString &candidate_last_name);
    bool is_candidate_last_name_Set() const;
    bool is_candidate_last_name_Valid() const;

    QString getCandidatePartyAffiliation() const;
    void setCandidatePartyAffiliation(const QString &candidate_party_affiliation);
    bool is_candidate_party_affiliation_Set() const;
    bool is_candidate_party_affiliation_Valid() const;

    QString getContributorState() const;
    void setContributorState(const QString &contributor_state);
    bool is_contributor_state_Set() const;
    bool is_contributor_state_Valid() const;

    qint32 getElectionYear() const;
    void setElectionYear(const qint32 &election_year);
    bool is_election_year_Set() const;
    bool is_election_year_Valid() const;

    double getNetReceipts() const;
    void setNetReceipts(const double &net_receipts);
    bool is_net_receipts_Set() const;
    bool is_net_receipts_Valid() const;

    double getRoundedNetReceipts() const;
    void setRoundedNetReceipts(const double &rounded_net_receipts);
    bool is_rounded_net_receipts_Set() const;
    bool is_rounded_net_receipts_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_candidate_id;
    bool m_candidate_id_isSet;
    bool m_candidate_id_isValid;

    QString m_candidate_last_name;
    bool m_candidate_last_name_isSet;
    bool m_candidate_last_name_isValid;

    QString m_candidate_party_affiliation;
    bool m_candidate_party_affiliation_isSet;
    bool m_candidate_party_affiliation_isValid;

    QString m_contributor_state;
    bool m_contributor_state_isSet;
    bool m_contributor_state_isValid;

    qint32 m_election_year;
    bool m_election_year_isSet;
    bool m_election_year_isValid;

    double m_net_receipts;
    bool m_net_receipts_isSet;
    bool m_net_receipts_isValid;

    double m_rounded_net_receipts;
    bool m_rounded_net_receipts_isSet;
    bool m_rounded_net_receipts_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPresidentialByCandidate)

#endif // OAIPresidentialByCandidate_H
