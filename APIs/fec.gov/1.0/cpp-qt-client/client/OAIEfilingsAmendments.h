/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEfilingsAmendments.h
 *
 * 
 */

#ifndef OAIEfilingsAmendments_H
#define OAIEfilingsAmendments_H

#include <QJsonObject>

#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEfilingsAmendments : public OAIObject {
public:
    OAIEfilingsAmendments();
    OAIEfilingsAmendments(QString json);
    ~OAIEfilingsAmendments() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<double> getAmendmentChain() const;
    void setAmendmentChain(const QList<double> &amendment_chain);
    bool is_amendment_chain_Set() const;
    bool is_amendment_chain_Valid() const;

    double getDepth() const;
    void setDepth(const double &depth);
    bool is_depth_Set() const;
    bool is_depth_Valid() const;

    qint32 getFileNumber() const;
    void setFileNumber(const qint32 &file_number);
    bool is_file_number_Set() const;
    bool is_file_number_Valid() const;

    double getLast() const;
    void setLast(const double &last);
    bool is_last_Set() const;
    bool is_last_Valid() const;

    QList<double> getLongestChain() const;
    void setLongestChain(const QList<double> &longest_chain);
    bool is_longest_chain_Set() const;
    bool is_longest_chain_Valid() const;

    double getMostRecentFiling() const;
    void setMostRecentFiling(const double &most_recent_filing);
    bool is_most_recent_filing_Set() const;
    bool is_most_recent_filing_Valid() const;

    double getPreviousFileNumber() const;
    void setPreviousFileNumber(const double &previous_file_number);
    bool is_previous_file_number_Set() const;
    bool is_previous_file_number_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<double> m_amendment_chain;
    bool m_amendment_chain_isSet;
    bool m_amendment_chain_isValid;

    double m_depth;
    bool m_depth_isSet;
    bool m_depth_isValid;

    qint32 m_file_number;
    bool m_file_number_isSet;
    bool m_file_number_isValid;

    double m_last;
    bool m_last_isSet;
    bool m_last_isValid;

    QList<double> m_longest_chain;
    bool m_longest_chain_isSet;
    bool m_longest_chain_isValid;

    double m_most_recent_filing;
    bool m_most_recent_filing_isSet;
    bool m_most_recent_filing_isValid;

    double m_previous_file_number;
    bool m_previous_file_number_isSet;
    bool m_previous_file_number_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEfilingsAmendments)

#endif // OAIEfilingsAmendments_H
