/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICommitteeTotalsIEOnly.h
 *
 * 
 */

#ifndef OAICommitteeTotalsIEOnly_H
#define OAICommitteeTotalsIEOnly_H

#include <QJsonObject>

#include <QDate>
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICommitteeTotalsIEOnly : public OAIObject {
public:
    OAICommitteeTotalsIEOnly();
    OAICommitteeTotalsIEOnly(QString json);
    ~OAICommitteeTotalsIEOnly() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCommitteeId() const;
    void setCommitteeId(const QString &committee_id);
    bool is_committee_id_Set() const;
    bool is_committee_id_Valid() const;

    QString getCommitteeState() const;
    void setCommitteeState(const QString &committee_state);
    bool is_committee_state_Set() const;
    bool is_committee_state_Valid() const;

    double getContributionsIeAndPartyExpendituresMadePercent() const;
    void setContributionsIeAndPartyExpendituresMadePercent(const double &contributions_ie_and_party_expenditures_made_percent);
    bool is_contributions_ie_and_party_expenditures_made_percent_Set() const;
    bool is_contributions_ie_and_party_expenditures_made_percent_Valid() const;

    QDateTime getCoverageEndDate() const;
    void setCoverageEndDate(const QDateTime &coverage_end_date);
    bool is_coverage_end_date_Set() const;
    bool is_coverage_end_date_Valid() const;

    QDateTime getCoverageStartDate() const;
    void setCoverageStartDate(const QDateTime &coverage_start_date);
    bool is_coverage_start_date_Set() const;
    bool is_coverage_start_date_Valid() const;

    qint32 getCycle() const;
    void setCycle(const qint32 &cycle);
    bool is_cycle_Set() const;
    bool is_cycle_Valid() const;

    QString getFilingFrequency() const;
    void setFilingFrequency(const QString &filing_frequency);
    bool is_filing_frequency_Set() const;
    bool is_filing_frequency_Valid() const;

    QString getFilingFrequencyFull() const;
    void setFilingFrequencyFull(const QString &filing_frequency_full);
    bool is_filing_frequency_full_Set() const;
    bool is_filing_frequency_full_Valid() const;

    QDate getFirstFileDate() const;
    void setFirstFileDate(const QDate &first_file_date);
    bool is_first_file_date_Set() const;
    bool is_first_file_date_Valid() const;

    double getIndividualContributionsPercent() const;
    void setIndividualContributionsPercent(const double &individual_contributions_percent);
    bool is_individual_contributions_percent_Set() const;
    bool is_individual_contributions_percent_Valid() const;

    QString getLastBeginningImageNumber() const;
    void setLastBeginningImageNumber(const QString &last_beginning_image_number);
    bool is_last_beginning_image_number_Set() const;
    bool is_last_beginning_image_number_Valid() const;

    double getLastCashOnHandEndPeriod() const;
    void setLastCashOnHandEndPeriod(const double &last_cash_on_hand_end_period);
    bool is_last_cash_on_hand_end_period_Set() const;
    bool is_last_cash_on_hand_end_period_Valid() const;

    double getOperatingExpendituresPercent() const;
    void setOperatingExpendituresPercent(const double &operating_expenditures_percent);
    bool is_operating_expenditures_percent_Set() const;
    bool is_operating_expenditures_percent_Valid() const;

    double getPartyAndOtherCommitteeContributionsPercent() const;
    void setPartyAndOtherCommitteeContributionsPercent(const double &party_and_other_committee_contributions_percent);
    bool is_party_and_other_committee_contributions_percent_Set() const;
    bool is_party_and_other_committee_contributions_percent_Valid() const;

    QString getPdfUrl() const;
    void setPdfUrl(const QString &pdf_url);
    bool is_pdf_url_Set() const;
    bool is_pdf_url_Valid() const;

    QString getReportForm() const;
    void setReportForm(const QString &report_form);
    bool is_report_form_Set() const;
    bool is_report_form_Valid() const;

    double getTotalIndependentContributions() const;
    void setTotalIndependentContributions(const double &total_independent_contributions);
    bool is_total_independent_contributions_Set() const;
    bool is_total_independent_contributions_Valid() const;

    double getTotalIndependentExpenditures() const;
    void setTotalIndependentExpenditures(const double &total_independent_expenditures);
    bool is_total_independent_expenditures_Set() const;
    bool is_total_independent_expenditures_Valid() const;

    QDate getTransactionCoverageDate() const;
    void setTransactionCoverageDate(const QDate &transaction_coverage_date);
    bool is_transaction_coverage_date_Set() const;
    bool is_transaction_coverage_date_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_committee_id;
    bool m_committee_id_isSet;
    bool m_committee_id_isValid;

    QString m_committee_state;
    bool m_committee_state_isSet;
    bool m_committee_state_isValid;

    double m_contributions_ie_and_party_expenditures_made_percent;
    bool m_contributions_ie_and_party_expenditures_made_percent_isSet;
    bool m_contributions_ie_and_party_expenditures_made_percent_isValid;

    QDateTime m_coverage_end_date;
    bool m_coverage_end_date_isSet;
    bool m_coverage_end_date_isValid;

    QDateTime m_coverage_start_date;
    bool m_coverage_start_date_isSet;
    bool m_coverage_start_date_isValid;

    qint32 m_cycle;
    bool m_cycle_isSet;
    bool m_cycle_isValid;

    QString m_filing_frequency;
    bool m_filing_frequency_isSet;
    bool m_filing_frequency_isValid;

    QString m_filing_frequency_full;
    bool m_filing_frequency_full_isSet;
    bool m_filing_frequency_full_isValid;

    QDate m_first_file_date;
    bool m_first_file_date_isSet;
    bool m_first_file_date_isValid;

    double m_individual_contributions_percent;
    bool m_individual_contributions_percent_isSet;
    bool m_individual_contributions_percent_isValid;

    QString m_last_beginning_image_number;
    bool m_last_beginning_image_number_isSet;
    bool m_last_beginning_image_number_isValid;

    double m_last_cash_on_hand_end_period;
    bool m_last_cash_on_hand_end_period_isSet;
    bool m_last_cash_on_hand_end_period_isValid;

    double m_operating_expenditures_percent;
    bool m_operating_expenditures_percent_isSet;
    bool m_operating_expenditures_percent_isValid;

    double m_party_and_other_committee_contributions_percent;
    bool m_party_and_other_committee_contributions_percent_isSet;
    bool m_party_and_other_committee_contributions_percent_isValid;

    QString m_pdf_url;
    bool m_pdf_url_isSet;
    bool m_pdf_url_isValid;

    QString m_report_form;
    bool m_report_form_isSet;
    bool m_report_form_isValid;

    double m_total_independent_contributions;
    bool m_total_independent_contributions_isSet;
    bool m_total_independent_contributions_isValid;

    double m_total_independent_expenditures;
    bool m_total_independent_expenditures_isSet;
    bool m_total_independent_expenditures_isValid;

    QDate m_transaction_coverage_date;
    bool m_transaction_coverage_date_isSet;
    bool m_transaction_coverage_date_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICommitteeTotalsIEOnly)

#endif // OAICommitteeTotalsIEOnly_H
