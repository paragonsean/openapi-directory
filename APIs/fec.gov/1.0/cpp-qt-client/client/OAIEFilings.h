/**
 * OpenFEC
 * This application programming interface (API) allows you to explore the way candidates and committees fund their campaigns.    The Federal Election Commission (FEC) API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There are a lot of data, and a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in the `/schedule_a/` endpoints.    <b class=\"body\" id=\"getting_started_head\">Getting started with the openFEC API</b><br>    If you would like to use the FEC's API programmatically, you can sign up for your own API key using our form. Alternatively, you can still try out our API without an API key by using the web interface and using DEMO_KEY. Note that when you use the openFEC API you are subject to the [Terms of Service](https://github.com/fecgov/FEC/blob/master/TERMS-OF-SERVICE.md) and [Acceptable Use policy](https://github.com/fecgov/FEC/blob/master/ACCEPTABLE-USE-POLICY.md).    Signing up for an API key will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 7,200 calls an hour (120 calls per minute) to <a href=\"mailto:APIinfo@fec.gov\">APIinfo@fec.gov</a>. You can also ask questions and discuss the data in a community led [group](https://groups.google.com/forum/#!forum/fec-data).    The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [Inspect our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!    <p><br></p> <h2 class=\"title\" id=\"signup_head\">Sign up for an API key</h2> <div id=\"apidatagov_signup\">Loading signup form...</div>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEFilings.h
 *
 * 
 */

#ifndef OAIEFilings_H
#define OAIEFilings_H

#include <QJsonObject>

#include <QDate>
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEFilings : public OAIObject {
public:
    OAIEFilings();
    OAIEFilings(QString json);
    ~OAIEFilings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAmendedBy() const;
    void setAmendedBy(const qint32 &amended_by);
    bool is_amended_by_Set() const;
    bool is_amended_by_Valid() const;

    QList<qint32> getAmendmentChain() const;
    void setAmendmentChain(const QList<qint32> &amendment_chain);
    bool is_amendment_chain_Set() const;
    bool is_amendment_chain_Valid() const;

    qint32 getAmendmentNumber() const;
    void setAmendmentNumber(const qint32 &amendment_number);
    bool is_amendment_number_Set() const;
    bool is_amendment_number_Valid() const;

    qint32 getAmendsFile() const;
    void setAmendsFile(const qint32 &amends_file);
    bool is_amends_file_Set() const;
    bool is_amends_file_Valid() const;

    QString getBeginningImageNumber() const;
    void setBeginningImageNumber(const QString &beginning_image_number);
    bool is_beginning_image_number_Set() const;
    bool is_beginning_image_number_Valid() const;

    QString getCommitteeId() const;
    void setCommitteeId(const QString &committee_id);
    bool is_committee_id_Set() const;
    bool is_committee_id_Valid() const;

    QString getCommitteeName() const;
    void setCommitteeName(const QString &committee_name);
    bool is_committee_name_Set() const;
    bool is_committee_name_Valid() const;

    QDate getCoverageEndDate() const;
    void setCoverageEndDate(const QDate &coverage_end_date);
    bool is_coverage_end_date_Set() const;
    bool is_coverage_end_date_Valid() const;

    QDate getCoverageStartDate() const;
    void setCoverageStartDate(const QDate &coverage_start_date);
    bool is_coverage_start_date_Set() const;
    bool is_coverage_start_date_Valid() const;

    QString getCsvUrl() const;
    void setCsvUrl(const QString &csv_url);
    bool is_csv_url_Set() const;
    bool is_csv_url_Valid() const;

    QString getDocumentDescription() const;
    void setDocumentDescription(const QString &document_description);
    bool is_document_description_Set() const;
    bool is_document_description_Valid() const;

    QString getEndingImageNumber() const;
    void setEndingImageNumber(const QString &ending_image_number);
    bool is_ending_image_number_Set() const;
    bool is_ending_image_number_Valid() const;

    QString getFecFileId() const;
    void setFecFileId(const QString &fec_file_id);
    bool is_fec_file_id_Set() const;
    bool is_fec_file_id_Valid() const;

    QString getFecUrl() const;
    void setFecUrl(const QString &fec_url);
    bool is_fec_url_Set() const;
    bool is_fec_url_Valid() const;

    qint32 getFileNumber() const;
    void setFileNumber(const qint32 &file_number);
    bool is_file_number_Set() const;
    bool is_file_number_Valid() const;

    QDate getFiledDate() const;
    void setFiledDate(const QDate &filed_date);
    bool is_filed_date_Set() const;
    bool is_filed_date_Valid() const;

    QString getFormType() const;
    void setFormType(const QString &form_type);
    bool is_form_type_Set() const;
    bool is_form_type_Valid() const;

    QString getHtmlUrl() const;
    void setHtmlUrl(const QString &html_url);
    bool is_html_url_Set() const;
    bool is_html_url_Valid() const;

    bool isIsAmended() const;
    void setIsAmended(const bool &is_amended);
    bool is_is_amended_Set() const;
    bool is_is_amended_Valid() const;

    QDateTime getLoadTimestamp() const;
    void setLoadTimestamp(const QDateTime &load_timestamp);
    bool is_load_timestamp_Set() const;
    bool is_load_timestamp_Valid() const;

    bool isMostRecent() const;
    void setMostRecent(const bool &most_recent);
    bool is_most_recent_Set() const;
    bool is_most_recent_Valid() const;

    qint32 getMostRecentFiling() const;
    void setMostRecentFiling(const qint32 &most_recent_filing);
    bool is_most_recent_filing_Set() const;
    bool is_most_recent_filing_Valid() const;

    QString getPdfUrl() const;
    void setPdfUrl(const QString &pdf_url);
    bool is_pdf_url_Set() const;
    bool is_pdf_url_Valid() const;

    QDateTime getReceiptDate() const;
    void setReceiptDate(const QDateTime &receipt_date);
    bool is_receipt_date_Set() const;
    bool is_receipt_date_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_amended_by;
    bool m_amended_by_isSet;
    bool m_amended_by_isValid;

    QList<qint32> m_amendment_chain;
    bool m_amendment_chain_isSet;
    bool m_amendment_chain_isValid;

    qint32 m_amendment_number;
    bool m_amendment_number_isSet;
    bool m_amendment_number_isValid;

    qint32 m_amends_file;
    bool m_amends_file_isSet;
    bool m_amends_file_isValid;

    QString m_beginning_image_number;
    bool m_beginning_image_number_isSet;
    bool m_beginning_image_number_isValid;

    QString m_committee_id;
    bool m_committee_id_isSet;
    bool m_committee_id_isValid;

    QString m_committee_name;
    bool m_committee_name_isSet;
    bool m_committee_name_isValid;

    QDate m_coverage_end_date;
    bool m_coverage_end_date_isSet;
    bool m_coverage_end_date_isValid;

    QDate m_coverage_start_date;
    bool m_coverage_start_date_isSet;
    bool m_coverage_start_date_isValid;

    QString m_csv_url;
    bool m_csv_url_isSet;
    bool m_csv_url_isValid;

    QString m_document_description;
    bool m_document_description_isSet;
    bool m_document_description_isValid;

    QString m_ending_image_number;
    bool m_ending_image_number_isSet;
    bool m_ending_image_number_isValid;

    QString m_fec_file_id;
    bool m_fec_file_id_isSet;
    bool m_fec_file_id_isValid;

    QString m_fec_url;
    bool m_fec_url_isSet;
    bool m_fec_url_isValid;

    qint32 m_file_number;
    bool m_file_number_isSet;
    bool m_file_number_isValid;

    QDate m_filed_date;
    bool m_filed_date_isSet;
    bool m_filed_date_isValid;

    QString m_form_type;
    bool m_form_type_isSet;
    bool m_form_type_isValid;

    QString m_html_url;
    bool m_html_url_isSet;
    bool m_html_url_isValid;

    bool m_is_amended;
    bool m_is_amended_isSet;
    bool m_is_amended_isValid;

    QDateTime m_load_timestamp;
    bool m_load_timestamp_isSet;
    bool m_load_timestamp_isValid;

    bool m_most_recent;
    bool m_most_recent_isSet;
    bool m_most_recent_isValid;

    qint32 m_most_recent_filing;
    bool m_most_recent_filing_isSet;
    bool m_most_recent_filing_isValid;

    QString m_pdf_url;
    bool m_pdf_url_isSet;
    bool m_pdf_url_isValid;

    QDateTime m_receipt_date;
    bool m_receipt_date_isSet;
    bool m_receipt_date_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEFilings)

#endif // OAIEFilings_H
